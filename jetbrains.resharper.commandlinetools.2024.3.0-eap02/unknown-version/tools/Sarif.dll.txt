[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.Address : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private int <AbsoluteAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RelativeAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullyQualifiedName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <OffsetFromParent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParentIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<Address> ValueComparer { get; }
    public static IComparer`1<Address> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
[DefaultValueAttribute("-1")]
[JsonPropertyAttribute]
public int AbsoluteAddress { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public Nullable`1<int> RelativeAddress { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> Length { get; public set; }
    [DataMemberAttribute]
public string Kind { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string FullyQualifiedName { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> OffsetFromParent { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("-1")]
[JsonPropertyAttribute]
public int Index { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("-1")]
[JsonPropertyAttribute]
public int ParentIndex { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public Address(int absoluteAddress, Nullable`1<int> relativeAddress, Nullable`1<int> length, string kind, string name, string fullyQualifiedName, Nullable`1<int> offsetFromParent, int index, int parentIndex, IDictionary`2<string, SerializedPropertyInfo> properties);
    public Address(Address other);
    public static IEqualityComparer`1<Address> get_ValueComparer();
    public bool ValueEquals(Address other);
    public int ValueGetHashCode();
    public static IComparer`1<Address> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual int get_AbsoluteAddress();
    [CompilerGeneratedAttribute]
public virtual void set_AbsoluteAddress(int value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_RelativeAddress();
    [CompilerGeneratedAttribute]
public virtual void set_RelativeAddress(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_Length();
    [CompilerGeneratedAttribute]
public virtual void set_Length(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual string get_Kind();
    [CompilerGeneratedAttribute]
public virtual void set_Kind(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_FullyQualifiedName();
    [CompilerGeneratedAttribute]
public virtual void set_FullyQualifiedName(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_OffsetFromParent();
    [CompilerGeneratedAttribute]
public virtual void set_OffsetFromParent(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual int get_Index();
    [CompilerGeneratedAttribute]
public virtual void set_Index(int value);
    [CompilerGeneratedAttribute]
public virtual int get_ParentIndex();
    [CompilerGeneratedAttribute]
public virtual void set_ParentIndex(int value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual Address DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(int absoluteAddress, Nullable`1<int> relativeAddress, Nullable`1<int> length, string kind, string name, string fullyQualifiedName, Nullable`1<int> offsetFromParent, int index, int parentIndex, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.AddressComparer : object {
    internal static AddressComparer Instance;
    private static AddressComparer();
    public sealed virtual int Compare(Address left, Address right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.AddressEqualityComparer : object {
    internal static AddressEqualityComparer Instance;
    private static AddressEqualityComparer();
    public sealed virtual bool Equals(Address left, Address right);
    public sealed virtual int GetHashCode(Address obj);
}
public class Microsoft.CodeAnalysis.Sarif.AggregatingArtifactsProvider : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IArtifactProvider> <Providers>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IEnumeratedArtifact> <Skipped>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    public IEnumerable`1<IArtifactProvider> Providers { get; public set; }
    public IEnumerable`1<IEnumeratedArtifact> Artifacts { get; public set; }
    public ICollection`1<IEnumeratedArtifact> Skipped { get; public set; }
    public IFileSystem FileSystem { get; public set; }
    public AggregatingArtifactsProvider(IFileSystem fileSystem);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IArtifactProvider> get_Providers();
    [CompilerGeneratedAttribute]
public void set_Providers(IEnumerable`1<IArtifactProvider> value);
    [IteratorStateMachineAttribute("Microsoft.CodeAnalysis.Sarif.AggregatingArtifactsProvider/<get_Artifacts>d__6")]
public sealed virtual IEnumerable`1<IEnumeratedArtifact> get_Artifacts();
    public sealed virtual void set_Artifacts(IEnumerable`1<IEnumeratedArtifact> value);
    [CompilerGeneratedAttribute]
public ICollection`1<IEnumeratedArtifact> get_Skipped();
    [CompilerGeneratedAttribute]
public void set_Skipped(ICollection`1<IEnumeratedArtifact> value);
    [CompilerGeneratedAttribute]
public sealed virtual IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileSystem(IFileSystem value);
}
public abstract class Microsoft.CodeAnalysis.Sarif.AnalyzeContextBase : object {
    [CompilerGeneratedAttribute]
private IList`1<VersionControlDetails> <VersionControlProvenance>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <InvocationPropertiesToLog>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <PropertiesToLog>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <InsertProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Quiet>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private IArtifactProvider <TargetsProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumeratedArtifact <CurrentTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MimeType>k__BackingField;
    [CompilerGeneratedAttribute]
private HashData <Hashes>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Exception> <RuntimeExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsValidAnalysisTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private ReportingDescriptor <Rule>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertiesDictionary <Policy>k__BackingField;
    [CompilerGeneratedAttribute]
private IAnalysisLogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimeConditions <RuntimeErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AnalysisComplete>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <CompiledGlobalFileDenyRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceEventSession <TraceEventSession>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigurationFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private static PerLanguageOption`1<int> <ChannelSizeProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static PerLanguageOption`1<Guid> <AutomationGuidProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static PerLanguageOption`1<string> <AutomationIdProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static PerLanguageOption`1<string> <BaselineFilePathProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static PerLanguageOption`1<string> <OutputFilePathProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static PerLanguageOption`1<string> <EventsFilePathProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static PerLanguageOption`1<string> <PostUriProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static PerLanguageOption`1<string> <OutputConfigurationFilePathProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static PerLanguageOption`1<OptionallyEmittedData> <DataToInsertProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static PerLanguageOption`1<OptionallyEmittedData> <DataToRemoveProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static PerLanguageOption`1<StringSet> <TracesProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static PerLanguageOption`1<StringSet> <PluginFilePathsProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static PerLanguageOption`1<StringSet> <TargetFileSpecifiersProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static PerLanguageOption`1<FailureLevelSet> <FailureLevelsProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static PerLanguageOption`1<ResultKindSet> <ResultKindsProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static PerLanguageOption`1<RuleKindSet> <RuleKindsProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static PerLanguageOption`1<FilePersistenceOptions> <OutputFileOptionsProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static PerLanguageOption`1<bool> <RichReturnCodeProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static PerLanguageOption`1<bool> <RecurseProperty>k__BackingField;
    private static int DefaultMaxFileSizeInKilobytes;
    [CompilerGeneratedAttribute]
private static PerLanguageOption`1<long> <MaxFileSizeInKilobytesProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static PerLanguageOption`1<int> <EventsBufferSizeInMegabytesProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static PerLanguageOption`1<int> <TimeoutInMillisecondsProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static PerLanguageOption`1<int> <ThreadsProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static PerLanguageOption`1<string> <GlobalFilePathDenyRegexProperty>k__BackingField;
    public IList`1<VersionControlDetails> VersionControlProvenance { get; public set; }
    public ISet`1<string> InvocationPropertiesToLog { get; public set; }
    public ISet`1<string> PropertiesToLog { get; public set; }
    public ISet`1<string> InsertProperties { get; public set; }
    public bool Quiet { get; public set; }
    public IFileSystem FileSystem { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    public IArtifactProvider TargetsProvider { get; public set; }
    public IEnumeratedArtifact CurrentTarget { get; public set; }
    public string MimeType { get; public set; }
    public HashData Hashes { get; public set; }
    public IList`1<Exception> RuntimeExceptions { get; public set; }
    public bool IsValidAnalysisTarget { get; public set; }
    public ReportingDescriptor Rule { get; public set; }
    public PropertiesDictionary Policy { get; public set; }
    public IAnalysisLogger Logger { get; public set; }
    public RuntimeConditions RuntimeErrors { get; public set; }
    public bool AnalysisComplete { get; public set; }
    public bool Inline { get; }
    public bool Minify { get; }
    public bool Optimize { get; }
    public bool PrettyPrint { get; }
    public bool ForceOverwrite { get; }
    public Regex CompiledGlobalFileDenyRegex { get; public set; }
    public TraceEventSession TraceEventSession { get; public set; }
    public string GlobalFilePathDenyRegex { get; public set; }
    public ISet`1<string> PluginFilePaths { get; public set; }
    public string PostUri { get; public set; }
    public int ChannelSize { get; public set; }
    public Guid AutomationGuid { get; public set; }
    public string AutomationId { get; public set; }
    public FilePersistenceOptions OutputFileOptions { get; public set; }
    public string BaselineFilePath { get; public set; }
    public string OutputFilePath { get; public set; }
    public string ConfigurationFilePath { get; public set; }
    public string OutputConfigurationFilePath { get; public set; }
    public string EventsFilePath { get; public set; }
    public OptionallyEmittedData DataToInsert { get; public set; }
    public OptionallyEmittedData DataToRemove { get; public set; }
    public ISet`1<string> Traces { get; public set; }
    public ISet`1<string> TargetFileSpecifiers { get; public set; }
    public FailureLevelSet FailureLevels { get; public set; }
    public ResultKindSet ResultKinds { get; public set; }
    public RuleKindSet RuleKinds { get; public set; }
    public bool RichReturnCode { get; public set; }
    public bool Recurse { get; public set; }
    public int TimeoutInMilliseconds { get; public set; }
    public int Threads { get; public set; }
    public long MaxFileSizeInKilobytes { get; public set; }
    public int EventsBufferSizeInMegabytes { get; public set; }
    public static PerLanguageOption`1<int> ChannelSizeProperty { get; }
    public static PerLanguageOption`1<Guid> AutomationGuidProperty { get; }
    public static PerLanguageOption`1<string> AutomationIdProperty { get; }
    public static PerLanguageOption`1<string> BaselineFilePathProperty { get; }
    public static PerLanguageOption`1<string> OutputFilePathProperty { get; }
    public static PerLanguageOption`1<string> EventsFilePathProperty { get; }
    public static PerLanguageOption`1<string> PostUriProperty { get; }
    public static PerLanguageOption`1<string> OutputConfigurationFilePathProperty { get; }
    public static PerLanguageOption`1<OptionallyEmittedData> DataToInsertProperty { get; }
    public static PerLanguageOption`1<OptionallyEmittedData> DataToRemoveProperty { get; }
    public static PerLanguageOption`1<StringSet> TracesProperty { get; }
    public static PerLanguageOption`1<StringSet> PluginFilePathsProperty { get; }
    public static PerLanguageOption`1<StringSet> TargetFileSpecifiersProperty { get; }
    public static PerLanguageOption`1<FailureLevelSet> FailureLevelsProperty { get; }
    public static PerLanguageOption`1<ResultKindSet> ResultKindsProperty { get; }
    public static PerLanguageOption`1<RuleKindSet> RuleKindsProperty { get; }
    public static PerLanguageOption`1<FilePersistenceOptions> OutputFileOptionsProperty { get; }
    public static PerLanguageOption`1<bool> RichReturnCodeProperty { get; }
    public static PerLanguageOption`1<bool> RecurseProperty { get; }
    public static PerLanguageOption`1<long> MaxFileSizeInKilobytesProperty { get; }
    public static PerLanguageOption`1<int> EventsBufferSizeInMegabytesProperty { get; }
    public static PerLanguageOption`1<int> TimeoutInMillisecondsProperty { get; }
    public static PerLanguageOption`1<int> ThreadsProperty { get; }
    public static PerLanguageOption`1<string> GlobalFilePathDenyRegexProperty { get; }
    private static AnalyzeContextBase();
    public virtual IEnumerable`1<IOption> GetOptions();
    [CompilerGeneratedAttribute]
public virtual IList`1<VersionControlDetails> get_VersionControlProvenance();
    [CompilerGeneratedAttribute]
public virtual void set_VersionControlProvenance(IList`1<VersionControlDetails> value);
    [CompilerGeneratedAttribute]
public virtual ISet`1<string> get_InvocationPropertiesToLog();
    [CompilerGeneratedAttribute]
public virtual void set_InvocationPropertiesToLog(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public virtual ISet`1<string> get_PropertiesToLog();
    [CompilerGeneratedAttribute]
public virtual void set_PropertiesToLog(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public virtual ISet`1<string> get_InsertProperties();
    [CompilerGeneratedAttribute]
public virtual void set_InsertProperties(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public virtual bool get_Quiet();
    [CompilerGeneratedAttribute]
public virtual void set_Quiet(bool value);
    [CompilerGeneratedAttribute]
public virtual IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
public virtual void set_FileSystem(IFileSystem value);
    [CompilerGeneratedAttribute]
public virtual CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public virtual void set_CancellationToken(CancellationToken value);
    [CompilerGeneratedAttribute]
public virtual IArtifactProvider get_TargetsProvider();
    [CompilerGeneratedAttribute]
public virtual void set_TargetsProvider(IArtifactProvider value);
    [CompilerGeneratedAttribute]
public virtual IEnumeratedArtifact get_CurrentTarget();
    [CompilerGeneratedAttribute]
public virtual void set_CurrentTarget(IEnumeratedArtifact value);
    [CompilerGeneratedAttribute]
public virtual string get_MimeType();
    [CompilerGeneratedAttribute]
public virtual void set_MimeType(string value);
    [CompilerGeneratedAttribute]
public virtual HashData get_Hashes();
    [CompilerGeneratedAttribute]
public virtual void set_Hashes(HashData value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Exception> get_RuntimeExceptions();
    [CompilerGeneratedAttribute]
public virtual void set_RuntimeExceptions(IList`1<Exception> value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsValidAnalysisTarget();
    [CompilerGeneratedAttribute]
public virtual void set_IsValidAnalysisTarget(bool value);
    [CompilerGeneratedAttribute]
public virtual ReportingDescriptor get_Rule();
    [CompilerGeneratedAttribute]
public virtual void set_Rule(ReportingDescriptor value);
    [CompilerGeneratedAttribute]
public sealed virtual PropertiesDictionary get_Policy();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Policy(PropertiesDictionary value);
    [CompilerGeneratedAttribute]
public virtual IAnalysisLogger get_Logger();
    [CompilerGeneratedAttribute]
public virtual void set_Logger(IAnalysisLogger value);
    [CompilerGeneratedAttribute]
public virtual RuntimeConditions get_RuntimeErrors();
    [CompilerGeneratedAttribute]
public virtual void set_RuntimeErrors(RuntimeConditions value);
    [CompilerGeneratedAttribute]
public virtual bool get_AnalysisComplete();
    [CompilerGeneratedAttribute]
public virtual void set_AnalysisComplete(bool value);
    public bool get_Inline();
    public bool get_Minify();
    public bool get_Optimize();
    public bool get_PrettyPrint();
    public bool get_ForceOverwrite();
    [CompilerGeneratedAttribute]
public Regex get_CompiledGlobalFileDenyRegex();
    [CompilerGeneratedAttribute]
public void set_CompiledGlobalFileDenyRegex(Regex value);
    [CompilerGeneratedAttribute]
public TraceEventSession get_TraceEventSession();
    [CompilerGeneratedAttribute]
public void set_TraceEventSession(TraceEventSession value);
    public string get_GlobalFilePathDenyRegex();
    public void set_GlobalFilePathDenyRegex(string value);
    public virtual ISet`1<string> get_PluginFilePaths();
    public virtual void set_PluginFilePaths(ISet`1<string> value);
    public virtual string get_PostUri();
    public virtual void set_PostUri(string value);
    public virtual int get_ChannelSize();
    public virtual void set_ChannelSize(int value);
    public virtual Guid get_AutomationGuid();
    public virtual void set_AutomationGuid(Guid value);
    public virtual string get_AutomationId();
    public virtual void set_AutomationId(string value);
    public sealed virtual FilePersistenceOptions get_OutputFileOptions();
    public sealed virtual void set_OutputFileOptions(FilePersistenceOptions value);
    public sealed virtual string get_BaselineFilePath();
    public sealed virtual void set_BaselineFilePath(string value);
    public sealed virtual string get_OutputFilePath();
    public sealed virtual void set_OutputFilePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConfigurationFilePath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConfigurationFilePath(string value);
    public string get_OutputConfigurationFilePath();
    public void set_OutputConfigurationFilePath(string value);
    public sealed virtual string get_EventsFilePath();
    public sealed virtual void set_EventsFilePath(string value);
    public sealed virtual OptionallyEmittedData get_DataToInsert();
    public sealed virtual void set_DataToInsert(OptionallyEmittedData value);
    public sealed virtual OptionallyEmittedData get_DataToRemove();
    public sealed virtual void set_DataToRemove(OptionallyEmittedData value);
    public sealed virtual ISet`1<string> get_Traces();
    public sealed virtual void set_Traces(ISet`1<string> value);
    public sealed virtual ISet`1<string> get_TargetFileSpecifiers();
    public sealed virtual void set_TargetFileSpecifiers(ISet`1<string> value);
    public sealed virtual FailureLevelSet get_FailureLevels();
    public sealed virtual void set_FailureLevels(FailureLevelSet value);
    public sealed virtual ResultKindSet get_ResultKinds();
    public sealed virtual void set_ResultKinds(ResultKindSet value);
    public sealed virtual RuleKindSet get_RuleKinds();
    public sealed virtual void set_RuleKinds(RuleKindSet value);
    public virtual bool get_RichReturnCode();
    public virtual void set_RichReturnCode(bool value);
    public sealed virtual bool get_Recurse();
    public sealed virtual void set_Recurse(bool value);
    public sealed virtual int get_TimeoutInMilliseconds();
    public sealed virtual void set_TimeoutInMilliseconds(int value);
    public sealed virtual int get_Threads();
    public sealed virtual void set_Threads(int value);
    public sealed virtual long get_MaxFileSizeInKilobytes();
    public sealed virtual void set_MaxFileSizeInKilobytes(long value);
    public int get_EventsBufferSizeInMegabytes();
    public void set_EventsBufferSizeInMegabytes(int value);
    public virtual void Dispose();
    [CompilerGeneratedAttribute]
public static PerLanguageOption`1<int> get_ChannelSizeProperty();
    [CompilerGeneratedAttribute]
public static PerLanguageOption`1<Guid> get_AutomationGuidProperty();
    [CompilerGeneratedAttribute]
public static PerLanguageOption`1<string> get_AutomationIdProperty();
    [CompilerGeneratedAttribute]
public static PerLanguageOption`1<string> get_BaselineFilePathProperty();
    [CompilerGeneratedAttribute]
public static PerLanguageOption`1<string> get_OutputFilePathProperty();
    [CompilerGeneratedAttribute]
public static PerLanguageOption`1<string> get_EventsFilePathProperty();
    [CompilerGeneratedAttribute]
public static PerLanguageOption`1<string> get_PostUriProperty();
    [CompilerGeneratedAttribute]
public static PerLanguageOption`1<string> get_OutputConfigurationFilePathProperty();
    [CompilerGeneratedAttribute]
public static PerLanguageOption`1<OptionallyEmittedData> get_DataToInsertProperty();
    [CompilerGeneratedAttribute]
public static PerLanguageOption`1<OptionallyEmittedData> get_DataToRemoveProperty();
    [CompilerGeneratedAttribute]
public static PerLanguageOption`1<StringSet> get_TracesProperty();
    [CompilerGeneratedAttribute]
public static PerLanguageOption`1<StringSet> get_PluginFilePathsProperty();
    [CompilerGeneratedAttribute]
public static PerLanguageOption`1<StringSet> get_TargetFileSpecifiersProperty();
    [CompilerGeneratedAttribute]
public static PerLanguageOption`1<FailureLevelSet> get_FailureLevelsProperty();
    [CompilerGeneratedAttribute]
public static PerLanguageOption`1<ResultKindSet> get_ResultKindsProperty();
    [CompilerGeneratedAttribute]
public static PerLanguageOption`1<RuleKindSet> get_RuleKindsProperty();
    [CompilerGeneratedAttribute]
public static PerLanguageOption`1<FilePersistenceOptions> get_OutputFileOptionsProperty();
    [CompilerGeneratedAttribute]
public static PerLanguageOption`1<bool> get_RichReturnCodeProperty();
    [CompilerGeneratedAttribute]
public static PerLanguageOption`1<bool> get_RecurseProperty();
    [CompilerGeneratedAttribute]
public static PerLanguageOption`1<long> get_MaxFileSizeInKilobytesProperty();
    [CompilerGeneratedAttribute]
public static PerLanguageOption`1<int> get_EventsBufferSizeInMegabytesProperty();
    [CompilerGeneratedAttribute]
public static PerLanguageOption`1<int> get_TimeoutInMillisecondsProperty();
    [CompilerGeneratedAttribute]
public static PerLanguageOption`1<int> get_ThreadsProperty();
    [CompilerGeneratedAttribute]
public static PerLanguageOption`1<string> get_GlobalFilePathDenyRegexProperty();
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.Artifact : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private Message <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private ArtifactLocation <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParentIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private ArtifactRoles <Roles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MimeType>k__BackingField;
    [CompilerGeneratedAttribute]
private ArtifactContent <Contents>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Hashes>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastModifiedTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<Artifact> ValueComparer { get; }
    public static IComparer`1<Artifact> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public Message Description { get; public set; }
    [DataMemberAttribute]
public ArtifactLocation Location { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("-1")]
[JsonPropertyAttribute]
public int ParentIndex { get; public set; }
    [DataMemberAttribute]
public int Offset { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("-1")]
[JsonPropertyAttribute]
public int Length { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.FlagsEnumConverter")]
public ArtifactRoles Roles { get; public set; }
    [DataMemberAttribute]
public string MimeType { get; public set; }
    [DataMemberAttribute]
public ArtifactContent Contents { get; public set; }
    [DataMemberAttribute]
public string Encoding { get; public set; }
    [DataMemberAttribute]
public string SourceLanguage { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, string> Hashes { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.DateTimeConverter")]
public DateTime LastModifiedTimeUtc { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public Artifact(Message description, ArtifactLocation location, int parentIndex, int offset, int length, ArtifactRoles roles, string mimeType, ArtifactContent contents, string encoding, string sourceLanguage, IDictionary`2<string, string> hashes, DateTime lastModifiedTimeUtc, IDictionary`2<string, SerializedPropertyInfo> properties);
    public Artifact(Artifact other);
    public static IEqualityComparer`1<Artifact> get_ValueComparer();
    public bool ValueEquals(Artifact other);
    public int ValueGetHashCode();
    public static IComparer`1<Artifact> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual Message get_Description();
    [CompilerGeneratedAttribute]
public virtual void set_Description(Message value);
    [CompilerGeneratedAttribute]
public virtual ArtifactLocation get_Location();
    [CompilerGeneratedAttribute]
public virtual void set_Location(ArtifactLocation value);
    [CompilerGeneratedAttribute]
public virtual int get_ParentIndex();
    [CompilerGeneratedAttribute]
public virtual void set_ParentIndex(int value);
    [CompilerGeneratedAttribute]
public virtual int get_Offset();
    [CompilerGeneratedAttribute]
public virtual void set_Offset(int value);
    [CompilerGeneratedAttribute]
public virtual int get_Length();
    [CompilerGeneratedAttribute]
public virtual void set_Length(int value);
    [CompilerGeneratedAttribute]
public virtual ArtifactRoles get_Roles();
    [CompilerGeneratedAttribute]
public virtual void set_Roles(ArtifactRoles value);
    [CompilerGeneratedAttribute]
public virtual string get_MimeType();
    [CompilerGeneratedAttribute]
public virtual void set_MimeType(string value);
    [CompilerGeneratedAttribute]
public virtual ArtifactContent get_Contents();
    [CompilerGeneratedAttribute]
public virtual void set_Contents(ArtifactContent value);
    [CompilerGeneratedAttribute]
public virtual string get_Encoding();
    [CompilerGeneratedAttribute]
public virtual void set_Encoding(string value);
    [CompilerGeneratedAttribute]
public virtual string get_SourceLanguage();
    [CompilerGeneratedAttribute]
public virtual void set_SourceLanguage(string value);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, string> get_Hashes();
    [CompilerGeneratedAttribute]
public virtual void set_Hashes(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_LastModifiedTimeUtc();
    [CompilerGeneratedAttribute]
public virtual void set_LastModifiedTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual Artifact DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(Message description, ArtifactLocation location, int parentIndex, int offset, int length, ArtifactRoles roles, string mimeType, ArtifactContent contents, string encoding, string sourceLanguage, IDictionary`2<string, string> hashes, DateTime lastModifiedTimeUtc, IDictionary`2<string, SerializedPropertyInfo> properties);
    public static Artifact Create(Uri uri, OptionallyEmittedData dataToInsert, Encoding encoding, HashData hashData, IFileSystem fileSystem);
    private static ArtifactContent GetEncodedFileContents(IFileSystem fileSystem, string filePath, string mimeType, Encoding inputFileEncoding);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.ArtifactChange : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private ArtifactLocation <ArtifactLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Replacement> <Replacements>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<ArtifactChange> ValueComparer { get; }
    public static IComparer`1<ArtifactChange> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public ArtifactLocation ArtifactLocation { get; public set; }
    [DataMemberAttribute]
public IList`1<Replacement> Replacements { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public ArtifactChange(ArtifactLocation artifactLocation, IEnumerable`1<Replacement> replacements, IDictionary`2<string, SerializedPropertyInfo> properties);
    public ArtifactChange(ArtifactChange other);
    public static IEqualityComparer`1<ArtifactChange> get_ValueComparer();
    public bool ValueEquals(ArtifactChange other);
    public int ValueGetHashCode();
    public static IComparer`1<ArtifactChange> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual ArtifactLocation get_ArtifactLocation();
    [CompilerGeneratedAttribute]
public virtual void set_ArtifactLocation(ArtifactLocation value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Replacement> get_Replacements();
    [CompilerGeneratedAttribute]
public virtual void set_Replacements(IList`1<Replacement> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual ArtifactChange DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(ArtifactLocation artifactLocation, IEnumerable`1<Replacement> replacements, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ArtifactChangeComparer : object {
    internal static ArtifactChangeComparer Instance;
    private static ArtifactChangeComparer();
    public sealed virtual int Compare(ArtifactChange left, ArtifactChange right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ArtifactChangeEqualityComparer : object {
    internal static ArtifactChangeEqualityComparer Instance;
    private static ArtifactChangeEqualityComparer();
    public sealed virtual bool Equals(ArtifactChange left, ArtifactChange right);
    public sealed virtual int GetHashCode(ArtifactChange obj);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ArtifactComparer : object {
    internal static ArtifactComparer Instance;
    private static ArtifactComparer();
    public sealed virtual int Compare(Artifact left, Artifact right);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.ArtifactContent : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Binary>k__BackingField;
    [CompilerGeneratedAttribute]
private MultiformatMessageString <Rendered>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<ArtifactContent> ValueComparer { get; }
    public static IComparer`1<ArtifactContent> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public string Text { get; public set; }
    [DataMemberAttribute]
public string Binary { get; public set; }
    [DataMemberAttribute]
public MultiformatMessageString Rendered { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public ArtifactContent(string text, string binary, MultiformatMessageString rendered, IDictionary`2<string, SerializedPropertyInfo> properties);
    public ArtifactContent(ArtifactContent other);
    public static IEqualityComparer`1<ArtifactContent> get_ValueComparer();
    public bool ValueEquals(ArtifactContent other);
    public int ValueGetHashCode();
    public static IComparer`1<ArtifactContent> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    [CompilerGeneratedAttribute]
public virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Binary();
    [CompilerGeneratedAttribute]
public virtual void set_Binary(string value);
    [CompilerGeneratedAttribute]
public virtual MultiformatMessageString get_Rendered();
    [CompilerGeneratedAttribute]
public virtual void set_Rendered(MultiformatMessageString value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual ArtifactContent DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(string text, string binary, MultiformatMessageString rendered, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ArtifactContentComparer : object {
    internal static ArtifactContentComparer Instance;
    private static ArtifactContentComparer();
    public sealed virtual int Compare(ArtifactContent left, ArtifactContent right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ArtifactContentEqualityComparer : object {
    internal static ArtifactContentEqualityComparer Instance;
    private static ArtifactContentEqualityComparer();
    public sealed virtual bool Equals(ArtifactContent left, ArtifactContent right);
    public sealed virtual int GetHashCode(ArtifactContent obj);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ArtifactEqualityComparer : object {
    internal static ArtifactEqualityComparer Instance;
    private static ArtifactEqualityComparer();
    public sealed virtual bool Equals(Artifact left, Artifact right);
    public sealed virtual int GetHashCode(Artifact obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.ArtifactLocation : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UriBaseId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private Message <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<ArtifactLocation> ValueComparer { get; }
    public static IComparer`1<ArtifactLocation> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.UriConverter")]
public Uri Uri { get; public set; }
    [DataMemberAttribute]
public string UriBaseId { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("-1")]
[JsonPropertyAttribute]
public int Index { get; public set; }
    [DataMemberAttribute]
public Message Description { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public ArtifactLocation(Uri uri, string uriBaseId, int index, Message description, IDictionary`2<string, SerializedPropertyInfo> properties);
    public ArtifactLocation(ArtifactLocation other);
    public static IEqualityComparer`1<ArtifactLocation> get_ValueComparer();
    public bool ValueEquals(ArtifactLocation other);
    public int ValueGetHashCode();
    public static IComparer`1<ArtifactLocation> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual Uri get_Uri();
    [CompilerGeneratedAttribute]
public virtual void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public virtual string get_UriBaseId();
    [CompilerGeneratedAttribute]
public virtual void set_UriBaseId(string value);
    [CompilerGeneratedAttribute]
public virtual int get_Index();
    [CompilerGeneratedAttribute]
public virtual void set_Index(int value);
    [CompilerGeneratedAttribute]
public virtual Message get_Description();
    [CompilerGeneratedAttribute]
public virtual void set_Description(Message value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual ArtifactLocation DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(Uri uri, string uriBaseId, int index, Message description, IDictionary`2<string, SerializedPropertyInfo> properties);
    public bool TryReconstructAbsoluteUri(IDictionary`2<string, ArtifactLocation> originalUriBaseIds, Uri& resolvedUri);
    public static ArtifactLocation CreateFromFilesDictionaryKey(string key, string parentKey);
    public ArtifactLocation Resolve(Run run);
    public Location ToLocation(int lineNumber, int column, int length, int offset);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ArtifactLocationComparer : object {
    internal static ArtifactLocationComparer Instance;
    private static ArtifactLocationComparer();
    public sealed virtual int Compare(ArtifactLocation left, ArtifactLocation right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ArtifactLocationEqualityComparer : object {
    internal static ArtifactLocationEqualityComparer Instance;
    private static ArtifactLocationEqualityComparer();
    public sealed virtual bool Equals(ArtifactLocation left, ArtifactLocation right);
    public sealed virtual int GetHashCode(ArtifactLocation obj);
}
public class Microsoft.CodeAnalysis.Sarif.ArtifactProvider : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IEnumeratedArtifact> <Artifacts>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    public IEnumerable`1<IEnumeratedArtifact> Artifacts { get; public set; }
    public IFileSystem FileSystem { get; public set; }
    internal ArtifactProvider(IFileSystem fileSystem);
    public ArtifactProvider(IEnumerable`1<IEnumeratedArtifact> artifacts);
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<IEnumeratedArtifact> get_Artifacts();
    [CompilerGeneratedAttribute]
public virtual void set_Artifacts(IEnumerable`1<IEnumeratedArtifact> value);
    [CompilerGeneratedAttribute]
public sealed virtual IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileSystem(IFileSystem value);
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public enum Microsoft.CodeAnalysis.Sarif.ArtifactRoles : Enum {
    public int value__;
    public static ArtifactRoles None;
    public static ArtifactRoles AnalysisTarget;
    public static ArtifactRoles Attachment;
    public static ArtifactRoles ResponseFile;
    public static ArtifactRoles ResultFile;
    public static ArtifactRoles StandardStream;
    public static ArtifactRoles TracedFile;
    public static ArtifactRoles Unmodified;
    public static ArtifactRoles Modified;
    public static ArtifactRoles Added;
    public static ArtifactRoles Deleted;
    public static ArtifactRoles Renamed;
    public static ArtifactRoles Uncontrolled;
    public static ArtifactRoles Driver;
    public static ArtifactRoles Extension;
    public static ArtifactRoles Translation;
    public static ArtifactRoles Taxonomy;
    public static ArtifactRoles Policy;
    public static ArtifactRoles ReferencedOnCommandLine;
    public static ArtifactRoles MemoryContents;
    public static ArtifactRoles Directory;
    public static ArtifactRoles UserSpecifiedConfiguration;
    public static ArtifactRoles ToolSpecifiedConfiguration;
    public static ArtifactRoles DebugOutputFile;
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.Attachment : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private Message <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private ArtifactLocation <ArtifactLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Region> <Regions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Rectangle> <Rectangles>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<Attachment> ValueComparer { get; }
    public static IComparer`1<Attachment> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public Message Description { get; public set; }
    [DataMemberAttribute]
public ArtifactLocation ArtifactLocation { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<Region> Regions { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<Rectangle> Rectangles { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public Attachment(Message description, ArtifactLocation artifactLocation, IEnumerable`1<Region> regions, IEnumerable`1<Rectangle> rectangles, IDictionary`2<string, SerializedPropertyInfo> properties);
    public Attachment(Attachment other);
    public static IEqualityComparer`1<Attachment> get_ValueComparer();
    public bool ValueEquals(Attachment other);
    public int ValueGetHashCode();
    public static IComparer`1<Attachment> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual Message get_Description();
    [CompilerGeneratedAttribute]
public virtual void set_Description(Message value);
    [CompilerGeneratedAttribute]
public virtual ArtifactLocation get_ArtifactLocation();
    [CompilerGeneratedAttribute]
public virtual void set_ArtifactLocation(ArtifactLocation value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Region> get_Regions();
    [CompilerGeneratedAttribute]
public virtual void set_Regions(IList`1<Region> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Rectangle> get_Rectangles();
    [CompilerGeneratedAttribute]
public virtual void set_Rectangles(IList`1<Rectangle> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual Attachment DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(Message description, ArtifactLocation artifactLocation, IEnumerable`1<Region> regions, IEnumerable`1<Rectangle> rectangles, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.AttachmentComparer : object {
    internal static AttachmentComparer Instance;
    private static AttachmentComparer();
    public sealed virtual int Compare(Attachment left, Attachment right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.AttachmentEqualityComparer : object {
    internal static AttachmentEqualityComparer Instance;
    private static AttachmentEqualityComparer();
    public sealed virtual bool Equals(Attachment left, Attachment right);
    public sealed virtual int GetHashCode(Attachment obj);
}
internal class Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.ArtifactLocationBaselineEquals : object {
    public static ArtifactLocationBaselineEquals Instance;
    private static ArtifactLocationBaselineEquals();
    public sealed virtual bool Equals(ArtifactLocation x, ArtifactLocation y);
    public sealed virtual int GetHashCode(ArtifactLocation obj);
}
internal class Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.CodeFlowBaselineEqualityComparator : object {
    internal static CodeFlowBaselineEqualityComparator Instance;
    private static CodeFlowBaselineEqualityComparator();
    public sealed virtual bool Equals(CodeFlow x, CodeFlow y);
    public sealed virtual int GetHashCode(CodeFlow obj);
}
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.DefaultBaselineExtensions : object {
    [ExtensionAttribute]
public static int GetNullCheckedHashCode(object obj);
}
internal static class Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.ListComparisonHelpers : object {
    internal static bool CompareListsOrdered(IList`1<T> left, IList`1<T> right, IEqualityComparer`1<T> equalityComparer);
    internal static bool CompareListsAsSets(IList`1<T> left, IList`1<T> right, IEqualityComparer`1<T> equalityComparer);
    internal static int GetHashOfListContentsAsSets(IList`1<T> obj, IEqualityComparer`1<T> equalityComparer);
    internal static int GetHashOfListContentsOrdered(IList`1<T> obj, IEqualityComparer`1<T> equalityComparer);
}
internal class Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.LocationBaselineEquals : object {
    public static LocationBaselineEquals Instance;
    private static LocationBaselineEquals();
    public sealed virtual bool Equals(Location x, Location y);
    public sealed virtual int GetHashCode(Location obj);
}
internal class Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.PhysicalLocationBaselineEquals : object {
    public static PhysicalLocationBaselineEquals Instance;
    private static PhysicalLocationBaselineEquals();
    public sealed virtual bool Equals(PhysicalLocation x, PhysicalLocation y);
    public sealed virtual int GetHashCode(PhysicalLocation obj);
}
internal class Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.ResultBaselineEquals : object {
    internal static ResultBaselineEquals DefaultInstance;
    private static ResultBaselineEquals();
    public sealed virtual bool Equals(Result x, Result y);
    public sealed virtual int GetHashCode(Result obj);
}
internal class Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.StackBaselineEquals : object {
    public static StackBaselineEquals Instance;
    private static StackBaselineEquals();
    public sealed virtual bool Equals(Stack x, Stack y);
    public sealed virtual int GetHashCode(Stack obj);
}
internal class Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.StackFrameBaselineEquals : object {
    public static StackFrameBaselineEquals Instance;
    private static StackFrameBaselineEquals();
    public sealed virtual bool Equals(StackFrame x, StackFrame y);
    public sealed virtual int GetHashCode(StackFrame obj);
}
internal class Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.ThreadFlowBaselineEqualityComparator : object {
    internal static ThreadFlowBaselineEqualityComparator Instance;
    private static ThreadFlowBaselineEqualityComparator();
    public sealed virtual bool Equals(ThreadFlow x, ThreadFlow y);
    public sealed virtual int GetHashCode(ThreadFlow obj);
}
internal class Microsoft.CodeAnalysis.Sarif.Baseline.DefaultBaseline.ThreadFlowLocationBaselineEquals : object {
    internal static ThreadFlowLocationBaselineEquals DefaultInstance;
    private static ThreadFlowLocationBaselineEquals();
    public sealed virtual bool Equals(ThreadFlowLocation x, ThreadFlowLocation y);
    public sealed virtual int GetHashCode(ThreadFlowLocation obj);
}
public interface Microsoft.CodeAnalysis.Sarif.Baseline.IResultMatcher {
    public abstract virtual IList`1<MatchedResults> Match(IList`1<ExtractedResult> previousResults, IList`1<ExtractedResult> currentResults);
}
public interface Microsoft.CodeAnalysis.Sarif.Baseline.ISarifLogBaseliner {
    public abstract virtual Run CreateBaselinedRun(Run baseLine, Run nextLog);
}
[FlagsAttribute]
public enum Microsoft.CodeAnalysis.Sarif.Baseline.ResultMatching.DictionaryMergeBehavior : Enum {
    public int value__;
    public static DictionaryMergeBehavior None;
    public static DictionaryMergeBehavior InitializeFromOldest;
    public static DictionaryMergeBehavior InitializeFromMostRecent;
}
public static class Microsoft.CodeAnalysis.Sarif.Baseline.ResultMatching.ExactMatchers.ExactResultMatcherFactory : object {
    public static IResultMatcher GetIdenticalResultMatcher(bool considerPropertyBagsWhenComparing);
    public static IResultMatcher GetFullFingerprintResultMatcher();
}
internal class Microsoft.CodeAnalysis.Sarif.Baseline.ResultMatching.ExactMatchers.FullFingerprintResultMatcher : object {
    public sealed virtual IList`1<MatchedResults> Match(IList`1<ExtractedResult> baseline, IList`1<ExtractedResult> current);
}
internal class Microsoft.CodeAnalysis.Sarif.Baseline.ResultMatching.ExactMatchers.IdenticalResultMatcher : object {
    private bool _considerPropertyBagsWhenComparing;
    public IdenticalResultMatcher(bool considerPropertyBagsWhenComparing);
    public sealed virtual IList`1<MatchedResults> Match(IList`1<ExtractedResult> baseline, IList`1<ExtractedResult> current);
}
public class Microsoft.CodeAnalysis.Sarif.Baseline.ResultMatching.ExtractedResult : object {
    [CompilerGeneratedAttribute]
private Result <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private Run <OriginalRun>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuleId>k__BackingField;
    private ReportingDescriptor _rule;
    private bool _hasDeprecatedIds;
    public Result Result { get; public set; }
    public Run OriginalRun { get; public set; }
    public string RuleId { get; public set; }
    public ExtractedResult(Result result, Run run);
    [CompilerGeneratedAttribute]
public Result get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(Result value);
    [CompilerGeneratedAttribute]
public Run get_OriginalRun();
    [CompilerGeneratedAttribute]
public void set_OriginalRun(Run value);
    [CompilerGeneratedAttribute]
public string get_RuleId();
    [CompilerGeneratedAttribute]
public void set_RuleId(string value);
    public bool MatchesCategory(ExtractedResult other);
    public bool MatchesAnyWhat(ExtractedResult other);
    internal bool MatchesAnyWhat(ExtractedResult other, TrustMap trustMap);
    public bool MatchesAllWhere(ExtractedResult other);
    public bool IsSufficientlySimilarTo(ExtractedResult other);
    internal bool IsSufficientlySimilarTo(ExtractedResult other, TrustMap trustMap);
    public virtual string ToString();
}
internal class Microsoft.CodeAnalysis.Sarif.Baseline.ResultMatching.HeuristicMatchers.ContextRegionHeuristicMatcher : HeuristicMatcher {
}
internal class Microsoft.CodeAnalysis.Sarif.Baseline.ResultMatching.HeuristicMatchers.HeuristicMatcher : object {
    [CompilerGeneratedAttribute]
private IResultMatchingComparer <Comparer>k__BackingField;
    [CompilerGeneratedAttribute]
private IRemappingCalculator <Remapper>k__BackingField;
    public IResultMatchingComparer Comparer { get; }
    public IRemappingCalculator Remapper { get; }
    public HeuristicMatcher(IResultMatchingComparer comparer, IRemappingCalculator remapper);
    [CompilerGeneratedAttribute]
public IResultMatchingComparer get_Comparer();
    [CompilerGeneratedAttribute]
public IRemappingCalculator get_Remapper();
    public sealed virtual IList`1<MatchedResults> Match(IList`1<ExtractedResult> previousResults, IList`1<ExtractedResult> currentResults);
    public bool TryMatchResult(Dictionary`2<int, List`1<ExtractedResult>> resultDictionary, ExtractedResult currentResult, MatchedResults& result);
}
public static class Microsoft.CodeAnalysis.Sarif.Baseline.ResultMatching.HeuristicMatchers.HeuristicResultMatcherFactory : object {
    public static IResultMatcher GetContextRegionHeuristicResultMatcher();
    public static IResultMatcher GetPartialFingerprintResultMatcher();
}
internal interface Microsoft.CodeAnalysis.Sarif.Baseline.ResultMatching.HeuristicMatchers.IResultMatchingComparer {
    public abstract virtual bool ResultMatcherApplies(ExtractedResult result);
}
internal class Microsoft.CodeAnalysis.Sarif.Baseline.ResultMatching.HeuristicMatchers.PartialFingerprintResultMatcher : HeuristicMatcher {
}
public interface Microsoft.CodeAnalysis.Sarif.Baseline.ResultMatching.IRemappingCalculator {
    public abstract virtual IEnumerable`1<SarifLogRemapping> CalculatePossibleRemappings(IEnumerable`1<ExtractedResult> baseline, IEnumerable`1<ExtractedResult> current);
}
public interface Microsoft.CodeAnalysis.Sarif.Baseline.ResultMatching.ISarifLogMatcher {
    public abstract virtual IEnumerable`1<SarifLog> Match(IEnumerable`1<SarifLog> previousLogs, IEnumerable`1<SarifLog> currentLogs);
}
public class Microsoft.CodeAnalysis.Sarif.Baseline.ResultMatching.MatchedResults : object {
    private static string MatchResultMetadata_RunKeyName;
    private static string MatchResultMetadata_FoundDateName;
    private static string MatchResultMetadata_PreviousGuid;
    [CompilerGeneratedAttribute]
private ExtractedResult <PreviousResult>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtractedResult <CurrentResult>k__BackingField;
    [CompilerGeneratedAttribute]
private Run <Run>k__BackingField;
    public ExtractedResult PreviousResult { get; }
    public ExtractedResult CurrentResult { get; }
    public Run Run { get; public set; }
    public MatchedResults(ExtractedResult previous, ExtractedResult current);
    [CompilerGeneratedAttribute]
public ExtractedResult get_PreviousResult();
    [CompilerGeneratedAttribute]
public ExtractedResult get_CurrentResult();
    [CompilerGeneratedAttribute]
public Run get_Run();
    [CompilerGeneratedAttribute]
public void set_Run(Run value);
    public Result CalculateBasedlinedResult(DictionaryMergeBehavior propertyBagMergeBehavior);
    private Result ConstructAbsentResult(Dictionary`2<string, object> resultMatchingProperties, Dictionary`2& originalResultMatchingProperties);
    private Result ConstructNewResult(Dictionary`2<string, object> resultMatchingProperties, Dictionary`2& originalResultMatchingProperties);
    private Result ConstructExistingResult(Dictionary`2<string, object> resultMatchingProperties, Dictionary`2& originalResultMatchingProperties);
    private Result CreateBaselinedResult(BaselineState newBaselineState);
    internal void SetFirstDetectionTime(Result targetResult);
    public virtual string ToString();
}
public static class Microsoft.CodeAnalysis.Sarif.Baseline.ResultMatching.ResultMatchingBaselinerFactory : object {
    public static ISarifLogMatcher GetDefaultResultMatchingBaseliner(bool oldAlgorithm);
    public static ISarifLogMatcher GetResultMatchingBaseliner(List`1<IResultMatcher> exactMatchers, List`1<IResultMatcher> heuristicMatchers);
}
public class Microsoft.CodeAnalysis.Sarif.Baseline.ResultMatching.SarifLogRemapping : object {
    [CompilerGeneratedAttribute]
private Func`2<ExtractedResult, bool> <Applies>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<ExtractedResult, ExtractedResult> <RemapResult>k__BackingField;
    public Func`2<ExtractedResult, bool> Applies { get; private set; }
    public Func`2<ExtractedResult, ExtractedResult> RemapResult { get; private set; }
    [CompilerGeneratedAttribute]
public Func`2<ExtractedResult, bool> get_Applies();
    [CompilerGeneratedAttribute]
private void set_Applies(Func`2<ExtractedResult, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<ExtractedResult, ExtractedResult> get_RemapResult();
    [CompilerGeneratedAttribute]
private void set_RemapResult(Func`2<ExtractedResult, ExtractedResult> value);
}
internal class Microsoft.CodeAnalysis.Sarif.Baseline.ResultMatching.SarifLogResultMatcher : object {
    public static string ResultMatchingResultPropertyName;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IResultMatcher> <ExactResultMatchers>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IResultMatcher> <HeuristicMatchers>k__BackingField;
    [CompilerGeneratedAttribute]
private DictionaryMergeBehavior <PropertyBagMergeBehavior>k__BackingField;
    public IEnumerable`1<IResultMatcher> ExactResultMatchers { get; }
    public IEnumerable`1<IResultMatcher> HeuristicMatchers { get; }
    public DictionaryMergeBehavior PropertyBagMergeBehavior { get; }
    public SarifLogResultMatcher(IEnumerable`1<IResultMatcher> exactResultMatchers, IEnumerable`1<IResultMatcher> heuristicMatchers, DictionaryMergeBehavior propertyBagMergeBehaviors);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IResultMatcher> get_ExactResultMatchers();
    [CompilerGeneratedAttribute]
public IEnumerable`1<IResultMatcher> get_HeuristicMatchers();
    [CompilerGeneratedAttribute]
public DictionaryMergeBehavior get_PropertyBagMergeBehavior();
    public SarifLog Match(SarifLog previousLog, SarifLog currentLog);
    public sealed virtual IEnumerable`1<SarifLog> Match(IEnumerable`1<SarifLog> previousLogs, IEnumerable`1<SarifLog> currentLogs);
    private static Dictionary`2<string, List`1<Run>> GetRunsByTool(IEnumerable`1<SarifLog> sarifLogs);
    private SarifLog BaselineSarifLogs(IEnumerable`1<Run> previous, IEnumerable`1<Run> current);
    private static void AddUnmatchedResults(List`1<ExtractedResult> baselineResults, List`1<ExtractedResult> currentResults, List`1<MatchedResults> matchedResults);
    private void CalculateMatches(IEnumerable`1<IResultMatcher> matchers, List`1<ExtractedResult> baselineResults, List`1<ExtractedResult> currentResults, List`1<MatchedResults> matchedResults);
    private List`1<ExtractedResult> ExtractResultsFromRuns(IEnumerable`1<Run> sarifRuns);
    private SarifLog ConstructSarifLogFromMatchedResults(IEnumerable`1<MatchedResults> results, IEnumerable`1<Run> previousRuns, IEnumerable`1<Run> currentRuns);
    internal static void MergeDictionaryInto(IDictionary`2<T, S> baseDictionary, IDictionary`2<T, S> dictionaryToAdd, IEqualityComparer`1<S> duplicateCatch, DictionaryMergeBehavior propertyBagMergeBehavior);
}
public class Microsoft.CodeAnalysis.Sarif.Baseline.ResultMatchingComparer : object {
    public static ResultMatchingComparer Instance;
    private static ResultMatchingComparer();
    public sealed virtual int Compare(ExtractedResult left, ExtractedResult right);
}
public enum Microsoft.CodeAnalysis.Sarif.Baseline.SarifBaselineType : Enum {
    public int value__;
    public static SarifBaselineType Strict;
    public static SarifBaselineType Standard;
}
internal class Microsoft.CodeAnalysis.Sarif.Baseline.SarifLogBaseliner : object {
    private IEqualityComparer`1<Result> ResultComparator;
    public SarifLogBaseliner(IEqualityComparer`1<Result> comparator);
    public sealed virtual Run CreateBaselinedRun(Run baseLine, Run nextLog);
}
public static class Microsoft.CodeAnalysis.Sarif.Baseline.SarifLogBaselinerFactory : object {
    public static ISarifLogBaseliner CreateSarifLogBaseliner(SarifBaselineType logBaselinerType);
}
internal class Microsoft.CodeAnalysis.Sarif.Baseline.StatefulResultMatcher : object {
    private static int NearnessThreshold;
    private List`1<ExtractedResult> _before;
    private TrustMap _beforeTrustMap;
    private WhatMap _beforeWhatMap;
    private Int32[] _matchingIndexFromBefore;
    private List`1<ExtractedResult> _after;
    private TrustMap _afterTrustMap;
    private WhatMap _afterWhatMap;
    private Int32[] _matchingIndexFromAfter;
    public StatefulResultMatcher(IList`1<ExtractedResult> before, IList`1<ExtractedResult> after);
    public IList`1<MatchedResults> Match();
    private void BuildMaps();
    private static void BuildMap(List`1<ExtractedResult> results, WhatMap whatMap, TrustMap trustMap, HashSet`1<string> otherRunLocations);
    private void LinkResultsWithIdenticalWhere();
    private void LinkFirstAndLastFromSameArtifact();
    private void LinkResultsWithUniqueIdenticalWhat();
    private void LinkNearbySimilarResults();
    private IList`1<MatchedResults> BuildMatchList();
    private void LinkIfSimilar(int beforeIndex, int afterIndex);
    private ExtractedResult FirstWithUri(ExtractedResult desiredUri, IList`1<ExtractedResult> set, Int32& fromIndex);
    private ExtractedResult LastWithUri(ExtractedResult desiredUri, IList`1<ExtractedResult> set, Int32& fromIndex);
    private static void Fill(Int32[] array, int value);
}
internal class Microsoft.CodeAnalysis.Sarif.Baseline.TrustMap : object {
    public static float DefaultTrust;
    [CompilerGeneratedAttribute]
private bool <WasMatched>k__BackingField;
    private Dictionary`2<TrustKey, TrustValue> _map;
    public bool WasMatched { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_WasMatched();
    [CompilerGeneratedAttribute]
private void set_WasMatched(bool value);
    public float Trust(string propertySetName, string propertyName);
    public void Add(WhatComponent component);
    public void CountMatchesWith(TrustMap otherRunMap);
}
public class Microsoft.CodeAnalysis.Sarif.Baseline.V2ResultMatcher : object {
    public sealed virtual IList`1<MatchedResults> Match(IList`1<ExtractedResult> before, IList`1<ExtractedResult> after);
}
[ExtensionAttribute]
internal static class Microsoft.CodeAnalysis.Sarif.Baseline.WhatComparer : object {
    private static string LocationNonSpecific;
    private static string PropertySetBase;
    private static string PropertySetFingerprint;
    private static string PropertySetPartialFingerprint;
    private static string PropertySetProperty;
    [IteratorStateMachineAttribute("Microsoft.CodeAnalysis.Sarif.Baseline.WhatComparer/<WhatProperties>d__5")]
[ExtensionAttribute]
public static IEnumerable`1<WhatComponent> WhatProperties(ExtractedResult result, string locationSpecifier);
    public static bool MatchesWhat(ExtractedResult left, ExtractedResult right, TrustMap trustMap);
    private static string GetFirstSnippet(ExtractedResult result);
    private static string GetCanonicalizedMessage(ExtractedResult result);
}
public class Microsoft.CodeAnalysis.Sarif.Baseline.WhatComponent : ValueType {
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertySet>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyValue>k__BackingField;
    public string Category { get; }
    public string Location { get; }
    public string PropertySet { get; }
    public string PropertyName { get; }
    public string PropertyValue { get; }
    public WhatComponent(string category, string location, string propertySet, string propertyName, string propertyValue);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Category();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Location();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_PropertySet();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_PropertyName();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_PropertyValue();
    public virtual string ToString();
    public sealed virtual bool Equals(WhatComponent other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(WhatComponent left, WhatComponent right);
    public static bool op_Inequality(WhatComponent left, WhatComponent right);
}
internal class Microsoft.CodeAnalysis.Sarif.Baseline.WhatMap : object {
    private Dictionary`2<WhatComponent, int> _map;
    private void Add(ExtractedResult result, HashSet`1<string> otherRunLocations, int index);
    public void Add(WhatComponent component, int index);
    [IteratorStateMachineAttribute("Microsoft.CodeAnalysis.Sarif.Baseline.WhatMap/<UniqueLinks>d__4")]
public IEnumerable`1<Tuple`2<int, int>> UniqueLinks(WhatMap other);
}
public class Microsoft.CodeAnalysis.Sarif.Baseline.WhereComparer : object {
    public static WhereComparer Instance;
    private static WhereComparer();
    public sealed virtual int Compare(ExtractedResult left, ExtractedResult right);
    public static int CompareFirstArtifactUri(ExtractedResult left, ExtractedResult right);
    public static int CompareWhere(ExtractedResult left, ExtractedResult right);
    public static int CompareTo(IList`1<Location> left, Run leftRun, IList`1<Location> right, Run rightRun);
    public static int CompareTo(Location left, Run leftRun, Location right, Run rightRun);
    public static int CompareTo(IList`1<LogicalLocation> left, Run leftRun, IList`1<LogicalLocation> right, Run rightRun);
    public static int CompareTo(LogicalLocation left, Run leftRun, LogicalLocation right, Run rightRun);
    public static int CompareTo(PhysicalLocation left, Run leftRun, PhysicalLocation right, Run rightRun);
    public static int CompareTo(ArtifactLocation left, Run leftRun, ArtifactLocation right, Run rightRun);
    public static int CompareTo(Region left, Region right);
    private static int ResolvedStartColumn(Region region);
    private static int ResolvedEndLine(Region region);
    public static int CompareTo(Uri left, Uri right);
    public static string LocationSpecifier(ExtractedResult result, HashSet`1<string> otherRunLocations);
    public static void AddLocationIdentifiers(ExtractedResult result, HashSet`1<string> toSet);
    public static string LocationFullyQualifiedName(Location loc);
    public static Uri FirstUri(ExtractedResult result);
    public static Uri LocationUri(Location loc, Run run);
    private static Uri ArtifactUri(ArtifactLocation loc, Run run);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public enum Microsoft.CodeAnalysis.Sarif.BaselineState : Enum {
    public int value__;
    public static BaselineState None;
    public static BaselineState Unchanged;
    public static BaselineState Updated;
    public static BaselineState New;
    public static BaselineState Absent;
}
internal class Microsoft.CodeAnalysis.Sarif.BlameHunk : object {
    private string name;
    private string email;
    private string commitSha;
    private int lineCount;
    private int finalStartLineNumber;
    public string Name { get; }
    public string Email { get; }
    public string CommitSha { get; }
    public int LineCount { get; }
    public int FinalStartLineNumber { get; }
    public BlameHunk(string name, string email, string commitSha, int lineCount, int finalStartLineNumber);
    public sealed virtual string get_Name();
    public sealed virtual string get_Email();
    public sealed virtual string get_CommitSha();
    public sealed virtual int get_LineCount();
    public sealed virtual int get_FinalStartLineNumber();
    public sealed virtual bool ContainsLine(int line);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.CodeAnalysis.Sarif.Cache`2 : object {
    private Func`2<TKey, TValue> _builder;
    private ConcurrentDictionary`2<TKey, TValue> _cache;
    private LinkedList`1<TKey> _keysInUseOrder;
    public static int DefaultCapacity;
    [CompilerGeneratedAttribute]
private int <Capacity>k__BackingField;
    public int Capacity { get; }
    public int Count { get; }
    public IEnumerable`1<TKey> Keys { get; }
    public TValue Item { get; public set; }
    public Cache`2(Func`2<TKey, TValue> builder, int capacity);
    [CompilerGeneratedAttribute]
public int get_Capacity();
    public int get_Count();
    public IEnumerable`1<TKey> get_Keys();
    public TValue get_Item(TKey key);
    public void set_Item(TKey key, TValue value);
    private void SetValue(TKey key, TValue value);
    public bool ContainsKey(TKey key);
    public void Clear();
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.CodeFlow : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private Message <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ThreadFlow> <ThreadFlows>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<CodeFlow> ValueComparer { get; }
    public static IComparer`1<CodeFlow> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public Message Message { get; public set; }
    [DataMemberAttribute]
public IList`1<ThreadFlow> ThreadFlows { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public CodeFlow(Message message, IEnumerable`1<ThreadFlow> threadFlows, IDictionary`2<string, SerializedPropertyInfo> properties);
    public CodeFlow(CodeFlow other);
    public static IEqualityComparer`1<CodeFlow> get_ValueComparer();
    public bool ValueEquals(CodeFlow other);
    public int ValueGetHashCode();
    public static IComparer`1<CodeFlow> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual Message get_Message();
    [CompilerGeneratedAttribute]
public virtual void set_Message(Message value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ThreadFlow> get_ThreadFlows();
    [CompilerGeneratedAttribute]
public virtual void set_ThreadFlows(IList`1<ThreadFlow> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual CodeFlow DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(Message message, IEnumerable`1<ThreadFlow> threadFlows, IDictionary`2<string, SerializedPropertyInfo> properties);
    public bool ShouldSerializeThreadFlows();
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.CodeFlowComparer : object {
    internal static CodeFlowComparer Instance;
    private static CodeFlowComparer();
    public sealed virtual int Compare(CodeFlow left, CodeFlow right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.CodeFlowEqualityComparer : object {
    internal static CodeFlowEqualityComparer Instance;
    private static CodeFlowEqualityComparer();
    public sealed virtual bool Equals(CodeFlow left, CodeFlow right);
    public sealed virtual int GetHashCode(CodeFlow obj);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public enum Microsoft.CodeAnalysis.Sarif.ColumnKind : Enum {
    public int value__;
    public static ColumnKind None;
    public static ColumnKind Utf16CodeUnits;
    public static ColumnKind UnicodeCodePoints;
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal static class Microsoft.CodeAnalysis.Sarif.ComparerExtensions : object {
    [ExtensionAttribute]
public static bool TryReferenceCompares(object left, object right, Int32& compareResult);
    [ExtensionAttribute]
public static int ListCompares(IList`1<T> left, IList`1<T> right);
    [ExtensionAttribute]
public static int ListCompares(IList`1<T> left, IList`1<T> right, IComparer`1<T> comparer);
    [ExtensionAttribute]
public static int ListCompares(IList`1<T> left, IList`1<T> right, Func`3<T, T, int> compareFunction);
    private static int ListComparesHelper(IList`1<T> left, IList`1<T> right, Func`3<T, T, int> compareFunction);
    [ExtensionAttribute]
public static int DictionaryCompares(IDictionary`2<string, T> left, IDictionary`2<string, T> right);
    [ExtensionAttribute]
public static int DictionaryCompares(IDictionary`2<string, T> left, IDictionary`2<string, T> right, IComparer`1<T> comparer);
    [ExtensionAttribute]
public static int DictionaryCompares(IDictionary`2<TKey, TValue> left, IDictionary`2<TKey, TValue> right, Func`3<TKey, TKey, int> keyCompareFunction, Func`3<TValue, TValue, int> valueCompareFunction);
    private static int DictionaryComparesHelper(IDictionary`2<TKey, TValue> left, IDictionary`2<TKey, TValue> right, Func`3<TKey, TKey, int> keyCompareFunction, Func`3<TValue, TValue, int> valueCompareFunction);
    [ExtensionAttribute]
public static int UriCompares(Uri left, Uri right);
    [ExtensionAttribute]
public static int ObjectCompares(object left, object right);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.ConfigurationOverride : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private ReportingConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private ReportingDescriptorReference <Descriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<ConfigurationOverride> ValueComparer { get; }
    public static IComparer`1<ConfigurationOverride> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public ReportingConfiguration Configuration { get; public set; }
    [DataMemberAttribute]
public ReportingDescriptorReference Descriptor { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public ConfigurationOverride(ReportingConfiguration configuration, ReportingDescriptorReference descriptor, IDictionary`2<string, SerializedPropertyInfo> properties);
    public ConfigurationOverride(ConfigurationOverride other);
    public static IEqualityComparer`1<ConfigurationOverride> get_ValueComparer();
    public bool ValueEquals(ConfigurationOverride other);
    public int ValueGetHashCode();
    public static IComparer`1<ConfigurationOverride> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual ReportingConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public virtual void set_Configuration(ReportingConfiguration value);
    [CompilerGeneratedAttribute]
public virtual ReportingDescriptorReference get_Descriptor();
    [CompilerGeneratedAttribute]
public virtual void set_Descriptor(ReportingDescriptorReference value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual ConfigurationOverride DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(ReportingConfiguration configuration, ReportingDescriptorReference descriptor, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ConfigurationOverrideComparer : object {
    internal static ConfigurationOverrideComparer Instance;
    private static ConfigurationOverrideComparer();
    public sealed virtual int Compare(ConfigurationOverride left, ConfigurationOverride right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ConfigurationOverrideEqualityComparer : object {
    internal static ConfigurationOverrideEqualityComparer Instance;
    private static ConfigurationOverrideEqualityComparer();
    public sealed virtual bool Equals(ConfigurationOverride left, ConfigurationOverride right);
    public sealed virtual int GetHashCode(ConfigurationOverride obj);
}
public class Microsoft.CodeAnalysis.Sarif.ConsoleStreamCapture : object {
    private StringBuilder sb;
    private StreamReader reader;
    public string Text { get; }
    public sealed virtual string get_Text();
    public sealed virtual Task`1<string> Capture(StreamReader reader, CancellationToken cancellationToken);
    private string ReadAll();
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.Conversion : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private Tool <Tool>k__BackingField;
    [CompilerGeneratedAttribute]
private Invocation <Invocation>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ArtifactLocation> <AnalysisToolLogFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<Conversion> ValueComparer { get; }
    public static IComparer`1<Conversion> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public Tool Tool { get; public set; }
    [DataMemberAttribute]
public Invocation Invocation { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ArtifactLocation> AnalysisToolLogFiles { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public Conversion(Tool tool, Invocation invocation, IEnumerable`1<ArtifactLocation> analysisToolLogFiles, IDictionary`2<string, SerializedPropertyInfo> properties);
    public Conversion(Conversion other);
    public static IEqualityComparer`1<Conversion> get_ValueComparer();
    public bool ValueEquals(Conversion other);
    public int ValueGetHashCode();
    public static IComparer`1<Conversion> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual Tool get_Tool();
    [CompilerGeneratedAttribute]
public virtual void set_Tool(Tool value);
    [CompilerGeneratedAttribute]
public virtual Invocation get_Invocation();
    [CompilerGeneratedAttribute]
public virtual void set_Invocation(Invocation value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ArtifactLocation> get_AnalysisToolLogFiles();
    [CompilerGeneratedAttribute]
public virtual void set_AnalysisToolLogFiles(IList`1<ArtifactLocation> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual Conversion DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(Tool tool, Invocation invocation, IEnumerable`1<ArtifactLocation> analysisToolLogFiles, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ConversionComparer : object {
    internal static ConversionComparer Instance;
    private static ConversionComparer();
    public sealed virtual int Compare(Conversion left, Conversion right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ConversionEqualityComparer : object {
    internal static ConversionEqualityComparer Instance;
    private static ConversionEqualityComparer();
    public sealed virtual bool Equals(Conversion left, Conversion right);
    public sealed virtual int GetHashCode(Conversion obj);
}
[FlagsAttribute]
public enum Microsoft.CodeAnalysis.Sarif.DefaultTraces : Enum {
    public int value__;
    public static DefaultTraces None;
    public static DefaultTraces ScanTime;
    public static DefaultTraces RuleScanTime;
    public static DefaultTraces PeakWorkingSet;
    public static DefaultTraces TargetsScanned;
    public static DefaultTraces ResultsSummary;
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.Edge : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Message <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceNodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetNodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<Edge> ValueComparer { get; }
    public static IComparer`1<Edge> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public Message Label { get; public set; }
    [DataMemberAttribute]
public string SourceNodeId { get; public set; }
    [DataMemberAttribute]
public string TargetNodeId { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public Edge(string id, Message label, string sourceNodeId, string targetNodeId, IDictionary`2<string, SerializedPropertyInfo> properties);
    public Edge(Edge other);
    public static IEqualityComparer`1<Edge> get_ValueComparer();
    public bool ValueEquals(Edge other);
    public int ValueGetHashCode();
    public static IComparer`1<Edge> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual string get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(string value);
    [CompilerGeneratedAttribute]
public virtual Message get_Label();
    [CompilerGeneratedAttribute]
public virtual void set_Label(Message value);
    [CompilerGeneratedAttribute]
public virtual string get_SourceNodeId();
    [CompilerGeneratedAttribute]
public virtual void set_SourceNodeId(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TargetNodeId();
    [CompilerGeneratedAttribute]
public virtual void set_TargetNodeId(string value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual Edge DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(string id, Message label, string sourceNodeId, string targetNodeId, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.EdgeComparer : object {
    internal static EdgeComparer Instance;
    private static EdgeComparer();
    public sealed virtual int Compare(Edge left, Edge right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.EdgeEqualityComparer : object {
    internal static EdgeEqualityComparer Instance;
    private static EdgeEqualityComparer();
    public sealed virtual bool Equals(Edge left, Edge right);
    public sealed virtual int GetHashCode(Edge obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.EdgeTraversal : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private string <EdgeId>k__BackingField;
    [CompilerGeneratedAttribute]
private Message <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, MultiformatMessageString> <FinalState>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StepOverEdgeCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<EdgeTraversal> ValueComparer { get; }
    public static IComparer`1<EdgeTraversal> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public string EdgeId { get; public set; }
    [DataMemberAttribute]
public Message Message { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, MultiformatMessageString> FinalState { get; public set; }
    [DataMemberAttribute]
public int StepOverEdgeCount { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public EdgeTraversal(string edgeId, Message message, IDictionary`2<string, MultiformatMessageString> finalState, int stepOverEdgeCount, IDictionary`2<string, SerializedPropertyInfo> properties);
    public EdgeTraversal(EdgeTraversal other);
    public static IEqualityComparer`1<EdgeTraversal> get_ValueComparer();
    public bool ValueEquals(EdgeTraversal other);
    public int ValueGetHashCode();
    public static IComparer`1<EdgeTraversal> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual string get_EdgeId();
    [CompilerGeneratedAttribute]
public virtual void set_EdgeId(string value);
    [CompilerGeneratedAttribute]
public virtual Message get_Message();
    [CompilerGeneratedAttribute]
public virtual void set_Message(Message value);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, MultiformatMessageString> get_FinalState();
    [CompilerGeneratedAttribute]
public virtual void set_FinalState(IDictionary`2<string, MultiformatMessageString> value);
    [CompilerGeneratedAttribute]
public virtual int get_StepOverEdgeCount();
    [CompilerGeneratedAttribute]
public virtual void set_StepOverEdgeCount(int value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual EdgeTraversal DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(string edgeId, Message message, IDictionary`2<string, MultiformatMessageString> finalState, int stepOverEdgeCount, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.EdgeTraversalComparer : object {
    internal static EdgeTraversalComparer Instance;
    private static EdgeTraversalComparer();
    public sealed virtual int Compare(EdgeTraversal left, EdgeTraversal right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.EdgeTraversalEqualityComparer : object {
    internal static EdgeTraversalEqualityComparer Instance;
    private static EdgeTraversalEqualityComparer();
    public sealed virtual bool Equals(EdgeTraversal left, EdgeTraversal right);
    public sealed virtual int GetHashCode(EdgeTraversal obj);
}
public class Microsoft.CodeAnalysis.Sarif.EnumeratedArtifact : object {
    private static int BinarySniffingHeaderSizeBytes;
    internal Byte[] bytes;
    internal string contents;
    private Encoding encoding;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    public Nullable`1<long> sizeInBytes;
    public Uri Uri { get; public set; }
    public bool IsBinary { get; }
    public Stream Stream { get; public set; }
    public Encoding Encoding { get; public set; }
    internal IFileSystem FileSystem { get; internal set; }
    public string Contents { get; public set; }
    public Byte[] Bytes { get; public set; }
    public Nullable`1<long> SizeInBytes { get; public set; }
    public EnumeratedArtifact(IFileSystem fileSystem);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(Uri value);
    public sealed virtual bool get_IsBinary();
    [CompilerGeneratedAttribute]
public sealed virtual Stream get_Stream();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Stream(Stream value);
    public sealed virtual Encoding get_Encoding();
    public sealed virtual void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
internal IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
internal void set_FileSystem(IFileSystem value);
    public sealed virtual string get_Contents();
    public sealed virtual void set_Contents(string value);
    public sealed virtual Byte[] get_Bytes();
    public sealed virtual void set_Bytes(Byte[] value);
    private ValueTuple`2<string, Byte[]> GetArtifactData();
    private void RetrieveDataFromStream();
    private void TryRewindStream();
    public sealed virtual Nullable`1<long> get_SizeInBytes();
    public sealed virtual void set_SizeInBytes(Nullable`1<long> value);
}
public static class Microsoft.CodeAnalysis.Sarif.Errors : object {
    private static string ERR997_MissingFile;
    private static string ERR997_MissingCommandlineArgument;
    private static string ERR997_NoRulesLoaded;
    private static string ERR997_FileAlreadyExists;
    internal static string ERR997_NoPluginsConfigured;
    private static string ERR997_ErrorPostingLogFile;
    private static string ERR997_ExceptionLoadingPlugIn;
    internal static string ERR997_NoValidAnalysisTargets;
    private static string ERR997_ExceptionAccessingFile;
    internal static string ERR997_IncompatibleRulesDetected;
    internal static string ERR997_AllRulesExplicitlyDisabled;
    private static string ERR997_ExceptionCreatingOutputFile;
    private static string ERR997_InvalidInvocationPropertyName;
    private static string ERR997_MissingReportingConfiguration;
    private static string ERR997_ExceptionLoadingAnalysisTarget;
    private static string ERR997_ExceptionInstantiatingSkimmers;
    private static string ERR998_ExceptionInAnalyze;
    private static string ERR998_ExceptionInCanAnalyze;
    private static string ERR998_ExceptionInInitialize;
    private static string ERR999_AnalysisCanceled;
    private static string ERR999_AnalysisTimedOut;
    private static string ERR999_UnhandledEngineException;
    private static string ERR1000_ParseError;
    public static void LogExceptionLoadingTarget(IAnalysisContext context, Exception exception);
    public static void LogExceptionInstantiatingSkimmers(IAnalysisContext context, IEnumerable`1<Assembly> skimmerAssemblies, Exception exception);
    public static void LogNoRulesLoaded(IAnalysisContext context);
    public static void LogAllRulesExplicitlyDisabled(IAnalysisContext context);
    public static void LogNoPluginsConfigured(IAnalysisContext context);
    public static void LogNoValidAnalysisTargets(IAnalysisContext context);
    public static void LogExceptionCreatingOutputFile(IAnalysisContext context, string fileName, Exception exception);
    public static void LogMissingFile(IAnalysisContext context, string fileName);
    public static void LogMissingCommandlineArgument(IAnalysisContext context, string missing, string required);
    public static void LogExceptionAccessingFile(IAnalysisContext context, string fileName, Exception exception);
    public static void LogInvalidInvocationPropertyName(IAnalysisContext context, string propertyName);
    public static void LogMissingReportingConfiguration(IAnalysisContext context, string reasonForNotAnalyzing);
    public static void LogExceptionLoadingPlugin(string pluginFilePath, IAnalysisContext context, Exception exception);
    public static void LogFileAlreadyExists(IAnalysisContext context, string filePath);
    public static void LogTargetParseError(IAnalysisContext context, Region region, string message);
    public static void LogUnhandledRuleExceptionAssessingTargetApplicability(ISet`1<string> disabledSkimmers, IAnalysisContext context, Exception exception);
    public static void LogUnhandledExceptionInitializingRule(IAnalysisContext context, Exception exception);
    public static void LogUnhandledRuleExceptionAnalyzingTarget(ISet`1<string> disabledSkimmers, IAnalysisContext context, Exception exception);
    public static void LogUnhandledEngineException(IAnalysisContext context, Exception exception);
    public static void LogIncompatibleRules(IAnalysisContext context, string ruleId, string incompatibleRuleId);
    public static Notification CreateNotification(Uri uri, string notificationId, string ruleId, FailureLevel level, Exception exception, bool persistExceptionStack, string messageFormat, String[] args);
    private static string GetMessageFormatResourceForNotification(string notificationId);
    internal static void LogAnalysisCanceled(TContext context, OperationCanceledException ex);
    internal static void LogAnalysisTimedOut(IAnalysisContext context);
    public static void LogErrorPostingLogFile(IAnalysisContext context, string postUri);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.ExceptionData : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Stack <Stack>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ExceptionData> <InnerExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<ExceptionData> ValueComparer { get; }
    public static IComparer`1<ExceptionData> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public string Kind { get; public set; }
    [DataMemberAttribute]
public string Message { get; public set; }
    [DataMemberAttribute]
public Stack Stack { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ExceptionData> InnerExceptions { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public ExceptionData(string kind, string message, Stack stack, IEnumerable`1<ExceptionData> innerExceptions, IDictionary`2<string, SerializedPropertyInfo> properties);
    public ExceptionData(ExceptionData other);
    public static IEqualityComparer`1<ExceptionData> get_ValueComparer();
    public bool ValueEquals(ExceptionData other);
    public int ValueGetHashCode();
    public static IComparer`1<ExceptionData> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual string get_Kind();
    [CompilerGeneratedAttribute]
public virtual void set_Kind(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Message();
    [CompilerGeneratedAttribute]
public virtual void set_Message(string value);
    [CompilerGeneratedAttribute]
public virtual Stack get_Stack();
    [CompilerGeneratedAttribute]
public virtual void set_Stack(Stack value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ExceptionData> get_InnerExceptions();
    [CompilerGeneratedAttribute]
public virtual void set_InnerExceptions(IList`1<ExceptionData> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual ExceptionData DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(string kind, string message, Stack stack, IEnumerable`1<ExceptionData> innerExceptions, IDictionary`2<string, SerializedPropertyInfo> properties);
    public static ExceptionData Create(Exception exception);
    public virtual string ToString();
    private static IList`1<ExceptionData> GetInnerExceptions(Exception exception);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ExceptionDataComparer : object {
    internal static ExceptionDataComparer Instance;
    private static ExceptionDataComparer();
    public sealed virtual int Compare(ExceptionData left, ExceptionData right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ExceptionDataEqualityComparer : object {
    internal static ExceptionDataEqualityComparer Instance;
    private static ExceptionDataEqualityComparer();
    public sealed virtual bool Equals(ExceptionData left, ExceptionData right);
    public sealed virtual int GetHashCode(ExceptionData obj);
}
public class Microsoft.CodeAnalysis.Sarif.ExternalProcess : object {
    [CompilerGeneratedAttribute]
private IConsoleCapture <StdOut>k__BackingField;
    [CompilerGeneratedAttribute]
private IConsoleCapture <StdErr>k__BackingField;
    public IConsoleCapture StdOut { get; private set; }
    public IConsoleCapture StdErr { get; private set; }
    public ExternalProcess(string workingDirectory, string exePath, string arguments, IConsoleCapture stdOut, Int32[] acceptableReturnCodes);
    [CompilerGeneratedAttribute]
public IConsoleCapture get_StdOut();
    [CompilerGeneratedAttribute]
private void set_StdOut(IConsoleCapture value);
    [CompilerGeneratedAttribute]
public IConsoleCapture get_StdErr();
    [CompilerGeneratedAttribute]
private void set_StdErr(IConsoleCapture value);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.ExternalProperties : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private Uri <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private SarifVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <RunGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private Conversion <Conversion>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Graph> <Graphs>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyBag <ExternalizedProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Artifact> <Artifacts>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Invocation> <Invocations>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<LogicalLocation> <LogicalLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ThreadFlowLocation> <ThreadFlowLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Result> <Results>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ToolComponent> <Taxonomies>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolComponent <Driver>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ToolComponent> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ToolComponent> <Policies>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ToolComponent> <Translations>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Address> <Addresses>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<WebRequest> <WebRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<WebResponse> <WebResponses>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<ExternalProperties> ValueComparer { get; }
    public static IComparer`1<ExternalProperties> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public Uri Schema { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.SarifVersionConverter")]
public SarifVersion Version { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Guid> Guid { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Guid> RunGuid { get; public set; }
    [DataMemberAttribute]
public Conversion Conversion { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<Graph> Graphs { get; public set; }
    [DataMemberAttribute]
public PropertyBag ExternalizedProperties { get; public set; }
    [DataMemberAttribute]
public IList`1<Artifact> Artifacts { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<Invocation> Invocations { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<LogicalLocation> LogicalLocations { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ThreadFlowLocation> ThreadFlowLocations { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<Result> Results { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ToolComponent> Taxonomies { get; public set; }
    [DataMemberAttribute]
public ToolComponent Driver { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ToolComponent> Extensions { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ToolComponent> Policies { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ToolComponent> Translations { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<Address> Addresses { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<WebRequest> WebRequests { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<WebResponse> WebResponses { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public ExternalProperties(Uri schema, SarifVersion version, Nullable`1<Guid> guid, Nullable`1<Guid> runGuid, Conversion conversion, IEnumerable`1<Graph> graphs, PropertyBag externalizedProperties, IEnumerable`1<Artifact> artifacts, IEnumerable`1<Invocation> invocations, IEnumerable`1<LogicalLocation> logicalLocations, IEnumerable`1<ThreadFlowLocation> threadFlowLocations, IEnumerable`1<Result> results, IEnumerable`1<ToolComponent> taxonomies, ToolComponent driver, IEnumerable`1<ToolComponent> extensions, IEnumerable`1<ToolComponent> policies, IEnumerable`1<ToolComponent> translations, IEnumerable`1<Address> addresses, IEnumerable`1<WebRequest> webRequests, IEnumerable`1<WebResponse> webResponses, IDictionary`2<string, SerializedPropertyInfo> properties);
    public ExternalProperties(ExternalProperties other);
    public static IEqualityComparer`1<ExternalProperties> get_ValueComparer();
    public bool ValueEquals(ExternalProperties other);
    public int ValueGetHashCode();
    public static IComparer`1<ExternalProperties> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual Uri get_Schema();
    [CompilerGeneratedAttribute]
public virtual void set_Schema(Uri value);
    [CompilerGeneratedAttribute]
public virtual SarifVersion get_Version();
    [CompilerGeneratedAttribute]
public virtual void set_Version(SarifVersion value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_Guid();
    [CompilerGeneratedAttribute]
public virtual void set_Guid(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_RunGuid();
    [CompilerGeneratedAttribute]
public virtual void set_RunGuid(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual Conversion get_Conversion();
    [CompilerGeneratedAttribute]
public virtual void set_Conversion(Conversion value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Graph> get_Graphs();
    [CompilerGeneratedAttribute]
public virtual void set_Graphs(IList`1<Graph> value);
    [CompilerGeneratedAttribute]
public virtual PropertyBag get_ExternalizedProperties();
    [CompilerGeneratedAttribute]
public virtual void set_ExternalizedProperties(PropertyBag value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Artifact> get_Artifacts();
    [CompilerGeneratedAttribute]
public virtual void set_Artifacts(IList`1<Artifact> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Invocation> get_Invocations();
    [CompilerGeneratedAttribute]
public virtual void set_Invocations(IList`1<Invocation> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<LogicalLocation> get_LogicalLocations();
    [CompilerGeneratedAttribute]
public virtual void set_LogicalLocations(IList`1<LogicalLocation> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ThreadFlowLocation> get_ThreadFlowLocations();
    [CompilerGeneratedAttribute]
public virtual void set_ThreadFlowLocations(IList`1<ThreadFlowLocation> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Result> get_Results();
    [CompilerGeneratedAttribute]
public virtual void set_Results(IList`1<Result> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ToolComponent> get_Taxonomies();
    [CompilerGeneratedAttribute]
public virtual void set_Taxonomies(IList`1<ToolComponent> value);
    [CompilerGeneratedAttribute]
public virtual ToolComponent get_Driver();
    [CompilerGeneratedAttribute]
public virtual void set_Driver(ToolComponent value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ToolComponent> get_Extensions();
    [CompilerGeneratedAttribute]
public virtual void set_Extensions(IList`1<ToolComponent> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ToolComponent> get_Policies();
    [CompilerGeneratedAttribute]
public virtual void set_Policies(IList`1<ToolComponent> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ToolComponent> get_Translations();
    [CompilerGeneratedAttribute]
public virtual void set_Translations(IList`1<ToolComponent> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Address> get_Addresses();
    [CompilerGeneratedAttribute]
public virtual void set_Addresses(IList`1<Address> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<WebRequest> get_WebRequests();
    [CompilerGeneratedAttribute]
public virtual void set_WebRequests(IList`1<WebRequest> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<WebResponse> get_WebResponses();
    [CompilerGeneratedAttribute]
public virtual void set_WebResponses(IList`1<WebResponse> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual ExternalProperties DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(Uri schema, SarifVersion version, Nullable`1<Guid> guid, Nullable`1<Guid> runGuid, Conversion conversion, IEnumerable`1<Graph> graphs, PropertyBag externalizedProperties, IEnumerable`1<Artifact> artifacts, IEnumerable`1<Invocation> invocations, IEnumerable`1<LogicalLocation> logicalLocations, IEnumerable`1<ThreadFlowLocation> threadFlowLocations, IEnumerable`1<Result> results, IEnumerable`1<ToolComponent> taxonomies, ToolComponent driver, IEnumerable`1<ToolComponent> extensions, IEnumerable`1<ToolComponent> policies, IEnumerable`1<ToolComponent> translations, IEnumerable`1<Address> addresses, IEnumerable`1<WebRequest> webRequests, IEnumerable`1<WebResponse> webResponses, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ExternalPropertiesComparer : object {
    internal static ExternalPropertiesComparer Instance;
    private static ExternalPropertiesComparer();
    public sealed virtual int Compare(ExternalProperties left, ExternalProperties right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ExternalPropertiesEqualityComparer : object {
    internal static ExternalPropertiesEqualityComparer Instance;
    private static ExternalPropertiesEqualityComparer();
    public sealed virtual bool Equals(ExternalProperties left, ExternalProperties right);
    public sealed virtual int GetHashCode(ExternalProperties obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.ExternalPropertyFileReference : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private ArtifactLocation <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItemCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<ExternalPropertyFileReference> ValueComparer { get; }
    public static IComparer`1<ExternalPropertyFileReference> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public ArtifactLocation Location { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Guid> Guid { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("-1")]
[JsonPropertyAttribute]
public int ItemCount { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public ExternalPropertyFileReference(ArtifactLocation location, Nullable`1<Guid> guid, int itemCount, IDictionary`2<string, SerializedPropertyInfo> properties);
    public ExternalPropertyFileReference(ExternalPropertyFileReference other);
    public static IEqualityComparer`1<ExternalPropertyFileReference> get_ValueComparer();
    public bool ValueEquals(ExternalPropertyFileReference other);
    public int ValueGetHashCode();
    public static IComparer`1<ExternalPropertyFileReference> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual ArtifactLocation get_Location();
    [CompilerGeneratedAttribute]
public virtual void set_Location(ArtifactLocation value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_Guid();
    [CompilerGeneratedAttribute]
public virtual void set_Guid(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual int get_ItemCount();
    [CompilerGeneratedAttribute]
public virtual void set_ItemCount(int value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual ExternalPropertyFileReference DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(ArtifactLocation location, Nullable`1<Guid> guid, int itemCount, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ExternalPropertyFileReferenceComparer : object {
    internal static ExternalPropertyFileReferenceComparer Instance;
    private static ExternalPropertyFileReferenceComparer();
    public sealed virtual int Compare(ExternalPropertyFileReference left, ExternalPropertyFileReference right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ExternalPropertyFileReferenceEqualityComparer : object {
    internal static ExternalPropertyFileReferenceEqualityComparer Instance;
    private static ExternalPropertyFileReferenceEqualityComparer();
    public sealed virtual bool Equals(ExternalPropertyFileReference left, ExternalPropertyFileReference right);
    public sealed virtual int GetHashCode(ExternalPropertyFileReference obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.ExternalPropertyFileReferences : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private ExternalPropertyFileReference <Conversion>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ExternalPropertyFileReference> <Graphs>k__BackingField;
    [CompilerGeneratedAttribute]
private ExternalPropertyFileReference <ExternalizedProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ExternalPropertyFileReference> <Artifacts>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ExternalPropertyFileReference> <Invocations>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ExternalPropertyFileReference> <LogicalLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ExternalPropertyFileReference> <ThreadFlowLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ExternalPropertyFileReference> <Results>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ExternalPropertyFileReference> <Taxonomies>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ExternalPropertyFileReference> <Addresses>k__BackingField;
    [CompilerGeneratedAttribute]
private ExternalPropertyFileReference <Driver>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ExternalPropertyFileReference> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ExternalPropertyFileReference> <Policies>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ExternalPropertyFileReference> <Translations>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ExternalPropertyFileReference> <WebRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ExternalPropertyFileReference> <WebResponses>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<ExternalPropertyFileReferences> ValueComparer { get; }
    public static IComparer`1<ExternalPropertyFileReferences> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public ExternalPropertyFileReference Conversion { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ExternalPropertyFileReference> Graphs { get; public set; }
    [DataMemberAttribute]
public ExternalPropertyFileReference ExternalizedProperties { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ExternalPropertyFileReference> Artifacts { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ExternalPropertyFileReference> Invocations { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ExternalPropertyFileReference> LogicalLocations { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ExternalPropertyFileReference> ThreadFlowLocations { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ExternalPropertyFileReference> Results { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ExternalPropertyFileReference> Taxonomies { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ExternalPropertyFileReference> Addresses { get; public set; }
    [DataMemberAttribute]
public ExternalPropertyFileReference Driver { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ExternalPropertyFileReference> Extensions { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ExternalPropertyFileReference> Policies { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ExternalPropertyFileReference> Translations { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ExternalPropertyFileReference> WebRequests { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ExternalPropertyFileReference> WebResponses { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public ExternalPropertyFileReferences(ExternalPropertyFileReference conversion, IEnumerable`1<ExternalPropertyFileReference> graphs, ExternalPropertyFileReference externalizedProperties, IEnumerable`1<ExternalPropertyFileReference> artifacts, IEnumerable`1<ExternalPropertyFileReference> invocations, IEnumerable`1<ExternalPropertyFileReference> logicalLocations, IEnumerable`1<ExternalPropertyFileReference> threadFlowLocations, IEnumerable`1<ExternalPropertyFileReference> results, IEnumerable`1<ExternalPropertyFileReference> taxonomies, IEnumerable`1<ExternalPropertyFileReference> addresses, ExternalPropertyFileReference driver, IEnumerable`1<ExternalPropertyFileReference> extensions, IEnumerable`1<ExternalPropertyFileReference> policies, IEnumerable`1<ExternalPropertyFileReference> translations, IEnumerable`1<ExternalPropertyFileReference> webRequests, IEnumerable`1<ExternalPropertyFileReference> webResponses, IDictionary`2<string, SerializedPropertyInfo> properties);
    public ExternalPropertyFileReferences(ExternalPropertyFileReferences other);
    public static IEqualityComparer`1<ExternalPropertyFileReferences> get_ValueComparer();
    public bool ValueEquals(ExternalPropertyFileReferences other);
    public int ValueGetHashCode();
    public static IComparer`1<ExternalPropertyFileReferences> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual ExternalPropertyFileReference get_Conversion();
    [CompilerGeneratedAttribute]
public virtual void set_Conversion(ExternalPropertyFileReference value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ExternalPropertyFileReference> get_Graphs();
    [CompilerGeneratedAttribute]
public virtual void set_Graphs(IList`1<ExternalPropertyFileReference> value);
    [CompilerGeneratedAttribute]
public virtual ExternalPropertyFileReference get_ExternalizedProperties();
    [CompilerGeneratedAttribute]
public virtual void set_ExternalizedProperties(ExternalPropertyFileReference value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ExternalPropertyFileReference> get_Artifacts();
    [CompilerGeneratedAttribute]
public virtual void set_Artifacts(IList`1<ExternalPropertyFileReference> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ExternalPropertyFileReference> get_Invocations();
    [CompilerGeneratedAttribute]
public virtual void set_Invocations(IList`1<ExternalPropertyFileReference> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ExternalPropertyFileReference> get_LogicalLocations();
    [CompilerGeneratedAttribute]
public virtual void set_LogicalLocations(IList`1<ExternalPropertyFileReference> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ExternalPropertyFileReference> get_ThreadFlowLocations();
    [CompilerGeneratedAttribute]
public virtual void set_ThreadFlowLocations(IList`1<ExternalPropertyFileReference> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ExternalPropertyFileReference> get_Results();
    [CompilerGeneratedAttribute]
public virtual void set_Results(IList`1<ExternalPropertyFileReference> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ExternalPropertyFileReference> get_Taxonomies();
    [CompilerGeneratedAttribute]
public virtual void set_Taxonomies(IList`1<ExternalPropertyFileReference> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ExternalPropertyFileReference> get_Addresses();
    [CompilerGeneratedAttribute]
public virtual void set_Addresses(IList`1<ExternalPropertyFileReference> value);
    [CompilerGeneratedAttribute]
public virtual ExternalPropertyFileReference get_Driver();
    [CompilerGeneratedAttribute]
public virtual void set_Driver(ExternalPropertyFileReference value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ExternalPropertyFileReference> get_Extensions();
    [CompilerGeneratedAttribute]
public virtual void set_Extensions(IList`1<ExternalPropertyFileReference> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ExternalPropertyFileReference> get_Policies();
    [CompilerGeneratedAttribute]
public virtual void set_Policies(IList`1<ExternalPropertyFileReference> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ExternalPropertyFileReference> get_Translations();
    [CompilerGeneratedAttribute]
public virtual void set_Translations(IList`1<ExternalPropertyFileReference> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ExternalPropertyFileReference> get_WebRequests();
    [CompilerGeneratedAttribute]
public virtual void set_WebRequests(IList`1<ExternalPropertyFileReference> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ExternalPropertyFileReference> get_WebResponses();
    [CompilerGeneratedAttribute]
public virtual void set_WebResponses(IList`1<ExternalPropertyFileReference> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual ExternalPropertyFileReferences DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(ExternalPropertyFileReference conversion, IEnumerable`1<ExternalPropertyFileReference> graphs, ExternalPropertyFileReference externalizedProperties, IEnumerable`1<ExternalPropertyFileReference> artifacts, IEnumerable`1<ExternalPropertyFileReference> invocations, IEnumerable`1<ExternalPropertyFileReference> logicalLocations, IEnumerable`1<ExternalPropertyFileReference> threadFlowLocations, IEnumerable`1<ExternalPropertyFileReference> results, IEnumerable`1<ExternalPropertyFileReference> taxonomies, IEnumerable`1<ExternalPropertyFileReference> addresses, ExternalPropertyFileReference driver, IEnumerable`1<ExternalPropertyFileReference> extensions, IEnumerable`1<ExternalPropertyFileReference> policies, IEnumerable`1<ExternalPropertyFileReference> translations, IEnumerable`1<ExternalPropertyFileReference> webRequests, IEnumerable`1<ExternalPropertyFileReference> webResponses, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ExternalPropertyFileReferencesComparer : object {
    internal static ExternalPropertyFileReferencesComparer Instance;
    private static ExternalPropertyFileReferencesComparer();
    public sealed virtual int Compare(ExternalPropertyFileReferences left, ExternalPropertyFileReferences right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ExternalPropertyFileReferencesEqualityComparer : object {
    internal static ExternalPropertyFileReferencesEqualityComparer Instance;
    private static ExternalPropertyFileReferencesEqualityComparer();
    public sealed virtual bool Equals(ExternalPropertyFileReferences left, ExternalPropertyFileReferences right);
    public sealed virtual int GetHashCode(ExternalPropertyFileReferences obj);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public enum Microsoft.CodeAnalysis.Sarif.FailureLevel : Enum {
    public int value__;
    public static FailureLevel None;
    public static FailureLevel Note;
    public static FailureLevel Warning;
    public static FailureLevel Error;
}
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionaryConverter")]
public class Microsoft.CodeAnalysis.Sarif.FailureLevelSet : HashSet`1<FailureLevel> {
    public FailureLevelSet(IEnumerable`1<FailureLevel> values);
    protected FailureLevelSet(SerializationInfo info, StreamingContext context);
}
public class Microsoft.CodeAnalysis.Sarif.FileEncoding : object {
    private static Encoding Windows1252;
    private static FileEncoding();
    public static bool IsTextualData(Byte[] bytes);
    public static bool IsTextualData(Byte[] bytes, int start, int count);
}
[FlagsAttribute]
public enum Microsoft.CodeAnalysis.Sarif.FilePersistenceOptions : Enum {
    public int value__;
    public static FilePersistenceOptions None;
    public static FilePersistenceOptions PrettyPrint;
    public static FilePersistenceOptions Minify;
    public static FilePersistenceOptions ForceOverwrite;
    public static FilePersistenceOptions Inline;
    public static FilePersistenceOptions Optimize;
}
public class Microsoft.CodeAnalysis.Sarif.FileRegionsCache : object {
    public static int DefaultCacheCapacity;
    private IFileSystem _fileSystem;
    internal Cache`2<string, string> _fileTextCache;
    internal Cache`2<string, HashData> _hashDataCache;
    internal Cache`2<string, NewLineIndex> _newLineIndexCache;
    internal static int BIGSNIPPETLENGTH;
    internal static int SMALLSNIPPETLENGTH;
    public FileRegionsCache(int capacity, IFileSystem fileSystem);
    public virtual Region PopulateTextRegionProperties(Region inputRegion, Uri uri, bool populateSnippet, string fileText);
    public void ClearCache();
    private static Region PopulateTextRegionProperties(NewLineIndex lineIndex, Region inputRegion, string fileText, bool populateSnippet);
    public Region ConstructMultilineContextSnippet(Region inputRegion, Uri uri, string fileText);
    private static void PopulatePropertiesFromCharOffsetAndLength(NewLineIndex newLineIndex, Region region);
    private static void PopulatePropertiesFromStartAndEndProperties(NewLineIndex lineIndex, Region region, string fileText);
    private static void PopulateEndLine(Region region);
    private static void PopulateStartColumn(Region region);
    private static void PopulateEndColumn(NewLineIndex lineIndex, Region region, string fileText);
    private static void PopulateCharOffset(NewLineIndex lineIndex, Region region);
    private static void PopulateCharLength(NewLineIndex lineIndex, Region region);
    public HashData GetHashData(Uri uri, string fileText);
    public NewLineIndex GetNewLineIndex(Uri uri, string fileText);
    private string RetrieveTextForFile(string path);
    private HashData BuildHashDataForFile(string path);
    private NewLineIndex BuildIndexForFile(string path);
    private static void Assert(bool _);
}
internal static class Microsoft.CodeAnalysis.Sarif.FileSearcherHelper : object {
    public static string SearchForFileInEnvironmentVariable(string environmentVariable, string fileName, IFileSystem fileSystem);
    public static string SearchForFileNameInPath(string path, string fileName, IFileSystem fileSystem);
}
public class Microsoft.CodeAnalysis.Sarif.FileSystem : object {
    public static FileSystem Instance;
    public string EnvironmentCurrentDirectory { get; public set; }
    private static FileSystem();
    public sealed virtual Assembly AssemblyLoadFrom(string assemblyFile);
    public sealed virtual bool DirectoryExists(string path);
    public sealed virtual string get_EnvironmentCurrentDirectory();
    public sealed virtual void set_EnvironmentCurrentDirectory(string value);
    public sealed virtual bool FileExists(string path);
    public sealed virtual IEnumerable`1<string> DirectoryEnumerateDirectories(string path, string searchPattern, SearchOption searchOption);
    public sealed virtual IEnumerable`1<string> DirectoryGetDirectories(string path);
    public sealed virtual IEnumerable`1<string> DirectoryGetFiles(string path, string searchPattern);
    public sealed virtual DateTime FileGetLastWriteTime(string path);
    public sealed virtual Byte[] FileReadAllBytes(string path);
    public sealed virtual String[] FileReadAllLines(string path);
    public sealed virtual string FileReadAllText(string path);
    public sealed virtual string FileReadAllText(string path, Encoding encoding);
    public sealed virtual void FileSetLastWriteTime(string path, DateTime lastWriteTime);
    public sealed virtual void FileWriteAllBytes(string path, Byte[] bytes);
    public sealed virtual void FileWriteAllText(string path, string contents);
    public sealed virtual Stream FileOpenRead(string path);
    public sealed virtual Stream FileCreate(string path);
    public sealed virtual void FileSetAttributes(string path, FileAttributes fileAttributes);
    public sealed virtual DirectoryInfo DirectoryCreateDirectory(string path);
    public sealed virtual void DirectoryDelete(string path, bool recursive);
    public sealed virtual void FileDelete(string path);
    public sealed virtual IEnumerable`1<string> DirectoryEnumerateFiles(string path);
    public sealed virtual IEnumerable`1<string> DirectoryEnumerateFiles(string path, string searchPattern, SearchOption searchOption);
    public sealed virtual IEnumerable`1<string> FileReadLines(string path);
    public sealed virtual long FileInfoLength(string path);
    public sealed virtual FileVersionInfo FileVersionInfoGetVersionInfo(string fileName);
    public sealed virtual string PathCombine(String[] paths);
    public sealed virtual string PathGetDirectoryName(string path);
    public sealed virtual string PathGetFullPath(string path);
    public sealed virtual string PathGetFileNameWithoutExtension(string path);
}
public static class Microsoft.CodeAnalysis.Sarif.FilteringStrategies : object {
    public static Func`2<Result, bool> NewOrUnbaselined;
    private static FilteringStrategies();
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.Fix : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private Message <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ArtifactChange> <ArtifactChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<Fix> ValueComparer { get; }
    public static IComparer`1<Fix> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public Message Description { get; public set; }
    [DataMemberAttribute]
public IList`1<ArtifactChange> ArtifactChanges { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public Fix(Message description, IEnumerable`1<ArtifactChange> artifactChanges, IDictionary`2<string, SerializedPropertyInfo> properties);
    public Fix(Fix other);
    public static IEqualityComparer`1<Fix> get_ValueComparer();
    public bool ValueEquals(Fix other);
    public int ValueGetHashCode();
    public static IComparer`1<Fix> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual Message get_Description();
    [CompilerGeneratedAttribute]
public virtual void set_Description(Message value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ArtifactChange> get_ArtifactChanges();
    [CompilerGeneratedAttribute]
public virtual void set_ArtifactChanges(IList`1<ArtifactChange> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual Fix DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(Message description, IEnumerable`1<ArtifactChange> artifactChanges, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.FixComparer : object {
    internal static FixComparer Instance;
    private static FixComparer();
    public sealed virtual int Compare(Fix left, Fix right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.FixEqualityComparer : object {
    internal static FixEqualityComparer Instance;
    private static FixEqualityComparer();
    public sealed virtual bool Equals(Fix left, Fix right);
    public sealed virtual int GetHashCode(Fix obj);
}
public class Microsoft.CodeAnalysis.Sarif.GitHelper : object {
    public static GitHelper Default;
    private IFileSystem fileSystem;
    private ProcessRunner processRunner;
    private ReaderWriterLockSlim cacheLock;
    internal static string s_expectedGitExePath;
    internal Dictionary`2<string, string> directoryToRepoRootPathDictionary;
    [CompilerGeneratedAttribute]
private string <GitExePath>k__BackingField;
    public string GitExePath { get; public set; }
    public GitHelper(IFileSystem fileSystem, ProcessRunner processRunner);
    private static GitHelper();
    private static string DefaultProcessRunnerImpl(string workingDirectory, string exePath, string arguments);
    public bool IsRepositoryRoot(string repoPath);
    [CompilerGeneratedAttribute]
public string get_GitExePath();
    [CompilerGeneratedAttribute]
public void set_GitExePath(string value);
    public Uri GetRemoteUri(string repoPath);
    public string GetCurrentCommit(string repoPath);
    public string GetBlame(string filePath);
    public void Checkout(string repoPath, string commitSha);
    internal static string GetGitExePath(IFileSystem fileSystem);
    public string GetCurrentBranch(string repoPath);
    public string GetTopLevel(string repoPath);
    private string GetSimpleGitCommandOutput(string repoPath, string args, bool trimLines);
    private static string TrimNewlines(string text);
    public string GetRepositoryRoot(string path, bool useCache);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.Graph : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private Message <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Node> <Nodes>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Edge> <Edges>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<Graph> ValueComparer { get; }
    public static IComparer`1<Graph> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public Message Description { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<Node> Nodes { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<Edge> Edges { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public Graph(Message description, IEnumerable`1<Node> nodes, IEnumerable`1<Edge> edges, IDictionary`2<string, SerializedPropertyInfo> properties);
    public Graph(Graph other);
    public static IEqualityComparer`1<Graph> get_ValueComparer();
    public bool ValueEquals(Graph other);
    public int ValueGetHashCode();
    public static IComparer`1<Graph> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual Message get_Description();
    [CompilerGeneratedAttribute]
public virtual void set_Description(Message value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Node> get_Nodes();
    [CompilerGeneratedAttribute]
public virtual void set_Nodes(IList`1<Node> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Edge> get_Edges();
    [CompilerGeneratedAttribute]
public virtual void set_Edges(IList`1<Edge> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual Graph DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(Message description, IEnumerable`1<Node> nodes, IEnumerable`1<Edge> edges, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.GraphComparer : object {
    internal static GraphComparer Instance;
    private static GraphComparer();
    public sealed virtual int Compare(Graph left, Graph right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.GraphEqualityComparer : object {
    internal static GraphEqualityComparer Instance;
    private static GraphEqualityComparer();
    public sealed virtual bool Equals(Graph left, Graph right);
    public sealed virtual int GetHashCode(Graph obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.GraphTraversal : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private int <RunGraphIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ResultGraphIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Message <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, MultiformatMessageString> <InitialState>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ImmutableState>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<EdgeTraversal> <EdgeTraversals>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<GraphTraversal> ValueComparer { get; }
    public static IComparer`1<GraphTraversal> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
[DefaultValueAttribute("-1")]
[JsonPropertyAttribute]
public int RunGraphIndex { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("-1")]
[JsonPropertyAttribute]
public int ResultGraphIndex { get; public set; }
    [DataMemberAttribute]
public Message Description { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, MultiformatMessageString> InitialState { get; public set; }
    [DataMemberAttribute]
public object ImmutableState { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<EdgeTraversal> EdgeTraversals { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public GraphTraversal(int runGraphIndex, int resultGraphIndex, Message description, IDictionary`2<string, MultiformatMessageString> initialState, object immutableState, IEnumerable`1<EdgeTraversal> edgeTraversals, IDictionary`2<string, SerializedPropertyInfo> properties);
    public GraphTraversal(GraphTraversal other);
    public static IEqualityComparer`1<GraphTraversal> get_ValueComparer();
    public bool ValueEquals(GraphTraversal other);
    public int ValueGetHashCode();
    public static IComparer`1<GraphTraversal> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual int get_RunGraphIndex();
    [CompilerGeneratedAttribute]
public virtual void set_RunGraphIndex(int value);
    [CompilerGeneratedAttribute]
public virtual int get_ResultGraphIndex();
    [CompilerGeneratedAttribute]
public virtual void set_ResultGraphIndex(int value);
    [CompilerGeneratedAttribute]
public virtual Message get_Description();
    [CompilerGeneratedAttribute]
public virtual void set_Description(Message value);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, MultiformatMessageString> get_InitialState();
    [CompilerGeneratedAttribute]
public virtual void set_InitialState(IDictionary`2<string, MultiformatMessageString> value);
    [CompilerGeneratedAttribute]
public virtual object get_ImmutableState();
    [CompilerGeneratedAttribute]
public virtual void set_ImmutableState(object value);
    [CompilerGeneratedAttribute]
public virtual IList`1<EdgeTraversal> get_EdgeTraversals();
    [CompilerGeneratedAttribute]
public virtual void set_EdgeTraversals(IList`1<EdgeTraversal> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual GraphTraversal DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(int runGraphIndex, int resultGraphIndex, Message description, IDictionary`2<string, MultiformatMessageString> initialState, object immutableState, IEnumerable`1<EdgeTraversal> edgeTraversals, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.GraphTraversalComparer : object {
    internal static GraphTraversalComparer Instance;
    private static GraphTraversalComparer();
    public sealed virtual int Compare(GraphTraversal left, GraphTraversal right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.GraphTraversalEqualityComparer : object {
    internal static GraphTraversalEqualityComparer Instance;
    private static GraphTraversalEqualityComparer();
    public sealed virtual bool Equals(GraphTraversal left, GraphTraversal right);
    public sealed virtual int GetHashCode(GraphTraversal obj);
}
public class Microsoft.CodeAnalysis.Sarif.HashData : object {
    [CompilerGeneratedAttribute]
private string <MD5>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha1>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha256>k__BackingField;
    public string MD5 { get; }
    public string Sha1 { get; }
    public string Sha256 { get; }
    public HashData(string md5, string sha1, string sha256);
    [CompilerGeneratedAttribute]
public string get_MD5();
    [CompilerGeneratedAttribute]
public string get_Sha1();
    [CompilerGeneratedAttribute]
public string get_Sha256();
    public IDictionary`2<string, string> ToDictionary();
}
public static class Microsoft.CodeAnalysis.Sarif.HashUtilities : object {
    private static int TAB;
    private static int SPACE;
    private static int LF;
    private static int CR;
    private static int EOF;
    private static int BLOCK_SIZE;
    private static Long MOD;
    private static HashUtilities();
    public static IDictionary`2<string, HashData> MultithreadedComputeTargetFileHashes(IEnumerable`1<string> analysisTargets, bool suppressConsoleOutput);
    public static HashData ComputeHashes(string fileName, IFileSystem fileSystem);
    public static HashData ComputeHashes(Stream stream);
    public static HashData ComputeHashesForText(string text);
    public static string ComputeSha256Hash(string fileName, IFileSystem fileSystem);
    public static string ComputeStringSha256Hash(string text);
    public static string ComputeSha1Hash(string fileName, IFileSystem fileSystem);
    public static string ComputeMD5Hash(string fileName, IFileSystem fileSystem);
    public static Dictionary`2<int, string> RollingHash(string fileText);
    private static Long ComputeFirstMod();
}
public class Microsoft.CodeAnalysis.Sarif.HttpClientWrapper : object {
    private HttpClient httpClient;
    public HttpClientWrapper(HttpClient httpClient);
    public HttpClientWrapper(HttpMessageHandler handler);
    public virtual Task`1<HttpResponseMessage> GetAsync(string requestUri);
    public virtual Task`1<HttpResponseMessage> PostAsync(string requestUri, HttpContent content);
    public virtual Task`1<HttpResponseMessage> PutAsync(string requestUri, HttpContent content);
    public sealed virtual void Dispose();
}
public interface Microsoft.CodeAnalysis.Sarif.IAnalysisContext {
    public IList`1<VersionControlDetails> VersionControlProvenance { get; public set; }
    public string PostUri { get; public set; }
    public string OutputFilePath { get; public set; }
    public string BaselineFilePath { get; public set; }
    public string EventsFilePath { get; public set; }
    public string ConfigurationFilePath { get; public set; }
    public bool Quiet { get; public set; }
    public bool RichReturnCode { get; public set; }
    public string AutomationId { get; public set; }
    public Guid AutomationGuid { get; public set; }
    public FilePersistenceOptions OutputFileOptions { get; public set; }
    public IFileSystem FileSystem { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    public IArtifactProvider TargetsProvider { get; public set; }
    public IEnumeratedArtifact CurrentTarget { get; public set; }
    public ISet`1<string> InvocationPropertiesToLog { get; public set; }
    public ISet`1<string> TargetFileSpecifiers { get; public set; }
    public ISet`1<string> PluginFilePaths { get; public set; }
    public FailureLevelSet FailureLevels { get; public set; }
    public ResultKindSet ResultKinds { get; public set; }
    public RuleKindSet RuleKinds { get; public set; }
    public ISet`1<string> InsertProperties { get; public set; }
    public OptionallyEmittedData DataToInsert { get; public set; }
    public OptionallyEmittedData DataToRemove { get; public set; }
    public bool Recurse { get; public set; }
    public int Threads { get; public set; }
    public HashData Hashes { get; public set; }
    public IList`1<Exception> RuntimeExceptions { get; public set; }
    public bool IsValidAnalysisTarget { get; }
    public ReportingDescriptor Rule { get; public set; }
    public PropertiesDictionary Policy { get; public set; }
    public IAnalysisLogger Logger { get; public set; }
    public RuntimeConditions RuntimeErrors { get; public set; }
    public bool AnalysisComplete { get; public set; }
    public ISet`1<string> Traces { get; public set; }
    public long MaxFileSizeInKilobytes { get; public set; }
    public int TimeoutInMilliseconds { get; public set; }
    public abstract virtual IList`1<VersionControlDetails> get_VersionControlProvenance();
    public abstract virtual void set_VersionControlProvenance(IList`1<VersionControlDetails> value);
    public abstract virtual string get_PostUri();
    public abstract virtual void set_PostUri(string value);
    public abstract virtual string get_OutputFilePath();
    public abstract virtual void set_OutputFilePath(string value);
    public abstract virtual string get_BaselineFilePath();
    public abstract virtual void set_BaselineFilePath(string value);
    public abstract virtual string get_EventsFilePath();
    public abstract virtual void set_EventsFilePath(string value);
    public abstract virtual string get_ConfigurationFilePath();
    public abstract virtual void set_ConfigurationFilePath(string value);
    public abstract virtual bool get_Quiet();
    public abstract virtual void set_Quiet(bool value);
    public abstract virtual bool get_RichReturnCode();
    public abstract virtual void set_RichReturnCode(bool value);
    public abstract virtual string get_AutomationId();
    public abstract virtual void set_AutomationId(string value);
    public abstract virtual Guid get_AutomationGuid();
    public abstract virtual void set_AutomationGuid(Guid value);
    public abstract virtual FilePersistenceOptions get_OutputFileOptions();
    public abstract virtual void set_OutputFileOptions(FilePersistenceOptions value);
    public abstract virtual IFileSystem get_FileSystem();
    public abstract virtual void set_FileSystem(IFileSystem value);
    public abstract virtual CancellationToken get_CancellationToken();
    public abstract virtual void set_CancellationToken(CancellationToken value);
    public abstract virtual IArtifactProvider get_TargetsProvider();
    public abstract virtual void set_TargetsProvider(IArtifactProvider value);
    public abstract virtual IEnumeratedArtifact get_CurrentTarget();
    public abstract virtual void set_CurrentTarget(IEnumeratedArtifact value);
    public abstract virtual ISet`1<string> get_InvocationPropertiesToLog();
    public abstract virtual void set_InvocationPropertiesToLog(ISet`1<string> value);
    public abstract virtual ISet`1<string> get_TargetFileSpecifiers();
    public abstract virtual void set_TargetFileSpecifiers(ISet`1<string> value);
    public abstract virtual ISet`1<string> get_PluginFilePaths();
    public abstract virtual void set_PluginFilePaths(ISet`1<string> value);
    public abstract virtual FailureLevelSet get_FailureLevels();
    public abstract virtual void set_FailureLevels(FailureLevelSet value);
    public abstract virtual ResultKindSet get_ResultKinds();
    public abstract virtual void set_ResultKinds(ResultKindSet value);
    public abstract virtual RuleKindSet get_RuleKinds();
    public abstract virtual void set_RuleKinds(RuleKindSet value);
    public abstract virtual ISet`1<string> get_InsertProperties();
    public abstract virtual void set_InsertProperties(ISet`1<string> value);
    public abstract virtual OptionallyEmittedData get_DataToInsert();
    public abstract virtual void set_DataToInsert(OptionallyEmittedData value);
    public abstract virtual OptionallyEmittedData get_DataToRemove();
    public abstract virtual void set_DataToRemove(OptionallyEmittedData value);
    public abstract virtual bool get_Recurse();
    public abstract virtual void set_Recurse(bool value);
    public abstract virtual int get_Threads();
    public abstract virtual void set_Threads(int value);
    public abstract virtual HashData get_Hashes();
    public abstract virtual void set_Hashes(HashData value);
    public abstract virtual IList`1<Exception> get_RuntimeExceptions();
    public abstract virtual void set_RuntimeExceptions(IList`1<Exception> value);
    public abstract virtual bool get_IsValidAnalysisTarget();
    public abstract virtual ReportingDescriptor get_Rule();
    public abstract virtual void set_Rule(ReportingDescriptor value);
    public abstract virtual PropertiesDictionary get_Policy();
    public abstract virtual void set_Policy(PropertiesDictionary value);
    public abstract virtual IAnalysisLogger get_Logger();
    public abstract virtual void set_Logger(IAnalysisLogger value);
    public abstract virtual RuntimeConditions get_RuntimeErrors();
    public abstract virtual void set_RuntimeErrors(RuntimeConditions value);
    public abstract virtual bool get_AnalysisComplete();
    public abstract virtual void set_AnalysisComplete(bool value);
    public abstract virtual ISet`1<string> get_Traces();
    public abstract virtual void set_Traces(ISet`1<string> value);
    public abstract virtual long get_MaxFileSizeInKilobytes();
    public abstract virtual void set_MaxFileSizeInKilobytes(long value);
    public abstract virtual int get_TimeoutInMilliseconds();
    public abstract virtual void set_TimeoutInMilliseconds(int value);
}
public interface Microsoft.CodeAnalysis.Sarif.IAnalysisLogger {
    public FileRegionsCache FileRegionsCache { get; public set; }
    public abstract virtual FileRegionsCache get_FileRegionsCache();
    public abstract virtual void set_FileRegionsCache(FileRegionsCache value);
    public abstract virtual void AnalysisStarted();
    public abstract virtual void AnalysisStopped(RuntimeConditions runtimeConditions);
    public abstract virtual void AnalyzingTarget(IAnalysisContext context);
    public abstract virtual void TargetAnalyzed(IAnalysisContext context);
    public abstract virtual void Log(ReportingDescriptor rule, Result result, Nullable`1<int> extensionIndex);
    public abstract virtual void LogToolNotification(Notification notification, ReportingDescriptor associatedRule);
    public abstract virtual void LogConfigurationNotification(Notification notification);
}
public interface Microsoft.CodeAnalysis.Sarif.IArtifactProvider {
    public IEnumerable`1<IEnumeratedArtifact> Artifacts { get; public set; }
    public IFileSystem FileSystem { get; public set; }
    public abstract virtual IEnumerable`1<IEnumeratedArtifact> get_Artifacts();
    public abstract virtual void set_Artifacts(IEnumerable`1<IEnumeratedArtifact> value);
    public abstract virtual IFileSystem get_FileSystem();
    public abstract virtual void set_FileSystem(IFileSystem value);
}
public interface Microsoft.CodeAnalysis.Sarif.IBlameHunk {
    public string Name { get; }
    public string Email { get; }
    public string CommitSha { get; }
    public int LineCount { get; }
    public int FinalStartLineNumber { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Email();
    public abstract virtual string get_CommitSha();
    public abstract virtual int get_LineCount();
    public abstract virtual int get_FinalStartLineNumber();
    public abstract virtual bool ContainsLine(int line);
}
public interface Microsoft.CodeAnalysis.Sarif.IConsoleCapture {
    public string Text { get; }
    public abstract virtual string get_Text();
    public abstract virtual Task`1<string> Capture(StreamReader reader, CancellationToken cancellationToken);
}
public interface Microsoft.CodeAnalysis.Sarif.IEnumeratedArtifact {
    public Uri Uri { get; }
    public bool IsBinary { get; }
    public Stream Stream { get; public set; }
    public Encoding Encoding { get; public set; }
    public string Contents { get; public set; }
    public Byte[] Bytes { get; public set; }
    public Nullable`1<long> SizeInBytes { get; public set; }
    public abstract virtual Uri get_Uri();
    public abstract virtual bool get_IsBinary();
    public abstract virtual Stream get_Stream();
    public abstract virtual void set_Stream(Stream value);
    public abstract virtual Encoding get_Encoding();
    public abstract virtual void set_Encoding(Encoding value);
    public abstract virtual string get_Contents();
    public abstract virtual void set_Contents(string value);
    public abstract virtual Byte[] get_Bytes();
    public abstract virtual void set_Bytes(Byte[] value);
    public abstract virtual Nullable`1<long> get_SizeInBytes();
    public abstract virtual void set_SizeInBytes(Nullable`1<long> value);
}
public interface Microsoft.CodeAnalysis.Sarif.IFileSystem {
    public string EnvironmentCurrentDirectory { get; public set; }
    public abstract virtual Assembly AssemblyLoadFrom(string assemblyFile);
    public abstract virtual DirectoryInfo DirectoryCreateDirectory(string path);
    public abstract virtual void DirectoryDelete(string path, bool recursive);
    public abstract virtual IEnumerable`1<string> DirectoryEnumerateDirectories(string path, string searchPattern, SearchOption searchOption);
    public abstract virtual IEnumerable`1<string> DirectoryEnumerateFiles(string path);
    public abstract virtual IEnumerable`1<string> DirectoryEnumerateFiles(string path, string searchPattern, SearchOption searchOption);
    public abstract virtual bool DirectoryExists(string path);
    public abstract virtual IEnumerable`1<string> DirectoryGetDirectories(string path);
    public abstract virtual IEnumerable`1<string> DirectoryGetFiles(string path, string searchPattern);
    public abstract virtual string get_EnvironmentCurrentDirectory();
    public abstract virtual void set_EnvironmentCurrentDirectory(string value);
    public abstract virtual Stream FileCreate(string path);
    public abstract virtual void FileDelete(string path);
    public abstract virtual bool FileExists(string path);
    public abstract virtual DateTime FileGetLastWriteTime(string path);
    public abstract virtual Byte[] FileReadAllBytes(string path);
    public abstract virtual String[] FileReadAllLines(string path);
    public abstract virtual IEnumerable`1<string> FileReadLines(string path);
    public abstract virtual string FileReadAllText(string path);
    public abstract virtual string FileReadAllText(string path, Encoding encoding);
    public abstract virtual void FileSetLastWriteTime(string path, DateTime lastWriteTime);
    public abstract virtual void FileWriteAllBytes(string path, Byte[] bytes);
    public abstract virtual void FileWriteAllText(string path, string contents);
    public abstract virtual Stream FileOpenRead(string path);
    public abstract virtual void FileSetAttributes(string path, FileAttributes fileAttributes);
    public abstract virtual long FileInfoLength(string path);
    public abstract virtual FileVersionInfo FileVersionInfoGetVersionInfo(string fileName);
    public abstract virtual string PathCombine(String[] paths);
    public abstract virtual string PathGetDirectoryName(string path);
    public abstract virtual string PathGetFullPath(string path);
    public abstract virtual string PathGetFileNameWithoutExtension(string path);
}
public interface Microsoft.CodeAnalysis.Sarif.IHttpClient {
    public abstract virtual Task`1<HttpResponseMessage> GetAsync(string requestUri);
    public abstract virtual Task`1<HttpResponseMessage> PostAsync(string requestUri, HttpContent content);
    public abstract virtual Task`1<HttpResponseMessage> PutAsync(string requestUri, HttpContent content);
}
public interface Microsoft.CodeAnalysis.Sarif.IMarker {
}
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionaryConverter")]
public class Microsoft.CodeAnalysis.Sarif.IntegerSet : HashSet`1<int> {
    public IntegerSet(IEnumerable`1<int> values);
    protected IntegerSet(SerializationInfo info, StreamingContext context);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.Invocation : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private string <CommandLine>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ArtifactLocation> <ResponseFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExitCode>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ConfigurationOverride> <RuleConfigurationOverrides>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ConfigurationOverride> <NotificationConfigurationOverrides>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Notification> <ToolExecutionNotifications>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Notification> <ToolConfigurationNotifications>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExitCodeDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExitSignalName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExitSignalNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProcessStartFailureMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExecutionSuccessful>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Machine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Account>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private ArtifactLocation <ExecutableLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private ArtifactLocation <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <EnvironmentVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private ArtifactLocation <Stdin>k__BackingField;
    [CompilerGeneratedAttribute]
private ArtifactLocation <Stdout>k__BackingField;
    [CompilerGeneratedAttribute]
private ArtifactLocation <Stderr>k__BackingField;
    [CompilerGeneratedAttribute]
private ArtifactLocation <StdoutStderr>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    private IEnumerable`1<string> _propertiesToLog;
    private bool _suppressNonDeterministicProperties;
    public static IEqualityComparer`1<Invocation> ValueComparer { get; }
    public static IComparer`1<Invocation> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public string CommandLine { get; public set; }
    [DataMemberAttribute]
public IList`1<string> Arguments { get; public set; }
    [DataMemberAttribute]
public IList`1<ArtifactLocation> ResponseFiles { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.DateTimeConverter")]
public DateTime StartTimeUtc { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.DateTimeConverter")]
public DateTime EndTimeUtc { get; public set; }
    [DataMemberAttribute]
public int ExitCode { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ConfigurationOverride> RuleConfigurationOverrides { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ConfigurationOverride> NotificationConfigurationOverrides { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<Notification> ToolExecutionNotifications { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<Notification> ToolConfigurationNotifications { get; public set; }
    [DataMemberAttribute]
public string ExitCodeDescription { get; public set; }
    [DataMemberAttribute]
public string ExitSignalName { get; public set; }
    [DataMemberAttribute]
public int ExitSignalNumber { get; public set; }
    [DataMemberAttribute]
public string ProcessStartFailureMessage { get; public set; }
    [DataMemberAttribute]
public bool ExecutionSuccessful { get; public set; }
    [DataMemberAttribute]
public string Machine { get; public set; }
    [DataMemberAttribute]
public string Account { get; public set; }
    [DataMemberAttribute]
public int ProcessId { get; public set; }
    [DataMemberAttribute]
public ArtifactLocation ExecutableLocation { get; public set; }
    [DataMemberAttribute]
public ArtifactLocation WorkingDirectory { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, string> EnvironmentVariables { get; public set; }
    [DataMemberAttribute]
public ArtifactLocation Stdin { get; public set; }
    [DataMemberAttribute]
public ArtifactLocation Stdout { get; public set; }
    [DataMemberAttribute]
public ArtifactLocation Stderr { get; public set; }
    [DataMemberAttribute]
public ArtifactLocation StdoutStderr { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public Invocation(string commandLine, IEnumerable`1<string> arguments, IEnumerable`1<ArtifactLocation> responseFiles, DateTime startTimeUtc, DateTime endTimeUtc, int exitCode, IEnumerable`1<ConfigurationOverride> ruleConfigurationOverrides, IEnumerable`1<ConfigurationOverride> notificationConfigurationOverrides, IEnumerable`1<Notification> toolExecutionNotifications, IEnumerable`1<Notification> toolConfigurationNotifications, string exitCodeDescription, string exitSignalName, int exitSignalNumber, string processStartFailureMessage, bool executionSuccessful, string machine, string account, int processId, ArtifactLocation executableLocation, ArtifactLocation workingDirectory, IDictionary`2<string, string> environmentVariables, ArtifactLocation stdin, ArtifactLocation stdout, ArtifactLocation stderr, ArtifactLocation stdoutStderr, IDictionary`2<string, SerializedPropertyInfo> properties);
    public Invocation(Invocation other);
    public static IEqualityComparer`1<Invocation> get_ValueComparer();
    public bool ValueEquals(Invocation other);
    public int ValueGetHashCode();
    public static IComparer`1<Invocation> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual string get_CommandLine();
    [CompilerGeneratedAttribute]
public virtual void set_CommandLine(string value);
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_Arguments();
    [CompilerGeneratedAttribute]
public virtual void set_Arguments(IList`1<string> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ArtifactLocation> get_ResponseFiles();
    [CompilerGeneratedAttribute]
public virtual void set_ResponseFiles(IList`1<ArtifactLocation> value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_StartTimeUtc();
    [CompilerGeneratedAttribute]
public virtual void set_StartTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_EndTimeUtc();
    [CompilerGeneratedAttribute]
public virtual void set_EndTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public virtual int get_ExitCode();
    [CompilerGeneratedAttribute]
public virtual void set_ExitCode(int value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ConfigurationOverride> get_RuleConfigurationOverrides();
    [CompilerGeneratedAttribute]
public virtual void set_RuleConfigurationOverrides(IList`1<ConfigurationOverride> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ConfigurationOverride> get_NotificationConfigurationOverrides();
    [CompilerGeneratedAttribute]
public virtual void set_NotificationConfigurationOverrides(IList`1<ConfigurationOverride> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Notification> get_ToolExecutionNotifications();
    [CompilerGeneratedAttribute]
public virtual void set_ToolExecutionNotifications(IList`1<Notification> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Notification> get_ToolConfigurationNotifications();
    [CompilerGeneratedAttribute]
public virtual void set_ToolConfigurationNotifications(IList`1<Notification> value);
    [CompilerGeneratedAttribute]
public virtual string get_ExitCodeDescription();
    [CompilerGeneratedAttribute]
public virtual void set_ExitCodeDescription(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ExitSignalName();
    [CompilerGeneratedAttribute]
public virtual void set_ExitSignalName(string value);
    [CompilerGeneratedAttribute]
public virtual int get_ExitSignalNumber();
    [CompilerGeneratedAttribute]
public virtual void set_ExitSignalNumber(int value);
    [CompilerGeneratedAttribute]
public virtual string get_ProcessStartFailureMessage();
    [CompilerGeneratedAttribute]
public virtual void set_ProcessStartFailureMessage(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_ExecutionSuccessful();
    [CompilerGeneratedAttribute]
public virtual void set_ExecutionSuccessful(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_Machine();
    [CompilerGeneratedAttribute]
public virtual void set_Machine(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Account();
    [CompilerGeneratedAttribute]
public virtual void set_Account(string value);
    [CompilerGeneratedAttribute]
public virtual int get_ProcessId();
    [CompilerGeneratedAttribute]
public virtual void set_ProcessId(int value);
    [CompilerGeneratedAttribute]
public virtual ArtifactLocation get_ExecutableLocation();
    [CompilerGeneratedAttribute]
public virtual void set_ExecutableLocation(ArtifactLocation value);
    [CompilerGeneratedAttribute]
public virtual ArtifactLocation get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public virtual void set_WorkingDirectory(ArtifactLocation value);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, string> get_EnvironmentVariables();
    [CompilerGeneratedAttribute]
public virtual void set_EnvironmentVariables(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public virtual ArtifactLocation get_Stdin();
    [CompilerGeneratedAttribute]
public virtual void set_Stdin(ArtifactLocation value);
    [CompilerGeneratedAttribute]
public virtual ArtifactLocation get_Stdout();
    [CompilerGeneratedAttribute]
public virtual void set_Stdout(ArtifactLocation value);
    [CompilerGeneratedAttribute]
public virtual ArtifactLocation get_Stderr();
    [CompilerGeneratedAttribute]
public virtual void set_Stderr(ArtifactLocation value);
    [CompilerGeneratedAttribute]
public virtual ArtifactLocation get_StdoutStderr();
    [CompilerGeneratedAttribute]
public virtual void set_StdoutStderr(ArtifactLocation value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual Invocation DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(string commandLine, IEnumerable`1<string> arguments, IEnumerable`1<ArtifactLocation> responseFiles, DateTime startTimeUtc, DateTime endTimeUtc, int exitCode, IEnumerable`1<ConfigurationOverride> ruleConfigurationOverrides, IEnumerable`1<ConfigurationOverride> notificationConfigurationOverrides, IEnumerable`1<Notification> toolExecutionNotifications, IEnumerable`1<Notification> toolConfigurationNotifications, string exitCodeDescription, string exitSignalName, int exitSignalNumber, string processStartFailureMessage, bool executionSuccessful, string machine, string account, int processId, ArtifactLocation executableLocation, ArtifactLocation workingDirectory, IDictionary`2<string, string> environmentVariables, ArtifactLocation stdin, ArtifactLocation stdout, ArtifactLocation stderr, ArtifactLocation stdoutStderr, IDictionary`2<string, SerializedPropertyInfo> properties);
    public static Invocation Create(bool emitMachineEnvironment, bool emitTimestamps, IEnumerable`1<string> propertiesToLog);
    private static IDictionary`2<string, string> CopyEnvironmentVariables();
    private bool ShouldLog(string propertyName);
    public bool ShouldSerializeArguments();
    public bool ShouldSerializeToolExecutionNotifications();
    public bool ShouldSerializeToolConfigurationNotifications();
    public bool ShouldSerializeStartTimeUtc();
    public bool ShouldSerializeEndTimeUtc();
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.InvocationComparer : object {
    internal static InvocationComparer Instance;
    private static InvocationComparer();
    public sealed virtual int Compare(Invocation left, Invocation right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.InvocationEqualityComparer : object {
    internal static InvocationEqualityComparer Instance;
    private static InvocationEqualityComparer();
    public sealed virtual bool Equals(Invocation left, Invocation right);
    public sealed virtual int GetHashCode(Invocation obj);
}
public interface Microsoft.CodeAnalysis.Sarif.IOption {
    public string Description { get; }
    public string Feature { get; }
    public string Name { get; }
    public Type Type { get; }
    public object DefaultValue { get; }
    public bool IsPerLanguage { get; }
    public abstract virtual string get_Description();
    public abstract virtual string get_Feature();
    public abstract virtual string get_Name();
    public abstract virtual Type get_Type();
    public abstract virtual object get_DefaultValue();
    public abstract virtual bool get_IsPerLanguage();
}
public interface Microsoft.CodeAnalysis.Sarif.IOptionsProvider {
    public abstract virtual IEnumerable`1<IOption> GetOptions();
}
public interface Microsoft.CodeAnalysis.Sarif.IPropertyBagHolder {
    public IList`1<string> PropertyNames { get; }
    public abstract virtual IList`1<string> get_PropertyNames();
    public abstract virtual bool TryGetProperty(string propertyName, String& value);
    public abstract virtual string GetProperty(string propertyName);
    public abstract virtual bool TryGetProperty(string propertyName, T& value);
    public abstract virtual T GetProperty(string propertyName);
    public abstract virtual void SetProperty(string propertyName, T value);
    public abstract virtual void SetPropertiesFrom(IPropertyBagHolder other);
    public abstract virtual void RemoveProperty(string propertyName);
}
public interface Microsoft.CodeAnalysis.Sarif.IResultLogWriter {
    public abstract virtual void Initialize(Run run);
    public abstract virtual void WriteArtifacts(IList`1<Artifact> fileDictionary);
    public abstract virtual void WriteLogicalLocations(IList`1<LogicalLocation> logicalLocations);
    public abstract virtual void WriteTool(Tool tool);
    public abstract virtual void OpenResults();
    public abstract virtual void WriteResult(Result result);
    public abstract virtual void CloseResults();
    public abstract virtual void WriteResults(IEnumerable`1<Result> results);
    public abstract virtual void WriteInvocations(IEnumerable`1<Invocation> invocations);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public interface Microsoft.CodeAnalysis.Sarif.ISarifNode {
    public SarifNodeKind SarifNodeKind { get; }
    public abstract virtual SarifNodeKind get_SarifNodeKind();
    public abstract virtual ISarifNode DeepClone();
}
internal interface Microsoft.CodeAnalysis.Sarif.IToolFileConverter {
    public abstract virtual void Convert(Stream input, IResultLogWriter output);
}
public class Microsoft.CodeAnalysis.Sarif.LineInfo : ValueType {
    private int _startOffset;
    private int _lineNumber;
    public int StartOffset { get; }
    public int LineNumber { get; }
    public LineInfo(int startOffset, int lineNumber);
    public int get_StartOffset();
    public int get_LineNumber();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(LineInfo other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(LineInfo left, LineInfo right);
    public static bool op_Inequality(LineInfo left, LineInfo right);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.Location : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private BigInteger <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private PhysicalLocation <PhysicalLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<LogicalLocation> <LogicalLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private Message <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Region> <Annotations>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<LocationRelationship> <Relationships>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<Location> ValueComparer { get; }
    public static IComparer`1<Location> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
[DefaultValueAttribute("-1")]
[JsonPropertyAttribute]
public BigInteger Id { get; public set; }
    [DataMemberAttribute]
public PhysicalLocation PhysicalLocation { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<LogicalLocation> LogicalLocations { get; public set; }
    [DataMemberAttribute]
public Message Message { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<Region> Annotations { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<LocationRelationship> Relationships { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public LogicalLocation LogicalLocation { get; public set; }
    public Location(int id, PhysicalLocation physicalLocation, IEnumerable`1<LogicalLocation> logicalLocations, Message message, IEnumerable`1<Region> annotations, IEnumerable`1<LocationRelationship> relationships, IDictionary`2<string, SerializedPropertyInfo> properties);
    public Location(Location other);
    public static IEqualityComparer`1<Location> get_ValueComparer();
    public bool ValueEquals(Location other);
    public int ValueGetHashCode();
    public static IComparer`1<Location> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual BigInteger get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(BigInteger value);
    [CompilerGeneratedAttribute]
public virtual PhysicalLocation get_PhysicalLocation();
    [CompilerGeneratedAttribute]
public virtual void set_PhysicalLocation(PhysicalLocation value);
    [CompilerGeneratedAttribute]
public virtual IList`1<LogicalLocation> get_LogicalLocations();
    [CompilerGeneratedAttribute]
public virtual void set_LogicalLocations(IList`1<LogicalLocation> value);
    [CompilerGeneratedAttribute]
public virtual Message get_Message();
    [CompilerGeneratedAttribute]
public virtual void set_Message(Message value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Region> get_Annotations();
    [CompilerGeneratedAttribute]
public virtual void set_Annotations(IList`1<Region> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<LocationRelationship> get_Relationships();
    [CompilerGeneratedAttribute]
public virtual void set_Relationships(IList`1<LocationRelationship> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual Location DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(BigInteger id, PhysicalLocation physicalLocation, IEnumerable`1<LogicalLocation> logicalLocations, Message message, IEnumerable`1<Region> annotations, IEnumerable`1<LocationRelationship> relationships, IDictionary`2<string, SerializedPropertyInfo> properties);
    public LogicalLocation get_LogicalLocation();
    public void set_LogicalLocation(LogicalLocation value);
    public bool ShouldSerializeId();
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.LocationComparer : object {
    internal static LocationComparer Instance;
    private static LocationComparer();
    public sealed virtual int Compare(Location left, Location right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.LocationEqualityComparer : object {
    internal static LocationEqualityComparer Instance;
    private static LocationEqualityComparer();
    public sealed virtual bool Equals(Location left, Location right);
    public sealed virtual int GetHashCode(Location obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.LocationRelationship : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private int <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Kinds>k__BackingField;
    [CompilerGeneratedAttribute]
private Message <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<LocationRelationship> ValueComparer { get; }
    public static IComparer`1<LocationRelationship> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public int Target { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<string> Kinds { get; public set; }
    [DataMemberAttribute]
public Message Description { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public LocationRelationship(int target, IEnumerable`1<string> kinds, Message description, IDictionary`2<string, SerializedPropertyInfo> properties);
    public LocationRelationship(LocationRelationship other);
    public static IEqualityComparer`1<LocationRelationship> get_ValueComparer();
    public bool ValueEquals(LocationRelationship other);
    public int ValueGetHashCode();
    public static IComparer`1<LocationRelationship> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual int get_Target();
    [CompilerGeneratedAttribute]
public virtual void set_Target(int value);
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_Kinds();
    [CompilerGeneratedAttribute]
public virtual void set_Kinds(IList`1<string> value);
    [CompilerGeneratedAttribute]
public virtual Message get_Description();
    [CompilerGeneratedAttribute]
public virtual void set_Description(Message value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual LocationRelationship DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(int target, IEnumerable`1<string> kinds, Message description, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.LocationRelationshipComparer : object {
    internal static LocationRelationshipComparer Instance;
    private static LocationRelationshipComparer();
    public sealed virtual int Compare(LocationRelationship left, LocationRelationship right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.LocationRelationshipEqualityComparer : object {
    internal static LocationRelationshipEqualityComparer Instance;
    private static LocationRelationshipEqualityComparer();
    public sealed virtual bool Equals(LocationRelationship left, LocationRelationship right);
    public sealed virtual int GetHashCode(LocationRelationship obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.LogicalLocation : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullyQualifiedName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DecoratedName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParentIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<LogicalLocation> ValueComparer { get; }
    public static IComparer`1<LogicalLocation> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("-1")]
[JsonPropertyAttribute]
public int Index { get; public set; }
    [DataMemberAttribute]
public string FullyQualifiedName { get; public set; }
    [DataMemberAttribute]
public string DecoratedName { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("-1")]
[JsonPropertyAttribute]
public int ParentIndex { get; public set; }
    [DataMemberAttribute]
public string Kind { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public LogicalLocation(string name, int index, string fullyQualifiedName, string decoratedName, int parentIndex, string kind, IDictionary`2<string, SerializedPropertyInfo> properties);
    public LogicalLocation(LogicalLocation other);
    public static IEqualityComparer`1<LogicalLocation> get_ValueComparer();
    public bool ValueEquals(LogicalLocation other);
    public int ValueGetHashCode();
    public static IComparer`1<LogicalLocation> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual int get_Index();
    [CompilerGeneratedAttribute]
public virtual void set_Index(int value);
    [CompilerGeneratedAttribute]
public virtual string get_FullyQualifiedName();
    [CompilerGeneratedAttribute]
public virtual void set_FullyQualifiedName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DecoratedName();
    [CompilerGeneratedAttribute]
public virtual void set_DecoratedName(string value);
    [CompilerGeneratedAttribute]
public virtual int get_ParentIndex();
    [CompilerGeneratedAttribute]
public virtual void set_ParentIndex(int value);
    [CompilerGeneratedAttribute]
public virtual string get_Kind();
    [CompilerGeneratedAttribute]
public virtual void set_Kind(string value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual LogicalLocation DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(string name, int index, string fullyQualifiedName, string decoratedName, int parentIndex, string kind, IDictionary`2<string, SerializedPropertyInfo> properties);
    public LogicalLocation Resolve(Run run);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.LogicalLocationComparer : object {
    internal static LogicalLocationComparer Instance;
    private static LogicalLocationComparer();
    public sealed virtual int Compare(LogicalLocation left, LogicalLocation right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.LogicalLocationEqualityComparer : object {
    internal static LogicalLocationEqualityComparer Instance;
    private static LogicalLocationEqualityComparer();
    public sealed virtual bool Equals(LogicalLocation left, LogicalLocation right);
    public sealed virtual int GetHashCode(LogicalLocation obj);
}
public static class Microsoft.CodeAnalysis.Sarif.LogicalLocationKind : object {
    public static string Declaration;
    public static string Function;
    public static string Member;
    public static string Module;
    public static string Namespace;
    public static string Package;
    public static string Resource;
    public static string Type;
    private static LogicalLocationKind();
}
public static class Microsoft.CodeAnalysis.Sarif.Map.JsonMapBuilder : object {
    public static JsonMapNode Build(string filePath, JsonMapSettings settings);
    public static JsonMapNode Build(Func`1<Stream> streamProvider, JsonMapSettings settings);
    private static JsonMapNode Build(JsonPositionedTextReader reader, JsonMapRunSettings settings, long startPosition, Int64& endPosition);
    private static void ExpectToken(JsonToken expected, JsonPositionedTextReader reader);
    private static void FilterArrayStarts(JsonMapNode node, JsonMapRunSettings settings);
}
public class Microsoft.CodeAnalysis.Sarif.Map.JsonMapNode : object {
    [CompilerGeneratedAttribute]
private long <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private long <End>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, JsonMapNode> <Nodes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Every>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<long> <ArrayStarts>k__BackingField;
    [JsonPropertyAttribute("start")]
public long Start { get; public set; }
    [JsonPropertyAttribute("end")]
public long End { get; public set; }
    [JsonPropertyAttribute("count")]
public int Count { get; public set; }
    [JsonIgnoreAttribute]
public long Length { get; }
    [JsonPropertyAttribute("nodes")]
public Dictionary`2<string, JsonMapNode> Nodes { get; public set; }
    [JsonPropertyAttribute("every")]
public int Every { get; public set; }
    [JsonPropertyAttribute("arrayStarts")]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Map.LongArrayDeltaConverter")]
public List`1<long> ArrayStarts { get; public set; }
    [CompilerGeneratedAttribute]
public long get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(long value);
    [CompilerGeneratedAttribute]
public long get_End();
    [CompilerGeneratedAttribute]
public void set_End(long value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    public long get_Length();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, JsonMapNode> get_Nodes();
    [CompilerGeneratedAttribute]
public void set_Nodes(Dictionary`2<string, JsonMapNode> value);
    [CompilerGeneratedAttribute]
public int get_Every();
    [CompilerGeneratedAttribute]
public void set_Every(int value);
    [CompilerGeneratedAttribute]
public List`1<long> get_ArrayStarts();
    [CompilerGeneratedAttribute]
public void set_ArrayStarts(List`1<long> value);
    public long FindArrayStart(int index, Func`1<Stream> inputStreamProvider);
    public static void CopyStreamBytes(Stream source, Stream destination, long startInclusive, long endInclusive, Byte[] buffer, Nullable`1<byte> omitFromLast);
    private static bool IsWhitespace(byte b);
}
internal class Microsoft.CodeAnalysis.Sarif.Map.JsonMapRunSettings : JsonMapSettings {
    [CompilerGeneratedAttribute]
private double <CurrentSizeRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinimumSizeForNode>k__BackingField;
    public double CurrentSizeRatio { get; private set; }
    public int MinimumSizeForNode { get; private set; }
    public JsonMapRunSettings(double fileSizeBytes, JsonMapSettings userSettings);
    [CompilerGeneratedAttribute]
public double get_CurrentSizeRatio();
    [CompilerGeneratedAttribute]
private void set_CurrentSizeRatio(double value);
    [CompilerGeneratedAttribute]
public int get_MinimumSizeForNode();
    [CompilerGeneratedAttribute]
private void set_MinimumSizeForNode(int value);
}
public class Microsoft.CodeAnalysis.Sarif.Map.JsonMapSettings : object {
    public static long NodeSizeEstimateBytes;
    public static long ArrayStartSizeEstimateBytes;
    public static long Megabyte;
    [CompilerGeneratedAttribute]
private double <MapDesiredSizeRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MapMaximumSizeBytes>k__BackingField;
    public double MapDesiredSizeRatio { get; private set; }
    public double MapMaximumSizeBytes { get; private set; }
    public static JsonMapSettings DefaultSettings { get; }
    public JsonMapSettings(double mapSizeRatio, double mapMaximumSizeBytes);
    [CompilerGeneratedAttribute]
public double get_MapDesiredSizeRatio();
    [CompilerGeneratedAttribute]
private void set_MapDesiredSizeRatio(double value);
    [CompilerGeneratedAttribute]
public double get_MapMaximumSizeBytes();
    [CompilerGeneratedAttribute]
private void set_MapMaximumSizeBytes(double value);
    public static JsonMapSettings get_DefaultSettings();
}
public class Microsoft.CodeAnalysis.Sarif.Map.LongArrayDeltaConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.Message : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Markdown>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<Message> ValueComparer { get; }
    public static IComparer`1<Message> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public string Text { get; public set; }
    [DataMemberAttribute]
public string Markdown { get; public set; }
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<string> Arguments { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public Message(string text, string markdown, string id, IEnumerable`1<string> arguments, IDictionary`2<string, SerializedPropertyInfo> properties);
    public Message(Message other);
    public static IEqualityComparer`1<Message> get_ValueComparer();
    public bool ValueEquals(Message other);
    public int ValueGetHashCode();
    public static IComparer`1<Message> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    [CompilerGeneratedAttribute]
public virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Markdown();
    [CompilerGeneratedAttribute]
public virtual void set_Markdown(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(string value);
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_Arguments();
    [CompilerGeneratedAttribute]
public virtual void set_Arguments(IList`1<string> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual Message DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(string text, string markdown, string id, IEnumerable`1<string> arguments, IDictionary`2<string, SerializedPropertyInfo> properties);
    public bool ShouldSerializeArguments();
    public void Flatten(int ruleIndex, Run run);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.MessageComparer : object {
    internal static MessageComparer Instance;
    private static MessageComparer();
    public sealed virtual int Compare(Message left, Message right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.MessageEqualityComparer : object {
    internal static MessageEqualityComparer Instance;
    private static MessageEqualityComparer();
    public sealed virtual bool Equals(Message left, Message right);
    public sealed virtual int GetHashCode(Message obj);
}
public static class Microsoft.CodeAnalysis.Sarif.MessageUtilities : object {
    public static string BuildMessage(IAnalysisContext context, string messageFormat, String[] arguments);
    public static string BuildRuleDisabledDueToMissingPolicyMessage(string ruleName, string reason);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.MultiformatMessageString : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Markdown>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<MultiformatMessageString> ValueComparer { get; }
    public static IComparer`1<MultiformatMessageString> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public string Text { get; public set; }
    [DataMemberAttribute]
public string Markdown { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public MultiformatMessageString(string text, string markdown, IDictionary`2<string, SerializedPropertyInfo> properties);
    public MultiformatMessageString(MultiformatMessageString other);
    public static IEqualityComparer`1<MultiformatMessageString> get_ValueComparer();
    public bool ValueEquals(MultiformatMessageString other);
    public int ValueGetHashCode();
    public static IComparer`1<MultiformatMessageString> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    [CompilerGeneratedAttribute]
public virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Markdown();
    [CompilerGeneratedAttribute]
public virtual void set_Markdown(string value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual MultiformatMessageString DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(string text, string markdown, IDictionary`2<string, SerializedPropertyInfo> properties);
    public bool ShouldSerializeMarkdown();
    public bool ShouldSerializeText();
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.MultiformatMessageStringComparer : object {
    internal static MultiformatMessageStringComparer Instance;
    private static MultiformatMessageStringComparer();
    public sealed virtual int Compare(MultiformatMessageString left, MultiformatMessageString right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.MultiformatMessageStringEqualityComparer : object {
    internal static MultiformatMessageStringEqualityComparer Instance;
    private static MultiformatMessageStringEqualityComparer();
    public sealed virtual bool Equals(MultiformatMessageString left, MultiformatMessageString right);
    public sealed virtual int GetHashCode(MultiformatMessageString obj);
}
public class Microsoft.CodeAnalysis.Sarif.MultiplyByPrimesHash : object {
    private int _state;
    public static bool op_Equality(MultiplyByPrimesHash left, MultiplyByPrimesHash right);
    public static bool op_Inequality(MultiplyByPrimesHash left, MultiplyByPrimesHash right);
    public void Add(int item);
    public void AddRange(Int32[] items);
    public void AddRange(IEnumerable`1<int> items);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public void Add(object item);
    public void AddRange(IEnumerable items);
}
public class Microsoft.CodeAnalysis.Sarif.MultithreadedZipArchiveArtifactProvider : ArtifactProvider {
    private ZipArchive zipArchive;
    private ISet`1<string> binaryExtensions;
    public ISet`1<string> BinaryExtensions { get; public set; }
    public IEnumerable`1<IEnumeratedArtifact> Artifacts { get; }
    public MultithreadedZipArchiveArtifactProvider(ZipArchive zipArchive, IFileSystem fileSystem);
    public ISet`1<string> get_BinaryExtensions();
    public void set_BinaryExtensions(ISet`1<string> value);
    public ISet`1<string> CreateDefaultBinaryExtensionsSet();
    [IteratorStateMachineAttribute("Microsoft.CodeAnalysis.Sarif.MultithreadedZipArchiveArtifactProvider/<get_Artifacts>d__8")]
public virtual IEnumerable`1<IEnumeratedArtifact> get_Artifacts();
}
public class Microsoft.CodeAnalysis.Sarif.NewLineIndex : object {
    private ImmutableArray`1<int> _lineOffsetStarts;
    internal static Char[] s_newLineChars;
    internal static ImmutableHashSet`1<char> s_newLineCharSet;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public int MaximumLineNumber { get; }
    public NewLineIndex(string textToIndex);
    private static NewLineIndex();
    [CompilerGeneratedAttribute]
public string get_Text();
    public LineInfo GetLineInfoForLine(int lineNumber);
    public int get_MaximumLineNumber();
    public LineInfo GetLineInfoForOffset(int offset);
    public OffsetInfo GetOffsetInfoForOffset(int offset);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.Node : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Message <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Node> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<Node> ValueComparer { get; }
    public static IComparer`1<Node> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public Message Label { get; public set; }
    [DataMemberAttribute]
public Location Location { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<Node> Children { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public Node(string id, Message label, Location location, IEnumerable`1<Node> children, IDictionary`2<string, SerializedPropertyInfo> properties);
    public Node(Node other);
    public static IEqualityComparer`1<Node> get_ValueComparer();
    public bool ValueEquals(Node other);
    public int ValueGetHashCode();
    public static IComparer`1<Node> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual string get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(string value);
    [CompilerGeneratedAttribute]
public virtual Message get_Label();
    [CompilerGeneratedAttribute]
public virtual void set_Label(Message value);
    [CompilerGeneratedAttribute]
public virtual Location get_Location();
    [CompilerGeneratedAttribute]
public virtual void set_Location(Location value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Node> get_Children();
    [CompilerGeneratedAttribute]
public virtual void set_Children(IList`1<Node> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual Node DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(string id, Message label, Location location, IEnumerable`1<Node> children, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.NodeComparer : object {
    internal static NodeComparer Instance;
    private static NodeComparer();
    public sealed virtual int Compare(Node left, Node right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.NodeEqualityComparer : object {
    internal static NodeEqualityComparer Instance;
    private static NodeEqualityComparer();
    public sealed virtual bool Equals(Node left, Node right);
    public sealed virtual int GetHashCode(Node obj);
}
internal class Microsoft.CodeAnalysis.Sarif.NonDisposingDelegatingStream : Stream {
    private Stream underlyingStream;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal NonDisposingDelegatingStream(Stream underlyingStream);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual void set_Position(long value);
    public virtual long get_Position();
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public void DisposeUnderlyingStream();
}
public static class Microsoft.CodeAnalysis.Sarif.Notes : object {
    public static string Msg001AnalyzingTarget;
    public static string Msg002_FileSkipped;
    public static string Msg002_EmptyFileSkipped;
    public static string Msg002_FileExceedingSizeLimitSkipped;
    public static void LogFileSkipped(IAnalysisContext context, string skippedFile, string reason);
    public static void LogEmptyFileSkipped(IAnalysisContext context, string skippedFile);
    public static void LogFileExceedingSizeLimitSkipped(IAnalysisContext context, string skippedFile, long fileSizeInKb);
    public static void LogNotApplicableToSpecifiedTarget(IAnalysisContext context, string reasonForNotAnalyzing);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.Notification : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private IList`1<Location> <Locations>k__BackingField;
    [CompilerGeneratedAttribute]
private Message <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private FailureLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <TimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionData <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private ReportingDescriptorReference <Descriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private ReportingDescriptorReference <AssociatedRule>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<Notification> ValueComparer { get; }
    public static IComparer`1<Notification> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<Location> Locations { get; public set; }
    [DataMemberAttribute]
public Message Message { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[JsonPropertyAttribute]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.EnumConverter")]
public FailureLevel Level { get; public set; }
    [DataMemberAttribute]
public int ThreadId { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.DateTimeConverter")]
public DateTime TimeUtc { get; public set; }
    [DataMemberAttribute]
public ExceptionData Exception { get; public set; }
    [DataMemberAttribute]
public ReportingDescriptorReference Descriptor { get; public set; }
    [DataMemberAttribute]
public ReportingDescriptorReference AssociatedRule { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public Notification(IEnumerable`1<Location> locations, Message message, FailureLevel level, int threadId, DateTime timeUtc, ExceptionData exception, ReportingDescriptorReference descriptor, ReportingDescriptorReference associatedRule, IDictionary`2<string, SerializedPropertyInfo> properties);
    public Notification(Notification other);
    public static IEqualityComparer`1<Notification> get_ValueComparer();
    public bool ValueEquals(Notification other);
    public int ValueGetHashCode();
    public static IComparer`1<Notification> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual IList`1<Location> get_Locations();
    [CompilerGeneratedAttribute]
public virtual void set_Locations(IList`1<Location> value);
    [CompilerGeneratedAttribute]
public virtual Message get_Message();
    [CompilerGeneratedAttribute]
public virtual void set_Message(Message value);
    [CompilerGeneratedAttribute]
public virtual FailureLevel get_Level();
    [CompilerGeneratedAttribute]
public virtual void set_Level(FailureLevel value);
    [CompilerGeneratedAttribute]
public virtual int get_ThreadId();
    [CompilerGeneratedAttribute]
public virtual void set_ThreadId(int value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_TimeUtc();
    [CompilerGeneratedAttribute]
public virtual void set_TimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public virtual ExceptionData get_Exception();
    [CompilerGeneratedAttribute]
public virtual void set_Exception(ExceptionData value);
    [CompilerGeneratedAttribute]
public virtual ReportingDescriptorReference get_Descriptor();
    [CompilerGeneratedAttribute]
public virtual void set_Descriptor(ReportingDescriptorReference value);
    [CompilerGeneratedAttribute]
public virtual ReportingDescriptorReference get_AssociatedRule();
    [CompilerGeneratedAttribute]
public virtual void set_AssociatedRule(ReportingDescriptorReference value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual Notification DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(IEnumerable`1<Location> locations, Message message, FailureLevel level, int threadId, DateTime timeUtc, ExceptionData exception, ReportingDescriptorReference descriptor, ReportingDescriptorReference associatedRule, IDictionary`2<string, SerializedPropertyInfo> properties);
    public bool ShouldSerializeLocations();
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.NotificationComparer : object {
    internal static NotificationComparer Instance;
    private static NotificationComparer();
    public sealed virtual int Compare(Notification left, Notification right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.NotificationEqualityComparer : object {
    internal static NotificationEqualityComparer Instance;
    private static NotificationEqualityComparer();
    public sealed virtual bool Equals(Notification left, Notification right);
    public sealed virtual int GetHashCode(Notification obj);
}
internal class Microsoft.CodeAnalysis.Sarif.Numeric.Long : object {
    private int low;
    private int high;
    private bool unsigned;
    private static int InitialCapacity;
    private static ConcurrentDictionary`2<int, Long> INT_CACHE;
    private static ConcurrentDictionary`2<UInt32, Long> UINT_CACHE;
    public static Long ONE;
    public static Long NEG_ONE;
    public static Long UZERO;
    public static Long UONE;
    public static Long ZERO;
    public static Long MIN_VALUE;
    public static Long MAX_VALUE;
    public static Long TWO_PWR_24;
    public static Long MAX_UNSIGNED_VALUE;
    public static double TWO_PWR_32_DBL;
    public static double TWO_PWR_64_DBL;
    public static double TWO_PWR_63_DBL;
    public static double LN2;
    public Long(int low, int high, bool unsigned);
    private static Long();
    private static UInt32 UnsignedRightShift(int toShift, int shiftBy);
    private static Long FromBits(int lowBits, int highBits, bool unsigned);
    private bool IsZero();
    private Long Not();
    private bool Equals(Long other);
    private bool IsNegative();
    private bool IsOdd();
    private Long Negate();
    private bool LessThan(Long other);
    private bool GreaterThan(Long other);
    private bool GreaterThanOrEqual(Long other);
    private int Compare(Long other);
    private double ToNumber();
    private int ToInt();
    private Long FromNumber(double value, bool unsigned);
    private Long ShiftRight(int numBits);
    private Long ShiftLeft(int numBits);
    private Long ShiftRightUnsigned(int numBits);
    public static Long FromInt(int value, bool unsigned);
    public Long ToUnsigned();
    public Long Multiply(Long multiplier);
    public Long Add(Long addend);
    public Long Subtract(Long subtrahend);
    public Long Divide(Long divisor);
    public string ToString(int radix);
}
public class Microsoft.CodeAnalysis.Sarif.OffsetInfo : ValueType {
    private int _columnNumber;
    private int _lineNumber;
    public int ColumnNumber { get; }
    public int LineNumber { get; }
    public OffsetInfo(int columnNumber, int lineNumber);
    private OffsetInfo(SerializationInfo info, StreamingContext context);
    public int get_ColumnNumber();
    public int get_LineNumber();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(OffsetInfo other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public static bool op_Equality(OffsetInfo left, OffsetInfo right);
    public static bool op_Inequality(OffsetInfo left, OffsetInfo right);
}
[FlagsAttribute]
public enum Microsoft.CodeAnalysis.Sarif.OptionallyEmittedData : Enum {
    public int value__;
    public static OptionallyEmittedData None;
    public static OptionallyEmittedData Hashes;
    public static OptionallyEmittedData TextFiles;
    public static OptionallyEmittedData BinaryFiles;
    public static OptionallyEmittedData ComprehensiveRegionProperties;
    public static OptionallyEmittedData RegionSnippets;
    public static OptionallyEmittedData ContextRegionSnippets;
    public static OptionallyEmittedData NondeterministicProperties;
    public static OptionallyEmittedData EnvironmentVariables;
    public static OptionallyEmittedData FlattenedMessages;
    public static OptionallyEmittedData Guids;
    public static OptionallyEmittedData VersionControlDetails;
    public static OptionallyEmittedData CodeFlows;
    public static OptionallyEmittedData GitBlameInformation;
    public static OptionallyEmittedData ContextRegionSnippetPartialFingerprints;
    public static OptionallyEmittedData RollingHashPartialFingerprints;
    public static OptionallyEmittedData OverwriteExistingData;
    public static OptionallyEmittedData All;
}
public class Microsoft.CodeAnalysis.Sarif.OrderSensitiveValueComparisonList`1 : List`1<T> {
    private IEqualityComparer`1<T> _equalityComparer;
    public OrderSensitiveValueComparisonList`1(IEqualityComparer`1<T> equalityComparer);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(List`1<T> left, List`1<T> right);
    public sealed virtual int GetHashCode(List`1<T> obj);
}
internal class Microsoft.CodeAnalysis.Sarif.PeekableStream : Stream {
    private Stream underlyingStream;
    private Byte[] rewindBuffer;
    private int cursor;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public PeekableStream(Stream underlyingStream, int initialPeekWindow);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public void Rewind();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.CodeAnalysis.Sarif.PerLanguageOption`1 : object {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Feature>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<T> <DefaultValue>k__BackingField;
    public string Description { get; public set; }
    public string Feature { get; }
    public string Name { get; public set; }
    public Type OptionType { get; }
    public Func`1<T> DefaultValue { get; public set; }
    private Type Microsoft.CodeAnalysis.Sarif.IOption.Type { get; }
    private object Microsoft.CodeAnalysis.Sarif.IOption.DefaultValue { get; }
    private bool Microsoft.CodeAnalysis.Sarif.IOption.IsPerLanguage { get; }
    public PerLanguageOption`1(string feature, string name, Func`1<T> defaultValue);
    public PerLanguageOption`1(string feature, string name, Func`1<T> defaultValue, string description);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Feature();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public Type get_OptionType();
    [CompilerGeneratedAttribute]
public Func`1<T> get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(Func`1<T> value);
    private sealed virtual override Type Microsoft.CodeAnalysis.Sarif.IOption.get_Type();
    private sealed virtual override object Microsoft.CodeAnalysis.Sarif.IOption.get_DefaultValue();
    private sealed virtual override bool Microsoft.CodeAnalysis.Sarif.IOption.get_IsPerLanguage();
    public virtual string ToString();
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.PhysicalLocation : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private Address <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private ArtifactLocation <ArtifactLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private Region <Region>k__BackingField;
    [CompilerGeneratedAttribute]
private Region <ContextRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<PhysicalLocation> ValueComparer { get; }
    public static IComparer`1<PhysicalLocation> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public Address Address { get; public set; }
    [DataMemberAttribute]
public ArtifactLocation ArtifactLocation { get; public set; }
    [DataMemberAttribute]
public Region Region { get; public set; }
    [DataMemberAttribute]
public Region ContextRegion { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public PhysicalLocation(Address address, ArtifactLocation artifactLocation, Region region, Region contextRegion, IDictionary`2<string, SerializedPropertyInfo> properties);
    public PhysicalLocation(PhysicalLocation other);
    public static IEqualityComparer`1<PhysicalLocation> get_ValueComparer();
    public bool ValueEquals(PhysicalLocation other);
    public int ValueGetHashCode();
    public static IComparer`1<PhysicalLocation> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual Address get_Address();
    [CompilerGeneratedAttribute]
public virtual void set_Address(Address value);
    [CompilerGeneratedAttribute]
public virtual ArtifactLocation get_ArtifactLocation();
    [CompilerGeneratedAttribute]
public virtual void set_ArtifactLocation(ArtifactLocation value);
    [CompilerGeneratedAttribute]
public virtual Region get_Region();
    [CompilerGeneratedAttribute]
public virtual void set_Region(Region value);
    [CompilerGeneratedAttribute]
public virtual Region get_ContextRegion();
    [CompilerGeneratedAttribute]
public virtual void set_ContextRegion(Region value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual PhysicalLocation DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(Address address, ArtifactLocation artifactLocation, Region region, Region contextRegion, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.PhysicalLocationComparer : object {
    internal static PhysicalLocationComparer Instance;
    private static PhysicalLocationComparer();
    public sealed virtual int Compare(PhysicalLocation left, PhysicalLocation right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.PhysicalLocationEqualityComparer : object {
    internal static PhysicalLocationEqualityComparer Instance;
    private static PhysicalLocationEqualityComparer();
    public sealed virtual bool Equals(PhysicalLocation left, PhysicalLocation right);
    public sealed virtual int GetHashCode(PhysicalLocation obj);
}
public class Microsoft.CodeAnalysis.Sarif.Processors.GenericActionPipeline`1 : object {
    private IEnumerable`1<IActionWrapper`1<T>> _stages;
    public GenericActionPipeline`1(IEnumerable`1<IActionWrapper`1<T>> stages);
    public sealed virtual IEnumerable`1<T> Act(IEnumerable`1<T> collection);
}
public class Microsoft.CodeAnalysis.Sarif.Processors.GenericFoldAction`1 : object {
    private Func`3<T, T, T> _action;
    public GenericFoldAction`1(Func`3<T, T, T> action);
    public sealed virtual T Fold(IEnumerable`1<T> collection, T accumulator);
    public T Fold(IEnumerable`1<T> collection);
    public sealed virtual IEnumerable`1<T> Act(IEnumerable`1<T> collection);
}
public class Microsoft.CodeAnalysis.Sarif.Processors.GenericMappingAction`1 : object {
    public Func`2<T, T> Action;
    public GenericMappingAction`1(Func`2<T, T> action);
    public sealed virtual IEnumerable`1<T> Map(IEnumerable`1<T> collection);
    public sealed virtual IEnumerable`1<T> Act(IEnumerable`1<T> list);
}
public interface Microsoft.CodeAnalysis.Sarif.Processors.IActionWrapper`1 {
    public abstract virtual IEnumerable`1<T> Act(IEnumerable`1<T> collection);
}
public interface Microsoft.CodeAnalysis.Sarif.Processors.IFoldAction`1 {
    public abstract virtual T Fold(IEnumerable`1<T> collection, T accumulator);
}
public interface Microsoft.CodeAnalysis.Sarif.Processors.IMapAction`1 {
    public abstract virtual IEnumerable`1<T> Map(IEnumerable`1<T> collection);
}
public enum Microsoft.CodeAnalysis.Sarif.Processors.SarifLogAction : Enum {
    public int value__;
    public static SarifLogAction None;
    public static SarifLogAction Sort;
    public static SarifLogAction Merge;
    public static SarifLogAction RebaseUri;
    public static SarifLogAction MakeUrisAbsolute;
    public static SarifLogAction MakeDeterministic;
    public static SarifLogAction InsertOptionalData;
    public static SarifLogAction RemoveOptionalData;
}
public class Microsoft.CodeAnalysis.Sarif.Processors.SarifLogActionTuple : object {
    public SarifLogAction Action;
    public String[] Parameters;
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.Sarif.Processors.SarifLogExtensionMethods : object {
    [ExtensionAttribute]
public static SarifLog Merge(IEnumerable`1<SarifLog> sarifLog, bool mergeEmptyLogs);
    [ExtensionAttribute]
public static IEnumerable`1<SarifLog> RebaseUri(IEnumerable`1<SarifLog> sarifLog, string basePathToken, bool rebaseRelativeUris, Uri uri);
    [ExtensionAttribute]
public static SarifLog RebaseUri(SarifLog sarifLog, string basePathToken, bool rebaseRelativeUris, Uri uri);
    [ExtensionAttribute]
public static IEnumerable`1<SarifLog> MakeUrisAbsolute(IEnumerable`1<SarifLog> sarifLogs);
    [ExtensionAttribute]
public static SarifLog MakeUrisAbsolute(SarifLog sarifLog);
    [ExtensionAttribute]
public static IEnumerable`1<SarifLog> RemoveOptionalData(IEnumerable`1<SarifLog> sarifLogs, OptionallyEmittedData optionalData);
    [ExtensionAttribute]
public static SarifLog RemoveOptionalData(SarifLog sarifLog, OptionallyEmittedData optionalData);
    [ExtensionAttribute]
public static IEnumerable`1<SarifLog> InsertOptionalData(IEnumerable`1<SarifLog> sarifLogs, OptionallyEmittedData optionalData);
    [ExtensionAttribute]
public static SarifLog InsertOptionalData(SarifLog sarifLog, OptionallyEmittedData optionalData);
}
public class Microsoft.CodeAnalysis.Sarif.Processors.SarifLogPipeline : object {
    [CompilerGeneratedAttribute]
private List`1<SarifLogActionTuple> <Actions>k__BackingField;
    private GenericActionPipeline`1<SarifLog> _pipeline;
    public List`1<SarifLogActionTuple> Actions { get; private set; }
    [JsonConstructorAttribute]
public SarifLogPipeline(List`1<SarifLogActionTuple> actions);
    [CompilerGeneratedAttribute]
public List`1<SarifLogActionTuple> get_Actions();
    [CompilerGeneratedAttribute]
private void set_Actions(List`1<SarifLogActionTuple> value);
    public IEnumerable`1<SarifLog> ApplyPipeline(IEnumerable`1<SarifLog> logs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public static class Microsoft.CodeAnalysis.Sarif.Processors.SarifLogProcessorFactory : object {
    public static IActionWrapper`1<SarifLog> GetActionStage(SarifLogAction action, String[] args);
}
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionaryConverter")]
public class Microsoft.CodeAnalysis.Sarif.PropertiesDictionary : TypedPropertiesDictionary`1<object> {
    internal static string DEFAULT_POLICY_NAME;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public static ImmutableArray`1<string> DefaultNamespaces;
    public string Name { get; public set; }
    public PropertiesDictionary(PropertiesDictionary initializer);
    public PropertiesDictionary(PropertiesDictionary initializer, IEqualityComparer`1<string> comparer);
    private static PropertiesDictionary();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public virtual T GetProperty(PerLanguageOption`1<T> setting);
    public virtual T GetProperty(PerLanguageOption`1<T> setting, bool cacheDefault);
    public virtual void SetProperty(IOption setting, object value);
    public virtual void SetProperty(IOption setting, object value, bool cacheDescription);
    public void SetProperty(IOption setting, object value, bool cacheDescription, bool persistToSettingsContainer);
    internal bool TryGetProperty(string key, T& value);
    private PropertiesDictionary GetSettingsContainer(IOption setting, bool cacheDefault);
    private static bool TryConvertFromString(string source, T& destination);
    public void SaveToJson(string filePath, bool prettyPrint);
    public void LoadFromJson(string filePath);
    public void SaveToXml(string filePath);
    public void SaveToXml(Stream stream);
    public void LoadFromXml(string filePath);
    public void LoadFromXml(Stream stream);
}
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.Sarif.PropertiesDictionaryExtensionMethods : object {
    private static string KEY_ID;
    private static string ITEM_ID;
    private static string TYPE_ID;
    private static string VALUE_ID;
    private static string PROPERTY_ID;
    private static string STRING_SET_ID;
    private static string INTEGER_SET_ID;
    private static string RULE_KIND_SET_ID;
    private static string RESULT_KIND_SET_ID;
    private static string FAILURE_LEVEL_SET_ID;
    internal static string PROPERTIES_ID;
    private static HybridDictionary s_typesCache;
    private static PropertiesDictionaryExtensionMethods();
    [ExtensionAttribute]
public static void SavePropertiesToXmlStream(IDictionary propertyBag, XmlWriter writer, XmlWriterSettings settings);
    [ExtensionAttribute]
public static void SavePropertiesToXmlStream(IDictionary propertyBag, XmlWriter writer, XmlWriterSettings settings, string name, IDictionary`2<string, string> settingNameToDescriptionMap);
    private static string NormalizeTypeName(string typeName);
    private static void SaveSet(XmlWriter writer, HashSet`1<T> items, string key);
    [ExtensionAttribute]
public static void LoadPropertiesFromXmlStream(IDictionary propertyBag, XmlReader reader);
    private static Type GetPropertiesDictionaryType(string typeName);
    private static void LoadSet(HashSet`1<T> set, XmlReader reader);
    private static Type GetType(string typeName);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.PropertyBag : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <Tags>k__BackingField;
    public static IEqualityComparer`1<PropertyBag> ValueComparer { get; }
    public static IComparer`1<PropertyBag> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<string> Tags { get; public set; }
    public PropertyBag(IEnumerable`1<string> tags);
    public PropertyBag(PropertyBag other);
    public static IEqualityComparer`1<PropertyBag> get_ValueComparer();
    public bool ValueEquals(PropertyBag other);
    public int ValueGetHashCode();
    public static IComparer`1<PropertyBag> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public virtual void set_Tags(IList`1<string> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual PropertyBag DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(IEnumerable`1<string> tags);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.PropertyBagComparer : object {
    internal static PropertyBagComparer Instance;
    private static PropertyBagComparer();
    public sealed virtual int Compare(PropertyBag left, PropertyBag right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.PropertyBagEqualityComparer : object {
    internal static PropertyBagEqualityComparer Instance;
    private static PropertyBagEqualityComparer();
    public sealed virtual bool Equals(PropertyBag left, PropertyBag right);
    public sealed virtual int GetHashCode(PropertyBag obj);
}
public class Microsoft.CodeAnalysis.Sarif.PropertyBagHolder : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    private static JsonSerializerSettings s_settingsWithComprehensiveV2ContractResolver;
    [CompilerGeneratedAttribute]
private TagsCollection <Tags>k__BackingField;
    [JsonIgnoreAttribute]
public IList`1<string> PropertyNames { get; }
    [JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.PropertyBagConverter")]
[JsonPropertyAttribute("properties")]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    [JsonIgnoreAttribute]
public TagsCollection Tags { get; }
    private static PropertyBagHolder();
    public sealed virtual IList`1<string> get_PropertyNames();
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    public sealed virtual bool TryGetProperty(string propertyName, String& value);
    public sealed virtual string GetProperty(string propertyName);
    public sealed virtual bool TryGetProperty(string propertyName, T& value);
    public sealed virtual T GetProperty(string propertyName);
    public bool TryGetSerializedPropertyValue(string propertyName, String& serializedValue);
    public string GetSerializedPropertyValue(string propertyName);
    public sealed virtual void SetProperty(string propertyName, T value);
    public sealed virtual void SetPropertiesFrom(IPropertyBagHolder other);
    public sealed virtual void RemoveProperty(string propertyName);
    [CompilerGeneratedAttribute]
public TagsCollection get_Tags();
    public virtual bool ShouldSerializeProperties();
    public static bool PropertyBagHasAtLeastOneNonNullValue(IDictionary`2<string, SerializedPropertyInfo> properties);
}
public class Microsoft.CodeAnalysis.Sarif.Query.AllExpression : object {
    public virtual string ToString();
}
public class Microsoft.CodeAnalysis.Sarif.Query.AndExpression : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IExpression> <Terms>k__BackingField;
    public IReadOnlyList`1<IExpression> Terms { get; private set; }
    public AndExpression(IReadOnlyList`1<IExpression> terms);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IExpression> get_Terms();
    [CompilerGeneratedAttribute]
private void set_Terms(IReadOnlyList`1<IExpression> value);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.Sarif.Query.BitArrayExtensions : object {
    [ExtensionAttribute]
public static int TrueCount(BitArray array);
    [ExtensionAttribute]
public static List`1<T> MatchingSubset(BitArray matches, IList`1<T> set);
}
public enum Microsoft.CodeAnalysis.Sarif.Query.CompareOperator : Enum {
    public int value__;
    public static CompareOperator Equals;
    public static CompareOperator NotEquals;
    public static CompareOperator GreaterThan;
    public static CompareOperator GreaterThanOrEquals;
    public static CompareOperator LessThan;
    public static CompareOperator LessThanOrEquals;
    public static CompareOperator StartsWith;
    public static CompareOperator Contains;
    public static CompareOperator EndsWith;
}
public class Microsoft.CodeAnalysis.Sarif.Query.Evaluators.AllEvaluator`1 : object {
    public sealed virtual void Evaluate(ICollection`1<T> list, BitArray matches);
}
public class Microsoft.CodeAnalysis.Sarif.Query.Evaluators.AndEvaluator`1 : object {
    private IReadOnlyList`1<IExpressionEvaluator`1<T>> _terms;
    public AndEvaluator`1(IEnumerable`1<IExpressionEvaluator`1<T>> terms);
    public sealed virtual void Evaluate(ICollection`1<T> list, BitArray matches);
}
public class Microsoft.CodeAnalysis.Sarif.Query.Evaluators.BoolEvaluator`1 : object {
    private Func`2<T, bool> _getter;
    private bool _mustEqual;
    public BoolEvaluator`1(Func`2<T, bool> getter, TermExpression term);
    public sealed virtual void Evaluate(ICollection`1<T> list, BitArray matches);
}
public class Microsoft.CodeAnalysis.Sarif.Query.Evaluators.DateTimeEvaluator`1 : object {
    private Func`2<T, DateTime> _getter;
    private DateTime _value;
    private Action`2<ICollection`1<T>, BitArray> _evaluateSet;
    public DateTimeEvaluator`1(Func`2<T, DateTime> getter, TermExpression term);
    public sealed virtual void Evaluate(ICollection`1<T> list, BitArray matches);
    private Action`2<ICollection`1<T>, BitArray> Comparer(TermExpression term);
    private void EvaluateEquals(ICollection`1<T> list, BitArray matches);
    private void EvaluateNotEquals(ICollection`1<T> list, BitArray matches);
    private void EvaluateLessThan(ICollection`1<T> list, BitArray matches);
    private void EvaluateLessThanOrEquals(ICollection`1<T> list, BitArray matches);
    private void EvaluateGreaterThan(ICollection`1<T> list, BitArray matches);
    private void EvaluateGreaterThanOrEquals(ICollection`1<T> list, BitArray matches);
}
public class Microsoft.CodeAnalysis.Sarif.Query.Evaluators.DoubleEvaluator`1 : object {
    private Func`2<T, double> _getter;
    private double _value;
    private Action`2<ICollection`1<T>, BitArray> _evaluateSet;
    public DoubleEvaluator`1(Func`2<T, double> getter, TermExpression term);
    public sealed virtual void Evaluate(ICollection`1<T> list, BitArray matches);
    private Action`2<ICollection`1<T>, BitArray> Comparer(TermExpression term);
    private void EvaluateEquals(ICollection`1<T> list, BitArray matches);
    private void EvaluateNotEquals(ICollection`1<T> list, BitArray matches);
    private void EvaluateLessThan(ICollection`1<T> list, BitArray matches);
    private void EvaluateLessThanOrEquals(ICollection`1<T> list, BitArray matches);
    private void EvaluateGreaterThan(ICollection`1<T> list, BitArray matches);
    private void EvaluateGreaterThanOrEquals(ICollection`1<T> list, BitArray matches);
}
public class Microsoft.CodeAnalysis.Sarif.Query.Evaluators.EnumEvaluator`2 : object {
    private Func`2<T, EnumType> _getter;
    private EnumType _value;
    private Action`2<ICollection`1<T>, BitArray> _evaluateSet;
    public EnumEvaluator`2(Func`2<T, EnumType> getter, TermExpression term);
    public sealed virtual void Evaluate(ICollection`1<T> list, BitArray matches);
    private Action`2<ICollection`1<T>, BitArray> Comparer(TermExpression term);
    private void EvaluateEquals(ICollection`1<T> list, BitArray matches);
    private void EvaluateNotEquals(ICollection`1<T> list, BitArray matches);
}
public static class Microsoft.CodeAnalysis.Sarif.Query.Evaluators.EvaluatorFactory : object {
    public static object BuildPrimitiveEvaluator(Type fieldType, TermExpression term);
}
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.Sarif.Query.Evaluators.ExpressionEvaluatorConverter : object {
    [ExtensionAttribute]
public static IExpressionEvaluator`1<T> ToEvaluator(IExpression expression, Func`2<TermExpression, IExpressionEvaluator`1<T>> termEvaluatorBuilder);
}
public interface Microsoft.CodeAnalysis.Sarif.Query.Evaluators.IExpressionEvaluator`1 {
    public abstract virtual void Evaluate(ICollection`1<T> set, BitArray matches);
}
public class Microsoft.CodeAnalysis.Sarif.Query.Evaluators.LongEvaluator`1 : object {
    private Func`2<T, long> _getter;
    private Action`2<ICollection`1<T>, BitArray> _evaluateSet;
    [CompilerGeneratedAttribute]
private long <Value>k__BackingField;
    public long Value { get; }
    public LongEvaluator`1(Func`2<T, long> getter, TermExpression term);
    [CompilerGeneratedAttribute]
public long get_Value();
    public sealed virtual void Evaluate(ICollection`1<T> list, BitArray matches);
    private Action`2<ICollection`1<T>, BitArray> Comparer(TermExpression term);
    private void EvaluateEquals(ICollection`1<T> list, BitArray matches);
    private void EvaluateNotEquals(ICollection`1<T> list, BitArray matches);
    private void EvaluateLessThan(ICollection`1<T> list, BitArray matches);
    private void EvaluateLessThanOrEquals(ICollection`1<T> list, BitArray matches);
    private void EvaluateGreaterThan(ICollection`1<T> list, BitArray matches);
    private void EvaluateGreaterThanOrEquals(ICollection`1<T> list, BitArray matches);
}
public class Microsoft.CodeAnalysis.Sarif.Query.Evaluators.NoneEvaluator`1 : object {
    public sealed virtual void Evaluate(ICollection`1<T> list, BitArray matches);
}
public class Microsoft.CodeAnalysis.Sarif.Query.Evaluators.NotEvaluator`1 : object {
    private IExpressionEvaluator`1<T> _inner;
    public NotEvaluator`1(IExpressionEvaluator`1<T> inner);
    public sealed virtual void Evaluate(ICollection`1<T> list, BitArray matches);
}
public class Microsoft.CodeAnalysis.Sarif.Query.Evaluators.OrEvaluator`1 : object {
    private IReadOnlyList`1<IExpressionEvaluator`1<T>> _terms;
    public OrEvaluator`1(IEnumerable`1<IExpressionEvaluator`1<T>> terms);
    public sealed virtual void Evaluate(ICollection`1<T> list, BitArray matches);
}
public class Microsoft.CodeAnalysis.Sarif.Query.Evaluators.PropertyBagPropertyEvaluator : object {
    internal static string ResultPropertyPrefix;
    internal static string RulePropertyPrefix;
    private string _propertyName;
    private bool _propertyBelongsToRule;
    private IExpressionEvaluator`1<Result> _evaluator;
    private static Regex s_propertyNameRegex;
    private static ReadOnlyCollection`1<CompareOperator> s_stringSpecificOperators;
    public PropertyBagPropertyEvaluator(TermExpression term);
    private static PropertyBagPropertyEvaluator();
    private IExpressionEvaluator`1<Result> CreateEvaluator(TermExpression term);
    private bool IsStringComparison(TermExpression term);
    private bool IsDoubleComparison(TermExpression term);
    private bool IsDateTimeComparison(TermExpression term);
    private T GetProperty(Result result);
    private PropertyBagHolder GetPropertyBagHolder(Result result);
    private T GetPropertyFromHolder(PropertyBagHolder holder);
    public sealed virtual void Evaluate(ICollection`1<Result> results, BitArray matches);
}
public static class Microsoft.CodeAnalysis.Sarif.Query.Evaluators.SarifEvaluators : object {
    public static IExpressionEvaluator`1<Result> ResultEvaluator(TermExpression term);
}
public class Microsoft.CodeAnalysis.Sarif.Query.Evaluators.SetEvaluator`2 : object {
    private Func`2<T, IEnumerable`1<U>> _getter;
    private IExpressionEvaluator`1<U> _innerEvaluator;
    public SetEvaluator`2(Func`2<T, IEnumerable`1<U>> getter, TermExpression term);
    public SetEvaluator`2(Func`2<T, IEnumerable`1<U>> getter, IExpressionEvaluator`1<U> innerEvaluator);
    public sealed virtual void Evaluate(ICollection`1<T> list, BitArray matches);
}
public class Microsoft.CodeAnalysis.Sarif.Query.Evaluators.StringEvaluator`1 : object {
    private Func`2<T, string> _getter;
    private string _value;
    private StringComparison _stringComparison;
    private Action`2<ICollection`1<T>, BitArray> _evaluateSet;
    public StringEvaluator`1(Func`2<T, string> getter, TermExpression term, StringComparison stringComparison);
    public sealed virtual void Evaluate(ICollection`1<T> list, BitArray matches);
    private Action`2<ICollection`1<T>, BitArray> Comparer(TermExpression term);
    private void EvaluateEquals(ICollection`1<T> list, BitArray matches);
    private void EvaluateNotEquals(ICollection`1<T> list, BitArray matches);
    private void EvaluateLessThan(ICollection`1<T> list, BitArray matches);
    private void EvaluateLessThanOrEquals(ICollection`1<T> list, BitArray matches);
    private void EvaluateGreaterThan(ICollection`1<T> list, BitArray matches);
    private void EvaluateGreaterThanOrEquals(ICollection`1<T> list, BitArray matches);
    private void EvaluateStartsWith(ICollection`1<T> list, BitArray matches);
    private void EvaluateContains(ICollection`1<T> list, BitArray matches);
    private void EvaluateEndsWith(ICollection`1<T> list, BitArray matches);
}
public class Microsoft.CodeAnalysis.Sarif.Query.Evaluators.TermEvaluator`1 : object {
    private Action`2<ICollection`1<T>, BitArray> _action;
    public TermEvaluator`1(Action`2<ICollection`1<T>, BitArray> action);
    public sealed virtual void Evaluate(ICollection`1<T> list, BitArray matches);
}
public static class Microsoft.CodeAnalysis.Sarif.Query.ExpressionParser : object {
    private static List`1<Literal`1<CompareOperator>> CompareOperators;
    private static List`1<Literal`1<ExpressionToken>> Tokens;
    private static ExpressionParser();
    public static string Escape(string value);
    public static string ToString(CompareOperator op);
    public static IExpression ParseExpression(string expression);
    private static IExpression ParseExpression(StringSlice& text);
    private static IExpression ParseAndExpression(StringSlice& text);
    private static IExpression ParseTerm(StringSlice& text);
    private static CompareOperator ParseCompareOperator(StringSlice& text);
    private static StringSlice ParseString(StringSlice& text);
    private static Literal`1<ExpressionToken> StartingToken(StringSlice& text);
    private static void ConsumeWhitespace(StringSlice& text);
    private static bool IsWhitespace(char c);
}
public interface Microsoft.CodeAnalysis.Sarif.Query.IExpression {
}
public class Microsoft.CodeAnalysis.Sarif.Query.NoneExpression : object {
    public virtual string ToString();
}
public class Microsoft.CodeAnalysis.Sarif.Query.NotExpression : object {
    [CompilerGeneratedAttribute]
private IExpression <Inner>k__BackingField;
    public IExpression Inner { get; private set; }
    public NotExpression(IExpression inner);
    [CompilerGeneratedAttribute]
public IExpression get_Inner();
    [CompilerGeneratedAttribute]
private void set_Inner(IExpression value);
    public virtual string ToString();
}
public class Microsoft.CodeAnalysis.Sarif.Query.OrExpression : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IExpression> <Terms>k__BackingField;
    public IReadOnlyList`1<IExpression> Terms { get; private set; }
    public OrExpression(IReadOnlyList`1<IExpression> terms);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IExpression> get_Terms();
    [CompilerGeneratedAttribute]
private void set_Terms(IReadOnlyList`1<IExpression> value);
    public virtual string ToString();
}
public class Microsoft.CodeAnalysis.Sarif.Query.QueryParseException : Exception {
    internal QueryParseException(string categoryExpected, StringSlice text);
    public QueryParseException(string message);
    public QueryParseException(string message, Exception inner);
    protected QueryParseException(SerializationInfo info, StreamingContext context);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.CodeAnalysis.Sarif.Query.StringSlice : ValueType {
    private string _value;
    private int _index;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public int Length { get; private set; }
    public char Item { get; }
    public StringSlice(string value, int index, int length);
    public StringSlice(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    public char get_Item(int index);
    public static StringSlice op_Implicit(string value);
    public StringSlice Substring(int index);
    public StringSlice Substring(int index, int length);
    public int CompareTo(StringSlice other, StringComparison comparison);
    public bool StartsWith(StringSlice prefix, StringComparison comparison);
    public bool StartsWith(char c);
    public void AppendTo(StringBuilder builder);
    public virtual string ToString();
}
public class Microsoft.CodeAnalysis.Sarif.Query.TermExpression : object {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private CompareOperator <Operator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string PropertyName { get; private set; }
    public CompareOperator Operator { get; private set; }
    public string Value { get; private set; }
    public TermExpression(string propertyName, CompareOperator op, string value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
private void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public CompareOperator get_Operator();
    [CompilerGeneratedAttribute]
private void set_Operator(CompareOperator value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
    public virtual string ToString();
}
public class Microsoft.CodeAnalysis.Sarif.Readers.DateTimeConverter : JsonConverter {
    public static DateTimeConverter Instance;
    [CompilerGeneratedAttribute]
private static string <DateTimeFormat>k__BackingField;
    public static string DateTimeFormat { get; public set; }
    private static DateTimeConverter();
    [CompilerGeneratedAttribute]
public static string get_DateTimeFormat();
    [CompilerGeneratedAttribute]
public static void set_DateTimeFormat(string value);
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.CodeAnalysis.Sarif.Readers.DeferredDictionary`1 : object {
    private JsonSerializer _jsonSerializer;
    private Func`1<Stream> _streamProvider;
    private long _start;
    private Stream _stream;
    private Dictionary`2<int, long> _itemPositions;
    public T Item { get; public set; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<T> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public DeferredDictionary`1(JsonSerializer jsonSerializer, JsonPositionedTextReader reader, bool buildPositionsNow);
    private void EnsurePositionsBuilt();
    private void BuildPositions();
    private void BuildPositions(JsonPositionedTextReader reader, long currentOffset);
    public sealed virtual T get_Item(string key);
    public sealed virtual void set_Item(string key, T value);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<T> get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(string key, T value);
    public sealed virtual void Add(KeyValuePair`2<string, T> item);
    public sealed virtual void Clear();
    public sealed virtual bool Remove(string key);
    public sealed virtual bool Remove(KeyValuePair`2<string, T> item);
    public sealed virtual bool Contains(KeyValuePair`2<string, T> item);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual bool TryGetValue(string key, T& value);
    private bool TryGetValue(string key, bool readValue, T& value);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, T>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private IEnumerator`1<string> <get_Keys>b__13_0();
    [CompilerGeneratedAttribute]
private int <get_Keys>b__13_1();
    [CompilerGeneratedAttribute]
private IEnumerator`1<T> <get_Values>b__15_0();
    [CompilerGeneratedAttribute]
private int <get_Values>b__15_1();
}
public class Microsoft.CodeAnalysis.Sarif.Readers.DeferredDictionaryConverter`1 : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.CodeAnalysis.Sarif.Readers.DeferredList`1 : object {
    private JsonSerializer _jsonSerializer;
    private Func`1<Stream> _streamProvider;
    private long _start;
    private int _count;
    private Stream _stream;
    private Int64[] _itemPositions;
    private Func`2<T, T> _transformer;
    private T _lastAccessedItem;
    private int _lastAccessedItemIndex;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public T Item { get; public set; }
    public DeferredList`1(JsonSerializer jsonSerializer, JsonPositionedTextReader reader, bool buildPositionsNow);
    private void CountOnly(JsonPositionedTextReader reader);
    private void EnsurePositionsBuilt();
    private void BuildPositions();
    private void BuildPositions(JsonPositionedTextReader reader, long currentOffset);
    public void AddTransformer(Func`2<T, T> transformer);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Contains(T item);
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual void Insert(int index, T item);
    public sealed virtual bool Remove(T item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.CodeAnalysis.Sarif.Readers.DeferredListConverter`1 : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class Microsoft.CodeAnalysis.Sarif.Readers.EnumConverter : JsonConverter {
    public static EnumConverter Instance;
    public static List`1<string> LegalTwoLetterWordsList;
    private static EnumConverter();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    internal static string ConvertToCamelCase(string upperCaseName);
    internal static string ConvertToPascalCase(string camelCaseName);
    private static bool IsPrefixedWithTwoLetterAbbreviation(string name);
}
public class Microsoft.CodeAnalysis.Sarif.Readers.FlagsEnumConverter : JsonConverter {
    public static FlagsEnumConverter Instance;
    private static FlagsEnumConverter();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
internal class Microsoft.CodeAnalysis.Sarif.Readers.JsonInnerTextReader : JsonTextReader {
    public JsonInnerTextReader(TextReader reader);
}
public class Microsoft.CodeAnalysis.Sarif.Readers.JsonPositionedTextReader : JsonTextReader {
    private LineMappingStreamReader _streamReader;
    private long _cachedPosition;
    private int _cachedPositionLineNumber;
    private int _cachedPositionLinePosition;
    [CompilerGeneratedAttribute]
private Func`1<Stream> <StreamProvider>k__BackingField;
    public Func`1<Stream> StreamProvider { get; private set; }
    public long TokenPosition { get; }
    public Nullable`1<char> CharAfterToken { get; }
    public JsonPositionedTextReader(string filePath);
    public JsonPositionedTextReader(Func`1<Stream> streamProvider);
    internal JsonPositionedTextReader(Func`1<Stream> streamProvider, LineMappingStreamReader reader);
    [CompilerGeneratedAttribute]
public Func`1<Stream> get_StreamProvider();
    [CompilerGeneratedAttribute]
private void set_StreamProvider(Func`1<Stream> value);
    public static JsonPositionedTextReader FromStream(Stream stream);
    public long get_TokenPosition();
    public Nullable`1<char> get_CharAfterToken();
    public long ReadToArrayIndex(int desiredIndex);
}
internal class Microsoft.CodeAnalysis.Sarif.Readers.LineMappingStreamReader : StreamReader {
    private long _bytesReadPreviously;
    private int _bytesRead;
    private Int32[] _lineStartIndices;
    private Int32[] _lineStartByteOffsets;
    private long _lineCount;
    private long _firstLineNumber;
    private long _firstLineCharsBeforeBuffer;
    private int _lastLineChars;
    private Char[] _buffer;
    private int _bufferIndex;
    private int _bufferLength;
    private int _lastMappedLineStartIndex;
    private long _lastMappedCharInLine;
    private int _lastMappedByteCountReturned;
    private OverflowCorrector _overflowCorrector;
    public LineMappingStreamReader(Stream stream);
    private static Stream FindBomWidth(Stream stream, Int32& bomWidth);
    public long LineAndCharToOffset(int line, long charInLine);
    private long BytesInLine(int lineStartCharIndex, long charInLine);
    public Nullable`1<char> CharAt(int line, long charInLine);
    public virtual int Read(Char[] buffer, int index, int count);
}
internal class Microsoft.CodeAnalysis.Sarif.Readers.OverflowCorrector : object {
    private static long PerOverflowCorrection;
    private int _overflowLineNumber;
    private long _overflowCorrection;
    private bool _currentlyNegative;
    public long CorrectForOverflow(int lineNumber, long charInLine);
}
internal class Microsoft.CodeAnalysis.Sarif.Readers.PropertyBagConverter : JsonConverter {
    internal static JsonConverter Instance;
    private static PropertyBagConverter();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class Microsoft.CodeAnalysis.Sarif.Readers.ResultDiffingVisitor : SarifRewritingVisitor {
    [CompilerGeneratedAttribute]
private HashSet`1<Result> <NewResults>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<Result> <AbsentResults>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<Result> <SharedResults>k__BackingField;
    public HashSet`1<Result> NewResults { get; public set; }
    public HashSet`1<Result> AbsentResults { get; public set; }
    public HashSet`1<Result> SharedResults { get; public set; }
    public ResultDiffingVisitor(SarifLog sarifLog);
    [CompilerGeneratedAttribute]
public HashSet`1<Result> get_NewResults();
    [CompilerGeneratedAttribute]
public void set_NewResults(HashSet`1<Result> value);
    [CompilerGeneratedAttribute]
public HashSet`1<Result> get_AbsentResults();
    [CompilerGeneratedAttribute]
public void set_AbsentResults(HashSet`1<Result> value);
    [CompilerGeneratedAttribute]
public HashSet`1<Result> get_SharedResults();
    [CompilerGeneratedAttribute]
public void set_SharedResults(HashSet`1<Result> value);
    public virtual Result VisitResult(Result node);
    public bool Diff(IEnumerable`1<Result> actual);
}
public class Microsoft.CodeAnalysis.Sarif.Readers.SarifContractResolver : DefaultContractResolver {
    [ObsoleteAttribute("The default SARIF serialization has been updated so that specifying a contract resolver is no longer required.", "False")]
public static SarifContractResolver Instance;
    private static SarifContractResolver();
    protected virtual JsonContract CreateContract(Type objectType);
}
public class Microsoft.CodeAnalysis.Sarif.Readers.SarifContractResolverVersionOne : DefaultContractResolver {
    public static SarifContractResolverVersionOne Instance;
    private static SarifContractResolverVersionOne();
    protected virtual JsonContract CreateContract(Type objectType);
}
public class Microsoft.CodeAnalysis.Sarif.Readers.SarifDeferredContractResolver : SarifContractResolver {
    public static SarifDeferredContractResolver Instance;
    private static DeferredListConverter`1<Result> ResultConverterInstance;
    private static DeferredListConverter`1<Artifact> FilesConverterInstance;
    private static DeferredListConverter`1<ThreadFlowLocation> ThreadFlowLocationConverterInstance;
    private static DeferredListConverter`1<LogicalLocation> LogicalLocationConverterInstance;
    private static DeferredListConverter`1<Graph> GraphConverterInstance;
    private static DeferredListConverter`1<Notification> NotificationConverterInstance;
    private static SarifDeferredContractResolver();
    protected virtual JsonContract CreateContract(Type type);
}
public class Microsoft.CodeAnalysis.Sarif.Readers.SarifVersionConverter : JsonConverter {
    public static SarifVersionConverter Instance;
    private static SarifVersionConverter();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class Microsoft.CodeAnalysis.Sarif.Readers.UriConverter : JsonConverter {
    public static UriConverter Instance;
    private static UriConverter();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class Microsoft.CodeAnalysis.Sarif.Readers.VersionConverter : JsonConverter {
    public static VersionConverter Instance;
    private static VersionConverter();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.Rectangle : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private double <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Bottom>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private Message <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<Rectangle> ValueComparer { get; }
    public static IComparer`1<Rectangle> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public double Top { get; public set; }
    [DataMemberAttribute]
public double Left { get; public set; }
    [DataMemberAttribute]
public double Bottom { get; public set; }
    [DataMemberAttribute]
public double Right { get; public set; }
    [DataMemberAttribute]
public Message Message { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public Rectangle(double top, double left, double bottom, double right, Message message, IDictionary`2<string, SerializedPropertyInfo> properties);
    public Rectangle(Rectangle other);
    public static IEqualityComparer`1<Rectangle> get_ValueComparer();
    public bool ValueEquals(Rectangle other);
    public int ValueGetHashCode();
    public static IComparer`1<Rectangle> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual double get_Top();
    [CompilerGeneratedAttribute]
public virtual void set_Top(double value);
    [CompilerGeneratedAttribute]
public virtual double get_Left();
    [CompilerGeneratedAttribute]
public virtual void set_Left(double value);
    [CompilerGeneratedAttribute]
public virtual double get_Bottom();
    [CompilerGeneratedAttribute]
public virtual void set_Bottom(double value);
    [CompilerGeneratedAttribute]
public virtual double get_Right();
    [CompilerGeneratedAttribute]
public virtual void set_Right(double value);
    [CompilerGeneratedAttribute]
public virtual Message get_Message();
    [CompilerGeneratedAttribute]
public virtual void set_Message(Message value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual Rectangle DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(double top, double left, double bottom, double right, Message message, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.RectangleComparer : object {
    internal static RectangleComparer Instance;
    private static RectangleComparer();
    public sealed virtual int Compare(Rectangle left, Rectangle right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.RectangleEqualityComparer : object {
    internal static RectangleEqualityComparer Instance;
    private static RectangleEqualityComparer();
    public sealed virtual bool Equals(Rectangle left, Rectangle right);
    public sealed virtual int GetHashCode(Rectangle obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.Region : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private int <StartLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CharOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CharLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ByteOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ByteLength>k__BackingField;
    [CompilerGeneratedAttribute]
private ArtifactContent <Snippet>k__BackingField;
    [CompilerGeneratedAttribute]
private Message <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<Region> ValueComparer { get; }
    public static IComparer`1<Region> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public int StartLine { get; public set; }
    [DataMemberAttribute]
public int StartColumn { get; public set; }
    [DataMemberAttribute]
public int EndLine { get; public set; }
    [DataMemberAttribute]
public int EndColumn { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("-1")]
[JsonPropertyAttribute]
public int CharOffset { get; public set; }
    [DataMemberAttribute]
public int CharLength { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("-1")]
[JsonPropertyAttribute]
public int ByteOffset { get; public set; }
    [DataMemberAttribute]
public int ByteLength { get; public set; }
    [DataMemberAttribute]
public ArtifactContent Snippet { get; public set; }
    [DataMemberAttribute]
public Message Message { get; public set; }
    [DataMemberAttribute]
public string SourceLanguage { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public bool IsBinaryRegion { get; }
    public bool IsLineColumnBasedTextRegion { get; }
    public bool IsOffsetBasedTextRegion { get; }
    public Region(int startLine, int startColumn, int endLine, int endColumn, int charOffset, int charLength, int byteOffset, int byteLength, ArtifactContent snippet, Message message, string sourceLanguage, IDictionary`2<string, SerializedPropertyInfo> properties);
    public Region(Region other);
    public static IEqualityComparer`1<Region> get_ValueComparer();
    public bool ValueEquals(Region other);
    public int ValueGetHashCode();
    public static IComparer`1<Region> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual int get_StartLine();
    [CompilerGeneratedAttribute]
public virtual void set_StartLine(int value);
    [CompilerGeneratedAttribute]
public virtual int get_StartColumn();
    [CompilerGeneratedAttribute]
public virtual void set_StartColumn(int value);
    [CompilerGeneratedAttribute]
public virtual int get_EndLine();
    [CompilerGeneratedAttribute]
public virtual void set_EndLine(int value);
    [CompilerGeneratedAttribute]
public virtual int get_EndColumn();
    [CompilerGeneratedAttribute]
public virtual void set_EndColumn(int value);
    [CompilerGeneratedAttribute]
public virtual int get_CharOffset();
    [CompilerGeneratedAttribute]
public virtual void set_CharOffset(int value);
    [CompilerGeneratedAttribute]
public virtual int get_CharLength();
    [CompilerGeneratedAttribute]
public virtual void set_CharLength(int value);
    [CompilerGeneratedAttribute]
public virtual int get_ByteOffset();
    [CompilerGeneratedAttribute]
public virtual void set_ByteOffset(int value);
    [CompilerGeneratedAttribute]
public virtual int get_ByteLength();
    [CompilerGeneratedAttribute]
public virtual void set_ByteLength(int value);
    [CompilerGeneratedAttribute]
public virtual ArtifactContent get_Snippet();
    [CompilerGeneratedAttribute]
public virtual void set_Snippet(ArtifactContent value);
    [CompilerGeneratedAttribute]
public virtual Message get_Message();
    [CompilerGeneratedAttribute]
public virtual void set_Message(Message value);
    [CompilerGeneratedAttribute]
public virtual string get_SourceLanguage();
    [CompilerGeneratedAttribute]
public virtual void set_SourceLanguage(string value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual Region DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(int startLine, int startColumn, int endLine, int endColumn, int charOffset, int charLength, int byteOffset, int byteLength, ArtifactContent snippet, Message message, string sourceLanguage, IDictionary`2<string, SerializedPropertyInfo> properties);
    public bool get_IsBinaryRegion();
    public bool get_IsLineColumnBasedTextRegion();
    public bool get_IsOffsetBasedTextRegion();
    public virtual string ToString();
    public void PopulateDefaults();
    private void PopulateLineColumnBasedTextDefaults();
    private void PopulateOffsetBasedTextDefaults();
    private void PopulateBinaryDefaults();
    public bool IsProperSupersetOf(Region subRegion);
    private bool IsLineColumnBasedTextRegionProperSupersetOf(Region subRegion);
    private bool IsBinaryRegionProperSupersetOf(Region subRegion);
    private bool IsOffsetBasedTextRegionProperSupetSetOf(Region subRegion);
    private static int GetCharEndOffset(Region region);
    private static int GetByteEndOffset(Region region);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.RegionComparer : object {
    internal static RegionComparer Instance;
    private static RegionComparer();
    public sealed virtual int Compare(Region left, Region right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.RegionEqualityComparer : object {
    internal static RegionEqualityComparer Instance;
    private static RegionEqualityComparer();
    public sealed virtual bool Equals(Region left, Region right);
    public sealed virtual int GetHashCode(Region obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.Replacement : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private Region <DeletedRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private ArtifactContent <InsertedContent>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<Replacement> ValueComparer { get; }
    public static IComparer`1<Replacement> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public Region DeletedRegion { get; public set; }
    [DataMemberAttribute]
public ArtifactContent InsertedContent { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public Replacement(Region deletedRegion, ArtifactContent insertedContent, IDictionary`2<string, SerializedPropertyInfo> properties);
    public Replacement(Replacement other);
    public static IEqualityComparer`1<Replacement> get_ValueComparer();
    public bool ValueEquals(Replacement other);
    public int ValueGetHashCode();
    public static IComparer`1<Replacement> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual Region get_DeletedRegion();
    [CompilerGeneratedAttribute]
public virtual void set_DeletedRegion(Region value);
    [CompilerGeneratedAttribute]
public virtual ArtifactContent get_InsertedContent();
    [CompilerGeneratedAttribute]
public virtual void set_InsertedContent(ArtifactContent value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual Replacement DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(Region deletedRegion, ArtifactContent insertedContent, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ReplacementComparer : object {
    internal static ReplacementComparer Instance;
    private static ReplacementComparer();
    public sealed virtual int Compare(Replacement left, Replacement right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ReplacementEqualityComparer : object {
    internal static ReplacementEqualityComparer Instance;
    private static ReplacementEqualityComparer();
    public sealed virtual bool Equals(Replacement left, Replacement right);
    public sealed virtual int GetHashCode(Replacement obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.ReportingConfiguration : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private FailureLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Rank>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static ReportingConfiguration Empty;
    public static IEqualityComparer`1<ReportingConfiguration> ValueComparer { get; }
    public static IComparer`1<ReportingConfiguration> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
[DefaultValueAttribute("True")]
[JsonPropertyAttribute]
public bool Enabled { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[JsonPropertyAttribute]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.EnumConverter")]
public FailureLevel Level { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("-1")]
[JsonPropertyAttribute]
public double Rank { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, SerializedPropertyInfo> Parameters { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public ReportingConfiguration(bool enabled, FailureLevel level, double rank, IDictionary`2<string, SerializedPropertyInfo> parameters, IDictionary`2<string, SerializedPropertyInfo> properties);
    public ReportingConfiguration(ReportingConfiguration other);
    private static ReportingConfiguration();
    public static IEqualityComparer`1<ReportingConfiguration> get_ValueComparer();
    public bool ValueEquals(ReportingConfiguration other);
    public int ValueGetHashCode();
    public static IComparer`1<ReportingConfiguration> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual bool get_Enabled();
    [CompilerGeneratedAttribute]
public virtual void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public virtual FailureLevel get_Level();
    [CompilerGeneratedAttribute]
public virtual void set_Level(FailureLevel value);
    [CompilerGeneratedAttribute]
public virtual double get_Rank();
    [CompilerGeneratedAttribute]
public virtual void set_Rank(double value);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, SerializedPropertyInfo> get_Parameters();
    [CompilerGeneratedAttribute]
public virtual void set_Parameters(IDictionary`2<string, SerializedPropertyInfo> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual ReportingConfiguration DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(bool enabled, FailureLevel level, double rank, IDictionary`2<string, SerializedPropertyInfo> parameters, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ReportingConfigurationComparer : object {
    internal static ReportingConfigurationComparer Instance;
    private static ReportingConfigurationComparer();
    public sealed virtual int Compare(ReportingConfiguration left, ReportingConfiguration right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ReportingConfigurationEqualityComparer : object {
    internal static ReportingConfigurationEqualityComparer Instance;
    private static ReportingConfigurationEqualityComparer();
    public sealed virtual bool Equals(ReportingConfiguration left, ReportingConfiguration right);
    public sealed virtual int GetHashCode(ReportingConfiguration obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.ReportingDescriptor : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <DeprecatedIds>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Guid> <DeprecatedGuids>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <DeprecatedNames>k__BackingField;
    [CompilerGeneratedAttribute]
private MultiformatMessageString <ShortDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private MultiformatMessageString <FullDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, MultiformatMessageString> <MessageStrings>k__BackingField;
    [CompilerGeneratedAttribute]
private ReportingConfiguration <DefaultConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <HelpUri>k__BackingField;
    [CompilerGeneratedAttribute]
private MultiformatMessageString <Help>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ReportingDescriptorRelationship> <Relationships>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<ReportingDescriptor> ValueComparer { get; }
    public static IComparer`1<ReportingDescriptor> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public IList`1<string> DeprecatedIds { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Guid> Guid { get; public set; }
    [DataMemberAttribute]
public IList`1<Guid> DeprecatedGuids { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public IList`1<string> DeprecatedNames { get; public set; }
    [DataMemberAttribute]
public MultiformatMessageString ShortDescription { get; public set; }
    [DataMemberAttribute]
public MultiformatMessageString FullDescription { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, MultiformatMessageString> MessageStrings { get; public set; }
    [DataMemberAttribute]
public ReportingConfiguration DefaultConfiguration { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.UriConverter")]
public Uri HelpUri { get; public set; }
    [DataMemberAttribute]
public MultiformatMessageString Help { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ReportingDescriptorRelationship> Relationships { get; public set; }
    [JsonPropertyAttribute]
[DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public string Moniker { get; }
    public ReportingDescriptor(string id, IEnumerable`1<string> deprecatedIds, Nullable`1<Guid> guid, IEnumerable`1<Guid> deprecatedGuids, string name, IEnumerable`1<string> deprecatedNames, MultiformatMessageString shortDescription, MultiformatMessageString fullDescription, IDictionary`2<string, MultiformatMessageString> messageStrings, ReportingConfiguration defaultConfiguration, Uri helpUri, MultiformatMessageString help, IEnumerable`1<ReportingDescriptorRelationship> relationships, IDictionary`2<string, SerializedPropertyInfo> properties);
    public ReportingDescriptor(ReportingDescriptor other);
    public static IEqualityComparer`1<ReportingDescriptor> get_ValueComparer();
    public bool ValueEquals(ReportingDescriptor other);
    public int ValueGetHashCode();
    public static IComparer`1<ReportingDescriptor> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual string get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(string value);
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DeprecatedIds();
    [CompilerGeneratedAttribute]
public virtual void set_DeprecatedIds(IList`1<string> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_Guid();
    [CompilerGeneratedAttribute]
public virtual void set_Guid(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Guid> get_DeprecatedGuids();
    [CompilerGeneratedAttribute]
public virtual void set_DeprecatedGuids(IList`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_DeprecatedNames();
    [CompilerGeneratedAttribute]
public virtual void set_DeprecatedNames(IList`1<string> value);
    [CompilerGeneratedAttribute]
public virtual MultiformatMessageString get_ShortDescription();
    [CompilerGeneratedAttribute]
public virtual void set_ShortDescription(MultiformatMessageString value);
    [CompilerGeneratedAttribute]
public virtual MultiformatMessageString get_FullDescription();
    [CompilerGeneratedAttribute]
public virtual void set_FullDescription(MultiformatMessageString value);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, MultiformatMessageString> get_MessageStrings();
    [CompilerGeneratedAttribute]
public virtual void set_MessageStrings(IDictionary`2<string, MultiformatMessageString> value);
    [CompilerGeneratedAttribute]
public virtual ReportingConfiguration get_DefaultConfiguration();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultConfiguration(ReportingConfiguration value);
    [CompilerGeneratedAttribute]
public virtual Uri get_HelpUri();
    [CompilerGeneratedAttribute]
public virtual void set_HelpUri(Uri value);
    [CompilerGeneratedAttribute]
public virtual MultiformatMessageString get_Help();
    [CompilerGeneratedAttribute]
public virtual void set_Help(MultiformatMessageString value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ReportingDescriptorRelationship> get_Relationships();
    [CompilerGeneratedAttribute]
public virtual void set_Relationships(IList`1<ReportingDescriptorRelationship> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual ReportingDescriptor DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(string id, IEnumerable`1<string> deprecatedIds, Nullable`1<Guid> guid, IEnumerable`1<Guid> deprecatedGuids, string name, IEnumerable`1<string> deprecatedNames, MultiformatMessageString shortDescription, MultiformatMessageString fullDescription, IDictionary`2<string, MultiformatMessageString> messageStrings, ReportingConfiguration defaultConfiguration, Uri helpUri, MultiformatMessageString help, IEnumerable`1<ReportingDescriptorRelationship> relationships, IDictionary`2<string, SerializedPropertyInfo> properties);
    public string get_Moniker();
    public string Format(string messageId, IEnumerable`1<string> arguments);
    public bool ShouldSerializeDeprecatedIds();
    public bool ShouldSerializeDeprecatedGuids();
    public bool ShouldSerializeDeprecatedNames();
    public bool ShouldSerializeRelationships();
    public bool ShouldSerializeDefaultConfiguration();
    public bool ShouldSerializeFullDescription();
    public bool ShouldSerializeShortDescription();
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ReportingDescriptorComparer : object {
    internal static ReportingDescriptorComparer Instance;
    private static ReportingDescriptorComparer();
    public sealed virtual int Compare(ReportingDescriptor left, ReportingDescriptor right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ReportingDescriptorEqualityComparer : object {
    internal static ReportingDescriptorEqualityComparer Instance;
    private static ReportingDescriptorEqualityComparer();
    public sealed virtual bool Equals(ReportingDescriptor left, ReportingDescriptor right);
    public sealed virtual int GetHashCode(ReportingDescriptor obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.ReportingDescriptorReference : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolComponentReference <ToolComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<ReportingDescriptorReference> ValueComparer { get; }
    public static IComparer`1<ReportingDescriptorReference> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("-1")]
[JsonPropertyAttribute]
public int Index { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Guid> Guid { get; public set; }
    [DataMemberAttribute]
public ToolComponentReference ToolComponent { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public ReportingDescriptorReference(string id, int index, Nullable`1<Guid> guid, ToolComponentReference toolComponent, IDictionary`2<string, SerializedPropertyInfo> properties);
    public ReportingDescriptorReference(ReportingDescriptorReference other);
    public static IEqualityComparer`1<ReportingDescriptorReference> get_ValueComparer();
    public bool ValueEquals(ReportingDescriptorReference other);
    public int ValueGetHashCode();
    public static IComparer`1<ReportingDescriptorReference> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual string get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(string value);
    [CompilerGeneratedAttribute]
public virtual int get_Index();
    [CompilerGeneratedAttribute]
public virtual void set_Index(int value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_Guid();
    [CompilerGeneratedAttribute]
public virtual void set_Guid(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual ToolComponentReference get_ToolComponent();
    [CompilerGeneratedAttribute]
public virtual void set_ToolComponent(ToolComponentReference value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual ReportingDescriptorReference DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(string id, int index, Nullable`1<Guid> guid, ToolComponentReference toolComponent, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ReportingDescriptorReferenceComparer : object {
    internal static ReportingDescriptorReferenceComparer Instance;
    private static ReportingDescriptorReferenceComparer();
    public sealed virtual int Compare(ReportingDescriptorReference left, ReportingDescriptorReference right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ReportingDescriptorReferenceEqualityComparer : object {
    internal static ReportingDescriptorReferenceEqualityComparer Instance;
    private static ReportingDescriptorReferenceEqualityComparer();
    public sealed virtual bool Equals(ReportingDescriptorReference left, ReportingDescriptorReference right);
    public sealed virtual int GetHashCode(ReportingDescriptorReference obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.ReportingDescriptorRelationship : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private ReportingDescriptorReference <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Kinds>k__BackingField;
    [CompilerGeneratedAttribute]
private Message <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<ReportingDescriptorRelationship> ValueComparer { get; }
    public static IComparer`1<ReportingDescriptorRelationship> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public ReportingDescriptorReference Target { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<string> Kinds { get; public set; }
    [DataMemberAttribute]
public Message Description { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public ReportingDescriptorRelationship(ReportingDescriptorReference target, IEnumerable`1<string> kinds, Message description, IDictionary`2<string, SerializedPropertyInfo> properties);
    public ReportingDescriptorRelationship(ReportingDescriptorRelationship other);
    public static IEqualityComparer`1<ReportingDescriptorRelationship> get_ValueComparer();
    public bool ValueEquals(ReportingDescriptorRelationship other);
    public int ValueGetHashCode();
    public static IComparer`1<ReportingDescriptorRelationship> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual ReportingDescriptorReference get_Target();
    [CompilerGeneratedAttribute]
public virtual void set_Target(ReportingDescriptorReference value);
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_Kinds();
    [CompilerGeneratedAttribute]
public virtual void set_Kinds(IList`1<string> value);
    [CompilerGeneratedAttribute]
public virtual Message get_Description();
    [CompilerGeneratedAttribute]
public virtual void set_Description(Message value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual ReportingDescriptorRelationship DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(ReportingDescriptorReference target, IEnumerable`1<string> kinds, Message description, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ReportingDescriptorRelationshipComparer : object {
    internal static ReportingDescriptorRelationshipComparer Instance;
    private static ReportingDescriptorRelationshipComparer();
    public sealed virtual int Compare(ReportingDescriptorRelationship left, ReportingDescriptorRelationship right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ReportingDescriptorRelationshipEqualityComparer : object {
    internal static ReportingDescriptorRelationshipEqualityComparer Instance;
    private static ReportingDescriptorRelationshipEqualityComparer();
    public sealed virtual bool Equals(ReportingDescriptorRelationship left, ReportingDescriptorRelationship right);
    public sealed virtual int GetHashCode(ReportingDescriptorRelationship obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.Result : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private string <RuleId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RuleIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ReportingDescriptorReference <Rule>k__BackingField;
    private ResultKind _kind;
    private FailureLevel _level;
    [CompilerGeneratedAttribute]
private Message <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private ArtifactLocation <AnalysisTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Location> <Locations>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <CorrelationGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OccurrenceCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <PartialFingerprints>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Fingerprints>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Stack> <Stacks>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<CodeFlow> <CodeFlows>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Graph> <Graphs>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<GraphTraversal> <GraphTraversals>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Location> <RelatedLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Suppression> <Suppressions>k__BackingField;
    [CompilerGeneratedAttribute]
private BaselineState <BaselineState>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Rank>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Attachment> <Attachments>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <HostedViewerUri>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Uri> <WorkItemUris>k__BackingField;
    [CompilerGeneratedAttribute]
private ResultProvenance <Provenance>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Fix> <Fixes>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ReportingDescriptorReference> <Taxa>k__BackingField;
    [CompilerGeneratedAttribute]
private WebRequest <WebRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private WebResponse <WebResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private Run <Run>k__BackingField;
    public static IEqualityComparer`1<Result> ValueComparer { get; }
    public static IComparer`1<Result> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public string RuleId { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("-1")]
[JsonPropertyAttribute]
public int RuleIndex { get; public set; }
    [DataMemberAttribute]
public ReportingDescriptorReference Rule { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[JsonPropertyAttribute]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.EnumConverter")]
public ResultKind Kind { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[JsonPropertyAttribute]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.EnumConverter")]
public FailureLevel Level { get; public set; }
    [DataMemberAttribute]
public Message Message { get; public set; }
    [DataMemberAttribute]
public ArtifactLocation AnalysisTarget { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<Location> Locations { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Guid> Guid { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Guid> CorrelationGuid { get; public set; }
    [DataMemberAttribute]
public int OccurrenceCount { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, string> PartialFingerprints { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, string> Fingerprints { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<Stack> Stacks { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<CodeFlow> CodeFlows { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<Graph> Graphs { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<GraphTraversal> GraphTraversals { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<Location> RelatedLocations { get; public set; }
    [DataMemberAttribute]
public IList`1<Suppression> Suppressions { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.EnumConverter")]
public BaselineState BaselineState { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("-1")]
[JsonPropertyAttribute]
public double Rank { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<Attachment> Attachments { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.UriConverter")]
public Uri HostedViewerUri { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<Uri> WorkItemUris { get; public set; }
    [DataMemberAttribute]
public ResultProvenance Provenance { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<Fix> Fixes { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ReportingDescriptorReference> Taxa { get; public set; }
    [DataMemberAttribute]
public WebRequest WebRequest { get; public set; }
    [DataMemberAttribute]
public WebResponse WebResponse { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public Run Run { get; public set; }
    public Result(string ruleId, int ruleIndex, ReportingDescriptorReference rule, ResultKind kind, FailureLevel level, Message message, ArtifactLocation analysisTarget, IEnumerable`1<Location> locations, Nullable`1<Guid> guid, Nullable`1<Guid> correlationGuid, int occurrenceCount, IDictionary`2<string, string> partialFingerprints, IDictionary`2<string, string> fingerprints, IEnumerable`1<Stack> stacks, IEnumerable`1<CodeFlow> codeFlows, IEnumerable`1<Graph> graphs, IEnumerable`1<GraphTraversal> graphTraversals, IEnumerable`1<Location> relatedLocations, IEnumerable`1<Suppression> suppressions, BaselineState baselineState, double rank, IEnumerable`1<Attachment> attachments, Uri hostedViewerUri, IEnumerable`1<Uri> workItemUris, ResultProvenance provenance, IEnumerable`1<Fix> fixes, IEnumerable`1<ReportingDescriptorReference> taxa, WebRequest webRequest, WebResponse webResponse, IDictionary`2<string, SerializedPropertyInfo> properties);
    public Result(Result other);
    public static IEqualityComparer`1<Result> get_ValueComparer();
    public bool ValueEquals(Result other);
    public int ValueGetHashCode();
    public static IComparer`1<Result> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual string get_RuleId();
    [CompilerGeneratedAttribute]
public virtual void set_RuleId(string value);
    [CompilerGeneratedAttribute]
public virtual int get_RuleIndex();
    [CompilerGeneratedAttribute]
public virtual void set_RuleIndex(int value);
    [CompilerGeneratedAttribute]
public virtual ReportingDescriptorReference get_Rule();
    [CompilerGeneratedAttribute]
public virtual void set_Rule(ReportingDescriptorReference value);
    public virtual ResultKind get_Kind();
    public virtual void set_Kind(ResultKind value);
    public virtual FailureLevel get_Level();
    public virtual void set_Level(FailureLevel value);
    [CompilerGeneratedAttribute]
public virtual Message get_Message();
    [CompilerGeneratedAttribute]
public virtual void set_Message(Message value);
    [CompilerGeneratedAttribute]
public virtual ArtifactLocation get_AnalysisTarget();
    [CompilerGeneratedAttribute]
public virtual void set_AnalysisTarget(ArtifactLocation value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Location> get_Locations();
    [CompilerGeneratedAttribute]
public virtual void set_Locations(IList`1<Location> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_Guid();
    [CompilerGeneratedAttribute]
public virtual void set_Guid(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_CorrelationGuid();
    [CompilerGeneratedAttribute]
public virtual void set_CorrelationGuid(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual int get_OccurrenceCount();
    [CompilerGeneratedAttribute]
public virtual void set_OccurrenceCount(int value);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, string> get_PartialFingerprints();
    [CompilerGeneratedAttribute]
public virtual void set_PartialFingerprints(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, string> get_Fingerprints();
    [CompilerGeneratedAttribute]
public virtual void set_Fingerprints(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Stack> get_Stacks();
    [CompilerGeneratedAttribute]
public virtual void set_Stacks(IList`1<Stack> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<CodeFlow> get_CodeFlows();
    [CompilerGeneratedAttribute]
public virtual void set_CodeFlows(IList`1<CodeFlow> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Graph> get_Graphs();
    [CompilerGeneratedAttribute]
public virtual void set_Graphs(IList`1<Graph> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<GraphTraversal> get_GraphTraversals();
    [CompilerGeneratedAttribute]
public virtual void set_GraphTraversals(IList`1<GraphTraversal> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Location> get_RelatedLocations();
    [CompilerGeneratedAttribute]
public virtual void set_RelatedLocations(IList`1<Location> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Suppression> get_Suppressions();
    [CompilerGeneratedAttribute]
public virtual void set_Suppressions(IList`1<Suppression> value);
    [CompilerGeneratedAttribute]
public virtual BaselineState get_BaselineState();
    [CompilerGeneratedAttribute]
public virtual void set_BaselineState(BaselineState value);
    [CompilerGeneratedAttribute]
public virtual double get_Rank();
    [CompilerGeneratedAttribute]
public virtual void set_Rank(double value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Attachment> get_Attachments();
    [CompilerGeneratedAttribute]
public virtual void set_Attachments(IList`1<Attachment> value);
    [CompilerGeneratedAttribute]
public virtual Uri get_HostedViewerUri();
    [CompilerGeneratedAttribute]
public virtual void set_HostedViewerUri(Uri value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Uri> get_WorkItemUris();
    [CompilerGeneratedAttribute]
public virtual void set_WorkItemUris(IList`1<Uri> value);
    [CompilerGeneratedAttribute]
public virtual ResultProvenance get_Provenance();
    [CompilerGeneratedAttribute]
public virtual void set_Provenance(ResultProvenance value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Fix> get_Fixes();
    [CompilerGeneratedAttribute]
public virtual void set_Fixes(IList`1<Fix> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ReportingDescriptorReference> get_Taxa();
    [CompilerGeneratedAttribute]
public virtual void set_Taxa(IList`1<ReportingDescriptorReference> value);
    [CompilerGeneratedAttribute]
public virtual WebRequest get_WebRequest();
    [CompilerGeneratedAttribute]
public virtual void set_WebRequest(WebRequest value);
    [CompilerGeneratedAttribute]
public virtual WebResponse get_WebResponse();
    [CompilerGeneratedAttribute]
public virtual void set_WebResponse(WebResponse value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual Result DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(string ruleId, int ruleIndex, ReportingDescriptorReference rule, ResultKind kind, FailureLevel level, Message message, ArtifactLocation analysisTarget, IEnumerable`1<Location> locations, Nullable`1<Guid> guid, Nullable`1<Guid> correlationGuid, int occurrenceCount, IDictionary`2<string, string> partialFingerprints, IDictionary`2<string, string> fingerprints, IEnumerable`1<Stack> stacks, IEnumerable`1<CodeFlow> codeFlows, IEnumerable`1<Graph> graphs, IEnumerable`1<GraphTraversal> graphTraversals, IEnumerable`1<Location> relatedLocations, IEnumerable`1<Suppression> suppressions, BaselineState baselineState, double rank, IEnumerable`1<Attachment> attachments, Uri hostedViewerUri, IEnumerable`1<Uri> workItemUris, ResultProvenance provenance, IEnumerable`1<Fix> fixes, IEnumerable`1<ReportingDescriptorReference> taxa, WebRequest webRequest, WebResponse webResponse, IDictionary`2<string, SerializedPropertyInfo> properties);
    [CompilerGeneratedAttribute]
public Run get_Run();
    [CompilerGeneratedAttribute]
public void set_Run(Run value);
    public virtual bool ShouldSerializeRuleId();
    public bool ShouldSerializeWorkItemUris();
    public bool ShouldSerializeLevel();
    public void EnsureRunProvided();
    public string ResolvedRuleId(Run run);
    public ReportingDescriptor GetRule(Run run);
    public bool TryIsSuppressed(Boolean& isSuppressed);
    private static ReportingDescriptor GetRuleByIndex(IList`1<ReportingDescriptor> rules, int ruleIndex);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ResultComparer : object {
    internal static ResultComparer Instance;
    private static ResultComparer();
    public sealed virtual int Compare(Result left, Result right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ResultEqualityComparer : object {
    internal static ResultEqualityComparer Instance;
    private static ResultEqualityComparer();
    public sealed virtual bool Equals(Result left, Result right);
    public sealed virtual int GetHashCode(Result obj);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public enum Microsoft.CodeAnalysis.Sarif.ResultKind : Enum {
    public int value__;
    public static ResultKind None;
    public static ResultKind NotApplicable;
    public static ResultKind Pass;
    public static ResultKind Fail;
    public static ResultKind Review;
    public static ResultKind Open;
    public static ResultKind Informational;
}
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionaryConverter")]
public class Microsoft.CodeAnalysis.Sarif.ResultKindSet : HashSet`1<ResultKind> {
    public ResultKindSet(IEnumerable`1<ResultKind> values);
    protected ResultKindSet(SerializationInfo info, StreamingContext context);
}
public class Microsoft.CodeAnalysis.Sarif.ResultLevelKind : object {
    private Nullable`1<ResultKind> resultKind;
    private FailureLevel level;
    public ResultKind Kind { get; public set; }
    public FailureLevel Level { get; public set; }
    public ResultKind get_Kind();
    public void set_Kind(ResultKind value);
    public FailureLevel get_Level();
    public void set_Level(FailureLevel value);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.ResultProvenance : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private DateTime <FirstDetectionTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastDetectionTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <FirstDetectionRunGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <LastDetectionRunGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InvocationIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PhysicalLocation> <ConversionSources>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<ResultProvenance> ValueComparer { get; }
    public static IComparer`1<ResultProvenance> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.DateTimeConverter")]
public DateTime FirstDetectionTimeUtc { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.DateTimeConverter")]
public DateTime LastDetectionTimeUtc { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Guid> FirstDetectionRunGuid { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Guid> LastDetectionRunGuid { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("-1")]
[JsonPropertyAttribute]
public int InvocationIndex { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<PhysicalLocation> ConversionSources { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public ResultProvenance(DateTime firstDetectionTimeUtc, DateTime lastDetectionTimeUtc, Nullable`1<Guid> firstDetectionRunGuid, Nullable`1<Guid> lastDetectionRunGuid, int invocationIndex, IEnumerable`1<PhysicalLocation> conversionSources, IDictionary`2<string, SerializedPropertyInfo> properties);
    public ResultProvenance(ResultProvenance other);
    public static IEqualityComparer`1<ResultProvenance> get_ValueComparer();
    public bool ValueEquals(ResultProvenance other);
    public int ValueGetHashCode();
    public static IComparer`1<ResultProvenance> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual DateTime get_FirstDetectionTimeUtc();
    [CompilerGeneratedAttribute]
public virtual void set_FirstDetectionTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_LastDetectionTimeUtc();
    [CompilerGeneratedAttribute]
public virtual void set_LastDetectionTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_FirstDetectionRunGuid();
    [CompilerGeneratedAttribute]
public virtual void set_FirstDetectionRunGuid(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_LastDetectionRunGuid();
    [CompilerGeneratedAttribute]
public virtual void set_LastDetectionRunGuid(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual int get_InvocationIndex();
    [CompilerGeneratedAttribute]
public virtual void set_InvocationIndex(int value);
    [CompilerGeneratedAttribute]
public virtual IList`1<PhysicalLocation> get_ConversionSources();
    [CompilerGeneratedAttribute]
public virtual void set_ConversionSources(IList`1<PhysicalLocation> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual ResultProvenance DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(DateTime firstDetectionTimeUtc, DateTime lastDetectionTimeUtc, Nullable`1<Guid> firstDetectionRunGuid, Nullable`1<Guid> lastDetectionRunGuid, int invocationIndex, IEnumerable`1<PhysicalLocation> conversionSources, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ResultProvenanceComparer : object {
    internal static ResultProvenanceComparer Instance;
    private static ResultProvenanceComparer();
    public sealed virtual int Compare(ResultProvenance left, ResultProvenance right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ResultProvenanceEqualityComparer : object {
    internal static ResultProvenanceEqualityComparer Instance;
    private static ResultProvenanceEqualityComparer();
    public sealed virtual bool Equals(ResultProvenance left, ResultProvenance right);
    public sealed virtual int GetHashCode(ResultProvenance obj);
}
public enum Microsoft.CodeAnalysis.Sarif.RuleKind : Enum {
    public int value__;
    public static RuleKind None;
    public static RuleKind Sarif;
    public static RuleKind Gh;
    public static RuleKind Ghas;
    public static RuleKind Ado;
}
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionaryConverter")]
public class Microsoft.CodeAnalysis.Sarif.RuleKindSet : HashSet`1<RuleKind> {
    public RuleKindSet(IEnumerable`1<RuleKind> values);
    protected RuleKindSet(SerializationInfo info, StreamingContext context);
}
public static class Microsoft.CodeAnalysis.Sarif.RuleUtilities : object {
    public static Result BuildResult(ResultKind kind, IAnalysisContext context, Region region, string ruleMessageId, String[] arguments);
    public static Result BuildResult(FailureLevel level, IAnalysisContext context, Region region, string ruleMessageId, String[] arguments);
    public static Result BuildResult(FailureLevel level, ResultKind kind, IAnalysisContext context, Region region, string ruleMessageId, String[] arguments);
    public static Dictionary`2<string, MultiformatMessageString> BuildDictionary(ResourceManager resourceManager, IEnumerable`1<string> resourceNames, string ruleId);
    public static string NormalizeRuleMessageId(string ruleMessageId, string ruleId, string prefix);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.Run : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private Tool <Tool>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Invocation> <Invocations>k__BackingField;
    [CompilerGeneratedAttribute]
private Conversion <Conversion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<VersionControlDetails> <VersionControlProvenance>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ArtifactLocation> <OriginalUriBaseIds>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Artifact> <Artifacts>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<LogicalLocation> <LogicalLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Graph> <Graphs>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Result> <Results>k__BackingField;
    [CompilerGeneratedAttribute]
private RunAutomationDetails <AutomationDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<RunAutomationDetails> <RunAggregates>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <BaselineGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <RedactionTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultSourceLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <NewlineSequences>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnKind <ColumnKind>k__BackingField;
    [CompilerGeneratedAttribute]
private ExternalPropertyFileReferences <ExternalPropertyFileReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ThreadFlowLocation> <ThreadFlowLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ToolComponent> <Taxonomies>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Address> <Addresses>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ToolComponent> <Translations>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ToolComponent> <Policies>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<WebRequest> <WebRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<WebResponse> <WebResponses>k__BackingField;
    [CompilerGeneratedAttribute]
private SpecialLocations <SpecialLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    private static Graph EmptyGraph;
    private static Artifact EmptyFile;
    private static Invocation EmptyInvocation;
    private static LogicalLocation EmptyLogicalLocation;
    private Dictionary`2<string, FailureLevel> PoliciesCache;
    private IDictionary`2<ArtifactLocation, int> _artifactLocationToIndexMap;
    public static IEqualityComparer`1<Run> ValueComparer { get; }
    public static IComparer`1<Run> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public Tool Tool { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<Invocation> Invocations { get; public set; }
    [DataMemberAttribute]
public Conversion Conversion { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("en-US")]
[JsonPropertyAttribute]
public string Language { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<VersionControlDetails> VersionControlProvenance { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, ArtifactLocation> OriginalUriBaseIds { get; public set; }
    [DataMemberAttribute]
public IList`1<Artifact> Artifacts { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<LogicalLocation> LogicalLocations { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<Graph> Graphs { get; public set; }
    [DataMemberAttribute]
public IList`1<Result> Results { get; public set; }
    [DataMemberAttribute]
public RunAutomationDetails AutomationDetails { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<RunAutomationDetails> RunAggregates { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Guid> BaselineGuid { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<string> RedactionTokens { get; public set; }
    [DataMemberAttribute]
public string DefaultEncoding { get; public set; }
    [DataMemberAttribute]
public string DefaultSourceLanguage { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<string> NewlineSequences { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.EnumConverter")]
public ColumnKind ColumnKind { get; public set; }
    [DataMemberAttribute]
public ExternalPropertyFileReferences ExternalPropertyFileReferences { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ThreadFlowLocation> ThreadFlowLocations { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ToolComponent> Taxonomies { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<Address> Addresses { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ToolComponent> Translations { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ToolComponent> Policies { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<WebRequest> WebRequests { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<WebResponse> WebResponses { get; public set; }
    [DataMemberAttribute]
public SpecialLocations SpecialLocations { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public Run(Tool tool, IEnumerable`1<Invocation> invocations, Conversion conversion, string language, IEnumerable`1<VersionControlDetails> versionControlProvenance, IDictionary`2<string, ArtifactLocation> originalUriBaseIds, IEnumerable`1<Artifact> artifacts, IEnumerable`1<LogicalLocation> logicalLocations, IEnumerable`1<Graph> graphs, IEnumerable`1<Result> results, RunAutomationDetails automationDetails, IEnumerable`1<RunAutomationDetails> runAggregates, Nullable`1<Guid> baselineGuid, IEnumerable`1<string> redactionTokens, string defaultEncoding, string defaultSourceLanguage, IEnumerable`1<string> newlineSequences, ColumnKind columnKind, ExternalPropertyFileReferences externalPropertyFileReferences, IEnumerable`1<ThreadFlowLocation> threadFlowLocations, IEnumerable`1<ToolComponent> taxonomies, IEnumerable`1<Address> addresses, IEnumerable`1<ToolComponent> translations, IEnumerable`1<ToolComponent> policies, IEnumerable`1<WebRequest> webRequests, IEnumerable`1<WebResponse> webResponses, SpecialLocations specialLocations, IDictionary`2<string, SerializedPropertyInfo> properties);
    public Run(Run other);
    private static Run();
    public static IEqualityComparer`1<Run> get_ValueComparer();
    public bool ValueEquals(Run other);
    public int ValueGetHashCode();
    public static IComparer`1<Run> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual Tool get_Tool();
    [CompilerGeneratedAttribute]
public virtual void set_Tool(Tool value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Invocation> get_Invocations();
    [CompilerGeneratedAttribute]
public virtual void set_Invocations(IList`1<Invocation> value);
    [CompilerGeneratedAttribute]
public virtual Conversion get_Conversion();
    [CompilerGeneratedAttribute]
public virtual void set_Conversion(Conversion value);
    [CompilerGeneratedAttribute]
public virtual string get_Language();
    [CompilerGeneratedAttribute]
public virtual void set_Language(string value);
    [CompilerGeneratedAttribute]
public virtual IList`1<VersionControlDetails> get_VersionControlProvenance();
    [CompilerGeneratedAttribute]
public virtual void set_VersionControlProvenance(IList`1<VersionControlDetails> value);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, ArtifactLocation> get_OriginalUriBaseIds();
    [CompilerGeneratedAttribute]
public virtual void set_OriginalUriBaseIds(IDictionary`2<string, ArtifactLocation> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Artifact> get_Artifacts();
    [CompilerGeneratedAttribute]
public virtual void set_Artifacts(IList`1<Artifact> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<LogicalLocation> get_LogicalLocations();
    [CompilerGeneratedAttribute]
public virtual void set_LogicalLocations(IList`1<LogicalLocation> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Graph> get_Graphs();
    [CompilerGeneratedAttribute]
public virtual void set_Graphs(IList`1<Graph> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Result> get_Results();
    [CompilerGeneratedAttribute]
public virtual void set_Results(IList`1<Result> value);
    [CompilerGeneratedAttribute]
public virtual RunAutomationDetails get_AutomationDetails();
    [CompilerGeneratedAttribute]
public virtual void set_AutomationDetails(RunAutomationDetails value);
    [CompilerGeneratedAttribute]
public virtual IList`1<RunAutomationDetails> get_RunAggregates();
    [CompilerGeneratedAttribute]
public virtual void set_RunAggregates(IList`1<RunAutomationDetails> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_BaselineGuid();
    [CompilerGeneratedAttribute]
public virtual void set_BaselineGuid(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_RedactionTokens();
    [CompilerGeneratedAttribute]
public virtual void set_RedactionTokens(IList`1<string> value);
    [CompilerGeneratedAttribute]
public virtual string get_DefaultEncoding();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultEncoding(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DefaultSourceLanguage();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultSourceLanguage(string value);
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_NewlineSequences();
    [CompilerGeneratedAttribute]
public virtual void set_NewlineSequences(IList`1<string> value);
    [CompilerGeneratedAttribute]
public virtual ColumnKind get_ColumnKind();
    [CompilerGeneratedAttribute]
public virtual void set_ColumnKind(ColumnKind value);
    [CompilerGeneratedAttribute]
public virtual ExternalPropertyFileReferences get_ExternalPropertyFileReferences();
    [CompilerGeneratedAttribute]
public virtual void set_ExternalPropertyFileReferences(ExternalPropertyFileReferences value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ThreadFlowLocation> get_ThreadFlowLocations();
    [CompilerGeneratedAttribute]
public virtual void set_ThreadFlowLocations(IList`1<ThreadFlowLocation> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ToolComponent> get_Taxonomies();
    [CompilerGeneratedAttribute]
public virtual void set_Taxonomies(IList`1<ToolComponent> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Address> get_Addresses();
    [CompilerGeneratedAttribute]
public virtual void set_Addresses(IList`1<Address> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ToolComponent> get_Translations();
    [CompilerGeneratedAttribute]
public virtual void set_Translations(IList`1<ToolComponent> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ToolComponent> get_Policies();
    [CompilerGeneratedAttribute]
public virtual void set_Policies(IList`1<ToolComponent> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<WebRequest> get_WebRequests();
    [CompilerGeneratedAttribute]
public virtual void set_WebRequests(IList`1<WebRequest> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<WebResponse> get_WebResponses();
    [CompilerGeneratedAttribute]
public virtual void set_WebResponses(IList`1<WebResponse> value);
    [CompilerGeneratedAttribute]
public virtual SpecialLocations get_SpecialLocations();
    [CompilerGeneratedAttribute]
public virtual void set_SpecialLocations(SpecialLocations value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual Run DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(Tool tool, IEnumerable`1<Invocation> invocations, Conversion conversion, string language, IEnumerable`1<VersionControlDetails> versionControlProvenance, IDictionary`2<string, ArtifactLocation> originalUriBaseIds, IEnumerable`1<Artifact> artifacts, IEnumerable`1<LogicalLocation> logicalLocations, IEnumerable`1<Graph> graphs, IEnumerable`1<Result> results, RunAutomationDetails automationDetails, IEnumerable`1<RunAutomationDetails> runAggregates, Nullable`1<Guid> baselineGuid, IEnumerable`1<string> redactionTokens, string defaultEncoding, string defaultSourceLanguage, IEnumerable`1<string> newlineSequences, ColumnKind columnKind, ExternalPropertyFileReferences externalPropertyFileReferences, IEnumerable`1<ThreadFlowLocation> threadFlowLocations, IEnumerable`1<ToolComponent> taxonomies, IEnumerable`1<Address> addresses, IEnumerable`1<ToolComponent> translations, IEnumerable`1<ToolComponent> policies, IEnumerable`1<WebRequest> webRequests, IEnumerable`1<WebResponse> webResponses, SpecialLocations specialLocations, IDictionary`2<string, SerializedPropertyInfo> properties);
    public Uri ExpandUrisWithUriBaseId(string key, string currentValue);
    public int GetFileIndex(ArtifactLocation fileLocation, bool addToFilesTableIfNotPresent, OptionallyEmittedData dataToInsert, Encoding encoding, HashData hashData);
    private void InitializeFileToIndexMap();
    public ToolComponent GetToolComponentFromReference(ToolComponentReference reference);
    public void SetRunOnResults();
    public void MergeResultsFrom(Run additional);
    public bool ShouldSerializeColumnKind();
    public bool ShouldSerializeArtifacts();
    public bool ShouldSerializeGraphs();
    public bool ShouldSerializeAutomationDetails();
    public bool ShouldSerializeInvocations();
    public bool ShouldSerializeLogicalLocations();
    public bool ShouldSerializeNewlineSequences();
    internal static Dictionary`2<string, FailureLevel> ComputePolicies(IEnumerable`1<ToolComponent> policies);
    public void ApplyPolicies(Dictionary`2<string, FailureLevel> policiesCache);
    public bool HasResults();
    public bool HasAbsentResults();
    public bool HasSuppressedResults();
    [CompilerGeneratedAttribute]
private Result <SetRunOnResults>b__137_0(Result result);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.RunAutomationDetails : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private Message <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <CorrelationGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<RunAutomationDetails> ValueComparer { get; }
    public static IComparer`1<RunAutomationDetails> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public Message Description { get; public set; }
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Guid> Guid { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Guid> CorrelationGuid { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public RunAutomationDetails(Message description, string id, Nullable`1<Guid> guid, Nullable`1<Guid> correlationGuid, IDictionary`2<string, SerializedPropertyInfo> properties);
    public RunAutomationDetails(RunAutomationDetails other);
    public static IEqualityComparer`1<RunAutomationDetails> get_ValueComparer();
    public bool ValueEquals(RunAutomationDetails other);
    public int ValueGetHashCode();
    public static IComparer`1<RunAutomationDetails> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual Message get_Description();
    [CompilerGeneratedAttribute]
public virtual void set_Description(Message value);
    [CompilerGeneratedAttribute]
public virtual string get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_Guid();
    [CompilerGeneratedAttribute]
public virtual void set_Guid(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_CorrelationGuid();
    [CompilerGeneratedAttribute]
public virtual void set_CorrelationGuid(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual RunAutomationDetails DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(Message description, string id, Nullable`1<Guid> guid, Nullable`1<Guid> correlationGuid, IDictionary`2<string, SerializedPropertyInfo> properties);
    public bool ShouldSerializeDescription();
    public bool ShouldSerializeId();
    public bool ShouldSerializeGuid();
    public bool ShouldSerializeCorrelationGuid();
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.RunAutomationDetailsComparer : object {
    internal static RunAutomationDetailsComparer Instance;
    private static RunAutomationDetailsComparer();
    public sealed virtual int Compare(RunAutomationDetails left, RunAutomationDetails right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.RunAutomationDetailsEqualityComparer : object {
    internal static RunAutomationDetailsEqualityComparer Instance;
    private static RunAutomationDetailsEqualityComparer();
    public sealed virtual bool Equals(RunAutomationDetails left, RunAutomationDetails right);
    public sealed virtual int GetHashCode(RunAutomationDetails obj);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.RunComparer : object {
    internal static RunComparer Instance;
    private static RunComparer();
    public sealed virtual int Compare(Run left, Run right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.RunEqualityComparer : object {
    internal static RunEqualityComparer Instance;
    private static RunEqualityComparer();
    public sealed virtual bool Equals(Run left, Run right);
    public sealed virtual int GetHashCode(Run obj);
}
[FlagsAttribute]
public enum Microsoft.CodeAnalysis.Sarif.RuntimeConditions : Enum {
    public long value__;
    public static RuntimeConditions None;
    public static RuntimeConditions InvalidCommandLineOption;
    public static RuntimeConditions RuleMissingRequiredConfiguration;
    public static RuntimeConditions OneOrMoreRulesAreIncompatible;
    public static RuntimeConditions NoValidAnalysisTargets;
    public static RuntimeConditions FileAlreadyExists;
    public static RuntimeConditions NoRulesLoaded;
    public static RuntimeConditions MissingFile;
    public static RuntimeConditions FatalReserved0;
    public static RuntimeConditions FatalReserved1;
    public static RuntimeConditions FatalReserved2;
    public static RuntimeConditions FatalReserved3;
    public static RuntimeConditions FatalReserved4;
    public static RuntimeConditions ExceptionRaisedInSkimmerCanAnalyze;
    public static RuntimeConditions ExceptionInstantiatingSkimmers;
    public static RuntimeConditions ExceptionLoadingAnalysisPlugin;
    public static RuntimeConditions ExceptionProcessingCommandline;
    public static RuntimeConditions ExceptionInSkimmerInitialize;
    public static RuntimeConditions ExceptionProcessingBaseline;
    public static RuntimeConditions ExceptionCreatingOutputFile;
    public static RuntimeConditions ExceptionLoadingTargetFile;
    public static RuntimeConditions ExceptionInSkimmerAnalyze;
    public static RuntimeConditions ExceptionPostingLogFile;
    public static RuntimeConditions ExceptionAccessingFile;
    public static RuntimeConditions ExceptionLoadingPdb;
    public static RuntimeConditions ExceptionInEngine;
    public static RuntimeConditions TargetParseError;
    public static RuntimeConditions AnalysisCanceled;
    public static RuntimeConditions AnalysisTimedOut;
    public static RuntimeConditions FatalReserved5;
    public static RuntimeConditions FatalReserved6;
    public static RuntimeConditions FatalReserved7;
    public static RuntimeConditions FatalReserved8;
    public static RuntimeConditions Fatal;
    public static RuntimeConditions UnassignedFatal;
    public static RuntimeConditions OneOrMoreFilesSkippedDueToExceedingSizeLimits;
    public static RuntimeConditions OneOrMoreEmptyFilesSkipped;
    public static RuntimeConditions OneOrMoreFilesSkipped;
    public static RuntimeConditions RuleWasExplicitlyDisabled;
    public static RuntimeConditions RuleNotApplicableToTarget;
    public static RuntimeConditions RuleCannotRunOnPlatform;
    public static RuntimeConditions TargetNotValidToAnalyze;
    public static RuntimeConditions OneOrMoreWarningsFired;
    public static RuntimeConditions OneOrMoreErrorsFired;
    public static RuntimeConditions ObsoleteOption;
    public static RuntimeConditions NonfatalReserved0;
    public static RuntimeConditions NonfatalReserved1;
    public static RuntimeConditions NonfatalReserved2;
    public static RuntimeConditions NonfatalReserved3;
    public static RuntimeConditions NonfatalReserved4;
    public static RuntimeConditions NonfatalReserved5;
    public static RuntimeConditions NonfatalReserved6;
    public static RuntimeConditions NonfatalReserved7;
    public static RuntimeConditions NonfatalReserved8;
    public static RuntimeConditions NonfatalReserved9;
    public static RuntimeConditions NonfatalReserved10;
    public static RuntimeConditions NonfatalReserved11;
    public static RuntimeConditions NonfatalReserved12;
    public static RuntimeConditions NonfatalReserved13;
    public static RuntimeConditions NonfatalReserved14;
    public static RuntimeConditions NonfatalReserved15;
    public static RuntimeConditions NonfatalReserved16;
    public static RuntimeConditions NonfatalReserved17;
    public static RuntimeConditions NonfatalReserved18;
    public static RuntimeConditions NonfatalReserved19;
    public static RuntimeConditions NonfatalReserved20;
    public static RuntimeConditions NonfatalReserved21;
    public static RuntimeConditions Nonfatal;
    public static RuntimeConditions UnassignedNonfatal;
}
public static class Microsoft.CodeAnalysis.Sarif.SarifConstants : object {
    public static string SarifFileExtension;
    public static string GuidFormat;
    public static string RedactedMarker;
    public static char HierarchicalComponentSeparator;
}
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.Sarif.SarifExtensions : object {
    [ThreadStaticAttribute]
private static StringBuilder s_sb;
    [ExtensionAttribute]
public static string CsvEscape(string value);
    [ExtensionAttribute]
public static RuntimeConditions Fatal(RuntimeConditions conditions);
    [ExtensionAttribute]
public static RuntimeConditions Nonfatal(RuntimeConditions conditions);
    [ExtensionAttribute]
public static string ToString(IEnumerable`1<Result> results);
    [ExtensionAttribute]
public static IEnumerable`1<SarifLog> Split(SarifLog sarifLog, SplittingStrategy splittingStrategy);
    [ExtensionAttribute]
public static IDictionary`2<string, MultiformatMessageString> ConvertToMultiformatMessageStringsDictionary(IDictionary`2<string, string> v1MessageStringsDictionary);
    [ExtensionAttribute]
public static bool IsEmptyEnumerable(object value);
    [ExtensionAttribute]
public static bool HasAtLeastOneNonNullValue(IEnumerable`1<T> collection);
    [ExtensionAttribute]
public static bool HasAtLeastOneNonDefaultValue(IEnumerable`1<T> collection, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static string InstanceIdInstanceComponent(RunAutomationDetails runAutomationDetails);
    [ExtensionAttribute]
public static string InstanceIdLogicalComponent(RunAutomationDetails runAutomationDetails);
    [ExtensionAttribute]
public static bool IsEqualToOrHierarchicalDescendantOf(string child, string parent);
    [ExtensionAttribute]
public static string NormalizeToLinuxNewlines(string input);
    [ExtensionAttribute]
public static Message ToMessage(string text);
    [ExtensionAttribute]
public static string ToAndPhrase(List`1<string> words);
    [ExtensionAttribute]
public static TFlags ToFlags(IEnumerable`1<TFlags> enumeratedFlags);
    [ExtensionAttribute]
public static string GetFileName(Uri uri);
    [ExtensionAttribute]
public static string GetFilePath(Uri uri);
    [ExtensionAttribute]
public static string FormatForVisualStudio(Region region);
    [ExtensionAttribute]
public static string FormatForVisualStudio(Result result, ReportingDescriptor rule);
    [ExtensionAttribute]
public static string FormatForVisualStudio(FailureLevel level);
    [ExtensionAttribute]
public static string FormatForVisualStudio(ResultKind kind);
    [ExtensionAttribute]
public static string GetMessageText(Result result, ReportingDescriptor rule);
    [ExtensionAttribute]
public static string GetMessageText(Result result, ReportingDescriptor rule, bool concise, int maxLength);
    internal static string GetFormattedMessage(string formatString, String[] arguments);
    public static string GetFirstSentence(string text);
    [ExtensionAttribute]
internal static string PropertyValue(Dictionary`2<string, string> properties, string key);
    [ExtensionAttribute]
public static IDictionary`2<string, T> MergePreferFirst(IDictionary`2<string, T> propertyBag, IDictionary`2<string, T> otherPropertyBag);
    [IteratorStateMachineAttribute("Microsoft.CodeAnalysis.Sarif.SarifExtensions/<DistinctMerge>d__29`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> DistinctMerge(IEnumerable`1<T> list, IEnumerable`1<T> anotherList, IEqualityComparer`1<T> equalityComparer);
    [ExtensionAttribute]
internal static int CompareTo(Nullable`1<T> left, Nullable`1<T> right);
    [ExtensionAttribute]
internal static bool IsNewline(char testedCharacter);
    [ExtensionAttribute]
internal static bool Matches(Char[] array, int startIndex, string target);
    [ExtensionAttribute]
internal static void ConsumeElementOfDepth(XmlReader xmlReader, int endElementDepth);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.SarifLog : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private Uri <SchemaUri>k__BackingField;
    [CompilerGeneratedAttribute]
private SarifVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Run> <Runs>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ExternalProperties> <InlineExternalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<SarifLog> ValueComparer { get; }
    public static IComparer`1<SarifLog> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.UriConverter")]
public Uri SchemaUri { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.SarifVersionConverter")]
public SarifVersion Version { get; public set; }
    [DataMemberAttribute]
public IList`1<Run> Runs { get; public set; }
    [DataMemberAttribute]
public IList`1<ExternalProperties> InlineExternalProperties { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public SarifLog(Uri schemaUri, SarifVersion version, IEnumerable`1<Run> runs, IEnumerable`1<ExternalProperties> inlineExternalProperties, IDictionary`2<string, SerializedPropertyInfo> properties);
    public SarifLog(SarifLog other);
    public static IEqualityComparer`1<SarifLog> get_ValueComparer();
    public bool ValueEquals(SarifLog other);
    public int ValueGetHashCode();
    public static IComparer`1<SarifLog> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual Uri get_SchemaUri();
    [CompilerGeneratedAttribute]
public virtual void set_SchemaUri(Uri value);
    [CompilerGeneratedAttribute]
public virtual SarifVersion get_Version();
    [CompilerGeneratedAttribute]
public virtual void set_Version(SarifVersion value);
    [CompilerGeneratedAttribute]
public virtual IList`1<Run> get_Runs();
    [CompilerGeneratedAttribute]
public virtual void set_Runs(IList`1<Run> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ExternalProperties> get_InlineExternalProperties();
    [CompilerGeneratedAttribute]
public virtual void set_InlineExternalProperties(IList`1<ExternalProperties> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual SarifLog DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(Uri schemaUri, SarifVersion version, IEnumerable`1<Run> runs, IEnumerable`1<ExternalProperties> inlineExternalProperties, IDictionary`2<string, SerializedPropertyInfo> properties);
    public static SarifLog LoadDeferred(string sarifFilePath);
    public static SarifLog Load(string sarifFilePath);
    public static SarifLog Load(Stream source, bool deferred);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Sarif.SarifLog/<Post>d__38")]
public static Task`1<ValueTuple`2<bool, string>> Post(Uri postUri, string filePath, IFileSystem fileSystem, HttpClient httpClient);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Sarif.SarifLog/<Post>d__39")]
internal static Task`1<ValueTuple`2<bool, string>> Post(Uri postUri, string filePath, IFileSystem fileSystem, HttpClientWrapper httpClient);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Sarif.SarifLog/<Post>d__40")]
public static Task`1<HttpResponseMessage> Post(Uri postUri, Stream stream, HttpClient httpClient);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Sarif.SarifLog/<Post>d__41")]
internal static Task`1<HttpResponseMessage> Post(Uri postUri, Stream stream, HttpClientWrapper httpClient);
    public void Save(string sarifFilePath);
    public void Save(Stream stream);
    public void Save(StreamWriter streamWriter);
    [IteratorStateMachineAttribute("Microsoft.CodeAnalysis.Sarif.SarifLog/<Results>d__45")]
public IEnumerable`1<Result> Results();
    public void ApplyPolicies(Dictionary`2<string, FailureLevel> policiesCache);
    public void ApplyPolicies(string sarifLogPath);
    internal static void ComputePolicies(Dictionary`2<string, FailureLevel> localCache, Run run);
    internal static bool ShouldSendLog(SarifLog sarifLog);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.SarifLogComparer : object {
    internal static SarifLogComparer Instance;
    private static SarifLogComparer();
    public sealed virtual int Compare(SarifLog left, SarifLog right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.SarifLogEqualityComparer : object {
    internal static SarifLogEqualityComparer Instance;
    private static SarifLogEqualityComparer();
    public sealed virtual bool Equals(SarifLog left, SarifLog right);
    public sealed virtual int GetHashCode(SarifLog obj);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public enum Microsoft.CodeAnalysis.Sarif.SarifNodeKind : Enum {
    public int value__;
    public static SarifNodeKind None;
    public static SarifNodeKind SarifLog;
    public static SarifNodeKind Address;
    public static SarifNodeKind Artifact;
    public static SarifNodeKind ArtifactChange;
    public static SarifNodeKind ArtifactContent;
    public static SarifNodeKind ArtifactLocation;
    public static SarifNodeKind Attachment;
    public static SarifNodeKind CodeFlow;
    public static SarifNodeKind ConfigurationOverride;
    public static SarifNodeKind Conversion;
    public static SarifNodeKind Edge;
    public static SarifNodeKind EdgeTraversal;
    public static SarifNodeKind ExceptionData;
    public static SarifNodeKind ExternalProperties;
    public static SarifNodeKind ExternalPropertyFileReference;
    public static SarifNodeKind ExternalPropertyFileReferences;
    public static SarifNodeKind Fix;
    public static SarifNodeKind Graph;
    public static SarifNodeKind GraphTraversal;
    public static SarifNodeKind Invocation;
    public static SarifNodeKind Location;
    public static SarifNodeKind LocationRelationship;
    public static SarifNodeKind LogicalLocation;
    public static SarifNodeKind Message;
    public static SarifNodeKind MultiformatMessageString;
    public static SarifNodeKind Node;
    public static SarifNodeKind Notification;
    public static SarifNodeKind PhysicalLocation;
    public static SarifNodeKind PropertyBag;
    public static SarifNodeKind Rectangle;
    public static SarifNodeKind Region;
    public static SarifNodeKind Replacement;
    public static SarifNodeKind ReportingDescriptor;
    public static SarifNodeKind ReportingConfiguration;
    public static SarifNodeKind ReportingDescriptorReference;
    public static SarifNodeKind ReportingDescriptorRelationship;
    public static SarifNodeKind Result;
    public static SarifNodeKind ResultProvenance;
    public static SarifNodeKind Run;
    public static SarifNodeKind RunAutomationDetails;
    public static SarifNodeKind SpecialLocations;
    public static SarifNodeKind Stack;
    public static SarifNodeKind StackFrame;
    public static SarifNodeKind Suppression;
    public static SarifNodeKind ThreadFlow;
    public static SarifNodeKind ThreadFlowLocation;
    public static SarifNodeKind Tool;
    public static SarifNodeKind ToolComponent;
    public static SarifNodeKind ToolComponentReference;
    public static SarifNodeKind TranslationMetadata;
    public static SarifNodeKind VersionControlDetails;
    public static SarifNodeKind WebRequest;
    public static SarifNodeKind WebResponse;
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public abstract class Microsoft.CodeAnalysis.Sarif.SarifRewritingVisitor : object {
    public virtual object Visit(ISarifNode node);
    public virtual object VisitActual(ISarifNode node);
    private T VisitNullChecked(T node);
    public virtual Address VisitAddress(Address node);
    public virtual Artifact VisitArtifact(Artifact node);
    public virtual ArtifactChange VisitArtifactChange(ArtifactChange node);
    public virtual ArtifactContent VisitArtifactContent(ArtifactContent node);
    public virtual ArtifactLocation VisitArtifactLocation(ArtifactLocation node);
    public virtual Attachment VisitAttachment(Attachment node);
    public virtual CodeFlow VisitCodeFlow(CodeFlow node);
    public virtual ConfigurationOverride VisitConfigurationOverride(ConfigurationOverride node);
    public virtual Conversion VisitConversion(Conversion node);
    public virtual Edge VisitEdge(Edge node);
    public virtual EdgeTraversal VisitEdgeTraversal(EdgeTraversal node);
    public virtual ExceptionData VisitExceptionData(ExceptionData node);
    public virtual ExternalProperties VisitExternalProperties(ExternalProperties node);
    public virtual ExternalPropertyFileReference VisitExternalPropertyFileReference(ExternalPropertyFileReference node);
    public virtual ExternalPropertyFileReferences VisitExternalPropertyFileReferences(ExternalPropertyFileReferences node);
    public virtual Fix VisitFix(Fix node);
    public virtual Graph VisitGraph(Graph node);
    public virtual GraphTraversal VisitGraphTraversal(GraphTraversal node);
    public virtual Invocation VisitInvocation(Invocation node);
    public virtual Location VisitLocation(Location node);
    public virtual LocationRelationship VisitLocationRelationship(LocationRelationship node);
    public virtual LogicalLocation VisitLogicalLocation(LogicalLocation node);
    public virtual Message VisitMessage(Message node);
    public virtual MultiformatMessageString VisitMultiformatMessageString(MultiformatMessageString node);
    public virtual Node VisitNode(Node node);
    public virtual Notification VisitNotification(Notification node);
    public virtual PhysicalLocation VisitPhysicalLocation(PhysicalLocation node);
    public virtual PropertyBag VisitPropertyBag(PropertyBag node);
    public virtual Rectangle VisitRectangle(Rectangle node);
    public virtual Region VisitRegion(Region node);
    public virtual Replacement VisitReplacement(Replacement node);
    public virtual ReportingConfiguration VisitReportingConfiguration(ReportingConfiguration node);
    public virtual ReportingDescriptor VisitReportingDescriptor(ReportingDescriptor node);
    public virtual ReportingDescriptorReference VisitReportingDescriptorReference(ReportingDescriptorReference node);
    public virtual ReportingDescriptorRelationship VisitReportingDescriptorRelationship(ReportingDescriptorRelationship node);
    public virtual Result VisitResult(Result node);
    public virtual ResultProvenance VisitResultProvenance(ResultProvenance node);
    public virtual Run VisitRun(Run node);
    public virtual RunAutomationDetails VisitRunAutomationDetails(RunAutomationDetails node);
    public virtual SarifLog VisitSarifLog(SarifLog node);
    public virtual SpecialLocations VisitSpecialLocations(SpecialLocations node);
    public virtual Stack VisitStack(Stack node);
    public virtual StackFrame VisitStackFrame(StackFrame node);
    public virtual Suppression VisitSuppression(Suppression node);
    public virtual ThreadFlow VisitThreadFlow(ThreadFlow node);
    public virtual ThreadFlowLocation VisitThreadFlowLocation(ThreadFlowLocation node);
    public virtual Tool VisitTool(Tool node);
    public virtual ToolComponent VisitToolComponent(ToolComponent node);
    public virtual ToolComponentReference VisitToolComponentReference(ToolComponentReference node);
    public virtual TranslationMetadata VisitTranslationMetadata(TranslationMetadata node);
    public virtual VersionControlDetails VisitVersionControlDetails(VersionControlDetails node);
    public virtual WebRequest VisitWebRequest(WebRequest node);
    public virtual WebResponse VisitWebResponse(WebResponse node);
}
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.Sarif.SarifUtilities : object {
    private static Regex s_semVer200;
    public static string V1_0_0;
    public static string SarifSchemaUriBase;
    public static string SarifSchemaUri;
    public static string SarifDateTimeFormatSecondsPrecision;
    public static string SarifDateTimeFormatMillisecondsPrecision;
    private static string s_stableSarifVersion;
    internal static bool UnitTesting;
    public static string StableSarifVersion { get; }
    private static SarifUtilities();
    [ExtensionAttribute]
public static bool IsSemanticVersioningCompatible(string versionText);
    public static string get_StableSarifVersion();
    [ExtensionAttribute]
public static SarifVersion ConvertToSarifVersion(string sarifVersionText);
    [ExtensionAttribute]
public static string ConvertToText(SarifVersion sarifVersion);
    [ExtensionAttribute]
public static Uri ConvertToSchemaUri(SarifVersion sarifVersion);
    public static Dictionary`2<string, string> BuildMessageFormats(IEnumerable`1<string> resourceNames, ResourceManager resourceManager);
    [ExtensionAttribute]
public static string FormatMessage(Exception exception);
    public static void AddOrUpdateDictionaryEntry(IDictionary`2<TKey, TValue> dictionary, TKey key, TValue val);
    public static CodeFlow CreateSingleThreadedCodeFlow(IEnumerable`1<ThreadFlowLocation> locations);
    public static string GetUtf8Base64String(string s);
    public static string GetBase64String(string s, Encoding encoding);
    public static string DecodeBase64String(string s, Encoding encoding);
    public static int GetByteLength(Char[] chars, Encoding encoding);
    public static int GetByteLength(string s, Encoding encoding);
    public static Regex RegexFromPattern(string pattern);
    internal static void DebugAssert(bool conditional);
    internal static Encoding GetEncodingFromName(string encodingName);
}
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.Sarif.SarifUtilitiesVersionOne : object {
    [ExtensionAttribute]
public static string ConvertToText(SarifVersionVersionOne sarifVersion);
    [ExtensionAttribute]
public static Uri ConvertToSchemaUri(SarifVersionVersionOne sarifVersion);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public enum Microsoft.CodeAnalysis.Sarif.SarifVersion : Enum {
    public int value__;
    public static SarifVersion Unknown;
    public static SarifVersion OneZeroZero;
    public static SarifVersion Current;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Microsoft.CodeAnalysis.Sarif.SdkResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string AnnotatedCodeLocationIdMustBePositive { get; }
    public static string CallGenericGetProperty { get; }
    public static string CannotProvideVersionControlDetails { get; }
    public static string CannotWriteResultToolMissing { get; }
    public static string ComputeFileHashes_ReplaceInsertHashes { get; }
    public static string EnvironmentVariable_Additive_Format { get; }
    public static string ERR1000_ParseError { get; }
    public static string ERR997_AllRulesExplicitlyDisabled { get; }
    public static string ERR997_ErrorPostingLogFile { get; }
    public static string ERR997_ExceptionAccessingFile { get; }
    public static string ERR997_ExceptionCreatingOutputFile { get; }
    public static string ERR997_ExceptionInstantiatingSkimmers { get; }
    public static string ERR997_ExceptionLoadingAnalysisTarget { get; }
    public static string ERR997_ExceptionLoadingPlugIn { get; }
    public static string ERR997_FileAlreadyExists { get; }
    public static string ERR997_IncompatibleRulesDetected { get; }
    public static string ERR997_InvalidInvocationPropertyName { get; }
    public static string ERR997_MissingCommandlineArgument { get; }
    public static string ERR997_MissingFile { get; }
    public static string ERR997_MissingReportingConfiguration { get; }
    public static string ERR997_NoPluginsConfigured { get; }
    public static string ERR997_NoRulesLoaded { get; }
    public static string ERR997_NoValidAnalysisTargets { get; }
    public static string ERR998_ExceptionInAnalyze { get; }
    public static string ERR998_ExceptionInCanAnalyze { get; }
    public static string ERR998_ExceptionInInitialize { get; }
    public static string ERR999_AnalysisCanceled { get; }
    public static string ERR999_AnalysisTimedOut { get; }
    public static string ERR999_UnhandledEngineException { get; }
    public static string ErrorInvalidQueryPropertyName { get; }
    public static string ErrorInvalidQueryPropertyPrefix { get; }
    public static string GitHelperDefaultInstanceDoesNotPermitCaching { get; }
    public static string InvalidParentXml { get; }
    public static string InvalidState { get; }
    public static string LineNumberWasOutOfRange { get; }
    public static string MSG_AnalysisCompletedSuccessfully { get; }
    public static string MSG_Analyzing { get; }
    public static string MSG_OneOrMoreInvalidTargets { get; }
    public static string MSG_OneOrMoreNotApplicable { get; }
    public static string MSG_UnexpectedApplicationExit { get; }
    public static string MSG001_AnalyzingTarget { get; }
    public static string MSG001_TargetAnalyzed { get; }
    public static string MSG002_EmptyFileSkipped { get; }
    public static string MSG002_EmptyFileSkipped1 { get; }
    public static string MSG002_FileExceedingSizeLimitSkipped { get; }
    public static string MSG002_FileSkipped { get; }
    public static string NotApplicable_InvalidMetadata { get; }
    public static string NotificationWithExceptionMessage { get; }
    public static string PartioningVisitHappensAtSarifLogLevel { get; }
    public static string PropertyDoesNotExist { get; }
    public static string PropertyOfValueTypeCannotBeNull { get; }
    public static string ResultRuleIdDoesNotMatchRule { get; }
    public static string ResultsSerializationNotComplete { get; }
    public static string RunAlreadyWritten { get; }
    public static string ToolAlreadyWritten { get; }
    public static string UnexpectedFatalRuntimeConditions { get; }
    public static string ValueCannotBeNegative { get; }
    public static string ValueMustBeAtLeastOne { get; }
    public static string WRN997_InvalidOption { get; }
    public static string WRN997_InvalidTarget { get; }
    public static string WRN997_ObsoleteOption { get; }
    public static string WRN997_ObsoleteOptionWithReplacement { get; }
    public static string WRN997_OneOrMoreFilesSkipped { get; }
    public static string WRN997_OneOrMoreFilesSkippedDueToExceedingSizeLimit { get; }
    public static string WRN998_NotSupportedPlatform { get; }
    public static string WRN999_RuleExplicitlyDisabled { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_AnnotatedCodeLocationIdMustBePositive();
    public static string get_CallGenericGetProperty();
    public static string get_CannotProvideVersionControlDetails();
    public static string get_CannotWriteResultToolMissing();
    public static string get_ComputeFileHashes_ReplaceInsertHashes();
    public static string get_EnvironmentVariable_Additive_Format();
    public static string get_ERR1000_ParseError();
    public static string get_ERR997_AllRulesExplicitlyDisabled();
    public static string get_ERR997_ErrorPostingLogFile();
    public static string get_ERR997_ExceptionAccessingFile();
    public static string get_ERR997_ExceptionCreatingOutputFile();
    public static string get_ERR997_ExceptionInstantiatingSkimmers();
    public static string get_ERR997_ExceptionLoadingAnalysisTarget();
    public static string get_ERR997_ExceptionLoadingPlugIn();
    public static string get_ERR997_FileAlreadyExists();
    public static string get_ERR997_IncompatibleRulesDetected();
    public static string get_ERR997_InvalidInvocationPropertyName();
    public static string get_ERR997_MissingCommandlineArgument();
    public static string get_ERR997_MissingFile();
    public static string get_ERR997_MissingReportingConfiguration();
    public static string get_ERR997_NoPluginsConfigured();
    public static string get_ERR997_NoRulesLoaded();
    public static string get_ERR997_NoValidAnalysisTargets();
    public static string get_ERR998_ExceptionInAnalyze();
    public static string get_ERR998_ExceptionInCanAnalyze();
    public static string get_ERR998_ExceptionInInitialize();
    public static string get_ERR999_AnalysisCanceled();
    public static string get_ERR999_AnalysisTimedOut();
    public static string get_ERR999_UnhandledEngineException();
    public static string get_ErrorInvalidQueryPropertyName();
    public static string get_ErrorInvalidQueryPropertyPrefix();
    public static string get_GitHelperDefaultInstanceDoesNotPermitCaching();
    public static string get_InvalidParentXml();
    public static string get_InvalidState();
    public static string get_LineNumberWasOutOfRange();
    public static string get_MSG_AnalysisCompletedSuccessfully();
    public static string get_MSG_Analyzing();
    public static string get_MSG_OneOrMoreInvalidTargets();
    public static string get_MSG_OneOrMoreNotApplicable();
    public static string get_MSG_UnexpectedApplicationExit();
    public static string get_MSG001_AnalyzingTarget();
    public static string get_MSG001_TargetAnalyzed();
    public static string get_MSG002_EmptyFileSkipped();
    public static string get_MSG002_EmptyFileSkipped1();
    public static string get_MSG002_FileExceedingSizeLimitSkipped();
    public static string get_MSG002_FileSkipped();
    public static string get_NotApplicable_InvalidMetadata();
    public static string get_NotificationWithExceptionMessage();
    public static string get_PartioningVisitHappensAtSarifLogLevel();
    public static string get_PropertyDoesNotExist();
    public static string get_PropertyOfValueTypeCannotBeNull();
    public static string get_ResultRuleIdDoesNotMatchRule();
    public static string get_ResultsSerializationNotComplete();
    public static string get_RunAlreadyWritten();
    public static string get_ToolAlreadyWritten();
    public static string get_UnexpectedFatalRuntimeConditions();
    public static string get_ValueCannotBeNegative();
    public static string get_ValueMustBeAtLeastOne();
    public static string get_WRN997_InvalidOption();
    public static string get_WRN997_InvalidTarget();
    public static string get_WRN997_ObsoleteOption();
    public static string get_WRN997_ObsoleteOptionWithReplacement();
    public static string get_WRN997_OneOrMoreFilesSkipped();
    public static string get_WRN997_OneOrMoreFilesSkippedDueToExceedingSizeLimit();
    public static string get_WRN998_NotSupportedPlatform();
    public static string get_WRN999_RuleExplicitlyDisabled();
}
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.SerializedPropertyInfoConverter")]
public class Microsoft.CodeAnalysis.Sarif.SerializedPropertyInfo : object {
    [CompilerGeneratedAttribute]
private string <SerializedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsString>k__BackingField;
    private static int HashCodeSeedValue;
    private static int HashCodeCombiningValue;
    public static IEqualityComparer`1<SerializedPropertyInfo> ValueComparer { get; }
    public static IComparer`1<SerializedPropertyInfo> Comparer { get; }
    public string SerializedValue { get; }
    public bool IsString { get; }
    public SerializedPropertyInfo(string serializedValue, bool isString);
    public static IEqualityComparer`1<SerializedPropertyInfo> get_ValueComparer();
    public static IComparer`1<SerializedPropertyInfo> get_Comparer();
    public int ValueGetHashCode();
    [CompilerGeneratedAttribute]
public string get_SerializedValue();
    [CompilerGeneratedAttribute]
public bool get_IsString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool Equals(SerializedPropertyInfo other);
}
internal class Microsoft.CodeAnalysis.Sarif.SerializedPropertyInfoComparer : object {
    internal static SerializedPropertyInfoComparer Instance;
    private static SerializedPropertyInfoComparer();
    public sealed virtual int Compare(SerializedPropertyInfo left, SerializedPropertyInfo right);
}
public class Microsoft.CodeAnalysis.Sarif.SerializedPropertyInfoConverter : JsonConverter {
    public static SerializedPropertyInfo Read(JsonReader reader);
    public static void Write(JsonWriter writer, SerializedPropertyInfo value);
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
internal class Microsoft.CodeAnalysis.Sarif.SerializedPropertyInfoEqualityComparer : object {
    internal static SerializedPropertyInfoEqualityComparer Instance;
    private static SerializedPropertyInfoEqualityComparer();
    public sealed virtual bool Equals(SerializedPropertyInfo left, SerializedPropertyInfo right);
    public sealed virtual int GetHashCode(SerializedPropertyInfo serializedPropertyInfo);
}
public class Microsoft.CodeAnalysis.Sarif.SinglethreadedZipArchiveArtifactProvider : ArtifactProvider {
    public SinglethreadedZipArchiveArtifactProvider(ZipArchive zipArchive, IFileSystem fileSystem);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.SpecialLocations : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private ArtifactLocation <DisplayBase>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<SpecialLocations> ValueComparer { get; }
    public static IComparer`1<SpecialLocations> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public ArtifactLocation DisplayBase { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public SpecialLocations(ArtifactLocation displayBase, IDictionary`2<string, SerializedPropertyInfo> properties);
    public SpecialLocations(SpecialLocations other);
    public static IEqualityComparer`1<SpecialLocations> get_ValueComparer();
    public bool ValueEquals(SpecialLocations other);
    public int ValueGetHashCode();
    public static IComparer`1<SpecialLocations> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual ArtifactLocation get_DisplayBase();
    [CompilerGeneratedAttribute]
public virtual void set_DisplayBase(ArtifactLocation value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual SpecialLocations DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(ArtifactLocation displayBase, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.SpecialLocationsComparer : object {
    internal static SpecialLocationsComparer Instance;
    private static SpecialLocationsComparer();
    public sealed virtual int Compare(SpecialLocations left, SpecialLocations right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.SpecialLocationsEqualityComparer : object {
    internal static SpecialLocationsEqualityComparer Instance;
    private static SpecialLocationsEqualityComparer();
    public sealed virtual bool Equals(SpecialLocations left, SpecialLocations right);
    public sealed virtual int GetHashCode(SpecialLocations obj);
}
public enum Microsoft.CodeAnalysis.Sarif.SplittingStrategy : Enum {
    public int value__;
    public static SplittingStrategy None;
    public static SplittingStrategy PerRun;
    public static SplittingStrategy PerResult;
    public static SplittingStrategy PerRule;
    public static SplittingStrategy PerRunPerRule;
    public static SplittingStrategy PerRunPerTargetPerRule;
    public static SplittingStrategy PerRunPerTarget;
    public static SplittingStrategy PerRunPerOrgPerEntityTypePerPartialFingerprint;
    public static SplittingStrategy PerRunPerOrgPerEntityTypePerRepositoryPerPartialFingerprint;
    public static SplittingStrategy PerFingerprint;
    public static SplittingStrategy PerPropertyBagProperty;
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.Stack : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private Message <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<StackFrame> <Frames>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<Stack> ValueComparer { get; }
    public static IComparer`1<Stack> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public Message Message { get; public set; }
    [DataMemberAttribute]
public IList`1<StackFrame> Frames { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public Stack(Message message, IEnumerable`1<StackFrame> frames, IDictionary`2<string, SerializedPropertyInfo> properties);
    public Stack(Stack other);
    public Stack(StackTrace stackTrace);
    public static IEqualityComparer`1<Stack> get_ValueComparer();
    public bool ValueEquals(Stack other);
    public int ValueGetHashCode();
    public static IComparer`1<Stack> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual Message get_Message();
    [CompilerGeneratedAttribute]
public virtual void set_Message(Message value);
    [CompilerGeneratedAttribute]
public virtual IList`1<StackFrame> get_Frames();
    [CompilerGeneratedAttribute]
public virtual void set_Frames(IList`1<StackFrame> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual Stack DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(Message message, IEnumerable`1<StackFrame> frames, IDictionary`2<string, SerializedPropertyInfo> properties);
    public static ISet`1<Stack> CreateStacks(Exception exception);
    public static Stack Create(string stackTrace);
    public virtual string ToString();
    public string ToString(StackFormat stackFormat);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.StackComparer : object {
    internal static StackComparer Instance;
    private static StackComparer();
    public sealed virtual int Compare(Stack left, Stack right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.StackEqualityComparer : object {
    internal static StackEqualityComparer Instance;
    private static StackEqualityComparer();
    public sealed virtual bool Equals(Stack left, Stack right);
    public sealed virtual int GetHashCode(Stack obj);
}
public enum Microsoft.CodeAnalysis.Sarif.StackFormat : Enum {
    public int value__;
    public static StackFormat Default;
    public static StackFormat TrailingNewLine;
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.StackFrame : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Module>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    internal static string IN;
    internal static string AT;
    internal static string LINE;
    public static IEqualityComparer`1<StackFrame> ValueComparer { get; }
    public static IComparer`1<StackFrame> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public Location Location { get; public set; }
    [DataMemberAttribute]
public string Module { get; public set; }
    [DataMemberAttribute]
public int ThreadId { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<string> Parameters { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public StackFrame(Location location, string module, int threadId, IEnumerable`1<string> parameters, IDictionary`2<string, SerializedPropertyInfo> properties);
    public StackFrame(StackFrame other);
    public static IEqualityComparer`1<StackFrame> get_ValueComparer();
    public bool ValueEquals(StackFrame other);
    public int ValueGetHashCode();
    public static IComparer`1<StackFrame> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual Location get_Location();
    [CompilerGeneratedAttribute]
public virtual void set_Location(Location value);
    [CompilerGeneratedAttribute]
public virtual string get_Module();
    [CompilerGeneratedAttribute]
public virtual void set_Module(string value);
    [CompilerGeneratedAttribute]
public virtual int get_ThreadId();
    [CompilerGeneratedAttribute]
public virtual void set_ThreadId(int value);
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_Parameters();
    [CompilerGeneratedAttribute]
public virtual void set_Parameters(IList`1<string> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual StackFrame DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(Location location, string module, int threadId, IEnumerable`1<string> parameters, IDictionary`2<string, SerializedPropertyInfo> properties);
    public static StackFrame Create(StackFrame dotNetStackFrame);
    public virtual string ToString();
    private static string CreateFullyQualifiedName(MethodBase methodBase);
    public bool ShouldSerializeParameters();
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.StackFrameComparer : object {
    internal static StackFrameComparer Instance;
    private static StackFrameComparer();
    public sealed virtual int Compare(StackFrame left, StackFrame right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.StackFrameEqualityComparer : object {
    internal static StackFrameEqualityComparer Instance;
    private static StackFrameEqualityComparer();
    public sealed virtual bool Equals(StackFrame left, StackFrame right);
    public sealed virtual int GetHashCode(StackFrame obj);
}
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionaryConverter")]
public class Microsoft.CodeAnalysis.Sarif.StringSet : HashSet`1<string> {
    public StringSet(IEnumerable`1<string> strings);
    protected StringSet(SerializationInfo info, StreamingContext context);
}
public class Microsoft.CodeAnalysis.Sarif.StringToVersionMap : TypedPropertiesDictionary`1<Version> {
}
[FlagsAttribute]
public enum Microsoft.CodeAnalysis.Sarif.SupportedPlatform : Enum {
    public int value__;
    public static SupportedPlatform Unknown;
    public static SupportedPlatform Windows;
    public static SupportedPlatform Linux;
    public static SupportedPlatform OSX;
    public static SupportedPlatform All;
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.Suppression : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private SuppressionKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private SuppressionStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Justification>k__BackingField;
    [CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<Suppression> ValueComparer { get; }
    public static IComparer`1<Suppression> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public Nullable`1<Guid> Guid { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.EnumConverter")]
public SuppressionKind Kind { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.EnumConverter")]
public SuppressionStatus Status { get; public set; }
    [DataMemberAttribute]
public string Justification { get; public set; }
    [DataMemberAttribute]
public Location Location { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public Suppression(Nullable`1<Guid> guid, SuppressionKind kind, SuppressionStatus status, string justification, Location location, IDictionary`2<string, SerializedPropertyInfo> properties);
    public Suppression(Suppression other);
    public static IEqualityComparer`1<Suppression> get_ValueComparer();
    public bool ValueEquals(Suppression other);
    public int ValueGetHashCode();
    public static IComparer`1<Suppression> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_Guid();
    [CompilerGeneratedAttribute]
public virtual void set_Guid(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual SuppressionKind get_Kind();
    [CompilerGeneratedAttribute]
public virtual void set_Kind(SuppressionKind value);
    [CompilerGeneratedAttribute]
public virtual SuppressionStatus get_Status();
    [CompilerGeneratedAttribute]
public virtual void set_Status(SuppressionStatus value);
    [CompilerGeneratedAttribute]
public virtual string get_Justification();
    [CompilerGeneratedAttribute]
public virtual void set_Justification(string value);
    [CompilerGeneratedAttribute]
public virtual Location get_Location();
    [CompilerGeneratedAttribute]
public virtual void set_Location(Location value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual Suppression DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(Nullable`1<Guid> guid, SuppressionKind kind, SuppressionStatus status, string justification, Location location, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.SuppressionComparer : object {
    internal static SuppressionComparer Instance;
    private static SuppressionComparer();
    public sealed virtual int Compare(Suppression left, Suppression right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.SuppressionEqualityComparer : object {
    internal static SuppressionEqualityComparer Instance;
    private static SuppressionEqualityComparer();
    public sealed virtual bool Equals(Suppression left, Suppression right);
    public sealed virtual int GetHashCode(Suppression obj);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public enum Microsoft.CodeAnalysis.Sarif.SuppressionKind : Enum {
    public int value__;
    public static SuppressionKind None;
    public static SuppressionKind InSource;
    public static SuppressionKind External;
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public enum Microsoft.CodeAnalysis.Sarif.SuppressionStatus : Enum {
    public int value__;
    public static SuppressionStatus None;
    public static SuppressionStatus Accepted;
    public static SuppressionStatus UnderReview;
    public static SuppressionStatus Rejected;
}
public class Microsoft.CodeAnalysis.Sarif.TagsCollection : object {
    internal static string TagsPropertyName;
    private static ISet`1<string> Empty;
    private IPropertyBagHolder _propertyBagHolder;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public TagsCollection(IPropertyBagHolder propertyBagHolder);
    private static TagsCollection();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Add(string item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(string item);
    public sealed virtual void CopyTo(String[] array, int arrayIndex);
    public sealed virtual void ExceptWith(IEnumerable`1<string> other);
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    public sealed virtual void IntersectWith(IEnumerable`1<string> other);
    public sealed virtual bool IsProperSubsetOf(IEnumerable`1<string> other);
    public sealed virtual bool IsProperSupersetOf(IEnumerable`1<string> other);
    public sealed virtual bool IsSubsetOf(IEnumerable`1<string> other);
    public sealed virtual bool IsSupersetOf(IEnumerable`1<string> other);
    public sealed virtual bool Overlaps(IEnumerable`1<string> other);
    public sealed virtual bool Remove(string item);
    public sealed virtual bool SetEquals(IEnumerable`1<string> other);
    public sealed virtual void SymmetricExceptWith(IEnumerable`1<string> other);
    public sealed virtual void UnionWith(IEnumerable`1<string> other);
    private sealed virtual override void System.Collections.Generic.ICollection<System.String>.Add(string item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private ISet`1<string> GetTags();
    private void SetTags(IEnumerable`1<string> tags);
    private bool AddCore(string item);
    private IEnumerator`1<string> GetEnumeratorCore();
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.ThreadFlow : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Message <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private object <InitialState>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ImmutableState>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ThreadFlowLocation> <Locations>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<ThreadFlow> ValueComparer { get; }
    public static IComparer`1<ThreadFlow> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public Message Message { get; public set; }
    [DataMemberAttribute]
public object InitialState { get; public set; }
    [DataMemberAttribute]
public object ImmutableState { get; public set; }
    [DataMemberAttribute]
public IList`1<ThreadFlowLocation> Locations { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public ThreadFlow(string id, Message message, object initialState, object immutableState, IEnumerable`1<ThreadFlowLocation> locations, IDictionary`2<string, SerializedPropertyInfo> properties);
    public ThreadFlow(ThreadFlow other);
    public static IEqualityComparer`1<ThreadFlow> get_ValueComparer();
    public bool ValueEquals(ThreadFlow other);
    public int ValueGetHashCode();
    public static IComparer`1<ThreadFlow> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual string get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(string value);
    [CompilerGeneratedAttribute]
public virtual Message get_Message();
    [CompilerGeneratedAttribute]
public virtual void set_Message(Message value);
    [CompilerGeneratedAttribute]
public virtual object get_InitialState();
    [CompilerGeneratedAttribute]
public virtual void set_InitialState(object value);
    [CompilerGeneratedAttribute]
public virtual object get_ImmutableState();
    [CompilerGeneratedAttribute]
public virtual void set_ImmutableState(object value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ThreadFlowLocation> get_Locations();
    [CompilerGeneratedAttribute]
public virtual void set_Locations(IList`1<ThreadFlowLocation> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual ThreadFlow DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(string id, Message message, object initialState, object immutableState, IEnumerable`1<ThreadFlowLocation> locations, IDictionary`2<string, SerializedPropertyInfo> properties);
    public bool ShouldSerializeLocations();
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ThreadFlowComparer : object {
    internal static ThreadFlowComparer Instance;
    private static ThreadFlowComparer();
    public sealed virtual int Compare(ThreadFlow left, ThreadFlow right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ThreadFlowEqualityComparer : object {
    internal static ThreadFlowEqualityComparer Instance;
    private static ThreadFlowEqualityComparer();
    public sealed virtual bool Equals(ThreadFlow left, ThreadFlow right);
    public sealed virtual int GetHashCode(ThreadFlow obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.ThreadFlowLocation : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private Stack <Stack>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Kinds>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ReportingDescriptorReference> <Taxa>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Module>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, MultiformatMessageString> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NestingLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExecutionOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ExecutionTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private ThreadFlowLocationImportance <Importance>k__BackingField;
    [CompilerGeneratedAttribute]
private WebRequest <WebRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private WebResponse <WebResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<ThreadFlowLocation> ValueComparer { get; }
    public static IComparer`1<ThreadFlowLocation> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
[DefaultValueAttribute("-1")]
[JsonPropertyAttribute]
public int Index { get; public set; }
    [DataMemberAttribute]
public Location Location { get; public set; }
    [DataMemberAttribute]
public Stack Stack { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<string> Kinds { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ReportingDescriptorReference> Taxa { get; public set; }
    [DataMemberAttribute]
public string Module { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, MultiformatMessageString> State { get; public set; }
    [DataMemberAttribute]
public int NestingLevel { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("-1")]
[JsonPropertyAttribute]
public int ExecutionOrder { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.DateTimeConverter")]
public DateTime ExecutionTimeUtc { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[JsonPropertyAttribute]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.EnumConverter")]
public ThreadFlowLocationImportance Importance { get; public set; }
    [DataMemberAttribute]
public WebRequest WebRequest { get; public set; }
    [DataMemberAttribute]
public WebResponse WebResponse { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public ThreadFlowLocation(int index, Location location, Stack stack, IEnumerable`1<string> kinds, IEnumerable`1<ReportingDescriptorReference> taxa, string module, IDictionary`2<string, MultiformatMessageString> state, int nestingLevel, int executionOrder, DateTime executionTimeUtc, ThreadFlowLocationImportance importance, WebRequest webRequest, WebResponse webResponse, IDictionary`2<string, SerializedPropertyInfo> properties);
    public ThreadFlowLocation(ThreadFlowLocation other);
    public static IEqualityComparer`1<ThreadFlowLocation> get_ValueComparer();
    public bool ValueEquals(ThreadFlowLocation other);
    public int ValueGetHashCode();
    public static IComparer`1<ThreadFlowLocation> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual int get_Index();
    [CompilerGeneratedAttribute]
public virtual void set_Index(int value);
    [CompilerGeneratedAttribute]
public virtual Location get_Location();
    [CompilerGeneratedAttribute]
public virtual void set_Location(Location value);
    [CompilerGeneratedAttribute]
public virtual Stack get_Stack();
    [CompilerGeneratedAttribute]
public virtual void set_Stack(Stack value);
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_Kinds();
    [CompilerGeneratedAttribute]
public virtual void set_Kinds(IList`1<string> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ReportingDescriptorReference> get_Taxa();
    [CompilerGeneratedAttribute]
public virtual void set_Taxa(IList`1<ReportingDescriptorReference> value);
    [CompilerGeneratedAttribute]
public virtual string get_Module();
    [CompilerGeneratedAttribute]
public virtual void set_Module(string value);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, MultiformatMessageString> get_State();
    [CompilerGeneratedAttribute]
public virtual void set_State(IDictionary`2<string, MultiformatMessageString> value);
    [CompilerGeneratedAttribute]
public virtual int get_NestingLevel();
    [CompilerGeneratedAttribute]
public virtual void set_NestingLevel(int value);
    [CompilerGeneratedAttribute]
public virtual int get_ExecutionOrder();
    [CompilerGeneratedAttribute]
public virtual void set_ExecutionOrder(int value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_ExecutionTimeUtc();
    [CompilerGeneratedAttribute]
public virtual void set_ExecutionTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public virtual ThreadFlowLocationImportance get_Importance();
    [CompilerGeneratedAttribute]
public virtual void set_Importance(ThreadFlowLocationImportance value);
    [CompilerGeneratedAttribute]
public virtual WebRequest get_WebRequest();
    [CompilerGeneratedAttribute]
public virtual void set_WebRequest(WebRequest value);
    [CompilerGeneratedAttribute]
public virtual WebResponse get_WebResponse();
    [CompilerGeneratedAttribute]
public virtual void set_WebResponse(WebResponse value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual ThreadFlowLocation DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(int index, Location location, Stack stack, IEnumerable`1<string> kinds, IEnumerable`1<ReportingDescriptorReference> taxa, string module, IDictionary`2<string, MultiformatMessageString> state, int nestingLevel, int executionOrder, DateTime executionTimeUtc, ThreadFlowLocationImportance importance, WebRequest webRequest, WebResponse webResponse, IDictionary`2<string, SerializedPropertyInfo> properties);
    public bool ShouldSerializeKinds();
    public bool ShouldSerializeTaxa();
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ThreadFlowLocationComparer : object {
    internal static ThreadFlowLocationComparer Instance;
    private static ThreadFlowLocationComparer();
    public sealed virtual int Compare(ThreadFlowLocation left, ThreadFlowLocation right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ThreadFlowLocationEqualityComparer : object {
    internal static ThreadFlowLocationEqualityComparer Instance;
    private static ThreadFlowLocationEqualityComparer();
    public sealed virtual bool Equals(ThreadFlowLocation left, ThreadFlowLocation right);
    public sealed virtual int GetHashCode(ThreadFlowLocation obj);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public enum Microsoft.CodeAnalysis.Sarif.ThreadFlowLocationImportance : Enum {
    public int value__;
    public static ThreadFlowLocationImportance Important;
    public static ThreadFlowLocationImportance Essential;
    public static ThreadFlowLocationImportance Unimportant;
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.Tool : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private ToolComponent <Driver>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ToolComponent> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    private static string DottedQuadFileVersionPattern;
    private static Regex dottedQuadFileVersionRegex;
    public static IEqualityComparer`1<Tool> ValueComparer { get; }
    public static IComparer`1<Tool> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public ToolComponent Driver { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ToolComponent> Extensions { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public Tool(ToolComponent driver, IEnumerable`1<ToolComponent> extensions, IDictionary`2<string, SerializedPropertyInfo> properties);
    public Tool(Tool other);
    private static Tool();
    public static IEqualityComparer`1<Tool> get_ValueComparer();
    public bool ValueEquals(Tool other);
    public int ValueGetHashCode();
    public static IComparer`1<Tool> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual ToolComponent get_Driver();
    [CompilerGeneratedAttribute]
public virtual void set_Driver(ToolComponent value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ToolComponent> get_Extensions();
    [CompilerGeneratedAttribute]
public virtual void set_Extensions(IList`1<ToolComponent> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual Tool DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(ToolComponent driver, IEnumerable`1<ToolComponent> extensions, IDictionary`2<string, SerializedPropertyInfo> properties);
    public static Tool CreateFromAssemblyData(Assembly assembly, bool omitSemanticVersion, IFileSystem fileSystem);
    internal static string ParseFileVersion(string fileVersion);
    private static void SetDriverPropertiesFromFileVersionInfo(ToolComponent driver, FileVersionInfo fileVersion);
    public ToolComponent GetToolComponentFromReference(ToolComponentReference reference);
    public bool ShouldSerializeExtensions();
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ToolComparer : object {
    internal static ToolComparer Instance;
    private static ToolComparer();
    public sealed virtual int Compare(Tool left, Tool right);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.ToolComponent : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Organization>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Product>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductSuite>k__BackingField;
    [CompilerGeneratedAttribute]
private MultiformatMessageString <ShortDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private MultiformatMessageString <FullDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SemanticVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DottedQuadFileVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReleaseDateUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <DownloadUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <InformationUri>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, MultiformatMessageString> <GlobalMessageStrings>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ReportingDescriptor> <Notifications>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ReportingDescriptor> <Rules>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ReportingDescriptor> <Taxa>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ArtifactLocation> <Locations>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolComponentContents <Contents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsComprehensive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalizedDataSemanticVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinimumRequiredLocalizedDataSemanticVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolComponentReference <AssociatedComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private TranslationMetadata <TranslationMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ToolComponentReference> <SupportedTaxonomies>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    private Dictionary`2<string, ReportingDescriptor> _cachedRulesById;
    private Dictionary`2<Guid, ReportingDescriptor> _cachedRulesByGuid;
    public static IEqualityComparer`1<ToolComponent> ValueComparer { get; }
    public static IComparer`1<ToolComponent> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public Nullable`1<Guid> Guid { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Organization { get; public set; }
    [DataMemberAttribute]
public string Product { get; public set; }
    [DataMemberAttribute]
public string ProductSuite { get; public set; }
    [DataMemberAttribute]
public MultiformatMessageString ShortDescription { get; public set; }
    [DataMemberAttribute]
public MultiformatMessageString FullDescription { get; public set; }
    [DataMemberAttribute]
public string FullName { get; public set; }
    [DataMemberAttribute]
public string Version { get; public set; }
    [DataMemberAttribute]
public string SemanticVersion { get; public set; }
    [DataMemberAttribute]
public string DottedQuadFileVersion { get; public set; }
    [DataMemberAttribute]
public string ReleaseDateUtc { get; public set; }
    [DataMemberAttribute]
public Uri DownloadUri { get; public set; }
    [DataMemberAttribute]
public Uri InformationUri { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, MultiformatMessageString> GlobalMessageStrings { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ReportingDescriptor> Notifications { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ReportingDescriptor> Rules { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ReportingDescriptor> Taxa { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ArtifactLocation> Locations { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("en-US")]
[JsonPropertyAttribute]
public string Language { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.FlagsEnumConverter")]
public ToolComponentContents Contents { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("False")]
[JsonPropertyAttribute]
public bool IsComprehensive { get; public set; }
    [DataMemberAttribute]
public string LocalizedDataSemanticVersion { get; public set; }
    [DataMemberAttribute]
public string MinimumRequiredLocalizedDataSemanticVersion { get; public set; }
    [DataMemberAttribute]
public ToolComponentReference AssociatedComponent { get; public set; }
    [DataMemberAttribute]
public TranslationMetadata TranslationMetadata { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IList`1<ToolComponentReference> SupportedTaxonomies { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public ToolComponent(Nullable`1<Guid> guid, string name, string organization, string product, string productSuite, MultiformatMessageString shortDescription, MultiformatMessageString fullDescription, string fullName, string version, string semanticVersion, string dottedQuadFileVersion, string releaseDateUtc, Uri downloadUri, Uri informationUri, IDictionary`2<string, MultiformatMessageString> globalMessageStrings, IEnumerable`1<ReportingDescriptor> notifications, IEnumerable`1<ReportingDescriptor> rules, IEnumerable`1<ReportingDescriptor> taxa, IEnumerable`1<ArtifactLocation> locations, string language, ToolComponentContents contents, bool isComprehensive, string localizedDataSemanticVersion, string minimumRequiredLocalizedDataSemanticVersion, ToolComponentReference associatedComponent, TranslationMetadata translationMetadata, IEnumerable`1<ToolComponentReference> supportedTaxonomies, IDictionary`2<string, SerializedPropertyInfo> properties);
    public ToolComponent(ToolComponent other);
    public static IEqualityComparer`1<ToolComponent> get_ValueComparer();
    public bool ValueEquals(ToolComponent other);
    public int ValueGetHashCode();
    public static IComparer`1<ToolComponent> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_Guid();
    [CompilerGeneratedAttribute]
public virtual void set_Guid(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Organization();
    [CompilerGeneratedAttribute]
public virtual void set_Organization(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Product();
    [CompilerGeneratedAttribute]
public virtual void set_Product(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ProductSuite();
    [CompilerGeneratedAttribute]
public virtual void set_ProductSuite(string value);
    [CompilerGeneratedAttribute]
public virtual MultiformatMessageString get_ShortDescription();
    [CompilerGeneratedAttribute]
public virtual void set_ShortDescription(MultiformatMessageString value);
    [CompilerGeneratedAttribute]
public virtual MultiformatMessageString get_FullDescription();
    [CompilerGeneratedAttribute]
public virtual void set_FullDescription(MultiformatMessageString value);
    [CompilerGeneratedAttribute]
public virtual string get_FullName();
    [CompilerGeneratedAttribute]
public virtual void set_FullName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Version();
    [CompilerGeneratedAttribute]
public virtual void set_Version(string value);
    [CompilerGeneratedAttribute]
public virtual string get_SemanticVersion();
    [CompilerGeneratedAttribute]
public virtual void set_SemanticVersion(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DottedQuadFileVersion();
    [CompilerGeneratedAttribute]
public virtual void set_DottedQuadFileVersion(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ReleaseDateUtc();
    [CompilerGeneratedAttribute]
public virtual void set_ReleaseDateUtc(string value);
    [CompilerGeneratedAttribute]
public virtual Uri get_DownloadUri();
    [CompilerGeneratedAttribute]
public virtual void set_DownloadUri(Uri value);
    [CompilerGeneratedAttribute]
public virtual Uri get_InformationUri();
    [CompilerGeneratedAttribute]
public virtual void set_InformationUri(Uri value);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, MultiformatMessageString> get_GlobalMessageStrings();
    [CompilerGeneratedAttribute]
public virtual void set_GlobalMessageStrings(IDictionary`2<string, MultiformatMessageString> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ReportingDescriptor> get_Notifications();
    [CompilerGeneratedAttribute]
public virtual void set_Notifications(IList`1<ReportingDescriptor> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ReportingDescriptor> get_Rules();
    [CompilerGeneratedAttribute]
public virtual void set_Rules(IList`1<ReportingDescriptor> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ReportingDescriptor> get_Taxa();
    [CompilerGeneratedAttribute]
public virtual void set_Taxa(IList`1<ReportingDescriptor> value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ArtifactLocation> get_Locations();
    [CompilerGeneratedAttribute]
public virtual void set_Locations(IList`1<ArtifactLocation> value);
    [CompilerGeneratedAttribute]
public virtual string get_Language();
    [CompilerGeneratedAttribute]
public virtual void set_Language(string value);
    [CompilerGeneratedAttribute]
public virtual ToolComponentContents get_Contents();
    [CompilerGeneratedAttribute]
public virtual void set_Contents(ToolComponentContents value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsComprehensive();
    [CompilerGeneratedAttribute]
public virtual void set_IsComprehensive(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_LocalizedDataSemanticVersion();
    [CompilerGeneratedAttribute]
public virtual void set_LocalizedDataSemanticVersion(string value);
    [CompilerGeneratedAttribute]
public virtual string get_MinimumRequiredLocalizedDataSemanticVersion();
    [CompilerGeneratedAttribute]
public virtual void set_MinimumRequiredLocalizedDataSemanticVersion(string value);
    [CompilerGeneratedAttribute]
public virtual ToolComponentReference get_AssociatedComponent();
    [CompilerGeneratedAttribute]
public virtual void set_AssociatedComponent(ToolComponentReference value);
    [CompilerGeneratedAttribute]
public virtual TranslationMetadata get_TranslationMetadata();
    [CompilerGeneratedAttribute]
public virtual void set_TranslationMetadata(TranslationMetadata value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ToolComponentReference> get_SupportedTaxonomies();
    [CompilerGeneratedAttribute]
public virtual void set_SupportedTaxonomies(IList`1<ToolComponentReference> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual ToolComponent DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(Nullable`1<Guid> guid, string name, string organization, string product, string productSuite, MultiformatMessageString shortDescription, MultiformatMessageString fullDescription, string fullName, string version, string semanticVersion, string dottedQuadFileVersion, string releaseDateUtc, Uri downloadUri, Uri informationUri, IDictionary`2<string, MultiformatMessageString> globalMessageStrings, IEnumerable`1<ReportingDescriptor> notifications, IEnumerable`1<ReportingDescriptor> rules, IEnumerable`1<ReportingDescriptor> taxa, IEnumerable`1<ArtifactLocation> locations, string language, ToolComponentContents contents, bool isComprehensive, string localizedDataSemanticVersion, string minimumRequiredLocalizedDataSemanticVersion, ToolComponentReference associatedComponent, TranslationMetadata translationMetadata, IEnumerable`1<ToolComponentReference> supportedTaxonomies, IDictionary`2<string, SerializedPropertyInfo> properties);
    private void BuildRuleCaches();
    public ReportingDescriptor GetRuleById(string ruleId);
    public ReportingDescriptor GetRuleByGuid(Guid ruleGuid);
    public bool ShouldSerializeGuid();
    public bool ShouldSerializeName();
    public bool ShouldSerializeRules();
    public bool ShouldSerializeNotifications();
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ToolComponentComparer : object {
    internal static ToolComponentComparer Instance;
    private static ToolComponentComparer();
    public sealed virtual int Compare(ToolComponent left, ToolComponent right);
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public enum Microsoft.CodeAnalysis.Sarif.ToolComponentContents : Enum {
    public int value__;
    public static ToolComponentContents None;
    public static ToolComponentContents LocalizedData;
    public static ToolComponentContents NonLocalizedData;
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ToolComponentEqualityComparer : object {
    internal static ToolComponentEqualityComparer Instance;
    private static ToolComponentEqualityComparer();
    public sealed virtual bool Equals(ToolComponent left, ToolComponent right);
    public sealed virtual int GetHashCode(ToolComponent obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.ToolComponentReference : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<ToolComponentReference> ValueComparer { get; }
    public static IComparer`1<ToolComponentReference> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("-1")]
[JsonPropertyAttribute]
public int Index { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Guid> Guid { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public ToolComponentReference(string name, int index, Nullable`1<Guid> guid, IDictionary`2<string, SerializedPropertyInfo> properties);
    public ToolComponentReference(ToolComponentReference other);
    public static IEqualityComparer`1<ToolComponentReference> get_ValueComparer();
    public bool ValueEquals(ToolComponentReference other);
    public int ValueGetHashCode();
    public static IComparer`1<ToolComponentReference> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual int get_Index();
    [CompilerGeneratedAttribute]
public virtual void set_Index(int value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_Guid();
    [CompilerGeneratedAttribute]
public virtual void set_Guid(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual ToolComponentReference DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(string name, int index, Nullable`1<Guid> guid, IDictionary`2<string, SerializedPropertyInfo> properties);
    public ToolComponent GetToolComponent(Run containingRun);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ToolComponentReferenceComparer : object {
    internal static ToolComponentReferenceComparer Instance;
    private static ToolComponentReferenceComparer();
    public sealed virtual int Compare(ToolComponentReference left, ToolComponentReference right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ToolComponentReferenceEqualityComparer : object {
    internal static ToolComponentReferenceEqualityComparer Instance;
    private static ToolComponentReferenceEqualityComparer();
    public sealed virtual bool Equals(ToolComponentReference left, ToolComponentReference right);
    public sealed virtual int GetHashCode(ToolComponentReference obj);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.ToolEqualityComparer : object {
    internal static ToolEqualityComparer Instance;
    private static ToolEqualityComparer();
    public sealed virtual bool Equals(Tool left, Tool right);
    public sealed virtual int GetHashCode(Tool obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.TranslationMetadata : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private MultiformatMessageString <ShortDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private MultiformatMessageString <FullDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <DownloadUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <InformationUri>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<TranslationMetadata> ValueComparer { get; }
    public static IComparer`1<TranslationMetadata> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string FullName { get; public set; }
    [DataMemberAttribute]
public MultiformatMessageString ShortDescription { get; public set; }
    [DataMemberAttribute]
public MultiformatMessageString FullDescription { get; public set; }
    [DataMemberAttribute]
public Uri DownloadUri { get; public set; }
    [DataMemberAttribute]
public Uri InformationUri { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public TranslationMetadata(string name, string fullName, MultiformatMessageString shortDescription, MultiformatMessageString fullDescription, Uri downloadUri, Uri informationUri, IDictionary`2<string, SerializedPropertyInfo> properties);
    public TranslationMetadata(TranslationMetadata other);
    public static IEqualityComparer`1<TranslationMetadata> get_ValueComparer();
    public bool ValueEquals(TranslationMetadata other);
    public int ValueGetHashCode();
    public static IComparer`1<TranslationMetadata> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_FullName();
    [CompilerGeneratedAttribute]
public virtual void set_FullName(string value);
    [CompilerGeneratedAttribute]
public virtual MultiformatMessageString get_ShortDescription();
    [CompilerGeneratedAttribute]
public virtual void set_ShortDescription(MultiformatMessageString value);
    [CompilerGeneratedAttribute]
public virtual MultiformatMessageString get_FullDescription();
    [CompilerGeneratedAttribute]
public virtual void set_FullDescription(MultiformatMessageString value);
    [CompilerGeneratedAttribute]
public virtual Uri get_DownloadUri();
    [CompilerGeneratedAttribute]
public virtual void set_DownloadUri(Uri value);
    [CompilerGeneratedAttribute]
public virtual Uri get_InformationUri();
    [CompilerGeneratedAttribute]
public virtual void set_InformationUri(Uri value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual TranslationMetadata DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(string name, string fullName, MultiformatMessageString shortDescription, MultiformatMessageString fullDescription, Uri downloadUri, Uri informationUri, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.TranslationMetadataComparer : object {
    internal static TranslationMetadataComparer Instance;
    private static TranslationMetadataComparer();
    public sealed virtual int Compare(TranslationMetadata left, TranslationMetadata right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.TranslationMetadataEqualityComparer : object {
    internal static TranslationMetadataEqualityComparer Instance;
    private static TranslationMetadataEqualityComparer();
    public sealed virtual bool Equals(TranslationMetadata left, TranslationMetadata right);
    public sealed virtual int GetHashCode(TranslationMetadata obj);
}
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionaryConverter")]
public class Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionary`1 : ConcurrentDictionary`2<string, T> {
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, string> <SettingNameToDescriptionsMap>k__BackingField;
    protected ConcurrentDictionary`2<string, string> SettingNameToDescriptionsMap { get; protected set; }
    public TypedPropertiesDictionary`1(PropertiesDictionary initializer, IEqualityComparer`1<string> comparer);
    public void Add(string key, T value);
    public void Remove(string key);
    [CompilerGeneratedAttribute]
protected ConcurrentDictionary`2<string, string> get_SettingNameToDescriptionsMap();
    [CompilerGeneratedAttribute]
protected void set_SettingNameToDescriptionsMap(ConcurrentDictionary`2<string, string> value);
    public virtual T GetProperty(PerLanguageOption`1<T> setting);
    public virtual T GetProperty(PerLanguageOption`1<T> setting, bool cacheDefault);
    public virtual void SetProperty(IOption setting, T value);
    public virtual void SetProperty(IOption setting, T value, bool cacheDescription);
}
public class Microsoft.CodeAnalysis.Sarif.TypedPropertiesDictionaryConverter : JsonConverter {
    private VersionConverter _versionConverter;
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public static class Microsoft.CodeAnalysis.Sarif.UriHelper : object {
    private static Regex s_oneDotPattern;
    private static Regex s_twoDotPattern;
    private static UriHelper();
    public static string MakeValidUri(string path);
    private static string GetLeadingDotSegments(string path);
}
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.Sarif.UriUtilities : object {
    public static string FileScheme;
    [ExtensionAttribute]
public static string WithColon(string scheme);
}
public static class Microsoft.CodeAnalysis.Sarif.VersionConstants : object {
    public static string SchemaVersionAsPublishedToSchemaStoreOrg;
    public static string StableSarifVersion;
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.VersionControlDetails : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private Uri <RepositoryUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RevisionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Branch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RevisionTag>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <AsOfTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private ArtifactLocation <MappedTo>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<VersionControlDetails> ValueComparer { get; }
    public static IComparer`1<VersionControlDetails> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.UriConverter")]
public Uri RepositoryUri { get; public set; }
    [DataMemberAttribute]
public string RevisionId { get; public set; }
    [DataMemberAttribute]
public string Branch { get; public set; }
    [DataMemberAttribute]
public string RevisionTag { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.DateTimeConverter")]
public DateTime AsOfTimeUtc { get; public set; }
    [DataMemberAttribute]
public ArtifactLocation MappedTo { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public VersionControlDetails(Uri repositoryUri, string revisionId, string branch, string revisionTag, DateTime asOfTimeUtc, ArtifactLocation mappedTo, IDictionary`2<string, SerializedPropertyInfo> properties);
    public VersionControlDetails(VersionControlDetails other);
    public static IEqualityComparer`1<VersionControlDetails> get_ValueComparer();
    public bool ValueEquals(VersionControlDetails other);
    public int ValueGetHashCode();
    public static IComparer`1<VersionControlDetails> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual Uri get_RepositoryUri();
    [CompilerGeneratedAttribute]
public virtual void set_RepositoryUri(Uri value);
    [CompilerGeneratedAttribute]
public virtual string get_RevisionId();
    [CompilerGeneratedAttribute]
public virtual void set_RevisionId(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Branch();
    [CompilerGeneratedAttribute]
public virtual void set_Branch(string value);
    [CompilerGeneratedAttribute]
public virtual string get_RevisionTag();
    [CompilerGeneratedAttribute]
public virtual void set_RevisionTag(string value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_AsOfTimeUtc();
    [CompilerGeneratedAttribute]
public virtual void set_AsOfTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public virtual ArtifactLocation get_MappedTo();
    [CompilerGeneratedAttribute]
public virtual void set_MappedTo(ArtifactLocation value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual VersionControlDetails DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(Uri repositoryUri, string revisionId, string branch, string revisionTag, DateTime asOfTimeUtc, ArtifactLocation mappedTo, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.VersionControlDetailsComparer : object {
    internal static VersionControlDetailsComparer Instance;
    private static VersionControlDetailsComparer();
    public sealed virtual int Compare(VersionControlDetails left, VersionControlDetails right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.VersionControlDetailsEqualityComparer : object {
    internal static VersionControlDetailsEqualityComparer Instance;
    private static VersionControlDetailsEqualityComparer();
    public sealed virtual bool Equals(VersionControlDetails left, VersionControlDetails right);
    public sealed virtual int GetHashCode(VersionControlDetails obj);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public enum Microsoft.CodeAnalysis.Sarif.VersionOne.AlgorithmKindVersionOne : Enum {
    public int value__;
    public static AlgorithmKindVersionOne Unknown;
    public static AlgorithmKindVersionOne Authentihash;
    public static AlgorithmKindVersionOne Blake256;
    public static AlgorithmKindVersionOne Blake512;
    public static AlgorithmKindVersionOne Ecoh;
    public static AlgorithmKindVersionOne Fsb;
    public static AlgorithmKindVersionOne Gost;
    public static AlgorithmKindVersionOne Groestl;
    public static AlgorithmKindVersionOne Has160;
    public static AlgorithmKindVersionOne Haval;
    public static AlgorithmKindVersionOne JH;
    public static AlgorithmKindVersionOne MD2;
    public static AlgorithmKindVersionOne MD4;
    public static AlgorithmKindVersionOne MD5;
    public static AlgorithmKindVersionOne MD6;
    public static AlgorithmKindVersionOne RadioGatun;
    public static AlgorithmKindVersionOne RipeMD;
    public static AlgorithmKindVersionOne RipeMD128;
    public static AlgorithmKindVersionOne RipeMD160;
    public static AlgorithmKindVersionOne RipeMD320;
    public static AlgorithmKindVersionOne Sdhash;
    public static AlgorithmKindVersionOne Sha1;
    public static AlgorithmKindVersionOne Sha224;
    public static AlgorithmKindVersionOne Sha256;
    public static AlgorithmKindVersionOne Sha384;
    public static AlgorithmKindVersionOne Sha512;
    public static AlgorithmKindVersionOne Sha3;
    public static AlgorithmKindVersionOne Skein;
    public static AlgorithmKindVersionOne Snefru;
    public static AlgorithmKindVersionOne SpectralHash;
    public static AlgorithmKindVersionOne Ssdeep;
    public static AlgorithmKindVersionOne Swifft;
    public static AlgorithmKindVersionOne Tiger;
    public static AlgorithmKindVersionOne Tlsh;
    public static AlgorithmKindVersionOne Whirlpool;
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public enum Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationImportanceVersionOne : Enum {
    public int value__;
    public static AnnotatedCodeLocationImportanceVersionOne Important;
    public static AnnotatedCodeLocationImportanceVersionOne Essential;
    public static AnnotatedCodeLocationImportanceVersionOne Unimportant;
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public enum Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationKindVersionOne : Enum {
    public int value__;
    public static AnnotatedCodeLocationKindVersionOne Unknown;
    public static AnnotatedCodeLocationKindVersionOne Alias;
    public static AnnotatedCodeLocationKindVersionOne Assignment;
    public static AnnotatedCodeLocationKindVersionOne Branch;
    public static AnnotatedCodeLocationKindVersionOne Call;
    public static AnnotatedCodeLocationKindVersionOne CallReturn;
    public static AnnotatedCodeLocationKindVersionOne Continuation;
    public static AnnotatedCodeLocationKindVersionOne Declaration;
    public static AnnotatedCodeLocationKindVersionOne FunctionEnter;
    public static AnnotatedCodeLocationKindVersionOne FunctionExit;
    public static AnnotatedCodeLocationKindVersionOne FunctionReturn;
    public static AnnotatedCodeLocationKindVersionOne Usage;
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public class Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOne : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Step>k__BackingField;
    [CompilerGeneratedAttribute]
private PhysicalLocationVersionOne <PhysicalLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullyQualifiedLogicalName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogicalLocationKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Module>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private AnnotatedCodeLocationKindVersionOne <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private TaintKindVersionOne <TaintKind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Essential>k__BackingField;
    [CompilerGeneratedAttribute]
private AnnotatedCodeLocationImportanceVersionOne <Importance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Snippet>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<AnnotationVersionOne> <Annotations>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<AnnotatedCodeLocationVersionOne> ValueComparer { get; }
    public SarifNodeKindVersionOne SarifNodeKindVersionOne { get; }
    [DataMemberAttribute]
[JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.VersionOne.Readers.AnnotatedCodeLocationIdConverterVersionOne")]
[JsonPropertyAttribute("id")]
public int Id { get; public set; }
    [DataMemberAttribute]
public int Step { get; public set; }
    [DataMemberAttribute]
public PhysicalLocationVersionOne PhysicalLocation { get; public set; }
    [DataMemberAttribute]
public string FullyQualifiedLogicalName { get; public set; }
    [DataMemberAttribute]
public string LogicalLocationKey { get; public set; }
    [DataMemberAttribute]
public string Module { get; public set; }
    [DataMemberAttribute]
public int ThreadId { get; public set; }
    [DataMemberAttribute]
public string Message { get; public set; }
    [DataMemberAttribute]
public AnnotatedCodeLocationKindVersionOne Kind { get; public set; }
    [DataMemberAttribute]
public TaintKindVersionOne TaintKind { get; public set; }
    [DataMemberAttribute]
public string Target { get; public set; }
    [DataMemberAttribute]
public IList`1<string> Values { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, string> State { get; public set; }
    [DataMemberAttribute]
public string TargetKey { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute("essential")]
public bool Essential { get; public set; }
    [DataMemberAttribute]
public AnnotatedCodeLocationImportanceVersionOne Importance { get; public set; }
    [DataMemberAttribute]
public string Snippet { get; public set; }
    [DataMemberAttribute]
public IList`1<AnnotationVersionOne> Annotations { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public AnnotatedCodeLocationVersionOne(int id, int step, PhysicalLocationVersionOne physicalLocation, string fullyQualifiedLogicalName, string logicalLocationKey, string module, int threadId, string message, AnnotatedCodeLocationKindVersionOne kind, TaintKindVersionOne taintKind, string target, IEnumerable`1<string> values, IDictionary`2<string, string> state, string targetKey, bool essential, AnnotatedCodeLocationImportanceVersionOne importance, string snippet, IEnumerable`1<AnnotationVersionOne> annotations, IDictionary`2<string, SerializedPropertyInfo> properties);
    public AnnotatedCodeLocationVersionOne(AnnotatedCodeLocationVersionOne other);
    public static IEqualityComparer`1<AnnotatedCodeLocationVersionOne> get_ValueComparer();
    public bool ValueEquals(AnnotatedCodeLocationVersionOne other);
    public int ValueGetHashCode();
    public sealed virtual SarifNodeKindVersionOne get_SarifNodeKindVersionOne();
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public int get_Step();
    [CompilerGeneratedAttribute]
public void set_Step(int value);
    [CompilerGeneratedAttribute]
public PhysicalLocationVersionOne get_PhysicalLocation();
    [CompilerGeneratedAttribute]
public void set_PhysicalLocation(PhysicalLocationVersionOne value);
    [CompilerGeneratedAttribute]
public string get_FullyQualifiedLogicalName();
    [CompilerGeneratedAttribute]
public void set_FullyQualifiedLogicalName(string value);
    [CompilerGeneratedAttribute]
public string get_LogicalLocationKey();
    [CompilerGeneratedAttribute]
public void set_LogicalLocationKey(string value);
    [CompilerGeneratedAttribute]
public string get_Module();
    [CompilerGeneratedAttribute]
public void set_Module(string value);
    [CompilerGeneratedAttribute]
public int get_ThreadId();
    [CompilerGeneratedAttribute]
public void set_ThreadId(int value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public AnnotatedCodeLocationKindVersionOne get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(AnnotatedCodeLocationKindVersionOne value);
    [CompilerGeneratedAttribute]
public TaintKindVersionOne get_TaintKind();
    [CompilerGeneratedAttribute]
public void set_TaintKind(TaintKindVersionOne value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Values();
    [CompilerGeneratedAttribute]
public void set_Values(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_State();
    [CompilerGeneratedAttribute]
public void set_State(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_TargetKey();
    [CompilerGeneratedAttribute]
public void set_TargetKey(string value);
    [CompilerGeneratedAttribute]
public bool get_Essential();
    [CompilerGeneratedAttribute]
public void set_Essential(bool value);
    [CompilerGeneratedAttribute]
public AnnotatedCodeLocationImportanceVersionOne get_Importance();
    [CompilerGeneratedAttribute]
public void set_Importance(AnnotatedCodeLocationImportanceVersionOne value);
    [CompilerGeneratedAttribute]
public string get_Snippet();
    [CompilerGeneratedAttribute]
public void set_Snippet(string value);
    [CompilerGeneratedAttribute]
public IList`1<AnnotationVersionOne> get_Annotations();
    [CompilerGeneratedAttribute]
public void set_Annotations(IList`1<AnnotationVersionOne> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNodeVersionOne Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne.DeepClone();
    public AnnotatedCodeLocationVersionOne DeepClone();
    private ISarifNodeVersionOne DeepCloneCore();
    private void Init(int id, int step, PhysicalLocationVersionOne physicalLocation, string fullyQualifiedLogicalName, string logicalLocationKey, string module, int threadId, string message, AnnotatedCodeLocationKindVersionOne kind, TaintKindVersionOne taintKind, string target, IEnumerable`1<string> values, IDictionary`2<string, string> state, string targetKey, bool essential, AnnotatedCodeLocationImportanceVersionOne importance, string snippet, IEnumerable`1<AnnotationVersionOne> annotations, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotatedCodeLocationVersionOneEqualityComparer : object {
    internal static AnnotatedCodeLocationVersionOneEqualityComparer Instance;
    private static AnnotatedCodeLocationVersionOneEqualityComparer();
    public sealed virtual bool Equals(AnnotatedCodeLocationVersionOne left, AnnotatedCodeLocationVersionOne right);
    public sealed virtual int GetHashCode(AnnotatedCodeLocationVersionOne obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public class Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotationVersionOne : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PhysicalLocationVersionOne> <Locations>k__BackingField;
    public static IEqualityComparer`1<AnnotationVersionOne> ValueComparer { get; }
    public SarifNodeKindVersionOne SarifNodeKindVersionOne { get; }
    [DataMemberAttribute]
public string Message { get; public set; }
    [DataMemberAttribute]
public IList`1<PhysicalLocationVersionOne> Locations { get; public set; }
    public AnnotationVersionOne(string message, IEnumerable`1<PhysicalLocationVersionOne> locations);
    public AnnotationVersionOne(AnnotationVersionOne other);
    public static IEqualityComparer`1<AnnotationVersionOne> get_ValueComparer();
    public bool ValueEquals(AnnotationVersionOne other);
    public int ValueGetHashCode();
    public sealed virtual SarifNodeKindVersionOne get_SarifNodeKindVersionOne();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public IList`1<PhysicalLocationVersionOne> get_Locations();
    [CompilerGeneratedAttribute]
public void set_Locations(IList`1<PhysicalLocationVersionOne> value);
    private sealed virtual override ISarifNodeVersionOne Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne.DeepClone();
    public AnnotationVersionOne DeepClone();
    private ISarifNodeVersionOne DeepCloneCore();
    private void Init(string message, IEnumerable`1<PhysicalLocationVersionOne> locations);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.VersionOne.AnnotationVersionOneEqualityComparer : object {
    internal static AnnotationVersionOneEqualityComparer Instance;
    private static AnnotationVersionOneEqualityComparer();
    public sealed virtual bool Equals(AnnotationVersionOne left, AnnotationVersionOne right);
    public sealed virtual int GetHashCode(AnnotationVersionOne obj);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public enum Microsoft.CodeAnalysis.Sarif.VersionOne.BaselineStateVersionOne : Enum {
    public int value__;
    public static BaselineStateVersionOne None;
    public static BaselineStateVersionOne Existing;
    public static BaselineStateVersionOne New;
    public static BaselineStateVersionOne Absent;
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public class Microsoft.CodeAnalysis.Sarif.VersionOne.CodeFlowVersionOne : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<AnnotatedCodeLocationVersionOne> <Locations>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<CodeFlowVersionOne> ValueComparer { get; }
    public SarifNodeKindVersionOne SarifNodeKindVersionOne { get; }
    [DataMemberAttribute]
public string Message { get; public set; }
    [DataMemberAttribute]
public IList`1<AnnotatedCodeLocationVersionOne> Locations { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public CodeFlowVersionOne(string message, IEnumerable`1<AnnotatedCodeLocationVersionOne> locations, IDictionary`2<string, SerializedPropertyInfo> properties);
    public CodeFlowVersionOne(CodeFlowVersionOne other);
    public static IEqualityComparer`1<CodeFlowVersionOne> get_ValueComparer();
    public bool ValueEquals(CodeFlowVersionOne other);
    public int ValueGetHashCode();
    public sealed virtual SarifNodeKindVersionOne get_SarifNodeKindVersionOne();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public IList`1<AnnotatedCodeLocationVersionOne> get_Locations();
    [CompilerGeneratedAttribute]
public void set_Locations(IList`1<AnnotatedCodeLocationVersionOne> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNodeVersionOne Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne.DeepClone();
    public CodeFlowVersionOne DeepClone();
    private ISarifNodeVersionOne DeepCloneCore();
    private void Init(string message, IEnumerable`1<AnnotatedCodeLocationVersionOne> locations, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.VersionOne.CodeFlowVersionOneEqualityComparer : object {
    internal static CodeFlowVersionOneEqualityComparer Instance;
    private static CodeFlowVersionOneEqualityComparer();
    public sealed virtual bool Equals(CodeFlowVersionOne left, CodeFlowVersionOne right);
    public sealed virtual int GetHashCode(CodeFlowVersionOne obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public class Microsoft.CodeAnalysis.Sarif.VersionOne.ExceptionDataVersionOne : object {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private StackVersionOne <Stack>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ExceptionDataVersionOne> <InnerExceptions>k__BackingField;
    public static IEqualityComparer`1<ExceptionDataVersionOne> ValueComparer { get; }
    public SarifNodeKindVersionOne SarifNodeKindVersionOne { get; }
    [DataMemberAttribute]
public string Kind { get; public set; }
    [DataMemberAttribute]
public string Message { get; public set; }
    [DataMemberAttribute]
public StackVersionOne Stack { get; public set; }
    [DataMemberAttribute]
public IList`1<ExceptionDataVersionOne> InnerExceptions { get; public set; }
    public ExceptionDataVersionOne(string kind, string message, StackVersionOne stack, IEnumerable`1<ExceptionDataVersionOne> innerExceptions);
    public ExceptionDataVersionOne(ExceptionDataVersionOne other);
    public static IEqualityComparer`1<ExceptionDataVersionOne> get_ValueComparer();
    public bool ValueEquals(ExceptionDataVersionOne other);
    public int ValueGetHashCode();
    public sealed virtual SarifNodeKindVersionOne get_SarifNodeKindVersionOne();
    [CompilerGeneratedAttribute]
public string get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public StackVersionOne get_Stack();
    [CompilerGeneratedAttribute]
public void set_Stack(StackVersionOne value);
    [CompilerGeneratedAttribute]
public IList`1<ExceptionDataVersionOne> get_InnerExceptions();
    [CompilerGeneratedAttribute]
public void set_InnerExceptions(IList`1<ExceptionDataVersionOne> value);
    private sealed virtual override ISarifNodeVersionOne Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne.DeepClone();
    public ExceptionDataVersionOne DeepClone();
    private ISarifNodeVersionOne DeepCloneCore();
    private void Init(string kind, string message, StackVersionOne stack, IEnumerable`1<ExceptionDataVersionOne> innerExceptions);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.VersionOne.ExceptionDataVersionOneEqualityComparer : object {
    internal static ExceptionDataVersionOneEqualityComparer Instance;
    private static ExceptionDataVersionOneEqualityComparer();
    public sealed virtual bool Equals(ExceptionDataVersionOne left, ExceptionDataVersionOne right);
    public sealed virtual int GetHashCode(ExceptionDataVersionOne obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public class Microsoft.CodeAnalysis.Sarif.VersionOne.FileChangeVersionOne : object {
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UriBaseId>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ReplacementVersionOne> <Replacements>k__BackingField;
    public static IEqualityComparer`1<FileChangeVersionOne> ValueComparer { get; }
    public SarifNodeKindVersionOne SarifNodeKindVersionOne { get; }
    [DataMemberAttribute]
public Uri Uri { get; public set; }
    [DataMemberAttribute]
public string UriBaseId { get; public set; }
    [DataMemberAttribute]
public IList`1<ReplacementVersionOne> Replacements { get; public set; }
    public FileChangeVersionOne(Uri uri, string uriBaseId, IEnumerable`1<ReplacementVersionOne> replacements);
    public FileChangeVersionOne(FileChangeVersionOne other);
    public static IEqualityComparer`1<FileChangeVersionOne> get_ValueComparer();
    public bool ValueEquals(FileChangeVersionOne other);
    public int ValueGetHashCode();
    public sealed virtual SarifNodeKindVersionOne get_SarifNodeKindVersionOne();
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public string get_UriBaseId();
    [CompilerGeneratedAttribute]
public void set_UriBaseId(string value);
    [CompilerGeneratedAttribute]
public IList`1<ReplacementVersionOne> get_Replacements();
    [CompilerGeneratedAttribute]
public void set_Replacements(IList`1<ReplacementVersionOne> value);
    private sealed virtual override ISarifNodeVersionOne Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne.DeepClone();
    public FileChangeVersionOne DeepClone();
    private ISarifNodeVersionOne DeepCloneCore();
    private void Init(Uri uri, string uriBaseId, IEnumerable`1<ReplacementVersionOne> replacements);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.VersionOne.FileChangeVersionOneEqualityComparer : object {
    internal static FileChangeVersionOneEqualityComparer Instance;
    private static FileChangeVersionOneEqualityComparer();
    public sealed virtual bool Equals(FileChangeVersionOne left, FileChangeVersionOne right);
    public sealed virtual int GetHashCode(FileChangeVersionOne obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public class Microsoft.CodeAnalysis.Sarif.VersionOne.FileDataVersionOne : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UriBaseId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentKey>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MimeType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Contents>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HashVersionOne> <Hashes>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<FileDataVersionOne> ValueComparer { get; }
    public SarifNodeKindVersionOne SarifNodeKindVersionOne { get; }
    [DataMemberAttribute]
public Uri Uri { get; public set; }
    [DataMemberAttribute]
public string UriBaseId { get; public set; }
    [DataMemberAttribute]
public string ParentKey { get; public set; }
    [DataMemberAttribute]
public int Offset { get; public set; }
    [DataMemberAttribute]
public int Length { get; public set; }
    [DataMemberAttribute]
public string MimeType { get; public set; }
    [DataMemberAttribute]
public string Contents { get; public set; }
    [DataMemberAttribute]
public IList`1<HashVersionOne> Hashes { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public FileDataVersionOne(Uri uri, string uriBaseId, string parentKey, int offset, int length, string mimeType, string contents, IEnumerable`1<HashVersionOne> hashes, IDictionary`2<string, SerializedPropertyInfo> properties);
    public FileDataVersionOne(FileDataVersionOne other);
    public static IEqualityComparer`1<FileDataVersionOne> get_ValueComparer();
    public bool ValueEquals(FileDataVersionOne other);
    public int ValueGetHashCode();
    public sealed virtual SarifNodeKindVersionOne get_SarifNodeKindVersionOne();
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public string get_UriBaseId();
    [CompilerGeneratedAttribute]
public void set_UriBaseId(string value);
    [CompilerGeneratedAttribute]
public string get_ParentKey();
    [CompilerGeneratedAttribute]
public void set_ParentKey(string value);
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(int value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(int value);
    [CompilerGeneratedAttribute]
public string get_MimeType();
    [CompilerGeneratedAttribute]
public void set_MimeType(string value);
    [CompilerGeneratedAttribute]
public string get_Contents();
    [CompilerGeneratedAttribute]
public void set_Contents(string value);
    [CompilerGeneratedAttribute]
public IList`1<HashVersionOne> get_Hashes();
    [CompilerGeneratedAttribute]
public void set_Hashes(IList`1<HashVersionOne> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNodeVersionOne Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne.DeepClone();
    public FileDataVersionOne DeepClone();
    private ISarifNodeVersionOne DeepCloneCore();
    private void Init(Uri uri, string uriBaseId, string parentKey, int offset, int length, string mimeType, string contents, IEnumerable`1<HashVersionOne> hashes, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.VersionOne.FileDataVersionOneEqualityComparer : object {
    internal static FileDataVersionOneEqualityComparer Instance;
    private static FileDataVersionOneEqualityComparer();
    public sealed virtual bool Equals(FileDataVersionOne left, FileDataVersionOne right);
    public sealed virtual int GetHashCode(FileDataVersionOne obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public class Microsoft.CodeAnalysis.Sarif.VersionOne.FixVersionOne : object {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<FileChangeVersionOne> <FileChanges>k__BackingField;
    public static IEqualityComparer`1<FixVersionOne> ValueComparer { get; }
    public SarifNodeKindVersionOne SarifNodeKindVersionOne { get; }
    [DataMemberAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
public IList`1<FileChangeVersionOne> FileChanges { get; public set; }
    public FixVersionOne(string description, IEnumerable`1<FileChangeVersionOne> fileChanges);
    public FixVersionOne(FixVersionOne other);
    public static IEqualityComparer`1<FixVersionOne> get_ValueComparer();
    public bool ValueEquals(FixVersionOne other);
    public int ValueGetHashCode();
    public sealed virtual SarifNodeKindVersionOne get_SarifNodeKindVersionOne();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public IList`1<FileChangeVersionOne> get_FileChanges();
    [CompilerGeneratedAttribute]
public void set_FileChanges(IList`1<FileChangeVersionOne> value);
    private sealed virtual override ISarifNodeVersionOne Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne.DeepClone();
    public FixVersionOne DeepClone();
    private ISarifNodeVersionOne DeepCloneCore();
    private void Init(string description, IEnumerable`1<FileChangeVersionOne> fileChanges);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.VersionOne.FixVersionOneEqualityComparer : object {
    internal static FixVersionOneEqualityComparer Instance;
    private static FixVersionOneEqualityComparer();
    public sealed virtual bool Equals(FixVersionOne left, FixVersionOne right);
    public sealed virtual int GetHashCode(FixVersionOne obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public class Microsoft.CodeAnalysis.Sarif.VersionOne.FormattedRuleMessageVersionOne : object {
    [CompilerGeneratedAttribute]
private string <FormatId>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Arguments>k__BackingField;
    public static IEqualityComparer`1<FormattedRuleMessageVersionOne> ValueComparer { get; }
    public SarifNodeKindVersionOne SarifNodeKindVersionOne { get; }
    [DataMemberAttribute]
public string FormatId { get; public set; }
    [DataMemberAttribute]
public IList`1<string> Arguments { get; public set; }
    public FormattedRuleMessageVersionOne(string formatId, IEnumerable`1<string> arguments);
    public FormattedRuleMessageVersionOne(FormattedRuleMessageVersionOne other);
    public static IEqualityComparer`1<FormattedRuleMessageVersionOne> get_ValueComparer();
    public bool ValueEquals(FormattedRuleMessageVersionOne other);
    public int ValueGetHashCode();
    public sealed virtual SarifNodeKindVersionOne get_SarifNodeKindVersionOne();
    [CompilerGeneratedAttribute]
public string get_FormatId();
    [CompilerGeneratedAttribute]
public void set_FormatId(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(IList`1<string> value);
    private sealed virtual override ISarifNodeVersionOne Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne.DeepClone();
    public FormattedRuleMessageVersionOne DeepClone();
    private ISarifNodeVersionOne DeepCloneCore();
    private void Init(string formatId, IEnumerable`1<string> arguments);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.VersionOne.FormattedRuleMessageVersionOneEqualityComparer : object {
    internal static FormattedRuleMessageVersionOneEqualityComparer Instance;
    private static FormattedRuleMessageVersionOneEqualityComparer();
    public sealed virtual bool Equals(FormattedRuleMessageVersionOne left, FormattedRuleMessageVersionOne right);
    public sealed virtual int GetHashCode(FormattedRuleMessageVersionOne obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public class Microsoft.CodeAnalysis.Sarif.VersionOne.HashVersionOne : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private AlgorithmKindVersionOne <Algorithm>k__BackingField;
    public static IEqualityComparer`1<HashVersionOne> ValueComparer { get; }
    public SarifNodeKindVersionOne SarifNodeKindVersionOne { get; }
    [DataMemberAttribute]
public string Value { get; public set; }
    [DataMemberAttribute]
public AlgorithmKindVersionOne Algorithm { get; public set; }
    public HashVersionOne(string value, AlgorithmKindVersionOne algorithm);
    public HashVersionOne(HashVersionOne other);
    public static IEqualityComparer`1<HashVersionOne> get_ValueComparer();
    public bool ValueEquals(HashVersionOne other);
    public int ValueGetHashCode();
    public sealed virtual SarifNodeKindVersionOne get_SarifNodeKindVersionOne();
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public AlgorithmKindVersionOne get_Algorithm();
    [CompilerGeneratedAttribute]
public void set_Algorithm(AlgorithmKindVersionOne value);
    private sealed virtual override ISarifNodeVersionOne Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne.DeepClone();
    public HashVersionOne DeepClone();
    private ISarifNodeVersionOne DeepCloneCore();
    private void Init(string value, AlgorithmKindVersionOne algorithm);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.VersionOne.HashVersionOneEqualityComparer : object {
    internal static HashVersionOneEqualityComparer Instance;
    private static HashVersionOneEqualityComparer();
    public sealed virtual bool Equals(HashVersionOne left, HashVersionOne right);
    public sealed virtual int GetHashCode(HashVersionOne obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public class Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOne : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private string <CommandLine>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ResponseFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Machine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Account>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <EnvironmentVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<InvocationVersionOne> ValueComparer { get; }
    public SarifNodeKindVersionOne SarifNodeKindVersionOne { get; }
    [DataMemberAttribute]
public string CommandLine { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, string> ResponseFiles { get; public set; }
    [DataMemberAttribute]
public DateTime StartTime { get; public set; }
    [DataMemberAttribute]
public DateTime EndTime { get; public set; }
    [DataMemberAttribute]
public string Machine { get; public set; }
    [DataMemberAttribute]
public string Account { get; public set; }
    [DataMemberAttribute]
public int ProcessId { get; public set; }
    [DataMemberAttribute]
public string FileName { get; public set; }
    [DataMemberAttribute]
public string WorkingDirectory { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, string> EnvironmentVariables { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public InvocationVersionOne(string commandLine, IDictionary`2<string, string> responseFiles, DateTime startTime, DateTime endTime, string machine, string account, int processId, string fileName, string workingDirectory, IDictionary`2<string, string> environmentVariables, IDictionary`2<string, SerializedPropertyInfo> properties);
    public InvocationVersionOne(InvocationVersionOne other);
    public static IEqualityComparer`1<InvocationVersionOne> get_ValueComparer();
    public bool ValueEquals(InvocationVersionOne other);
    public int ValueGetHashCode();
    public sealed virtual SarifNodeKindVersionOne get_SarifNodeKindVersionOne();
    [CompilerGeneratedAttribute]
public string get_CommandLine();
    [CompilerGeneratedAttribute]
public void set_CommandLine(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ResponseFiles();
    [CompilerGeneratedAttribute]
public void set_ResponseFiles(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public DateTime get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_EndTime();
    [CompilerGeneratedAttribute]
public void set_EndTime(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Machine();
    [CompilerGeneratedAttribute]
public void set_Machine(string value);
    [CompilerGeneratedAttribute]
public string get_Account();
    [CompilerGeneratedAttribute]
public void set_Account(string value);
    [CompilerGeneratedAttribute]
public int get_ProcessId();
    [CompilerGeneratedAttribute]
public void set_ProcessId(int value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public void set_WorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_EnvironmentVariables();
    [CompilerGeneratedAttribute]
public void set_EnvironmentVariables(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNodeVersionOne Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne.DeepClone();
    public InvocationVersionOne DeepClone();
    private ISarifNodeVersionOne DeepCloneCore();
    private void Init(string commandLine, IDictionary`2<string, string> responseFiles, DateTime startTime, DateTime endTime, string machine, string account, int processId, string fileName, string workingDirectory, IDictionary`2<string, string> environmentVariables, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.VersionOne.InvocationVersionOneEqualityComparer : object {
    internal static InvocationVersionOneEqualityComparer Instance;
    private static InvocationVersionOneEqualityComparer();
    public sealed virtual bool Equals(InvocationVersionOne left, InvocationVersionOne right);
    public sealed virtual int GetHashCode(InvocationVersionOne obj);
}
public interface Microsoft.CodeAnalysis.Sarif.VersionOne.IPropertyBagHolderVersionOne {
    public IList`1<string> PropertyNames { get; }
    public abstract virtual IList`1<string> get_PropertyNames();
    public abstract virtual bool TryGetProperty(string propertyName, String& value);
    public abstract virtual string GetProperty(string propertyName);
    public abstract virtual bool TryGetProperty(string propertyName, T& value);
    public abstract virtual T GetProperty(string propertyName);
    public abstract virtual void SetProperty(string propertyName, T value);
    public abstract virtual void SetPropertiesFrom(IPropertyBagHolderVersionOne other);
    public abstract virtual void RemoveProperty(string propertyName);
}
public interface Microsoft.CodeAnalysis.Sarif.VersionOne.IRuleVersionOne {
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public interface Microsoft.CodeAnalysis.Sarif.VersionOne.IRuleVersionOneVersionOne {
    public string Id { get; }
    public string Name { get; }
    public string ShortDescription { get; }
    public string FullDescription { get; }
    public IDictionary`2<string, string> MessageFormats { get; }
    public RuleConfigurationVersionOne Configuration { get; }
    public ResultLevelVersionOne DefaultLevel { get; }
    public Uri HelpUri { get; }
    public abstract virtual string get_Id();
    public abstract virtual string get_Name();
    public abstract virtual string get_ShortDescription();
    public abstract virtual string get_FullDescription();
    public abstract virtual IDictionary`2<string, string> get_MessageFormats();
    public abstract virtual RuleConfigurationVersionOne get_Configuration();
    public abstract virtual ResultLevelVersionOne get_DefaultLevel();
    public abstract virtual Uri get_HelpUri();
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public interface Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne {
    public SarifNodeKindVersionOne SarifNodeKindVersionOne { get; }
    public abstract virtual SarifNodeKindVersionOne get_SarifNodeKindVersionOne();
    public abstract virtual ISarifNodeVersionOne DeepClone();
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public class Microsoft.CodeAnalysis.Sarif.VersionOne.LocationVersionOne : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private PhysicalLocationVersionOne <AnalysisTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private PhysicalLocationVersionOne <ResultFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullyQualifiedLogicalName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogicalLocationKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DecoratedName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<LocationVersionOne> ValueComparer { get; }
    public SarifNodeKindVersionOne SarifNodeKindVersionOne { get; }
    [DataMemberAttribute]
public PhysicalLocationVersionOne AnalysisTarget { get; public set; }
    [DataMemberAttribute]
public PhysicalLocationVersionOne ResultFile { get; public set; }
    [DataMemberAttribute]
public string FullyQualifiedLogicalName { get; public set; }
    [DataMemberAttribute]
public string LogicalLocationKey { get; public set; }
    [DataMemberAttribute]
public string DecoratedName { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public LocationVersionOne(PhysicalLocationVersionOne analysisTarget, PhysicalLocationVersionOne resultFile, string fullyQualifiedLogicalName, string logicalLocationKey, string decoratedName, IDictionary`2<string, SerializedPropertyInfo> properties);
    public LocationVersionOne(LocationVersionOne other);
    public static IEqualityComparer`1<LocationVersionOne> get_ValueComparer();
    public bool ValueEquals(LocationVersionOne other);
    public int ValueGetHashCode();
    public sealed virtual SarifNodeKindVersionOne get_SarifNodeKindVersionOne();
    [CompilerGeneratedAttribute]
public PhysicalLocationVersionOne get_AnalysisTarget();
    [CompilerGeneratedAttribute]
public void set_AnalysisTarget(PhysicalLocationVersionOne value);
    [CompilerGeneratedAttribute]
public PhysicalLocationVersionOne get_ResultFile();
    [CompilerGeneratedAttribute]
public void set_ResultFile(PhysicalLocationVersionOne value);
    [CompilerGeneratedAttribute]
public string get_FullyQualifiedLogicalName();
    [CompilerGeneratedAttribute]
public void set_FullyQualifiedLogicalName(string value);
    [CompilerGeneratedAttribute]
public string get_LogicalLocationKey();
    [CompilerGeneratedAttribute]
public void set_LogicalLocationKey(string value);
    [CompilerGeneratedAttribute]
public string get_DecoratedName();
    [CompilerGeneratedAttribute]
public void set_DecoratedName(string value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNodeVersionOne Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne.DeepClone();
    public LocationVersionOne DeepClone();
    private ISarifNodeVersionOne DeepCloneCore();
    private void Init(PhysicalLocationVersionOne analysisTarget, PhysicalLocationVersionOne resultFile, string fullyQualifiedLogicalName, string logicalLocationKey, string decoratedName, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.VersionOne.LocationVersionOneEqualityComparer : object {
    internal static LocationVersionOneEqualityComparer Instance;
    private static LocationVersionOneEqualityComparer();
    public sealed virtual bool Equals(LocationVersionOne left, LocationVersionOne right);
    public sealed virtual int GetHashCode(LocationVersionOne obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public class Microsoft.CodeAnalysis.Sarif.VersionOne.LogicalLocationVersionOne : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    public static IEqualityComparer`1<LogicalLocationVersionOne> ValueComparer { get; }
    public SarifNodeKindVersionOne SarifNodeKindVersionOne { get; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string ParentKey { get; public set; }
    [DataMemberAttribute]
public string Kind { get; public set; }
    public LogicalLocationVersionOne(string name, string parentKey, string kind);
    public LogicalLocationVersionOne(LogicalLocationVersionOne other);
    public static IEqualityComparer`1<LogicalLocationVersionOne> get_ValueComparer();
    public bool ValueEquals(LogicalLocationVersionOne other);
    public int ValueGetHashCode();
    public sealed virtual SarifNodeKindVersionOne get_SarifNodeKindVersionOne();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ParentKey();
    [CompilerGeneratedAttribute]
public void set_ParentKey(string value);
    [CompilerGeneratedAttribute]
public string get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(string value);
    private sealed virtual override ISarifNodeVersionOne Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne.DeepClone();
    public LogicalLocationVersionOne DeepClone();
    private ISarifNodeVersionOne DeepCloneCore();
    private void Init(string name, string parentKey, string kind);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.VersionOne.LogicalLocationVersionOneEqualityComparer : object {
    internal static LogicalLocationVersionOneEqualityComparer Instance;
    private static LogicalLocationVersionOneEqualityComparer();
    public sealed virtual bool Equals(LogicalLocationVersionOne left, LogicalLocationVersionOne right);
    public sealed virtual int GetHashCode(LogicalLocationVersionOne obj);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public enum Microsoft.CodeAnalysis.Sarif.VersionOne.NotificationLevelVersionOne : Enum {
    public int value__;
    public static NotificationLevelVersionOne Warning;
    public static NotificationLevelVersionOne Note;
    public static NotificationLevelVersionOne Error;
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public class Microsoft.CodeAnalysis.Sarif.VersionOne.NotificationVersionOne : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuleId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuleKey>k__BackingField;
    [CompilerGeneratedAttribute]
private PhysicalLocationVersionOne <PhysicalLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private NotificationLevelVersionOne <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Time>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionDataVersionOne <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<NotificationVersionOne> ValueComparer { get; }
    public SarifNodeKindVersionOne SarifNodeKindVersionOne { get; }
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public string RuleId { get; public set; }
    [DataMemberAttribute]
public string RuleKey { get; public set; }
    [DataMemberAttribute]
public PhysicalLocationVersionOne PhysicalLocation { get; public set; }
    [DataMemberAttribute]
public string Message { get; public set; }
    [DataMemberAttribute]
public NotificationLevelVersionOne Level { get; public set; }
    [DataMemberAttribute]
public int ThreadId { get; public set; }
    [DataMemberAttribute]
public DateTime Time { get; public set; }
    [DataMemberAttribute]
public ExceptionDataVersionOne Exception { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public NotificationVersionOne(string id, string ruleId, string ruleKey, PhysicalLocationVersionOne physicalLocation, string message, NotificationLevelVersionOne level, int threadId, DateTime time, ExceptionDataVersionOne exception, IDictionary`2<string, SerializedPropertyInfo> properties);
    public NotificationVersionOne(NotificationVersionOne other);
    public static IEqualityComparer`1<NotificationVersionOne> get_ValueComparer();
    public bool ValueEquals(NotificationVersionOne other);
    public int ValueGetHashCode();
    public sealed virtual SarifNodeKindVersionOne get_SarifNodeKindVersionOne();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_RuleId();
    [CompilerGeneratedAttribute]
public void set_RuleId(string value);
    [CompilerGeneratedAttribute]
public string get_RuleKey();
    [CompilerGeneratedAttribute]
public void set_RuleKey(string value);
    [CompilerGeneratedAttribute]
public PhysicalLocationVersionOne get_PhysicalLocation();
    [CompilerGeneratedAttribute]
public void set_PhysicalLocation(PhysicalLocationVersionOne value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public NotificationLevelVersionOne get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(NotificationLevelVersionOne value);
    [CompilerGeneratedAttribute]
public int get_ThreadId();
    [CompilerGeneratedAttribute]
public void set_ThreadId(int value);
    [CompilerGeneratedAttribute]
public DateTime get_Time();
    [CompilerGeneratedAttribute]
public void set_Time(DateTime value);
    [CompilerGeneratedAttribute]
public ExceptionDataVersionOne get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(ExceptionDataVersionOne value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNodeVersionOne Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne.DeepClone();
    public NotificationVersionOne DeepClone();
    private ISarifNodeVersionOne DeepCloneCore();
    private void Init(string id, string ruleId, string ruleKey, PhysicalLocationVersionOne physicalLocation, string message, NotificationLevelVersionOne level, int threadId, DateTime time, ExceptionDataVersionOne exception, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.VersionOne.NotificationVersionOneEqualityComparer : object {
    internal static NotificationVersionOneEqualityComparer Instance;
    private static NotificationVersionOneEqualityComparer();
    public sealed virtual bool Equals(NotificationVersionOne left, NotificationVersionOne right);
    public sealed virtual int GetHashCode(NotificationVersionOne obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public class Microsoft.CodeAnalysis.Sarif.VersionOne.PhysicalLocationVersionOne : object {
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UriBaseId>k__BackingField;
    [CompilerGeneratedAttribute]
private RegionVersionOne <Region>k__BackingField;
    public static IEqualityComparer`1<PhysicalLocationVersionOne> ValueComparer { get; }
    public SarifNodeKindVersionOne SarifNodeKindVersionOne { get; }
    [DataMemberAttribute]
public Uri Uri { get; public set; }
    [DataMemberAttribute]
public string UriBaseId { get; public set; }
    [DataMemberAttribute]
public RegionVersionOne Region { get; public set; }
    public PhysicalLocationVersionOne(Uri uri, string uriBaseId, RegionVersionOne region);
    public PhysicalLocationVersionOne(PhysicalLocationVersionOne other);
    public static IEqualityComparer`1<PhysicalLocationVersionOne> get_ValueComparer();
    public bool ValueEquals(PhysicalLocationVersionOne other);
    public int ValueGetHashCode();
    public sealed virtual SarifNodeKindVersionOne get_SarifNodeKindVersionOne();
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public string get_UriBaseId();
    [CompilerGeneratedAttribute]
public void set_UriBaseId(string value);
    [CompilerGeneratedAttribute]
public RegionVersionOne get_Region();
    [CompilerGeneratedAttribute]
public void set_Region(RegionVersionOne value);
    private sealed virtual override ISarifNodeVersionOne Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne.DeepClone();
    public PhysicalLocationVersionOne DeepClone();
    private ISarifNodeVersionOne DeepCloneCore();
    private void Init(Uri uri, string uriBaseId, RegionVersionOne region);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.VersionOne.PhysicalLocationVersionOneEqualityComparer : object {
    internal static PhysicalLocationVersionOneEqualityComparer Instance;
    private static PhysicalLocationVersionOneEqualityComparer();
    public sealed virtual bool Equals(PhysicalLocationVersionOne left, PhysicalLocationVersionOne right);
    public sealed virtual int GetHashCode(PhysicalLocationVersionOne obj);
}
public abstract class Microsoft.CodeAnalysis.Sarif.VersionOne.PropertyBagHolderVersionOne : object {
    private static string NullValue;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private TagsCollectionVersionOne <Tags>k__BackingField;
    [JsonIgnoreAttribute]
public IList`1<string> PropertyNames { get; }
    [JsonConverterAttribute("Microsoft.CodeAnalysis.Sarif.Readers.PropertyBagConverter")]
[JsonPropertyAttribute("properties")]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    [JsonIgnoreAttribute]
public TagsCollectionVersionOne Tags { get; }
    public sealed virtual IList`1<string> get_PropertyNames();
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    public sealed virtual bool TryGetProperty(string propertyName, String& value);
    public sealed virtual string GetProperty(string propertyName);
    public sealed virtual bool TryGetProperty(string propertyName, T& value);
    public sealed virtual T GetProperty(string propertyName);
    public sealed virtual void SetProperty(string propertyName, T value);
    public sealed virtual void SetPropertiesFrom(IPropertyBagHolderVersionOne other);
    public sealed virtual void RemoveProperty(string propertyName);
    [CompilerGeneratedAttribute]
public TagsCollectionVersionOne get_Tags();
}
public class Microsoft.CodeAnalysis.Sarif.VersionOne.Readers.AnnotatedCodeLocationIdConverterVersionOne : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public class Microsoft.CodeAnalysis.Sarif.VersionOne.RegionVersionOne : object {
    [CompilerGeneratedAttribute]
private int <StartLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public static IEqualityComparer`1<RegionVersionOne> ValueComparer { get; }
    public SarifNodeKindVersionOne SarifNodeKindVersionOne { get; }
    [DataMemberAttribute]
public int StartLine { get; public set; }
    [DataMemberAttribute]
public int StartColumn { get; public set; }
    [DataMemberAttribute]
public int EndLine { get; public set; }
    [DataMemberAttribute]
public int EndColumn { get; public set; }
    [DataMemberAttribute]
public int Offset { get; public set; }
    [DataMemberAttribute]
public int Length { get; public set; }
    public RegionVersionOne(int startLine, int startColumn, int endLine, int endColumn, int offset, int length);
    public RegionVersionOne(RegionVersionOne other);
    public static IEqualityComparer`1<RegionVersionOne> get_ValueComparer();
    public bool ValueEquals(RegionVersionOne other);
    public int ValueGetHashCode();
    public sealed virtual SarifNodeKindVersionOne get_SarifNodeKindVersionOne();
    [CompilerGeneratedAttribute]
public int get_StartLine();
    [CompilerGeneratedAttribute]
public void set_StartLine(int value);
    [CompilerGeneratedAttribute]
public int get_StartColumn();
    [CompilerGeneratedAttribute]
public void set_StartColumn(int value);
    [CompilerGeneratedAttribute]
public int get_EndLine();
    [CompilerGeneratedAttribute]
public void set_EndLine(int value);
    [CompilerGeneratedAttribute]
public int get_EndColumn();
    [CompilerGeneratedAttribute]
public void set_EndColumn(int value);
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(int value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(int value);
    private sealed virtual override ISarifNodeVersionOne Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne.DeepClone();
    public RegionVersionOne DeepClone();
    private ISarifNodeVersionOne DeepCloneCore();
    private void Init(int startLine, int startColumn, int endLine, int endColumn, int offset, int length);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.VersionOne.RegionVersionOneEqualityComparer : object {
    internal static RegionVersionOneEqualityComparer Instance;
    private static RegionVersionOneEqualityComparer();
    public sealed virtual bool Equals(RegionVersionOne left, RegionVersionOne right);
    public sealed virtual int GetHashCode(RegionVersionOne obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public class Microsoft.CodeAnalysis.Sarif.VersionOne.ReplacementVersionOne : object {
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DeletedLength>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InsertedBytes>k__BackingField;
    public static IEqualityComparer`1<ReplacementVersionOne> ValueComparer { get; }
    public SarifNodeKindVersionOne SarifNodeKindVersionOne { get; }
    [DataMemberAttribute]
public int Offset { get; public set; }
    [DataMemberAttribute]
public int DeletedLength { get; public set; }
    [DataMemberAttribute]
public string InsertedBytes { get; public set; }
    public ReplacementVersionOne(int offset, int deletedLength, string insertedBytes);
    public ReplacementVersionOne(ReplacementVersionOne other);
    public static IEqualityComparer`1<ReplacementVersionOne> get_ValueComparer();
    public bool ValueEquals(ReplacementVersionOne other);
    public int ValueGetHashCode();
    public sealed virtual SarifNodeKindVersionOne get_SarifNodeKindVersionOne();
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(int value);
    [CompilerGeneratedAttribute]
public int get_DeletedLength();
    [CompilerGeneratedAttribute]
public void set_DeletedLength(int value);
    [CompilerGeneratedAttribute]
public string get_InsertedBytes();
    [CompilerGeneratedAttribute]
public void set_InsertedBytes(string value);
    private sealed virtual override ISarifNodeVersionOne Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne.DeepClone();
    public ReplacementVersionOne DeepClone();
    private ISarifNodeVersionOne DeepCloneCore();
    private void Init(int offset, int deletedLength, string insertedBytes);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.VersionOne.ReplacementVersionOneEqualityComparer : object {
    internal static ReplacementVersionOneEqualityComparer Instance;
    private static ReplacementVersionOneEqualityComparer();
    public sealed virtual bool Equals(ReplacementVersionOne left, ReplacementVersionOne right);
    public sealed virtual int GetHashCode(ReplacementVersionOne obj);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public enum Microsoft.CodeAnalysis.Sarif.VersionOne.ResultLevelVersionOne : Enum {
    public int value__;
    public static ResultLevelVersionOne Default;
    public static ResultLevelVersionOne NotApplicable;
    public static ResultLevelVersionOne Pass;
    public static ResultLevelVersionOne Note;
    public static ResultLevelVersionOne Warning;
    public static ResultLevelVersionOne Error;
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public class Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOne : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private string <RuleId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuleKey>k__BackingField;
    [CompilerGeneratedAttribute]
private ResultLevelVersionOne <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private FormattedRuleMessageVersionOne <FormattedRuleMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<LocationVersionOne> <Locations>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Snippet>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolFingerprintContribution>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<StackVersionOne> <Stacks>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<CodeFlowVersionOne> <CodeFlows>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<AnnotatedCodeLocationVersionOne> <RelatedLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private SuppressionStatesVersionOne <SuppressionStates>k__BackingField;
    [CompilerGeneratedAttribute]
private BaselineStateVersionOne <BaselineState>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<FixVersionOne> <Fixes>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<ResultVersionOne> ValueComparer { get; }
    public SarifNodeKindVersionOne SarifNodeKindVersionOne { get; }
    [DataMemberAttribute]
public string RuleId { get; public set; }
    [DataMemberAttribute]
public string RuleKey { get; public set; }
    [DataMemberAttribute]
public ResultLevelVersionOne Level { get; public set; }
    [DataMemberAttribute]
public string Message { get; public set; }
    [DataMemberAttribute]
public FormattedRuleMessageVersionOne FormattedRuleMessage { get; public set; }
    [DataMemberAttribute]
public IList`1<LocationVersionOne> Locations { get; public set; }
    [DataMemberAttribute]
public string Snippet { get; public set; }
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public string ToolFingerprintContribution { get; public set; }
    [DataMemberAttribute]
public IList`1<StackVersionOne> Stacks { get; public set; }
    [DataMemberAttribute]
public IList`1<CodeFlowVersionOne> CodeFlows { get; public set; }
    [DataMemberAttribute]
public IList`1<AnnotatedCodeLocationVersionOne> RelatedLocations { get; public set; }
    [DataMemberAttribute]
public SuppressionStatesVersionOne SuppressionStates { get; public set; }
    [DataMemberAttribute]
public BaselineStateVersionOne BaselineState { get; public set; }
    [DataMemberAttribute]
public IList`1<FixVersionOne> Fixes { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public ResultVersionOne(string ruleId, string ruleKey, ResultLevelVersionOne level, string message, FormattedRuleMessageVersionOne formattedRuleMessage, IEnumerable`1<LocationVersionOne> locations, string snippet, string id, string toolFingerprintContribution, IEnumerable`1<StackVersionOne> stacks, IEnumerable`1<CodeFlowVersionOne> codeFlows, IEnumerable`1<AnnotatedCodeLocationVersionOne> relatedLocations, SuppressionStatesVersionOne suppressionStates, BaselineStateVersionOne baselineState, IEnumerable`1<FixVersionOne> fixes, IDictionary`2<string, SerializedPropertyInfo> properties);
    public ResultVersionOne(ResultVersionOne other);
    public static IEqualityComparer`1<ResultVersionOne> get_ValueComparer();
    public bool ValueEquals(ResultVersionOne other);
    public int ValueGetHashCode();
    public sealed virtual SarifNodeKindVersionOne get_SarifNodeKindVersionOne();
    [CompilerGeneratedAttribute]
public string get_RuleId();
    [CompilerGeneratedAttribute]
public void set_RuleId(string value);
    [CompilerGeneratedAttribute]
public string get_RuleKey();
    [CompilerGeneratedAttribute]
public void set_RuleKey(string value);
    [CompilerGeneratedAttribute]
public ResultLevelVersionOne get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(ResultLevelVersionOne value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public FormattedRuleMessageVersionOne get_FormattedRuleMessage();
    [CompilerGeneratedAttribute]
public void set_FormattedRuleMessage(FormattedRuleMessageVersionOne value);
    [CompilerGeneratedAttribute]
public IList`1<LocationVersionOne> get_Locations();
    [CompilerGeneratedAttribute]
public void set_Locations(IList`1<LocationVersionOne> value);
    [CompilerGeneratedAttribute]
public string get_Snippet();
    [CompilerGeneratedAttribute]
public void set_Snippet(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_ToolFingerprintContribution();
    [CompilerGeneratedAttribute]
public void set_ToolFingerprintContribution(string value);
    [CompilerGeneratedAttribute]
public IList`1<StackVersionOne> get_Stacks();
    [CompilerGeneratedAttribute]
public void set_Stacks(IList`1<StackVersionOne> value);
    [CompilerGeneratedAttribute]
public IList`1<CodeFlowVersionOne> get_CodeFlows();
    [CompilerGeneratedAttribute]
public void set_CodeFlows(IList`1<CodeFlowVersionOne> value);
    [CompilerGeneratedAttribute]
public IList`1<AnnotatedCodeLocationVersionOne> get_RelatedLocations();
    [CompilerGeneratedAttribute]
public void set_RelatedLocations(IList`1<AnnotatedCodeLocationVersionOne> value);
    [CompilerGeneratedAttribute]
public SuppressionStatesVersionOne get_SuppressionStates();
    [CompilerGeneratedAttribute]
public void set_SuppressionStates(SuppressionStatesVersionOne value);
    [CompilerGeneratedAttribute]
public BaselineStateVersionOne get_BaselineState();
    [CompilerGeneratedAttribute]
public void set_BaselineState(BaselineStateVersionOne value);
    [CompilerGeneratedAttribute]
public IList`1<FixVersionOne> get_Fixes();
    [CompilerGeneratedAttribute]
public void set_Fixes(IList`1<FixVersionOne> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNodeVersionOne Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne.DeepClone();
    public ResultVersionOne DeepClone();
    private ISarifNodeVersionOne DeepCloneCore();
    private void Init(string ruleId, string ruleKey, ResultLevelVersionOne level, string message, FormattedRuleMessageVersionOne formattedRuleMessage, IEnumerable`1<LocationVersionOne> locations, string snippet, string id, string toolFingerprintContribution, IEnumerable`1<StackVersionOne> stacks, IEnumerable`1<CodeFlowVersionOne> codeFlows, IEnumerable`1<AnnotatedCodeLocationVersionOne> relatedLocations, SuppressionStatesVersionOne suppressionStates, BaselineStateVersionOne baselineState, IEnumerable`1<FixVersionOne> fixes, IDictionary`2<string, SerializedPropertyInfo> properties);
    public bool ShouldSerializeLevel();
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.VersionOne.ResultVersionOneEqualityComparer : object {
    internal static ResultVersionOneEqualityComparer Instance;
    private static ResultVersionOneEqualityComparer();
    public sealed virtual bool Equals(ResultVersionOne left, ResultVersionOne right);
    public sealed virtual int GetHashCode(ResultVersionOne obj);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public enum Microsoft.CodeAnalysis.Sarif.VersionOne.RuleConfigurationVersionOne : Enum {
    public int value__;
    public static RuleConfigurationVersionOne Unknown;
    public static RuleConfigurationVersionOne Enabled;
    public static RuleConfigurationVersionOne Disabled;
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public class Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOne : PropertyBagHolderVersionOne {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <MessageFormats>k__BackingField;
    [CompilerGeneratedAttribute]
private RuleConfigurationVersionOne <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private ResultLevelVersionOne <DefaultLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <HelpUri>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<RuleVersionOne> ValueComparer { get; }
    public SarifNodeKindVersionOne SarifNodeKindVersionOne { get; }
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string ShortDescription { get; public set; }
    [DataMemberAttribute]
public string FullDescription { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, string> MessageFormats { get; public set; }
    [DataMemberAttribute]
public RuleConfigurationVersionOne Configuration { get; public set; }
    [DataMemberAttribute]
public ResultLevelVersionOne DefaultLevel { get; public set; }
    [DataMemberAttribute]
public Uri HelpUri { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public RuleVersionOne(string id, string name, string shortDescription, string fullDescription, IDictionary`2<string, string> messageFormats, RuleConfigurationVersionOne configuration, ResultLevelVersionOne defaultLevel, Uri helpUri, IDictionary`2<string, SerializedPropertyInfo> properties);
    public RuleVersionOne(RuleVersionOne other);
    public static IEqualityComparer`1<RuleVersionOne> get_ValueComparer();
    public bool ValueEquals(RuleVersionOne other);
    public int ValueGetHashCode();
    public sealed virtual SarifNodeKindVersionOne get_SarifNodeKindVersionOne();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ShortDescription();
    [CompilerGeneratedAttribute]
public void set_ShortDescription(string value);
    [CompilerGeneratedAttribute]
public string get_FullDescription();
    [CompilerGeneratedAttribute]
public void set_FullDescription(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_MessageFormats();
    [CompilerGeneratedAttribute]
public void set_MessageFormats(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public RuleConfigurationVersionOne get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(RuleConfigurationVersionOne value);
    [CompilerGeneratedAttribute]
public ResultLevelVersionOne get_DefaultLevel();
    [CompilerGeneratedAttribute]
public void set_DefaultLevel(ResultLevelVersionOne value);
    [CompilerGeneratedAttribute]
public Uri get_HelpUri();
    [CompilerGeneratedAttribute]
public void set_HelpUri(Uri value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNodeVersionOne Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne.DeepClone();
    public RuleVersionOne DeepClone();
    private ISarifNodeVersionOne DeepCloneCore();
    private void Init(string id, string name, string shortDescription, string fullDescription, IDictionary`2<string, string> messageFormats, RuleConfigurationVersionOne configuration, ResultLevelVersionOne defaultLevel, Uri helpUri, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.VersionOne.RuleVersionOneEqualityComparer : object {
    internal static RuleVersionOneEqualityComparer Instance;
    private static RuleVersionOneEqualityComparer();
    public sealed virtual bool Equals(RuleVersionOne left, RuleVersionOne right);
    public sealed virtual int GetHashCode(RuleVersionOne obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public class Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOne : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private ToolVersionOne <Tool>k__BackingField;
    [CompilerGeneratedAttribute]
private InvocationVersionOne <Invocation>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, FileDataVersionOne> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, LogicalLocationVersionOne> <LogicalLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ResultVersionOne> <Results>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<NotificationVersionOne> <ToolNotifications>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<NotificationVersionOne> <ConfigurationNotifications>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, RuleVersionOne> <Rules>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StableId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AutomationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaselineId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Architecture>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<RunVersionOne> ValueComparer { get; }
    public SarifNodeKindVersionOne SarifNodeKindVersionOne { get; }
    [DataMemberAttribute]
public ToolVersionOne Tool { get; public set; }
    [DataMemberAttribute]
public InvocationVersionOne Invocation { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, FileDataVersionOne> Files { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, LogicalLocationVersionOne> LogicalLocations { get; public set; }
    [DataMemberAttribute]
public IList`1<ResultVersionOne> Results { get; public set; }
    [DataMemberAttribute]
public IList`1<NotificationVersionOne> ToolNotifications { get; public set; }
    [DataMemberAttribute]
public IList`1<NotificationVersionOne> ConfigurationNotifications { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, RuleVersionOne> Rules { get; public set; }
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public string StableId { get; public set; }
    [DataMemberAttribute]
public string AutomationId { get; public set; }
    [DataMemberAttribute]
public string BaselineId { get; public set; }
    [DataMemberAttribute]
public string Architecture { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public RunVersionOne(ToolVersionOne tool, InvocationVersionOne invocation, IDictionary`2<string, FileDataVersionOne> files, IDictionary`2<string, LogicalLocationVersionOne> logicalLocations, IEnumerable`1<ResultVersionOne> results, IEnumerable`1<NotificationVersionOne> toolNotifications, IEnumerable`1<NotificationVersionOne> configurationNotifications, IDictionary`2<string, RuleVersionOne> rules, string id, string stableId, string automationId, string baselineId, string architecture, IDictionary`2<string, SerializedPropertyInfo> properties);
    public RunVersionOne(RunVersionOne other);
    public static IEqualityComparer`1<RunVersionOne> get_ValueComparer();
    public bool ValueEquals(RunVersionOne other);
    public int ValueGetHashCode();
    public sealed virtual SarifNodeKindVersionOne get_SarifNodeKindVersionOne();
    [CompilerGeneratedAttribute]
public ToolVersionOne get_Tool();
    [CompilerGeneratedAttribute]
public void set_Tool(ToolVersionOne value);
    [CompilerGeneratedAttribute]
public InvocationVersionOne get_Invocation();
    [CompilerGeneratedAttribute]
public void set_Invocation(InvocationVersionOne value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, FileDataVersionOne> get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(IDictionary`2<string, FileDataVersionOne> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, LogicalLocationVersionOne> get_LogicalLocations();
    [CompilerGeneratedAttribute]
public void set_LogicalLocations(IDictionary`2<string, LogicalLocationVersionOne> value);
    [CompilerGeneratedAttribute]
public IList`1<ResultVersionOne> get_Results();
    [CompilerGeneratedAttribute]
public void set_Results(IList`1<ResultVersionOne> value);
    [CompilerGeneratedAttribute]
public IList`1<NotificationVersionOne> get_ToolNotifications();
    [CompilerGeneratedAttribute]
public void set_ToolNotifications(IList`1<NotificationVersionOne> value);
    [CompilerGeneratedAttribute]
public IList`1<NotificationVersionOne> get_ConfigurationNotifications();
    [CompilerGeneratedAttribute]
public void set_ConfigurationNotifications(IList`1<NotificationVersionOne> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, RuleVersionOne> get_Rules();
    [CompilerGeneratedAttribute]
public void set_Rules(IDictionary`2<string, RuleVersionOne> value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_StableId();
    [CompilerGeneratedAttribute]
public void set_StableId(string value);
    [CompilerGeneratedAttribute]
public string get_AutomationId();
    [CompilerGeneratedAttribute]
public void set_AutomationId(string value);
    [CompilerGeneratedAttribute]
public string get_BaselineId();
    [CompilerGeneratedAttribute]
public void set_BaselineId(string value);
    [CompilerGeneratedAttribute]
public string get_Architecture();
    [CompilerGeneratedAttribute]
public void set_Architecture(string value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNodeVersionOne Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne.DeepClone();
    public RunVersionOne DeepClone();
    private ISarifNodeVersionOne DeepCloneCore();
    private void Init(ToolVersionOne tool, InvocationVersionOne invocation, IDictionary`2<string, FileDataVersionOne> files, IDictionary`2<string, LogicalLocationVersionOne> logicalLocations, IEnumerable`1<ResultVersionOne> results, IEnumerable`1<NotificationVersionOne> toolNotifications, IEnumerable`1<NotificationVersionOne> configurationNotifications, IDictionary`2<string, RuleVersionOne> rules, string id, string stableId, string automationId, string baselineId, string architecture, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.VersionOne.RunVersionOneEqualityComparer : object {
    internal static RunVersionOneEqualityComparer Instance;
    private static RunVersionOneEqualityComparer();
    public sealed virtual bool Equals(RunVersionOne left, RunVersionOne right);
    public sealed virtual int GetHashCode(RunVersionOne obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public class Microsoft.CodeAnalysis.Sarif.VersionOne.SarifLogVersionOne : object {
    [CompilerGeneratedAttribute]
private Uri <SchemaUri>k__BackingField;
    [CompilerGeneratedAttribute]
private SarifVersionVersionOne <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<RunVersionOne> <Runs>k__BackingField;
    public static IEqualityComparer`1<SarifLogVersionOne> ValueComparer { get; }
    public SarifNodeKindVersionOne SarifNodeKindVersionOne { get; }
    [DataMemberAttribute]
public Uri SchemaUri { get; public set; }
    [DataMemberAttribute]
public SarifVersionVersionOne Version { get; public set; }
    [DataMemberAttribute]
public IList`1<RunVersionOne> Runs { get; public set; }
    public SarifLogVersionOne(Uri schemaUri, SarifVersionVersionOne version, IEnumerable`1<RunVersionOne> runs);
    public SarifLogVersionOne(SarifLogVersionOne other);
    public static IEqualityComparer`1<SarifLogVersionOne> get_ValueComparer();
    public bool ValueEquals(SarifLogVersionOne other);
    public int ValueGetHashCode();
    public sealed virtual SarifNodeKindVersionOne get_SarifNodeKindVersionOne();
    [CompilerGeneratedAttribute]
public Uri get_SchemaUri();
    [CompilerGeneratedAttribute]
public void set_SchemaUri(Uri value);
    [CompilerGeneratedAttribute]
public SarifVersionVersionOne get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(SarifVersionVersionOne value);
    [CompilerGeneratedAttribute]
public IList`1<RunVersionOne> get_Runs();
    [CompilerGeneratedAttribute]
public void set_Runs(IList`1<RunVersionOne> value);
    private sealed virtual override ISarifNodeVersionOne Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne.DeepClone();
    public SarifLogVersionOne DeepClone();
    private ISarifNodeVersionOne DeepCloneCore();
    private void Init(Uri schemaUri, SarifVersionVersionOne version, IEnumerable`1<RunVersionOne> runs);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.VersionOne.SarifLogVersionOneEqualityComparer : object {
    internal static SarifLogVersionOneEqualityComparer Instance;
    private static SarifLogVersionOneEqualityComparer();
    public sealed virtual bool Equals(SarifLogVersionOne left, SarifLogVersionOne right);
    public sealed virtual int GetHashCode(SarifLogVersionOne obj);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public enum Microsoft.CodeAnalysis.Sarif.VersionOne.SarifNodeKindVersionOne : Enum {
    public int value__;
    public static SarifNodeKindVersionOne None;
    public static SarifNodeKindVersionOne SarifLogVersionOne;
    public static SarifNodeKindVersionOne AnnotatedCodeLocationVersionOne;
    public static SarifNodeKindVersionOne AnnotationVersionOne;
    public static SarifNodeKindVersionOne CodeFlowVersionOne;
    public static SarifNodeKindVersionOne ExceptionDataVersionOne;
    public static SarifNodeKindVersionOne FileChangeVersionOne;
    public static SarifNodeKindVersionOne FileDataVersionOne;
    public static SarifNodeKindVersionOne FixVersionOne;
    public static SarifNodeKindVersionOne FormattedRuleMessageVersionOne;
    public static SarifNodeKindVersionOne HashVersionOne;
    public static SarifNodeKindVersionOne InvocationVersionOne;
    public static SarifNodeKindVersionOne LocationVersionOne;
    public static SarifNodeKindVersionOne LogicalLocationVersionOne;
    public static SarifNodeKindVersionOne NotificationVersionOne;
    public static SarifNodeKindVersionOne PhysicalLocationVersionOne;
    public static SarifNodeKindVersionOne RegionVersionOne;
    public static SarifNodeKindVersionOne ReplacementVersionOne;
    public static SarifNodeKindVersionOne ResultVersionOne;
    public static SarifNodeKindVersionOne RuleVersionOne;
    public static SarifNodeKindVersionOne RunVersionOne;
    public static SarifNodeKindVersionOne StackVersionOne;
    public static SarifNodeKindVersionOne StackFrameVersionOne;
    public static SarifNodeKindVersionOne ToolVersionOne;
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public abstract class Microsoft.CodeAnalysis.Sarif.VersionOne.SarifRewritingVisitorVersionOne : object {
    public virtual object Visit(ISarifNodeVersionOne node);
    public virtual object VisitActual(ISarifNodeVersionOne node);
    private T VisitNullChecked(T node);
    public virtual AnnotatedCodeLocationVersionOne VisitAnnotatedCodeLocationVersionOne(AnnotatedCodeLocationVersionOne node);
    public virtual AnnotationVersionOne VisitAnnotationVersionOne(AnnotationVersionOne node);
    public virtual CodeFlowVersionOne VisitCodeFlowVersionOne(CodeFlowVersionOne node);
    public virtual ExceptionDataVersionOne VisitExceptionDataVersionOne(ExceptionDataVersionOne node);
    public virtual FileChangeVersionOne VisitFileChangeVersionOne(FileChangeVersionOne node);
    public virtual FileDataVersionOne VisitFileDataVersionOne(FileDataVersionOne node);
    public virtual FixVersionOne VisitFixVersionOne(FixVersionOne node);
    public virtual FormattedRuleMessageVersionOne VisitFormattedRuleMessageVersionOne(FormattedRuleMessageVersionOne node);
    public virtual HashVersionOne VisitHashVersionOne(HashVersionOne node);
    public virtual InvocationVersionOne VisitInvocationVersionOne(InvocationVersionOne node);
    public virtual LocationVersionOne VisitLocationVersionOne(LocationVersionOne node);
    public virtual LogicalLocationVersionOne VisitLogicalLocationVersionOne(LogicalLocationVersionOne node);
    public virtual NotificationVersionOne VisitNotificationVersionOne(NotificationVersionOne node);
    public virtual PhysicalLocationVersionOne VisitPhysicalLocationVersionOne(PhysicalLocationVersionOne node);
    public virtual RegionVersionOne VisitRegionVersionOne(RegionVersionOne node);
    public virtual ReplacementVersionOne VisitReplacementVersionOne(ReplacementVersionOne node);
    public virtual ResultVersionOne VisitResultVersionOne(ResultVersionOne node);
    public virtual RuleVersionOne VisitRuleVersionOne(RuleVersionOne node);
    public virtual RunVersionOne VisitRunVersionOne(RunVersionOne node);
    public virtual SarifLogVersionOne VisitSarifLogVersionOne(SarifLogVersionOne node);
    public virtual StackFrameVersionOne VisitStackFrameVersionOne(StackFrameVersionOne node);
    public virtual StackVersionOne VisitStackVersionOne(StackVersionOne node);
    public virtual ToolVersionOne VisitToolVersionOne(ToolVersionOne node);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public enum Microsoft.CodeAnalysis.Sarif.VersionOne.SarifVersionVersionOne : Enum {
    public int value__;
    public static SarifVersionVersionOne Unknown;
    public static SarifVersionVersionOne OneZeroZero;
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public class Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOne : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UriBaseId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Module>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullyQualifiedLogicalName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogicalLocationKey>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<StackFrameVersionOne> ValueComparer { get; }
    public SarifNodeKindVersionOne SarifNodeKindVersionOne { get; }
    [DataMemberAttribute]
public string Message { get; public set; }
    [DataMemberAttribute]
public Uri Uri { get; public set; }
    [DataMemberAttribute]
public string UriBaseId { get; public set; }
    [DataMemberAttribute]
public int Line { get; public set; }
    [DataMemberAttribute]
public int Column { get; public set; }
    [DataMemberAttribute]
public string Module { get; public set; }
    [DataMemberAttribute]
public int ThreadId { get; public set; }
    [DataMemberAttribute]
public string FullyQualifiedLogicalName { get; public set; }
    [DataMemberAttribute]
public string LogicalLocationKey { get; public set; }
    [DataMemberAttribute]
public int Address { get; public set; }
    [DataMemberAttribute]
public int Offset { get; public set; }
    [DataMemberAttribute]
public IList`1<string> Parameters { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public StackFrameVersionOne(string message, Uri uri, string uriBaseId, int line, int column, string module, int threadId, string fullyQualifiedLogicalName, string logicalLocationKey, int address, int offset, IEnumerable`1<string> parameters, IDictionary`2<string, SerializedPropertyInfo> properties);
    public StackFrameVersionOne(StackFrameVersionOne other);
    public static IEqualityComparer`1<StackFrameVersionOne> get_ValueComparer();
    public bool ValueEquals(StackFrameVersionOne other);
    public int ValueGetHashCode();
    public sealed virtual SarifNodeKindVersionOne get_SarifNodeKindVersionOne();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public string get_UriBaseId();
    [CompilerGeneratedAttribute]
public void set_UriBaseId(string value);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(int value);
    [CompilerGeneratedAttribute]
public int get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(int value);
    [CompilerGeneratedAttribute]
public string get_Module();
    [CompilerGeneratedAttribute]
public void set_Module(string value);
    [CompilerGeneratedAttribute]
public int get_ThreadId();
    [CompilerGeneratedAttribute]
public void set_ThreadId(int value);
    [CompilerGeneratedAttribute]
public string get_FullyQualifiedLogicalName();
    [CompilerGeneratedAttribute]
public void set_FullyQualifiedLogicalName(string value);
    [CompilerGeneratedAttribute]
public string get_LogicalLocationKey();
    [CompilerGeneratedAttribute]
public void set_LogicalLocationKey(string value);
    [CompilerGeneratedAttribute]
public int get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(int value);
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(int value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(IList`1<string> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNodeVersionOne Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne.DeepClone();
    public StackFrameVersionOne DeepClone();
    private ISarifNodeVersionOne DeepCloneCore();
    private void Init(string message, Uri uri, string uriBaseId, int line, int column, string module, int threadId, string fullyQualifiedLogicalName, string logicalLocationKey, int address, int offset, IEnumerable`1<string> parameters, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.VersionOne.StackFrameVersionOneEqualityComparer : object {
    internal static StackFrameVersionOneEqualityComparer Instance;
    private static StackFrameVersionOneEqualityComparer();
    public sealed virtual bool Equals(StackFrameVersionOne left, StackFrameVersionOne right);
    public sealed virtual int GetHashCode(StackFrameVersionOne obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public class Microsoft.CodeAnalysis.Sarif.VersionOne.StackVersionOne : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<StackFrameVersionOne> <Frames>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<StackVersionOne> ValueComparer { get; }
    public SarifNodeKindVersionOne SarifNodeKindVersionOne { get; }
    [DataMemberAttribute]
public string Message { get; public set; }
    [DataMemberAttribute]
public IList`1<StackFrameVersionOne> Frames { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public StackVersionOne(string message, IEnumerable`1<StackFrameVersionOne> frames, IDictionary`2<string, SerializedPropertyInfo> properties);
    public StackVersionOne(StackVersionOne other);
    public static IEqualityComparer`1<StackVersionOne> get_ValueComparer();
    public bool ValueEquals(StackVersionOne other);
    public int ValueGetHashCode();
    public sealed virtual SarifNodeKindVersionOne get_SarifNodeKindVersionOne();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public IList`1<StackFrameVersionOne> get_Frames();
    [CompilerGeneratedAttribute]
public void set_Frames(IList`1<StackFrameVersionOne> value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNodeVersionOne Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne.DeepClone();
    public StackVersionOne DeepClone();
    private ISarifNodeVersionOne DeepCloneCore();
    private void Init(string message, IEnumerable`1<StackFrameVersionOne> frames, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.VersionOne.StackVersionOneEqualityComparer : object {
    internal static StackVersionOneEqualityComparer Instance;
    private static StackVersionOneEqualityComparer();
    public sealed virtual bool Equals(StackVersionOne left, StackVersionOne right);
    public sealed virtual int GetHashCode(StackVersionOne obj);
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public enum Microsoft.CodeAnalysis.Sarif.VersionOne.SuppressionStatesVersionOne : Enum {
    public int value__;
    public static SuppressionStatesVersionOne None;
    public static SuppressionStatesVersionOne SuppressedInSource;
    public static SuppressionStatesVersionOne SuppressedExternally;
}
public class Microsoft.CodeAnalysis.Sarif.VersionOne.TagsCollectionVersionOne : object {
    internal static string TagsPropertyName;
    private static ISet`1<string> Empty;
    private IPropertyBagHolderVersionOne _propertyBagHolder;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public TagsCollectionVersionOne(IPropertyBagHolderVersionOne propertyBagHolder);
    private static TagsCollectionVersionOne();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Add(string item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(string item);
    public sealed virtual void CopyTo(String[] array, int arrayIndex);
    public sealed virtual void ExceptWith(IEnumerable`1<string> other);
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    public sealed virtual void IntersectWith(IEnumerable`1<string> other);
    public sealed virtual bool IsProperSubsetOf(IEnumerable`1<string> other);
    public sealed virtual bool IsProperSupersetOf(IEnumerable`1<string> other);
    public sealed virtual bool IsSubsetOf(IEnumerable`1<string> other);
    public sealed virtual bool IsSupersetOf(IEnumerable`1<string> other);
    public sealed virtual bool Overlaps(IEnumerable`1<string> other);
    public sealed virtual bool Remove(string item);
    public sealed virtual bool SetEquals(IEnumerable`1<string> other);
    public sealed virtual void SymmetricExceptWith(IEnumerable`1<string> other);
    public sealed virtual void UnionWith(IEnumerable`1<string> other);
    private sealed virtual override void System.Collections.Generic.ICollection<System.String>.Add(string item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private ISet`1<string> GetTags();
    private void SetTags(IEnumerable`1<string> tags);
    private bool AddCore(string item);
    private IEnumerator`1<string> GetEnumeratorCore();
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public enum Microsoft.CodeAnalysis.Sarif.VersionOne.TaintKindVersionOne : Enum {
    public int value__;
    public static TaintKindVersionOne Unknown;
    public static TaintKindVersionOne Sink;
    public static TaintKindVersionOne Source;
    public static TaintKindVersionOne Sanitizer;
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
public class Microsoft.CodeAnalysis.Sarif.VersionOne.ToolVersionOne : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SemanticVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SarifLoggerVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    public static IEqualityComparer`1<ToolVersionOne> ValueComparer { get; }
    public SarifNodeKindVersionOne SarifNodeKindVersionOne { get; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string FullName { get; public set; }
    [DataMemberAttribute]
public string Version { get; public set; }
    [DataMemberAttribute]
public string SemanticVersion { get; public set; }
    [DataMemberAttribute]
public string FileVersion { get; public set; }
    [DataMemberAttribute]
public string SarifLoggerVersion { get; public set; }
    [DataMemberAttribute]
public string Language { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public ToolVersionOne(string name, string fullName, string version, string semanticVersion, string fileVersion, string sarifLoggerVersion, string language, IDictionary`2<string, SerializedPropertyInfo> properties);
    public ToolVersionOne(ToolVersionOne other);
    public static IEqualityComparer`1<ToolVersionOne> get_ValueComparer();
    public bool ValueEquals(ToolVersionOne other);
    public int ValueGetHashCode();
    public sealed virtual SarifNodeKindVersionOne get_SarifNodeKindVersionOne();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
public void set_FullName(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_SemanticVersion();
    [CompilerGeneratedAttribute]
public void set_SemanticVersion(string value);
    [CompilerGeneratedAttribute]
public string get_FileVersion();
    [CompilerGeneratedAttribute]
public void set_FileVersion(string value);
    [CompilerGeneratedAttribute]
public string get_SarifLoggerVersion();
    [CompilerGeneratedAttribute]
public void set_SarifLoggerVersion(string value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNodeVersionOne Microsoft.CodeAnalysis.Sarif.VersionOne.ISarifNodeVersionOne.DeepClone();
    public ToolVersionOne DeepClone();
    private ISarifNodeVersionOne DeepCloneCore();
    private void Init(string name, string fullName, string version, string semanticVersion, string fileVersion, string sarifLoggerVersion, string language, IDictionary`2<string, SerializedPropertyInfo> properties);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "0.52.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.VersionOne.ToolVersionOneEqualityComparer : object {
    internal static ToolVersionOneEqualityComparer Instance;
    private static ToolVersionOneEqualityComparer();
    public sealed virtual bool Equals(ToolVersionOne left, ToolVersionOne right);
    public sealed virtual int GetHashCode(ToolVersionOne obj);
}
public class Microsoft.CodeAnalysis.Sarif.Visitors.AddFileReferencesVisitor : SarifRewritingVisitor {
    private Run _currentRun;
    private IDictionary`2<ArtifactLocation, int> _fileToIndexMap;
    public virtual Run VisitRun(Run run);
    public virtual ArtifactLocation VisitArtifactLocation(ArtifactLocation node);
}
public class Microsoft.CodeAnalysis.Sarif.Visitors.ExtractAllArtifactLocationsVisitor : SarifRewritingVisitor {
    private Run _currentRun;
    [CompilerGeneratedAttribute]
private HashSet`1<ArtifactLocation> <AllArtifactLocations>k__BackingField;
    public HashSet`1<ArtifactLocation> AllArtifactLocations { get; private set; }
    [CompilerGeneratedAttribute]
public HashSet`1<ArtifactLocation> get_AllArtifactLocations();
    [CompilerGeneratedAttribute]
private void set_AllArtifactLocations(HashSet`1<ArtifactLocation> value);
    public virtual ArtifactLocation VisitArtifactLocation(ArtifactLocation node);
    public virtual Run VisitRun(Run node);
}
public class Microsoft.CodeAnalysis.Sarif.Visitors.FilteringVisitor : SarifRewritingVisitor {
    private IncludeResultPredicate predicate;
    private Run currentRun;
    private bool includeReferencedObjects;
    private IList`1<Result> filteredResults;
    private IList`1<Artifact> filteredArtifacts;
    private IDictionary`2<int, int> remappedArtifactIndexDictionary;
    public FilteringVisitor(IncludeResultPredicate predicate);
    public virtual Run VisitRun(Run node);
    public virtual Result VisitResult(Result node);
    public virtual ArtifactLocation VisitArtifactLocation(ArtifactLocation node);
}
public class Microsoft.CodeAnalysis.Sarif.Visitors.GitHubIngestionVisitor : SarifRewritingVisitor {
    internal static int s_MaxResults;
    private Run run;
    private int ruleIndex;
    private IList`1<Artifact> artifacts;
    private IList`1<ThreadFlowLocation> threadFlowLocations;
    private static GitHubIngestionVisitor();
    public virtual Run VisitRun(Run node);
    public virtual ThreadFlowLocation VisitThreadFlowLocation(ThreadFlowLocation node);
    public virtual ArtifactLocation VisitArtifactLocation(ArtifactLocation node);
    public virtual Result VisitResult(Result node);
    public virtual Message VisitMessage(Message message);
    private static void MergeProperties(PropertyBagHolder target, PropertyBagHolder source);
}
public class Microsoft.CodeAnalysis.Sarif.Visitors.InsertOptionalDataVisitor : SarifRewritingVisitor {
    private static Regex versionControlPropertiesRegex;
    private IFileSystem _fileSystem;
    private ProcessRunner _processRunner;
    private Run _run;
    private HashSet`1<Uri> _repoRootUris;
    private GitHelper _gitHelper;
    private int _ruleIndex;
    private OptionallyEmittedData _dataToInsert;
    private IDictionary`2<string, ArtifactLocation> _originalUriBaseIds;
    private IEnumerable`1<string> _insertProperties;
    private static string Name;
    private static string Email;
    private static string CommitSha;
    [CompilerGeneratedAttribute]
private FileRegionsCache <FileRegionsCache>k__BackingField;
    private static string RepoRootUriBaseIdStem;
    public static string ContextRegionHash;
    public FileRegionsCache FileRegionsCache { get; public set; }
    public InsertOptionalDataVisitor(OptionallyEmittedData dataToInsert, FileRegionsCache fileRegionsCache, Run run, IEnumerable`1<string> insertProperties);
    public InsertOptionalDataVisitor(OptionallyEmittedData dataToInsert, FileRegionsCache fileRegionsCache, IDictionary`2<string, ArtifactLocation> originalUriBaseIds, IFileSystem fileSystem, ProcessRunner processRunner, IEnumerable`1<string> insertProperties);
    private static InsertOptionalDataVisitor();
    [CompilerGeneratedAttribute]
public FileRegionsCache get_FileRegionsCache();
    [CompilerGeneratedAttribute]
public void set_FileRegionsCache(FileRegionsCache value);
    public virtual Run VisitRun(Run node);
    public virtual PhysicalLocation VisitPhysicalLocation(PhysicalLocation node);
    public virtual Artifact VisitArtifact(Artifact node);
    public virtual ArtifactLocation VisitArtifactLocation(ArtifactLocation node);
    public virtual Result VisitResult(Result node);
    public virtual Message VisitMessage(Message message);
    private List`1<VersionControlDetails> CreateVersionControlProvenance();
    private ArtifactLocation ExpressRelativeToRepoRoot(ArtifactLocation node);
    private string GetUriBaseIdForRepoRoot(Uri repoRootUri);
    private string GetNextRepoRootUriBaseId();
    private string GetFilePath(ArtifactLocation node);
    private Uri GetResolvedArtifactLocationUri(ArtifactLocation artifactLocation);
    internal static string GetUriBaseId(int i);
}
public class Microsoft.CodeAnalysis.Sarif.Visitors.MakeUrisAbsoluteVisitor : SarifRewritingVisitor {
    private Run _run;
    public virtual Run VisitRun(Run node);
    public virtual ArtifactLocation VisitArtifactLocation(ArtifactLocation node);
    internal static Uri CombineUris(Uri absoluteBaseUri, Uri relativeUri);
}
public class Microsoft.CodeAnalysis.Sarif.Visitors.PartitionFunction`1 : MulticastDelegate {
    public PartitionFunction`1(object object, IntPtr method);
    public virtual T Invoke(Result result);
    public virtual IAsyncResult BeginInvoke(Result result, AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
public class Microsoft.CodeAnalysis.Sarif.Visitors.PartitioningVisitor`1 : SarifRewritingVisitor {
    private static string PartitionValuePropertyName;
    private PartitionFunction`1<T> partitionFunction;
    private bool deepClone;
    private bool remapRules;
    private SarifLog originalLog;
    private int currentRunIndex;
    private IList`1<Artifact> currentRunArtifacts;
    private T currentPartitionValue;
    private bool inResult;
    private List`1<PartitionRunInfo<T>> partitionRunInfos;
    private HashSet`1<T> partitionValues;
    private Dictionary`2<T, SarifLog> partitionLogDictionary;
    public PartitioningVisitor`1(PartitionFunction`1<T> partitionFunction, bool deepClone, bool remapRules);
    public Dictionary`2<T, SarifLog> GetPartitionLogs();
    public virtual SarifLog VisitSarifLog(SarifLog node);
    public virtual Run VisitRun(Run node);
    public virtual Result VisitResult(Result node);
    public virtual ArtifactLocation VisitArtifactLocation(ArtifactLocation node);
    private void CreatePartitionLogDictionary();
    private SarifLog CreatePartitionLog(T partitionValue);
    private IList`1<ReportingDescriptor> RemapResultsToRules(Run partitionRun, List`1<Result> results);
}
public class Microsoft.CodeAnalysis.Sarif.Visitors.PerRunPerRuleSplittingVisitor : SplittingVisitor {
    private Dictionary`2<string, SarifLog> _ruleToSarifLogMap;
    public PerRunPerRuleSplittingVisitor(Func`2<Result, bool> filteringStrategy);
    public virtual Run VisitRun(Run node);
    public virtual Result VisitResult(Result node);
}
public class Microsoft.CodeAnalysis.Sarif.Visitors.PerRunPerTargetPerRuleSplittingVisitor : SplittingVisitor {
    private static ArtifactLocation s_emptyArtifactLocation;
    private Dictionary`2<string, Dictionary`2<string, SarifLog>> _targetToRuleMap;
    public PerRunPerTargetPerRuleSplittingVisitor(Func`2<Result, bool> filteringStrategy);
    private static PerRunPerTargetPerRuleSplittingVisitor();
    public virtual Run VisitRun(Run node);
    public virtual Result VisitResult(Result node);
}
public class Microsoft.CodeAnalysis.Sarif.Visitors.PerRunPerTargetSplittingVisitor : SplittingVisitor {
    private static ArtifactLocation s_emptyArtifactLocation;
    private Dictionary`2<string, SarifLog> _targetMap;
    public PerRunPerTargetSplittingVisitor(Func`2<Result, bool> filteringStrategy);
    private static PerRunPerTargetSplittingVisitor();
    public virtual Run VisitRun(Run node);
    public virtual Result VisitResult(Result node);
}
public class Microsoft.CodeAnalysis.Sarif.Visitors.RebaseUriVisitor : SarifRewritingVisitor {
    private Run _currentRun;
    private Uri _baseUri;
    private string _uriBaseId;
    private bool _rebaseRelativeUris;
    public RebaseUriVisitor(string uriBaseId, Uri baseUri, bool rebaseRelativeUris);
    public virtual ArtifactLocation VisitArtifactLocation(ArtifactLocation node);
    public virtual Run VisitRun(Run node);
}
public class Microsoft.CodeAnalysis.Sarif.Visitors.RemoveOptionalDataVisitor : SarifRewritingVisitor {
    private OptionallyEmittedData _dataToRemove;
    public RemoveOptionalDataVisitor(OptionallyEmittedData optionallyEmittedData);
    public virtual Invocation VisitInvocation(Invocation node);
    public virtual Notification VisitNotification(Notification node);
    public virtual PhysicalLocation VisitPhysicalLocation(PhysicalLocation node);
    public virtual Artifact VisitArtifact(Artifact node);
    public virtual Result VisitResult(Result node);
}
public class Microsoft.CodeAnalysis.Sarif.Visitors.RunMergingVisitor : SarifRewritingVisitor {
    [CompilerGeneratedAttribute]
private List`1<Result> <Results>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Artifact> <Artifacts>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<LogicalLocation> <LogicalLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ReportingDescriptor> <Rules>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, int> <RuleIdToIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<OrderSensitiveValueComparisonList`1<LogicalLocation>, int> <LogicalLocationToIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<OrderSensitiveValueComparisonList`1<Artifact>, int> <ArtifactToIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Run <CurrentRun>k__BackingField;
    private List`1<Result> Results { get; }
    private List`1<Artifact> Artifacts { get; }
    private List`1<LogicalLocation> LogicalLocations { get; }
    private List`1<ReportingDescriptor> Rules { get; }
    private Dictionary`2<string, int> RuleIdToIndex { get; }
    private Dictionary`2<OrderSensitiveValueComparisonList`1<LogicalLocation>, int> LogicalLocationToIndex { get; }
    private Dictionary`2<OrderSensitiveValueComparisonList`1<Artifact>, int> ArtifactToIndex { get; }
    public Run CurrentRun { get; public set; }
    [CompilerGeneratedAttribute]
private List`1<Result> get_Results();
    [CompilerGeneratedAttribute]
private List`1<Artifact> get_Artifacts();
    [CompilerGeneratedAttribute]
private List`1<LogicalLocation> get_LogicalLocations();
    [CompilerGeneratedAttribute]
private List`1<ReportingDescriptor> get_Rules();
    [CompilerGeneratedAttribute]
private Dictionary`2<string, int> get_RuleIdToIndex();
    [CompilerGeneratedAttribute]
private Dictionary`2<OrderSensitiveValueComparisonList`1<LogicalLocation>, int> get_LogicalLocationToIndex();
    [CompilerGeneratedAttribute]
private Dictionary`2<OrderSensitiveValueComparisonList`1<Artifact>, int> get_ArtifactToIndex();
    [CompilerGeneratedAttribute]
public Run get_CurrentRun();
    [CompilerGeneratedAttribute]
public void set_CurrentRun(Run value);
    public void PopulateWithMerged(Run targetRun);
    public virtual Run VisitRun(Run node);
    public virtual Result VisitResult(Result node);
    public virtual LogicalLocation VisitLogicalLocation(LogicalLocation node);
    private int CacheLogicalLocation(LogicalLocation logicalLocation, IList`1<LogicalLocation> currentLogicalLocations);
    public virtual ArtifactLocation VisitArtifactLocation(ArtifactLocation node);
    private int CacheArtifact(Artifact artifact, IList`1<Artifact> currentArtifacts);
    private static OrderSensitiveValueComparisonList`1<Artifact> ConstructArtifactsChain(Artifact currentArtifact, IList`1<Artifact> existingArtifacts);
    private static OrderSensitiveValueComparisonList`1<LogicalLocation> ConstructLogicalLocationsChain(LogicalLocation currentLogicalLocation, IList`1<LogicalLocation> existingLogicalLocations);
}
public class Microsoft.CodeAnalysis.Sarif.Visitors.SarifCurrentToVersionOneVisitor : SarifRewritingVisitor {
    private static SarifVersion FromSarifVersion;
    private static string FromPropertyBagPrefix;
    private Run _currentV2Run;
    private RunVersionOne _currentRun;
    private IDictionary`2<string, int> _v1FileKeyToV2IndexMap;
    private IDictionary`2<int, string> _v2FileIndexToV1KeyMap;
    private IDictionary`2<int, string> _v2RuleIndexToV1KeyMap;
    [CompilerGeneratedAttribute]
private bool <EmbedVersionTwoContentInPropertyBag>k__BackingField;
    [CompilerGeneratedAttribute]
private SarifLogVersionOne <SarifLogVersionOne>k__BackingField;
    public bool EmbedVersionTwoContentInPropertyBag { get; public set; }
    public SarifLogVersionOne SarifLogVersionOne { get; private set; }
    private static SarifCurrentToVersionOneVisitor();
    [CompilerGeneratedAttribute]
public bool get_EmbedVersionTwoContentInPropertyBag();
    [CompilerGeneratedAttribute]
public void set_EmbedVersionTwoContentInPropertyBag(bool value);
    [CompilerGeneratedAttribute]
public SarifLogVersionOne get_SarifLogVersionOne();
    [CompilerGeneratedAttribute]
private void set_SarifLogVersionOne(SarifLogVersionOne value);
    public virtual SarifLog VisitSarifLog(SarifLog v2SarifLog);
    internal AnnotatedCodeLocationVersionOne CreateAnnotatedCodeLocationVersionOne(Location v2Location);
    internal AnnotatedCodeLocationVersionOne CreateAnnotatedCodeLocationVersionOne(ThreadFlowLocation v2ThreadFlowLocation);
    internal AnnotationVersionOne CreateAnnotationVersionOne(Region v2Region);
    internal ExceptionDataVersionOne CreateExceptionDataVersionOne(ExceptionData v2ExceptionData);
    internal FileChangeVersionOne CreateFileChangeVersionOne(ArtifactChange v2FileChange);
    private string GetFileEncodingName(Uri uri);
    private Encoding GetFileEncoding(string encodingName);
    private FileDataVersionOne CreateFileDataVersionOne(Artifact v2FileData);
    internal FixVersionOne CreateFixVersionOne(Fix v2Fix);
    internal IList`1<HashVersionOne> CreateHashVersionOneListFromV2Hashes(IDictionary`2<string, string> v2Hashes);
    internal InvocationVersionOne CreateInvocationVersionOne(Invocation v2Invocation);
    internal LocationVersionOne CreateLocationVersionOne(Location v2Location);
    internal LogicalLocationVersionOne CreateLogicalLocationVersionOne(LogicalLocation v2LogicalLocation);
    internal NotificationVersionOne CreateNotificationVersionOne(Notification v2Notification);
    internal PhysicalLocationVersionOne CreatePhysicalLocationVersionOne(PhysicalLocation v2PhysicalLocation);
    internal PhysicalLocationVersionOne CreatePhysicalLocationVersionOne(ArtifactLocation v2FileLocation);
    internal PhysicalLocationVersionOne CreatePhysicalLocationVersionOne(Region v2Region);
    internal RegionVersionOne CreateRegionVersionOne(Region v2Region, Uri uri);
    internal string CreateToolFingerprintContributionVersionOne(IDictionary`2<string, string> v2PartialFingerprints);
    private int ConvertCharOffsetToByteOffset(int charOffset, Uri uri);
    private int GetRegionByteLength(Region v2Region, Uri uri);
    private int GetRegionEndColumn(Region v2Region, Uri uri);
    private Stream GetContentStream(Uri uri, Encoding& encoding);
    private StreamReader GetFileStreamReader(Uri uri, Encoding& encoding);
    internal ReplacementVersionOne CreateReplacementVersionOne(Replacement v2Replacement, Encoding encoding);
    internal Dictionary`2<string, string> CreateResponseFilesDictionary(IList`1<ArtifactLocation> v2ResponseFilesList);
    internal ResultVersionOne CreateResultVersionOne(Result v2Result);
    internal static RuleVersionOne CreateRuleVersionOne(ReportingDescriptor v2ReportingDescriptor);
    private static IDictionary`2<string, string> ConvertToV1MessageStringsDictionary(IDictionary`2<string, MultiformatMessageString> v2MessageStringsDictionary);
    internal RunVersionOne CreateRunVersionOne(Run v2Run);
    private static void CreateFileKeyIndexMappings(IList`1<Artifact> v2Files, IDictionary`2& fileKeyToIndexDictionary, IDictionary`2& fileIndexToKeyDictionary);
    private static string CreateFileDictionaryKey(Artifact v2File, IList`1<Artifact> v2Files);
    private IDictionary`2<string, FileDataVersionOne> CreateFileDataVersionOneDictionary();
    private IDictionary`2<string, LogicalLocationVersionOne> CreateLogicalLocationVersionOneDictionary(IList`1<LogicalLocation> logicalLocations);
    private static IDictionary`2<int, string> CreateV2RuleIndexToV1KeyMapping(IList`1<ReportingDescriptor> rules);
    private static string GetV1RuleKeyFromV2Index(int ruleIndex, IDictionary`2<int, string> v2RuleIndexToV1KeyMap);
    private static IDictionary`2<string, RuleVersionOne> ConvertRulesArrayToDictionary(IList`1<ReportingDescriptor> v2Rules, IDictionary`2<int, string> v2RuleIndexToV1KeyMap);
    internal StackVersionOne CreateStackVersionOne(Stack v2Stack);
    internal StackFrameVersionOne CreateStackFrameVersionOne(StackFrame v2StackFrame);
    internal ToolVersionOne CreateToolVersionOne(Tool v2Tool, string language);
}
public static class Microsoft.CodeAnalysis.Sarif.Visitors.SarifTransformerUtilities : object {
    private static int CommitShaLength;
    private static string authorMailString;
    private static Regex AuthorRegex;
    private static Regex AuthorTZRegex;
    private static Regex AuthorTimeRegex;
    private static Regex AuthorMailRegex;
    private static Regex CommitShaRegex;
    public static Dictionary`2<SarifVersion, string> PropertyBagTransformerItemPrefixes;
    public static String[] DefaultFullyQualifiedNameDelimiters;
    public static JsonSerializerSettings JsonSettingsV1Indented;
    public static JsonSerializerSettings JsonSettingsIndented;
    public static JsonSerializerSettings JsonSettingsV1Compact;
    public static Dictionary`2<AlgorithmKindVersionOne, string> AlgorithmKindNameMap;
    public static Dictionary`2<string, AlgorithmKindVersionOne> AlgorithmNameKindMap;
    private static SarifTransformerUtilities();
    public static string CreateDisambiguatedName(string baseName, int index);
    public static FailureLevel CreateFailureLevel(NotificationLevelVersionOne v1NotificationLevel);
    public static NotificationLevelVersionOne CreateNotificationLevelVersionOne(FailureLevel v2FailureLevel);
    public static FailureLevel CreateReportingConfigurationDefaultLevel(ResultLevelVersionOne v1ResultLevel);
    public static FailureLevel CreateFailureLevel(ResultLevelVersionOne v1ResultLevel);
    public static ResultKind CreateResultKind(ResultLevelVersionOne v1ResultLevel);
    public static ResultLevelVersionOne CreateResultLevelVersionOne(FailureLevel v2DefaultLevel);
    public static ResultLevelVersionOne CreateResultLevelVersionOne(FailureLevel v2FailureLevel, ResultKind v2ResultKind);
    private static ResultLevelVersionOne CreateResultLevelVersionOneFromResultKind(ResultKind v2ResultKind);
    public static List`1<Suppression> CreateSuppressions(SuppressionStatesVersionOne v1SuppressionStates);
    public static SuppressionStatesVersionOne CreateSuppressionStatesVersionOne(IList`1<Suppression> v2Suppressions);
    public static BaselineState CreateBaselineState(BaselineStateVersionOne v1BaselineState);
    public static BaselineStateVersionOne CreateBaselineStateVersionOne(BaselineState v2BaselineState);
    public static ThreadFlowLocationImportance CreateThreadFlowLocationImportance(AnnotatedCodeLocationImportanceVersionOne v1AnnotatedCodeLocationImportance);
    public static AnnotatedCodeLocationImportanceVersionOne CreateAnnotatedCodeLocationImportance(ThreadFlowLocationImportance v2ThreadFlowLocationImportance);
    public static IEnumerable`1<IBlameHunk> ParseBlameInformation(string blameText);
}
public class Microsoft.CodeAnalysis.Sarif.Visitors.SarifVersionOneToCurrentVisitor : SarifRewritingVisitorVersionOne {
    private static SarifVersion FromSarifVersion;
    private static string FromPropertyBagPrefix;
    private Run _currentRun;
    private int _threadFlowLocationNestingLevel;
    private IDictionary`2<string, int> _v1FileKeytoV2IndexMap;
    private IDictionary`2<string, int> _v1RuleKeyToV2IndexMap;
    private IDictionary`2<string, string> _v1KeyToFullyQualifiedNameMap;
    private IDictionary`2<LogicalLocation, int> _v2LogicalLocationToIndexMap;
    private IDictionary`2<string, LogicalLocation> _v1KeyToV2LogicalLocationMap;
    private IDictionary`2<string, string> _v1LogicalLocationKeyToDecoratedNameMap;
    [CompilerGeneratedAttribute]
private SarifLog <SarifLog>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmbedVersionOneContentInPropertyBag>k__BackingField;
    private static string DottedQuadFileVersionPattern;
    private static Regex s_dottedQuadFileVersionRegex;
    public SarifLog SarifLog { get; private set; }
    public bool EmbedVersionOneContentInPropertyBag { get; public set; }
    private static SarifVersionOneToCurrentVisitor();
    [CompilerGeneratedAttribute]
public SarifLog get_SarifLog();
    [CompilerGeneratedAttribute]
private void set_SarifLog(SarifLog value);
    [CompilerGeneratedAttribute]
public bool get_EmbedVersionOneContentInPropertyBag();
    [CompilerGeneratedAttribute]
public void set_EmbedVersionOneContentInPropertyBag(bool value);
    public virtual SarifLogVersionOne VisitSarifLogVersionOne(SarifLogVersionOne v1SarifLog);
    internal CodeFlow CreateCodeFlow(CodeFlowVersionOne v1CodeFlow);
    internal ThreadFlowLocation CreateThreadFlowLocation(AnnotatedCodeLocationVersionOne v1AnnotatedCodeLocation);
    internal ExceptionData CreateExceptionData(ExceptionDataVersionOne v1ExceptionData);
    internal ArtifactChange CreateFileChange(FileChangeVersionOne v1FileChange);
    internal Artifact CreateFileData(FileDataVersionOne v1FileData, string key);
    internal ArtifactLocation CreateFileLocation(Uri uri, string uriBaseId);
    internal ArtifactLocation CreateFileLocation(PhysicalLocationVersionOne v1PhysicalLocation);
    internal ArtifactLocation CreateFileLocation(FileChangeVersionOne v1FileChange);
    internal Fix CreateFix(FixVersionOne v1Fix);
    internal KeyValuePair`2<string, string> CreateHash(HashVersionOne v1Hash);
    internal Invocation CreateInvocation(InvocationVersionOne v1Invocation, IList`1<NotificationVersionOne> v1ToolNotifications, IList`1<NotificationVersionOne> v1ConfigurationNotifications);
    internal Invocation CreateInvocation(InvocationVersionOne v1Invocation);
    internal Location CreateLocation(LocationVersionOne v1Location);
    internal Location CreateLocation(AnnotatedCodeLocationVersionOne v1AnnotatedCodeLocation);
    internal Location CreateLocation(string fullyQualifiedLogicalName, string logicalLocationKey, string message, Uri uri, string uriBaseId, int column, int line, int address, int offset);
    internal LogicalLocation CreateLogicalLocation(LogicalLocationVersionOne v1LogicalLocation, string fullyQualifiedName, string logicalLocationKey);
    internal string GetLogicalLocationName(string fullyQualifiedLogicalName);
    internal Message CreateMessage(string text);
    internal MultiformatMessageString CreateMultiformatMessageString(string text);
    internal Notification CreateNotification(NotificationVersionOne v1Notification);
    private List`1<Location> CreateLocations(PhysicalLocationVersionOne v1PhysicalLocation);
    internal Replacement CreateReplacement(ReplacementVersionOne v1Replacement);
    internal IList`1<ArtifactLocation> CreateResponseFilesList(IDictionary`2<string, string> responseFileToContentsDictionary);
    internal PhysicalLocation CreatePhysicalLocation(PhysicalLocationVersionOne v1PhysicalLocation);
    internal Region CreateRegion(RegionVersionOne v1Region);
    internal Region CreateRegion(PhysicalLocationVersionOne v1AnnotationLocation, PhysicalLocationVersionOne v1PhysicalLocation, string message);
    internal Region CreateRegion(int startColumn, int startLine, int endColumn, int endLine, int length, int offset);
    internal Result CreateResult(ResultVersionOne v1Result);
    internal ReportingDescriptor CreateRule(RuleVersionOne v1Rule);
    internal Run CreateRun(RunVersionOne v1Run);
    private static IDictionary`2<string, int> CreateFileKeyToIndexMapping(IDictionary`2<string, FileDataVersionOne> v1Files);
    private static IDictionary`2<string, int> CreateRuleKeyToIndexMapping(IDictionary`2<string, RuleVersionOne> v1Rules);
    private int GetRuleIndexForRuleKey(string ruleKey, IDictionary`2<string, int> v1RuleKeyToV2IndexMap);
    private void PopulateLogicalLocation(Run v2Run, IDictionary`2<string, LogicalLocationVersionOne> v1LogicalLocations, IDictionary`2<string, string> fullyQualifiedNameToDecoratedNameMap, IDictionary`2<string, string> keyToFullyQualifiedNameMap, string logicalLocationKey, LogicalLocationVersionOne v1LogicalLocation, HashSet`1<string> populatedKeys);
    internal Stack CreateStack(StackVersionOne v1Stack);
    internal StackFrame CreateStackFrame(StackFrameVersionOne v1StackFrame);
    internal Tool CreateTool(ToolVersionOne v1Tool);
}
public class Microsoft.CodeAnalysis.Sarif.Visitors.SortingVisitor : SarifRewritingVisitor {
    private IDictionary`2<int, int> ruleIndexMap;
    private IDictionary`2<int, int> artifactIndexMap;
    public virtual SarifLog VisitSarifLog(SarifLog node);
    public virtual Run VisitRun(Run node);
    public virtual ToolComponent VisitToolComponent(ToolComponent node);
    public virtual Result VisitResult(Result node);
    public virtual CodeFlow VisitCodeFlow(CodeFlow node);
    public virtual ThreadFlow VisitThreadFlow(ThreadFlow node);
    public virtual Location VisitLocation(Location node);
    public virtual ArtifactLocation VisitArtifactLocation(ArtifactLocation node);
    private IList`1<T> SortAndBuildIndexMap(IList`1<T> list, IComparer`1<T> comparer, IDictionary`2<int, int> indexMapping);
    private IDictionary`2<T, int> CacheListIndices(IList`1<T> list);
    private void MapNewIndices(IList`1<T> newList, IDictionary`2<T, int> oldIndices, IDictionary`2<int, int> indexMapping);
}
public abstract class Microsoft.CodeAnalysis.Sarif.Visitors.SplittingVisitor : SarifRewritingVisitor {
    [CompilerGeneratedAttribute]
private Run <CurrentRun>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Result, bool> <FilteringStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SarifLog> <SplitSarifLogs>k__BackingField;
    protected Run CurrentRun { get; protected set; }
    protected Func`2<Result, bool> FilteringStrategy { get; protected set; }
    public IList`1<SarifLog> SplitSarifLogs { get; private set; }
    public SplittingVisitor(Func`2<Result, bool> filteringStrategy);
    [CompilerGeneratedAttribute]
protected Run get_CurrentRun();
    [CompilerGeneratedAttribute]
protected void set_CurrentRun(Run value);
    [CompilerGeneratedAttribute]
protected Func`2<Result, bool> get_FilteringStrategy();
    [CompilerGeneratedAttribute]
protected void set_FilteringStrategy(Func`2<Result, bool> value);
    [CompilerGeneratedAttribute]
public IList`1<SarifLog> get_SplitSarifLogs();
    [CompilerGeneratedAttribute]
private void set_SplitSarifLogs(IList`1<SarifLog> value);
    public virtual Run VisitRun(Run node);
}
public class Microsoft.CodeAnalysis.Sarif.Visitors.SuppressVisitor : SarifRewritingVisitor {
    private bool guids;
    private string alias;
    private bool timestamps;
    private DateTime timeUtc;
    private DateTime expiryUtc;
    private int expiryInDays;
    private string justification;
    private SuppressionStatus suppressionStatus;
    public SuppressVisitor(string justification, string alias, bool guids, bool timestamps, int expiryInDays, SuppressionStatus suppressionStatus);
    public virtual Result VisitResult(Result node);
}
internal class Microsoft.CodeAnalysis.Sarif.Visitors.UnknownEncodingException : Exception {
    [CompilerGeneratedAttribute]
private string <EncodingName>k__BackingField;
    public string EncodingName { get; public set; }
    public UnknownEncodingException(string encodingName);
    [CompilerGeneratedAttribute]
public string get_EncodingName();
    [CompilerGeneratedAttribute]
public void set_EncodingName(string value);
}
public class Microsoft.CodeAnalysis.Sarif.Visitors.UpdateIndicesFromLegacyDataVisitor : SarifRewritingVisitor {
    private IDictionary`2<string, int> _fullyQualifiedLogicalNameToIndexMap;
    private IDictionary`2<string, int> _fileLocationKeyToIndexMap;
    private IDictionary`2<string, int> _ruleKeyToIndexMap;
    private Tool _tool;
    public UpdateIndicesFromLegacyDataVisitor(IDictionary`2<string, int> fullyQualifiedLogicalNameToIndexMap, IDictionary`2<string, int> fileLocationKeyToIndexMap, IDictionary`2<string, int> ruleKeyToIndexMap);
    public virtual Result VisitResult(Result node);
    public virtual Run VisitRun(Run node);
    public virtual Location VisitLocation(Location node);
    public virtual ArtifactLocation VisitArtifactLocation(ArtifactLocation node);
}
public class Microsoft.CodeAnalysis.Sarif.Visitors.VersionOneLogicalLocationKeyToLogicalLocationDataVisitor : SarifRewritingVisitorVersionOne {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <LogicalLocationKeyToDecoratedNameMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <LogicalLocationKeyToFullyQualifiedNameMap>k__BackingField;
    public IDictionary`2<string, string> LogicalLocationKeyToDecoratedNameMap { get; }
    public IDictionary`2<string, string> LogicalLocationKeyToFullyQualifiedNameMap { get; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_LogicalLocationKeyToDecoratedNameMap();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_LogicalLocationKeyToFullyQualifiedNameMap();
    public virtual LocationVersionOne VisitLocationVersionOne(LocationVersionOne node);
    public virtual StackFrameVersionOne VisitStackFrameVersionOne(StackFrameVersionOne node);
    public virtual AnnotatedCodeLocationVersionOne VisitAnnotatedCodeLocationVersionOne(AnnotatedCodeLocationVersionOne node);
}
public static class Microsoft.CodeAnalysis.Sarif.Warnings : object {
    public static string Wrn997_InvalidTarget;
    public static string Wrn997_ObsoleteOption;
    public static string Wrn997_ObsoleteOptionWithReplacement;
    public static string Wrn997_OneOrMoreFilesSkipped;
    public static string Wrn997_OneOrMoreFilesSkippedDueToExceedingSizeLimits;
    public static string Wrn998_UnsupportedPlatform;
    public static string Wrn999_RuleExplicitlyDisabled;
    public static void LogOneOrMoreFilesSkipped(IAnalysisContext context, long skippedFilesCount, string reason);
    public static void LogOneOrMoreFilesSkippedDueToExceedingSizeLimit(IAnalysisContext context, long skippedFilesCount);
    public static void LogExceptionInvalidTarget(IAnalysisContext context);
    public static void LogUnsupportedPlatformForRule(IAnalysisContext context, string ruleId, SupportedPlatform supportedOS, SupportedPlatform currentOS);
    public static void LogRuleExplicitlyDisabled(IAnalysisContext context, string ruleId);
    public static void LogObsoleteOption(IAnalysisContext context, string obsoleteOption, string replacement);
}
internal static class Microsoft.CodeAnalysis.Sarif.WebMessageUtilities : object {
    private static int MaxExceptionMessageStringLength;
    internal static string WindowsNewline;
    internal static string NonWindowsNewline;
    internal static string TokenPattern;
    internal static string HttpVersionPattern;
    private static string HeaderPattern;
    private static Regex s_headerRegex;
    private static WebMessageUtilities();
    internal static IDictionary`2<string, string> ParseHeaderLines(string requestString, Int32& totalLength);
    internal static void ParseHeaderLine(string headerLine, String& fieldName, String& fieldValue, Int32& length);
    internal static string Truncate(string s);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.WebRequest : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ArtifactContent <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    private static string RequestLinePattern;
    private static Regex s_requestLineRegex;
    public static IEqualityComparer`1<WebRequest> ValueComparer { get; }
    public static IComparer`1<WebRequest> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
[DefaultValueAttribute("-1")]
[JsonPropertyAttribute]
public int Index { get; public set; }
    [DataMemberAttribute]
public string Protocol { get; public set; }
    [DataMemberAttribute]
public string Version { get; public set; }
    [DataMemberAttribute]
public string Target { get; public set; }
    [DataMemberAttribute]
public string Method { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, string> Headers { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, string> Parameters { get; public set; }
    [DataMemberAttribute]
public ArtifactContent Body { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public WebRequest(int index, string protocol, string version, string target, string method, IDictionary`2<string, string> headers, IDictionary`2<string, string> parameters, ArtifactContent body, IDictionary`2<string, SerializedPropertyInfo> properties);
    public WebRequest(WebRequest other);
    private static WebRequest();
    public static IEqualityComparer`1<WebRequest> get_ValueComparer();
    public bool ValueEquals(WebRequest other);
    public int ValueGetHashCode();
    public static IComparer`1<WebRequest> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual int get_Index();
    [CompilerGeneratedAttribute]
public virtual void set_Index(int value);
    [CompilerGeneratedAttribute]
public virtual string get_Protocol();
    [CompilerGeneratedAttribute]
public virtual void set_Protocol(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Version();
    [CompilerGeneratedAttribute]
public virtual void set_Version(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Target();
    [CompilerGeneratedAttribute]
public virtual void set_Target(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Method();
    [CompilerGeneratedAttribute]
public virtual void set_Method(string value);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public virtual void set_Headers(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, string> get_Parameters();
    [CompilerGeneratedAttribute]
public virtual void set_Parameters(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public virtual ArtifactContent get_Body();
    [CompilerGeneratedAttribute]
public virtual void set_Body(ArtifactContent value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual WebRequest DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(int index, string protocol, string version, string target, string method, IDictionary`2<string, string> headers, IDictionary`2<string, string> parameters, ArtifactContent body, IDictionary`2<string, SerializedPropertyInfo> properties);
    public static bool TryParse(string requestString, WebRequest& webRequest);
    public static WebRequest Parse(string requestString);
    internal void ParseRequestLine(string requestString, Int32& length);
    private static string GetQueryFromUri(Uri uri);
    private static Uri SynthesizeAbsoluteUriFrom(Uri uri);
    private static IDictionary`2<string, string> ParseParametersFromQueryString(string query);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.WebRequestComparer : object {
    internal static WebRequestComparer Instance;
    private static WebRequestComparer();
    public sealed virtual int Compare(WebRequest left, WebRequest right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.WebRequestEqualityComparer : object {
    internal static WebRequestEqualityComparer Instance;
    private static WebRequestEqualityComparer();
    public sealed virtual bool Equals(WebRequest left, WebRequest right);
    public sealed virtual int GetHashCode(WebRequest obj);
}
[DataContractAttribute]
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
public class Microsoft.CodeAnalysis.Sarif.WebResponse : PropertyBagHolder {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonPhrase>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private ArtifactContent <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoResponseReceived>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SerializedPropertyInfo> <Properties>k__BackingField;
    private static string StatusLinePattern;
    private static Regex s_statusLineRegex;
    public static IEqualityComparer`1<WebResponse> ValueComparer { get; }
    public static IComparer`1<WebResponse> Comparer { get; }
    public SarifNodeKind SarifNodeKind { get; }
    [DataMemberAttribute]
[DefaultValueAttribute("-1")]
[JsonPropertyAttribute]
public int Index { get; public set; }
    [DataMemberAttribute]
public string Protocol { get; public set; }
    [DataMemberAttribute]
public string Version { get; public set; }
    [DataMemberAttribute]
public int StatusCode { get; public set; }
    [DataMemberAttribute]
public string ReasonPhrase { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, string> Headers { get; public set; }
    [DataMemberAttribute]
public ArtifactContent Body { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("False")]
[JsonPropertyAttribute]
public bool NoResponseReceived { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, SerializedPropertyInfo> Properties { get; internal set; }
    public WebResponse(int index, string protocol, string version, int statusCode, string reasonPhrase, IDictionary`2<string, string> headers, ArtifactContent body, bool noResponseReceived, IDictionary`2<string, SerializedPropertyInfo> properties);
    public WebResponse(WebResponse other);
    private static WebResponse();
    public static IEqualityComparer`1<WebResponse> get_ValueComparer();
    public bool ValueEquals(WebResponse other);
    public int ValueGetHashCode();
    public static IComparer`1<WebResponse> get_Comparer();
    public virtual SarifNodeKind get_SarifNodeKind();
    [CompilerGeneratedAttribute]
public virtual int get_Index();
    [CompilerGeneratedAttribute]
public virtual void set_Index(int value);
    [CompilerGeneratedAttribute]
public virtual string get_Protocol();
    [CompilerGeneratedAttribute]
public virtual void set_Protocol(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Version();
    [CompilerGeneratedAttribute]
public virtual void set_Version(string value);
    [CompilerGeneratedAttribute]
public virtual int get_StatusCode();
    [CompilerGeneratedAttribute]
public virtual void set_StatusCode(int value);
    [CompilerGeneratedAttribute]
public virtual string get_ReasonPhrase();
    [CompilerGeneratedAttribute]
public virtual void set_ReasonPhrase(string value);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public virtual void set_Headers(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public virtual ArtifactContent get_Body();
    [CompilerGeneratedAttribute]
public virtual void set_Body(ArtifactContent value);
    [CompilerGeneratedAttribute]
public virtual bool get_NoResponseReceived();
    [CompilerGeneratedAttribute]
public virtual void set_NoResponseReceived(bool value);
    [CompilerGeneratedAttribute]
internal virtual IDictionary`2<string, SerializedPropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal virtual void set_Properties(IDictionary`2<string, SerializedPropertyInfo> value);
    private sealed virtual override ISarifNode Microsoft.CodeAnalysis.Sarif.ISarifNode.DeepClone();
    public virtual WebResponse DeepClone();
    private ISarifNode DeepCloneCore();
    protected virtual void Init(int index, string protocol, string version, int statusCode, string reasonPhrase, IDictionary`2<string, string> headers, ArtifactContent body, bool noResponseReceived, IDictionary`2<string, SerializedPropertyInfo> properties);
    public static bool TryParse(string responseString, WebResponse& webResponse);
    public static WebResponse Parse(string responseString);
    internal void ParseStatusLine(string responseString, Int32& length);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.WebResponseComparer : object {
    internal static WebResponseComparer Instance;
    private static WebResponseComparer();
    public sealed virtual int Compare(WebResponse left, WebResponse right);
}
[GeneratedCodeAttribute("Microsoft.Json.Schema.ToDotNet", "2.1.0.0")]
internal class Microsoft.CodeAnalysis.Sarif.WebResponseEqualityComparer : object {
    internal static WebResponseEqualityComparer Instance;
    private static WebResponseEqualityComparer();
    public sealed virtual bool Equals(WebResponse left, WebResponse right);
    public sealed virtual int GetHashCode(WebResponse obj);
}
public abstract class Microsoft.CodeAnalysis.Sarif.Writers.BaseLogger : object {
    public static FailureLevelSet ErrorWarningNote;
    public static FailureLevelSet ErrorWarning;
    public static ResultKindSet Fail;
    protected FailureLevelSet _failureLevels;
    protected ResultKindSet _resultKinds;
    protected BaseLogger(FailureLevelSet failureLevels, ResultKindSet resultKinds);
    private static BaseLogger();
    private void ValidateParameters();
    public bool ShouldLog(Notification notification);
    public bool ShouldLog(Result result);
}
public class Microsoft.CodeAnalysis.Sarif.Writers.CacheByFileHashLogger : BaseLogger {
    private bool cacheLoggingData;
    private string currentFileHash;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, List`1<Notification>> <HashToNotificationsMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, List`1<Tuple`3<ReportingDescriptor, Result, Nullable`1<int>>>> <HashToResultsMap>k__BackingField;
    [CompilerGeneratedAttribute]
private FileRegionsCache <FileRegionsCache>k__BackingField;
    public Dictionary`2<string, List`1<Notification>> HashToNotificationsMap { get; private set; }
    public Dictionary`2<string, List`1<Tuple`3<ReportingDescriptor, Result, Nullable`1<int>>>> HashToResultsMap { get; private set; }
    public FileRegionsCache FileRegionsCache { get; public set; }
    public CacheByFileHashLogger(FailureLevelSet levels, ResultKindSet kinds);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, List`1<Notification>> get_HashToNotificationsMap();
    [CompilerGeneratedAttribute]
private void set_HashToNotificationsMap(Dictionary`2<string, List`1<Notification>> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, List`1<Tuple`3<ReportingDescriptor, Result, Nullable`1<int>>>> get_HashToResultsMap();
    [CompilerGeneratedAttribute]
private void set_HashToResultsMap(Dictionary`2<string, List`1<Tuple`3<ReportingDescriptor, Result, Nullable`1<int>>>> value);
    [CompilerGeneratedAttribute]
public sealed virtual FileRegionsCache get_FileRegionsCache();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileRegionsCache(FileRegionsCache value);
    public sealed virtual void AnalysisStarted();
    public sealed virtual void AnalysisStopped(RuntimeConditions runtimeConditions);
    public sealed virtual void AnalyzingTarget(IAnalysisContext context);
    public sealed virtual void TargetAnalyzed(IAnalysisContext _);
    public sealed virtual void Log(ReportingDescriptor rule, Result result, Nullable`1<int> extensionIndex);
    private void CacheResult(ReportingDescriptor rule, Result result, Nullable`1<int> extensionIndex);
    public sealed virtual void LogConfigurationNotification(Notification notification);
    public sealed virtual void LogToolNotification(Notification notification, ReportingDescriptor associatedRule);
}
public class Microsoft.CodeAnalysis.Sarif.Writers.CachingLogger : BaseLogger {
    [CompilerGeneratedAttribute]
private IDictionary`2<ReportingDescriptor, IList`1<Tuple`2<Result, Nullable`1<int>>>> <Results>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Notification> <ConfigurationNotifications>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Tuple`2<Notification, ReportingDescriptor>> <ToolNotifications>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheFinalized>k__BackingField;
    private SemaphoreSlim _semaphore;
    [CompilerGeneratedAttribute]
private FileRegionsCache <FileRegionsCache>k__BackingField;
    public IDictionary`2<ReportingDescriptor, IList`1<Tuple`2<Result, Nullable`1<int>>>> Results { get; public set; }
    public IList`1<Notification> ConfigurationNotifications { get; public set; }
    public IList`1<Tuple`2<Notification, ReportingDescriptor>> ToolNotifications { get; public set; }
    public bool CacheFinalized { get; private set; }
    public FileRegionsCache FileRegionsCache { get; public set; }
    public CachingLogger(FailureLevelSet levels, ResultKindSet kinds);
    [CompilerGeneratedAttribute]
public IDictionary`2<ReportingDescriptor, IList`1<Tuple`2<Result, Nullable`1<int>>>> get_Results();
    [CompilerGeneratedAttribute]
public void set_Results(IDictionary`2<ReportingDescriptor, IList`1<Tuple`2<Result, Nullable`1<int>>>> value);
    [CompilerGeneratedAttribute]
public IList`1<Notification> get_ConfigurationNotifications();
    [CompilerGeneratedAttribute]
public void set_ConfigurationNotifications(IList`1<Notification> value);
    [CompilerGeneratedAttribute]
public IList`1<Tuple`2<Notification, ReportingDescriptor>> get_ToolNotifications();
    [CompilerGeneratedAttribute]
public void set_ToolNotifications(IList`1<Tuple`2<Notification, ReportingDescriptor>> value);
    [CompilerGeneratedAttribute]
public bool get_CacheFinalized();
    [CompilerGeneratedAttribute]
private void set_CacheFinalized(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileRegionsCache get_FileRegionsCache();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileRegionsCache(FileRegionsCache value);
    public sealed virtual void AnalysisStarted();
    public sealed virtual void AnalysisStopped(RuntimeConditions runtimeConditions);
    public sealed virtual void AnalyzingTarget(IAnalysisContext context);
    public sealed virtual void TargetAnalyzed(IAnalysisContext context);
    public sealed virtual void Log(ReportingDescriptor rule, Result result, Nullable`1<int> extensionIndex);
    public sealed virtual void LogConfigurationNotification(Notification notification);
    public sealed virtual void LogToolNotification(Notification notification, ReportingDescriptor associatedRule);
}
public class Microsoft.CodeAnalysis.Sarif.Writers.ConsoleLogger : BaseLogger {
    private string _toolName;
    private StringBuilder _capturedOutput;
    [CompilerGeneratedAttribute]
private bool <CaptureOutput>k__BackingField;
    private bool _quietConsole;
    [CompilerGeneratedAttribute]
private FileRegionsCache <FileRegionsCache>k__BackingField;
    public bool CaptureOutput { get; public set; }
    public string CapturedOutput { get; }
    public FileRegionsCache FileRegionsCache { get; public set; }
    public ConsoleLogger(bool quietConsole, string toolName, FailureLevelSet levels, ResultKindSet kinds);
    [CompilerGeneratedAttribute]
public bool get_CaptureOutput();
    [CompilerGeneratedAttribute]
public void set_CaptureOutput(bool value);
    public string get_CapturedOutput();
    private void WriteLineToConsole(string text, bool forceEmitOfErrorNotifications);
    [CompilerGeneratedAttribute]
public sealed virtual FileRegionsCache get_FileRegionsCache();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileRegionsCache(FileRegionsCache value);
    public sealed virtual void AnalysisStarted();
    public sealed virtual void AnalysisStopped(RuntimeConditions runtimeConditions);
    public sealed virtual void AnalyzingTarget(IAnalysisContext context);
    public sealed virtual void TargetAnalyzed(IAnalysisContext context);
    public sealed virtual void Log(ReportingDescriptor rule, Result result, Nullable`1<int> extensionIndex);
    public static string GetMessageText(string toolName, Uri uri, Region region, string ruleId, string message, ResultKind kind, FailureLevel level);
    public static string NormalizeMessage(string message, bool enquote);
    public sealed virtual void LogToolNotification(Notification notification, ReportingDescriptor associatedRule);
    public sealed virtual void LogConfigurationNotification(Notification notification);
    private void WriteToConsole(Notification notification);
    internal static string FormatNotificationMessage(Notification notification, string toolName);
    private static string ConstructPathFromUri(Uri uri);
}
public class Microsoft.CodeAnalysis.Sarif.Writers.MemoryStreamSarifLogger : SarifLogger {
    protected StreamWriter writer;
    protected bool disposed;
    public MemoryStreamSarifLogger(FilePersistenceOptions logFilePersistenceOptions, OptionallyEmittedData dataToInsert, OptionallyEmittedData dataToRemove, Run run, IEnumerable`1<string> analysisTargets, IEnumerable`1<string> invocationTokensToRedact, IEnumerable`1<string> invocationPropertiesToLog, string defaultFileEncoding, FailureLevelSet levels, ResultKindSet kinds, IEnumerable`1<string> insertProperties);
    public MemoryStreamSarifLogger(StreamWriter writer, FilePersistenceOptions logFilePersistenceOptions, OptionallyEmittedData dataToInsert, OptionallyEmittedData dataToRemove, Run run, IEnumerable`1<string> analysisTargets, IEnumerable`1<string> invocationTokensToRedact, IEnumerable`1<string> invocationPropertiesToLog, string defaultFileEncoding, FailureLevelSet levels, ResultKindSet kinds, IEnumerable`1<string> insertProperties);
    public SarifLog ToSarifLog();
    public virtual void Dispose();
}
public static class Microsoft.CodeAnalysis.Sarif.Writers.MimeType : object {
    public static string Default;
    public static string Cpp;
    public static string Java;
    public static string Binary;
    public static string Directory;
    public static string CSharp;
    public static string Sarif;
    public static string JavaProperties;
    private static ImmutableHashSet`1<string> s_textualMimeTypes;
    private static ImmutableArray`1<ImmutableArray`1<string>> s_textualExtensionsTable;
    private static ImmutableArray`1<ImmutableArray`1<string>> s_binaryExtensionsTable;
    private static MimeType();
    public static string DetermineFromFileExtension(string path);
    public static string DetermineFromFileExtension(Uri fileUri);
    public static bool IsTextualMimeType(string mimeType);
    public static bool IsBinaryMimeType(string mimeType);
    private static bool HasExtension(string fileName, string extension);
    [IteratorStateMachineAttribute("Microsoft.CodeAnalysis.Sarif.Writers.MimeType/<GetExtensionsTables>d__13")]
private static IEnumerable`1<ImmutableArray`1<ImmutableArray`1<string>>> GetExtensionsTables();
    private static ImmutableHashSet`1<string> InitializeMimeTypesSet(ImmutableArray`1<ImmutableArray`1<string>> extensionsTable);
}
public static class Microsoft.CodeAnalysis.Sarif.Writers.PrereleaseCompatibilityTransformer : object {
    private static string ArrayIndicatorSymbol;
    private static char NodeDelimiterSymbol;
    public static SarifLog UpdateToCurrentVersion(string prereleaseSarifLog, Formatting formatting, String& updatedLog);
    private static SarifLog ConvertV1ToCurrent(string v1LogText, JsonSerializerSettings settings, String& v2LogText);
    private static bool ApplyRtm5Changes(JObject sarifLog);
    private static bool ConvertSuppressionStateToSuppressionStatus(JObject sarifLog);
    private static bool ApplyRtm1Changes(JObject sarifLog);
    private static bool ConvertResultLogicalLocationToArray(JObject sarifLog);
    private static bool ApplyRtm0Changes(JObject sarifLog);
    private static bool ApplyChangesFromTC35(JObject sarifLog);
    private static bool ConvertInvocationToolExecutionSuccessfulToExecutionSuccessful(JObject sarifLog);
    private static bool ConvertNotificationPhysicalLocationToLocations(JObject run);
    private static bool RenameArtifactRolesEnums(JObject sarifLog);
    private static bool ConvertRunRedactionTokenToArray(JObject run);
    private static bool RenameSuppressionKindValues(JObject run);
    private static bool RenameFixChangesToFixArtifactChanges(JObject sarifLog);
    private static bool HoistIdsFromPhysicalLocationToLocation(JObject run);
    private static bool HoistPhysicalLocationIdToParentLocation(JObject location);
    private static bool ConvertAllToolComponentArtifactIndicesToArtifactLocations(JObject sarifLog);
    private static bool ConvertSingleToolComponentArtifactIndicesListToArtifactLocations(JObject toolComponent);
    private static bool ApplyChangesFromTC34(JObject sarifLog);
    private static void ConvertAllStateStringsToMultiFormatMessageStrings(JObject run);
    private static bool ConvertSingleStateStringToMultiFormatMessageString(JObject state);
    private static bool ApplyChangesFromTC33(JObject sarifLog);
    private static void RenameMessageIdToId(JObject run);
    private static void MoveToolLanguageToRun(JObject run);
    private static void RenameAllToolComponentDescriptors(JObject run);
    private static bool RenameToolComponentDescriptors(JObject toolComponent);
    private static void UpdateAllNotificationDescriptorReferences(JObject run);
    private static bool UpdateNotificationDescriptorReferencesInSingleNotificationObject(JObject notification);
    private static void ConvertSuppressionStatesToSuppressions(JObject run);
    private static void ModifyExternalPropertyFilesToExternalPropertyFileReferences(JObject run);
    private static void RenameAllInstanceGuidsAndIds(JObject run);
    private static void RenameInstanceGuidToGuidInNode(JObject node);
    private static void RenameInstanceIdToIdInNode(JObject node);
    private static void AddLogicalLocationToAllLocationNodes(JObject run);
    private static String[] GetAllLocationPathsList();
    private static bool AddLogicalLocationToSingleLocationNode(JObject location);
    private static void ConvertToolToDriverInExternalPropertyFiles(JObject run);
    private static bool ApplyChangesFromTC32(JObject sarifLog);
    private static void MoveAllStackFrameAddressesToLocation(JObject run);
    private static bool MoveSingleStackFrameAddressToLocation(JObject stackFrame);
    private static void UpdateAllToolComponentProperties(JObject run);
    private static void UpdateToolObjectToolComponentProperties(JObject tool);
    private static void UpdateAllExternalPropertyFilePropertyTypes(JObject run);
    private static void UpdateToolComponentProperties(JObject toolComponent);
    private static void ConvertAllExceptionMessagesToStringAndRenameToolNotificationNodes(JObject run);
    private static void ConvertInvocationExceptionMessagesToStringAndRenameToolNotifications(JObject invocation);
    private static void ConvertNotificationExceptionMessagesToString(JArray notifications);
    private static void ConvertExceptionMessageToString(JObject exception);
    private static void UpdateAllReportingDescriptorPropertyTypes(JObject run);
    private static bool UpdateReportingDescriptorPropertyTypes(JObject reportingDescriptor);
    private static bool ApplyChangesFromTC31(JObject sarifLog);
    private static void ConvertThreadFlowLocationKindToKinds(JObject result);
    private static void RecursivePropertyRename(JObject parentObject, JProperty property, Dictionary`2<string, string> renamedMembers);
    private static JToken RecursivePropertyRename(JArray jArray, Dictionary`2<string, string> renamedMembers);
    private static JObject RecursivePropertyRename(JObject jObject, Dictionary`2<string, string> renamedMembers);
    private static void MoveToolPropertiesIntoDriverToolComponent(JObject run);
    private static void MergeRichMessagesInDescriptorsArrays(JObject toolComponent);
    private static void MergeRichMessageStringsIntoMessageStrings(JArray descriptors);
    private static JObject CreateMultiformatMessageStringFromPlaintext(string plaintext);
    private static void MoveRuleDescriptors(JObject run);
    private static void ConvertToMultiformatMessageStrings(JObject messageStrings);
    private static void UpdateBaselineExistingStateToUnchanged(JObject result);
    private static void SetResultKindAndFailureLevel(JObject result);
    private static bool ApplyChangesFromTC25ThroughTC30(JObject sarifLog, Dictionary`2& fullyQualifiedLogicalNameToIndexMap, Dictionary`2& fileKeyToIndexMap, Dictionary`2& ruleKeyToIndexMap);
    private static JToken ConvertRulesDictionaryToArray(JObject rules, Dictionary`2<string, int> ruleKeyToIndexMap);
    private static void AddEntryToRuleToIndexMap(string key, JObject rule, Dictionary`2<JObject, int> jObjectToIndexMap, Dictionary`2<string, int> ruleKeyToIndexMap);
    private static void PopulatePropertyIfAbsent(JObject jObject, string propertyName, string value, Boolean& modifiedLog);
    private static JToken ConvertFilesDictionaryToArray(JObject files, Dictionary`2<string, int> keyToIndexMap);
    private static void AddEntryToFileLocationToIndexMap(JObject filesDictionary, string key, JObject file, Dictionary`2<JObject, int> jObjectToIndexMap, Dictionary`2<string, int> keyToIndexMap);
    private static JArray ConvertLogicalLocationsDictionaryToArray(JObject logicalLocations, Dictionary`2<LogicalLocation, int> logicalLocationToIndexMap, Dictionary`2& fullyQualifiedLogicalNameToIndexMap);
    private static void AddEntryToFullyQualifiedNameToIndexMap(JObject logicalLocationsDictionary, string keyName, JObject logicalLocation, Dictionary`2<LogicalLocation, int> logicalLocationToIndexMap, Dictionary`2<JObject, int> jObjectToIndexMap, Dictionary`2<string, int> keyToIndexMap);
    private static bool RemapRuleDefaultLevelFromOpenToNote(JObject resources);
    private static bool ApplyCoreTransformations(JObject sarifLog);
    private static bool UpdateSarifLogVersionAndSchema(JObject sarifLog);
    private static bool UpdateVersionAndSchema(JObject jObject);
    private static bool UpdatePropertyValueIfPresent(JObject jObject, string propertyName, string propertyValue);
    private static bool RefactorRunAutomationDetails(JObject run);
    private static bool UpdateRunVersionControlProvenance(JObject run);
    private static bool UpdateVersionControlDetails(JObject versionControlDetails);
    internal static bool UpdateRunResults(JObject run);
    private static bool UpdateCodeFlows(JArray codeFlows);
    private static bool UpdateRunInvocations(JObject run);
    internal static bool UpdateInvocation(JObject invocation);
    private static bool ReplaceUriStringWithFileLocation(JObject jObject, string propertyName);
    private static bool UpdateRunOriginalUriBaseIds(JObject run);
    internal static bool UpdateRunFiles(JObject run);
    private static bool RenameProperty(JObject jObject, string previousName, string newName);
    private static bool UpdateFileHashesProperty(JObject file);
    internal static bool UpdateRunNotifications(JObject run);
    internal static bool UpdateNotifications(JArray notifications);
    private static bool UpdateNotification(JObject notification);
    private static bool ConvertExceptionMessageFromStringToMessageObject(JObject exception);
    private static bool PerformActionOnLeafNodeIfExists(String[] possiblePathsToLeafNode, JObject rootNode, ActionOnJObject action);
    private static bool PerformActionOnLeafNodeIfExists(string possiblePathToLeafNode, JObject rootNode, ActionOnJObject action);
    private static void SplitCurrentNodeNameAndRemainingLeafNodePath(string fullPath, String& currentNodeName, String& remainingLeafNodePath);
    [CompilerGeneratedAttribute]
internal static bool <ConvertResultLogicalLocationToArray>g__actionOnLeafNode|8_0(JObject location);
    [CompilerGeneratedAttribute]
internal static bool <ConvertInvocationToolExecutionSuccessfulToExecutionSuccessful>g__actionOnLeafNode|11_0(JObject invocation);
    [CompilerGeneratedAttribute]
internal static bool <ConvertNotificationPhysicalLocationToLocations>g__actionOnLeafNode|12_0(JObject notification);
    [CompilerGeneratedAttribute]
internal static bool <RenameArtifactRolesEnums>g__actionOnLeafNode|13_0(JObject artifact);
    [CompilerGeneratedAttribute]
internal static bool <RenameSuppressionKindValues>g__actionOnLeaf|15_0(JObject suppression);
    [CompilerGeneratedAttribute]
internal static bool <RenameFixChangesToFixArtifactChanges>g__actionOnLeafNode|16_0(JObject fix);
    [CompilerGeneratedAttribute]
internal static bool <ConvertThreadFlowLocationKindToKinds>g__actionOnLeafNode|54_0(JObject threadFlowLocation);
}
[FlagsAttribute]
public enum Microsoft.CodeAnalysis.Sarif.Writers.RegionComponents : Enum {
    public short value__;
    public static RegionComponents None;
    public static RegionComponents LineAndColumn;
    public static RegionComponents ByteOffsetAndLength;
    public static RegionComponents CharOffsetAndLength;
    public static RegionComponents Full;
}
public class Microsoft.CodeAnalysis.Sarif.Writers.ResultLogJsonWriter : object {
    private Run _run;
    private Conditions _writeConditions;
    private JsonWriter _jsonWriter;
    private JsonSerializer _serializer;
    public ResultLogJsonWriter(JsonWriter jsonWriter);
    public sealed virtual void Initialize(Run run);
    public sealed virtual void WriteArtifacts(IList`1<Artifact> artifacts);
    public sealed virtual void WriteLogicalLocations(IList`1<LogicalLocation> logicalLocations);
    public sealed virtual void WriteInvocations(IEnumerable`1<Invocation> invocations);
    public sealed virtual void WriteTool(Tool tool);
    public sealed virtual void OpenResults();
    public sealed virtual void WriteResult(Result result);
    public sealed virtual void WriteResults(IEnumerable`1<Result> results);
    public sealed virtual void CloseResults();
    public void CompleteRun();
    public sealed virtual void Dispose();
    private void SerializeIfNotNull(object value, string propertyName);
    private void SerializeIfNotDefault(string value, string propertyName, string defaultValue);
    private void Serialize(object value, string propertyName);
    private void EnsureInitialized();
    private void EnsureStateNotAlreadySet(Conditions invalidConditions);
    private void EnsureResultsArrayIsNotOpen();
}
public class Microsoft.CodeAnalysis.Sarif.Writers.SarifConsolidator : object {
    private Run _run;
    private Dictionary`2<ThreadFlowLocation, int> _uniqueThreadFlowLocations;
    [CompilerGeneratedAttribute]
private int <TotalThreadFlowLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UniqueLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private RegionComponents <RegionComponentsToKeep>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MessageLengthLimitChars>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveUriBaseIds>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveCodeFlows>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveRelatedLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveGraphs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveStacks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveWebRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveWebResponses>k__BackingField;
    public int TotalThreadFlowLocations { get; private set; }
    public int UniqueThreadFlowLocations { get; }
    public int TotalLocations { get; private set; }
    public int UniqueLocations { get; private set; }
    public RegionComponents RegionComponentsToKeep { get; public set; }
    public Nullable`1<int> MessageLengthLimitChars { get; public set; }
    public bool RemoveUriBaseIds { get; public set; }
    public bool RemoveCodeFlows { get; public set; }
    public bool RemoveRelatedLocations { get; public set; }
    public bool RemoveGraphs { get; public set; }
    public bool RemoveStacks { get; public set; }
    public bool RemoveWebRequests { get; public set; }
    public bool RemoveWebResponses { get; public set; }
    public SarifConsolidator(Run run);
    [CompilerGeneratedAttribute]
public int get_TotalThreadFlowLocations();
    [CompilerGeneratedAttribute]
private void set_TotalThreadFlowLocations(int value);
    public int get_UniqueThreadFlowLocations();
    [CompilerGeneratedAttribute]
public int get_TotalLocations();
    [CompilerGeneratedAttribute]
private void set_TotalLocations(int value);
    [CompilerGeneratedAttribute]
public int get_UniqueLocations();
    [CompilerGeneratedAttribute]
private void set_UniqueLocations(int value);
    [CompilerGeneratedAttribute]
public RegionComponents get_RegionComponentsToKeep();
    [CompilerGeneratedAttribute]
public void set_RegionComponentsToKeep(RegionComponents value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MessageLengthLimitChars();
    [CompilerGeneratedAttribute]
public void set_MessageLengthLimitChars(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_RemoveUriBaseIds();
    [CompilerGeneratedAttribute]
public void set_RemoveUriBaseIds(bool value);
    [CompilerGeneratedAttribute]
public bool get_RemoveCodeFlows();
    [CompilerGeneratedAttribute]
public void set_RemoveCodeFlows(bool value);
    [CompilerGeneratedAttribute]
public bool get_RemoveRelatedLocations();
    [CompilerGeneratedAttribute]
public void set_RemoveRelatedLocations(bool value);
    [CompilerGeneratedAttribute]
public bool get_RemoveGraphs();
    [CompilerGeneratedAttribute]
public void set_RemoveGraphs(bool value);
    [CompilerGeneratedAttribute]
public bool get_RemoveStacks();
    [CompilerGeneratedAttribute]
public void set_RemoveStacks(bool value);
    [CompilerGeneratedAttribute]
public bool get_RemoveWebRequests();
    [CompilerGeneratedAttribute]
public void set_RemoveWebRequests(bool value);
    [CompilerGeneratedAttribute]
public bool get_RemoveWebResponses();
    [CompilerGeneratedAttribute]
public void set_RemoveWebResponses(bool value);
    public void Trim(Result result);
    public void ConsolidateCodeFlows(Result result);
    public void Consolidate(ThreadFlow threadFlow);
    public IList`1<Location> Trim(IList`1<Location> locations);
    public void Trim(Location location);
    public IList`1<LogicalLocation> Trim(IList`1<LogicalLocation> logicalLocations);
    public void Trim(LogicalLocation logicalLocation);
    public void Trim(PhysicalLocation physicalLocation);
    public void Trim(ArtifactLocation artifactLocation);
    public void Trim(Region region);
}
public class Microsoft.CodeAnalysis.Sarif.Writers.SarifLogger : BaseLogger {
    private TextWriter _textWriter;
    private JsonTextWriter _jsonTextWriter;
    private ResultLogJsonWriter _issueLogJsonWriter;
    private Run _run;
    private bool _closeWriterOnDispose;
    private OptionallyEmittedData _dataToInsert;
    private OptionallyEmittedData _dataToRemove;
    private FilePersistenceOptions _filePersistenceOptions;
    private InsertOptionalDataVisitor _insertOptionalDataVisitor;
    protected static FilePersistenceOptions DefaultLogFilePersistenceOptions;
    private FileRegionsCache _fileRegionsCache;
    [CompilerGeneratedAttribute]
private IDictionary`2<ReportingDescriptor, ReportingDescriptorReference> <RuleToReportingDescriptorReferenceMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<ReportingDescriptor, int> <RuleToIndexMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Guid, int> <ExtensionGuidToIndexMap>k__BackingField;
    public FileRegionsCache FileRegionsCache { get; public set; }
    public IDictionary`2<ReportingDescriptor, ReportingDescriptorReference> RuleToReportingDescriptorReferenceMap { get; }
    public IDictionary`2<ReportingDescriptor, int> RuleToIndexMap { get; }
    public Dictionary`2<Guid, int> ExtensionGuidToIndexMap { get; }
    public bool ComputeFileHashes { get; }
    public bool PersistBinaryContents { get; }
    public bool PersistTextFileContents { get; }
    public bool PersistEnvironment { get; }
    public bool OverwriteExistingOutputFile { get; }
    public bool PrettyPrint { get; }
    public bool Optimize { get; }
    public SarifLogger(string outputFilePath, FilePersistenceOptions logFilePersistenceOptions, OptionallyEmittedData dataToInsert, OptionallyEmittedData dataToRemove, Run run, IEnumerable`1<string> analysisTargets, IEnumerable`1<string> invocationTokensToRedact, IEnumerable`1<string> invocationPropertiesToLog, string defaultFileEncoding, bool closeWriterOnDispose, FailureLevelSet levels, ResultKindSet kinds, IEnumerable`1<string> insertProperties, FileRegionsCache fileRegionsCache);
    public SarifLogger(TextWriter textWriter, FilePersistenceOptions logFilePersistenceOptions, OptionallyEmittedData dataToInsert, OptionallyEmittedData dataToRemove, Run run, IEnumerable`1<string> analysisTargets, IEnumerable`1<string> invocationTokensToRedact, IEnumerable`1<string> invocationPropertiesToLog, string defaultFileEncoding, bool closeWriterOnDispose, FailureLevelSet levels, ResultKindSet kinds, IEnumerable`1<string> insertProperties, FileRegionsCache fileRegionsCache);
    public sealed virtual FileRegionsCache get_FileRegionsCache();
    public sealed virtual void set_FileRegionsCache(FileRegionsCache value);
    private void RecordRules(Nullable`1<int> extensionIndex, ToolComponent toolComponent);
    private void EnhanceRun(IEnumerable`1<string> analysisTargets, OptionallyEmittedData dataToInsert, OptionallyEmittedData dataToRemove, IEnumerable`1<string> invocationTokensToRedact, IEnumerable`1<string> invocationPropertiesToLog, string defaultFileEncoding);
    [CompilerGeneratedAttribute]
public IDictionary`2<ReportingDescriptor, ReportingDescriptorReference> get_RuleToReportingDescriptorReferenceMap();
    [CompilerGeneratedAttribute]
public IDictionary`2<ReportingDescriptor, int> get_RuleToIndexMap();
    [CompilerGeneratedAttribute]
public Dictionary`2<Guid, int> get_ExtensionGuidToIndexMap();
    public bool get_ComputeFileHashes();
    public bool get_PersistBinaryContents();
    public bool get_PersistTextFileContents();
    public bool get_PersistEnvironment();
    public bool get_OverwriteExistingOutputFile();
    public bool get_PrettyPrint();
    public bool get_Optimize();
    public virtual void Dispose();
    public sealed virtual void AnalysisStarted();
    public sealed virtual void AnalysisStopped(RuntimeConditions runtimeConditions);
    public sealed virtual void Log(ReportingDescriptor rule, Result result, Nullable`1<int> extensionIndex);
    private int LogRule(ReportingDescriptor rule);
    private ReportingDescriptorReference LogRule(ReportingDescriptor rule, int extensionIndex);
    private void CaptureFilesInResult(Result result);
    private void CaptureThreadFlowLocations(IList`1<ThreadFlowLocation> locations);
    private void CaptureArtifact(ArtifactLocation fileLocation);
    public sealed virtual void AnalyzingTarget(IAnalysisContext context);
    public sealed virtual void TargetAnalyzed(IAnalysisContext context);
    public sealed virtual void LogToolNotification(Notification notification, ReportingDescriptor associatedRule);
    public sealed virtual void LogConfigurationNotification(Notification notification);
    private void CaptureFilesInNotification(Notification notification);
    private static string Redact(string text, IEnumerable`1<string> tokensToRedact);
    private static Uri Redact(Uri uri, IEnumerable`1<string> tokensToRedact);
}
public class Microsoft.CodeAnalysis.Sarif.Writers.SarifOneZeroZeroLogger : SarifLogger {
    private string _outputFilePath;
    public SarifOneZeroZeroLogger(string outputFilePath, FilePersistenceOptions logFilePersistenceOptions, OptionallyEmittedData dataToInsert, OptionallyEmittedData dataToRemove, Run run, IEnumerable`1<string> analysisTargets, IEnumerable`1<string> invocationTokensToRedact, IEnumerable`1<string> invocationPropertiesToLog, string defaultFileEncoding, FailureLevelSet levels, ResultKindSet kinds, IEnumerable`1<string> insertProperties);
    public virtual void Dispose();
}
public static class Microsoft.CodeAnalysis.Sarif.Writers.SarifPartitioner : object {
    public static SarifLog Filter(SarifLog log, IncludeResultPredicate predicate);
    public static IDictionary`2<T, SarifLog> Partition(SarifLog log, PartitionFunction`1<T> partitionFunction, bool deepClone);
}
public class Microsoft.CodeAnalysis.Sarif.ZipArchiveArtifact : object {
    private ISet`1<string> binaryExtensions;
    private ZipArchive archive;
    private ZipArchiveEntry entry;
    private Uri uri;
    private string contents;
    private Byte[] bytes;
    public Uri Uri { get; }
    public bool IsBinary { get; }
    public Stream Stream { get; public set; }
    public Encoding Encoding { get; public set; }
    public string Contents { get; public set; }
    public Byte[] Bytes { get; public set; }
    public Nullable`1<long> SizeInBytes { get; public set; }
    public ZipArchiveArtifact(ZipArchive archive, ZipArchiveEntry entry, ISet`1<string> binaryExtensions);
    public sealed virtual Uri get_Uri();
    public sealed virtual bool get_IsBinary();
    public sealed virtual Stream get_Stream();
    public sealed virtual void set_Stream(Stream value);
    public sealed virtual Encoding get_Encoding();
    public sealed virtual void set_Encoding(Encoding value);
    public sealed virtual string get_Contents();
    public sealed virtual void set_Contents(string value);
    public sealed virtual Byte[] get_Bytes();
    public sealed virtual void set_Bytes(Byte[] value);
    private ValueTuple`2<string, Byte[]> GetArtifactData();
    public sealed virtual Nullable`1<long> get_SizeInBytes();
    public sealed virtual void set_SizeInBytes(Nullable`1<long> value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
