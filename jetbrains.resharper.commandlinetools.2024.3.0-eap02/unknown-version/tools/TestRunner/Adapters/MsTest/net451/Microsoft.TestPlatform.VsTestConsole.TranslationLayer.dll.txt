public class Microsoft.TestPlatform.VsTestConsole.TranslationLayer.ConsoleParameters : object {
    internal static ConsoleParameters Default;
    private string logFilePath;
    private IFileHelper fileHelper;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <EnvironmentVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceLevel <TraceLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PortNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParentProcessId>k__BackingField;
    public Dictionary`2<string, string> EnvironmentVariables { get; public set; }
    public TraceLevel TraceLevel { get; public set; }
    public string LogFilePath { get; public set; }
    internal int PortNumber { get; internal set; }
    internal int ParentProcessId { get; internal set; }
    public ConsoleParameters(IFileHelper fileHelper);
    private static ConsoleParameters();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_EnvironmentVariables();
    [CompilerGeneratedAttribute]
public void set_EnvironmentVariables(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public TraceLevel get_TraceLevel();
    [CompilerGeneratedAttribute]
public void set_TraceLevel(TraceLevel value);
    public string get_LogFilePath();
    public void set_LogFilePath(string value);
    [CompilerGeneratedAttribute]
internal int get_PortNumber();
    [CompilerGeneratedAttribute]
internal void set_PortNumber(int value);
    [CompilerGeneratedAttribute]
internal int get_ParentProcessId();
    [CompilerGeneratedAttribute]
internal void set_ParentProcessId(int value);
}
public class Microsoft.TestPlatform.VsTestConsole.TranslationLayer.DiscoveryEventsHandleConverter : object {
    private ITestDiscoveryEventsHandler testDiscoveryEventsHandler;
    public DiscoveryEventsHandleConverter(ITestDiscoveryEventsHandler testDiscoveryEventsHandler);
    public sealed virtual void HandleRawMessage(string rawMessage);
    public sealed virtual void HandleLogMessage(TestMessageLevel level, string message);
    public sealed virtual void HandleDiscoveryComplete(DiscoveryCompleteEventArgs discoveryCompleteEventArgs, IEnumerable`1<TestCase> lastChunk);
    public sealed virtual void HandleDiscoveredTests(IEnumerable`1<TestCase> discoveredTestCases);
}
internal interface Microsoft.TestPlatform.VsTestConsole.TranslationLayer.Interfaces.IProcessManager {
    public abstract virtual void StartProcess(ConsoleParameters consoleParameters);
    public abstract virtual bool IsProcessInitialized();
    public abstract virtual void ShutdownProcess();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProcessExited(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProcessExited(EventHandler value);
}
internal interface Microsoft.TestPlatform.VsTestConsole.TranslationLayer.Interfaces.ITranslationLayerRequestSender {
    public abstract virtual int InitializeCommunication();
    public abstract virtual bool WaitForRequestHandlerConnection(int connectionTimeout);
    public abstract virtual void Close();
    public abstract virtual void InitializeExtensions(IEnumerable`1<string> pathToAdditionalExtensions);
    public abstract virtual void DiscoverTests(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, ITestDiscoveryEventsHandler2 discoveryEventsHandler);
    public abstract virtual void StartTestRun(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, ITestRunEventsHandler runEventsHandler);
    public abstract virtual void StartTestRun(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, ITestRunEventsHandler runEventsHandler);
    public abstract virtual void StartTestRunWithCustomHost(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, ITestRunEventsHandler runEventsHandler, ITestHostLauncher customTestHostLauncher);
    public abstract virtual void StartTestRunWithCustomHost(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, ITestRunEventsHandler runEventsHandler, ITestHostLauncher customTestHostLauncher);
    public abstract virtual void EndSession();
    public abstract virtual void CancelTestRun();
    public abstract virtual void AbortTestRun();
    public abstract virtual void OnProcessExited();
    public abstract virtual void CancelDiscovery();
}
internal interface Microsoft.TestPlatform.VsTestConsole.TranslationLayer.Interfaces.ITranslationLayerRequestSenderAsync {
    public abstract virtual Task`1<int> InitializeCommunicationAsync(int clientConnectionTimeout);
    public abstract virtual Task DiscoverTestsAsync(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, ITestDiscoveryEventsHandler2 discoveryEventsHandler);
    public abstract virtual Task StartTestRunAsync(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, ITestRunEventsHandler runEventsHandler);
    public abstract virtual Task StartTestRunAsync(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, ITestRunEventsHandler runEventsHandler);
    public abstract virtual Task StartTestRunWithCustomHostAsync(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, ITestRunEventsHandler runEventsHandler, ITestHostLauncher customTestHostLauncher);
    public abstract virtual Task StartTestRunWithCustomHostAsync(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, ITestRunEventsHandler runEventsHandler, ITestHostLauncher customTestHostLauncher);
    public abstract virtual Task ProcessTestRunAttachmentsAsync(IEnumerable`1<AttachmentSet> attachments, bool collectMetrics, ITestRunAttachmentsProcessingEventsHandler testRunAttachmentsProcessingCompleteEventsHandler, CancellationToken cancellationToken);
}
public interface Microsoft.TestPlatform.VsTestConsole.TranslationLayer.Interfaces.IVsTestConsoleWrapper {
    public abstract virtual void StartSession();
    public abstract virtual void InitializeExtensions(IEnumerable`1<string> pathToAdditionalExtensions);
    public abstract virtual void DiscoverTests(IEnumerable`1<string> sources, string discoverySettings, ITestDiscoveryEventsHandler discoveryEventsHandler);
    public abstract virtual void DiscoverTests(IEnumerable`1<string> sources, string discoverySettings, TestPlatformOptions options, ITestDiscoveryEventsHandler2 discoveryEventsHandler);
    public abstract virtual void CancelDiscovery();
    public abstract virtual void RunTests(IEnumerable`1<string> sources, string runSettings, ITestRunEventsHandler testRunEventsHandler);
    public abstract virtual void RunTests(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, ITestRunEventsHandler testRunEventsHandler);
    public abstract virtual void RunTests(IEnumerable`1<TestCase> testCases, string runSettings, ITestRunEventsHandler testRunEventsHandler);
    public abstract virtual void RunTests(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, ITestRunEventsHandler testRunEventsHandler);
    public abstract virtual void RunTestsWithCustomTestHost(IEnumerable`1<string> sources, string runSettings, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    public abstract virtual void RunTestsWithCustomTestHost(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    public abstract virtual void RunTestsWithCustomTestHost(IEnumerable`1<TestCase> testCases, string runSettings, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    public abstract virtual void RunTestsWithCustomTestHost(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    public abstract virtual void CancelTestRun();
    public abstract virtual void AbortTestRun();
    public abstract virtual void EndSession();
}
public interface Microsoft.TestPlatform.VsTestConsole.TranslationLayer.Interfaces.IVsTestConsoleWrapperAsync {
    public abstract virtual Task StartSessionAsync();
    public abstract virtual Task InitializeExtensionsAsync(IEnumerable`1<string> pathToAdditionalExtensions);
    public abstract virtual Task DiscoverTestsAsync(IEnumerable`1<string> sources, string discoverySettings, ITestDiscoveryEventsHandler discoveryEventsHandler);
    public abstract virtual Task DiscoverTestsAsync(IEnumerable`1<string> sources, string discoverySettings, TestPlatformOptions options, ITestDiscoveryEventsHandler2 discoveryEventsHandler);
    public abstract virtual void CancelDiscovery();
    public abstract virtual Task RunTestsAsync(IEnumerable`1<string> sources, string runSettings, ITestRunEventsHandler testRunEventsHandler);
    public abstract virtual Task RunTestsAsync(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, ITestRunEventsHandler testRunEventsHandler);
    public abstract virtual Task RunTestsAsync(IEnumerable`1<TestCase> testCases, string runSettings, ITestRunEventsHandler testRunEventsHandler);
    public abstract virtual Task RunTestsAsync(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, ITestRunEventsHandler testRunEventsHandler);
    public abstract virtual Task RunTestsWithCustomTestHostAsync(IEnumerable`1<string> sources, string runSettings, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    public abstract virtual Task RunTestsWithCustomTestHostAsync(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    public abstract virtual Task RunTestsWithCustomTestHostAsync(IEnumerable`1<TestCase> testCases, string runSettings, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    public abstract virtual Task RunTestsWithCustomTestHostAsync(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    public abstract virtual void CancelTestRun();
    public abstract virtual void AbortTestRun();
    public abstract virtual Task ProcessTestRunAttachmentsAsync(IEnumerable`1<AttachmentSet> attachments, string processingSettings, bool isLastBatch, bool collectMetrics, ITestRunAttachmentsProcessingEventsHandler eventsHandler, CancellationToken cancellationToken);
    public abstract virtual void EndSession();
}
public class Microsoft.TestPlatform.VsTestConsole.TranslationLayer.TransationLayerException : Exception {
    public TransationLayerException(string message);
    public TransationLayerException(string message, Exception innerException);
}
internal class Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleProcessManager : object {
    private static string PORT_ARGUMENT;
    private static string PARENT_PROCESSID_ARGUMENT;
    private static string DIAG_ARGUMENT;
    private static int ENDSESSIONTIMEOUT;
    private string vstestConsolePath;
    private object syncObject;
    private bool vstestConsoleStarted;
    private bool vstestConsoleExited;
    private bool isNetCoreRunner;
    private string dotnetExePath;
    private Process process;
    private ManualResetEvent processExitedEvent;
    [CompilerGeneratedAttribute]
private IFileHelper <FileHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler ProcessExited;
    internal IFileHelper FileHelper { get; internal set; }
    public VsTestConsoleProcessManager(string vstestConsolePath);
    public VsTestConsoleProcessManager(string vstestConsolePath, string dotnetExePath);
    [CompilerGeneratedAttribute]
internal IFileHelper get_FileHelper();
    [CompilerGeneratedAttribute]
internal void set_FileHelper(IFileHelper value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ProcessExited(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ProcessExited(EventHandler value);
    public sealed virtual bool IsProcessInitialized();
    public sealed virtual void StartProcess(ConsoleParameters consoleParameters);
    public sealed virtual void ShutdownProcess();
    private void SafelyTerminateProcess();
    private void Process_Exited(object sender, EventArgs e);
    private void Process_ErrorDataReceived(object sender, DataReceivedEventArgs e);
    private void Process_OutputDataReceived(object sender, DataReceivedEventArgs e);
    private String[] BuildArguments(ConsoleParameters parameters);
    private string GetConsoleRunner();
}
internal class Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleRequestSender : object {
    private ICommunicationManager communicationManager;
    private IDataSerializer dataSerializer;
    private ITestPlatformEventSource testPlatformEventSource;
    private ManualResetEvent handShakeComplete;
    private bool handShakeSuccessful;
    private int protocolVersion;
    private CancellationTokenSource processExitCancellationTokenSource;
    internal VsTestConsoleRequestSender(ICommunicationManager communicationManager, IDataSerializer dataSerializer, ITestPlatformEventSource testPlatformEventSource);
    public sealed virtual int InitializeCommunication();
    public sealed virtual bool WaitForRequestHandlerConnection(int clientConnectionTimeout);
    [AsyncStateMachineAttribute("Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleRequestSender/<InitializeCommunicationAsync>d__11")]
public sealed virtual Task`1<int> InitializeCommunicationAsync(int clientConnectionTimeout);
    public sealed virtual void InitializeExtensions(IEnumerable`1<string> pathToAdditionalExtensions);
    public sealed virtual void DiscoverTests(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, ITestDiscoveryEventsHandler2 eventHandler);
    [AsyncStateMachineAttribute("Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleRequestSender/<DiscoverTestsAsync>d__14")]
public sealed virtual Task DiscoverTestsAsync(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, ITestDiscoveryEventsHandler2 eventHandler);
    public sealed virtual void StartTestRun(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, ITestRunEventsHandler runEventsHandler);
    [AsyncStateMachineAttribute("Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleRequestSender/<StartTestRunAsync>d__16")]
public sealed virtual Task StartTestRunAsync(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, ITestRunEventsHandler runEventsHandler);
    public sealed virtual void StartTestRun(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, ITestRunEventsHandler runEventsHandler);
    [AsyncStateMachineAttribute("Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleRequestSender/<StartTestRunAsync>d__18")]
public sealed virtual Task StartTestRunAsync(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, ITestRunEventsHandler runEventsHandler);
    public sealed virtual void StartTestRunWithCustomHost(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, ITestRunEventsHandler runEventsHandler, ITestHostLauncher customHostLauncher);
    [AsyncStateMachineAttribute("Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleRequestSender/<StartTestRunWithCustomHostAsync>d__20")]
public sealed virtual Task StartTestRunWithCustomHostAsync(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, ITestRunEventsHandler runEventsHandler, ITestHostLauncher customHostLauncher);
    public sealed virtual void StartTestRunWithCustomHost(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, ITestRunEventsHandler runEventsHandler, ITestHostLauncher customHostLauncher);
    [AsyncStateMachineAttribute("Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleRequestSender/<StartTestRunWithCustomHostAsync>d__22")]
public sealed virtual Task StartTestRunWithCustomHostAsync(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, ITestRunEventsHandler runEventsHandler, ITestHostLauncher customHostLauncher);
    public sealed virtual void CancelTestRun();
    public sealed virtual void AbortTestRun();
    public sealed virtual void CancelDiscovery();
    public sealed virtual void OnProcessExited();
    public sealed virtual void Close();
    public sealed virtual void EndSession();
    public sealed virtual Task ProcessTestRunAttachmentsAsync(IEnumerable`1<AttachmentSet> attachments, bool collectMetrics, ITestRunAttachmentsProcessingEventsHandler testSessionEventsHandler, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    private bool HandShakeWithVsTestConsole();
    [AsyncStateMachineAttribute("Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleRequestSender/<HandShakeWithVsTestConsoleAsync>d__32")]
private Task`1<bool> HandShakeWithVsTestConsoleAsync();
    private void SendMessageAndListenAndReportTestCases(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, ITestDiscoveryEventsHandler2 eventHandler);
    [AsyncStateMachineAttribute("Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleRequestSender/<SendMessageAndListenAndReportTestCasesAsync>d__34")]
private Task SendMessageAndListenAndReportTestCasesAsync(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, ITestDiscoveryEventsHandler2 eventHandler);
    private void SendMessageAndListenAndReportTestResults(string messageType, object payload, ITestRunEventsHandler eventHandler, ITestHostLauncher customHostLauncher);
    [AsyncStateMachineAttribute("Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleRequestSender/<SendMessageAndListenAndReportTestResultsAsync>d__36")]
private Task SendMessageAndListenAndReportTestResultsAsync(string messageType, object payload, ITestRunEventsHandler eventHandler, ITestHostLauncher customHostLauncher);
    [AsyncStateMachineAttribute("Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleRequestSender/<SendMessageAndListenAndReportAttachmentsProcessingResultAsync>d__37")]
private Task SendMessageAndListenAndReportAttachmentsProcessingResultAsync(IEnumerable`1<AttachmentSet> attachments, bool collectMetrics, ITestRunAttachmentsProcessingEventsHandler eventHandler, CancellationToken cancellationToken);
    private Message TryReceiveMessage();
    [AsyncStateMachineAttribute("Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleRequestSender/<TryReceiveMessageAsync>d__39")]
private Task`1<Message> TryReceiveMessageAsync();
    private void HandleCustomHostLaunch(ITestHostLauncher customHostLauncher, Message message);
    private void AttachDebuggerToProcess(ITestHostLauncher customHostLauncher, Message message);
    [CompilerGeneratedAttribute]
private void <InitializeCommunication>b__9_0();
    [CompilerGeneratedAttribute]
private Task <InitializeCommunicationAsync>b__11_0();
    [CompilerGeneratedAttribute]
private void <SendMessageAndListenAndReportAttachmentsProcessingResultAsync>b__37_0();
}
public class Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleWrapper : object {
    private IProcessManager vstestConsoleProcessManager;
    private ITranslationLayerRequestSender requestSender;
    private IProcessHelper processHelper;
    private bool sessionStarted;
    private IEnumerable`1<string> pathToAdditionalExtensions;
    private ConsoleParameters consoleParameters;
    private ITestPlatformEventSource testPlatformEventSource;
    public VsTestConsoleWrapper(string vstestConsolePath);
    public VsTestConsoleWrapper(string vstestConsolePath, ConsoleParameters consoleParameters);
    internal VsTestConsoleWrapper(string vstestConsolePath, string dotnetExePath, ConsoleParameters consoleParameters);
    internal VsTestConsoleWrapper(ITranslationLayerRequestSender requestSender, IProcessManager processManager, ConsoleParameters consoleParameters, ITestPlatformEventSource testPlatformEventSource, IProcessHelper processHelper);
    public sealed virtual void StartSession();
    public sealed virtual void InitializeExtensions(IEnumerable`1<string> pathToAdditionalExtensions);
    public sealed virtual void DiscoverTests(IEnumerable`1<string> sources, string discoverySettings, ITestDiscoveryEventsHandler discoveryEventsHandler);
    public sealed virtual void DiscoverTests(IEnumerable`1<string> sources, string discoverySettings, TestPlatformOptions options, ITestDiscoveryEventsHandler2 discoveryEventsHandler);
    public sealed virtual void CancelDiscovery();
    public sealed virtual void RunTests(IEnumerable`1<string> sources, string runSettings, ITestRunEventsHandler testRunEventsHandler);
    public sealed virtual void RunTests(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, ITestRunEventsHandler testRunEventsHandler);
    public sealed virtual void RunTests(IEnumerable`1<TestCase> testCases, string runSettings, ITestRunEventsHandler testRunEventsHandler);
    public sealed virtual void RunTests(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, ITestRunEventsHandler testRunEventsHandler);
    public sealed virtual void RunTestsWithCustomTestHost(IEnumerable`1<string> sources, string runSettings, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    public sealed virtual void RunTestsWithCustomTestHost(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    public sealed virtual void RunTestsWithCustomTestHost(IEnumerable`1<TestCase> testCases, string runSettings, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    public sealed virtual void RunTestsWithCustomTestHost(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    public sealed virtual void CancelTestRun();
    public sealed virtual void AbortTestRun();
    public sealed virtual void EndSession();
    [AsyncStateMachineAttribute("Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleWrapper/<StartSessionAsync>d__27")]
public sealed virtual Task StartSessionAsync();
    [AsyncStateMachineAttribute("Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleWrapper/<InitializeExtensionsAsync>d__28")]
public sealed virtual Task InitializeExtensionsAsync(IEnumerable`1<string> pathToAdditionalExtensions);
    [AsyncStateMachineAttribute("Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleWrapper/<DiscoverTestsAsync>d__29")]
public sealed virtual Task DiscoverTestsAsync(IEnumerable`1<string> sources, string discoverySettings, ITestDiscoveryEventsHandler discoveryEventsHandler);
    [AsyncStateMachineAttribute("Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleWrapper/<DiscoverTestsAsync>d__30")]
public sealed virtual Task DiscoverTestsAsync(IEnumerable`1<string> sources, string discoverySettings, TestPlatformOptions options, ITestDiscoveryEventsHandler2 discoveryEventsHandler);
    [AsyncStateMachineAttribute("Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleWrapper/<RunTestsAsync>d__31")]
public sealed virtual Task RunTestsAsync(IEnumerable`1<string> sources, string runSettings, ITestRunEventsHandler testRunEventsHandler);
    [AsyncStateMachineAttribute("Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleWrapper/<RunTestsAsync>d__32")]
public sealed virtual Task RunTestsAsync(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, ITestRunEventsHandler testRunEventsHandler);
    [AsyncStateMachineAttribute("Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleWrapper/<RunTestsAsync>d__33")]
public sealed virtual Task RunTestsAsync(IEnumerable`1<TestCase> testCases, string runSettings, ITestRunEventsHandler testRunEventsHandler);
    [AsyncStateMachineAttribute("Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleWrapper/<RunTestsAsync>d__34")]
public sealed virtual Task RunTestsAsync(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, ITestRunEventsHandler testRunEventsHandler);
    [AsyncStateMachineAttribute("Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleWrapper/<RunTestsWithCustomTestHostAsync>d__35")]
public sealed virtual Task RunTestsWithCustomTestHostAsync(IEnumerable`1<string> sources, string runSettings, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    [AsyncStateMachineAttribute("Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleWrapper/<RunTestsWithCustomTestHostAsync>d__36")]
public sealed virtual Task RunTestsWithCustomTestHostAsync(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    [AsyncStateMachineAttribute("Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleWrapper/<RunTestsWithCustomTestHostAsync>d__37")]
public sealed virtual Task RunTestsWithCustomTestHostAsync(IEnumerable`1<TestCase> testCases, string runSettings, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    [AsyncStateMachineAttribute("Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleWrapper/<RunTestsWithCustomTestHostAsync>d__38")]
public sealed virtual Task RunTestsWithCustomTestHostAsync(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    [AsyncStateMachineAttribute("Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleWrapper/<ProcessTestRunAttachmentsAsync>d__39")]
public sealed virtual Task ProcessTestRunAttachmentsAsync(IEnumerable`1<AttachmentSet> attachments, string processingSettings, bool isLastBatch, bool collectMetrics, ITestRunAttachmentsProcessingEventsHandler testSessionEventsHandler, CancellationToken cancellationToken);
    private void EnsureInitialized();
    [AsyncStateMachineAttribute("Microsoft.TestPlatform.VsTestConsole.TranslationLayer.VsTestConsoleWrapper/<EnsureInitializedAsync>d__41")]
private Task EnsureInitializedAsync();
    private bool WaitForConnection();
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_0(object sender, EventArgs args);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Microsoft.VisualStudio.TestPlatform.VsTestConsole.TranslationLayer.Resources.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string AbortedTestRunAttachmentsProcessing { get; }
    public static string AbortedTestsDiscovery { get; }
    public static string AbortedTestsRun { get; }
    public static string FailedToReceiveMessage { get; }
    public static string InvalidFilePath { get; }
    public static string VsTestProcessExitedAbnormally { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_AbortedTestRunAttachmentsProcessing();
    public static string get_AbortedTestsDiscovery();
    public static string get_AbortedTestsRun();
    public static string get_FailedToReceiveMessage();
    public static string get_InvalidFilePath();
    public static string get_VsTestProcessExitedAbnormally();
}
