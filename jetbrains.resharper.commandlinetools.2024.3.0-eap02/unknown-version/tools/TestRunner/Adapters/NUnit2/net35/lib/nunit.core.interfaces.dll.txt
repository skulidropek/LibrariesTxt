public enum NUnit.Core.DomainUsage : Enum {
    public int value__;
    public static DomainUsage Default;
    public static DomainUsage None;
    public static DomainUsage Single;
    public static DomainUsage Multiple;
}
public interface NUnit.Core.EventListener {
    public abstract virtual void RunStarted(string name, int testCount);
    public abstract virtual void RunFinished(TestResult result);
    public abstract virtual void RunFinished(Exception exception);
    public abstract virtual void TestStarted(TestName testName);
    public abstract virtual void TestFinished(TestResult result);
    public abstract virtual void SuiteStarted(TestName testName);
    public abstract virtual void SuiteFinished(TestResult result);
    public abstract virtual void UnhandledException(Exception exception);
    public abstract virtual void TestOutput(TestOutput testOutput);
}
public class NUnit.Core.Extensibility.Addin : object {
    private string typeName;
    private string name;
    private string description;
    private ExtensionType extensionType;
    private AddinStatus status;
    private string message;
    public string Name { get; }
    public string Description { get; }
    public ExtensionType ExtensionType { get; }
    public string TypeName { get; }
    public AddinStatus Status { get; public set; }
    public string Message { get; public set; }
    public Addin(Type type);
    public string get_Name();
    public string get_Description();
    public ExtensionType get_ExtensionType();
    public string get_TypeName();
    public AddinStatus get_Status();
    public void set_Status(AddinStatus value);
    public string get_Message();
    public void set_Message(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum NUnit.Core.Extensibility.AddinStatus : Enum {
    public int value__;
    public static AddinStatus Unknown;
    public static AddinStatus Enabled;
    public static AddinStatus Disabled;
    public static AddinStatus Loaded;
    public static AddinStatus Error;
}
public class NUnit.Core.Extensibility.DecoratorPriority : object {
    public static int Default;
    public static int First;
    public static int Normal;
    public static int Last;
    private static DecoratorPriority();
}
[FlagsAttribute]
public enum NUnit.Core.Extensibility.ExtensionType : Enum {
    public int value__;
    public static ExtensionType Core;
    public static ExtensionType Client;
    public static ExtensionType Gui;
}
public interface NUnit.Core.Extensibility.IAddin {
    public abstract virtual bool Install(IExtensionHost host);
}
public interface NUnit.Core.Extensibility.IAddinRegistry {
    public IList Addins { get; }
    public abstract virtual IList get_Addins();
    public abstract virtual void Register(Addin addin);
    public abstract virtual bool IsAddinRegistered(string name);
    public abstract virtual void SetStatus(string name, AddinStatus status, string message);
}
public interface NUnit.Core.Extensibility.IDataPointProvider {
    public abstract virtual bool HasDataFor(ParameterInfo parameter);
    public abstract virtual IEnumerable GetDataFor(ParameterInfo parameter);
}
public interface NUnit.Core.Extensibility.IDataPointProvider2 {
    public abstract virtual bool HasDataFor(ParameterInfo parameter, Test parentSuite);
    public abstract virtual IEnumerable GetDataFor(ParameterInfo parameter, Test parentSuite);
}
public interface NUnit.Core.Extensibility.IExtensionHost {
    public IExtensionPoint[] ExtensionPoints { get; }
    [ObsoleteAttribute("Use the FrameworkRegistry extension point instead")]
public IFrameworkRegistry FrameworkRegistry { get; }
    public ExtensionType ExtensionTypes { get; }
    public abstract virtual IExtensionPoint[] get_ExtensionPoints();
    public abstract virtual IFrameworkRegistry get_FrameworkRegistry();
    public abstract virtual IExtensionPoint GetExtensionPoint(string name);
    public abstract virtual ExtensionType get_ExtensionTypes();
}
public interface NUnit.Core.Extensibility.IExtensionPoint {
    public string Name { get; }
    public IExtensionHost Host { get; }
    public abstract virtual string get_Name();
    public abstract virtual IExtensionHost get_Host();
    public abstract virtual void Install(object extension);
    public abstract virtual void Remove(object extension);
}
public interface NUnit.Core.Extensibility.IExtensionPoint2 {
    public abstract virtual void Install(object extension, int priority);
}
public interface NUnit.Core.Extensibility.IFrameworkRegistry {
    public abstract virtual void Register(string frameworkName, string assemblyName);
}
public interface NUnit.Core.Extensibility.ISuiteBuilder {
    public abstract virtual bool CanBuildFrom(Type type);
    public abstract virtual Test BuildFrom(Type type);
}
public interface NUnit.Core.Extensibility.ITestCaseBuilder {
    public abstract virtual bool CanBuildFrom(MethodInfo method);
    public abstract virtual Test BuildFrom(MethodInfo method);
}
public interface NUnit.Core.Extensibility.ITestCaseBuilder2 {
    public abstract virtual bool CanBuildFrom(MethodInfo method, Test suite);
    public abstract virtual Test BuildFrom(MethodInfo method, Test suite);
}
public interface NUnit.Core.Extensibility.ITestCaseProvider {
    public abstract virtual bool HasTestCasesFor(MethodInfo method);
    public abstract virtual IEnumerable GetTestCasesFor(MethodInfo method);
}
public interface NUnit.Core.Extensibility.ITestCaseProvider2 {
    public abstract virtual bool HasTestCasesFor(MethodInfo method, Test suite);
    public abstract virtual IEnumerable GetTestCasesFor(MethodInfo method, Test suite);
}
public interface NUnit.Core.Extensibility.ITestDecorator {
    public abstract virtual Test Decorate(Test test, MemberInfo member);
}
[AttributeUsageAttribute("4")]
public class NUnit.Core.Extensibility.NUnitAddinAttribute : Attribute {
    public string Name;
    public string Description;
    public ExtensionType Type;
}
public class NUnit.Core.Extensibility.ParameterSet : object {
    private static string DESCRIPTION;
    private static string CATEGORIES;
    private RunState runState;
    private Exception providerException;
    private Object[] arguments;
    private Object[] originalArguments;
    private Type expectedExceptionType;
    private string expectedExceptionName;
    private string expectedMessage;
    private string matchType;
    private object expectedResult;
    private string testName;
    private string ignoreReason;
    private bool isIgnored;
    private bool isExplicit;
    private bool hasExpectedResult;
    private IDictionary properties;
    public RunState RunState { get; public set; }
    public Exception ProviderException { get; }
    public Object[] Arguments { get; public set; }
    public Object[] OriginalArguments { get; }
    public Type ExpectedException { get; public set; }
    public string ExpectedExceptionName { get; public set; }
    public string ExpectedMessage { get; public set; }
    public string MatchType { get; public set; }
    public object Result { get; public set; }
    public bool HasExpectedResult { get; }
    public string Description { get; public set; }
    public string TestName { get; public set; }
    public bool Ignored { get; public set; }
    public bool Explicit { get; public set; }
    public string IgnoreReason { get; public set; }
    public IList Categories { get; }
    public IDictionary Properties { get; }
    public ParameterSet(Exception exception);
    private static ParameterSet();
    public RunState get_RunState();
    public void set_RunState(RunState value);
    public Exception get_ProviderException();
    public sealed virtual Object[] get_Arguments();
    public void set_Arguments(Object[] value);
    public Object[] get_OriginalArguments();
    public sealed virtual Type get_ExpectedException();
    public void set_ExpectedException(Type value);
    public sealed virtual string get_ExpectedExceptionName();
    public void set_ExpectedExceptionName(string value);
    public string get_ExpectedMessage();
    public void set_ExpectedMessage(string value);
    public string get_MatchType();
    public void set_MatchType(string value);
    public sealed virtual object get_Result();
    public void set_Result(object value);
    public sealed virtual bool get_HasExpectedResult();
    public sealed virtual string get_Description();
    public void set_Description(string value);
    public sealed virtual string get_TestName();
    public void set_TestName(string value);
    public sealed virtual bool get_Ignored();
    public void set_Ignored(bool value);
    public sealed virtual bool get_Explicit();
    public void set_Explicit(bool value);
    public sealed virtual string get_IgnoreReason();
    public void set_IgnoreReason(string value);
    public IList get_Categories();
    public IDictionary get_Properties();
    public static ParameterSet FromDataSource(object source);
    private static object GetParm(object source, string name);
}
public class NUnit.Core.Extensibility.TestFramework : object {
    public string Name;
    public string AssemblyName;
    public TestFramework(string frameworkName, string assemblyName);
}
public enum NUnit.Core.FailureSite : Enum {
    public int value__;
    public static FailureSite Test;
    public static FailureSite SetUp;
    public static FailureSite TearDown;
    public static FailureSite Parent;
    public static FailureSite Child;
}
public class NUnit.Core.Filters.AndFilter : TestFilter {
    private ArrayList filters;
    public ITestFilter[] Filters { get; }
    public AndFilter(ITestFilter[] filters);
    public void Add(ITestFilter filter);
    public ITestFilter[] get_Filters();
    public virtual bool Pass(ITest test);
    public virtual bool Match(ITest test);
    public virtual string ToString();
}
public class NUnit.Core.Filters.CategoryFilter : TestFilter {
    private ArrayList categories;
    public IList Categories { get; }
    public CategoryFilter(string name);
    public CategoryFilter(String[] names);
    public void AddCategory(string name);
    public virtual bool Match(ITest test);
    public virtual string ToString();
    public IList get_Categories();
}
public class NUnit.Core.Filters.IdFilter : TestFilter {
    private int _runnerID;
    private TestID _testID;
    public IdFilter(int runnerID, TestID testID);
    public virtual bool Match(ITest test);
}
public class NUnit.Core.Filters.NameFilter : TestFilter {
    private ArrayList testNames;
    public NameFilter(TestName testName);
    public void Add(TestName testName);
    public virtual bool Match(ITest test);
}
public class NUnit.Core.Filters.NotFilter : TestFilter {
    private ITestFilter baseFilter;
    private bool topLevel;
    public bool TopLevel { get; public set; }
    public ITestFilter BaseFilter { get; }
    public NotFilter(ITestFilter baseFilter);
    public NotFilter(ITestFilter baseFilter, bool topLevel);
    public bool get_TopLevel();
    public void set_TopLevel(bool value);
    public ITestFilter get_BaseFilter();
    public virtual bool Match(ITest test);
    protected virtual bool MatchDescendant(ITest test);
    public virtual string ToString();
}
public class NUnit.Core.Filters.OrFilter : TestFilter {
    private ArrayList filters;
    public ITestFilter[] Filters { get; }
    public OrFilter(ITestFilter[] filters);
    public void Add(ITestFilter filter);
    public ITestFilter[] get_Filters();
    public virtual bool Pass(ITest test);
    public virtual bool Match(ITest test);
    public virtual string ToString();
}
public class NUnit.Core.Filters.SimpleNameFilter : TestFilter {
    private ArrayList names;
    public SimpleNameFilter(string name);
    public SimpleNameFilter(String[] namesToAdd);
    public void Add(string name);
    public void Add(String[] namesToAdd);
    public virtual bool Match(ITest test);
}
public interface NUnit.Core.IAgency {
    public abstract virtual void Register(TestAgent agent);
}
public interface NUnit.Core.IService {
    public abstract virtual void InitializeService();
    public abstract virtual void UnloadService();
}
public interface NUnit.Core.ITest {
    public TestName TestName { get; }
    public string ClassName { get; }
    public string MethodName { get; }
    public string TestType { get; }
    public RunState RunState { get; public set; }
    public string IgnoreReason { get; public set; }
    public int TestCount { get; }
    public IList Categories { get; }
    public string Description { get; public set; }
    public IDictionary Properties { get; }
    public bool IsSuite { get; }
    public ITest Parent { get; }
    public IList Tests { get; }
    public abstract virtual TestName get_TestName();
    public abstract virtual string get_ClassName();
    public abstract virtual string get_MethodName();
    public abstract virtual string get_TestType();
    public abstract virtual RunState get_RunState();
    public abstract virtual void set_RunState(RunState value);
    public abstract virtual string get_IgnoreReason();
    public abstract virtual void set_IgnoreReason(string value);
    public abstract virtual int get_TestCount();
    public abstract virtual IList get_Categories();
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual IDictionary get_Properties();
    public abstract virtual bool get_IsSuite();
    public abstract virtual ITest get_Parent();
    public abstract virtual IList get_Tests();
    public abstract virtual int CountTestCases(ITestFilter filter);
}
public interface NUnit.Core.ITestFilter {
    public bool IsEmpty { get; }
    public abstract virtual bool get_IsEmpty();
    public abstract virtual bool Pass(ITest test);
    public abstract virtual bool Match(ITest test);
}
public enum NUnit.Core.LoggingThreshold : Enum {
    public int value__;
    public static LoggingThreshold Off;
    public static LoggingThreshold Fatal;
    public static LoggingThreshold Error;
    public static LoggingThreshold Warn;
    public static LoggingThreshold Info;
    public static LoggingThreshold Debug;
    public static LoggingThreshold All;
}
public class NUnit.Core.OSPlatform : object {
    private PlatformID platform;
    private Version version;
    private ProductType product;
    private static OSPlatform currentPlatform;
    public static PlatformID UnixPlatformID_Microsoft;
    public static PlatformID UnixPlatformID_Mono;
    public static OSPlatform CurrentPlatform { get; }
    public PlatformID Platform { get; }
    public Version Version { get; }
    public ProductType Product { get; }
    public bool IsWindows { get; }
    public bool IsUnix { get; }
    public bool IsWin32S { get; }
    public bool IsWin32Windows { get; }
    public bool IsWin32NT { get; }
    public bool IsWinCE { get; }
    public bool IsXbox { get; }
    public bool IsMacOSX { get; }
    public bool IsWin95 { get; }
    public bool IsWin98 { get; }
    public bool IsWinME { get; }
    public bool IsNT3 { get; }
    public bool IsNT4 { get; }
    public bool IsNT5 { get; }
    public bool IsWin2K { get; }
    public bool IsWinXP { get; }
    public bool IsWin2003Server { get; }
    public bool IsNT6 { get; }
    public bool IsVista { get; }
    public bool IsWin2008Server { get; }
    public bool IsWin2008ServerR1 { get; }
    public bool IsWin2008ServerR2 { get; }
    public bool IsWin2012Server { get; }
    public bool IsWindows7 { get; }
    public bool IsWindows8 { get; }
    public OSPlatform(PlatformID platform, Version version);
    public OSPlatform(PlatformID platform, Version version, ProductType product);
    private static OSPlatform();
    public static OSPlatform get_CurrentPlatform();
    private static bool GetVersionEx(OSVERSIONINFOEX& osvi);
    public PlatformID get_Platform();
    public Version get_Version();
    public ProductType get_Product();
    public bool get_IsWindows();
    public bool get_IsUnix();
    public bool get_IsWin32S();
    public bool get_IsWin32Windows();
    public bool get_IsWin32NT();
    public bool get_IsWinCE();
    public bool get_IsXbox();
    public bool get_IsMacOSX();
    public bool get_IsWin95();
    public bool get_IsWin98();
    public bool get_IsWinME();
    public bool get_IsNT3();
    public bool get_IsNT4();
    public bool get_IsNT5();
    public bool get_IsWin2K();
    public bool get_IsWinXP();
    public bool get_IsWin2003Server();
    public bool get_IsNT6();
    public bool get_IsVista();
    public bool get_IsWin2008Server();
    public bool get_IsWin2008ServerR1();
    public bool get_IsWin2008ServerR2();
    public bool get_IsWin2012Server();
    public bool get_IsWindows7();
    public bool get_IsWindows8();
}
public enum NUnit.Core.ProcessModel : Enum {
    public int value__;
    public static ProcessModel Default;
    public static ProcessModel Single;
    public static ProcessModel Separate;
    public static ProcessModel Multiple;
}
public class NUnit.Core.PropertyNames : ValueType {
    public static string ExpectedException;
    public static string LegacyExceptionType;
    public static string ExpectedExceptionName;
    public static string LegacyExceptionName;
    public static string ExpectedMessage;
    public static string MatchType;
    public static string ExpectedResult;
    public static string HasExpectedResult;
    public static string Description;
    public static string TestName;
    public static string Arguments;
    public static string Ignored;
    public static string Explicit;
    public static string IgnoreReason;
    public static string Properties;
    public static string Categories;
    public static string CategoryName;
    public static string Reason;
    public static string IgnoreExcluded;
    public static string RequiredAddin;
    private static PropertyNames();
}
public enum NUnit.Core.ResultState : Enum {
    public int value__;
    public static ResultState Inconclusive;
    public static ResultState NotRunnable;
    public static ResultState Skipped;
    public static ResultState Ignored;
    public static ResultState Success;
    public static ResultState Failure;
    public static ResultState Error;
    public static ResultState Cancelled;
}
public enum NUnit.Core.RunState : Enum {
    public int value__;
    public static RunState NotRunnable;
    public static RunState Runnable;
    public static RunState Explicit;
    public static RunState Skipped;
    public static RunState Ignored;
}
public class NUnit.Core.RuntimeFramework : object {
    public static Version DefaultVersion;
    private static RuntimeFramework currentFramework;
    private static RuntimeFramework[] availableFrameworks;
    private RuntimeType runtime;
    private Version frameworkVersion;
    private Version clrVersion;
    private string displayName;
    public static RuntimeFramework CurrentFramework { get; }
    public static RuntimeFramework[] AvailableFrameworks { get; }
    public bool IsAvailable { get; }
    public RuntimeType Runtime { get; }
    public Version FrameworkVersion { get; }
    public Version ClrVersion { get; }
    public bool AllowAnyVersion { get; }
    public string DisplayName { get; }
    public RuntimeFramework(RuntimeType runtime, Version version);
    private static RuntimeFramework();
    private void InitFromFrameworkVersion(Version version);
    private static void ThrowInvalidFrameworkVersion(Version version);
    private void InitFromClrVersion(Version version);
    public static RuntimeFramework get_CurrentFramework();
    public static RuntimeFramework[] get_AvailableFrameworks();
    public bool get_IsAvailable();
    public RuntimeType get_Runtime();
    public Version get_FrameworkVersion();
    public Version get_ClrVersion();
    public bool get_AllowAnyVersion();
    public string get_DisplayName();
    public static RuntimeFramework Parse(string s);
    public static RuntimeFramework GetBestAvailableFramework(RuntimeFramework target);
    public virtual string ToString();
    public bool Supports(RuntimeFramework target);
    private static bool IsRuntimeTypeName(string name);
    private static string GetDefaultDisplayName(RuntimeType runtime, Version version);
    private static bool VersionsMatch(Version v1, Version v2);
    private static void AppendMonoFrameworks(FrameworkCollection frameworks);
    private static void AppendAllMonoFrameworks(FrameworkCollection frameworks);
    private static void AppendDefaultMonoFramework(FrameworkCollection frameworks);
    private static void AppendMonoFramework(FrameworkCollection frameworks, string monoPrefix, string version);
    private static void AppendDotNetFrameworks(FrameworkCollection frameworks);
    private static void AppendExtremelyOldDotNetFrameworkVersions(FrameworkCollection frameworks);
    private static void AppendOlderDotNetFrameworkVersion(FrameworkCollection frameworks, RegistryKey versionKey, Version version);
    private static void AppendDotNetFourFrameworkVersions(FrameworkCollection frameworks, RegistryKey versionKey);
    private static bool CheckInstallDword(RegistryKey key);
}
public enum NUnit.Core.RuntimeType : Enum {
    public int value__;
    public static RuntimeType Any;
    public static RuntimeType Net;
    public static RuntimeType NetCF;
    public static RuntimeType SSCLI;
    public static RuntimeType Mono;
}
public abstract class NUnit.Core.Test : object {
    private static string DESCRIPTION;
    private static string IGNOREREASON;
    private static string CATEGORIES;
    private TestName testName;
    private RunState runState;
    private Test parent;
    private IDictionary properties;
    public bool RequiresThread { get; }
    public ApartmentState ApartmentState { get; }
    protected bool ShouldRunOnOwnThread { get; }
    public TestName TestName { get; }
    public string TestType { get; }
    public RunState RunState { get; public set; }
    public string IgnoreReason { get; public set; }
    public int TestCount { get; }
    public IList Categories { get; public set; }
    public string Description { get; public set; }
    public IDictionary Properties { get; public set; }
    public bool IsSuite { get; }
    private ITest NUnit.Core.ITest.Parent { get; }
    public Test Parent { get; public set; }
    public IList Tests { get; }
    public Type FixtureType { get; }
    public string ClassName { get; }
    public string MethodName { get; }
    public object Fixture { get; public set; }
    protected Test(string name);
    protected Test(string pathName, string name);
    protected Test(TestName testName);
    private static Test();
    public bool get_RequiresThread();
    public ApartmentState get_ApartmentState();
    protected ApartmentState GetCurrentApartment();
    protected virtual bool get_ShouldRunOnOwnThread();
    public void SetRunnerID(int runnerID, bool recursive);
    public sealed virtual TestName get_TestName();
    public abstract virtual string get_TestType();
    public sealed virtual RunState get_RunState();
    public sealed virtual void set_RunState(RunState value);
    public sealed virtual string get_IgnoreReason();
    public sealed virtual void set_IgnoreReason(string value);
    public virtual int get_TestCount();
    public sealed virtual IList get_Categories();
    public void set_Categories(IList value);
    public sealed virtual string get_Description();
    public sealed virtual void set_Description(string value);
    public sealed virtual IDictionary get_Properties();
    public void set_Properties(IDictionary value);
    public virtual bool get_IsSuite();
    private sealed virtual override ITest NUnit.Core.ITest.get_Parent();
    public Test get_Parent();
    public void set_Parent(Test value);
    public virtual IList get_Tests();
    public virtual Type get_FixtureType();
    public sealed virtual string get_ClassName();
    public virtual string get_MethodName();
    public abstract virtual object get_Fixture();
    public abstract virtual void set_Fixture(object value);
    public virtual int CountTestCases(ITestFilter filter);
    public abstract virtual TestResult Run(EventListener listener, ITestFilter filter);
    public sealed virtual int CompareTo(object obj);
}
public abstract class NUnit.Core.TestAgent : MarshalByRefObject {
    private IAgency agency;
    private Guid agentId;
    public IAgency Agency { get; }
    public Guid Id { get; }
    public TestAgent(Guid agentId);
    public TestAgent(Guid agentId, IAgency agency);
    public IAgency get_Agency();
    public Guid get_Id();
    public abstract virtual bool Start();
    public abstract virtual void Stop();
    public abstract virtual TestRunner CreateRunner(int runnerId);
    public sealed virtual void Dispose();
    public virtual object InitializeLifetimeService();
}
public class NUnit.Core.TestAssemblyInfo : object {
    private string assemblyName;
    private Version imageRuntimeVersion;
    private RuntimeFramework runnerRuntimeFramework;
    private int processId;
    private string moduleName;
    private string domainName;
    private string appBase;
    private string binPath;
    private string configFile;
    private IList testFrameworks;
    public string Name { get; }
    public Version ImageRuntimeVersion { get; }
    public RuntimeFramework RunnerRuntimeFramework { get; }
    public Version RunnerRuntimeVersion { get; }
    public int ProcessId { get; }
    public string DomainName { get; }
    public string ApplicationBase { get; }
    public string PrivateBinPath { get; }
    public string ConfigurationFile { get; }
    public string ModuleName { get; public set; }
    public IList TestFrameworks { get; }
    public TestAssemblyInfo(string assemblyName, Version imageRuntimeVersion, RuntimeFramework runnerRuntimeFramework, IList testFrameworks);
    public string get_Name();
    public Version get_ImageRuntimeVersion();
    public RuntimeFramework get_RunnerRuntimeFramework();
    public Version get_RunnerRuntimeVersion();
    public int get_ProcessId();
    public string get_DomainName();
    public string get_ApplicationBase();
    public string get_PrivateBinPath();
    public string get_ConfigurationFile();
    public string get_ModuleName();
    public void set_ModuleName(string value);
    public IList get_TestFrameworks();
}
public abstract class NUnit.Core.TestFilter : object {
    public static TestFilter Empty;
    public bool IsEmpty { get; }
    private static TestFilter();
    public sealed virtual bool get_IsEmpty();
    public virtual bool Pass(ITest test);
    public abstract virtual bool Match(ITest test);
    protected virtual bool MatchParent(ITest test);
    protected virtual bool MatchDescendant(ITest test);
}
public class NUnit.Core.TestID : object {
    private int id;
    private static int nextID;
    public TestID(int id);
    private static TestID();
    public static TestID Parse(string s);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(TestID id1, TestID id2);
    public static bool op_Inequality(TestID id1, TestID id2);
    public sealed virtual object Clone();
}
public class NUnit.Core.TestInfo : object {
    private TestName testName;
    private string className;
    private string methodName;
    private string testType;
    private RunState runState;
    private string ignoreReason;
    private int testCaseCount;
    private bool isSuite;
    private string description;
    private ArrayList categories;
    private ListDictionary properties;
    public TestName TestName { get; }
    public string ClassName { get; }
    public string MethodName { get; }
    public string TestType { get; }
    public string Description { get; public set; }
    public RunState RunState { get; public set; }
    public string IgnoreReason { get; public set; }
    public int TestCount { get; }
    public ITest Parent { get; }
    public IList Categories { get; }
    public IList Tests { get; }
    public bool IsSuite { get; }
    public IDictionary Properties { get; }
    public TestInfo(ITest test);
    public TestInfo(TestName testName, ITest[] tests);
    public TestInfo(TestName testName);
    public sealed virtual TestName get_TestName();
    public sealed virtual string get_ClassName();
    public sealed virtual string get_MethodName();
    public sealed virtual string get_TestType();
    public sealed virtual string get_Description();
    public sealed virtual void set_Description(string value);
    public sealed virtual RunState get_RunState();
    public sealed virtual void set_RunState(RunState value);
    public sealed virtual string get_IgnoreReason();
    public sealed virtual void set_IgnoreReason(string value);
    public sealed virtual int get_TestCount();
    public virtual ITest get_Parent();
    public sealed virtual IList get_Categories();
    public virtual IList get_Tests();
    public sealed virtual bool get_IsSuite();
    public sealed virtual IDictionary get_Properties();
    public virtual int CountTestCases(ITestFilter filter);
}
public class NUnit.Core.TestName : object {
    private TestID testID;
    private int runnerID;
    private string name;
    private string fullName;
    public TestID TestID { get; public set; }
    public int RunnerID { get; public set; }
    public string Name { get; public set; }
    public string FullName { get; public set; }
    public string UniqueName { get; }
    public TestID get_TestID();
    public void set_TestID(TestID value);
    public int get_RunnerID();
    public void set_RunnerID(int value);
    public string get_Name();
    public void set_Name(string value);
    public string get_FullName();
    public void set_FullName(string value);
    public string get_UniqueName();
    public static TestName Parse(string s);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(TestName name1, TestName name2);
    public static bool op_Inequality(TestName name1, TestName name2);
    public sealed virtual object Clone();
}
public class NUnit.Core.TestNode : TestInfo {
    private ITest parent;
    private ArrayList tests;
    public ITest Parent { get; }
    public IList Tests { get; }
    public TestNode(ITest test);
    public TestNode(TestName testName, ITest[] tests);
    public virtual ITest get_Parent();
    public virtual IList get_Tests();
}
public class NUnit.Core.TestOutput : object {
    private string text;
    private TestOutputType type;
    public string Text { get; }
    public TestOutputType Type { get; }
    public TestOutput(string text, TestOutputType type);
    public virtual string ToString();
    public string get_Text();
    public TestOutputType get_Type();
}
public enum NUnit.Core.TestOutputType : Enum {
    public int value__;
    public static TestOutputType Out;
    public static TestOutputType Error;
    public static TestOutputType Trace;
    public static TestOutputType Log;
}
public class NUnit.Core.TestPackage : object {
    private string name;
    private string fullName;
    private ListDictionary settings;
    private string basePath;
    private string configFile;
    private string binPath;
    private bool autoBinPath;
    private ArrayList assemblies;
    private string testName;
    private bool isSingleAssembly;
    public string Name { get; }
    public string FullName { get; }
    public string BasePath { get; public set; }
    public string ConfigurationFile { get; public set; }
    public string PrivateBinPath { get; public set; }
    public bool AutoBinPath { get; public set; }
    public IList Assemblies { get; }
    public bool IsSingleAssembly { get; }
    public string TestName { get; public set; }
    public IDictionary Settings { get; }
    public TestPackage(string name);
    public TestPackage(string name, IList assemblies);
    public string get_Name();
    public string get_FullName();
    public string get_BasePath();
    public void set_BasePath(string value);
    public string get_ConfigurationFile();
    public void set_ConfigurationFile(string value);
    public string get_PrivateBinPath();
    public void set_PrivateBinPath(string value);
    public bool get_AutoBinPath();
    public void set_AutoBinPath(bool value);
    public IList get_Assemblies();
    public bool get_IsSingleAssembly();
    public string get_TestName();
    public void set_TestName(string value);
    public IDictionary get_Settings();
    public object GetSetting(string name, object defaultSetting);
    public string GetSetting(string name, string defaultSetting);
    public bool GetSetting(string name, bool defaultSetting);
    public int GetSetting(string name, int defaultSetting);
    public Enum GetSetting(string name, Enum defaultSetting);
    private static bool IsAssemblyFileType(string path);
}
public class NUnit.Core.TestResult : object {
    private ResultState resultState;
    private FailureSite failureSite;
    private double time;
    private TestInfo test;
    private string stackTrace;
    private string message;
    private IList results;
    private int assertCount;
    public ResultState ResultState { get; }
    public FailureSite FailureSite { get; }
    public bool Executed { get; }
    public string Name { get; }
    public string FullName { get; }
    public ITest Test { get; }
    public bool IsSuccess { get; }
    public bool IsFailure { get; }
    public bool IsError { get; }
    public string Description { get; }
    public double Time { get; public set; }
    public string Message { get; }
    public string StackTrace { get; public set; }
    public int AssertCount { get; public set; }
    public bool HasResults { get; }
    public IList Results { get; }
    public TestResult(TestInfo test);
    public TestResult(ITest test);
    public TestResult(TestName testName);
    public ResultState get_ResultState();
    public FailureSite get_FailureSite();
    public bool get_Executed();
    public virtual string get_Name();
    public virtual string get_FullName();
    public ITest get_Test();
    public virtual bool get_IsSuccess();
    public virtual bool get_IsFailure();
    public virtual bool get_IsError();
    public string get_Description();
    public double get_Time();
    public void set_Time(double value);
    public string get_Message();
    public virtual string get_StackTrace();
    public virtual void set_StackTrace(string value);
    public int get_AssertCount();
    public void set_AssertCount(int value);
    public bool get_HasResults();
    public IList get_Results();
    public void Success();
    public void Success(string message);
    public void Ignore(string reason);
    public void Ignore(Exception ex);
    public void Ignore(string reason, string stackTrace);
    public void Skip(string reason);
    public void Invalid(string reason);
    public void Invalid(Exception ex);
    public void SetResult(ResultState resultState, string reason, string stackTrace, FailureSite failureSite);
    public void SetResult(ResultState resultState, string reason, string stackTrace);
    public void SetResult(ResultState resultState, Exception ex, FailureSite failureSite);
    public void Failure(string message, string stackTrace);
    public void Failure(string message, string stackTrace, FailureSite failureSite);
    public void Error(Exception exception);
    public void Error(Exception exception, FailureSite failureSite);
    public void AddResult(TestResult result);
    private static string BuildMessage(Exception exception);
    private static string BuildStackTrace(Exception exception);
    private static string GetStackTrace(Exception exception);
}
public interface NUnit.Core.TestRunner {
    public int ID { get; }
    public bool Running { get; }
    public IList AssemblyInfo { get; }
    public ITest Test { get; }
    public TestResult TestResult { get; }
    public abstract virtual int get_ID();
    public abstract virtual bool get_Running();
    public abstract virtual IList get_AssemblyInfo();
    public abstract virtual ITest get_Test();
    public abstract virtual TestResult get_TestResult();
    public abstract virtual bool Load(TestPackage package);
    public abstract virtual void Unload();
    public abstract virtual int CountTestCases(ITestFilter filter);
    public abstract virtual TestResult Run(EventListener listener, ITestFilter filter, bool captureTrace, LoggingThreshold logLevel);
    public abstract virtual void BeginRun(EventListener listener, ITestFilter filter, bool captureTrace, LoggingThreshold logLevel);
    public abstract virtual TestResult EndRun();
    public abstract virtual void CancelRun();
    public abstract virtual void Wait();
}
public interface NUnit.Framework.ITestCaseData {
    public Object[] Arguments { get; }
    public object Result { get; }
    public bool HasExpectedResult { get; }
    public Type ExpectedException { get; }
    public string ExpectedExceptionName { get; }
    public string TestName { get; }
    public string Description { get; }
    public bool Ignored { get; }
    public bool Explicit { get; }
    public string IgnoreReason { get; }
    public abstract virtual Object[] get_Arguments();
    public abstract virtual object get_Result();
    public abstract virtual bool get_HasExpectedResult();
    public abstract virtual Type get_ExpectedException();
    public abstract virtual string get_ExpectedExceptionName();
    public abstract virtual string get_TestName();
    public abstract virtual string get_Description();
    public abstract virtual bool get_Ignored();
    public abstract virtual bool get_Explicit();
    public abstract virtual string get_IgnoreReason();
}
