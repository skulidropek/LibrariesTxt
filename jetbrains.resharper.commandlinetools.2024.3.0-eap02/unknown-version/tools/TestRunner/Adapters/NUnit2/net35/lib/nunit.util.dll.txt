[DefaultMemberAttribute("Item")]
public abstract class Codeblast.CommandLineOptions : object {
    protected ArrayList parameters;
    protected bool isInvalid;
    private int optionCount;
    private ArrayList invalidArguments;
    private bool allowForwardSlash;
    public IList InvalidArguments { get; }
    public bool NoArgs { get; }
    public bool AllowForwardSlash { get; }
    public string Item { get; }
    public ArrayList Parameters { get; }
    public int ParameterCount { get; }
    public CommandLineOptions(String[] args);
    public CommandLineOptions(bool allowForwardSlash, String[] args);
    public IList get_InvalidArguments();
    public bool get_NoArgs();
    public bool get_AllowForwardSlash();
    public int Init(String[] args);
    protected virtual int IsOption(string opt);
    protected virtual bool IsOptionNameChar(char c);
    protected virtual void InvalidOption(string name);
    protected virtual bool IsValidParameter(string param);
    protected virtual bool MatchShortName(FieldInfo field, string name);
    protected virtual FieldInfo GetMemberField(string name);
    protected virtual object GetOptionValue(FieldInfo field);
    protected virtual bool GetOption(String[] args, Int32& index, int pos);
    protected virtual void SplitOptionAndValue(String& opt, Object& val);
    public string get_Item(int index);
    public ArrayList get_Parameters();
    public int get_ParameterCount();
    public virtual void Help();
    public virtual string GetHelpText();
}
[AttributeUsageAttribute("256")]
public class Codeblast.OptionAttribute : Attribute {
    protected object optValue;
    protected string optName;
    protected string description;
    public string Short { get; public set; }
    public object Value { get; public set; }
    public string Description { get; public set; }
    public string get_Short();
    public void set_Short(string value);
    public object get_Value();
    public void set_Value(object value);
    public string get_Description();
    public void set_Description(string value);
}
public class NUnit.Util.AddinManager : object {
    private static Logger log;
    private IAddinRegistry addinRegistry;
    private static AddinManager();
    public void RegisterAddins();
    public void Register(string path);
    public sealed virtual void InitializeService();
    public sealed virtual void UnloadService();
}
public class NUnit.Util.AddinRegistry : MarshalByRefObject {
    private ArrayList addins;
    public IList Addins { get; }
    public sealed virtual void Register(Addin addin);
    public sealed virtual IList get_Addins();
    public sealed virtual bool IsAddinRegistered(string name);
    public sealed virtual void SetStatus(string name, AddinStatus status, string message);
    private Addin FindAddinByName(string name);
    public sealed virtual void InitializeService();
    public sealed virtual void UnloadService();
    public virtual object InitializeLifetimeService();
}
public enum NUnit.Util.AgentStatus : Enum {
    public int value__;
    public static AgentStatus Unknown;
    public static AgentStatus Starting;
    public static AgentStatus Ready;
    public static AgentStatus Busy;
    public static AgentStatus Stopping;
}
public abstract class NUnit.Util.AggregatingTestRunner : MarshalByRefObject {
    private Logger log;
    private static int AggregateTestID;
    protected int runnerID;
    protected ArrayList runners;
    private bool runInParallel;
    protected TestNode aggregateTest;
    private TestResult testResult;
    protected EventListener listener;
    protected TestName testName;
    private Logger Log { get; }
    public int ID { get; }
    public bool Running { get; }
    public IList AssemblyInfo { get; }
    public ITest Test { get; }
    public TestResult TestResult { get; }
    public AggregatingTestRunner(int runnerID);
    private static AggregatingTestRunner();
    private Logger get_Log();
    public virtual int get_ID();
    public virtual bool get_Running();
    public virtual IList get_AssemblyInfo();
    public virtual ITest get_Test();
    public virtual TestResult get_TestResult();
    public sealed virtual bool Load(TestPackage package);
    protected abstract virtual TestRunner CreateRunner(int runnerID);
    public virtual void Unload();
    public virtual int CountTestCases(ITestFilter filter);
    public virtual TestResult Run(EventListener listener, ITestFilter filter, bool tracing, LoggingThreshold logLevel);
    public virtual void BeginRun(EventListener listener, ITestFilter filter, bool tracing, LoggingThreshold logLevel);
    public virtual TestResult EndRun();
    public virtual void CancelRun();
    public virtual void Wait();
    public sealed virtual void TestStarted(TestName testName);
    public sealed virtual void RunStarted(string name, int testCount);
    public sealed virtual void RunFinished(Exception exception);
    private sealed virtual override void NUnit.Core.EventListener.RunFinished(TestResult result);
    public sealed virtual void SuiteFinished(TestResult result);
    public sealed virtual void TestFinished(TestResult result);
    public sealed virtual void UnhandledException(Exception exception);
    public sealed virtual void TestOutput(TestOutput testOutput);
    public sealed virtual void SuiteStarted(TestName suiteName);
    public virtual object InitializeLifetimeService();
    public sealed virtual void Dispose();
}
public class NUnit.Util.AssemblyChangedHandler : MulticastDelegate {
    public AssemblyChangedHandler(object object, IntPtr method);
    public virtual void Invoke(string fullPath);
    public virtual IAsyncResult BeginInvoke(string fullPath, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class NUnit.Util.AssemblyList : CollectionBase {
    [CompilerGeneratedAttribute]
private EventHandler Changed;
    public string Item { get; public set; }
    public string get_Item(int index);
    public void set_Item(int index, string value);
    [CompilerGeneratedAttribute]
public void add_Changed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Changed(EventHandler value);
    public String[] ToArray();
    public void Add(string assemblyPath);
    public void Remove(string assemblyPath);
    public bool Contains(string assemblyPath);
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    private void FireChangedEvent();
}
public class NUnit.Util.AssemblyWatcher : object {
    private static Logger log;
    private FileSystemWatcher[] fileWatchers;
    private FileInfo[] files;
    protected Timer timer;
    protected string changedAssemblyPath;
    [CompilerGeneratedAttribute]
private AssemblyChangedHandler AssemblyChanged;
    private static AssemblyWatcher();
    protected FileInfo GetFileInfo(int index);
    public sealed virtual void Setup(int delay, string assemblyFileName);
    public sealed virtual void Setup(int delay, IList`1<string> assemblies);
    public sealed virtual void Start();
    public sealed virtual void Stop();
    private void EnableWatchers(bool enable);
    public sealed virtual void FreeResources();
    [CompilerGeneratedAttribute]
public sealed virtual void add_AssemblyChanged(AssemblyChangedHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AssemblyChanged(AssemblyChangedHandler value);
    protected void OnTimer(object source, ElapsedEventArgs e);
    protected void OnChanged(object source, FileSystemEventArgs e);
    protected void PublishEvent();
}
public enum NUnit.Util.BinPathType : Enum {
    public int value__;
    public static BinPathType Auto;
    public static BinPathType Manual;
    public static BinPathType None;
}
public class NUnit.Util.CategoryExpression : object {
    private static Char[] ops;
    private string text;
    private int next;
    private string token;
    private TestFilter filter;
    public TestFilter Filter { get; }
    public CategoryExpression(string text);
    private static CategoryExpression();
    public TestFilter get_Filter();
    private TestFilter GetExpression();
    private TestFilter GetTerm();
    private TestFilter GetPrimitive();
    private CategoryFilter GetCategoryFilter();
    public string GetToken();
    private void SkipWhiteSpace();
    private bool EndOfText();
    private bool NextIsOperator();
}
public class NUnit.Util.CategoryManager : object {
    private Hashtable categories;
    public ICollection Categories { get; }
    public void Add(string name);
    public void AddCategories(ITest test);
    public void AddAllCategories(ITest test);
    public ICollection get_Categories();
    public void Clear();
}
public class NUnit.Util.ConsoleWriter : TextWriter {
    private TextWriter console;
    public Encoding Encoding { get; }
    public ConsoleWriter(TextWriter console);
    public virtual void Close();
    public virtual void Flush();
    public virtual void Write(char c);
    public virtual void Write(string s);
    public virtual void WriteLine(string s);
    public virtual Encoding get_Encoding();
    public virtual object InitializeLifetimeService();
}
public class NUnit.Util.DefaultTestRunnerFactory : InProcessTestRunnerFactory {
    private RuntimeFrameworkSelector selector;
    public virtual TestRunner MakeTestRunner(TestPackage package);
    public virtual bool CanReuse(TestRunner runner, TestPackage package);
    private ProcessModel GetTargetProcessModel(TestPackage package);
}
public class NUnit.Util.DomainManager : object {
    private static Logger log;
    private static string shadowCopyPath;
    public static string ShadowCopyPath { get; }
    private static DomainManager();
    public static string get_ShadowCopyPath();
    public AppDomain CreateDomain(TestPackage package);
    public void Unload(AppDomain domain);
    private string GetCachePath();
    private static void DeleteCacheDir(DirectoryInfo cacheDir);
    private bool IsTestDomain(AppDomain domain);
    public static string GetCommonAppBase(IList assemblies);
    public static string GetPrivateBinPath(string basePath, IList assemblies);
    public static void DeleteShadowCopyPath();
    public sealed virtual void UnloadService();
    public sealed virtual void InitializeService();
}
public interface NUnit.Util.Extensibility.IProjectConverter {
    public abstract virtual bool CanConvertFrom(string path);
    public abstract virtual NUnitProject ConvertFrom(string path);
}
public class NUnit.Util.Extensibility.ProjectConverterCollection : object {
    private ArrayList converters;
    public IExtensionHost Host { get; }
    public string Name { get; }
    public sealed virtual bool CanConvertFrom(string path);
    public sealed virtual NUnitProject ConvertFrom(string path);
    public sealed virtual void Remove(object extension);
    public sealed virtual void Install(object extension);
    public void Install(object extension, int priority);
    public sealed virtual IExtensionHost get_Host();
    public sealed virtual string get_Name();
}
public class NUnit.Util.FileChangedHandler : MulticastDelegate {
    public FileChangedHandler(object object, IntPtr method);
    public virtual void Invoke(string filePath);
    public virtual IAsyncResult BeginInvoke(string filePath, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class NUnit.Util.FileWatcher : object {
    private string filePath;
    private FileSystemWatcher watcher;
    private Timer timer;
    [CompilerGeneratedAttribute]
private FileChangedHandler Changed;
    public FileWatcher(string filePath, int delay);
    public sealed virtual void Dispose();
    public void Start();
    public void Stop();
    private void OnChange(object sender, FileSystemEventArgs e);
    private void OnTimer(object sender, ElapsedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_Changed(FileChangedHandler value);
    [CompilerGeneratedAttribute]
public void remove_Changed(FileChangedHandler value);
}
public static class NUnit.Util.Guard : object {
    public static void ArgumentNotNull(object value, string name);
    public static void ArgumentNotNullOrEmpty(string value, string name);
    public static void NotNull(object value, string name);
    public static void Validate(ISelfValidating obj);
}
public interface NUnit.Util.IAssemblyWatcher {
    public abstract virtual void Stop();
    public abstract virtual void Start();
    public abstract virtual void Setup(int delayInMs, IList`1<string> assemblies);
    public abstract virtual void Setup(int delayInMs, string assemblyFileName);
    public abstract virtual void FreeResources();
    [CompilerGeneratedAttribute]
public abstract virtual void add_AssemblyChanged(AssemblyChangedHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AssemblyChanged(AssemblyChangedHandler value);
}
public class NUnit.Util.InProcessTestRunnerFactory : object {
    public virtual TestRunner MakeTestRunner(TestPackage package);
    public virtual bool CanReuse(TestRunner runner, TestPackage package);
}
internal interface NUnit.Util.IRuntimeFrameworkSelector {
    public abstract virtual RuntimeFramework SelectRuntimeFramework(TestPackage package);
}
public interface NUnit.Util.ISelfValidating {
    public string Message { get; }
    public abstract virtual bool Validate();
    public abstract virtual string get_Message();
}
public interface NUnit.Util.ISettings {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Changed(SettingsEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Changed(SettingsEventHandler value);
    public abstract virtual object GetSetting(string settingName);
    public abstract virtual object GetSetting(string settingName, object defaultValue);
    public abstract virtual int GetSetting(string settingName, int defaultValue);
    public abstract virtual float GetSetting(string settingName, float defaultValue);
    public abstract virtual bool GetSetting(string settingName, bool defaultValue);
    public abstract virtual string GetSetting(string settingName, string defaultValue);
    public abstract virtual Enum GetSetting(string settingName, Enum defaultValue);
    public abstract virtual Font GetSetting(string settingName, Font defaultFont);
    public abstract virtual void RemoveSetting(string settingName);
    public abstract virtual void RemoveGroup(string groupName);
    public abstract virtual void SaveSetting(string settingName, object settingValue);
}
public interface NUnit.Util.ISettingsStorage {
    public abstract virtual object GetSetting(string settingName);
    public abstract virtual void RemoveSetting(string settingName);
    public abstract virtual void RemoveGroup(string groupName);
    public abstract virtual void SaveSetting(string settingName, object settingValue);
    public abstract virtual ISettingsStorage MakeChildStorage(string name);
    public abstract virtual void LoadSettings();
    public abstract virtual void SaveSettings();
}
public interface NUnit.Util.ITestEvents {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProjectLoading(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProjectLoading(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProjectLoaded(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProjectLoaded(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProjectLoadFailed(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProjectLoadFailed(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProjectUnloading(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProjectUnloading(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProjectUnloaded(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProjectUnloaded(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProjectUnloadFailed(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProjectUnloadFailed(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestLoading(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestLoading(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestLoaded(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestLoaded(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestLoadFailed(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestLoadFailed(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestReloading(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestReloading(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestReloaded(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestReloaded(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestReloadFailed(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestReloadFailed(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestUnloading(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestUnloading(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestUnloaded(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestUnloaded(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestUnloadFailed(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestUnloadFailed(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RunStarting(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RunStarting(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RunFinished(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RunFinished(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SuiteStarting(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SuiteStarting(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SuiteFinished(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SuiteFinished(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestStarting(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestStarting(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestFinished(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestFinished(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestException(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestException(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestOutput(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestOutput(TestEventHandler value);
}
public interface NUnit.Util.ITestLoader {
    public bool IsProjectLoaded { get; }
    public bool IsTestLoaded { get; }
    public bool Running { get; }
    public NUnitProject TestProject { get; }
    public string TestFileName { get; }
    public TestResult TestResult { get; }
    public abstract virtual bool get_IsProjectLoaded();
    public abstract virtual bool get_IsTestLoaded();
    public abstract virtual bool get_Running();
    public abstract virtual NUnitProject get_TestProject();
    public abstract virtual string get_TestFileName();
    public abstract virtual TestResult get_TestResult();
    public abstract virtual void NewProject();
    public abstract virtual void NewProject(string filename);
    public abstract virtual void LoadProject(string filename);
    public abstract virtual void LoadProject(string filename, string configname);
    public abstract virtual void LoadProject(String[] assemblies);
    public abstract virtual void UnloadProject();
    public abstract virtual void LoadTest();
    public abstract virtual void LoadTest(string testName);
    public abstract virtual void UnloadTest();
    public abstract virtual void ReloadTest();
    public abstract virtual void RunTests(ITestFilter filter);
    public abstract virtual void CancelTestRun();
}
public interface NUnit.Util.ITestRunnerFactory {
    public abstract virtual TestRunner MakeTestRunner(TestPackage package);
    public abstract virtual bool CanReuse(TestRunner runner, TestPackage package);
}
public interface NUnit.Util.IWatcher {
    public int Delay { get; public set; }
    public abstract virtual int get_Delay();
    public abstract virtual void set_Delay(int value);
    public abstract virtual void Start();
    public abstract virtual void Stop();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Changed(FileChangedHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Changed(FileChangedHandler value);
}
public class NUnit.Util.MemorySettingsStorage : object {
    protected Hashtable settings;
    public sealed virtual object GetSetting(string settingName);
    public sealed virtual void RemoveSetting(string settingName);
    public sealed virtual void RemoveGroup(string groupName);
    public sealed virtual void SaveSetting(string settingName, object settingValue);
    public sealed virtual ISettingsStorage MakeChildStorage(string name);
    public virtual void LoadSettings();
    public virtual void SaveSettings();
    public sealed virtual void Dispose();
}
public class NUnit.Util.MultipleTestDomainRunner : AggregatingTestRunner {
    public MultipleTestDomainRunner(int runnerID);
    protected virtual TestRunner CreateRunner(int runnerID);
}
public class NUnit.Util.MultipleTestProcessRunner : AggregatingTestRunner {
    public MultipleTestProcessRunner(int runnerID);
    protected virtual TestRunner CreateRunner(int runnerID);
}
public class NUnit.Util.NUnitProject : object {
    public static string Extension;
    private string projectPath;
    private string basePath;
    private bool isDirty;
    private bool reloadRequired;
    private ProjectConfigCollection configs;
    private bool autoConfig;
    private ProjectConfig activeConfig;
    private bool isAssemblyWrapper;
    private ProcessModel processModel;
    private DomainUsage domainUsage;
    public string ProjectPath { get; public set; }
    public string DefaultBasePath { get; }
    public bool BasePathSpecified { get; }
    public string BasePath { get; public set; }
    public string Name { get; }
    public bool AutoConfig { get; public set; }
    public ProjectConfig ActiveConfig { get; }
    public string ActiveConfigName { get; }
    public bool IsLoadable { get; }
    public bool IsAssemblyWrapper { get; public set; }
    public string ConfigurationFile { get; }
    public bool IsDirty { get; public set; }
    public bool HasChangesRequiringReload { get; public set; }
    public ProcessModel ProcessModel { get; public set; }
    public DomainUsage DomainUsage { get; public set; }
    public ProjectConfigCollection Configs { get; }
    public NUnitProject(string projectPath);
    private static NUnitProject();
    public string get_ProjectPath();
    public void set_ProjectPath(string value);
    public string get_DefaultBasePath();
    public bool get_BasePathSpecified();
    public string get_BasePath();
    public void set_BasePath(string value);
    public string get_Name();
    public bool get_AutoConfig();
    public void set_AutoConfig(bool value);
    public ProjectConfig get_ActiveConfig();
    public string get_ActiveConfigName();
    public bool get_IsLoadable();
    public bool get_IsAssemblyWrapper();
    public void set_IsAssemblyWrapper(bool value);
    public string get_ConfigurationFile();
    public bool get_IsDirty();
    public void set_IsDirty(bool value);
    public bool get_HasChangesRequiringReload();
    public void set_HasChangesRequiringReload(bool value);
    public ProcessModel get_ProcessModel();
    public void set_ProcessModel(ProcessModel value);
    public DomainUsage get_DomainUsage();
    public void set_DomainUsage(DomainUsage value);
    public ProjectConfigCollection get_Configs();
    public static bool IsNUnitProjectFile(string path);
    public static string ProjectPathFromFile(string path);
    public void SetActiveConfig(int index);
    public void SetActiveConfig(string name);
    public void Add(VSProject vsProject);
    public void Load();
    public void Save();
    public void Save(string projectPath);
}
public class NUnit.Util.NUnitRegistry : object {
    public static string KEY;
    public static string LEGACY_KEY;
    private static bool testMode;
    public static string TEST_KEY;
    public static bool TestMode { get; public set; }
    public static RegistryKey CurrentUser { get; }
    private static NUnitRegistry();
    public static bool get_TestMode();
    public static void set_TestMode(bool value);
    public static RegistryKey get_CurrentUser();
    public static bool KeyExists(string subkey);
    public static void ClearTestKeys();
    private static void ClearSubKey(RegistryKey baseKey, string subKey);
    public static void ClearKey(RegistryKey key);
    public static void CopyKey(RegistryKey fromKey, RegistryKey toKey);
}
public class NUnit.Util.PathUtils : object {
    public static UInt32 FILE_ATTRIBUTE_DIRECTORY;
    public static UInt32 FILE_ATTRIBUTE_NORMAL;
    public static int MAX_PATH;
    protected static char DirectorySeparatorChar;
    protected static char AltDirectorySeparatorChar;
    private static PathUtils();
    public static bool IsAssemblyFileType(string path);
    public static string RelativePath(string from, string to);
    public static string Canonicalize(string path);
    public static bool SamePath(string path1, string path2);
    public static bool SamePathOrUnder(string path1, string path2);
    public static string Combine(string path1, String[] morePaths);
    public static string Combine(Assembly assembly, String[] morePaths);
    public static string GetAssemblyPath(Assembly assembly);
    public static string GetAssemblyPathFromFileUri(string uri);
    private static bool IsWindows();
    private static String[] SplitPath(string path);
    private static bool PathsEqual(string path1, string path2);
}
public class NUnit.Util.ProcessRunner : ProxyTestRunner {
    private static Logger log;
    private TestAgent agent;
    private RuntimeFramework runtimeFramework;
    public RuntimeFramework RuntimeFramework { get; }
    public ProcessRunner(int runnerID);
    private static ProcessRunner();
    public RuntimeFramework get_RuntimeFramework();
    public virtual bool Load(TestPackage package);
    public virtual void Unload();
    public virtual void Dispose();
}
public class NUnit.Util.ProjectConfig : object {
    private string name;
    protected NUnitProject project;
    private AssemblyList assemblies;
    private string basePath;
    private string configFile;
    private string binPath;
    private BinPathType binPathType;
    private RuntimeFramework runtimeFramework;
    unknown NUnitProject Project {public set; }
    public string Name { get; public set; }
    private bool BasePathSpecified { get; }
    public string BasePath { get; public set; }
    public string RelativeBasePath { get; }
    private bool ConfigurationFileSpecified { get; }
    public string ConfigurationFile { get; public set; }
    public string ConfigurationFilePath { get; }
    private bool PrivateBinPathSpecified { get; }
    public string PrivateBinPath { get; public set; }
    public BinPathType BinPathType { get; public set; }
    public AssemblyList Assemblies { get; }
    public RuntimeFramework RuntimeFramework { get; public set; }
    public ProjectConfig(string name);
    public void set_Project(NUnitProject value);
    public string get_Name();
    public void set_Name(string value);
    private bool get_BasePathSpecified();
    public string get_BasePath();
    public void set_BasePath(string value);
    public string get_RelativeBasePath();
    private bool get_ConfigurationFileSpecified();
    public string get_ConfigurationFile();
    public void set_ConfigurationFile(string value);
    public string get_ConfigurationFilePath();
    private bool get_PrivateBinPathSpecified();
    public string get_PrivateBinPath();
    public void set_PrivateBinPath(string value);
    public BinPathType get_BinPathType();
    public void set_BinPathType(BinPathType value);
    public AssemblyList get_Assemblies();
    public RuntimeFramework get_RuntimeFramework();
    public void set_RuntimeFramework(RuntimeFramework value);
    public TestPackage MakeTestPackage();
    private void assemblies_Changed(object sender, EventArgs e);
    private void NotifyProjectOfChange();
}
[DefaultMemberAttribute("Item")]
public class NUnit.Util.ProjectConfigCollection : CollectionBase {
    protected NUnitProject project;
    public ProjectConfig Item { get; }
    public ProjectConfig Item { get; }
    public ProjectConfigCollection(NUnitProject project);
    public ProjectConfig get_Item(int index);
    public ProjectConfig get_Item(string name);
    public void Add(ProjectConfig config);
    public void Add(string name);
    public void Remove(string name);
    private int IndexOf(string name);
    public bool Contains(ProjectConfig config);
    public bool Contains(string name);
    protected virtual void OnRemove(int index, object value);
    protected virtual void OnInsertComplete(int index, object obj);
}
public class NUnit.Util.ProjectConverters.VisualStudioConverter : object {
    public sealed virtual bool CanConvertFrom(string path);
    public sealed virtual NUnitProject ConvertFrom(string path);
    private static NUnitProject ConvertVSProject(string path);
    private static NUnitProject ConvertVSSolution(string path);
    private static NUnitProject LegacyConvertVSSolution(string path);
}
public class NUnit.Util.ProjectFormatException : ApplicationException {
    private int lineNumber;
    private int linePosition;
    public int LineNumber { get; }
    public int LinePosition { get; }
    public ProjectFormatException(string message);
    public ProjectFormatException(string message, Exception inner);
    public ProjectFormatException(string message, int lineNumber, int linePosition);
    public int get_LineNumber();
    public int get_LinePosition();
}
public class NUnit.Util.ProjectService : object {
    private int projectSeed;
    private IProjectConverter[] converters;
    public bool CanLoadProject(string path);
    public NUnitProject LoadProject(string path);
    public NUnitProject WrapAssemblies(String[] assemblies);
    public NUnitProject WrapAssembly(string assemblyPath);
    public string GenerateProjectName();
    public NUnitProject EmptyProject();
    public NUnitProject NewProject();
    public void SaveProject(NUnitProject project);
    public sealed virtual bool CanConvertFrom(string path);
    public sealed virtual NUnitProject ConvertFrom(string path);
    public sealed virtual void InitializeService();
    public sealed virtual void UnloadService();
}
public class NUnit.Util.RecentFileEntry : object {
    public static char Separator;
    private string path;
    private Version clrVersion;
    public string Path { get; }
    public Version CLRVersion { get; }
    public bool Exists { get; }
    public bool IsCompatibleCLRVersion { get; }
    public RecentFileEntry(string path);
    public RecentFileEntry(string path, Version clrVersion);
    private static RecentFileEntry();
    public string get_Path();
    public Version get_CLRVersion();
    public bool get_Exists();
    public bool get_IsCompatibleCLRVersion();
    public virtual string ToString();
    public static RecentFileEntry Parse(string text);
}
public interface NUnit.Util.RecentFiles {
    public int MaxFiles { get; public set; }
    public int Count { get; }
    public RecentFilesCollection Entries { get; }
    public abstract virtual int get_MaxFiles();
    public abstract virtual void set_MaxFiles(int value);
    public abstract virtual int get_Count();
    public abstract virtual RecentFilesCollection get_Entries();
    public abstract virtual void SetMostRecent(RecentFileEntry entry);
    public abstract virtual void SetMostRecent(string fileName);
    public abstract virtual void Remove(string fileName);
}
[DefaultMemberAttribute("Item")]
public class NUnit.Util.RecentFilesCollection : ReadOnlyCollectionBase {
    public RecentFileEntry Item { get; }
    public void Add(RecentFileEntry entry);
    public void Insert(int index, RecentFileEntry entry);
    public void Remove(string fileName);
    public void RemoveAt(int index);
    public int IndexOf(string fileName);
    public RecentFileEntry get_Item(int index);
    public void Clear();
}
public class NUnit.Util.RecentFilesService : object {
    private RecentFilesCollection fileEntries;
    private ISettings settings;
    public static int MinSize;
    public static int MaxSize;
    public static int DefaultSize;
    public int Count { get; }
    public int MaxFiles { get; public set; }
    public RecentFilesCollection Entries { get; }
    public RecentFilesService(ISettings settings);
    private static RecentFilesService();
    public sealed virtual int get_Count();
    public sealed virtual int get_MaxFiles();
    public sealed virtual void set_MaxFiles(int value);
    public sealed virtual RecentFilesCollection get_Entries();
    public sealed virtual void Remove(string fileName);
    public sealed virtual void SetMostRecent(string fileName);
    public sealed virtual void SetMostRecent(RecentFileEntry entry);
    private void LoadEntriesFromSettings(ISettings settings);
    private void AddEntriesForPrefix(string prefix);
    private void SaveEntriesToSettings(ISettings settings);
    private string GetRecentFileKey(string prefix, int index);
    public sealed virtual void UnloadService();
    public sealed virtual void InitializeService();
}
public class NUnit.Util.RegistrySettingsStorage : object {
    private RegistryKey storageKey;
    public RegistryKey StorageKey { get; }
    public RegistrySettingsStorage(RegistryKey storageKey);
    public RegistryKey get_StorageKey();
    public sealed virtual object GetSetting(string settingName);
    public sealed virtual void RemoveSetting(string settingName);
    public sealed virtual void RemoveGroup(string groupName);
    public sealed virtual void SaveSetting(string settingName, object settingValue);
    public sealed virtual ISettingsStorage MakeChildStorage(string storageName);
    public sealed virtual void LoadSettings();
    public sealed virtual void SaveSettings();
    public sealed virtual void Dispose();
}
public class NUnit.Util.RemoteTestAgent : TestAgent {
    private static Logger log;
    private ManualResetEvent stopSignal;
    public int ProcessId { get; }
    public RemoteTestAgent(Guid agentId, TestAgency agency);
    private static RemoteTestAgent();
    public int get_ProcessId();
    public virtual TestRunner CreateRunner(int runnerID);
    public virtual bool Start();
    [OneWayAttribute]
public virtual void Stop();
    public void WaitForStop();
}
public class NUnit.Util.ResultSummarizer : object {
    private int resultCount;
    private int testsRun;
    private int failureCount;
    private int errorCount;
    private int successCount;
    private int inconclusiveCount;
    private int skipCount;
    private int ignoreCount;
    private int notRunnable;
    private double time;
    private string name;
    public string Name { get; }
    public bool Success { get; }
    public int ResultCount { get; }
    public int TestsRun { get; }
    public int Passed { get; }
    public int Errors { get; }
    public int Failures { get; }
    public int Inconclusive { get; }
    public int NotRunnable { get; }
    public int Skipped { get; }
    public int Ignored { get; }
    public double Time { get; }
    public int TestsNotRun { get; }
    public ResultSummarizer(TestResult result);
    public ResultSummarizer(TestResult[] results);
    public void Summarize(TestResult result);
    public string get_Name();
    public bool get_Success();
    public int get_ResultCount();
    public int get_TestsRun();
    public int get_Passed();
    public int get_Errors();
    public int get_Failures();
    public int get_Inconclusive();
    public int get_NotRunnable();
    public int get_Skipped();
    public int get_Ignored();
    public double get_Time();
    public int get_TestsNotRun();
}
public class NUnit.Util.RuntimeFrameworkSelector : object {
    private static Logger log;
    private static RuntimeFrameworkSelector();
    public sealed virtual RuntimeFramework SelectRuntimeFramework(TestPackage package);
}
public abstract class NUnit.Util.ServerBase : MarshalByRefObject {
    protected string uri;
    protected int port;
    private TcpChannel channel;
    private bool isMarshalled;
    private object theLock;
    public string ServerUrl { get; }
    protected ServerBase(string uri, int port);
    public string get_ServerUrl();
    public virtual void Start();
    [OneWayAttribute]
public virtual void Stop();
    public void WaitForStop();
    public sealed virtual void Dispose();
    public virtual object InitializeLifetimeService();
}
public class NUnit.Util.ServerUtilities : object {
    private static Logger log;
    private static ServerUtilities();
    private static TcpChannel CreateTcpChannel(string name, int port, int limit);
    public static TcpChannel GetTcpChannel();
    public static TcpChannel GetTcpChannel(string name, int port);
    public static TcpChannel GetTcpChannel(string name, int port, int limit);
    public static void SafeReleaseChannel(IChannel channel);
}
public class NUnit.Util.ServiceManager : object {
    private ArrayList services;
    private Hashtable serviceIndex;
    private static ServiceManager defaultServiceManager;
    private static Logger log;
    public static ServiceManager Services { get; }
    private static ServiceManager();
    public static ServiceManager get_Services();
    public void AddService(IService service);
    public IService GetService(Type serviceType);
    public void InitializeServices();
    public void StopAllServices();
    public void ClearServices();
}
public class NUnit.Util.Services : object {
    private static AddinManager addinManager;
    private static IAddinRegistry addinRegistry;
    private static DomainManager domainManager;
    private static ISettings userSettings;
    private static RecentFiles recentFiles;
    private static TestLoader loader;
    private static TestAgency agency;
    private static ProjectService projectService;
    public static AddinManager AddinManager { get; }
    public static IAddinRegistry AddinRegistry { get; }
    public static DomainManager DomainManager { get; }
    public static ISettings UserSettings { get; }
    public static RecentFiles RecentFiles { get; }
    public static TestLoader TestLoader { get; }
    public static TestAgency TestAgency { get; }
    public static ProjectService ProjectService { get; }
    public static AddinManager get_AddinManager();
    public static IAddinRegistry get_AddinRegistry();
    public static DomainManager get_DomainManager();
    public static ISettings get_UserSettings();
    public static RecentFiles get_RecentFiles();
    public static TestLoader get_TestLoader();
    public static TestAgency get_TestAgency();
    public static ProjectService get_ProjectService();
}
public class NUnit.Util.SettingsEventArgs : EventArgs {
    private string settingName;
    public string SettingName { get; }
    public SettingsEventArgs(string settingName);
    public string get_SettingName();
}
public class NUnit.Util.SettingsEventHandler : MulticastDelegate {
    public SettingsEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SettingsEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, SettingsEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class NUnit.Util.SettingsGroup : object {
    protected ISettingsStorage storage;
    [CompilerGeneratedAttribute]
private SettingsEventHandler Changed;
    public ISettingsStorage Storage { get; }
    public SettingsGroup(ISettingsStorage storage);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Changed(SettingsEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Changed(SettingsEventHandler value);
    public ISettingsStorage get_Storage();
    public sealed virtual object GetSetting(string settingName);
    public sealed virtual object GetSetting(string settingName, object defaultValue);
    public sealed virtual int GetSetting(string settingName, int defaultValue);
    public sealed virtual float GetSetting(string settingName, float defaultValue);
    public sealed virtual bool GetSetting(string settingName, bool defaultValue);
    public sealed virtual string GetSetting(string settingName, string defaultValue);
    public sealed virtual Enum GetSetting(string settingName, Enum defaultValue);
    public sealed virtual Font GetSetting(string settingName, Font defaultFont);
    public sealed virtual void RemoveSetting(string settingName);
    public sealed virtual void RemoveGroup(string groupName);
    public sealed virtual void SaveSetting(string settingName, object settingValue);
    public sealed virtual void Dispose();
}
public class NUnit.Util.SettingsService : SettingsGroup {
    private static string settingsFileName;
    private bool writeable;
    public SettingsService(bool writeable);
    private static SettingsService();
    public sealed virtual void InitializeService();
    public sealed virtual void UnloadService();
    private void ConvertLegacySettings();
}
public class NUnit.Util.StackTraceFilter : object {
    public static string Filter(string stack);
    private static bool FilterLine(string line);
}
public enum NUnit.Util.TestAction : Enum {
    public int value__;
    public static TestAction ProjectLoading;
    public static TestAction ProjectLoaded;
    public static TestAction ProjectLoadFailed;
    public static TestAction ProjectUnloading;
    public static TestAction ProjectUnloaded;
    public static TestAction ProjectUnloadFailed;
    public static TestAction TestLoading;
    public static TestAction TestLoaded;
    public static TestAction TestLoadFailed;
    public static TestAction TestReloading;
    public static TestAction TestReloaded;
    public static TestAction TestReloadFailed;
    public static TestAction TestUnloading;
    public static TestAction TestUnloaded;
    public static TestAction TestUnloadFailed;
    public static TestAction RunStarting;
    public static TestAction RunFinished;
    public static TestAction SuiteStarting;
    public static TestAction SuiteFinished;
    public static TestAction TestStarting;
    public static TestAction TestFinished;
    public static TestAction TestException;
    public static TestAction TestOutput;
}
public class NUnit.Util.TestAgency : ServerBase {
    private static Logger log;
    private AgentDataBase agentData;
    public TestAgency(string uri, int port);
    private static TestAgency();
    public virtual void Stop();
    public sealed virtual void Register(TestAgent agent);
    public void ReportStatus(Guid agentId, AgentStatus status);
    public bool IsRuntimeVersionSupported(Version version);
    public TestAgent GetAgent();
    public TestAgent GetAgent(int waitTime);
    public TestAgent GetAgent(RuntimeFramework framework, int waitTime);
    public void ReleaseAgent(TestAgent agent);
    private Guid LaunchAgentProcess(RuntimeFramework targetRuntime);
    private AgentRecord FindAvailableAgent();
    private TestAgent CreateRemoteAgent(RuntimeFramework framework, int waitTime);
    private static string GetNUnitBinDirectory(Version v);
    private static string GetTestAgentExePath(Version v);
    public sealed virtual void UnloadService();
    public sealed virtual void InitializeService();
}
public class NUnit.Util.TestDomain : ProxyTestRunner {
    private static Logger log;
    private AppDomain domain;
    private DomainAgent agent;
    public AppDomain AppDomain { get; }
    public TestDomain(int runnerID);
    private static TestDomain();
    public AppDomain get_AppDomain();
    public virtual bool Load(TestPackage package);
    public virtual void Unload();
    public virtual void BeginRun(EventListener listener, ITestFilter filter, bool tracing, LoggingThreshold logLevel);
    public virtual void Dispose();
}
public class NUnit.Util.TestEventArgs : EventArgs {
    private TestAction action;
    private string name;
    private ITest test;
    private TestName testName;
    private TestResult testResult;
    private Exception exception;
    private TestOutput testOutput;
    private int testCount;
    public TestAction Action { get; }
    public string Name { get; }
    public ITest Test { get; }
    public TestName TestName { get; }
    public int TestCount { get; }
    public TestResult Result { get; }
    public Exception Exception { get; }
    public TestOutput TestOutput { get; }
    public TestEventArgs(TestAction action, string name, ITest test);
    public TestEventArgs(TestAction action, string name);
    public TestEventArgs(TestAction action, string name, int testCount);
    public TestEventArgs(TestAction action, string name, Exception exception);
    public TestEventArgs(TestAction action, TestName testName);
    public TestEventArgs(TestAction action, TestResult testResult);
    public TestEventArgs(TestAction action, Exception exception);
    public TestEventArgs(TestAction action, TestOutput testOutput);
    public TestAction get_Action();
    public string get_Name();
    public ITest get_Test();
    public TestName get_TestName();
    public int get_TestCount();
    public TestResult get_Result();
    public Exception get_Exception();
    public TestOutput get_TestOutput();
}
public class NUnit.Util.TestEventDispatcher : object {
    [CompilerGeneratedAttribute]
private TestEventHandler ProjectLoading;
    [CompilerGeneratedAttribute]
private TestEventHandler ProjectLoaded;
    [CompilerGeneratedAttribute]
private TestEventHandler ProjectLoadFailed;
    [CompilerGeneratedAttribute]
private TestEventHandler ProjectUnloading;
    [CompilerGeneratedAttribute]
private TestEventHandler ProjectUnloaded;
    [CompilerGeneratedAttribute]
private TestEventHandler ProjectUnloadFailed;
    [CompilerGeneratedAttribute]
private TestEventHandler TestLoading;
    [CompilerGeneratedAttribute]
private TestEventHandler TestLoaded;
    [CompilerGeneratedAttribute]
private TestEventHandler TestLoadFailed;
    [CompilerGeneratedAttribute]
private TestEventHandler TestReloading;
    [CompilerGeneratedAttribute]
private TestEventHandler TestReloaded;
    [CompilerGeneratedAttribute]
private TestEventHandler TestReloadFailed;
    [CompilerGeneratedAttribute]
private TestEventHandler TestUnloading;
    [CompilerGeneratedAttribute]
private TestEventHandler TestUnloaded;
    [CompilerGeneratedAttribute]
private TestEventHandler TestUnloadFailed;
    [CompilerGeneratedAttribute]
private TestEventHandler RunStarting;
    [CompilerGeneratedAttribute]
private TestEventHandler RunFinished;
    [CompilerGeneratedAttribute]
private TestEventHandler SuiteStarting;
    [CompilerGeneratedAttribute]
private TestEventHandler SuiteFinished;
    [CompilerGeneratedAttribute]
private TestEventHandler TestStarting;
    [CompilerGeneratedAttribute]
private TestEventHandler TestFinished;
    [CompilerGeneratedAttribute]
private TestEventHandler TestException;
    [CompilerGeneratedAttribute]
private TestEventHandler TestOutput;
    [CompilerGeneratedAttribute]
public sealed virtual void add_ProjectLoading(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ProjectLoading(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ProjectLoaded(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ProjectLoaded(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ProjectLoadFailed(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ProjectLoadFailed(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ProjectUnloading(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ProjectUnloading(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ProjectUnloaded(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ProjectUnloaded(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ProjectUnloadFailed(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ProjectUnloadFailed(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestLoading(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestLoading(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestLoaded(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestLoaded(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestLoadFailed(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestLoadFailed(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestReloading(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestReloading(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestReloaded(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestReloaded(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestReloadFailed(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestReloadFailed(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestUnloading(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestUnloading(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestUnloaded(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestUnloaded(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestUnloadFailed(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestUnloadFailed(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RunStarting(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RunStarting(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RunFinished(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RunFinished(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SuiteStarting(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SuiteStarting(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SuiteFinished(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SuiteFinished(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestStarting(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestStarting(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestFinished(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestFinished(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestException(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestException(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestOutput(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestOutput(TestEventHandler value);
    protected virtual void Fire(TestEventHandler handler, TestEventArgs e);
    public void FireProjectLoading(string fileName);
    public void FireProjectLoaded(string fileName);
    public void FireProjectLoadFailed(string fileName, Exception exception);
    public void FireProjectUnloading(string fileName);
    public void FireProjectUnloaded(string fileName);
    public void FireProjectUnloadFailed(string fileName, Exception exception);
    public void FireTestLoading(string fileName);
    public void FireTestLoaded(string fileName, ITest test);
    public void FireTestLoadFailed(string fileName, Exception exception);
    public void FireTestUnloading(string fileName);
    public void FireTestUnloaded(string fileName);
    public void FireTestUnloadFailed(string fileName, Exception exception);
    public void FireTestReloading(string fileName);
    public void FireTestReloaded(string fileName, ITest test);
    public void FireTestReloadFailed(string fileName, Exception exception);
    public void FireRunStarting(string name, int testCount);
    public void FireRunFinished(TestResult result);
    public void FireRunFinished(Exception exception);
    public void FireTestStarting(TestName testName);
    public void FireTestFinished(TestResult result);
    public void FireSuiteStarting(TestName testName);
    public void FireSuiteFinished(TestResult result);
    public void FireTestException(string name, Exception exception);
    public void FireTestOutput(TestOutput testOutput);
}
public class NUnit.Util.TestEventHandler : MulticastDelegate {
    public TestEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TestEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, TestEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class NUnit.Util.TestExceptionHandler : object {
    private UnhandledExceptionEventHandler handler;
    public TestExceptionHandler(UnhandledExceptionEventHandler handler);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
}
public enum NUnit.Util.TestLabelLevel : Enum {
    public int value__;
    public static TestLabelLevel Off;
    public static TestLabelLevel On;
    public static TestLabelLevel All;
}
public class NUnit.Util.TestLoader : MarshalByRefObject {
    private static Logger log;
    private TestEventDispatcher events;
    private ITestRunnerFactory factory;
    private TestRunner testRunner;
    private NUnitProject testProject;
    private string loadedTestName;
    private string currentTestName;
    private RuntimeFramework currentRuntime;
    private TestResult testResult;
    private Exception lastException;
    private IAssemblyWatcher watcher;
    private bool reloadPending;
    private bool tracing;
    private LoggingThreshold logLevel;
    private ITestFilter lastFilter;
    private bool lastTracing;
    private LoggingThreshold lastLogLevel;
    private RuntimeFramework currentFramework;
    public bool IsProjectLoaded { get; }
    public bool IsTestLoaded { get; }
    public ITest LoadedTest { get; }
    public bool Running { get; }
    public NUnitProject TestProject { get; }
    public ITestEvents Events { get; }
    public string TestFileName { get; }
    public TestResult TestResult { get; }
    public Exception LastException { get; }
    public IList AssemblyInfo { get; }
    public int TestCount { get; }
    public RuntimeFramework CurrentFramework { get; }
    public bool IsTracingEnabled { get; public set; }
    public LoggingThreshold LoggingThreshold { get; public set; }
    public TestLoader(TestEventDispatcher eventDispatcher);
    public TestLoader(IAssemblyWatcher assemblyWatcher);
    public TestLoader(TestEventDispatcher eventDispatcher, IAssemblyWatcher assemblyWatcher);
    private static TestLoader();
    public sealed virtual bool get_IsProjectLoaded();
    public sealed virtual bool get_IsTestLoaded();
    public ITest get_LoadedTest();
    public sealed virtual bool get_Running();
    public sealed virtual NUnitProject get_TestProject();
    public ITestEvents get_Events();
    public sealed virtual string get_TestFileName();
    public sealed virtual TestResult get_TestResult();
    public Exception get_LastException();
    public IList get_AssemblyInfo();
    public int get_TestCount();
    public RuntimeFramework get_CurrentFramework();
    public bool get_IsTracingEnabled();
    public void set_IsTracingEnabled(bool value);
    public LoggingThreshold get_LoggingThreshold();
    public void set_LoggingThreshold(LoggingThreshold value);
    public sealed virtual void RunStarted(string name, int testCount);
    public sealed virtual void RunFinished(TestResult testResult);
    public sealed virtual void RunFinished(Exception exception);
    public sealed virtual void TestStarted(TestName testName);
    public sealed virtual void TestFinished(TestResult result);
    public sealed virtual void SuiteStarted(TestName suiteName);
    public sealed virtual void SuiteFinished(TestResult result);
    public sealed virtual void UnhandledException(Exception exception);
    private void OnUnhandledException(object sender, UnhandledExceptionEventArgs args);
    public sealed virtual void TestOutput(TestOutput testOutput);
    public sealed virtual void NewProject();
    public sealed virtual void NewProject(string filePath);
    public sealed virtual void LoadProject(string filePath, string configName);
    public sealed virtual void LoadProject(string filePath);
    public sealed virtual void LoadProject(String[] assemblies);
    public sealed virtual void UnloadProject();
    private void OnProjectLoad(NUnitProject testProject);
    public sealed virtual void LoadTest();
    public sealed virtual void LoadTest(string testName);
    public sealed virtual void UnloadTest();
    public bool CanReloadUnderRuntimeVersion(Version version);
    public void ReloadTest(RuntimeFramework framework);
    public sealed virtual void ReloadTest();
    public void OnTestChanged(string testFileName);
    public sealed virtual void RunTests(ITestFilter filter);
    public sealed virtual void CancelTestRun();
    public IList GetCategories();
    public void SaveLastResult(string fileName);
    private void InstallWatcher();
    private void RemoveWatcher();
    private TestPackage MakeTestPackage(string testName);
    public virtual object InitializeLifetimeService();
    public sealed virtual void UnloadService();
    public sealed virtual void InitializeService();
}
public interface NUnit.Util.TestObserver {
    public abstract virtual void Subscribe(ITestEvents events);
}
public class NUnit.Util.TestResultItem : object {
    private string testName;
    private string message;
    private string stackTrace;
    public string StackTrace { get; }
    public TestResultItem(TestResult result);
    public TestResultItem(string testName, string message, string stackTrace);
    public virtual string ToString();
    public string GetMessage();
    public string GetToolTipMessage();
    public string ReplaceTabs(string strOriginal, int nSpaces);
    public string get_StackTrace();
}
public class NUnit.Util.TestServer : ServerBase {
    private TestRunner runner;
    public TestRunner TestRunner { get; }
    public TestServer(string uri, int port);
    public TestRunner get_TestRunner();
}
public class NUnit.Util.VSProject : object {
    private static String[] validExtensions;
    private static string solutionExtension;
    private string projectPath;
    private VSProjectConfigCollection configs;
    public string Name { get; }
    public string ProjectPath { get; }
    public VSProjectConfigCollection Configs { get; }
    public VSProject(string projectPath);
    private static VSProject();
    public string get_Name();
    public string get_ProjectPath();
    public VSProjectConfigCollection get_Configs();
    public static bool IsProjectFile(string path);
    public static bool IsSolutionFile(string path);
    private void Load();
    private bool LoadProject(string projectDirectory, XmlDocument doc);
    private bool LoadVS2003Project(string projectDirectory, XmlDocument doc);
    private bool LoadMSBuildProject(string projectDirectory, XmlDocument doc);
    private void ThrowInvalidFileType(string projectPath);
    private void ThrowInvalidFormat(string projectPath, Exception e);
    private string SafeAttributeValue(XmlNode node, string attrName);
    private string RequiredAttributeValue(XmlNode node, string name);
}
public class NUnit.Util.VSProjectConfig : object {
    private string name;
    private StringCollection assemblies;
    public string Name { get; }
    public StringCollection Assemblies { get; }
    public VSProjectConfig(string name);
    public string get_Name();
    public StringCollection get_Assemblies();
}
[DefaultMemberAttribute("Item")]
public class NUnit.Util.VSProjectConfigCollection : CollectionBase {
    public VSProjectConfig Item { get; }
    public VSProjectConfig Item { get; }
    public VSProjectConfig get_Item(int index);
    public VSProjectConfig get_Item(string name);
    public void Add(VSProjectConfig config);
    public bool Contains(string name);
}
public class NUnit.Util.XmlResultTransform : object {
    private XslCompiledTransform xslTransform;
    public XmlResultTransform(string stylesheet);
    public XmlResultTransform(XmlReader reader);
    public void Load(string stylesheet);
    public void Load(XmlReader reader);
    public void Transform(string inputFile, string outputFile);
    public void Transform(TextReader reader, TextWriter writer);
    public void Transform(IXPathNavigable xpnav, TextWriter writer);
}
public class NUnit.Util.XmlResultWriter : object {
    private XmlTextWriter xmlWriter;
    private TextWriter writer;
    private MemoryStream memoryStream;
    public XmlResultWriter(string fileName);
    public XmlResultWriter(TextWriter writer);
    private void InitializeXmlFile(TestResult result);
    private void WriteCultureInfo();
    private void WriteEnvironment();
    public void SaveTestResult(TestResult result);
    private void WriteResultElement(TestResult result);
    private void TerminateXmlFile();
    private void StartTestElement(TestResult result);
    private void WriteCategoriesElement(TestResult result);
    private void WritePropertiesElement(TestResult result);
    private void WriteReasonElement(TestResult result);
    private void WriteFailureElement(TestResult result);
    private void WriteChildResults(TestResult result);
    private static string CharacterSafeString(string encodedString);
    private void WriteCData(string text);
}
public class NUnit.Util.XmlSettingsStorage : MemorySettingsStorage {
    private string filePath;
    private bool writeable;
    public XmlSettingsStorage(string filePath);
    public XmlSettingsStorage(string filePath, bool writeable);
    public virtual void LoadSettings();
    public virtual void SaveSettings();
}
