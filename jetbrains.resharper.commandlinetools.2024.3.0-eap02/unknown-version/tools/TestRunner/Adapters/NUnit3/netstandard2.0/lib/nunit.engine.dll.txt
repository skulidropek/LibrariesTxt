internal static class NUnit.Common.AgentExitCodes : object {
    public static int OK;
    public static int PARENT_PROCESS_TERMINATED;
    public static int FAILED_TO_START_REMOTE_AGENT;
    public static int DEBUGGER_SECURITY_VIOLATION;
    public static int DEBUGGER_NOT_IMPLEMENTED;
    public static int UNABLE_TO_LOCATE_AGENCY;
    public static int UNEXPECTED_EXCEPTION;
    public static int STACK_OVERFLOW_EXCEPTION;
}
internal static class NUnit.Common.ExceptionHelper : object {
    public static string BuildMessage(Exception exception);
    public static string BuildMessageAndStackTrace(Exception exception);
    private static string GetSafeStackTrace(Exception exception);
    private static List`1<Exception> FlattenExceptionHierarchy(Exception exception);
    private static string GetExceptionMessage(Exception ex);
}
public interface NUnit.Engine.Communication.Transports.ITestAgencyTransport {
    public string ServerUrl { get; }
    public abstract virtual string get_ServerUrl();
}
public class NUnit.Engine.Communication.Transports.Tcp.TcpServer : object {
    private static Logger log;
    private static int GUID_BUFFER_SIZE;
    private TcpListener _listenerSocket;
    private Thread _listenerThread;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _running;
    [CompilerGeneratedAttribute]
private ConnectionEventHandler ClientConnected;
    public IPEndPoint EndPoint { get; }
    public TcpServer(int port);
    private static TcpServer();
    [CompilerGeneratedAttribute]
public void add_ClientConnected(ConnectionEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ClientConnected(ConnectionEventHandler value);
    public IPEndPoint get_EndPoint();
    public void Start();
    public void Stop();
    private void WaitForClientConnections();
    private static Byte[] ReadBytes(Socket clientSocket, int numBytes);
}
public class NUnit.Engine.Communication.Transports.Tcp.TestAgencyTcpTransport : object {
    private static Logger log;
    private ITestAgency _agency;
    private TcpServer _server;
    private object _theLock;
    private bool _disposed;
    public string ServerUrl { get; }
    public TestAgencyTcpTransport(ITestAgency agency, int port);
    private static TestAgencyTcpTransport();
    public sealed virtual string get_ServerUrl();
    public sealed virtual bool Start();
    public sealed virtual void Stop();
    public sealed virtual void Register(ITestAgent agent);
    public void WaitForStop();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private void <Start>b__7_0(Socket socket, Guid id);
}
internal class NUnit.Engine.Communication.Transports.Tcp.TestAgentTcpProxy : object {
    private Socket _socket;
    private BinarySerializationProtocol _wireProtocol;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    public Guid Id { get; }
    public TestAgentTcpProxy(Socket socket, Guid id);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Id();
    public sealed virtual ITestEngineRunner CreateRunner(TestPackage package);
    public sealed virtual bool Start();
    public sealed virtual void Stop();
    public sealed virtual TestEngineResult Load();
    public sealed virtual void Unload();
    public sealed virtual TestEngineResult Reload();
    public sealed virtual int CountTestCases(TestFilter filter);
    public sealed virtual TestEngineResult Run(ITestEventListener listener, TestFilter filter);
    public sealed virtual AsyncTestEngineResult RunAsync(ITestEventListener listener, TestFilter filter);
    public sealed virtual void StopRun(bool force);
    public sealed virtual TestEngineResult Explore(TestFilter filter);
    public sealed virtual void Dispose();
    private void SendCommandMessage(string command, Object[] arguments);
    private T CommandResult();
    private TestEngineResult TestRunResult(ITestEventListener listener);
}
public class NUnit.Engine.Internal.SettingsGroup : object {
    private static Logger log;
    protected Dictionary`2<string, object> _settings;
    [CompilerGeneratedAttribute]
private SettingsEventHandler Changed;
    private static SettingsGroup();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Changed(SettingsEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Changed(SettingsEventHandler value);
    public sealed virtual object GetSetting(string settingName);
    public sealed virtual T GetSetting(string settingName, T defaultValue);
    public sealed virtual void RemoveSetting(string settingName);
    public sealed virtual void RemoveGroup(string groupName);
    public sealed virtual void SaveSetting(string settingName, object settingValue);
}
public class NUnit.Engine.Internal.SettingsStore : SettingsGroup {
    private string _settingsFile;
    private bool _writeable;
    public SettingsStore(string settingsFile, bool writeable);
    public void LoadSettings();
    public void SaveSettings();
}
public class NUnit.Engine.Runners.MasterTestRunner : object {
    private ITestEngineRunner _engineRunner;
    private IServiceLocator _services;
    private ExtensionService _extensionService;
    private IProjectService _projectService;
    private ITestRunnerFactory _testRunnerFactory;
    private bool _disposed;
    private TestEventDispatcher _eventDispatcher;
    private WorkItemTracker _workItemTracker;
    private static int WAIT_FOR_CANCEL_TO_COMPLETE;
    [CompilerGeneratedAttribute]
private TestPackage <TestPackage>k__BackingField;
    [CompilerGeneratedAttribute]
private TestEngineResult <LoadResult>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTestRunning>k__BackingField;
    private static ObsoletePackageSetting[] ObsoleteSettings;
    protected TestPackage TestPackage { get; protected set; }
    protected TestEngineResult LoadResult { get; protected set; }
    protected bool IsPackageLoaded { get; }
    public bool IsTestRunning { get; private set; }
    public MasterTestRunner(IServiceLocator services, TestPackage package);
    private static MasterTestRunner();
    [CompilerGeneratedAttribute]
protected TestPackage get_TestPackage();
    [CompilerGeneratedAttribute]
protected void set_TestPackage(TestPackage value);
    [CompilerGeneratedAttribute]
protected TestEngineResult get_LoadResult();
    [CompilerGeneratedAttribute]
protected void set_LoadResult(TestEngineResult value);
    protected bool get_IsPackageLoaded();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsTestRunning();
    [CompilerGeneratedAttribute]
private void set_IsTestRunning(bool value);
    public sealed virtual XmlNode Load();
    public sealed virtual void Unload();
    public sealed virtual XmlNode Reload();
    public sealed virtual int CountTestCases(TestFilter filter);
    public sealed virtual XmlNode Run(ITestEventListener listener, TestFilter filter);
    public sealed virtual ITestRun RunAsync(ITestEventListener listener, TestFilter filter);
    public sealed virtual void StopRun(bool force);
    public sealed virtual XmlNode Explore(TestFilter filter);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    internal ITestEngineRunner GetEngineRunner();
    private TestEngineResult PrepareResult(TestEngineResult result);
    private void EnsurePackagesAreExpanded(TestPackage package);
    private bool IsProjectPackage(TestPackage package);
    private void ValidatePackageSettings();
    private void UnloadPackage();
    private int CountTests(TestFilter filter);
    private TestEngineResult RunTests(ITestEventListener listener, TestFilter filter);
    private AsyncTestEngineResult RunTestsAsync(ITestEventListener listener, TestFilter filter);
    private static void InsertCommandLineElement(XmlNode resultNode);
    private static void InsertFilterElement(XmlNode resultNode, TestFilter filter);
}
public class NUnit.Engine.Runners.TestEventDispatcher : MarshalByRefObject {
    private object _eventLock;
    [CompilerGeneratedAttribute]
private IList`1<ITestEventListener> <Listeners>k__BackingField;
    public IList`1<ITestEventListener> Listeners { get; private set; }
    [CompilerGeneratedAttribute]
public IList`1<ITestEventListener> get_Listeners();
    [CompilerGeneratedAttribute]
private void set_Listeners(IList`1<ITestEventListener> value);
    public sealed virtual void OnTestEvent(string report);
    public virtual object InitializeLifetimeService();
}
internal class NUnit.Engine.Runners.WorkItemTracker : object {
    private List`1<XmlNode> _itemsInProcess;
    private ManualResetEvent _allItemsComplete;
    private object _trackerLock;
    public void Clear();
    public bool WaitForCompletion(int millisecondsTimeout);
    public void SendPendingTestCompletionEvents(ITestEventListener listener);
    private static string CreateNotification(XmlNode startElement);
    private sealed virtual override void NUnit.Engine.ITestEventListener.OnTestEvent(string report);
    private void RemoveItem(string id);
}
public class NUnit.Engine.Services.DefaultTestRunnerFactory : Service {
    private IProjectService _projectService;
    public virtual void StartService();
    public sealed virtual ITestEngineRunner MakeTestRunner(TestPackage package);
}
public interface NUnit.Engine.Services.IAgentLease {
    public abstract virtual ITestEngineRunner CreateRunner(TestPackage package);
}
public interface NUnit.Engine.Services.IProjectService {
    public abstract virtual bool CanLoadFrom(string path);
    public abstract virtual void ExpandProjectPackage(TestPackage package);
}
public class NUnit.Engine.Services.NUnit3XmlResultWriter : object {
    public sealed virtual void CheckWritability(string outputPath);
    public sealed virtual void WriteResultFile(XmlNode resultNode, string outputPath);
    public sealed virtual void WriteResultFile(XmlNode resultNode, TextWriter writer);
    private XmlNode GetStubResult();
}
public class NUnit.Engine.Services.ProjectService : Service {
    private Dictionary`2<string, ExtensionNode> _extensionIndex;
    public sealed virtual bool CanLoadFrom(string path);
    public sealed virtual void ExpandProjectPackage(TestPackage package);
    public virtual void StartService();
    private IProject LoadFrom(string path);
    private ExtensionNode GetNodeForPath(string path);
}
public class NUnit.Engine.Services.RecentFilesService : Service {
    private IList`1<string> _fileEntries;
    private ISettings _userSettings;
    private static int MAX_FILES;
    public int MaxFiles { get; public set; }
    public IList`1<string> Entries { get; }
    public sealed virtual int get_MaxFiles();
    public sealed virtual void set_MaxFiles(int value);
    public sealed virtual IList`1<string> get_Entries();
    public sealed virtual void Remove(string fileName);
    public sealed virtual void SetMostRecent(string filePath);
    private void LoadEntriesFromSettings();
    private void AddEntriesForPrefix(string prefix);
    private void SaveEntriesToSettings();
    private string GetRecentFileKey(string prefix, int index);
    public virtual void StopService();
    public virtual void StartService();
}
public class NUnit.Engine.Services.ResultService : Service {
    private String[] BUILT_IN_FORMATS;
    private IEnumerable`1<ExtensionNode> _extensionNodes;
    private String[] _formats;
    public String[] Formats { get; }
    public sealed virtual String[] get_Formats();
    public sealed virtual IResultWriter GetResultWriter(string format, Object[] args);
    public virtual void StartService();
}
public class NUnit.Engine.Services.SettingsService : SettingsStore {
    private static string SETTINGS_FILE;
    [CompilerGeneratedAttribute]
private IServiceLocator <ServiceContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceStatus <Status>k__BackingField;
    public IServiceLocator ServiceContext { get; public set; }
    public ServiceStatus Status { get; private set; }
    public SettingsService(bool writeable);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceLocator get_ServiceContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ServiceContext(IServiceLocator value);
    [CompilerGeneratedAttribute]
public sealed virtual ServiceStatus get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(ServiceStatus value);
    public sealed virtual void StartService();
    public sealed virtual void StopService();
}
public class NUnit.Engine.Services.TestCaseResultWriter : object {
    public sealed virtual void CheckWritability(string outputPath);
    public sealed virtual void WriteResultFile(XmlNode resultNode, string outputPath);
    public sealed virtual void WriteResultFile(XmlNode resultNode, TextWriter writer);
}
public class NUnit.Engine.Services.TestFilterService : Service {
    public sealed virtual ITestFilterBuilder GetTestFilterBuilder();
}
public class NUnit.Engine.Services.XmlTransformResultWriter : object {
    private string _xsltFile;
    private XslCompiledTransform _transform;
    public XmlTransformResultWriter(Object[] args);
    public sealed virtual void CheckWritability(string outputPath);
    public sealed virtual void WriteResultFile(XmlNode result, TextWriter writer);
    public sealed virtual void WriteResultFile(XmlNode result, string outputPath);
}
public class NUnit.Engine.TestEngine : CoreEngine {
    private IServiceLocator NUnit.Engine.ITestEngine.Services { get; }
    private sealed virtual override IServiceLocator NUnit.Engine.ITestEngine.get_Services();
    public sealed virtual void Initialize();
    public sealed virtual ITestRunner GetRunner(TestPackage package);
    private sealed virtual override string NUnit.Engine.ITestEngine.get_WorkDirectory();
    private sealed virtual override void NUnit.Engine.ITestEngine.set_WorkDirectory(string value);
    private sealed virtual override InternalTraceLevel NUnit.Engine.ITestEngine.get_InternalTraceLevel();
    private sealed virtual override void NUnit.Engine.ITestEngine.set_InternalTraceLevel(InternalTraceLevel value);
    private sealed virtual override void System.IDisposable.Dispose();
}
public class NUnit.Engine.TestFilterBuilder : object {
    private List`1<string> _testList;
    private string _whereClause;
    public sealed virtual void AddTest(string fullName);
    public sealed virtual void SelectWhere(string whereClause);
    public sealed virtual TestFilter GetFilter();
    private static string XmlEscape(string text);
}
public class NUnit.Engine.TestSelectionParser : object {
    private Tokenizer _tokenizer;
    private static Token LPAREN;
    private static Token RPAREN;
    private static Token AND_OP1;
    private static Token AND_OP2;
    private static Token AND_OP3;
    private static Token AND_OP4;
    private static Token OR_OP1;
    private static Token OR_OP2;
    private static Token OR_OP3;
    private static Token OR_OP4;
    private static Token NOT_OP;
    private static Token EQ_OP1;
    private static Token EQ_OP2;
    private static Token NE_OP;
    private static Token MATCH_OP;
    private static Token NOMATCH_OP;
    private static Token[] AND_OPS;
    private static Token[] OR_OPS;
    private static Token[] EQ_OPS;
    private static Token[] REL_OPS;
    private static Token EOF;
    private Token LookAhead { get; }
    private static TestSelectionParser();
    public string Parse(string input);
    public string ParseFilterExpression();
    public string ParseFilterTerm();
    public string ParseFilterElement();
    private static string EmitFilterElement(Token lhs, Token op, Token rhs);
    private static string EmitPropertyElement(Token lhs, Token op, Token rhs);
    private static string EmitElement(string fmt, Token lhs, Token rhs);
    private string ParseExpressionInParentheses();
    private Token Expect(TokenKind[] kinds);
    private Token Expect(Token[] valid);
    private Exception InvalidTokenError(Token token);
    private Token get_LookAhead();
    private bool LookingAt(Token[] tokens);
    private Token NextToken();
    private static string XmlEscape(string text);
}
public class NUnit.Engine.Token : object {
    [CompilerGeneratedAttribute]
private TokenKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Pos>k__BackingField;
    public TokenKind Kind { get; private set; }
    public string Text { get; private set; }
    public int Pos { get; public set; }
    public Token(TokenKind kind);
    public Token(TokenKind kind, char ch);
    public Token(TokenKind kind, string text);
    [CompilerGeneratedAttribute]
public TokenKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(TokenKind value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    [CompilerGeneratedAttribute]
public int get_Pos();
    [CompilerGeneratedAttribute]
public void set_Pos(int value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(Token t1, Token t2);
    public static bool op_Inequality(Token t1, Token t2);
}
public class NUnit.Engine.Tokenizer : object {
    private string _input;
    private int _index;
    private static char EOF_CHAR;
    private static string WORD_BREAK_CHARS;
    private String[] DOUBLE_CHAR_SYMBOLS;
    private Token _lookahead;
    public Token LookAhead { get; }
    private char NextChar { get; }
    public Tokenizer(string input);
    public Token get_LookAhead();
    public Token NextToken();
    private Token GetNextToken();
    private bool IsWordChar(char c);
    private Token GetWord();
    private Token GetString();
    private char GetChar();
    private char get_NextChar();
    private void SkipBlanks();
}
public enum NUnit.Engine.TokenKind : Enum {
    public int value__;
    public static TokenKind Eof;
    public static TokenKind Word;
    public static TokenKind String;
    public static TokenKind Symbol;
}
