internal class JetBrains.ReSharper.TestRunner.Adapters.UWP.MarshaledMessageBroker : LongLivedMarshalByRefObject {
    private IInteroperableMessageBroker myInner;
    public MarshaledMessageBroker(IInteroperableMessageBroker inner);
    public sealed virtual Task SendMessage(IMessage message);
    public sealed virtual Task`1<TResult> SendMessage(IMessage`1<TResult> message);
}
internal class JetBrains.ReSharper.TestRunner.Adapters.UWP.TestDiscoveryEventsRegistrar : object {
    private ILogger myLogger;
    private List`1<TestCase> myCollectedTestCases;
    private TaskCompletionSource`1<IEnumerable`1<TestCase>> myTcs;
    public Task`1<IEnumerable`1<TestCase>> TestCases { get; }
    public TestDiscoveryEventsRegistrar(ILogger logger);
    public Task`1<IEnumerable`1<TestCase>> get_TestCases();
    public sealed virtual void LogWarning(string message);
    public sealed virtual void RegisterDiscoveryEvents(IDiscoveryRequest discoveryRequest);
    public sealed virtual void UnregisterDiscoveryEvents(IDiscoveryRequest discoveryRequest);
    private void DiscoveryRequestOnDiscoveryStart(object sender, DiscoveryStartEventArgs e);
    private void DiscoveryRequestOnDiscoveredTests(object sender, DiscoveredTestsEventArgs e);
    private void DiscoveryRequestOnDiscoveryComplete(object sender, DiscoveryCompleteEventArgs e);
    private void DiscoveryRequestOnDiscoveryMessage(object sender, TestRunMessageEventArgs e);
}
internal class JetBrains.ReSharper.TestRunner.Adapters.UWP.TestHostLauncher : object {
    private IMessageBroker myMessageBroker;
    public bool IsDebug { get; }
    public TestHostLauncher(IMessageBroker messageBroker);
    public sealed virtual bool get_IsDebug();
    public sealed virtual int LaunchTestHost(TestProcessStartInfo defaultTestHostStartInfo);
    public sealed virtual int LaunchTestHost(TestProcessStartInfo startInfo, CancellationToken cancellationToken);
    public sealed virtual bool AttachDebuggerToProcess(int pid);
    public sealed virtual bool AttachDebuggerToProcess(int pid, CancellationToken cancellationToken);
    public sealed virtual bool AttachDebuggerToProcess(AttachDebuggerInfo attachDebuggerInfo, CancellationToken cancellationToken);
}
internal class JetBrains.ReSharper.TestRunner.Adapters.UWP.TestRunEventsRegistrar : object {
    private RunContext myRunContext;
    private ILogger myLogger;
    public TestRunEventsRegistrar(RemoteTaskDepot depot, ITestExecutionSink executionSink, ILogger logger);
    public sealed virtual void LogWarning(string message);
    public sealed virtual void RegisterTestRunEvents(ITestRunRequest testRunRequest);
    public sealed virtual void UnregisterTestRunEvents(ITestRunRequest testRunRequest);
    private void TestRunRequestOnRunStart(object sender, TestRunStartEventArgs e);
    private void TestRunRequestOnRunStatsChange(object sender, TestRunChangedEventArgs e);
    private void TestRunRequestOnRunCompletion(object sender, TestRunCompleteEventArgs e);
    private void TestRunRequestOnTestRunMessage(object sender, TestRunMessageEventArgs e);
    private void TestRunRequestOnDataCollectionMessage(object sender, DataCollectionMessageEventArgs e);
}
internal class JetBrains.ReSharper.TestRunner.Adapters.UWP.UwpDiscoverer : object {
    private ITestRequestManager myTestRequestManager;
    private ITestDiscoverySink myDiscoverySink;
    private RemoteTaskDepot myDepot;
    private ILogger myLogger;
    public UwpDiscoverer(ITestRequestManager testRequestManager, ITestDiscoverySink discoverySink, RemoteTaskDepot depot);
    public void ReportAll(TestRunRequest request);
}
internal class JetBrains.ReSharper.TestRunner.Adapters.UWP.UwpExecutor : object {
    private IMessageBroker myMessageBroker;
    private ITestRequestManager myRequestManager;
    private ITestExecutionSink myExecutionSink;
    private RemoteTaskDepot myDepot;
    private CancellationToken myCt;
    private ILogger myLogger;
    public UwpExecutor(IMessageBroker messageBroker, ITestRequestManager requestManager, ITestExecutionSink executionSink, RemoteTaskDepot depot, CancellationToken ct);
    public void RunAll(TestRunRequest request);
    [CompilerGeneratedAttribute]
private void <RunAll>b__7_0();
}
public class JetBrains.ReSharper.TestRunner.Adapters.UWP.UwpHostLoader : object {
    private CustomLoader myLoader;
    private IAssemblyResolver myDefaultDomainAssemblyResolver;
    private IInteroperableMessageBroker myMessageBroker;
    public UwpHostLoader(CustomLoader loader, IAssemblyResolver defaultDomainAssemblyResolver, IInteroperableMessageBroker messageBroker);
    public sealed virtual ITestAdapterLoadContext Initialize(TestRequest request);
}
internal class JetBrains.ReSharper.TestRunner.Adapters.UWP.UwpLoadContext : object {
    private IInteroperableMessageBroker myMessageBroker;
    private AppDomain myDomain;
    private IDisposable myRegistration;
    [CompilerGeneratedAttribute]
private IAssemblyResolver <AssemblyResolver>k__BackingField;
    public string Name { get; }
    public bool IsCollectible { get; }
    public IAssemblyResolver AssemblyResolver { get; }
    public UwpLoadContext(IAssemblyResolver defaultDomainAssemblyResolver, IInteroperableMessageBroker messageBroker, string vsDirectory, String[] probingPaths, ILogger logger);
    public sealed virtual string get_Name();
    public sealed virtual bool get_IsCollectible();
    [CompilerGeneratedAttribute]
public sealed virtual IAssemblyResolver get_AssemblyResolver();
    public sealed virtual ITestDiscoverer InitializeTestDiscoverer();
    public sealed virtual ITestExecutor InitializeTestExecutor();
    private UwpRunner InitializeRunner();
    public sealed virtual void Unload();
    public sealed virtual object Create(Type type, T1 p1);
    public sealed virtual object Create(Type type, T1 p1, T2 p2);
    public sealed virtual object Create(Type type, T1 p1, T2 p2, T3 p3);
    public sealed virtual object Create(Type type, Object[] args);
    public sealed virtual void Dispose();
}
public class JetBrains.ReSharper.TestRunner.Adapters.UWP.UwpRunner : LongLivedMarshalByRefObject {
    private IMessageBroker myMessageBroker;
    private ILogger myLogger;
    private CancellationTokenSource myDiscoveryCts;
    private CancellationTokenSource myExecutionCts;
    public UwpRunner(IMessageBroker messageBroker);
    public sealed virtual void DiscoverTests(TestDiscoveryRequest request, ITestDiscoverySink discoverySink);
    public sealed virtual void AbortDiscovery();
    public sealed virtual void RunTests(TestRunRequest request, ITestDiscoverySink discoverySink, ITestExecutionSink executionSink);
    public sealed virtual void AbortRun();
}
