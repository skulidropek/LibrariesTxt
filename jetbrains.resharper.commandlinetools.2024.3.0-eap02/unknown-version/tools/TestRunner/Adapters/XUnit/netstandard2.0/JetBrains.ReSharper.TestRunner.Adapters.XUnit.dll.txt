public class JetBrains.ReSharper.TestRunner.Adapters.XUnit.Adapters.XMethodInfo : object {
    private IReflectionMethodInfo myInner;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public bool IsAbstract { get; }
    public bool IsGenericMethodDefinition { get; }
    public bool IsPublic { get; }
    public bool IsStatic { get; }
    public ITypeInfo ReturnType { get; }
    public ITypeInfo Type { get; }
    public MethodInfo MethodInfo { get; }
    public XMethodInfo(IReflectionMethodInfo inner, int salt);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual IEnumerable`1<IAttributeInfo> GetCustomAttributes(string assemblyQualifiedAttributeTypeName);
    public sealed virtual IEnumerable`1<ITypeInfo> GetGenericArguments();
    public sealed virtual IEnumerable`1<IParameterInfo> GetParameters();
    public sealed virtual IMethodInfo MakeGenericMethod(ITypeInfo[] typeArguments);
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsGenericMethodDefinition();
    public sealed virtual bool get_IsPublic();
    public sealed virtual bool get_IsStatic();
    public sealed virtual ITypeInfo get_ReturnType();
    public sealed virtual ITypeInfo get_Type();
    public sealed virtual MethodInfo get_MethodInfo();
}
public class JetBrains.ReSharper.TestRunner.Adapters.XUnit.Adapters.XTestCase : object {
    private ITestCase myInner;
    [CompilerGeneratedAttribute]
private ITestMethod <TestMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    public ITestMethod TestMethod { get; }
    public string DisplayName { get; private set; }
    public string SkipReason { get; }
    public Object[] TestMethodArguments { get; }
    public Dictionary`2<string, List`1<string>> Traits { get; }
    public string UniqueID { get; }
    public ISourceInformation SourceInformation { get; public set; }
    public XTestCase(Xunit1TestCase inner);
    [CompilerGeneratedAttribute]
public sealed virtual ITestMethod get_TestMethod();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
private void set_DisplayName(string value);
    protected bool Equals(XTestCase other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual void Deserialize(IXunitSerializationInfo info);
    public sealed virtual void Serialize(IXunitSerializationInfo info);
    public sealed virtual string get_SkipReason();
    public sealed virtual Object[] get_TestMethodArguments();
    public sealed virtual Dictionary`2<string, List`1<string>> get_Traits();
    public sealed virtual string get_UniqueID();
    public sealed virtual ISourceInformation get_SourceInformation();
    public sealed virtual void set_SourceInformation(ISourceInformation value);
}
public class JetBrains.ReSharper.TestRunner.Adapters.XUnit.Adapters.XTestClass : object {
    private ITestClass myInner;
    public ITypeInfo Class { get; }
    public ITestCollection TestCollection { get; }
    public XTestClass(ITestClass inner);
    protected bool Equals(XTestClass other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual void Deserialize(IXunitSerializationInfo info);
    public sealed virtual void Serialize(IXunitSerializationInfo info);
    public sealed virtual ITypeInfo get_Class();
    public sealed virtual ITestCollection get_TestCollection();
}
public class JetBrains.ReSharper.TestRunner.Adapters.XUnit.Adapters.XTestMethod : object {
    private Xunit1TestCase myInner;
    [CompilerGeneratedAttribute]
private ITestClass <TestClass>k__BackingField;
    public ITestClass TestClass { get; }
    public string DisplayName { get; }
    public IMethodInfo Method { get; }
    public XTestMethod(Xunit1TestCase inner);
    [CompilerGeneratedAttribute]
public sealed virtual ITestClass get_TestClass();
    public string get_DisplayName();
    protected bool Equals(XTestMethod other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual void Deserialize(IXunitSerializationInfo info);
    public sealed virtual void Serialize(IXunitSerializationInfo info);
    public sealed virtual IMethodInfo get_Method();
}
internal class JetBrains.ReSharper.TestRunner.Adapters.XUnit.DiagnosticSink : DiagnosticEventSink {
    private IMessageSinkWithTypes myInnerSink;
    public DiagnosticSink(IMessageSinkWithTypes innerSink, ILogger logger);
    private sealed virtual override bool Xunit.IMessageSinkWithTypes.OnMessageWithTypes(IMessageSinkMessage message, HashSet`1<string> typeNames);
}
internal class JetBrains.ReSharper.TestRunner.Adapters.XUnit.Discoverer : object {
    private IFrontController myController;
    private IMessageSinkWithTypes myReporterSink;
    private ITestDiscoverySink myDiscoverySink;
    private TestRequest myRequest;
    private RemoteTaskDepot myDepot;
    private HashSet`1<string> myTakenIds;
    private ILogger myLogger;
    private CancellationToken myCt;
    public Discoverer(IFrontController controller, IMessageSinkWithTypes reporterSink, ITestDiscoverySink discoverySink, TestRequest request, RemoteTaskDepot depot, CancellationToken ct);
    public void ReportAll();
    private TestAssemblyConfiguration GetAssemblyConfiguration(TestRequest request);
    private IXunitSerializable GetParent(IXunitSerializable element);
    private XUnitTestElementTask GetRemoteTask(IXunitSerializable element);
}
internal class JetBrains.ReSharper.TestRunner.Adapters.XUnit.Executor : object {
    private IFrontController myController;
    private IMessageSinkWithTypes myReporterSink;
    private TestRunRequest myRunRequest;
    private RunContext myRunContext;
    private CancellationToken myCt;
    public Executor(IFrontController controller, IMessageSinkWithTypes reporterSink, ITestExecutionSink executionSink, TestRunRequest runRequest, RemoteTaskDepot depot, CancellationToken ct);
    public void RunAll();
    private TestAssemblyConfiguration GetAssemblyConfiguration(TestRunRequest request);
    private ITestFrameworkExecutionOptions GetExecutionOptions(TestAssemblyConfiguration configuration);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Adapters.XUnit.Extensions.AbstractionExtensions : object {
    [ExtensionAttribute]
public static ExceptionInfo[] ConvertExceptions(IFailureInformation failure, String& simplifiedMessage);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Adapters.XUnit.Extensions.FluentExtensions : object {
    [ExtensionAttribute]
public static T As(object instance);
    [ExtensionAttribute]
public static void With(TInput o, Action`1<TInput> action);
    [ExtensionAttribute]
public static TResult With(TInput o, Func`2<TInput, TResult> evaluator);
    [ExtensionAttribute]
public static TResult With(TInput o, Func`2<TInput, TResult> evaluator, TResult defaultValue);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Adapters.XUnit.Extensions.XUnitExtensions : object {
    [ExtensionAttribute]
public static bool IsTheoryTestCase(ITest test);
    [ExtensionAttribute]
public static bool IsTheoryTestCase(ITestCase testCase);
    [ExtensionAttribute]
public static string GetDisplayName(ITest test);
    [ExtensionAttribute]
public static string GetDisplayName(ITestCase testCase);
    [ExtensionAttribute]
public static string GetDisplayName(ITestMethod testMethod);
    [ExtensionAttribute]
public static TraitsCollection GetTraits(ITestClass testClass);
    [ExtensionAttribute]
public static TraitsCollection GetTraits(ITestMethod testMethod);
    [ExtensionAttribute]
public static TraitsCollection GetTraits(ITestCase testCase);
    [ExtensionAttribute]
public static string GetDeclaredOrReflectedTypeName(ITestMethod testMethod);
    [ExtensionAttribute]
public static string GetDisplayName(IMethodInfo method);
    [ExtensionAttribute]
public static ITestCase WrapIfRequired(ITestCase testCase);
}
internal static class JetBrains.ReSharper.TestRunner.Adapters.XUnit.RemoteTaskBuilder : object {
    public static XUnitTestElementTask GetRemoteTask(object element);
    private static XUnitTestElementTask FromTest(ITest test);
    private static XUnitTestElementTask FromTestCase(ITestCase testCase);
    private static XUnitTestElementTask FromTestMethod(ITestMethod testMethod);
    private static XUnitTestElementTask FromTestClass(ITestClass testClass);
}
[DefaultMemberAttribute("Item")]
internal class JetBrains.ReSharper.TestRunner.Adapters.XUnit.RemoteTaskDepot : object {
    private IDictionary`2<string, XUnitTestElementTask> myTasksByReSharperId;
    private IList`1<ITestCase> myTestCasesToRun;
    public XUnitTestElementTask Item { get; }
    public XUnitTestElementTask Item { get; }
    public RemoteTaskDepot(RemoteTask[] tasks);
    public XUnitTestElementTask get_Item(IXunitSerializable element);
    public XUnitTestElementTask get_Item(XUnitReSharperId id);
    public XUnitTestElementTask TryGetParent(XUnitTestElementTask task);
    public void Add(XUnitTestElementTask task);
    public void Bind(IXunitSerializable element, XUnitTestElementTask task);
    public IEnumerable`1<ITestCase> GetTestCasesToRun();
}
internal class JetBrains.ReSharper.TestRunner.Adapters.XUnit.RunContext : object {
    private RemoteTaskDepot myDepot;
    private ITestExecutionSink myExecutionSink;
    private ConcurrentDictionary`2<ITestClass, TaskWrapper> myClassTasks;
    private ConcurrentDictionary`2<ITestMethod, TaskWrapper> myMethodTasks;
    private ConcurrentDictionary`2<ITestCase, TaskWrapper> myTestCaseTasks;
    private ConcurrentDictionary`2<ITest, TaskWrapper> myTestTasks;
    private ConcurrentDictionary`2<string, TaskWrapper> myTasksById;
    private HashSet`1<XUnitTestElementTask> myHandledTests;
    private HashSet`1<XUnitTestElementTask> myHandledTestCases;
    public RunContext(RemoteTaskDepot depot, ITestExecutionSink executionSink);
    public IEnumerable`1<ITestCase> GetTestCasesToRun();
    public TaskWrapper GetTask(ITest test);
    public TaskWrapper GetTask(ITestCase testCase);
    public TaskWrapper GetTask(ITestMethod testMethod);
    public TaskWrapper GetTask(ITestClass testClass);
    private XUnitTestElementTask CreateTask(object fromValue);
    [CompilerGeneratedAttribute]
private RemoteTask <.ctor>b__9_0(RemoteTask t);
}
internal class JetBrains.ReSharper.TestRunner.Adapters.XUnit.RunnerLoggerAdapter : object {
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private object <LockObject>k__BackingField;
    public object LockObject { get; }
    public RunnerLoggerAdapter(ILogger logger);
    [CompilerGeneratedAttribute]
public sealed virtual object get_LockObject();
    public sealed virtual void LogMessage(StackFrameInfo stackFrame, string message);
    public sealed virtual void LogImportantMessage(StackFrameInfo stackFrame, string message);
    public sealed virtual void LogWarning(StackFrameInfo stackFrame, string message);
    public sealed virtual void LogError(StackFrameInfo stackFrame, string message);
    public sealed virtual void LogRaw(string message);
}
internal class JetBrains.ReSharper.TestRunner.Adapters.XUnit.TaskWrapper : object {
    private XUnitTestElementTask myTask;
    private ITestExecutionSink mySink;
    private TestOutcome myOutcome;
    private string myMessage;
    private long myStarted;
    private long myFinished;
    public TaskWrapper(XUnitTestElementTask elementTask, ITestExecutionSink executionSink);
    public void Starting();
    public void Output(string output);
    public void Skipped(string reason);
    public void Passed();
    public void Failed(ExceptionInfo[] exceptions, string exceptionMessage);
    public void Finished(IFinishedMessage message);
    public void Reset();
}
internal class JetBrains.ReSharper.TestRunner.Adapters.XUnit.TestListener : ExecutionEventSink {
    private IMessageSinkWithTypes myInnerSink;
    private RunContext myRunContext;
    private string myExpectedCurrentDir;
    private ManualResetEvent myTcs;
    private CancellationToken myCt;
    private ILogger myLogger;
    private ExecutionSummary mySummary;
    public WaitHandle Finished { get; }
    public ExecutionSummary Summary { get; }
    public TestListener(IMessageSinkWithTypes innerSink, RunContext runContext, string expectedCurrentDir, CancellationToken ct);
    public WaitHandle get_Finished();
    public ExecutionSummary get_Summary();
    private sealed virtual override bool Xunit.IMessageSinkWithTypes.OnMessageWithTypes(IMessageSinkMessage message, HashSet`1<string> messageTypes);
    private void OnTestStartingEvent(MessageHandlerArgs`1<ITestStarting> args);
    private void OnTestOutputEvent(MessageHandlerArgs`1<ITestOutput> args);
    private void OnTestPassedEvent(MessageHandlerArgs`1<ITestPassed> args);
    private void OnTestSkippedEvent(MessageHandlerArgs`1<ITestSkipped> args);
    private void OnTestFailedEvent(MessageHandlerArgs`1<ITestFailed> args);
    private void OnTestFinishedEvent(MessageHandlerArgs`1<ITestFinished> args);
    private void OnTestCaseStartingEvent(MessageHandlerArgs`1<ITestCaseStarting> args);
    private void OnTestCaseFinishedEvent(MessageHandlerArgs`1<ITestCaseFinished> args);
    private void OnTestMethodStartingEvent(MessageHandlerArgs`1<ITestMethodStarting> args);
    private void OnTestMethodFinishedEvent(MessageHandlerArgs`1<ITestMethodFinished> args);
    private void OnTestClassStartingEvent(MessageHandlerArgs`1<ITestClassStarting> args);
    private void OnTestClassFinishedEvent(MessageHandlerArgs`1<ITestClassFinished> args);
    private void OnTestAssemblyStartingEvent(MessageHandlerArgs`1<ITestAssemblyStarting> args);
    private void OnTestAssemblyFinishedEvent(MessageHandlerArgs`1<ITestAssemblyFinished> args);
    private void OnTestAssemblyCleanupFailureEvent(MessageHandlerArgs`1<ITestAssemblyCleanupFailure> args);
    private void OnTestCollectionCleanupFailureEvent(MessageHandlerArgs`1<ITestCollectionCleanupFailure> args);
    private void OnTestClassCleanupFailureEvent(MessageHandlerArgs`1<ITestClassCleanupFailure> args);
    private void OnTestMethodCleanupFailureEvent(MessageHandlerArgs`1<ITestMethodCleanupFailure> args);
    private void OnTestCaseCleanupFailureEvent(MessageHandlerArgs`1<ITestCaseCleanupFailure> args);
    private void OnTestCleanupFailureEvent(MessageHandlerArgs`1<ITestCleanupFailure> args);
    private void HandleFailure(IEnumerable`1<ITestCase> testCases, IFailureInformation failureInformation, string message);
    private void HandleFailure(TaskWrapper task, IFailureInformation failureInformation, string message);
}
internal static class JetBrains.ReSharper.TestRunner.Adapters.XUnit.TraitsHelper : object {
    private static Lazy`1<int> ourVersion;
    private static TraitsHelper();
    private static int DetectVersion();
    public static TraitsCollection GetTraits(ITestClass testClass);
    public static TraitsCollection GetTraits(ITestMethod testMethod);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.TestRunner.Adapters.XUnit.TraitsHelper_V2 : object {
    private static Lazy`1<ILogger> ourLogger;
    private static TraitsHelper_V2();
    public static TraitsCollection GetTraits(ITestClass testClass);
    public static TraitsCollection GetTraits(ITestMethod testMethod);
    private static MethodInfo FindOverridenMethod(MethodInfo method);
    [ExtensionAttribute]
public static MethodInfo ToRuntimeMethod(IMethodInfo methodInfo);
    [ExtensionAttribute]
private static MethodInfo GetMethodInfoFromIMethodInfo(Type type, IMethodInfo methodInfo);
    [ExtensionAttribute]
public static Type ToRuntimeType(ITypeInfo typeInfo);
}
internal class JetBrains.ReSharper.TestRunner.Adapters.XUnit.XUnitReSharperId : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Id { get; }
    public XUnitReSharperId(ITestClass testClass);
    public XUnitReSharperId(ITestMethod testMethod);
    public XUnitReSharperId(ITestCase testCase);
    public XUnitReSharperId(ITest test);
    [CompilerGeneratedAttribute]
public string get_Id();
    public virtual string ToString();
    public static string Self(ITestClass testClass);
    public static string Self(ITestMethod testMethod);
    public static string Self(ITestCase testCase);
    public static string Self(ITest test);
    public static string Self(object element);
    public static XUnitReSharperId Create(object element);
    public static string Parent(object element);
}
public class JetBrains.ReSharper.TestRunner.Adapters.XUnit.XUnitRunner : LongLivedMarshalByRefObject {
    private ILogger myLogger;
    private CancellationTokenSource myDiscoveryCts;
    private CancellationTokenSource myExecutionCts;
    public sealed virtual void DiscoverTests(TestDiscoveryRequest request, ITestDiscoverySink discoverySink);
    public sealed virtual void AbortDiscovery();
    public sealed virtual void RunTests(TestRunRequest request, ITestDiscoverySink discoverySink, ITestExecutionSink executionSink);
    private XunitFrontController GetXUnitController(TestRequest request, IMessageSinkWithTypes reporterSink);
    public sealed virtual void AbortRun();
}
internal class JetBrains.ReSharper.TestRunner.Adapters.XUnit.XUnitRunnerReporterLoader : object {
    private static ILogger ourLogger;
    private static XUnitRunnerReporterLoader();
    public static IRunnerReporter Load(string directory);
    private static IEnumerable`1<IRunnerReporter> InstantiateReporters(IEnumerable`1<string> reporterTypes);
    public static IEnumerable`1<string> GetReporterTypes(string directory);
}
