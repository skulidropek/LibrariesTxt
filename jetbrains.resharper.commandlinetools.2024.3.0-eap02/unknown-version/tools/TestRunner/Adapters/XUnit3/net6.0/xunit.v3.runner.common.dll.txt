[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("749")]
internal class System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute : Attribute {
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("32")]
internal class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.StringSyntaxAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Syntax>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    public static string CompositeFormat;
    public static string DateOnlyFormat;
    public static string DateTimeFormat;
    public static string EnumFormat;
    public static string GuidFormat;
    public static string Json;
    public static string NumericFormat;
    public static string Regex;
    public static string TimeOnlyFormat;
    public static string TimeSpanFormat;
    public static string Uri;
    public static string Xml;
    public string Syntax { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    public StringSyntaxAttribute(string syntax);
    public StringSyntaxAttribute(string syntax, Object[] arguments);
    [CompilerGeneratedAttribute]
public string get_Syntax();
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FeatureName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    public string FeatureName { get; }
    public bool IsOptional { get; public set; }
    public CompilerFeatureRequiredAttribute(string featureName);
    [CompilerGeneratedAttribute]
public string get_FeatureName();
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
public void set_IsOptional(bool value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("396")]
internal class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.139.59561")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Xunit.Internal.ArgumentFormatter : object {
    internal static string EllipsisInBrackets;
    public static int MAX_DEPTH;
    public static int MAX_ENUMERABLE_LENGTH;
    public static int MAX_OBJECT_ITEM_COUNT;
    public static int MAX_STRING_LENGTH;
    private static Object[] EmptyObjects;
    private static Type[] EmptyTypes;
    [NullableAttribute("2")]
private static PropertyInfo tupleIndexer;
    [NullableAttribute("2")]
private static Type tupleInterfaceType;
    [NullableAttribute("2")]
private static PropertyInfo tupleLength;
    private static Dictionary`2<TypeInfo, string> TypeMappings;
    [CompilerGeneratedAttribute]
private static string <Ellipsis>k__BackingField;
    public static string Ellipsis { get; }
    private static ArgumentFormatter();
    [CompilerGeneratedAttribute]
public static string get_Ellipsis();
    public static string EscapeString(string s);
    public static string Format(object value, int depth);
    private static string FormatCharValue(char value);
    private static string FormatComplexValue(object value, int depth, Type type, bool isAnonymousType);
    private static string FormatDateTimeValue(object value);
    private static string FormatDoubleValue(object value);
    private static string FormatEnumValue(object value);
    private static string FormatEnumerableValue(IEnumerable enumerable, int depth);
    private static string FormatFloatValue(object value);
    private static string FormatStringValue(string value);
    private static string FormatTupleValue(object tupleParameter, int depth);
    public static string FormatTypeName(Type type, bool fullTypeName);
    private static string FormatValueTypeValue(object value, TypeInfo typeInfo);
    [NullableContextAttribute("2")]
internal static Type GetSetElementType(object obj);
    [ExtensionAttribute]
private static bool IsAnonymousType(TypeInfo typeInfo);
    [ExtensionAttribute]
private static bool IsSZArrayType(TypeInfo typeInfo);
    [NullableContextAttribute("2")]
private static bool SafeToMultiEnumerate(IEnumerable collection);
    [NullableContextAttribute("2")]
private static bool TryGetEscapeSequence(char ch, String& value);
    [NullableContextAttribute("2")]
internal static Exception UnwrapException(Exception ex);
    private static string WrapAndGetFormattedValue(Func`1<object> getter, int depth);
}
public enum Xunit.Internal.CommandLineGroup : Enum {
    public int value__;
    public static CommandLineGroup Hidden;
    public static CommandLineGroup General;
    public static CommandLineGroup NetFramework;
    public static CommandLineGroup Filter;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Xunit.Internal.CommandLineParserBase : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, ValueTuple`4<CommandLineGroup, string, String[], Action`1<KeyValuePair`2<string, string>>>> parsers;
    [NullableAttribute("2")]
private string reporterFolder;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyList`1<IRunnerReporter> runnerReporters;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Args>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleHelper <ConsoleHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ParseWarnings>k__BackingField;
    [CompilerGeneratedAttribute]
private XunitProject <Project>k__BackingField;
    protected IReadOnlyList`1<string> Args { get; }
    protected ConsoleHelper ConsoleHelper { get; }
    public bool HelpRequested { get; }
    public List`1<string> ParseWarnings { get; }
    protected XunitProject Project { get; }
    protected IReadOnlyList`1<IRunnerReporter> RunnerReporters { get; }
    protected CommandLineParserBase(ConsoleHelper consoleHelper, IReadOnlyList`1<IRunnerReporter> runnerReporters, string reporterFolder, String[] args);
    [CompilerGeneratedAttribute]
protected IReadOnlyList`1<string> get_Args();
    [CompilerGeneratedAttribute]
protected ConsoleHelper get_ConsoleHelper();
    public bool get_HelpRequested();
    [CompilerGeneratedAttribute]
public List`1<string> get_ParseWarnings();
    [CompilerGeneratedAttribute]
protected XunitProject get_Project();
    protected IReadOnlyList`1<IRunnerReporter> get_RunnerReporters();
    protected void AddHiddenParser(string switch, Action`1<KeyValuePair`2<string, string>> handler, string replacement);
    protected void AddParser(string switch, Action`1<KeyValuePair`2<string, string>> handler, CommandLineGroup group, string argumentDisplay, String[] descriptions);
    private static void EnsurePathExists(string path);
    [NullableContextAttribute("2")]
protected virtual bool FileExists(string path);
    private IReadOnlyList`1<string> GetArguments(String[] args);
    private List`1<IRunnerReporter> GetAvailableRunnerReporters();
    [NullableContextAttribute("2")]
protected virtual string GetFullPath(string fileName);
    protected static void GuardNoOptionValue(KeyValuePair`2<string, string> option);
    protected static bool IsConfigFile(string fileName);
    protected abstract virtual Assembly LoadAssembly(string dllFile);
    private void OnClass(KeyValuePair`2<string, string> option);
    private void OnClassMinus(KeyValuePair`2<string, string> option);
    private void OnCulture(KeyValuePair`2<string, string> option);
    private void OnDebug(KeyValuePair`2<string, string> option);
    private void OnDiagnostics(KeyValuePair`2<string, string> option);
    private void OnExplicit(KeyValuePair`2<string, string> option);
    private void OnFailSkips(KeyValuePair`2<string, string> option);
    private void OnFailSkipsMinus(KeyValuePair`2<string, string> option);
    private void OnFailWarns(KeyValuePair`2<string, string> option);
    private void OnFailWarnsMinus(KeyValuePair`2<string, string> option);
    private void OnIgnoreFailures(KeyValuePair`2<string, string> option);
    private void OnInternalDiagnostics(KeyValuePair`2<string, string> option);
    private void OnList(KeyValuePair`2<string, string> option);
    private void OnMaxThreads(KeyValuePair`2<string, string> option);
    private void OnMethod(KeyValuePair`2<string, string> option);
    private void OnMethodDisplay(KeyValuePair`2<string, string> option);
    private void OnMethodDisplayOptions(KeyValuePair`2<string, string> option);
    private void OnMethodMinus(KeyValuePair`2<string, string> option);
    private void OnNamespace(KeyValuePair`2<string, string> option);
    private void OnNamespaceMinus(KeyValuePair`2<string, string> option);
    private void OnNoAutoReporters(KeyValuePair`2<string, string> option);
    private void OnNoColor(KeyValuePair`2<string, string> option);
    private void OnNoLogo(KeyValuePair`2<string, string> option);
    protected void OnParallel(KeyValuePair`2<string, string> option);
    private void OnParallelAlgorithm(KeyValuePair`2<string, string> option);
    private void OnPause(KeyValuePair`2<string, string> option);
    private void OnPreEnumerateTheories(KeyValuePair`2<string, string> option);
    private void OnShowLiveOutput(KeyValuePair`2<string, string> option);
    private void OnStopOnFail(KeyValuePair`2<string, string> option);
    private void OnTrait(KeyValuePair`2<string, string> option);
    private void OnTraitMinus(KeyValuePair`2<string, string> option);
    private void OnUseAnsiColor(KeyValuePair`2<string, string> option);
    private void OnWait(KeyValuePair`2<string, string> option);
    protected XunitProject ParseInternal(int argStartIndex);
    private static KeyValuePair`2<string, string> PopOption(Stack`1<string> arguments);
    public void PrintUsage();
    private void PrintUsageGroup(CommandLineGroup group, String[] headers);
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("after-test-finished")]
public class Xunit.Runner.Common.AfterTestFinished : TestMessage {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string AttributeName { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_AttributeName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_AttributeName(string value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("after-test-starting")]
public class Xunit.Runner.Common.AfterTestStarting : TestMessage {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string AttributeName { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_AttributeName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_AttributeName(string value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.AggregateMessageSink : object {
    private DisposalTracker disposalTracker;
    [CompilerGeneratedAttribute]
private List`1<IMessageSink> <AggregatedSinks>k__BackingField;
    protected List`1<IMessageSink> AggregatedSinks { get; }
    [CompilerGeneratedAttribute]
protected List`1<IMessageSink> get_AggregatedSinks();
    public virtual ValueTask DisposeAsync();
    protected TDispatcher GetOrCreateAggregatedSink(TDispatcher& value);
    public virtual bool OnMessage(IMessageSinkMessage message);
}
public enum Xunit.Runner.Common.AppDomainOption : Enum {
    public int value__;
    public static AppDomainOption NotAvailable;
    public static AppDomainOption Disabled;
    public static AppDomainOption Enabled;
}
public enum Xunit.Runner.Common.AppDomainSupport : Enum {
    public int value__;
    public static AppDomainSupport IfAvailable;
    public static AppDomainSupport Required;
    public static AppDomainSupport Denied;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Xunit.Runner.Common.AppVeyorClient : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentQueue`1<IDictionary`2<string, object>> addQueue;
    private string baseUri;
    private HttpClient client;
    private ManualResetEventSlim finished;
    private MediaTypeWithQualityHeaderValue jsonMediaType;
    private IRunnerLogger logger;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) previousErrors;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) shouldExit;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentQueue`1<IDictionary`2<string, object>> updateQueue;
    private ManualResetEventSlim workEvent;
    public AppVeyorClient(IRunnerLogger logger, string baseUri);
    public void AddTest(IDictionary`2<string, object> request);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Xunit.Runner.Common.AppVeyorClient/<RunLoop>d__13")]
private Task RunLoop();
    [AsyncStateMachineAttribute("Xunit.Runner.Common.AppVeyorClient/<SendRequest>d__14")]
private Task SendRequest(HttpMethod method, ICollection`1<IDictionary`2<string, object>> body);
    private static string ToJson(IEnumerable`1<IDictionary`2<string, object>> data);
    public void UpdateTest(IDictionary`2<string, object> request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.AppVeyorReporter : object {
    public string Description { get; }
    public bool ForceNoLogo { get; }
    public bool IsEnvironmentallyEnabled { get; }
    [NullableAttribute("2")]
public string RunnerSwitch { get; }
    public sealed virtual string get_Description();
    public sealed virtual bool get_ForceNoLogo();
    public sealed virtual bool get_IsEnvironmentallyEnabled();
    [NullableContextAttribute("2")]
public sealed virtual string get_RunnerSwitch();
    public sealed virtual ValueTask`1<IRunnerReporterMessageHandler> CreateMessageHandler(IRunnerLogger logger, IMessageSink diagnosticMessageSink);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.AppVeyorReporterMessageHandler : DefaultRunnerReporterMessageHandler {
    private static int MaxLength;
    private int assembliesInFlight;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<string, ValueTuple`2<string, Dictionary`2<string, int>>> assemblyInfoByUniqueID;
    private string baseUri;
    [NullableAttribute("2")]
private AppVeyorClient client;
    private object clientLock;
    private AppVeyorClient Client { get; }
    public AppVeyorReporterMessageHandler(IRunnerLogger logger, string baseUri);
    private AppVeyorClient get_Client();
    [AsyncStateMachineAttribute("Xunit.Runner.Common.AppVeyorReporterMessageHandler/<DisposeAsync>d__9")]
public virtual ValueTask DisposeAsync();
    protected virtual void HandleTestAssemblyFinished(MessageHandlerArgs`1<ITestAssemblyFinished> args);
    protected virtual void HandleTestAssemblyStarting(MessageHandlerArgs`1<ITestAssemblyStarting> args);
    protected virtual void HandleTestStarting(MessageHandlerArgs`1<ITestStarting> args);
    protected virtual void HandleTestPassed(MessageHandlerArgs`1<ITestPassed> args);
    protected virtual void HandleTestSkipped(MessageHandlerArgs`1<ITestSkipped> args);
    protected virtual void HandleTestFailed(MessageHandlerArgs`1<ITestFailed> args);
    private static string GetFinishedTestName(string methodName, Dictionary`2<string, int> testMethods);
    private static Dictionary`2<string, object> GetRequestMessage(string testName, string testFramework, string fileName, string outcome, Nullable`1<long> durationMilliseconds, string errorMessage, string errorStackTrace, string stdOut);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask <>n__0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.AssemblyMetadata : object {
    private static Version versionZero;
    [CompilerGeneratedAttribute]
private TargetFrameworkIdentifier <TargetFrameworkIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <TargetFrameworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <XunitVersion>k__BackingField;
    public TargetFrameworkIdentifier TargetFrameworkIdentifier { get; }
    public Version TargetFrameworkVersion { get; }
    public int XunitVersion { get; }
    [NullableContextAttribute("2")]
public AssemblyMetadata(int xunitVersion, string targetFramework);
    private static AssemblyMetadata();
    [CompilerGeneratedAttribute]
public TargetFrameworkIdentifier get_TargetFrameworkIdentifier();
    [CompilerGeneratedAttribute]
public Version get_TargetFrameworkVersion();
    [CompilerGeneratedAttribute]
public int get_XunitVersion();
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("before-test-finished")]
public class Xunit.Runner.Common.BeforeTestFinished : TestMessage {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string AttributeName { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_AttributeName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_AttributeName(string value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("before-test-starting")]
public class Xunit.Runner.Common.BeforeTestStarting : TestMessage {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string AttributeName { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_AttributeName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_AttributeName(string value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Xunit.Runner.Common.ConfigReader_Json : object {
    [NullableContextAttribute("2")]
public static bool Load(TestAssemblyConfiguration configuration, string assemblyFileName, string configFileName, List`1<string> warnings);
    private static bool LoadFile(TestAssemblyConfiguration configuration, string configFileName, List`1<string> warnings);
}
public static class Xunit.Runner.Common.ConfigUtility : object {
    [NullableAttribute("1")]
public static Regex MultiplierStyleMaxParallelThreadsRegex;
    private static ConfigUtility();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.ConsoleDiagnosticMessageSink : object {
    private ConsoleHelper consoleHelper;
    private string displayNewlineReplace;
    [NullableAttribute("2")]
private string displayPrefixDiagnostic;
    [NullableAttribute("2")]
private string displayPrefixInternal;
    private string indent;
    private bool noColor;
    private ConsoleDiagnosticMessageSink(ConsoleHelper consoleHelper, bool noColor, bool showDiagnosticMessages, bool showInternalDiagnosticMessages, string assemblyDisplayName, bool indent);
    public sealed virtual bool OnMessage(IMessageSinkMessage message);
    [NullableContextAttribute("2")]
public static ConsoleDiagnosticMessageSink TryCreate(ConsoleHelper consoleHelper, bool noColor, bool showDiagnosticMessages, bool showInternalDiagnosticMessages, string assemblyDisplayName, bool indent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.ConsoleHelper : object {
    private TextWriter consoleWriter;
    [CompilerGeneratedAttribute]
private object <LockObject>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <ResetColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<ConsoleColor> <SetBackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<ConsoleColor> <SetForegroundColor>k__BackingField;
    public object LockObject { get; }
    public Action ResetColor { get; private set; }
    public Action`1<ConsoleColor> SetBackgroundColor { get; private set; }
    public Action`1<ConsoleColor> SetForegroundColor { get; private set; }
    public ConsoleHelper(TextWriter consoleWriter);
    [CompilerGeneratedAttribute]
public object get_LockObject();
    [CompilerGeneratedAttribute]
public Action get_ResetColor();
    [CompilerGeneratedAttribute]
private void set_ResetColor(Action value);
    [CompilerGeneratedAttribute]
public Action`1<ConsoleColor> get_SetBackgroundColor();
    [CompilerGeneratedAttribute]
private void set_SetBackgroundColor(Action`1<ConsoleColor> value);
    [CompilerGeneratedAttribute]
public Action`1<ConsoleColor> get_SetForegroundColor();
    [CompilerGeneratedAttribute]
private void set_SetForegroundColor(Action`1<ConsoleColor> value);
    private void SetBackgroundColorANSI(ConsoleColor c);
    private void SetBackgroundColorConsole(ConsoleColor c);
    private void SetForegroundColorANSI(ConsoleColor c);
    private void SetForegroundColorConsole(ConsoleColor c);
    private void ResetColorANSI();
    private void ResetColorConsole();
    public void UseAnsiColor();
    [NullableContextAttribute("2")]
public void Write(string value);
    public void Write(string format, object arg0);
    [NullableContextAttribute("2")]
public void Write(string format, object arg0, object arg1);
    [NullableContextAttribute("2")]
public void Write(string format, object arg0, object arg1, object arg2);
    public void Write(string format, Object[] args);
    public void WriteLine();
    [NullableContextAttribute("2")]
public void WriteLine(string value);
    public void WriteLine(string format, object arg0);
    [NullableContextAttribute("2")]
public void WriteLine(string format, object arg0, object arg1);
    [NullableContextAttribute("2")]
public void WriteLine(string format, object arg0, object arg1, object arg2);
    public void WriteLine(string format, Object[] args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Xunit.Runner.Common.ConsoleProjectLister : object {
    private static string Escape(string value);
    public static void List(ConsoleHelper consoleHelper, IReadOnlyDictionary`2<string, List`1<TTestCase>> testCasesByAssembly, ListOption listOption, ListFormat listFormat);
    private static void Classes(ConsoleHelper consoleHelper, IReadOnlyDictionary`2<string, List`1<TTestCase>> testCasesByAssembly, ListFormat format);
    private static void Full(ConsoleHelper consoleHelper, IReadOnlyDictionary`2<string, List`1<TTestCase>> testCasesByAssembly, ListFormat format);
    private static void Methods(ConsoleHelper consoleHelper, IReadOnlyDictionary`2<string, List`1<TTestCase>> testCasesByAssembly, ListFormat format);
    private static void Tests(ConsoleHelper consoleHelper, IReadOnlyDictionary`2<string, List`1<TTestCase>> testCasesByAssembly, ListFormat format);
    private static void Traits(ConsoleHelper consoleHelper, IReadOnlyDictionary`2<string, List`1<TTestCase>> testCasesByAssembly, ListFormat format);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.ConsoleRunnerLogger : object {
    private static Regex ansiSgrRegex;
    private ConsoleHelper consoleHelper;
    private bool useColors;
    public object LockObject { get; }
    public ConsoleRunnerLogger(bool useColors, bool useAnsiColor, ConsoleHelper consoleHelper);
    private static ConsoleRunnerLogger();
    public sealed virtual object get_LockObject();
    public sealed virtual void LogError(StackFrameInfo stackFrame, string message);
    public sealed virtual void LogImportantMessage(StackFrameInfo stackFrame, string message);
    public sealed virtual void LogMessage(StackFrameInfo stackFrame, string message);
    public sealed virtual void LogRaw(string message);
    public sealed virtual void LogWarning(StackFrameInfo stackFrame, string message);
    public void WriteLine(string message);
    private static string RemoveAnsiSgr(string message);
    [NullableContextAttribute("2")]
private IDisposable SetColor(ConsoleColor color);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[HiddenRunnerReporterAttribute]
public class Xunit.Runner.Common.DefaultRunnerReporter : object {
    public string Description { get; }
    public bool ForceNoLogo { get; }
    public bool IsEnvironmentallyEnabled { get; }
    [NullableAttribute("2")]
public string RunnerSwitch { get; }
    public virtual string get_Description();
    public sealed virtual bool get_ForceNoLogo();
    public virtual bool get_IsEnvironmentallyEnabled();
    [NullableContextAttribute("2")]
public virtual string get_RunnerSwitch();
    public virtual ValueTask`1<IRunnerReporterMessageHandler> CreateMessageHandler(IRunnerLogger logger, IMessageSink diagnosticMessageSink);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.DefaultRunnerReporterMessageHandler : TestMessageSink {
    public static string EnvVar_HidePassingOutput;
    [NullableAttribute("2")]
private string defaultDirectory;
    private ITestFrameworkExecutionOptions defaultExecutionOptions;
    private Dictionary`2<string, ITestFrameworkExecutionOptions> executionOptionsByAssembly;
    private bool logPassingTestsWithOutput;
    [CompilerGeneratedAttribute]
private IRunnerLogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageMetadataCache <MetadataCache>k__BackingField;
    protected IRunnerLogger Logger { get; }
    protected MessageMetadataCache MetadataCache { get; }
    public DefaultRunnerReporterMessageHandler(IRunnerLogger logger);
    [CompilerGeneratedAttribute]
protected IRunnerLogger get_Logger();
    [CompilerGeneratedAttribute]
protected MessageMetadataCache get_MetadataCache();
    private void AddExecutionOptions(string assemblyFileName, ITestFrameworkExecutionOptions executionOptions);
    protected virtual string Escape(string text);
    protected virtual string EscapeMultiLineIndent(string text, string indent);
    protected virtual string GetAssemblyDisplayName(XunitProjectAssembly assembly);
    protected ITestFrameworkExecutionOptions GetExecutionOptions(string assemblyFileName);
    protected void LogError(IErrorMetadata errorMetadata, string failureType);
    protected void LogError(IErrorMetadata errorMetadata, string failureTypeFormat, Object[] args);
    [NullableContextAttribute("2")]
protected virtual void LogStackTrace(StackFrameInfo frameInfo, string stackTrace);
    [NullableContextAttribute("2")]
protected virtual void LogOutput(StackFrameInfo frameInfo, string output);
    protected virtual void LogWarnings(StackFrameInfo frameInfo, String[] warnings);
    private void RemoveExecutionOptions(string assemblyIdentifier);
    protected virtual void HandleErrorMessage(MessageHandlerArgs`1<IErrorMessage> args);
    protected virtual void HandleTestAssemblyDiscoveryFinished(MessageHandlerArgs`1<TestAssemblyDiscoveryFinished> args);
    protected virtual void HandleTestAssemblyDiscoveryStarting(MessageHandlerArgs`1<TestAssemblyDiscoveryStarting> args);
    protected virtual void HandleTestAssemblyExecutionFinished(MessageHandlerArgs`1<TestAssemblyExecutionFinished> args);
    protected virtual void HandleTestAssemblyExecutionStarting(MessageHandlerArgs`1<TestAssemblyExecutionStarting> args);
    protected virtual void HandleTestAssemblyCleanupFailure(MessageHandlerArgs`1<ITestAssemblyCleanupFailure> args);
    protected virtual void HandleTestAssemblyFinished(MessageHandlerArgs`1<ITestAssemblyFinished> args);
    protected virtual void HandleTestAssemblyStarting(MessageHandlerArgs`1<ITestAssemblyStarting> args);
    protected virtual void HandleTestCaseCleanupFailure(MessageHandlerArgs`1<ITestCaseCleanupFailure> args);
    protected virtual void HandleTestCaseFinished(MessageHandlerArgs`1<ITestCaseFinished> args);
    protected virtual void HandleTestCaseStarting(MessageHandlerArgs`1<ITestCaseStarting> args);
    protected virtual void HandleTestClassCleanupFailure(MessageHandlerArgs`1<ITestClassCleanupFailure> args);
    protected virtual void HandleTestClassFinished(MessageHandlerArgs`1<ITestClassFinished> args);
    protected virtual void HandleTestClassStarting(MessageHandlerArgs`1<ITestClassStarting> args);
    protected virtual void HandleTestCleanupFailure(MessageHandlerArgs`1<ITestCleanupFailure> args);
    protected virtual void HandleTestCollectionCleanupFailure(MessageHandlerArgs`1<ITestCollectionCleanupFailure> args);
    protected virtual void HandleTestCollectionFinished(MessageHandlerArgs`1<ITestCollectionFinished> args);
    protected virtual void HandleTestCollectionStarting(MessageHandlerArgs`1<ITestCollectionStarting> args);
    protected virtual void HandleTestExecutionSummaries(MessageHandlerArgs`1<TestExecutionSummaries> args);
    protected virtual void HandleTestFailed(MessageHandlerArgs`1<ITestFailed> args);
    protected virtual void HandleTestFinished(MessageHandlerArgs`1<ITestFinished> args);
    protected virtual void HandleTestMethodCleanupFailure(MessageHandlerArgs`1<ITestMethodCleanupFailure> args);
    protected virtual void HandleTestMethodFinished(MessageHandlerArgs`1<ITestMethodFinished> args);
    protected virtual void HandleTestMethodStarting(MessageHandlerArgs`1<ITestMethodStarting> args);
    protected virtual void HandleTestOutput(MessageHandlerArgs`1<ITestOutput> args);
    protected virtual void HandleTestPassed(MessageHandlerArgs`1<ITestPassed> args);
    protected virtual void HandleTestSkipped(MessageHandlerArgs`1<ITestSkipped> args);
    protected virtual void HandleTestStarting(MessageHandlerArgs`1<ITestStarting> args);
    public void WriteDefaultSummary(IRunnerLogger logger, TestExecutionSummaries summaries);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private ValueTuple`3<ExecutionSummary, string, string> <WriteDefaultSummary>b__51_0(ValueTuple`2<string, ExecutionSummary> summary);
}
public class Xunit.Runner.Common.DiagnosticEventSink : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<IDiagnosticMessage> DiagnosticMessageEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<IErrorMessage> ErrorMessageEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<IInternalDiagnosticMessage> InternalDiagnosticMessageEvent;
    [CompilerGeneratedAttribute]
public void add_DiagnosticMessageEvent(MessageHandler`1<IDiagnosticMessage> value);
    [CompilerGeneratedAttribute]
public void remove_DiagnosticMessageEvent(MessageHandler`1<IDiagnosticMessage> value);
    [CompilerGeneratedAttribute]
public void add_ErrorMessageEvent(MessageHandler`1<IErrorMessage> value);
    [CompilerGeneratedAttribute]
public void remove_ErrorMessageEvent(MessageHandler`1<IErrorMessage> value);
    [CompilerGeneratedAttribute]
public void add_InternalDiagnosticMessageEvent(MessageHandler`1<IInternalDiagnosticMessage> value);
    [CompilerGeneratedAttribute]
public void remove_InternalDiagnosticMessageEvent(MessageHandler`1<IInternalDiagnosticMessage> value);
    [NullableContextAttribute("1")]
public sealed virtual bool OnMessage(IMessageSinkMessage message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("diagnostic")]
public class Xunit.Runner.Common.DiagnosticMessage : MessageSinkMessage {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [RequiredMemberAttribute]
public string Message { get; public set; }
    [SetsRequiredMembersAttribute]
public DiagnosticMessage(string message);
    [SetsRequiredMembersAttribute]
public DiagnosticMessage(string messageFormat, object arg0);
    [NullableContextAttribute("2")]
[SetsRequiredMembersAttribute]
public DiagnosticMessage(string messageFormat, object arg0, object arg1);
    [NullableContextAttribute("2")]
[SetsRequiredMembersAttribute]
public DiagnosticMessage(string messageFormat, object arg0, object arg1, object arg2);
    [SetsRequiredMembersAttribute]
public DiagnosticMessage(string messageFormat, Object[] args);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("discovery-complete")]
public class Xunit.Runner.Common.DiscoveryComplete : TestAssemblyMessage {
    [CompilerGeneratedAttribute]
private int <TestCasesToRun>k__BackingField;
    [RequiredMemberAttribute]
public int TestCasesToRun { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestCasesToRun();
    [CompilerGeneratedAttribute]
public void set_TestCasesToRun(int value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public class Xunit.Runner.Common.DiscoveryEventSink : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<IDiscoveryComplete> DiscoveryCompleteEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<IDiscoveryStarting> DiscoveryStartingEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestCaseDiscovered> TestCaseDiscoveredEvent;
    [CompilerGeneratedAttribute]
public void add_DiscoveryCompleteEvent(MessageHandler`1<IDiscoveryComplete> value);
    [CompilerGeneratedAttribute]
public void remove_DiscoveryCompleteEvent(MessageHandler`1<IDiscoveryComplete> value);
    [CompilerGeneratedAttribute]
public void add_DiscoveryStartingEvent(MessageHandler`1<IDiscoveryStarting> value);
    [CompilerGeneratedAttribute]
public void remove_DiscoveryStartingEvent(MessageHandler`1<IDiscoveryStarting> value);
    [CompilerGeneratedAttribute]
public void add_TestCaseDiscoveredEvent(MessageHandler`1<ITestCaseDiscovered> value);
    [CompilerGeneratedAttribute]
public void remove_TestCaseDiscoveredEvent(MessageHandler`1<ITestCaseDiscovered> value);
    [NullableContextAttribute("1")]
public sealed virtual bool OnMessage(IMessageSinkMessage message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("discovery-starting")]
public class Xunit.Runner.Common.DiscoveryStarting : TestAssemblyMessage {
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyPath>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ConfigFilePath>k__BackingField;
    [RequiredMemberAttribute]
public string AssemblyName { get; public set; }
    [RequiredMemberAttribute]
public string AssemblyPath { get; public set; }
    [NullableAttribute("2")]
[RequiredMemberAttribute]
public string ConfigFilePath { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AssemblyPath();
    [CompilerGeneratedAttribute]
public void set_AssemblyPath(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_ConfigFilePath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ConfigFilePath(string value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("error")]
public class Xunit.Runner.Common.ErrorMessage : MessageSinkMessage {
    [CompilerGeneratedAttribute]
private Int32[] <ExceptionParentIndices>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <ExceptionTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Messages>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <StackTraces>k__BackingField;
    [RequiredMemberAttribute]
public Int32[] ExceptionParentIndices { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] ExceptionTypes { get; public set; }
    [RequiredMemberAttribute]
public String[] Messages { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] StackTraces { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Int32[] get_ExceptionParentIndices();
    [CompilerGeneratedAttribute]
public void set_ExceptionParentIndices(Int32[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_ExceptionTypes();
    [CompilerGeneratedAttribute]
public void set_ExceptionTypes(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Messages();
    [CompilerGeneratedAttribute]
public void set_Messages(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_StackTraces();
    [CompilerGeneratedAttribute]
public void set_StackTraces(String[] value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    public static IErrorMessage FromException(Exception ex);
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
public class Xunit.Runner.Common.ExecutionEventSink : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<IAfterTestFinished> AfterTestFinishedEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<IAfterTestStarting> AfterTestStartingEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<IBeforeTestFinished> BeforeTestFinishedEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<IBeforeTestStarting> BeforeTestStartingEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestAssemblyCleanupFailure> TestAssemblyCleanupFailureEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestAssemblyFinished> TestAssemblyFinishedEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestAssemblyStarting> TestAssemblyStartingEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestCaseCleanupFailure> TestCaseCleanupFailureEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestCaseFinished> TestCaseFinishedEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestCaseStarting> TestCaseStartingEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestClassCleanupFailure> TestClassCleanupFailureEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestClassConstructionFinished> TestClassConstructionFinishedEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestClassConstructionStarting> TestClassConstructionStartingEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestClassDisposeFinished> TestClassDisposeFinishedEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestClassDisposeStarting> TestClassDisposeStartingEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestClassFinished> TestClassFinishedEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestClassStarting> TestClassStartingEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestCleanupFailure> TestCleanupFailureEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestCollectionCleanupFailure> TestCollectionCleanupFailureEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestCollectionFinished> TestCollectionFinishedEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestCollectionStarting> TestCollectionStartingEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestFailed> TestFailedEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestFinished> TestFinishedEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestMethodCleanupFailure> TestMethodCleanupFailureEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestMethodFinished> TestMethodFinishedEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestMethodStarting> TestMethodStartingEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestNotRun> TestNotRunEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestOutput> TestOutputEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestPassed> TestPassedEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestSkipped> TestSkippedEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<ITestStarting> TestStartingEvent;
    [CompilerGeneratedAttribute]
public void add_AfterTestFinishedEvent(MessageHandler`1<IAfterTestFinished> value);
    [CompilerGeneratedAttribute]
public void remove_AfterTestFinishedEvent(MessageHandler`1<IAfterTestFinished> value);
    [CompilerGeneratedAttribute]
public void add_AfterTestStartingEvent(MessageHandler`1<IAfterTestStarting> value);
    [CompilerGeneratedAttribute]
public void remove_AfterTestStartingEvent(MessageHandler`1<IAfterTestStarting> value);
    [CompilerGeneratedAttribute]
public void add_BeforeTestFinishedEvent(MessageHandler`1<IBeforeTestFinished> value);
    [CompilerGeneratedAttribute]
public void remove_BeforeTestFinishedEvent(MessageHandler`1<IBeforeTestFinished> value);
    [CompilerGeneratedAttribute]
public void add_BeforeTestStartingEvent(MessageHandler`1<IBeforeTestStarting> value);
    [CompilerGeneratedAttribute]
public void remove_BeforeTestStartingEvent(MessageHandler`1<IBeforeTestStarting> value);
    [CompilerGeneratedAttribute]
public void add_TestAssemblyCleanupFailureEvent(MessageHandler`1<ITestAssemblyCleanupFailure> value);
    [CompilerGeneratedAttribute]
public void remove_TestAssemblyCleanupFailureEvent(MessageHandler`1<ITestAssemblyCleanupFailure> value);
    [CompilerGeneratedAttribute]
public void add_TestAssemblyFinishedEvent(MessageHandler`1<ITestAssemblyFinished> value);
    [CompilerGeneratedAttribute]
public void remove_TestAssemblyFinishedEvent(MessageHandler`1<ITestAssemblyFinished> value);
    [CompilerGeneratedAttribute]
public void add_TestAssemblyStartingEvent(MessageHandler`1<ITestAssemblyStarting> value);
    [CompilerGeneratedAttribute]
public void remove_TestAssemblyStartingEvent(MessageHandler`1<ITestAssemblyStarting> value);
    [CompilerGeneratedAttribute]
public void add_TestCaseCleanupFailureEvent(MessageHandler`1<ITestCaseCleanupFailure> value);
    [CompilerGeneratedAttribute]
public void remove_TestCaseCleanupFailureEvent(MessageHandler`1<ITestCaseCleanupFailure> value);
    [CompilerGeneratedAttribute]
public void add_TestCaseFinishedEvent(MessageHandler`1<ITestCaseFinished> value);
    [CompilerGeneratedAttribute]
public void remove_TestCaseFinishedEvent(MessageHandler`1<ITestCaseFinished> value);
    [CompilerGeneratedAttribute]
public void add_TestCaseStartingEvent(MessageHandler`1<ITestCaseStarting> value);
    [CompilerGeneratedAttribute]
public void remove_TestCaseStartingEvent(MessageHandler`1<ITestCaseStarting> value);
    [CompilerGeneratedAttribute]
public void add_TestClassCleanupFailureEvent(MessageHandler`1<ITestClassCleanupFailure> value);
    [CompilerGeneratedAttribute]
public void remove_TestClassCleanupFailureEvent(MessageHandler`1<ITestClassCleanupFailure> value);
    [CompilerGeneratedAttribute]
public void add_TestClassConstructionFinishedEvent(MessageHandler`1<ITestClassConstructionFinished> value);
    [CompilerGeneratedAttribute]
public void remove_TestClassConstructionFinishedEvent(MessageHandler`1<ITestClassConstructionFinished> value);
    [CompilerGeneratedAttribute]
public void add_TestClassConstructionStartingEvent(MessageHandler`1<ITestClassConstructionStarting> value);
    [CompilerGeneratedAttribute]
public void remove_TestClassConstructionStartingEvent(MessageHandler`1<ITestClassConstructionStarting> value);
    [CompilerGeneratedAttribute]
public void add_TestClassDisposeFinishedEvent(MessageHandler`1<ITestClassDisposeFinished> value);
    [CompilerGeneratedAttribute]
public void remove_TestClassDisposeFinishedEvent(MessageHandler`1<ITestClassDisposeFinished> value);
    [CompilerGeneratedAttribute]
public void add_TestClassDisposeStartingEvent(MessageHandler`1<ITestClassDisposeStarting> value);
    [CompilerGeneratedAttribute]
public void remove_TestClassDisposeStartingEvent(MessageHandler`1<ITestClassDisposeStarting> value);
    [CompilerGeneratedAttribute]
public void add_TestClassFinishedEvent(MessageHandler`1<ITestClassFinished> value);
    [CompilerGeneratedAttribute]
public void remove_TestClassFinishedEvent(MessageHandler`1<ITestClassFinished> value);
    [CompilerGeneratedAttribute]
public void add_TestClassStartingEvent(MessageHandler`1<ITestClassStarting> value);
    [CompilerGeneratedAttribute]
public void remove_TestClassStartingEvent(MessageHandler`1<ITestClassStarting> value);
    [CompilerGeneratedAttribute]
public void add_TestCleanupFailureEvent(MessageHandler`1<ITestCleanupFailure> value);
    [CompilerGeneratedAttribute]
public void remove_TestCleanupFailureEvent(MessageHandler`1<ITestCleanupFailure> value);
    [CompilerGeneratedAttribute]
public void add_TestCollectionCleanupFailureEvent(MessageHandler`1<ITestCollectionCleanupFailure> value);
    [CompilerGeneratedAttribute]
public void remove_TestCollectionCleanupFailureEvent(MessageHandler`1<ITestCollectionCleanupFailure> value);
    [CompilerGeneratedAttribute]
public void add_TestCollectionFinishedEvent(MessageHandler`1<ITestCollectionFinished> value);
    [CompilerGeneratedAttribute]
public void remove_TestCollectionFinishedEvent(MessageHandler`1<ITestCollectionFinished> value);
    [CompilerGeneratedAttribute]
public void add_TestCollectionStartingEvent(MessageHandler`1<ITestCollectionStarting> value);
    [CompilerGeneratedAttribute]
public void remove_TestCollectionStartingEvent(MessageHandler`1<ITestCollectionStarting> value);
    [CompilerGeneratedAttribute]
public void add_TestFailedEvent(MessageHandler`1<ITestFailed> value);
    [CompilerGeneratedAttribute]
public void remove_TestFailedEvent(MessageHandler`1<ITestFailed> value);
    [CompilerGeneratedAttribute]
public void add_TestFinishedEvent(MessageHandler`1<ITestFinished> value);
    [CompilerGeneratedAttribute]
public void remove_TestFinishedEvent(MessageHandler`1<ITestFinished> value);
    [CompilerGeneratedAttribute]
public void add_TestMethodCleanupFailureEvent(MessageHandler`1<ITestMethodCleanupFailure> value);
    [CompilerGeneratedAttribute]
public void remove_TestMethodCleanupFailureEvent(MessageHandler`1<ITestMethodCleanupFailure> value);
    [CompilerGeneratedAttribute]
public void add_TestMethodFinishedEvent(MessageHandler`1<ITestMethodFinished> value);
    [CompilerGeneratedAttribute]
public void remove_TestMethodFinishedEvent(MessageHandler`1<ITestMethodFinished> value);
    [CompilerGeneratedAttribute]
public void add_TestMethodStartingEvent(MessageHandler`1<ITestMethodStarting> value);
    [CompilerGeneratedAttribute]
public void remove_TestMethodStartingEvent(MessageHandler`1<ITestMethodStarting> value);
    [CompilerGeneratedAttribute]
public void add_TestNotRunEvent(MessageHandler`1<ITestNotRun> value);
    [CompilerGeneratedAttribute]
public void remove_TestNotRunEvent(MessageHandler`1<ITestNotRun> value);
    [CompilerGeneratedAttribute]
public void add_TestOutputEvent(MessageHandler`1<ITestOutput> value);
    [CompilerGeneratedAttribute]
public void remove_TestOutputEvent(MessageHandler`1<ITestOutput> value);
    [CompilerGeneratedAttribute]
public void add_TestPassedEvent(MessageHandler`1<ITestPassed> value);
    [CompilerGeneratedAttribute]
public void remove_TestPassedEvent(MessageHandler`1<ITestPassed> value);
    [CompilerGeneratedAttribute]
public void add_TestSkippedEvent(MessageHandler`1<ITestSkipped> value);
    [CompilerGeneratedAttribute]
public void remove_TestSkippedEvent(MessageHandler`1<ITestSkipped> value);
    [CompilerGeneratedAttribute]
public void add_TestStartingEvent(MessageHandler`1<ITestStarting> value);
    [CompilerGeneratedAttribute]
public void remove_TestStartingEvent(MessageHandler`1<ITestStarting> value);
    [NullableContextAttribute("1")]
public sealed virtual bool OnMessage(IMessageSinkMessage message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.ExecutionSink : object {
    private AppDomainOption appDomainOption;
    private XunitProjectAssembly assembly;
    private ITestFrameworkDiscoveryOptions discoveryOptions;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) errors;
    private Lazy`1<XElement> errorsElement;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, ValueTuple`2<ITestCaseMetadata, DateTimeOffset>> executingTestCases;
    private ITestFrameworkExecutionOptions executionOptions;
    private Dictionary`2<string, int> failCountsByUniqueID;
    private IMessageSink innerSink;
    private ExecutionSinkOptions options;
    private DateTimeOffset lastTestActivity;
    private MessageMetadataCache metadataCache;
    private bool shadowCopy;
    [NullableAttribute("2")]
private ManualResetEvent stopEvent;
    private bool stopRequested;
    private Dictionary`2<string, XElement> testCollectionElements;
    private ConcurrentDictionary`2<string, XElement> testResultElements;
    [CompilerGeneratedAttribute]
private ExecutionSummary <ExecutionSummary>k__BackingField;
    [CompilerGeneratedAttribute]
private ManualResetEvent <Finished>k__BackingField;
    public ExecutionSummary ExecutionSummary { get; }
    public ManualResetEvent Finished { get; }
    protected DateTimeOffset UtcNow { get; }
    public ExecutionSink(XunitProjectAssembly assembly, ITestFrameworkDiscoveryOptions discoveryOptions, ITestFrameworkExecutionOptions executionOptions, AppDomainOption appDomainOption, bool shadowCopy, IMessageSink innerSink, ExecutionSinkOptions options);
    [CompilerGeneratedAttribute]
public ExecutionSummary get_ExecutionSummary();
    [CompilerGeneratedAttribute]
public ManualResetEvent get_Finished();
    protected virtual DateTimeOffset get_UtcNow();
    private void AddError(string type, string name, IErrorMetadata errorMetadata);
    private void ConvertToRunnerMessageAndDispatch(IMessageSinkMessage message);
    private static XElement CreateFailureElement(IErrorMetadata errorMetadata);
    private XElement CreateTestResultElement(ITestResultMessage testResult, string resultText);
    public virtual void Dispose();
    private XElement GetTestCollectionElement(string testCollectionUniqueID);
    private void HandleErrorMessage(MessageHandlerArgs`1<IErrorMessage> args);
    private void HandleTestAssemblyCleanupFailure(MessageHandlerArgs`1<ITestAssemblyCleanupFailure> args);
    private void HandleTestAssemblyFinished(MessageHandlerArgs`1<ITestAssemblyFinished> args);
    private void HandleTestAssemblyStarting(MessageHandlerArgs`1<ITestAssemblyStarting> args);
    private void HandleTestCaseCleanupFailure(MessageHandlerArgs`1<ITestCaseCleanupFailure> args);
    private void HandleTestCaseFinished(MessageHandlerArgs`1<ITestCaseFinished> args);
    private void HandleTestCaseStarting(MessageHandlerArgs`1<ITestCaseStarting> args);
    private void HandleTestClassCleanupFailure(MessageHandlerArgs`1<ITestClassCleanupFailure> args);
    private void HandleTestClassFinished(MessageHandlerArgs`1<ITestClassFinished> args);
    private void HandleTestClassStarting(MessageHandlerArgs`1<ITestClassStarting> args);
    private void HandleTestCleanupFailure(MessageHandlerArgs`1<ITestCleanupFailure> args);
    private void HandleTestCollectionCleanupFailure(MessageHandlerArgs`1<ITestCollectionCleanupFailure> args);
    private void HandleTestCollectionFinished(MessageHandlerArgs`1<ITestCollectionFinished> args);
    private void HandleTestCollectionStarting(MessageHandlerArgs`1<ITestCollectionStarting> args);
    private void HandleTestFailed(MessageHandlerArgs`1<ITestFailed> args);
    private void HandleTestFinished(MessageHandlerArgs`1<ITestFinished> args);
    private void HandleTestMethodCleanupFailure(MessageHandlerArgs`1<ITestMethodCleanupFailure> args);
    private void HandleTestMethodFinished(MessageHandlerArgs`1<ITestMethodFinished> args);
    private void HandleTestMethodStarting(MessageHandlerArgs`1<ITestMethodStarting> args);
    private void HandleTestNotRun(MessageHandlerArgs`1<ITestNotRun> args);
    private void HandleTestPassed(MessageHandlerArgs`1<ITestPassed> args);
    private void HandleTestSkipped(MessageHandlerArgs`1<ITestSkipped> args);
    private void HandleTestStarting(MessageHandlerArgs`1<ITestStarting> args);
    private static IMessageSinkMessage MutateForFailSkips(IMessageSinkMessage message);
    private IMessageSinkMessage MutateForFailWarn(IMessageSinkMessage message);
    public sealed virtual bool OnMessage(IMessageSinkMessage message);
    private void SendLongRunningMessage();
    [NullableContextAttribute("2")]
private void ThreadWorker(object _);
    protected virtual bool WaitForStopEvent(int millionsecondsDelay);
    private static string XmlEscape(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.ExecutionSinkOptions : object {
    [CompilerGeneratedAttribute]
private XElement <AssemblyElement>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<bool> <CancelThunk>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageSink <DiagnosticMessageSink>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<ExecutionSummary> <FinishedCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FailSkips>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FailWarn>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<LongRunningTestsSummary> <LongRunningTestCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <LongRunningTestTime>k__BackingField;
    public XElement AssemblyElement { get; public set; }
    public Func`1<bool> CancelThunk { get; public set; }
    public IMessageSink DiagnosticMessageSink { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<ExecutionSummary> FinishedCallback { get; public set; }
    public bool FailSkips { get; public set; }
    public bool FailWarn { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<LongRunningTestsSummary> LongRunningTestCallback { get; public set; }
    public TimeSpan LongRunningTestTime { get; public set; }
    [CompilerGeneratedAttribute]
public XElement get_AssemblyElement();
    [CompilerGeneratedAttribute]
public void set_AssemblyElement(XElement value);
    [CompilerGeneratedAttribute]
public Func`1<bool> get_CancelThunk();
    [CompilerGeneratedAttribute]
public void set_CancelThunk(Func`1<bool> value);
    [CompilerGeneratedAttribute]
public IMessageSink get_DiagnosticMessageSink();
    [CompilerGeneratedAttribute]
public void set_DiagnosticMessageSink(IMessageSink value);
    [CompilerGeneratedAttribute]
public Action`1<ExecutionSummary> get_FinishedCallback();
    [CompilerGeneratedAttribute]
public void set_FinishedCallback(Action`1<ExecutionSummary> value);
    [CompilerGeneratedAttribute]
public bool get_FailSkips();
    [CompilerGeneratedAttribute]
public void set_FailSkips(bool value);
    [CompilerGeneratedAttribute]
public bool get_FailWarn();
    [CompilerGeneratedAttribute]
public void set_FailWarn(bool value);
    [CompilerGeneratedAttribute]
public Action`1<LongRunningTestsSummary> get_LongRunningTestCallback();
    [CompilerGeneratedAttribute]
public void set_LongRunningTestCallback(Action`1<LongRunningTestsSummary> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_LongRunningTestTime();
    [CompilerGeneratedAttribute]
public void set_LongRunningTestTime(TimeSpan value);
}
public class Xunit.Runner.Common.ExecutionSummary : object {
    [CompilerGeneratedAttribute]
private int <Total>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Skipped>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NotRun>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Time>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Errors>k__BackingField;
    public int Total { get; public set; }
    public int Failed { get; public set; }
    public int Skipped { get; public set; }
    public int NotRun { get; public set; }
    public decimal Time { get; public set; }
    public int Errors { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Total();
    [CompilerGeneratedAttribute]
public void set_Total(int value);
    [CompilerGeneratedAttribute]
public int get_Failed();
    [CompilerGeneratedAttribute]
public void set_Failed(int value);
    [CompilerGeneratedAttribute]
public int get_Skipped();
    [CompilerGeneratedAttribute]
public void set_Skipped(int value);
    [CompilerGeneratedAttribute]
public int get_NotRun();
    [CompilerGeneratedAttribute]
public void set_NotRun(int value);
    [CompilerGeneratedAttribute]
public decimal get_Time();
    [CompilerGeneratedAttribute]
public void set_Time(decimal value);
    [CompilerGeneratedAttribute]
public int get_Errors();
    [CompilerGeneratedAttribute]
public void set_Errors(int value);
}
[AttributeUsageAttribute("4")]
public class Xunit.Runner.Common.HiddenRunnerReporterAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("internal-diagnostic")]
public class Xunit.Runner.Common.InternalDiagnosticMessage : MessageSinkMessage {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [RequiredMemberAttribute]
public string Message { get; public set; }
    [SetsRequiredMembersAttribute]
public InternalDiagnosticMessage(string message);
    [SetsRequiredMembersAttribute]
public InternalDiagnosticMessage(string messageFormat, object arg0);
    [NullableContextAttribute("2")]
[SetsRequiredMembersAttribute]
public InternalDiagnosticMessage(string messageFormat, object arg0, object arg1);
    [NullableContextAttribute("2")]
[SetsRequiredMembersAttribute]
public InternalDiagnosticMessage(string messageFormat, object arg0, object arg1, object arg2);
    [SetsRequiredMembersAttribute]
public InternalDiagnosticMessage(string messageFormat, Object[] args);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
public interface Xunit.Runner.Common.IRunnerLogger {
    public object LockObject { get; }
    public abstract virtual object get_LockObject();
    public abstract virtual void LogMessage(StackFrameInfo stackFrame, string message);
    public abstract virtual void LogImportantMessage(StackFrameInfo stackFrame, string message);
    public abstract virtual void LogWarning(StackFrameInfo stackFrame, string message);
    public abstract virtual void LogError(StackFrameInfo stackFrame, string message);
    public abstract virtual void LogRaw(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Xunit.Runner.Common.IRunnerLoggerExtensions : object {
    [ExtensionAttribute]
public static void LogMessage(IRunnerLogger logger, string message);
    [ExtensionAttribute]
public static void LogMessage(IRunnerLogger logger, string messageFormat, Object[] args);
    [ExtensionAttribute]
public static void LogMessage(IRunnerLogger logger, StackFrameInfo stackFrame, string messageFormat, Object[] args);
    [ExtensionAttribute]
public static void LogImportantMessage(IRunnerLogger logger, string message);
    [ExtensionAttribute]
public static void LogImportantMessage(IRunnerLogger logger, string messageFormat, Object[] args);
    [ExtensionAttribute]
public static void LogImportantMessage(IRunnerLogger logger, StackFrameInfo stackFrame, string messageFormat, Object[] args);
    [ExtensionAttribute]
public static void LogWarning(IRunnerLogger logger, string message);
    [ExtensionAttribute]
public static void LogWarning(IRunnerLogger logger, string messageFormat, Object[] args);
    [ExtensionAttribute]
public static void LogWarning(IRunnerLogger logger, StackFrameInfo stackFrame, string messageFormat, Object[] args);
    [ExtensionAttribute]
public static void LogError(IRunnerLogger logger, string message);
    [ExtensionAttribute]
public static void LogError(IRunnerLogger logger, string messageFormat, Object[] args);
    [ExtensionAttribute]
public static void LogError(IRunnerLogger logger, StackFrameInfo stackFrame, string messageFormat, Object[] args);
    [ExtensionAttribute]
public static void LogRaw(IRunnerLogger logger, string messageFormat, Object[] args);
}
[NullableContextAttribute("1")]
public interface Xunit.Runner.Common.IRunnerReporter {
    public string Description { get; }
    public bool ForceNoLogo { get; }
    public bool IsEnvironmentallyEnabled { get; }
    [NullableAttribute("2")]
public string RunnerSwitch { get; }
    public abstract virtual string get_Description();
    public abstract virtual bool get_ForceNoLogo();
    public abstract virtual bool get_IsEnvironmentallyEnabled();
    [NullableContextAttribute("2")]
public abstract virtual string get_RunnerSwitch();
    public abstract virtual ValueTask`1<IRunnerReporterMessageHandler> CreateMessageHandler(IRunnerLogger logger, IMessageSink diagnosticMessageSink);
}
public interface Xunit.Runner.Common.IRunnerReporterMessageHandler {
}
public interface Xunit.Runner.Common.ISourceInformationProvider {
    [NullableContextAttribute("2")]
public abstract virtual ValueTuple`2<string, Nullable`1<int>> GetSourceInformation(string testClassName, string testMethodName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.JsonReporter : object {
    public string Description { get; }
    public bool ForceNoLogo { get; }
    public bool IsEnvironmentallyEnabled { get; }
    [NullableAttribute("2")]
public string RunnerSwitch { get; }
    public sealed virtual string get_Description();
    public sealed virtual bool get_ForceNoLogo();
    public sealed virtual bool get_IsEnvironmentallyEnabled();
    [NullableContextAttribute("2")]
public sealed virtual string get_RunnerSwitch();
    public sealed virtual ValueTask`1<IRunnerReporterMessageHandler> CreateMessageHandler(IRunnerLogger logger, IMessageSink diagnosticMessageSink);
}
public class Xunit.Runner.Common.JsonReporterMessageHandler : object {
    [NullableAttribute("1")]
private IRunnerLogger logger;
    [NullableContextAttribute("1")]
public JsonReporterMessageHandler(IRunnerLogger logger);
    public sealed virtual ValueTask DisposeAsync();
    [NullableContextAttribute("1")]
public sealed virtual bool OnMessage(IMessageSinkMessage message);
}
public enum Xunit.Runner.Common.ListFormat : Enum {
    public int value__;
    public static ListFormat Json;
    public static ListFormat Text;
}
public enum Xunit.Runner.Common.ListOption : Enum {
    public int value__;
    public static ListOption Classes;
    public static ListOption Discovery;
    public static ListOption Full;
    public static ListOption Methods;
    public static ListOption Tests;
    public static ListOption Traits;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.LongRunningTestsSummary : object {
    [CompilerGeneratedAttribute]
private TimeSpan <ConfiguredLongRunningTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<ITestCaseMetadata, TimeSpan> <TestCases>k__BackingField;
    public TimeSpan ConfiguredLongRunningTime { get; }
    public IDictionary`2<ITestCaseMetadata, TimeSpan> TestCases { get; }
    public LongRunningTestsSummary(TimeSpan configuredLongRunningTime, IDictionary`2<ITestCaseMetadata, TimeSpan> testCases);
    [CompilerGeneratedAttribute]
public TimeSpan get_ConfiguredLongRunningTime();
    [CompilerGeneratedAttribute]
public IDictionary`2<ITestCaseMetadata, TimeSpan> get_TestCases();
}
public class Xunit.Runner.Common.MessageHandler`1 : MulticastDelegate {
    public MessageHandler`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(MessageHandlerArgs`1<TMessage> args);
    public virtual IAsyncResult BeginInvoke(MessageHandlerArgs`1<TMessage> args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class Xunit.Runner.Common.MessageHandlerArgs : object {
    [CompilerGeneratedAttribute]
private bool <IsStopped>k__BackingField;
    public bool IsStopped { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_IsStopped();
    [CompilerGeneratedAttribute]
private void set_IsStopped(bool value);
    public void Stop();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.MessageHandlerArgs`1 : MessageHandlerArgs {
    [CompilerGeneratedAttribute]
private TMessage <Message>k__BackingField;
    public TMessage Message { get; }
    public MessageHandlerArgs`1(TMessage message);
    [CompilerGeneratedAttribute]
public TMessage get_Message();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.MessageMetadataCache : object {
    private Dictionary`2<string, object> cache;
    public void Set(ITestAssemblyStarting message);
    public void Set(ITestCaseStarting message);
    public void Set(ITestClassStarting message);
    public void Set(ITestCollectionStarting message);
    public void Set(ITestStarting message);
    public void Set(ITestMethodStarting message);
    public IAssemblyMetadata TryGetAssemblyMetadata(string assemblyUniqueID, bool remove);
    public IAssemblyMetadata TryGetAssemblyMetadata(ITestAssemblyMessage message);
    public ITestCaseMetadata TryGetTestCaseMetadata(string testCaseUniqueID, bool remove);
    public ITestCaseMetadata TryGetTestCaseMetadata(ITestCaseMessage message);
    public ITestClassMetadata TryGetClassMetadata(string testClassUniqueID, bool remove);
    public ITestClassMetadata TryGetClassMetadata(ITestClassMessage message);
    public ITestCollectionMetadata TryGetCollectionMetadata(string testCollectionUniqueID, bool remove);
    public ITestCollectionMetadata TryGetCollectionMetadata(ITestCollectionMessage message);
    public ITestMethodMetadata TryGetMethodMetadata(string testMethodUniqueID, bool remove);
    public ITestMethodMetadata TryGetMethodMetadata(ITestMethodMessage message);
    public ITestMetadata TryGetTestMetadata(string testUniqueID, bool remove);
    public ITestMetadata TryGetTestMetadata(ITestMessage message);
    public IAssemblyMetadata TryRemove(ITestAssemblyFinished message);
    public ITestCaseMetadata TryRemove(ITestCaseFinished message);
    public ITestClassMetadata TryRemove(ITestClassFinished message);
    public ITestCollectionMetadata TryRemove(ITestCollectionFinished message);
    public ITestMetadata TryRemove(ITestFinished message);
    public ITestMethodMetadata TryRemove(ITestMethodFinished message);
    [NullableContextAttribute("2")]
private object InternalGetAndRemove(string uniqueID, bool remove);
    private void InternalSet(string uniqueID, object metadata);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Xunit.Runner.Common.MessageSinkMessage : object {
    protected static IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> EmptyTraits;
    public static string UnsetStringPropertyValue;
    [NullableAttribute("2")]
private string type;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<Type, string> typeToTypeIDMappings;
    private static MessageSinkMessage();
    protected abstract virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    public sealed virtual void FromJson(IReadOnlyDictionary`2<string, object> root);
    private static void ValidateObjectState();
    protected abstract virtual void Serialize(JsonObjectSerializer serializer);
    protected static string ToDisplayString(String[] array);
    protected static string ToDisplayString(T[] array);
    public sealed virtual string ToJson();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Xunit.Runner.Common.MessageSinkMessageDeserializer : object {
    private static List`1<string> errors;
    private static Dictionary`2<string, Type> typeIdToTypeMappings;
    private static MessageSinkMessageDeserializer();
    [NullableContextAttribute("2")]
public static IMessageSinkMessage Deserialize(string serialization, IMessageSink diagnosticMessageSink);
    public static void RegisterMessageSinkMessageType(Type type);
}
public class Xunit.Runner.Common.NullSourceInformationProvider : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private static NullSourceInformationProvider <Instance>k__BackingField;
    [NullableAttribute("1")]
public static NullSourceInformationProvider Instance { get; }
    private static NullSourceInformationProvider();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static NullSourceInformationProvider get_Instance();
    public sealed virtual ValueTask DisposeAsync();
    [NullableContextAttribute("2")]
public sealed virtual ValueTuple`2<string, Nullable`1<int>> GetSourceInformation(string testClassName, string testMethodName);
}
[FlagsAttribute]
public enum Xunit.Runner.Common.ParallelismOption : Enum {
    public int value__;
    public static ParallelismOption none;
    public static ParallelismOption assemblies;
    public static ParallelismOption collections;
    public static ParallelismOption all;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.QuietReporter : object {
    public string Description { get; }
    public bool ForceNoLogo { get; }
    public bool IsEnvironmentallyEnabled { get; }
    public string RunnerSwitch { get; }
    public sealed virtual string get_Description();
    public sealed virtual bool get_ForceNoLogo();
    public sealed virtual bool get_IsEnvironmentallyEnabled();
    public sealed virtual string get_RunnerSwitch();
    public sealed virtual ValueTask`1<IRunnerReporterMessageHandler> CreateMessageHandler(IRunnerLogger logger, IMessageSink diagnosticMessageSink);
}
public class Xunit.Runner.Common.QuietReporterMessageHandler : DefaultRunnerReporterMessageHandler {
    [NullableContextAttribute("1")]
public QuietReporterMessageHandler(IRunnerLogger logger);
}
public class Xunit.Runner.Common.RunnerEventSink : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<TestAssemblyDiscoveryFinished> TestAssemblyDiscoveryFinishedEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<TestAssemblyDiscoveryStarting> TestAssemblyDiscoveryStartingEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<TestAssemblyExecutionFinished> TestAssemblyExecutionFinishedEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<TestAssemblyExecutionStarting> TestAssemblyExecutionStartingEvent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MessageHandler`1<TestExecutionSummaries> TestExecutionSummariesEvent;
    [CompilerGeneratedAttribute]
public void add_TestAssemblyDiscoveryFinishedEvent(MessageHandler`1<TestAssemblyDiscoveryFinished> value);
    [CompilerGeneratedAttribute]
public void remove_TestAssemblyDiscoveryFinishedEvent(MessageHandler`1<TestAssemblyDiscoveryFinished> value);
    [CompilerGeneratedAttribute]
public void add_TestAssemblyDiscoveryStartingEvent(MessageHandler`1<TestAssemblyDiscoveryStarting> value);
    [CompilerGeneratedAttribute]
public void remove_TestAssemblyDiscoveryStartingEvent(MessageHandler`1<TestAssemblyDiscoveryStarting> value);
    [CompilerGeneratedAttribute]
public void add_TestAssemblyExecutionFinishedEvent(MessageHandler`1<TestAssemblyExecutionFinished> value);
    [CompilerGeneratedAttribute]
public void remove_TestAssemblyExecutionFinishedEvent(MessageHandler`1<TestAssemblyExecutionFinished> value);
    [CompilerGeneratedAttribute]
public void add_TestAssemblyExecutionStartingEvent(MessageHandler`1<TestAssemblyExecutionStarting> value);
    [CompilerGeneratedAttribute]
public void remove_TestAssemblyExecutionStartingEvent(MessageHandler`1<TestAssemblyExecutionStarting> value);
    [CompilerGeneratedAttribute]
public void add_TestExecutionSummariesEvent(MessageHandler`1<TestExecutionSummaries> value);
    [CompilerGeneratedAttribute]
public void remove_TestExecutionSummariesEvent(MessageHandler`1<TestExecutionSummaries> value);
    [NullableContextAttribute("1")]
public sealed virtual bool OnMessage(IMessageSinkMessage message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Xunit.Runner.Common.RunnerReporterUtility : object {
    [CompilerGeneratedAttribute]
private static IReadOnlyList`1<IRunnerReporter> <EmbeddedReporters>k__BackingField;
    public static IReadOnlyList`1<IRunnerReporter> EmbeddedReporters { get; }
    private static RunnerReporterUtility();
    [CompilerGeneratedAttribute]
public static IReadOnlyList`1<IRunnerReporter> get_EmbeddedReporters();
    public static List`1<IRunnerReporter> GetAvailableRunnerReporters(string folder, bool includeEmbeddedReporters, List`1& messages);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.SilentReporter : object {
    public string Description { get; }
    public bool ForceNoLogo { get; }
    public bool IsEnvironmentallyEnabled { get; }
    public string RunnerSwitch { get; }
    public sealed virtual string get_Description();
    public sealed virtual bool get_ForceNoLogo();
    public sealed virtual bool get_IsEnvironmentallyEnabled();
    public sealed virtual string get_RunnerSwitch();
    public sealed virtual ValueTask`1<IRunnerReporterMessageHandler> CreateMessageHandler(IRunnerLogger logger, IMessageSink diagnosticMessageSink);
}
public class Xunit.Runner.Common.SilentReporterMessageHandler : object {
    public sealed virtual ValueTask DisposeAsync();
    [NullableContextAttribute("1")]
public sealed virtual bool OnMessage(IMessageSinkMessage message);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Xunit.Runner.Common.StackFrameInfo : ValueType {
    [NullableAttribute("1")]
private static Regex stackFrameRegex;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    public static StackFrameInfo None;
    public string FileName { get; }
    public bool IsEmpty { get; }
    public int LineNumber { get; }
    public StackFrameInfo(string fileName, int lineNumber);
    private static StackFrameInfo();
    [CompilerGeneratedAttribute]
public string get_FileName();
    public bool get_IsEmpty();
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    public static StackFrameInfo FromErrorMetadata(IErrorMetadata errorMetadata);
    [NullableContextAttribute("1")]
private static Regex GetStackFrameRegex();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class Xunit.Runner.Common.StackFrameTransformer : object {
    [NullableAttribute("1")]
private static Regex regex;
    private static StackFrameTransformer();
    public static string TransformFrame(string stackFrame, string defaultDirectory);
    public static string TransformStack(string stack, string defaultDirectory);
}
public enum Xunit.Runner.Common.TargetFrameworkIdentifier : Enum {
    public int value__;
    public static TargetFrameworkIdentifier UnknownTargetFramework;
    public static TargetFrameworkIdentifier DotNetFramework;
    public static TargetFrameworkIdentifier DotNetCore;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.TeamCityReporter : object {
    public string Description { get; }
    public bool ForceNoLogo { get; }
    public bool IsEnvironmentallyEnabled { get; }
    public string RunnerSwitch { get; }
    public sealed virtual string get_Description();
    public sealed virtual bool get_ForceNoLogo();
    public sealed virtual bool get_IsEnvironmentallyEnabled();
    public sealed virtual string get_RunnerSwitch();
    public sealed virtual ValueTask`1<IRunnerReporterMessageHandler> CreateMessageHandler(IRunnerLogger logger, IMessageSink diagnosticMessageSink);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.TeamCityReporterMessageHandler : DefaultRunnerReporterMessageHandler {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <rootFlowId>P;
    private MessageMetadataCache metadataCache;
    protected DateTimeOffset UtcNow { get; }
    public TeamCityReporterMessageHandler(IRunnerLogger logger, string rootFlowId);
    protected virtual DateTimeOffset get_UtcNow();
    protected virtual void HandleErrorMessage(MessageHandlerArgs`1<IErrorMessage> args);
    protected virtual void HandleTestAssemblyCleanupFailure(MessageHandlerArgs`1<ITestAssemblyCleanupFailure> args);
    protected virtual void HandleTestAssemblyFinished(MessageHandlerArgs`1<ITestAssemblyFinished> args);
    protected virtual void HandleTestAssemblyStarting(MessageHandlerArgs`1<ITestAssemblyStarting> args);
    protected virtual void HandleTestCaseCleanupFailure(MessageHandlerArgs`1<ITestCaseCleanupFailure> args);
    protected virtual void HandleTestCaseFinished(MessageHandlerArgs`1<ITestCaseFinished> args);
    protected virtual void HandleTestCaseStarting(MessageHandlerArgs`1<ITestCaseStarting> args);
    protected virtual void HandleTestClassCleanupFailure(MessageHandlerArgs`1<ITestClassCleanupFailure> args);
    protected virtual void HandleTestClassFinished(MessageHandlerArgs`1<ITestClassFinished> args);
    protected virtual void HandleTestClassStarting(MessageHandlerArgs`1<ITestClassStarting> args);
    protected virtual void HandleTestCollectionCleanupFailure(MessageHandlerArgs`1<ITestCollectionCleanupFailure> args);
    protected virtual void HandleTestCollectionFinished(MessageHandlerArgs`1<ITestCollectionFinished> args);
    protected virtual void HandleTestCollectionStarting(MessageHandlerArgs`1<ITestCollectionStarting> args);
    protected virtual void HandleTestCleanupFailure(MessageHandlerArgs`1<ITestCleanupFailure> args);
    protected virtual void HandleTestFailed(MessageHandlerArgs`1<ITestFailed> args);
    protected virtual void HandleTestFinished(MessageHandlerArgs`1<ITestFinished> args);
    protected virtual void HandleTestMethodCleanupFailure(MessageHandlerArgs`1<ITestMethodCleanupFailure> args);
    protected virtual void HandleTestMethodFinished(MessageHandlerArgs`1<ITestMethodFinished> args);
    protected virtual void HandleTestMethodStarting(MessageHandlerArgs`1<ITestMethodStarting> args);
    protected virtual void HandleTestSkipped(MessageHandlerArgs`1<ITestSkipped> args);
    protected virtual void HandleTestStarting(MessageHandlerArgs`1<ITestStarting> args);
    [NullableContextAttribute("2")]
public static string TeamCityEscape(string value);
    private void TeamCityLogError(IErrorMetadata errorMetadata, string messageType);
    private void TeamCityLogError(string flowId, IErrorMetadata errorMetadata, string messageTypeFormat, Object[] args);
    private void TeamCityLogMessage(string flowId, string messageType, string extraMetadataFormat, Object[] args);
    private void TeamCityLogSuiteFinished(string flowId, string name);
    private void TeamCityLogSuiteStarted(string flowId, string name, string parentFlowId);
    private string ToAssemblyName(ITestAssemblyMessage message);
    private string ToTestCaseName(ITestCaseMessage message);
    private string ToTestClassName(ITestClassMessage message);
    private string ToTestCollectionName(ITestCollectionMessage message);
    private string ToTestMethodName(ITestMethodMessage message);
    private string ToTestName(ITestMessage message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-assembly-cleanup-failure")]
public class Xunit.Runner.Common.TestAssemblyCleanupFailure : TestAssemblyMessage {
    [CompilerGeneratedAttribute]
private Int32[] <ExceptionParentIndices>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <ExceptionTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Messages>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <StackTraces>k__BackingField;
    [RequiredMemberAttribute]
public Int32[] ExceptionParentIndices { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] ExceptionTypes { get; public set; }
    [RequiredMemberAttribute]
public String[] Messages { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] StackTraces { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Int32[] get_ExceptionParentIndices();
    [CompilerGeneratedAttribute]
public void set_ExceptionParentIndices(Int32[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_ExceptionTypes();
    [CompilerGeneratedAttribute]
public void set_ExceptionTypes(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Messages();
    [CompilerGeneratedAttribute]
public void set_Messages(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_StackTraces();
    [CompilerGeneratedAttribute]
public void set_StackTraces(String[] value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    public static ITestAssemblyCleanupFailure FromException(Exception ex, string assemblyUniqueID);
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.TestAssemblyConfiguration : object {
    [CompilerGeneratedAttribute]
private Nullable`1<AppDomainSupport> <AppDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DiagnosticMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ExplicitOption> <ExplicitOption>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <FailSkips>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <FailTestsWithWarnings>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private XunitFilters <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IncludeSourceInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <InternalDiagnosticMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LongRunningTestSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxParallelThreads>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TestMethodDisplay> <MethodDisplay>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TestMethodDisplayOptions> <MethodDisplayOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ParallelAlgorithm> <ParallelAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ParallelizeAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ParallelizeTestCollections>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PreEnumerateTheories>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Seed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ShadowCopy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShadowCopyFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ShowLiveOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <StopOnFail>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SynchronousMessageReporting>k__BackingField;
    public Nullable`1<AppDomainSupport> AppDomain { get; public set; }
    public AppDomainSupport AppDomainOrDefault { get; }
    public string Culture { get; public set; }
    public Nullable`1<bool> DiagnosticMessages { get; public set; }
    public bool DiagnosticMessagesOrDefault { get; }
    public Nullable`1<ExplicitOption> ExplicitOption { get; public set; }
    public ExplicitOption ExplicitOptionOrDefault { get; }
    public Nullable`1<bool> FailSkips { get; public set; }
    public bool FailSkipsOrDefault { get; }
    public Nullable`1<bool> FailTestsWithWarnings { get; public set; }
    public bool FailTestsWithWarningsOrDefault { get; }
    [NullableAttribute("1")]
public XunitFilters Filters { get; }
    public Nullable`1<bool> IncludeSourceInformation { get; public set; }
    public bool IncludeSourceInformationOrDefault { get; }
    public Nullable`1<bool> InternalDiagnosticMessages { get; public set; }
    public bool InternalDiagnosticMessagesOrDefault { get; }
    public Nullable`1<int> LongRunningTestSeconds { get; public set; }
    public int LongRunningTestSecondsOrDefault { get; }
    public Nullable`1<int> MaxParallelThreads { get; public set; }
    public int MaxParallelThreadsOrDefault { get; }
    public Nullable`1<TestMethodDisplay> MethodDisplay { get; public set; }
    public TestMethodDisplay MethodDisplayOrDefault { get; }
    public Nullable`1<TestMethodDisplayOptions> MethodDisplayOptions { get; public set; }
    public TestMethodDisplayOptions MethodDisplayOptionsOrDefault { get; }
    public Nullable`1<ParallelAlgorithm> ParallelAlgorithm { get; public set; }
    public ParallelAlgorithm ParallelAlgorithmOrDefault { get; }
    public Nullable`1<bool> ParallelizeAssembly { get; public set; }
    public bool ParallelizeAssemblyOrDefault { get; }
    public Nullable`1<bool> ParallelizeTestCollections { get; public set; }
    public bool ParallelizeTestCollectionsOrDefault { get; }
    public Nullable`1<bool> PreEnumerateTheories { get; public set; }
    public Nullable`1<int> Seed { get; public set; }
    public Nullable`1<bool> ShadowCopy { get; public set; }
    public bool ShadowCopyOrDefault { get; }
    public string ShadowCopyFolder { get; public set; }
    public Nullable`1<bool> ShowLiveOutput { get; public set; }
    public bool ShowLiveOutputOrDefault { get; }
    public Nullable`1<bool> StopOnFail { get; public set; }
    public bool StopOnFailOrDefault { get; }
    public Nullable`1<bool> SynchronousMessageReporting { get; public set; }
    public bool SynchronousMessageReportingOrDefault { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<AppDomainSupport> get_AppDomain();
    [CompilerGeneratedAttribute]
public void set_AppDomain(Nullable`1<AppDomainSupport> value);
    public AppDomainSupport get_AppDomainOrDefault();
    [CompilerGeneratedAttribute]
public string get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DiagnosticMessages();
    [CompilerGeneratedAttribute]
public void set_DiagnosticMessages(Nullable`1<bool> value);
    public bool get_DiagnosticMessagesOrDefault();
    [CompilerGeneratedAttribute]
public Nullable`1<ExplicitOption> get_ExplicitOption();
    [CompilerGeneratedAttribute]
public void set_ExplicitOption(Nullable`1<ExplicitOption> value);
    public ExplicitOption get_ExplicitOptionOrDefault();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_FailSkips();
    [CompilerGeneratedAttribute]
public void set_FailSkips(Nullable`1<bool> value);
    public bool get_FailSkipsOrDefault();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_FailTestsWithWarnings();
    [CompilerGeneratedAttribute]
public void set_FailTestsWithWarnings(Nullable`1<bool> value);
    public bool get_FailTestsWithWarningsOrDefault();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public XunitFilters get_Filters();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IncludeSourceInformation();
    [CompilerGeneratedAttribute]
public void set_IncludeSourceInformation(Nullable`1<bool> value);
    public bool get_IncludeSourceInformationOrDefault();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_InternalDiagnosticMessages();
    [CompilerGeneratedAttribute]
public void set_InternalDiagnosticMessages(Nullable`1<bool> value);
    public bool get_InternalDiagnosticMessagesOrDefault();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LongRunningTestSeconds();
    [CompilerGeneratedAttribute]
public void set_LongRunningTestSeconds(Nullable`1<int> value);
    public int get_LongRunningTestSecondsOrDefault();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxParallelThreads();
    [CompilerGeneratedAttribute]
public void set_MaxParallelThreads(Nullable`1<int> value);
    public int get_MaxParallelThreadsOrDefault();
    [CompilerGeneratedAttribute]
public Nullable`1<TestMethodDisplay> get_MethodDisplay();
    [CompilerGeneratedAttribute]
public void set_MethodDisplay(Nullable`1<TestMethodDisplay> value);
    public TestMethodDisplay get_MethodDisplayOrDefault();
    [CompilerGeneratedAttribute]
public Nullable`1<TestMethodDisplayOptions> get_MethodDisplayOptions();
    [CompilerGeneratedAttribute]
public void set_MethodDisplayOptions(Nullable`1<TestMethodDisplayOptions> value);
    public TestMethodDisplayOptions get_MethodDisplayOptionsOrDefault();
    [CompilerGeneratedAttribute]
public Nullable`1<ParallelAlgorithm> get_ParallelAlgorithm();
    [CompilerGeneratedAttribute]
public void set_ParallelAlgorithm(Nullable`1<ParallelAlgorithm> value);
    public ParallelAlgorithm get_ParallelAlgorithmOrDefault();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ParallelizeAssembly();
    [CompilerGeneratedAttribute]
public void set_ParallelizeAssembly(Nullable`1<bool> value);
    public bool get_ParallelizeAssemblyOrDefault();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ParallelizeTestCollections();
    [CompilerGeneratedAttribute]
public void set_ParallelizeTestCollections(Nullable`1<bool> value);
    public bool get_ParallelizeTestCollectionsOrDefault();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PreEnumerateTheories();
    [CompilerGeneratedAttribute]
public void set_PreEnumerateTheories(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Seed();
    [CompilerGeneratedAttribute]
public void set_Seed(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ShadowCopy();
    [CompilerGeneratedAttribute]
public void set_ShadowCopy(Nullable`1<bool> value);
    public bool get_ShadowCopyOrDefault();
    [CompilerGeneratedAttribute]
public string get_ShadowCopyFolder();
    [CompilerGeneratedAttribute]
public void set_ShadowCopyFolder(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ShowLiveOutput();
    [CompilerGeneratedAttribute]
public void set_ShowLiveOutput(Nullable`1<bool> value);
    public bool get_ShowLiveOutputOrDefault();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_StopOnFail();
    [CompilerGeneratedAttribute]
public void set_StopOnFail(Nullable`1<bool> value);
    public bool get_StopOnFailOrDefault();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SynchronousMessageReporting();
    [CompilerGeneratedAttribute]
public void set_SynchronousMessageReporting(Nullable`1<bool> value);
    public bool get_SynchronousMessageReportingOrDefault();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
public class Xunit.Runner.Common.TestAssemblyDiscoveryFinished : object {
    [NullableAttribute("2")]
private XunitProjectAssembly assembly;
    [NullableAttribute("2")]
private ITestFrameworkDiscoveryOptions discoveryOptions;
    [CompilerGeneratedAttribute]
private int <TestCasesToRun>k__BackingField;
    [RequiredMemberAttribute]
public XunitProjectAssembly Assembly { get; public set; }
    [RequiredMemberAttribute]
public ITestFrameworkDiscoveryOptions DiscoveryOptions { get; public set; }
    public int TestCasesToRun { get; public set; }
    public XunitProjectAssembly get_Assembly();
    public void set_Assembly(XunitProjectAssembly value);
    public ITestFrameworkDiscoveryOptions get_DiscoveryOptions();
    public void set_DiscoveryOptions(ITestFrameworkDiscoveryOptions value);
    [CompilerGeneratedAttribute]
public int get_TestCasesToRun();
    [CompilerGeneratedAttribute]
public void set_TestCasesToRun(int value);
    public sealed virtual string ToJson();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
public class Xunit.Runner.Common.TestAssemblyDiscoveryStarting : object {
    private Nullable`1<AppDomainOption> appDomain;
    [NullableAttribute("2")]
private XunitProjectAssembly assembly;
    [NullableAttribute("2")]
private ITestFrameworkDiscoveryOptions discoveryOptions;
    [CompilerGeneratedAttribute]
private bool <ShadowCopy>k__BackingField;
    [RequiredMemberAttribute]
public AppDomainOption AppDomain { get; public set; }
    [RequiredMemberAttribute]
public XunitProjectAssembly Assembly { get; public set; }
    [RequiredMemberAttribute]
public ITestFrameworkDiscoveryOptions DiscoveryOptions { get; public set; }
    [RequiredMemberAttribute]
public bool ShadowCopy { get; public set; }
    public AppDomainOption get_AppDomain();
    public void set_AppDomain(AppDomainOption value);
    public XunitProjectAssembly get_Assembly();
    public void set_Assembly(XunitProjectAssembly value);
    public ITestFrameworkDiscoveryOptions get_DiscoveryOptions();
    public void set_DiscoveryOptions(ITestFrameworkDiscoveryOptions value);
    [CompilerGeneratedAttribute]
public bool get_ShadowCopy();
    [CompilerGeneratedAttribute]
public void set_ShadowCopy(bool value);
    public sealed virtual string ToJson();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
public class Xunit.Runner.Common.TestAssemblyExecutionFinished : object {
    [NullableAttribute("2")]
private XunitProjectAssembly assembly;
    [NullableAttribute("2")]
private ITestFrameworkExecutionOptions executionOptions;
    [NullableAttribute("2")]
private ExecutionSummary executionSummary;
    [RequiredMemberAttribute]
public XunitProjectAssembly Assembly { get; public set; }
    [RequiredMemberAttribute]
public ITestFrameworkExecutionOptions ExecutionOptions { get; public set; }
    [RequiredMemberAttribute]
public ExecutionSummary ExecutionSummary { get; public set; }
    public XunitProjectAssembly get_Assembly();
    public void set_Assembly(XunitProjectAssembly value);
    public ITestFrameworkExecutionOptions get_ExecutionOptions();
    public void set_ExecutionOptions(ITestFrameworkExecutionOptions value);
    public ExecutionSummary get_ExecutionSummary();
    public void set_ExecutionSummary(ExecutionSummary value);
    public sealed virtual string ToJson();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
public class Xunit.Runner.Common.TestAssemblyExecutionStarting : object {
    [NullableAttribute("2")]
private XunitProjectAssembly assembly;
    [NullableAttribute("2")]
private ITestFrameworkExecutionOptions executionOptions;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Seed>k__BackingField;
    [RequiredMemberAttribute]
public XunitProjectAssembly Assembly { get; public set; }
    [RequiredMemberAttribute]
public ITestFrameworkExecutionOptions ExecutionOptions { get; public set; }
    [RequiredMemberAttribute]
public Nullable`1<int> Seed { get; public set; }
    public XunitProjectAssembly get_Assembly();
    public void set_Assembly(XunitProjectAssembly value);
    public ITestFrameworkExecutionOptions get_ExecutionOptions();
    public void set_ExecutionOptions(ITestFrameworkExecutionOptions value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Seed();
    [CompilerGeneratedAttribute]
public void set_Seed(Nullable`1<int> value);
    public sealed virtual string ToJson();
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-assembly-finished")]
public class Xunit.Runner.Common.TestAssemblyFinished : TestAssemblyMessage {
    [CompilerGeneratedAttribute]
private decimal <ExecutionTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <FinishTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsNotRun>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsSkipped>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsTotal>k__BackingField;
    [RequiredMemberAttribute]
public decimal ExecutionTime { get; public set; }
    [RequiredMemberAttribute]
public DateTimeOffset FinishTime { get; public set; }
    [RequiredMemberAttribute]
public int TestsFailed { get; public set; }
    [RequiredMemberAttribute]
public int TestsNotRun { get; public set; }
    [RequiredMemberAttribute]
public int TestsSkipped { get; public set; }
    [RequiredMemberAttribute]
public int TestsTotal { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_ExecutionTime();
    [CompilerGeneratedAttribute]
public void set_ExecutionTime(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_FinishTime();
    [CompilerGeneratedAttribute]
public void set_FinishTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsFailed();
    [CompilerGeneratedAttribute]
public void set_TestsFailed(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsNotRun();
    [CompilerGeneratedAttribute]
public void set_TestsNotRun(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsSkipped();
    [CompilerGeneratedAttribute]
public void set_TestsSkipped(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsTotal();
    [CompilerGeneratedAttribute]
public void set_TestsTotal(int value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
public abstract class Xunit.Runner.Common.TestAssemblyMessage : MessageSinkMessage {
    [CompilerGeneratedAttribute]
private string <AssemblyUniqueID>k__BackingField;
    [RequiredMemberAttribute]
public string AssemblyUniqueID { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_AssemblyUniqueID();
    [CompilerGeneratedAttribute]
public void set_AssemblyUniqueID(string value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-assembly-starting")]
public class Xunit.Runner.Common.TestAssemblyStarting : TestAssemblyMessage {
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyPath>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ConfigFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Seed>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTime>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestFrameworkDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> <Traits>k__BackingField;
    [RequiredMemberAttribute]
public string AssemblyName { get; public set; }
    [RequiredMemberAttribute]
public string AssemblyPath { get; public set; }
    [NullableAttribute("2")]
[RequiredMemberAttribute]
public string ConfigFilePath { get; public set; }
    [RequiredMemberAttribute]
public Nullable`1<int> Seed { get; public set; }
    [RequiredMemberAttribute]
public DateTimeOffset StartTime { get; public set; }
    [NullableAttribute("2")]
[RequiredMemberAttribute]
public string TargetFramework { get; public set; }
    [RequiredMemberAttribute]
public string TestEnvironment { get; public set; }
    [RequiredMemberAttribute]
public string TestFrameworkDisplayName { get; public set; }
    [RequiredMemberAttribute]
public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> Traits { get; public set; }
    private string Xunit.Sdk.IAssemblyMetadata.UniqueID { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AssemblyPath();
    [CompilerGeneratedAttribute]
public void set_AssemblyPath(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_ConfigFilePath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ConfigFilePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_Seed();
    [CompilerGeneratedAttribute]
public void set_Seed(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(DateTimeOffset value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_TargetFramework();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestEnvironment();
    [CompilerGeneratedAttribute]
public void set_TestEnvironment(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestFrameworkDisplayName();
    [CompilerGeneratedAttribute]
public void set_TestFrameworkDisplayName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> get_Traits();
    [CompilerGeneratedAttribute]
public void set_Traits(IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    private sealed virtual override string Xunit.Sdk.IAssemblyMetadata.get_UniqueID();
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-case-cleanup-failure")]
public class Xunit.Runner.Common.TestCaseCleanupFailure : TestCaseMessage {
    [CompilerGeneratedAttribute]
private Int32[] <ExceptionParentIndices>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <ExceptionTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Messages>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <StackTraces>k__BackingField;
    [RequiredMemberAttribute]
public Int32[] ExceptionParentIndices { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] ExceptionTypes { get; public set; }
    [RequiredMemberAttribute]
public String[] Messages { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] StackTraces { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Int32[] get_ExceptionParentIndices();
    [CompilerGeneratedAttribute]
public void set_ExceptionParentIndices(Int32[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_ExceptionTypes();
    [CompilerGeneratedAttribute]
public void set_ExceptionTypes(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Messages();
    [CompilerGeneratedAttribute]
public void set_Messages(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_StackTraces();
    [CompilerGeneratedAttribute]
public void set_StackTraces(String[] value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    public static ITestCaseCleanupFailure FromException(Exception ex, string assemblyUniqueID, string testCollectionUniqueID, string testClassUniqueID, string testMethodUniqueID, string testCaseUniqueID);
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-case-discovered")]
public class Xunit.Runner.Common.TestCaseDiscovered : TestCaseMessage {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Serialization>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SkipReason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SourceLineNumber>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <TestCaseDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TestClassMetadataToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestClassName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestClassNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TestMethodMetadataToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestMethodName>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> <Traits>k__BackingField;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string Serialization { get; public set; }
    [RequiredMemberAttribute]
public string SkipReason { get; public set; }
    [RequiredMemberAttribute]
public string SourceFilePath { get; public set; }
    [RequiredMemberAttribute]
public Nullable`1<int> SourceLineNumber { get; public set; }
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string TestCaseDisplayName { get; public set; }
    [RequiredMemberAttribute]
public Nullable`1<int> TestClassMetadataToken { get; public set; }
    [RequiredMemberAttribute]
public string TestClassName { get; public set; }
    [RequiredMemberAttribute]
public string TestClassNamespace { get; public set; }
    [RequiredMemberAttribute]
public Nullable`1<int> TestMethodMetadataToken { get; public set; }
    [RequiredMemberAttribute]
public string TestMethodName { get; public set; }
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> Traits { get; public set; }
    [NullableAttribute("1")]
private string Xunit.Sdk.ITestCaseMetadata.UniqueID { get; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Serialization();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Serialization(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SkipReason();
    [CompilerGeneratedAttribute]
public void set_SkipReason(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SourceFilePath();
    [CompilerGeneratedAttribute]
public void set_SourceFilePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_SourceLineNumber();
    [CompilerGeneratedAttribute]
public void set_SourceLineNumber(Nullable`1<int> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_TestCaseDisplayName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_TestCaseDisplayName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_TestClassMetadataToken();
    [CompilerGeneratedAttribute]
public void set_TestClassMetadataToken(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestClassName();
    [CompilerGeneratedAttribute]
public void set_TestClassName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestClassNamespace();
    [CompilerGeneratedAttribute]
public void set_TestClassNamespace(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_TestMethodMetadataToken();
    [CompilerGeneratedAttribute]
public void set_TestMethodMetadataToken(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestMethodName();
    [CompilerGeneratedAttribute]
public void set_TestMethodName(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> get_Traits();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Traits(IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    [NullableContextAttribute("1")]
private sealed virtual override string Xunit.Sdk.ITestCaseMetadata.get_UniqueID();
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-case-finished")]
public class Xunit.Runner.Common.TestCaseFinished : TestCaseMessage {
    [CompilerGeneratedAttribute]
private decimal <ExecutionTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsNotRun>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsSkipped>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsTotal>k__BackingField;
    [RequiredMemberAttribute]
public decimal ExecutionTime { get; public set; }
    [RequiredMemberAttribute]
public int TestsFailed { get; public set; }
    [RequiredMemberAttribute]
public int TestsNotRun { get; public set; }
    [RequiredMemberAttribute]
public int TestsSkipped { get; public set; }
    [RequiredMemberAttribute]
public int TestsTotal { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_ExecutionTime();
    [CompilerGeneratedAttribute]
public void set_ExecutionTime(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsFailed();
    [CompilerGeneratedAttribute]
public void set_TestsFailed(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsNotRun();
    [CompilerGeneratedAttribute]
public void set_TestsNotRun(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsSkipped();
    [CompilerGeneratedAttribute]
public void set_TestsSkipped(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsTotal();
    [CompilerGeneratedAttribute]
public void set_TestsTotal(int value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[RequiredMemberAttribute]
public abstract class Xunit.Runner.Common.TestCaseMessage : TestMethodMessage {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <TestCaseUniqueID>k__BackingField;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string TestCaseUniqueID { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_TestCaseUniqueID();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_TestCaseUniqueID(string value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-case-starting")]
public class Xunit.Runner.Common.TestCaseStarting : TestCaseMessage {
    [CompilerGeneratedAttribute]
private string <SkipReason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SourceLineNumber>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <TestCaseDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TestClassMetadataToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestClassName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestClassNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TestMethodMetadataToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestMethodName>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> <Traits>k__BackingField;
    [RequiredMemberAttribute]
public string SkipReason { get; public set; }
    [RequiredMemberAttribute]
public string SourceFilePath { get; public set; }
    [RequiredMemberAttribute]
public Nullable`1<int> SourceLineNumber { get; public set; }
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string TestCaseDisplayName { get; public set; }
    [RequiredMemberAttribute]
public Nullable`1<int> TestClassMetadataToken { get; public set; }
    [RequiredMemberAttribute]
public string TestClassName { get; public set; }
    [RequiredMemberAttribute]
public string TestClassNamespace { get; public set; }
    [RequiredMemberAttribute]
public Nullable`1<int> TestMethodMetadataToken { get; public set; }
    [RequiredMemberAttribute]
public string TestMethodName { get; public set; }
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> Traits { get; public set; }
    [NullableAttribute("1")]
private string Xunit.Sdk.ITestCaseMetadata.UniqueID { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_SkipReason();
    [CompilerGeneratedAttribute]
public void set_SkipReason(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SourceFilePath();
    [CompilerGeneratedAttribute]
public void set_SourceFilePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_SourceLineNumber();
    [CompilerGeneratedAttribute]
public void set_SourceLineNumber(Nullable`1<int> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_TestCaseDisplayName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_TestCaseDisplayName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_TestClassMetadataToken();
    [CompilerGeneratedAttribute]
public void set_TestClassMetadataToken(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestClassName();
    [CompilerGeneratedAttribute]
public void set_TestClassName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestClassNamespace();
    [CompilerGeneratedAttribute]
public void set_TestClassNamespace(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_TestMethodMetadataToken();
    [CompilerGeneratedAttribute]
public void set_TestMethodMetadataToken(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestMethodName();
    [CompilerGeneratedAttribute]
public void set_TestMethodName(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> get_Traits();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Traits(IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    [NullableContextAttribute("1")]
private sealed virtual override string Xunit.Sdk.ITestCaseMetadata.get_UniqueID();
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-class-cleanup-failure")]
public class Xunit.Runner.Common.TestClassCleanupFailure : TestClassMessage {
    [CompilerGeneratedAttribute]
private Int32[] <ExceptionParentIndices>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <ExceptionTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Messages>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <StackTraces>k__BackingField;
    [RequiredMemberAttribute]
public Int32[] ExceptionParentIndices { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] ExceptionTypes { get; public set; }
    [RequiredMemberAttribute]
public String[] Messages { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] StackTraces { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Int32[] get_ExceptionParentIndices();
    [CompilerGeneratedAttribute]
public void set_ExceptionParentIndices(Int32[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_ExceptionTypes();
    [CompilerGeneratedAttribute]
public void set_ExceptionTypes(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Messages();
    [CompilerGeneratedAttribute]
public void set_Messages(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_StackTraces();
    [CompilerGeneratedAttribute]
public void set_StackTraces(String[] value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    public static ITestClassCleanupFailure FromException(Exception ex, string assemblyUniqueID, string testCollectionUniqueID, string testClassUniqueID);
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[JsonTypeIDAttribute("test-class-construction-finished")]
public class Xunit.Runner.Common.TestClassConstructionFinished : TestMessage {
}
[JsonTypeIDAttribute("test-class-construction-starting")]
public class Xunit.Runner.Common.TestClassConstructionStarting : TestMessage {
}
[JsonTypeIDAttribute("test-class-dispose-finished")]
public class Xunit.Runner.Common.TestClassDisposeFinished : TestMessage {
}
[JsonTypeIDAttribute("test-class-dispose-starting")]
public class Xunit.Runner.Common.TestClassDisposeStarting : TestMessage {
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-class-finished")]
public class Xunit.Runner.Common.TestClassFinished : TestClassMessage {
    [CompilerGeneratedAttribute]
private decimal <ExecutionTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsNotRun>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsSkipped>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsTotal>k__BackingField;
    [RequiredMemberAttribute]
public decimal ExecutionTime { get; public set; }
    [RequiredMemberAttribute]
public int TestsFailed { get; public set; }
    [RequiredMemberAttribute]
public int TestsNotRun { get; public set; }
    [RequiredMemberAttribute]
public int TestsSkipped { get; public set; }
    [RequiredMemberAttribute]
public int TestsTotal { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_ExecutionTime();
    [CompilerGeneratedAttribute]
public void set_ExecutionTime(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsFailed();
    [CompilerGeneratedAttribute]
public void set_TestsFailed(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsNotRun();
    [CompilerGeneratedAttribute]
public void set_TestsNotRun(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsSkipped();
    [CompilerGeneratedAttribute]
public void set_TestsSkipped(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsTotal();
    [CompilerGeneratedAttribute]
public void set_TestsTotal(int value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[RequiredMemberAttribute]
public abstract class Xunit.Runner.Common.TestClassMessage : TestCollectionMessage {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TestClassUniqueID>k__BackingField;
    [NullableAttribute("2")]
[RequiredMemberAttribute]
public string TestClassUniqueID { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_TestClassUniqueID();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_TestClassUniqueID(string value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-class-starting")]
public class Xunit.Runner.Common.TestClassStarting : TestClassMessage {
    [CompilerGeneratedAttribute]
private string <TestClassName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TestClassNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> <Traits>k__BackingField;
    [RequiredMemberAttribute]
public string TestClassName { get; public set; }
    [NullableAttribute("2")]
[RequiredMemberAttribute]
public string TestClassNamespace { get; public set; }
    [RequiredMemberAttribute]
public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> Traits { get; public set; }
    private string Xunit.Sdk.ITestClassMetadata.UniqueID { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestClassName();
    [CompilerGeneratedAttribute]
public void set_TestClassName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_TestClassNamespace();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_TestClassNamespace(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> get_Traits();
    [CompilerGeneratedAttribute]
public void set_Traits(IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    private sealed virtual override string Xunit.Sdk.ITestClassMetadata.get_UniqueID();
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-cleanup-failure")]
public class Xunit.Runner.Common.TestCleanupFailure : TestMessage {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Int32[] <ExceptionParentIndices>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <ExceptionTypes>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private String[] <Messages>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <StackTraces>k__BackingField;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public Int32[] ExceptionParentIndices { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] ExceptionTypes { get; public set; }
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public String[] Messages { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] StackTraces { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual Int32[] get_ExceptionParentIndices();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_ExceptionParentIndices(Int32[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_ExceptionTypes();
    [CompilerGeneratedAttribute]
public void set_ExceptionTypes(String[] value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual String[] get_Messages();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Messages(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_StackTraces();
    [CompilerGeneratedAttribute]
public void set_StackTraces(String[] value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    [NullableContextAttribute("1")]
public static ITestCleanupFailure FromException(Exception ex, string assemblyUniqueID, string testCollectionUniqueID, string testClassUniqueID, string testMethodUniqueID, string testCaseUniqueID, string testUniqueID);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-collection-cleanup-failure")]
public class Xunit.Runner.Common.TestCollectionCleanupFailure : TestCollectionMessage {
    [CompilerGeneratedAttribute]
private Int32[] <ExceptionParentIndices>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <ExceptionTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Messages>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <StackTraces>k__BackingField;
    [RequiredMemberAttribute]
public Int32[] ExceptionParentIndices { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] ExceptionTypes { get; public set; }
    [RequiredMemberAttribute]
public String[] Messages { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] StackTraces { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Int32[] get_ExceptionParentIndices();
    [CompilerGeneratedAttribute]
public void set_ExceptionParentIndices(Int32[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_ExceptionTypes();
    [CompilerGeneratedAttribute]
public void set_ExceptionTypes(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Messages();
    [CompilerGeneratedAttribute]
public void set_Messages(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_StackTraces();
    [CompilerGeneratedAttribute]
public void set_StackTraces(String[] value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    public static ITestCollectionCleanupFailure FromException(Exception ex, string assemblyUniqueID, string testCollectionUniqueID);
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-collection-finished")]
public class Xunit.Runner.Common.TestCollectionFinished : TestCollectionMessage {
    [CompilerGeneratedAttribute]
private decimal <ExecutionTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsNotRun>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsSkipped>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsTotal>k__BackingField;
    [RequiredMemberAttribute]
public decimal ExecutionTime { get; public set; }
    [RequiredMemberAttribute]
public int TestsFailed { get; public set; }
    [RequiredMemberAttribute]
public int TestsNotRun { get; public set; }
    [RequiredMemberAttribute]
public int TestsSkipped { get; public set; }
    [RequiredMemberAttribute]
public int TestsTotal { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_ExecutionTime();
    [CompilerGeneratedAttribute]
public void set_ExecutionTime(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsFailed();
    [CompilerGeneratedAttribute]
public void set_TestsFailed(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsNotRun();
    [CompilerGeneratedAttribute]
public void set_TestsNotRun(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsSkipped();
    [CompilerGeneratedAttribute]
public void set_TestsSkipped(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsTotal();
    [CompilerGeneratedAttribute]
public void set_TestsTotal(int value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
public abstract class Xunit.Runner.Common.TestCollectionMessage : TestAssemblyMessage {
    [CompilerGeneratedAttribute]
private string <TestCollectionUniqueID>k__BackingField;
    [RequiredMemberAttribute]
public string TestCollectionUniqueID { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestCollectionUniqueID();
    [CompilerGeneratedAttribute]
public void set_TestCollectionUniqueID(string value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-collection-starting")]
public class Xunit.Runner.Common.TestCollectionStarting : TestCollectionMessage {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TestCollectionClassName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestCollectionDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> <Traits>k__BackingField;
    [NullableAttribute("2")]
[RequiredMemberAttribute]
public string TestCollectionClassName { get; public set; }
    [RequiredMemberAttribute]
public string TestCollectionDisplayName { get; public set; }
    [RequiredMemberAttribute]
public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> Traits { get; public set; }
    private string Xunit.Sdk.ITestCollectionMetadata.UniqueID { get; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_TestCollectionClassName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_TestCollectionClassName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestCollectionDisplayName();
    [CompilerGeneratedAttribute]
public void set_TestCollectionDisplayName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> get_Traits();
    [CompilerGeneratedAttribute]
public void set_Traits(IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    private sealed virtual override string Xunit.Sdk.ITestCollectionMetadata.get_UniqueID();
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.TestDiscoverySink : object {
    private Func`1<bool> cancelThunk;
    private bool disposed;
    [CompilerGeneratedAttribute]
private DiscoveryEventSink <DiscoverySink>k__BackingField;
    [CompilerGeneratedAttribute]
private ManualResetEvent <Finished>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ITestCaseDiscovered> <TestCases>k__BackingField;
    protected DiscoveryEventSink DiscoverySink { get; }
    public ManualResetEvent Finished { get; }
    public List`1<ITestCaseDiscovered> TestCases { get; }
    [NullableContextAttribute("2")]
public TestDiscoverySink(Func`1<bool> cancelThunk);
    [CompilerGeneratedAttribute]
protected DiscoveryEventSink get_DiscoverySink();
    [CompilerGeneratedAttribute]
public ManualResetEvent get_Finished();
    [CompilerGeneratedAttribute]
public List`1<ITestCaseDiscovered> get_TestCases();
    public sealed virtual void Dispose();
    public sealed virtual bool OnMessage(IMessageSinkMessage message);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_1(MessageHandlerArgs`1<ITestCaseDiscovered> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_2(MessageHandlerArgs`1<IDiscoveryComplete> args);
}
public class Xunit.Runner.Common.TestExecutionSummaries : object {
    [CompilerGeneratedAttribute]
private TimeSpan <ElapsedClockTime>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ValueTuple`2<string, ExecutionSummary>> <SummariesByAssemblyUniqueID>k__BackingField;
    public TimeSpan ElapsedClockTime { get; public set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ValueTuple`2<string, ExecutionSummary>> SummariesByAssemblyUniqueID { get; }
    [CompilerGeneratedAttribute]
public TimeSpan get_ElapsedClockTime();
    [CompilerGeneratedAttribute]
public void set_ElapsedClockTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public List`1<ValueTuple`2<string, ExecutionSummary>> get_SummariesByAssemblyUniqueID();
    [NullableContextAttribute("1")]
public void Add(string assemblyUniqueID, ExecutionSummary summary);
    [NullableContextAttribute("1")]
public sealed virtual string ToJson();
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-failed")]
public class Xunit.Runner.Common.TestFailed : TestResultMessage {
    [CompilerGeneratedAttribute]
private FailureCause <Cause>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Int32[] <ExceptionParentIndices>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <ExceptionTypes>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private String[] <Messages>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <StackTraces>k__BackingField;
    [RequiredMemberAttribute]
public FailureCause Cause { get; public set; }
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public Int32[] ExceptionParentIndices { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] ExceptionTypes { get; public set; }
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public String[] Messages { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] StackTraces { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual FailureCause get_Cause();
    [CompilerGeneratedAttribute]
public void set_Cause(FailureCause value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual Int32[] get_ExceptionParentIndices();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_ExceptionParentIndices(Int32[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_ExceptionTypes();
    [CompilerGeneratedAttribute]
public void set_ExceptionTypes(String[] value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual String[] get_Messages();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Messages(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_StackTraces();
    [CompilerGeneratedAttribute]
public void set_StackTraces(String[] value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    [NullableContextAttribute("1")]
public static ITestFailed FromException(Exception ex, string assemblyUniqueID, string testCollectionUniqueID, string testClassUniqueID, string testMethodUniqueID, string testCaseUniqueID, string testUniqueID, decimal executionTime, string output, String[] warnings, Nullable`1<DateTimeOffset> finishTime);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-finished")]
public class Xunit.Runner.Common.TestFinished : TestResultMessage {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, TestAttachment> <Attachments>k__BackingField;
    [NullableAttribute("1")]
internal static IReadOnlyDictionary`2<string, TestAttachment> EmptyAttachments;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public IReadOnlyDictionary`2<string, TestAttachment> Attachments { get; public set; }
    private static TestFinished();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<string, TestAttachment> get_Attachments();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Attachments(IReadOnlyDictionary`2<string, TestAttachment> value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{ToDebuggerDisplay(),nq}")]
public class Xunit.Runner.Common.TestFrameworkOptions : object {
    private Dictionary`2<string, string> properties;
    [NullableContextAttribute("2")]
private TestFrameworkOptions(string optionsJson);
    public static TestFrameworkOptions Empty();
    public static ITestFrameworkDiscoveryOptions ForDiscovery(TestAssemblyConfiguration configuration);
    public static ITestFrameworkDiscoveryOptions ForDiscoveryFromSerialization(string optionsJson);
    public static ITestFrameworkExecutionOptions ForExecution(TestAssemblyConfiguration configuration);
    public static ITestFrameworkExecutionOptions ForExecutionFromSerialization(string optionsJson);
    [NullableContextAttribute("2")]
public sealed virtual TValue GetValue(string name);
    public sealed virtual void SetValue(string name, TValue value);
    private string ToDebuggerDisplay();
    public sealed virtual string ToJson();
}
[RequiredMemberAttribute]
public abstract class Xunit.Runner.Common.TestMessage : TestCaseMessage {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <TestUniqueID>k__BackingField;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string TestUniqueID { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_TestUniqueID();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_TestUniqueID(string value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.TestMessageSink : AggregateMessageSink {
    [NullableAttribute("2")]
private DiagnosticEventSink diagnostics;
    [NullableAttribute("2")]
private DiscoveryEventSink discovery;
    [NullableAttribute("2")]
private ExecutionEventSink execution;
    [NullableAttribute("2")]
private RunnerEventSink runner;
    public DiagnosticEventSink Diagnostics { get; }
    public DiscoveryEventSink Discovery { get; }
    public ExecutionEventSink Execution { get; }
    public RunnerEventSink Runner { get; }
    public DiagnosticEventSink get_Diagnostics();
    public DiscoveryEventSink get_Discovery();
    public ExecutionEventSink get_Execution();
    public RunnerEventSink get_Runner();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-method-cleanup-failure")]
public class Xunit.Runner.Common.TestMethodCleanupFailure : TestMethodMessage {
    [CompilerGeneratedAttribute]
private Int32[] <ExceptionParentIndices>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <ExceptionTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Messages>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <StackTraces>k__BackingField;
    [RequiredMemberAttribute]
public Int32[] ExceptionParentIndices { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] ExceptionTypes { get; public set; }
    [RequiredMemberAttribute]
public String[] Messages { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] StackTraces { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Int32[] get_ExceptionParentIndices();
    [CompilerGeneratedAttribute]
public void set_ExceptionParentIndices(Int32[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_ExceptionTypes();
    [CompilerGeneratedAttribute]
public void set_ExceptionTypes(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Messages();
    [CompilerGeneratedAttribute]
public void set_Messages(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_StackTraces();
    [CompilerGeneratedAttribute]
public void set_StackTraces(String[] value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    public static ITestMethodCleanupFailure FromException(Exception ex, string assemblyUniqueID, string testCollectionUniqueID, string testClassUniqueID, string testMethodUniqueID);
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-method-finished")]
public class Xunit.Runner.Common.TestMethodFinished : TestMethodMessage {
    [CompilerGeneratedAttribute]
private decimal <ExecutionTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsNotRun>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsSkipped>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsTotal>k__BackingField;
    [RequiredMemberAttribute]
public decimal ExecutionTime { get; public set; }
    [RequiredMemberAttribute]
public int TestsFailed { get; public set; }
    [RequiredMemberAttribute]
public int TestsNotRun { get; public set; }
    [RequiredMemberAttribute]
public int TestsSkipped { get; public set; }
    [RequiredMemberAttribute]
public int TestsTotal { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_ExecutionTime();
    [CompilerGeneratedAttribute]
public void set_ExecutionTime(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsFailed();
    [CompilerGeneratedAttribute]
public void set_TestsFailed(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsNotRun();
    [CompilerGeneratedAttribute]
public void set_TestsNotRun(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsSkipped();
    [CompilerGeneratedAttribute]
public void set_TestsSkipped(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TestsTotal();
    [CompilerGeneratedAttribute]
public void set_TestsTotal(int value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[RequiredMemberAttribute]
public abstract class Xunit.Runner.Common.TestMethodMessage : TestClassMessage {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TestMethodUniqueID>k__BackingField;
    [NullableAttribute("2")]
[RequiredMemberAttribute]
public string TestMethodUniqueID { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_TestMethodUniqueID();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_TestMethodUniqueID(string value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-method-starting")]
public class Xunit.Runner.Common.TestMethodStarting : TestMethodMessage {
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> <Traits>k__BackingField;
    [RequiredMemberAttribute]
public string MethodName { get; public set; }
    [RequiredMemberAttribute]
public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> Traits { get; public set; }
    private string Xunit.Sdk.ITestMethodMetadata.UniqueID { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_MethodName();
    [CompilerGeneratedAttribute]
public void set_MethodName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> get_Traits();
    [CompilerGeneratedAttribute]
public void set_Traits(IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    private sealed virtual override string Xunit.Sdk.ITestMethodMetadata.get_UniqueID();
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[JsonTypeIDAttribute("test-not-run")]
public class Xunit.Runner.Common.TestNotRun : TestResultMessage {
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-output")]
public class Xunit.Runner.Common.TestOutput : TestMessage {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string Output { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Output();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Output(string value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[JsonTypeIDAttribute("test-passed")]
public class Xunit.Runner.Common.TestPassed : TestResultMessage {
}
public class Xunit.Runner.Common.TestProjectConfiguration : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AssemblyInfo>k__BackingField;
    [NullableAttribute("1")]
public static string EnvNameNoColor;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IgnoreFailures>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Nullable`1<ValueTuple`2<ListOption, ListFormat>> <List>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoAutoReporters>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoLogo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Pause>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseAnsiColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Wait>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <WaitForDebugger>k__BackingField;
    public Nullable`1<bool> AssemblyInfo { get; public set; }
    public bool AssemblyInfoOrDefault { get; }
    public Nullable`1<bool> Debug { get; public set; }
    public bool DebugOrDefault { get; }
    public Nullable`1<bool> IgnoreFailures { get; public set; }
    public bool IgnoreFailuresOrDefault { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Nullable`1<ValueTuple`2<ListOption, ListFormat>> List { get; public set; }
    [NullableAttribute("1")]
public Dictionary`2<string, string> Output { get; }
    public Nullable`1<bool> NoAutoReporters { get; public set; }
    public bool NoAutoReportersOrDefault { get; }
    public Nullable`1<bool> NoColor { get; public set; }
    public bool NoColorOrDefault { get; }
    public Nullable`1<bool> NoLogo { get; public set; }
    public bool NoLogoOrDefault { get; }
    public Nullable`1<bool> Pause { get; public set; }
    public bool PauseOrDefault { get; }
    public Nullable`1<bool> UseAnsiColor { get; public set; }
    public bool UseAnsiColorOrDefault { get; }
    public Nullable`1<bool> Wait { get; public set; }
    public bool WaitOrDefault { get; }
    public Nullable`1<bool> WaitForDebugger { get; public set; }
    public bool WaitForDebuggerOrDefault { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AssemblyInfo();
    [CompilerGeneratedAttribute]
public void set_AssemblyInfo(Nullable`1<bool> value);
    public bool get_AssemblyInfoOrDefault();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(Nullable`1<bool> value);
    public bool get_DebugOrDefault();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IgnoreFailures();
    [CompilerGeneratedAttribute]
public void set_IgnoreFailures(Nullable`1<bool> value);
    public bool get_IgnoreFailuresOrDefault();
    [CompilerGeneratedAttribute]
public Nullable`1<ValueTuple`2<ListOption, ListFormat>> get_List();
    [CompilerGeneratedAttribute]
public void set_List(Nullable`1<ValueTuple`2<ListOption, ListFormat>> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Output();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoAutoReporters();
    [CompilerGeneratedAttribute]
public void set_NoAutoReporters(Nullable`1<bool> value);
    public bool get_NoAutoReportersOrDefault();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoColor();
    [CompilerGeneratedAttribute]
public void set_NoColor(Nullable`1<bool> value);
    public bool get_NoColorOrDefault();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoLogo();
    [CompilerGeneratedAttribute]
public void set_NoLogo(Nullable`1<bool> value);
    public bool get_NoLogoOrDefault();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Pause();
    [CompilerGeneratedAttribute]
public void set_Pause(Nullable`1<bool> value);
    public bool get_PauseOrDefault();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseAnsiColor();
    [CompilerGeneratedAttribute]
public void set_UseAnsiColor(Nullable`1<bool> value);
    public bool get_UseAnsiColorOrDefault();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Wait();
    [CompilerGeneratedAttribute]
public void set_Wait(Nullable`1<bool> value);
    public bool get_WaitOrDefault();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_WaitForDebugger();
    [CompilerGeneratedAttribute]
public void set_WaitForDebugger(Nullable`1<bool> value);
    public bool get_WaitForDebuggerOrDefault();
}
[RequiredMemberAttribute]
public abstract class Xunit.Runner.Common.TestResultMessage : TestMessage {
    [CompilerGeneratedAttribute]
private decimal <ExecutionTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <FinishTime>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <Warnings>k__BackingField;
    [RequiredMemberAttribute]
public decimal ExecutionTime { get; public set; }
    [RequiredMemberAttribute]
public DateTimeOffset FinishTime { get; public set; }
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string Output { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] Warnings { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual decimal get_ExecutionTime();
    [CompilerGeneratedAttribute]
public void set_ExecutionTime(decimal value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_FinishTime();
    [CompilerGeneratedAttribute]
public void set_FinishTime(DateTimeOffset value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Output();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Output(string value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Warnings();
    [CompilerGeneratedAttribute]
public void set_Warnings(String[] value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-skipped")]
public class Xunit.Runner.Common.TestSkipped : TestResultMessage {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string Reason { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Reason();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Reason(string value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-starting")]
public class Xunit.Runner.Common.TestStarting : TestMessage {
    [CompilerGeneratedAttribute]
private bool <Explicit>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> <Traits>k__BackingField;
    [RequiredMemberAttribute]
public bool Explicit { get; public set; }
    [RequiredMemberAttribute]
public DateTimeOffset StartTime { get; public set; }
    [RequiredMemberAttribute]
public string TestDisplayName { get; public set; }
    [RequiredMemberAttribute]
public int Timeout { get; public set; }
    [RequiredMemberAttribute]
public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> Traits { get; public set; }
    private string Xunit.Sdk.ITestMetadata.UniqueID { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Explicit();
    [CompilerGeneratedAttribute]
public void set_Explicit(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestDisplayName();
    [CompilerGeneratedAttribute]
public void set_TestDisplayName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(int value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> get_Traits();
    [CompilerGeneratedAttribute]
public void set_Traits(IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> value);
    protected virtual void Deserialize(IReadOnlyDictionary`2<string, object> root);
    private sealed virtual override string Xunit.Sdk.ITestMetadata.get_UniqueID();
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.Transform : object {
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<XElement, string> <OutputHandler>k__BackingField;
    public string ID { get; }
    public string Description { get; }
    public Action`2<XElement, string> OutputHandler { get; }
    public Transform(string id, string description, Action`2<XElement, string> outputHandler);
    [CompilerGeneratedAttribute]
public string get_ID();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public Action`2<XElement, string> get_OutputHandler();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.TransformFactory : object {
    private static TransformFactory instance;
    private List`1<Transform> availableTransforms;
    public static IReadOnlyList`1<Transform> AvailableTransforms { get; }
    private static TransformFactory();
    public static IReadOnlyList`1<Transform> get_AvailableTransforms();
    public static XElement CreateAssembliesElement();
    public static void FinishAssembliesElement(XElement assembliesElement);
    public static List`1<Action`1<XElement>> GetXmlTransformers(XunitProject project);
    private static void Handler_CTRF(XElement xml, string outputFileName);
    private static void Handler_DirectWrite(XElement xml, string outputFileName);
    private static void Handler_XslTransform(string resourceName, XElement xml, string outputFileName);
    public static void Transform(string id, XElement assembliesElement, string outputFileName);
    [CompilerGeneratedAttribute]
internal static void <Handler_CTRF>g__SerializeMessageAndTrace|8_0(JsonObjectSerializer obj, XElement failure);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.VerboseReporter : object {
    public string Description { get; }
    public bool ForceNoLogo { get; }
    public bool IsEnvironmentallyEnabled { get; }
    public string RunnerSwitch { get; }
    public sealed virtual string get_Description();
    public sealed virtual bool get_ForceNoLogo();
    public sealed virtual bool get_IsEnvironmentallyEnabled();
    public sealed virtual string get_RunnerSwitch();
    public sealed virtual ValueTask`1<IRunnerReporterMessageHandler> CreateMessageHandler(IRunnerLogger logger, IMessageSink diagnosticMessageSink);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.VerboseReporterMessageHandler : DefaultRunnerReporterMessageHandler {
    private MessageMetadataCache metadataCache;
    public VerboseReporterMessageHandler(IRunnerLogger logger);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(MessageHandlerArgs`1<ITestStarting> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_1(MessageHandlerArgs`1<ITestFinished> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_2(MessageHandlerArgs`1<ITestNotRun> args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Xunit.Runner.Common.VstsClient : object {
    private static MediaTypeWithQualityHeaderValue JsonMediaType;
    private static HttpMethod PatchHttpMethod;
    private static string UNIQUEIDKEY;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentQueue`1<IDictionary`2<string, object>> addQueue;
    private string baseUri;
    private int buildId;
    private HttpClient client;
    private ManualResetEventSlim finished;
    private IRunnerLogger logger;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) previousErrors;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) shouldExit;
    private ConcurrentDictionary`2<string, int> testToTestIdMap;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentQueue`1<IDictionary`2<string, object>> updateQueue;
    private AutoResetEvent workEvent;
    public VstsClient(IRunnerLogger logger, string baseUri, string accessToken, int buildId);
    private static VstsClient();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Xunit.Runner.Common.VstsClient/<RunLoop>d__16")]
private Task RunLoop();
    public void AddTest(IDictionary`2<string, object> request, string testUniqueID);
    public void UpdateTest(IDictionary`2<string, object> request, string testUniqueID);
    [AsyncStateMachineAttribute("Xunit.Runner.Common.VstsClient/<CreateTestRun>d__19")]
private Task`1<int> CreateTestRun();
    [AsyncStateMachineAttribute("Xunit.Runner.Common.VstsClient/<FinishTestRun>d__20")]
private Task FinishTestRun(int testRunId);
    [AsyncStateMachineAttribute("Xunit.Runner.Common.VstsClient/<SendTestResults>d__21")]
private Task SendTestResults(bool isAdd, int runId, ICollection`1<IDictionary`2<string, object>> body);
    private static string ToJson(IEnumerable`1<IDictionary`2<string, object>> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.VstsReporter : object {
    public string Description { get; }
    public bool ForceNoLogo { get; }
    public bool IsEnvironmentallyEnabled { get; }
    [NullableAttribute("2")]
public string RunnerSwitch { get; }
    public sealed virtual string get_Description();
    public sealed virtual bool get_ForceNoLogo();
    public sealed virtual bool get_IsEnvironmentallyEnabled();
    [NullableContextAttribute("2")]
public sealed virtual string get_RunnerSwitch();
    public sealed virtual ValueTask`1<IRunnerReporterMessageHandler> CreateMessageHandler(IRunnerLogger logger, IMessageSink diagnosticMessageSink);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.VstsReporterMessageHandler : DefaultRunnerReporterMessageHandler {
    private static int MaxLength;
    private string accessToken;
    private int assembliesInFlight;
    private string baseUri;
    private int buildId;
    [NullableAttribute("2")]
private VstsClient client;
    private object clientLock;
    private VstsClient Client { get; }
    public VstsReporterMessageHandler(IRunnerLogger logger, string baseUri, string accessToken, int buildId);
    private VstsClient get_Client();
    [AsyncStateMachineAttribute("Xunit.Runner.Common.VstsReporterMessageHandler/<DisposeAsync>d__10")]
public virtual ValueTask DisposeAsync();
    protected virtual void HandleTestAssemblyFinished(MessageHandlerArgs`1<ITestAssemblyFinished> args);
    protected virtual void HandleTestAssemblyStarting(MessageHandlerArgs`1<ITestAssemblyStarting> args);
    protected virtual void HandleTestStarting(MessageHandlerArgs`1<ITestStarting> args);
    protected virtual void HandleTestPassed(MessageHandlerArgs`1<ITestPassed> args);
    protected virtual void HandleTestSkipped(MessageHandlerArgs`1<ITestSkipped> args);
    protected virtual void HandleTestFailed(MessageHandlerArgs`1<ITestFailed> args);
    private void VstsAddTest(string testName, string displayName, string fileName, string testUniqueID);
    [NullableContextAttribute("2")]
private void VstsUpdateTest(string testUniqueID, string outcome, Nullable`1<long> durationMilliseconds, string errorMessage, string errorStackTrace, string stdOut);
    [NullableContextAttribute("2")]
private static string TrimStdOut(string str);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask <>n__0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.XunitFilters : object {
    private DateTimeOffset includedMethodCacheLastUpdated;
    private List`1<Regex> includedMethodRegexFilters;
    private HashSet`1<string> includedMethodStandardFilters;
    private ChangeTrackingHashSet`1<string> includedMethods;
    private DateTimeOffset excludedMethodCacheLastUpdated;
    private List`1<Regex> excludedMethodRegexFilters;
    private HashSet`1<string> excludedMethodStandardFilters;
    private ChangeTrackingHashSet`1<string> excludedMethods;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <ExcludedClasses>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <ExcludedNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, HashSet`1<string>> <ExcludedTraits>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <IncludedClasses>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <IncludedNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, HashSet`1<string>> <IncludedTraits>k__BackingField;
    public bool Empty { get; }
    public HashSet`1<string> ExcludedClasses { get; }
    public ICollection`1<string> ExcludedMethods { get; }
    public HashSet`1<string> ExcludedNamespaces { get; }
    public Dictionary`2<string, HashSet`1<string>> ExcludedTraits { get; }
    public HashSet`1<string> IncludedClasses { get; }
    public ICollection`1<string> IncludedMethods { get; }
    public HashSet`1<string> IncludedNamespaces { get; }
    public Dictionary`2<string, HashSet`1<string>> IncludedTraits { get; }
    public bool get_Empty();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_ExcludedClasses();
    public ICollection`1<string> get_ExcludedMethods();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_ExcludedNamespaces();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, HashSet`1<string>> get_ExcludedTraits();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_IncludedClasses();
    public ICollection`1<string> get_IncludedMethods();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_IncludedNamespaces();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, HashSet`1<string>> get_IncludedTraits();
    public bool Filter(ITestCaseMetadata testCase);
    private bool FilterExcludedClasses(ITestCaseMetadata testCase);
    private bool FilterExcludedMethods(ITestCaseMetadata testCase);
    private bool FilterExcludedNamespaces(ITestCaseMetadata testCase);
    private bool FilterExcludedTraits(ITestCaseMetadata testCase);
    private bool FilterIncludedClasses(ITestCaseMetadata testCase);
    private bool FilterIncludedMethods(ITestCaseMetadata testCase);
    private bool FilterIncludedNamespaces(ITestCaseMetadata testCase);
    private bool FilterIncludedTraits(ITestCaseMetadata testCase);
    private void SplitFilters();
    private void SplitFilters(ChangeTrackingHashSet`1<string> toSplit, DateTimeOffset& lastCacheUpdate, HashSet`1& standardFilters, List`1& regexFilters);
    private static string WildcardToRegex(string pattern);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.XunitProject : object {
    private List`1<XunitProjectAssembly> assemblies;
    [NullableAttribute("2")]
private IRunnerReporter runnerReporter;
    [CompilerGeneratedAttribute]
private TestProjectConfiguration <Configuration>k__BackingField;
    public ICollection`1<XunitProjectAssembly> Assemblies { get; }
    public TestProjectConfiguration Configuration { get; }
    public IRunnerReporter RunnerReporter { get; public set; }
    public ICollection`1<XunitProjectAssembly> get_Assemblies();
    [CompilerGeneratedAttribute]
public TestProjectConfiguration get_Configuration();
    public IRunnerReporter get_RunnerReporter();
    public void set_RunnerReporter(IRunnerReporter value);
    public void Add(XunitProjectAssembly assembly);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.Common.XunitProjectAssembly : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private AssemblyMetadata <AssemblyMetadata>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ConfigFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private TestAssemblyConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private XunitProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <TestCasesToRun>k__BackingField;
    [NullableAttribute("2")]
public Assembly Assembly { get; public set; }
    public string AssemblyDisplayName { get; }
    public string AssemblyFileName { get; public set; }
    public AssemblyMetadata AssemblyMetadata { get; public set; }
    [NullableAttribute("2")]
public string ConfigFileName { get; public set; }
    public TestAssemblyConfiguration Configuration { get; }
    public string Identifier { get; }
    public XunitProject Project { get; }
    public List`1<string> TestCasesToRun { get; }
    public XunitProjectAssembly(XunitProject project, string assemblyFileName, AssemblyMetadata assemblyMetadata);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Assembly get_Assembly();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Assembly(Assembly value);
    public string get_AssemblyDisplayName();
    [CompilerGeneratedAttribute]
public string get_AssemblyFileName();
    [CompilerGeneratedAttribute]
public void set_AssemblyFileName(string value);
    [CompilerGeneratedAttribute]
public AssemblyMetadata get_AssemblyMetadata();
    [CompilerGeneratedAttribute]
public void set_AssemblyMetadata(AssemblyMetadata value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ConfigFileName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ConfigFileName(string value);
    [CompilerGeneratedAttribute]
public TestAssemblyConfiguration get_Configuration();
    public string get_Identifier();
    [CompilerGeneratedAttribute]
public XunitProject get_Project();
    [CompilerGeneratedAttribute]
public List`1<string> get_TestCasesToRun();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Xunit.Sdk.MessageSinkMessageExtensions : object {
    [ExtensionAttribute]
public static bool DispatchWhen(IMessageSinkMessage message, MessageHandler`1<TMessage> callback);
    [ExtensionAttribute]
public static ITestCaseDiscovered ToTestCaseDiscovered(ITestCase testCase);
    [ExtensionAttribute]
public static ITestCaseDiscovered WithSourceInfo(ITestCaseDiscovered discovered, string sourceFilePath, Nullable`1<int> sourceLineNumber);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions : object {
    [ExtensionAttribute]
public static string GetCulture(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> GetDiagnosticMessages(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static bool GetDiagnosticMessagesOrDefault(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> GetIncludeSourceInformation(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static bool GetIncludeSourceInformationOrDefault(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> GetInternalDiagnosticMessages(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static bool GetInternalDiagnosticMessagesOrDefault(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static Nullable`1<TestMethodDisplay> GetMethodDisplay(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static TestMethodDisplay GetMethodDisplayOrDefault(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static Nullable`1<TestMethodDisplayOptions> GetMethodDisplayOptions(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static TestMethodDisplayOptions GetMethodDisplayOptionsOrDefault(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> GetPreEnumerateTheories(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static bool GetPreEnumerateTheoriesOrDefault(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> GetSynchronousMessageReporting(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static bool GetSynchronousMessageReportingOrDefault(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static void SetCulture(ITestFrameworkDiscoveryOptions discoveryOptions, string culture);
    [ExtensionAttribute]
public static void SetDiagnosticMessages(ITestFrameworkDiscoveryOptions discoveryOptions, Nullable`1<bool> value);
    [ExtensionAttribute]
public static void SetIncludeSourceInformation(ITestFrameworkDiscoveryOptions discoveryOptions, Nullable`1<bool> value);
    [ExtensionAttribute]
public static void SetInternalDiagnosticMessages(ITestFrameworkDiscoveryOptions discoveryOptions, Nullable`1<bool> value);
    [ExtensionAttribute]
public static void SetMethodDisplay(ITestFrameworkDiscoveryOptions discoveryOptions, Nullable`1<TestMethodDisplay> value);
    [ExtensionAttribute]
public static void SetMethodDisplayOptions(ITestFrameworkDiscoveryOptions discoveryOptions, Nullable`1<TestMethodDisplayOptions> value);
    [ExtensionAttribute]
public static void SetPreEnumerateTheories(ITestFrameworkDiscoveryOptions discoveryOptions, Nullable`1<bool> value);
    [ExtensionAttribute]
public static void SetSynchronousMessageReporting(ITestFrameworkDiscoveryOptions discoveryOptions, Nullable`1<bool> value);
    [ExtensionAttribute]
public static string GetCulture(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> GetDiagnosticMessages(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static bool GetDiagnosticMessagesOrDefault(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> GetDisableParallelization(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static bool GetDisableParallelizationOrDefault(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static Nullable`1<ExplicitOption> GetExplicitOption(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static ExplicitOption GetExplicitOptionOrDefault(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> GetFailSkips(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static bool GetFailSkipsOrDefault(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> GetFailTestsWithWarnings(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static bool GetFailTestsWithWarningsOrDefault(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> GetInternalDiagnosticMessages(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static bool GetInternalDiagnosticMessagesOrDefault(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static Nullable`1<int> GetMaxParallelThreads(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static int GetMaxParallelThreadsOrDefault(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static Nullable`1<ParallelAlgorithm> GetParallelAlgorithm(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static ParallelAlgorithm GetParallelAlgorithmOrDefault(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static Nullable`1<int> GetSeed(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> GetShowLiveOutput(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static bool GetShowLiveOutputOrDefault(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> GetStopOnTestFail(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static bool GetStopOnTestFailOrDefault(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> GetSynchronousMessageReporting(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static bool GetSynchronousMessageReportingOrDefault(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static void SetCulture(ITestFrameworkExecutionOptions executionOptions, string culture);
    [ExtensionAttribute]
public static void SetDiagnosticMessages(ITestFrameworkExecutionOptions executionOptions, Nullable`1<bool> value);
    [ExtensionAttribute]
public static void SetDisableParallelization(ITestFrameworkExecutionOptions executionOptions, Nullable`1<bool> value);
    [ExtensionAttribute]
public static void SetExplicitOption(ITestFrameworkExecutionOptions executionOptions, Nullable`1<ExplicitOption> value);
    [ExtensionAttribute]
public static void SetFailSkips(ITestFrameworkExecutionOptions executionOptions, Nullable`1<bool> value);
    [ExtensionAttribute]
public static void SetFailTestsWithWarnings(ITestFrameworkExecutionOptions executionOptions, Nullable`1<bool> value);
    [ExtensionAttribute]
public static void SetInternalDiagnosticMessages(ITestFrameworkExecutionOptions executionOptions, Nullable`1<bool> value);
    [ExtensionAttribute]
public static void SetMaxParallelThreads(ITestFrameworkExecutionOptions executionOptions, Nullable`1<int> value);
    [ExtensionAttribute]
public static void SetParallelAlgorithm(ITestFrameworkExecutionOptions executionOptions, Nullable`1<ParallelAlgorithm> value);
    [ExtensionAttribute]
public static void SetSeed(ITestFrameworkExecutionOptions executionOptions, Nullable`1<int> value);
    [ExtensionAttribute]
public static void SetShowLiveOutput(ITestFrameworkExecutionOptions executionOptions, Nullable`1<bool> value);
    [ExtensionAttribute]
public static void SetStopOnTestFail(ITestFrameworkExecutionOptions executionOptions, Nullable`1<bool> value);
    [ExtensionAttribute]
public static void SetSynchronousMessageReporting(ITestFrameworkExecutionOptions executionOptions, Nullable`1<bool> value);
}
