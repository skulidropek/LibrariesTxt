[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("749")]
internal class System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute : Attribute {
}
[AttributeUsageAttribute("32")]
internal class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.StringSyntaxAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Syntax>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    public static string CompositeFormat;
    public static string DateOnlyFormat;
    public static string DateTimeFormat;
    public static string EnumFormat;
    public static string GuidFormat;
    public static string Json;
    public static string NumericFormat;
    public static string Regex;
    public static string TimeOnlyFormat;
    public static string TimeSpanFormat;
    public static string Uri;
    public static string Xml;
    public string Syntax { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    public StringSyntaxAttribute(string syntax);
    public StringSyntaxAttribute(string syntax, Object[] arguments);
    [CompilerGeneratedAttribute]
public string get_Syntax();
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FeatureName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    public string FeatureName { get; }
    public bool IsOptional { get; public set; }
    public CompilerFeatureRequiredAttribute(string featureName);
    [CompilerGeneratedAttribute]
public string get_FeatureName();
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
public void set_IsOptional(bool value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("396")]
internal class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.139.59561")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
internal class Xunit.AppDomainManager_NoAppDomain : object {
    public bool HasAppDomain { get; }
    public sealed virtual bool get_HasAppDomain();
    [NullableContextAttribute("1")]
public sealed virtual TObject CreateObject(AssemblyName assemblyName, string typeName, Object[] args);
    public sealed virtual void Dispose();
}
internal static class Xunit.AppDomainManagerFactory : object {
    [NullableContextAttribute("1")]
internal static IAppDomainManager Create(bool useAppDomain, string assemblyFileName, string configFileName, bool shadowCopy, string shadowCopyFolder, IMessageSink diagnosticMessageSink);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class Xunit.AssemblyHelper : object {
    public static IDisposable SubscribeResolveForAssembly(string assemblyFileName, IMessageSink diagnosticMessageSink);
    public static IDisposable SubscribeResolveForAssembly(Type typeInAssembly, IMessageSink diagnosticMessageSink);
}
public static class Xunit.AssemblyUtility : object {
    [NullableContextAttribute("1")]
public static AssemblyMetadata GetAssemblyMetadata(string assemblyFileName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.FrontControllerFindAndRunSettings : FrontControllerSettingsBase {
    [CompilerGeneratedAttribute]
private ITestFrameworkDiscoveryOptions <DiscoveryOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestFrameworkExecutionOptions <ExecutionOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private XunitFilters <Filters>k__BackingField;
    public ITestFrameworkDiscoveryOptions DiscoveryOptions { get; }
    public ITestFrameworkExecutionOptions ExecutionOptions { get; }
    public XunitFilters Filters { get; }
    public FrontControllerFindAndRunSettings(ITestFrameworkDiscoveryOptions discoveryOptions, ITestFrameworkExecutionOptions executionOptions, XunitFilters filters);
    [CompilerGeneratedAttribute]
public ITestFrameworkDiscoveryOptions get_DiscoveryOptions();
    [CompilerGeneratedAttribute]
public ITestFrameworkExecutionOptions get_ExecutionOptions();
    [CompilerGeneratedAttribute]
public XunitFilters get_Filters();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.FrontControllerFindSettings : FrontControllerSettingsBase {
    [CompilerGeneratedAttribute]
private XunitFilters <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestFrameworkDiscoveryOptions <Options>k__BackingField;
    public XunitFilters Filters { get; }
    public ITestFrameworkDiscoveryOptions Options { get; }
    public FrontControllerFindSettings(ITestFrameworkDiscoveryOptions options, XunitFilters filters);
    [CompilerGeneratedAttribute]
public XunitFilters get_Filters();
    [CompilerGeneratedAttribute]
public ITestFrameworkDiscoveryOptions get_Options();
}
public class Xunit.FrontControllerLaunchOptions : object {
    [CompilerGeneratedAttribute]
private bool <WaitForDebugger>k__BackingField;
    public bool WaitForDebugger { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_WaitForDebugger();
    [CompilerGeneratedAttribute]
public void set_WaitForDebugger(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.FrontControllerRunSettings : FrontControllerSettingsBase {
    [CompilerGeneratedAttribute]
private ITestFrameworkExecutionOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <SerializedTestCases>k__BackingField;
    public ITestFrameworkExecutionOptions Options { get; }
    public IReadOnlyCollection`1<string> SerializedTestCases { get; }
    public FrontControllerRunSettings(ITestFrameworkExecutionOptions options, IReadOnlyCollection`1<string> serializedTestCases);
    [CompilerGeneratedAttribute]
public ITestFrameworkExecutionOptions get_Options();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_SerializedTestCases();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.FrontControllerSettingsBase : object {
    [CompilerGeneratedAttribute]
private FrontControllerLaunchOptions <LaunchOptions>k__BackingField;
    public FrontControllerLaunchOptions LaunchOptions { get; }
    [CompilerGeneratedAttribute]
public FrontControllerLaunchOptions get_LaunchOptions();
}
internal interface Xunit.IAppDomainManager {
    public bool HasAppDomain { get; }
    public abstract virtual bool get_HasAppDomain();
    [NullableContextAttribute("1")]
public abstract virtual TObject CreateObject(AssemblyName assemblyName, string typeName, Object[] args);
}
public interface Xunit.IFrontController {
    [NullableContextAttribute("1")]
public abstract virtual Nullable`1<int> FindAndRun(IMessageSink messageSink, FrontControllerFindAndRunSettings settings);
    [NullableContextAttribute("1")]
public abstract virtual Nullable`1<int> Run(IMessageSink messageSink, FrontControllerRunSettings settings);
}
[NullableContextAttribute("1")]
public interface Xunit.IFrontControllerDiscoverer {
    public bool CanUseAppDomains { get; }
    public string TargetFramework { get; }
    public string TestAssemblyUniqueID { get; }
    public string TestFrameworkDisplayName { get; }
    public abstract virtual bool get_CanUseAppDomains();
    public abstract virtual string get_TargetFramework();
    public abstract virtual string get_TestAssemblyUniqueID();
    public abstract virtual string get_TestFrameworkDisplayName();
    public abstract virtual Nullable`1<int> Find(IMessageSink messageSink, FrontControllerFindSettings settings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Internal.DefaultTestCaseBulkDeserializer : object {
    private ITestFrameworkExecutor executor;
    public DefaultTestCaseBulkDeserializer(ITestFrameworkExecutor executor);
    public sealed virtual List`1<KeyValuePair`2<string, ITestCase>> BulkDeserialize(List`1<string> serializations);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private ITestCase <BulkDeserialize>b__2_0(string serialization);
}
[NullableContextAttribute("1")]
public interface Xunit.Internal.ITestCaseBulkDeserializer {
    public abstract virtual List`1<KeyValuePair`2<string, ITestCase>> BulkDeserialize(List`1<string> serializations);
}
[NullableContextAttribute("1")]
public interface Xunit.Internal.ITestProcess {
    public Nullable`1<int> ID { get; }
    public TextReader StandardOutput { get; }
    public abstract virtual Nullable`1<int> get_ID();
    public abstract virtual TextReader get_StandardOutput();
    public abstract virtual bool WaitForExit(int milliseconds);
}
public static class Xunit.RemotingUtility : object {
    public static void CleanUpRegisteredChannels();
}
public static class Xunit.Runner.Common.ConfigReader : object {
    [NullableContextAttribute("2")]
public static bool Load(TestAssemblyConfiguration configuration, string assemblyFileName, string configFileName, List`1<string> warnings);
}
[NullableContextAttribute("1")]
public interface Xunit.Runner.v2.IMessageSinkMessageWithTypes {
    public HashSet`1<string> InterfaceTypes { get; }
    public abstract virtual HashSet`1<string> get_InterfaceTypes();
}
public interface Xunit.Runner.v2.IMessageSinkWithTypes {
    [NullableContextAttribute("1")]
public abstract virtual bool OnMessageWithTypes(IMessageSinkMessage message, HashSet`1<string> messageTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Xunit.Runner.v2.OptimizedRemoteMessageSink : MarshalByRefObject {
    private ReaderWriterLockSlim cacheLock;
    private Dictionary`2<Type, HashSet`1<string>> interfaceCache;
    private IMessageSinkWithTypes runnerSink;
    public OptimizedRemoteMessageSink(IMessageSinkWithTypes runnerSink);
    public sealed virtual void Dispose();
    private HashSet`1<string> GetMessageTypes(IMessageSinkMessage message);
    [NullableContextAttribute("2")]
public sealed virtual bool OnMessage(IMessageSinkMessage message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.v2.Xunit2 : object {
    internal static IReadOnlyDictionary`2<string, TestAttachment> EmptyAttachments;
    internal static IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> EmptyV3Traits;
    private static String[] SupportedPlatforms;
    private IAssemblyInfo assemblyInfo;
    [NullableAttribute("2")]
private ITestCaseBulkDeserializer bulkDeserializer;
    [NullableAttribute("2")]
private string configFileName;
    private bool disposed;
    private ITestFrameworkDiscoverer remoteDiscoverer;
    [NullableAttribute("2")]
private ITestFrameworkExecutor remoteExecutor;
    private ITestFramework remoteFramework;
    [CompilerGeneratedAttribute]
private IAppDomainManager <AppDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanUseAppDomains>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageSink <DiagnosticMessageSink>k__BackingField;
    [CompilerGeneratedAttribute]
private DisposalTracker <DisposalTracker>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestAssemblyUniqueID>k__BackingField;
    [CompilerGeneratedAttribute]
private AssemblyName <TestFrameworkAssemblyName>k__BackingField;
    internal IAppDomainManager AppDomain { get; }
    public bool CanUseAppDomains { get; }
    public IMessageSink DiagnosticMessageSink { get; }
    protected DisposalTracker DisposalTracker { get; }
    public string TestAssemblyUniqueID { get; protected set; }
    public string TargetFramework { get; }
    internal AssemblyName TestFrameworkAssemblyName { get; }
    public string TestFrameworkDisplayName { get; }
    [NullableContextAttribute("2")]
private Xunit2(IMessageSink diagnosticMessageSink, AppDomainSupport appDomainSupport, ISourceInformationProvider sourceInformationProvider, IAssemblyInfo assemblyInfo, string assemblyFileName, string xunitExecutionAssemblyPath, string configFileName, bool shadowCopy, string shadowCopyFolder, bool verifyAssembliesOnDisk);
    private static Xunit2();
    [CompilerGeneratedAttribute]
internal IAppDomainManager get_AppDomain();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CanUseAppDomains();
    [CompilerGeneratedAttribute]
public IMessageSink get_DiagnosticMessageSink();
    [CompilerGeneratedAttribute]
protected DisposalTracker get_DisposalTracker();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestAssemblyUniqueID();
    [CompilerGeneratedAttribute]
protected void set_TestAssemblyUniqueID(string value);
    public sealed virtual string get_TargetFramework();
    [CompilerGeneratedAttribute]
internal AssemblyName get_TestFrameworkAssemblyName();
    public sealed virtual string get_TestFrameworkDisplayName();
    private List`1<KeyValuePair`2<string, ITestCase>> BulkDeserialize(List`1<string> serializations);
    protected IMessageSink CreateOptimizedRemoteMessageSink(IMessageSink sink, bool serializeDiscoveredTestCases);
    public virtual ValueTask DisposeAsync();
    public sealed virtual Nullable`1<int> Find(IMessageSink messageSink, FrontControllerFindSettings settings);
    public sealed virtual Nullable`1<int> FindAndRun(IMessageSink messageSink, FrontControllerFindAndRunSettings settings);
    private static string GetExecutionAssemblyFileName(AppDomainSupport appDomainSupport, string basePath);
    private static String[] GetSupportedPlatformSuffixes(AppDomainSupport appDomainSupport);
    private static AssemblyName GetTestFrameworkAssemblyName(string xunitExecutionAssemblyPath);
    private static string GetXunitExecutionAssemblyPath(AppDomainSupport appDomainSupport, string assemblyFileName, bool verifyTestAssemblyExists);
    private static string GetXunitExecutionAssemblyPath(AppDomainSupport appDomainSupport, IAssemblyInfo assemblyInfo);
    private void ReportTestCasesAsNotRun(IReadOnlyList`1<ITestCase> testCases, IMessageSink messageSink);
    public sealed virtual Nullable`1<int> Run(IMessageSink messageSink, FrontControllerRunSettings settings);
    private void SendDiscoveryStartingMessage(IMessageSink messageSink);
    private void SendDiscoveryCompleteMessage(IMessageSink messageSink, int testCasesToRun);
    public static IFrontControllerDiscoverer ForDiscovery(IAssemblyInfo assemblyInfo, XunitProjectAssembly projectAssembly, ISourceInformationProvider sourceInformationProvider, IMessageSink diagnosticMessageSink, bool verifyAssembliesOnDisk);
    public static IFrontController ForDiscoveryAndExecution(XunitProjectAssembly projectAssembly, ISourceInformationProvider sourceInformationProvider, IMessageSink diagnosticMessageSink, bool verifyAssembliesOnDisk);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.v2.Xunit2DiscoverySink : MarshalByRefObject {
    private Xunit2MessageAdapter adapter;
    private bool disposed;
    private XunitFilters filters;
    [CompilerGeneratedAttribute]
private AutoResetEvent <Finished>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ITestCase> <TestCases>k__BackingField;
    public AutoResetEvent Finished { get; }
    public List`1<ITestCase> TestCases { get; }
    public Xunit2DiscoverySink(XunitFilters filters);
    [CompilerGeneratedAttribute]
public AutoResetEvent get_Finished();
    [CompilerGeneratedAttribute]
public List`1<ITestCase> get_TestCases();
    private static void Dispatch(IMessageSinkMessage message, HashSet`1<string> messageTypes, Action`1<TMessage> handler);
    public sealed virtual void Dispose();
    private void HandleDiscoveryComplete(IDiscoveryCompleteMessage message);
    private void HandleTestCaseDiscovery(ITestCaseDiscoveryMessage message);
    public sealed virtual bool OnMessage(IMessageSinkMessage message);
    public sealed virtual bool OnMessageWithTypes(IMessageSinkMessage message, HashSet`1<string> messageTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.v2.Xunit2MessageAdapter : object {
    private string assemblyUniqueID;
    [NullableAttribute("2")]
private ITestFrameworkDiscoverer discoverer;
    private Dictionary`2<ITestCase, Dictionary`2<ITest, string>> testUniqueIDsByTestCase;
    [NullableContextAttribute("2")]
public Xunit2MessageAdapter(string assemblyUniqueID, ITestFrameworkDiscoverer discoverer);
    public IMessageSinkMessage Adapt(IMessageSinkMessage message, HashSet`1<string> messageTypes);
    private IAfterTestFinished AdaptAfterTestFinished(IAfterTestFinished message);
    private IAfterTestStarting AdaptAfterTestStarting(IAfterTestStarting message);
    private IBeforeTestFinished AdaptBeforeTestFinished(IBeforeTestFinished message);
    private IBeforeTestStarting AdaptBeforeTestStarting(IBeforeTestStarting message);
    private IDiagnosticMessage AdaptDiagnosticMessage(IDiagnosticMessage message);
    private IDiscoveryComplete AdaptDiscoveryCompleteMessage(IDiscoveryCompleteMessage message);
    private IErrorMessage AdaptErrorMessage(IErrorMessage message);
    private ITestAssemblyCleanupFailure AdaptTestAssemblyCleanupFailure(ITestAssemblyCleanupFailure message);
    private ITestAssemblyFinished AdaptTestAssemblyFinished(ITestAssemblyFinished message);
    private ITestAssemblyStarting AdaptTestAssemblyStarting(ITestAssemblyStarting message);
    private ITestCaseCleanupFailure AdaptTestCaseCleanupFailure(ITestCaseCleanupFailure message);
    private ITestCaseDiscovered AdaptTestCaseDiscoveryMessage(ITestCaseDiscoveryMessage message);
    private ITestCaseFinished AdaptTestCaseFinished(ITestCaseFinished message);
    private ITestCaseStarting AdaptTestCaseStarting(ITestCaseStarting message);
    private ITestClassCleanupFailure AdaptTestClassCleanupFailure(ITestClassCleanupFailure message);
    private ITestClassConstructionFinished AdaptTestClassConstructionFinished(ITestClassConstructionFinished message);
    private ITestClassConstructionStarting AdaptTestClassConstructionStarting(ITestClassConstructionStarting message);
    private ITestClassDisposeFinished AdaptTestClassDisposeFinished(ITestClassDisposeFinished message);
    private ITestClassDisposeStarting AdaptTestClassDisposeStarting(ITestClassDisposeStarting message);
    private ITestClassFinished AdaptTestClassFinished(ITestClassFinished message);
    private ITestClassStarting AdaptTestClassStarting(ITestClassStarting message);
    private ITestCleanupFailure AdaptTestCleanupFailure(ITestCleanupFailure message);
    private ITestCollectionCleanupFailure AdaptTestCollectionCleanupFailure(ITestCollectionCleanupFailure message);
    private ITestCollectionFinished AdaptTestCollectionFinished(ITestCollectionFinished message);
    private ITestCollectionStarting AdaptTestCollectionStarting(ITestCollectionStarting message);
    private ITestFailed AdaptTestFailed(ITestFailed message);
    private ITestFinished AdaptTestFinished(ITestFinished message);
    private ITestMethodCleanupFailure AdaptTestMethodCleanupFailure(ITestMethodCleanupFailure message);
    private ITestMethodFinished AdaptTestMethodFinished(ITestMethodFinished message);
    private ITestMethodStarting AdaptTestMethodStarting(ITestMethodStarting message);
    private ITestOutput AdaptTestOutput(ITestOutput message);
    private ITestPassed AdaptTestPassed(ITestPassed message);
    private ITestSkipped AdaptTestSkipped(ITestSkipped message);
    private ITestStarting AdaptTestStarting(ITestStarting message);
    private static IMessageSinkMessage TryConvert(IMessageSinkMessage message, HashSet`1<string> messageTypes, Func`2<TMessage, IMessageSinkMessage> converter);
    private string UniqueIDForTest(string testCaseUniqueID, ITest test);
    [NullableContextAttribute("2")]
private static string UniqueIDForTestClass(string testCollectionUniqueID, ITestClass testClass);
    private static string UniqueIDForTestCollection(string assemblyUniqueID, ITestCollection testCollection);
    [NullableContextAttribute("2")]
private static string UniqueIDForTestMethod(string classUniqueID, ITestMethod testMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.v2.Xunit2MessageSink : MarshalByRefObject {
    private Xunit2MessageAdapter adapter;
    private IMessageSink v3MessageSink;
    [NullableContextAttribute("2")]
public Xunit2MessageSink(IMessageSink v3MessageSink, string assemblyUniqueID, ITestFrameworkDiscoverer discoverer);
    public sealed virtual void Dispose();
    private static HashSet`1<string> GetImplementedInterfaces(IMessageSinkMessage message);
    public sealed virtual bool OnMessage(IMessageSinkMessage message);
    public sealed virtual bool OnMessageWithTypes(IMessageSinkMessage message, HashSet`1<string> messageTypes);
}
public class Xunit.Runner.v2.Xunit2Options : LongLivedMarshalByRefObject {
    [NullableAttribute("1")]
private ITestFrameworkOptions v3Options;
    [NullableContextAttribute("1")]
public Xunit2Options(ITestFrameworkOptions v3Options);
    [NullableContextAttribute("2")]
public sealed virtual TValue GetValue(string name);
    [NullableContextAttribute("1")]
public sealed virtual void SetValue(string name, TValue value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Xunit.Runner.v2.Xunit2OptionsAdapter : object {
    public static ITestFrameworkDiscoveryOptions Adapt(ITestFrameworkDiscoveryOptions options);
    public static ITestFrameworkExecutionOptions Adapt(ITestFrameworkExecutionOptions options);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xunit.Runner.v2.Xunit2SourceInformation : MarshalByRefObject {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LineNumber>k__BackingField;
    public string FileName { get; public set; }
    public Nullable`1<int> LineNumber { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_FileName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_LineNumber();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LineNumber(Nullable`1<int> value);
    [NullableContextAttribute("1")]
public sealed virtual void Serialize(IXunitSerializationInfo info);
    [NullableContextAttribute("1")]
public sealed virtual void Deserialize(IXunitSerializationInfo info);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.v2.Xunit2SourceInformationProvider : MarshalByRefObject {
    private DisposalTracker disposalTracker;
    private ISourceInformationProvider v3Provider;
    public Xunit2SourceInformationProvider(ISourceInformationProvider v3Provider);
    public sealed virtual void Dispose();
    public sealed virtual ISourceInformation GetSourceInformation(ITestCase testCase);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Xunit.Runner.v2.Xunit2SourceInformationProvider/<<Dispose>b__3_0>d")]
[CompilerGeneratedAttribute]
private Task <Dispose>b__3_0();
}
public static class Xunit.Runner.v2.Xunit2SourceInformationProviderAdapter : object {
    [NullableContextAttribute("1")]
public static ISourceInformationProvider Adapt(ISourceInformationProvider v3Provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runner.v3.Xunit3 : object {
    private static bool IsWindows;
    [NullableAttribute("2")]
private IMessageSink diagnosticMessageSink;
    private XunitProjectAssembly projectAssembly;
    [NullableAttribute("2")]
private ISourceInformationProvider sourceInformationProvider;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<IReadOnlyList`1<string>, ITestProcess> testProcessLauncher;
    [CompilerGeneratedAttribute]
private Version <CoreFrameworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CoreFrameworkVersionInformational>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestAssemblyUniqueID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestFrameworkDisplayName>k__BackingField;
    public bool CanUseAppDomains { get; }
    public Version CoreFrameworkVersion { get; }
    public string CoreFrameworkVersionInformational { get; }
    public string TargetFramework { get; }
    public string TestAssemblyUniqueID { get; }
    public string TestFrameworkDisplayName { get; }
    [NullableContextAttribute("2")]
private Xunit3(XunitProjectAssembly projectAssembly, ISourceInformationProvider sourceInformationProvider, IMessageSink diagnosticMessageSink, Func`2<IReadOnlyList`1<string>, ITestProcess> testProcessLauncher);
    private static Xunit3();
    public sealed virtual bool get_CanUseAppDomains();
    [CompilerGeneratedAttribute]
public Version get_CoreFrameworkVersion();
    [CompilerGeneratedAttribute]
public string get_CoreFrameworkVersionInformational();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TargetFramework();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestAssemblyUniqueID();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestFrameworkDisplayName();
    public sealed virtual ValueTask DisposeAsync();
    public sealed virtual Nullable`1<int> Find(IMessageSink messageSink, FrontControllerFindSettings settings);
    public sealed virtual Nullable`1<int> FindAndRun(IMessageSink messageSink, FrontControllerFindAndRunSettings settings);
    public sealed virtual Nullable`1<int> Run(IMessageSink messageSink, FrontControllerRunSettings settings);
    private Nullable`1<int> RunInternal(IMessageSink messageSink, List`1<string> arguments);
    public static IFrontController ForDiscoveryAndExecution(XunitProjectAssembly projectAssembly, ISourceInformationProvider sourceInformationProvider, IMessageSink diagnosticMessageSink, bool forceInProcess);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Xunit.Runner.v3.Xunit3ArgumentFactory : object {
    public static List`1<string> ForFind(ITestFrameworkDiscoveryOptions options, XunitFilters filters, string configFileName, Nullable`1<ListOption> listOption, bool waitForDebugger);
    public static List`1<string> ForFindAndRun(ITestFrameworkDiscoveryOptions discoveryOptions, ITestFrameworkExecutionOptions executionOptions, XunitFilters filters, string configFileName, bool waitForDebugger);
    public static List`1<string> ForRun(ITestFrameworkExecutionOptions options, IReadOnlyCollection`1<string> serializedTestCases, string configFileName, bool waitForDebugger);
    [NullableContextAttribute("2")]
private static List`1<string> ToArguments(string configFileName, string culture, Nullable`1<bool> diagnosicMessages, Nullable`1<bool> disableParallelization, Nullable`1<ExplicitOption> explicitOption, Nullable`1<bool> failSkips, Nullable`1<bool> failTestsWithWarnings, XunitFilters filters, Nullable`1<bool> internalDiagnosticMessages, Nullable`1<ListOption> listOption, Nullable`1<int> maxParallelThreads, Nullable`1<TestMethodDisplay> methodDisplay, Nullable`1<TestMethodDisplayOptions> methodDisplayOptions, Nullable`1<ParallelAlgorithm> parallelAlgorithm, Nullable`1<bool> preEnumerateTheories, Nullable`1<int> seed, IReadOnlyCollection`1<string> serializedTestCases, Nullable`1<bool> stopOnTestFail, bool waitForDebugger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runners.AssemblyRunner : object {
    private static Dictionary`2<Type, string> MessageTypeNames;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) cancelled;
    private bool disposed;
    private TestAssemblyConfiguration configuration;
    private IFrontController controller;
    private ManualResetEvent discoveryCompleteEvent;
    private DisposalTracker disposalTracker;
    private ManualResetEvent executionCompleteEvent;
    private object statusLock;
    private int testCasesDiscovered;
    private List`1<ITestCaseDiscovered> testCasesToRun;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<DiagnosticMessageInfo> <OnDiagnosticMessage>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<DiscoveryCompleteInfo> <OnDiscoveryComplete>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<ErrorMessageInfo> <OnErrorMessage>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<ExecutionCompleteInfo> <OnExecutionComplete>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<InternalDiagnosticMessageInfo> <OnInternalDiagnosticMessage>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<TestFailedInfo> <OnTestFailed>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<TestFinishedInfo> <OnTestFinished>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<TestOutputInfo> <OnTestOutput>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<TestPassedInfo> <OnTestPassed>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<TestSkippedInfo> <OnTestSkipped>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<TestStartingInfo> <OnTestStarting>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<ITestCaseDiscovered, bool> <TestCaseFilter>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<DiagnosticMessageInfo> OnDiagnosticMessage { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<DiscoveryCompleteInfo> OnDiscoveryComplete { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<ErrorMessageInfo> OnErrorMessage { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<ExecutionCompleteInfo> OnExecutionComplete { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<InternalDiagnosticMessageInfo> OnInternalDiagnosticMessage { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<TestFailedInfo> OnTestFailed { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<TestFinishedInfo> OnTestFinished { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<TestOutputInfo> OnTestOutput { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<TestPassedInfo> OnTestPassed { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<TestSkippedInfo> OnTestSkipped { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<TestStartingInfo> OnTestStarting { get; public set; }
    public AssemblyRunnerStatus Status { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<ITestCaseDiscovered, bool> TestCaseFilter { get; public set; }
    private static AssemblyRunner();
    [NullableContextAttribute("2")]
private AssemblyRunner(AppDomainSupport appDomainSupport, string assemblyFileName, string configFileName, bool shadowCopy, string shadowCopyFolder);
    [CompilerGeneratedAttribute]
public Action`1<DiagnosticMessageInfo> get_OnDiagnosticMessage();
    [CompilerGeneratedAttribute]
public void set_OnDiagnosticMessage(Action`1<DiagnosticMessageInfo> value);
    [CompilerGeneratedAttribute]
public Action`1<DiscoveryCompleteInfo> get_OnDiscoveryComplete();
    [CompilerGeneratedAttribute]
public void set_OnDiscoveryComplete(Action`1<DiscoveryCompleteInfo> value);
    [CompilerGeneratedAttribute]
public Action`1<ErrorMessageInfo> get_OnErrorMessage();
    [CompilerGeneratedAttribute]
public void set_OnErrorMessage(Action`1<ErrorMessageInfo> value);
    [CompilerGeneratedAttribute]
public Action`1<ExecutionCompleteInfo> get_OnExecutionComplete();
    [CompilerGeneratedAttribute]
public void set_OnExecutionComplete(Action`1<ExecutionCompleteInfo> value);
    [CompilerGeneratedAttribute]
public Action`1<InternalDiagnosticMessageInfo> get_OnInternalDiagnosticMessage();
    [CompilerGeneratedAttribute]
public void set_OnInternalDiagnosticMessage(Action`1<InternalDiagnosticMessageInfo> value);
    [CompilerGeneratedAttribute]
public Action`1<TestFailedInfo> get_OnTestFailed();
    [CompilerGeneratedAttribute]
public void set_OnTestFailed(Action`1<TestFailedInfo> value);
    [CompilerGeneratedAttribute]
public Action`1<TestFinishedInfo> get_OnTestFinished();
    [CompilerGeneratedAttribute]
public void set_OnTestFinished(Action`1<TestFinishedInfo> value);
    [CompilerGeneratedAttribute]
public Action`1<TestOutputInfo> get_OnTestOutput();
    [CompilerGeneratedAttribute]
public void set_OnTestOutput(Action`1<TestOutputInfo> value);
    [CompilerGeneratedAttribute]
public Action`1<TestPassedInfo> get_OnTestPassed();
    [CompilerGeneratedAttribute]
public void set_OnTestPassed(Action`1<TestPassedInfo> value);
    [CompilerGeneratedAttribute]
public Action`1<TestSkippedInfo> get_OnTestSkipped();
    [CompilerGeneratedAttribute]
public void set_OnTestSkipped(Action`1<TestSkippedInfo> value);
    [CompilerGeneratedAttribute]
public Action`1<TestStartingInfo> get_OnTestStarting();
    [CompilerGeneratedAttribute]
public void set_OnTestStarting(Action`1<TestStartingInfo> value);
    public AssemblyRunnerStatus get_Status();
    [CompilerGeneratedAttribute]
public Func`2<ITestCaseDiscovered, bool> get_TestCaseFilter();
    [CompilerGeneratedAttribute]
public void set_TestCaseFilter(Func`2<ITestCaseDiscovered, bool> value);
    [NullableContextAttribute("2")]
private static void AddMessageTypeName();
    public void Cancel();
    [AsyncStateMachineAttribute("Xunit.Runners.AssemblyRunner/<DisposeAsync>d__65")]
public sealed virtual ValueTask DisposeAsync();
    private ITestFrameworkDiscoveryOptions GetDiscoveryOptions(Nullable`1<bool> diagnosticMessages, Nullable`1<bool> internalDiagnosticMessages, Nullable`1<TestMethodDisplay> methodDisplay, Nullable`1<TestMethodDisplayOptions> methodDisplayOptions, Nullable`1<bool> preEnumerateTheories);
    private ITestFrameworkExecutionOptions GetExecutionOptions(Nullable`1<bool> diagnosticMessages, Nullable`1<bool> internalDiagnosticMessages, Nullable`1<int> maxParallelThreads, Nullable`1<bool> parallel, Nullable`1<ParallelAlgorithm> parallelAlgorithm);
    private sealed virtual override bool Xunit.Sdk.IMessageSink.OnMessage(IMessageSinkMessage message);
    protected virtual bool OnMessage(IMessageSinkMessage message);
    [NullableContextAttribute("2")]
public void Start(AssemblyRunnerStartOptions startOptions);
    public static AssemblyRunner WithoutAppDomain(string assemblyFileName);
    private static bool DispatchMessage(IMessageSinkMessage message, HashSet`1<string> messageTypes, Action`1<TMessage> handler);
    [CompilerGeneratedAttribute]
private void <OnMessage>b__69_0(ITestCaseDiscovered testDiscovered);
    [CompilerGeneratedAttribute]
private void <OnMessage>b__69_1(IDiscoveryComplete discoveryComplete);
    [CompilerGeneratedAttribute]
private void <OnMessage>b__69_2(ITestAssemblyFinished assemblyFinished);
    [CompilerGeneratedAttribute]
private void <OnMessage>b__69_3(IDiagnosticMessage m);
    [CompilerGeneratedAttribute]
private void <OnMessage>b__69_4(IInternalDiagnosticMessage m);
    [CompilerGeneratedAttribute]
private void <OnMessage>b__69_5(IErrorMessage m);
    [CompilerGeneratedAttribute]
private void <OnMessage>b__69_6(ITestAssemblyCleanupFailure m);
    [CompilerGeneratedAttribute]
private void <OnMessage>b__69_7(ITestCaseCleanupFailure m);
    [CompilerGeneratedAttribute]
private void <OnMessage>b__69_8(ITestClassCleanupFailure m);
    [CompilerGeneratedAttribute]
private void <OnMessage>b__69_9(ITestCleanupFailure m);
    [CompilerGeneratedAttribute]
private void <OnMessage>b__69_10(ITestCollectionCleanupFailure m);
    [CompilerGeneratedAttribute]
private void <OnMessage>b__69_11(ITestMethodCleanupFailure m);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runners.AssemblyRunnerStartOptions : object {
    private String[] typesToRun;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DiagnosticMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <InternalDiagnosticMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxParallelThreads>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TestMethodDisplay> <MethodDisplay>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TestMethodDisplayOptions> <MethodDisplayOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Parallel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ParallelAlgorithm> <ParallelAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PreEnumerateTheories>k__BackingField;
    public Nullable`1<bool> DiagnosticMessages { get; public set; }
    public static AssemblyRunnerStartOptions Empty { get; }
    public Nullable`1<bool> InternalDiagnosticMessages { get; public set; }
    public Nullable`1<int> MaxParallelThreads { get; public set; }
    public Nullable`1<TestMethodDisplay> MethodDisplay { get; public set; }
    public Nullable`1<TestMethodDisplayOptions> MethodDisplayOptions { get; public set; }
    public Nullable`1<bool> Parallel { get; public set; }
    public Nullable`1<ParallelAlgorithm> ParallelAlgorithm { get; public set; }
    public Nullable`1<bool> PreEnumerateTheories { get; public set; }
    public String[] TypesToRun { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DiagnosticMessages();
    [CompilerGeneratedAttribute]
public void set_DiagnosticMessages(Nullable`1<bool> value);
    public static AssemblyRunnerStartOptions get_Empty();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_InternalDiagnosticMessages();
    [CompilerGeneratedAttribute]
public void set_InternalDiagnosticMessages(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxParallelThreads();
    [CompilerGeneratedAttribute]
public void set_MaxParallelThreads(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TestMethodDisplay> get_MethodDisplay();
    [CompilerGeneratedAttribute]
public void set_MethodDisplay(Nullable`1<TestMethodDisplay> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TestMethodDisplayOptions> get_MethodDisplayOptions();
    [CompilerGeneratedAttribute]
public void set_MethodDisplayOptions(Nullable`1<TestMethodDisplayOptions> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Parallel();
    [CompilerGeneratedAttribute]
public void set_Parallel(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ParallelAlgorithm> get_ParallelAlgorithm();
    [CompilerGeneratedAttribute]
public void set_ParallelAlgorithm(Nullable`1<ParallelAlgorithm> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PreEnumerateTheories();
    [CompilerGeneratedAttribute]
public void set_PreEnumerateTheories(Nullable`1<bool> value);
    public String[] get_TypesToRun();
    public void set_TypesToRun(String[] value);
}
public enum Xunit.Runners.AssemblyRunnerStatus : Enum {
    public int value__;
    public static AssemblyRunnerStatus Idle;
    public static AssemblyRunnerStatus Discovering;
    public static AssemblyRunnerStatus Executing;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runners.DiagnosticMessageInfo : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Message { get; }
    public DiagnosticMessageInfo(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
}
public class Xunit.Runners.DiscoveryCompleteInfo : object {
    [CompilerGeneratedAttribute]
private int <TestCasesDiscovered>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestCasesToRun>k__BackingField;
    public int TestCasesDiscovered { get; }
    public int TestCasesToRun { get; }
    public DiscoveryCompleteInfo(int testCasesDiscovered, int testCasesToRun);
    [CompilerGeneratedAttribute]
public int get_TestCasesDiscovered();
    [CompilerGeneratedAttribute]
public int get_TestCasesToRun();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xunit.Runners.ErrorMessageInfo : object {
    [CompilerGeneratedAttribute]
private ErrorMessageType <MesssageType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionStackTrace>k__BackingField;
    public ErrorMessageType MesssageType { get; }
    public string ExceptionType { get; }
    public string ExceptionMessage { get; }
    public string ExceptionStackTrace { get; }
    public ErrorMessageInfo(ErrorMessageType messageType, string exceptionType, string exceptionMessage, string exceptionStackTrace);
    [CompilerGeneratedAttribute]
public ErrorMessageType get_MesssageType();
    [CompilerGeneratedAttribute]
public string get_ExceptionType();
    [CompilerGeneratedAttribute]
public string get_ExceptionMessage();
    [CompilerGeneratedAttribute]
public string get_ExceptionStackTrace();
}
public enum Xunit.Runners.ErrorMessageType : Enum {
    public int value__;
    public static ErrorMessageType CatastrophicError;
    public static ErrorMessageType TestAssemblyCleanupFailure;
    public static ErrorMessageType TestCollectionCleanupFailure;
    public static ErrorMessageType TestClassCleanupFailure;
    public static ErrorMessageType TestMethodCleanupFailure;
    public static ErrorMessageType TestCaseCleanupFailure;
    public static ErrorMessageType TestCleanupFailure;
}
public class Xunit.Runners.ExecutionCompleteInfo : object {
    [CompilerGeneratedAttribute]
private decimal <ExecutionTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsNotRun>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestsSkipped>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalTests>k__BackingField;
    [NullableAttribute("1")]
public static ExecutionCompleteInfo Empty;
    public decimal ExecutionTime { get; }
    public int TestsFailed { get; }
    public int TestsNotRun { get; }
    public int TestsSkipped { get; }
    public int TotalTests { get; }
    public ExecutionCompleteInfo(int totalTests, int testsFailed, int testsSkipped, int testsNotRun, decimal executionTime);
    private static ExecutionCompleteInfo();
    [CompilerGeneratedAttribute]
public decimal get_ExecutionTime();
    [CompilerGeneratedAttribute]
public int get_TestsFailed();
    [CompilerGeneratedAttribute]
public int get_TestsNotRun();
    [CompilerGeneratedAttribute]
public int get_TestsSkipped();
    [CompilerGeneratedAttribute]
public int get_TotalTests();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runners.InternalDiagnosticMessageInfo : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Message { get; }
    public InternalDiagnosticMessageInfo(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Xunit.Runners.TestExecutedInfo : TestInfo {
    [CompilerGeneratedAttribute]
private decimal <ExecutionTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    public decimal ExecutionTime { get; }
    public string Output { get; }
    protected TestExecutedInfo(string typeName, string methodName, Dictionary`2<string, HashSet`1<string>> traits, string testDisplayName, string testCollectionDisplayName, decimal executionTime, string output);
    [CompilerGeneratedAttribute]
public decimal get_ExecutionTime();
    [CompilerGeneratedAttribute]
public string get_Output();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xunit.Runners.TestFailedInfo : TestExecutedInfo {
    [CompilerGeneratedAttribute]
private string <ExceptionType>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <ExceptionMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionStackTrace>k__BackingField;
    public string ExceptionType { get; }
    [NullableAttribute("1")]
public string ExceptionMessage { get; }
    public string ExceptionStackTrace { get; }
    [NullableContextAttribute("1")]
public TestFailedInfo(string typeName, string methodName, Dictionary`2<string, HashSet`1<string>> traits, string testDisplayName, string testCollectionDisplayName, decimal executionTime, string output, string exceptionType, string exceptionMessage, string exceptionStackTrace);
    [CompilerGeneratedAttribute]
public string get_ExceptionType();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_ExceptionMessage();
    [CompilerGeneratedAttribute]
public string get_ExceptionStackTrace();
}
public class Xunit.Runners.TestFinishedInfo : TestExecutedInfo {
    [NullableContextAttribute("1")]
public TestFinishedInfo(string typeName, string methodName, Dictionary`2<string, HashSet`1<string>> traits, string testDisplayName, string testCollectionDisplayName, decimal executionTime, string output);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Xunit.Runners.TestInfo : object {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, HashSet`1<string>> <Traits>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestCollectionDisplayName>k__BackingField;
    public string TypeName { get; }
    public string MethodName { get; }
    public Dictionary`2<string, HashSet`1<string>> Traits { get; }
    public string TestDisplayName { get; }
    public string TestCollectionDisplayName { get; }
    protected TestInfo(string typeName, string methodName, Dictionary`2<string, HashSet`1<string>> traits, string testDisplayName, string testCollectionDisplayName);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, HashSet`1<string>> get_Traits();
    [CompilerGeneratedAttribute]
public string get_TestDisplayName();
    [CompilerGeneratedAttribute]
public string get_TestCollectionDisplayName();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xunit.Runners.TestOutputInfo : TestInfo {
    [CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    public string Output { get; }
    [NullableContextAttribute("1")]
public TestOutputInfo(string typeName, string methodName, Dictionary`2<string, HashSet`1<string>> traits, string testDisplayName, string testCollectionDisplayName, string output);
    [CompilerGeneratedAttribute]
public string get_Output();
}
public class Xunit.Runners.TestPassedInfo : TestExecutedInfo {
    [NullableContextAttribute("1")]
public TestPassedInfo(string typeName, string methodName, Dictionary`2<string, HashSet`1<string>> traits, string testDisplayName, string testCollectionDisplayName, decimal executionTime, string output);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Runners.TestSkippedInfo : TestInfo {
    [CompilerGeneratedAttribute]
private string <SkipReason>k__BackingField;
    public string SkipReason { get; }
    public TestSkippedInfo(string typeName, string methodName, Dictionary`2<string, HashSet`1<string>> traits, string testDisplayName, string testCollectionDisplayName, string skipReason);
    [CompilerGeneratedAttribute]
public string get_SkipReason();
}
public class Xunit.Runners.TestStartingInfo : TestInfo {
    [NullableContextAttribute("1")]
public TestStartingInfo(string typeName, string methodName, Dictionary`2<string, HashSet`1<string>> traits, string testDisplayName, string testCollectionDisplayName);
}
public abstract class Xunit.Sdk.LongLivedMarshalByRefObject : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.XunitFrontController : object {
    private bool disposed;
    private IFrontController innerController;
    public bool CanUseAppDomains { get; }
    public string TargetFramework { get; }
    public string TestAssemblyUniqueID { get; }
    public string TestFrameworkDisplayName { get; }
    private XunitFrontController(IFrontController innerController);
    public sealed virtual bool get_CanUseAppDomains();
    public sealed virtual string get_TargetFramework();
    public sealed virtual string get_TestAssemblyUniqueID();
    public sealed virtual string get_TestFrameworkDisplayName();
    [NullableContextAttribute("2")]
public static IFrontController Create(XunitProjectAssembly projectAssembly, ISourceInformationProvider sourceInformationProvider, IMessageSink diagnosticMessageSink);
    [AsyncStateMachineAttribute("Xunit.XunitFrontController/<DisposeAsync>d__12")]
public sealed virtual ValueTask DisposeAsync();
    public virtual Nullable`1<int> Find(IMessageSink messageSink, FrontControllerFindSettings settings);
    public sealed virtual Nullable`1<int> FindAndRun(IMessageSink messageSink, FrontControllerFindAndRunSettings settings);
    public sealed virtual Nullable`1<int> Run(IMessageSink messageSink, FrontControllerRunSettings settings);
}
