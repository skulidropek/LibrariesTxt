[ExtensionAttribute]
public static class AsyncCompatLibExtensions : object {
    [ExtensionAttribute]
public static TaskAwaiter GetAwaiter(Task task);
    [ExtensionAttribute]
public static TaskAwaiter`1<TResult> GetAwaiter(Task`1<TResult> task);
    [ExtensionAttribute]
public static ConfiguredTaskAwaitable`1<TResult> ConfigureAwait(Task`1<TResult> task, bool continueOnCapturedContext);
    [ExtensionAttribute]
public static ConfiguredTaskAwaitable ConfigureAwait(Task task, bool continueOnCapturedContext);
}
internal class Metadata : object {
    internal static string Version;
}
internal class System.Runtime.CompilerServices.AsyncMethodBuilderCore : ValueType {
    internal IAsyncStateMachine m_stateMachine;
    [CompilerGeneratedAttribute]
private static SendOrPostCallback CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static WaitCallback CS$<>9__CachedAnonymousMethodDelegate3;
    [DebuggerStepThroughAttribute]
[SecuritySafeCriticalAttribute]
internal void Start(TStateMachine& stateMachine);
    public void SetStateMachine(IAsyncStateMachine stateMachine);
    [SecuritySafeCriticalAttribute]
internal Action GetCompletionAction(TMethodBuilder& builder, TStateMachine& stateMachine);
    internal static void ThrowAsync(Exception exception, SynchronizationContext targetContext);
    [CompilerGeneratedAttribute]
private static void <ThrowAsync>b__0(object state);
    [CompilerGeneratedAttribute]
private static void <ThrowAsync>b__1(object state);
}
internal class System.Runtime.CompilerServices.AsyncMethodTaskCache`1 : object {
    internal static AsyncMethodTaskCache`1<TResult> Singleton;
    private static AsyncMethodTaskCache`1();
    internal static TaskCompletionSource`1<TResult> CreateCompleted(TResult result);
    private static AsyncMethodTaskCache`1<TResult> CreateCache();
    internal virtual TaskCompletionSource`1<TResult> FromResult(TResult result);
}
[AttributeUsageAttribute("64")]
public class System.Runtime.CompilerServices.AsyncStateMachineAttribute : StateMachineAttribute {
    public AsyncStateMachineAttribute(Type stateMachineType);
}
public class System.Runtime.CompilerServices.AsyncTaskMethodBuilder : ValueType {
    private static TaskCompletionSource`1<VoidTaskResult> s_cachedCompleted;
    private AsyncTaskMethodBuilder`1<VoidTaskResult> m_builder;
    public Task Task { get; }
    private object ObjectIdForDebugger { get; }
    private static AsyncTaskMethodBuilder();
    public Task get_Task();
    private object get_ObjectIdForDebugger();
    public static AsyncTaskMethodBuilder Create();
    [DebuggerStepThroughAttribute]
public void Start(TStateMachine& stateMachine);
    public void SetStateMachine(IAsyncStateMachine stateMachine);
    private sealed virtual override void System.Runtime.CompilerServices.IAsyncMethodBuilder.PreBoxInitialization();
    public void AwaitOnCompleted(TAwaiter& awaiter, TStateMachine& stateMachine);
    public void AwaitUnsafeOnCompleted(TAwaiter& awaiter, TStateMachine& stateMachine);
    public void SetResult();
    public void SetException(Exception exception);
    internal void SetNotificationForWaitCompletion(bool enabled);
}
public class System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1 : ValueType {
    internal static TaskCompletionSource`1<TResult> s_defaultResultTask;
    private AsyncMethodBuilderCore m_coreState;
    private TaskCompletionSource`1<TResult> m_task;
    internal TaskCompletionSource`1<TResult> CompletionSource { get; }
    public Task`1<TResult> Task { get; }
    private object ObjectIdForDebugger { get; }
    private static AsyncTaskMethodBuilder`1();
    internal TaskCompletionSource`1<TResult> get_CompletionSource();
    public Task`1<TResult> get_Task();
    private object get_ObjectIdForDebugger();
    public static AsyncTaskMethodBuilder`1<TResult> Create();
    [DebuggerStepThroughAttribute]
public void Start(TStateMachine& stateMachine);
    public void SetStateMachine(IAsyncStateMachine stateMachine);
    private sealed virtual override void System.Runtime.CompilerServices.IAsyncMethodBuilder.PreBoxInitialization();
    public void AwaitOnCompleted(TAwaiter& awaiter, TStateMachine& stateMachine);
    [SecuritySafeCriticalAttribute]
public void AwaitUnsafeOnCompleted(TAwaiter& awaiter, TStateMachine& stateMachine);
    public void SetResult(TResult result);
    internal void SetResult(TaskCompletionSource`1<TResult> completedTask);
    public void SetException(Exception exception);
    internal void SetNotificationForWaitCompletion(bool enabled);
    private TaskCompletionSource`1<TResult> GetTaskForResult(TResult result);
}
public class System.Runtime.CompilerServices.AsyncVoidMethodBuilder : ValueType {
    private SynchronizationContext m_synchronizationContext;
    private AsyncMethodBuilderCore m_coreState;
    private object m_objectIdForDebugger;
    private static int s_preventUnobservedTaskExceptionsInvoked;
    [CompilerGeneratedAttribute]
private static EventHandler`1<UnobservedTaskExceptionEventArgs> CS$<>9__CachedAnonymousMethodDelegate1;
    private object ObjectIdForDebugger { get; }
    private static AsyncVoidMethodBuilder();
    private AsyncVoidMethodBuilder(SynchronizationContext synchronizationContext);
    private object get_ObjectIdForDebugger();
    internal static void PreventUnobservedTaskExceptions();
    public static AsyncVoidMethodBuilder Create();
    [DebuggerStepThroughAttribute]
public void Start(TStateMachine& stateMachine);
    public void SetStateMachine(IAsyncStateMachine stateMachine);
    private sealed virtual override void System.Runtime.CompilerServices.IAsyncMethodBuilder.PreBoxInitialization();
    public void AwaitOnCompleted(TAwaiter& awaiter, TStateMachine& stateMachine);
    [SecuritySafeCriticalAttribute]
public void AwaitUnsafeOnCompleted(TAwaiter& awaiter, TStateMachine& stateMachine);
    public void SetResult();
    public void SetException(Exception exception);
    private void NotifySynchronizationContextOfCompletion();
    [CompilerGeneratedAttribute]
private static void <PreventUnobservedTaskExceptions>b__0(object s, UnobservedTaskExceptionEventArgs e);
}
[AttributeUsageAttribute("2048")]
public class System.Runtime.CompilerServices.CallerFilePathAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
public class System.Runtime.CompilerServices.CallerLineNumberAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
public class System.Runtime.CompilerServices.CallerMemberNameAttribute : Attribute {
}
public class System.Runtime.CompilerServices.ConfiguredTaskAwaitable : ValueType {
    private ConfiguredTaskAwaiter m_configuredTaskAwaiter;
    internal ConfiguredTaskAwaitable(Task task, bool continueOnCapturedContext);
    public ConfiguredTaskAwaiter GetAwaiter();
}
public class System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1 : ValueType {
    private ConfiguredTaskAwaiter<TResult> m_configuredTaskAwaiter;
    internal ConfiguredTaskAwaitable`1(Task`1<TResult> task, bool continueOnCapturedContext);
    public ConfiguredTaskAwaiter<TResult> GetAwaiter();
}
internal interface System.Runtime.CompilerServices.IAsyncMethodBuilder {
    public abstract virtual void PreBoxInitialization();
}
public interface System.Runtime.CompilerServices.IAsyncStateMachine {
    public abstract virtual void MoveNext();
    public abstract virtual void SetStateMachine(IAsyncStateMachine stateMachine);
}
public interface System.Runtime.CompilerServices.ICriticalNotifyCompletion {
    [SecurityCriticalAttribute]
public abstract virtual void UnsafeOnCompleted(Action continuation);
}
public interface System.Runtime.CompilerServices.INotifyCompletion {
    public abstract virtual void OnCompleted(Action continuation);
}
[AttributeUsageAttribute("64")]
public class System.Runtime.CompilerServices.IteratorStateMachineAttribute : StateMachineAttribute {
    public IteratorStateMachineAttribute(Type stateMachineType);
}
[AttributeUsageAttribute("64")]
public class System.Runtime.CompilerServices.StateMachineAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <StateMachineType>k__BackingField;
    public Type StateMachineType { get; private set; }
    public StateMachineAttribute(Type stateMachineType);
    [CompilerGeneratedAttribute]
public Type get_StateMachineType();
    [CompilerGeneratedAttribute]
private void set_StateMachineType(Type value);
}
public class System.Runtime.CompilerServices.TaskAwaiter : ValueType {
    internal static bool CONTINUE_ON_CAPTURED_CONTEXT_DEFAULT;
    private static string InvalidOperationException_TaskNotCompleted;
    private static MethodInfo s_prepForRemoting;
    private static Object[] s_emptyParams;
    private Task m_task;
    [CompilerGeneratedAttribute]
private static Action`1<object> CS$<>9__CachedAnonymousMethodDelegate7;
    public bool IsCompleted { get; }
    private static bool IsValidLocationForInlining { get; }
    private static TaskAwaiter();
    internal TaskAwaiter(Task task);
    public bool get_IsCompleted();
    private static bool get_IsValidLocationForInlining();
    public sealed virtual void OnCompleted(Action continuation);
    [SecurityCriticalAttribute]
public sealed virtual void UnsafeOnCompleted(Action continuation);
    public void GetResult();
    internal static void ValidateEnd(Task task);
    private static void HandleNonSuccess(Task task);
    private static void ThrowForNonSuccess(Task task);
    internal static void OnCompletedInternal(Task task, Action continuation, bool continueOnCapturedContext);
    private static void RunNoException(Action continuation);
    internal static Exception PrepareExceptionForRethrow(Exception exc);
    private static MethodInfo GetPrepForRemotingMethodInfo();
    [CompilerGeneratedAttribute]
private static void <OnCompletedInternal>b__2(object state);
}
public class System.Runtime.CompilerServices.TaskAwaiter`1 : ValueType {
    private Task`1<TResult> m_task;
    public bool IsCompleted { get; }
    internal TaskAwaiter`1(Task`1<TResult> task);
    public bool get_IsCompleted();
    public sealed virtual void OnCompleted(Action continuation);
    [SecurityCriticalAttribute]
public sealed virtual void UnsafeOnCompleted(Action continuation);
    public TResult GetResult();
}
internal class System.Runtime.CompilerServices.VoidTaskResult : ValueType {
}
public class System.Runtime.CompilerServices.YieldAwaitable : ValueType {
    public YieldAwaiter GetAwaiter();
}
[AttributeUsageAttribute("96")]
internal class System.Runtime.TargetedPatchingOptOutAttribute : Attribute {
    private string m_reason;
    public string Reason { get; }
    public TargetedPatchingOptOutAttribute(string reason);
    public string get_Reason();
}
[ExtensionAttribute]
internal static class System.Threading.ExecutionContextEx : object {
    [ExtensionAttribute]
public static void Dispose(ExecutionContext context);
}
internal class System.Threading.Tasks.DelayTask : object {
    private Timer m_timer;
    private TaskCompletionSource`1<VoidTaskResult> m_taskCompletionSource;
    private CancellationToken m_cancellationToken;
    public Task Task { get; }
    public DelayTask(CancellationToken cancellationToken, int millisecondsDelay);
    public Task get_Task();
    private void complete();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object _);
}
public static class System.Threading.Tasks.TaskEx : object {
    private static string ArgumentOutOfRange_TimeoutNonNegativeOrMinusOne;
    private static Task s_preCompletedTask;
    private static Task s_preCanceledTask;
    [CompilerGeneratedAttribute]
private static Func`1<Task> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Action`2<Task[], TaskCompletionSource`1<object>> CS$<>9__CachedAnonymousMethodDelegate8;
    private static TaskEx();
    public static Task Run(Action action);
    public static Task Run(Action action, CancellationToken cancellationToken);
    public static Task`1<TResult> Run(Func`1<TResult> function);
    public static Task`1<TResult> Run(Func`1<TResult> function, CancellationToken cancellationToken);
    public static Task Run(Func`1<Task> function);
    public static Task Run(Func`1<Task> function, CancellationToken cancellationToken);
    public static Task`1<TResult> Run(Func`1<Task`1<TResult>> function);
    public static Task`1<TResult> Run(Func`1<Task`1<TResult>> function, CancellationToken cancellationToken);
    public static Task Delay(int dueTime);
    public static Task Delay(TimeSpan dueTime);
    public static Task Delay(TimeSpan dueTime, CancellationToken cancellationToken);
    public static Task Delay(int dueTime, CancellationToken cancellationToken);
    public static Task WhenAll(Task[] tasks);
    public static Task`1<TResult[]> WhenAll(Task`1[] tasks);
    public static Task WhenAll(IEnumerable`1<Task> tasks);
    public static Task`1<TResult[]> WhenAll(IEnumerable`1<Task`1<TResult>> tasks);
    private static Task`1<TResult> WhenAllCore(IEnumerable`1<Task> tasks, Action`2<Task[], TaskCompletionSource`1<TResult>> setResultAction);
    public static Task`1<Task> WhenAny(Task[] tasks);
    public static Task`1<Task> WhenAny(IEnumerable`1<Task> tasks);
    public static Task`1<Task`1<TResult>> WhenAny(Task`1[] tasks);
    public static Task`1<Task`1<TResult>> WhenAny(IEnumerable`1<Task`1<TResult>> tasks);
    public static Task`1<TResult> FromResult(TResult result);
    public static YieldAwaitable Yield();
    private static void AddPotentiallyUnwrappedExceptions(List`1& targetList, Exception exception);
    [CompilerGeneratedAttribute]
private static Task <.cctor>b__0();
    [CompilerGeneratedAttribute]
private static void <WhenAll>b__7(Task[] completedTasks, TaskCompletionSource`1<object> tcs);
    [CompilerGeneratedAttribute]
private static void <WhenAll>b__9(Task[] completedTasks, TaskCompletionSource`1<TResult[]> tcs);
    [CompilerGeneratedAttribute]
private static TResult <WhenAll>b__a(Task`1<TResult> t);
}
