[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.ApplicationOptionsExtensions : object {
    [ExtensionAttribute]
internal static bool IsLoggingToFileEnabled(IApplicationOptions options);
    [ExtensionAttribute]
internal static string LogFile(IApplicationOptions options);
}
internal class JetBrains.ReSharper.TestRunner.Bootstrapper`1 : object {
    private IApplicationOptions myOptions;
    private ILogger myLogger;
    protected Bootstrapper`1(IApplicationOptions options);
    public void Run();
    private void TryHideOurProbingDir();
    private void TrySetupTraceListener();
    private void TryAttachDebugger();
    private void TryWatchForParentProcessExit();
    private static void RunAppInSeparateLoadContext(ILifetimeScope scope);
    internal IContainer BuildContainer(LifetimeDefinition ltd);
    public static int Run(IApplicationOptions options);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Extensions.AutofacExtensions : object {
    [ExtensionAttribute]
public static T ResolveUnregistered(ILifetimeScope scope);
    [ExtensionAttribute]
public static T ResolveUnregistered(ILifetimeScope scope, Parameter[] parameters);
    [ExtensionAttribute]
public static object ResolveUnregistered(ILifetimeScope scope, Type serviceType, Parameter[] parameters);
    [ExtensionAttribute]
public static void RegisterAssemblyModulesFast(ContainerBuilder builder, Assembly assembly);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<Type> <RegisterAssemblyModulesFast>g__GetLoadableTypes|3_0(Assembly asm);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Extensions.CustomAttributeProviderExtensions : object {
    [ExtensionAttribute]
public static T GetAttribute(ICustomAttributeProvider provider, bool inherit);
    [ExtensionAttribute]
public static T[] GetAttributes(ICustomAttributeProvider provider, bool inherit);
    [ExtensionAttribute]
public static bool HasAttribute(ICustomAttributeProvider provider, bool inherit);
    [ExtensionAttribute]
public static bool HasAttribute(ICustomAttributeProvider provider, Type attributeType, bool inherit);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Extensions.LoadContextExtensions : object {
    [ExtensionAttribute]
public static void RunInContext(ILoadContext ctx, Expression`1<Action`1<T>> expression, T1 p1);
    [ExtensionAttribute]
public static void RunInContext(ILoadContext ctx, Expression`1<Action`1<T>> expression, T1 p1, T2 p2);
    [ExtensionAttribute]
public static void RunInContext(ILoadContext ctx, Expression`1<Action`1<T>> expression, T1 p1, T2 p2, T3 p3);
    [ExtensionAttribute]
public static void RunInContext(ILoadContext ctx, Expression`1<Action`1<T>> expression, Object[] args);
    [ExtensionAttribute]
public static TResult RunInContext(ILoadContext ctx, Expression`1<Func`2<T, TResult>> expression, Object[] args);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Extensions.StringExtensions : object {
    [ExtensionAttribute]
public static string EnsureWellformedDirectoryPath(string str);
    [ExtensionAttribute]
public static bool EndsWith(string str, char value);
}
public static class JetBrains.ReSharper.TestRunner.Extensions.TaskEx : object {
    public static Task CompletedTask;
    private static TaskEx();
    public static Task`1<TResult> FromException(Exception exception);
    public static Task Delay(TimeSpan delay, CancellationToken cancellationToken);
    public static Task Delay(int millisecondsDelay, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Extensions.TypeExtensions : object {
    [ExtensionAttribute]
public static bool IsGenericDefinedAs(Type type, Type template, bool recursive);
    [ExtensionAttribute]
public static bool IsAssignableFrom(Type type);
    [ExtensionAttribute]
public static bool IsAssignableTo(Type type);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.TestRunner.Extensions.TypeExtensions/<GetHierarchy>d__3")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetHierarchy(Type type, bool includeSelf);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.TestRunner.Extensions.TypeExtensions/<GetInterfaces>d__4")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetInterfaces(Type type, bool includeSelf);
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetInterfaces(Type type, Type template);
    [ExtensionAttribute]
public static bool Inherits(Type type);
    [ExtensionAttribute]
public static bool Inherits(Type type, Type parentType);
    [ExtensionAttribute]
public static bool Implements(Type type);
    [ExtensionAttribute]
public static bool Implements(Type type, Type interface);
    [ExtensionAttribute]
public static Type[] GetGenericArgumentsOf(Type type, Type template);
}
public interface JetBrains.ReSharper.TestRunner.IApplication {
    public abstract virtual void Run();
}
public interface JetBrains.ReSharper.TestRunner.IApplicationOptions {
    public string LogFolder { get; }
    public LoggingLevel LogLevel { get; }
    public bool WaitForDebugger { get; }
    public Assembly EntryPoint { get; }
    public abstract virtual string get_LogFolder();
    public abstract virtual LoggingLevel get_LogLevel();
    public abstract virtual bool get_WaitForDebugger();
    public abstract virtual Assembly get_EntryPoint();
}
public interface JetBrains.ReSharper.TestRunner.IConnectOptions {
    public string Host { get; }
    public int Port { get; }
    public abstract virtual string get_Host();
    public abstract virtual int get_Port();
}
public interface JetBrains.ReSharper.TestRunner.IListenOptions {
    public RemoteAgentMode Mode { get; }
    public abstract virtual RemoteAgentMode get_Mode();
}
[RdExtAttribute("JetBrains.ReSharper.TestRunner.Abstractions.IClientEndpoint")]
internal class JetBrains.ReSharper.TestRunner.Implementation.ClientEndpoint : RdExtReflectionBindableBase {
    private TaskFactory myFactory;
    private IDictionary`2<Type, Func`2<IAutoRegisterInProtocol, Task`1<IAutoRegisterInProtocol>>> myHandlers;
    private ILogger myLogger;
    public ClientEndpoint(IEnumerable`1<IMessageHandlerMarker> markers, TaskScheduler scheduler);
    private bool TryRegisterHandler(IMessageHandlerMarker marker);
    private bool TryRegisterHandlerWithResult(IMessageHandlerMarker marker);
    private bool TryRegisterAsyncHandler(IMessageHandlerMarker marker);
    private bool TryRegisterAsyncHandlerWithResult(IMessageHandlerMarker marker);
    private void RegisterGeneric(IMessageHandlerMarker marker);
    public sealed virtual Task`1<IAutoRegisterInProtocol> SendMessage(IAutoRegisterInProtocol message);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.TestRunner.Implementation.ClientEndpoint/<RunAndLog>d__10")]
private Task`1<IAutoRegisterInProtocol> RunAndLog(Func`2<IAutoRegisterInProtocol, Task`1<IAutoRegisterInProtocol>> handler, IAutoRegisterInProtocol message);
}
internal class JetBrains.ReSharper.TestRunner.Implementation.ClientMessageBroker : LongLivedMarshalByRefObject {
    private IServerEndpoint myServer;
    private ILogger myLogger;
    public ClientMessageBroker(IServerEndpoint server);
    public sealed virtual Task SendMessage(IMessage message);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.TestRunner.Implementation.ClientMessageBroker/<SendMessage>d__4`1")]
public sealed virtual Task`1<TResult> SendMessage(IMessage`1<TResult> message);
}
internal class JetBrains.ReSharper.TestRunner.Implementation.FileSystem : LongLivedMarshalByRefObject {
    private IFileSystemRoot myRoot;
    private IFileSystemCallbacks myReporter;
    private ILogger myLogger;
    private Lazy`1<string> myCacheDirectory;
    public string CacheDirectory { get; }
    public FileSystem(IFileSystemRoot root, IFileSystemCallbacks reporter);
    public sealed virtual string get_CacheDirectory();
    private string CreateCacheDirectoryAndReport();
    public sealed virtual string CreateTempDirectory();
}
internal class JetBrains.ReSharper.TestRunner.Implementation.FileSystemCallbacks : object {
    private IMessageBroker myServer;
    public FileSystemCallbacks(IMessageBroker server);
    public sealed virtual void OnCacheDirectoryCreated(string pathToCacheDirectory);
}
internal class JetBrains.ReSharper.TestRunner.Implementation.FileSystemRoot : LongLivedMarshalByRefObject {
    private ILogger myLogger;
    private Lazy`1<string> myCacheDirectory;
    public string CacheDirectory { get; }
    public string CacheDirectoryIfExists { get; }
    public FileSystemRoot(ILogger logger);
    public sealed virtual string get_CacheDirectory();
    public sealed virtual string get_CacheDirectoryIfExists();
    private string CreateCacheDirectory();
}
internal interface JetBrains.ReSharper.TestRunner.Implementation.IFileSystemCallbacks {
    public abstract virtual void OnCacheDirectoryCreated(string pathToCacheDirectory);
}
public interface JetBrains.ReSharper.TestRunner.Implementation.IFileSystemRoot {
    public string CacheDirectory { get; }
    public string CacheDirectoryIfExists { get; }
    public abstract virtual string get_CacheDirectory();
    public abstract virtual string get_CacheDirectoryIfExists();
}
internal class JetBrains.ReSharper.TestRunner.Implementation.InteroperableMessageBroker : LongLivedMarshalByRefObject {
    private IMessageBroker myInner;
    public InteroperableMessageBroker(IMessageBroker inner);
    public sealed virtual void SendMessage(IMessage message, MarshaledTask task);
    public sealed virtual void SendMessage(IMessage`1<TResult> message, MarshaledTask`1<TResult> task);
}
internal interface JetBrains.ReSharper.TestRunner.Implementation.IRemoteAgentEndpoint {
    public IViewableSet`1<ILifetimeScope> OnBackendConnected { get; }
    public abstract virtual IViewableSet`1<ILifetimeScope> get_OnBackendConnected();
}
internal class JetBrains.ReSharper.TestRunner.Implementation.PoorMansBlockingCollection`1 : object {
    private ConcurrentQueue`1<T> myQueue;
    private Semaphore myHasItems;
    public void Add(T item);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.TestRunner.Implementation.PoorMansBlockingCollection`1/<GetConsumingEnumerable>d__3")]
public IEnumerable`1<T> GetConsumingEnumerable(CancellationToken ct);
    public List`1<T> ToList();
}
public class JetBrains.ReSharper.TestRunner.Implementation.Registrations : MulticastDelegate {
    public Registrations(object object, IntPtr method);
    public virtual void Invoke(ContainerBuilder builder);
    public virtual IAsyncResult BeginInvoke(ContainerBuilder builder, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class JetBrains.ReSharper.TestRunner.Implementation.RemoteAgentEndpoint : object {
    public static string Tag { get; }
    public static string get_Tag();
}
public class JetBrains.ReSharper.TestRunner.Implementation.SingleThreadTaskScheduler : TaskScheduler {
    [ThreadStaticAttribute]
private static bool ourIsExecuting;
    private ILogger myLogger;
    private PoorMansBlockingCollection`1<Task> myQueue;
    private Lazy`1<Thread> myThread;
    private CancellationToken myCt;
    public int MaximumConcurrencyLevel { get; }
    public SingleThreadTaskScheduler(CancellationToken ct);
    public virtual int get_MaximumConcurrencyLevel();
    private void RunOnCurrentThread();
    protected virtual IEnumerable`1<Task> GetScheduledTasks();
    protected virtual void QueueTask(Task task);
    protected virtual bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued);
    [CompilerGeneratedAttribute]
private Thread <.ctor>b__7_0();
}
public class JetBrains.ReSharper.TestRunner.Implementation.TestRunnerSerializersFacade : ReflectionSerializersFacade {
}
internal class JetBrains.ReSharper.TestRunner.Implementation.ThreadAffinedClientMessageBroker : LongLivedMarshalByRefObject {
    private IMessageBroker myInner;
    private TaskFactory myFactory;
    public ThreadAffinedClientMessageBroker(Lifetime lifetime, IMessageBroker inner);
    public sealed virtual Task SendMessage(IMessage message);
    public sealed virtual Task`1<TResult> SendMessage(IMessage`1<TResult> message);
    [CompilerGeneratedAttribute]
private Task <SendMessage>b__3_0(object o);
    [CompilerGeneratedAttribute]
private Task`1<TResult> <SendMessage>b__4_0(object o);
}
public static class JetBrains.ReSharper.TestRunner.Isolation.AppDomainSetup : object {
    public static IAppDomainSetup FromTestRequest(ILifetimeScope scope, TestRequest request);
    public static IAppDomainSetup Default();
}
internal class JetBrains.ReSharper.TestRunner.Isolation.ApplicationLoadContext : object {
    private ILifetimeScope myScope;
    [CompilerGeneratedAttribute]
private IAssemblyResolver <AssemblyResolver>k__BackingField;
    public string Name { get; }
    public bool IsCollectible { get; }
    public IAssemblyResolver AssemblyResolver { get; }
    public ApplicationLoadContext(ILifetimeScope scope);
    public sealed virtual string get_Name();
    public sealed virtual bool get_IsCollectible();
    [CompilerGeneratedAttribute]
public sealed virtual IAssemblyResolver get_AssemblyResolver();
    public sealed virtual void Unload();
    public sealed virtual object Create(Type type, T1 p1);
    public sealed virtual object Create(Type type, T1 p1, T2 p2);
    public sealed virtual object Create(Type type, T1 p1, T2 p2, T3 p3);
    public sealed virtual object Create(Type type, Object[] args);
}
public interface JetBrains.ReSharper.TestRunner.Isolation.IAppDomainSetup {
    public abstract virtual AppDomainSetup Setup(string name);
}
internal interface JetBrains.ReSharper.TestRunner.Isolation.IApplicationLoadContext {
}
public interface JetBrains.ReSharper.TestRunner.Isolation.IInAppDomainActivationBehavior {
    public abstract virtual object Create(AppDomain appDomain, IAssemblyResolver assemblyResolver, Type type, Parameter[] parameters);
}
public interface JetBrains.ReSharper.TestRunner.Isolation.ILoadContextTracker {
    public abstract virtual void WaitForUnload();
    public abstract virtual void Track(ILoadContext ctx);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Isolation.InAppDomainActivationBehavior : object {
    [ExtensionAttribute]
public static object Create(IInAppDomainActivationBehavior behavior, AppDomain appDomain, IAssemblyResolver assemblyResolver, Type type, Object[] args);
}
public class JetBrains.ReSharper.TestRunner.Isolation.LoadContext : object {
    private string myName;
    private IAppDomainSetup mySetup;
    private IInAppDomainActivationBehavior myActivationBehavior;
    private ILogger myLogger;
    private bool myIsCollectible;
    private AppDomain myAppDomain;
    private AssemblyLoader myAssemblyLoader;
    public string Name { get; }
    public bool IsCollectible { get; }
    public IAssemblyResolver AssemblyResolver { get; }
    public LoadContext(string name, IAppDomainSetup setup, IInAppDomainActivationBehavior activationBehavior, ILoadContextTracker tracker, ILogger logger, bool isCollectible);
    public sealed virtual string get_Name();
    public sealed virtual bool get_IsCollectible();
    public sealed virtual IAssemblyResolver get_AssemblyResolver();
    public sealed virtual void Unload();
    public sealed virtual object Create(Type type, T1 p1);
    public sealed virtual object Create(Type type, T1 p1, T2 p2);
    public sealed virtual object Create(Type type, T1 p1, T2 p2, T3 p3);
    public sealed virtual object Create(Type type, Object[] args);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <Unload>b__14_0();
}
internal class JetBrains.ReSharper.TestRunner.Isolation.LoadContextTracker : object {
    private ILogger myLogger;
    private string myCtxName;
    private WeakReference myWeakReference;
    public LoadContextTracker(ILogger logger);
    public sealed virtual void Track(ILoadContext ctx);
    public sealed virtual void WaitForUnload();
}
public static class JetBrains.ReSharper.TestRunner.Isolation.ShadowCopyBehavior : object {
    public static IDisposable Apply(TestContainer container, IFileSystem fileSystem);
}
public static class JetBrains.ReSharper.TestRunner.Logging.Log : object {
    private static string Layout;
    private static LoggerFactory ourFactory;
    [CompilerGeneratedAttribute]
private static bool <HasErrors>k__BackingField;
    public static bool HasErrors { get; private set; }
    [CompilerGeneratedAttribute]
public static bool get_HasErrors();
    [CompilerGeneratedAttribute]
private static void set_HasErrors(bool value);
    internal static void Setup(IApplicationOptions options);
    internal static void InstallTestRunnerServerLoggingSink(Lifetime lifetime, IMessageBroker server, IApplicationOptions options);
    public static void Flush();
}
internal class JetBrains.ReSharper.TestRunner.Logging.LoggingModule : object {
    private static HashSet`1<Guid> ourTouchedRegistrations;
    private static LoggingModule();
    public static T Attach(T scope);
    private static void OnChildLifetimeScopeBeginning(object sender, LifetimeScopeBeginningEventArgs e);
    private static void AttachToComponentRegistrations(IComponentRegistry registry);
    private static void OnComponentPreparing(object sender, PreparingEventArgs e);
}
public static class JetBrains.ReSharper.TestRunner.ProcessInfo : object {
    private static Lazy`1<CachedData> ourData;
    public static string Name { get; }
    public static int Id { get; }
    private static ProcessInfo();
    public static string get_Name();
    public static int get_Id();
    private static CachedData GetData();
}
public enum JetBrains.ReSharper.TestRunner.RemoteAgentMode : Enum {
    public int value__;
    public static RemoteAgentMode Local;
    public static RemoteAgentMode Remote;
}
public static class JetBrains.ReSharper.TestRunner.Utils.Call : object {
    public static void Generic(Expression`1<Action> expression, Type[] typeArgs);
    public static T Generic(Expression`1<Func`1<T>> expression, Type[] typeArgs);
    private static object Generic(MethodCallExpression methodCall, Type[] typeArgs);
    private static object ExtractParameter(Expression parameter);
}
public static class JetBrains.ReSharper.TestRunner.Utils.DelegateUtils : object {
    public static T CreateCompatibleDelegate(object firstArgument, MethodInfo method);
}
internal class JetBrains.ReSharper.TestRunner.Utils.MethodInvoker : object {
    private MethodInfo myMethod;
    private Object[] myMethodArgs;
    private int myCurrentIdx;
    public MethodInvoker(Expression expr);
    public object InvokeOn(object instance);
    private void Visit(Expression expr);
    private void VisitLambda(LambdaExpression node);
    private void VisitMethodCall(MethodCallExpression node);
    private void VisitMember(MemberExpression node);
    private void VisitConstant(ConstantExpression node);
    [CompilerGeneratedAttribute]
internal static object <VisitMember>g__GetValue|8_0(Expression expr, <>c__DisplayClass8_0& );
}
internal static class JetBrains.ReSharper.TestRunner.Utils.ProcessUtil : object {
    public static int GetCurrentProcessId();
    public static Nullable`1<int> TryGetParentProcessId();
}
