[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class JetBrains.Rd.Reflection.BindableChildrenUtil : object {
    private static Dictionary`2<Type, Action`2<IReflectionBindable, PrettyPrinter>> ourPrettyPrinters;
    private static Dictionary`2<Type, Action`1<IReflectionBindable>> ourFillBindableChildren;
    private static object ourPrettyPrintersLock;
    private static BindableChildrenUtil();
    internal static void PrettyPrint(PrettyPrinter p, IReflectionBindable instance);
    internal static void FillBindableFields(IReflectionBindable instance);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.Rd.Reflection.BuiltInSerializers : object {
    public static bool Has(TypeInfo t);
    public static BuiltInType GetBuiltInType(TypeInfo t);
    public static SerializerPair TryGet(TypeInfo typeInfo, Func`2<Type, SerializerPair> getInstanceSerializer, Nullable`1<BuiltInType> type);
    public static bool HasBuiltInAttribute(TypeInfo t);
    public static bool HasBuiltInFields(TypeInfo t);
    private static SerializerPair GetPairFromFields(TypeInfo typeInfo);
    public static MethodInfo GetReadStaticProtocolMethod(TypeInfo typeInfo);
    public static MethodInfo GetReadStaticMethod(TypeInfo typeInfo);
    public static MethodInfo GetReadStaticSerializer(TypeInfo typeInfo, Type argumentType);
    public static MethodInfo GetReadStaticSerializer(TypeInfo typeInfo, Type key, Type value);
    public static MethodInfo GetWriteProtocolMethod(TypeInfo typeInfo);
    public static MethodInfo GetWriteProtocolStaticMethod(TypeInfo typeInfo);
    private static MethodInfo GetWriteMethod(TypeInfo typeInfo);
    public static MethodInfo GetWriteStaticMethod(TypeInfo typeInfo);
    [CompilerGeneratedAttribute]
internal static BuiltInType <GetBuiltInType>g__CheckWriteMethod|2_0(Type ownerType, MethodInfo methodInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.Rd.Reflection.CollectionSerializers : object {
    public static SerializerPair CreateListSerializerPair(SerializerPair itemSerializer);
    public static SerializerPair CreateDictionarySerializerPair(SerializerPair keySerializer, SerializerPair valueSerializer);
    public static SerializerPair CreateReadOnlyDictionarySerializerPair(SerializerPair keySerializer, SerializerPair valueSerializer);
    private static CtxReadDelegate`1<Dictionary`2<TKey, TValue>> CreateReadDictionary(SerializerPair keySerializer, SerializerPair valueSerializer);
}
[NullableContextAttribute("1")]
public interface JetBrains.Rd.Reflection.IBuiltInMarshaller`1 {
    public abstract virtual T Read(SerializationCtx ctx, UnsafeReader reader);
    public abstract virtual void Write(SerializationCtx ctx, UnsafeWriter writer, T value);
}
[NullableContextAttribute("1")]
public interface JetBrains.Rd.Reflection.IProxyGenerator {
    public abstract virtual Type CreateType(Type interfaceType);
    public abstract virtual DynamicMethod CreateAdapter(Type selfType, MethodInfo method);
}
public interface JetBrains.Rd.Reflection.IProxyTypeMarker {
}
internal interface JetBrains.Rd.Reflection.IReflectionBindable {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<KeyValuePair`2<string, object>> BindableChildren { get; }
    public abstract virtual List`1<KeyValuePair`2<string, object>> get_BindableChildren();
    public abstract virtual void OnActivated();
    public abstract virtual void EnsureBindableChildren();
}
[NullableContextAttribute("1")]
public interface JetBrains.Rd.Reflection.IScalarSerializers {
    public abstract virtual SerializerPair CreateSerializer(Type type, ISerializersSource serializers);
}
[NullableContextAttribute("1")]
public interface JetBrains.Rd.Reflection.ISerializersSource {
    public abstract virtual SerializerPair GetOrRegisterSerializerPair(Type type, bool instance);
    public abstract virtual SerializerPair GetPolymorphic();
    public abstract virtual SerializerPair GetPolymorphic(Type type);
}
[NullableContextAttribute("1")]
public interface JetBrains.Rd.Reflection.ITypesCatalog {
    [NullableContextAttribute("2")]
public abstract virtual Type GetById(RdId id);
    public abstract virtual RdId GetByType(Type type);
    public abstract virtual void AddType(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Reflection.ProxyGenerator : object {
    private static ILog ourLog;
    private static string DynamicAssemblyName;
    private bool myAllowSave;
    public static Type[] ValueTuples;
    public static int MaxTuplePayload;
    private Lazy`1<AssemblyBuilder> myAssemblyBuilder;
    private Lazy`1<ModuleBuilder> myModuleBuilder;
    private static Lazy`1<ProxyGeneratorMembers> ourLazyMembers { get; }
    private static ProxyGeneratorMembers Members { get; }
    public AssemblyBuilder DynamicAssembly { get; }
    public ModuleBuilder DynamicModule { get; }
    public ProxyGenerator(bool allowSave);
    private static ProxyGenerator();
    private static Lazy`1<ProxyGeneratorMembers> get_ourLazyMembers();
    private static ProxyGeneratorMembers get_Members();
    public AssemblyBuilder get_DynamicAssembly();
    public ModuleBuilder get_DynamicModule();
    public sealed virtual Type CreateType(Type interfaceType);
    public sealed virtual DynamicMethod CreateAdapter(Type selfType, MethodInfo method);
    public static bool IsSync(MethodInfo impl);
    private void ImplementMember(TypeBuilderContext ctx, MemberInfo member);
    private void ImplementProperty(TypeBuilderContext ctx, PropertyInfo propertyInfo);
    public static Type[] GetRequstType(MethodInfo method);
    public static Type GetResponseType(MethodInfo method, bool unwrapTask);
    private void ImplementMethod(TypeBuilderContext ctx, MethodInfo method);
    private static string MakeBackingFieldName(string propertyName);
    public static string ProxyFieldName(MethodInfo method);
    [IteratorStateMachineAttribute("JetBrains.Rd.Reflection.ProxyGenerator/<GetBindableFieldsNames>d__34")]
public static IEnumerable`1<string> GetBindableFieldsNames(Type rpcInterface);
    private static void LoadArgument(ILGenerator ilgen, int nArg);
    [CompilerGeneratedAttribute]
private void <CreateType>g__ImplementInterface|24_0(Type baseInterface, TypeBuilderContext ctx);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Reflection.ProxyGeneratorCache : object {
    private ProxyGenerator myGenerator;
    private ConcurrentDictionary`2<Type, Type> myTypesCache;
    private ConcurrentDictionary`2<Type, SortedList`2<MethodInfo, DynamicMethod>> myAdaptersCache;
    public ProxyGeneratorCache(ProxyGenerator generator);
    public sealed virtual Type CreateType(Type interfaceType);
    public sealed virtual DynamicMethod CreateAdapter(Type selfType, MethodInfo method);
}
[ExtensionAttribute]
public static class JetBrains.Rd.Reflection.ProxyGeneratorEx : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Type CreateType(IProxyGenerator proxyGenerator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.Rd.Reflection.ProxyGeneratorMembers : object {
    public ConstructorInfo RdExtConstructor;
    public FieldInfo UnitInstance;
    public MethodInfo EternalLifetimeGet;
    public MethodInfo SyncNested4;
    public MethodInfo ToTask;
    public static MethodInfo CreateRpcTimeoutMethod;
    private static ProxyGeneratorMembers();
    public static MethodInfo StartRdCall(Type rdCallType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[UsedImplicitlyAttribute("2")]
public static class JetBrains.Rd.Reflection.ProxyGeneratorUtil : object {
    public static Task`1<T> ToTask(IRdTask`1<T> task);
    public static TRes SyncNested(RdCall`2<TReq, TRes> call, TReq request, RpcTimeouts timeouts);
    public static TRes SyncNested(RdCall`2<TReq, TRes> call, Lifetime lifetime, TReq request, RpcTimeouts timeouts);
    public static RpcTimeouts CreateRpcTimeouts(long ticksWarning, long ticksError);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute("3")]
[BaseTypeRequiredAttribute("JetBrains.Rd.Reflection.RdExtReflectionBindableBase")]
public class JetBrains.Rd.Reflection.RdExtAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <RdRpcInterface>k__BackingField;
    public Type RdRpcInterface { get; }
    [NullableContextAttribute("1")]
public RdExtAttribute(Type rdRpcInterface);
    [CompilerGeneratedAttribute]
public Type get_RdRpcInterface();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Reflection.RdExtReflectionBindableBase : RdExtBase {
    private bool myBindableChildrenFilled;
    [CompilerGeneratedAttribute]
private Action`1<ISerializers> <Register>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<KeyValuePair`2<string, object>> JetBrains.Rd.Reflection.IReflectionBindable.BindableChildren { get; }
    protected Action`1<ISerializers> Register { get; }
    private sealed virtual override List`1<KeyValuePair`2<string, object>> JetBrains.Rd.Reflection.IReflectionBindable.get_BindableChildren();
    [CompilerGeneratedAttribute]
protected virtual Action`1<ISerializers> get_Register();
    private sealed virtual override void JetBrains.Rd.Reflection.IReflectionBindable.EnsureBindableChildren();
    public virtual void OnActivated();
    protected virtual void PreInitBindableFields(Lifetime lifetime);
    protected virtual void InitBindableFields(Lifetime lifetime);
    public virtual void Identify(IIdentities identities, RdId id);
    public virtual string ToString();
    public virtual void Print(PrettyPrinter p);
}
[MeansImplicitUseAttribute("3")]
[AttributeUsageAttribute("20")]
[BaseTypeRequiredAttribute("JetBrains.Rd.Reflection.RdReflectionBindableBase")]
public class JetBrains.Rd.Reflection.RdModelAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Reflection.RdReflectionBindableBase : RdBindableBase {
    private bool bindableChildrenFilled;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<KeyValuePair`2<string, object>> JetBrains.Rd.Reflection.IReflectionBindable.BindableChildren { get; }
    private sealed virtual override List`1<KeyValuePair`2<string, object>> JetBrains.Rd.Reflection.IReflectionBindable.get_BindableChildren();
    private sealed virtual override void JetBrains.Rd.Reflection.IReflectionBindable.EnsureBindableChildren();
    public virtual void OnActivated();
    protected virtual void AssertBindingThread();
    protected virtual void InitBindableFields(Lifetime lifetime);
    protected virtual void PreInitBindableFields(Lifetime lifetime);
    public virtual void Identify(IIdentities identities, RdId id);
    public virtual string ToString();
    public virtual void Print(PrettyPrinter p);
}
[AttributeUsageAttribute("1024")]
[MeansImplicitUseAttribute("3")]
public class JetBrains.Rd.Reflection.RdRpcAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[MeansImplicitUseAttribute("3")]
[AttributeUsageAttribute("1052")]
public class JetBrains.Rd.Reflection.RdScalarAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Marshaller>k__BackingField;
    public Type Marshaller { get; }
    [NullableContextAttribute("1")]
public RdScalarAttribute(Type marshaller);
    [CompilerGeneratedAttribute]
public Type get_Marshaller();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Reflection.ReflectionRdActivator : object {
    private static ILog ourLog;
    private ReflectionSerializers mySerializers;
    private IProxyGenerator myProxyGenerator;
    [NullableAttribute("2")]
private ITypesCatalog myTypesCatalog;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ThreadStaticAttribute]
private static Queue`1<Type> myCurrentActivationChain;
    public ReflectionSerializers Serializers { get; }
    public IProxyGenerator Generator { get; }
    [NullableAttribute("2")]
public ITypesCatalog TypesCatalog { get; }
    public ReflectionRdActivator(ReflectionSerializers serializers, ITypesCatalog typesCatalog);
    public ReflectionRdActivator(ReflectionSerializers serializers, IProxyGenerator proxyGenerator, ITypesCatalog typesCatalog);
    private static ReflectionRdActivator();
    public ReflectionSerializers get_Serializers();
    public IProxyGenerator get_Generator();
    [NullableContextAttribute("2")]
public ITypesCatalog get_TypesCatalog();
    public T ActivateBind(Lifetime lifetime, IProtocol protocol);
    [PublicAPIAttribute]
public RdExtReflectionBindableBase ActivateBind(Type type, Lifetime lifetime, IProtocol protocol);
    public T Activate();
    public object Activate(Type type, string name);
    public object Activate(Type type);
    private object ActivateRd(Type type);
    public object ReflectionInit(object instance);
    private object ReflectionInitInternal(object instance);
    private void EnsureFakeTupleRegistered(Type type);
    public static void SetHandlerTask(RdCall`2<TReq, TRes> endpoint, Func`3<Lifetime, TReq, Task`1<TRes>> handler);
    public static void SetHandlerTaskVoid(RdCall`2<TReq, Unit> endpoint, Func`3<Lifetime, TReq, Task> handler);
    public static void SetHandler(RdCall`2<TReq, TRes> endpoint, Func`3<Lifetime, TReq, RdTask`1<TRes>> handler);
    private object ActivateMember(Type memberType, string memberName);
    [NullableContextAttribute("2")]
private static void SetAsync(object result);
    private SerializerPair GetProperSerializer(Type type);
    private object ActivateGenericMember(string memberName, TypeInfo memberType);
    [UsedImplicitlyAttribute]
private static void SetOptimizeNested1(object container);
    [UsedImplicitlyAttribute]
private static void SetOptimizeNested2(object container);
    public static string GetTypeName(Type type);
    [CompilerGeneratedAttribute]
internal static bool <ActivateGenericMember>g__IsMonomorphic|28_0(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Reflection.ReflectionSerializers : object {
    private Dictionary`2<Type, SerializerPair> myStaticSerializers;
    private Dictionary`2<Type, SerializerPair> myInstanceSerializers;
    private bool myPolySerializersSealed;
    private ITypesCatalog myCatalog;
    private IScalarSerializers myScalars;
    private object myLock;
    private Queue`1<Type> myCurrentSerializersChain;
    [CompilerGeneratedAttribute]
private ISignal`1<Type> <BeforeCreation>k__BackingField;
    private static MethodInfo ourGetPolymorphicGenericMethodInfo;
    public IScalarSerializers Scalars { get; }
    public ISignal`1<Type> BeforeCreation { get; }
    public ReflectionSerializers(ITypesCatalog typeCatalog, IScalarSerializers scalars, Predicate`1<Type> blackListChecker, bool withExtensions);
    private static ReflectionSerializers();
    public IScalarSerializers get_Scalars();
    [CompilerGeneratedAttribute]
public ISignal`1<Type> get_BeforeCreation();
    public sealed virtual SerializerPair GetOrRegisterSerializerPair(Type type, bool instance);
    private SerializerPair CreateScalar(Type serializerType, bool instanceSerializer);
    [NullableContextAttribute("2")]
private void RegisterModelSerializer();
    private SerializerPair CreateGenericSerializer(TypeInfo type, TypeInfo implementation);
    public sealed virtual void Register(CtxReadDelegate`1<T> reader, CtxWriteDelegate`1<T> writer, Nullable`1<long> predefinedId);
    public void Register(Type type, SerializerPair pair);
    [NullableContextAttribute("0")]
public sealed virtual void RegisterEnum();
    public sealed virtual void RegisterToplevelOnce(Type toplevelType, Action`1<ISerializers> registerDeclaredTypesSerializers);
    [NullableContextAttribute("2")]
public sealed virtual T Read(SerializationCtx ctx, UnsafeReader reader, CtxReadDelegate`1<T> unknownInstanceReader);
    public sealed virtual void Write(SerializationCtx ctx, UnsafeWriter writer, T value);
    public sealed virtual SerializerPair GetPolymorphic(Type type);
    public sealed virtual SerializerPair GetPolymorphic();
    [NullableContextAttribute("2")]
private T ReadPolymorphic(SerializationCtx ctx, UnsafeReader reader);
    private void WritePolymorphic(SerializationCtx ctx, UnsafeWriter writer, T value);
    [CompilerGeneratedAttribute]
private SerializerPair <GetOrRegisterSerializerPair>b__13_1(Type t);
    [CompilerGeneratedAttribute]
private SerializerPair <GetOrRegisterSerializerPair>b__13_2(Type t);
    [CompilerGeneratedAttribute]
private SerializerPair <CreateGenericSerializer>b__16_0(Type t);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Reflection.ReflectionSerializersFacade : object {
    [CompilerGeneratedAttribute]
private ReflectionRdActivator <Activator>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypesCatalog <TypesCatalog>k__BackingField;
    [CompilerGeneratedAttribute]
private IScalarSerializers <ScalarSerializers>k__BackingField;
    [CompilerGeneratedAttribute]
private ReflectionSerializers <Serializers>k__BackingField;
    [CompilerGeneratedAttribute]
private IProxyGenerator <ProxyGenerator>k__BackingField;
    public ReflectionRdActivator Activator { get; }
    public ITypesCatalog TypesCatalog { get; }
    public IScalarSerializers ScalarSerializers { get; }
    public ReflectionSerializers Serializers { get; }
    public IProxyGenerator ProxyGenerator { get; }
    [NullableContextAttribute("2")]
public ReflectionSerializersFacade(ITypesCatalog typesCatalog, IScalarSerializers scalarSerializers, ReflectionSerializers reflectionSerializers, IProxyGenerator proxyGenerator, ReflectionRdActivator activator, bool allowSave, Predicate`1<Type> blackListChecker);
    [CompilerGeneratedAttribute]
public ReflectionRdActivator get_Activator();
    [CompilerGeneratedAttribute]
public ITypesCatalog get_TypesCatalog();
    [CompilerGeneratedAttribute]
public IScalarSerializers get_ScalarSerializers();
    [CompilerGeneratedAttribute]
public ReflectionSerializers get_Serializers();
    [CompilerGeneratedAttribute]
public IProxyGenerator get_ProxyGenerator();
    public TInterface ActivateProxy(Lifetime lifetime, IProtocol protocol);
    public T InitBind(T instance, Lifetime lifetime, IProtocol protocol);
    private static void Bind(IRdBindable instance, Lifetime lifetime, IProtocol protocol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.Rd.Reflection.ReflectionSerializerVerifier : object {
    private static HashSet`1<Type> ourPrimitiveTypes;
    private static string ourFakeTupleFullName;
    private static ReflectionSerializerVerifier();
    public static bool IsPrimitive(Type typeInfo);
    public static bool IsModelMemberDeclaration(MemberInfo memberInfo);
    public static bool CanBeNull(Type type);
    private static bool IsFieldType(TypeInfo typeInfo, bool canBeArray);
    private static bool IsNullable(TypeInfo typeInfo, Func`2<Type, bool> filter);
    public static bool IsMemberDeclaration(MemberInfo memberInfo);
    public static bool IsMemberType(TypeInfo typeInfo);
    public static bool IsScalar(Type type);
    public static void AssertEitherExtModelAttribute(TypeInfo type);
    public static void AssertRoot(TypeInfo type);
    public static bool IsValueTuple(TypeInfo type);
    public static bool HasRdExtAttribute(TypeInfo type);
    public static void AssertValidRdExt(TypeInfo type);
    public static void AssertMemberDeclaration(MemberInfo member);
    public static void AssertValidRdModel(TypeInfo type);
    public static bool HasRdModelAttribute(TypeInfo type);
    private static void AssertValidScalar(TypeInfo type);
    public static void AssertDataMemberDeclaration(MemberInfo member);
    public static Type GetImplementingType(TypeInfo typeInfo);
    public static bool IsRpcAttributeDefined(Type interface);
    public static Type GetRpcInterface(TypeInfo typeInfo);
    [IteratorStateMachineAttribute("JetBrains.Rd.Reflection.ReflectionSerializerVerifier/<GetMethodsMap>d__23")]
public static IEnumerable`1<MethodInfo> GetMethodsMap(TypeInfo typeInfo, Type rpcInterface);
    [CompilerGeneratedAttribute]
internal static bool <IsFieldType>g__IsValidArray|5_0(<>c__DisplayClass5_0& );
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<MethodInfo> <GetMethodsMap>g__GetInterfaceMap|23_0(Type baseInterface, <>c__DisplayClass23_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1088")]
public class JetBrains.Rd.Reflection.RpcTimeoutAttribute : Attribute {
    [UsedImplicitlyAttribute]
public RpcTimeouts myTimeout;
    public RpcTimeouts Timeout { get; }
    public RpcTimeoutAttribute(double errorMilliseconds, double warnMilliseconds);
    public RpcTimeoutAttribute(bool rawValues, long errorTicks, long warnTicks);
    public RpcTimeouts get_Timeout();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.Rd.Reflection.ScalarCollectionExtension : object {
    [ExtensionAttribute]
[ObsoleteAttribute("NOP method. Basic collection serializers are enabled by default")]
public static ReflectionSerializers WithBasicCollectionSerializers(ReflectionSerializers self);
    public static void AttachCollectionSerializers(ReflectionSerializers self);
    private static SerializerPair CreateArraySerializer(ISerializersSource serializersSource);
    public static bool IsList(Type t);
    public static bool IsDictionary(Type t);
    public static bool IsReadOnlyDictionary(Type t);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Reflection.ScalarSerializer : object {
    [NullableAttribute("2")]
private ITypesCatalog myTypesCatalog;
    private Predicate`1<Type> myBlackListChecker;
    [NullableContextAttribute("2")]
public ScalarSerializer(ITypesCatalog typesCatalog, Predicate`1<Type> blackListChecker);
    public sealed virtual SerializerPair CreateSerializer(Type type, ISerializersSource serializers);
    private SerializerPair CreateCustomScalar(ISerializersSource serializers);
    private SerializerPair CreateEnumSerializer();
    private SerializerPair RegisterNullable(ISerializersSource serializers);
    private SerializerPair CreateValueTupleSerializer(ISerializersSource serializers);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("TR: {ReaderTypeString}, TW: {WriterTypeString}, Polymorphic: {IsPolymorphic}")]
public class JetBrains.Rd.Reflection.SerializerPair : object {
    private object myReader;
    private object myWriter;
    [CompilerGeneratedAttribute]
private bool <IsPolymorphic>k__BackingField;
    public object Reader { get; }
    public object Writer { get; }
    public bool IsPolymorphic { get; }
    public Type ReaderType { get; }
    public Type WriterType { get; }
    private string WriterTypeString { get; }
    private string ReaderTypeString { get; }
    public SerializerPair(object reader, object writer, bool isPolymorphic);
    public object get_Reader();
    public object get_Writer();
    [CompilerGeneratedAttribute]
public bool get_IsPolymorphic();
    public Type get_ReaderType();
    public Type get_WriterType();
    private string get_WriterTypeString();
    private string get_ReaderTypeString();
    public CtxReadDelegate`1<T> GetReader();
    public CtxWriteDelegate`1<T> GetWriter();
    public static SerializerPair CreateFromMethods(MethodInfo readMethod, MethodInfo writeMethod);
    public static SerializerPair CreateFromNonProtocolMethods(MethodInfo readMethod, MethodInfo writeMethod);
    public static SerializerPair CreateFromMethods(MethodInfo readMethod, MethodInfo writeMethod, SerializerPair argumentSerializer);
    public static SerializerPair CreateFromMethods(MethodInfo readMethod, MethodInfo writeMethod, SerializerPair keySerializer, SerializerPair valueSerializer);
    private static SerializerPair CreateFromMethodsImpl0(MethodInfo readMethod, MethodInfo writeMethod);
    private static SerializerPair CreateFromMethodsImpl1(MethodInfo readMethod, MethodInfo writeMethod, SerializerPair keySerializer);
    private static SerializerPair CreateFromMethodsImpl2(MethodInfo readMethod, MethodInfo writeMethod, SerializerPair keySerializer, SerializerPair valueSerializer);
    public static SerializerPair FromMarshaller(IBuiltInMarshaller`1<T> marshaller);
    private static SerializerPair CreateFromNonProtocolMethodsT(MethodInfo readMethod, MethodInfo writeMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Reflection.SerializerReflectionUtil : object {
    private static MethodInfo ourConvertSerializerPair;
    private static MethodInfo ourConvertTypedCtxRead;
    private static MethodInfo ourConvertTypedCtxWrite;
    private static SerializerReflectionUtil();
    internal static FieldInfo[] GetBindableFields(TypeInfo typeInfo);
    [IteratorStateMachineAttribute("JetBrains.Rd.Reflection.SerializerReflectionUtil/<GetFields>d__1")]
private static IEnumerable`1<FieldInfo> GetFields(Type type, Type baseType);
    internal static SerializerPair ConvertPair(SerializerPair serializers, Type desiredType);
    private static SerializerPair ConvertPairGeneric(SerializerPair serializers);
    internal static CtxReadDelegate`1<TOut> ConvertReader(object reader);
    internal static CtxWriteDelegate`1<TOut> ConvertWriter(object writer);
    private static CtxReadDelegate`1<TOut> CtxReadTypedToObject(CtxReadDelegate`1<TIn> typedDelegate);
    private static CtxWriteDelegate`1<TOut> CtxWriteTypedToObject(CtxWriteDelegate`1<TIn> typedDelegate);
    public static bool CanBePolymorphic(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Reflection.SimpleTypesCatalog : object {
    private ConcurrentDictionary`2<RdId, Type> myRdIdToTypeMapping;
    public ICollection`1<Type> Types { get; }
    public ICollection`1<Type> get_Types();
    [NullableContextAttribute("2")]
public sealed virtual Type GetById(RdId id);
    public sealed virtual RdId GetByType(Type type);
    public sealed virtual void AddType(Type type);
    [NullableContextAttribute("2")]
public void Register();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Rd.Reflection.SwitchingScheduler : object {
    private IRdDynamic myFallbackSchedulerSource;
    private static object ourLock;
    private static int ourDisable;
    private static Stack`1<IScheduler> ourSchedulersOverride;
    public bool IsActive { get; }
    public bool OutOfOrderExecution { get; }
    public IScheduler ActiveScheduler { get; }
    public SwitchingScheduler(IRdDynamic fallbackSchedulerSource);
    private static SwitchingScheduler();
    public sealed virtual bool get_IsActive();
    public sealed virtual bool get_OutOfOrderExecution();
    public IScheduler get_ActiveScheduler();
    public sealed virtual void Queue(Action action);
    public static void Disable(Lifetime time);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsUnmanagedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
