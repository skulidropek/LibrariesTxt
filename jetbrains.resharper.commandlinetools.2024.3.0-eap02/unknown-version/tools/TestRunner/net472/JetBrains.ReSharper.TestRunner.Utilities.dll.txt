public static class JetBrains.ReSharper.TestRunner.Disposable : object {
    public static IDisposable Empty;
    private static Disposable();
    public static IDisposable Create(Action closing);
    public static IDisposable CreateBracket(Action opening, Action closing);
    public static IDisposable CreateBracket(Func`1<T> opening, Action`1<T> closing);
    public static IDisposable Aggregate(IDisposable[] items);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Extensions.AppDomainExtensions : object {
    [ExtensionAttribute]
public static object CreateAndUnwrap(AppDomain appDomain, Type type, Object[] args);
    [ExtensionAttribute]
public static object CreateAndUnwrapFrom(AppDomain appDomain, Type type, Object[] args);
    [ExtensionAttribute]
public static T CreateAndUnwrapFrom(AppDomain appDomain, Object[] args);
    [ExtensionAttribute]
public static T CreateAndUnwrap(AppDomain appDomain, Object[] args);
    [ExtensionAttribute]
public static void DumpLoadedAssemblies(AppDomain appDomain, ILogger logger, LoggingLevel severity);
    [ExtensionAttribute]
public static AppDomainSetup Reinitialize(AppDomain appDomain, Action`1<AppDomainSetup> setupAction);
    [ExtensionAttribute]
public static AppDomainSetup Reinitialize(AppDomain appDomain, AppDomainSetup newSetup);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Extensions.AssemblyResolverExtensions : object {
    [ExtensionAttribute]
public static IDisposable ResolveRelativeTo(IAssemblyResolver resolver, ClientControllerInfo info);
    [ExtensionAttribute]
public static IDisposable ResolveRelativeTo(IAssemblyResolver resolver, ICollection`1<string> probingPaths);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.TestRunner.Extensions.InternalExtensions : object {
    [ExtensionAttribute]
internal static string GetParentDirectoryOrSelf(string path);
    [ExtensionAttribute]
internal static bool CanFulfill(AssemblyName probingAsm, AssemblyName requestedAsm);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Extensions.LoadContextExtensions : object {
    [ExtensionAttribute]
public static T Create(ILoadContext ctx, T1 p1);
    [ExtensionAttribute]
public static T Create(ILoadContext ctx, T1 p1, T2 p2);
    [ExtensionAttribute]
public static T Create(ILoadContext ctx, T1 p1, T2 p2, T3 p3);
    [ExtensionAttribute]
public static T Create(ILoadContext ctx, Object[] args);
    [ExtensionAttribute]
public static void DumpLoadedAssemblies(ILoadContext ctx, ILogger logger, LoggingLevel severity);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Extensions.TestExecutionSinkExtensions : object {
    [ExtensionAttribute]
public static ITestExecutionSink WithDurationTracking(ITestExecutionSink inner, Func`2<RemoteTask, RemoteTask> tryGetParentTask);
}
internal class JetBrains.ReSharper.TestRunner.Extensions.TestExecutionSinkWithDurationTracking : object {
    private ITestExecutionSink myInner;
    private Func`2<RemoteTask, RemoteTask> myTryGetParentTask;
    private ConcurrentDictionary`2<RemoteTask, DateTime> myStartTime;
    private ConcurrentDictionary`2<RemoteTask, DateTime> myEndTime;
    private ConcurrentDictionary`2<RemoteTask, DateTime> myFirstChildStartedAt;
    private ConcurrentDictionary`2<RemoteTask, DateTime> myLastChildFinishedAt;
    private ConcurrentDictionary`2<RemoteTask, int> myRunningChildrenCount;
    private ILogger myLogger;
    public TestExecutionSinkWithDurationTracking(ITestExecutionSink inner, Func`2<RemoteTask, RemoteTask> tryGetParentTask);
    public sealed virtual void TestStarting(RemoteTask task);
    public sealed virtual void TestFinished(RemoteTask task, TestOutcome outcome, string message, Nullable`1<TimeSpan> duration);
    private Nullable`1<TimeSpan> CalculateOwnDuration(RemoteTask task, Nullable`1<TimeSpan> totalDuration);
    public sealed virtual void TestException(RemoteTask task, ExceptionInfo[] exceptions);
    public sealed virtual void TestOutput(RemoteTask task, string text, TestOutputType outputType);
    public sealed virtual void DynamicTestDiscovered(RemoteTask task);
}
[XmlRootAttribute("assemblyBinding")]
public class JetBrains.ReSharper.TestRunner.Isolation.AssemblyBinding : object {
    [CompilerGeneratedAttribute]
private string <AppliesTo>k__BackingField;
    [CompilerGeneratedAttribute]
private DependentAssembly[] <DependentAssemblies>k__BackingField;
    [XmlAttributeAttribute("appliesTo")]
public string AppliesTo { get; public set; }
    [XmlElementAttribute("dependentAssembly")]
public DependentAssembly[] DependentAssemblies { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AppliesTo();
    [CompilerGeneratedAttribute]
public void set_AppliesTo(string value);
    [CompilerGeneratedAttribute]
public DependentAssembly[] get_DependentAssemblies();
    [CompilerGeneratedAttribute]
public void set_DependentAssemblies(DependentAssembly[] value);
}
public class JetBrains.ReSharper.TestRunner.Isolation.AssemblyIdentity : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublicKeyToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProcessorArchitecture>k__BackingField;
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("culture")]
public string Culture { get; public set; }
    [XmlAttributeAttribute("publicKeyToken")]
public string PublicKeyToken { get; public set; }
    [XmlAttributeAttribute("processorArchitecture")]
public string ProcessorArchitecture { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(string value);
    [CompilerGeneratedAttribute]
public string get_PublicKeyToken();
    [CompilerGeneratedAttribute]
public void set_PublicKeyToken(string value);
    [CompilerGeneratedAttribute]
public string get_ProcessorArchitecture();
    [CompilerGeneratedAttribute]
public void set_ProcessorArchitecture(string value);
}
public class JetBrains.ReSharper.TestRunner.Isolation.AssemblyLoader : LongLivedMarshalByRefObject {
    private ILogger myLogger;
    private BindingRedirects myBindingRedirects;
    private ConcurrentDictionary`2<LoggingLevel, bool> myLoggingLevelCache;
    private RegisteredAssembliesResolver myAssembliesResolver;
    private DirectoryBoundResolver myDirectoryResolver;
    private AssemblyNameCache myAssemblyNameCache;
    private Dictionary`2<string, Assembly> myLoadedAssemblies;
    private HashSet`1<string> myAssembliesBeingResolved;
    private List`1<string> myNotFoundAssemblies;
    private object myLock;
    public AssemblyLoader(ILogger logger);
    public sealed virtual void Dispose();
    private bool IsLoggingEnabled(LoggingLevel level);
    private bool IsTraceEnabled();
    private bool IsDebugEnabled();
    public AssemblyName LoadAssembly(string assemblyName);
    public AssemblyName LoadAssemblyFrom(string pathToAssembly);
    public AssemblyLoader RegisterAssembly(AssemblyName asmName, string pathToAssembly);
    public AssemblyLoader UnregisterAssembly(AssemblyName asmName);
    public AssemblyLoader RegisterPath(string path);
    public AssemblyLoader UnregisterPath(string path);
    private Assembly ResolveAssembly(object sender, ResolveEventArgs args);
    private bool TryResolveByAssemblyName(AssemblyName asmName, Assembly& assembly);
    private bool TryResolveByFilename(AssemblyName asmName, Assembly& assembly);
    private bool LoadNameAndRedirectIfRequiredThenLoadFile(string probing, Assembly& assembly);
    private bool LoadedAssembly(string pathToAssembly, Assembly& assembly);
    private Assembly RegisterLoaded(ResolveEventArgs args, Assembly assembly);
    private Assembly RegisterNotFound(ResolveEventArgs args);
    public sealed virtual Type GetType(string fullyQualifiedName);
    public sealed virtual Assembly LoadFrom(string assemblyFile);
    public sealed virtual IDisposable ResolveRelativeTo(string path);
    private sealed virtual override IDisposable JetBrains.ReSharper.TestRunner.Abstractions.Isolation.IAssemblyResolver.RegisterAssembly(AssemblyName asmName, string pathToAssembly);
    private sealed virtual override IDisposable JetBrains.ReSharper.TestRunner.Abstractions.Isolation.IAssemblyResolver.RegisterPath(string path);
    public static AssemblyLoader Setup(AppDomain appDomain, ILogger logger);
    [CompilerGeneratedAttribute]
private bool <IsLoggingEnabled>b__13_0(LoggingLevel lvl);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Isolation.AssemblyLoaderExtensions : object {
    [ExtensionAttribute]
public static AssemblyName LoadAssembly(AssemblyLoader loader, Assembly assembly);
    [ExtensionAttribute]
public static AssemblyName LoadAssemblyOf(AssemblyLoader loader);
    [ExtensionAttribute]
public static AssemblyName LoadAssemblyFrom(AssemblyLoader loader, Assembly assembly);
    [ExtensionAttribute]
public static AssemblyName LoadAssemblyFromOf(AssemblyLoader loader);
    [ExtensionAttribute]
public static AssemblyLoader RegisterAssembly(AssemblyLoader loader, Assembly assembly);
    [ExtensionAttribute]
public static AssemblyLoader RegisterAssemblyOf(AssemblyLoader loader);
    [ExtensionAttribute]
public static AssemblyLoader RegisterPathOf(AssemblyLoader loader, Assembly assembly);
    [ExtensionAttribute]
public static AssemblyLoader RegisterPathOf(AssemblyLoader loader);
    [ExtensionAttribute]
public static AssemblyLoader RegisterPaths(AssemblyLoader loader, String[] paths);
    [ExtensionAttribute]
public static AssemblyLoader RegisterAssembliesTransitive(AssemblyLoader loader, Assembly[] assemblies);
    [ExtensionAttribute]
public static AssemblyLoader RegisterAssembliesTransitiveOf(AssemblyLoader loader);
}
public class JetBrains.ReSharper.TestRunner.Isolation.BindingRedirect : object {
    [CompilerGeneratedAttribute]
private string <OldVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewVersion>k__BackingField;
    [XmlAttributeAttribute("oldVersion")]
public string OldVersion { get; public set; }
    [XmlAttributeAttribute("newVersion")]
public string NewVersion { get; public set; }
    [CompilerGeneratedAttribute]
public string get_OldVersion();
    [CompilerGeneratedAttribute]
public void set_OldVersion(string value);
    [CompilerGeneratedAttribute]
public string get_NewVersion();
    [CompilerGeneratedAttribute]
public void set_NewVersion(string value);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.TestRunner.Isolation.BindingRedirectExtensions : object {
    [ExtensionAttribute]
public static bool Matches(AssemblyIdentity identity, AssemblyName assemblyName);
    [ExtensionAttribute]
public static bool Matches(BindingRedirect redirect, Version version);
    [ExtensionAttribute]
public static string GetPublicTokenKeyString(AssemblyName assemblyName);
}
internal class JetBrains.ReSharper.TestRunner.Isolation.BindingRedirects : object {
    public static BindingRedirects Empty;
    private BindingRedirectStore myStore;
    public BindingRedirects(AssemblyBinding[] bindings);
    private static BindingRedirects();
    public AssemblyName Apply(string assemblyName);
    public AssemblyName Apply(AssemblyName assemblyName);
    public static BindingRedirects FromXmlReader(XmlReader reader);
    public static BindingRedirects FromString(string config);
    public static BindingRedirects FromConfig(string filename);
    public static BindingRedirects ForCurrentDomain();
    public static BindingRedirects ForCurrentDomainSafe(ILogger logger);
}
public class JetBrains.ReSharper.TestRunner.Isolation.DependentAssembly : object {
    [CompilerGeneratedAttribute]
private AssemblyIdentity <AssemblyIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private BindingRedirect[] <BindingRedirects>k__BackingField;
    [XmlElementAttribute("assemblyIdentity")]
public AssemblyIdentity AssemblyIdentity { get; public set; }
    [XmlElementAttribute("bindingRedirect")]
public BindingRedirect[] BindingRedirects { get; public set; }
    [CompilerGeneratedAttribute]
public AssemblyIdentity get_AssemblyIdentity();
    [CompilerGeneratedAttribute]
public void set_AssemblyIdentity(AssemblyIdentity value);
    [CompilerGeneratedAttribute]
public BindingRedirect[] get_BindingRedirects();
    [CompilerGeneratedAttribute]
public void set_BindingRedirects(BindingRedirect[] value);
}
internal class JetBrains.ReSharper.TestRunner.Isolation.DirectoryBoundResolver : ResolverBase {
    private static String[] ourPatterns;
    private Dictionary`2<string, int> myRegisteredPaths;
    private ILogger myLogger;
    private object myLock;
    public DirectoryBoundResolver(ILogger logger);
    private static DirectoryBoundResolver();
    public void RegisterPath(string path);
    public void UnregisterPath(string path);
    public virtual string ResolveAssemblyToPath(AssemblyName asmName);
}
internal class JetBrains.ReSharper.TestRunner.Isolation.RegisteredAssembliesResolver : ResolverBase {
    private Dictionary`2<string, IDictionary`2<string, string>> myRegisteredAssemblies;
    private ILogger myLogger;
    private object myLock;
    public RegisteredAssembliesResolver(ILogger logger);
    public void RegisterAssembly(AssemblyName asmName, string pathToAssembly);
    public void UnregisterAssembly(AssemblyName asmName);
    public virtual string ResolveAssemblyToPath(AssemblyName asmName);
}
internal abstract class JetBrains.ReSharper.TestRunner.Isolation.ResolverBase : object {
    private Dictionary`2<string, AssemblyName> myAssemblyNameCache;
    public abstract virtual string ResolveAssemblyToPath(AssemblyName asmName);
    protected AssemblyName GetAssemblyNameFromPath(string path);
    private AssemblyName GetAssemblyNameFromPathCore(string path);
    protected bool IsManagedAssembly(string pathToAssembly);
}
public class JetBrains.ReSharper.TestRunner.Logging.LoggerFactoryInjector : LongLivedMarshalByRefObject {
    public void Inject(ILoggerFactory factory);
}
public class JetBrains.ReSharper.TestRunner.Logging.LoggerFactoryProxy : RejectingCallContextObject {
    private ILoggerFactory myInner;
    public LoggerFactoryProxy(ILoggerFactory inner);
    public sealed virtual ILogger GetLogger(string category);
    public sealed virtual void Setup(AppDomain appDomain, LoggerFactoryAppointment appointment);
}
public class JetBrains.ReSharper.TestRunner.Logging.LoggerProxy : RejectingCallContextObject {
    private ILogger myInner;
    public LoggerProxy(ILogger inner);
    public sealed virtual bool IsEnabled(LoggingLevel level);
    public sealed virtual void Log(LoggingLevel level, string message, Object[] args);
    public sealed virtual void Log(LoggingLevel level, Exception exception, string message, Object[] args);
    public sealed virtual void Log(LoggingLevel level, LogMessageGenerator messageFunc);
}
public class JetBrains.ReSharper.TestRunner.Logging.TraceListener : DefaultTraceListener {
    public static void Install(AppDomain appDomain);
    public static void Install();
    public virtual void Fail(string message);
    public virtual void Fail(string message, string detailMessage);
}
[EmptyCallContextAttribute]
public class JetBrains.ReSharper.TestRunner.RejectingCallContextObject : ContextBoundObject {
    public virtual object InitializeLifetimeService();
}
[AttributeUsageAttribute("4")]
public class JetBrains.ReSharper.TestRunner.Remoting.EmptyCallContextAttribute : ContextAttribute {
    public static string Id;
    public sealed virtual IMessageSink GetEnvoySink(MarshalByRefObject obj, IMessageSink nextSink);
}
internal class JetBrains.ReSharper.TestRunner.Remoting.EmptyCallContextMessageSink : object {
    [CompilerGeneratedAttribute]
private IMessageSink <NextSink>k__BackingField;
    public IMessageSink NextSink { get; }
    public EmptyCallContextMessageSink(IMessageSink nextSink);
    [CompilerGeneratedAttribute]
public sealed virtual IMessageSink get_NextSink();
    public sealed virtual IMessage SyncProcessMessage(IMessage msg);
    public sealed virtual IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink);
}
public static class JetBrains.ReSharper.TestRunner.Runtime : object {
    public static bool IsMono { get; }
    public static bool get_IsMono();
}
