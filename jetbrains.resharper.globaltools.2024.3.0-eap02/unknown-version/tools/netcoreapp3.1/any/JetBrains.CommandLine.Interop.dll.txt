public interface JetBrains.CommandLine.Interop.Logging.ILoggingOptions {
    public LoggingLevel LogLevel { get; }
    [CanBeNullAttribute]
public FileSystemPath LogFile { get; }
    public abstract virtual LoggingLevel get_LogLevel();
    public abstract virtual FileSystemPath get_LogFile();
}
public class JetBrains.CommandLine.Interop.Logging.LoggingOptions : object {
    private static LoggingLevel DefaultLoggingLevel;
    [CompilerGeneratedAttribute]
private LoggingLevel <LogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <LogFile>k__BackingField;
    [EnumOptionAttribute("log-level", "JetBrains.Diagnostics.LoggingLevel")]
public LoggingLevel LogLevel { get; public set; }
    [FileOptionAttribute("log-file")]
public FileSystemPath LogFile { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual LoggingLevel get_LogLevel();
    [CompilerGeneratedAttribute]
public void set_LogLevel(LoggingLevel value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_LogFile();
    [CompilerGeneratedAttribute]
public void set_LogFile(FileSystemPath value);
    public static LoggingOptions Parse(string logLevelString, string logFileString);
}
public interface JetBrains.CommandLine.Interop.Profiler.IProfilerCoreOptions {
    [NotNullAttribute]
public string Configuration { get; }
    [NotNullAttribute]
public string Debug { get; }
    [CanBeNullAttribute]
public string LogMask { get; }
    [NotNullAttribute]
public string Registration { get; }
    [NotNullAttribute]
public string RegistrationArchitecture { get; }
    public bool IsForceTcp { get; }
    public abstract virtual string get_Configuration();
    public abstract virtual string get_Debug();
    public abstract virtual string get_LogMask();
    public abstract virtual string get_Registration();
    public abstract virtual string get_RegistrationArchitecture();
    public abstract virtual bool get_IsForceTcp();
}
[AdvancedOptionsAttribute("<core-options>")]
public class JetBrains.CommandLine.Interop.Profiler.ProfilerCoreOptions : object {
    private static string DefaultConfiguration;
    private static string DefaultDebug;
    private static string DefaultRegistration;
    private static string DefaultRegistrationArchitecture;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogMask>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Registration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RegistrationArchitecture>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsForceTcp>k__BackingField;
    [StringOptionAttribute("core-config")]
public string Configuration { get; public set; }
    [StringOptionAttribute("core-debug")]
public string Debug { get; public set; }
    [StringOptionAttribute("core-log-mask")]
public string LogMask { get; public set; }
    [StringOptionAttribute("core-registration")]
public string Registration { get; public set; }
    [StringOptionAttribute("core-reg-instruction")]
public string RegistrationArchitecture { get; public set; }
    [WindowsOptionFilterAttribute]
[BoolOptionAttribute("core-force-tcp")]
public bool IsForceTcp { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LogMask();
    [CompilerGeneratedAttribute]
public void set_LogMask(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Registration();
    [CompilerGeneratedAttribute]
public void set_Registration(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RegistrationArchitecture();
    [CompilerGeneratedAttribute]
public void set_RegistrationArchitecture(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsForceTcp();
    [CompilerGeneratedAttribute]
public void set_IsForceTcp(bool value);
    [HelpPrologAttribute]
public static void HelpEpilog(FormattedTextBuilder text);
}
public abstract class JetBrains.CommandLine.Interop.ServiceMessages.AbstractServiceMessage : object {
    public virtual string ToString();
    public string Verb();
    private static string VerbOf(AbstractServiceMessage message);
}
public class JetBrains.CommandLine.Interop.ServiceMessages.CommunicableConsoleProcess : object {
    private Queue`1<string> myOutputLines;
    private Queue`1<string> myErrorLines;
    private ConcurrentQueue`1<AbstractServiceMessage> myReceivedMessages;
    private EventWaitHandle myMessageReceived;
    private EventWaitHandle myOutputEnd;
    private EventWaitHandle myErrorEnd;
    private ServiceMessaging myMessaging;
    private Action`2<CommunicableConsoleProcess, AbstractServiceMessage> myOnMessage;
    private Action`2<CommunicableConsoleProcess, string> myOnOutputLine;
    private Action`2<CommunicableConsoleProcess, string> myOnErrorLine;
    private int myLinesLimit;
    private Process myProcess;
    private TextWriter myProcessStdIn;
    private static ILogger ourLogger;
    public int Id { get; }
    public string Name { get; }
    public int ExitCode { get; }
    public Process UnderlyingProcess { get; }
    public string LastOutput { get; }
    public string LastError { get; }
    private CommunicableConsoleProcess(Lifetime lifetime, ServiceMessaging messaging, ProcessStartInfo startInfo, Action`2<CommunicableConsoleProcess, AbstractServiceMessage> onMessage, Action`2<CommunicableConsoleProcess, string> onOutputLine, Action`2<CommunicableConsoleProcess, string> onErrorLine, Encoding inputEncoding, int linesLimit);
    private static CommunicableConsoleProcess();
    private void OnOutputDataReceived(object sender, DataReceivedEventArgs args);
    private void OnErrorDataReceived(object sender, DataReceivedEventArgs args);
    public int get_Id();
    public string get_Name();
    public int get_ExitCode();
    public Process get_UnderlyingProcess();
    public string get_LastOutput();
    public string get_LastError();
    public CommunicableConsoleProcess Kill();
    public CommunicableConsoleProcess KillTree();
    public CommunicableConsoleProcess Send(AbstractServiceMessage message);
    public CommunicableConsoleProcess WaitForExit(TimeSpan timeout);
    private CommunicableConsoleProcess WaitForOutputEnd(TimeSpan timeout);
    private CommunicableConsoleProcess WaitForErrorEnd(TimeSpan timeout);
    public CommunicableConsoleProcess WaitForExitAndStreams(TimeSpan exitTimeout, TimeSpan outputTimeout, TimeSpan errorTimeout);
    public CommunicableConsoleProcess TryWaitFor(Predicate`1<TMessage> predicate, TimeSpan timeout, TMessage& outMessage);
    public CommunicableConsoleProcess WaitFor(Predicate`1<TMessage> predicate, TimeSpan timeout, TMessage& outMessage);
    public CommunicableConsoleProcess WaitFor(Predicate`1<TMessage> predicate, TimeSpan timeout);
    public CommunicableConsoleProcess WaitFor(TimeSpan timeout, TMessage& outMessage);
    public CommunicableConsoleProcess WaitFor(TimeSpan timeout);
    public CommunicableConsoleProcess TryWaitFor(TimeSpan timeout, TMessage& outMessage);
    [CompilerGeneratedAttribute]
private void <.ctor>b__15_0();
    [CompilerGeneratedAttribute]
private string <get_Name>b__21_0();
}
public class JetBrains.CommandLine.Interop.ServiceMessages.ServiceInput : object {
    public static ServiceInput Null;
    public static ServiceInput Stdin;
    private Nullable`1<Alias> myAlias;
    private FileSystemPath myPath;
    private ServiceInput(Alias alias);
    private ServiceInput(FileSystemPath path);
    private static ServiceInput();
    [NotNullAttribute]
public TextReader Open();
    public virtual string ToString();
    public static ServiceInput TryFromAlias(string value);
    public static ServiceInput FromFile(FileSystemPath filePath);
    private bool Equals(ServiceInput other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Inequality(ServiceInput left, ServiceInput right);
    public static bool op_Equality(ServiceInput left, ServiceInput right);
}
public class JetBrains.CommandLine.Interop.ServiceMessages.ServiceInputOptionAttribute : AbstractOptionAttribute {
    public Type ValueType { get; }
    private ServiceInputOptionAttribute(string key, char shortcut, int nonKeyedIndex);
    public ServiceInputOptionAttribute(string key);
    public ServiceInputOptionAttribute(string key, char shortcut);
    public ServiceInputOptionAttribute(char shortcut);
    public ServiceInputOptionAttribute(int nonKeyedIndex, string symbolicName);
    public virtual Type get_ValueType();
    protected virtual object ConvertValue(string value, Type type);
}
[AttributeUsageAttribute("4")]
public class JetBrains.CommandLine.Interop.ServiceMessages.ServiceMessageAttribute : Attribute {
    private string myVerb;
    [NotNullAttribute]
public string Verb { get; }
    public ServiceMessageAttribute(string verb);
    public string get_Verb();
}
public class JetBrains.CommandLine.Interop.ServiceMessages.ServiceMessaging : object {
    private static ILogger ourLogger;
    private JsonSerializer mySerializer;
    private IDictionary`2<string, Type> myMessageTypes;
    private string myPrefixedSignature;
    public ServiceMessaging(string signature, Type[] messageTypes);
    private static ServiceMessaging();
    [NotNullAttribute]
public ServiceMessaging RegisterType(Type type);
    public void Write(AbstractServiceMessage message, TextWriter writer);
    [CanBeNullAttribute]
public AbstractServiceMessage Read(TextReader reader, Action`1<string> handleNonParsed);
    [CanBeNullAttribute]
public AbstractServiceMessage Read(TextReader reader, CancellationToken cancellationToken, Action`1<string> handleNonParsed);
    [NotNullAttribute]
public string Format(AbstractServiceMessage message);
    [CanBeNullAttribute]
public AbstractServiceMessage TryParse(string line);
    private void Format(AbstractServiceMessage message, TextWriter writer);
}
[ExtensionAttribute]
public static class JetBrains.CommandLine.Interop.ServiceMessages.ServiceMessagingEx : object {
    private static ILogger ourLogger;
    private static ServiceMessagingEx();
    [ExtensionAttribute]
public static void Listen(ServiceMessaging serviceMessaging, Lifetime lifetime, ServiceInput serviceInput, Action`1<AbstractServiceMessage> listener);
    private static void MessagingLoop(CancellationToken cancellationToken, ServiceInput serviceInput, ServiceMessaging serviceMessaging, Action`1<AbstractServiceMessage> listener);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
