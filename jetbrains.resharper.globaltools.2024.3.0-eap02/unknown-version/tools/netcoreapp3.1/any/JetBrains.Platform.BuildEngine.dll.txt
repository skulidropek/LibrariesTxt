public static class JetBrains.Build.Engine.BuildGraph.BuildExecutionPlanGraph : object {
    [NotNullAttribute]
public static BuildItemsGraph Export(BuildExecutionPlan plan, BuildStorage storage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.Build.Engine.BuildGraph.BuildGraphMlWriter : object {
    private static string XmlnsGraphML;
    private static BuildGraphMlWriter();
    public static void WriteGraphMl(BuildItemsGraph graph, XmlWriter writer);
    private static void DefineKey(XmlWriter writer, string id, string type, string attrname);
    private static string NodeColors(BuildStorageGraphNode node);
    private static void SetData(XmlWriter writer, string key, string value);
}
[ExtensionAttribute]
public static class JetBrains.Build.Engine.BuildGraph.BuildGraphXgmlWriter : object {
    private static ILogger Logger;
    private static BuildGraphXgmlWriter();
    public static void WriteXgml(BuildItemsGraph graph, XmlWriter writer);
    [ExtensionAttribute]
[NotNullAttribute]
private static XmlWriter InXgmlSection(XmlWriter writer, string sSectionName, Action nested);
    private static string NodeColors(BuildStorageGraphNode node);
    [ExtensionAttribute]
[NotNullAttribute]
private static XmlWriter XgmlAttr(XmlWriter writer, string sAttrName, int value);
    [ExtensionAttribute]
[NotNullAttribute]
private static XmlWriter XgmlAttr(XmlWriter writer, string sAttrName, string value);
}
public class JetBrains.Build.Engine.BuildGraph.BuildItemsGraph : object {
    public IList`1<BuildStorageGraphEdge> Edges;
    public IList`1<BuildStorageGraphNode> Nodes;
}
public static class JetBrains.Build.Engine.BuildGraph.BuildStorageGraph : object {
    [NotNullAttribute]
public static BuildItemsGraph Export(BuildStorageCore storage);
    private static BuildStorageGraphEdge Export_ConvertEdge(IBuildEntity from, IBuildEntity to, EdgeKind edgekind);
    private static BuildStorageGraphNode Export_ConvertEntity(IBuildEntity entity);
    [NotNullAttribute]
private static string Export_GetId(IBuildEntity entity);
    [NotNullAttribute]
private static string Export_GetLabel(IBuildEntity entity);
}
public class JetBrains.Build.Engine.BuildGraph.BuildStorageGraphEdge : object {
    [NotNullAttribute]
public string FromNode;
    public EdgeKind Kind;
    [NotNullAttribute]
public string ToNode;
    public BuildStorageGraphEdge(string fromNode, string toNode, EdgeKind kind);
    public virtual string ToString();
}
public class JetBrains.Build.Engine.BuildGraph.BuildStorageGraphNode : object {
    [NotNullAttribute]
public string Id;
    [NotNullAttribute]
public string Kind;
    [NotNullAttribute]
public string Label;
    public BuildStorageGraphNode(string kind, string id, string label);
    public virtual string ToString();
}
public static class JetBrains.Build.Engine.IsolatedBuild.BuildBinaryFileItems : object {
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.BuildBinaryFileItems/<ExpandContainerFileItemsAsync>d__0")]
public static Task`1<IReadOnlyCollection`1<ImmutableFileItem>> ExpandContainerFileItemsAsync(OuterLifetime lifetime, IEnumerable`1<ImmutableFileItem> files, ITaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.BuildBinaryFileItems/<ExpandContainerFileItemsExAsync>d__1")]
public static Task`1<IReadOnlyCollection`1<IAssemblyItem>> ExpandContainerFileItemsExAsync(OuterLifetime lifetime, IEnumerable`1<ImmutableFileItem> files, JetNugetTargetFramework targetFrameworkName, ITaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.BuildBinaryFileItems/<ExpandContainerFileItems_ItemAsync>d__2")]
private static Task`1<IReadOnlyCollection`1<IAssemblyItem>> ExpandContainerFileItems_ItemAsync(OuterLifetime lifetime, ImmutableFileItem fileTopLevel, JetNugetTargetFramework targetFrameworkName, string origin, ITaskHost tasker, ILogger logger);
    private static ImmutableArray`1<BuildBinaryAssemblyItemInNuget> FromPackageAndCache(IJetNugetPackage fileNuget, PrecalculatedPartCatalog ppc, IReadOnlyList`1<JetNugetEntry> entries, string sOuterOrigin);
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.BuildBinaryFileItems/<FromPackageNoCacheAsync>d__4")]
[NotNullAttribute]
private static Task`1<ImmutableArray`1<BuildBinaryAssemblyItemInNuget>> FromPackageNoCacheAsync(OuterLifetime lifetime, IJetNugetPackage fileNuget, IReadOnlyList`1<JetNugetEntry> entries, Nullable`1<bool> isCatalogable, bool isIncludeRuntimesFolder, string sOuterOrigin, ITaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.BuildBinaryFileItems/<TryExpandBuildEngineOrScriptBinariesContainerAsync>d__5")]
private static Task`1<IReadOnlyCollection`1<IAssemblyItem>> TryExpandBuildEngineOrScriptBinariesContainerAsync(OuterLifetime lifetime, ImmutableFileItem fileTopLevel, JetNugetTargetFramework targetFrameworkName, string sOuterOrigin, ITaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.BuildBinaryFileItems/<TryExpandNugetPackageAsync>d__6")]
private static Task`1<ImmutableArray`1<BuildBinaryAssemblyItemInNuget>> TryExpandNugetPackageAsync(OuterLifetime lifetime, IJetNugetPackage fiNuget, JetNugetTargetFramework targetfx, string origin, ITaskHost tasker, ILogger logger);
}
public class JetBrains.Build.Engine.IsolatedBuild.BuildLogRecordMarshaller : LoggerBase {
    [NotNullAttribute]
private Action myFIncoming;
    [NotNullAttribute]
private Action`1<BuildLogRecord> myFOutput;
    private bool myIsInsideGroupingEventOutgoingAction;
    private LockObject myLockGroupingEventOutgoingAction;
    private string myLogCategory;
    private ConcurrentQueue`1<BuildLogRecord> myQueue;
    private int myReentrancyCount;
    public string Category { get; }
    public BuildLogRecordMarshaller(Lifetime lifetime, IListEvents`1<BuildLogRecord> logentries, string sLogCategory);
    public BuildLogRecordMarshaller(Lifetime lifetime, Action`1<BuildLogRecord> output, string sLogCategory);
    public virtual string get_Category();
    public void Flush();
    public virtual bool IsEnabled(LoggingLevel level);
    public virtual void Log(LogEvent logEvent);
    public void Submit(BuildLogRecord record);
    private void GroupingEventOutgoingAction();
    [ConditionalAttribute("NEVER")]
private static void LowLevelTrace(string message);
}
public interface JetBrains.Build.Engine.IsolatedBuild.IRunningIsolatedBuildGuestContext {
    public StorageMemoryPressure IsolatedBuildGuestStorageMemoryPressure { get; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public Lazy`1<IsolatedBuildRunnerEngineAssemblies> LazyEngineAssembiles { get; }
    [NotNullAttribute]
public IsolatedBuildRunnerEngineRequest RunningBuildRequest { get; }
    public abstract virtual StorageMemoryPressure get_IsolatedBuildGuestStorageMemoryPressure();
    public abstract virtual Lazy`1<IsolatedBuildRunnerEngineAssemblies> get_LazyEngineAssembiles();
    public abstract virtual IsolatedBuildRunnerEngineRequest get_RunningBuildRequest();
}
public class JetBrains.Build.Engine.IsolatedBuild.IsolatedBuildGuest : object {
    [PublicAPIAttribute]
private IsolatedBuildGuest(IntPtr pCrossAppDomain);
    public static void InvokeRunCrossAppDomain(AppDomain appdomainIsolated, Void* lockBytesDataRaw);
    public static void InvokeRunCrossLoadContext(AssemblyLoadContextProxy loadcontextIsolated, Void* lockBytesDataRaw);
    [HandleProcessCorruptedStateExceptionsAttribute]
public static bool Run(IntPtr pCrossAppDomain);
    private static void AddFreeDiskSpaceLogging(Lifetime lifetime, ILogger logger, TimeSpan interval);
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.IsolatedBuildGuest/<AssignRequestInputArtifacts>d__5")]
private static Task AssignRequestInputArtifacts(Lifetime lifetime, IsolatedBuildRunnerEngineRequest request, GuestRequestInfo guestrequest, BuildStorage storage, BindArtifactTypeByName bindTypesInEngineContext, ITaskHost tasker, ILogger Logger);
    private static void AssignRequestInputArtifacts_String(GuestRequestInfo guestrequest, BuildStorage storage, ILogger Logger);
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.IsolatedBuildGuest/<AssignRequestInputArtifacts_StructuredSerializedAsync>d__7")]
private static Task AssignRequestInputArtifacts_StructuredSerializedAsync(Lifetime lifetime, IsolatedBuildRunnerEngineRequest request, BuildStorage storage, BindArtifactTypeByName bindTypesInEngineContext, ITaskHost tasker, ILogger Logger);
    private static void AttachLoggerListeners(Lifetime lifetime, Writer writer, String& sLogAnnouncement);
    private static IList`1<IBuildArtifactClass> LoadRequestObjectives(IsolatedBuildRunnerEngineRequest request, ILogger Logger, BuildStorage storage);
    private static void OpenCrossDomainStorage(Lifetime lifetime, IntPtr pCrossAppDomain, IStructuredStorage& sstg, StorageMemoryPressure& mempressure);
    [NotNullAttribute]
private static IStructuredStorage OpenCrossDomainStorage_ILockBytes(Lifetime lifetime, IntPtr pCrossAppDomain);
    private static void WriteBuildGraph(BuildStorage storage, BuildExecutionPlan plan, IStructuredStorage sstgGraphs, ILogger Logger);
    private static void WriteOutputArtifacts(BuildStorage storage, IList`1<IBuildArtifactClass> objectives, IStructuredStorage sstgOutputArtifacts, ILogger Logger);
    [CompilerGeneratedAttribute]
internal static string <AttachLoggerListeners>g__MakeLogFileLocalName|8_0(string level, <>c__DisplayClass8_0& );
    [CompilerGeneratedAttribute]
internal static void <AttachLoggerListeners>g__AddFileLogger|8_1(LoggingLevel level, <>c__DisplayClass8_0& );
}
public static class JetBrains.Build.Engine.IsolatedBuild.IsolatedBuildGuestCatalog : object {
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.IsolatedBuildGuestCatalog/<CreateBuildCatalogAsync>d__0")]
public static Task`1<CatalogForBuild> CreateBuildCatalogAsync(Lifetime lifetime, IsolatedBuildRunnerEngineRequest request, IRealizedAssemblyItemUnification realizedAssemblyItemUnification, ChosenEngine enginefiles, GuestRequestInfo guestrequest, ITaskHost tasker, ILogger Logger);
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.IsolatedBuildGuestCatalog/<CatalogFromScriptAsync>d__1")]
private static Task`1<CatalogForBuild> CatalogFromScriptAsync(Lifetime lifetime, BuildScriptForCataloging script, IRealizedAssemblyItemUnification realizedAssemblyItemUnification, Lazy`1<DistributedCache> lazyDistroCache, ITaskHost tasker, ILogger Logger);
    private static ValueTuple`2<Lazy`1<IJetNugetPackageManager>, Lazy`1<DistributedCache>> CreateLazyHelpers(Lifetime lifetime, GuestRequestInfo guestrequest, ITaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.IsolatedBuildGuestCatalog/<EmitAdHocCatalogTablesAsync>d__3")]
private static Task`1<CatalogTables> EmitAdHocCatalogTablesAsync(Lifetime lifetime, List`1<IAssemblyItem> catalogablesSorted, AssemblyMasterBinderOnAssemblyItems masterbinder, Lazy`1<DistributedCache> lazyDistroCache, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.IsolatedBuildGuestCatalog/<ExpandBuildScriptBinaryContainersAsync>d__4")]
[NotNullAttribute]
private static Task`1<IReadOnlyCollection`1<IAssemblyItem>> ExpandBuildScriptBinaryContainersAsync(OuterLifetime lifetime, IReadOnlyList`1<ImmutableFileItem> binariesRaw, JetNugetTargetFramework targetFrameworkName, ITaskHost tasker, ILogger Logger);
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.IsolatedBuildGuestCatalog/<ScriptFromInputs_Sources>d__5")]
private static Task`1<CompiledBuildScriptSources> ScriptFromInputs_Sources(OuterLifetime lifeLimit, IReadOnlyList`1<ImmutableFileItem> buildScriptSources, IReadOnlyCollection`1<IAssemblyItem> buildScriptBinariesAssemblies, ScriptSourceImplicitEngineDllReferences enginerefs, JetNugetTargetFramework targetfx, BuildScriptSourcesRefAsmPromise refAsmPromise, Lazy`1<IJetNugetPackageManager> nugetterLazy, Lazy`1<DistributedCache> lazyDistroCache, ITaskHost tasker, ILogger Logger);
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.IsolatedBuildGuestCatalog/<ScriptFromInputsAsync>d__6")]
private static Task`1<BuildScriptForCataloging> ScriptFromInputsAsync(Lifetime lifetime, IsolatedBuildRunnerEngineRequest request, ChosenEngine enginefiles, GuestRequestInfo guestrequest, Lazy`1<IJetNugetPackageManager> lazyNugetter, Lazy`1<DistributedCache> lazyDistroCache, ITaskHost tasker, ILogger Logger);
}
public class JetBrains.Build.Engine.IsolatedBuild.IsolatedBuildGuestContext : object {
    private BindArtifactTypeByName myBindTypesInEngineContext;
    private ITaskHost myTaskHost;
    private StorageMemoryPressure myIsolatedBuildGuestStorageMemoryPressure;
    private Lazy`1<IsolatedBuildRunnerEngineAssemblies> myLazyEngineAssembiles;
    private Writer myLowLevelBuildLogRecordWriter;
    private RealizedAssemblyItemUnificationSlave myRealizedAssemblyItemUnificationSlave;
    private IsolatedBuildRunnerEngineRequest myRunningBuildRequest;
    private BindArtifactTypeByName JetBrains.Build.Running.IRunningIsolatedBuildContext.BindTypesInEngineContext { get; }
    private ITaskHost JetBrains.Build.Running.IRunningIsolatedBuildContext.BuildTaskHost { get; }
    private StorageMemoryPressure JetBrains.Build.Engine.IsolatedBuild.IRunningIsolatedBuildGuestContext.IsolatedBuildGuestStorageMemoryPressure { get; }
    private Lazy`1<IsolatedBuildRunnerEngineAssemblies> JetBrains.Build.Engine.IsolatedBuild.IRunningIsolatedBuildGuestContext.LazyEngineAssembiles { get; }
    private Writer JetBrains.Build.Running.IRunningIsolatedBuildContext.LowLevelBuildLogRecordWriter { get; }
    private RealizedAssemblyItemUnificationSlave JetBrains.Build.Running.IRunningIsolatedBuildContext.RealizedAssemblyItemUnificationSlave { get; }
    private IsolatedBuildRunnerEngineRequest JetBrains.Build.Engine.IsolatedBuild.IRunningIsolatedBuildGuestContext.RunningBuildRequest { get; }
    public IsolatedBuildGuestContext(Writer writerLowLevel, BindArtifactTypeByName bindTypesInEngineContext, Lazy`1<IsolatedBuildRunnerEngineAssemblies> lazyEngineAssembiles, IsolatedBuildRunnerEngineRequest request, StorageMemoryPressure mempressure, ITaskHost tasker, RealizedAssemblyItemUnificationSlave realizedAssemblyItemUnificationSlave);
    private sealed virtual override BindArtifactTypeByName JetBrains.Build.Running.IRunningIsolatedBuildContext.get_BindTypesInEngineContext();
    private sealed virtual override ITaskHost JetBrains.Build.Running.IRunningIsolatedBuildContext.get_BuildTaskHost();
    private sealed virtual override StorageMemoryPressure JetBrains.Build.Engine.IsolatedBuild.IRunningIsolatedBuildGuestContext.get_IsolatedBuildGuestStorageMemoryPressure();
    private sealed virtual override Lazy`1<IsolatedBuildRunnerEngineAssemblies> JetBrains.Build.Engine.IsolatedBuild.IRunningIsolatedBuildGuestContext.get_LazyEngineAssembiles();
    private sealed virtual override Writer JetBrains.Build.Running.IRunningIsolatedBuildContext.get_LowLevelBuildLogRecordWriter();
    private sealed virtual override RealizedAssemblyItemUnificationSlave JetBrains.Build.Running.IRunningIsolatedBuildContext.get_RealizedAssemblyItemUnificationSlave();
    private sealed virtual override IsolatedBuildRunnerEngineRequest JetBrains.Build.Engine.IsolatedBuild.IRunningIsolatedBuildGuestContext.get_RunningBuildRequest();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Build.Engine.IsolatedBuild.IsolatedBuildGuestLoadContext : AssemblyLoadContextProxy {
    [CompilerGeneratedAttribute]
private String[] <additionalProbingPaths>P;
    public IsolatedBuildGuestLoadContext(String[] additionalProbingPaths);
    protected virtual Assembly Load(AssemblyName assemblyName);
    protected virtual IntPtr LoadUnmanagedDll(string unmanagedDllName);
    private static string NameFromBaseName(string basename);
}
public class JetBrains.Build.Engine.IsolatedBuild.IsolatedBuildRunnerEngine : object {
    private BuildRunnerEngineType EngineType;
    private Void* myCrossAppDomainPointer;
    private IsolatedBuildRunnerEngineAssemblies myEngineAssemblies;
    private AppDomain myIsolatedAppDomain;
    private IsolatedBuildGuestLoadContext myIsolatedLoadContext;
    private AsyncLazy`1<Missing> myLazyCreateAppdomain;
    private Lifetime myLifetimeEngine;
    [CanBeNullAttribute]
private ILockBytes myLockBytesData;
    private BuildLogRecordMarshaller myLogMarshaller;
    private OnError myOnErrorLogMarshaller;
    private IRealizedAssemblyItemUnificationMaster myRealizedAssemblyItemUnification;
    [NotNullAttribute]
private ITaskHost myTasker;
    public IListEvents`1<BuildLogRecord> LogEntries;
    public IsolatedBuildRunnerEngine(Lifetime lifetime, BuildRunnerEngineType engineType, IsolatedBuildRunnerEngineAssemblies engineAssemblies, ITaskHost tasker);
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.IsolatedBuildRunnerEngine/<BeginRunBuildScript>d__14")]
[HandleProcessCorruptedStateExceptionsAttribute]
public Task`1<BuildRunnerResult> BeginRunBuildScript(Lifetime lifeClient, IBuildRunnerRequest request);
    private void BeginRunBuildScriptWorker(Lifetime lifeBuild, IBuildRunnerRequest request, Boxed`1<BuildRunnerResult> boxedResult);
    private void InitAppDomain_CrossAppDomainMemory();
    private void InitAppDomain_CrossAppDomainMemory_DiskFolderStructuredStorage();
    private void InitAppDomain_CrossAppDomainMemory_LockBytesData();
    private void InitAppDomain_CrossAppDomainMemory_Mmf();
    [NotNullAttribute]
private static XmlDocument InitAppdomain_MakeConfigFile(IList`1<AssemblyNameAndLocation> managed);
    private static ImmutableArray`1<byte> InitAppdomain_MakeConfigFileBytes(IList`1<AssemblyNameAndLocation> managed);
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.IsolatedBuildRunnerEngine/<InitAppdomainAsync>d__22")]
private Task`1<Missing> InitAppdomainAsync();
    protected JetAppDomainSetup InitAppdomain_CreateAppDomainSetup(BuildWorkingDirectory workdirAppDomainBase, List`1<AssemblyNameAndLocation> managedfiles);
    private void OpenCrossDomainStorage(Action`1<IStructuredStorage> FWithStorage, ReadWrite rw);
    [CompilerGeneratedAttribute]
private void <.ctor>b__12_0(Exception ex);
    [CompilerGeneratedAttribute]
private void <BeginRunBuildScript>b__14_0();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.IsolatedBuildRunnerEngine/<<InitAppdomainAsync>b__22_0>d")]
[CompilerGeneratedAttribute]
private Task <InitAppdomainAsync>b__22_0();
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.IsolatedBuildRunnerEngine/<<InitAppdomainAsync>g__RealizeFilesAsync|22_1>d")]
[CompilerGeneratedAttribute]
internal static Task`1<List`1<AssemblyNameAndLocation>> <InitAppdomainAsync>g__RealizeFilesAsync|22_1(Lifetime lifetime, BuildWorkingDirectory workdirAppDomainBase, IRealizedAssemblyItemUnification realizedAssemblyItemUnification, IReadOnlyCollection`1<ImmutableFileItem> arBinariesToRealize, ILogger Logger, ITaskHost tasker);
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.IsolatedBuildRunnerEngine/<<InitAppdomainAsync>g__CreateEvidenceAsync|22_2>d")]
[CompilerGeneratedAttribute]
internal static Task`1<Evidence> <InitAppdomainAsync>g__CreateEvidenceAsync|22_2(OuterLifetime lifetime, ITaskHost tasker, ILogger logger);
    [CompilerGeneratedAttribute]
internal static Evidence <InitAppdomainAsync>g__CreateUnderCatch|22_14();
}
public class JetBrains.Build.Engine.IsolatedBuild.IsolatedBuildRunnerEngineAssemblies : object {
    public static ILogger Logger;
    [NotNullAttribute]
public IReadOnlyCollection`1<ImmutableFileItem> BuiltInEngineAssemblies;
    [NotNullAttribute]
public IReadOnlyCollection`1<ImmutableFileItem> CustomEngineBinaries;
    public IsolatedBuildRunnerEngineAssemblies(IReadOnlyCollection`1<ImmutableFileItem> builtInEngineAssemblies, IReadOnlyCollection`1<ImmutableFileItem> customEngineBinaries);
    [UsedImplicitlyAttribute]
public IsolatedBuildRunnerEngineAssemblies(IStructuredStorage sstg);
    private static IsolatedBuildRunnerEngineAssemblies();
    [NotNullAttribute]
public IsolatedBuildRunnerEngineAssemblies WithOtherCustomEngineBinaries(IReadOnlyCollection`1<ImmutableFileItem> arCustomEngineBinaries);
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
}
[BuildHelperAttribute]
public class JetBrains.Build.Engine.IsolatedBuild.IsolatedBuildRunnerEngineNestedBuildRunner : object {
    private IRunningIsolatedBuildGuestContext myGuestContext;
    private ILogger myLogger;
    private int myNestedRunsCount;
    private ITaskHost myTasker;
    public IsolatedBuildRunnerEngineNestedBuildRunner(IRunningIsolatedBuildContext guestcontext, ITaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.IsolatedBuildRunnerEngineNestedBuildRunner/<RunNestedBuildInheritedAsync>d__5")]
public sealed virtual Task`1<BuildRunnerResult> RunNestedBuildInheritedAsync(Lifetime lifetime, InheritFromParentRequest inherit, FillNestedRequestDelegate λFillRequest);
    private static void InheritEngine(IBuildRunnerRequest request, IRunningIsolatedBuildGuestContext guestctx);
    private static void InheritInputs(IBuildRunnerRequest request, Lazy`1<SerializedValuesResolver> resolveInputArtifactInstances, IRunningIsolatedBuildGuestContext guestctx, ILogger logger);
    private static void InheritObjectives(IBuildRunnerRequest request, IRunningIsolatedBuildGuestContext guestctx);
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.IsolatedBuildRunnerEngineNestedBuildRunner/<InheritScript>d__9")]
private static Task InheritScript(Lifetime lifetime, IBuildRunnerRequest request, bool isBuildScriptBinariesInInputArtifactsOk, Lazy`1<SerializedValuesResolver> resolveInputArtifactInstances, IRunningIsolatedBuildGuestContext guestctx, ITaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.IsolatedBuildRunnerEngineNestedBuildRunner/<JetBrains-Build-Running-INestedBuildRunner-RunNestedBuildAsync>d__10")]
[HandleProcessCorruptedStateExceptionsAttribute]
private sealed virtual override Task`1<BuildRunnerResult> JetBrains.Build.Running.INestedBuildRunner.RunNestedBuildAsync(Lifetime lifetime, IBuildRunnerRequest request);
    private sealed virtual override Task`1<BuildRunnerResult> JetBrains.Build.Running.INestedBuildRunner.RunNestedBuildOnParentInputsAsync(Lifetime lifetime, FillNestedRequestDelegate λFillRequest);
    [HandleProcessCorruptedStateExceptionsAttribute]
private sealed virtual override BuildRunnerResult JetBrains.Build.Running.INestedBuildRunner.RunNestedBuildSync(Lifetime lifetime, IBuildRunnerRequest request);
}
public class JetBrains.Build.Engine.IsolatedBuild.IsolatedBuildRunnerEngineRequest : object {
    private static ILogger Logger;
    private IStructuredStorage mySstgRoot;
    private IsolatedBuildRunnerEngineRequest(IStructuredStorage sstgRoot);
    private static IsolatedBuildRunnerEngineRequest();
    [NotNullAttribute]
public IReadOnlyList`1<ImmutableFileItem> GetBuildScriptBinaries();
    [NotNullAttribute]
public IReadOnlyCollection`1<AssemblyQualifiedTypeName> GetBuildScriptBinariesInInputArtifacts();
    [NotNullAttribute]
public IReadOnlyList`1<ImmutableFileItem> GetBuildScriptSources();
    public BuildRunnerEngineType GetEngineChoice();
    public SerializedValuesResolver GetInputArtifacts(Lifetime lifetime, IBindTypeByName typebinder);
    [NotNullAttribute]
public IReadOnlyCollection`1<KeyValuePair`2<InputArtifactStringName, string>> GetInputArtifactStrings();
    [NotNullAttribute]
public IReadOnlyCollection`1<AssemblyQualifiedTypeName> GetObjectives();
    [NotNullAttribute]
public string GetStageDisplayName();
    public static IsolatedBuildRunnerEngineRequest ReadFromStorage(IStructuredStorage sstgRoot);
    public static void WriteToStorage(IBuildRunnerRequest request, IStructuredStorage sstgRoot);
}
[BuildEngineImplementationAttribute]
public class JetBrains.Build.Engine.IsolatedBuild.IsolatedBuildRunners : object {
    private IBuiltInBuildEngineExtraction myBuiltInBuildEngineExtraction;
    private Lifetime myLifetime;
    [NotNullAttribute]
private IBuildTaskHost myTasker;
    public IsolatedBuildRunners(Lifetime lifetime, IBuiltInBuildEngineExtraction builtInBuildEngineExtraction, IBuildTaskHost tasker);
    public sealed virtual BuildRunnerSession BeginRunBuildScript(Lifetime lifetime, BuildRunnerRequest request);
    public IsolatedBuildRunnerEngine CreateBuiltInEngine(Lifetime lifetime);
    public IsolatedBuildRunnerEngine CreateSpecificEngine(Lifetime lifetime, BuildRunnerRequest request);
    [NotNullAttribute]
private IsolatedBuildRunnerEngine CreateEngine(Lifetime lifetime, BuildRunnerRequest request);
}
public class JetBrains.Build.Engine.IsolatedBuild.ScriptSources.BuildScriptSourcesRefAsmPromise : object {
    [CompilerGeneratedAttribute]
private AsyncLazy`1<JetPackageIdentity> <RefAsmPackageId>k__BackingField;
    [CompilerGeneratedAttribute]
private AsyncLazy`1<ImmutableArray`1<IAssemblyItemInPackage>> <Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private FrameworkName <TargetFX>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public AsyncLazy`1<JetPackageIdentity> RefAsmPackageId { get; public set; }
    public AsyncLazy`1<ImmutableArray`1<IAssemblyItemInPackage>> Assemblies { get; public set; }
    public FrameworkName TargetFX { get; public set; }
    public BuildScriptSourcesRefAsmPromise(AsyncLazy`1<JetPackageIdentity> RefAsmPackageId, AsyncLazy`1<ImmutableArray`1<IAssemblyItemInPackage>> Assemblies, FrameworkName TargetFX);
    [CompilerGeneratedAttribute]
protected BuildScriptSourcesRefAsmPromise(BuildScriptSourcesRefAsmPromise original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public AsyncLazy`1<JetPackageIdentity> get_RefAsmPackageId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RefAsmPackageId(AsyncLazy`1<JetPackageIdentity> value);
    [CompilerGeneratedAttribute]
public AsyncLazy`1<ImmutableArray`1<IAssemblyItemInPackage>> get_Assemblies();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Assemblies(AsyncLazy`1<ImmutableArray`1<IAssemblyItemInPackage>> value);
    [CompilerGeneratedAttribute]
public FrameworkName get_TargetFX();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TargetFX(FrameworkName value);
    public static BuildScriptSourcesRefAsmPromise FromTargetFramework(Lifetime lifetime, FrameworkName tfx, Lazy`1<IJetNugetPackageManager> nugetter, ITaskHost tasker, ILogger Logger);
    public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(BuildScriptSourcesRefAsmPromise left, BuildScriptSourcesRefAsmPromise right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(BuildScriptSourcesRefAsmPromise left, BuildScriptSourcesRefAsmPromise right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(BuildScriptSourcesRefAsmPromise other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual BuildScriptSourcesRefAsmPromise <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(AsyncLazy`1& RefAsmPackageId, AsyncLazy`1& Assemblies, FrameworkName& TargetFX);
}
public class JetBrains.Build.Engine.IsolatedBuild.ScriptSources.CompiledBuildScriptSources : object {
    [NotNullAttribute]
public AssemblyItem CompiledAssembly;
    public bool IsWithErros;
    public ImmutableArray`1<BuildSourceReference> MetadataReferencesFromSource;
    public CompiledBuildScriptSources(AssemblyItem compiledAssembly, ImmutableArray`1<BuildSourceReference> metadataReferencesFromSource, bool isWithErros);
    [UsedImplicitlyAttribute]
public CompiledBuildScriptSources(IStructuredStorage sstgOuter);
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstgOuter);
}
public class JetBrains.Build.Engine.IsolatedBuild.ScriptSources.Compilers.CodeDomSourcesCompiler : CscBasedSourcesCompiler {
    public CodeDomSourcesCompiler(ILogger logger);
    protected virtual CompilerResults SingleRunCompilerCore(Lifetime lifeCompileAttempt, FileSystemPath pathEmittedAssembly, CommandLineBuilderJet cmdlCommon, List`1<FileSystemPath> pathsSrcRealized);
}
public abstract class JetBrains.Build.Engine.IsolatedBuild.ScriptSources.Compilers.CscBasedSourcesCompiler : object {
    protected ILogger Logger;
    private string myAssemblySimpleName;
    private ICollection`1<string> myDefines;
    private ICollection`1<IResolvedScriptSourceDllReference> myScriptToDllReferences;
    private ICollection`1<IScriptSourcesCompilerFileItem> mySourceFiles;
    protected CscBasedSourcesCompiler(ILogger logger);
    private sealed virtual override IList`1<IScriptSourceToDllReference> JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourcesCompilerSession.CollectScriptToDllReferences();
    private sealed virtual override IScriptSourcesCompilerAssemblyItem JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourcesCompilerSession.Compile();
    private static void MakeReferencedAssembliesList(Lifetime lifeCompileShared, ICollection`1<IResolvedScriptSourceDllReference> refs, CommandLineBuilderJet cmdl, ILogger logger);
    private static void PumpDiagnosticsIntoLogger(CompilerErrorCollection errors, ILogger logger);
    private sealed virtual override void JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourcesCompilerSession.SetAssemblySimpleName(string simplename);
    private sealed virtual override void JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourcesCompilerSession.SetPreprocessorSymbols(ICollection`1<string> defines);
    private sealed virtual override void JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourcesCompilerSession.SetScriptToDllReferences(ICollection`1<IResolvedScriptSourceDllReference> dllreferences);
    private sealed virtual override void JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourcesCompilerSession.SetSourceFiles(ICollection`1<IScriptSourcesCompilerFileItem> sources);
    [NotNullAttribute]
protected abstract virtual CompilerResults SingleRunCompilerCore(Lifetime lifeCompileAttempt, FileSystemPath pathEmittedAssembly, CommandLineBuilderJet cmdlCommon, List`1<FileSystemPath> pathsSrcRealized);
    [CompilerGeneratedAttribute]
private IScriptSourcesCompilerAssemblyItem <JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourcesCompilerSession.Compile>b__7_0(Lifetime lifeCompileShared);
}
public class JetBrains.Build.Engine.IsolatedBuild.ScriptSources.Compilers.ToolsetCscSourcesCompiler : CscBasedSourcesCompiler {
    private static string CscExeFileName;
    [NotNullAttribute]
private InvokeMsbuildToolset myToolset;
    public ToolsetCscSourcesCompiler(InvokeMsbuildToolset toolset, ILogger logger);
    private static ToolsetCscSourcesCompiler();
    protected virtual CompilerResults SingleRunCompilerCore(Lifetime lifeCompileAttempt, FileSystemPath pathEmittedAssembly, CommandLineBuilderJet cmdlCommon, List`1<FileSystemPath> pathsSrcRealized);
}
public static class JetBrains.Build.Engine.IsolatedBuild.ScriptSources.IsolatedBuildGuestSources : object {
    private static JetPackageIdentity ourRoslynSourcesCompilerPackageId;
    private static string RoslynSourcesCompilerAssemblySimpleName;
    private static IsolatedBuildGuestSources();
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.ScriptSources.IsolatedBuildGuestSources/<TryCompileBuildSourcesAsync>d__2")]
[ItemCanBeNullAttribute]
public static Task`1<CompiledBuildScriptSources> TryCompileBuildSourcesAsync(Lifetime lifeCompile, IReadOnlyList`1<ImmutableFileItem> sources, IReadOnlyCollection`1<IAssemblyItem> buildScriptBinaries, Lazy`1<IJetNugetPackageManager> nugetter, ScriptSourceImplicitEngineDllReferences enginefiles, JetNugetTargetFramework targetFrameworkName, BuildScriptSourcesRefAsmPromise refAsmPromise, ITaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.ScriptSources.IsolatedBuildGuestSources/<TryCompileBuildSourcesWithCompiler>d__3")]
[ItemCanBeNullAttribute]
public static Task`1<CompiledBuildScriptSources> TryCompileBuildSourcesWithCompiler(Lifetime lifetime, IReadOnlyList`1<ImmutableFileItem> sources, IReadOnlyCollection`1<IAssemblyItem> buildScriptBinaries, ScriptSourceImplicitEngineDllReferences enginefiles, JetNugetTargetFramework targetFrameworkName, IScriptSourcesCompilerSession sourcecompiler, Lazy`1<IJetNugetPackageManager> nugetter, BuildScriptSourcesRefAsmPromise refAsmPromise, ITaskHost tasker, CountingLogger Logger);
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.ScriptSources.IsolatedBuildGuestSources/<ChooseCompiler>d__4")]
private static Task`1<IScriptSourcesCompilerSession> ChooseCompiler(Lifetime lifeCompile, Lazy`1<IJetNugetPackageManager> nugetter, ITaskHost tasker, CountingLogger logger);
    [ItemCanBeNullAttribute]
private static Task`1<IScriptSourcesCompilerSession> ChooseCompiler_TryGetRoslynEmbedded(CountingLogger logger);
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.ScriptSources.IsolatedBuildGuestSources/<ChooseCompiler_TryGetRoslynNuget>d__6")]
[ItemCanBeNullAttribute]
private static Task`1<IScriptSourcesCompilerSession> ChooseCompiler_TryGetRoslynNuget(Lifetime lifeCompile, Lazy`1<IJetNugetPackageManager> nugetter, ITaskHost tasker, ILogger logger);
    private static ImmutableArray`1<ResolvedScriptSourceDllReference> CollectMetadataReferences_ResolveBuildScriptBinaries(IReadOnlyCollection`1<IAssemblyItem> aiBinaries, ILogger Logger);
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.ScriptSources.IsolatedBuildGuestSources/<CollectReferencesFromSource>d__8")]
[NotNullAttribute]
private static Task`1<ImmutableArray`1<ResolvedScriptSourceDllReference>> CollectReferencesFromSource(Lifetime lifetime, Lazy`1<IJetNugetPackageManager> nugetter, Task`1<List`1<ScriptSourceToDllReference>> futureReferencesRaw, JetNugetTargetFramework targetFrameworkName, BuildScriptSourcesRefAsmPromise refAsmPromise, ITaskHost tasker, ILogger Logger);
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.ScriptSources.IsolatedBuildGuestSources/<CollectReferencesFromSource_ResolveGacDll>d__9")]
[NotNullAttribute]
private static Task`1<ImmutableArray`1<ResolvedScriptSourceDllReference>> CollectReferencesFromSource_ResolveGacDll(Lifetime lifetime, IList`1<ScriptSourceToGacDllReference> referencesRaw, BuildScriptSourcesRefAsmPromise refAsmPromise, ITaskHost tasker, ILogger Logger);
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.ScriptSources.IsolatedBuildGuestSources/<CollectReferencesFromSource_ResolveNugetPackages>d__10")]
[NotNullAttribute]
private static Task`1<ImmutableArray`1<ResolvedScriptSourceDllReference>> CollectReferencesFromSource_ResolveNugetPackages(Lifetime lifetime, ICollection`1<ScriptSourceToNugetPackageReference> referencesRaw, Lazy`1<IJetNugetPackageManager> nugetter, JetNugetTargetFramework targetfx, ITaskHost tasker, ILogger Logger);
    private static ImmutableArray`1<IResolvedScriptSourceDllReference> DeduplicateReferences(IList`1<ResolvedScriptSourceDllReference> referencesRaw);
}
public class JetBrains.Build.Engine.IsolatedBuild.ScriptSources.ResolvedScriptSourceDllReference : object {
    private FrugalLocalLazy`1<ConcurrentDictionary`2<string, object>> myCache;
    public ResolvedScriptSourceDllReferenceOrigin Origin;
    [NotNullAttribute]
public AssemblyItem OriginalAssemblyItem;
    [NotNullAttribute]
public AssemblyNameInfo AssemblyName { get; }
    private string JetBrains.Toolset.ScriptSourcesCompiler.Interface.IResolvedScriptSourceDllReference.AssemblySimpleName { get; }
    private string JetBrains.Toolset.ScriptSourcesCompiler.Interface.IResolvedScriptSourceDllReference.AssemblyTextualIdentity { get; }
    private ConcurrentDictionary`2<string, object> JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourceCache.Cache { get; }
    private string JetBrains.Toolset.ScriptSourcesCompiler.Interface.IResolvedScriptSourceDllReference.FullPathIfOnDisk { get; }
    private bool JetBrains.Toolset.ScriptSourcesCompiler.Interface.IResolvedScriptSourceDllReference.IsLoadedInMemory { get; }
    public ResolvedScriptSourceDllReference(IAssemblyItem ai, ResolvedScriptSourceDllReferenceOrigin origin);
    [UsedImplicitlyAttribute]
public ResolvedScriptSourceDllReference(IStructuredStorage sstg);
    public AssemblyNameInfo get_AssemblyName();
    [NotNullAttribute]
public AssemblyItem GetOrLoadAssemblyItem();
    public virtual string ToString();
    private sealed virtual override string JetBrains.Toolset.ScriptSourcesCompiler.Interface.IResolvedScriptSourceDllReference.get_AssemblySimpleName();
    private sealed virtual override string JetBrains.Toolset.ScriptSourcesCompiler.Interface.IResolvedScriptSourceDllReference.get_AssemblyTextualIdentity();
    private sealed virtual override ConcurrentDictionary`2<string, object> JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourceCache.get_Cache();
    private sealed virtual override string JetBrains.Toolset.ScriptSourcesCompiler.Interface.IResolvedScriptSourceDllReference.get_FullPathIfOnDisk();
    private sealed virtual override Stream JetBrains.Toolset.ScriptSourcesCompiler.Interface.IResolvedScriptSourceDllReference.GetInMemoryStreamOrLoadFromDisk();
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
    private sealed virtual override bool JetBrains.Toolset.ScriptSourcesCompiler.Interface.IResolvedScriptSourceDllReference.get_IsLoadedInMemory();
}
public enum JetBrains.Build.Engine.IsolatedBuild.ScriptSources.ResolvedScriptSourceDllReferenceOrigin : Enum {
    public int value__;
    public static ResolvedScriptSourceDllReferenceOrigin ExplicitReferenceFromSource;
    public static ResolvedScriptSourceDllReferenceOrigin BuildScriptBinaries;
    public static ResolvedScriptSourceDllReferenceOrigin BuildEngineAssemblyReferences;
}
public class JetBrains.Build.Engine.IsolatedBuild.ScriptSources.ScriptSourceImplicitEngineDllReferences : object {
    [NotNullAttribute]
public static AssemblyNameInfo EngineReferencesStartingAssembly;
    private static ImmutableHashSet`1<string> ourBlacklistedBuiltInBuildEngineAssemblies;
    private AsyncLazy`1<ImmutableArray`1<IAssemblyItem>> myChosenEngineAssemblies;
    private AsyncLazy`1<ImmutableArray`1<ResolvedScriptSourceDllReference>> myFutureMetadataReferences;
    public ScriptSourceImplicitEngineDllReferences(Lifetime lifetime, ChosenEngine chosenengine, BuildScriptSourcesRefAsmPromise refAsmPromise, JetNugetTargetFramework targetFrameworkName, ITaskHost tasker, ILogger logger);
    private static ScriptSourceImplicitEngineDllReferences();
    public Task`1<ImmutableArray`1<IAssemblyItem>> GetEngineAssembliesForCompilationIdentity();
    [ItemNotNullAttribute]
public Task`1<ImmutableArray`1<ResolvedScriptSourceDllReference>> GetMetadataReferencesAsync();
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.ScriptSources.ScriptSourceImplicitEngineDllReferences/<CreateFromEngine_GetAssemblyAndReferencesAndRefAsm>d__7")]
private static Task`1<ImmutableArray`1<ResolvedScriptSourceDllReference>> CreateFromEngine_GetAssemblyAndReferencesAndRefAsm(AssemblyNameInfo assemblyStart, ChosenEngine chosenengine, Task`1<ImmutableArray`1<IAssemblyItem>> enginefiles, BuildScriptSourcesRefAsmPromise refAsmPromise, ILogger Logger);
    [AsyncStateMachineAttribute("JetBrains.Build.Engine.IsolatedBuild.ScriptSources.ScriptSourceImplicitEngineDllReferences/<CreateFromEngineAsync>d__8")]
private static Task`1<ImmutableArray`1<ResolvedScriptSourceDllReference>> CreateFromEngineAsync(ChosenEngine chosenengine, Task`1<ImmutableArray`1<IAssemblyItem>> enginefiles, BuildScriptSourcesRefAsmPromise refAsmPromise, ILogger Logger);
}
public class JetBrains.Build.Engine.IsolatedBuild.ScriptSources.ScriptSourcesCompilerAssemblyItem : object {
    [NotNullAttribute]
public AssemblyItem AssemblyItem;
    public ScriptSourcesCompilerAssemblyItem(ImmutableFileItem fiDll, ImmutableFileItem fiPdb, ImmutableFileItem fiXmlDoc);
    public ScriptSourcesCompilerAssemblyItem(Action`1<Action`1<Stream>> fDll, Action`1<Action`1<Stream>> fPdb, Action`1<Action`1<Stream>> fXmlDoc);
    public virtual string ToString();
}
public class JetBrains.Build.Engine.IsolatedBuild.ScriptSources.ScriptSourcesCompilerExternalObjectsFactory : object {
    private sealed virtual override IScriptSourcesCompilerAssemblyItem JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourcesCompilerExternalObjectsFactory.CreateScriptSourcesCompilerAssemblyItem(Action`1<Action`1<Stream>> dll, Action`1<Action`1<Stream>> pdb, Action`1<Action`1<Stream>> xmldoc);
    private sealed virtual override IScriptSourceToDllReference JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourcesCompilerExternalObjectsFactory.CreateScriptToGacDllReference(string sScriptFileRelativePath, string sAssemblyTextualIdentity);
    private sealed virtual override IScriptSourceToDllReference JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourcesCompilerExternalObjectsFactory.CreateScriptToNugetReference(string sScriptFileRelativePath, string sId, string Version);
    private sealed virtual override IScriptSourceToDllReference JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourcesCompilerExternalObjectsFactory.TryParseReferenceDirective(string pragmatext, string sFileRelativePath, bool isReportNonReference, Action`1<string> FError, Action`1<string> FVerbose);
}
public class JetBrains.Build.Engine.IsolatedBuild.ScriptSources.ScriptSourcesCompilerFileItem : object {
    [NotNullAttribute]
public ImmutableFileItem FileItem;
    private string JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourcesCompilerFileItem.RelativePath { get; }
    public ScriptSourcesCompilerFileItem(ImmutableFileItem fi);
    public virtual string ToString();
    [NotNullAttribute]
public static IScriptSourcesCompilerFileItem Wrap(ImmutableFileItem fi);
    private sealed virtual override void JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourcesCompilerFileItem.FileContent(Action`1<Stream> FWithStream);
    private sealed virtual override string JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourcesCompilerFileItem.get_RelativePath();
}
public class JetBrains.Build.Engine.IsolatedBuild.ScriptSources.ScriptSourcesCompilerLogger : object {
    private ILogger myLogger;
    public ScriptSourcesCompilerLogger(ILogger logger);
    private static LoggingLevel ConvertLevel(ScriptSourcesCompilerLoggerLevel level);
    private sealed virtual override void JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourcesCompilerLogger.Log(ScriptSourcesCompilerLoggerLevel level, Exception ex, string text);
}
public abstract class JetBrains.Build.Engine.IsolatedBuild.ScriptSources.ScriptSourceToDllReference : object {
    private static Regex myRegexPragmaReference;
    public RelativePath File;
    private string JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourceToDllReference.ScriptFileRelativePath { get; }
    protected ScriptSourceToDllReference(RelativePath file);
    private static ScriptSourceToDllReference();
    [CanBeNullAttribute]
public static IScriptSourceToDllReference TryParseReferenceDirective(string pragmatext, RelativePath file, bool isReportNonReference, Action`1<string> FError, Action`1<string> FVerbose);
    private sealed virtual override string JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourceToDllReference.get_ScriptFileRelativePath();
}
public class JetBrains.Build.Engine.IsolatedBuild.ScriptSources.ScriptSourceToGacDllReference : ScriptSourceToDllReference {
    public AssemblyNameInfo AssemblyName;
    private string JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourceToGacDllReference.AssemblyTextualIdentity { get; }
    public ScriptSourceToGacDllReference(AssemblyNameInfo assemblyname, RelativePath file);
    public virtual string ToString();
    private sealed virtual override string JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourceToGacDllReference.get_AssemblyTextualIdentity();
}
public class JetBrains.Build.Engine.IsolatedBuild.ScriptSources.ScriptSourceToNugetPackageReference : ScriptSourceToDllReference {
    public string Id;
    public JetSemanticVersion Version;
    private string JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourceToNugetPackageReference.Id { get; }
    private string JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourceToNugetPackageReference.Version { get; }
    public ScriptSourceToNugetPackageReference(string id, JetSemanticVersion version, RelativePath file);
    public virtual string ToString();
    private sealed virtual override string JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourceToNugetPackageReference.get_Id();
    private sealed virtual override string JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourceToNugetPackageReference.get_Version();
}
[ExtensionAttribute]
internal static class JetBrains.Toolset.ScriptSourcesCompiler.Roslyn.Compilers.Ext : object {
    [ExtensionAttribute]
public static void Error(IScriptSourcesCompilerLogger logger, string text);
    [ExtensionAttribute]
public static void Error(IScriptSourcesCompilerLogger logger, Exception ex, string text);
    [ExtensionAttribute]
public static void Error(IScriptSourcesCompilerLogger logger, Exception ex);
    [ExtensionAttribute]
public static void Trace(IScriptSourcesCompilerLogger logger, string text);
    [ExtensionAttribute]
public static void Verbose(IScriptSourcesCompilerLogger logger, string text);
    [ExtensionAttribute]
public static void Warn(IScriptSourcesCompilerLogger logger, string text);
}
public class JetBrains.Toolset.ScriptSourcesCompiler.Roslyn.Compilers.RoslynSourcesCompiler : object {
    public static String[] SuppressWarnings;
    private IScriptSourcesCompilerLogger Logger;
    [NotNullAttribute]
private IScriptSourcesCompilerExternalObjectsFactory myObjectsFactory;
    private ICollection`1<string> myPreprocessorSymbols;
    [CanBeNullAttribute]
private Byte[] myPublicKey;
    private ICollection`1<IResolvedScriptSourceDllReference> myScriptToDllReferences;
    private string mySimpleAssemblyName;
    private IList`1<SyntaxTree> mySyntaxTrees;
    public RoslynSourcesCompiler(IScriptSourcesCompilerExternalObjectsFactory objectsfactory, IScriptSourcesCompilerLogger logger);
    private static RoslynSourcesCompiler();
    [NotNullAttribute]
public sealed virtual IList`1<IScriptSourceToDllReference> CollectScriptToDllReferences();
    private sealed virtual override IScriptSourcesCompilerAssemblyItem JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourcesCompilerSession.Compile();
    private static void Compile_LogMetadataReferences(List`1<PortableExecutableReference> metarefs, IScriptSourcesCompilerLogger logger);
    private static IList`1<SyntaxTree> ParseSourceFiles(ICollection`1<IScriptSourcesCompilerFileItem> sources, IScriptSourcesCompilerLogger logger, ICollection`1<string> preprocessorsymbols);
    private static bool PumpDiagnosticsIntoLogger(IEnumerable`1<Diagnostic> diagnostics, IScriptSourcesCompilerLogger Logger);
    private static PortableExecutableReference ReadDllReference(IResolvedScriptSourceDllReference dllref, IScriptSourcesCompilerLogger logger);
    private sealed virtual override void JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourcesCompilerSession.SetAssemblySimpleName(string simplename);
    private sealed virtual override void JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourcesCompilerSession.SetPreprocessorSymbols(ICollection`1<string> defines);
    private sealed virtual override void JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourcesCompilerSession2.SetPublicKey(Byte[] publickey);
    private sealed virtual override void JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourcesCompilerSession.SetScriptToDllReferences(ICollection`1<IResolvedScriptSourceDllReference> dllreferences);
    private sealed virtual override void JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourcesCompilerSession.SetSourceFiles(ICollection`1<IScriptSourcesCompilerFileItem> sources);
    [CompilerGeneratedAttribute]
private void <CollectScriptToDllReferences>g__Error|9_0(string s);
    [CompilerGeneratedAttribute]
private void <CollectScriptToDllReferences>g__Verbose|9_1(string s);
}
[UsedImplicitlyAttribute]
[PublicAPIAttribute]
public class JetBrains.Toolset.ScriptSourcesCompiler.Roslyn.Compilers.RoslynSourcesCompilerFactory : object {
    private static RoslynSourcesCompilerFactory();
    private sealed virtual override IScriptSourcesCompilerSession JetBrains.Toolset.ScriptSourcesCompiler.Interface.IScriptSourcesCompiler.CreateSession(IScriptSourcesCompilerExternalObjectsFactory objectsfactory, IScriptSourcesCompilerLogger logger);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
