[ActionGroupAttribute("0", "16")]
public class JetBrains.IDE.Actions.Test.ActionsTestGroup : object {
}
[ZoneMarkerAttribute]
[ShellComponentAttribute("10")]
public class JetBrains.IDE.Actions.Test.TestActionDataRuleProvider : object {
    private ILogger myLogger;
    private Lifetime myRequirementLifetime;
    private RdDataConstant myRdDataConstant;
    private Type myActionRequirementType;
    private IActionRequirement myActionRequirement;
    public TestActionDataRuleProvider(Lifetime lifetime, ILogger logger, IActionManager actionManager);
    [IteratorStateMachineAttribute("JetBrains.IDE.Actions.Test.TestActionDataRuleProvider/<JetBrains-Platform-RdFramework-Actions-Frontend-IRdDataConstantProvider-GetDataConstants>d__6")]
private sealed virtual override IEnumerable`1<RdDataConstant> JetBrains.Platform.RdFramework.Actions.Frontend.IRdDataConstantProvider.GetDataConstants();
    [IteratorStateMachineAttribute("JetBrains.IDE.Actions.Test.TestActionDataRuleProvider/<JetBrains-Platform-RdFramework-Actions-Backend-IRdDataRuleProvider-GetDataRules>d__7")]
private sealed virtual override IEnumerable`1<IDataRule> JetBrains.Platform.RdFramework.Actions.Backend.IRdDataRuleProvider.GetDataRules(RdDataConstant constant);
    public void SetTestActionRequirement(Lifetime lifetime, bool byDataConstant);
    private IActionRequirement GetActionRequirement(IDataContext context, Type requirementType);
    [CompilerGeneratedAttribute]
private IActionRequirement <.ctor>b__5_0(IDataContext context);
    [CompilerGeneratedAttribute]
private void <SetTestActionRequirement>b__8_0();
    [CompilerGeneratedAttribute]
private void <SetTestActionRequirement>b__8_1();
    [CompilerGeneratedAttribute]
private void <SetTestActionRequirement>b__8_2();
    [CompilerGeneratedAttribute]
private void <SetTestActionRequirement>b__8_3();
}
public class JetBrains.IDE.Actions.Test.TestActionRequirementDataConstant : RdDataConstant {
    [CompilerGeneratedAttribute]
private Type <TestActionRequirementType>k__BackingField;
    public Type TestActionRequirementType { get; }
    public TestActionRequirementDataConstant(Type testActionRequirementType);
    [CompilerGeneratedAttribute]
public Type get_TestActionRequirementType();
}
public abstract class JetBrains.IDE.Actions.Test.TestActionWithAcquiringWriteLockBeforeHandshakeBase : TestActionWithRequirementBase`1<TestRequirementWithQueueingWriteActivityAfterDone> {
}
[ActionAttribute("Test Action &With Requirement")]
public class JetBrains.IDE.Actions.Test.TestActionWithRequirement : TestActionWithRequirementBase {
    public virtual IActionRequirement TryGetRequirement(IDataContext dataContext);
}
public abstract class JetBrains.IDE.Actions.Test.TestActionWithRequirementBase : object {
    public abstract virtual IActionRequirement TryGetRequirement(IDataContext dataContext);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    protected virtual string GetActionName(IDataContext dataContext);
}
public abstract class JetBrains.IDE.Actions.Test.TestActionWithRequirementBase`1 : TestActionWithRequirementBase {
    public virtual IActionRequirement TryGetRequirement(IDataContext dataContext);
    protected virtual string GetActionName(IDataContext dataContext);
}
public abstract class JetBrains.IDE.Actions.Test.TestActionWithRequirementDataConstants : object {
    public static DataConstant`1<IActionRequirement> REQUIREMENT;
    private static TestActionWithRequirementDataConstants();
}
public abstract class JetBrains.IDE.Actions.Test.TestActionWithRequirementInterruptingBase : TestActionWithRequirementBase`1<TestThreeTimesFailedRequirement> {
}
[ZoneMarkerAttribute]
[ShellComponentAttribute("10")]
public class JetBrains.IDE.Actions.Test.TestReadyRequirement : TestRequirementBase {
    public TestReadyRequirement(Lifetime lifetime, ILogger logger, IShellLocks shellLocks);
}
[ZoneMarkerAttribute]
[ShellComponentAttribute("10")]
public class JetBrains.IDE.Actions.Test.TestRequirement : TestRequirementBase {
    public TestRequirement(Lifetime lifetime, ILogger logger, IShellLocks shellLocks);
}
public abstract class JetBrains.IDE.Actions.Test.TestRequirementBase : object {
    private static int RequirementExecutionTimeoutMs;
    private int myOrder;
    private IShellLocks myShellLocks;
    private ILogger myLogger;
    private int myAttemptCounter;
    [CompilerGeneratedAttribute]
private ISignal`1<RequirementState> <Done>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public bool IsReady { get; }
    public ISignal`1<RequirementState> Done { get; }
    public Lifetime Lifetime { get; }
    public string Description { get; }
    protected TestRequirementBase(Lifetime lifetime, ILogger logger, IShellLocks shellLocks, int order);
    public sealed virtual bool get_IsReady();
    public sealed virtual void GetReady();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<RequirementState> get_Done();
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
}
[ZoneMarkerAttribute]
[ShellComponentAttribute("10")]
public class JetBrains.IDE.Actions.Test.TestRequirementWithQueueingWriteActivityAfterDone : object {
    private static int Order;
    private ILogger myLogger;
    private IShellLocks myShellLocks;
    private int myAttemptCounter;
    [CompilerGeneratedAttribute]
private ISignal`1<RequirementState> <Done>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public bool IsReady { get; }
    public ISignal`1<RequirementState> Done { get; }
    public Lifetime Lifetime { get; }
    public string Description { get; }
    public TestRequirementWithQueueingWriteActivityAfterDone(Lifetime lifetime, ILogger logger, IShellLocks shellLocks);
    public sealed virtual bool get_IsReady();
    public sealed virtual void GetReady();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<RequirementState> get_Done();
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
private void <GetReady>b__7_0();
    [CompilerGeneratedAttribute]
private void <GetReady>b__7_1();
}
[ZoneMarkerAttribute]
[ShellComponentAttribute("10")]
public class JetBrains.IDE.Actions.Test.TestThreeTimesFailedRequirement : TestRequirementBase {
    public TestThreeTimesFailedRequirement(Lifetime lifetime, ILogger logger, IShellLocks shellLocks);
}
public class JetBrains.IDE.AddReference.Action.AddReferenceController : GotoByNameController {
    private IList`1<IAddReferenceItem> myItems;
    private IProjectModelEditor myEditor;
    private IProject myProject;
    public int MenuItemsCountLimit { get; }
    public AddReferenceController(Lifetime lifetime, GotoByNameModel model, IShellLocks locks, IList`1<IAddReferenceItem> items, IProjectModelEditor editor, IProject project);
    protected virtual bool ExecuteItem(JetPopupMenuItem item, ISignal`1<bool> closeBeforeExecute);
    public virtual int get_MenuItemsCountLimit();
    protected virtual bool UpdateItems(string filterString, Func`3<IEnumerable`1<JetPopupMenuItem>, AddItemsBehavior, bool> itemsConsumer);
    private void AppendText(RichText text, AddReferenceItemModificators referenceItemPriority);
}
[SolutionComponentAttribute("16")]
public class JetBrains.IDE.AddReference.Action.AddReferenceNavigationHandlerDefault : object {
    public virtual void OnReferenceAdded(IProjectToModuleReference reference);
}
public class JetBrains.IDE.AddReference.Action.DefaultReferenceExecutor : AddReferenceItemVisitor`1<IProjectToModuleReference> {
    private IProjectModelEditor myEditor;
    private IProject myProject;
    public DefaultReferenceExecutor(IProjectModelEditor editor, IProject project);
    public virtual IProjectToModuleReference Visit(AddAssemblyReference addAssemblyReference);
    public virtual IProjectToModuleReference Visit(AddProjectReference addProjectReference);
    public virtual IProjectToModuleReference Visit(AddComReference addComReference);
}
public class JetBrains.IDE.AddReference.AddReferenceGroup : object {
    [CompilerGeneratedAttribute]
private string <PresentableName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public string PresentableName { get; }
    public int Priority { get; }
    public AddReferenceGroup(string presentableName, int priority);
    [CompilerGeneratedAttribute]
public string get_PresentableName();
    [CompilerGeneratedAttribute]
public int get_Priority();
    public sealed virtual bool Equals(AddReferenceGroup other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[SolutionComponentAttribute("0")]
public class JetBrains.IDE.AddReference.AddReferenceItemCollector : object {
    private IEnumerable`1<IAddReferenceSource> myAddReferenceSources;
    public AddReferenceItemCollector(IEnumerable`1<IAddReferenceSource> addReferenceSources);
    public IList`1<IAddReferenceItem> CollectAvailableItems(IProject project);
    private int CompareAll(IAddReferenceItem x, IAddReferenceItem y);
}
[FlagsAttribute]
public enum JetBrains.IDE.AddReference.AddReferenceItemModificators : Enum {
    public int value__;
    public static AddReferenceItemModificators None;
    public static AddReferenceItemModificators ExistingLibrary;
    public static AddReferenceItemModificators ProjectWillAddCircular;
    public static AddReferenceItemModificators IncompatibleFramework;
    public static AddReferenceItemModificators AlreadyAdded;
    public static AddReferenceItemModificators ReferenceToSelf;
    public static AddReferenceItemModificators Missing;
    public static AddReferenceItemModificators BadItemMask;
}
public abstract class JetBrains.IDE.AddReference.AddReferenceItemVisitor : object {
    public abstract virtual void VoidVisit(AddAssemblyReference addAssemblyReference);
    public abstract virtual void VoidVisit(AddProjectReference addProjectReference);
    public abstract virtual void VoidVisit(AddComReference addComReference);
}
public abstract class JetBrains.IDE.AddReference.AddReferenceItemVisitor`1 : AddReferenceItemVisitor {
    public sealed virtual void VoidVisit(AddAssemblyReference addAssemblyReference);
    public sealed virtual void VoidVisit(AddProjectReference addProjectReference);
    public sealed virtual void VoidVisit(AddComReference addComReference);
    public virtual T Visit(AddAssemblyReference addAssemblyReference);
    public virtual T Visit(AddProjectReference addProjectReference);
    public virtual T Visit(AddComReference addComReference);
}
[ExtensionAttribute]
public static class JetBrains.IDE.AddReference.AddReferenceUtils : object {
    [ExtensionAttribute]
public static bool CanAddAssemblyReferences(IProject project);
    [ExtensionAttribute]
public static bool ShouldAddAssemblyReferencesFor(IProject project, ICollection`1& ids);
    [ExtensionAttribute]
public static bool IsCoreTargetFramework(TargetFrameworkId targetFrameworkId);
}
public static class JetBrains.IDE.AddReference.Executor.AddComReferenceHelper : object {
    public static bool TryCalculateName(ICollection`1<VirtualFileSystemPath> locations, String& name, String& failReason);
    [SecurityCriticalAttribute]
private static string GetTypeLibName(ITypeLib typelib);
}
public class JetBrains.IDE.AddReference.Executor.AddReferenceExecutor : AddReferenceItemVisitor`1<bool> {
    private IProject myProject;
    private Action`1<string> myOnReferenceError;
    private MsBuildAddOrUpdateReference myImpl;
    public AddReferenceExecutor(IProject project, MsBuildProjectModelSession session, Func`3<VirtualFileSystemPath, AssemblyNameInfo, string> assemblyNameFunc, Action`2<string, string> onReferenceAdd, Action`1<string> onReferenceError);
    public virtual bool Visit(AddAssemblyReference addAssemblyReference);
    private string CreateCondition(ICollection`1<TargetFrameworkId> targetFrameworkIds);
    public virtual bool Visit(AddProjectReference addProjectReference);
    public virtual bool Visit(AddComReference addComReference);
}
public abstract class JetBrains.IDE.AddReference.Executor.AddReferenceExtension : object {
    public abstract virtual bool IsApplicable(IProject project);
    public virtual bool IsSupportedSource(IAddReferenceSource referenceSource);
    [CanBeNullAttribute]
public virtual AddReferenceItemVisitor CreateCustomCommitter(IProject project, MsBuildProjectModelSession session);
    public virtual AddReferenceItemModificators PatchModificators(AddReferenceItemModificators modificators);
}
[SolutionComponentAttribute("10")]
public class JetBrains.IDE.AddReference.Executor.AddReferencesFromRecentLocations : AddReferenceFromFoldersBase {
    private ISolution mySolution;
    private AssemblyInfoDatabase myAssemblyInfoDatabase;
    private IContextBoundSettingsStoreLive mySolutionStore;
    private static Expression`1<Func`2<AddReferencesSettings, IIndexedEntry`2<string, bool>>> ourRecentPaths;
    private static AddReferenceGroup ourGroup;
    public AddReferencesFromRecentLocations(Lifetime lifetime, ISolution solution, ISettingsStore settingsStore, AssemblyInfoDatabase assemblyInfoDatabase);
    private static AddReferencesFromRecentLocations();
    [IteratorStateMachineAttribute("JetBrains.IDE.AddReference.Executor.AddReferencesFromRecentLocations/<GetAssemblyReferenceLocations>d__6")]
protected virtual IEnumerable`1<AddAssemblyReference> GetAssemblyReferenceLocations(Context context);
    public bool HasAddReferenceItems();
    public void Add(VirtualFileSystemPath path);
    public void Clear();
}
[ExtensionAttribute]
public static class JetBrains.IDE.AddReference.Executor.AddReferencesHelper : object {
    public static AddReferenceGroup Irrelevant;
    private static AddReferencesHelper();
    [ExtensionAttribute]
public static RdAddReferenceItem ToRdAddReferenceItem(IAddReferenceItem referenceItem, int id, int groupId, AddReferenceItemModificators modificators);
    [CanBeNullAttribute]
private static string FailReasonText(AddReferenceItemModificators modificators);
    [ExtensionAttribute]
public static AddReferenceGroup GetActualItemGroup(IAddReferenceItem referenceItem, AddReferenceItemModificators modificators);
}
public class JetBrains.IDE.AddReference.Executor.AddReferencesSession : object {
    private LifetimeDefinition myLifetimeDefinition;
    private IShellLocks myLocks;
    private ISolutionHost mySolutionHost;
    private IProject myProject;
    private List`1<AddReferenceExtension> myExtensions;
    private List`1<IAddReferenceSource> myReferenceSources;
    private RdAddReferenceSession mySessionModel;
    private Action`1<Action> myInvokeUnderTransaction;
    private Dictionary`2<int, IAddReferenceItem> myItemsMapping;
    private Dictionary`2<AddReferenceGroup, int> myGroupsMapping;
    private object myLocker;
    private int myNextItemId;
    private int myNextGroupId;
    public AddReferencesSession(Lifetime lifetime, IShellLocks locks, ISolutionHost solutionHost, IProject project, Action`1<Action> invokeUnderTransaction, RdAddReferenceSession sessionModel);
    [AsyncStateMachineAttribute("JetBrains.IDE.AddReference.Executor.AddReferencesSession/<CollectPossibleReferences>d__14")]
private void CollectPossibleReferences();
    private void AddHandler(List`1<int> ids);
    private void AddByPathHandler(List`1<string> paths);
    private void ClearRecentHandler(Unit _);
    private void SendItems(List`1<IAddReferenceItem> items);
    private void Commit(ICollection`1<IAddReferenceItem> addReferenceItems);
    [CanBeNullAttribute]
private AddReferenceItemVisitor GetCustomCommitter(IProject project, MsBuildProjectModelSession session);
    private void ExecuteHost(ISolutionHost solutionHost, TProjectItem projectItem, Action`3<IProjectHost, IProjectMark, TProjectItem> action);
    private void VisitElements(ICollection`1<IAddReferenceItem> addReferenceItems, AddReferenceItemVisitor committer);
    [CompilerGeneratedAttribute]
private Task <CollectPossibleReferences>b__14_0(IAddReferenceSource source);
    [CompilerGeneratedAttribute]
private void <CollectPossibleReferences>b__14_1();
    [CompilerGeneratedAttribute]
private IAddReferenceItem <AddHandler>b__15_0(int id);
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.IDE.Resources.Strings", "AddReferencesSettingsSettingDescription")]
public class JetBrains.IDE.AddReference.Executor.AddReferencesSettings : object {
    [SettingsIndexedEntryAttribute("JetBrains.IDE.Resources.Strings", "RecentlyAddedReferencePathsSettingDescription")]
public IIndexedEntry`2<string, bool> RecentPaths;
}
public interface JetBrains.IDE.AddReference.IAddReferenceItem {
    public AddReferenceItemModificators Modificators { get; }
    [NotNullAttribute]
public AddReferenceGroup Group { get; }
    [NotNullAttribute]
public string Presentation { get; }
    [NotNullAttribute]
public string DisambiguationPresentation { get; }
    [NotNullAttribute]
public IconId Icon { get; }
    [CanBeNullAttribute]
public VirtualFileSystemPath Path { get; }
    public abstract virtual AddReferenceItemModificators get_Modificators();
    public abstract virtual AddReferenceGroup get_Group();
    public abstract virtual string get_Presentation();
    public abstract virtual string get_DisambiguationPresentation();
    public abstract virtual IconId get_Icon();
    public abstract virtual VirtualFileSystemPath get_Path();
    [NotNullAttribute]
public abstract virtual T Visit(AddReferenceItemVisitor`1<T> visitor);
    public abstract virtual void Visit(AddReferenceItemVisitor visitor);
}
public interface JetBrains.IDE.AddReference.IAddReferenceSource {
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IEnumerable`1<IAddReferenceItem> GetAddReferenceItems(Lifetime lifetime, IProject project);
}
public class JetBrains.IDE.AddReference.Items.AddAssemblyReference : object {
    private VirtualFileSystemPath myPath;
    private string myDisambiguationPresentation;
    [CompilerGeneratedAttribute]
private AddReferenceItemModificators <Modificators>k__BackingField;
    [CompilerGeneratedAttribute]
private AddReferenceGroup <Group>k__BackingField;
    public AddReferenceItemModificators Modificators { get; }
    public AddReferenceGroup Group { get; }
    public string Presentation { get; }
    public IconId Icon { get; }
    [NotNullAttribute]
public VirtualFileSystemPath Path { get; }
    public string DisambiguationPresentation { get; }
    public AddAssemblyReference(VirtualFileSystemPath path);
    public AddAssemblyReference(VirtualFileSystemPath path, AddReferenceItemModificators modificators, AddReferenceGroup group, string disambiguationPresentation);
    [CompilerGeneratedAttribute]
public sealed virtual AddReferenceItemModificators get_Modificators();
    [CompilerGeneratedAttribute]
public sealed virtual AddReferenceGroup get_Group();
    public sealed virtual string get_Presentation();
    public sealed virtual IconId get_Icon();
    public sealed virtual VirtualFileSystemPath get_Path();
    public sealed virtual T Visit(AddReferenceItemVisitor`1<T> visitor);
    public sealed virtual void Visit(AddReferenceItemVisitor visitor);
    public sealed virtual string get_DisambiguationPresentation();
}
public class JetBrains.IDE.AddReference.Items.AddComReference : object {
    public string Name;
    public Guid Guid;
    public int MajorVersion;
    public int MinorVersion;
    public int Lcid;
    public ICollection`1<VirtualFileSystemPath> Locations;
    [CompilerGeneratedAttribute]
private AddReferenceItemModificators <Modificators>k__BackingField;
    public AddReferenceItemModificators Modificators { get; }
    public AddReferenceGroup Group { get; }
    public string Presentation { get; }
    public string DisambiguationPresentation { get; }
    public IconId Icon { get; }
    public VirtualFileSystemPath Path { get; }
    public AddComReference(string name, Guid guid, int majorVersion, int minorVersion, int lcid, ICollection`1<VirtualFileSystemPath> locations, AddReferenceItemModificators modificators);
    [CompilerGeneratedAttribute]
public sealed virtual AddReferenceItemModificators get_Modificators();
    public sealed virtual AddReferenceGroup get_Group();
    public sealed virtual string get_Presentation();
    public sealed virtual string get_DisambiguationPresentation();
    public sealed virtual IconId get_Icon();
    public sealed virtual VirtualFileSystemPath get_Path();
    public sealed virtual T Visit(AddReferenceItemVisitor`1<T> visitor);
    public sealed virtual void Visit(AddReferenceItemVisitor visitor);
}
public class JetBrains.IDE.AddReference.Items.AddProjectReference : object {
    private IProject myProject;
    [CompilerGeneratedAttribute]
private AddReferenceItemModificators <Modificators>k__BackingField;
    public AddReferenceItemModificators Modificators { get; }
    public AddReferenceGroup Group { get; }
    public string Presentation { get; }
    public IProject Project { get; }
    public string Tooltip { get; }
    public string DisambiguationPresentation { get; }
    public IconId Icon { get; }
    public VirtualFileSystemPath Path { get; }
    public AddProjectReference(IProject project, AddReferenceItemModificators modificators);
    [CompilerGeneratedAttribute]
public sealed virtual AddReferenceItemModificators get_Modificators();
    public sealed virtual AddReferenceGroup get_Group();
    public sealed virtual string get_Presentation();
    public IProject get_Project();
    public string get_Tooltip();
    public sealed virtual string get_DisambiguationPresentation();
    public sealed virtual IconId get_Icon();
    public sealed virtual VirtualFileSystemPath get_Path();
    public sealed virtual T Visit(AddReferenceItemVisitor`1<T> visitor);
    public sealed virtual void Visit(AddReferenceItemVisitor visitor);
}
[SolutionComponentAttribute("16")]
public class JetBrains.IDE.AddReference.Sources.AddReferenceFromComComponents : object {
    private static Regex ourVersionMatcher;
    private static AddReferenceFromComComponents();
    public virtual IEnumerable`1<IAddReferenceItem> GetAddReferenceItems(Lifetime lifetime, IProject project);
    private static void EnumerateTypeLibs(Lifetime lifetime, RegistryKey typeLibKey, List`1<IAddReferenceItem> result);
    private static void EnumerateVersions(List`1<IAddReferenceItem> result, Guid guid, RegistryKey typeLibGuidKey);
    private static void EnumerateLcids(List`1<IAddReferenceItem> result, RegistryKey typeLibVersionKey, string name, Guid guid, int majorVersion, int minorVersion);
}
public abstract class JetBrains.IDE.AddReference.Sources.AddReferenceFromFoldersBase : object {
    public sealed virtual IEnumerable`1<IAddReferenceItem> GetAddReferenceItems(Lifetime lifetime, IProject project);
    protected abstract virtual IEnumerable`1<AddAssemblyReference> GetAssemblyReferenceLocations(Context context);
}
[SolutionComponentAttribute("16")]
public class JetBrains.IDE.AddReference.Sources.AddReferenceFromNearbyFolders : AddReferenceFromFoldersBase {
    private IPlatformManager myPlatformManager;
    private AssemblyInfoDatabase myAssemblyInfoDatabase;
    private ISolution mySolution;
    public AddReferenceFromNearbyFolders(IPlatformManager platformManager, AssemblyInfoDatabase assemblyInfoDatabase, ISolution solution);
    [IteratorStateMachineAttribute("JetBrains.IDE.AddReference.Sources.AddReferenceFromNearbyFolders/<GetAssemblyReferenceLocations>d__4")]
protected virtual IEnumerable`1<AddAssemblyReference> GetAssemblyReferenceLocations(Context context);
}
[SolutionComponentAttribute("16")]
public class JetBrains.IDE.AddReference.Sources.AddReferenceFromSystemFolders : AddReferenceFromFoldersBase {
    private IPlatformManager myPlatformManager;
    public AddReferenceFromSystemFolders(IPlatformManager platformManager);
    [IteratorStateMachineAttribute("JetBrains.IDE.AddReference.Sources.AddReferenceFromSystemFolders/<GetAssemblyReferenceLocations>d__2")]
protected virtual IEnumerable`1<AddAssemblyReference> GetAssemblyReferenceLocations(Context context);
}
[SolutionComponentAttribute("16")]
public class JetBrains.IDE.AddReference.Sources.AddReferenceToProjects : object {
    private ISolution mySolution;
    public AddReferenceToProjects(ISolution solution);
    [IteratorStateMachineAttribute("JetBrains.IDE.AddReference.Sources.AddReferenceToProjects/<GetAddReferenceItems>d__2")]
public virtual IEnumerable`1<IAddReferenceItem> GetAddReferenceItems(Lifetime lifetime, IProject project);
    private bool IsCompatibleFramework(IProject project, IProject otherProject);
    private bool SearchReferencing(IProject currentProject, HashSet`1<IProject> allReferencing, HashSet`1<IProject> passed);
    private void DoClosure(IProject currentProject, HashSet`1<IProject> closure);
}
public static class JetBrains.IDE.AddReference.WellKnownGroups : object {
    public static AddReferenceGroup Projects;
    public static AddReferenceGroup SystemLibraries;
    public static AddReferenceGroup ComLibraries;
    public static AddReferenceGroup OtherLibraries;
    private static WellKnownGroups();
}
public class JetBrains.IDE.AssemblyReferenceClass_PlatformIde : object {
}
[ShellComponentAttribute("16")]
public class JetBrains.IDE.CurrentFileTypeExceptionReportDataProvider : object {
    [CanBeNullAttribute]
private ILazy`1<TextControlProperties> myTextControlProperties;
    private IShellLocks myShellLocks;
    [CompilerGeneratedAttribute]
private ViewableCollection`1<IHandler> <Handlers>k__BackingField;
    public ViewableCollection`1<IHandler> Handlers { get; }
    public CurrentFileTypeExceptionReportDataProvider(Lifetime lifetime, IShellLocks shellLocks, ILazy`1<TextControlProperties> textControlProperties);
    [CompilerGeneratedAttribute]
public ViewableCollection`1<IHandler> get_Handlers();
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportDataProvider.ProvideExceptionData(Exception ex);
}
[SolutionComponentAttribute("10")]
public class JetBrains.IDE.CurrentFileTypeExceptionReportDataProviderWithSolution : object {
    private CurrentFileTypeExceptionReportDataProvider myCurrentFileTypeExceptionReportDataProvider;
    private IShellLocks myShellLocks;
    private DocumentManager myDocumentManager;
    public CurrentFileTypeExceptionReportDataProviderWithSolution(Lifetime lifetime, DocumentManager documentManager, CurrentFileTypeExceptionReportDataProvider currentFileTypeExceptionReportDataProvider, IShellLocks shellLocks);
    public sealed virtual ICollection`1<string> Handle(IShellLocks shellLocks, ITextControl focusedTextControl);
    [CanBeNullAttribute]
private IProjectFile GetProjectFile(ITextControl focusedTextControl);
}
[ZoneDefinitionAttribute]
public interface JetBrains.IDE.Debugger.IDebuggerZone {
}
[SolutionComponentAttribute("10")]
public class JetBrains.IDE.Diagnostics.ComponentContainersCtorOwnTimeDumper : object {
    public ComponentContainersCtorOwnTimeDumper(Lifetime lifetime, ILogger logger, ISolutionLoadTasksScheduler solutionLoadTasksScheduler, IThreading threading);
}
[SolutionComponentAttribute("16")]
public class JetBrains.IDE.Diagnostics.EditorContextDumper : NotepadContextDumper {
    public virtual void Dump(IDataContext context, Action`1<StreamWriter> dump, string prefix, string extensionWithDot, Encoding encoding);
}
public class JetBrains.IDE.Diagnostics.EditorDumpActionBase`1 : object {
    private string myName;
    protected EditorDumpActionBase`1(string name);
    private static ISolution GetSolution(IDataContext context);
    private static T GetComponent(IDataContext context);
    private static IContextDumper GetDumper(IDataContext context);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[SolutionComponentAttribute("16")]
public class JetBrains.IDE.Diagnostics.EditorDumper : object {
    private ISolution mySolution;
    public EditorDumper(ISolution solution);
    [AsyncStateMachineAttribute("JetBrains.IDE.Diagnostics.EditorDumper/<Dump>d__2")]
public void Dump(Action`1<StreamWriter> writer, string prefix, string extensionWithDot, Encoding encoding);
}
[OptionsPageAttribute("DiskCleanupOptionPagePagePID", "Disk Cleanup", "JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/Cleanup")]
public class JetBrains.IDE.DiskCleanup.DiskCleanupOptionPage : BeSimpleOptionsPage {
    public static string PID;
    public DiskCleanupOptionPage(Lifetime lifetime, IDiskCleanup diskCleanup, IThreading threading, ActionGroupHost actionGroupHost, IIconHost iconHost, OptionsPageContext optionsPageContext, OptionsSettingsSmartContext optionsSettingsSmartContext);
    private static void PerformCleanup(Lifetime lifetime, IDiskCleanup diskCleanup, IProperty`1<bool> isCleanupEnabledProperty, IProperty`1<string> cleanupResultProperty, IThreading threading, IList`1<Pair`2<string, TimeSpan>> pathsToClean);
}
[ZoneMarkerAttribute]
public class JetBrains.IDE.DiskCleanup.ZoneMarker : object {
}
[SolutionComponentAttribute("10")]
public class JetBrains.IDE.Documents.ExternalChangeProcessorWithEditorAndDocuments : ExternalChangeProcessor {
    private DocumentManager myDocumentManager;
    private DocumentOperationsImpl myDocumentOperationsImpl;
    private IEditorManager myEditorManager;
    public ExternalChangeProcessorWithEditorAndDocuments(Lifetime lifetime, ISolution solution, IShellLocks shellLocks, IProjectModelBatchChangeManager projectModelBatchChangeManager, IModuleReferencesResolveStore moduleReferencesResolveStore, ModuleReferenceResolveSync moduleReferenceResolveSync, ChangeManager changeManager, IFileSystemTracker fileSystemTracker, ILogger logger, ISolutionLoadTasksScheduler solutionLoadTasksScheduler, DocumentManager documentManager, DocumentOperationsImpl documentOperationsImpl, IEditorManager editorManager, IStatusBar statusBar);
    protected virtual HashSet`1<IProjectFile> CalculateFilesNotToFireChangeIfNothingSeriousHappened(IReadOnlyCollection`1<IProjectModelElement> affectedFilesKeys);
}
[SolutionComponentAttribute("10")]
public class JetBrains.IDE.Documents.SharedDocumentsInconsistentModificationsHandler : object {
    public SharedDocumentsInconsistentModificationsHandler(Lifetime lifetime, SharedDocumentsSynchronizer sharedDocumentsSynchronizer, IEditorManager editorManager);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.IDE.EditorManagerEx : object {
    [ExtensionAttribute]
public static void CloseTextControl(IEditorManager editorManager, ITextControl textControl, CloseTextControlSaveOptions mode);
    [ExtensionAttribute]
public static Task`1<ITextControl> OpenFile(IEditorManager editorManager, VirtualFileSystemPath fileName, OpenFileOptions options, IThreading threading, Action`1<ITextControl> whenTextControlBoundAction, Action noTextControlAction);
    [ExtensionAttribute]
public static Task`1<ITextControl> OpenProjectFile(IEditorManager editorManager, IProjectFile projectFile, OpenFileOptions options, IThreading threading, Action`1<ITextControl> whenTextControlBoundAction, Action noTextControlAction);
    public static void TextControlLevelOpenFileOptionsHelper(ITextControl textControl, OpenFileOptions options);
}
[ShellComponentAttribute("16")]
public class JetBrains.IDE.EditorUIAdornment.EditorUIAdornmentSynchronizer : object {
    [CompilerGeneratedAttribute]
private ISignal`1<ITextControl> <AdornmentShown>k__BackingField;
    [NotNullAttribute]
public ISignal`1<ITextControl> AdornmentShown { get; }
    [CompilerGeneratedAttribute]
public ISignal`1<ITextControl> get_AdornmentShown();
}
public interface JetBrains.IDE.EditorUIAdornment.IEditorUIAdorner {
    public abstract virtual bool HasAdornmentLayer(ITextControl textControl);
    public abstract virtual void ShowAdornment(ITextControl textControl, IEditorUIAdornment viewModel);
}
public interface JetBrains.IDE.EditorUIAdornment.IEditorUIAdornment {
    public Lifetime Lifetime { get; }
    public IAutomation Content { get; }
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual IAutomation get_Content();
    public abstract virtual void Close();
}
[SolutionComponentAttribute("10")]
public class JetBrains.IDE.EnsureWritableToEditorSync : object {
    [NotNullAttribute]
private IEditorManager myEditorManager;
    [NotNullAttribute]
private IShellLocks myLocks;
    private IFrameFocusHelper myFrameFocusHelper;
    [CompilerGeneratedAttribute]
private DocumentSettings <DocumentSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [NotNullAttribute]
protected DocumentSettings DocumentSettings { get; }
    [NotNullAttribute]
protected ISolution Solution { get; }
    public EnsureWritableToEditorSync(Lifetime lifetime, IEnsureWritableHandler handler, DocumentSettings documentSettings, IEditorManager editorManager, IShellLocks locks, ISolution solution, IFrameFocusHelper frameFocusHelper);
    [CompilerGeneratedAttribute]
protected DocumentSettings get_DocumentSettings();
    [CompilerGeneratedAttribute]
protected ISolution get_Solution();
    private void BeforeMadeWritable_Fired(object sender, BeforeMadeWritableEventArgs args);
    private void OpenFiles(ICollection`1<IProjectFile> filesToMakeWritable, ICollection`1<IProjectFile> filesToSkip);
    private void SetIsInMemoryEditsAllowed(BeforeMadeWritableEventArgs args);
    protected virtual void OpenFiles(IList`1<IProjectFile> projectFiles);
    protected virtual bool ShouldSkip(IProjectFile file);
    [CompilerGeneratedAttribute]
private bool <OpenFiles>b__11_1(IProjectFile sharedFile);
}
public class JetBrains.IDE.FeatureSuggestion.CustomSuggestionsIntervalAspect : object {
    [CompilerGeneratedAttribute]
private TimeSpan <MinSuggestionsInterval>k__BackingField;
    public TimeSpan MinSuggestionsInterval { get; }
    public CustomSuggestionsIntervalAspect(TimeSpan minSuggestionsInterval);
    [CompilerGeneratedAttribute]
public TimeSpan get_MinSuggestionsInterval();
}
public class JetBrains.IDE.FeatureSuggestion.DisableByActivityUsageAspect : object {
    [CompilerGeneratedAttribute]
private IActivityUsageCondition <DisableWhen>k__BackingField;
    [NotNullAttribute]
public IActivityUsageCondition DisableWhen { get; }
    public DisableByActivityUsageAspect(IActivityUsageCondition disableWhen);
    [CompilerGeneratedAttribute]
public IActivityUsageCondition get_DisableWhen();
}
public class JetBrains.IDE.FeatureSuggestion.DisableWhenSuggestionAcceptedAspect : object {
    [NotNullAttribute]
public static DisableWhenSuggestionAcceptedAspect Instance;
    private static DisableWhenSuggestionAcceptedAspect();
}
[ExtensionAttribute]
public static class JetBrains.IDE.FeatureSuggestion.FeatureSuggesterEx : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
public static TAspect TryGetAspect(IFeatureSuggester suggester);
    [ExtensionAttribute]
[PureAttribute]
public static bool HasAspect(IFeatureSuggester suggester);
}
public enum JetBrains.IDE.FeatureSuggestion.FeatureSuggestionMode : Enum {
    public int value__;
    public static FeatureSuggestionMode Normal;
    public static FeatureSuggestionMode Testing;
    public static FeatureSuggestionMode Disabled;
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "JetBrains.IDE.Resources.Strings", "ConfiguresFeatureSuggestionSettingDescription")]
public class JetBrains.IDE.FeatureSuggestion.FeatureSuggestionSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.IDE.Resources.Strings", "ShowTipsInCompletionPopupSettingDescription")]
public bool ShowTipsInCompletionPopup;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.IDE.Resources.Strings", "ShowTipsInBulbMenuSettingDescription")]
public bool ShowTipsInBulbMenu;
}
public interface JetBrains.IDE.FeatureSuggestion.IFeatureSuggester {
    [NotNullAttribute]
public IFeatureSuggestionAspect[] Aspects { get; }
    [NotNullAttribute]
public abstract virtual IProperty`1<IFeatureSuggestion> Subscribe(Lifetime lifetime, FeatureSuggestionMode mode);
    public abstract virtual IFeatureSuggestionAspect[] get_Aspects();
}
public interface JetBrains.IDE.FeatureSuggestion.IFeatureSuggestion {
    public Lifetime Lifetime { get; }
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual void Show();
    public abstract virtual void Close();
}
public interface JetBrains.IDE.FeatureSuggestion.IFeatureSuggestionAspect {
}
public interface JetBrains.IDE.FeatureSuggestion.IFeatureSuggestionNotificationProvider {
    [CanBeNullAttribute]
public abstract virtual ISuggestionNotification TryCreate(Lifetime suggesterLifetime, Action onAccept, Action onDisable, Action onReject);
}
public interface JetBrains.IDE.FeatureSuggestion.IFeatureSuggestionNotificationViewModel {
    public Lifetime Lifetime { get; }
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual void Close();
    public abstract virtual void OnEscape();
}
public interface JetBrains.IDE.FeatureSuggestion.IFeatureSuggestionNotifier {
    public abstract virtual void Show(IFeatureSuggestionNotificationViewModel notificationViewModel);
}
public class JetBrains.IDE.FeatureSuggestion.IgnoreFeatureSuggestionModeAspect : object {
    [NotNullAttribute]
public static IgnoreFeatureSuggestionModeAspect Instance;
    private static IgnoreFeatureSuggestionModeAspect();
}
public interface JetBrains.IDE.FeatureSuggestion.INotifySuggestionEvents {
    [NotNullAttribute]
public ISimpleSignal Shown { get; }
    [NotNullAttribute]
public ISimpleSignal Accepted { get; }
    [NotNullAttribute]
public ISimpleSignal Rejected { get; }
    [NotNullAttribute]
public ISimpleSignal Disabled { get; }
    [NotNullAttribute]
public ISimpleSignal HelpAsked { get; }
    public abstract virtual ISimpleSignal get_Shown();
    public abstract virtual ISimpleSignal get_Accepted();
    public abstract virtual ISimpleSignal get_Rejected();
    public abstract virtual ISimpleSignal get_Disabled();
    public abstract virtual ISimpleSignal get_HelpAsked();
}
public interface JetBrains.IDE.FeatureSuggestion.ISuggestionNotification {
    [CanBeNullAttribute]
public IconId IconId { get; public set; }
    [CanBeNullAttribute]
public RichText SuggestionMessage { get; public set; }
    [CanBeNullAttribute]
public string AcceptText { get; public set; }
    [CanBeNullAttribute]
public string DisableText { get; public set; }
    [CanBeNullAttribute]
public string DisableAllText { get; public set; }
    [CanBeNullAttribute]
public string CloseButtonTooltip { get; public set; }
    public bool ShowDisableAction { get; public set; }
    public bool DoNotDisableOnClose { get; public set; }
    [CanBeNullAttribute]
public string LearnMoreText { get; public set; }
    [CanBeNullAttribute]
public string HelpUrl { get; public set; }
    public HelpId HelpTopicId { get; public set; }
    [CanBeNullAttribute]
public string ShortDescription { get; public set; }
    public abstract virtual IconId get_IconId();
    public abstract virtual void set_IconId(IconId value);
    public abstract virtual RichText get_SuggestionMessage();
    public abstract virtual void set_SuggestionMessage(RichText value);
    public abstract virtual string get_AcceptText();
    public abstract virtual void set_AcceptText(string value);
    public abstract virtual string get_DisableText();
    public abstract virtual void set_DisableText(string value);
    public abstract virtual string get_DisableAllText();
    public abstract virtual void set_DisableAllText(string value);
    public abstract virtual string get_CloseButtonTooltip();
    public abstract virtual void set_CloseButtonTooltip(string value);
    public abstract virtual bool get_ShowDisableAction();
    public abstract virtual void set_ShowDisableAction(bool value);
    public abstract virtual bool get_DoNotDisableOnClose();
    public abstract virtual void set_DoNotDisableOnClose(bool value);
    public abstract virtual string get_LearnMoreText();
    public abstract virtual void set_LearnMoreText(string value);
    public abstract virtual string get_HelpUrl();
    public abstract virtual void set_HelpUrl(string value);
    public abstract virtual HelpId get_HelpTopicId();
    public abstract virtual void set_HelpTopicId(HelpId value);
    public abstract virtual string get_ShortDescription();
    public abstract virtual void set_ShortDescription(string value);
    public abstract virtual void Accept();
    public abstract virtual void Reject();
    public abstract virtual void Disable();
}
public interface JetBrains.IDE.FeatureSuggestion.ISuggestionWithDisableAllAction {
    public bool ShowDisableAllAction { get; public set; }
    public abstract virtual bool get_ShowDisableAllAction();
    public abstract virtual void set_ShowDisableAllAction(bool value);
}
public class JetBrains.IDE.FeatureSuggestion.NoSuggestionsIntervalAspect : CustomSuggestionsIntervalAspect {
    [NotNullAttribute]
public static NoSuggestionsIntervalAspect Instance;
    private static NoSuggestionsIntervalAspect();
}
public class JetBrains.IDE.FeatureSuggestion.NotifyDisableMeAspect : object {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <DisableMe>k__BackingField;
    [NotNullAttribute]
public IProperty`1<bool> DisableMe { get; }
    public NotifyDisableMeAspect(IProperty`1<bool> disableMe);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_DisableMe();
}
public class JetBrains.IDE.FeatureSuggestion.OverrideCurrentSuggestionAspect : object {
    [NotNullAttribute]
public static OverrideCurrentSuggestionAspect Instance;
    private static OverrideCurrentSuggestionAspect();
}
public class JetBrains.IDE.FeatureSuggestion.SuggestionShowsLimitAspect : object {
    [CompilerGeneratedAttribute]
private int <MaxShowsPerSession>k__BackingField;
    public int MaxShowsPerSession { get; }
    public SuggestionShowsLimitAspect(int maxShowsPerSession);
    [CompilerGeneratedAttribute]
public int get_MaxShowsPerSession();
}
[ShellComponentAttribute("16")]
internal class JetBrains.IDE.IdeFakeSolutionZoneProvider : object {
    [NullableAttribute("1")]
public IEnumerable`1<FakeSolutionZoneFilter> Zones { get; }
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable`1<FakeSolutionZoneFilter> get_Zones();
}
[SolutionComponentAttribute("10")]
internal class JetBrains.IDE.IdePerSolutionDataRules : object {
    public IdePerSolutionDataRules(Lifetime lifetime, DocumentManager docman, DataContexts dc);
}
[NullableContextAttribute("1")]
public interface JetBrains.IDE.IEditorManager {
    public IProperty`1<bool> IsFileOpenInProgress { get; }
    public abstract virtual Task`1<ITextControl> OpenProjectFileAsync(IProjectFile projectFile, OpenFileOptions options);
    public abstract virtual Task`1<ITextControl> OpenFileAsync(VirtualFileSystemPath fileName, OpenFileOptions options);
    public abstract virtual IProperty`1<bool> get_IsFileOpenInProgress();
    public abstract virtual ITextControl TryGetTextControl(IProjectFile file);
    public abstract virtual bool IsOpenedInTextControl(IProjectFile file);
    public abstract virtual Task CloseTextControlAsync(ITextControl textControl, CloseTextControlSaveOptions mode);
}
public interface JetBrains.IDE.InEditorFloatingPopup.IInEditorFloatingPopup {
    public IProperty`1<bool> Visible { get; }
    public IProperty`1<IAutomation> Content { get; }
    public abstract virtual IProperty`1<bool> get_Visible();
    public abstract virtual IProperty`1<IAutomation> get_Content();
    public abstract virtual void Focus();
}
public interface JetBrains.IDE.InEditorFloatingPopup.IInEditorFloatingPopupProvider {
    public abstract virtual IInEditorFloatingPopup GetOrCreate(RunningTextControlId editor);
}
[ExtensionAttribute]
public static class JetBrains.IDE.InEditorFloatingPopup.InEditorFloatingPopupEx : object {
    [ExtensionAttribute]
public static void Show(IInEditorFloatingPopup that);
    [ExtensionAttribute]
public static void Hide(IInEditorFloatingPopup that);
}
[ActionAttribute("CompactLOH", "JetBrains.IDE.Resources.Strings", "CompactLOHActionText")]
public class JetBrains.IDE.Internal.CommonActions.CompactLohAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("GC", "JetBrains.IDE.Resources.Strings", "CollectGarbageActionText")]
public class JetBrains.IDE.Internal.CommonActions.GcAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private static int SetProcessWorkingSetSize(IntPtr process, int minimumWorkingSetSize, int maximumWorkingSetSize);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.IDE.Resources.Strings", "SynchronizeWithFileSystemActionText")]
public class JetBrains.IDE.Internal.CommonActions.SynchronizeAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.IDE.Resources.Strings", "DumpChangeManagerActionText")]
public class JetBrains.IDE.Internal.DocumentMarkupDiagnistics.DumpChangeManagerAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.IDE.Resources.Strings", "DumpDocumentMarkupActionText")]
public class JetBrains.IDE.Internal.DocumentMarkupDiagnistics.DumpDocumentMarkupAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private static void DumpToNotepad(Action`1<StreamWriter> writer);
}
[ActionAttribute("JetBrains.IDE.Resources.Strings", "DumpAppDomainInformationActionText")]
public class JetBrains.IDE.Internal.DumpActions.DumpAppDomainAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private static string GetSafe(Func`1<string> getter);
}
[ActionAttribute("Dump Component States")]
public class JetBrains.IDE.Internal.DumpActions.DumpComponentStatesAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private IEnumerable`1<ComponentData> GetComponentTypes(IComponentContainer container, ShellPartCatalogSet catalogSet, IPartSelector selector, IValueResolveContext resolveContext);
}
[ActionAttribute("DumpFileSystemPathInterning", "JetBrains.IDE.Resources.Strings", "DumpFileSystemPathInterningStatsActionText")]
public class JetBrains.IDE.Internal.DumpActions.DumpFileSystemPathInterning : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.IDE.Resources.Strings", "DumpFileSystemTrackerActionText")]
public class JetBrains.IDE.Internal.DumpActions.DumpFileSystemTrackerAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("DumpInstalledPackages", "JetBrains.IDE.Resources.Strings", "DumpInstalledPackagesActionText")]
public class JetBrains.IDE.Internal.DumpActions.DumpInstalledPackages : object {
    private static string dgmlNS;
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private XDocument GenerateDGML(List`1<DGMLNode> nodes, List`1<DGMLLink> links);
    private static XElement StyleElement(string category, string targetType, string propertyName, string propertyValue);
}
[ActionAttribute("JetBrains.IDE.Resources.Strings", "DumpLevelDbMapsActionText")]
public class JetBrains.IDE.Internal.DumpActions.DumpLevelDbMaps : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private static void DumpCache(IDataContext context, StreamWriter writer, Action`2<T, StreamWriter> dumpDb);
}
[ActionAttribute("JetBrains.IDE.Resources.Strings", "DumpLevelDbMapsStatsActionText")]
public class JetBrains.IDE.Internal.DumpActions.DumpLevelDbMapsStatsAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.IDE.Resources.Strings", "DumpNonBlittableStructsActionText")]
public class JetBrains.IDE.Internal.DumpActions.DumpNonBlittableStructs : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.IDE.Resources.Strings", "DumpPlatformsActionText")]
public class JetBrains.IDE.Internal.DumpActions.DumpPlatformsAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.IDE.Resources.Strings", "DumpReSharperShortcutsActionText")]
public class JetBrains.IDE.Internal.DumpActions.DumpReSharperActionsAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.IDE.Resources.Strings", "DumpSharedDocumentsActionText")]
public class JetBrains.IDE.Internal.DumpActions.DumpSharedDocumentsAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.IDE.Internal.IdeIntoInternalActionsMenu : object {
    public IdeIntoInternalActionsMenu(DumpPlatformsAction dumpPlatformsAction, DumpAppDomainAction dumpAppDomainAction, DumpFileSystemTrackerAction dumpFileSystemTrackerAction, DumpInstalledPackages dumpInstalledPackagesAction, DumpNonBlittableStructs dumpNonBlittableStructs, DumpSharedDocumentsAction dumpSharedDocumentsAction, DumpLevelDbMaps dumpLevelDb, DumpLevelDbMapsStatsAction dumpLevelDbMapsStats, DumpDataAccessAction dumpDataAccess);
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.IDE.Internal.IdeIntoInternalDumpMenu : object {
    public IdeIntoInternalDumpMenu(DumpComponentContainersStatisticsAction dumpComponentContainersStatistics, DumpStartupTasksToJsonAction dumpStartupTasksToJson, DumpComponentStatesAction dumpComponentStates, DumpReSharperActionsAction dumpReSharperActionsAction, DumpChangeManagerAction dumpChangeManagerAction, DumpDocumentMarkupAction dumpDocumentMarkupAction, DumpFileSystemPathInterning dumpFileSystemPathInterning);
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.IDE.Internal.IdeIntoInternalProjectsMenu : object {
    public IdeIntoInternalProjectsMenu(DumpProjectModel dumpProjectModel, DumpCurrentProjectProjectModel dumpCurrentProjectProjectModel, DumpProjectResolveContexts dumpProjectResolveContexts, DumpOutputAssembliesCache dumpOutputAssembliesCache, DumpTargetFrameworkScopes dumpTargetFrameworkScopes, DumpAllTargetFrameworkScopes dumpAllTargetFrameworkScopes, DumpMsbuildData dumpMsbuildData, DumpTargetFrameworkIds dumpTargetFrameworkIds, DumpProjectFileDataCache dumpProjectFileDataCache, DumpSolutionLoadStatistics dumpSolutionLoadStatistics);
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.IDE.Internal.IdeIntoInternalToolsMenu : object {
    public IdeIntoInternalToolsMenu(GcAction gcAction, CompactLohAction compactLohAction, SynchronizeAction synchronizeAction, TestLicensesAction testLicensesAction);
}
[ActionGroupAttribute("2", "10")]
public class JetBrains.IDE.Internal.IdeProjectReferencesIntoInternalProjectsMenu : object {
    public IdeProjectReferencesIntoInternalProjectsMenu(AnalyzeProjectReferenceProblemsAction analyzeProjectReferenceProblemsAction);
}
[ActionAttribute("JetBrains.IDE.Resources.Strings", "TestLicensesActionText")]
public class JetBrains.IDE.Internal.License.TestLicensesAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("NuGetDumpIconLoaderAction", "JetBrains.IDE.Resources.Strings", "DumpNuGetIconLoaderActionText")]
public class JetBrains.IDE.Internal.NuGet.Fetching.NuGetDumpIconLoaderAction : EditorDumpActionBase`1<NuGetIconLoader> {
}
[ZoneMarkerAttribute]
public class JetBrains.IDE.Internal.NuGet.Fetching.ZoneMarker : object {
}
[ActionGroupAttribute("1", "10")]
public class JetBrains.IDE.Internal.NuGet.NuGetDumpActionGroup : object {
    public NuGetDumpActionGroup(NuGetDumpContentFileStorageAction contentFileStorageAction, NuGetDumpNupkgStorageAction dumpContentFileStorageAction, NuGetDumpPackageReferenceTrackerAction dumpPackageReferenceTrackerAction, NuGetDumpConfigWatcherAction dumpConfigWatcherAction, NuGetDumpFolderManagerAction dumpFolderManagerAction, NuGetDumpLockFileTrackerAction dumpLockFileTrackerAction, NuGetDumpPackageUsageTrackerAction dumpPackageUsageTrackerAction);
}
[ActionAttribute("NuGetDumpConfigWatcherAction", "JetBrains.IDE.Resources.Strings", "DumpNuGetConfigWatcherActionText")]
public class JetBrains.IDE.Internal.NuGet.NuGetDumpConfigWatcherAction : EditorDumpActionBase`1<NuGetConfigWatcher> {
}
[ActionAttribute("NuGetDumpContentFileStorageAction", "JetBrains.IDE.Resources.Strings", "DumpNuGetContentFileStorageActionText")]
public class JetBrains.IDE.Internal.NuGet.NuGetDumpContentFileStorageAction : EditorDumpActionBase`1<NuGetContentFileStorage> {
}
[ActionAttribute("NuGetDumpFolderManagerAction", "JetBrains.IDE.Resources.Strings", "DumpNuGetNuGetFolderManagerActionText")]
public class JetBrains.IDE.Internal.NuGet.NuGetDumpFolderManagerAction : EditorDumpActionBase`1<NuGetFolderManager> {
}
[ActionAttribute("NuGetDumpLockFileTrackerAction", "JetBrains.IDE.Resources.Strings", "DumpNuGetNuGetLockFileTrackerActionText")]
public class JetBrains.IDE.Internal.NuGet.NuGetDumpLockFileTrackerAction : EditorDumpActionBase`1<NuGetLockFileTracker> {
}
[ActionAttribute("NuGetDumpNupkgStorageAction", "JetBrains.IDE.Resources.Strings", "DumpNuGetNupkgStorageActionText")]
public class JetBrains.IDE.Internal.NuGet.NuGetDumpNupkgStorageAction : EditorDumpActionBase`1<NuGetNupkgStorage> {
}
[ActionAttribute("NuGetDumpPackageReferenceTrackerAction", "JetBrains.IDE.Resources.Strings", "DumpNuGetPackageReferenceTrackerActionText")]
public class JetBrains.IDE.Internal.NuGet.NuGetDumpPackageReferenceTrackerAction : EditorDumpActionBase`1<NuGetPackageReferenceTracker> {
}
[ActionAttribute("NuGetDumpPackageUsageTrackerAction", "JetBrains.IDE.Resources.Strings", "DumpNuGetNuGetPackageUsageTrackerActionText")]
public class JetBrains.IDE.Internal.NuGet.NuGetDumpPackageUsageTrackerAction : EditorDumpActionBase`1<NuGetPackageUsageTracker> {
}
[ZoneMarkerAttribute]
public class JetBrains.IDE.Internal.NuGet.ZoneMarker : object {
}
[ActionAttribute("JetBrains.IDE.Resources.Strings", "AnalyzeProjectReferenceProblemsActionText")]
public class JetBrains.IDE.Internal.ProjectModelActions.AnalyzeProjectReferenceProblemsAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.IDE.Resources.Strings", "DumpAllTargetFrameworkScopesActionText")]
public class JetBrains.IDE.Internal.ProjectModelActions.DumpAllTargetFrameworkScopes : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("DumpCurrentProjectProjectModel", "JetBrains.IDE.Resources.Strings", "DumpCurrentProjectsProjectModelActionText")]
public class JetBrains.IDE.Internal.ProjectModelActions.DumpCurrentProjectProjectModel : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("DumpMsbuildData", "JetBrains.IDE.Resources.Strings", "DumpMsbuildDataActionText")]
public class JetBrains.IDE.Internal.ProjectModelActions.DumpMsbuildData : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private static void WritePaths(StreamWriter writer, string title, IEnumerable`1<T> items, Comparison`1<T> comparison, Func`2<T, string> toString);
}
[ActionAttribute("JetBrains.IDE.Resources.Strings", "DumpOutputAssembliesActionText")]
public class JetBrains.IDE.Internal.ProjectModelActions.DumpOutputAssembliesCache : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("DumpProjectFileDataCache", "JetBrains.IDE.Resources.Strings", "DumpProjectFileDataCacheActionText")]
public class JetBrains.IDE.Internal.ProjectModelActions.DumpProjectFileDataCache : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("DumpProjectModel", "JetBrains.IDE.Resources.Strings", "DumpProjectModelActionText")]
public class JetBrains.IDE.Internal.ProjectModelActions.DumpProjectModel : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("DumpProjectResolveContexts", "JetBrains.IDE.Resources.Strings", "DumpProjectResolveContextsActionText")]
public class JetBrains.IDE.Internal.ProjectModelActions.DumpProjectResolveContexts : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.IDE.Resources.Strings", "DumpSolutionLoadStatisticsActionText")]
public class JetBrains.IDE.Internal.ProjectModelActions.DumpSolutionLoadStatistics : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    [CompilerGeneratedAttribute]
internal static void <Execute>g__LogLoadData|1_1(Data data, string title, <>c__DisplayClass1_1& );
}
[ActionAttribute("DumpTargetFrameworkIds", "JetBrains.IDE.Resources.Strings", "DumpTargetFrameworkIdsActionText")]
public class JetBrains.IDE.Internal.ProjectModelActions.DumpTargetFrameworkIds : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.IDE.Resources.Strings", "DumpProjectsTargetFrameworkScopesActionText")]
public class JetBrains.IDE.Internal.ProjectModelActions.DumpTargetFrameworkScopes : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ZoneMarkerAttribute]
public class JetBrains.IDE.Internal.ZoneMarker : object {
}
[SolutionComponentAttribute("0")]
public class JetBrains.IDE.IsFileOpenedProvider : object {
    private IEditorManager myEditorManager;
    public IsFileOpenedProvider(IEditorManager editorManager);
    public sealed virtual bool IsOpened(IProjectFile file);
}
public interface JetBrains.IDE.IShellEditorManager {
    [NotNullAttribute]
public abstract virtual Task OpenFileAsync(VirtualFileSystemPath filePath, OpenFileOptions openFileOptions);
}
[SolutionComponentAttribute("16")]
public class JetBrains.IDE.NuGet.IdeNuGetCommonOperations : NuGetCommonOperations {
    private Lifetime myLifetime;
    private IShellLocks myLocks;
    private NuGetHost myHost;
    private ISolution mySolution;
    public IdeNuGetCommonOperations(Lifetime lifetime, IShellLocks locks, NuGetHost host, ISolution solution);
    private void LogOpenFile(string fullPath, string message);
    public virtual Task OpenFile(string fullPath);
}
[ZoneMarkerAttribute]
public class JetBrains.IDE.NuGet.ZoneMarker : object {
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.IDE.OpenTabViewer : object {
    public virtual IEnumerable`1<FileSystemPath> GetFilePathsForOpenTabs();
}
public interface JetBrains.IDE.Output.IOutputLogger {
    public abstract virtual void StartNewBuild(SolutionBuilderRequest builderRequest);
    public abstract virtual void Write(string message);
}
public interface JetBrains.IDE.Output.IOutputLoggerNotifier {
    [NotNullAttribute]
public ISignal`1<string> Message { get; }
    public abstract virtual ISignal`1<string> get_Message();
}
public enum JetBrains.IDE.PerClientComponents.ClientKind : Enum {
    public int value__;
    public static ClientKind Local;
    public static ClientKind Controller;
    public static ClientKind Guest;
    public static ClientKind Owner;
    public static ClientKind Remote;
    public static ClientKind All;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.IDE.PerClientComponents.ClientSessionBase : object {
    [CompilerGeneratedAttribute]
private LifetimeDefinition <ChildContainersLifetimeDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private IViewableProperty`1<bool> <IsInitialized>k__BackingField;
    internal LifetimeDefinition ChildContainersLifetimeDefinition { get; }
    internal IViewableProperty`1<bool> IsInitialized { get; }
    public Lifetime Lifetime { get; internal set; }
    public ClientId ClientId { get; }
    public ClientType ClientType { get; }
    protected ClientSessionBase(LifetimeDefinition childContainersLifetimeDefinition);
    [CompilerGeneratedAttribute]
internal LifetimeDefinition get_ChildContainersLifetimeDefinition();
    [CompilerGeneratedAttribute]
internal IViewableProperty`1<bool> get_IsInitialized();
    public abstract virtual Lifetime get_Lifetime();
    internal abstract virtual void set_Lifetime(Lifetime value);
    public abstract virtual ClientId get_ClientId();
    public abstract virtual ClientType get_ClientType();
    public abstract virtual TComponent GetComponent();
    public abstract virtual TComponent TryGetComponent();
    public abstract virtual IEnumerable`1<TComponent> GetComponents();
}
[ExtensionAttribute]
public static class JetBrains.IDE.PerClientComponents.ClientSessionEx : object {
    [ExtensionAttribute]
public static bool IsLocal(IClientSession session);
    [ExtensionAttribute]
public static bool IsController(IClientSession session);
    [ExtensionAttribute]
public static bool IsGuest(IClientSession session);
    [ExtensionAttribute]
public static bool IsOwner(IClientSession session);
    [ExtensionAttribute]
public static bool IsRemote(IClientSession session);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.IDE.PerClientComponents.ClientSessionManagerBase : object {
    private ILogger myLogger;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IViewableProperty`1<IClientSession> <LocalSession>k__BackingField;
    [CompilerGeneratedAttribute]
private IViewableMap`2<ClientId, IClientSession> <Sessions>k__BackingField;
    [CompilerGeneratedAttribute]
private IViewableMap`2<ClientId, IClientSession> <RemoteSessions>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IViewableProperty`1<IClientSession> LocalSession { get; }
    public IViewableMap`2<ClientId, IClientSession> Sessions { get; }
    public IViewableMap`2<ClientId, IClientSession> RemoteSessions { get; }
    protected ClientSessionManagerBase(Lifetime lifetime, ILogger logger);
    [CompilerGeneratedAttribute]
public sealed virtual IViewableProperty`1<IClientSession> get_LocalSession();
    [CompilerGeneratedAttribute]
public sealed virtual IViewableMap`2<ClientId, IClientSession> get_Sessions();
    [CompilerGeneratedAttribute]
public sealed virtual IViewableMap`2<ClientId, IClientSession> get_RemoteSessions();
    [NullableContextAttribute("2")]
private void FlowIntoSessions(IClientSession localSession);
    protected void BracketWithClientIdAssert(Lifetime lt, Action opening, Action closing, ClientId id);
    protected static Lifetime GetChildContainersLifetimeFrom(IClientSession session);
    protected static IViewableProperty`1<bool> GetInitializationPropertyFrom(IClientSession session);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.IDE.PerClientComponents.ClientSessionManagerEx : object {
    private static ILogger ourLog;
    private static ClientSessionManagerEx();
    [ExtensionAttribute]
[ObsoleteAttribute("Consider separating logic for handling different clients using ShellPerClientComponentAttribute or SolutionPerClientComponentAttribute. See IClientSession docs.")]
public static void BroadcastAllClients(IClientSessionManager sessionSessionManager, Action action);
    [ExtensionAttribute]
[ObsoleteAttribute("Consider separating logic for handling different clients using ShellPerClientComponentAttribute or SolutionPerClientComponentAttribute. See IClientSession docs.")]
public static IClientSession GetCurrentClientSession(ISolution solution);
    [ExtensionAttribute]
[ObsoleteAttribute("Consider separating logic for handling different clients using ShellPerClientComponentAttribute or SolutionPerClientComponentAttribute. See IClientSession docs.")]
public static Lifetime GetCurrentClientLifetime(IClientSessionManager manager);
}
public enum JetBrains.IDE.PerClientComponents.ClientType : Enum {
    public int value__;
    public static ClientType Local;
    public static ClientType Controller;
    public static ClientType Guest;
}
[ExtensionAttribute]
public static class JetBrains.IDE.PerClientComponents.ClientTypeEx : object {
    [ExtensionAttribute]
public static bool IsLocal(ClientType clientType);
    [ExtensionAttribute]
public static bool IsController(ClientType clientType);
    [ExtensionAttribute]
public static bool IsGuest(ClientType clientType);
    [ExtensionAttribute]
public static bool IsOwner(ClientType clientType);
    [ExtensionAttribute]
public static bool IsRemote(ClientType clientType);
    [ExtensionAttribute]
public static bool Matches(ClientType clientType, ClientKind kind);
}
[ObsoleteAttribute("To store data per-client, consider using ShellPerClientComponentAttribute or SolutionPerClientComponentAttribute. See IClientSession docs.")]
public class JetBrains.IDE.PerClientComponents.DataPerClientId`1 : object {
    private Func`1<T> myInitialValueFactory;
    private ConcurrentDictionary`2<ClientId, T> myPerClientData;
    public T Value { get; }
    public DataPerClientId`1(Lifetime lifetime, Func`1<T> initialValueFactory, IViewableMap`2<ClientId, IClientSession> clients);
    public T get_Value();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(Lifetime clientLifetime, KeyValuePair`2<ClientId, IClientSession> session);
    [CompilerGeneratedAttribute]
private T <get_Value>b__4_0(ClientId id);
}
[NullableContextAttribute("1")]
public interface JetBrains.IDE.PerClientComponents.IClientSession {
    public Lifetime Lifetime { get; }
    public ClientId ClientId { get; }
    public ClientType ClientType { get; }
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual ClientId get_ClientId();
    public abstract virtual ClientType get_ClientType();
    public abstract virtual TComponent GetComponent();
    public abstract virtual TComponent TryGetComponent();
    public abstract virtual IEnumerable`1<TComponent> GetComponents();
}
[NullableContextAttribute("1")]
public interface JetBrains.IDE.PerClientComponents.IClientSessionManager {
    public IViewableMap`2<ClientId, IClientSession> Sessions { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IViewableProperty`1<IClientSession> LocalSession { get; }
    public IViewableMap`2<ClientId, IClientSession> RemoteSessions { get; }
    public abstract virtual IViewableMap`2<ClientId, IClientSession> get_Sessions();
    public abstract virtual IViewableProperty`1<IClientSession> get_LocalSession();
    public abstract virtual IViewableMap`2<ClientId, IClientSession> get_RemoteSessions();
}
public interface JetBrains.IDE.PerClientComponents.IPerClientComponentDescriptor {
    public ClientId ClientId { get; }
    public abstract virtual ClientId get_ClientId();
}
[NullableContextAttribute("1")]
public interface JetBrains.IDE.PerClientComponents.IShellClientSession {
    public ShellPerClientComponents Container { get; public set; }
    public abstract virtual ShellPerClientComponents get_Container();
    public abstract virtual void set_Container(ShellPerClientComponents value);
}
[NullableContextAttribute("1")]
public interface JetBrains.IDE.PerClientComponents.ISolutionClientSession {
    public ISolution Solution { get; }
    public IShellClientSession ShellClientSession { get; }
    public SolutionPerClientComponents Container { get; public set; }
    public abstract virtual ISolution get_Solution();
    public abstract virtual IShellClientSession get_ShellClientSession();
    public abstract virtual SolutionPerClientComponents get_Container();
    public abstract virtual void set_Container(SolutionPerClientComponents value);
}
public abstract class JetBrains.IDE.PerClientComponents.PerClientComponentAttributeBase : ComponentAttribute {
    [CompilerGeneratedAttribute]
private ClientKind <ClientKind>k__BackingField;
    public ClientKind ClientKind { get; }
    protected PerClientComponentAttributeBase(ClientKind clientKind, Instantiation instantiation);
    [CompilerGeneratedAttribute]
public ClientKind get_ClientKind();
}
public abstract class JetBrains.IDE.PerClientComponents.PerClientComponentsBase`1 : object {
    private IClientSessionManager myClientSessionManager;
    private ConcurrentDictionary`2<ClientId, IComponentContainer> myContainerPerClients;
    protected ILogger Logger;
    protected IThreading Threading;
    protected PerClientComponentsBase`1(Lifetime lifetime, ILogger logger, IThreading shellLocks, IClientSessionManager clientSessionManager, ShellPartCatalogSet catalogueSet, IComponentContainer parentContainer, Func`2<ClientId, IInitializationStrategy> getInitializationStrategy, Action`1<ComponentContainer> prepareContainer, Action`3<ComponentContainer, IInitializationStrategy, ClientSessionBase> afterCompose);
    private void Init(Lifetime lifetime, IThreading shellLocks, ShellPartCatalogSet catalogueSet, IComponentContainer parentContainer, Func`2<ClientId, IInitializationStrategy> getInitializationStrategy, Action`1<ComponentContainer> prepareContainer, Action`3<ComponentContainer, IInitializationStrategy, ClientSessionBase> afterCompose);
    public IComponentContainer TryGetContainer();
    [NotNullAttribute]
public TComponent GetComponent();
    [CanBeNullAttribute]
public TComponent TryGetComponent();
    [CanBeNullAttribute]
public TComponent TryGetComponent(ClientId clientId);
    [NotNullAttribute]
private IComponentContainer GetContainerFor(ClientId clientId);
    [NotNullAttribute]
public TComponent GetComponent(ClientId clientId);
    [NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<TComponent> GetComponents(ClientId clientId);
    [CanBeNullAttribute]
private TComponent DoTryGetComponent(ClientId clientId);
    public List`1<TComponent> GetComponentsForAllClients();
    public void ViewComponentsForAllClients(Lifetime lifetime, Action`2<Lifetime, TComponent> handler);
    protected abstract virtual void PrepareSession(Lifetime clientLifetime, IClientSession session);
}
internal class JetBrains.IDE.PerClientComponents.PerClientPartCatalogTypeComponentDescriptor : PartCatalogTypeComponentDescriptor {
    [CompilerGeneratedAttribute]
private ClientId <ClientId>k__BackingField;
    public ClientId ClientId { get; }
    public PerClientPartCatalogTypeComponentDescriptor(IComponentContainer container, PartCatalogType part, Type attributeType, Instantiation defaultInstantiation, ClientId clientId);
    [CompilerGeneratedAttribute]
public sealed virtual ClientId get_ClientId();
    protected virtual object DoCreateInstance(ConstructiorBindigns bindings, Object[] dependencies);
    protected virtual string Present();
    protected virtual string PresentDebug();
}
[ShellPerClientComponentAttribute("5", "20")]
internal class JetBrains.IDE.PerClientComponents.PerClientShellAssertionComponent : object {
    public PerClientShellAssertionComponent(ClientId client, IComponentContainer container);
}
[SolutionPerClientComponentAttribute("20", "5")]
internal class JetBrains.IDE.PerClientComponents.PerClientSolutionAssertionComponent : object {
    public PerClientSolutionAssertionComponent(ClientId client, IComponentContainer container);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.IDE.PerClientComponents.ShellClientSession : ClientSessionBase {
    [NullableAttribute("2")]
private ShellPerClientComponents myContainer;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientId <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientType <ClientType>k__BackingField;
    public ShellPerClientComponents Container { get; public set; }
    public Lifetime Lifetime { get; internal set; }
    public ClientId ClientId { get; }
    public ClientType ClientType { get; }
    public ShellClientSession(LifetimeDefinition ltDef, ClientId id, ClientType type);
    public sealed virtual ShellPerClientComponents get_Container();
    public sealed virtual void set_Container(ShellPerClientComponents value);
    [CompilerGeneratedAttribute]
public virtual Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
internal virtual void set_Lifetime(Lifetime value);
    [CompilerGeneratedAttribute]
public virtual ClientId get_ClientId();
    [CompilerGeneratedAttribute]
public virtual ClientType get_ClientType();
    public virtual TComponent GetComponent();
    public virtual TComponent TryGetComponent();
    public virtual IEnumerable`1<TComponent> GetComponents();
}
[ShellComponentAttribute("16")]
public class JetBrains.IDE.PerClientComponents.ShellClientSessionManager : ClientSessionManagerBase {
    [NullableContextAttribute("1")]
public ShellClientSessionManager(Lifetime lifetime, ILogger logger);
    private void CreateLocalShellSession(Lifetime shellContainerLifetime);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
public class JetBrains.IDE.PerClientComponents.ShellPerClientComponentAttribute : PerClientComponentAttributeBase {
    public ShellPerClientComponentAttribute(ClientKind clientKind, Instantiation instantiation);
}
[ShellComponentAttribute("10")]
public class JetBrains.IDE.PerClientComponents.ShellPerClientComponents : PerClientComponentsBase`1<ShellPerClientComponentAttribute> {
    public ShellPerClientComponents(Lifetime lifetime, ILogger logger, ShellClientSessionManager clientSessionManager, ShellPartCatalogSet catalogueSet, IComponentContainer parentContainer, IThreading shellLocks, IInitializationStrategy initializationStrategy);
    protected virtual void PrepareSession(Lifetime clientLifetime, IClientSession session);
}
public class JetBrains.IDE.PerClientComponents.ShellPerClientDataRulesProvider : object {
    public ShellPerClientDataRulesProvider(Lifetime lifetime, DataContexts contexts, IComponentContainer shellPerClientContainer, ClientId containerClientId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.IDE.PerClientComponents.SolutionClientSession : ClientSessionBase {
    [NullableAttribute("2")]
private SolutionPerClientComponents myContainer;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientId <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientType <ClientType>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    public Lifetime Lifetime { get; internal set; }
    public ClientId ClientId { get; }
    public ClientType ClientType { get; }
    public ISolution Solution { get; }
    public SolutionPerClientComponents Container { get; public set; }
    public IShellClientSession ShellClientSession { get; }
    public SolutionClientSession(LifetimeDefinition ltDef, ClientId id, ClientType type, ISolution solution);
    [CompilerGeneratedAttribute]
public virtual Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
internal virtual void set_Lifetime(Lifetime value);
    [CompilerGeneratedAttribute]
public virtual ClientId get_ClientId();
    [CompilerGeneratedAttribute]
public virtual ClientType get_ClientType();
    [CompilerGeneratedAttribute]
public sealed virtual ISolution get_Solution();
    public sealed virtual SolutionPerClientComponents get_Container();
    public sealed virtual void set_Container(SolutionPerClientComponents value);
    public sealed virtual IShellClientSession get_ShellClientSession();
    public virtual TComponent GetComponent();
    public virtual TComponent TryGetComponent();
    public virtual IEnumerable`1<TComponent> GetComponents();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("16")]
public class JetBrains.IDE.PerClientComponents.SolutionClientSessionManager : ClientSessionManagerBase {
    public SolutionClientSessionManager(Lifetime lifetime, ILogger logger, ISolution solution, ShellClientSessionManager shellClientSessionManager);
    private void CreateLocalSolutionSession(Lifetime solutionContainerLifetime, ISolution solution, IClientSession localShellSession);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
[ComponentInstantiationAttribute("-32758")]
public class JetBrains.IDE.PerClientComponents.SolutionPerClientComponentAttribute : PerClientComponentAttributeBase {
    [ObsoleteAttribute("Use an overload with instantiation", "True")]
public SolutionPerClientComponentAttribute(ClientKind clientKind);
    public SolutionPerClientComponentAttribute(Instantiation instantiation, ClientKind clientKind);
}
[SolutionComponentAttribute("10")]
public class JetBrains.IDE.PerClientComponents.SolutionPerClientComponents : PerClientComponentsBase`1<SolutionPerClientComponentAttribute> {
    public SolutionPerClientComponents(Lifetime lifetime, ILogger logger, SolutionElement solution, IClientSessionManager clientSessionManager, ShellPartCatalogSet catalogueSet, IComponentContainer parentContainer, ShellPerClientComponents shellPerClientComponents, IThreading shellLocks, ISolutionLoadTasksScheduler taskScheduler);
    protected virtual void PrepareSession(Lifetime clientLifetime, IClientSession session);
}
internal class JetBrains.IDE.PerClientComponents.SolutionPerClientDataRulesProvider : object {
    public SolutionPerClientDataRulesProvider(Lifetime lifetime, DataContexts contexts, IComponentContainer solutionPerClientContainer, ClientId containerClientId);
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.IDE.PersistableViewManager : object {
    [NotNullAttribute]
public virtual IPersistableView CreatePersistableView(LifetimeDefinition lifetimeDefinition, PersistableDocument persistableDocument, IAutomation content, ShortcutScope shortcutScope);
}
[SolutionComponentAttribute("10")]
public class JetBrains.IDE.ProjectModel.ProjectContextUpdater : object {
    public ProjectContextUpdater(Lifetime lifetime, ITextControlManager textControlManager, ProjectContext projectContext, DocumentsOnProjectFiles documentsOnProjectFiles, IShellLocks locks);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.IDE.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string ActionBarActionGroupText { get; }
    public static string AnalyzeProjectReferenceProblemsActionText { get; }
    public static string CollectGarbageActionText { get; }
    public static string CompactLOHActionText { get; }
    public static string ConfiguresFeatureSuggestionSettingDescription { get; }
    public static string DiskCleanupOptionPageTitle { get; }
    public static string DumpAllTargetFrameworkScopesActionText { get; }
    public static string DumpAppDomainInformationActionText { get; }
    public static string DumpChangeManagerActionText { get; }
    public static string DumpCurrentProjectsProjectModelActionText { get; }
    public static string DumpDocumentMarkupActionText { get; }
    public static string DumpFileSystemPathInterningStatsActionText { get; }
    public static string DumpFileSystemTrackerActionText { get; }
    public static string DumpInstalledPackagesActionText { get; }
    public static string DumpLevelDbMapsActionText { get; }
    public static string DumpLevelDbMapsStatsActionText { get; }
    public static string DumpMsbuildDataActionText { get; }
    public static string DumpNonBlittableStructsActionText { get; }
    public static string DumpNuGetActionGroupText { get; }
    public static string DumpNuGetConfigWatcherActionText { get; }
    public static string DumpNuGetContentFileStorageActionText { get; }
    public static string DumpNuGetIconLoaderActionText { get; }
    public static string DumpNuGetNuGetFolderManagerActionText { get; }
    public static string DumpNuGetNuGetLockFileTrackerActionText { get; }
    public static string DumpNuGetNuGetPackageUsageTrackerActionText { get; }
    public static string DumpNuGetNupkgStorageActionText { get; }
    public static string DumpNuGetPackageReferenceTrackerActionText { get; }
    public static string DumpOutputAssembliesActionText { get; }
    public static string DumpPlatformsActionText { get; }
    public static string DumpProjectFileDataCacheActionText { get; }
    public static string DumpProjectModelActionText { get; }
    public static string DumpProjectResolveContextsActionText { get; }
    public static string DumpProjectsTargetFrameworkScopesActionText { get; }
    public static string DumpReSharperShortcutsActionText { get; }
    public static string DumpSharedDocumentsActionText { get; }
    public static string DumpSolutionLoadStatisticsActionText { get; }
    public static string DumpTargetFrameworkIdsActionText { get; }
    public static string DumpFleetDocumentsActionText { get; }
    public static string GoToNextLocationActionText { get; }
    public static string GoToPreviousLocationActionText { get; }
    public static string PreviewPanelOrientationSettingDescription { get; }
    public static string PreviewPanelSplitterHorizontalPositionSettingDescription { get; }
    public static string PreviewPanelSplitterHorizontalProportionSettingDescription { get; }
    public static string PreviewPanelSplitterVerticalPositionSettingDescription { get; }
    public static string PreviewPanelSplitterVerticalProportionSettingDescription { get; }
    public static string ShowTipsInBulbMenuSettingDescription { get; }
    public static string ShowTipsInCompletionPopupSettingDescription { get; }
    public static string SynchronizeWithFileSystemActionText { get; }
    public static string TestLicensesActionText { get; }
    public static string TreeModelBrowserStateSettingsSettingDescription { get; }
    public static string WhetherPreviewPanelIsVisibleSettingDescription { get; }
    public static string TemporaryFilesAndLocationsToCleanUp_Text_Text { get; }
    public static string FilesAndFoldersToClean_Header_Text { get; }
    public static string SpecifyPathTemplatesForTemporaryFiles_Text_Text { get; }
    public static string FilesInTheMatchingDirectoriesAreConsideredOutdtated_Text_Text { get; }
    public static string PathTemplates_StringColumnFromKey_Text { get; }
    public static string OutdatedAfterDays_Column_Text { get; }
    public static string Days_Postfix_Text { get; }
    public static string SpaceOccupied_Column_Text { get; }
    public static string TempFolder_Text { get; }
    public static string Evaluating_Text { get; }
    public static string Interrupted_Text { get; }
    public static string ErrorOccurred_Text { get; }
    public static string NoMatchingFilesFound_Text { get; }
    public static string _Outdated_Total_Text { get; }
    public static string No_Text { get; }
    public static string Description_Column_Text { get; }
    public static string ManualCleanup_Header_Text { get; }
    public static string CleanUpO_utdatedSelected_Button_Text { get; }
    public static string CleanUpAll_Selected_Button_Text { get; }
    public static string Delete_Outdated_Button_Text { get; }
    public static string Delete_All_Button_Text { get; }
    public static string CleanUpSelectedLocationAccordingToThe_Text { get; }
    public static string DeleteEverythingInTheSelectedLocation_Text { get; }
    public static string CleanUpEachLocationAccordingToTheir_Text { get; }
    public static string DeleteEverythingInEveryLocationIgnore_Text { get; }
    public static string AutomaticCleanup_Header_Text { get; }
    public static string _PerformCleanupPeriodically_BoolOption_Text { get; }
    public static string _DaysBetweenAutomaticCleanups_IntOption_Text { get; }
    public static string RunningCleanup_Result_Text { get; }
    public static string CleanupInterrupted_Result_Text { get; }
    public static string CleanupFailed_Result_Text { get; }
    public static string _Cleared_Result_Text { get; }
    public static string ChangesOnThisPageWillBeSavedForTheCurrent_Text { get; }
    public static string HowItWorks_Text { get; }
    public static string ToSaveTheChangesGloballyClickSaveTo_Text { get; }
    public static string ToSaveTheChangesGloballyChooseThisComputer_Text { get; }
    public static string Browse_Button_Text { get; }
    public static string Reset_Button_Text { get; }
    public static string PasswordShouldNotBeEmpty_Text { get; }
    public static string PasswordsMustMatch_Text { get; }
    public static string ValueCannotBeEmpty_Text { get; }
    public static string SelectFile_Caption { get; }
    public static string SaveAs_Caption { get; }
    public static string Save_Caption { get; }
    public static string SaveTo_Caption { get; }
    public static string SelectFiles_Caption { get; }
    public static string InconsistentModificationsWereMadeTo_Text { get; }
    public static string TheFile__Text { get; }
    public static string _Files_Text { get; }
    public static string TestLicenses_Text { get; }
    public static string NoTargetFrameworkIdProblemInReferences_Text { get; }
    public static string ValueShouldBeAtLeast__Text { get; }
    public static string ValueShouldNotBeMoreThan__Text { get; }
    public static string PathCannotBeEmpty_Text { get; }
    public static string PathIsNotValid_Text { get; }
    public static string PathIsNotAbsolute_Text { get; }
    public static string PathDoesnTExistAndWillBeCreated_Text { get; }
    public static string PathDoesnTExist_Text { get; }
    public static string PathAlreadyExists_Text { get; }
    public static string ShowPreview_Text { get; }
    public static string Add_Button_Text { get; }
    public static string Edit_Button_Text { get; }
    public static string Remove_Button_Text { get; }
    public static string Yes_Button_Text { get; }
    public static string No_Button_Text { get; }
    public static string Add_DescriptionText { get; }
    public static string Close_DescriptionText { get; }
    public static string CollapseAll_DescriptionText { get; }
    public static string Copy_DescriptionText { get; }
    public static string Edit_DescriptionText { get; }
    public static string ExpandAll_DescriptionText { get; }
    public static string MoveDown_DescriptionText { get; }
    public static string MoveUp_DescriptionText { get; }
    public static string NextSearchResult_DescriptionText { get; }
    public static string PreviousSearchResult_DescriptionText { get; }
    public static string Remove_DescriptionText { get; }
    public static string SelectNext_DescriptionText { get; }
    public static string SelectPrevious_DescriptionText { get; }
    public static string COMReferencesAreAvailableOnlyOnWindows_Text { get; }
    public static string CanTAddCOMReference_N__Text { get; }
    public static string CanTEvaluateANameForCOMTypeFrom__Text { get; }
    public static string CanTLoadCOMTypeFrom_ErrorCode__Text { get; }
    public static string UnknownError_Text { get; }
    public static string CanNotReadAssemblyMetadataFrom__Text { get; }
    public static string AddReferencesSettingsSettingDescription { get; }
    public static string RecentlyAddedReferencePathsSettingDescription { get; }
    public static string CanNotAddReference_Caption { get; }
    public static string Projects_Text { get; }
    public static string SystemLibraries_Text { get; }
    public static string COMLibraries_Text { get; }
    public static string OtherLibraries_Text { get; }
    public static string DoesNotExist_Text { get; }
    public static string ProducesCircularDependency_Text { get; }
    public static string IncompatibleTargetFramework_Text { get; }
    public static string AlreadyAdded_Text { get; }
    public static string ReferenceToSelf_Text { get; }
    public static string Recent_Text { get; }
    public static string IrrelevantResults_Text { get; }
    public static string AssemblyReferencesWillBeAddedOnlyFor_Text { get; }
    public static string OK_Button_Text { get; }
    public static string Cancel_Button_Text { get; }
    public static string Invalid_ComboBoxElement_Text { get; }
    public static string Browse_FilePath_Button_Text { get; }
    public static string UnitTesting_Session_OutputPanel_Header_Inconclusive { get; }
    public static string UnitTesting_Session_OutputPanel_Header_Ignored { get; }
    public static string UnitTesting_Session_OutputPanel_Header_Passed { get; }
    public static string UnitTesting_Session_OutputPanel_Header_Failed { get; }
    public static string UnitTesting_Session_OutputPanel_Header_Aborted { get; }
    public static string UnitTesting_Session_OutputPanel_Header_Pending { get; }
    public static string UnitTesting_Session_OutputPanel_Header_Running { get; }
    public static string Validation_Validators_Required_Text { get; }
    public static string Validation_Validators_MustBeValidClassName_Text { get; }
    public static string Validation_Validators_MustBeValidNamespace_Text { get; }
    public static string Validation_Validators_MustBeValidRelativePath_Text { get; }
    public static string Validation_Validators_DirectoryAlreadyExists_Text { get; }
    public static string Validation_Validators_FileAlreadyExists_Text { get; }
    public static string TestRunner_DefaultSettings_Name { get; }
    public static string WaitSolutionPerClientComponentsCompose_Text { get; }
    public static string SuggestionNotification_SuggestionNotification_Learn_More { get; }
    public static string SuggestionNotification_SuggestionNotification_Try_now { get; }
    public static string SuggestionNotification_SuggestionNotification_Tooltip_Close_And_Disable { get; }
    public static string SuggestionNotification_SuggestionNotification_Tooltip_Close { get; }
    public static string SuggestionNotification_SuggestionNotification_Don_t_show_again { get; }
    public static string SuggestionNotification_SuggestionNotification_Disable_all_tips { get; }
    public static string ChangesInThisSectionWillBeSavedForTheCurrent_Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_ActionBarActionGroupText();
    public static string get_AnalyzeProjectReferenceProblemsActionText();
    public static string get_CollectGarbageActionText();
    public static string get_CompactLOHActionText();
    public static string get_ConfiguresFeatureSuggestionSettingDescription();
    public static string get_DiskCleanupOptionPageTitle();
    public static string get_DumpAllTargetFrameworkScopesActionText();
    public static string get_DumpAppDomainInformationActionText();
    public static string get_DumpChangeManagerActionText();
    public static string get_DumpCurrentProjectsProjectModelActionText();
    public static string get_DumpDocumentMarkupActionText();
    public static string get_DumpFileSystemPathInterningStatsActionText();
    public static string get_DumpFileSystemTrackerActionText();
    public static string get_DumpInstalledPackagesActionText();
    public static string get_DumpLevelDbMapsActionText();
    public static string get_DumpLevelDbMapsStatsActionText();
    public static string get_DumpMsbuildDataActionText();
    public static string get_DumpNonBlittableStructsActionText();
    public static string get_DumpNuGetActionGroupText();
    public static string get_DumpNuGetConfigWatcherActionText();
    public static string get_DumpNuGetContentFileStorageActionText();
    public static string get_DumpNuGetIconLoaderActionText();
    public static string get_DumpNuGetNuGetFolderManagerActionText();
    public static string get_DumpNuGetNuGetLockFileTrackerActionText();
    public static string get_DumpNuGetNuGetPackageUsageTrackerActionText();
    public static string get_DumpNuGetNupkgStorageActionText();
    public static string get_DumpNuGetPackageReferenceTrackerActionText();
    public static string get_DumpOutputAssembliesActionText();
    public static string get_DumpPlatformsActionText();
    public static string get_DumpProjectFileDataCacheActionText();
    public static string get_DumpProjectModelActionText();
    public static string get_DumpProjectResolveContextsActionText();
    public static string get_DumpProjectsTargetFrameworkScopesActionText();
    public static string get_DumpReSharperShortcutsActionText();
    public static string get_DumpSharedDocumentsActionText();
    public static string get_DumpSolutionLoadStatisticsActionText();
    public static string get_DumpTargetFrameworkIdsActionText();
    public static string get_DumpFleetDocumentsActionText();
    public static string get_GoToNextLocationActionText();
    public static string get_GoToPreviousLocationActionText();
    public static string get_PreviewPanelOrientationSettingDescription();
    public static string get_PreviewPanelSplitterHorizontalPositionSettingDescription();
    public static string get_PreviewPanelSplitterHorizontalProportionSettingDescription();
    public static string get_PreviewPanelSplitterVerticalPositionSettingDescription();
    public static string get_PreviewPanelSplitterVerticalProportionSettingDescription();
    public static string get_ShowTipsInBulbMenuSettingDescription();
    public static string get_ShowTipsInCompletionPopupSettingDescription();
    public static string get_SynchronizeWithFileSystemActionText();
    public static string get_TestLicensesActionText();
    public static string get_TreeModelBrowserStateSettingsSettingDescription();
    public static string get_WhetherPreviewPanelIsVisibleSettingDescription();
    public static string get_TemporaryFilesAndLocationsToCleanUp_Text_Text();
    public static string get_FilesAndFoldersToClean_Header_Text();
    public static string get_SpecifyPathTemplatesForTemporaryFiles_Text_Text();
    public static string get_FilesInTheMatchingDirectoriesAreConsideredOutdtated_Text_Text();
    public static string get_PathTemplates_StringColumnFromKey_Text();
    public static string get_OutdatedAfterDays_Column_Text();
    public static string get_Days_Postfix_Text();
    public static string get_SpaceOccupied_Column_Text();
    public static string get_TempFolder_Text();
    public static string get_Evaluating_Text();
    public static string get_Interrupted_Text();
    public static string get_ErrorOccurred_Text();
    public static string get_NoMatchingFilesFound_Text();
    public static string get__Outdated_Total_Text();
    public static string get_No_Text();
    public static string get_Description_Column_Text();
    public static string get_ManualCleanup_Header_Text();
    public static string get_CleanUpO_utdatedSelected_Button_Text();
    public static string get_CleanUpAll_Selected_Button_Text();
    public static string get_Delete_Outdated_Button_Text();
    public static string get_Delete_All_Button_Text();
    public static string get_CleanUpSelectedLocationAccordingToThe_Text();
    public static string get_DeleteEverythingInTheSelectedLocation_Text();
    public static string get_CleanUpEachLocationAccordingToTheir_Text();
    public static string get_DeleteEverythingInEveryLocationIgnore_Text();
    public static string get_AutomaticCleanup_Header_Text();
    public static string get__PerformCleanupPeriodically_BoolOption_Text();
    public static string get__DaysBetweenAutomaticCleanups_IntOption_Text();
    public static string get_RunningCleanup_Result_Text();
    public static string get_CleanupInterrupted_Result_Text();
    public static string get_CleanupFailed_Result_Text();
    public static string get__Cleared_Result_Text();
    public static string get_ChangesOnThisPageWillBeSavedForTheCurrent_Text();
    public static string get_HowItWorks_Text();
    public static string get_ToSaveTheChangesGloballyClickSaveTo_Text();
    public static string get_ToSaveTheChangesGloballyChooseThisComputer_Text();
    public static string get_Browse_Button_Text();
    public static string get_Reset_Button_Text();
    public static string get_PasswordShouldNotBeEmpty_Text();
    public static string get_PasswordsMustMatch_Text();
    public static string get_ValueCannotBeEmpty_Text();
    public static string get_SelectFile_Caption();
    public static string get_SaveAs_Caption();
    public static string get_Save_Caption();
    public static string get_SaveTo_Caption();
    public static string get_SelectFiles_Caption();
    public static string get_InconsistentModificationsWereMadeTo_Text();
    public static string get_TheFile__Text();
    public static string get__Files_Text();
    public static string get_TestLicenses_Text();
    public static string get_NoTargetFrameworkIdProblemInReferences_Text();
    public static string get_ValueShouldBeAtLeast__Text();
    public static string get_ValueShouldNotBeMoreThan__Text();
    public static string get_PathCannotBeEmpty_Text();
    public static string get_PathIsNotValid_Text();
    public static string get_PathIsNotAbsolute_Text();
    public static string get_PathDoesnTExistAndWillBeCreated_Text();
    public static string get_PathDoesnTExist_Text();
    public static string get_PathAlreadyExists_Text();
    public static string get_ShowPreview_Text();
    public static string get_Add_Button_Text();
    public static string get_Edit_Button_Text();
    public static string get_Remove_Button_Text();
    public static string get_Yes_Button_Text();
    public static string get_No_Button_Text();
    public static string get_Add_DescriptionText();
    public static string get_Close_DescriptionText();
    public static string get_CollapseAll_DescriptionText();
    public static string get_Copy_DescriptionText();
    public static string get_Edit_DescriptionText();
    public static string get_ExpandAll_DescriptionText();
    public static string get_MoveDown_DescriptionText();
    public static string get_MoveUp_DescriptionText();
    public static string get_NextSearchResult_DescriptionText();
    public static string get_PreviousSearchResult_DescriptionText();
    public static string get_Remove_DescriptionText();
    public static string get_SelectNext_DescriptionText();
    public static string get_SelectPrevious_DescriptionText();
    public static string get_COMReferencesAreAvailableOnlyOnWindows_Text();
    public static string get_CanTAddCOMReference_N__Text();
    public static string get_CanTEvaluateANameForCOMTypeFrom__Text();
    public static string get_CanTLoadCOMTypeFrom_ErrorCode__Text();
    public static string get_UnknownError_Text();
    public static string get_CanNotReadAssemblyMetadataFrom__Text();
    public static string get_AddReferencesSettingsSettingDescription();
    public static string get_RecentlyAddedReferencePathsSettingDescription();
    public static string get_CanNotAddReference_Caption();
    public static string get_Projects_Text();
    public static string get_SystemLibraries_Text();
    public static string get_COMLibraries_Text();
    public static string get_OtherLibraries_Text();
    public static string get_DoesNotExist_Text();
    public static string get_ProducesCircularDependency_Text();
    public static string get_IncompatibleTargetFramework_Text();
    public static string get_AlreadyAdded_Text();
    public static string get_ReferenceToSelf_Text();
    public static string get_Recent_Text();
    public static string get_IrrelevantResults_Text();
    public static string get_AssemblyReferencesWillBeAddedOnlyFor_Text();
    public static string get_OK_Button_Text();
    public static string get_Cancel_Button_Text();
    public static string get_Invalid_ComboBoxElement_Text();
    public static string get_Browse_FilePath_Button_Text();
    public static string get_UnitTesting_Session_OutputPanel_Header_Inconclusive();
    public static string get_UnitTesting_Session_OutputPanel_Header_Ignored();
    public static string get_UnitTesting_Session_OutputPanel_Header_Passed();
    public static string get_UnitTesting_Session_OutputPanel_Header_Failed();
    public static string get_UnitTesting_Session_OutputPanel_Header_Aborted();
    public static string get_UnitTesting_Session_OutputPanel_Header_Pending();
    public static string get_UnitTesting_Session_OutputPanel_Header_Running();
    public static string get_Validation_Validators_Required_Text();
    public static string get_Validation_Validators_MustBeValidClassName_Text();
    public static string get_Validation_Validators_MustBeValidNamespace_Text();
    public static string get_Validation_Validators_MustBeValidRelativePath_Text();
    public static string get_Validation_Validators_DirectoryAlreadyExists_Text();
    public static string get_Validation_Validators_FileAlreadyExists_Text();
    public static string get_TestRunner_DefaultSettings_Name();
    public static string get_WaitSolutionPerClientComponentsCompose_Text();
    public static string get_SuggestionNotification_SuggestionNotification_Learn_More();
    public static string get_SuggestionNotification_SuggestionNotification_Try_now();
    public static string get_SuggestionNotification_SuggestionNotification_Tooltip_Close_And_Disable();
    public static string get_SuggestionNotification_SuggestionNotification_Tooltip_Close();
    public static string get_SuggestionNotification_SuggestionNotification_Don_t_show_again();
    public static string get_SuggestionNotification_SuggestionNotification_Disable_all_tips();
    public static string get_ChangesInThisSectionWillBeSavedForTheCurrent_Text();
}
[ActionAttribute("JetBrains.IDE.Resources.Strings", "GoToNextLocationActionText")]
public class JetBrains.IDE.ResultList.Actions.ResultList_GoToNextLocationAction : object {
    private ILogger myLogger;
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual IActionRequirement GetRequirement(IDataContext context);
}
[ActionAttribute("JetBrains.IDE.Resources.Strings", "GoToPreviousLocationActionText")]
public class JetBrains.IDE.ResultList.Actions.ResultList_GoToPrevLocationAction : object {
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual IActionRequirement GetRequirement(IDataContext context);
}
[ZoneMarkerAttribute]
public class JetBrains.IDE.ResultList.Actions.ZoneMarker : object {
}
public class JetBrains.IDE.ResultList.AnonymousResultListHandler : object {
    [NotNullAttribute]
private string myDiagName;
    [NotNullAttribute]
private Handler myFNext;
    [NotNullAttribute]
private Handler myFPrev;
    [NotNullAttribute]
public static AnonymousResultListHandler Empty;
    public AnonymousResultListHandler(Handler FNext, Handler FPrev, string sDiagName);
    private static AnonymousResultListHandler();
    public virtual string ToString();
    private sealed virtual override Action JetBrains.Application.ResultList.IResultListHandler.GoToNextLocation(Lifetime lifetimeExec, IDataContext context, ActionPresentation presentation);
    private sealed virtual override Action JetBrains.Application.ResultList.IResultListHandler.GoToPrevLocation(Lifetime lifetimeExec, IDataContext context, ActionPresentation presentation);
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.IDE.ResultList.ResultListActionGroup : object {
}
[ShellComponentAttribute("10")]
public class JetBrains.IDE.ResultList.ResultListIdeActions : object {
    protected ResultListValue myResultListValue;
    public ResultListIdeActions(ResultListValue resultListValue);
    public virtual Action GoToNextLocation(Lifetime lifetimeExec, IDataContext context, ActionPresentation presentation);
    public virtual Action GoToPrevLocation(Lifetime lifetimeExec, IDataContext context, ActionPresentation presentation);
    public virtual IActionRequirement GetActionRequirement(IDataContext dataContext);
}
[ZoneDefinitionAttribute]
public class JetBrains.IDE.ResultList.ResultListImplZone : object {
}
[ShellComponentAttribute("16")]
public class JetBrains.IDE.ResultList.ResultListManager : object {
    private Lifetime myLifetime;
    private ResultListValue myResultListValue;
    [NotNullAttribute]
[GuardAttribute("-1")]
public IProperty`1<IResultListHandler> CurrentResultListHandler;
    public ResultListManager(Lifetime lifetime, ResultListValue resultListValue);
    [GuardAttribute("-1")]
public void PublishResultList(LifetimeDefinition def, IResultListHandler list);
}
[ShellComponentAttribute("16")]
public class JetBrains.IDE.ResultList.ResultListValue : object {
    [NotNullAttribute]
[GuardAttribute("-1")]
public IProperty`1<IResultListHandler> CurrentResultListHandler;
    public ResultListValue(ILogger logger);
}
public class JetBrains.IDE.ResultList.UIResultListPublisherAutomation : object {
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsKeyboardFocusWithin>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <ItemExecuted>k__BackingField;
    public IResultListHandler ResultListByOwner;
    public IResultListHandler ResultListWrapped;
    [CompilerGeneratedAttribute]
private IProperty`1<PublishingState> <State>k__BackingField;
    [GuardAttribute("2")]
public IProperty`1<bool> IsKeyboardFocusWithin { get; public set; }
    [GuardAttribute("2")]
public ISimpleSignal ItemExecuted { get; public set; }
    [GuardAttribute("-1")]
internal IProperty`1<PublishingState> State { get; internal set; }
    [GuardAttribute("1")]
public UIResultListPublisherAutomation(Lifetime lifetime, ResultListManager resultListManager, IResultListHandler resultListHandler);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsKeyboardFocusWithin();
    [CompilerGeneratedAttribute]
public void set_IsKeyboardFocusWithin(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public ISimpleSignal get_ItemExecuted();
    [CompilerGeneratedAttribute]
public void set_ItemExecuted(ISimpleSignal value);
    [CompilerGeneratedAttribute]
internal IProperty`1<PublishingState> get_State();
    [CompilerGeneratedAttribute]
internal void set_State(IProperty`1<PublishingState> value);
    private void InitFocusTracking(Lifetime lifetime);
    private void InitItemExecution(Lifetime lifetime);
    private void InitResultListPublishing(Lifetime lifetime, ResultListManager resultListManager);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private Action <.ctor>b__1_0(Lifetime lifetimeExec, IDataContext context, ActionPresentation presentation);
    [CompilerGeneratedAttribute]
private Action <.ctor>b__1_1(Lifetime lifetimeExec, IDataContext context, ActionPresentation presentation);
    [CompilerGeneratedAttribute]
private void <InitFocusTracking>b__16_0();
    [CompilerGeneratedAttribute]
private void <InitFocusTracking>b__16_1();
    [CompilerGeneratedAttribute]
private void <InitItemExecution>b__17_0();
}
[SolutionComponentAttribute("10")]
public class JetBrains.IDE.SharedDocumentsSynchronizerWithTextControlKnowledge : object {
    public SharedDocumentsSynchronizerWithTextControlKnowledge(Lifetime lifetime, SharedDocumentsSynchronizer sharedDocumentsSynchronizer, ITextControlManager textControlManager);
}
[ShellComponentAttribute("10")]
public class JetBrains.IDE.ShellEditorManager : object {
    private Lifetime myLifetime;
    private IShellLocks myShellLocks;
    [CompilerGeneratedAttribute]
private IProperty`1<IEditorManager> <EditorManager>k__BackingField;
    internal IProperty`1<IEditorManager> EditorManager { get; }
    public ShellEditorManager(Lifetime lifetime, IShellLocks shellLocks);
    [CompilerGeneratedAttribute]
internal IProperty`1<IEditorManager> get_EditorManager();
    [AsyncStateMachineAttribute("JetBrains.IDE.ShellEditorManager/<OpenFileAsync>d__6")]
public sealed virtual Task OpenFileAsync(VirtualFileSystemPath filePath, OpenFileOptions openFileOptions);
    protected virtual Task OpenFileAsyncInternal(VirtualFileSystemPath filePath);
}
[SolutionComponentAttribute("10")]
public class JetBrains.IDE.ShellEditorManagerHelper : object {
    public ShellEditorManagerHelper(Lifetime lifetime, ShellEditorManager shellEditorManager, IEditorManager editorManager);
}
public abstract class JetBrains.IDE.StackTrace.StackTraceBuilderBase : StackTraceNodeVisitor {
    private ISolution mySolution;
    private string myText;
    private StackTracePathResolverCache myPathResolverCache;
    protected static string MethodColor;
    protected static string TypeColor;
    protected static string ParameterColor;
    protected static string KeywordColor;
    protected static string InvalidPathColor;
    public ISolution Solution { get; }
    protected string Text { get; }
    protected StackTraceBuilderBase(ISolution solution, StackTracePathResolverCache pathResolverCache, string text);
    public ISolution get_Solution();
    protected abstract virtual void AppendQuotedNodeText(StackTraceNode node);
    public virtual void VisitText(TextNode node);
    public virtual void VisitMethod(MethodNode node);
    protected abstract virtual void LinkGenerated(string uri, IProjectFile file, int line, int col);
    protected abstract virtual void AppendPath(string path, int line, int column);
    public virtual void VisitPath(PathNode node);
    public virtual void VisitParameter(ParameterNode node);
    protected abstract virtual void AppendIdentifierName(IdentifierNode node);
    public virtual void VisitIdentifier(IdentifierNode node);
    public virtual void VisitCompositeNode(CompositeNode node);
    public virtual void VisitParameterList(ParameterListNode node);
    protected abstract virtual IDisposable Colorize(string color);
    protected abstract virtual IDisposable Link(string href);
    protected abstract virtual IDisposable LinkEmuLink(string href);
    protected abstract virtual void Append(string text);
    protected abstract virtual void AppendQuoted(string text);
    protected string get_Text();
}
[ExtensionAttribute]
public static class JetBrains.IDE.StackTrace.StackTracePathResolveHelper : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFile Resolve(PathNode node, StackTracePathResolverCache resolverCache);
    public static IProjectFile Resolve(string path, StackTracePathResolverCache resolverCache);
}
[SolutionComponentAttribute("16")]
public class JetBrains.IDE.StackTrace.StackTracePathResolverCache : object {
    private ISolution mySolution;
    private object myLock;
    private OneToListMap`2<string, IProjectFile> myNameToFile;
    public StackTracePathResolverCache(Lifetime lifetime, ISolution solution, ChangeManager changeManager);
    private void OnChanged(ChangeEventArgs args);
    public IList`1<IProjectFile> GetProjectFiles(string name);
}
public static class JetBrains.IDE.StackTrace.StackTraceProtocols : object {
    public static string OrdinalFileProtocol;
    public static string ProjectFileProtocol;
    public static string XmlDocProtocol;
    public static string SchemeDelimiter;
}
public interface JetBrains.IDE.TreeBrowser.ITreeModelBrowserDescriptorHolder {
    [NotNullAttribute]
public TreeModelBrowserDescriptorBase Descriptor { get; }
    public abstract virtual TreeModelBrowserDescriptorBase get_Descriptor();
}
public abstract class JetBrains.IDE.TreeBrowser.TreeModelBrowserDescriptor : TreeModelBrowserDescriptorBase {
    protected IActionManager myActionManager;
    private IAutomation JetBrains.Application.UI.Controls.TreeView.IPreviewControl.PreviewPanelContent { get; }
    protected TreeModelBrowserDescriptor(ISolution solution, IUIApplication environment, IActionManager actionManager);
    [NotNullAttribute]
public virtual IAutomation CreateViewAutomation(TreeModel model);
    private sealed virtual override IAutomation JetBrains.Application.UI.Controls.TreeView.IPreviewControl.get_PreviewPanelContent();
}
public abstract class JetBrains.IDE.TreeBrowser.TreeModelBrowserDescriptorBase : TreeViewController {
    [CompilerGeneratedAttribute]
private IUIApplication <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private LifetimeDefinition <LifetimeDefinition>k__BackingField;
    protected Lifetime myLifetime;
    protected ISolution mySolution;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IconId> <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private UpdateEventHandler UpdateRequested;
    [NotNullAttribute]
public IUIApplication Environment { get; }
    [NotNullAttribute]
public LifetimeDefinition LifetimeDefinition { get; }
    [CanBeNullAttribute]
public ISolution Solution { get; }
    public IProperty`1<string> Title { get; }
    public IProperty`1<IconId> Image { get; }
    public TreeModel Model { get; }
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> Presenter { get; }
    public string PreviewActionName { get; }
    [CanBeNullAttribute]
public string ContextMenuID { get; }
    [CanBeNullAttribute]
public string ActionBarID { get; }
    public bool ModelHandlesQuickSearch { get; }
    protected TreeModelBrowserDescriptorBase(ISolution solution, IUIApplication environment);
    [CompilerGeneratedAttribute]
public IUIApplication get_Environment();
    [CompilerGeneratedAttribute]
public LifetimeDefinition get_LifetimeDefinition();
    public virtual ISolution get_Solution();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_Title();
    [CompilerGeneratedAttribute]
public IProperty`1<IconId> get_Image();
    public abstract virtual TreeModel get_Model();
    public abstract virtual StructuredPresenter`2<TreeModelNode, IPresentableItem> get_Presenter();
    public virtual string get_PreviewActionName();
    public virtual string get_ContextMenuID();
    public virtual string get_ActionBarID();
    public virtual bool get_ModelHandlesQuickSearch();
    public virtual bool CustomizeActionBar(IActionBar bar);
    public virtual bool Navigate(TreeModelNode node, PopupWindowContextSource windowContext, bool transferFocus, TabOptions options);
    public virtual bool AcceptOccurrence(object value);
    public virtual UpdateKind NeedUpdate();
    public virtual void Update(UpdateKind updateKind);
    [CompilerGeneratedAttribute]
public void add_UpdateRequested(UpdateEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_UpdateRequested(UpdateEventHandler value);
    protected virtual void RequestUpdate(UpdateKind kind, bool immediate, IEnumerable`1<TreeModelNode> nodes);
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_0();
}
public class JetBrains.IDE.TreeBrowser.TreeModelBrowserPanelPersistence : object {
    private string myIndex;
    private ISettingsStore mySettingsStore;
    private Func`3<Lifetime, DataContexts, IDataContext> myContext;
    public TreeModelBrowserPanelPersistence(string index, ISettingsStore settingsStore, ISolution solution);
    public bool LoadPreviewVisible(bool def);
    public void SavePreviewVisible(bool value);
    public Orientation LoadPreviewOrientation(Orientation def);
    public void SavePreviewOrientation(Orientation value);
    public double LoadPreviewSplitterProportion(Orientation orientation, double def);
    public void SavePreviewSplitterProportion(Orientation orientation, double value);
    public int LoadPreviewSplitterPosition(Orientation orientation, int def);
    public void SavePreviewSplitterPosition(Orientation orientation, int value);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "JetBrains.IDE.Resources.Strings", "TreeModelBrowserStateSettingsSettingDescription")]
public class JetBrains.IDE.TreeBrowser.TreeModelBrowserPanelPersistenceSettings : object {
    [SettingsIndexedEntryAttribute("JetBrains.IDE.Resources.Strings", "WhetherPreviewPanelIsVisibleSettingDescription")]
public IIndexedEntry`2<string, bool> IsPreviewVisible;
    [SettingsIndexedEntryAttribute("JetBrains.IDE.Resources.Strings", "PreviewPanelOrientationSettingDescription")]
public IIndexedEntry`2<string, Orientation> PreviewOrientation;
    [SettingsIndexedEntryAttribute("JetBrains.IDE.Resources.Strings", "PreviewPanelSplitterHorizontalProportionSettingDescription")]
public IIndexedEntry`2<string, double> PreviewSplitterHorizontalProportion;
    [SettingsIndexedEntryAttribute("JetBrains.IDE.Resources.Strings", "PreviewPanelSplitterVerticalProportionSettingDescription")]
public IIndexedEntry`2<string, double> PreviewSplitterVerticalProportion;
    [SettingsIndexedEntryAttribute("JetBrains.IDE.Resources.Strings", "PreviewPanelSplitterHorizontalPositionSettingDescription")]
public IIndexedEntry`2<string, int> PreviewSplitterHorizontalPosition;
    [SettingsIndexedEntryAttribute("JetBrains.IDE.Resources.Strings", "PreviewPanelSplitterVerticalPositionSettingDescription")]
public IIndexedEntry`2<string, int> PreviewSplitterVerticalPosition;
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.IDE.TreeBrowser.TreeModelBrowserPanelPersistenceSettingsUpgrader : SettingTablesUpgrader {
    public TreeModelBrowserPanelPersistenceSettingsUpgrader(ProductConfigurations productConfigurations);
    public static string ParseIndexerName(string fullSettingName, string tail);
    protected virtual void DoUpgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime, SettingsTableBase workspaceSettingsTable, SettingsTableBase globalSettingsTable);
}
public class JetBrains.IDE.TreeBrowser.TreeModelPresentableViewWrapper : AAutomation {
    [CompilerGeneratedAttribute]
private TreeModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeViewController <Controller>k__BackingField;
    public TreeModel Model { get; }
    public ITreeViewController Controller { get; }
    public TreeModelPresentableViewWrapper(TreeModel model, ITreeViewController controller);
    [CompilerGeneratedAttribute]
public TreeModel get_Model();
    [CompilerGeneratedAttribute]
public ITreeViewController get_Controller();
}
[DebuggerStepThroughAttribute]
public class JetBrains.IDE.TreeBrowser.UpdateEventArgs : EventArgs {
    private UpdateKind myKind;
    private bool myImmediate;
    private IEnumerable`1<TreeModelNode> myRelatedNodes;
    public bool Immediate { get; }
    public UpdateKind Kind { get; }
    public IEnumerable`1<TreeModelNode> RelatedNodes { get; }
    public UpdateEventArgs(UpdateKind kind, bool immediate, IEnumerable`1<TreeModelNode> relatedNodes);
    public bool get_Immediate();
    public UpdateKind get_Kind();
    public IEnumerable`1<TreeModelNode> get_RelatedNodes();
}
public class JetBrains.IDE.TreeBrowser.UpdateEventHandler : MulticastDelegate {
    public UpdateEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, UpdateEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, UpdateEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum JetBrains.IDE.TreeBrowser.UpdateKind : Enum {
    public int value__;
    public static UpdateKind None;
    public static UpdateKind Display;
    public static UpdateKind Structure;
}
public class JetBrains.IDE.UI.ActionModelOverridingTransformer : ActionModelTransformer {
    protected ActionModelOverridingTransformer(IconHostBase iconHost);
    protected ActionDescriptionModel Override(IActionDefWithId actionWithId, string text, string defaultShortcutText, IconId iconId);
    protected virtual string GetActionShortcut(IActionDefWithId action);
}
public class JetBrains.IDE.UI.ActionModelTransformer : object {
    [CompilerGeneratedAttribute]
private IconHostBase <IconHost>k__BackingField;
    protected IconHostBase IconHost { get; }
    public ActionModelTransformer(IconHostBase iconHost);
    [CompilerGeneratedAttribute]
protected IconHostBase get_IconHost();
    [CanBeNullAttribute]
protected IconModel CreateIcon(Nullable`1<PartCatalogType> type);
    public virtual ActionDescriptionBaseModel Transform(IActionNodeDef action);
    protected virtual ActionDescriptionModel TransformAction(IActionDefWithId actionWithId);
    protected virtual string GetActionShortcut(IActionDefWithId action);
}
[ShellComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.IDE.UI.BePopupHost : object {
    [NotNullAttribute]
private UIAutomationInteractionModel myAutomationInteractionModel;
    public BePopupHost(UIAutomationInteractionModel automationInteractionModel);
    public sealed virtual void Show(Func`2<Lifetime, BePopup> getPopup, Lifetime parentLifetime, Action onDialogDispose);
    public sealed virtual BeValidationLabel ShowValidationPopup(IProperty`1<string> propertyToValidate, Lifetime lifetime, ITextControl textControl, TextRange range, ITextControlIdHost textControlIdHost);
}
[ShellComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.IDE.UI.DialogHost : object {
    [NotNullAttribute]
private UIAutomationInteractionModel myAutomationInteractionModel;
    public DialogHost(UIAutomationInteractionModel automationInteractionModel);
    public sealed virtual void Show(BeDialog dialog, Lifetime parentLifetime, Action onDialogDispose);
    public sealed virtual void Show(Func`2<Lifetime, BeDialog> getDialog, Lifetime parentLifetime, Action onDialogDispose);
}
[ExtensionAttribute]
public static class JetBrains.IDE.UI.DialogHostEx : object {
    [ExtensionAttribute]
public static void ShowModal(IDialogHost dialogHost, Lifetime lifetime, IShellLocks locks, string id, string title, Func`2<Lifetime, BeControl> content, Action submit, Action cancel, BeControlSize customSize);
}
[ExtensionAttribute]
public static class JetBrains.IDE.UI.DialogHostExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute]
public static void ShowDialogEnsureModal(IDialogHost dialogHost, Func`2<Lifetime, BeDialog> getDialog, Lifetime parentLifetime, Action onDialogDispose);
}
[ExtensionAttribute]
public static class JetBrains.IDE.UI.Extensions.AbstractColorEx : object {
    [ExtensionAttribute]
public static JetRgbaColor ToColor(AbstractColor abstractColor);
    [ExtensionAttribute]
public static JetRgbaColor ToColor(RgbColor rgbColor);
    [ExtensionAttribute]
public static JetRgbaColor ToColor(RgbaColor rgbaColor);
    [ExtensionAttribute]
public static RgbColor ToModel(JetRgbaColor color);
}
public class JetBrains.IDE.UI.Extensions.AttributeId : object {
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    public string ID { get; }
    public AttributeId(string id);
    [CompilerGeneratedAttribute]
public string get_ID();
}
public class JetBrains.IDE.UI.Extensions.BeAdvancedSearchData : object {
    private LifetimeDefinition myLifetimeDefinition;
    [CompilerGeneratedAttribute]
private Property`1<string> <SearchTextProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<int> <AllItemsCounter>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<string> <OccurrencesCounters>k__BackingField;
    [CompilerGeneratedAttribute]
private Signal`1<int> <PrevSignal>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<bool> <PrevAvailability>k__BackingField;
    [CompilerGeneratedAttribute]
private Signal`1<int> <NextSignal>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<bool> <NextAvailability>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HighlightedIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HighlightedIndexIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<int> <HighlightedIndices>k__BackingField;
    public Property`1<string> SearchTextProperty { get; public set; }
    public Property`1<int> AllItemsCounter { get; public set; }
    public Property`1<string> OccurrencesCounters { get; public set; }
    public Signal`1<int> PrevSignal { get; public set; }
    public Property`1<bool> PrevAvailability { get; public set; }
    public Signal`1<int> NextSignal { get; public set; }
    public Property`1<bool> NextAvailability { get; public set; }
    public int HighlightedIndex { get; public set; }
    public int HighlightedIndexIndex { get; public set; }
    public ListEvents`1<int> HighlightedIndices { get; public set; }
    public BeAdvancedSearchData(Lifetime assemblyLifetime);
    [CompilerGeneratedAttribute]
public Property`1<string> get_SearchTextProperty();
    [CompilerGeneratedAttribute]
public void set_SearchTextProperty(Property`1<string> value);
    [CompilerGeneratedAttribute]
public Property`1<int> get_AllItemsCounter();
    [CompilerGeneratedAttribute]
public void set_AllItemsCounter(Property`1<int> value);
    [CompilerGeneratedAttribute]
public Property`1<string> get_OccurrencesCounters();
    [CompilerGeneratedAttribute]
public void set_OccurrencesCounters(Property`1<string> value);
    [CompilerGeneratedAttribute]
public Signal`1<int> get_PrevSignal();
    [CompilerGeneratedAttribute]
public void set_PrevSignal(Signal`1<int> value);
    [CompilerGeneratedAttribute]
public Property`1<bool> get_PrevAvailability();
    [CompilerGeneratedAttribute]
public void set_PrevAvailability(Property`1<bool> value);
    [CompilerGeneratedAttribute]
public Signal`1<int> get_NextSignal();
    [CompilerGeneratedAttribute]
public void set_NextSignal(Signal`1<int> value);
    [CompilerGeneratedAttribute]
public Property`1<bool> get_NextAvailability();
    [CompilerGeneratedAttribute]
public void set_NextAvailability(Property`1<bool> value);
    [CompilerGeneratedAttribute]
public int get_HighlightedIndex();
    [CompilerGeneratedAttribute]
public void set_HighlightedIndex(int value);
    [CompilerGeneratedAttribute]
public int get_HighlightedIndexIndex();
    [CompilerGeneratedAttribute]
public void set_HighlightedIndexIndex(int value);
    [CompilerGeneratedAttribute]
public ListEvents`1<int> get_HighlightedIndices();
    [CompilerGeneratedAttribute]
public void set_HighlightedIndices(ListEvents`1<int> value);
    public void LoadSearch(Lifetime lt, ListNodeProperties p, BeRichText textToHighlight);
    [CompilerGeneratedAttribute]
private void <.ctor>b__41_0(AddRemoveIndexEventArgs`1<int> args);
}
[ExtensionAttribute]
public static class JetBrains.IDE.UI.Extensions.BeComboBoxExtensions : object {
    [ExtensionAttribute]
[CoveredInTest]
public static BeComboBox GetBeComboBox(IProperty`1<T> property, Lifetime lifetime, IEnumerable`1<T> values, PresentComboItem`2<T, RichText> presentation);
    [ExtensionAttribute]
public static BeComboBox GetBeComboBox(IProperty`1<T> property, Lifetime lifetime, IEnumerable`1<T> values, PresentComboItem`2<T, string> presentation);
    [ExtensionAttribute]
public static BeComboBox GetBeComboBox(IProperty`1<T> property, Lifetime lifetime, IListEvents`1<T> values, PresentComboItem`2<T, RichText> presentation);
    [ExtensionAttribute]
public static BeComboBox GetBeComboBox(IProperty`1<T> property, Lifetime lifetime, IListEvents`1<T> values, PresentComboItem`2<T, string> presentation);
    [ExtensionAttribute]
[CoveredInTest]
public static BeComboBox GetBeComboBox(IProperty`1<T> property, Lifetime lifetime, IEnumerable`1<T> values, PresentComboItem`2<T, BeControl> presentation);
    [ExtensionAttribute]
[CoveredInTest]
public static BeComboBox GetBeComboBox(IProperty`1<T> property, Lifetime lifetime, IListEvents`1<T> values, PresentComboItem`2<T, BeControl> presentation);
    private static void BindToProperty(IProperty`1<T> property, Lifetime lifetime, BeComboBox comboBox, IListEvents`1<T> valueList);
    [ExtensionAttribute]
[CoveredInTest]
public static BeComboBox GetBeComboBox(IProperty`1<TTarget> property, Lifetime lifetime, IEnumerable`1<TValue> values, Func`2<TValue, TTarget> convert, PresentComboItem`2<TValue, BeControl> presentation);
    [ExtensionAttribute]
[CoveredInTest]
public static BeComboBox GetBeComboBox(IProperty`1<TTarget> property, Lifetime lifetime, IListEvents`1<TValue> values, Func`2<TValue, TTarget> convert, PresentComboItem`2<TValue, BeControl> presentation);
    private static BeComboBox CreateCombobox(bool isEditable, string id, UpdateSourceTrigger updateSourceTrigger);
    private static void AddControls(PresentComboItem`2<T, BeControl> presentation, IListEvents`1<T> comboValues, BeComboBox comboBox, Lifetime lifetime);
    [ExtensionAttribute]
[CoveredInTest]
public static BeComboBox GetEditableBeComboBox(IProperty`1<string> property, Lifetime lifetime, IList`1<T> values, PresentComboItem`2<T, RichText> presentation, BeInvalidValuePropagation propagateValueWhenInvalid, UpdateSourceTrigger updateSourceTrigger);
    [ExtensionAttribute]
[CoveredInTest]
public static BeComboBox GetEditableBeComboBox(IProperty`1<string> property, Lifetime lifetime, IListEvents`1<T> values, PresentComboItem`2<T, RichText> presentation, BeInvalidValuePropagation propagateValueWhenInvalid, UpdateSourceTrigger updateSourceTrigger);
    [ExtensionAttribute]
public static BeComboBox GetEditableBeComboBox(IProperty`1<T> property, Lifetime lifetime, IListEvents`1<T> values, Func`2<string, T> convertBack, PresentComboItem`2<T, RichText> presentation, BeInvalidValuePropagation propagateValueWhenInvalid);
    [ExtensionAttribute]
[NotReadyForTest]
public static BeComboBox GetEditableBeComboBoxWithChangingValues(IProperty`1<string> property, Lifetime lifetime, PresentComboItem`2<T, RichText> presentation, BeInvalidValuePropagation propagateValueWhenInvalid);
    [ExtensionAttribute]
[CoveredInTest]
public static BeComboBox GetEditableBeComboBoxWithHistory(IProperty`1<string> property, Lifetime lifetime, IListEvents`1<T> values, Func`2<string, T> convertBack, PresentComboItem`2<T, RichText> presentation);
    [ExtensionAttribute]
public static BeComboBox GetEditableBeComboBox(IProperty`1<string> property, Lifetime lifetime, IList`1<BeControl> values);
    [ExtensionAttribute]
public static BeComboBox GetEditableBeComboBox(IProperty`1<string> property, Lifetime lifetime, IList`1<T> values, PresentComboItem`2<T, BeControl> presentation, Func`2<string, T> getElementFromString, BeInvalidValuePropagation propagateValueWhenInvalid);
    public static BeComboBox GetEditableComboBox(IProperty`1<string> property, Lifetime lifetime, IListEvents`1<T> valueList, PresentComboItem`2<T, BeControl> fillItem, Func`2<string, T> getElementFromString, BeInvalidValuePropagation propagateValueWhenInvalid, UpdateSourceTrigger updateSourceTrigger);
    private static void BindToPropertyForEdit(IProperty`1<string> property, Lifetime lifetime, BeComboBox comboBox, IListEvents`1<T> valueList, Func`2<string, T> getText, BeInvalidValuePropagation propagateValueWhenInvalid);
    [ExtensionAttribute]
public static void ReloadValues(BeComboBox comboBox, List`1<string> values, string currentValue, OnResetValue selectedItemReset, string defaultValue);
    [ExtensionAttribute]
public static BeComboBox GetBeComboBoxFromEnum(IProperty`1<TTarget> property, Lifetime lifetime, Func`2<TValue, TTarget> convert, PresentComboItem`2<TValue, RichText> presentation);
    [ExtensionAttribute]
[CoveredInTest]
public static BeComboBox GetBeComboBoxFromEnum(IProperty`1<T> property, Lifetime lifetime, PresentComboItem`2<T, RichText> presentation, IEnumerable`1<T> except, bool reverse);
    [ExtensionAttribute]
public static BeComboBox GetBeComboBoxFromEnum(IProperty`1<T> property, Lifetime lifetime, PresentComboItem`2<T, string> presentation, IEnumerable`1<T> except, bool reverse);
    [ExtensionAttribute]
public static BeComboBox GetBeComboBoxFromEnum(IProperty`1<T> property, Lifetime lifetime, OnCreateComboItem`1<T> presentation, bool reverse);
    [ExtensionAttribute]
[CoveredInTest]
public static BeComboBox GetBeComboBoxFromEnum(IProperty`1<T> property, Lifetime lifetime, PresentComboItem`2<T, BeControl> presentation, IEnumerable`1<T> except, bool reverse);
    [NotNullAttribute]
internal static BeControl GetControlFromValue(T t, Func`2<T, BeControl> present);
    [CompilerGeneratedAttribute]
internal static BeControl <AddControls>g__Default|10_0(T e);
    [CompilerGeneratedAttribute]
internal static BeControl <GetEditableBeComboBox>g__FillItem|11_0(Lifetime lt, RichText e, ComboItemProperties p);
    [CompilerGeneratedAttribute]
internal static BeControl <GetEditableBeComboBox>g__FillItem|12_1(Lifetime lt, RichText e, ComboItemProperties p);
}
[ExtensionAttribute]
public static class JetBrains.IDE.UI.Extensions.BeContainerExtensions : object {
    [ExtensionAttribute]
[CoveredInTest]
public static BeTabbedControl AddTab(BeTabbedControl tabbedControl, BeControl control, string name, Lifetime lifetime, string controlId);
    [ExtensionAttribute]
public static BeTabbedControl WithBackground(BeTabbedControl tabbedControl, AbstractColor color);
    [ExtensionAttribute]
public static BeTabbedControl AddTab(BeTabbedControl tabbedControl, Func`1<BeControl> getControl, string name, Lifetime lifetime, string controlId);
    [ExtensionAttribute]
public static BeTabbedControl AddTab(BeTabbedControl tabbedControl, Func`1<BeControl> getControl, BeLabel tabName, Lifetime lifetime, string controlId);
    [ExtensionAttribute]
[CoveredInTest]
public static BeCollapsiblePanel InCollapsiblePanel(BeControl control, string title, bool initiallyExpanded, BeChangeOwnerSize changeOwnerSize);
    [ExtensionAttribute]
[CoveredInTest]
public static BeCollapsiblePanel InCollapsiblePanel(BeControl control, Lifetime lifetime, string title, IProperty`1<bool> property, BeChangeOwnerSize changeOwnerSize);
    [ExtensionAttribute]
[CoveredInTest]
public static BeScrollablePanel InScrollablePanel(BeControl content, BeControlSize size, BeScrollbarPolicy scrollbarPolicy);
    [ExtensionAttribute]
[CoveredInTest]
public static BeDialog GetBeOkCancelDialog(BeControl dialogContent, Lifetime lifetime, string id, Action ok, Action cancel, DialogModality modality, string title, BeControlSize size, bool disableOKWhenInvalid, DialogLayoutPersistenceMode layoutPersistenceMode, BeDialogControlBox controlBox, bool isResizable);
    [ExtensionAttribute]
public static BeDialog WithSaveToButton(BeDialog dialog, Lifetime lifetime, List`1<BeButton> items, IProperty`1<bool> enabled, bool disableWhenInvalid, string text);
    [ExtensionAttribute]
public static BeDialog WithCustomDropDownButton(BeDialog dialog, string text, Lifetime lifetime, List`1<BeControl> items, IProperty`1<bool> enabled, bool disableWhenInvalid);
    [ExtensionAttribute]
[CoveredInTest]
[NotNullAttribute]
public static BeDialog WithOkButton(BeDialog dialog, Lifetime lifetime, Action ok, IProperty`1<bool> enabled, bool disableWhenInvalid, string text);
    [ExtensionAttribute]
[CoveredInTest]
[NotNullAttribute]
public static BeDialog WithCancelButton(BeDialog dialog, Lifetime lifetime, Action cancel);
    [ExtensionAttribute]
[CoveredInTest]
public static BeDialog WithCustomFooter(BeDialog dialog, BeControl footer);
    [ExtensionAttribute]
[NotNullAttribute]
[CoveredInTest]
public static BeDialog WithCustomButton(BeDialog dialog, IProperty`1<string> text, Lifetime lifetime, Action onClick, BeCommonBehavior dialogButtonAction, IProperty`1<bool> enabled, DialogResult resultAfterClick, bool disableWhenInvalid, Action finish);
    [ExtensionAttribute]
[NotNullAttribute]
[CoveredInTest]
public static BeDialog WithCustomButton(BeDialog dialog, string text, Lifetime lifetime, Action onClick, BeCommonBehavior dialogButtonAction, IProperty`1<bool> enabled, DialogResult resultAfterClick, bool disableWhenInvalid, Action finish);
    [ExtensionAttribute]
[NotNullAttribute]
[CoveredInTest]
public static BeDialog WithCustomButton(BeDialog dialog, BeAbstractText text, Lifetime lifetime, Action onClick, BeCommonBehavior dialogButtonAction, IProperty`1<bool> enabled, DialogResult resultAfterClick, bool disableWhenInvalid, Action finish);
    private static void AddDialogButton(BeDialog dialog, BeCommonBehavior dialogButtonAction, BePredefinedBehaviorButton button);
    [ExtensionAttribute]
[NotNullAttribute]
[CoveredInTest]
public static BeDialog WithCustomButton(BeDialog dialog, BeButton button, Lifetime lifetime, Action onClick, BeCommonBehavior dialogButtonAction, DialogResult resultAfterClick, bool disableWhenInvalid, Action finish);
    [ExtensionAttribute]
[NotNullAttribute]
public static BeDialog WithMaxSize(BeDialog dialog, BeControlSize size);
    [ExtensionAttribute]
[NotNullAttribute]
public static BeDialog WithMinSize(BeDialog dialog, BeControlSize size);
    [ExtensionAttribute]
[NotNullAttribute]
public static BeDialog WithHelpTopic(BeDialog dialog, Lifetime lifetime, HelpId helpTopicId, HelpSystem helpSystem);
    [ExtensionAttribute]
public static void BindValidation(BeControl content, Lifetime lifetime, IViewableProperty`1<bool> enabled);
    [ExtensionAttribute]
[CoveredInTest]
public static BeDialog InDialog(BeControl dialogContent, string title, string id, DialogModality modality, BeControlSize size, DialogLayoutPersistenceMode layoutPersistenceMode, BeDialogControlBox controlBox, BeDialogStyle style, bool isResizable);
    [ExtensionAttribute]
[NotNullAttribute]
public static BeToolbar InToolbar(BeControl content, string id, BeDock dock, ToolbarStyle toolbarStyle);
    [ExtensionAttribute]
public static BeToolbar Clear(BeToolbar toolbar);
    [ExtensionAttribute]
[CoveredInTest]
[NotNullAttribute]
public static BeToolbar AddItem(BeToolbar toolbar, BeControl control);
    [ExtensionAttribute]
public static BeToolbar AddItem(BeToolbar toolbar, Lifetime lifetime, BeControl control);
    [ExtensionAttribute]
public static BeToolbar InsertItem(BeToolbar toolbar, int index, BeControl control);
    [ExtensionAttribute]
public static BeToolbar RemoveItem(BeToolbar toolbar, int index);
    [ExtensionAttribute]
public static BeToolbar AddItems(BeToolbar toolbar, BeControl[] beControl);
    [ExtensionAttribute]
public static BeToolbar AddItems(BeToolbar toolbar, IEnumerable`1<BeControl> beControls);
    [ExtensionAttribute]
public static int ItemsCount(BeToolbar toolbar);
    [ExtensionAttribute]
[CoveredInTest]
public static BeToolbar AddActionButton(BeToolbar toolbar, string groupId, string actionId);
    [ExtensionAttribute]
[ReadyForTest]
public static BeToolbar AddPredefinedActionButton(BeToolbar toolbar, Lifetime lifetime, BeToolbarAction behavior, IIconHost host, bool enabled, Action onClick, BeButtonStyle style);
    [ExtensionAttribute]
public static BeToolbar AddPredefinedActionButton(BeToolbar toolbar, Lifetime lifetime, BeToolbarAction behavior, IIconHost host, IProperty`1<bool> enabled, Action onClick, BeButtonStyle style);
    private static Action GetAction(BeToolbar toolbar, BeToolbarAction behavior, Action onClick);
    [ExtensionAttribute]
[CoveredInTest]
public static BeToolbar AddButtonWithListAction(BeToolbar toolbar, BeListAddAction action, Func`2<int, T> getNewElement, Func`2<int, bool> canExecute, string id, BeButtonStyle style, string customTooltip);
    [ExtensionAttribute]
[CoveredInTest]
public static BeToolbar AddButtonWithListAction(BeToolbar toolbar, BeListAction action, Action`1<int> onExecute, Func`2<int, bool> canExecute, string id, string customTooltip, BeButtonStyle style);
    [ExtensionAttribute]
[NotNullAttribute]
public static BeToolbar AddButton(BeToolbar toolbar, IconModel icon, string tooltip, Action onClick, Lifetime lifetime, IProperty`1<bool> enabled, string id, bool withShortcut, BeButtonStyle style);
    [ReadyForTest]
public static BeAbstractButton GetButton(Lifetime lifetime, Enum action, string id, BeButtonStyle style, string customTooltip, Action onClick, IIconHost iconHost, Property`1<bool> enabledProperty);
    private static void InitActions(TreeGridActionData`1<T> data, Func`2<int, bool> canExecute, bool disableWhenEmpty, IProperty`1<bool> enabledProperty);
    private static Action InitOnClick(TreeGridActionData`1<T> data, BeListAddAction action, Func`2<int, T> getNewElement, Boolean& disableWhenEmpty, Action onFinish);
    private static Action InitOnClick(TreeGridActionData`1<T> data, BeListAction action, Action`1<int> onExecute, Property`1& enabledProperty, Action onFinish);
    [CompilerGeneratedAttribute]
internal static void <GetAction>g__ProcessLinesExpanded|35_0(BeTreeGridLine beTreeGridLine, bool value);
}
[ExtensionAttribute]
public static class JetBrains.IDE.UI.Extensions.BeControls : object {
    [NotNullAttribute]
private static BeButton CreateButton(BeAbstractText control, BeUserAction beButtonAction, BeButtonStyle beButtonStyle, string id);
    [NotNullAttribute]
private static BePredefinedBehaviorButton CreatePredefinedBehaviorButton(BeAbstractText control, BeCommonBehavior action, BeUserAction beButtonAction, BeButtonStyle beButtonStyle, string id);
    [NotNullAttribute]
public static BePredefinedBehaviorButton GetPredefinedBehaviorButton(BeAbstractText control, BeCommonBehavior action, Lifetime lifetime, Action onClick, BeButtonStyle style, string id);
    [CoveredInTest]
[NotNullAttribute]
public static BeButton GetButton(BeAbstractText control, Lifetime lifetime, Action onClick, BeButtonStyle style, string id);
    [CoveredInTest]
[NotNullAttribute]
public static BeButton GetButton(IconModel icon, Lifetime lifetime, Action onClick, string id);
    public static BeButton GetButton(string description, Lifetime lifetime, Action onClick, IconModel icon, BeButtonStyle style, bool withShortCut);
    public static BeButton GetButton(string description, Lifetime lifetime, SimpleSignal onClick, IconModel icon, bool withShortCut);
    internal static BeUserAction ToBeUserAction(Lifetime lifetime, Action onClick);
    public static BeControl GetActionButton(string groupId, string actionId, string id);
    [NotNullAttribute]
public static BeButton GetToolbarButton(IconModel icon, string description, Lifetime lifetime, Action onClick, string id, bool addShortcut);
    [CoveredInTest]
public static BeLink GetLinkButton(string linkText, Lifetime lifetime, Action onClick, string id, string prefix, string postfix, bool isExternal);
    [CoveredInTest]
public static BeLink GetLinkButton(string linkText, Lifetime lifetime, Action onClick, BeRichText prefix, BeRichText postfix, string id, bool wrapText, bool isExternal);
    public static BeControl GetLinkButton(IProperty`1<string> linkTextProperty, Lifetime lifetime, Action onClick, string prefix, string postfix);
    public static BeDropDownButton GetDropDownButton(string text, List`1<BeControl> items);
    [CoveredInTest]
public static BeButton GetOpenDialogButton(Lifetime lifetime, BeAbstractText control, Func`1<BeDialog> dialog, IDialogHost host, BeButtonStyle style, string id);
    [CoveredInTest]
public static BeButton GetOpenDialogButton(Lifetime lifetime, IconModel icon, Func`1<BeDialog> dialog, IDialogHost host);
    public static BeButton GetOpenDialogButton(Lifetime lifetime, string description, Func`1<BeDialog> dialog, IDialogHost host, IconModel icon, BeButtonStyle style);
    [CoveredInTest]
public static BeButton GetPathSelectionButton(BeAbstractText content, IProperty`1<string> value, BrowsePathOptions pathOptions, Lifetime lifetime, ICommonFileDialogs dialogs, ChooseFileType[] chooseFileTypes, BeButtonStyle style, Action`1<FileSystemPath> onFinished, string id);
    public static BeButton GetPathSelectionButton(BeAbstractText content, BrowsePathOptions pathOptions, Lifetime lifetime, ICommonFileDialogs dialogs, FileSystemPath initialPath, ChooseFileType[] chooseFileTypes, BeButtonStyle style, Action`1<FileSystemPath> onFinished, string id);
    public static BeButton GetPathSelectionButton(BeAbstractText content, IProperty`1<DataForPathSelectionDialog> pathSelectionDialogData, Lifetime lifetime, ICommonFileDialogs dialogs, FileSystemPath initialPath, BeButtonStyle style, Action`1<FileSystemPath> onFinished, string id);
    public static BeButton GetPathSelectionButton(BeAbstractText content, IProperty`1<FileSystemPath> value, BrowsePathOptions pathOptions, Lifetime lifetime, ICommonFileDialogs dialogs, ChooseFileType[] chooseFileTypes, BeButtonStyle style, Action`1<FileSystemPath> onFinished, string id);
    public static BeButton GetPathSelectionButton(BeAbstractText content, IProperty`1<FileSystemPath> value, IProperty`1<DataForPathSelectionDialog> pathSelectionDialogData, Lifetime lifetime, ICommonFileDialogs dialogs, BeButtonStyle style, Action`1<FileSystemPath> onFinished, string id);
    [NotReadyForTest]
public static BeButton GetMultiplePathSelectionButton(BeAbstractText content, FileSystemPath initialPath, BrowsePathOptions pathOptions, Lifetime lifetime, ICommonFileDialogs dialogs, ChooseFileType[] chooseFileTypes, BeButtonStyle style, Action`1<ICollection`1<FileSystemPath>> onFinished, string id);
    [CoveredInTest]
public static BeGrid GetPathSelectionElement(IPathControlData`1<T> data, Lifetime lifetime, IIconHost iconHost, ICommonFileDialogs dialogs, string description, ValidationStyle validationStyle);
    public static BeComboBox GetComboBox(Lifetime lifetime, IEnumerable`1<T> values, PresentComboItem`2<T, BeControl> presentation, T selectedValue, string id, Action`1<T> handleSelected);
    [ReadyForTest]
public static BeComboBox GetComboBox(Lifetime lifetime, IEnumerable`1<T> values, PresentComboItem`2<T, RichText> presentation, T selectedValue, string id, Action`1<T> handleSelected);
    public static BeComboBox GetComboBoxFromEnum(Lifetime lifetime, PresentComboItem`2<T, RichText> presentation, T selectedValue, string id, Action`1<T> handleSelected, bool reverse);
    [CoveredInTest]
public static BeComboBox GetComboBoxFromEnum(Lifetime lifetime, PresentComboItem`2<T, BeControl> presentation, T selectedValue, string id, Action`1<T> handleSelected, IEnumerable`1<T> except, bool reverse);
    [NotReadyForTest]
public static BeComboBox GetCustomComboBox(Lifetime lifetime, IList`1<T> values, string initialPresentation, Func`1<string> updateText, PresentCustomComboItem`2<T, BeControl> presentation);
    [ExtensionAttribute]
public static BeComboBox WithDefaultPresentationWhenEmpty(BeComboBox comboBox, string defaultPresentation, Lifetime lifetime);
    [ExtensionAttribute]
public static BeComboBox WithDefaultPresentationWhenEmpty(BeComboBox comboBox, IProperty`1<string> defaultPresentation, Lifetime lifetime);
    [ExtensionAttribute]
public static BeComboBox WithDefaultPresentationWhenEmpty(BeComboBox comboBox, BeAbstractText defaultPresentation, Lifetime lifetime);
    [ExtensionAttribute]
public static BeComboBox WithDefaultPresentationOnCondition(BeComboBox comboBox, BeAbstractText defaultPresentation, IProperty`1<bool> condition, Lifetime lifetime, Action whenDefault);
    [CoveredInTest]
public static BeTabbedControl GetTabbedControl(BeTabbedStyle style);
    [CoveredInTest]
[NotNullAttribute]
public static BeSplitControl GetSplitControl(BeControl firstPanel, BeControl secondPanel, float proportion, bool isVertical, SplitterLayoutPersistenceMode persistenceMode);
    public static BeScrollablePanel GetScrollablePanel(BeControl content, BeControlSize size, BeScrollbarPolicy scrollbarPolicy);
    [ExtensionAttribute]
public static void Init(BeControl control, string id, string tooltip, bool enabled, ControlVisibility visibility);
    [ExtensionAttribute]
public static void InitWithDependency(BeControl control, Lifetime lifetime, BeControl content, BeDependancy dependency);
    [ExtensionAttribute]
public static T EnableWhen(T control, Lifetime lifetime, IViewableProperty`1<Nullable`1<bool>> enableCondition);
    [ExtensionAttribute]
public static T EnableWhen(T control, Lifetime lifetime, IViewableProperty`1<bool> enableCondition);
    public static BeSearchBox GetSearchBox(Lifetime lifetime, IProperty`1<string> textToSearch, Place place);
    [ReadyForTest]
public static BeProgress GetProgressBar();
    [ExtensionAttribute]
public static BeProgress StartIndefinite(BeProgress beProgress);
    [ExtensionAttribute]
public static BeProgress Start(BeProgress beProgress);
    [ExtensionAttribute]
public static BeProgress Start(BeProgress beProgress, Lifetime lifetime, IProperty`1<double> fraction, IProperty`1<string> stepName, IProperty`1<string> taskName);
    [ExtensionAttribute]
public static BeProgress Start(BeProgress beProgress, Lifetime lifetime, IProperty`1<double> fraction, AbstractColor color, IProperty`1<string> stepName, IProperty`1<string> taskName);
    [ExtensionAttribute]
public static BeProgress Start(BeProgress beProgress, Lifetime lifetime, IProgressIndicatorModel pi);
    [ExtensionAttribute]
public static BeProgress Advance(BeProgress beProgress, double fraction, string text);
    [ExtensionAttribute]
public static BeProgress Stop(BeProgress beProgress);
    [ExtensionAttribute]
public static BeProgress Cancel(BeProgress beProgress);
    public static IndefiniteProgress GetIndefiniteProgress();
    public static DefiniteProgress GetDefiniteProgressWithText(Lifetime lifetime, IProperty`1<string> stepName, IProperty`1<string> taskName);
    public static DefiniteProgress GetDefiniteProgress();
    public static DefiniteProgress GetDefiniteProgressWithText(Lifetime lifetime, IProperty`1<double> fraction, IProperty`1<string> stepName, IProperty`1<string> taskName);
    public static DefiniteProgress GetDefiniteProgress(Lifetime lifetime, IProperty`1<double> fraction);
    public static BeProgress GetVolumeSize(double fraction, VolumeSize volumeSize, string header, string info);
    public static CustomColorProgress GetCustomColorProgress(Lifetime lifetime, IProperty`1<double> fraction, AbstractColor color, IProperty`1<string> taskName, IProperty`1<string> stepName);
    public static AbstractColor GetColorFromVolume(VolumeSize volumeSize);
    public static BeUnitSize GetUnitSize(BeSizingType type, int multiplier);
    public static BeBackendContextMenu GetContextMenu(ActionGroupHost host, string contextMenuActionGroupId, string doubleClickActionId, ActionModelTransformer transformer);
    public static BeNotification GetNotification(Lifetime lifetime, IProperty`1<string> text, BeNotificationType beNotificationType, bool hasBorder, IProperty`1<IconModel> customIcon, BeNotificationClose canBeClosed);
    public static BeNotification GetNotification(string text, BeNotificationType beNotificationType, bool hasBorder, IconModel customIcon, BeNotificationClose canBeClosed);
    public static BeNotification GetNotification(RichText text, BeNotificationType beNotificationType, bool hasBorder, IconModel customIcon, BeNotificationClose canBeClosed);
    [ExtensionAttribute]
public static BeNotification WithLink(BeNotification notification, BeLink link);
    [ExtensionAttribute]
public static BeNotification WithLink(BeNotification notification, Lifetime lifetime, string text, Action onClick);
    [NoTestNeeded]
public static BeDataGrid GetBeDataGrid(BeDataGridConfiguration configuration, Func`3<int, int, IEnumerable`1<BeVirtualizingDataViewItem>> fetch, Func`2<BeVirtualizingDataViewCommitRequest, BeVirtualizingDataViewCommitResponse> commit, ITaskHost taskHost);
    public static BeDataGridConfiguration GetBeDataGridConfiguration(IEnumerable`1<BeDataGridColumnDefinition> columnDefinitions, int frozenColumnCount);
    [NotNullAttribute]
[CoveredInTest]
public static BeDialog GetDialog(BeControl dialogContent, string title, string id, DialogModality modality, BeControlSize size, DialogLayoutPersistenceMode layoutPersistenceMode, BeDialogControlBox controlBox, BeDialogStyle style, bool isResizable);
    public static BeTextArea GetTextArea(Lifetime lifetime, IProperty`1<string> text, string placeholder);
    public static BeTextControl GetTextControl(string initialText, bool isReadonly, RdLanguage rdLanguage, string id);
    [CoveredInTest]
public static BeTextControl GetTextControl(IProperty`1<string> property, Lifetime lifetime, bool isReadonly, RdLanguage rdLanguage, string id);
    [NotReadyForTest]
public static BeTextControlWithLanguage GetLanguageTextControl(RdProjectId projectId, string initialText, bool isReadonly, RdLanguage rdLanguage, string id);
    [ReadyForTest]
public static BeEditor GetEditor(RdProjectId projectId, RdLanguage rdLanguage, string id);
    [ReadyForTest]
public static BeEditor GetEditor(RdProjectId projectId, BeRichAttributedText initialText, RdLanguage rdLanguage, string id);
    [ExtensionAttribute]
[ReadyForTest]
public static BeEditor Add(BeEditor editor, ITextAttributesKeyProvider keyProvider, string text, AttributeId id);
    [ExtensionAttribute]
[ReadyForTest]
public static BeEditor SetText(BeEditor editor, RichAttributedTextModel text);
    [ReadyForTest]
public static BeTextControlWithLanguage GetLanguageTextControl(RdProjectId projectId, IProperty`1<string> property, Lifetime lifetime, bool isReadonly, RdLanguage rdLanguage, string customFileName, bool createPsiFile);
    [CoveredInTest]
public static BeSpacer GetSpacer();
    [CoveredInTest]
public static BeSeparator GetSeparator(GridOrientation orientation);
    [NotNullAttribute]
public static BeTextBox GetTextBox(Lifetime lifetime, bool isReadOnly, string id, ValidationStyle style, string initialText, Action`1<string> onUpdate, UpdateSourceTrigger updateSourceTrigger, string placeholder);
    public static BeHtmlViewer GetHtmlViewer(Lifetime lifetime, IProperty`1<string> property, bool isReadOnly);
    public static ValueTuple`2<BePasswordTextBox, BePasswordTextBox> GetBePasswordTextBoxWithConfirmation(Lifetime lifetime, IProperty`1<string> property);
    public static BePasswordTextBox GetBePasswordTextBox(Lifetime lifetime, IProperty`1<string> property);
    public static BePasswordTextBox GetBePasswordTextBox(Lifetime lifetime, string id);
    [NoTestNeeded]
public static BeArrowControl GetLeftArrow(string text, JetRgbaColor color, ValueTuple`2<Lifetime, Action> onClick);
    [NoTestNeeded]
public static BeArrowControl GetRightArrow(string text, JetRgbaColor color, ValueTuple`2<Lifetime, Action> onClick);
    private static BeArrowControl GetArrow(string leftText, string rightText, JetRgbaColor leftColor, JetRgbaColor rightColor, ValueTuple`2<Lifetime, Action> onClick);
    [NoTestNeeded]
public static BeArrowControl GetDoubleEndArrow(string leftText, string rightText, JetRgbaColor leftColor, JetRgbaColor rightColor, ValueTuple`2<Lifetime, Action> onClick);
    [CoveredInTest]
public static BeGrid GetAutoGrid(GridOrientation orientation, BeControl[] controls);
    [NotNullAttribute]
[CoveredInTest]
public static BeGrid GetGrid(GridOrientation orientation, ValueTuple`2[] controls);
    [NotNullAttribute]
[CoveredInTest]
public static BeGrid GetEmptyGrid(GridOrientation orientation, BeMarginType intercellSpacing);
    [CoveredInTest]
public static BeSpanGrid GetSpanGrid(string columnSizes, BeMarginType intercellSpacing);
    public static BeSpanGrid GetSpanGrid(ValueTuple`2[] columns, BeMarginType intercellSpacing);
    public static BeSpanGrid GetSpanGrid(IEnumerable`1<ValueTuple`3<BeSizingType, int, string>> columns, BeMarginType intercellSpacing);
    [ExtensionAttribute]
public static BeControl ExcludeFromSearchResultHighlighting(BeControl control);
    public static BeDynamicControlContainer GetDynamicControlContainer();
    public static BeMutableGrid MutableGrid(GridOrientation orientation, BeMarginType intercellSpacing);
    public static BeMutableGrid MutableHorizontalGrid(BeMarginType intercellSpacing);
    public static BeMutableGrid MutableVerticalGrid(BeMarginType intercellSpacing);
    public static BeMutableSpanGrid MutableSpanGrid(List`1<BeUnitSize> columns, BeMarginType intercellSpacing);
    public static BeMutableSpanGrid MutableSpanGrid(string columnSizes, BeMarginType intercellSpacing);
    public static BeMutableSpanGrid MutableSpanGrid(Lifetime lifetime, ListEvents`1<T> elements, PresentColumnElements`1<T> getPresentation, string columnSizes, BeMarginType intercellSpacing);
    public static BeMutableSpanGrid MutableSpanGrid(Lifetime lifetime, ListEvents`1<T> elements, PresentColumnElementWithFill`1<T> getPresentation, string columnSizes, BeMarginType intercellSpacing);
    public static BeMutableSpanGrid MutableAutoSpanGrid(Lifetime lifetime, ListEvents`1<T> elements, PresentColumnElementWithMinSize`1<T> getPresentation, string columnSizes, BeMarginType intercellSpacing);
    public static BeMutableSpanGrid MutableSpanGrid(Lifetime lifetime, ListEvents`1<T> elements, PresentColumnElementsWithSpan`1<T> getPresentation, string columnSizes, BeMarginType intercellSpacing);
    public static BeMenuItem GetMenuFromEnum(IProperty`1<T> property, Lifetime lifetime, IIconHost iconHost, MenuView headerView, IEnumerable`1<T> except, Action`2<T, T> updateOnClick, string requiredTextHeader);
    public static BeMenuItem GetMenuItem(string header, Lifetime lifetime, Action onClick);
    public static BeControl GetMenu(string header, IEnumerable`1<BeControl> menuItems);
    [ExtensionAttribute]
public static BeMenuItem GetMenuItem(BeControl header, IEnumerable`1<BeControl> innerItems);
    public static BeMenuItem GetMenu(IProperty`1<T> property, Func`3<T, T, BeControl> reloadHeaderPresentation, Lifetime lifetime, IEnumerable`1<T> values, Func`2<T, BeAbstractText> getItemsPresentation);
    public static BeMenuItem GetMenuFromEnum(IProperty`1<T> property, Func`3<T, T, BeControl> getHeader, Func`2<T, BeAbstractText> getPresentation, Lifetime lifetime, IEnumerable`1<T> except, Action`2<T, T> updateOnClick);
    public static BeMenuItem GetMenuFromEnum(IProperty`1<T> property, Func`2<T, BeAbstractText> getPresentation, Lifetime lifetime, IEnumerable`1<T> except, Action`2<T, T> updateOnClick);
    public static BeMenuItem GetMenuFromEnum(IProperty`1<T> property, BeControl headerPresentation, Lifetime lifetime, IIconHost iconHost, IEnumerable`1<T> except, Action`2<T, T> updateOnClick);
    [ExtensionAttribute]
public static BeControl GetMenu(BeControl mainItem, IEnumerable`1<BeControl> menuItems);
    public static BeMenuItem GetMenuFromEnum(IProperty`1<T> property, Func`3<T, T, BeControl> updateHeader, Lifetime lifetime, IIconHost iconHost, IEnumerable`1<T> except, Action`2<T, T> updateOnClick);
    public static BeControl GetPathChooser(Lifetime lifetime, IProperty`1<string> stringPathProperty, FileSystemPath initialValue, FileSystemPath valueToRevertTo, IIconHost iconHost, ICommonFileDialogs dialogs, BrowsePathOptions pathChooser, IEnumerable`1<string> predefinedValues, string prefix, ValueTuple`2[] simpleRules, Func`2<FileSystemPath, ValueTuple`2<string, ValidationStates>> additionalValidation, Func`1<FileSystemPath> resetHandler);
    public static BeControl GetFolderChooser(Lifetime lifetime, IProperty`1<FileSystemPath> setting, string toolTipText, FileSystemPath initialValue, IconHostBase iconHost, ICommonFileDialogs dialogs, FileSystemPath valueToRevertTo, bool canBeEmpty, string prefix, IEnumerable`1<string> predefinedValues, ValueTuple`2[] simpleRules, Func`2<FileSystemPath, ValueTuple`2<string, ValidationStates>> additionalValidation, Func`1<FileSystemPath> resetHandler);
    public static BeControl GetFileChooser(Lifetime lifetime, IProperty`1<FileSystemPath> setting, string toolTipText, FileSystemPath initialValue, IconHostBase iconHost, ICommonFileDialogs dialogs, FileSystemPath valueToRevertTo, bool canBeEmpty, string prefix, IEnumerable`1<string> predefinedValues, ValueTuple`2[] simpleRules, Func`2<FileSystemPath, ValueTuple`2<string, ValidationStates>> additionalValidation, Func`1<FileSystemPath> resetHandler);
    [NotReadyForTest]
public static BePopup GetPopup(BeControl dialogContent, string id, ITextControl textControl, ITextControlIdHost textControlIdHost, TextRange range, BeMargin popupMargin);
    [NotNullAttribute]
public static RichTextModel GetModelRichText(string text);
    public static BeRichText GetRichText(string text, Nullable`1<JetFontStyles> fontStyle, Nullable`1<JetRgbaColor> fgColor, IconModel iconId, bool wrap);
    public static BeRichText GetRichText(bool wrap);
    public static BeRichText GetRichText(IProperty`1<string> description, Lifetime lifetime, JetFontStyles fontStyle, Nullable`1<JetRgbaColor> fgColor, IconModel icon, bool wrap);
    public static BeRichText GetRichText(IProperty`1<string> description, Lifetime lifetime, TextStyle textStyle, IconModel icon, bool wrap);
    public static BeRichAttributedText GetRichAttributedText(string text, bool wrap);
    public static BeRichAttributedText GetRichAttributedText(bool wrap);
    public static BeLabel GetLabel(bool wrap);
    public static BeLabel BeLabel(string text, bool wrap);
    public static BeValidationLabel GetValidationLabel(IProperty`1<string> propertyToValidate, Lifetime lifetime, IconModel icon, bool wrapText);
    [CoveredInTest]
public static BeControl GetMultilineLabel(string description, string delimiter, Lifetime lifetime, IconModel iconId);
    public static BeHeader GetHeader(string description, IconModel iconId, HeaderStyle headerStyle);
    [ExtensionAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null=>null;notnull=>notnull")]
public static BeIcon GetBeIcon(IconModel icon);
    [ExtensionAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("icon:null=>null;icon:notnull=>notnull")]
public static IconModel GetIcon(IconId icon, IIconHost iconHost);
    [ExtensionAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("icon:null=>null;icon:notnull=>notnull")]
public static BeIcon GetBeIcon(IconId icon, IIconHost iconHost);
    [CoveredInTest]
public static BeRadioButton GetRadioButton(string description, bool initialValue, bool enabled, string controlId, bool wrapText);
    public static BeRadioButton GetRadioButton(BeAbstractText content, bool initialValue, bool enabled, string controlId);
    public static BeCheckbox GetCheckBox(string description, string controlId, Lifetime lifetime, bool enabled, bool initialValue, bool wrapText);
    public static BeCheckbox GetCheckBox(BeAbstractText control, bool initialValue, bool enabled, string controlId);
    public static BeControl GetRadioGroup(Lifetime lifetime, RichText description, BeRadioButton[] radioValues, string id, bool horizontal);
    public static BeControl GetRadioGroup(Lifetime lifetime, T selectedValue, string description, Func`3<T, RadioButtonProperties, string> present, string id, IList`1<T> values);
    internal static BeGrid GetRadioGroup(Lifetime lifetime, T description, Action`2<T, BeControl[]> processValues, ValueTuple`2[] radioTuples, string id);
    private static BeControl[] GetRealRadioGridElements(BeGrid radioGroupAutomation, Lifetime lifetime, ValueTuple`2[] radioTuples, BeMarginType indent);
    public static BeToggleButton GetToggleButton(BeAbstractText beControl, Lifetime lifetime, IProperty`1<string> tooltip, string id, Action`1<bool> onClick, BeButtonStyle style);
    public static BeToggleButton GetToggleButton(BeAbstractText beControl, Lifetime lifetime, string tooltip, string id, Action`1<bool> onClick, BeButtonStyle style);
    public static BeToggleButton GetToggleButton(IconModel icon, Lifetime lifetime, string tooltip, string id, Action`1<bool> onClick);
    [NotNullAttribute]
[CoveredInTest]
public static BeToolbar GetToolbar(BeControl content, BeDock dock, string toolbarID, ToolbarStyle toolbarStyle);
    [NotNullAttribute]
public static BeToolWindow GetToolWindow(BeLabel title, string id, bool isSingleInstance, GridOrientation orientation, BePosition position, bool canCloseContents);
    [NotNullAttribute]
public static BeToolWindow GetToolWindow(string title, string id, bool isSingleInstance, GridOrientation orientation, BePosition position, bool canCloseContents);
    [NotNullAttribute]
public static BeToolWindow GetToolWindow(BeLabel title, string toolWindowId, BeControl content, Lifetime lifetime, bool isSingleInstance, GridOrientation orientation, BePosition position, IViewableProperty`1<BeToolWindowState> state, string tabName, string tabId);
    public static BeTreeGrid GetBeTree(T root, Lifetime lifetime, PresentTreeLine`1<T> presentLine, Func`2<T, IEnumerable`1<T>> getChildren, TreeConfiguration configuration, string id);
    [CompilerGeneratedAttribute]
internal static void <InitWithDependency>g__BindProperties|38_0(BeLocalCookie beLocalCookie, IViewableProperty`1<T> donorProperty, IViewableProperty`1<T> recipientProperty, <>c__DisplayClass38_0& );
}
[ExtensionAttribute]
public static class JetBrains.IDE.UI.Extensions.BeControlSettings : object {
    [ExtensionAttribute]
[CoveredInTest]
public static BeControl WithSettings(BeControl control, Lifetime lifetime, Action`1<TControl> applySetting);
}
[ExtensionAttribute]
public static class JetBrains.IDE.UI.Extensions.BeCreationExtensions : object {
    [ExtensionAttribute]
public static BeButton AddAction(BeButton button, Lifetime lifetime, Action onClick);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static BeControl GetPathSelector(IProperty`1<string> property, Lifetime lifetime, ICommonFileDialogs dialogs, IList`1<string> initialValues, string buttonText, IconModel icon, BrowsePathOptions type, ChooseFileType[] fileTypes);
    [ObsoleteAttribute]
private static BeGrid GetPathSelector(BeControl inputBox, IProperty`1<string> text, Lifetime lifetime, string buttonText, ICommonFileDialogs dialogs, IconModel icon, BrowsePathOptions options, ChooseFileType[] fileTypes);
    private static BeGrid GetPathSelector(BeControl inputBox, Lifetime lifetime, string buttonText, IconModel icon, BeButton button);
    [ExtensionAttribute]
[CoveredInTest]
public static BeTextBox GetBeTextBox(IProperty`1<string> property, Lifetime lifetime, bool isReadOnly, ValidationStyle style, BeInvalidValuePropagation propagateValueWhenInvalid, UpdateSourceTrigger updateSourceTrigger);
    [ExtensionAttribute]
[ReadyForTest]
public static BeTextBox WithReadOnly(BeTextBox textBox, bool readonlyValue);
    [ExtensionAttribute]
[CoveredInTest]
public static BeTextBox WithMonospaceFont(BeTextBox textBox);
    [ExtensionAttribute]
public static BeTextBox WithPlaceholder(BeTextBox textBox, string placeholder);
    [ExtensionAttribute]
public static BeTextBox WithSelection(BeTextBox textBox, int selectionLength);
    [ExtensionAttribute]
public static BeTextBox SetSelection(BeTextBox textBox, int selectionLength, bool focus);
    [ObsoleteAttribute("Please use the other overload")]
public static BeSpinner GetBeSpinner(IProperty`1<int> property, Lifetime lifetime, int min, int max);
    [ExtensionAttribute]
[CoveredInTest]
public static BeSpinner GetBeSpinner(IProperty`1<int> property, Lifetime lifetime, int min, int max, int step);
    public static BeSpinner GetBeSpinner(Lifetime lifetime, int min, int max, int step, string controlId);
    [ExtensionAttribute]
[CoveredInTest]
public static BeLabel GetBeLabelWithShortCut(string title, IconModel iconId, Lifetime lifetime, bool capitalize, bool wrapText, bool boldText);
    [ExtensionAttribute]
[NotNullAttribute]
public static BeLabel GetBeLabel(string description, IconModel iconId, bool wrapText);
    [ExtensionAttribute]
public static BeLabel GetBeLabelWithShortcut(IProperty`1<string> description, Lifetime lifetime, IconModel icon, bool wrapText);
    [ExtensionAttribute]
public static BeRichText GetBeRichText(IProperty`1<RichTextModel> modelRichText, Lifetime lifetime, bool wrap);
    [ExtensionAttribute]
public static BeLabel GetBeLabel(IProperty`1<string> description, Lifetime lifetime, IconModel icon, bool wrapText);
    [ExtensionAttribute]
public static BeControl GetBeMultilineLabel(IProperty`1<string> description, Lifetime lifetime, string delimiter, IconModel icon);
    [ExtensionAttribute]
public static BeRichText GetBeRichText(IProperty`1<RichText> description, Lifetime lifetime, bool wrap);
    [ExtensionAttribute]
public static void SetText(BeAbstractText textControl, RichText text);
    [ExtensionAttribute]
public static void SetText(BeAbstractText textControl, string text);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetText(BeControl model);
    [ExtensionAttribute]
[NotNullAttribute]
public static Property`1<string> GetTextLive(BeControl model, Lifetime lifetime);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string TryGetText(BeControl model);
    [ExtensionAttribute]
public static void SetText(BeAbstractText textControl, string text, bool withShortcut);
    [ExtensionAttribute]
[NotNullAttribute]
public static BeRichText GetBeRichText(RichTextModel modelRichText, IconModel iconId, bool wrap, string tooltip);
    [ExtensionAttribute]
public static BeRichText GetBeRichText(RichText modelRichText, IconModel iconId, bool wrap);
    [ExtensionAttribute]
[NotNullAttribute]
public static BeRichText GetBeRichText(RichStringModel modelRichString, IconModel iconId, bool wrap);
    [ExtensionAttribute]
public static BeRichText GetBeRichTextWithShortCut(RichText modelRichText, IconModel iconId, bool wrap);
    [ExtensionAttribute]
public static RichTextModel ToModelRichText(RichStringModel modelRichString);
    [ExtensionAttribute]
[NotNullAttribute]
public static RichTextModel ToModelRichText(string text);
    [ExtensionAttribute]
public static BeRichAttributedText Append(BeRichAttributedText richText, ITextAttributesKeyProvider keyProvider, string text, AttributeId id);
    [ExtensionAttribute]
public static BeRichAttributedText AddLine(BeRichAttributedText richText, ITextAttributesKeyProvider keyProvider, string text, AttributeId id);
    [ExtensionAttribute]
public static BeRichAttributedText AddLine(BeRichAttributedText richText, string text, TextAttributesKeyModel keyModel);
    [ExtensionAttribute]
public static BeRichAttributedText Add(BeRichAttributedText richText, ITextAttributesKeyProvider keyProvider, string text, AttributeId id);
    [ExtensionAttribute]
public static BeRichAttributedText Add(BeRichAttributedText richText, string text, TextAttributesKeyModel keyModel);
    [ExtensionAttribute]
public static BeRichAttributedText Add(BeRichAttributedText richText, RichAttributedTextModel source);
    [ExtensionAttribute]
public static BeRichAttributedText AddLine(BeRichAttributedText richText, RichAttributedTextModel source);
    [ExtensionAttribute]
public static BeRichAttributedText AddLines(BeRichAttributedText richText, ITextAttributesKeyProvider keyProvider, RichAttributedTextModel source);
    private static int GetShortcut(String& localizedText);
    [ExtensionAttribute]
public static BeLabel WithCustomTextSize(BeLabel text, BeFontSize size);
    [ExtensionAttribute]
public static BeRichText WithCustomTextSize(BeRichText text, BeFontSize size);
    [ExtensionAttribute]
public static BeLabel WithCustomTextStyle(BeLabel text, BeFontStyle style);
    [ExtensionAttribute]
public static BeRichText WithCustomTextStyle(BeRichText text, BeFontStyle style);
    [ExtensionAttribute]
public static BeHeader WithCustomHeaderSize(BeHeader text, BeFontSize size);
}
[ExtensionAttribute]
public static class JetBrains.IDE.UI.Extensions.BeDataGridExtensions : object {
    [ExtensionAttribute]
public static BeDataGridColumnDefinition GetBeDataGridColumnDefinition(string columnName, bool editable, bool rtl);
    [ExtensionAttribute]
public static BeDataGridColumnDefinition GetBeDataGridColumnDefinition(string columnName, BeDataGridUnitSize unitSize, bool editable, bool rtl);
}
public enum JetBrains.IDE.UI.Extensions.BeDependancy : Enum {
    public int value__;
    public static BeDependancy WRAPPER_TO_CONTENT;
    public static BeDependancy CONTENT_TO_WRAPPER;
    public static BeDependancy BOTH;
    public static BeDependancy NONE;
}
[ExtensionAttribute]
public static class JetBrains.IDE.UI.Extensions.BeGetterExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static T GetBeControlById(BeControl parent, string name);
    [ExtensionAttribute]
public static T TryGetBeControlById(BeControl parent, string name);
    [IteratorStateMachineAttribute("JetBrains.IDE.UI.Extensions.BeGetterExtensions/<Descendants>d__2")]
[ExtensionAttribute]
public static IEnumerable`1<BeControl> Descendants(BeControl this);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<T> Descendants(BeControl parent);
    [ExtensionAttribute]
public static void DescendantsListEvents(BeControl this, Lifetime lifetime, IListEvents`1<BeControl> listEvents);
    [IteratorStateMachineAttribute("JetBrains.IDE.UI.Extensions.BeGetterExtensions/<Subtree>d__5")]
[ExtensionAttribute]
public static IEnumerable`1<BeTreeGridLine> Subtree(BeTreeGridLine root);
    [IteratorStateMachineAttribute("JetBrains.IDE.UI.Extensions.BeGetterExtensions/<AllLines>d__6")]
[ExtensionAttribute]
public static IEnumerable`1<BeTreeGridLine> AllLines(BeTreeGrid tree);
    [ExtensionAttribute]
public static BeTreeGridLine TryGetElementByIndex(BeTreeGrid tree, int index);
}
public enum JetBrains.IDE.UI.Extensions.BeInvalidValuePropagation : Enum {
    public int value__;
    public static BeInvalidValuePropagation SAVE_ANY;
    public static BeInvalidValuePropagation LAST_VALID;
    public static BeInvalidValuePropagation INITIAL;
}
[ExtensionAttribute]
public static class JetBrains.IDE.UI.Extensions.BeLayouterExtensions : object {
    [ExtensionAttribute]
[CoveredInTest]
public static BeGrid GetGrid(IEnumerable`1<BeControl> initial, GridOrientation orientation);
    [ExtensionAttribute]
[CoveredInTest]
public static BeGrid GetGrid(IEnumerable`1<ValueTuple`2<BeControl, BeSizingType>> initial, GridOrientation orientation);
    [ExtensionAttribute]
public static BeGrid InAutoGrid(BeControl control, GridOrientation orientation);
    [ExtensionAttribute]
[CoveredInTest]
public static BeGrid InGrid(BeControl control, GridOrientation orientation, BeSizingType size, BeMarginType intercellSpacing);
    [ExtensionAttribute]
[NotNullAttribute]
[CoveredInTest]
public static BeGrid AddElements(BeGrid grid, ValueTuple`2[] controls);
    [ExtensionAttribute]
[NotNullAttribute]
[CoveredInTest]
public static BeGrid AddElements(BeGrid grid, ValueTuple`3[] controls);
    [ExtensionAttribute]
[CoveredInTest]
public static BeGrid AddElements(BeGrid grid, BeControl[] controls);
    private static void AddElements(BeGrid grid, IEnumerable`1<BeGridElement> beGridElements);
    [ExtensionAttribute]
[CoveredInTest]
public static BeGrid AddElement(BeGrid grid, BeControl control, BeSizingType size, BeAlignment alignment);
    [ExtensionAttribute]
public static BeGridElement GetBeGridElement(BeControl control, BeSizingType size, int multiplier, BeAlignment alignment);
    [ExtensionAttribute]
public static BeGridElement GetBeGridElement(BeControl control, BeUnitSize size, BeAlignment alignment);
    [ExtensionAttribute]
public static BeGrid SetElement(BeGrid grid, BeControl control, BeSizingType size);
    [ExtensionAttribute]
private static BeMutableGrid Add(BeMutableGrid grid, IEnumerable`1<BeGridElement> beGridElements);
    [ExtensionAttribute]
public static BeMutableGrid Add(BeMutableGrid grid, ValueTuple`2[] elements);
    [ExtensionAttribute]
public static BeMutableGrid Add(BeMutableGrid grid, BeControl control, BeSizingType size);
    [ExtensionAttribute]
public static BeMutableGrid Insert(BeMutableGrid grid, ValueTuple`3[] elements);
    [ExtensionAttribute]
public static BeMutableGrid Insert(BeMutableGrid grid, BeControl control, BeSizingType size, int index);
    [ExtensionAttribute]
public static BeMutableGrid Remove(BeMutableGrid grid, Int32[] indices);
    [ExtensionAttribute]
private static BeMutableSpanGrid Add(BeMutableSpanGrid grid, IEnumerable`1<BeSpanRowElement> beGridElements);
    [ExtensionAttribute]
private static BeMutableSpanGrid Insert(BeMutableSpanGrid grid, IEnumerable`1<ValueTuple`2<BeSpanRowElement, int>> beRowElements, int index);
    [ExtensionAttribute]
private static BeMutableSpanGrid Insert(BeMutableSpanGrid grid, BeSpanRowElement element, int i);
    [ExtensionAttribute]
private static BeMutableSpanGrid Insert(BeMutableSpanGrid grid, IEnumerable`1<BeSpanRowElement> beRowElements, int index);
    [ExtensionAttribute]
public static BeMutableSpanGrid Remove(BeMutableSpanGrid grid, Int32[] indices);
    [ExtensionAttribute]
public static BeMutableSpanGrid Remove(BeMutableSpanGrid grid, int index);
    [ExtensionAttribute]
public static BeMutableSpanGrid AddToNewRow(BeMutableSpanGrid control, BeSizingType rowSize, bool expandGrid, ValueTuple`3[] elements);
    [ExtensionAttribute]
public static BeMutableSpanGrid AddToNewRow(BeMutableSpanGrid control, BeSizingType rowSize, bool expandGrid, ValueTuple`2[] elements);
    [ExtensionAttribute]
public static BeMutableSpanGrid AddAutoToNewRow(BeMutableSpanGrid control, BeSizingType rowSize, bool expandGrid, BeControl[] elements);
    [ExtensionAttribute]
public static BeMutableSpanGrid AddToNewRow(BeMutableSpanGrid control, BeSizingType rowSize, bool expandGrid, ValueTuple`2[] elements);
    [ExtensionAttribute]
public static BeMutableSpanGrid AddToNewRow(BeMutableSpanGrid control, BeSizingType rowSize, bool expandGrid, BeControl[] elements);
    [ExtensionAttribute]
public static BeMutableSpanGrid InsertRow(BeMutableSpanGrid spanGrid, int rowIndex, BeSizingType rowSize, bool expandGrid, ValueTuple`3[] elements);
    [ExtensionAttribute]
public static BeMutableSpanGrid InsertRow(BeMutableSpanGrid spanGrid, BeControl columnElement, BeSizingType elementSize, int columnSpan, BeSizingType rowSize, bool expandGrid, int rowIndex);
    [ExtensionAttribute]
public static BeMutableSpanGrid ReplaceRow(BeMutableSpanGrid spanGrid, BeControl columnElement, int rowIndex, BeSizingType elementSize, int columnSpan, BeSizingType rowSize, bool expandGrid);
    [ExtensionAttribute]
public static BeMutableSpanGrid AddToNewRow(BeMutableSpanGrid spanGrid, BeControl columnElement, BeSizingType elementSize, int columnSpan, BeSizingType rowSize, bool expandGrid);
    private static IEnumerable`1<BeSpanRowElement> PrepareRows(BeControl newElement, BeSizingType elementSize, int columnSpan, bool expandGrid, BeMarginType intercellSpacing, BeSpanRowElement rowElement, BeSizingType rowSize);
    [ExtensionAttribute]
public static BeMutableSpanGrid AddToLastRow(BeMutableSpanGrid spanGrid, BeControl columnElement, BeSizingType elementSize, int columnSpan, bool expandHorizontalGrid);
    [ExtensionAttribute]
[CoveredInTest]
public static BeSpanGrid InSpan(BeControl control, string columns, BeSizingType rowSize, int columnSpan);
    [ExtensionAttribute]
[CoveredInTest]
public static BeSpanGrid AddColumnElementsToNewRow(BeSpanGrid control, BeSizingType rowSize, bool expandGrid, ValueTuple`3[] elements);
    [ExtensionAttribute]
public static BeSpanGrid AddColumnElementsToNewRow(BeSpanGrid control, BeSizingType rowSize, bool expandGrid, ValueTuple`2[] elements);
    [ExtensionAttribute]
public static BeSpanGrid AddAutoColumnElementsToNewRow(BeSpanGrid control, BeSizingType rowSize, bool expandGrid, BeControl[] elements);
    [ExtensionAttribute]
public static BeSpanGrid AddColumnElementsToNewRow(BeSpanGrid control, BeSizingType rowSize, bool expandGrid, ValueTuple`2[] elements);
    [ExtensionAttribute]
public static BeSpanGrid AddColumnElementsToNewRow(BeSpanGrid control, BeSizingType rowSize, bool expandGrid, BeControl[] elements);
    [ExtensionAttribute]
[CoveredInTest]
public static BeSpanGrid AddColumnElementToNewRow(BeSpanGrid spanGrid, BeControl columnElement, BeSizingType elementSize, int columnSpan, BeSizingType rowSize, bool expandGrid, BeMargin margin);
    private static void AddElementToRow(BeSpanGrid spanGrid, BeControl newElement, BeSizingType elementSize, int columnSpan, bool expandGrid, BeSpanRowElement rowElement);
    [ExtensionAttribute]
[CoveredInTest]
public static BeSpanGrid AddColumnElementToLastRow(BeSpanGrid control, BeControl columnElement, BeSizingType elementSize, int columnSpan, bool expandGrid, BeMargin margin);
    [ExtensionAttribute]
private static IEnumerable`1<BeGridElement> UnwrapWrappedGrid(BeMarginModifier wrap, BeGrid grid);
    [ExtensionAttribute]
[CoveredInTest]
public static BeSpanGrid WithColumnsFeelingLucky(BeGrid grid, string columnSizes, BeMarginType intercellSpacing);
    [CompilerGeneratedAttribute]
internal static int <PrepareRows>g__GetAvailableSpan|33_0(IEnumerable`1<BeGridElement> beGridElements, <>c__DisplayClass33_0& );
    [CompilerGeneratedAttribute]
internal static void <PrepareRows>g__AddGridElementsToSpan|33_1(List`1<BeGridElement> gridElements, BeMarginType gridIntercellSpacing, <>c__DisplayClass33_0& );
    [CompilerGeneratedAttribute]
internal static int <AddElementToRow>g__GetAvailableSpan|42_0(IEnumerable`1<BeGridElement> beGridElements, <>c__DisplayClass42_0& );
    [CompilerGeneratedAttribute]
internal static void <AddElementToRow>g__AddGridElementsToSpan|42_1(List`1<BeGridElement> gridElements, BeMarginType gridIntercellSpacing, <>c__DisplayClass42_0& );
}
public enum JetBrains.IDE.UI.Extensions.BeListAction : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("_Edit")]
[IconAttribute("JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/Edit")]
[CommonBehaviorAttribute("4")]
public static BeListAction EDIT;
    [LocalizedDescriptionAttribute("_Remove")]
[IconAttribute("JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/Remove")]
[CommonBehaviorAttribute("1")]
public static BeListAction REMOVE;
    [LocalizedDescriptionAttribute("Move _up")]
[IconAttribute("JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/Up")]
[CommonBehaviorAttribute("2")]
public static BeListAction MOVE_UP;
    [LocalizedDescriptionAttribute("Move _down")]
[IconAttribute("JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/Down")]
[CommonBehaviorAttribute("3")]
public static BeListAction MOVE_DOWN;
}
public enum JetBrains.IDE.UI.Extensions.BeListAddAction : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("_Add")]
[IconAttribute("JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/Create")]
[CommonBehaviorAttribute("0")]
public static BeListAddAction ADD;
    [LocalizedDescriptionAttribute("_Add")]
[IconAttribute("JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/Create")]
[CommonBehaviorAttribute("0")]
public static BeListAddAction ADD_AFTER_SELECTED;
    [LocalizedDescriptionAttribute("_Copy")]
[IconAttribute("JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/Copy16x16")]
public static BeListAddAction CLONE;
}
public class JetBrains.IDE.UI.Extensions.BeLocalCookie : object {
    [CompilerGeneratedAttribute]
private bool <CanExecute>k__BackingField;
    private bool CanExecute { get; private set; }
    [CompilerGeneratedAttribute]
private bool get_CanExecute();
    [CompilerGeneratedAttribute]
private void set_CanExecute(bool value);
    private bool Start();
    private void End();
    public void Execute(Action action);
    public T Execute(Func`1<T> action, T defaultValue);
}
public static class JetBrains.IDE.UI.Extensions.BeMenuExtensions : object {
}
public enum JetBrains.IDE.UI.Extensions.BeSearchActions : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("_PreviousSearchResult")]
[IconAttribute("JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/Up")]
public static BeSearchActions PREVIOUS;
    [LocalizedDescriptionAttribute("_NextSearchResult")]
[IconAttribute("JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/Down")]
public static BeSearchActions NEXT;
}
[ExtensionAttribute]
public static class JetBrains.IDE.UI.Extensions.BeSortingEx : object {
    private static ILogger ourLogger;
    private static BeSortingEx();
    [ExtensionAttribute]
public static Int32[] BuildViewToModelMap(IEnumerable`1<T> collection, SortKey[] keys, Comparer`1[] comparers, Comparer`1<T> preComparer);
}
[ExtensionAttribute]
public static class JetBrains.IDE.UI.Extensions.BeStyleExtensions : object {
    [ExtensionAttribute]
public static BeControl WithLineBorder(BeControl control, BeShowBorders border, Lifetime lifetime);
    [ExtensionAttribute]
public static BeControl WithoutBorder(BeControl control, Lifetime lifetime);
    [ExtensionAttribute]
public static BeControl WithTitledBorder(BeControl control, string title, int indent, BeMargin insets, Lifetime lifetime);
    [ExtensionAttribute]
public static BeControl WithSize(BeControl content, BeControlSize size, BeBoundsType type, Lifetime lifetime);
    [ExtensionAttribute]
public static BeControl WithMinSize(BeControl content, BeControlSize size, Lifetime lifetime);
    [ExtensionAttribute]
[ReadyForTest]
public static BeControl WithFixedSize(BeControl content, BeControlSize size, Lifetime lifetime);
    [ExtensionAttribute]
public static BeControl WithMaxSize(BeControl content, BeControlSize size, Lifetime lifetime);
    [ExtensionAttribute]
[CoveredInTest]
public static BeControl WithMargin(BeControl control, BeMargin margin, Lifetime lifetime);
    [ExtensionAttribute]
public static BeControl WithColor(BeControl control, JetRgbaColor color, Lifetime lifetime);
    [ExtensionAttribute]
public static BeControl WithColor(BeControl control, AbstractColor color, Lifetime lifetime);
    [ExtensionAttribute]
public static BeControl WithCustomTooltip(BeControl control, string title, string text, BeLink link, Lifetime lifetime);
    [ExtensionAttribute]
public static BeControl WithOpacity(BeControl control, float opacity, Lifetime lifetime);
    [ExtensionAttribute]
public static BeStyleControl GetOrCreateStyle(BeControl control, Lifetime lifetime, bool forceCreate, BeDependancy dependency);
}
[ExtensionAttribute]
public static class JetBrains.IDE.UI.Extensions.BeToggleControlsExtensions : object {
    [ExtensionAttribute]
[CoveredInTest]
public static BeControl GetBeRadioGroupFromEnum(IProperty`1<T> property, Lifetime lifetime, string description, Func`3<T, RadioButtonProperties, string> present, Func`2<T, bool> visible, bool reverse);
    [ExtensionAttribute]
[CoveredInTest]
public static BeControl GetBeRadioGroupFromEnumWithDescriptionAttribute(IProperty`1<T> property, Lifetime lifetime, string description, Action`2<T, RadioButtonProperties> process, Func`2<T, bool> visible, bool reverse);
    [ExtensionAttribute]
[CoveredInTest]
public static BeControl GetBeRadioGroup(IProperty`1<T> property, Lifetime lifetime, string description, IList`1<T> values, Func`2<T, string> present);
    [ExtensionAttribute]
public static BeControl GetBeRadioGroup(IProperty`1<TTarget> property, Lifetime lifetime, string description, IList`1<T> values, Func`2<T, TTarget> convert, Func`2<T, string> present, bool horizontal);
    [ExtensionAttribute]
public static BeControl GetBeRadioGroup(IProperty`1<T> property, Lifetime lifetime, string description, IList`1<T> values, Func`3<T, RadioButtonProperties, string> present, bool horizontal);
    [ExtensionAttribute]
public static BeControl GetBeRadioGroup(IProperty`1<TTarget> storageProperty, Lifetime lifetime, BeControl description, IList`1<T> values, Func`2<T, TTarget> convert, Func`2<T, BeAbstractText> present, Func`2<T, BeControl> additionalOptionContent);
    private static BeAbstractText GetRadioButtonContent(Func`2<T, BeAbstractText> present, T arg);
    [ExtensionAttribute]
public static BeControl GetBeRadioGroup(IProperty`1<T> property, Lifetime lifetime, BeControl description, IList`1<T> values, Func`3<T, RadioButtonProperties, BeAbstractText> present, Func`2<T, BeControl> additionalOptionContent);
    private static ValueTuple`2[] GetRadioValues(IProperty`1<T> property, Lifetime lifetime, IList`1<T> values, Func`3<T, RadioButtonProperties, BeAbstractText> present, Func`2<T, BeControl> additionalOptionContent, Property`1<int> selectedIndex);
    [ExtensionAttribute]
[CoveredInTest]
public static BeControl GetBePropertyToRadio(IProperty`1<bool> property, Lifetime lifetime, RichText description, string selected, string notSelected, bool enabled);
    [ExtensionAttribute]
public static BeRadioButton GetBeRadioButton(IProperty`1<bool> property, Lifetime lifetime, string description, bool enabled, bool wrapText);
    [ExtensionAttribute]
public static BeRadioButton GetBeRadioButton(IProperty`1<bool> property, Lifetime lifetime, BeAbstractText content, bool enabled, bool wrapText);
    [ExtensionAttribute]
[CoveredInTest]
public static BeCheckbox GetBeCheckBox(IProperty`1<bool> property, Lifetime lifetime, string description, bool enabled, bool wrapText);
    [ExtensionAttribute]
[CoveredInTest]
public static BeCheckbox GetBeCheckBox(IProperty`1<bool> property, Lifetime lifetime, string description, bool enabled, bool wrapText, bool boldText);
    [ExtensionAttribute]
public static BeCheckbox GetBeCheckBox(IProperty`1<bool> property, Lifetime lifetime, BeAbstractText text, bool enabled);
    [ExtensionAttribute]
public static BeCheckbox GetBeCheckBox(IProperty`1<Nullable`1<bool>> property, Lifetime lifetime, string description, bool enabled, bool wrapText);
    [ExtensionAttribute]
public static BeToggleButton GetBeIconToggleButton(IProperty`1<bool> isChecked, Lifetime lifetime, IProperty`1<IconModel> icon, IProperty`1<string> tooltip);
    [ExtensionAttribute]
public static BeToggleButton GetBeIconToggleButton(IProperty`1<bool> isChecked, Lifetime lifetime, IProperty`1<IconModel> icon, string tooltip);
    [ExtensionAttribute]
[CoveredInTest]
public static BeToggleButton GetBeIconToggleButton(IProperty`1<bool> isChecked, Lifetime lifetime, IconModel uncheckedIcon, IconModel checkedIcon, IProperty`1<string> tooltip);
    [ExtensionAttribute]
public static BeToggleButton GetBeToggleButton(IProperty`1<bool> isChecked, BeAbstractText beControl, Lifetime lifetime, IProperty`1<string> tooltip, BeButtonStyle style);
    [ExtensionAttribute]
[CoveredInTest]
public static BeToggleButton GetBeToggleButton(IProperty`1<bool> isChecked, IconModel icon, Lifetime lifetime, IProperty`1<string> tooltip);
    [ExtensionAttribute]
public static BeToggleButton GetBeIconToggleButton(IProperty`1<bool> isChecked, IconModel icon, Lifetime lifetime, string tooltip);
}
public enum JetBrains.IDE.UI.Extensions.BeToolbarAction : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("_Expand All")]
[IconAttribute("JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/ExpandAll")]
[CommonBehaviorAttribute("6")]
public static BeToolbarAction EXPAND_ALL;
    [LocalizedDescriptionAttribute("_Collapse All")]
[IconAttribute("JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/CollapseAll")]
[CommonBehaviorAttribute("7")]
public static BeToolbarAction COLLAPSE_ALL;
    [LocalizedDescriptionAttribute("Select _Next")]
[IconAttribute("JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/Down")]
[CommonBehaviorAttribute("19")]
public static BeToolbarAction SELECT_NEXT;
    [LocalizedDescriptionAttribute("Select _Previous")]
[IconAttribute("JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/Up")]
[CommonBehaviorAttribute("20")]
public static BeToolbarAction SELECT_PREVIOUS;
    [LocalizedDescriptionAttribute("_Close")]
[IconAttribute("JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/Close")]
[CommonBehaviorAttribute("24")]
public static BeToolbarAction CLOSE;
}
[ActionGroupAttribute("BeToolBar.ActionBar", "1", "16")]
public class JetBrains.IDE.UI.Extensions.BeToolBarActionGroup : object {
}
[ExtensionAttribute]
public static class JetBrains.IDE.UI.Extensions.BeToolWindowExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static BeToolWindow AddToolWindowTab(BeToolWindow toolWindow, BeControl content, string name, string sessionId, Lifetime lifetime);
}
[ExtensionAttribute]
public static class JetBrains.IDE.UI.Extensions.BeTreeGridExtensions : object {
    private static int RECURSION_DEPTH_LIMIT;
    private static ILogger ourLogger;
    private static BeTreeGridExtensions();
    [ExtensionAttribute]
[CoveredInTest]
public static BeTreeGrid GetBeList(IEnumerable`1<T> items, Lifetime lifetime, PresentListLine`1<T> presentLine, TreeConfiguration configuration, string id);
    [ExtensionAttribute]
internal static IListEvents`1<T> ToListEvents(IEnumerable`1<T> items, string listEventsId);
    [ExtensionAttribute]
[NotNullAttribute]
public static BeTreeGrid GetBeList(IListEvents`1<T> items, Lifetime lifetime, PresentListLine`1<T> presentLine, TreeConfiguration configuration, string id);
    [ExtensionAttribute]
public static BeTreeGrid GetBeTree(IListEvents`1<T> items, Lifetime lifetime, PresentTreeLine`1<T> presentLine, Func`2<T, IListEvents`1<T>> getChildren, BeTreeConfiguration configuration, string id);
    [ExtensionAttribute]
[NotNullAttribute]
[CoveredInTest]
public static BeTreeGrid GetBeTree(IListEvents`1<T> items, Lifetime lifetime, PresentTreeLine`1<T> presentLine, Func`2<T, IListEvents`1<T>> getChildren, TreeConfiguration configuration, string id);
    [ExtensionAttribute]
public static BeTreeGrid GetBeTree(IEnumerable`1<T> items, Lifetime lifetime, PresentTreeLine`1<T> presentLine, Func`2<T, IListEvents`1<T>> getChildren, TreeConfiguration configuration, string id);
    [ExtensionAttribute]
public static BeTreeGrid GetBeTree(IEnumerable`1<T> items, Lifetime lifetime, PresentTreeLine`1<T> presentLine, Func`2<T, IEnumerable`1<T>> getChildren, TreeConfiguration configuration, string id);
    [ExtensionAttribute]
public static BeTreeGrid GetBeTree(IEnumerable`1<T> items, Lifetime lifetime, PresentTreeLine`1<T> presentLine, Func`2<T, IEnumerable`1<T>> getChildren, BeTreeConfiguration configuration, string id);
    private static BeTreeGrid GetBeTree(Lifetime lifetime, PresentTreeLineWithChildren`2<T, T> presentLine, TreeConfiguration configuration, string id);
    private static BeTreeGrid GetBeTree(Lifetime lifetime, PresentTreeLineWithChildren`2<T, T> presentLine, BeTreeConfiguration configuration, string id);
    [ExtensionAttribute]
public static BeTreeGrid GetBeTree(IProperty`1<TRootContext> rootContext, Lifetime lifetime, Func`3<Lifetime, TRootContext, T> getRootNode, PresentTreeLineWithChildren`2<TRootContext, T> presentLine, BeTreeConfiguration configuration, string id);
    private static BeTreeGridLine BuildTreeNode(Lifetime lifetime, TRootContext rootContext, T model, PresentTreeLineWithChildren`2<TRootContext, T> presentLine, Func`2<List`1<BeControl>, BeTreeGridLine> nodeBuilder, bool isFakeRoot, Boxed`1<int> recursionDepth);
    [ExtensionAttribute]
public static void BindValidation(BeTreeGrid treeGrid, Lifetime lifetime, IProperty`1<string> errorProperty, ValidationStates state);
    private static void SetValidationResult(BeTreeGrid treeGrid, ValidationStates state, string error);
    [ExtensionAttribute]
public static void SetWarning(BeTreeGrid treeGrid, string error);
    [ExtensionAttribute]
public static void SetError(BeTreeGrid treeGrid, string error);
    [ExtensionAttribute]
public static void SetValid(BeTreeGrid treeGrid);
    [ExtensionAttribute]
public static BeTreeGrid RegisterDataRulesProvider(BeTreeGrid grid, Lifetime lifetime, BeControlsDataRuleProvider provider, BeTreeGridDataRuleProvider`1<T> dataRuleProvider);
    [ExtensionAttribute]
public static TreeConfigurationWithListColumnPresentations`1<T> WithColumn(TreeConfigurationWithListColumnPresentations`1<T> configuration, Lifetime lifetime, string columnName, ListColumnPresentation`1<T> getListColumnPresentation, BeSizingType columnSize, int multiplier);
    [ExtensionAttribute]
public static TreeConfigurationWithTreeColumnPresentations`1<T> WithColumn(TreeConfigurationWithTreeColumnPresentations`1<T> configuration, Lifetime lifetime, string columnName, TreeColumnPresentation`1<T> getTreeColumnPresentation, BeSizingType columnSize, int multiplier);
    [ExtensionAttribute]
public static BeTreeGrid GetBeList(TreeConfigurationWithListColumnPresentations`1<T> configuration, Lifetime lifetime, IEnumerable`1<T> initialList, string id);
    [ExtensionAttribute]
public static BeTreeGrid GetBeTreeGrid(TreeConfigurationWithTreeColumnPresentations`1<T> configuration, Lifetime lifetime, IEnumerable`1<T> initialList, Func`2<T, IListEvents`1<T>> getChildren, string id);
    [ExtensionAttribute]
public static BeTreeGrid WithIndefiniteProgress(BeTreeGrid tree, Lifetime lifetime, IProperty`1<bool> inProgress);
    [ExtensionAttribute]
public static BeTreeGrid GetSingleSelectionBeList(IProperty`1<T> resultProperty, IEnumerable`1<T> initialList, Lifetime lifetime, PresentListLine`1<T> presentLine, String[] columnsAndSizes, bool hasHeader, BeBackendContextMenu backendContextMenu);
    [ExtensionAttribute]
[ReadyForTest]
[NotNullAttribute]
public static BeTreeGrid GetSingleSelectionBeList(IProperty`1<T> resultProperty, IEnumerable`1<T> initialList, Lifetime lifetime, PresentListLine`1<T> presentLine, TreeConfiguration treeConfiguration);
    [ExtensionAttribute]
[CoveredInTest]
[NotNullAttribute]
public static BeTreeGrid GetSingleSelectionBeList(IProperty`1<T> resultProperty, IListEvents`1<T> initialList, Lifetime lifetime, PresentListLine`1<T> presentLine, String[] columnsAndSizes, bool hasHeader, BeBackendContextMenu backendContextMenu, string id);
    [ExtensionAttribute]
[NotNullAttribute]
[CoveredInTest]
public static BeTreeGrid GetSingleSelectionBeList(IProperty`1<T> resultProperty, IListEvents`1<T> initialList, Lifetime lifetime, PresentListLine`1<T> presentLine, TreeConfiguration treeConfiguration, string id, T defaultValueAfterSelectedItemRemoved);
    [ExtensionAttribute]
public static BeTreeGrid GetSingleSelectionBeTree(IProperty`1<T> resultProperty, IEnumerable`1<T> items, Lifetime lifetime, PresentTreeLine`1<T> presentLine, Func`2<T, IList`1<T>> getChildren, TreeConfiguration configuration, string id);
    [ExtensionAttribute]
public static BeTreeGrid GetSingleSelectionBeTree(IProperty`1<T> resultProperty, IEnumerable`1<T> items, Lifetime lifetime, PresentTreeLine`1<T> presentLine, Func`2<T, IListEvents`1<T>> getChildren, TreeConfiguration configuration, string id);
    [ExtensionAttribute]
public static BeTreeGrid GetSingleSelectionBeTree(IProperty`1<T> resultProperty, IListEvents`1<T> items, Lifetime lifetime, PresentTreeLine`1<T> presentLine, Func`2<T, IListEvents`1<T>> getChildren, TreeConfiguration configuration, string id);
    [ExtensionAttribute]
[CoveredInTest]
public static BeTreeGrid GetBeListWithCheckBoxes(IEnumerable`1<T> initialList, Lifetime lifetime, CheckedListLinePresentation`1<T> getLinePresentation, TreeConfiguration configuration, string id, bool joinCheckBoxAndFirstText);
    private static TreeConfiguration BeListWithCheckboxesConfiguration(TreeConfiguration configuration, bool joinCheckBoxAndFirstColumn);
    [ExtensionAttribute]
public static BeTreeGrid GetBeListWithCheckBoxes(IListEvents`1<T> initialList, Lifetime lifetime, CheckedListLinePresentation`1<T> getLinePresentation, TreeConfiguration configuration, string id, bool joinCheckBoxAndFirstColumn);
    private static List`1<BeControl> Present(Lifetime lt, T element, ListNodeProperties listNodeProperties, CheckedListLinePresentation`1<T> getLinePresentation, bool joinCheckBoxAndFirstColumn);
    [ExtensionAttribute]
public static BeTreeGrid GetBeTreeWithCheckBoxes(IEnumerable`1<T> initialList, Lifetime lifetime, CheckedTreeLinePresentation`1<T> getLinePresentation, Func`2<T, IList`1<T>> getChildren, TreeConfiguration configuration, string id);
    [ExtensionAttribute]
public static BeTreeGrid GetBeTreeWithCheckBoxes(IListEvents`1<T> initialList, Lifetime lifetime, CheckedTreeLinePresentation`1<T> getLinePresentation, Func`2<T, IList`1<T>> getChildren, TreeConfiguration configuration, string id);
    [ExtensionAttribute]
public static BeTreeGrid GetBeTreeWithCheckBoxes(IEnumerable`1<T> initialList, Lifetime lifetime, CheckedTreeLinePresentation`1<T> getLinePresentation, Func`2<T, IList`1<T>> getChildren, TreeConfiguration configuration, TreeCheckBehavior checkBehavior, string id);
    [ExtensionAttribute]
[CoveredInTest]
public static BeTreeGrid GetBeTreeWithCheckBoxes(IEnumerable`1<T> initialList, Lifetime lifetime, CheckedTreeLinePresentation`1<T> getLinePresentation, Func`2<T, IListEvents`1<T>> getChildren, TreeConfiguration configuration, string id);
    [ExtensionAttribute]
[CoveredInTest]
public static BeTreeGrid GetBeTreeWithCheckBoxes(IEnumerable`1<T> initialList, Lifetime lifetime, CheckedTreeLinePresentation`1<T> getLinePresentation, Func`2<T, IListEvents`1<T>> getChildren, TreeConfiguration configuration, TreeCheckBehavior checkBehavior, string id);
    [ExtensionAttribute]
[CoveredInTest]
public static BeTreeGrid GetBeTreeWithCheckBoxes(IListEvents`1<T> initialList, Lifetime lifetime, CheckedTreeLinePresentation`1<T> getLinePresentation, Func`2<T, IListEvents`1<T>> getChildren, TreeConfiguration configuration, string id);
    [ExtensionAttribute]
[CoveredInTest]
public static BeTreeGrid GetBeTreeWithCheckBoxes(IListEvents`1<T> initialList, Lifetime lifetime, CheckedTreeLinePresentation`1<T> getLinePresentation, Func`2<T, IListEvents`1<T>> getChildren, TreeConfiguration configuration, TreeCheckBehavior checkBehavior, string id);
    private static void UpdateIsIncluded(BeLocalCookie localCookie, string updateFrom, ElementWithCheckBox`1<T> element, bool v);
    [ExtensionAttribute]
[CoveredInTest]
public static BeToolbar GetBeSingleSelectionListWithToolbar(IProperty`1<T> resultProperty, IListEvents`1<T> initialList, Lifetime lifetime, PresentListLine`1<T> presentLine, IIconHost iconHost, String[] columnsAndSizes, bool hasHeader, BeDock dock, string toolbarID, BeBackendContextMenu contextMenu, BeEmptyText emptyText);
    public static BeToolbar WithToolbar(BeTreeGrid tree, BeDock dock, string toolbarID);
    [ExtensionAttribute]
public static BeControl WithAdvancedSearchToolbar(BeTreeGrid tree, Lifetime lifetime, BeAdvancedSearchData data, IIconHost iconHost, BeBehaviorControl behaviorControlTree, IProperty`1<bool> toolbarVisible, BeDock dock, string toolbarID);
}
[ExtensionAttribute]
public static class JetBrains.IDE.UI.Extensions.BeUtil : object {
    public static IProperty`1<T> GetPropertyWithHandler(Lifetime lifetime, string propertyId, Action`1<T> handler, T defaultValue, bool acknowledge);
    public static IEnumerable`1<T> GetEnumValues(bool reverse);
    [ExtensionAttribute]
public static void DisableDescendantsWhenDisabled(BeControl control, Lifetime lifetime);
    [ExtensionAttribute]
public static void Extend(BeControl control, T value);
    [ExtensionAttribute]
public static void Extend(BeTreeConfiguration control, T value);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static T GetExtended(BeControl control);
    [ExtensionAttribute]
public static T GetSafeExtended(BeControl control, T defaultValue);
    private static T GetBoxed(RdBindableBase control, T defaultValue);
    [ExtensionAttribute]
public static T GetSafeExtended(BeTreeConfiguration control, T defaultValue);
    public static IProperty`1<T> WrapWithCondition(Lifetime lifetime, IProperty`1<T> initialProperty, Func`2<T, bool> acceptValue);
    public static IProperty`1<T> BindWithCondition(Lifetime lifetime, IProperty`1<T> sourceProperty, Func`2<T, bool> acceptTargetValue, Func`2<T, bool> acceptSourceValue, BeInvalidValuePropagation propagation);
    public static void FlowIntoWithCondition(Lifetime lifetime, IProperty`1<T> initialProperty, Func`2<T, bool> acceptValue, IProperty`1<T> targetProperty);
    public static void FlowIntoWithCondition(Lifetime lifetime, IProperty`1<T> initialProperty, Func`2<T, bool> acceptValue, IProperty`1<TResult> targetProperty, Func`2<T, TResult> convert);
    public static void FlowIntoRdWithCondition(Lifetime lifetime, IProperty`1<T> initialProperty, Func`2<T, bool> acceptValue, IViewableProperty`1<TResult> targetProperty, Func`2<T, TResult> convert);
    public static IProperty`1<string> GetValidatedProperty(IProperty`1<string> property, Lifetime lifetime, BeControlWithValidation comboBox, BeInvalidValuePropagation propagateValueWhenInvalid);
    [NotNullAttribute]
public static IProperty`1<T> BindPropertyWithModel(Lifetime lifetime, string name, TModel model, Func`2<TModel, T> get, Action`2<TModel, T> set);
}
[ExtensionAttribute]
public static class JetBrains.IDE.UI.Extensions.BeUtilExtensions : object {
    [ExtensionAttribute]
public static void FlowChangesIntoRd(IViewableProperty`1<TValue> source, Lifetime lifetime, IViewableProperty`1<TValue> target);
    [ExtensionAttribute]
public static void FlowChangesIntoRd(IProperty`1<TValue> source, Lifetime lifetime, IViewableProperty`1<TValue> target);
    [ExtensionAttribute]
public static void FlowIntoRd(IViewableProperty`1<TValue> source, Lifetime lifetime, IViewableProperty`1<TValue> target);
    [ExtensionAttribute]
public static void FlowIntoRd(IViewableProperty`1<Nullable`1<bool>> source, Lifetime lifetime, IViewableProperty`1<bool> target);
    [ExtensionAttribute]
public static void FlowIntoRd(IViewableProperty`1<TValue> source, Lifetime lifetime, Func`2<TValue, TResult> convert, IViewableProperty`1<TResult> target);
    [ExtensionAttribute]
public static void FlowIntoRd(IProperty`1<TValue> source, Lifetime lifetime, IViewableProperty`1<TValue> target);
    [ExtensionAttribute]
public static void FlowIntoRd(IProperty`1<TValue> source, Lifetime lifetime, IViewableProperty`1<TResult> target, Func`2<TValue, TResult> convert);
    [ExtensionAttribute]
public static IProperty`1<TTarget> SelectWithInit(IViewableProperty`1<TSource> source, Lifetime lifetime, string comment, Func`2<TSource, TTarget> convert);
    [ExtensionAttribute]
public static IProperty`1<TResult> SelectTwoWay(IProperty`1<TValue> source, Lifetime lifetime, Func`2<TValue, TResult> convert, Func`2<TResult, TValue> convertBack);
    [ExtensionAttribute]
public static void Bind(IProperty`1<TValue> source, Lifetime lifetime, IProperty`1<TValue> target);
    [ExtensionAttribute]
public static void Bind(IProperty`1<TValue> source, Lifetime lifetime, IProperty`1<TTarget> target, Func`2<TValue, TTarget> convert, Func`2<TTarget, TValue> convertBack);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProperty`1<bool> CreateOr(IProperty`1<bool> source, Lifetime lifetime, bool value, string name);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProperty`1<bool> WithCondition(IProperty`1<T> source, Lifetime lifetime, Func`2<T, bool> value, string name);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProperty`1<bool> CreateAnd(IProperty`1<bool> source, Lifetime lifetime, bool value, string name);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProperty`1<bool> Or(IProperty`1<bool> property, Lifetime lifetime, IProperty`1<bool> otherProperty);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProperty`1<bool> And(IProperty`1<bool> property, Lifetime lifetime, IProperty`1<bool> otherProperty);
    [ExtensionAttribute]
public static IReadonlyProperty`1<T> Compose(IEnumerable`1<IReadonlyProperty`1<T1>> all, Lifetime lifetime, Func`2<IEnumerable`1<T1>, T> composer);
    [ExtensionAttribute]
public static IProperty`1<T> Compose(IEnumerable`1<IProperty`1<T1>> all, Lifetime lifetime, Func`2<IEnumerable`1<T1>, T> composer);
    [ExtensionAttribute]
public static void BindValidation(IViewableProperty`1[] all, Lifetime lifetime, IProperty`1<bool> continueEnabled, IViewableProperty`1<bool> rdContinueEnabled);
    [ExtensionAttribute]
public static void Bind(IProperty`1<TValue> point1, Lifetime lifetime, IViewableProperty`1<Nullable`1<TValue>> point2);
    [ExtensionAttribute]
public static void BindRd(IViewableProperty`1<TValue> point1, Lifetime lifetime, IViewableProperty`1<TValue> point2);
    [ExtensionAttribute]
public static BeCheckbox WithDefaultValueWhenDisabled(BeCheckbox beCheckbox, Lifetime lifetime, bool defaultValue);
    [ExtensionAttribute]
public static BeTextBox WithDefaultValueWhenDisabled(BeTextBox textBox, Lifetime lifetime, string defaultValue);
    [ExtensionAttribute]
public static void WithDefaultValueWhenFalse(IViewableProperty`1<T> property, Lifetime lifetime, IViewableProperty`1<bool> enabled, T defaultValue);
    [ExtensionAttribute]
public static void WithDefaultValueWhenFalse(IProperty`1<T> property, Lifetime lifetime, IProperty`1<bool> enabled, T defaultValue);
    [ExtensionAttribute]
public static void Bind(IProperty`1<TValue> point1, Lifetime lifetime, IViewableProperty`1<TValue> point2);
    [ExtensionAttribute]
public static void Bind(IProperty`1<TValue> point1, Lifetime lifetime, IViewableProperty`1<TTarget> point2, Func`2<TValue, TTarget> convert, Func`2<TTarget, TValue> convertBack);
    [ExtensionAttribute]
public static BeControl WithDescription(BeControl control, string description, Lifetime lifetime, GridOrientation orientation, BeSizingType size, string customTargetId);
    [ExtensionAttribute]
public static BeLabel GetDescriptionLabel(BeControl control, string description, Lifetime lifetime, string customTargetId);
    [ExtensionAttribute]
public static void SetSingleSelection(IEnumerable`1<BeRadioButton> radioButtons, Lifetime lifetime);
    [ExtensionAttribute]
public static void SetSingleSelection(IEnumerable`1<IViewableProperty`1<bool>> properties, Lifetime lifetime, bool trustInitialValues);
    [ExtensionAttribute]
public static void BindOneWay(IReadonlyListEvents`1<T> source, Lifetime lifetime, IList`1<TBase> destination);
    [ExtensionAttribute]
public static RichTextModel Highlight(RichTextModel source, string searchText);
    [ExtensionAttribute]
public static RichTextModel Highlight(RichTextModel source, int start, int end);
}
internal class JetBrains.IDE.UI.Extensions.BeWizard : object {
    private BeGrid myContent;
}
public enum JetBrains.IDE.UI.Extensions.BrowsePathOptions : Enum {
    public int value__;
    public static BrowsePathOptions OpenFile;
    public static BrowsePathOptions SaveFile;
    public static BrowsePathOptions OpenFolder;
}
public enum JetBrains.IDE.UI.Extensions.BrowsePathValidation : Enum {
    public int value__;
    public static BrowsePathValidation FileShouldExist;
    public static BrowsePathValidation FileShouldNotExist;
    public static BrowsePathValidation PathMustBeAbsolute;
}
public class JetBrains.IDE.UI.Extensions.CommonBehaviorAttribute : Attribute {
    [CompilerGeneratedAttribute]
private BeCommonBehavior <Behavior>k__BackingField;
    public BeCommonBehavior Behavior { get; }
    public CommonBehaviorAttribute(BeCommonBehavior behavior);
    [CompilerGeneratedAttribute]
public BeCommonBehavior get_Behavior();
}
[ExtensionAttribute]
public static class JetBrains.IDE.UI.Extensions.CommonShortcutHelper : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static BeCommonBehavior Behavior(Enum eValue);
}
[AttributeUsageAttribute("64")]
public class JetBrains.IDE.UI.Extensions.CoveredInTest : Attribute {
}
[ExtensionAttribute]
public static class JetBrains.IDE.UI.Extensions.EnumHelper : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string Description(Enum eValue);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IconModel IconId(Enum eValue, IIconHost iconHostBase);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IconId IconId(Enum eValue);
    public static IEnumerable`1<ValueDescription> GetAllValuesAndDescriptions();
    [ExtensionAttribute]
public static TEnum EnumValue(string description);
}
public class JetBrains.IDE.UI.Extensions.GroupingEventForCollection`1 : object {
    private GroupingEvent myGroupingEvent;
    private Queue`1<AddRemoveValue<T>> myAddRemoveQueue;
    public IList`1<T> TargetCollection;
    public Action AfterOutgoingEvent;
    public GroupingEventForCollection`1(Lifetime lifetime, Func`2<Lifetime, GroupingEvent> createGroupingEvent);
    public void EnqueueAdd(T value, Nullable`1<int> index);
    public void EnqueueRemove(T value, Nullable`1<int> index);
    public void EnqueueRemoveAll(Func`2<T, bool> predicate);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(bool _);
}
public class JetBrains.IDE.UI.Extensions.IconAttribute : Attribute {
    [CompilerGeneratedAttribute]
private IconId <Icon>k__BackingField;
    public IconId Icon { get; }
    public IconAttribute(Type iconType);
    [CompilerGeneratedAttribute]
public IconId get_Icon();
}
public interface JetBrains.IDE.UI.Extensions.IElementFilter {
    public abstract virtual bool IsFilteredOut(T argsValue);
}
public interface JetBrains.IDE.UI.Extensions.ITextAttributesKeyProvider {
    [NotNullAttribute]
public abstract virtual TextAttributesKeyModel GetKeyModel(string attributeId);
    [CanBeNullAttribute]
public abstract virtual TextAttributesKeyModel TryGetKeyModel(string attributeId);
}
public enum JetBrains.IDE.UI.Extensions.MenuView : Enum {
    public int value__;
    public static MenuView ICON;
    public static MenuView ICON_AND_TEXT;
    public static MenuView TEXT;
}
public enum JetBrains.IDE.UI.Extensions.NewPathOptions : Enum {
    public int value__;
    public static NewPathOptions AddToList;
    public static NewPathOptions Nothing;
    public static NewPathOptions ReplaceLast;
}
[AttributeUsageAttribute("64")]
public class JetBrains.IDE.UI.Extensions.NoTestNeeded : Attribute {
}
[AttributeUsageAttribute("64")]
public class JetBrains.IDE.UI.Extensions.NotReadyForTest : Attribute {
}
public class JetBrains.IDE.UI.Extensions.OnCreateComboItem`1 : MulticastDelegate {
    public OnCreateComboItem`1(object object, IntPtr method);
    public virtual void Invoke(Lifetime lifetime, T element, ComboItemProperties nodeProperties);
    public virtual IAsyncResult BeginInvoke(Lifetime lifetime, T element, ComboItemProperties nodeProperties, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum JetBrains.IDE.UI.Extensions.OnResetValue : Enum {
    public int value__;
    public static OnResetValue USE_LAST_VALUE;
    public static OnResetValue USE_FIRST_OR_DEFAULT;
    public static OnResetValue USE_USER_OR_FIRST_OR_DEFAULT;
    public static OnResetValue USE_USER_OR_DEFAULT;
    public static OnResetValue USE_DEFAULT;
}
public enum JetBrains.IDE.UI.Extensions.PathActions.BeSimplePathValidationRules : Enum {
    public int value__;
    public static BeSimplePathValidationRules EMPTY_OR_EXISTS;
    public static BeSimplePathValidationRules SHOULD_NOT_BE_EMPTY;
    public static BeSimplePathValidationRules SHOULD_BE_VALID;
    public static BeSimplePathValidationRules SHOULD_BE_ABSOLUTE;
    public static BeSimplePathValidationRules SHOULD_EXIST;
    public static BeSimplePathValidationRules CAN_EXIST_OR_CREATED;
    public static BeSimplePathValidationRules SHOULD_NOT_EXIST;
    public static BeSimplePathValidationRules SHOULD_BE_EMPTY_OR_EXISTS;
}
public class JetBrains.IDE.UI.Extensions.PathActions.CustomEditableComboActionData : EditableComboPathControlData {
    private Action`1<FileSystemPath> myProcessNewPath;
    public CustomEditableComboActionData(IProperty`1<string> newPath, Action`1<FileSystemPath> processNewPath, BeInvalidValuePropagation propagateValue, FileSystemPath defaultValue, IEnumerable`1<string> predefinedValues, BrowsePathOptions pathChooser, ValueTuple`2[] rules, bool checkFirstValue);
    public virtual void ProcessPath(FileSystemPath path);
}
public class JetBrains.IDE.UI.Extensions.PathActions.DataForPathSelectionDialog : object {
    [CompilerGeneratedAttribute]
private BrowsePathOptions <PathChooser>k__BackingField;
    [CompilerGeneratedAttribute]
private ChooseFileType[] <FileTypes>k__BackingField;
    public BrowsePathOptions PathChooser { get; public set; }
    public ChooseFileType[] FileTypes { get; public set; }
    [CompilerGeneratedAttribute]
public BrowsePathOptions get_PathChooser();
    [CompilerGeneratedAttribute]
public void set_PathChooser(BrowsePathOptions value);
    [CompilerGeneratedAttribute]
public ChooseFileType[] get_FileTypes();
    [CompilerGeneratedAttribute]
public void set_FileTypes(ChooseFileType[] value);
}
public class JetBrains.IDE.UI.Extensions.PathActions.EditableComboPathControlData : PathControlData`1<BeComboBox> {
    protected IListEvents`1<string> myValues;
    protected BeComboBox Control;
    public EditableComboPathControlData(IProperty`1<string> newPath, BeInvalidValuePropagation propagateValue, FileSystemPath defaultValue, IEnumerable`1<string> predefinedValues, BrowsePathOptions pathChooser, ValueTuple`2[] rules, ChooseFileType[] fileTypes, IShellLocks shellLocks, bool checkFirstValue);
    public virtual BeComboBox GetControl(Lifetime lifetime);
    public virtual void ProcessPath(FileSystemPath path);
}
public class JetBrains.IDE.UI.Extensions.PathActions.ExtendableTextBoxPathData : TextBoxInGridPathData {
    public ExtendableTextBoxPathData(IProperty`1<string> newPath, BeInvalidValuePropagation propagateValue, FileSystemPath defaultValue, BrowsePathOptions pathChooser, ValueTuple`2[] rules, ChooseFileType[] fileTypes, IShellLocks shellLocks, bool checkFirstValue);
    public virtual BeTextBox GetControl(Lifetime lifetime);
    public void AddBrowseButton(Lifetime lifetime, IIconHost iconHost, ICommonFileDialogs dialogs, Action`1<FileSystemPath> customProcessPath, string tooltipText);
    public void AddResetButton(Lifetime lifetime, IIconHost iconHost, Action`1<FileSystemPath> customProcessPath);
    public virtual void ProcessPath(FileSystemPath path);
    [CompilerGeneratedAttribute]
private ValueTuple`3<string, IconModel, ValidationStates> <GetControl>b__1_0(string v);
}
public interface JetBrains.IDE.UI.Extensions.PathActions.IPathControlData`1 {
    public IProperty`1<string> NewPath { get; }
    public FileSystemPath DefaultValue { get; }
    public Func`1<FileSystemPath> ResetHandler { get; public set; }
    public Func`2<string, ValueTuple`3<string, IconModel, ValidationStates>> DefaultValidate { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<IPath, ValueTuple`3<string, IconModel, ValidationStates>> Validate { get; public set; }
    public BeInvalidValuePropagation PropagateValue { get; }
    public IProperty`1<DataForPathSelectionDialog> DataForDialog { get; public set; }
    public IShellLocks ShellLocks { get; }
    public abstract virtual IProperty`1<string> get_NewPath();
    public abstract virtual FileSystemPath get_DefaultValue();
    public abstract virtual Func`1<FileSystemPath> get_ResetHandler();
    public abstract virtual void set_ResetHandler(Func`1<FileSystemPath> value);
    public abstract virtual Func`2<string, ValueTuple`3<string, IconModel, ValidationStates>> get_DefaultValidate();
    public abstract virtual Func`2<IPath, ValueTuple`3<string, IconModel, ValidationStates>> get_Validate();
    public abstract virtual void set_Validate(Func`2<IPath, ValueTuple`3<string, IconModel, ValidationStates>> value);
    public abstract virtual BeInvalidValuePropagation get_PropagateValue();
    public abstract virtual IProperty`1<DataForPathSelectionDialog> get_DataForDialog();
    public abstract virtual void set_DataForDialog(IProperty`1<DataForPathSelectionDialog> value);
    public abstract virtual T GetControl(Lifetime lifetime);
    public abstract virtual void ProcessPath(FileSystemPath path);
    public abstract virtual FileSystemPath TryParse(string newPathValue);
    public abstract virtual IShellLocks get_ShellLocks();
    public abstract virtual BeButton GetBrowseButton(Lifetime lifetime, IIconHost iconHost, Action`1<FileSystemPath> processNewPath, ICommonFileDialogs dialogs);
    public abstract virtual BeButton GetResetButton(Lifetime lifetime, IIconHost iconHost, Action`1<FileSystemPath> processNewPath);
    public abstract virtual BeGrid GetPathSelectionElement(Lifetime lifetime, IIconHost iconHost, ICommonFileDialogs dialogs, T1 control, Action`1<FileSystemPath> processNewPath, string description, ValidationStyle validationStyle);
}
public abstract class JetBrains.IDE.UI.Extensions.PathActions.PathControlData`1 : object {
    [CompilerGeneratedAttribute]
private IProperty`1<string> <NewPath>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<FileSystemPath> <ResetHandler>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IPath, ValueTuple`3<string, IconModel, ValidationStates>> <Validate>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, ValueTuple`3<string, IconModel, ValidationStates>> <DefaultValidate>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<DataForPathSelectionDialog> <DataForDialog>k__BackingField;
    [CompilerGeneratedAttribute]
private BeInvalidValuePropagation <PropagateValue>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ValueIsChecked>k__BackingField;
    private bool myCheckFirstValue;
    [CompilerGeneratedAttribute]
private IShellLocks <ShellLocks>k__BackingField;
    public IProperty`1<string> NewPath { get; }
    public FileSystemPath DefaultValue { get; }
    public Func`1<FileSystemPath> ResetHandler { get; public set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<IPath, ValueTuple`3<string, IconModel, ValidationStates>> Validate { get; public set; }
    public Func`2<string, ValueTuple`3<string, IconModel, ValidationStates>> DefaultValidate { get; protected set; }
    public IProperty`1<DataForPathSelectionDialog> DataForDialog { get; public set; }
    public BeInvalidValuePropagation PropagateValue { get; }
    public IProperty`1<bool> ValueIsChecked { get; private set; }
    public IShellLocks ShellLocks { get; }
    protected PathControlData`1(IProperty`1<string> newPath, BeInvalidValuePropagation propagateValue, FileSystemPath defaultValue, BrowsePathOptions pathChooser, ValueTuple`2[] validationRules, ChooseFileType[] fileTypes, IShellLocks shellLocks, bool checkFirstValue);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<string> get_NewPath();
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_DefaultValue();
    [CompilerGeneratedAttribute]
public sealed virtual Func`1<FileSystemPath> get_ResetHandler();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResetHandler(Func`1<FileSystemPath> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<IPath, ValueTuple`3<string, IconModel, ValidationStates>> get_Validate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Validate(Func`2<IPath, ValueTuple`3<string, IconModel, ValidationStates>> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<string, ValueTuple`3<string, IconModel, ValidationStates>> get_DefaultValidate();
    [CompilerGeneratedAttribute]
protected void set_DefaultValidate(Func`2<string, ValueTuple`3<string, IconModel, ValidationStates>> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<DataForPathSelectionDialog> get_DataForDialog();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DataForDialog(IProperty`1<DataForPathSelectionDialog> value);
    [CompilerGeneratedAttribute]
public sealed virtual BeInvalidValuePropagation get_PropagateValue();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ValueIsChecked();
    [CompilerGeneratedAttribute]
private void set_ValueIsChecked(IProperty`1<bool> value);
    public abstract virtual T GetControl(Lifetime lifetime);
    public abstract virtual void ProcessPath(FileSystemPath path);
    public virtual FileSystemPath TryParse(string newPathValue);
    [CompilerGeneratedAttribute]
public sealed virtual IShellLocks get_ShellLocks();
    public sealed virtual BeButton GetBrowseButton(Lifetime lifetime, IIconHost iconHost, Action`1<FileSystemPath> processNewPath, ICommonFileDialogs dialogs);
    public sealed virtual BeButton GetResetButton(Lifetime lifetime, IIconHost iconHost, Action`1<FileSystemPath> processNewPath);
    public sealed virtual BeGrid GetPathSelectionElement(Lifetime lifetime, IIconHost iconHost, ICommonFileDialogs dialogs, T1 control, Action`1<FileSystemPath> processNewPath, string description, ValidationStyle validationStyle);
    [CompilerGeneratedAttribute]
private ValueTuple`3<string, IconModel, ValidationStates> <GetPathSelectionElement>b__39_0(string v);
}
public class JetBrains.IDE.UI.Extensions.PathActions.TextBoxInGridPathData : PathControlData`1<BeTextBox> {
    [CompilerGeneratedAttribute]
private BeTextBox <Control>k__BackingField;
    public BeTextBox Control { get; protected set; }
    public TextBoxInGridPathData(IProperty`1<string> newPath, BeInvalidValuePropagation propagateValue, FileSystemPath defaultValue, BrowsePathOptions pathChooser, ValueTuple`2[] rules, ChooseFileType[] fileTypes, IShellLocks shellLocks, bool checkFirstValue);
    public virtual BeTextBox GetControl(Lifetime lifetime);
    public void AddClearButton(Lifetime lifetime, IIconHost iconHost);
    [CompilerGeneratedAttribute]
public BeTextBox get_Control();
    [CompilerGeneratedAttribute]
protected void set_Control(BeTextBox value);
    public virtual void ProcessPath(FileSystemPath path);
}
public class JetBrains.IDE.UI.Extensions.PathActions.TextBoxInGridRelativePathData : TextBoxInGridPathData {
    private FileSystemPath myRelativeTo;
    public TextBoxInGridRelativePathData(IProperty`1<string> newPath, FileSystemPath relativeTo, BeInvalidValuePropagation propagateValue, FileSystemPath defaultValue, BrowsePathOptions pathChooser, ValueTuple`2[] rules, bool checkFirstValue);
    public virtual void ProcessPath(FileSystemPath path);
    public virtual FileSystemPath TryParse(string newPathValue);
}
[ShellComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.IDE.UI.Extensions.PlatformTextAttributesKeyProvider : object {
    public virtual TextAttributesKeyModel GetKeyModel(string attributeId);
    public sealed virtual TextAttributesKeyModel TryGetKeyModel(string attributeId);
}
public class JetBrains.IDE.UI.Extensions.PresentColumnElements`1 : MulticastDelegate {
    public PresentColumnElements`1(object object, IntPtr method);
    public virtual List`1<ValueTuple`2<BeControl, BeSizingType>> Invoke(Lifetime lifetime, T element, SpanGridRowProperties listNodeProperties);
    public virtual IAsyncResult BeginInvoke(Lifetime lifetime, T element, SpanGridRowProperties listNodeProperties, AsyncCallback callback, object object);
    public virtual List`1<ValueTuple`2<BeControl, BeSizingType>> EndInvoke(IAsyncResult result);
}
public class JetBrains.IDE.UI.Extensions.PresentColumnElementsWithSpan`1 : MulticastDelegate {
    public PresentColumnElementsWithSpan`1(object object, IntPtr method);
    public virtual List`1<ValueTuple`3<BeControl, BeSizingType, int>> Invoke(Lifetime lifetime, T element, SpanGridRowProperties listNodeProperties);
    public virtual IAsyncResult BeginInvoke(Lifetime lifetime, T element, SpanGridRowProperties listNodeProperties, AsyncCallback callback, object object);
    public virtual List`1<ValueTuple`3<BeControl, BeSizingType, int>> EndInvoke(IAsyncResult result);
}
public class JetBrains.IDE.UI.Extensions.PresentColumnElementWithFill`1 : MulticastDelegate {
    public PresentColumnElementWithFill`1(object object, IntPtr method);
    public virtual List`1<BeControl> Invoke(Lifetime lifetime, T element, SpanGridRowProperties listNodeProperties);
    public virtual IAsyncResult BeginInvoke(Lifetime lifetime, T element, SpanGridRowProperties listNodeProperties, AsyncCallback callback, object object);
    public virtual List`1<BeControl> EndInvoke(IAsyncResult result);
}
public class JetBrains.IDE.UI.Extensions.PresentColumnElementWithMinSize`1 : MulticastDelegate {
    public PresentColumnElementWithMinSize`1(object object, IntPtr method);
    public virtual List`1<BeControl> Invoke(Lifetime lifetime, T element, SpanGridRowProperties listNodeProperties);
    public virtual IAsyncResult BeginInvoke(Lifetime lifetime, T element, SpanGridRowProperties listNodeProperties, AsyncCallback callback, object object);
    public virtual List`1<BeControl> EndInvoke(IAsyncResult result);
}
[NotNullAttribute]
public class JetBrains.IDE.UI.Extensions.PresentComboItem`2 : MulticastDelegate {
    public PresentComboItem`2(object object, IntPtr method);
    public virtual TResult Invoke(Lifetime lifetime, T element, ComboItemProperties nodeProperties);
    public virtual IAsyncResult BeginInvoke(Lifetime lifetime, T element, ComboItemProperties nodeProperties, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class JetBrains.IDE.UI.Extensions.PresentListLine`1 : MulticastDelegate {
    public PresentListLine`1(object object, IntPtr method);
    public virtual List`1<BeControl> Invoke(Lifetime lifetime, T element, ListNodeProperties listNodeProperties);
    public virtual IAsyncResult BeginInvoke(Lifetime lifetime, T element, ListNodeProperties listNodeProperties, AsyncCallback callback, object object);
    public virtual List`1<BeControl> EndInvoke(IAsyncResult result);
}
public class JetBrains.IDE.UI.Extensions.PresentTreeLine`1 : MulticastDelegate {
    public PresentTreeLine`1(object object, IntPtr method);
    public virtual List`1<BeControl> Invoke(Lifetime lifetime, T element, ListNodeProperties listNodeProperties, TreeNodeProperties treeNodeProperties);
    public virtual IAsyncResult BeginInvoke(Lifetime lifetime, T element, ListNodeProperties listNodeProperties, TreeNodeProperties treeNodeProperties, AsyncCallback callback, object object);
    public virtual List`1<BeControl> EndInvoke(IAsyncResult result);
}
public class JetBrains.IDE.UI.Extensions.PresentTreeLineWithChildren`2 : MulticastDelegate {
    public PresentTreeLineWithChildren`2(object object, IntPtr method);
    public virtual List`1<BeControl> Invoke(Lifetime lifetime, TRootContext rootContext, bool isFakeRoot, T element, ListNodeProperties listNodeProperties, TreeNodePropertiesWithChildren`1<T> treeNodePropertiesWithChildren);
    public virtual IAsyncResult BeginInvoke(Lifetime lifetime, TRootContext rootContext, bool isFakeRoot, T element, ListNodeProperties listNodeProperties, TreeNodePropertiesWithChildren`1<T> treeNodePropertiesWithChildren, AsyncCallback callback, object object);
    public virtual List`1<BeControl> EndInvoke(IAsyncResult result);
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.IDE.UI.Extensions.Properties.ActionGroupHost : object {
    public virtual void SendGroupId(string groupId);
    public virtual void SendGroupId(string groupId, ActionModelTransformer actionTransformer);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ShellComponentAttribute("16")]
public class JetBrains.IDE.UI.Extensions.Properties.BeControlsDataRuleProvider : object {
    private Dictionary`2<string, GetDataRules> myEnclosingControlToDataRuleProvider;
    private static ILogger ourLogger;
    private static BeControlsDataRuleProvider();
    public IEnumerable`1<IDataRule> GetDataRules(RdDataConstant constant);
    public IEnumerable`1<IDataRule> GetDataRules(ActionTimestampModel timestampModel);
    public void RegisterDataRuleProvider(Lifetime lifetime, string enclosingControlId, GetDataRules provider);
}
public static class JetBrains.IDE.UI.Extensions.Properties.BeControlSizes : object {
    public static BeControlSize GetDefaultSize();
    public static BeControlSize GetCustomSize(int width, int height);
    public static BeControlSize GetSize(BeControlSizeType width, BeControlSizeType height);
}
[ExtensionAttribute]
public static class JetBrains.IDE.UI.Extensions.Properties.BeMargins : object {
    public static BeMargin TreeLineMargin { get; }
    public static BeMargin PopupMargin { get; }
    public static BeMargin CheckBoxMargin { get; }
    public static BeMargin RichTextIconMargin { get; }
    public static BeMargin Create(BeMarginType left, BeMarginType top, BeMarginType right, BeMarginType bottom);
    public static BeMargin Create(BeMarginType type, int left, int top, int right, int bottom);
    public static BeMargin Create(int left, int top, int right, int bottom);
    public static BeMargin Create(ValueTuple`2<BeMarginType, int> left, ValueTuple`2<BeMarginType, int> top, ValueTuple`2<BeMarginType, int> right, ValueTuple`2<BeMarginType, int> bottom);
    [ExtensionAttribute]
public static bool IsEmpty(BeMargin margin);
    public static BeMargin get_TreeLineMargin();
    public static BeMargin get_PopupMargin();
    public static BeMargin get_CheckBoxMargin();
    public static BeMargin get_RichTextIconMargin();
}
public class JetBrains.IDE.UI.Extensions.Properties.BeTreeGridDataConstants`1 : object {
    [NotNullAttribute]
public static DataConstant`1<IEnumerable`1<T>> SELECTED_ELEMENTS;
    private static BeTreeGridDataConstants`1();
    [PureAttribute]
public IEnumerable`1<IDataRule> CreateDataRules(IEnumerable`1<T> values);
}
public abstract class JetBrains.IDE.UI.Extensions.Properties.BeTreeGridDataRuleProvider`1 : object {
    private IdMap`1<object> myMap;
    private Func`2<object, object> myNodeConverter;
    public void SetMap(IdMap`1<object> map, Func`2<object, object> nodeConverter);
    [IteratorStateMachineAttribute("JetBrains.IDE.UI.Extensions.Properties.BeTreeGridDataRuleProvider`1/<GetDataRules>d__4")]
public IEnumerable`1<IDataRule> GetDataRules(List`1<string> nodeIds);
    [IteratorStateMachineAttribute("JetBrains.IDE.UI.Extensions.Properties.BeTreeGridDataRuleProvider`1/<GetTreeDataRules>d__5")]
protected virtual IEnumerable`1<IDataRule> GetTreeDataRules();
    public virtual IEnumerable`1<IDataRule> GetDataRules(IEnumerable`1<T> nodes);
    [CompilerGeneratedAttribute]
private T <GetDataRules>b__4_0(string id);
}
public class JetBrains.IDE.UI.Extensions.Properties.CheckBoxListNodeProperties : object {
    [CompilerGeneratedAttribute]
private Property`1<bool> <Included>k__BackingField;
    [CompilerGeneratedAttribute]
private ListNodeProperties <ListNodeProperties>k__BackingField;
    public Property`1<bool> Included { get; public set; }
    public ListNodeProperties ListNodeProperties { get; public set; }
    [CompilerGeneratedAttribute]
public Property`1<bool> get_Included();
    [CompilerGeneratedAttribute]
public void set_Included(Property`1<bool> value);
    [CompilerGeneratedAttribute]
public ListNodeProperties get_ListNodeProperties();
    [CompilerGeneratedAttribute]
public void set_ListNodeProperties(ListNodeProperties value);
}
public class JetBrains.IDE.UI.Extensions.Properties.CheckBoxTreeNodeProperties : object {
    [CompilerGeneratedAttribute]
private Property`1<Nullable`1<bool>> <Included>k__BackingField;
    [CompilerGeneratedAttribute]
private ListNodeProperties <ListNodeProperties>k__BackingField;
    public Property`1<Nullable`1<bool>> Included { get; public set; }
    public ListNodeProperties ListNodeProperties { get; public set; }
    public CheckBoxTreeNodeProperties(ListNodeProperties listNodeProperties);
    [CompilerGeneratedAttribute]
public Property`1<Nullable`1<bool>> get_Included();
    [CompilerGeneratedAttribute]
public void set_Included(Property`1<Nullable`1<bool>> value);
    [CompilerGeneratedAttribute]
public ListNodeProperties get_ListNodeProperties();
    [CompilerGeneratedAttribute]
public void set_ListNodeProperties(ListNodeProperties value);
}
public class JetBrains.IDE.UI.Extensions.Properties.ComboItemProperties : object {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Enabled>k__BackingField;
    public IProperty`1<bool> Enabled { get; }
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_Enabled();
}
public class JetBrains.IDE.UI.Extensions.Properties.ContextIdMap : object {
}
public class JetBrains.IDE.UI.Extensions.Properties.GetDataRules : MulticastDelegate {
    public GetDataRules(object object, IntPtr method);
    public virtual IEnumerable`1<IDataRule> Invoke(List`1<string> controlId);
    public virtual IAsyncResult BeginInvoke(List`1<string> controlId, AsyncCallback callback, object object);
    public virtual IEnumerable`1<IDataRule> EndInvoke(IAsyncResult result);
}
public class JetBrains.IDE.UI.Extensions.Properties.IdMap`1 : ContextIdMap {
    private ulong myNextId;
    private BidirectionalMapOnDictionary`2<string, T> myControlIdToNodeMap;
    public void Clear();
    public string AddAndGenerateId(T modelNode);
    public void RemoveByNode(T modelNode);
    public void RemoveById(string nodeId);
    public T GetNode(string nodeId);
    public bool TryGetNode(string nodeId, T& node);
}
[ExtensionAttribute]
public static class JetBrains.IDE.UI.Extensions.Properties.IdMapEx : object {
    [ExtensionAttribute]
public static string AddNode(IdMap`1<T> idMap, Lifetime nodeLifetime, T modelNode);
}
public class JetBrains.IDE.UI.Extensions.Properties.ListNodeProperties : object {
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Selected>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Highlighted>k__BackingField;
    [CompilerGeneratedAttribute]
private SimpleSignal <Signal>k__BackingField;
    public IProperty`1<string> Id { get; }
    public IProperty`1<bool> Selected { get; }
    public IProperty`1<bool> Enabled { get; }
    public IProperty`1<bool> Highlighted { get; }
    public SimpleSignal Signal { get; }
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_Id();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_Selected();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_Enabled();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_Highlighted();
    [CompilerGeneratedAttribute]
public SimpleSignal get_Signal();
}
public class JetBrains.IDE.UI.Extensions.Properties.MenuItemProperties : object {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Enabled>k__BackingField;
    public IProperty`1<bool> Enabled { get; }
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_Enabled();
}
public class JetBrains.IDE.UI.Extensions.Properties.RadioButtonProperties : object {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Checked>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Enabled>k__BackingField;
    public IProperty`1<bool> Checked { get; }
    public IProperty`1<bool> Enabled { get; }
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_Checked();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_Enabled();
}
public class JetBrains.IDE.UI.Extensions.Properties.TreeConfiguration : object {
    private int myVisibleRowCount;
    [CompilerGeneratedAttribute]
private BeAlignment <DefaultBeAlignment>k__BackingField;
    private ValueTuple`3[] myColumnElements;
    [CompilerGeneratedAttribute]
private bool <HasHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private DoubleClickBehavior <DoubleClickBehaviour>k__BackingField;
    [CompilerGeneratedAttribute]
private ChildOffsetSize <ChildOffsetSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoScrollToEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private BeShowBorders <ShowBorders>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoStartEditing>k__BackingField;
    [CompilerGeneratedAttribute]
private BeScrollSettings <AutoScroll>k__BackingField;
    [CompilerGeneratedAttribute]
private BeSpeedSearch <SpeedSearch>k__BackingField;
    [CompilerGeneratedAttribute]
private BeBackendContextMenu <BackendContextMenu>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Lifetime, GroupingEvent> <CreateGroupingEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <ColumnComparers>k__BackingField;
    [CompilerGeneratedAttribute]
private SortKey <DefaultSortKey>k__BackingField;
    [CompilerGeneratedAttribute]
private BeTreeSelection <Selection>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, object> <NodeConverter>k__BackingField;
    public BeAlignment DefaultBeAlignment { get; public set; }
    public ValueTuple`3[] ColumnElements { get; }
    public bool HasHeader { get; }
    public DoubleClickBehavior DoubleClickBehaviour { get; public set; }
    public ChildOffsetSize ChildOffsetSize { get; }
    public bool AutoScrollToEnd { get; }
    public BeShowBorders ShowBorders { get; }
    public bool AutoStartEditing { get; }
    public BeScrollSettings AutoScroll { get; public set; }
    public BeSpeedSearch SpeedSearch { get; public set; }
    public BeBackendContextMenu BackendContextMenu { get; public set; }
    [CanBeNullAttribute]
public Func`2<Lifetime, GroupingEvent> CreateGroupingEvent { get; private set; }
    [CanBeNullAttribute]
private Object[] ColumnComparers { get; private set; }
    [CanBeNullAttribute]
public SortKey DefaultSortKey { get; private set; }
    public BeTreeSelection Selection { get; }
    public Func`2<object, object> NodeConverter { get; public set; }
    public TreeConfiguration(BeTreeSelection selection, ChildOffsetSize childOffsetSize, bool autoScrollToEnd, BeShowBorders showBorders, bool autoStartEditing, bool hasHeader, BeBackendContextMenu backendContextMenu);
    public TreeConfiguration(ValueTuple`2[] columns, BeTreeSelection selection, ChildOffsetSize childOffsetSize, bool autoScrollToEnd, BeShowBorders showBorders, bool autoStartEditing, bool hasHeader);
    public TreeConfiguration(ValueTuple`3[] columns, BeTreeSelection selection, ChildOffsetSize childOffsetSize, bool autoScrollToEnd, BeShowBorders showBorders, bool autoStartEditing, bool hasHeader);
    public TreeConfiguration(String[] headersAndSizes, BeTreeSelection selection, ChildOffsetSize childOffsetSize, bool autoScrollToEnd, BeShowBorders showBorders, bool autoStartEditing, bool hasHeader, BeBackendContextMenu backendContextMenu);
    [CompilerGeneratedAttribute]
public BeAlignment get_DefaultBeAlignment();
    [CompilerGeneratedAttribute]
public void set_DefaultBeAlignment(BeAlignment value);
    public ValueTuple`3[] get_ColumnElements();
    [CompilerGeneratedAttribute]
public bool get_HasHeader();
    [CompilerGeneratedAttribute]
public DoubleClickBehavior get_DoubleClickBehaviour();
    [CompilerGeneratedAttribute]
public void set_DoubleClickBehaviour(DoubleClickBehavior value);
    [CompilerGeneratedAttribute]
public ChildOffsetSize get_ChildOffsetSize();
    [CompilerGeneratedAttribute]
public bool get_AutoScrollToEnd();
    [CompilerGeneratedAttribute]
public BeShowBorders get_ShowBorders();
    [CompilerGeneratedAttribute]
public bool get_AutoStartEditing();
    [CompilerGeneratedAttribute]
public BeScrollSettings get_AutoScroll();
    [CompilerGeneratedAttribute]
public void set_AutoScroll(BeScrollSettings value);
    [CompilerGeneratedAttribute]
public BeSpeedSearch get_SpeedSearch();
    [CompilerGeneratedAttribute]
public void set_SpeedSearch(BeSpeedSearch value);
    [CompilerGeneratedAttribute]
public BeBackendContextMenu get_BackendContextMenu();
    [CompilerGeneratedAttribute]
public void set_BackendContextMenu(BeBackendContextMenu value);
    [CompilerGeneratedAttribute]
public Func`2<Lifetime, GroupingEvent> get_CreateGroupingEvent();
    [CompilerGeneratedAttribute]
private void set_CreateGroupingEvent(Func`2<Lifetime, GroupingEvent> value);
    [CompilerGeneratedAttribute]
private Object[] get_ColumnComparers();
    [CompilerGeneratedAttribute]
private void set_ColumnComparers(Object[] value);
    [CompilerGeneratedAttribute]
public SortKey get_DefaultSortKey();
    [CompilerGeneratedAttribute]
private void set_DefaultSortKey(SortKey value);
    public TreeConfiguration EnableThrottling(Func`2<Lifetime, GroupingEvent> groupingEventCreator);
    public TreeConfiguration EnableThrottlingAndSorting(Func`2<Lifetime, GroupingEvent> groupingEventCreator, Comparer`1[] comparers, SortKey defaultSortKey);
    [CanBeNullAttribute]
internal Comparer`1[] GetColumnComparers();
    public virtual BeTreeConfiguration GetBeTreeConfiguration(bool showAsList);
    [CompilerGeneratedAttribute]
public BeTreeSelection get_Selection();
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_NodeConverter();
    [CompilerGeneratedAttribute]
public void set_NodeConverter(Func`2<object, object> value);
    public List`1<BeColumnDefinition> BuildColumnDefinitions(ValueTuple`3[] headersAndSizes, Object[] columnComparers);
    private static bool IsSortable(int index, Object[] columnComparers);
    [CompilerGeneratedAttribute]
private ValueTuple`3<string, BeUnitSize, BeAlignment> <.ctor>b__55_0(ValueTuple`2<string, BeUnitSize> c);
    [CompilerGeneratedAttribute]
private ValueTuple`3<string, BeUnitSize, BeAlignment> <.ctor>b__57_0(string pair);
}
[ExtensionAttribute]
public static class JetBrains.IDE.UI.Extensions.Properties.TreeConfigurationExtensions : object {
    [ExtensionAttribute]
public static TreeConfiguration WithContextMenu(TreeConfiguration configuration, ActionGroupHost host, string contextMenuActionGroupId, string doubleClickActionId, ActionModelTransformer transformer);
    [ExtensionAttribute]
public static TreeConfiguration WithSpeedSearch(TreeConfiguration configuration, BeSpeedSearch speedSearch);
    [ExtensionAttribute]
public static TreeConfiguration WithAutoScroll(TreeConfiguration configuration, BeScrollSettings scrollSettings);
}
public abstract class JetBrains.IDE.UI.Extensions.Properties.TreeConfigurationWithColumnPresentations`1 : TreeConfiguration {
}
public class JetBrains.IDE.UI.Extensions.Properties.TreeConfigurationWithListColumnPresentations`1 : TreeConfigurationWithColumnPresentations`1<T> {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IList`1<ValueTuple`2<BeColumnDefinition, ListColumnPresentation`1<T>>> <ColumnPresentations>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<ValueTuple`2<BeColumnDefinition, ListColumnPresentation`1<T>>> ColumnPresentations { get; }
    [CompilerGeneratedAttribute]
public IList`1<ValueTuple`2<BeColumnDefinition, ListColumnPresentation`1<T>>> get_ColumnPresentations();
    public void AddColumn(ValueTuple`2<string, BeUnitSize> column, ListColumnPresentation`1<T> columnPresentation);
    public void AddColumn(BeUnitSize columnSize, ListColumnPresentation`1<T> columnPresentation);
    public virtual BeTreeConfiguration GetBeTreeConfiguration(bool showAsList);
}
public class JetBrains.IDE.UI.Extensions.Properties.TreeConfigurationWithTreeColumnPresentations`1 : TreeConfigurationWithColumnPresentations`1<T> {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IList`1<ValueTuple`2<BeColumnDefinition, TreeColumnPresentation`1<T>>> <ColumnPresentations>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<ValueTuple`2<BeColumnDefinition, TreeColumnPresentation`1<T>>> ColumnPresentations { get; }
    [CompilerGeneratedAttribute]
public IList`1<ValueTuple`2<BeColumnDefinition, TreeColumnPresentation`1<T>>> get_ColumnPresentations();
    public void AddColumn(ValueTuple`2<string, BeUnitSize> column, TreeColumnPresentation`1<T> columnPresentation);
    public void AddColumn(BeUnitSize columnSize, TreeColumnPresentation`1<T> columnPresentation);
    public virtual BeTreeConfiguration GetBeTreeConfiguration(bool showAsList);
}
public abstract class JetBrains.IDE.UI.Extensions.Properties.TreeGridElement : object {
    [CompilerGeneratedAttribute]
private bool <Included>k__BackingField;
    public bool Included { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Included();
    [CompilerGeneratedAttribute]
public void set_Included(bool value);
    public virtual List`1<BeControl> GetLine(Lifetime lifetime);
    public virtual void Navigate();
}
public class JetBrains.IDE.UI.Extensions.Properties.TreeNodeProperties : object {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Expanded>k__BackingField;
    public IProperty`1<bool> Expanded { get; }
    public TreeNodeProperties(IProperty`1<bool> expanded);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_Expanded();
}
public class JetBrains.IDE.UI.Extensions.Properties.TreeNodePropertiesWithChildren`1 : object {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Expanded>k__BackingField;
    [CompilerGeneratedAttribute]
private IListEvents`1<T> <Children>k__BackingField;
    public IProperty`1<bool> Expanded { get; }
    public IListEvents`1<T> Children { get; }
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_Expanded();
    [CompilerGeneratedAttribute]
public IListEvents`1<T> get_Children();
}
[AttributeUsageAttribute("64")]
public class JetBrains.IDE.UI.Extensions.ReadyForTest : Attribute {
}
[ExtensionAttribute]
public static class JetBrains.IDE.UI.Extensions.RichAttributedTextExtensions : object {
    public static RichAttributedTextModel ToAttributedRichText(string richText);
    [ExtensionAttribute]
public static RichAttributedTextModel Append(RichAttributedTextModel richText, string text);
    [ExtensionAttribute]
public static RichAttributedTextModel Append(RichAttributedTextModel richText, ITextAttributesKeyProvider keyProvider, string text, AttributeId id);
    [ExtensionAttribute]
public static string ToText(RichAttributedTextModel richText);
}
[ExtensionAttribute]
public static class JetBrains.IDE.UI.Extensions.RichTextExtensions : object {
    [ExtensionAttribute]
public static EffectStyle ToEffectStyle(EffectStyle effectStyle);
    [ExtensionAttribute]
public static EffectStyle ToModel(EffectStyle effectStyle);
    [ExtensionAttribute]
public static JetFontStyles ToFontStyle(FontStyle fontStyle);
    [ExtensionAttribute]
public static FontStyle ToModel(JetFontStyles fontStyle);
    [ExtensionAttribute]
[CoveredInTest]
[NotNullAttribute]
public static RichTextModel ToModelRichText(RichText richText);
    [ExtensionAttribute]
[CoveredInTest]
[NotNullAttribute]
public static CompletionPresentationModel ToCompletionPresentationModel(RichText richText);
    [ExtensionAttribute]
public static ContentAlignmentKind ToModelContentAlignment(ContentAlignment contentAlignment);
    [ExtensionAttribute]
public static RichTextBlockModel ToModelRichTextBlock(RichTextBlock richTextBlock);
    [ExtensionAttribute]
public static TextStyle ToTextStyle(RichStringModel richString);
    [ExtensionAttribute]
public static RichText ToRichText(RichTextModel richText);
    [CompilerGeneratedAttribute]
internal static JetRgbaColor <ToTextStyle>g__GetBackgroundColor|8_0(<>c__DisplayClass8_0& );
}
public class JetBrains.IDE.UI.Extensions.SpanGridRowProperties : object {
    [CompilerGeneratedAttribute]
private IProperty`1<BeSizingType> <RowSize>k__BackingField;
    public IProperty`1<BeSizingType> RowSize { get; }
    [CompilerGeneratedAttribute]
public IProperty`1<BeSizingType> get_RowSize();
}
[SolutionComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.IDE.UI.Extensions.TextControlIdHost : object {
    [CanBeNullAttribute]
public virtual TextControlId GetTextControlId(ITextControl textControl);
}
[FlagsAttribute]
public enum JetBrains.IDE.UI.Extensions.TreeCheckBehavior : Enum {
    public int value__;
    public static TreeCheckBehavior None;
    public static TreeCheckBehavior UncheckParentOnAllChildrenUnchecked;
    public static TreeCheckBehavior NotCheckParentOnAllChildrenChecked;
    public static TreeCheckBehavior NotCheckParentOnAllCheckedAndUncheckOnAllUnchecked;
    public static TreeCheckBehavior Default;
}
public class JetBrains.IDE.UI.Extensions.TreeGridActionData`1 : object {
    [CompilerGeneratedAttribute]
private BeControl <ControlContent>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<T> <SelectedElement>k__BackingField;
    [CompilerGeneratedAttribute]
private IListEvents`1<T> <Collection>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private IIconHost <IconHost>k__BackingField;
    public BeControl ControlContent { get; }
    public IProperty`1<T> SelectedElement { get; }
    public IListEvents`1<T> Collection { get; }
    public Lifetime Lifetime { get; }
    public IIconHost IconHost { get; }
    public TreeGridActionData`1(IProperty`1<T> selectedElement, IListEvents`1<T> collection, Lifetime lifetime, IIconHost iconHost, BeControl controlContent, SimpleSignal signalAfterAction);
    [CompilerGeneratedAttribute]
public BeControl get_ControlContent();
    [CompilerGeneratedAttribute]
public IProperty`1<T> get_SelectedElement();
    [CompilerGeneratedAttribute]
public IListEvents`1<T> get_Collection();
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public IIconHost get_IconHost();
}
public static class JetBrains.IDE.UI.Extensions.Validation.AttributeBasedValidator : object {
    [NotNullAttribute]
private static ValidationAttributeStore ourStore;
    private static AttributeBasedValidator();
    [ContractAnnotationAttribute("=> true, results: null; => false, results: notnull")]
public static bool ValidateProperty(Lazy`1<object> value, ValidationContext validationCtx, IReadOnlyCollection`1& results);
    [CanBeNullAttribute]
private static List`1<ValidationResult> GetValidationErrors(Lazy`1<object> value, ValidationContext validationContext, IEnumerable`1<ValidationAttribute> attributes);
    [ContractAnnotationAttribute("=> true, result: null; => false, result: notnull")]
private static bool TryValidate(object value, ValidationContext validationContext, ValidationAttribute attribute, ValidationResult& result);
}
[ExtensionAttribute]
public static class JetBrains.IDE.UI.Extensions.Validation.BeValidationExtensions : object {
    [ExtensionAttribute]
[CoveredInTest]
public static TControlType WithValidationRule(TControlType control, Lifetime lifetime, Func`1<bool> validate, string errorMessage, ValidationStates validationState, IShellLocks locks, bool checkFirstValue);
    [ExtensionAttribute]
public static TControlType WithValidationRule(TControlType control, Lifetime lifetime, Func`1<string> validateWithErrorText, IShellLocks locks, ValidationStates validationState, bool checkFirstValue);
    [ExtensionAttribute]
public static TControlType WithValidationRule(TControlType control, Lifetime lifetime, Func`1<ValueTuple`2<string, ValidationStates>> validate, IShellLocks locks, bool checkFirstValue);
    [ExtensionAttribute]
public static TControlType WithValidationRule(TControlType control, Lifetime lifetime, Func`1<ValueTuple`3<string, IconModel, ValidationStates>> validate, IShellLocks locks, bool checkFirstValue);
    [ExtensionAttribute]
public static TControlType WithValidationRule(TControlType control, Lifetime lifetime, ValidationRule rule);
    private static void TryAddRule(TControlType control, Lifetime lifetime, ValidationRule rule);
    [ExtensionAttribute]
[CoveredInTest]
public static TControlType WithValidationRule(TControlType control, Lifetime lifetime, Func`2<T, bool> validate, string errorMessage, ValidationStates validationState, IShellLocks locks, Func`2<TControlType, IViewableProperty`1<T>> getPropertyForRule, bool checkFirstValue);
    [ExtensionAttribute]
public static TControlType WithValidationRule(TControlType control, Lifetime lifetime, Func`2<T, string> validateWithErrorText, IShellLocks locks, ValidationStates validationState, Func`2<TControlType, IViewableProperty`1<T>> getPropertyForRule, bool checkFirstValue);
    [ExtensionAttribute]
public static TControlType WithValidationRule(TControlType control, Lifetime lifetime, Func`2<T, ValueTuple`3<string, IconModel, ValidationStates>> validate, IShellLocks locks, Func`2<TControlType, IViewableProperty`1<T>> getPropertyForRule, bool checkFirstValue);
    [ExtensionAttribute]
public static TControlType WithValidationRule(TControlType control, Lifetime lifetime, Func`2<IViewableProperty`1<TValue>, ValidationRuleWithProperty`1<TValue>> getRule, Func`2<TControlType, IViewableProperty`1<TValue>> getPropertyForRule);
    [ExtensionAttribute]
public static TControlType WithValidationRule(TControlType control, Lifetime lifetime, Func`2<IViewableProperty`1<string>, ValidationRuleWithProperty`1<string>> getRule);
}
public static class JetBrains.IDE.UI.Extensions.Validation.ObjectValidator : object {
    [NotNullAttribute]
public static ObjectValidator`1<T> Create(Lifetime lifetime, T instance, IComponentContainer container);
}
public class JetBrains.IDE.UI.Extensions.Validation.ObjectValidator`1 : UserDataHolder {
    [NotNullAttribute]
private IComponentContainer myComponentContainer;
    [NotNullAttribute]
private ConcurrentDictionary`2<string, ISet`1<string>> myErrors;
    private int myWasValidated;
    private int myWasSubscribed;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<bool> <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataErrorsChangedEventArgs> ErrorsChanged;
    [NotNullAttribute]
public Lifetime Lifetime { get; }
    [NotNullAttribute]
public T Target { get; }
    [NotNullAttribute]
public IBindable`1<bool> IsValid { get; }
    public bool HasErrors { get; }
    public ObjectValidator`1(Lifetime lifetime, IComponentContainer componentContainer, T validationTarget);
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public T get_Target();
    [CompilerGeneratedAttribute]
public IBindable`1<bool> get_IsValid();
    public bool EnsureValidated();
    public void EnsureSubscribed();
    private void Validate();
    private void SubscribeToValueChange(PropertyDescriptor property, string propertyName);
    private void ValidateProperty(string propertyName);
    [CanBeNullAttribute]
private static object GetPropertyValue(object item, string propertyName);
    private void ProcessResults(IReadOnlyCollection`1<ValidationResult> results);
    private void OnErrorsChanged(string propertyName);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ErrorsChanged(EventHandler`1<DataErrorsChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ErrorsChanged(EventHandler`1<DataErrorsChangedEventArgs> value);
    public sealed virtual bool get_HasErrors();
    public sealed virtual IEnumerable GetErrors(string propertyName);
    public IEnumerable GetErrors(string propertyName, bool ensureValidated);
    public sealed virtual object GetService(Type serviceType);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__13_0();
    [CompilerGeneratedAttribute]
private void <EnsureSubscribed>b__15_0(object _, PropertyChangedEventArgs args);
}
[ExtensionAttribute]
public static class JetBrains.IDE.UI.Extensions.Validation.ObjectValidatorExtensions : object {
    [ExtensionAttribute]
public static bool IsPropertyValid(ObjectValidator`1<T> validator, Expression`1<Func`2<T, TValue>> propertyRef, bool ensureValidated);
    [ExtensionAttribute]
[ContractAnnotationAttribute("=> false, value: null; => true, value: notnull")]
public static bool TryGetValid(ObjectValidator`1<T> validator, Expression`1<Func`2<T, TValue>> propertyRef, TValue& value);
    [ExtensionAttribute]
[ContractAnnotationAttribute("=> false, value: null; => true, value: notnull")]
public static bool TryGetValidValue(ObjectValidator`1<T> validator, Expression`1<Func`2<T, IBindable`1<TValue>>> propertyRef, TValue& value);
    [ExtensionAttribute]
[ContractAnnotationAttribute("=> false, value: null; => true, value: notnull")]
public static bool TryGetValidValue(ObjectValidator`1<T> validator, Expression`1<Func`2<T, IProperty`1<TValue>>> propertyRef, TValue& value);
    [ExtensionAttribute]
[NotNullAttribute]
private static Func`2<T, TValue> GetPropertyAccessor(ObjectValidator`1<T> validator, Expression`1<Func`2<T, TValue>> propertyRef);
    [ExtensionAttribute]
[NotNullAttribute]
private static Func`2<T, TValue> GetPropertyAccessor(ObjectValidator`1<T> validator, Expression`1<Func`2<T, IBindable`1<TValue>>> propertyRef);
    [ExtensionAttribute]
[NotNullAttribute]
private static Func`2<T, TValue> GetPropertyAccessor(ObjectValidator`1<T> validator, Expression`1<Func`2<T, IProperty`1<TValue>>> propertyRef);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IEnumerable GetErrors(ObjectValidator`1<T> validator, Expression`1<Func`2<T, TValue>> propertyRef);
}
public abstract class JetBrains.IDE.UI.Extensions.Validation.SimpleValidationRuleOnProperty`1 : ValidationRuleWithProperty`1<T> {
    protected string Message;
    protected Func`2<T, bool> ValidateAction;
    protected SimpleValidationRuleOnProperty`1(IViewableProperty`1<T> propertyToValidate, IShellLocks locks, ValidationStates states);
}
public class JetBrains.IDE.UI.Extensions.Validation.ValidationRule : object {
    private bool myFirstValueCheck;
    protected Action myValidate;
    protected ValidationResult myPassedValidationResult;
    [CompilerGeneratedAttribute]
private IProperty`1<ValidationResult> <ValidationResult>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Validated>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGuarded>k__BackingField;
    public IProperty`1<ValidationResult> ValidationResult { get; }
    public IProperty`1<bool> Validated { get; }
    public bool IsGuarded { get; protected set; }
    public ValidationRule(Func`1<ValueTuple`3<string, IconModel, ValidationStates>> validate, IShellLocks locks, bool checkFirstValue);
    protected ValidationRule(IShellLocks locks);
    [CompilerGeneratedAttribute]
public IProperty`1<ValidationResult> get_ValidationResult();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_Validated();
    [CompilerGeneratedAttribute]
public bool get_IsGuarded();
    [CompilerGeneratedAttribute]
protected void set_IsGuarded(bool value);
    public void Validate();
    protected void InitValidate(Func`1<ValueTuple`3<string, IconModel, ValidationStates>> validate, IShellLocks locks);
    protected void GetResult(Func`1<ValueTuple`3<string, IconModel, ValidationStates>> validate);
}
internal class JetBrains.IDE.UI.Extensions.Validation.ValidationRules`1 : object {
    private ValidationResult myPassedResult;
    [CompilerGeneratedAttribute]
private ListEvents`1<ValidationRule> <Rules>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ValidationResult> <ValidationResult>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <ValidatedRulesNumber>k__BackingField;
    public ListEvents`1<ValidationRule> Rules { get; }
    public IProperty`1<ValidationResult> ValidationResult { get; }
    public IProperty`1<int> ValidatedRulesNumber { get; }
    public ValidationRules`1(Lifetime lifetime, TControlType controlWithValidation);
    [CompilerGeneratedAttribute]
public ListEvents`1<ValidationRule> get_Rules();
    [CompilerGeneratedAttribute]
public IProperty`1<ValidationResult> get_ValidationResult();
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_ValidatedRulesNumber();
    private void GetValidationResult(Lifetime lifetime, ValidationRule validationRule, TControlType controlWithValidation);
    private void Validate();
    private void Clear();
}
public class JetBrains.IDE.UI.Extensions.Validation.ValidationRuleWithProperty`1 : ValidationRule {
    public ValidationRuleWithProperty`1(IViewableProperty`1<T> propertyToValidate, Func`2<T, ValueTuple`3<string, IconModel, ValidationStates>> validate, IShellLocks locks, bool checkFirstValue);
    public ValidationRuleWithProperty`1(IShellLocks locks);
}
public class JetBrains.IDE.UI.Extensions.Validation.Validators.MustBeValidClassNameAttribute : RegularExpressionAttribute {
    public MustBeValidClassNameAttribute(string pattern);
}
public class JetBrains.IDE.UI.Extensions.Validation.Validators.MustBeValidNamespaceAttribute : RegularExpressionAttribute {
    public MustBeValidNamespaceAttribute(string pattern);
}
public class JetBrains.IDE.UI.Extensions.Validation.Validators.MustBeValidRelativePathAttribute : ReSharperValidationAttribute {
    public virtual bool IsValid(object value);
}
public class JetBrains.IDE.UI.Extensions.Validation.Validators.PathMustNotBeEmptyAttribute : RequiredAttribute {
    public virtual bool IsValid(object value);
}
public class JetBrains.IDE.UI.Extensions.Validation.Validators.PathMustNotExistAttribute : ReSharperValidationAttribute {
    private Existence myExistence;
    public bool RequiresValidationContext { get; }
    public PathMustNotExistAttribute(Existence existence);
    public virtual bool get_RequiresValidationContext();
    protected virtual bool IsValidCore(object value, ValidationContext ctx);
    protected virtual VirtualFileSystemPath GetPath(object value, ValidationContext ctx);
    protected virtual VirtualFileSystemPath GetRoot(ValidationContext ctx);
}
public abstract class JetBrains.IDE.UI.Extensions.Validation.Validators.ReSharperValidationAttribute : ValidationAttribute {
    protected virtual ValidationResult IsValid(object value, ValidationContext ctx);
    protected virtual bool IsValidCore(object value, ValidationContext ctx);
}
public class JetBrains.IDE.UI.Extensions.ValueDescription : object {
    [CompilerGeneratedAttribute]
private Enum <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public Enum Value { get; public set; }
    public string Description { get; public set; }
    [CompilerGeneratedAttribute]
public Enum get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(Enum value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
public enum JetBrains.IDE.UI.Extensions.VolumeSize : Enum {
    public int value__;
    public static VolumeSize EMPTY;
    public static VolumeSize LOW;
    public static VolumeSize MEDIUM;
    public static VolumeSize HIGH;
}
public interface JetBrains.IDE.UI.IBePopupHost {
    public abstract virtual void Show(Func`2<Lifetime, BePopup> getPopup, Lifetime parentLifetime, Action onDialogDispose);
    public abstract virtual BeValidationLabel ShowValidationPopup(IProperty`1<string> propertyToValidate, Lifetime lifetime, ITextControl textControl, TextRange range, ITextControlIdHost textControlIdHost);
}
[ShellComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.IDE.UI.IconHostBase : object {
    public IShellLocks Locks;
    public IconHostBase(IShellLocks locks, IProtocol protocol);
    public virtual IconModel Transform(IconId iconId);
    public virtual IconId UnTransform(IconModel icon);
}
public interface JetBrains.IDE.UI.IDialogHost {
    [ObsoleteAttribute("Use overload with Func<Lifetime, BeDialog>, it guarantees that lifetime for this dialog will be terminated")]
public abstract virtual void Show(BeDialog dialog, Lifetime parentLifetime, Action onDialogDispose);
    public abstract virtual void Show(Func`2<Lifetime, BeDialog> getDialog, Lifetime parentLifetime, Action onDialogDispose);
}
public interface JetBrains.IDE.UI.IIconHost {
    [CanBeNullAttribute]
[ContractAnnotationAttribute("null=>null;notnull=>notnull")]
public abstract virtual IconModel Transform(IconId iconId);
    [CanBeNullAttribute]
public abstract virtual IconId UnTransform(IconModel icon);
}
public interface JetBrains.IDE.UI.IToolWindowHost {
    public abstract virtual void Show(BeToolWindow toolWindow, Lifetime parentLifetime);
    public abstract virtual void Show(Func`2<Lifetime, BeToolWindow> getDialog, Lifetime parentLifetime);
    public abstract virtual void Dismiss(string toolWindowId, string tabId);
}
public abstract class JetBrains.IDE.UI.Options.BeOptionsPageTableModel`4 : object {
    protected Lifetime myLifetime;
    private IContextBoundSettingsStore myOptionsSettingsSmartContext;
    protected IconHostBase myIconHost;
    public IProperty`1<T> SelectedEntry;
    public IListEvents`1<T> Entries;
    [CompilerGeneratedAttribute]
private Dictionary`2<SettingsKey, object> <Mapping>k__BackingField;
    protected Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> myExpression;
    private GroupingEvent mySaveGroupingEvent;
    public Dictionary`2<SettingsKey, object> Mapping { get; }
    protected BeOptionsPageTableModel`4(Lifetime lifetime, IContextBoundSettingsStore optionsSettingsSmartContext, IconHostBase iconHost, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> expression, IThreading threading);
    [CompilerGeneratedAttribute]
public Dictionary`2<SettingsKey, object> get_Mapping();
    private void AddEntry(ValueTuple`2<TEntryIndex, TEntryValue> settingsEntry);
    private void RemoveEntry(TEntryIndex key);
    protected abstract virtual ValueTuple`2<TEntryIndex, TEntryValue> GetSettingsEntry(T result);
    private void LoadEntries(Lifetime lifetime);
    private IDictionary`2<object, object> GetCurrentValues();
    public virtual BeControl GetTableWithToolbar(BeDock dock, String[] columnsAndSizes);
    protected virtual BeControl CustomizeToolbar(BeToolbar list);
    protected virtual void OnChange();
    public abstract virtual T CreateNewEntry(GroupingEvent saveGroupingEvent);
    public abstract virtual T GetEntryFromSettings(GroupingEvent saveGroupingEvent, ValueTuple`2<object, object> settingsEntry);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_0(AddRemoveEventArgs`1<T> s);
    [CompilerGeneratedAttribute]
private T <LoadEntries>b__14_0(KeyValuePair`2<object, object> v);
    [CompilerGeneratedAttribute]
private List`1<BeControl> <GetTableWithToolbar>b__16_0(Lifetime entryLt, T entry, ListNodeProperties properties);
    [CompilerGeneratedAttribute]
private T <CustomizeToolbar>b__17_0(int i);
    [CompilerGeneratedAttribute]
private void <CustomizeToolbar>b__17_1(int i);
}
public class JetBrains.IDE.UI.Options.BeSimpleOptionsPage : AAutomation {
    protected static int TopMargin;
    protected static int SideMargin;
    public Lifetime Lifetime;
    public OptionsPageContext OptionsPageContext;
    public OptionsSettingsSmartContext OptionsSettingsSmartContext;
    private bool myWrapInScrollablePanel;
    private int myIndent;
    private List`1<BeControl> myOptionEntities;
    private Dictionary`2<BeControl, bool> myIsStar;
    private List`1<OptionsPageKeyword> myKeywords;
    private BeControl myContent;
    [CompilerGeneratedAttribute]
private ISignal`1<Unit> <Reload>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<OptionsFilterResult> <SearchFilter>k__BackingField;
    public ISignal`1<Unit> Reload { get; }
    unknown bool IsAutoScrollEnabled {public set; }
    [NotNullAttribute]
public BeControl Content { get; }
    public string Id { get; }
    public IProperty`1<OptionsFilterResult> SearchFilter { get; }
    public BeSimpleOptionsPage(Lifetime lifetime, OptionsPageContext optionsPageContext, OptionsSettingsSmartContext optionsSettingsSmartContext, bool wrapInScrollablePanel);
    public void AddControl(BeControl control, bool isStar, BeMargin margin);
    public void AddControl(BeControl control, Lifetime lifetime, bool isStar, BeMargin margin);
    public void SetCustomTooltip(BeControl beControl, string title, string text, IIconHost iconHost, BeLink link);
    protected TControl WrapControlForDisabled(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, Func`2<IProperty`1<TEntryMemberType>, TControl> getControl, string customTooltip, ICalculatedSettingsSchema calculatedSettingsSchema);
    protected TControl AddControl(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, Func`2<IProperty`1<TEntryMemberType>, TControl> getControl, bool isStar, BeMargin margin, ICalculatedSettingsSchema calculatedSettingsSchema);
    protected TControl WrapControlForDisabled(IProperty`1<T> source, Func`2<IProperty`1<T>, TControl> getControl, string customTooltip);
    protected TControl AddControlWithProperty(IProperty`1<T> source, Func`2<IProperty`1<T>, TControl> getControl, bool isStar, BeMargin margin, string customTooltip);
    protected void PlaceLastControlsHorizontally(int number);
    protected void AddCommentText(string text);
    public void AddTextBox(Lifetime lifetime, Expression`1<Func`2<TKeyClass, string>> lambdaExpression, string description, string id);
    public static BeRichText CreateCommentText(string text);
    public BeControl AddFolderChooserOption(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, string id, FileSystemPath initialValue, IconHostBase iconHost, ICommonFileDialogs dialogs, List`1<FileSystemPath> defaultValues, string prefix, ValueTuple`2[] simpleRules, Func`2<FileSystemPath, ValueTuple`2<string, ValidationStates>> additionalValidation, Func`1<FileSystemPath> resetHandler);
    public BeControl AddFolderChooserOption(Expression`1<Func`2<TKeyClass, string>> lambdaExpression, string id, FileSystemPath initialValue, IIconHost iconHost, ICommonFileDialogs dialogs, string prefix, List`1<FileSystemPath> defaultValues, ValueTuple`2[] simpleRules, Func`2<FileSystemPath, ValueTuple`2<string, ValidationStates>> additionalValidation, Func`1<FileSystemPath> resetHandler);
    protected BeControl AddFolderChooserOption(IProperty`1<string> stringPathProperty, FileSystemPath initialValue, FileSystemPath valueToRevertTo, IIconHost iconHost, ICommonFileDialogs dialogs, IEnumerable`1<string> predefinedValues, string prefix, ValueTuple`2[] simpleRules, Func`2<FileSystemPath, ValueTuple`2<string, ValidationStates>> additionalValidation, Func`1<FileSystemPath> resetHandler);
    public BeControl AddFileChooserOption(IProperty`1<FileSystemPath> setting, string toolTipText, FileSystemPath initialValue, IconHostBase iconHost, ICommonFileDialogs dialogs, FileSystemPath valueToRevertTo, bool canBeEmpty, string prefix, IEnumerable`1<string> predefinedValues, ValueTuple`2[] simpleRules, Func`2<FileSystemPath, ValueTuple`2<string, ValidationStates>> additionalValidation, Func`1<FileSystemPath> resetHandler);
    public BeControl AddFileChooserOption(IProperty`1<FileSystemPath> setting, string toolTipText, FileSystemPath initialValue, IconHostBase iconHost, ICommonFileDialogs dialogs, FileSystemPath valueToRevertTo, bool canBeEmpty, string prefix, ValueTuple`2[] simpleRules, Func`2<FileSystemPath, ValueTuple`2<string, ValidationStates>> additionalValidation, Func`1<FileSystemPath> resetHandler);
    protected BeControl AddTableOption(Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryClass, TEntryValue>>> lambdaExpression, OptionsTableConfiguration`3<TKeyClass, TEntryClass, TEntryValue> configuration, IIconHost iconHost, string description, bool fillExistingSpace, BeBackendContextMenu contextMenu);
    protected BeControl GetTableOption(Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryClass, TEntryValue>>> lambdaExpression, OptionsTableConfiguration`3<TKeyClass, TEntryClass, TEntryValue> configuration, IIconHost iconHost, string description, BeBackendContextMenu contextMenu);
    protected BeControl AddTextBox(Expression`1<Func`2<TKeyClass, string>> lambdaExpression, string description);
    public BeControl AddRadioOption(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, string caption, RadioOptionPoint[] radioOptionPoints);
    private BeControl AddRadioOption(IProperty`1<TEntryMemberType> sourceProperty, string caption, RadioOptionPoint[] radioOptionPoints);
    private BeControl AddRadioOption(IProperty`1<TEntryMemberType> sourceProperty, BeControl caption, RadioOptionPoint[] radioOptionPoints);
    private BeControl GetAdditionalContentFromRadioOptionPoint(RadioOptionPoint point);
    private BeAbstractText GetPresentationFromRadioOptionPoint(RadioOptionPoint rop);
    public BeControl AddRadioOptionWithComment(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, string caption, string suffixCommentText, RadioOptionPoint[] radioOptionPoints);
    public BeControl AddComboOption(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, IEnumerable`1<TEntryMemberType> values, Func`2<TEntryMemberType, RichText> getPresentation, Func`2<TEntryMemberType, TEntryMemberType> defaultValue, string prefix, string suffix);
    public BeControl AddComboOption(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, IEnumerable`1<TEntryMemberType> values, Func`2<TEntryMemberType, string> getPresentation, Func`2<TEntryMemberType, TEntryMemberType> defaultValue, string prefix, string suffix);
    protected BeControl AddComboOption(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, Func`2<IProperty`1<TEntryMemberType>, BeComboBox> getPresentation, Func`2<TEntryMemberType, TEntryMemberType> defaultValue, string prefix, string suffix);
    public BeControl AddComboOption(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, IListEvents`1<TEntryMemberType> values, Func`2<TEntryMemberType, string> getPresentation, Func`2<TEntryMemberType, TEntryMemberType> defaultValue, string prefix, string suffix);
    private BeComboBox GetBeComboBox(IEnumerable`1<TEntryMemberType> values, Func`2<TEntryMemberType, BeControl> getPresentation, IProperty`1<TEntryMemberType> propertySourceToSettings);
    private BeComboBox GetBeComboBox(IListEvents`1<TEntryMemberType> values, Func`2<TEntryMemberType, BeControl> getPresentation, IProperty`1<TEntryMemberType> propertySourceToSettings);
    public BeControl AddComboOptionFromEnum(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, Func`2<TEntryMemberType, string> getPresentation, IEnumerable`1<TEntryMemberType> exclude, string prefix, string suffix);
    public BeControl AddComboOption(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, string prefix, string suffix, string tooltip, RadioOptionPoint[] values);
    [PublicAPIAttribute]
public BeControl AddComboOption(IProperty`1<object> valueProperty, string prefix, string suffix, string tooltip, RadioOptionPoint[] values);
    [PublicAPIAttribute]
private BeControl AddComboOption(IProperty`1<T> valueProperty, string prefix, string suffix, string tooltip, IEnumerable`1<RadioOptionPoint> values);
    public BeControl AddComboEnum(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, string caption);
    public BeControl AddComboEnum(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, string caption, IEnumerable`1<TEntryMemberType> except);
    public BeControl AddComboEnum(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, string caption, Func`2<TEntryMemberType, string> getPresentation);
    public BeControl AddComboEnum(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, string caption, Func`2<TEntryMemberType, string> getPresentation, IEnumerable`1<TEntryMemberType> except);
    public BeControl AddComboEnum(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, string caption, Func`2<TEntryMemberType, RichText> getPresentation);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<Unit> get_Reload();
    public void set_IsAutoScrollEnabled(bool value);
    protected OptionsPageAttribute GetOptionPageAttribute();
    private BeUnitSize GetControlSize(BeControl control);
    protected virtual void BeforeControlCreated();
    [NotNullAttribute]
private BeControl CreateControl();
    public BeControl get_Content();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    public virtual bool OnOk();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<OptionsFilterResult> get_SearchFilter();
    public virtual OptionsPageKeywords GetKeywords();
    public virtual IEnumerable`1<string> GetTagKeywordsForPage();
    public sealed virtual void HighLightKeyword(OptionsFilterResult text);
    public void AddKeyword(OptionsPageKeyword keyword);
    [PublicAPIAttribute]
public void AddKeyword(string keyword, String[] extraKeywords);
    [PublicAPIAttribute]
public BeControl AddHeader(string text);
    [PublicAPIAttribute]
public BeControl AddHeaderWithoutCapitalization(string text);
    [PublicAPIAttribute]
public BeControl AddText(string text, BeFontSize fontSize);
    [PublicAPIAttribute]
public BeControl AddLinkButton(string id, string text, Action onClick);
    [PublicAPIAttribute]
public BeCheckbox AddBoolOption(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, TEntryMemberType trueValue, TEntryMemberType falseValue, RichText text, string toolTipText);
    [PublicAPIAttribute]
public BeCheckbox AddBoolOption(IProperty`1<bool> checkedProperty, RichText text, string finalToolTipText);
    public BeCheckbox AddBoolOption(IProperty`1<bool> checkedProperty, RichText text, string finalToolTipText, bool valueIfDisabled);
    public BeCheckbox AddBoolOption(Expression`1<Func`2<TKeyClass, bool>> lambdaExpression, RichText text, string toolTipText, bool valueIfDisabled);
    public BeCheckbox AddBoolOption(Expression`1<Func`2<TKeyClass, bool>> lambdaExpression, RichText text, bool boldText, ICalculatedSettingsSchema calculatedSettingsSchema);
    public BeCheckbox AddBoolOption(Expression`1<Func`2<TKeyClass, bool>> lambdaExpression, RichText text, string toolTipText, bool valueIfDisabled, bool boldText, ICalculatedSettingsSchema calculatedSettingsSchema);
    public BeCheckbox AddBoolOptionWithComment(Expression`1<Func`2<TKeyClass, bool>> lambdaExpression, string text, string suffixCommentText);
    [ObsoleteAttribute("Use using(Indent()) instead")]
public void SetIndent(BeControl control, int indent);
    protected IndentCookie Indent();
    public void AddBinding(BeControl target, BindingStyle bindingStyle, Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, Func`2<TEntryMemberType, object> convertFunc);
    [PublicAPIAttribute]
public void AddBinding(BeControl target, BindingStyle bindingStyle, IProperty`1<TEntryMemberType> sourceProperty, Func`2<TEntryMemberType, object> convertFunc);
    protected BeControl AddStringOptionWithValidation(Lifetime lifetime, Expression`1<Func`2<TKeyClass, string>> lambdaExpression, string text, Func`2<string, bool> validate, string errorMessage, string toolTipText, bool acceptsReturn);
    protected BeControl AddStringOptionWithMultipleValidationRules(Lifetime lifetime, Expression`1<Func`2<TKeyClass, string>> lambdaExpression, string text, string toolTipText, bool acceptsReturn, BeInvalidValuePropagation propagateInvalidValue, BeTextValidationData[] validationRules);
    public BeControl AddRichText(RichText richText);
    public BeSpacer AddSpacer();
    public BeControl AddButton(string caption, Action action);
    protected IProperty`1<TEntryMemberType> GetProperty(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression);
    protected BeControl AddIntOption(Expression`1<Func`2<TKeyClass, int>> lambdaExpression, string text, string toolTipText, int minValue, int step, int maxValue, string postfixText);
    protected BeControl AddIntOption(Expression`1<Func`2<TKeyClass, int>> lambdaExpression, string text, Func`2<int, string> postfixText, string toolTipText, int minValue, int step, int maxValue);
    private BeControl AddIntOption(string text, IProperty`1<int> sourceProperty, int minValue, int step, int maxValue, BeLabel postfixLabel, string finalToolTipText);
    protected BeControl AddIntOption(Expression`1<Func`2<TKeyClass, T>> lambdaExpression, string text, Func`2<T, int> convert, Func`2<int, T> convertBack, string toolTipText, int minValue, int step, int maxValue, string postfixText);
    protected BeControl AddStringOption(Expression`1<Func`2<TKeyClass, string>> lambdaExpression, string text, string toolTipText, bool acceptsReturn);
    private BeGrid WrapWithPrefixAndSuffix(string prefix, BeControl suffix, BeControl beComboBox);
    protected void AddEmptyLine();
    protected void AddVolumeSize(Lifetime lifetime, double fraction, VolumeSize volumeSize, string header, string info);
    public static OptionsSettingsSmartContext GetOptionsSettingsSmartContextForSolutionIfAvailable(OptionsSettingsSmartContext origin, ISettingsStore settingsStore, Lifetime lifetime, ISolution solution, IContextBoundSettingsStoreLive storeCleanTransactionForLayer);
    public static void AddSolutionLayerIsDefaultNotification(BeSimpleOptionsPage optionsPage, Lifetime lifetime, IIconHost iconHost, HelpSystem helpSystem, bool isResharper);
    public static BeControl GetSolutionLayerIsDefaultNotification(Lifetime lifetime, IIconHost iconHost, HelpSystem helpSystem, bool isResharper, bool isSectionNotification);
    protected void AddNotification(string text, IIconHost iconHost, HelpId helpTopicId, HelpSystem helpSystem, string linkText);
    protected BeControl AddNotification(string text, IIconHost iconHost, Action action, string linkText);
    public void AddNotification(string text, IIconHost iconHost);
    private static BeControl GetNotificationControl(Lifetime lifetime, IIconHost iconHost, BeControl[] controls);
    protected BeControl GetStringListWithCheckBoxes(Expression`1<Func`2<T, IIndexedEntry`2<string, bool>>> settingsExpression, string description, string addButtonText, string secondaryEmptyText, IIconHost iconHost, IDialogHost dialogHost, IWindowBranding windowBranding, Action`2<IList`1<CheckedItemPresenter>, CheckedItemPresenter> addOrEditValue, Func`2<IReadOnlyCollection`1<CheckedItemPresenter>, string> getItemsRemovalConfirmationText, Func`2<string, ValueTuple`2<IconId, RichTextModel>> valuePresenter);
    private BeControl GetAddButton(IList`1<CheckedItemPresenter> items, string text, Action`2<IList`1<CheckedItemPresenter>, CheckedItemPresenter> addOrEditValue, IIconHost iconHost);
    private BeControl GetEditButton(IList`1<CheckedItemPresenter> items, IReadonlyCollectionEvents`1<CheckedItemPresenter> selectedItems, Action`2<IList`1<CheckedItemPresenter>, CheckedItemPresenter> addOrEditValue, IIconHost iconHost);
    private BeControl GetRemoveButton(IList`1<CheckedItemPresenter> items, IReadonlyCollectionEvents`1<CheckedItemPresenter> selectedItems, Func`2<IReadOnlyCollection`1<CheckedItemPresenter>, string> getItemsRemovalConfirmationText, IIconHost iconHost, IDialogHost dialogHost, IWindowBranding windowBranding);
    protected static BeDialog GetEditDialog(Lifetime lifetime, Func`3<Lifetime, string, TData> createDialogData, Func`3<Lifetime, TData, BeControl> getDialogContent, Action`1<TData> onOk, string title, string value);
    protected void ApplyNewValue(IList`1<CheckedItemPresenter> items, CheckedItemPresenter selectedItem, string newValue);
    protected static RichTextModel GetColoredRichTextModel(IEnumerable`1<ValueTuple`2<string, Nullable`1<ColorId>>> parts);
    [CompilerGeneratedAttribute]
private BeComboBox <AddComboEnum>b__36_0(IProperty`1<TEntryMemberType> property);
    [CompilerGeneratedAttribute]
private BeGridElement <CreateControl>b__61_0(BeControl it);
}
public interface JetBrains.IDE.UI.Options.IOptionsTreeGridConfiguration {
}
[SolutionComponentAttribute("10")]
public class JetBrains.IDE.UI.Options.OptionsPageViewFactorySolution : object {
    private static double Priority;
    public OptionsPageViewFactorySolution(Lifetime lifetime, ISolution solution, IComponentContainer containerParent, OptionsPageViewFactoryManager optionsPageViewFactoryManager);
    private static OptionsPageViewFactorySolution();
}
public class JetBrains.IDE.UI.Options.OptionsTableColumn`2 : object {
    private Func`3<TableEntry`2<TEntryClass, TEntryValue>, Lifetime, BeControl> myPresentation;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private BeSizingType <Size>k__BackingField;
    public string Name { get; }
    public BeSizingType Size { get; }
    public OptionsTableColumn`2(string columnName, BeSizingType size, Func`3<TableEntry`2<TEntryClass, TEntryValue>, Lifetime, BeControl> getControl);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public BeSizingType get_Size();
    public BeControl GetPresentation(TableEntry`2<TEntryClass, TEntryValue> settingsEntry, Lifetime lifetime);
}
public class JetBrains.IDE.UI.Options.OptionsTableConfiguration`3 : object {
    private TableModel`3<TKeyClass, TEntryClass, TEntryValue> myModel;
    [CompilerGeneratedAttribute]
private TEntryClass <DefaultKey>k__BackingField;
    [CompilerGeneratedAttribute]
private TEntryValue <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<OptionsTableColumn`2<TEntryClass, TEntryValue>> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddRemoveButtons>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReorderButtons>k__BackingField;
    private TEntryClass DefaultKey { get; }
    private TEntryValue DefaultValue { get; }
    public List`1<OptionsTableColumn`2<TEntryClass, TEntryValue>> Columns { get; public set; }
    public bool AddRemoveButtons { get; public set; }
    public bool ReorderButtons { get; public set; }
    public IProperty`1<TableEntry`2<TEntryClass, TEntryValue>> SelectedEntry { get; }
    public OptionsTableConfiguration`3(TEntryClass defaultKey, TEntryValue defaultValue);
    [CompilerGeneratedAttribute]
private TEntryClass get_DefaultKey();
    [CompilerGeneratedAttribute]
private TEntryValue get_DefaultValue();
    public OptionsTableConfiguration`3<TKeyClass, TEntryClass, TEntryValue> AddColumn(string columnName, BeSizingType size, Func`3<TableEntry`2<TEntryClass, TEntryValue>, Lifetime, BeControl> getControl);
    public OptionsTableConfiguration`3<TKeyClass, TEntryClass, TEntryValue> AddStringColumnFromValue(string columnName, BeSizingType size, Func`2<TEntryValue, string> convert, Func`2<string, TEntryValue> convertBack, BeSimpleStringValidationRules[] rules);
    public OptionsTableConfiguration`3<TKeyClass, TEntryClass, TEntryValue> AddStringColumnFromKey(string columnName, BeSizingType size, Func`2<TEntryClass, string> convert, Func`2<string, TEntryClass> convertBack);
    [CompilerGeneratedAttribute]
public List`1<OptionsTableColumn`2<TEntryClass, TEntryValue>> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(List`1<OptionsTableColumn`2<TEntryClass, TEntryValue>> value);
    [CompilerGeneratedAttribute]
public bool get_AddRemoveButtons();
    [CompilerGeneratedAttribute]
public void set_AddRemoveButtons(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReorderButtons();
    [CompilerGeneratedAttribute]
public void set_ReorderButtons(bool value);
    public String[] GetColumnsString();
    public BeControl LoadCustomization(BeControl control, Lifetime lifetime);
    public BeToolbar LoadToolbar(BeToolbar toolbar);
    [NotNullAttribute]
public BeToolbar LoadFilesAndDirsToolbar(BeToolbar toolbar, Lifetime lifetime, ISolution solution, IShellLocks locks, ICommonFileDialogs commonFileDialogs, IEnumerable`1<string> additionalPaths, BeAbstractText addFileButtonControl, BeAbstractText addFolderButtonControl);
    public OptionsTableConfiguration`3<TKeyClass, TEntryClass, TEntryValue> AddAddRemoveButtons();
    public OptionsTableConfiguration`3<TKeyClass, TEntryClass, TEntryValue> AddReorderButtons();
    public IProperty`1<TableEntry`2<TEntryClass, TEntryValue>> get_SelectedEntry();
    public BeToolbar GetTable(Lifetime lifetime, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryClass, TEntryValue>>> lambdaExpression, OptionsSettingsSmartContext smartContext, IIconHost iconHost, BeBackendContextMenu contextMenu, Predicate`1<TableEntry`2<TEntryClass, TEntryValue>> showTableEntryFilter);
    [CompilerGeneratedAttribute]
private TableEntry`2<TEntryClass, TEntryValue> <LoadToolbar>b__26_0(int _);
    [CompilerGeneratedAttribute]
private List`1<BeControl> <GetTable>b__32_0(Lifetime entryLt, TableEntry`2<TEntryClass, TEntryValue> line, ListNodeProperties properties);
}
public class JetBrains.IDE.UI.Options.TableEntry`2 : object {
    private LifetimeDefinition myLifetime;
    [CompilerGeneratedAttribute]
private IProperty`1<TEntryClass> <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<TEntryValue> <Value>k__BackingField;
    public IProperty`1<TEntryClass> Key { get; }
    public IProperty`1<TEntryValue> Value { get; }
    public TableEntry`2(Lifetime lifetime, ISimpleSignal saveRequested, TEntryClass initialKey, TEntryValue initialValue, bool acknowledgeChangeOnAdd);
    [CompilerGeneratedAttribute]
public IProperty`1<TEntryClass> get_Key();
    [CompilerGeneratedAttribute]
public IProperty`1<TEntryValue> get_Value();
    public void Terminate();
}
public class JetBrains.IDE.UI.Options.TableModel`3 : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
private OptionsSettingsSmartContext mySmartContext;
    [NotNullAttribute]
private FreeThreadedGroupingEvent mySaveRequested;
    [NotNullAttribute]
private Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryClass, TEntryValue>>> myLambdaExpression;
    [CompilerGeneratedAttribute]
private ListEvents`1<TableEntry`2<TEntryClass, TEntryValue>> <Entries>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<TableEntry`2<TEntryClass, TEntryValue>> <SelectedEntry>k__BackingField;
    public ListEvents`1<TableEntry`2<TEntryClass, TEntryValue>> Entries { get; }
    public IProperty`1<TableEntry`2<TEntryClass, TEntryValue>> SelectedEntry { get; }
    public TableModel`3(Lifetime lifetime, OptionsSettingsSmartContext smartContext, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryClass, TEntryValue>>> lambdaExpression, string eventId, Predicate`1<TableEntry`2<TEntryClass, TEntryValue>> filter);
    [CompilerGeneratedAttribute]
public ListEvents`1<TableEntry`2<TEntryClass, TEntryValue>> get_Entries();
    [CompilerGeneratedAttribute]
public IProperty`1<TableEntry`2<TEntryClass, TEntryValue>> get_SelectedEntry();
    public TableEntry`2<TEntryClass, TEntryValue> GetNewEntry(TEntryClass defaultKey, TEntryValue defaultValue);
    public TableEntry`2<TEntryClass, TEntryValue> GetNewEntryWithAcknowledgement(TEntryClass defaultKey, TEntryValue defaultValue);
    public void RemoveSelectedEntry(int i);
    private void Save();
    private Dictionary`2<TEntryClass, TEntryValue> GetValuesFromSettings();
}
public abstract class JetBrains.IDE.UI.Options.TableModelEntry : object {
    [NotNullAttribute]
private ISimpleSignal saveRequested;
    protected TableModelEntry(ISimpleSignal saveRequested);
    public abstract virtual List`1<BeControl> GetPresentation(IIconHost iconHost, Lifetime entryLt);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.IDE.UI.SolutionToolWindowContent`1 : NestedContainerToolWindowContent`1<TContent> {
    public SolutionToolWindowContent`1(Lifetime lifetime, Optional`1<ToolWindowInstance> twi, SolutionsManager solman, IAsyncComposeManager asyncComposeManager, IThreading threading);
}
[ShellComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.IDE.UI.ToolWindowHost : object {
    [NotNullAttribute]
private UIAutomationInteractionModel myAutomationInteractionModel;
    public ToolWindowHost(UIAutomationInteractionModel automationInteractionModel);
    public sealed virtual void Show(BeToolWindow toolWindow, Lifetime parentLifetime);
    public sealed virtual void Dismiss(string toolWindowId, string sessionId);
    public sealed virtual void Show(Func`2<Lifetime, BeToolWindow> getToolWindow, Lifetime parentLifetime);
}
[ExtensionAttribute]
public static class JetBrains.IDE.UsageStatistics.ActivityUsage : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static ActivityUsedNTimesCondition UsedAtLeastOnce(ActivityDescriptor activityDescriptor);
    [ExtensionAttribute]
[NotNullAttribute]
public static ActivityUsedNTimesCondition UsedAtLeastOnce(IActionDefWithId actionDef);
    [ExtensionAttribute]
[NotNullAttribute]
public static ActivityUsedNTimesCondition UsedAtLeastTwice(ActivityDescriptor activityDescriptor);
    [ExtensionAttribute]
[NotNullAttribute]
public static ActivityUsedNTimesCondition UsedAtLeastTwice(IActionDefWithId actionDef);
    [ExtensionAttribute]
[NotNullAttribute]
public static ActivityUsedNTimesCondition UsedAtLeastNTimes(ActivityDescriptor activityDescriptor, int times);
    [ExtensionAttribute]
[NotNullAttribute]
public static ActivityUsedNTimesCondition UsedAtLeastNTimes(IActionDefWithId actionDef, int times);
    [NotNullAttribute]
public static AnyActivityUsedCondition WhenAny(IActivityUsageCondition[] activityUsageConditions);
    [NotNullAttribute]
public static AnyActivityUsedCondition WhenAny(IEnumerable`1<IActivityUsageCondition> activityUsageTriggers);
    [NotNullAttribute]
public static AllActivitiesUsedCondition WhenAll(IActivityUsageCondition[] activityUsageConditions);
    [NotNullAttribute]
public static AllActivitiesUsedCondition WhenAll(IEnumerable`1<IActivityUsageCondition> activityUsageTriggers);
    [ExtensionAttribute]
public static ActivityDescriptor ToActivityDescriptor(IActionDefWithId action);
}
public class JetBrains.IDE.UsageStatistics.ActivityUsedNTimesCondition : object {
    [CompilerGeneratedAttribute]
private ActivityDescriptor <ActivityDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Threshold>k__BackingField;
    public ActivityDescriptor ActivityDescriptor { get; }
    public int Threshold { get; }
    public ActivityUsedNTimesCondition(ActivityDescriptor activityDescriptor, int threshold);
    [CompilerGeneratedAttribute]
public ActivityDescriptor get_ActivityDescriptor();
    [CompilerGeneratedAttribute]
public int get_Threshold();
    public sealed virtual Lifetime Advise(Lifetime lifetime, IUsageStatisticsCounters statisticsCounters, Action action);
}
public class JetBrains.IDE.UsageStatistics.AllActivitiesUsedCondition : object {
    [NotNullAttribute]
private IActivityUsageCondition[] myActivityUsageConditions;
    [CompilerGeneratedAttribute]
private Action`1<IActivityUsageCondition> <WhenSome>k__BackingField;
    [CanBeNullAttribute]
public Action`1<IActivityUsageCondition> WhenSome { get; public set; }
    public AllActivitiesUsedCondition(IActivityUsageCondition[] activityUsageConditions);
    [CompilerGeneratedAttribute]
public Action`1<IActivityUsageCondition> get_WhenSome();
    [CompilerGeneratedAttribute]
public void set_WhenSome(Action`1<IActivityUsageCondition> value);
    public sealed virtual Lifetime Advise(Lifetime lifetime, IUsageStatisticsCounters statisticsCounters, Action action);
}
public class JetBrains.IDE.UsageStatistics.AnyActivityUsedCondition : object {
    [NotNullAttribute]
private IActivityUsageCondition[] myActivityUsageConditions;
    public AnyActivityUsedCondition(IActivityUsageCondition[] activityUsageConditions);
    public sealed virtual Lifetime Advise(Lifetime lifetime, IUsageStatisticsCounters statisticsCounters, Action action);
}
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.IDE.UsageStatistics.FileTypesUsagesCollector : CounterUsagesCollector {
    private EventLogGroup myGroup;
    private EventId1`1<string> myEdited;
    private EventId1`1<string> myOpened;
    private EventId1`1<string> myClosed;
    public FileTypesUsagesCollector(FeatureUsageLogger featureUsageLogger);
    public virtual EventLogGroup GetGroup();
    public void LogOpened(ISolution solution, string ext);
    public void LogClosed(ISolution solution, string ext);
    public void LogEdited(ISolution solution, string ext);
}
public interface JetBrains.IDE.UsageStatistics.IActivityUsageCondition {
    public abstract virtual Lifetime Advise(Lifetime lifetime, IUsageStatisticsCounters statisticsCounters, Action action);
}
public interface JetBrains.IDE.UsageStatistics.ILicensedEntityUsageCheckerByProject {
    [CanBeNullAttribute]
public abstract virtual ILicensedEntity GetUsedLicensedEntity(IProject project);
}
public interface JetBrains.IDE.UsageStatistics.IProjectTechnologyProvider {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<string> GetProjectTechnology(IProject project);
}
public interface JetBrains.IDE.UsageStatistics.ISolutionTechnologyProvider {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<string> GetSolutionTechnology(ISolution solution);
}
[SolutionComponentAttribute("10")]
public class JetBrains.IDE.UsageStatistics.LicensedEntityUsageTrackerSolutionComponent : object {
    private ILicense2CheckComponent myLicense2CheckComponent;
    public LicensedEntityUsageTrackerSolutionComponent(Lifetime lifetime, LicensedEntityUsageTracker usageTracker, ISolution solution, IViewableProjectsCollection projects, IEnumerable`1<ILicensedEntityUsageCheckerByProject> checkers, IShellLocks locks, ISolutionLoadTasksScheduler scheduler, ILicense2CheckComponent license2CheckComponent);
    private void MarkEntitiesUsed(LicensedEntityUsageTracker usageTracker, ICollection`1<ILicensedEntityUsageCheckerByProject> checkers, ICollection`1<IProject> projects);
}
[SolutionComponentAttribute("10")]
public class JetBrains.IDE.UsageStatistics.SolutionActivityTrackingComponent : object {
    public SolutionActivityTrackingComponent(ISolution solution, ISolutionLoadTasksScheduler scheduler, IActivityTrackingImpl activityTracking);
}
[SolutionComponentAttribute("10")]
public class JetBrains.IDE.UsageStatistics.StatisticsSessionController : object {
    public StatisticsSessionController(Lifetime lifetime, ISolutionOwner solutionOwner, ActivityTracking activityTrackingImpl);
}
[SolutionComponentAttribute("10")]
public class JetBrains.IDE.UsageStatistics.TextControlActivityTracker : object {
    private ITextControlManager myTextControlManager;
    public TextControlActivityTracker(Lifetime lifetime, ITextControlManager textControlManager, DocumentManager documentManager, IShellLocks locks, FileTypesUsagesCollector usagesCollector, ISolution solution);
}
[ShellComponentAttribute("16")]
public class JetBrains.IDE.UsageStatistics.WellKnownProjectTechnologyProvider : object {
    [IteratorStateMachineAttribute("JetBrains.IDE.UsageStatistics.WellKnownProjectTechnologyProvider/<GetProjectTechnology>d__0")]
public sealed virtual IEnumerable`1<string> GetProjectTechnology(IProject project);
    private static bool IsDotnet(IProject project);
    private static bool IsWindowsForm(IProjectFile projectFile);
}
[ZoneMarkerAttribute]
public class JetBrains.IDE.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
