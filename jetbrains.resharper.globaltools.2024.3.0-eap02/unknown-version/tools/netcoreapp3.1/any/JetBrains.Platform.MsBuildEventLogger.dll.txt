[PublicAPIAttribute]
public class JetBrains.Platform.MsBuildEventLogger.BuildLogger : object {
    private LifetimeDefinition myLifetimeDefinition;
    private Protocol myProtocol;
    private MsBuildExeLoggerModel myModel;
    private SingleThreadScheduler mySimpleSingleThreadedDispatcher;
    private ILog myLogger;
    private HashSet`1<MsBuildPath> myKnownProjectPaths;
    private MsBuildExeBuildModelInitialized myBuildModelInitialized;
    private MsBuildExeBuildModelWithParameters myBuildExeBuildModelWithParameters;
    private MsBuildExeLoggerConsumerBase myBuildExeLoggerConsumer;
    [CompilerGeneratedAttribute]
private LoggerVerbosity <Verbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Parameters>k__BackingField;
    public LoggerVerbosity Verbosity { get; public set; }
    public string Parameters { get; public set; }
    internal bool IsVerbosityAtLeast(LoggerVerbosity checkVerbosity);
    public sealed virtual void Initialize(IEventSource eventSource);
    private MsBuildEventNotificationKind NewKindToNotification(BuildEventKind newKind);
    private BuildEventKind OldKindToNewKind(MsBuildExeBuildEvent ev);
    private void TracePaths(IEnumerable`1<MsBuildPath> paths);
    private bool InitProtocol(MsBuildExeBuildModelInitialized& buildModelInitialized);
    private void EventSourceOnAnyEventRaised(object sender, BuildEventArgs args);
    private void EventSourceIfEventIsApplicable(object sender, BuildEventArgs args);
    private bool IsEventApplicable(BuildEventArgs args);
    public sealed virtual void Shutdown();
    [CompilerGeneratedAttribute]
public sealed virtual LoggerVerbosity get_Verbosity();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Verbosity(LoggerVerbosity value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Parameters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Parameters(string value);
    private void ProcessAndSendBuildEvents(BuildFinishedEventArgs buildFinishedEventArgs);
    [CompilerGeneratedAttribute]
private void <Shutdown>b__19_0();
}
public class JetBrains.Platform.MsBuildEventLogger.Models.MsBuildEventNotification : object {
    [CompilerGeneratedAttribute]
private long <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private MsBuildEventNotificationKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinesCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    public static CtxReadDelegate`1<MsBuildEventNotification> Read;
    public static CtxReadDelegate`1<Nullable`1<int>> ReadIntNullable;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxWriteDelegate`1<MsBuildEventNotification> Write;
    public static CtxWriteDelegate`1<Nullable`1<int>> WriteIntNullable;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    public long Offset { get; private set; }
    [CanBeNullAttribute]
public Nullable`1<int> ProjectId { get; private set; }
    public MsBuildEventNotificationKind Kind { get; private set; }
    public int LinesCount { get; private set; }
    [CanBeNullAttribute]
public string TargetFramework { get; private set; }
    public MsBuildEventNotification(long offset, Nullable`1<int> projectId, MsBuildEventNotificationKind kind, int linesCount, string targetFramework);
    private static MsBuildEventNotification();
    [CompilerGeneratedAttribute]
public long get_Offset();
    [CompilerGeneratedAttribute]
private void set_Offset(long value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ProjectId();
    [CompilerGeneratedAttribute]
private void set_ProjectId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public MsBuildEventNotificationKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(MsBuildEventNotificationKind value);
    [CompilerGeneratedAttribute]
public int get_LinesCount();
    [CompilerGeneratedAttribute]
private void set_LinesCount(int value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
private void set_TargetFramework(string value);
    public void Deconstruct(Int64& offset, Nullable`1& projectId, MsBuildEventNotificationKind& kind, Int32& linesCount, String& targetFramework);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MsBuildEventNotification other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public enum JetBrains.Platform.MsBuildEventLogger.Models.MsBuildEventNotificationKind : Enum {
    public int value__;
    public static MsBuildEventNotificationKind Error;
    public static MsBuildEventNotificationKind Warning;
    public static MsBuildEventNotificationKind Reference;
    public static MsBuildEventNotificationKind Info;
    public static MsBuildEventNotificationKind Message;
}
public class JetBrains.Platform.MsBuildEventLogger.Models.MsBuildExeBuildEvent : object {
    [CompilerGeneratedAttribute]
private MsBuildExeEventKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Column>k__BackingField;
    public static CtxReadDelegate`1<MsBuildExeBuildEvent> Read;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxReadDelegate`1<Nullable`1<int>> ReadIntNullable;
    public static CtxWriteDelegate`1<MsBuildExeBuildEvent> Write;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    public static CtxWriteDelegate`1<Nullable`1<int>> WriteIntNullable;
    public MsBuildExeEventKind Kind { get; private set; }
    [CanBeNullAttribute]
public string Message { get; private set; }
    [CanBeNullAttribute]
public string Code { get; private set; }
    [CanBeNullAttribute]
public string ProjectPath { get; private set; }
    [CanBeNullAttribute]
public string FilePath { get; private set; }
    [CanBeNullAttribute]
public Nullable`1<int> Line { get; private set; }
    [CanBeNullAttribute]
public Nullable`1<int> Column { get; private set; }
    public MsBuildExeBuildEvent(MsBuildExeEventKind kind, string message, string code, string projectPath, string filePath, Nullable`1<int> line, Nullable`1<int> column);
    private static MsBuildExeBuildEvent();
    [CompilerGeneratedAttribute]
public MsBuildExeEventKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(MsBuildExeEventKind value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
private void set_Code(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectPath();
    [CompilerGeneratedAttribute]
private void set_ProjectPath(string value);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
private void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Line();
    [CompilerGeneratedAttribute]
private void set_Line(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Column();
    [CompilerGeneratedAttribute]
private void set_Column(Nullable`1<int> value);
    public void Deconstruct(MsBuildExeEventKind& kind, String& message, String& code, String& projectPath, String& filePath, Nullable`1& line, Nullable`1& column);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MsBuildExeBuildEvent other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildEventLogger.Models.MsBuildExeBuildModelInitialized : RdBindableBase {
    [NotNullAttribute]
private RdProperty`1<MsBuildExeBuildModelWithParameters> _BuildModelWithParameters;
    [NotNullAttribute]
private RdSignal`1<MsBuildExeLogEntry> _Log;
    public static CtxReadDelegate`1<MsBuildExeBuildModelInitialized> Read;
    public static CtxWriteDelegate`1<MsBuildExeBuildModelInitialized> Write;
    [NotNullAttribute]
public IViewableProperty`1<MsBuildExeBuildModelWithParameters> BuildModelWithParameters { get; }
    private MsBuildExeBuildModelInitialized(RdProperty`1<MsBuildExeBuildModelWithParameters> buildModelWithParameters, RdSignal`1<MsBuildExeLogEntry> log);
    private static MsBuildExeBuildModelInitialized();
    public IViewableProperty`1<MsBuildExeBuildModelWithParameters> get_BuildModelWithParameters();
    [NotNullAttribute]
public void Log(MsBuildExeLogEntry value);
    public virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildEventLogger.Models.MsBuildExeBuildModelWithParameters : RdBindableBase {
    [CompilerGeneratedAttribute]
private bool <IsMsBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <LoadedProjectPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StoragePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SaverAppendMode>k__BackingField;
    [NotNullAttribute]
private RdSignal`1<MsBuildEventNotification> _Notifications;
    [NotNullAttribute]
private RdSignal`1<MsBuildExeBuildResult> _BuildDone;
    [NotNullAttribute]
private RdSignal`1<string> _ProjectFinished;
    [NotNullAttribute]
private RdSignal`1<string> _ProjectStarted;
    public static CtxReadDelegate`1<MsBuildExeBuildModelWithParameters> Read;
    public static CtxReadDelegate`1<List`1<string>> ReadStringList;
    public static CtxWriteDelegate`1<MsBuildExeBuildModelWithParameters> Write;
    public static CtxWriteDelegate`1<List`1<string>> WriteStringList;
    public bool IsMsBuild { get; private set; }
    [NotNullAttribute]
public List`1<string> LoadedProjectPaths { get; private set; }
    [NotNullAttribute]
public string StoragePath { get; private set; }
    public bool SaverAppendMode { get; private set; }
    private MsBuildExeBuildModelWithParameters(bool isMsBuild, List`1<string> loadedProjectPaths, string storagePath, bool saverAppendMode, RdSignal`1<MsBuildEventNotification> notifications, RdSignal`1<MsBuildExeBuildResult> buildDone, RdSignal`1<string> projectFinished, RdSignal`1<string> projectStarted);
    public MsBuildExeBuildModelWithParameters(bool isMsBuild, List`1<string> loadedProjectPaths, string storagePath, bool saverAppendMode);
    private static MsBuildExeBuildModelWithParameters();
    [CompilerGeneratedAttribute]
public bool get_IsMsBuild();
    [CompilerGeneratedAttribute]
private void set_IsMsBuild(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_LoadedProjectPaths();
    [CompilerGeneratedAttribute]
private void set_LoadedProjectPaths(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_StoragePath();
    [CompilerGeneratedAttribute]
private void set_StoragePath(string value);
    [CompilerGeneratedAttribute]
public bool get_SaverAppendMode();
    [CompilerGeneratedAttribute]
private void set_SaverAppendMode(bool value);
    [NotNullAttribute]
public void Notifications(MsBuildEventNotification value);
    [NotNullAttribute]
public void BuildDone(MsBuildExeBuildResult value);
    [NotNullAttribute]
public void ProjectFinished(string value);
    [NotNullAttribute]
public void ProjectStarted(string value);
    public virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildEventLogger.Models.MsBuildExeBuildResult : object {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    public static CtxReadDelegate`1<MsBuildExeBuildResult> Read;
    public static CtxWriteDelegate`1<MsBuildExeBuildResult> Write;
    public bool Success { get; private set; }
    public MsBuildExeBuildResult(bool success);
    private static MsBuildExeBuildResult();
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
private void set_Success(bool value);
    public void Deconstruct(Boolean& success);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MsBuildExeBuildResult other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public enum JetBrains.Platform.MsBuildEventLogger.Models.MsBuildExeEventKind : Enum {
    public int value__;
    public static MsBuildExeEventKind Error;
    public static MsBuildExeEventKind Warning;
    public static MsBuildExeEventKind Reference;
    public static MsBuildExeEventKind Other;
}
public class JetBrains.Platform.MsBuildEventLogger.Models.MsBuildExeLogEntry : object {
    [CompilerGeneratedAttribute]
private string <LogMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private MsBuildExeLogEntryType <Severity>k__BackingField;
    public static CtxReadDelegate`1<MsBuildExeLogEntry> Read;
    public static CtxWriteDelegate`1<MsBuildExeLogEntry> Write;
    [NotNullAttribute]
public string LogMessage { get; private set; }
    public MsBuildExeLogEntryType Severity { get; private set; }
    public MsBuildExeLogEntry(string logMessage, MsBuildExeLogEntryType severity);
    private static MsBuildExeLogEntry();
    [CompilerGeneratedAttribute]
public string get_LogMessage();
    [CompilerGeneratedAttribute]
private void set_LogMessage(string value);
    [CompilerGeneratedAttribute]
public MsBuildExeLogEntryType get_Severity();
    [CompilerGeneratedAttribute]
private void set_Severity(MsBuildExeLogEntryType value);
    public void Deconstruct(String& logMessage, MsBuildExeLogEntryType& severity);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MsBuildExeLogEntry other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public enum JetBrains.Platform.MsBuildEventLogger.Models.MsBuildExeLogEntryType : Enum {
    public int value__;
    public static MsBuildExeLogEntryType ERROR;
    public static MsBuildExeLogEntryType WARN;
    public static MsBuildExeLogEntryType INFO;
    public static MsBuildExeLogEntryType VERBOSE;
    public static MsBuildExeLogEntryType TRACE;
}
public class JetBrains.Platform.MsBuildEventLogger.Models.MsBuildExeLoggerModel : RdExtBase {
    [NotNullAttribute]
private RdProperty`1<MsBuildExeBuildModelInitialized> _BuildModelInitialized;
    [NotNullAttribute]
public IViewableProperty`1<MsBuildExeBuildModelInitialized> BuildModelInitialized { get; }
    protected long SerializationHash { get; }
    protected Action`1<ISerializers> Register { get; }
    private MsBuildExeLoggerModel(RdProperty`1<MsBuildExeBuildModelInitialized> buildModelInitialized);
    public MsBuildExeLoggerModel(Lifetime lifetime, IProtocol protocol);
    public IViewableProperty`1<MsBuildExeBuildModelInitialized> get_BuildModelInitialized();
    protected virtual long get_SerializationHash();
    protected virtual Action`1<ISerializers> get_Register();
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers);
    public virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
internal class JetBrains.Platform.MsBuildEventLogger.MsBuildExeLoggerConsumer : MsBuildExeLoggerConsumerBase {
    private MsBuildProjectOutputMessages myUnclassifiedMessages;
    private Dictionary`2<int, int> myProjectParents;
    private Dictionary`2<int, MsBuildProjectOutputMessages> myMessagesForProject;
    public MsBuildExeLoggerConsumer(Lifetime lifetime, ILog logger, ILogger buildLogger, HashSet`1<MsBuildPath> knownProjectPaths, string storagePath, bool appendMode);
    protected virtual MsBuildProjectOutputMessages GetMessages(BuildEventContext context);
    protected virtual void ProjectFinished(ProjectFinishedEventArgs projectFinished, MsBuildProjectOutputMessages messages);
    private static int Identity(BuildEventContext context);
    protected virtual void ProjectStarted(ProjectStartedEventArgs projectStarted);
    private static int ParentIdentity(ProjectStartedEventArgs projectStarted);
    private int NextParentId(int id);
}
public abstract class JetBrains.Platform.MsBuildEventLogger.MsBuildExeLoggerConsumerBase : object {
    private HashSet`1<string> myCompletedProjects;
    private HashSet`1<string> myStartedProjects;
    private HashSet`1<MsBuildPath> myKnownProjectPaths;
    protected ILog Logger;
    protected ILogger BuildLogger;
    public Signal`1<MsBuildExeBuildEvent> Event;
    public InFileBuildSessionSaver Saver;
    public Signal`1<string> ProjectFinishedEvent;
    public Signal`1<string> ProjectStartedEvent;
    protected MsBuildExeLoggerConsumerBase(Lifetime lifetime, ILog logger, ILogger buildLogger, HashSet`1<MsBuildPath> knownProjectPaths, string storagePath, bool appendMode);
    public void Consume(BuildEventArgs args);
    protected abstract virtual MsBuildProjectOutputMessages GetMessages(BuildEventContext context);
    protected virtual void ProjectFinished(ProjectFinishedEventArgs projectFinished, MsBuildProjectOutputMessages messages);
    protected virtual void ProjectStarted(ProjectStartedEventArgs projectStarted);
    protected bool IsReal(ProjectStartedEventArgs projectStarted);
}
public class JetBrains.Platform.MsBuildEventLogger.MsBuildProjectOutputMessages : object {
    [CompilerGeneratedAttribute]
private string <ProjectFilePath>k__BackingField;
    private Signal`1<MsBuildExeBuildEvent> myEvents;
    private ILog myLogger;
    private List`1<MsBuildExeBuildEvent> myPostponedEvents;
    private static bool ourInEmacs;
    private string myLastReportedTarget;
    private string myLastMessageCode;
    [CanBeNullAttribute]
public string ProjectFilePath { get; }
    public MsBuildProjectOutputMessages(string projectFilePath, Signal`1<MsBuildExeBuildEvent> events, ILog logger);
    private static MsBuildProjectOutputMessages();
    [CompilerGeneratedAttribute]
public string get_ProjectFilePath();
    public void TargetStarted(TargetStartedEventArgs targetStarted);
    public void TargetFinished();
    public void Message(BuildMessageEventArgs ev);
    private MsBuildExeBuildEvent ParseMessage(BuildMessageEventArgs args);
    private bool ConsumeVS2019CppReference(BuildMessageEventArgs args, MsBuildExeBuildEvent& message);
    private bool ConsumeVS2017CppReference(BuildMessageEventArgs args, MsBuildExeBuildEvent& buildEvent);
    private bool ConsumeUnrealHeaderToolMessage(BuildMessageEventArgs args, MsBuildExeBuildEvent& buildEvent);
    public void SendInfo(BuildEventArgs ev);
    public void Error(BuildErrorEventArgs ev);
    public void Warning(BuildWarningEventArgs ev);
    private void ReportTarget();
    public void ProjectBuildFinished();
    private void ReportPostponed();
    private void FireEvent(MsBuildExeBuildEvent ev);
    private static string FormatErrorEvent(BuildErrorEventArgs args);
    private static string FormatWarningEvent(BuildWarningEventArgs args);
    private static string FormatMessageEvent(BuildMessageEventArgs args);
}
public static class JetBrains.Platform.MsBuildEventLogger.MsBuildUtil.BuildEventArgsToStringConverter : object {
    private static bool ourCanAccessParentProjectBuildEventContext;
    private static BuildEventArgsToStringConverter();
    public static string GetPresentableString(BuildEventArgs event);
    private static string ParentProjectBuildEventContext(ProjectStartedEventArgs e);
    private static string ParentProjectBuildEventContextCore(ProjectStartedEventArgs e);
    private static string GetRequestIf(BuildEventContext context);
    private static string PresentContext(BuildEventContext context);
}
[ExtensionAttribute]
public static class JetBrains.Platform.MsBuildEventLogger.MsBuildUtil.BuildMessageEventArgsUtils : object {
    [ExtensionAttribute]
public static string TryGetFile(BuildMessageEventArgs ev);
    [ExtensionAttribute]
public static string TryGetCode(BuildMessageEventArgs ev);
    [ExtensionAttribute]
public static Nullable`1<int> TryGetLineNumber(BuildMessageEventArgs ev);
    [ExtensionAttribute]
public static Nullable`1<int> TryGetColumnNumber(BuildMessageEventArgs ev);
}
public class JetBrains.Platform.MsBuildEventLogger.MsBuildUtil.MsBuildPath : object {
    [CompilerGeneratedAttribute]
private string <FullPath>k__BackingField;
    public string FullPath { get; }
    public string Directory { get; }
    public bool IsEmpty { get; }
    public string Name { get; }
    public string NameWithoutExtension { get; }
    public string ExtensionWithDot { get; }
    public bool ExistsFile { get; }
    public bool ExistsDirectory { get; }
    public DateTime FileModificationTimeUtc { get; }
    public MsBuildPath(string path);
    [CompilerGeneratedAttribute]
public string get_FullPath();
    public string get_Directory();
    public bool get_IsEmpty();
    public string get_Name();
    public string get_NameWithoutExtension();
    public string get_ExtensionWithDot();
    public bool get_ExistsFile();
    public bool get_ExistsDirectory();
    public DateTime get_FileModificationTimeUtc();
    public MsBuildPath EnsureAbsolute(string basePath);
    public MsBuildPath EnsureAbsolute(MsBuildPath basePath);
    public string Combine(string otherPath);
    public sealed virtual bool Equals(MsBuildPath other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Platform.MsBuildEventLogger.MsBuildUtil.ParentContextExtractUtil : object {
    private static bool ourMethodMissing;
    [ExtensionAttribute]
[CanBeNullAttribute]
public static BuildEventContext GetParentContext(ProjectStartedEventArgs args);
    private static BuildEventContext GetParentContextInternal(ProjectStartedEventArgs args);
    [ExtensionAttribute]
public static int GetParentProjectInstanceId(ProjectStartedEventArgs args);
}
internal class JetBrains.Platform.MsBuildEventLogger.XBuildSingleThreadedLoggerConsumer : MsBuildExeLoggerConsumerBase {
    private Stack`1<MsBuildProjectOutputMessages> myCurrentProjectsStack;
    private MsBuildProjectOutputMessages myUnclassifiedMessages;
    public XBuildSingleThreadedLoggerConsumer(Lifetime lifetime, ILog logger, ILogger buildLogger, HashSet`1<MsBuildPath> knownProjectPaths, string storagePath, bool appendMode);
    protected virtual MsBuildProjectOutputMessages GetMessages(BuildEventContext context);
    protected virtual void ProjectStarted(ProjectStartedEventArgs projectStarted);
    protected virtual void ProjectFinished(ProjectFinishedEventArgs projectFinished, MsBuildProjectOutputMessages messages);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
