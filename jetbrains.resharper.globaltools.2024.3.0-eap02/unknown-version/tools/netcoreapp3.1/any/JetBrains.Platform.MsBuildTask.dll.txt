public class JetBrains.Platform.MsBuildTask.Build.BuildEventConsumer : object {
    [NotNullAttribute]
private ILog myLogger;
    [NotNullAttribute]
private RdBuildSession mySession;
    private RdVerbosityLevel myVerbosity;
    private string myTargetFrameworkId;
    private InFileBuildSessionSaver mySaver;
    [NotNullAttribute]
private RdProjectId myProjectId;
    private MsBuildPath myProjectFilePath;
    [NotNullAttribute]
private RoslynBuildMessageConsumer myRoslynBuildMessageConsumer;
    [NotNullAttribute]
public List`1<IBuildEventArgsInfo> ArgsInfos;
    private bool myIsCppProject;
    private bool myIsFsharpProject;
    private string myLastMessageCode;
    public BuildEventConsumer(ILog logger, RdBuildSession session, RdVerbosityLevel verbosity, BuildEventConsumerContext context, RoslynBuildMessageConsumer roslynBuildMessageConsumer, string targetFrameworkId, InFileBuildSessionSaver saver);
    public sealed virtual void Consume(BuildEventArgs buildEventArgs);
    public static BuildEventNotificationKind KindToNotification(BuildEventKind buildEventKind);
    [NotNullAttribute]
private BuildEvent TryGetBuildEvent(BuildEventArgs eventArgs, RdProjectId projectId);
    private BuildEvent ConsumeMessage(BuildMessageEventArgs ev, RdProjectId projectId);
    private bool ConsumeVS2019CppReference(BuildMessageEventArgs ev, RdProjectId projectId, BuildEvent& buildEvent);
    private bool ConsumeVS2017CppReference(BuildMessageEventArgs args, RdProjectId projectId, BuildEvent& buildEvent);
    private string HandleMessageText(string originMessage);
    private bool ConsumeUnrealHeaderToolMessage(BuildMessageEventArgs ev, RdProjectId projectId, BuildEvent& buildEvent);
}
public class JetBrains.Platform.MsBuildTask.Build.BuildEventConsumerContext : object {
    public RdProjectId Id;
    public MsBuildPath Path;
    public BuildEventConsumerContext(RdProjectId id, MsBuildPath path);
}
public class JetBrains.Platform.MsBuildTask.Build.BuildEventConsumerFactory : object {
    private ILog myLogger;
    private RdBuildSession mySession;
    private RdVerbosityLevel myVerbosity;
    private InFileBuildSessionSaver myInFileBuildSessionSaver;
    public BuildEventConsumerFactory(ILog logger, RdBuildSession session, RdVerbosityLevel verbosity, InFileBuildSessionSaver inFileBuildSessionSaver);
    public sealed virtual BuildEventConsumer Create(BuildEventConsumerContext context, ProjectEventsMatcher matcher, string targetFrameworkId);
}
public class JetBrains.Platform.MsBuildTask.Build.BuildEvents.BuildEventArgsInfoImportantForUser : BuildEventArgsInfoWithMsBuildEvent {
    public BuildEventArgsInfoImportantForUser(BuildEventArgs buildEventArgs);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Build.BuildEvents.BuildEventArgsInfoMessageForUser : BuildEventArgsInfoWithMsBuildEvent {
    public BuildEventArgsInfoMessageForUser(BuildEventArgs buildEventArgs);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Build.BuildEvents.BuildEventArgsInfoWithMsBuildEvent : object {
    [CompilerGeneratedAttribute]
private BuildEventArgs <BuildEventArgs>k__BackingField;
    public BuildEventArgs BuildEventArgs { get; }
    public int ProjectInstanceId { get; }
    public BuildEventArgsInfoWithMsBuildEvent(BuildEventArgs buildEventArgs);
    [CompilerGeneratedAttribute]
public sealed virtual BuildEventArgs get_BuildEventArgs();
    public virtual string ToString();
    public sealed virtual int get_ProjectInstanceId();
}
public class JetBrains.Platform.MsBuildTask.Build.BuildEvents.BuildEventArgsWithCopyTaskInfo : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TargetId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProjectInstanceId>k__BackingField;
    public string Message { get; public set; }
    public int TargetId { get; public set; }
    public int ProjectInstanceId { get; public set; }
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public int get_TargetId();
    [CompilerGeneratedAttribute]
public void set_TargetId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ProjectInstanceId();
    [CompilerGeneratedAttribute]
public void set_ProjectInstanceId(int value);
}
public class JetBrains.Platform.MsBuildTask.Build.BuildEvents.BuildEventArgsWithTargetInfo : object {
    [CompilerGeneratedAttribute]
private string <TargetName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TargetId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProjectInstanceId>k__BackingField;
    public string TargetName { get; public set; }
    public int TargetId { get; public set; }
    public int ProjectInstanceId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TargetName();
    [CompilerGeneratedAttribute]
public void set_TargetName(string value);
    [CompilerGeneratedAttribute]
public int get_TargetId();
    [CompilerGeneratedAttribute]
public void set_TargetId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ProjectInstanceId();
    [CompilerGeneratedAttribute]
public void set_ProjectInstanceId(int value);
    public virtual string ToString();
}
public interface JetBrains.Platform.MsBuildTask.Build.BuildEvents.IBuildEventArgsInfo {
    public int ProjectInstanceId { get; }
    public abstract virtual int get_ProjectInstanceId();
}
public interface JetBrains.Platform.MsBuildTask.Build.BuildEvents.IBuildEventArgsInfoForUser {
}
public interface JetBrains.Platform.MsBuildTask.Build.BuildEvents.IBuildEventArgsInfoImportantForUser {
}
public interface JetBrains.Platform.MsBuildTask.Build.BuildEvents.IBuildEventArgsInfoMessageForUser {
}
public interface JetBrains.Platform.MsBuildTask.Build.BuildEvents.IBuildEventArgsInfoWithMsBuildEvent {
    [NotNullAttribute]
public BuildEventArgs BuildEventArgs { get; }
    public abstract virtual BuildEventArgs get_BuildEventArgs();
}
public class JetBrains.Platform.MsBuildTask.Build.BuildSessionHost : MsBuildSession {
    public static ILog Logger;
    private RdBuildSession myProtocolSession;
    private RdBuildSessionContext myContext;
    private ProjectCollection myProjectCollection;
    private BuildDataProcessor myBuildDataProcessor;
    private BuildController`2<BuildEventConsumer, BuildEventConsumerContext> myController;
    public BuildSessionHost(RdBuildSession protocolSession);
    private static BuildSessionHost();
    private void BeginBuild(RdBuildRequest request, RdTask`1<RdBuildResult> task);
    private RdBuildResult CreateBuildResult(RdBuildRequest request, BuildResult result);
    [NotNullAttribute]
private static RdBuildResult CreateFailedBuildResult(RdBuildRequest request, RdUserMessage message);
    private void ExecuteCustomTarget(RdCustomTargetContext context, RdTask`1<RdCustomTargetResult> task);
    private void ExecuteBuildAsync(RdBuildRequest request, string target, bool reuseExistingProject, Action`1<BuildResult> onDone);
    private void ExecuteBuildPerTargetFrameworkAsync(List`1<Project> projects, Project originalProject, string target, BuildEventConsumerContext context, Action`1<BuildResult> onDone);
    private Project GetOrCreateProject(RdBuildRequest request, bool reuseExistingProject, Dictionary`2<string, string> properties);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_3();
    [CompilerGeneratedAttribute]
private RdTask`1<RdBuildResult> <.ctor>b__6_1(Lifetime unknown, RdBuildRequest request);
    [CompilerGeneratedAttribute]
private RdTask`1<RdCustomTargetResult> <.ctor>b__6_2(Lifetime unknown, RdCustomTargetContext context);
}
public class JetBrains.Platform.MsBuildTask.Build.Extensions.WixCopyTaskExtension : object {
    public sealed virtual IEnumerable`1<RdCopyTaskResult> GetAdditionalResults(ProjectInstance projectInstance);
}
internal static class JetBrains.Platform.MsBuildTask.Build.Impl.AppropriateProjectItemsExtractor : object {
    [NotNullAttribute]
[ItemNotNullAttribute]
internal static List`1<RdBuildProjectItem> GetItems(IEnumerable`1<ProjectInstance> projectInstances);
}
public class JetBrains.Platform.MsBuildTask.Build.Impl.BuildDataProcessor : object {
    private ILog myLogger;
    private CopyTaskParser myCopyTaskParser;
    public BuildDataProcessor(ILog logger);
    [NotNullAttribute]
public BuildDataResult Process(IEnumerable`1<IBuildEventArgsInfo> allInfos, MsBuildPath realProjectFileName);
    [NotNullAttribute]
private HashSet`1<RdCopyTaskResult> GetCopyTaskResults(MsBuildPath realProjectFileName, List`1<BuildEventArgsWithCopyTaskInfo> buildEventArgsWithCopyTaskInfos, Dictionary`2<int, Dictionary`2<int, string>> projectIdToTargets);
}
internal static class JetBrains.Platform.MsBuildTask.Build.Impl.BuildEventArgsFilter : object {
    [NotNullAttribute]
public static ICollection`1<IBuildEventArgsInfo> TryGetFilteredArgsInfo(BuildEventArgs buildEvent, RdVerbosityLevel verbosity);
    private static IBuildEventArgsInfo TryGetApplicableForUserArgsInfo(BuildEventArgs buildEvent, RdVerbosityLevel verbosity);
    private static IBuildEventArgsInfo TryGetApplicableForInternalCalculationArgsInfo(BuildEventArgs buildEvent);
    public static bool CheckArgsPossiblyApplicable(BuildEventArgs buildEvent, LoggerVerbosity applicableVerbosity);
    private static bool CheckApplicabilityForUserArgsInfo(BuildEventArgs buildEvent, LoggerVerbosity applicableVerbosity);
    private static bool CheckApplicabilityForInternalPurposes(BuildEventArgs buildEvent);
}
internal static class JetBrains.Platform.MsBuildTask.Build.Impl.BuildEventArgsToStringConverter : object {
    public static string GetPresentableString(BuildEventArgs eventArgs);
}
public class JetBrains.Platform.MsBuildTask.Build.Impl.CopyTaskExecutor : object {
    private ILog myLogger;
    private RdBuildSession myRdBuildSession;
    private InFileBuildSessionSaver mySaver;
    public CopyTaskExecutor(ILog logger, RdBuildSession rdBuildSession, InFileBuildSessionSaver inFileBuildSessionSaver);
    public Unit Execute(RdCopyTaskContext context);
    [NotNullAttribute]
private static string DetectMsBuildFrameworkAssemblyDirectoryPath();
    [CanBeNullAttribute]
public static ITask TryGetCopyTask();
    private static Assembly TryLoadAssemblyFromPath(string name);
    [CanBeNullAttribute]
public static ITaskItem TryGetCreateTaskitem(string content);
    private ITask GetCopyTaskWithFilledProperties(RdBuildSession rdBuildSession, RdProjectId projectId, RdCopyTaskGlobalProperties copyTaskGlobalProperties, RdCopyTaskResult copyTasksResult);
    private static void SetDynamicFieldOrProperty(ITask copyTask, string name, object value);
}
public static class JetBrains.Platform.MsBuildTask.Build.Impl.CopyTaskExtensions : object {
    private static ICopyTaskExtension[] ourExtensions;
    private static CopyTaskExtensions();
    public static HashSet`1<RdCopyTaskResult> GetAdditionalResults(List`1<ProjectInstance> projectInstances);
}
internal static class JetBrains.Platform.MsBuildTask.Build.Impl.CopyTaskGlobalPropertiesBuilder : object {
    internal static RdCopyTaskGlobalProperties GetCopyTaskGlobalProperties(ProjectInstance projectInstance);
    private static Nullable`1<bool> TryParseBool(string val);
    private static Nullable`1<int> TryParseInt(string val);
}
internal class JetBrains.Platform.MsBuildTask.Build.Impl.CopyTaskParser : object {
    private ILog myLogger;
    private IEnumerable`1<Regex> myPatterns;
    public CopyTaskParser(ILog logger);
    private Regex CreateRegexFromResourceString(ResourceManager resourceManager, string resourceStringName, string fallbackString, IReadOnlyList`1<string> replacementList);
    private string NormalizeQuotes(string str);
    [CanBeNullAttribute]
internal RdCopyTaskResult TryParseFromCopyTaskMessage(string targetName, string message, MsBuildPath projectFilePath);
}
public class JetBrains.Platform.MsBuildTask.Build.Impl.ForwardingLoggerBase : object {
    [CompilerGeneratedAttribute]
private LoggerVerbosity <Verbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private IEventRedirector <BuildEventRedirector>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NodeId>k__BackingField;
    public LoggerVerbosity Verbosity { get; public set; }
    public string Parameters { get; public set; }
    public IEventRedirector BuildEventRedirector { get; public set; }
    public int NodeId { get; public set; }
    public sealed virtual void Initialize(IEventSource eventSource);
    public sealed virtual void Shutdown();
    [CompilerGeneratedAttribute]
public sealed virtual LoggerVerbosity get_Verbosity();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Verbosity(LoggerVerbosity value);
    internal bool IsVerbosityAtLeast(LoggerVerbosity checkVerbosity);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Parameters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Parameters(string value);
    public sealed virtual void Initialize(IEventSource eventSource, int nodeCount);
    [CompilerGeneratedAttribute]
public sealed virtual IEventRedirector get_BuildEventRedirector();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildEventRedirector(IEventRedirector value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_NodeId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NodeId(int value);
    private void ForwardEvent(BuildEventArgs buildEvent);
    private void ForwardEventIfApplicable(BuildEventArgs buildEvent);
    [CompilerGeneratedAttribute]
private void <Initialize>b__11_0(object o, BuildErrorEventArgs e);
    [CompilerGeneratedAttribute]
private void <Initialize>b__11_1(object o, BuildWarningEventArgs e);
    [CompilerGeneratedAttribute]
private void <Initialize>b__11_2(object o, BuildStartedEventArgs e);
    [CompilerGeneratedAttribute]
private void <Initialize>b__11_3(object o, BuildFinishedEventArgs e);
    [CompilerGeneratedAttribute]
private void <Initialize>b__11_4(object o, ProjectStartedEventArgs e);
    [CompilerGeneratedAttribute]
private void <Initialize>b__11_5(object o, ProjectFinishedEventArgs e);
    [CompilerGeneratedAttribute]
private void <Initialize>b__11_6(object o, BuildMessageEventArgs e);
    [CompilerGeneratedAttribute]
private void <Initialize>b__11_7(object o, TargetStartedEventArgs e);
    [CompilerGeneratedAttribute]
private void <Initialize>b__11_8(object o, TargetFinishedEventArgs e);
    [CompilerGeneratedAttribute]
private void <Initialize>b__11_9(object o, TaskStartedEventArgs e);
    [CompilerGeneratedAttribute]
private void <Initialize>b__11_10(object o, TaskFinishedEventArgs e);
    [CompilerGeneratedAttribute]
private void <Initialize>b__11_11(object o, CustomBuildEventArgs e);
}
public interface JetBrains.Platform.MsBuildTask.Build.Impl.ICopyTaskExtension {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<RdCopyTaskResult> GetAdditionalResults(ProjectInstance projectInstance);
}
public class JetBrains.Platform.MsBuildTask.Build.Roslyn.RoslynBuildMessageConsumer : object {
    private MsBuildPath myRoslynArgsFilePath;
    private ILog myLogger;
    public RoslynBuildMessageConsumer(MsBuildPath projectFilePath, ILog logger);
    public void Consume(TaskCommandLineEventArgs args);
    [CanBeNullAttribute]
private string ParseArgs(string commandLine);
    private string ProcessRoslynArgsMatch(Match match);
    private void Save(string roslynArguments);
    private void EnsureDirectoryCreated(MsBuildPath directory);
    private MsBuildPath GetRoslynArgsFilePath(MsBuildPath projectFilePath);
}
public class JetBrains.Platform.MsBuildTask.BuildEngine.BuildController`2 : object {
    private TimeSpan myFinishBuildTimeout;
    [NotNullAttribute]
private BuildManager myBuildManager;
    [NotNullAttribute]
private HostServices myHostServices;
    [NotNullAttribute]
private ProjectCollection myProjectCollection;
    [NotNullAttribute]
private BuildEventStorage`2<TConsumer, TContext> myBuildEventStorage;
    private BuildRequestDataFlags myBuildRequestDataFlags;
    public BuildController`2(ProjectCollection projectCollection, IBuildEventConsumerFactory`2<TConsumer, TContext> eventConsumerFactory, BuildRequestDataFlags buildRequestDataFlags, int nodes, bool diagnosticMode, LoggerDescription forwardingLoggerDescription, IEnumerable`1<ILogger> loggers);
    public void DispatchToInnerBuilds(Project project, TContext context, Action`1<InnerBuildProjectsList`1<TConsumer>> onDone);
    public void ExecuteBuildAsync(List`1<Project> projects, List`1<string> targets, TContext context, Action`1<BuildResult> onDone);
    public void ExecuteTarget(Project project, string target, TContext context, BuildRequestDataFlags customBuildRequestDataFlags, Action`1<BuildResult> onDone);
    private void ExecuteBuildAsync(Project project, List`1<string> targets, TContext context, BuildResultConstructor<TConsumer, TContext> constructor, BuildRequestDataFlags customBuildRequestDataFlags);
    private ProjectInstance GetProjectInstance(Project project, int retryCount);
    private void HandleSubmission(BuildResultConstructor<TConsumer, TContext> constructor, BuildSubmission submission, Project project, ProjectInstance projectInstance);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private bool <ExecuteBuildAsync>b__8_0(Project x);
}
public class JetBrains.Platform.MsBuildTask.BuildEngine.BuildEventLogger : BuildLoggerBase {
    [NotNullAttribute]
private IBuildEventStorage myStorage;
    public BuildEventLogger(IBuildEventStorage storage);
    protected virtual void EventProcessor(object sender, BuildEventArgs buildEventArgs);
}
public class JetBrains.Platform.MsBuildTask.BuildEngine.BuildEventStorage`2 : object {
    [NotNullAttribute]
private IBuildEventConsumerFactory`2<TConsumer, TContext> myFactory;
    private ConcurrentDictionary`2<int, SubmissionData<TConsumer, TContext>> mySubmissions;
    public BuildEventStorage`2(IBuildEventConsumerFactory`2<TConsumer, TContext> factory);
    public void Register(int submissionId, TContext context, ProjectEventsMatcher matcher, string targetFrameworkdId);
    [NotNullAttribute]
public TConsumer Create(TContext context, ProjectEventsMatcher matcher);
    [NotNullAttribute]
public TConsumer Take(int submissionId);
    public bool WaitFor(int submissionId, TimeSpan timeout);
    public sealed virtual void AddEvent(BuildEventArgs args);
    [NotNullAttribute]
private SubmissionData<TConsumer, TContext> GetSubmissionData(int submissionId);
}
public abstract class JetBrains.Platform.MsBuildTask.BuildEngine.BuildLoggerBase : object {
    [CanBeNullAttribute]
private IEventSource myEventSource;
    [CompilerGeneratedAttribute]
private LoggerVerbosity <Verbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Parameters>k__BackingField;
    public LoggerVerbosity Verbosity { get; public set; }
    public string Parameters { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual LoggerVerbosity get_Verbosity();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Verbosity(LoggerVerbosity value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Parameters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Parameters(string value);
    public sealed virtual void Initialize(IEventSource eventSource);
    public sealed virtual void Initialize(IEventSource eventSource, int nodeCount);
    public sealed virtual void Shutdown();
    protected abstract virtual void EventProcessor(object sender, BuildEventArgs buildEventArgs);
}
public class JetBrains.Platform.MsBuildTask.BuildEngine.BuildQueue`2 : object {
    public static string ProjectReferenceItem;
    [NotNullAttribute]
private BuildController`2<TConsumer, TContext> myController;
    [NotNullAttribute]
private object myLocker;
    [NotNullAttribute]
private HashSet`1<NormalizedPath<TConsumer, TContext>> myKnownProjectFiles;
    [NotNullAttribute]
private HashSet`1<NormalizedPath<TConsumer, TContext>> myBuildingProjects;
    [NotNullAttribute]
private HashSet`1<NormalizedPath<TConsumer, TContext>> myFinishedProjects;
    [NotNullAttribute]
private List`1<InternalBuildRequest<TConsumer, TContext>> myWaitingRequests;
    private bool myEnabled;
    private bool myInitializing;
    private int myPendingDispatchBuilds;
    public BuildQueue`2(BuildController`2<TConsumer, TContext> controller, IEnumerable`1<string> knownProjectFiles, bool alwaysEnabled);
    public void DispatchToInnerBuilds(Project project, TContext context, Action`1<InnerBuildProjectsList`1<TConsumer>> onDone, Action`1<Exception> onError);
    public void QueueBuild(List`1<Project> projects, List`1<string> targets, TContext context, Action`1<BuildResult> onDone);
    public void AssumeFinished(string projectFile);
    public void FinishInitializing();
    public sealed virtual void Dispose();
    private bool IsReadyToBuild();
    private void TryBuildWaitingRequests();
    private bool CanBuildRequest(InternalBuildRequest<TConsumer, TContext> request);
    private void DoBuildRequest(InternalBuildRequest<TConsumer, TContext> request);
    private void OnBuildRequestCompleted(NormalizedPath<TConsumer, TContext> projectFilePath);
    private static void CollectReferences(Project project, HashSet`1<NormalizedPath<TConsumer, TContext>> result);
}
public class JetBrains.Platform.MsBuildTask.BuildEngine.BuildResult : object {
    [NotNullAttribute]
public IReadOnlyCollection`1<BuildResultPart> Parts;
    public BuildResult(NotStartedBuildResultPart notStartedPart);
    public BuildResult(IReadOnlyCollection`1<BuildResultPart> parts);
}
public abstract class JetBrains.Platform.MsBuildTask.BuildEngine.BuildResultErrorPart : BuildResultPart {
    [NotNullAttribute]
public RdUserMessage ErrorMessage;
    protected BuildResultErrorPart(RdUserMessage errorMessage);
}
public abstract class JetBrains.Platform.MsBuildTask.BuildEngine.BuildResultPart : object {
}
public class JetBrains.Platform.MsBuildTask.BuildEngine.FailedBuildResultPart`1 : BuildResultErrorPart {
    [NotNullAttribute]
public Project Project;
    [NotNullAttribute]
public ProjectInstance ProjectInstance;
    [NotNullAttribute]
public TConsumer EventsConsumer;
    public FailedBuildResultPart`1(Project project, ProjectInstance projectInstance, TConsumer eventsConsumer, RdUserMessage errorMessage);
}
public interface JetBrains.Platform.MsBuildTask.BuildEngine.IBuildEventConsumer {
    public abstract virtual void Consume(BuildEventArgs buildEventArgs);
}
public interface JetBrains.Platform.MsBuildTask.BuildEngine.IBuildEventConsumerFactory`2 {
    [NotNullAttribute]
public abstract virtual TConsumer Create(TContext context, ProjectEventsMatcher matcher, string targetFrameworkId);
}
public interface JetBrains.Platform.MsBuildTask.BuildEngine.IBuildEventStorage {
    public abstract virtual void AddEvent(BuildEventArgs args);
}
public class JetBrains.Platform.MsBuildTask.BuildEngine.InnerBuildProject : object {
    [CompilerGeneratedAttribute]
private TargetFramework <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <DispatchedProperties>k__BackingField;
    [NotNullAttribute]
public TargetFramework TargetFramework { get; }
    [NotNullAttribute]
public Dictionary`2<string, string> DispatchedProperties { get; }
    public InnerBuildProject(TargetFramework targetFramework, Dictionary`2<string, string> dispatchedProperties);
    [CompilerGeneratedAttribute]
public TargetFramework get_TargetFramework();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_DispatchedProperties();
    public Dictionary`2<string, string> PatchProperties(Dictionary`2<string, string> properties);
}
public class JetBrains.Platform.MsBuildTask.BuildEngine.InnerBuildProjectsList`1 : object {
    [NotNullAttribute]
public static InnerBuildProjectsList`1<TConsumer> Empty;
    [NotNullAttribute]
public List`1<InnerBuildProject> Items;
    [CanBeNullAttribute]
public TConsumer Consumer;
    public InnerBuildProjectsList`1(List`1<TargetFramework> targetFrameworks, TConsumer consumer);
    public InnerBuildProjectsList`1(List`1<InnerBuildProject> items, TConsumer consumer);
    private static InnerBuildProjectsList`1();
}
public class JetBrains.Platform.MsBuildTask.BuildEngine.NotStartedBuildResultPart : BuildResultErrorPart {
    public NotStartedBuildResultPart(RdUserMessage errorMessage);
}
public class JetBrains.Platform.MsBuildTask.BuildEngine.ProjectEventsMatcher : object {
    [NotNullAttribute]
private string myProjectFilePath;
    public ProjectEventsMatcher(Project project);
    [CanBeNullAttribute]
public ProjectStartedEventArgs GetProjectStartedEvent(BuildEventArgs args);
    [CanBeNullAttribute]
public ProjectFinishedEventArgs GetProjectFinishedEvent(BuildEventArgs args);
}
public static class JetBrains.Platform.MsBuildTask.BuildEngine.ProjectInstancePatcher : object {
    private static ILog ourLogger;
    private static ProjectInstancePatcher();
    public static void Patch(ProjectInstance projectInstance);
}
public class JetBrains.Platform.MsBuildTask.BuildEngine.SuccessBuildResultPart`1 : BuildResultPart {
    [NotNullAttribute]
public Project Project;
    [NotNullAttribute]
public ProjectInstance ProjectInstance;
    [NotNullAttribute]
public ProjectInstance ProjectInstanceAfterBuild;
    [NotNullAttribute]
public TConsumer EventsConsumer;
    public bool OverallSuccess;
    public SuccessBuildResultPart`1(Project project, ProjectInstance projectInstance, ProjectInstance projectInstanceAfterBuild, TConsumer eventsConsumer, bool overallSuccess);
}
public abstract class JetBrains.Platform.MsBuildTask.ControllerTaskBase : object {
    [CompilerGeneratedAttribute]
private string <LoggerPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PortValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildToolVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private IBuildEngine <BuildEngine>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskHost <HostObject>k__BackingField;
    [UsedImplicitlyAttribute]
public string LoggerPath { get; public set; }
    [UsedImplicitlyAttribute]
public string PortValue { get; public set; }
    [UsedImplicitlyAttribute]
public string BuildToolVersion { get; public set; }
    public IBuildEngine BuildEngine { get; public set; }
    public ITaskHost HostObject { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LoggerPath();
    [CompilerGeneratedAttribute]
public void set_LoggerPath(string value);
    [CompilerGeneratedAttribute]
public string get_PortValue();
    [CompilerGeneratedAttribute]
public void set_PortValue(string value);
    [CompilerGeneratedAttribute]
public string get_BuildToolVersion();
    [CompilerGeneratedAttribute]
public void set_BuildToolVersion(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IBuildEngine get_BuildEngine();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildEngine(IBuildEngine value);
    [CompilerGeneratedAttribute]
public sealed virtual ITaskHost get_HostObject();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HostObject(ITaskHost value);
    public sealed virtual bool Execute();
    protected abstract virtual MsBuildAdapter CreateAdapter();
}
public class JetBrains.Platform.MsBuildTask.DefaultMsBuildAdapter : MsBuildAdapter {
    public virtual bool IsImplicitTopImport(ProjectImportElement projectImportElement);
    public virtual bool IsImplicitBottomImport(ProjectImportElement projectImportElement);
    public virtual ProjectRootElement LoadProjectRootElement(string projectFilePath, ProjectCollection projectCollection);
    public virtual bool GetExpressedAsAttribute(ProjectMetadataElement projectMetadataElement);
    public virtual void SetExpressedAsAttribute(ProjectMetadataElement projectMetadataElement, bool expressedAsAttribute);
    public virtual bool SupportAlterItems();
    public virtual ProjectItemElement TryCreateUpdateItem(ProjectRootElement projectRootElement, string itemType, string unevaluatedUpdate);
    public virtual ProjectItemElement FindUpdateItem(ProjectRootElement projectRootElement, string itemType, string unevaluatedUpdate);
    public virtual void SetUpdateItem(ProjectItemElement item, string unevaluatedUpdate);
    public virtual string GetSdk(ProjectRootElement projectRootElement);
    public virtual string GetNugetShortName(string name);
    public virtual ProjectFactory GetProjectFactory();
}
public static class JetBrains.Platform.MsBuildTask.KnownLoggers : object {
    public static ILog Build;
    public static ILog BuildQueue;
    public static ILog ProjectModel;
    private static KnownLoggers();
}
public static class JetBrains.Platform.MsBuildTask.LoggerService : object {
    public static ILogger RedirectingLogger;
    private static RdLoggingLevel ourLoggingLevel;
    private static SequentialLifetimes ourMainLoggerLifetime;
    private static MsBuildPath ourLoggerPath;
    private static LoggerService();
    public static void Initialize(string loggerPath);
    public static void ChangeVerbosity(RdLoggingLevel loggingLevel);
    public static void SetupAdditionalLogger(Lifetime lifetime, MsBuildPath path, RdLoggingLevel loggingLevel);
    public static MsBuildPath GetAdditionalLoggerFile(string name, string extension);
    private static void SetupGlobalLoggerFactory(bool append);
    private static LoggerVerbosity GetLoggerVerbosity(RdLoggingLevel loggingLevel);
    private static LoggingLevel GetLoggingLevel(RdLoggingLevel loggingLevel);
}
public abstract class JetBrains.Platform.MsBuildTask.Models.BuildEventBase : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public static CtxReadDelegate`1<BuildEventBase> Read;
    public static CtxWriteDelegate`1<BuildEventBase> Write;
    [NotNullAttribute]
public string Message { get; private set; }
    protected BuildEventBase(string message);
    private static BuildEventBase();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
}
public class JetBrains.Platform.MsBuildTask.Models.BuildEventBase_Unknown : BuildEventBase {
    public static CtxReadDelegate`1<BuildEventBase_Unknown> Read;
    public static CtxWriteDelegate`1<BuildEventBase_Unknown> Write;
    public BuildEventBase_Unknown(string message);
    private static BuildEventBase_Unknown();
    public virtual bool Equals(object obj);
    public bool Equals(BuildEventBase_Unknown other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public abstract class JetBrains.Platform.MsBuildTask.Models.BuildEventForProjectBase : BuildEventBase {
    [CompilerGeneratedAttribute]
private RdProjectId <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    public static CtxReadDelegate`1<BuildEventForProjectBase> Read;
    public static CtxWriteDelegate`1<BuildEventForProjectBase> Write;
    [NotNullAttribute]
public RdProjectId ProjectId { get; private set; }
    [CanBeNullAttribute]
public string TargetFramework { get; private set; }
    protected BuildEventForProjectBase(RdProjectId projectId, string targetFramework, string message);
    private static BuildEventForProjectBase();
    [CompilerGeneratedAttribute]
public RdProjectId get_ProjectId();
    [CompilerGeneratedAttribute]
private void set_ProjectId(RdProjectId value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
private void set_TargetFramework(string value);
}
public class JetBrains.Platform.MsBuildTask.Models.BuildEventForProjectBase_Unknown : BuildEventForProjectBase {
    public static CtxReadDelegate`1<BuildEventForProjectBase_Unknown> Read;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxWriteDelegate`1<BuildEventForProjectBase_Unknown> Write;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    public BuildEventForProjectBase_Unknown(RdProjectId projectId, string targetFramework, string message);
    private static BuildEventForProjectBase_Unknown();
    public virtual bool Equals(object obj);
    public bool Equals(BuildEventForProjectBase_Unknown other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.BuildEventNotification : object {
    [CompilerGeneratedAttribute]
private long <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildEventNotificationKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinesCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MetaItem> <Meta>k__BackingField;
    public static CtxReadDelegate`1<BuildEventNotification> Read;
    public static CtxReadDelegate`1<Nullable`1<int>> ReadIntNullable;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxReadDelegate`1<List`1<MetaItem>> ReadMetaItemListNullable;
    public static CtxWriteDelegate`1<BuildEventNotification> Write;
    public static CtxWriteDelegate`1<Nullable`1<int>> WriteIntNullable;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    public static CtxWriteDelegate`1<List`1<MetaItem>> WriteMetaItemListNullable;
    public long Offset { get; private set; }
    [CanBeNullAttribute]
public Nullable`1<int> ProjectId { get; private set; }
    public BuildEventNotificationKind Kind { get; private set; }
    public int LinesCount { get; private set; }
    [CanBeNullAttribute]
public string TargetFramework { get; private set; }
    [CanBeNullAttribute]
public List`1<MetaItem> Meta { get; private set; }
    public BuildEventNotification(long offset, Nullable`1<int> projectId, BuildEventNotificationKind kind, int linesCount, string targetFramework, List`1<MetaItem> meta);
    private static BuildEventNotification();
    [CompilerGeneratedAttribute]
public long get_Offset();
    [CompilerGeneratedAttribute]
private void set_Offset(long value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ProjectId();
    [CompilerGeneratedAttribute]
private void set_ProjectId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public BuildEventNotificationKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(BuildEventNotificationKind value);
    [CompilerGeneratedAttribute]
public int get_LinesCount();
    [CompilerGeneratedAttribute]
private void set_LinesCount(int value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
private void set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public List`1<MetaItem> get_Meta();
    [CompilerGeneratedAttribute]
private void set_Meta(List`1<MetaItem> value);
    public void Deconstruct(Int64& offset, Nullable`1& projectId, BuildEventNotificationKind& kind, Int32& linesCount, String& targetFramework, List`1& meta);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(BuildEventNotification other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public enum JetBrains.Platform.MsBuildTask.Models.BuildEventNotificationKind : Enum {
    public int value__;
    public static BuildEventNotificationKind Error;
    public static BuildEventNotificationKind Warning;
    public static BuildEventNotificationKind Reference;
    public static BuildEventNotificationKind Info;
    public static BuildEventNotificationKind Message;
}
public enum JetBrains.Platform.MsBuildTask.Models.BuildMessageKind : Enum {
    public int value__;
    public static BuildMessageKind Message;
    public static BuildMessageKind Success;
    public static BuildMessageKind Warning;
    public static BuildMessageKind Error;
}
public class JetBrains.Platform.MsBuildTask.Models.ConsoleBuildEvent : BuildEventBase {
    public static CtxReadDelegate`1<ConsoleBuildEvent> Read;
    public static CtxWriteDelegate`1<ConsoleBuildEvent> Write;
    public ConsoleBuildEvent(string message);
    private static ConsoleBuildEvent();
    public virtual bool Equals(object obj);
    public bool Equals(ConsoleBuildEvent other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.ErrorBuildEvent : ImportantBuildEvent {
    public static CtxReadDelegate`1<ErrorBuildEvent> Read;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxWriteDelegate`1<ErrorBuildEvent> Write;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    public ErrorBuildEvent(string file, string subcategory, int lineNumber, int endLineNumber, int columnNumber, int endColumnNumber, string code, RdProjectId projectId, string targetFramework, string message);
    private static ErrorBuildEvent();
    public virtual bool Equals(object obj);
    public bool Equals(ErrorBuildEvent other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public abstract class JetBrains.Platform.MsBuildTask.Models.ImportantBuildEvent : BuildEventForProjectBase {
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subcategory>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndColumnNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    public static CtxReadDelegate`1<ImportantBuildEvent> Read;
    public static CtxWriteDelegate`1<ImportantBuildEvent> Write;
    [CanBeNullAttribute]
public string File { get; private set; }
    [CanBeNullAttribute]
public string Subcategory { get; private set; }
    public int LineNumber { get; private set; }
    public int EndLineNumber { get; private set; }
    public int ColumnNumber { get; private set; }
    public int EndColumnNumber { get; private set; }
    [CanBeNullAttribute]
public string Code { get; private set; }
    protected ImportantBuildEvent(string file, string subcategory, int lineNumber, int endLineNumber, int columnNumber, int endColumnNumber, string code, RdProjectId projectId, string targetFramework, string message);
    private static ImportantBuildEvent();
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
private void set_File(string value);
    [CompilerGeneratedAttribute]
public string get_Subcategory();
    [CompilerGeneratedAttribute]
private void set_Subcategory(string value);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
private void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_EndLineNumber();
    [CompilerGeneratedAttribute]
private void set_EndLineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_ColumnNumber();
    [CompilerGeneratedAttribute]
private void set_ColumnNumber(int value);
    [CompilerGeneratedAttribute]
public int get_EndColumnNumber();
    [CompilerGeneratedAttribute]
private void set_EndColumnNumber(int value);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
private void set_Code(string value);
}
public class JetBrains.Platform.MsBuildTask.Models.ImportantBuildEvent_Unknown : ImportantBuildEvent {
    public static CtxReadDelegate`1<ImportantBuildEvent_Unknown> Read;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxWriteDelegate`1<ImportantBuildEvent_Unknown> Write;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    public ImportantBuildEvent_Unknown(string file, string subcategory, int lineNumber, int endLineNumber, int columnNumber, int endColumnNumber, string code, RdProjectId projectId, string targetFramework, string message);
    private static ImportantBuildEvent_Unknown();
    public virtual bool Equals(object obj);
    public bool Equals(ImportantBuildEvent_Unknown other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.InfoBuildEvent : ImportantBuildEvent {
    public static CtxReadDelegate`1<InfoBuildEvent> Read;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxWriteDelegate`1<InfoBuildEvent> Write;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    public InfoBuildEvent(string file, string subcategory, int lineNumber, int endLineNumber, int columnNumber, int endColumnNumber, string code, RdProjectId projectId, string targetFramework, string message);
    private static InfoBuildEvent();
    public virtual bool Equals(object obj);
    public bool Equals(InfoBuildEvent other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public enum JetBrains.Platform.MsBuildTask.Models.MessageBackendLogKind : Enum {
    public int value__;
    public static MessageBackendLogKind Ignore;
    public static MessageBackendLogKind Info;
    public static MessageBackendLogKind Trace;
}
public class JetBrains.Platform.MsBuildTask.Models.MessageBuildEvent : BuildEventBase {
    [CompilerGeneratedAttribute]
private RdProjectId <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildMessageKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageBackendLogKind <LogOnBackend>k__BackingField;
    public static CtxReadDelegate`1<MessageBuildEvent> Read;
    public static CtxReadDelegate`1<RdProjectId> ReadRdProjectIdNullable;
    public static CtxWriteDelegate`1<MessageBuildEvent> Write;
    public static CtxWriteDelegate`1<RdProjectId> WriteRdProjectIdNullable;
    [CanBeNullAttribute]
public RdProjectId ProjectId { get; private set; }
    public BuildMessageKind Kind { get; private set; }
    public MessageBackendLogKind LogOnBackend { get; private set; }
    public MessageBuildEvent(RdProjectId projectId, BuildMessageKind kind, MessageBackendLogKind logOnBackend, string message);
    private static MessageBuildEvent();
    [CompilerGeneratedAttribute]
public RdProjectId get_ProjectId();
    [CompilerGeneratedAttribute]
private void set_ProjectId(RdProjectId value);
    [CompilerGeneratedAttribute]
public BuildMessageKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(BuildMessageKind value);
    [CompilerGeneratedAttribute]
public MessageBackendLogKind get_LogOnBackend();
    [CompilerGeneratedAttribute]
private void set_LogOnBackend(MessageBackendLogKind value);
    public virtual bool Equals(object obj);
    public bool Equals(MessageBuildEvent other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.MetaItem : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public static CtxReadDelegate`1<MetaItem> Read;
    public static CtxWriteDelegate`1<MetaItem> Write;
    [NotNullAttribute]
public string Key { get; private set; }
    [NotNullAttribute]
public string Value { get; private set; }
    public MetaItem(string key, string value);
    private static MetaItem();
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
    public void Deconstruct(String& key, String& value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MetaItem other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.MsBuildModel : RdExtBase {
    [NotNullAttribute]
private RdProperty`1<RdSession> _Session;
    [NotNullAttribute]
private RdProperty`1<RdLoggingLevel> _LoggingLevel;
    [NotNullAttribute]
private RdCall`2<List`1<string>, List`1<long>> _DumpMemoryObjects;
    public static CtxReadDelegate`1<RdLoggingLevel> ReadRdLoggingLevel;
    public static CtxReadDelegate`1<List`1<string>> ReadStringList;
    public static CtxReadDelegate`1<List`1<long>> ReadLongList;
    public static CtxWriteDelegate`1<RdLoggingLevel> WriteRdLoggingLevel;
    public static CtxWriteDelegate`1<List`1<string>> WriteStringList;
    public static CtxWriteDelegate`1<List`1<long>> WriteLongList;
    [NotNullAttribute]
public IViewableProperty`1<RdSession> Session { get; }
    [NotNullAttribute]
public IReadonlyProperty`1<RdLoggingLevel> LoggingLevel { get; }
    [NotNullAttribute]
public IRdEndpoint`2<List`1<string>, List`1<long>> DumpMemoryObjects { get; }
    protected long SerializationHash { get; }
    protected Action`1<ISerializers> Register { get; }
    private MsBuildModel(RdProperty`1<RdSession> session, RdProperty`1<RdLoggingLevel> loggingLevel, RdCall`2<List`1<string>, List`1<long>> dumpMemoryObjects);
    public MsBuildModel(Lifetime lifetime, IProtocol protocol);
    private static MsBuildModel();
    public IViewableProperty`1<RdSession> get_Session();
    public IReadonlyProperty`1<RdLoggingLevel> get_LoggingLevel();
    public IRdEndpoint`2<List`1<string>, List`1<long>> get_DumpMemoryObjects();
    protected virtual long get_SerializationHash();
    protected virtual Action`1<ISerializers> get_Register();
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers);
    public virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdAddConfigurationItem : object {
    [CompilerGeneratedAttribute]
private RdProjectConfiguration <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private RdProjectConfiguration <BaseName>k__BackingField;
    public static CtxReadDelegate`1<RdAddConfigurationItem> Read;
    public static CtxReadDelegate`1<RdProjectConfiguration> ReadRdProjectConfigurationNullable;
    public static CtxWriteDelegate`1<RdAddConfigurationItem> Write;
    public static CtxWriteDelegate`1<RdProjectConfiguration> WriteRdProjectConfigurationNullable;
    [NotNullAttribute]
public RdProjectConfiguration Name { get; private set; }
    [CanBeNullAttribute]
public RdProjectConfiguration BaseName { get; private set; }
    public RdAddConfigurationItem(RdProjectConfiguration name, RdProjectConfiguration baseName);
    private static RdAddConfigurationItem();
    [CompilerGeneratedAttribute]
public RdProjectConfiguration get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(RdProjectConfiguration value);
    [CompilerGeneratedAttribute]
public RdProjectConfiguration get_BaseName();
    [CompilerGeneratedAttribute]
private void set_BaseName(RdProjectConfiguration value);
    public void Deconstruct(RdProjectConfiguration& name, RdProjectConfiguration& baseName);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdAddConfigurationItem other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdAddImportContext : object {
    [CompilerGeneratedAttribute]
private string <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private RdAddImportLocation <Location>k__BackingField;
    public static CtxReadDelegate`1<RdAddImportContext> Read;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxWriteDelegate`1<RdAddImportContext> Write;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    [NotNullAttribute]
public string Project { get; private set; }
    [CanBeNullAttribute]
public string Label { get; private set; }
    [CanBeNullAttribute]
public string Condition { get; private set; }
    public RdAddImportLocation Location { get; private set; }
    public RdAddImportContext(string project, string label, string condition, RdAddImportLocation location);
    private static RdAddImportContext();
    [CompilerGeneratedAttribute]
public string get_Project();
    [CompilerGeneratedAttribute]
private void set_Project(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
private void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
private void set_Condition(string value);
    [CompilerGeneratedAttribute]
public RdAddImportLocation get_Location();
    [CompilerGeneratedAttribute]
private void set_Location(RdAddImportLocation value);
    public void Deconstruct(String& project, String& label, String& condition, RdAddImportLocation& location);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdAddImportContext other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public enum JetBrains.Platform.MsBuildTask.Models.RdAddImportLocation : Enum {
    public int value__;
    public static RdAddImportLocation Top;
    public static RdAddImportLocation Bottom;
}
public class JetBrains.Platform.MsBuildTask.Models.RdAddItemContext : object {
    [CompilerGeneratedAttribute]
private string <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnevaluatedInclude>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConditionGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdItemMetadata> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private RdProjectItemOrigin <WildcardOrigin>k__BackingField;
    [CompilerGeneratedAttribute]
private RdRelativeToContext <RelativeTo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetProjectFileName>k__BackingField;
    public static CtxReadDelegate`1<RdAddItemContext> Read;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxReadDelegate`1<List`1<RdItemMetadata>> ReadRdItemMetadataList;
    public static CtxReadDelegate`1<RdProjectItemOrigin> ReadRdProjectItemOriginNullable;
    public static CtxReadDelegate`1<RdRelativeToContext> ReadRdRelativeToContextNullable;
    public static CtxWriteDelegate`1<RdAddItemContext> Write;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    public static CtxWriteDelegate`1<List`1<RdItemMetadata>> WriteRdItemMetadataList;
    public static CtxWriteDelegate`1<RdProjectItemOrigin> WriteRdProjectItemOriginNullable;
    public static CtxWriteDelegate`1<RdRelativeToContext> WriteRdRelativeToContextNullable;
    [NotNullAttribute]
public string ItemType { get; private set; }
    [NotNullAttribute]
public string UnevaluatedInclude { get; private set; }
    [CanBeNullAttribute]
public string Condition { get; private set; }
    [CanBeNullAttribute]
public string ConditionGroup { get; private set; }
    [NotNullAttribute]
public List`1<RdItemMetadata> Metadata { get; private set; }
    [CanBeNullAttribute]
public RdProjectItemOrigin WildcardOrigin { get; private set; }
    [CanBeNullAttribute]
public RdRelativeToContext RelativeTo { get; private set; }
    [CanBeNullAttribute]
public string TargetProjectFileName { get; private set; }
    public RdAddItemContext(string itemType, string unevaluatedInclude, string condition, string conditionGroup, List`1<RdItemMetadata> metadata, RdProjectItemOrigin wildcardOrigin, RdRelativeToContext relativeTo, string targetProjectFileName);
    private static RdAddItemContext();
    [CompilerGeneratedAttribute]
public string get_ItemType();
    [CompilerGeneratedAttribute]
private void set_ItemType(string value);
    [CompilerGeneratedAttribute]
public string get_UnevaluatedInclude();
    [CompilerGeneratedAttribute]
private void set_UnevaluatedInclude(string value);
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
private void set_Condition(string value);
    [CompilerGeneratedAttribute]
public string get_ConditionGroup();
    [CompilerGeneratedAttribute]
private void set_ConditionGroup(string value);
    [CompilerGeneratedAttribute]
public List`1<RdItemMetadata> get_Metadata();
    [CompilerGeneratedAttribute]
private void set_Metadata(List`1<RdItemMetadata> value);
    [CompilerGeneratedAttribute]
public RdProjectItemOrigin get_WildcardOrigin();
    [CompilerGeneratedAttribute]
private void set_WildcardOrigin(RdProjectItemOrigin value);
    [CompilerGeneratedAttribute]
public RdRelativeToContext get_RelativeTo();
    [CompilerGeneratedAttribute]
private void set_RelativeTo(RdRelativeToContext value);
    [CompilerGeneratedAttribute]
public string get_TargetProjectFileName();
    [CompilerGeneratedAttribute]
private void set_TargetProjectFileName(string value);
    public void Deconstruct(String& itemType, String& unevaluatedInclude, String& condition, String& conditionGroup, List`1& metadata, RdProjectItemOrigin& wildcardOrigin, RdRelativeToContext& relativeTo, String& targetProjectFileName);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdAddItemContext other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdAddTargetContext : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AfterTargets>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BeforeTargets>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DependsOnTargets>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    public static CtxReadDelegate`1<RdAddTargetContext> Read;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxWriteDelegate`1<RdAddTargetContext> Write;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    [NotNullAttribute]
public string Name { get; private set; }
    [CanBeNullAttribute]
public string AfterTargets { get; private set; }
    [CanBeNullAttribute]
public string BeforeTargets { get; private set; }
    [CanBeNullAttribute]
public string DependsOnTargets { get; private set; }
    [CanBeNullAttribute]
public string Label { get; private set; }
    [CanBeNullAttribute]
public string Condition { get; private set; }
    public RdAddTargetContext(string name, string afterTargets, string beforeTargets, string dependsOnTargets, string label, string condition);
    private static RdAddTargetContext();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_AfterTargets();
    [CompilerGeneratedAttribute]
private void set_AfterTargets(string value);
    [CompilerGeneratedAttribute]
public string get_BeforeTargets();
    [CompilerGeneratedAttribute]
private void set_BeforeTargets(string value);
    [CompilerGeneratedAttribute]
public string get_DependsOnTargets();
    [CompilerGeneratedAttribute]
private void set_DependsOnTargets(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
private void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
private void set_Condition(string value);
    public void Deconstruct(String& name, String& afterTargets, String& beforeTargets, String& dependsOnTargets, String& label, String& condition);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdAddTargetContext other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdAddTaskContext : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdProjectTargetProperty> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    public static CtxReadDelegate`1<RdAddTaskContext> Read;
    public static CtxReadDelegate`1<List`1<RdProjectTargetProperty>> ReadRdProjectTargetPropertyList;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxWriteDelegate`1<RdAddTaskContext> Write;
    public static CtxWriteDelegate`1<List`1<RdProjectTargetProperty>> WriteRdProjectTargetPropertyList;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    [NotNullAttribute]
public string Name { get; private set; }
    [NotNullAttribute]
public List`1<RdProjectTargetProperty> Parameters { get; private set; }
    [CanBeNullAttribute]
public string Condition { get; private set; }
    public RdAddTaskContext(string name, List`1<RdProjectTargetProperty> parameters, string condition);
    private static RdAddTaskContext();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public List`1<RdProjectTargetProperty> get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(List`1<RdProjectTargetProperty> value);
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
private void set_Condition(string value);
    public void Deconstruct(String& name, List`1& parameters, String& condition);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdAddTaskContext other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdAggregateUserMessage : RdUserMessage {
    [CompilerGeneratedAttribute]
private List`1<RdUserMessage> <Messages>k__BackingField;
    public static CtxReadDelegate`1<RdAggregateUserMessage> Read;
    public static CtxReadDelegate`1<List`1<RdUserMessage>> ReadRdUserMessageList;
    public static CtxWriteDelegate`1<RdAggregateUserMessage> Write;
    public static CtxWriteDelegate`1<List`1<RdUserMessage>> WriteRdUserMessageList;
    [NotNullAttribute]
public List`1<RdUserMessage> Messages { get; private set; }
    public RdAggregateUserMessage(List`1<RdUserMessage> messages);
    private static RdAggregateUserMessage();
    [CompilerGeneratedAttribute]
public List`1<RdUserMessage> get_Messages();
    [CompilerGeneratedAttribute]
private void set_Messages(List`1<RdUserMessage> value);
    public virtual bool Equals(object obj);
    public bool Equals(RdAggregateUserMessage other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdBuildProjectItem : object {
    [CompilerGeneratedAttribute]
private string <EvaluatedInclude>k__BackingField;
    public static CtxReadDelegate`1<RdBuildProjectItem> Read;
    public static CtxWriteDelegate`1<RdBuildProjectItem> Write;
    [NotNullAttribute]
public string EvaluatedInclude { get; private set; }
    public RdBuildProjectItem(string evaluatedInclude);
    private static RdBuildProjectItem();
    [CompilerGeneratedAttribute]
public string get_EvaluatedInclude();
    [CompilerGeneratedAttribute]
private void set_EvaluatedInclude(string value);
    public void Deconstruct(String& evaluatedInclude);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdBuildProjectItem other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdBuildRequest : object {
    [CompilerGeneratedAttribute]
private RdProjectId <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdInputProperty> <Properties>k__BackingField;
    public static CtxReadDelegate`1<RdBuildRequest> Read;
    public static CtxReadDelegate`1<List`1<RdInputProperty>> ReadRdInputPropertyList;
    public static CtxWriteDelegate`1<RdBuildRequest> Write;
    public static CtxWriteDelegate`1<List`1<RdInputProperty>> WriteRdInputPropertyList;
    [NotNullAttribute]
public RdProjectId Id { get; private set; }
    [NotNullAttribute]
public string Path { get; private set; }
    [NotNullAttribute]
public List`1<RdInputProperty> Properties { get; private set; }
    public RdBuildRequest(RdProjectId id, string path, List`1<RdInputProperty> properties);
    private static RdBuildRequest();
    [CompilerGeneratedAttribute]
public RdProjectId get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(RdProjectId value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public List`1<RdInputProperty> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(List`1<RdInputProperty> value);
    public void Deconstruct(RdProjectId& id, String& path, List`1& properties);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdBuildRequest other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdBuildResult : object {
    [CompilerGeneratedAttribute]
private bool <Succeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private RdUserMessage <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private RdCopyTaskGlobalProperties <CopyTaskGlobalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdBuildProjectItem> <ProjectItems>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WarningsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdCopyTaskResult> <CopyTaskResults>k__BackingField;
    public static CtxReadDelegate`1<RdBuildResult> Read;
    public static CtxReadDelegate`1<RdUserMessage> ReadRdUserMessageNullable;
    public static CtxReadDelegate`1<RdCopyTaskGlobalProperties> ReadRdCopyTaskGlobalPropertiesNullable;
    public static CtxReadDelegate`1<List`1<RdBuildProjectItem>> ReadRdBuildProjectItemList;
    public static CtxReadDelegate`1<List`1<RdCopyTaskResult>> ReadRdCopyTaskResultList;
    public static CtxWriteDelegate`1<RdBuildResult> Write;
    public static CtxWriteDelegate`1<RdUserMessage> WriteRdUserMessageNullable;
    public static CtxWriteDelegate`1<RdCopyTaskGlobalProperties> WriteRdCopyTaskGlobalPropertiesNullable;
    public static CtxWriteDelegate`1<List`1<RdBuildProjectItem>> WriteRdBuildProjectItemList;
    public static CtxWriteDelegate`1<List`1<RdCopyTaskResult>> WriteRdCopyTaskResultList;
    public bool Succeeded { get; private set; }
    [CanBeNullAttribute]
public RdUserMessage ErrorMessage { get; private set; }
    [CanBeNullAttribute]
public RdCopyTaskGlobalProperties CopyTaskGlobalProperties { get; private set; }
    [NotNullAttribute]
public List`1<RdBuildProjectItem> ProjectItems { get; private set; }
    public int ErrorsCount { get; private set; }
    public int WarningsCount { get; private set; }
    [NotNullAttribute]
public List`1<RdCopyTaskResult> CopyTaskResults { get; private set; }
    public RdBuildResult(bool succeeded, RdUserMessage errorMessage, RdCopyTaskGlobalProperties copyTaskGlobalProperties, List`1<RdBuildProjectItem> projectItems, int errorsCount, int warningsCount, List`1<RdCopyTaskResult> copyTaskResults);
    private static RdBuildResult();
    [CompilerGeneratedAttribute]
public bool get_Succeeded();
    [CompilerGeneratedAttribute]
private void set_Succeeded(bool value);
    [CompilerGeneratedAttribute]
public RdUserMessage get_ErrorMessage();
    [CompilerGeneratedAttribute]
private void set_ErrorMessage(RdUserMessage value);
    [CompilerGeneratedAttribute]
public RdCopyTaskGlobalProperties get_CopyTaskGlobalProperties();
    [CompilerGeneratedAttribute]
private void set_CopyTaskGlobalProperties(RdCopyTaskGlobalProperties value);
    [CompilerGeneratedAttribute]
public List`1<RdBuildProjectItem> get_ProjectItems();
    [CompilerGeneratedAttribute]
private void set_ProjectItems(List`1<RdBuildProjectItem> value);
    [CompilerGeneratedAttribute]
public int get_ErrorsCount();
    [CompilerGeneratedAttribute]
private void set_ErrorsCount(int value);
    [CompilerGeneratedAttribute]
public int get_WarningsCount();
    [CompilerGeneratedAttribute]
private void set_WarningsCount(int value);
    [CompilerGeneratedAttribute]
public List`1<RdCopyTaskResult> get_CopyTaskResults();
    [CompilerGeneratedAttribute]
private void set_CopyTaskResults(List`1<RdCopyTaskResult> value);
    public void Deconstruct(Boolean& succeeded, RdUserMessage& errorMessage, RdCopyTaskGlobalProperties& copyTaskGlobalProperties, List`1& projectItems, Int32& errorsCount, Int32& warningsCount, List`1& copyTaskResults);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdBuildResult other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdBuildSession : RdSession {
    [CompilerGeneratedAttribute]
private RdBuildSessionContext <Context>k__BackingField;
    [NotNullAttribute]
private RdCall`2<RdBuildRequest, RdBuildResult> _BeginBuild;
    [NotNullAttribute]
private RdCall`2<Unit, Unit> _ShutdownBuildController;
    [NotNullAttribute]
private RdSignal`1<RdUserMessage> _UnexpectedException;
    [NotNullAttribute]
private RdSignal`1<BuildEventNotification> _Notifications;
    [NotNullAttribute]
private RdCall`2<RdCopyTaskContext, Unit> _ExecuteCopyTask;
    [NotNullAttribute]
private RdCall`2<RdCustomTargetContext, RdCustomTargetResult> _ExecuteCustomTarget;
    public static CtxReadDelegate`1<RdBuildSession> Read;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxWriteDelegate`1<RdBuildSession> Write;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    [NotNullAttribute]
public RdBuildSessionContext Context { get; private set; }
    [NotNullAttribute]
public IRdEndpoint`2<RdBuildRequest, RdBuildResult> BeginBuild { get; }
    [NotNullAttribute]
public IRdEndpoint`2<Unit, Unit> ShutdownBuildController { get; }
    [NotNullAttribute]
public IRdEndpoint`2<RdCopyTaskContext, Unit> ExecuteCopyTask { get; }
    [NotNullAttribute]
public IRdEndpoint`2<RdCustomTargetContext, RdCustomTargetResult> ExecuteCustomTarget { get; }
    private RdBuildSession(RdBuildSessionContext context, RdCall`2<RdBuildRequest, RdBuildResult> beginBuild, RdCall`2<Unit, Unit> shutdownBuildController, RdSignal`1<RdUserMessage> unexpectedException, RdSignal`1<BuildEventNotification> notifications, RdCall`2<RdCopyTaskContext, Unit> executeCopyTask, RdCall`2<RdCustomTargetContext, RdCustomTargetResult> executeCustomTarget, RdSignal`1<Unit> shutdown, RdCall`2<Unit, string> checkState);
    public RdBuildSession(RdBuildSessionContext context);
    private static RdBuildSession();
    [CompilerGeneratedAttribute]
public RdBuildSessionContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(RdBuildSessionContext value);
    public IRdEndpoint`2<RdBuildRequest, RdBuildResult> get_BeginBuild();
    public IRdEndpoint`2<Unit, Unit> get_ShutdownBuildController();
    [NotNullAttribute]
public void UnexpectedException(RdUserMessage value);
    [NotNullAttribute]
public void Notifications(BuildEventNotification value);
    public IRdEndpoint`2<RdCopyTaskContext, Unit> get_ExecuteCopyTask();
    public IRdEndpoint`2<RdCustomTargetContext, RdCustomTargetResult> get_ExecuteCustomTarget();
    public virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdBuildSessionContext : object {
    [CompilerGeneratedAttribute]
private List`1<RdInputProperty> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NodeCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StoragePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogToOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private RdVerbosityLevel <OutputLoggerVerbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogToFile>k__BackingField;
    [CompilerGeneratedAttribute]
private RdVerbosityLevel <FileLoggerVerbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileLoggerPath>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <PropertiesToEvaluate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NewLogMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DiagnosticMode>k__BackingField;
    public static CtxReadDelegate`1<RdBuildSessionContext> Read;
    public static CtxReadDelegate`1<List`1<RdInputProperty>> ReadRdInputPropertyList;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxReadDelegate`1<List`1<string>> ReadStringList;
    public static CtxWriteDelegate`1<RdBuildSessionContext> Write;
    public static CtxWriteDelegate`1<List`1<RdInputProperty>> WriteRdInputPropertyList;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    public static CtxWriteDelegate`1<List`1<string>> WriteStringList;
    [NotNullAttribute]
public List`1<RdInputProperty> Properties { get; private set; }
    public int NodeCount { get; private set; }
    [NotNullAttribute]
public string Target { get; private set; }
    [NotNullAttribute]
public string StoragePath { get; private set; }
    [CanBeNullAttribute]
public string ToolsVersion { get; private set; }
    public bool LogToOutput { get; private set; }
    public RdVerbosityLevel OutputLoggerVerbosity { get; private set; }
    public bool LogToFile { get; private set; }
    public RdVerbosityLevel FileLoggerVerbosity { get; private set; }
    [CanBeNullAttribute]
public string FileLoggerPath { get; private set; }
    [NotNullAttribute]
public List`1<string> PropertiesToEvaluate { get; private set; }
    public bool NewLogMode { get; private set; }
    public bool DiagnosticMode { get; private set; }
    public RdBuildSessionContext(List`1<RdInputProperty> properties, int nodeCount, string target, string storagePath, string toolsVersion, bool logToOutput, RdVerbosityLevel outputLoggerVerbosity, bool logToFile, RdVerbosityLevel fileLoggerVerbosity, string fileLoggerPath, List`1<string> propertiesToEvaluate, bool newLogMode, bool diagnosticMode);
    private static RdBuildSessionContext();
    [CompilerGeneratedAttribute]
public List`1<RdInputProperty> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(List`1<RdInputProperty> value);
    [CompilerGeneratedAttribute]
public int get_NodeCount();
    [CompilerGeneratedAttribute]
private void set_NodeCount(int value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
private void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_StoragePath();
    [CompilerGeneratedAttribute]
private void set_StoragePath(string value);
    [CompilerGeneratedAttribute]
public string get_ToolsVersion();
    [CompilerGeneratedAttribute]
private void set_ToolsVersion(string value);
    [CompilerGeneratedAttribute]
public bool get_LogToOutput();
    [CompilerGeneratedAttribute]
private void set_LogToOutput(bool value);
    [CompilerGeneratedAttribute]
public RdVerbosityLevel get_OutputLoggerVerbosity();
    [CompilerGeneratedAttribute]
private void set_OutputLoggerVerbosity(RdVerbosityLevel value);
    [CompilerGeneratedAttribute]
public bool get_LogToFile();
    [CompilerGeneratedAttribute]
private void set_LogToFile(bool value);
    [CompilerGeneratedAttribute]
public RdVerbosityLevel get_FileLoggerVerbosity();
    [CompilerGeneratedAttribute]
private void set_FileLoggerVerbosity(RdVerbosityLevel value);
    [CompilerGeneratedAttribute]
public string get_FileLoggerPath();
    [CompilerGeneratedAttribute]
private void set_FileLoggerPath(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_PropertiesToEvaluate();
    [CompilerGeneratedAttribute]
private void set_PropertiesToEvaluate(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_NewLogMode();
    [CompilerGeneratedAttribute]
private void set_NewLogMode(bool value);
    [CompilerGeneratedAttribute]
public bool get_DiagnosticMode();
    [CompilerGeneratedAttribute]
private void set_DiagnosticMode(bool value);
    public void Deconstruct(List`1& properties, Int32& nodeCount, String& target, String& storagePath, String& toolsVersion, Boolean& logToOutput, RdVerbosityLevel& outputLoggerVerbosity, Boolean& logToFile, RdVerbosityLevel& fileLoggerVerbosity, String& fileLoggerPath, List`1& propertiesToEvaluate, Boolean& newLogMode, Boolean& diagnosticMode);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdBuildSessionContext other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdCalculateConfigurationPropertiesContext : object {
    [CompilerGeneratedAttribute]
private string <ProjectFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdInputProperty> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private RdProjectConfiguration <ProjectConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CalculatePropertiesOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CalculateActiveValueOnly>k__BackingField;
    public static CtxReadDelegate`1<RdCalculateConfigurationPropertiesContext> Read;
    public static CtxReadDelegate`1<List`1<RdInputProperty>> ReadRdInputPropertyList;
    public static CtxWriteDelegate`1<RdCalculateConfigurationPropertiesContext> Write;
    public static CtxWriteDelegate`1<List`1<RdInputProperty>> WriteRdInputPropertyList;
    [NotNullAttribute]
public string ProjectFilePath { get; private set; }
    [NotNullAttribute]
public List`1<RdInputProperty> Properties { get; private set; }
    [NotNullAttribute]
public RdProjectConfiguration ProjectConfiguration { get; private set; }
    public bool CalculatePropertiesOnly { get; private set; }
    public bool CalculateActiveValueOnly { get; private set; }
    public RdCalculateConfigurationPropertiesContext(string projectFilePath, List`1<RdInputProperty> properties, RdProjectConfiguration projectConfiguration, bool calculatePropertiesOnly, bool calculateActiveValueOnly);
    private static RdCalculateConfigurationPropertiesContext();
    [CompilerGeneratedAttribute]
public string get_ProjectFilePath();
    [CompilerGeneratedAttribute]
private void set_ProjectFilePath(string value);
    [CompilerGeneratedAttribute]
public List`1<RdInputProperty> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(List`1<RdInputProperty> value);
    [CompilerGeneratedAttribute]
public RdProjectConfiguration get_ProjectConfiguration();
    [CompilerGeneratedAttribute]
private void set_ProjectConfiguration(RdProjectConfiguration value);
    [CompilerGeneratedAttribute]
public bool get_CalculatePropertiesOnly();
    [CompilerGeneratedAttribute]
private void set_CalculatePropertiesOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_CalculateActiveValueOnly();
    [CompilerGeneratedAttribute]
private void set_CalculateActiveValueOnly(bool value);
    public void Deconstruct(String& projectFilePath, List`1& properties, RdProjectConfiguration& projectConfiguration, Boolean& calculatePropertiesOnly, Boolean& calculateActiveValueOnly);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdCalculateConfigurationPropertiesContext other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdCalculateConfigurationPropertiesResult : object {
    [CompilerGeneratedAttribute]
private RdCalculatePropertiesConfiguration <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdCalculateItem> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdCalculateItemDefinition> <ItemDefinitions>k__BackingField;
    public static CtxReadDelegate`1<RdCalculateConfigurationPropertiesResult> Read;
    public static CtxReadDelegate`1<List`1<RdCalculateItem>> ReadRdCalculateItemListNullable;
    public static CtxReadDelegate`1<List`1<RdCalculateItemDefinition>> ReadRdCalculateItemDefinitionListNullable;
    public static CtxWriteDelegate`1<RdCalculateConfigurationPropertiesResult> Write;
    public static CtxWriteDelegate`1<List`1<RdCalculateItem>> WriteRdCalculateItemListNullable;
    public static CtxWriteDelegate`1<List`1<RdCalculateItemDefinition>> WriteRdCalculateItemDefinitionListNullable;
    [NotNullAttribute]
public RdCalculatePropertiesConfiguration Properties { get; private set; }
    [CanBeNullAttribute]
public List`1<RdCalculateItem> Items { get; private set; }
    [CanBeNullAttribute]
public List`1<RdCalculateItemDefinition> ItemDefinitions { get; private set; }
    public RdCalculateConfigurationPropertiesResult(RdCalculatePropertiesConfiguration properties, List`1<RdCalculateItem> items, List`1<RdCalculateItemDefinition> itemDefinitions);
    private static RdCalculateConfigurationPropertiesResult();
    [CompilerGeneratedAttribute]
public RdCalculatePropertiesConfiguration get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(RdCalculatePropertiesConfiguration value);
    [CompilerGeneratedAttribute]
public List`1<RdCalculateItem> get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(List`1<RdCalculateItem> value);
    [CompilerGeneratedAttribute]
public List`1<RdCalculateItemDefinition> get_ItemDefinitions();
    [CompilerGeneratedAttribute]
private void set_ItemDefinitions(List`1<RdCalculateItemDefinition> value);
    public void Deconstruct(RdCalculatePropertiesConfiguration& properties, List`1& items, List`1& itemDefinitions);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdCalculateConfigurationPropertiesResult other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdCalculateItem : RdCalculateItemWithMetadata {
    [CompilerGeneratedAttribute]
private string <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EvaluatedInclude>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnevaluatedInclude>k__BackingField;
    public static CtxReadDelegate`1<RdCalculateItem> Read;
    public static CtxReadDelegate`1<string> ReadStringInternedAtProtocol;
    public static CtxReadDelegate`1<string> ReadStringInternedAtReloadProjectSessionInternScope;
    public static CtxReadDelegate`1<List`1<RdCalculateMetadata>> ReadRdCalculateMetadataList;
    public static CtxWriteDelegate`1<RdCalculateItem> Write;
    public static CtxWriteDelegate`1<string> WriteStringInternedAtProtocol;
    public static CtxWriteDelegate`1<string> WriteStringInternedAtReloadProjectSessionInternScope;
    public static CtxWriteDelegate`1<List`1<RdCalculateMetadata>> WriteRdCalculateMetadataList;
    [NotNullAttribute]
public string ItemType { get; private set; }
    [NotNullAttribute]
public string EvaluatedInclude { get; private set; }
    [NotNullAttribute]
public string UnevaluatedInclude { get; private set; }
    public RdCalculateItem(string itemType, string evaluatedInclude, string unevaluatedInclude, List`1<RdCalculateMetadata> metadata);
    private static RdCalculateItem();
    [CompilerGeneratedAttribute]
public string get_ItemType();
    [CompilerGeneratedAttribute]
private void set_ItemType(string value);
    [CompilerGeneratedAttribute]
public string get_EvaluatedInclude();
    [CompilerGeneratedAttribute]
private void set_EvaluatedInclude(string value);
    [CompilerGeneratedAttribute]
public string get_UnevaluatedInclude();
    [CompilerGeneratedAttribute]
private void set_UnevaluatedInclude(string value);
    public virtual bool Equals(object obj);
    public bool Equals(RdCalculateItem other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdCalculateItemDefinition : RdCalculateItemWithMetadata {
    [CompilerGeneratedAttribute]
private string <ItemType>k__BackingField;
    public static CtxReadDelegate`1<RdCalculateItemDefinition> Read;
    public static CtxReadDelegate`1<string> ReadStringInternedAtProtocol;
    public static CtxReadDelegate`1<List`1<RdCalculateMetadata>> ReadRdCalculateMetadataList;
    public static CtxWriteDelegate`1<RdCalculateItemDefinition> Write;
    public static CtxWriteDelegate`1<string> WriteStringInternedAtProtocol;
    public static CtxWriteDelegate`1<List`1<RdCalculateMetadata>> WriteRdCalculateMetadataList;
    [NotNullAttribute]
public string ItemType { get; private set; }
    public RdCalculateItemDefinition(string itemType, List`1<RdCalculateMetadata> metadata);
    private static RdCalculateItemDefinition();
    [CompilerGeneratedAttribute]
public string get_ItemType();
    [CompilerGeneratedAttribute]
private void set_ItemType(string value);
    public virtual bool Equals(object obj);
    public bool Equals(RdCalculateItemDefinition other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdCalculateItemDefinitionsConfiguration : object {
    [CompilerGeneratedAttribute]
private RdProjectConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdCalculateItemDefinition> <ItemDefinitions>k__BackingField;
    public static CtxReadDelegate`1<RdCalculateItemDefinitionsConfiguration> Read;
    public static CtxReadDelegate`1<List`1<RdCalculateItemDefinition>> ReadRdCalculateItemDefinitionList;
    public static CtxWriteDelegate`1<RdCalculateItemDefinitionsConfiguration> Write;
    public static CtxWriteDelegate`1<List`1<RdCalculateItemDefinition>> WriteRdCalculateItemDefinitionList;
    [NotNullAttribute]
public RdProjectConfiguration Configuration { get; private set; }
    [NotNullAttribute]
public List`1<RdCalculateItemDefinition> ItemDefinitions { get; private set; }
    public RdCalculateItemDefinitionsConfiguration(RdProjectConfiguration configuration, List`1<RdCalculateItemDefinition> itemDefinitions);
    private static RdCalculateItemDefinitionsConfiguration();
    [CompilerGeneratedAttribute]
public RdProjectConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
private void set_Configuration(RdProjectConfiguration value);
    [CompilerGeneratedAttribute]
public List`1<RdCalculateItemDefinition> get_ItemDefinitions();
    [CompilerGeneratedAttribute]
private void set_ItemDefinitions(List`1<RdCalculateItemDefinition> value);
    public void Deconstruct(RdProjectConfiguration& configuration, List`1& itemDefinitions);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdCalculateItemDefinitionsConfiguration other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdCalculateItemsConfiguration : object {
    [CompilerGeneratedAttribute]
private RdProjectConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdCalculateItem> <Items>k__BackingField;
    public static CtxReadDelegate`1<RdCalculateItemsConfiguration> Read;
    public static CtxReadDelegate`1<List`1<RdCalculateItem>> ReadRdCalculateItemList;
    public static CtxWriteDelegate`1<RdCalculateItemsConfiguration> Write;
    public static CtxWriteDelegate`1<List`1<RdCalculateItem>> WriteRdCalculateItemList;
    [NotNullAttribute]
public RdProjectConfiguration Configuration { get; private set; }
    [NotNullAttribute]
public List`1<RdCalculateItem> Items { get; private set; }
    public RdCalculateItemsConfiguration(RdProjectConfiguration configuration, List`1<RdCalculateItem> items);
    private static RdCalculateItemsConfiguration();
    [CompilerGeneratedAttribute]
public RdProjectConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
private void set_Configuration(RdProjectConfiguration value);
    [CompilerGeneratedAttribute]
public List`1<RdCalculateItem> get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(List`1<RdCalculateItem> value);
    public void Deconstruct(RdProjectConfiguration& configuration, List`1& items);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdCalculateItemsConfiguration other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public abstract class JetBrains.Platform.MsBuildTask.Models.RdCalculateItemWithMetadata : object {
    [CompilerGeneratedAttribute]
private List`1<RdCalculateMetadata> <Metadata>k__BackingField;
    public static CtxReadDelegate`1<RdCalculateItemWithMetadata> Read;
    public static CtxWriteDelegate`1<RdCalculateItemWithMetadata> Write;
    [NotNullAttribute]
public List`1<RdCalculateMetadata> Metadata { get; private set; }
    protected RdCalculateItemWithMetadata(List`1<RdCalculateMetadata> metadata);
    private static RdCalculateItemWithMetadata();
    [CompilerGeneratedAttribute]
public List`1<RdCalculateMetadata> get_Metadata();
    [CompilerGeneratedAttribute]
private void set_Metadata(List`1<RdCalculateMetadata> value);
}
public class JetBrains.Platform.MsBuildTask.Models.RdCalculateItemWithMetadata_Unknown : RdCalculateItemWithMetadata {
    public static CtxReadDelegate`1<RdCalculateItemWithMetadata_Unknown> Read;
    public static CtxReadDelegate`1<List`1<RdCalculateMetadata>> ReadRdCalculateMetadataList;
    public static CtxWriteDelegate`1<RdCalculateItemWithMetadata_Unknown> Write;
    public static CtxWriteDelegate`1<List`1<RdCalculateMetadata>> WriteRdCalculateMetadataList;
    public RdCalculateItemWithMetadata_Unknown(List`1<RdCalculateMetadata> metadata);
    private static RdCalculateItemWithMetadata_Unknown();
    public virtual bool Equals(object obj);
    public bool Equals(RdCalculateItemWithMetadata_Unknown other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdCalculateMetadata : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private RdCalculateMetadataValue <ActiveValue>k__BackingField;
    [CompilerGeneratedAttribute]
private RdCalculateMetadataValue <ProjectValue>k__BackingField;
    [CompilerGeneratedAttribute]
private RdCalculateMetadataValue <InheritedValue>k__BackingField;
    public static CtxReadDelegate`1<RdCalculateMetadata> Read;
    public static CtxReadDelegate`1<string> ReadStringInternedAtReloadProjectSessionInternScope;
    public static CtxReadDelegate`1<RdCalculateMetadataValue> ReadRdCalculateMetadataValueNullable;
    public static CtxWriteDelegate`1<RdCalculateMetadata> Write;
    public static CtxWriteDelegate`1<string> WriteStringInternedAtReloadProjectSessionInternScope;
    public static CtxWriteDelegate`1<RdCalculateMetadataValue> WriteRdCalculateMetadataValueNullable;
    [NotNullAttribute]
public string Name { get; private set; }
    [NotNullAttribute]
public RdCalculateMetadataValue ActiveValue { get; private set; }
    [CanBeNullAttribute]
public RdCalculateMetadataValue ProjectValue { get; private set; }
    [CanBeNullAttribute]
public RdCalculateMetadataValue InheritedValue { get; private set; }
    public RdCalculateMetadata(string name, RdCalculateMetadataValue activeValue, RdCalculateMetadataValue projectValue, RdCalculateMetadataValue inheritedValue);
    private static RdCalculateMetadata();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public RdCalculateMetadataValue get_ActiveValue();
    [CompilerGeneratedAttribute]
private void set_ActiveValue(RdCalculateMetadataValue value);
    [CompilerGeneratedAttribute]
public RdCalculateMetadataValue get_ProjectValue();
    [CompilerGeneratedAttribute]
private void set_ProjectValue(RdCalculateMetadataValue value);
    [CompilerGeneratedAttribute]
public RdCalculateMetadataValue get_InheritedValue();
    [CompilerGeneratedAttribute]
private void set_InheritedValue(RdCalculateMetadataValue value);
    public void Deconstruct(String& name, RdCalculateMetadataValue& activeValue, RdCalculateMetadataValue& projectValue, RdCalculateMetadataValue& inheritedValue);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdCalculateMetadata other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdCalculateMetadataValue : object {
    [CompilerGeneratedAttribute]
private string <EvaluatedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnevaluatedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExpressedAsAttribute>k__BackingField;
    public static CtxReadDelegate`1<RdCalculateMetadataValue> Read;
    public static CtxReadDelegate`1<string> ReadStringInternedAtReloadProjectSessionInternScope;
    public static CtxWriteDelegate`1<RdCalculateMetadataValue> Write;
    public static CtxWriteDelegate`1<string> WriteStringInternedAtReloadProjectSessionInternScope;
    [NotNullAttribute]
public string EvaluatedValue { get; private set; }
    [NotNullAttribute]
public string UnevaluatedValue { get; private set; }
    public bool ExpressedAsAttribute { get; private set; }
    public RdCalculateMetadataValue(string evaluatedValue, string unevaluatedValue, bool expressedAsAttribute);
    private static RdCalculateMetadataValue();
    [CompilerGeneratedAttribute]
public string get_EvaluatedValue();
    [CompilerGeneratedAttribute]
private void set_EvaluatedValue(string value);
    [CompilerGeneratedAttribute]
public string get_UnevaluatedValue();
    [CompilerGeneratedAttribute]
private void set_UnevaluatedValue(string value);
    [CompilerGeneratedAttribute]
public bool get_ExpressedAsAttribute();
    [CompilerGeneratedAttribute]
private void set_ExpressedAsAttribute(bool value);
    public void Deconstruct(String& evaluatedValue, String& unevaluatedValue, Boolean& expressedAsAttribute);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdCalculateMetadataValue other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdCalculatePropertiesConfiguration : object {
    [CompilerGeneratedAttribute]
private RdProjectConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdCalculateProperty> <Properties>k__BackingField;
    public static CtxReadDelegate`1<RdCalculatePropertiesConfiguration> Read;
    public static CtxReadDelegate`1<List`1<RdCalculateProperty>> ReadRdCalculatePropertyList;
    public static CtxWriteDelegate`1<RdCalculatePropertiesConfiguration> Write;
    public static CtxWriteDelegate`1<List`1<RdCalculateProperty>> WriteRdCalculatePropertyList;
    [NotNullAttribute]
public RdProjectConfiguration Configuration { get; private set; }
    [NotNullAttribute]
public List`1<RdCalculateProperty> Properties { get; private set; }
    public RdCalculatePropertiesConfiguration(RdProjectConfiguration configuration, List`1<RdCalculateProperty> properties);
    private static RdCalculatePropertiesConfiguration();
    [CompilerGeneratedAttribute]
public RdProjectConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
private void set_Configuration(RdProjectConfiguration value);
    [CompilerGeneratedAttribute]
public List`1<RdCalculateProperty> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(List`1<RdCalculateProperty> value);
    public void Deconstruct(RdProjectConfiguration& configuration, List`1& properties);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdCalculatePropertiesConfiguration other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdCalculatePropertiesContext : object {
    [CompilerGeneratedAttribute]
private string <ProjectFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdInputProperty> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CalculateActiveValueOnly>k__BackingField;
    public static CtxReadDelegate`1<RdCalculatePropertiesContext> Read;
    public static CtxReadDelegate`1<List`1<RdInputProperty>> ReadRdInputPropertyList;
    public static CtxWriteDelegate`1<RdCalculatePropertiesContext> Write;
    public static CtxWriteDelegate`1<List`1<RdInputProperty>> WriteRdInputPropertyList;
    [NotNullAttribute]
public string ProjectFilePath { get; private set; }
    [NotNullAttribute]
public List`1<RdInputProperty> Properties { get; private set; }
    public bool CalculateActiveValueOnly { get; private set; }
    public RdCalculatePropertiesContext(string projectFilePath, List`1<RdInputProperty> properties, bool calculateActiveValueOnly);
    private static RdCalculatePropertiesContext();
    [CompilerGeneratedAttribute]
public string get_ProjectFilePath();
    [CompilerGeneratedAttribute]
private void set_ProjectFilePath(string value);
    [CompilerGeneratedAttribute]
public List`1<RdInputProperty> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(List`1<RdInputProperty> value);
    [CompilerGeneratedAttribute]
public bool get_CalculateActiveValueOnly();
    [CompilerGeneratedAttribute]
private void set_CalculateActiveValueOnly(bool value);
    public void Deconstruct(String& projectFilePath, List`1& properties, Boolean& calculateActiveValueOnly);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdCalculatePropertiesContext other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdCalculatePropertiesResult : object {
    [CompilerGeneratedAttribute]
private List`1<string> <Imports>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdCalculateProperty> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdProjectConfiguration> <Configurations>k__BackingField;
    public static CtxReadDelegate`1<RdCalculatePropertiesResult> Read;
    public static CtxReadDelegate`1<List`1<string>> ReadStringList;
    public static CtxReadDelegate`1<List`1<RdCalculateProperty>> ReadRdCalculatePropertyList;
    public static CtxReadDelegate`1<List`1<RdProjectConfiguration>> ReadRdProjectConfigurationList;
    public static CtxWriteDelegate`1<RdCalculatePropertiesResult> Write;
    public static CtxWriteDelegate`1<List`1<string>> WriteStringList;
    public static CtxWriteDelegate`1<List`1<RdCalculateProperty>> WriteRdCalculatePropertyList;
    public static CtxWriteDelegate`1<List`1<RdProjectConfiguration>> WriteRdProjectConfigurationList;
    [NotNullAttribute]
public List`1<string> Imports { get; private set; }
    [NotNullAttribute]
public List`1<RdCalculateProperty> Properties { get; private set; }
    [NotNullAttribute]
public List`1<RdProjectConfiguration> Configurations { get; private set; }
    public RdCalculatePropertiesResult(List`1<string> imports, List`1<RdCalculateProperty> properties, List`1<RdProjectConfiguration> configurations);
    private static RdCalculatePropertiesResult();
    [CompilerGeneratedAttribute]
public List`1<string> get_Imports();
    [CompilerGeneratedAttribute]
private void set_Imports(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<RdCalculateProperty> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(List`1<RdCalculateProperty> value);
    [CompilerGeneratedAttribute]
public List`1<RdProjectConfiguration> get_Configurations();
    [CompilerGeneratedAttribute]
private void set_Configurations(List`1<RdProjectConfiguration> value);
    public void Deconstruct(List`1& imports, List`1& properties, List`1& configurations);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdCalculatePropertiesResult other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdCalculateProperty : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private RdCalculatePropertyValue <ActiveValue>k__BackingField;
    [CompilerGeneratedAttribute]
private RdCalculatePropertyValue <ProjectValue>k__BackingField;
    [CompilerGeneratedAttribute]
private RdCalculatePropertyValue <InheritedValue>k__BackingField;
    public static CtxReadDelegate`1<RdCalculateProperty> Read;
    public static CtxReadDelegate`1<RdCalculatePropertyValue> ReadRdCalculatePropertyValueNullable;
    public static CtxWriteDelegate`1<RdCalculateProperty> Write;
    public static CtxWriteDelegate`1<RdCalculatePropertyValue> WriteRdCalculatePropertyValueNullable;
    [NotNullAttribute]
public string Name { get; private set; }
    [NotNullAttribute]
public RdCalculatePropertyValue ActiveValue { get; private set; }
    [CanBeNullAttribute]
public RdCalculatePropertyValue ProjectValue { get; private set; }
    [CanBeNullAttribute]
public RdCalculatePropertyValue InheritedValue { get; private set; }
    public RdCalculateProperty(string name, RdCalculatePropertyValue activeValue, RdCalculatePropertyValue projectValue, RdCalculatePropertyValue inheritedValue);
    private static RdCalculateProperty();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public RdCalculatePropertyValue get_ActiveValue();
    [CompilerGeneratedAttribute]
private void set_ActiveValue(RdCalculatePropertyValue value);
    [CompilerGeneratedAttribute]
public RdCalculatePropertyValue get_ProjectValue();
    [CompilerGeneratedAttribute]
private void set_ProjectValue(RdCalculatePropertyValue value);
    [CompilerGeneratedAttribute]
public RdCalculatePropertyValue get_InheritedValue();
    [CompilerGeneratedAttribute]
private void set_InheritedValue(RdCalculatePropertyValue value);
    public void Deconstruct(String& name, RdCalculatePropertyValue& activeValue, RdCalculatePropertyValue& projectValue, RdCalculatePropertyValue& inheritedValue);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdCalculateProperty other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdCalculatePropertyValue : object {
    [CompilerGeneratedAttribute]
private string <EvaluatedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnevaluatedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReadonly>k__BackingField;
    public static CtxReadDelegate`1<RdCalculatePropertyValue> Read;
    public static CtxWriteDelegate`1<RdCalculatePropertyValue> Write;
    [NotNullAttribute]
public string EvaluatedValue { get; private set; }
    [NotNullAttribute]
public string UnevaluatedValue { get; private set; }
    public bool IsReadonly { get; private set; }
    public RdCalculatePropertyValue(string evaluatedValue, string unevaluatedValue, bool isReadonly);
    private static RdCalculatePropertyValue();
    [CompilerGeneratedAttribute]
public string get_EvaluatedValue();
    [CompilerGeneratedAttribute]
private void set_EvaluatedValue(string value);
    [CompilerGeneratedAttribute]
public string get_UnevaluatedValue();
    [CompilerGeneratedAttribute]
private void set_UnevaluatedValue(string value);
    [CompilerGeneratedAttribute]
public bool get_IsReadonly();
    [CompilerGeneratedAttribute]
private void set_IsReadonly(bool value);
    public void Deconstruct(String& evaluatedValue, String& unevaluatedValue, Boolean& isReadonly);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdCalculatePropertyValue other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdCopyTaskContext : object {
    [CompilerGeneratedAttribute]
private RdProjectId <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdCopyTaskResult> <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private RdCopyTaskGlobalProperties <Properties>k__BackingField;
    public static CtxReadDelegate`1<RdCopyTaskContext> Read;
    public static CtxReadDelegate`1<List`1<RdCopyTaskResult>> ReadRdCopyTaskResultList;
    public static CtxWriteDelegate`1<RdCopyTaskContext> Write;
    public static CtxWriteDelegate`1<List`1<RdCopyTaskResult>> WriteRdCopyTaskResultList;
    [NotNullAttribute]
public RdProjectId ProjectId { get; private set; }
    [NotNullAttribute]
public List`1<RdCopyTaskResult> Data { get; private set; }
    [NotNullAttribute]
public RdCopyTaskGlobalProperties Properties { get; private set; }
    public RdCopyTaskContext(RdProjectId projectId, List`1<RdCopyTaskResult> data, RdCopyTaskGlobalProperties properties);
    private static RdCopyTaskContext();
    [CompilerGeneratedAttribute]
public RdProjectId get_ProjectId();
    [CompilerGeneratedAttribute]
private void set_ProjectId(RdProjectId value);
    [CompilerGeneratedAttribute]
public List`1<RdCopyTaskResult> get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(List`1<RdCopyTaskResult> value);
    [CompilerGeneratedAttribute]
public RdCopyTaskGlobalProperties get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(RdCopyTaskGlobalProperties value);
    public void Deconstruct(RdProjectId& projectId, List`1& data, RdCopyTaskGlobalProperties& properties);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdCopyTaskContext other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdCopyTaskGlobalProperties : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SkipCopyUnchangedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OverwriteReadOnlyFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CopyRetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CopyRetryDelayMilliseconds>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CreateHardLinksForCopyLocalIfPossible>k__BackingField;
    public static CtxReadDelegate`1<RdCopyTaskGlobalProperties> Read;
    public static CtxReadDelegate`1<Nullable`1<bool>> ReadBoolNullable;
    public static CtxReadDelegate`1<Nullable`1<int>> ReadIntNullable;
    public static CtxWriteDelegate`1<RdCopyTaskGlobalProperties> Write;
    public static CtxWriteDelegate`1<Nullable`1<bool>> WriteBoolNullable;
    public static CtxWriteDelegate`1<Nullable`1<int>> WriteIntNullable;
    [CanBeNullAttribute]
public Nullable`1<bool> SkipCopyUnchangedFiles { get; private set; }
    [CanBeNullAttribute]
public Nullable`1<bool> OverwriteReadOnlyFiles { get; private set; }
    [CanBeNullAttribute]
public Nullable`1<int> CopyRetryCount { get; private set; }
    [CanBeNullAttribute]
public Nullable`1<int> CopyRetryDelayMilliseconds { get; private set; }
    [CanBeNullAttribute]
public Nullable`1<bool> CreateHardLinksForCopyLocalIfPossible { get; private set; }
    public RdCopyTaskGlobalProperties(Nullable`1<bool> skipCopyUnchangedFiles, Nullable`1<bool> overwriteReadOnlyFiles, Nullable`1<int> copyRetryCount, Nullable`1<int> copyRetryDelayMilliseconds, Nullable`1<bool> createHardLinksForCopyLocalIfPossible);
    private static RdCopyTaskGlobalProperties();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SkipCopyUnchangedFiles();
    [CompilerGeneratedAttribute]
private void set_SkipCopyUnchangedFiles(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_OverwriteReadOnlyFiles();
    [CompilerGeneratedAttribute]
private void set_OverwriteReadOnlyFiles(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_CopyRetryCount();
    [CompilerGeneratedAttribute]
private void set_CopyRetryCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_CopyRetryDelayMilliseconds();
    [CompilerGeneratedAttribute]
private void set_CopyRetryDelayMilliseconds(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CreateHardLinksForCopyLocalIfPossible();
    [CompilerGeneratedAttribute]
private void set_CreateHardLinksForCopyLocalIfPossible(Nullable`1<bool> value);
    public void Deconstruct(Nullable`1& skipCopyUnchangedFiles, Nullable`1& overwriteReadOnlyFiles, Nullable`1& copyRetryCount, Nullable`1& copyRetryDelayMilliseconds, Nullable`1& createHardLinksForCopyLocalIfPossible);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdCopyTaskGlobalProperties other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdCopyTaskResult : object {
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Redundant>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Destination>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <SourceTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <DestinationTimestamp>k__BackingField;
    public static CtxReadDelegate`1<RdCopyTaskResult> Read;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxWriteDelegate`1<RdCopyTaskResult> Write;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    public bool IsValid { get; private set; }
    public bool Redundant { get; private set; }
    [CanBeNullAttribute]
public string ErrorMessage { get; private set; }
    [NotNullAttribute]
public string TargetName { get; private set; }
    [NotNullAttribute]
public string Source { get; private set; }
    [NotNullAttribute]
public string Destination { get; private set; }
    public DateTime SourceTimestamp { get; private set; }
    public DateTime DestinationTimestamp { get; private set; }
    public RdCopyTaskResult(bool isValid, bool redundant, string errorMessage, string targetName, string source, string destination, DateTime sourceTimestamp, DateTime destinationTimestamp);
    private static RdCopyTaskResult();
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
private void set_IsValid(bool value);
    [CompilerGeneratedAttribute]
public bool get_Redundant();
    [CompilerGeneratedAttribute]
private void set_Redundant(bool value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
private void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public string get_TargetName();
    [CompilerGeneratedAttribute]
private void set_TargetName(string value);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
private void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_Destination();
    [CompilerGeneratedAttribute]
private void set_Destination(string value);
    [CompilerGeneratedAttribute]
public DateTime get_SourceTimestamp();
    [CompilerGeneratedAttribute]
private void set_SourceTimestamp(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_DestinationTimestamp();
    [CompilerGeneratedAttribute]
private void set_DestinationTimestamp(DateTime value);
    public void Deconstruct(Boolean& isValid, Boolean& redundant, String& errorMessage, String& targetName, String& source, String& destination, DateTime& sourceTimestamp, DateTime& destinationTimestamp);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdCopyTaskResult other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public abstract class JetBrains.Platform.MsBuildTask.Models.RdCustomCommand : object {
    public static CtxReadDelegate`1<RdCustomCommand> Read;
    public static CtxWriteDelegate`1<RdCustomCommand> Write;
    private static RdCustomCommand();
}
public class JetBrains.Platform.MsBuildTask.Models.RdCustomCommand_Unknown : RdCustomCommand {
    public static CtxReadDelegate`1<RdCustomCommand_Unknown> Read;
    public static CtxWriteDelegate`1<RdCustomCommand_Unknown> Write;
    private static RdCustomCommand_Unknown();
    public virtual bool Equals(object obj);
    public bool Equals(RdCustomCommand_Unknown other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdCustomTargetContext : object {
    [CompilerGeneratedAttribute]
private RdBuildRequest <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    public static CtxReadDelegate`1<RdCustomTargetContext> Read;
    public static CtxWriteDelegate`1<RdCustomTargetContext> Write;
    [NotNullAttribute]
public RdBuildRequest Data { get; private set; }
    [NotNullAttribute]
public string Target { get; private set; }
    public RdCustomTargetContext(RdBuildRequest data, string target);
    private static RdCustomTargetContext();
    [CompilerGeneratedAttribute]
public RdBuildRequest get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(RdBuildRequest value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
private void set_Target(string value);
    public void Deconstruct(RdBuildRequest& data, String& target);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdCustomTargetContext other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdCustomTargetResult : object {
    [CompilerGeneratedAttribute]
private bool <Succeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private RdUserMessage <ErrorMessage>k__BackingField;
    public static CtxReadDelegate`1<RdCustomTargetResult> Read;
    public static CtxReadDelegate`1<RdUserMessage> ReadRdUserMessageNullable;
    public static CtxWriteDelegate`1<RdCustomTargetResult> Write;
    public static CtxWriteDelegate`1<RdUserMessage> WriteRdUserMessageNullable;
    public bool Succeeded { get; private set; }
    [CanBeNullAttribute]
public RdUserMessage ErrorMessage { get; private set; }
    public RdCustomTargetResult(bool succeeded, RdUserMessage errorMessage);
    private static RdCustomTargetResult();
    [CompilerGeneratedAttribute]
public bool get_Succeeded();
    [CompilerGeneratedAttribute]
private void set_Succeeded(bool value);
    [CompilerGeneratedAttribute]
public RdUserMessage get_ErrorMessage();
    [CompilerGeneratedAttribute]
private void set_ErrorMessage(RdUserMessage value);
    public void Deconstruct(Boolean& succeeded, RdUserMessage& errorMessage);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdCustomTargetResult other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdDeployCondition : object {
    [CompilerGeneratedAttribute]
private string <ItemName>k__BackingField;
    public static CtxReadDelegate`1<RdDeployCondition> Read;
    public static CtxWriteDelegate`1<RdDeployCondition> Write;
    [NotNullAttribute]
public string ItemName { get; private set; }
    public RdDeployCondition(string itemName);
    private static RdDeployCondition();
    [CompilerGeneratedAttribute]
public string get_ItemName();
    [CompilerGeneratedAttribute]
private void set_ItemName(string value);
    public void Deconstruct(String& itemName);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdDeployCondition other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public enum JetBrains.Platform.MsBuildTask.Models.RdDesignTimeBuildStatus : Enum {
    public int value__;
    public static RdDesignTimeBuildStatus Done;
    public static RdDesignTimeBuildStatus Skipped;
    public static RdDesignTimeBuildStatus NotNeeded;
    public static RdDesignTimeBuildStatus NotExecuted;
}
public class JetBrains.Platform.MsBuildTask.Models.RdEditTargetSession : RdBindableBase {
    [CompilerGeneratedAttribute]
private string <TargetName>k__BackingField;
    [NotNullAttribute]
private RdCall`2<Unit, List`1<RdProjectTargetProperty>> _GetProperties;
    [NotNullAttribute]
private RdCall`2<Unit, List`1<RdProjectTargetTask>> _GetTasks;
    [NotNullAttribute]
private RdCall`2<RdSetTargetPropertyContext, Unit> _SetProperty;
    [NotNullAttribute]
private RdCall`2<RdAddTaskContext, Unit> _AddTask;
    [NotNullAttribute]
private RdCall`2<RdRemoveTaskContext, Unit> _RemoveTask;
    public static CtxReadDelegate`1<RdEditTargetSession> Read;
    public static CtxReadDelegate`1<List`1<RdProjectTargetProperty>> ReadRdProjectTargetPropertyList;
    public static CtxReadDelegate`1<List`1<RdProjectTargetTask>> ReadRdProjectTargetTaskList;
    public static CtxWriteDelegate`1<RdEditTargetSession> Write;
    public static CtxWriteDelegate`1<List`1<RdProjectTargetProperty>> WriteRdProjectTargetPropertyList;
    public static CtxWriteDelegate`1<List`1<RdProjectTargetTask>> WriteRdProjectTargetTaskList;
    [NotNullAttribute]
public string TargetName { get; private set; }
    [NotNullAttribute]
public IRdEndpoint`2<Unit, List`1<RdProjectTargetProperty>> GetProperties { get; }
    [NotNullAttribute]
public IRdEndpoint`2<Unit, List`1<RdProjectTargetTask>> GetTasks { get; }
    [NotNullAttribute]
public IRdEndpoint`2<RdSetTargetPropertyContext, Unit> SetProperty { get; }
    [NotNullAttribute]
public IRdEndpoint`2<RdAddTaskContext, Unit> AddTask { get; }
    [NotNullAttribute]
public IRdEndpoint`2<RdRemoveTaskContext, Unit> RemoveTask { get; }
    private RdEditTargetSession(string targetName, RdCall`2<Unit, List`1<RdProjectTargetProperty>> getProperties, RdCall`2<Unit, List`1<RdProjectTargetTask>> getTasks, RdCall`2<RdSetTargetPropertyContext, Unit> setProperty, RdCall`2<RdAddTaskContext, Unit> addTask, RdCall`2<RdRemoveTaskContext, Unit> removeTask);
    public RdEditTargetSession(string targetName);
    private static RdEditTargetSession();
    [CompilerGeneratedAttribute]
public string get_TargetName();
    [CompilerGeneratedAttribute]
private void set_TargetName(string value);
    public IRdEndpoint`2<Unit, List`1<RdProjectTargetProperty>> get_GetProperties();
    public IRdEndpoint`2<Unit, List`1<RdProjectTargetTask>> get_GetTasks();
    public IRdEndpoint`2<RdSetTargetPropertyContext, Unit> get_SetProperty();
    public IRdEndpoint`2<RdAddTaskContext, Unit> get_AddTask();
    public IRdEndpoint`2<RdRemoveTaskContext, Unit> get_RemoveTask();
    public virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdEvaluatedProjectItemOrigin : RdProjectItemOrigin {
    public static CtxReadDelegate`1<RdEvaluatedProjectItemOrigin> Read;
    public static CtxWriteDelegate`1<RdEvaluatedProjectItemOrigin> Write;
    private static RdEvaluatedProjectItemOrigin();
    public virtual bool Equals(object obj);
    public bool Equals(RdEvaluatedProjectItemOrigin other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdEvaluateProjectPropertiesRequest : object {
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    public static CtxReadDelegate`1<RdEvaluateProjectPropertiesRequest> Read;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxWriteDelegate`1<RdEvaluateProjectPropertiesRequest> Write;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    [CanBeNullAttribute]
public string TargetFramework { get; private set; }
    public RdEvaluateProjectPropertiesRequest(string targetFramework);
    private static RdEvaluateProjectPropertiesRequest();
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
private void set_TargetFramework(string value);
    public void Deconstruct(String& targetFramework);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdEvaluateProjectPropertiesRequest other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdEvaluateProjectPropertiesSession : RdBindableBase {
    [CompilerGeneratedAttribute]
private string <ProjectFile>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdInputProperty> <Properties>k__BackingField;
    [NotNullAttribute]
private RdProperty`1<List`1<string>> _MultipleTargetFrameworks;
    [NotNullAttribute]
private RdCall`2<RdEvaluateProjectPropertiesRequest, RdProjectPropertiesSet> _Evaluate;
    public static CtxReadDelegate`1<RdEvaluateProjectPropertiesSession> Read;
    public static CtxReadDelegate`1<List`1<RdInputProperty>> ReadRdInputPropertyList;
    public static CtxReadDelegate`1<List`1<string>> ReadStringListNullable;
    public static CtxWriteDelegate`1<RdEvaluateProjectPropertiesSession> Write;
    public static CtxWriteDelegate`1<List`1<RdInputProperty>> WriteRdInputPropertyList;
    public static CtxWriteDelegate`1<List`1<string>> WriteStringListNullable;
    [NotNullAttribute]
public string ProjectFile { get; private set; }
    [NotNullAttribute]
public List`1<RdInputProperty> Properties { get; private set; }
    [NotNullAttribute]
public IViewableProperty`1<List`1<string>> MultipleTargetFrameworks { get; }
    [NotNullAttribute]
public IRdEndpoint`2<RdEvaluateProjectPropertiesRequest, RdProjectPropertiesSet> Evaluate { get; }
    private RdEvaluateProjectPropertiesSession(string projectFile, List`1<RdInputProperty> properties, RdProperty`1<List`1<string>> multipleTargetFrameworks, RdCall`2<RdEvaluateProjectPropertiesRequest, RdProjectPropertiesSet> evaluate);
    public RdEvaluateProjectPropertiesSession(string projectFile, List`1<RdInputProperty> properties);
    private static RdEvaluateProjectPropertiesSession();
    [CompilerGeneratedAttribute]
public string get_ProjectFile();
    [CompilerGeneratedAttribute]
private void set_ProjectFile(string value);
    [CompilerGeneratedAttribute]
public List`1<RdInputProperty> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(List`1<RdInputProperty> value);
    public IViewableProperty`1<List`1<string>> get_MultipleTargetFrameworks();
    public IRdEndpoint`2<RdEvaluateProjectPropertiesRequest, RdProjectPropertiesSet> get_Evaluate();
    public virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdExecuteTargetRequest : object {
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdProjectTargetProperty> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Diagnostic>k__BackingField;
    public static CtxReadDelegate`1<RdExecuteTargetRequest> Read;
    public static CtxReadDelegate`1<List`1<RdProjectTargetProperty>> ReadRdProjectTargetPropertyList;
    public static CtxWriteDelegate`1<RdExecuteTargetRequest> Write;
    public static CtxWriteDelegate`1<List`1<RdProjectTargetProperty>> WriteRdProjectTargetPropertyList;
    [NotNullAttribute]
public string Target { get; private set; }
    [NotNullAttribute]
public List`1<RdProjectTargetProperty> Properties { get; private set; }
    public bool Diagnostic { get; private set; }
    public RdExecuteTargetRequest(string target, List`1<RdProjectTargetProperty> properties, bool diagnostic);
    private static RdExecuteTargetRequest();
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
private void set_Target(string value);
    [CompilerGeneratedAttribute]
public List`1<RdProjectTargetProperty> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(List`1<RdProjectTargetProperty> value);
    [CompilerGeneratedAttribute]
public bool get_Diagnostic();
    [CompilerGeneratedAttribute]
private void set_Diagnostic(bool value);
    public void Deconstruct(String& target, List`1& properties, Boolean& diagnostic);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdExecuteTargetRequest other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdExecuteTargetResult : object {
    [CompilerGeneratedAttribute]
private RdExecuteTargetStatus <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdLoadError> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdLoadError> <Warnings>k__BackingField;
    public static CtxReadDelegate`1<RdExecuteTargetResult> Read;
    public static CtxReadDelegate`1<List`1<RdLoadError>> ReadRdLoadErrorList;
    public static CtxWriteDelegate`1<RdExecuteTargetResult> Write;
    public static CtxWriteDelegate`1<List`1<RdLoadError>> WriteRdLoadErrorList;
    public RdExecuteTargetStatus Result { get; private set; }
    [NotNullAttribute]
public List`1<RdLoadError> Errors { get; private set; }
    [NotNullAttribute]
public List`1<RdLoadError> Warnings { get; private set; }
    public RdExecuteTargetResult(RdExecuteTargetStatus result, List`1<RdLoadError> errors, List`1<RdLoadError> warnings);
    private static RdExecuteTargetResult();
    [CompilerGeneratedAttribute]
public RdExecuteTargetStatus get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(RdExecuteTargetStatus value);
    [CompilerGeneratedAttribute]
public List`1<RdLoadError> get_Errors();
    [CompilerGeneratedAttribute]
private void set_Errors(List`1<RdLoadError> value);
    [CompilerGeneratedAttribute]
public List`1<RdLoadError> get_Warnings();
    [CompilerGeneratedAttribute]
private void set_Warnings(List`1<RdLoadError> value);
    public void Deconstruct(RdExecuteTargetStatus& result, List`1& errors, List`1& warnings);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdExecuteTargetResult other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public enum JetBrains.Platform.MsBuildTask.Models.RdExecuteTargetStatus : Enum {
    public int value__;
    public static RdExecuteTargetStatus Success;
    public static RdExecuteTargetStatus Error;
    public static RdExecuteTargetStatus Exception;
    public static RdExecuteTargetStatus TargetNotFound;
}
public class JetBrains.Platform.MsBuildTask.Models.RdFolderContext : object {
    [CompilerGeneratedAttribute]
private List`1<string> <ItemTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Folder>k__BackingField;
    public static CtxReadDelegate`1<RdFolderContext> Read;
    public static CtxReadDelegate`1<List`1<string>> ReadStringList;
    public static CtxWriteDelegate`1<RdFolderContext> Write;
    public static CtxWriteDelegate`1<List`1<string>> WriteStringList;
    [NotNullAttribute]
public List`1<string> ItemTypes { get; private set; }
    [NotNullAttribute]
public string Folder { get; private set; }
    public RdFolderContext(List`1<string> itemTypes, string folder);
    private static RdFolderContext();
    [CompilerGeneratedAttribute]
public List`1<string> get_ItemTypes();
    [CompilerGeneratedAttribute]
private void set_ItemTypes(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Folder();
    [CompilerGeneratedAttribute]
private void set_Folder(string value);
    public void Deconstruct(List`1& itemTypes, String& folder);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdFolderContext other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdGetItemContext : object {
    [CompilerGeneratedAttribute]
private RdProjectItemIdentity <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReevaluateIfMissing>k__BackingField;
    public static CtxReadDelegate`1<RdGetItemContext> Read;
    public static CtxWriteDelegate`1<RdGetItemContext> Write;
    [NotNullAttribute]
public RdProjectItemIdentity Identity { get; private set; }
    public bool ReevaluateIfMissing { get; private set; }
    public RdGetItemContext(RdProjectItemIdentity identity, bool reevaluateIfMissing);
    private static RdGetItemContext();
    [CompilerGeneratedAttribute]
public RdProjectItemIdentity get_Identity();
    [CompilerGeneratedAttribute]
private void set_Identity(RdProjectItemIdentity value);
    [CompilerGeneratedAttribute]
public bool get_ReevaluateIfMissing();
    [CompilerGeneratedAttribute]
private void set_ReevaluateIfMissing(bool value);
    public void Deconstruct(RdProjectItemIdentity& identity, Boolean& reevaluateIfMissing);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdGetItemContext other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdImportedProjectItemOrigin : RdProjectItemOrigin {
    [CompilerGeneratedAttribute]
private string <ImportProjectFile>k__BackingField;
    public static CtxReadDelegate`1<RdImportedProjectItemOrigin> Read;
    public static CtxReadDelegate`1<string> ReadStringInternedAtProtocol;
    public static CtxWriteDelegate`1<RdImportedProjectItemOrigin> Write;
    public static CtxWriteDelegate`1<string> WriteStringInternedAtProtocol;
    [NotNullAttribute]
public string ImportProjectFile { get; private set; }
    public RdImportedProjectItemOrigin(string importProjectFile);
    private static RdImportedProjectItemOrigin();
    [CompilerGeneratedAttribute]
public string get_ImportProjectFile();
    [CompilerGeneratedAttribute]
private void set_ImportProjectFile(string value);
    public virtual bool Equals(object obj);
    public bool Equals(RdImportedProjectItemOrigin other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdInputProperty : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public static CtxReadDelegate`1<RdInputProperty> Read;
    public static CtxReadDelegate`1<string> ReadStringInternedAtProtocol;
    public static CtxReadDelegate`1<string> ReadStringInternedAtReloadProjectSessionInternScope;
    public static CtxWriteDelegate`1<RdInputProperty> Write;
    public static CtxWriteDelegate`1<string> WriteStringInternedAtProtocol;
    public static CtxWriteDelegate`1<string> WriteStringInternedAtReloadProjectSessionInternScope;
    [NotNullAttribute]
public string Name { get; private set; }
    [NotNullAttribute]
public string Value { get; private set; }
    public RdInputProperty(string name, string value);
    private static RdInputProperty();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
    public void Deconstruct(String& name, String& value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdInputProperty other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdInputTarget : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public static CtxReadDelegate`1<RdInputTarget> Read;
    public static CtxReadDelegate`1<string> ReadStringInternedAtProtocol;
    public static CtxWriteDelegate`1<RdInputTarget> Write;
    public static CtxWriteDelegate`1<string> WriteStringInternedAtProtocol;
    [NotNullAttribute]
public string Name { get; private set; }
    public RdInputTarget(string name);
    private static RdInputTarget();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public void Deconstruct(String& name);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdInputTarget other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdInternalUserMessage : RdUserMessage {
    [CompilerGeneratedAttribute]
private string <PresentableText>k__BackingField;
    public static CtxReadDelegate`1<RdInternalUserMessage> Read;
    public static CtxWriteDelegate`1<RdInternalUserMessage> Write;
    [NotNullAttribute]
public string PresentableText { get; private set; }
    public RdInternalUserMessage(string presentableText);
    private static RdInternalUserMessage();
    [CompilerGeneratedAttribute]
public string get_PresentableText();
    [CompilerGeneratedAttribute]
private void set_PresentableText(string value);
    public virtual bool Equals(object obj);
    public bool Equals(RdInternalUserMessage other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdItemMetadata : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnevaluatedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExpressedAsAttribute>k__BackingField;
    public static CtxReadDelegate`1<RdItemMetadata> Read;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxWriteDelegate`1<RdItemMetadata> Write;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    [NotNullAttribute]
public string Name { get; private set; }
    [CanBeNullAttribute]
public string UnevaluatedValue { get; private set; }
    public bool ExpressedAsAttribute { get; private set; }
    public RdItemMetadata(string name, string unevaluatedValue, bool expressedAsAttribute);
    private static RdItemMetadata();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_UnevaluatedValue();
    [CompilerGeneratedAttribute]
private void set_UnevaluatedValue(string value);
    [CompilerGeneratedAttribute]
public bool get_ExpressedAsAttribute();
    [CompilerGeneratedAttribute]
private void set_ExpressedAsAttribute(bool value);
    public void Deconstruct(String& name, String& unevaluatedValue, Boolean& expressedAsAttribute);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdItemMetadata other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public abstract class JetBrains.Platform.MsBuildTask.Models.RdItemWithMetadata : object {
    [CompilerGeneratedAttribute]
private List`1<RdProjectMetadata> <Metadata>k__BackingField;
    public static CtxReadDelegate`1<RdItemWithMetadata> Read;
    public static CtxWriteDelegate`1<RdItemWithMetadata> Write;
    [NotNullAttribute]
public List`1<RdProjectMetadata> Metadata { get; private set; }
    protected RdItemWithMetadata(List`1<RdProjectMetadata> metadata);
    private static RdItemWithMetadata();
    [CompilerGeneratedAttribute]
public List`1<RdProjectMetadata> get_Metadata();
    [CompilerGeneratedAttribute]
private void set_Metadata(List`1<RdProjectMetadata> value);
}
public class JetBrains.Platform.MsBuildTask.Models.RdItemWithMetadata_Unknown : RdItemWithMetadata {
    public static CtxReadDelegate`1<RdItemWithMetadata_Unknown> Read;
    public static CtxReadDelegate`1<List`1<RdProjectMetadata>> ReadRdProjectMetadataList;
    public static CtxWriteDelegate`1<RdItemWithMetadata_Unknown> Write;
    public static CtxWriteDelegate`1<List`1<RdProjectMetadata>> WriteRdProjectMetadataList;
    public RdItemWithMetadata_Unknown(List`1<RdProjectMetadata> metadata);
    private static RdItemWithMetadata_Unknown();
    public virtual bool Equals(object obj);
    public bool Equals(RdItemWithMetadata_Unknown other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdLoadError : object {
    [CompilerGeneratedAttribute]
private RdUserMessage <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TaskName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    public static CtxReadDelegate`1<RdLoadError> Read;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxWriteDelegate`1<RdLoadError> Write;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    [NotNullAttribute]
public RdUserMessage Message { get; private set; }
    [CanBeNullAttribute]
public string TaskName { get; private set; }
    [CanBeNullAttribute]
public string TargetName { get; private set; }
    [CanBeNullAttribute]
public string FileName { get; private set; }
    public int LineNumber { get; private set; }
    public int ColumnNumber { get; private set; }
    [CanBeNullAttribute]
public string Code { get; private set; }
    public RdLoadError(RdUserMessage message, string taskName, string targetName, string fileName, int lineNumber, int columnNumber, string code);
    private static RdLoadError();
    [CompilerGeneratedAttribute]
public RdUserMessage get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(RdUserMessage value);
    [CompilerGeneratedAttribute]
public string get_TaskName();
    [CompilerGeneratedAttribute]
private void set_TaskName(string value);
    [CompilerGeneratedAttribute]
public string get_TargetName();
    [CompilerGeneratedAttribute]
private void set_TargetName(string value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
private void set_FileName(string value);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
private void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_ColumnNumber();
    [CompilerGeneratedAttribute]
private void set_ColumnNumber(int value);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
private void set_Code(string value);
    public void Deconstruct(RdUserMessage& message, String& taskName, String& targetName, String& fileName, Int32& lineNumber, Int32& columnNumber, String& code);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdLoadError other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdLocalizeUserMessage : RdUserMessage {
    [CompilerGeneratedAttribute]
private RdUserMessageCode <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Arguments>k__BackingField;
    public static CtxReadDelegate`1<RdLocalizeUserMessage> Read;
    public static CtxReadDelegate`1<List`1<string>> ReadStringList;
    public static CtxWriteDelegate`1<RdLocalizeUserMessage> Write;
    public static CtxWriteDelegate`1<List`1<string>> WriteStringList;
    public RdUserMessageCode Code { get; private set; }
    [NotNullAttribute]
public List`1<string> Arguments { get; private set; }
    public RdLocalizeUserMessage(RdUserMessageCode code, List`1<string> arguments);
    private static RdLocalizeUserMessage();
    [CompilerGeneratedAttribute]
public RdUserMessageCode get_Code();
    [CompilerGeneratedAttribute]
private void set_Code(RdUserMessageCode value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Arguments();
    [CompilerGeneratedAttribute]
private void set_Arguments(List`1<string> value);
    public virtual bool Equals(object obj);
    public bool Equals(RdLocalizeUserMessage other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public enum JetBrains.Platform.MsBuildTask.Models.RdLoggingLevel : Enum {
    public int value__;
    public static RdLoggingLevel OFF;
    public static RdLoggingLevel FATAL;
    public static RdLoggingLevel ERROR;
    public static RdLoggingLevel WARN;
    public static RdLoggingLevel INFO;
    public static RdLoggingLevel VERBOSE;
    public static RdLoggingLevel TRACE;
}
public class JetBrains.Platform.MsBuildTask.Models.RdModificationSettings : object {
    [CompilerGeneratedAttribute]
private List`1<string> <SimpleProjectExtensions>k__BackingField;
    public static CtxReadDelegate`1<RdModificationSettings> Read;
    public static CtxReadDelegate`1<List`1<string>> ReadStringList;
    public static CtxWriteDelegate`1<RdModificationSettings> Write;
    public static CtxWriteDelegate`1<List`1<string>> WriteStringList;
    [NotNullAttribute]
public List`1<string> SimpleProjectExtensions { get; private set; }
    public RdModificationSettings(List`1<string> simpleProjectExtensions);
    private static RdModificationSettings();
    [CompilerGeneratedAttribute]
public List`1<string> get_SimpleProjectExtensions();
    [CompilerGeneratedAttribute]
private void set_SimpleProjectExtensions(List`1<string> value);
    public void Deconstruct(List`1& simpleProjectExtensions);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdModificationSettings other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdModifyConfigurationsContext : object {
    [CompilerGeneratedAttribute]
private List`1<RdAddConfigurationItem> <Add>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdProjectConfiguration> <Remove>k__BackingField;
    public static CtxReadDelegate`1<RdModifyConfigurationsContext> Read;
    public static CtxReadDelegate`1<List`1<RdAddConfigurationItem>> ReadRdAddConfigurationItemList;
    public static CtxReadDelegate`1<List`1<RdProjectConfiguration>> ReadRdProjectConfigurationList;
    public static CtxWriteDelegate`1<RdModifyConfigurationsContext> Write;
    public static CtxWriteDelegate`1<List`1<RdAddConfigurationItem>> WriteRdAddConfigurationItemList;
    public static CtxWriteDelegate`1<List`1<RdProjectConfiguration>> WriteRdProjectConfigurationList;
    [NotNullAttribute]
public List`1<RdAddConfigurationItem> Add { get; private set; }
    [NotNullAttribute]
public List`1<RdProjectConfiguration> Remove { get; private set; }
    public RdModifyConfigurationsContext(List`1<RdAddConfigurationItem> add, List`1<RdProjectConfiguration> remove);
    private static RdModifyConfigurationsContext();
    [CompilerGeneratedAttribute]
public List`1<RdAddConfigurationItem> get_Add();
    [CompilerGeneratedAttribute]
private void set_Add(List`1<RdAddConfigurationItem> value);
    [CompilerGeneratedAttribute]
public List`1<RdProjectConfiguration> get_Remove();
    [CompilerGeneratedAttribute]
private void set_Remove(List`1<RdProjectConfiguration> value);
    public void Deconstruct(List`1& add, List`1& remove);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdModifyConfigurationsContext other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdMsBuildUserMessage : RdUserMessage {
    [CompilerGeneratedAttribute]
private string <PresentableText>k__BackingField;
    public static CtxReadDelegate`1<RdMsBuildUserMessage> Read;
    public static CtxWriteDelegate`1<RdMsBuildUserMessage> Write;
    [NotNullAttribute]
public string PresentableText { get; private set; }
    public RdMsBuildUserMessage(string presentableText);
    private static RdMsBuildUserMessage();
    [CompilerGeneratedAttribute]
public string get_PresentableText();
    [CompilerGeneratedAttribute]
private void set_PresentableText(string value);
    public virtual bool Equals(object obj);
    public bool Equals(RdMsBuildUserMessage other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdPauseEvaluationCommand : RdCustomCommand {
    [CompilerGeneratedAttribute]
private string <ProjectFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DelayMs>k__BackingField;
    public static CtxReadDelegate`1<RdPauseEvaluationCommand> Read;
    public static CtxWriteDelegate`1<RdPauseEvaluationCommand> Write;
    [NotNullAttribute]
public string ProjectFilePath { get; private set; }
    public int DelayMs { get; private set; }
    public RdPauseEvaluationCommand(string projectFilePath, int delayMs);
    private static RdPauseEvaluationCommand();
    [CompilerGeneratedAttribute]
public string get_ProjectFilePath();
    [CompilerGeneratedAttribute]
private void set_ProjectFilePath(string value);
    [CompilerGeneratedAttribute]
public int get_DelayMs();
    [CompilerGeneratedAttribute]
private void set_DelayMs(int value);
    public virtual bool Equals(object obj);
    public bool Equals(RdPauseEvaluationCommand other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProject : object {
    [CompilerGeneratedAttribute]
private List`1<RdProjectProperty> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdProjectItem> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdProjectItemDefinition> <ItemDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdProjectWildcardItem> <WildcardItems>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdProjectImport> <Imports>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdLoadError> <TargetErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdLoadError> <TargetWarnings>k__BackingField;
    public static CtxReadDelegate`1<RdProject> Read;
    public static CtxReadDelegate`1<List`1<RdProjectProperty>> ReadRdProjectPropertyList;
    public static CtxReadDelegate`1<List`1<RdProjectItem>> ReadRdProjectItemList;
    public static CtxReadDelegate`1<List`1<RdProjectItemDefinition>> ReadRdProjectItemDefinitionList;
    public static CtxReadDelegate`1<List`1<RdProjectWildcardItem>> ReadRdProjectWildcardItemList;
    public static CtxReadDelegate`1<List`1<RdProjectImport>> ReadRdProjectImportList;
    public static CtxReadDelegate`1<List`1<RdLoadError>> ReadRdLoadErrorList;
    public static CtxWriteDelegate`1<RdProject> Write;
    public static CtxWriteDelegate`1<List`1<RdProjectProperty>> WriteRdProjectPropertyList;
    public static CtxWriteDelegate`1<List`1<RdProjectItem>> WriteRdProjectItemList;
    public static CtxWriteDelegate`1<List`1<RdProjectItemDefinition>> WriteRdProjectItemDefinitionList;
    public static CtxWriteDelegate`1<List`1<RdProjectWildcardItem>> WriteRdProjectWildcardItemList;
    public static CtxWriteDelegate`1<List`1<RdProjectImport>> WriteRdProjectImportList;
    public static CtxWriteDelegate`1<List`1<RdLoadError>> WriteRdLoadErrorList;
    [NotNullAttribute]
public List`1<RdProjectProperty> Properties { get; private set; }
    [NotNullAttribute]
public List`1<RdProjectItem> Items { get; private set; }
    [NotNullAttribute]
public List`1<RdProjectItemDefinition> ItemDefinitions { get; private set; }
    [NotNullAttribute]
public List`1<RdProjectWildcardItem> WildcardItems { get; private set; }
    [NotNullAttribute]
public List`1<RdProjectImport> Imports { get; private set; }
    [NotNullAttribute]
public List`1<RdLoadError> TargetErrors { get; private set; }
    [NotNullAttribute]
public List`1<RdLoadError> TargetWarnings { get; private set; }
    public RdProject(List`1<RdProjectProperty> properties, List`1<RdProjectItem> items, List`1<RdProjectItemDefinition> itemDefinitions, List`1<RdProjectWildcardItem> wildcardItems, List`1<RdProjectImport> imports, List`1<RdLoadError> targetErrors, List`1<RdLoadError> targetWarnings);
    private static RdProject();
    [CompilerGeneratedAttribute]
public List`1<RdProjectProperty> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(List`1<RdProjectProperty> value);
    [CompilerGeneratedAttribute]
public List`1<RdProjectItem> get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(List`1<RdProjectItem> value);
    [CompilerGeneratedAttribute]
public List`1<RdProjectItemDefinition> get_ItemDefinitions();
    [CompilerGeneratedAttribute]
private void set_ItemDefinitions(List`1<RdProjectItemDefinition> value);
    [CompilerGeneratedAttribute]
public List`1<RdProjectWildcardItem> get_WildcardItems();
    [CompilerGeneratedAttribute]
private void set_WildcardItems(List`1<RdProjectWildcardItem> value);
    [CompilerGeneratedAttribute]
public List`1<RdProjectImport> get_Imports();
    [CompilerGeneratedAttribute]
private void set_Imports(List`1<RdProjectImport> value);
    [CompilerGeneratedAttribute]
public List`1<RdLoadError> get_TargetErrors();
    [CompilerGeneratedAttribute]
private void set_TargetErrors(List`1<RdLoadError> value);
    [CompilerGeneratedAttribute]
public List`1<RdLoadError> get_TargetWarnings();
    [CompilerGeneratedAttribute]
private void set_TargetWarnings(List`1<RdLoadError> value);
    public void Deconstruct(List`1& properties, List`1& items, List`1& itemDefinitions, List`1& wildcardItems, List`1& imports, List`1& targetErrors, List`1& targetWarnings);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdProject other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectCollectionDump : object {
    [CompilerGeneratedAttribute]
private List`1<RdProjectDump> <Projects>k__BackingField;
    public static CtxReadDelegate`1<RdProjectCollectionDump> Read;
    public static CtxReadDelegate`1<List`1<RdProjectDump>> ReadRdProjectDumpList;
    public static CtxWriteDelegate`1<RdProjectCollectionDump> Write;
    public static CtxWriteDelegate`1<List`1<RdProjectDump>> WriteRdProjectDumpList;
    [NotNullAttribute]
public List`1<RdProjectDump> Projects { get; private set; }
    public RdProjectCollectionDump(List`1<RdProjectDump> projects);
    private static RdProjectCollectionDump();
    [CompilerGeneratedAttribute]
public List`1<RdProjectDump> get_Projects();
    [CompilerGeneratedAttribute]
private void set_Projects(List`1<RdProjectDump> value);
    public void Deconstruct(List`1& projects);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdProjectCollectionDump other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectConfiguration : object {
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    public static CtxReadDelegate`1<RdProjectConfiguration> Read;
    public static CtxWriteDelegate`1<RdProjectConfiguration> Write;
    [NotNullAttribute]
public string Configuration { get; private set; }
    [NotNullAttribute]
public string Platform { get; private set; }
    public RdProjectConfiguration(string configuration, string platform);
    private static RdProjectConfiguration();
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
private void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
private void set_Platform(string value);
    public void Deconstruct(String& configuration, String& platform);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdProjectConfiguration other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectDescription : object {
    [CompilerGeneratedAttribute]
private string <Sdk>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdProjectProperty> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdProjectConfiguration> <Configurations>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdProjectTarget> <Targets>k__BackingField;
    public static CtxReadDelegate`1<RdProjectDescription> Read;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxReadDelegate`1<List`1<RdProjectProperty>> ReadRdProjectPropertyList;
    public static CtxReadDelegate`1<List`1<RdProjectConfiguration>> ReadRdProjectConfigurationList;
    public static CtxReadDelegate`1<List`1<RdProjectTarget>> ReadRdProjectTargetList;
    public static CtxWriteDelegate`1<RdProjectDescription> Write;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    public static CtxWriteDelegate`1<List`1<RdProjectProperty>> WriteRdProjectPropertyList;
    public static CtxWriteDelegate`1<List`1<RdProjectConfiguration>> WriteRdProjectConfigurationList;
    public static CtxWriteDelegate`1<List`1<RdProjectTarget>> WriteRdProjectTargetList;
    [CanBeNullAttribute]
public string Sdk { get; private set; }
    [CanBeNullAttribute]
public string ToolsVersion { get; private set; }
    [NotNullAttribute]
public List`1<RdProjectProperty> Properties { get; private set; }
    [NotNullAttribute]
public List`1<RdProjectConfiguration> Configurations { get; private set; }
    [NotNullAttribute]
public List`1<RdProjectTarget> Targets { get; private set; }
    public RdProjectDescription(string sdk, string toolsVersion, List`1<RdProjectProperty> properties, List`1<RdProjectConfiguration> configurations, List`1<RdProjectTarget> targets);
    private static RdProjectDescription();
    [CompilerGeneratedAttribute]
public string get_Sdk();
    [CompilerGeneratedAttribute]
private void set_Sdk(string value);
    [CompilerGeneratedAttribute]
public string get_ToolsVersion();
    [CompilerGeneratedAttribute]
private void set_ToolsVersion(string value);
    [CompilerGeneratedAttribute]
public List`1<RdProjectProperty> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(List`1<RdProjectProperty> value);
    [CompilerGeneratedAttribute]
public List`1<RdProjectConfiguration> get_Configurations();
    [CompilerGeneratedAttribute]
private void set_Configurations(List`1<RdProjectConfiguration> value);
    [CompilerGeneratedAttribute]
public List`1<RdProjectTarget> get_Targets();
    [CompilerGeneratedAttribute]
private void set_Targets(List`1<RdProjectTarget> value);
    public void Deconstruct(String& sdk, String& toolsVersion, List`1& properties, List`1& configurations, List`1& targets);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdProjectDescription other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectDump : object {
    [CompilerGeneratedAttribute]
private string <ProjectFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDirty>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EvaluationCounter>k__BackingField;
    public static CtxReadDelegate`1<RdProjectDump> Read;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxWriteDelegate`1<RdProjectDump> Write;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    [NotNullAttribute]
public string ProjectFilePath { get; private set; }
    [CanBeNullAttribute]
public string TargetFramework { get; private set; }
    public bool IsDirty { get; private set; }
    public int EvaluationCounter { get; private set; }
    public RdProjectDump(string projectFilePath, string targetFramework, bool isDirty, int evaluationCounter);
    private static RdProjectDump();
    [CompilerGeneratedAttribute]
public string get_ProjectFilePath();
    [CompilerGeneratedAttribute]
private void set_ProjectFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
private void set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public bool get_IsDirty();
    [CompilerGeneratedAttribute]
private void set_IsDirty(bool value);
    [CompilerGeneratedAttribute]
public int get_EvaluationCounter();
    [CompilerGeneratedAttribute]
private void set_EvaluationCounter(int value);
    public void Deconstruct(String& projectFilePath, String& targetFramework, Boolean& isDirty, Int32& evaluationCounter);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdProjectDump other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectFileContent : object {
    [CompilerGeneratedAttribute]
private string <ProjectFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public static CtxReadDelegate`1<RdProjectFileContent> Read;
    public static CtxWriteDelegate`1<RdProjectFileContent> Write;
    [NotNullAttribute]
public string ProjectFilePath { get; private set; }
    [NotNullAttribute]
public string Text { get; private set; }
    public RdProjectFileContent(string projectFilePath, string text);
    private static RdProjectFileContent();
    [CompilerGeneratedAttribute]
public string get_ProjectFilePath();
    [CompilerGeneratedAttribute]
private void set_ProjectFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    public void Deconstruct(String& projectFilePath, String& text);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdProjectFileContent other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectId : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public static CtxReadDelegate`1<RdProjectId> Read;
    public static CtxWriteDelegate`1<RdProjectId> Write;
    public int Id { get; private set; }
    public RdProjectId(int id);
    private static RdProjectId();
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
    public void Deconstruct(Int32& id);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdProjectId other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectImport : object {
    [CompilerGeneratedAttribute]
private string <ImportedProject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImportedProjectPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainingProjectPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    public static CtxReadDelegate`1<RdProjectImport> Read;
    public static CtxWriteDelegate`1<RdProjectImport> Write;
    [NotNullAttribute]
public string ImportedProject { get; private set; }
    [NotNullAttribute]
public string ImportedProjectPath { get; private set; }
    [NotNullAttribute]
public string ContainingProjectPath { get; private set; }
    [NotNullAttribute]
public string Label { get; private set; }
    public int Line { get; private set; }
    public RdProjectImport(string importedProject, string importedProjectPath, string containingProjectPath, string label, int line);
    private static RdProjectImport();
    [CompilerGeneratedAttribute]
public string get_ImportedProject();
    [CompilerGeneratedAttribute]
private void set_ImportedProject(string value);
    [CompilerGeneratedAttribute]
public string get_ImportedProjectPath();
    [CompilerGeneratedAttribute]
private void set_ImportedProjectPath(string value);
    [CompilerGeneratedAttribute]
public string get_ContainingProjectPath();
    [CompilerGeneratedAttribute]
private void set_ContainingProjectPath(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
private void set_Label(string value);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
private void set_Line(int value);
    public void Deconstruct(String& importedProject, String& importedProjectPath, String& containingProjectPath, String& label, Int32& line);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdProjectImport other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectImportIdentity : object {
    [CompilerGeneratedAttribute]
private string <Project>k__BackingField;
    public static CtxReadDelegate`1<RdProjectImportIdentity> Read;
    public static CtxWriteDelegate`1<RdProjectImportIdentity> Write;
    [NotNullAttribute]
public string Project { get; private set; }
    public RdProjectImportIdentity(string project);
    private static RdProjectImportIdentity();
    [CompilerGeneratedAttribute]
public string get_Project();
    [CompilerGeneratedAttribute]
private void set_Project(string value);
    public void Deconstruct(String& project);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdProjectImportIdentity other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectItem : RdItemWithMetadata {
    [CompilerGeneratedAttribute]
private string <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EvaluatedInclude>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <FromWildcard>k__BackingField;
    [CompilerGeneratedAttribute]
private RdProjectItemOrigin <Origin>k__BackingField;
    public static CtxReadDelegate`1<RdProjectItem> Read;
    public static CtxReadDelegate`1<string> ReadStringInternedAtProtocol;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxReadDelegate`1<Nullable`1<bool>> ReadBoolNullable;
    public static CtxReadDelegate`1<List`1<RdProjectMetadata>> ReadRdProjectMetadataList;
    public static CtxWriteDelegate`1<RdProjectItem> Write;
    public static CtxWriteDelegate`1<string> WriteStringInternedAtProtocol;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    public static CtxWriteDelegate`1<Nullable`1<bool>> WriteBoolNullable;
    public static CtxWriteDelegate`1<List`1<RdProjectMetadata>> WriteRdProjectMetadataList;
    [NotNullAttribute]
public string ItemType { get; private set; }
    [NotNullAttribute]
public string EvaluatedInclude { get; private set; }
    [CanBeNullAttribute]
public string Condition { get; private set; }
    [CanBeNullAttribute]
public Nullable`1<bool> FromWildcard { get; private set; }
    [NotNullAttribute]
public RdProjectItemOrigin Origin { get; private set; }
    public RdProjectItem(string itemType, string evaluatedInclude, string condition, Nullable`1<bool> fromWildcard, RdProjectItemOrigin origin, List`1<RdProjectMetadata> metadata);
    private static RdProjectItem();
    [CompilerGeneratedAttribute]
public string get_ItemType();
    [CompilerGeneratedAttribute]
private void set_ItemType(string value);
    [CompilerGeneratedAttribute]
public string get_EvaluatedInclude();
    [CompilerGeneratedAttribute]
private void set_EvaluatedInclude(string value);
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
private void set_Condition(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_FromWildcard();
    [CompilerGeneratedAttribute]
private void set_FromWildcard(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public RdProjectItemOrigin get_Origin();
    [CompilerGeneratedAttribute]
private void set_Origin(RdProjectItemOrigin value);
    public virtual bool Equals(object obj);
    public bool Equals(RdProjectItem other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectItemDefinition : RdItemWithMetadata {
    [CompilerGeneratedAttribute]
private string <ItemType>k__BackingField;
    public static CtxReadDelegate`1<RdProjectItemDefinition> Read;
    public static CtxReadDelegate`1<string> ReadStringInternedAtProtocol;
    public static CtxReadDelegate`1<List`1<RdProjectMetadata>> ReadRdProjectMetadataList;
    public static CtxWriteDelegate`1<RdProjectItemDefinition> Write;
    public static CtxWriteDelegate`1<string> WriteStringInternedAtProtocol;
    public static CtxWriteDelegate`1<List`1<RdProjectMetadata>> WriteRdProjectMetadataList;
    [NotNullAttribute]
public string ItemType { get; private set; }
    public RdProjectItemDefinition(string itemType, List`1<RdProjectMetadata> metadata);
    private static RdProjectItemDefinition();
    [CompilerGeneratedAttribute]
public string get_ItemType();
    [CompilerGeneratedAttribute]
private void set_ItemType(string value);
    public virtual bool Equals(object obj);
    public bool Equals(RdProjectItemDefinition other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectItemDefinitionIdentity : object {
    [CompilerGeneratedAttribute]
private string <ItemType>k__BackingField;
    public static CtxReadDelegate`1<RdProjectItemDefinitionIdentity> Read;
    public static CtxWriteDelegate`1<RdProjectItemDefinitionIdentity> Write;
    [NotNullAttribute]
public string ItemType { get; private set; }
    public RdProjectItemDefinitionIdentity(string itemType);
    private static RdProjectItemDefinitionIdentity();
    [CompilerGeneratedAttribute]
public string get_ItemType();
    [CompilerGeneratedAttribute]
private void set_ItemType(string value);
    public void Deconstruct(String& itemType);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdProjectItemDefinitionIdentity other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectItemIdentity : object {
    [CompilerGeneratedAttribute]
private string <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EvaluatedInclude>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdProjectItemIdentityMetadata> <MetadataFilters>k__BackingField;
    public static CtxReadDelegate`1<RdProjectItemIdentity> Read;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxReadDelegate`1<List`1<RdProjectItemIdentityMetadata>> ReadRdProjectItemIdentityMetadataList;
    public static CtxWriteDelegate`1<RdProjectItemIdentity> Write;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    public static CtxWriteDelegate`1<List`1<RdProjectItemIdentityMetadata>> WriteRdProjectItemIdentityMetadataList;
    [NotNullAttribute]
public string ItemType { get; private set; }
    [NotNullAttribute]
public string EvaluatedInclude { get; private set; }
    [CanBeNullAttribute]
public string Condition { get; private set; }
    [NotNullAttribute]
public List`1<RdProjectItemIdentityMetadata> MetadataFilters { get; private set; }
    public RdProjectItemIdentity(string itemType, string evaluatedInclude, string condition, List`1<RdProjectItemIdentityMetadata> metadataFilters);
    private static RdProjectItemIdentity();
    [CompilerGeneratedAttribute]
public string get_ItemType();
    [CompilerGeneratedAttribute]
private void set_ItemType(string value);
    [CompilerGeneratedAttribute]
public string get_EvaluatedInclude();
    [CompilerGeneratedAttribute]
private void set_EvaluatedInclude(string value);
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
private void set_Condition(string value);
    [CompilerGeneratedAttribute]
public List`1<RdProjectItemIdentityMetadata> get_MetadataFilters();
    [CompilerGeneratedAttribute]
private void set_MetadataFilters(List`1<RdProjectItemIdentityMetadata> value);
    public void Deconstruct(String& itemType, String& evaluatedInclude, String& condition, List`1& metadataFilters);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdProjectItemIdentity other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectItemIdentityMetadata : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EvaluatedValue>k__BackingField;
    public static CtxReadDelegate`1<RdProjectItemIdentityMetadata> Read;
    public static CtxWriteDelegate`1<RdProjectItemIdentityMetadata> Write;
    [NotNullAttribute]
public string Name { get; private set; }
    [NotNullAttribute]
public string EvaluatedValue { get; private set; }
    public RdProjectItemIdentityMetadata(string name, string evaluatedValue);
    private static RdProjectItemIdentityMetadata();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_EvaluatedValue();
    [CompilerGeneratedAttribute]
private void set_EvaluatedValue(string value);
    public void Deconstruct(String& name, String& evaluatedValue);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdProjectItemIdentityMetadata other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public abstract class JetBrains.Platform.MsBuildTask.Models.RdProjectItemOrigin : object {
    public static CtxReadDelegate`1<RdProjectItemOrigin> Read;
    public static CtxWriteDelegate`1<RdProjectItemOrigin> Write;
    private static RdProjectItemOrigin();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectItemOrigin_Unknown : RdProjectItemOrigin {
    public static CtxReadDelegate`1<RdProjectItemOrigin_Unknown> Read;
    public static CtxWriteDelegate`1<RdProjectItemOrigin_Unknown> Write;
    private static RdProjectItemOrigin_Unknown();
    public virtual bool Equals(object obj);
    public bool Equals(RdProjectItemOrigin_Unknown other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectItemWithInfo : object {
    [CompilerGeneratedAttribute]
private RdProjectItem <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnevaluatedInclude>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReadonly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasExistsCondition>k__BackingField;
    public static CtxReadDelegate`1<RdProjectItemWithInfo> Read;
    public static CtxWriteDelegate`1<RdProjectItemWithInfo> Write;
    [NotNullAttribute]
public RdProjectItem Item { get; private set; }
    [NotNullAttribute]
public string UnevaluatedInclude { get; private set; }
    public bool IsReadonly { get; private set; }
    public bool HasExistsCondition { get; private set; }
    public RdProjectItemWithInfo(RdProjectItem item, string unevaluatedInclude, bool isReadonly, bool hasExistsCondition);
    private static RdProjectItemWithInfo();
    [CompilerGeneratedAttribute]
public RdProjectItem get_Item();
    [CompilerGeneratedAttribute]
private void set_Item(RdProjectItem value);
    [CompilerGeneratedAttribute]
public string get_UnevaluatedInclude();
    [CompilerGeneratedAttribute]
private void set_UnevaluatedInclude(string value);
    [CompilerGeneratedAttribute]
public bool get_IsReadonly();
    [CompilerGeneratedAttribute]
private void set_IsReadonly(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasExistsCondition();
    [CompilerGeneratedAttribute]
private void set_HasExistsCondition(bool value);
    public void Deconstruct(RdProjectItem& item, String& unevaluatedInclude, Boolean& isReadonly, Boolean& hasExistsCondition);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdProjectItemWithInfo other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectLoadResult : object {
    [CompilerGeneratedAttribute]
private RdProjectId <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdProject> <Projects>k__BackingField;
    [CompilerGeneratedAttribute]
private RdProjectDescription <ProjectDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private RdLoadError <FatalError>k__BackingField;
    [CompilerGeneratedAttribute]
private RdLoadError <LoadingError>k__BackingField;
    [CompilerGeneratedAttribute]
private RdDesignTimeBuildStatus <DesignTimeBuildStatus>k__BackingField;
    public static CtxReadDelegate`1<RdProjectLoadResult> Read;
    public static CtxReadDelegate`1<List`1<RdProject>> ReadRdProjectList;
    public static CtxReadDelegate`1<RdProjectDescription> ReadRdProjectDescriptionNullable;
    public static CtxReadDelegate`1<RdLoadError> ReadRdLoadErrorNullable;
    public static CtxWriteDelegate`1<RdProjectLoadResult> Write;
    public static CtxWriteDelegate`1<List`1<RdProject>> WriteRdProjectList;
    public static CtxWriteDelegate`1<RdProjectDescription> WriteRdProjectDescriptionNullable;
    public static CtxWriteDelegate`1<RdLoadError> WriteRdLoadErrorNullable;
    [NotNullAttribute]
public RdProjectId ProjectId { get; private set; }
    [NotNullAttribute]
public List`1<RdProject> Projects { get; private set; }
    [CanBeNullAttribute]
public RdProjectDescription ProjectDescription { get; private set; }
    [CanBeNullAttribute]
public RdLoadError FatalError { get; private set; }
    [CanBeNullAttribute]
public RdLoadError LoadingError { get; private set; }
    public RdDesignTimeBuildStatus DesignTimeBuildStatus { get; private set; }
    public RdProjectLoadResult(RdProjectId projectId, List`1<RdProject> projects, RdProjectDescription projectDescription, RdLoadError fatalError, RdLoadError loadingError, RdDesignTimeBuildStatus designTimeBuildStatus);
    private static RdProjectLoadResult();
    [CompilerGeneratedAttribute]
public RdProjectId get_ProjectId();
    [CompilerGeneratedAttribute]
private void set_ProjectId(RdProjectId value);
    [CompilerGeneratedAttribute]
public List`1<RdProject> get_Projects();
    [CompilerGeneratedAttribute]
private void set_Projects(List`1<RdProject> value);
    [CompilerGeneratedAttribute]
public RdProjectDescription get_ProjectDescription();
    [CompilerGeneratedAttribute]
private void set_ProjectDescription(RdProjectDescription value);
    [CompilerGeneratedAttribute]
public RdLoadError get_FatalError();
    [CompilerGeneratedAttribute]
private void set_FatalError(RdLoadError value);
    [CompilerGeneratedAttribute]
public RdLoadError get_LoadingError();
    [CompilerGeneratedAttribute]
private void set_LoadingError(RdLoadError value);
    [CompilerGeneratedAttribute]
public RdDesignTimeBuildStatus get_DesignTimeBuildStatus();
    [CompilerGeneratedAttribute]
private void set_DesignTimeBuildStatus(RdDesignTimeBuildStatus value);
    public void Deconstruct(RdProjectId& projectId, List`1& projects, RdProjectDescription& projectDescription, RdLoadError& fatalError, RdLoadError& loadingError, RdDesignTimeBuildStatus& designTimeBuildStatus);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdProjectLoadResult other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectMetadata : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EvaluatedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExpressedAsAttribute>k__BackingField;
    public static CtxReadDelegate`1<RdProjectMetadata> Read;
    public static CtxReadDelegate`1<string> ReadStringInternedAtReloadProjectSessionInternScope;
    public static CtxWriteDelegate`1<RdProjectMetadata> Write;
    public static CtxWriteDelegate`1<string> WriteStringInternedAtReloadProjectSessionInternScope;
    [NotNullAttribute]
public string Name { get; private set; }
    [NotNullAttribute]
public string EvaluatedValue { get; private set; }
    public bool ExpressedAsAttribute { get; private set; }
    public RdProjectMetadata(string name, string evaluatedValue, bool expressedAsAttribute);
    private static RdProjectMetadata();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_EvaluatedValue();
    [CompilerGeneratedAttribute]
private void set_EvaluatedValue(string value);
    [CompilerGeneratedAttribute]
public bool get_ExpressedAsAttribute();
    [CompilerGeneratedAttribute]
private void set_ExpressedAsAttribute(bool value);
    public void Deconstruct(String& name, String& evaluatedValue, Boolean& expressedAsAttribute);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdProjectMetadata other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectModelSession : RdSession {
    [CompilerGeneratedAttribute]
private RdModificationSettings <ModificationSettings>k__BackingField;
    [NotNullAttribute]
private RdMap`2<RdProjectId, RdProjectOperations> _Operations;
    [NotNullAttribute]
private RdProperty`1<RdReloadProjectsSessionWrapper> _ReloadSession;
    [NotNullAttribute]
private RdCall`2<RdProjectId, RdProjectUnloadResult> _Unload;
    [NotNullAttribute]
private RdCall`2<RdCalculatePropertiesContext, RdCalculatePropertiesResult> _CalculateProjectProperties;
    [NotNullAttribute]
private RdCall`2<RdCalculateConfigurationPropertiesContext, RdCalculateConfigurationPropertiesResult> _CalculateConfigurationProperties;
    [NotNullAttribute]
private RdProperty`1<RdEvaluateProjectPropertiesSession> _EvaluateProjectPropertiesSession;
    [NotNullAttribute]
private RdCall`2<Unit, Unit> _Synchronize;
    [NotNullAttribute]
private RdCall`2<Unit, RdProjectCollectionDump> _DumpState;
    [NotNullAttribute]
private RdCall`2<RdCustomCommand, Unit> _ExecuteCustomCommand;
    public static CtxReadDelegate`1<RdProjectModelSession> Read;
    public static CtxReadDelegate`1<RdReloadProjectsSessionWrapper> ReadRdReloadProjectsSessionWrapperNullable;
    public static CtxReadDelegate`1<RdEvaluateProjectPropertiesSession> ReadRdEvaluateProjectPropertiesSessionNullable;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxWriteDelegate`1<RdProjectModelSession> Write;
    public static CtxWriteDelegate`1<RdReloadProjectsSessionWrapper> WriteRdReloadProjectsSessionWrapperNullable;
    public static CtxWriteDelegate`1<RdEvaluateProjectPropertiesSession> WriteRdEvaluateProjectPropertiesSessionNullable;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    [NotNullAttribute]
public RdModificationSettings ModificationSettings { get; private set; }
    [NotNullAttribute]
public IViewableMap`2<RdProjectId, RdProjectOperations> Operations { get; }
    [NotNullAttribute]
public IViewableProperty`1<RdReloadProjectsSessionWrapper> ReloadSession { get; }
    [NotNullAttribute]
public IRdEndpoint`2<RdProjectId, RdProjectUnloadResult> Unload { get; }
    [NotNullAttribute]
public IRdEndpoint`2<RdCalculatePropertiesContext, RdCalculatePropertiesResult> CalculateProjectProperties { get; }
    [NotNullAttribute]
public IRdEndpoint`2<RdCalculateConfigurationPropertiesContext, RdCalculateConfigurationPropertiesResult> CalculateConfigurationProperties { get; }
    [NotNullAttribute]
public IViewableProperty`1<RdEvaluateProjectPropertiesSession> EvaluateProjectPropertiesSession { get; }
    [NotNullAttribute]
public IRdEndpoint`2<Unit, Unit> Synchronize { get; }
    [NotNullAttribute]
public IRdEndpoint`2<Unit, RdProjectCollectionDump> DumpState { get; }
    [NotNullAttribute]
public IRdEndpoint`2<RdCustomCommand, Unit> ExecuteCustomCommand { get; }
    private RdProjectModelSession(RdModificationSettings modificationSettings, RdMap`2<RdProjectId, RdProjectOperations> operations, RdProperty`1<RdReloadProjectsSessionWrapper> reloadSession, RdCall`2<RdProjectId, RdProjectUnloadResult> unload, RdCall`2<RdCalculatePropertiesContext, RdCalculatePropertiesResult> calculateProjectProperties, RdCall`2<RdCalculateConfigurationPropertiesContext, RdCalculateConfigurationPropertiesResult> calculateConfigurationProperties, RdProperty`1<RdEvaluateProjectPropertiesSession> evaluateProjectPropertiesSession, RdCall`2<Unit, Unit> synchronize, RdCall`2<Unit, RdProjectCollectionDump> dumpState, RdCall`2<RdCustomCommand, Unit> executeCustomCommand, RdSignal`1<Unit> shutdown, RdCall`2<Unit, string> checkState);
    public RdProjectModelSession(RdModificationSettings modificationSettings);
    private static RdProjectModelSession();
    [CompilerGeneratedAttribute]
public RdModificationSettings get_ModificationSettings();
    [CompilerGeneratedAttribute]
private void set_ModificationSettings(RdModificationSettings value);
    public IViewableMap`2<RdProjectId, RdProjectOperations> get_Operations();
    public IViewableProperty`1<RdReloadProjectsSessionWrapper> get_ReloadSession();
    public IRdEndpoint`2<RdProjectId, RdProjectUnloadResult> get_Unload();
    public IRdEndpoint`2<RdCalculatePropertiesContext, RdCalculatePropertiesResult> get_CalculateProjectProperties();
    public IRdEndpoint`2<RdCalculateConfigurationPropertiesContext, RdCalculateConfigurationPropertiesResult> get_CalculateConfigurationProperties();
    public IViewableProperty`1<RdEvaluateProjectPropertiesSession> get_EvaluateProjectPropertiesSession();
    public IRdEndpoint`2<Unit, Unit> get_Synchronize();
    public IRdEndpoint`2<Unit, RdProjectCollectionDump> get_DumpState();
    public IRdEndpoint`2<RdCustomCommand, Unit> get_ExecuteCustomCommand();
    public virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectOperations : RdBindableBase {
    [NotNullAttribute]
private RdCall`2<Unit, List`1<RdProjectItem>> _GetItems;
    [NotNullAttribute]
private RdCall`2<Unit, List`1<RdProjectTarget>> _GetTargets;
    [NotNullAttribute]
private RdCall`2<RdGetItemContext, RdProjectItemWithInfo> _GetProjectItem;
    [NotNullAttribute]
private RdCall`2<RdProjectItemDefinitionIdentity, RdProjectItemDefinition> _GetProjectItemDefinition;
    [NotNullAttribute]
private RdCall`2<string, List`1<RdTargetFrameworkValue>> _GetProjectProperty;
    [NotNullAttribute]
private RdCall`2<Unit, List`1<RdProjectFileContent>> _GetProjectFiles;
    [NotNullAttribute]
private RdCall`2<Unit, List`1<RdProjectItem>> _GetOwnProjectItemsIgnoringCondition;
    [NotNullAttribute]
private RdCall`2<RdExecuteTargetRequest, RdExecuteTargetResult> _ExecuteTarget;
    [NotNullAttribute]
private RdCall`2<RdAddItemContext, RdProjectItemOrigin> _AddItem;
    [NotNullAttribute]
private RdCall`2<RdUpdateItemContext, RdProjectItemOrigin> _UpdateItem;
    [NotNullAttribute]
private RdCall`2<RdRemoveItemContext, Unit> _RemoveItem;
    [NotNullAttribute]
private RdCall`2<RdFolderContext, Unit> _IncludeFolder;
    [NotNullAttribute]
private RdCall`2<RdFolderContext, Unit> _ExcludeFolder;
    [NotNullAttribute]
private RdCall`2<RdAddImportContext, Unit> _AddImport;
    [NotNullAttribute]
private RdCall`2<RdRemoveImportContext, Unit> _RemoveImport;
    [NotNullAttribute]
private RdCall`2<RdAddTargetContext, Unit> _AddTarget;
    [NotNullAttribute]
private RdCall`2<RdRemoveTargetContext, Unit> _RemoveTarget;
    [NotNullAttribute]
private RdProperty`1<RdEditTargetSession> _EditTargetSession;
    [NotNullAttribute]
private RdCall`2<RdSavePropertiesContext, Unit> _SaveProperties;
    [NotNullAttribute]
private RdCall`2<RdModifyConfigurationsContext, Unit> _ModifyConfigurations;
    [NotNullAttribute]
private RdCall`2<Unit, Unit> _Reevaluate;
    public static CtxReadDelegate`1<RdProjectOperations> Read;
    public static CtxReadDelegate`1<List`1<RdProjectItem>> ReadRdProjectItemList;
    public static CtxReadDelegate`1<List`1<RdProjectTarget>> ReadRdProjectTargetList;
    public static CtxReadDelegate`1<RdProjectItemWithInfo> ReadRdProjectItemWithInfoNullable;
    public static CtxReadDelegate`1<RdProjectItemDefinition> ReadRdProjectItemDefinitionNullable;
    public static CtxReadDelegate`1<List`1<RdTargetFrameworkValue>> ReadRdTargetFrameworkValueList;
    public static CtxReadDelegate`1<List`1<RdProjectFileContent>> ReadRdProjectFileContentList;
    public static CtxReadDelegate`1<RdProjectItemOrigin> ReadRdProjectItemOriginNullable;
    public static CtxReadDelegate`1<RdEditTargetSession> ReadRdEditTargetSessionNullable;
    public static CtxWriteDelegate`1<RdProjectOperations> Write;
    public static CtxWriteDelegate`1<List`1<RdProjectItem>> WriteRdProjectItemList;
    public static CtxWriteDelegate`1<List`1<RdProjectTarget>> WriteRdProjectTargetList;
    public static CtxWriteDelegate`1<RdProjectItemWithInfo> WriteRdProjectItemWithInfoNullable;
    public static CtxWriteDelegate`1<RdProjectItemDefinition> WriteRdProjectItemDefinitionNullable;
    public static CtxWriteDelegate`1<List`1<RdTargetFrameworkValue>> WriteRdTargetFrameworkValueList;
    public static CtxWriteDelegate`1<List`1<RdProjectFileContent>> WriteRdProjectFileContentList;
    public static CtxWriteDelegate`1<RdProjectItemOrigin> WriteRdProjectItemOriginNullable;
    public static CtxWriteDelegate`1<RdEditTargetSession> WriteRdEditTargetSessionNullable;
    [NotNullAttribute]
public IRdEndpoint`2<Unit, List`1<RdProjectItem>> GetItems { get; }
    [NotNullAttribute]
public IRdEndpoint`2<Unit, List`1<RdProjectTarget>> GetTargets { get; }
    [NotNullAttribute]
public IRdEndpoint`2<RdGetItemContext, RdProjectItemWithInfo> GetProjectItem { get; }
    [NotNullAttribute]
public IRdEndpoint`2<RdProjectItemDefinitionIdentity, RdProjectItemDefinition> GetProjectItemDefinition { get; }
    [NotNullAttribute]
public IRdEndpoint`2<string, List`1<RdTargetFrameworkValue>> GetProjectProperty { get; }
    [NotNullAttribute]
public IRdEndpoint`2<Unit, List`1<RdProjectFileContent>> GetProjectFiles { get; }
    [NotNullAttribute]
public IRdEndpoint`2<Unit, List`1<RdProjectItem>> GetOwnProjectItemsIgnoringCondition { get; }
    [NotNullAttribute]
public IRdEndpoint`2<RdExecuteTargetRequest, RdExecuteTargetResult> ExecuteTarget { get; }
    [NotNullAttribute]
public IRdEndpoint`2<RdAddItemContext, RdProjectItemOrigin> AddItem { get; }
    [NotNullAttribute]
public IRdEndpoint`2<RdUpdateItemContext, RdProjectItemOrigin> UpdateItem { get; }
    [NotNullAttribute]
public IRdEndpoint`2<RdRemoveItemContext, Unit> RemoveItem { get; }
    [NotNullAttribute]
public IRdEndpoint`2<RdFolderContext, Unit> IncludeFolder { get; }
    [NotNullAttribute]
public IRdEndpoint`2<RdFolderContext, Unit> ExcludeFolder { get; }
    [NotNullAttribute]
public IRdEndpoint`2<RdAddImportContext, Unit> AddImport { get; }
    [NotNullAttribute]
public IRdEndpoint`2<RdRemoveImportContext, Unit> RemoveImport { get; }
    [NotNullAttribute]
public IRdEndpoint`2<RdAddTargetContext, Unit> AddTarget { get; }
    [NotNullAttribute]
public IRdEndpoint`2<RdRemoveTargetContext, Unit> RemoveTarget { get; }
    [NotNullAttribute]
public IViewableProperty`1<RdEditTargetSession> EditTargetSession { get; }
    [NotNullAttribute]
public IRdEndpoint`2<RdSavePropertiesContext, Unit> SaveProperties { get; }
    [NotNullAttribute]
public IRdEndpoint`2<RdModifyConfigurationsContext, Unit> ModifyConfigurations { get; }
    [NotNullAttribute]
public IRdEndpoint`2<Unit, Unit> Reevaluate { get; }
    private RdProjectOperations(RdCall`2<Unit, List`1<RdProjectItem>> getItems, RdCall`2<Unit, List`1<RdProjectTarget>> getTargets, RdCall`2<RdGetItemContext, RdProjectItemWithInfo> getProjectItem, RdCall`2<RdProjectItemDefinitionIdentity, RdProjectItemDefinition> getProjectItemDefinition, RdCall`2<string, List`1<RdTargetFrameworkValue>> getProjectProperty, RdCall`2<Unit, List`1<RdProjectFileContent>> getProjectFiles, RdCall`2<Unit, List`1<RdProjectItem>> getOwnProjectItemsIgnoringCondition, RdCall`2<RdExecuteTargetRequest, RdExecuteTargetResult> executeTarget, RdCall`2<RdAddItemContext, RdProjectItemOrigin> addItem, RdCall`2<RdUpdateItemContext, RdProjectItemOrigin> updateItem, RdCall`2<RdRemoveItemContext, Unit> removeItem, RdCall`2<RdFolderContext, Unit> includeFolder, RdCall`2<RdFolderContext, Unit> excludeFolder, RdCall`2<RdAddImportContext, Unit> addImport, RdCall`2<RdRemoveImportContext, Unit> removeImport, RdCall`2<RdAddTargetContext, Unit> addTarget, RdCall`2<RdRemoveTargetContext, Unit> removeTarget, RdProperty`1<RdEditTargetSession> editTargetSession, RdCall`2<RdSavePropertiesContext, Unit> saveProperties, RdCall`2<RdModifyConfigurationsContext, Unit> modifyConfigurations, RdCall`2<Unit, Unit> reevaluate);
    private static RdProjectOperations();
    public IRdEndpoint`2<Unit, List`1<RdProjectItem>> get_GetItems();
    public IRdEndpoint`2<Unit, List`1<RdProjectTarget>> get_GetTargets();
    public IRdEndpoint`2<RdGetItemContext, RdProjectItemWithInfo> get_GetProjectItem();
    public IRdEndpoint`2<RdProjectItemDefinitionIdentity, RdProjectItemDefinition> get_GetProjectItemDefinition();
    public IRdEndpoint`2<string, List`1<RdTargetFrameworkValue>> get_GetProjectProperty();
    public IRdEndpoint`2<Unit, List`1<RdProjectFileContent>> get_GetProjectFiles();
    public IRdEndpoint`2<Unit, List`1<RdProjectItem>> get_GetOwnProjectItemsIgnoringCondition();
    public IRdEndpoint`2<RdExecuteTargetRequest, RdExecuteTargetResult> get_ExecuteTarget();
    public IRdEndpoint`2<RdAddItemContext, RdProjectItemOrigin> get_AddItem();
    public IRdEndpoint`2<RdUpdateItemContext, RdProjectItemOrigin> get_UpdateItem();
    public IRdEndpoint`2<RdRemoveItemContext, Unit> get_RemoveItem();
    public IRdEndpoint`2<RdFolderContext, Unit> get_IncludeFolder();
    public IRdEndpoint`2<RdFolderContext, Unit> get_ExcludeFolder();
    public IRdEndpoint`2<RdAddImportContext, Unit> get_AddImport();
    public IRdEndpoint`2<RdRemoveImportContext, Unit> get_RemoveImport();
    public IRdEndpoint`2<RdAddTargetContext, Unit> get_AddTarget();
    public IRdEndpoint`2<RdRemoveTargetContext, Unit> get_RemoveTarget();
    public IViewableProperty`1<RdEditTargetSession> get_EditTargetSession();
    public IRdEndpoint`2<RdSavePropertiesContext, Unit> get_SaveProperties();
    public IRdEndpoint`2<RdModifyConfigurationsContext, Unit> get_ModifyConfigurations();
    public IRdEndpoint`2<Unit, Unit> get_Reevaluate();
    public virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectParameters : object {
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <TypeGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Build>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Deploy>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdProjectConfiguration> <Configurations>k__BackingField;
    [CompilerGeneratedAttribute]
private RdProjectConfiguration <DefaultConfiguration>k__BackingField;
    public static CtxReadDelegate`1<RdProjectParameters> Read;
    public static CtxReadDelegate`1<List`1<RdProjectConfiguration>> ReadRdProjectConfigurationList;
    public static CtxWriteDelegate`1<RdProjectParameters> Write;
    public static CtxWriteDelegate`1<List`1<RdProjectConfiguration>> WriteRdProjectConfigurationList;
    public Guid Guid { get; private set; }
    public Guid TypeGuid { get; private set; }
    public bool Build { get; private set; }
    public bool Deploy { get; private set; }
    [NotNullAttribute]
public List`1<RdProjectConfiguration> Configurations { get; private set; }
    [NotNullAttribute]
public RdProjectConfiguration DefaultConfiguration { get; private set; }
    public RdProjectParameters(Guid guid, Guid typeGuid, bool build, bool deploy, List`1<RdProjectConfiguration> configurations, RdProjectConfiguration defaultConfiguration);
    private static RdProjectParameters();
    [CompilerGeneratedAttribute]
public Guid get_Guid();
    [CompilerGeneratedAttribute]
private void set_Guid(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_TypeGuid();
    [CompilerGeneratedAttribute]
private void set_TypeGuid(Guid value);
    [CompilerGeneratedAttribute]
public bool get_Build();
    [CompilerGeneratedAttribute]
private void set_Build(bool value);
    [CompilerGeneratedAttribute]
public bool get_Deploy();
    [CompilerGeneratedAttribute]
private void set_Deploy(bool value);
    [CompilerGeneratedAttribute]
public List`1<RdProjectConfiguration> get_Configurations();
    [CompilerGeneratedAttribute]
private void set_Configurations(List`1<RdProjectConfiguration> value);
    [CompilerGeneratedAttribute]
public RdProjectConfiguration get_DefaultConfiguration();
    [CompilerGeneratedAttribute]
private void set_DefaultConfiguration(RdProjectConfiguration value);
    public void Deconstruct(Guid& guid, Guid& typeGuid, Boolean& build, Boolean& deploy, List`1& configurations, RdProjectConfiguration& defaultConfiguration);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdProjectParameters other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectPropertiesSet : object {
    [CompilerGeneratedAttribute]
private List`1<RdProjectProperty> <ProjectProperties>k__BackingField;
    public static CtxReadDelegate`1<RdProjectPropertiesSet> Read;
    public static CtxReadDelegate`1<List`1<RdProjectProperty>> ReadRdProjectPropertyList;
    public static CtxWriteDelegate`1<RdProjectPropertiesSet> Write;
    public static CtxWriteDelegate`1<List`1<RdProjectProperty>> WriteRdProjectPropertyList;
    [NotNullAttribute]
public List`1<RdProjectProperty> ProjectProperties { get; private set; }
    public RdProjectPropertiesSet(List`1<RdProjectProperty> projectProperties);
    private static RdProjectPropertiesSet();
    [CompilerGeneratedAttribute]
public List`1<RdProjectProperty> get_ProjectProperties();
    [CompilerGeneratedAttribute]
private void set_ProjectProperties(List`1<RdProjectProperty> value);
    public void Deconstruct(List`1& projectProperties);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdProjectPropertiesSet other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectProperty : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EvaluatedValue>k__BackingField;
    public static CtxReadDelegate`1<RdProjectProperty> Read;
    public static CtxReadDelegate`1<string> ReadStringInternedAtReloadProjectSessionInternScope;
    public static CtxWriteDelegate`1<RdProjectProperty> Write;
    public static CtxWriteDelegate`1<string> WriteStringInternedAtReloadProjectSessionInternScope;
    [NotNullAttribute]
public string Name { get; private set; }
    [NotNullAttribute]
public string EvaluatedValue { get; private set; }
    public RdProjectProperty(string name, string evaluatedValue);
    private static RdProjectProperty();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_EvaluatedValue();
    [CompilerGeneratedAttribute]
private void set_EvaluatedValue(string value);
    public void Deconstruct(String& name, String& evaluatedValue);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdProjectProperty other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectTarget : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsImported>k__BackingField;
    public static CtxReadDelegate`1<RdProjectTarget> Read;
    public static CtxWriteDelegate`1<RdProjectTarget> Write;
    [NotNullAttribute]
public string Name { get; private set; }
    public bool IsImported { get; private set; }
    public RdProjectTarget(string name, bool isImported);
    private static RdProjectTarget();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_IsImported();
    [CompilerGeneratedAttribute]
private void set_IsImported(bool value);
    public void Deconstruct(String& name, Boolean& isImported);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdProjectTarget other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectTargetProperty : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public static CtxReadDelegate`1<RdProjectTargetProperty> Read;
    public static CtxWriteDelegate`1<RdProjectTargetProperty> Write;
    [NotNullAttribute]
public string Name { get; private set; }
    [NotNullAttribute]
public string Value { get; private set; }
    public RdProjectTargetProperty(string name, string value);
    private static RdProjectTargetProperty();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
    public void Deconstruct(String& name, String& value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdProjectTargetProperty other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectTargetTask : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdProjectTargetProperty> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    public static CtxReadDelegate`1<RdProjectTargetTask> Read;
    public static CtxReadDelegate`1<List`1<RdProjectTargetProperty>> ReadRdProjectTargetPropertyList;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxWriteDelegate`1<RdProjectTargetTask> Write;
    public static CtxWriteDelegate`1<List`1<RdProjectTargetProperty>> WriteRdProjectTargetPropertyList;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    [NotNullAttribute]
public string Name { get; private set; }
    [NotNullAttribute]
public List`1<RdProjectTargetProperty> Parameters { get; private set; }
    [CanBeNullAttribute]
public string Condition { get; private set; }
    public RdProjectTargetTask(string name, List`1<RdProjectTargetProperty> parameters, string condition);
    private static RdProjectTargetTask();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public List`1<RdProjectTargetProperty> get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(List`1<RdProjectTargetProperty> value);
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
private void set_Condition(string value);
    public void Deconstruct(String& name, List`1& parameters, String& condition);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdProjectTargetTask other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectTemplatesSession : RdSession {
    [CompilerGeneratedAttribute]
private List`1<RdDeployCondition> <DeployConditions>k__BackingField;
    [NotNullAttribute]
private RdCall`2<string, RdProjectParameters> _LoadProject;
    public static CtxReadDelegate`1<RdProjectTemplatesSession> Read;
    public static CtxReadDelegate`1<List`1<RdDeployCondition>> ReadRdDeployConditionList;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxWriteDelegate`1<RdProjectTemplatesSession> Write;
    public static CtxWriteDelegate`1<List`1<RdDeployCondition>> WriteRdDeployConditionList;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    [NotNullAttribute]
public List`1<RdDeployCondition> DeployConditions { get; private set; }
    [NotNullAttribute]
public IRdEndpoint`2<string, RdProjectParameters> LoadProject { get; }
    private RdProjectTemplatesSession(List`1<RdDeployCondition> deployConditions, RdCall`2<string, RdProjectParameters> loadProject, RdSignal`1<Unit> shutdown, RdCall`2<Unit, string> checkState);
    public RdProjectTemplatesSession(List`1<RdDeployCondition> deployConditions);
    private static RdProjectTemplatesSession();
    [CompilerGeneratedAttribute]
public List`1<RdDeployCondition> get_DeployConditions();
    [CompilerGeneratedAttribute]
private void set_DeployConditions(List`1<RdDeployCondition> value);
    public IRdEndpoint`2<string, RdProjectParameters> get_LoadProject();
    public virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectUnloadResult : object {
    [CompilerGeneratedAttribute]
private RdProjectId <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private RdLoadError <FatalError>k__BackingField;
    public static CtxReadDelegate`1<RdProjectUnloadResult> Read;
    public static CtxReadDelegate`1<RdLoadError> ReadRdLoadErrorNullable;
    public static CtxWriteDelegate`1<RdProjectUnloadResult> Write;
    public static CtxWriteDelegate`1<RdLoadError> WriteRdLoadErrorNullable;
    [NotNullAttribute]
public RdProjectId ProjectId { get; private set; }
    [CanBeNullAttribute]
public RdLoadError FatalError { get; private set; }
    public RdProjectUnloadResult(RdProjectId projectId, RdLoadError fatalError);
    private static RdProjectUnloadResult();
    [CompilerGeneratedAttribute]
public RdProjectId get_ProjectId();
    [CompilerGeneratedAttribute]
private void set_ProjectId(RdProjectId value);
    [CompilerGeneratedAttribute]
public RdLoadError get_FatalError();
    [CompilerGeneratedAttribute]
private void set_FatalError(RdLoadError value);
    public void Deconstruct(RdProjectId& projectId, RdLoadError& fatalError);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdProjectUnloadResult other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdProjectWildcardItem : RdItemWithMetadata {
    [CompilerGeneratedAttribute]
private string <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Include>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Exclude>k__BackingField;
    [CompilerGeneratedAttribute]
private RdProjectItemOrigin <Origin>k__BackingField;
    public static CtxReadDelegate`1<RdProjectWildcardItem> Read;
    public static CtxReadDelegate`1<string> ReadStringInternedAtProtocol;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxReadDelegate`1<List`1<RdProjectMetadata>> ReadRdProjectMetadataList;
    public static CtxWriteDelegate`1<RdProjectWildcardItem> Write;
    public static CtxWriteDelegate`1<string> WriteStringInternedAtProtocol;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    public static CtxWriteDelegate`1<List`1<RdProjectMetadata>> WriteRdProjectMetadataList;
    [NotNullAttribute]
public string ItemType { get; private set; }
    [NotNullAttribute]
public string Include { get; private set; }
    [CanBeNullAttribute]
public string Exclude { get; private set; }
    [NotNullAttribute]
public RdProjectItemOrigin Origin { get; private set; }
    public RdProjectWildcardItem(string itemType, string include, string exclude, RdProjectItemOrigin origin, List`1<RdProjectMetadata> metadata);
    private static RdProjectWildcardItem();
    [CompilerGeneratedAttribute]
public string get_ItemType();
    [CompilerGeneratedAttribute]
private void set_ItemType(string value);
    [CompilerGeneratedAttribute]
public string get_Include();
    [CompilerGeneratedAttribute]
private void set_Include(string value);
    [CompilerGeneratedAttribute]
public string get_Exclude();
    [CompilerGeneratedAttribute]
private void set_Exclude(string value);
    [CompilerGeneratedAttribute]
public RdProjectItemOrigin get_Origin();
    [CompilerGeneratedAttribute]
private void set_Origin(RdProjectItemOrigin value);
    public virtual bool Equals(object obj);
    public bool Equals(RdProjectWildcardItem other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdRelativeToAfter : RdRelativeToContext {
    public static CtxReadDelegate`1<RdRelativeToAfter> Read;
    public static CtxWriteDelegate`1<RdRelativeToAfter> Write;
    public RdRelativeToAfter(string unevaluatedInclude);
    private static RdRelativeToAfter();
    public virtual bool Equals(object obj);
    public bool Equals(RdRelativeToAfter other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdRelativeToBefore : RdRelativeToContext {
    public static CtxReadDelegate`1<RdRelativeToBefore> Read;
    public static CtxWriteDelegate`1<RdRelativeToBefore> Write;
    public RdRelativeToBefore(string unevaluatedInclude);
    private static RdRelativeToBefore();
    public virtual bool Equals(object obj);
    public bool Equals(RdRelativeToBefore other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public abstract class JetBrains.Platform.MsBuildTask.Models.RdRelativeToContext : object {
    [CompilerGeneratedAttribute]
private string <UnevaluatedInclude>k__BackingField;
    public static CtxReadDelegate`1<RdRelativeToContext> Read;
    public static CtxWriteDelegate`1<RdRelativeToContext> Write;
    [NotNullAttribute]
public string UnevaluatedInclude { get; private set; }
    protected RdRelativeToContext(string unevaluatedInclude);
    private static RdRelativeToContext();
    [CompilerGeneratedAttribute]
public string get_UnevaluatedInclude();
    [CompilerGeneratedAttribute]
private void set_UnevaluatedInclude(string value);
}
public class JetBrains.Platform.MsBuildTask.Models.RdRelativeToContext_Unknown : RdRelativeToContext {
    public static CtxReadDelegate`1<RdRelativeToContext_Unknown> Read;
    public static CtxWriteDelegate`1<RdRelativeToContext_Unknown> Write;
    public RdRelativeToContext_Unknown(string unevaluatedInclude);
    private static RdRelativeToContext_Unknown();
    public virtual bool Equals(object obj);
    public bool Equals(RdRelativeToContext_Unknown other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdReloadProjectRequest : object {
    [CompilerGeneratedAttribute]
private RdProjectId <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdInputProperty> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdInputTarget> <Targets>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdInputTarget> <RestoreTargets>k__BackingField;
    public static CtxReadDelegate`1<RdReloadProjectRequest> Read;
    public static CtxReadDelegate`1<List`1<RdInputProperty>> ReadRdInputPropertyList;
    public static CtxReadDelegate`1<List`1<RdInputTarget>> ReadRdInputTargetList;
    public static CtxWriteDelegate`1<RdReloadProjectRequest> Write;
    public static CtxWriteDelegate`1<List`1<RdInputProperty>> WriteRdInputPropertyList;
    public static CtxWriteDelegate`1<List`1<RdInputTarget>> WriteRdInputTargetList;
    [NotNullAttribute]
public RdProjectId ProjectId { get; private set; }
    [NotNullAttribute]
public string ProjectFilePath { get; private set; }
    [NotNullAttribute]
public List`1<RdInputProperty> Properties { get; private set; }
    [NotNullAttribute]
public List`1<RdInputTarget> Targets { get; private set; }
    [NotNullAttribute]
public List`1<RdInputTarget> RestoreTargets { get; private set; }
    public RdReloadProjectRequest(RdProjectId projectId, string projectFilePath, List`1<RdInputProperty> properties, List`1<RdInputTarget> targets, List`1<RdInputTarget> restoreTargets);
    private static RdReloadProjectRequest();
    [CompilerGeneratedAttribute]
public RdProjectId get_ProjectId();
    [CompilerGeneratedAttribute]
private void set_ProjectId(RdProjectId value);
    [CompilerGeneratedAttribute]
public string get_ProjectFilePath();
    [CompilerGeneratedAttribute]
private void set_ProjectFilePath(string value);
    [CompilerGeneratedAttribute]
public List`1<RdInputProperty> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(List`1<RdInputProperty> value);
    [CompilerGeneratedAttribute]
public List`1<RdInputTarget> get_Targets();
    [CompilerGeneratedAttribute]
private void set_Targets(List`1<RdInputTarget> value);
    [CompilerGeneratedAttribute]
public List`1<RdInputTarget> get_RestoreTargets();
    [CompilerGeneratedAttribute]
private void set_RestoreTargets(List`1<RdInputTarget> value);
    public void Deconstruct(RdProjectId& projectId, String& projectFilePath, List`1& properties, List`1& targets, List`1& restoreTargets);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdReloadProjectRequest other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdReloadProjectScheme : object {
    [CompilerGeneratedAttribute]
private List`1<string> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Metadata>k__BackingField;
    public static CtxReadDelegate`1<RdReloadProjectScheme> Read;
    public static CtxReadDelegate`1<List`1<string>> ReadStringList;
    public static CtxWriteDelegate`1<RdReloadProjectScheme> Write;
    public static CtxWriteDelegate`1<List`1<string>> WriteStringList;
    [NotNullAttribute]
public List`1<string> Properties { get; private set; }
    [NotNullAttribute]
public List`1<string> Items { get; private set; }
    [NotNullAttribute]
public List`1<string> Metadata { get; private set; }
    public RdReloadProjectScheme(List`1<string> properties, List`1<string> items, List`1<string> metadata);
    private static RdReloadProjectScheme();
    [CompilerGeneratedAttribute]
public List`1<string> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Metadata();
    [CompilerGeneratedAttribute]
private void set_Metadata(List`1<string> value);
    public void Deconstruct(List`1& properties, List`1& items, List`1& metadata);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdReloadProjectScheme other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdReloadProjectsSession : RdBindableBase {
    [CompilerGeneratedAttribute]
private List`1<RdReloadProjectRequest> <Requests>k__BackingField;
    [CompilerGeneratedAttribute]
private RdReloadProjectScheme <Scheme>k__BackingField;
    [CompilerGeneratedAttribute]
private RdReloadProjectsSessionType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NodeCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableOrdering>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableRestoreDesignTimeBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DiagnosticLogger>k__BackingField;
    [NotNullAttribute]
private RdSignal`1<RdProjectId> _Start;
    [NotNullAttribute]
private RdSignal`1<RdProjectLoadResult> _Finish;
    public static CtxReadDelegate`1<RdReloadProjectsSession> Read;
    public static CtxReadDelegate`1<List`1<RdReloadProjectRequest>> ReadRdReloadProjectRequestList;
    public static CtxReadDelegate`1<RdReloadProjectScheme> ReadRdReloadProjectSchemeNullable;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxWriteDelegate`1<RdReloadProjectsSession> Write;
    public static CtxWriteDelegate`1<List`1<RdReloadProjectRequest>> WriteRdReloadProjectRequestList;
    public static CtxWriteDelegate`1<RdReloadProjectScheme> WriteRdReloadProjectSchemeNullable;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    [NotNullAttribute]
public List`1<RdReloadProjectRequest> Requests { get; private set; }
    [CanBeNullAttribute]
public RdReloadProjectScheme Scheme { get; private set; }
    public RdReloadProjectsSessionType Type { get; private set; }
    public int NodeCount { get; private set; }
    public bool EnableOrdering { get; private set; }
    public bool EnableRestoreDesignTimeBuild { get; private set; }
    [CanBeNullAttribute]
public string DiagnosticLogger { get; private set; }
    private RdReloadProjectsSession(List`1<RdReloadProjectRequest> requests, RdReloadProjectScheme scheme, RdReloadProjectsSessionType type, int nodeCount, bool enableOrdering, bool enableRestoreDesignTimeBuild, string diagnosticLogger, RdSignal`1<RdProjectId> start, RdSignal`1<RdProjectLoadResult> finish);
    public RdReloadProjectsSession(List`1<RdReloadProjectRequest> requests, RdReloadProjectScheme scheme, RdReloadProjectsSessionType type, int nodeCount, bool enableOrdering, bool enableRestoreDesignTimeBuild, string diagnosticLogger);
    private static RdReloadProjectsSession();
    [CompilerGeneratedAttribute]
public List`1<RdReloadProjectRequest> get_Requests();
    [CompilerGeneratedAttribute]
private void set_Requests(List`1<RdReloadProjectRequest> value);
    [CompilerGeneratedAttribute]
public RdReloadProjectScheme get_Scheme();
    [CompilerGeneratedAttribute]
private void set_Scheme(RdReloadProjectScheme value);
    [CompilerGeneratedAttribute]
public RdReloadProjectsSessionType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(RdReloadProjectsSessionType value);
    [CompilerGeneratedAttribute]
public int get_NodeCount();
    [CompilerGeneratedAttribute]
private void set_NodeCount(int value);
    [CompilerGeneratedAttribute]
public bool get_EnableOrdering();
    [CompilerGeneratedAttribute]
private void set_EnableOrdering(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableRestoreDesignTimeBuild();
    [CompilerGeneratedAttribute]
private void set_EnableRestoreDesignTimeBuild(bool value);
    [CompilerGeneratedAttribute]
public string get_DiagnosticLogger();
    [CompilerGeneratedAttribute]
private void set_DiagnosticLogger(string value);
    [NotNullAttribute]
public void Start(RdProjectId value);
    [NotNullAttribute]
public void Finish(RdProjectLoadResult value);
    public virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public enum JetBrains.Platform.MsBuildTask.Models.RdReloadProjectsSessionType : Enum {
    public int value__;
    public static RdReloadProjectsSessionType ColdStartup;
    public static RdReloadProjectsSessionType WarmStartup;
    public static RdReloadProjectsSessionType Sync;
}
public class JetBrains.Platform.MsBuildTask.Models.RdReloadProjectsSessionWrapper : RdBindableBase {
    [NotNullAttribute]
private RdProperty`1<RdReloadProjectsSession> _Value;
    private SerializationCtx mySerializationContext;
    public static CtxReadDelegate`1<RdReloadProjectsSessionWrapper> Read;
    public static CtxWriteDelegate`1<RdReloadProjectsSessionWrapper> Write;
    [NotNullAttribute]
public IViewableProperty`1<RdReloadProjectsSession> Value { get; }
    private RdReloadProjectsSessionWrapper(RdProperty`1<RdReloadProjectsSession> value);
    private static RdReloadProjectsSessionWrapper();
    public IViewableProperty`1<RdReloadProjectsSession> get_Value();
    public virtual bool TryGetSerializationContext(SerializationCtx& ctx);
    public virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdRemoveImportContext : object {
    [CompilerGeneratedAttribute]
private RdProjectImportIdentity <Identity>k__BackingField;
    public static CtxReadDelegate`1<RdRemoveImportContext> Read;
    public static CtxWriteDelegate`1<RdRemoveImportContext> Write;
    [NotNullAttribute]
public RdProjectImportIdentity Identity { get; private set; }
    public RdRemoveImportContext(RdProjectImportIdentity identity);
    private static RdRemoveImportContext();
    [CompilerGeneratedAttribute]
public RdProjectImportIdentity get_Identity();
    [CompilerGeneratedAttribute]
private void set_Identity(RdProjectImportIdentity value);
    public void Deconstruct(RdProjectImportIdentity& identity);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdRemoveImportContext other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdRemoveItemContext : object {
    [CompilerGeneratedAttribute]
private RdProjectItemIdentity <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeWildcard>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetProjectFileName>k__BackingField;
    public static CtxReadDelegate`1<RdRemoveItemContext> Read;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxWriteDelegate`1<RdRemoveItemContext> Write;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    [NotNullAttribute]
public RdProjectItemIdentity Identity { get; private set; }
    public bool ExcludeWildcard { get; private set; }
    [CanBeNullAttribute]
public string TargetProjectFileName { get; private set; }
    public RdRemoveItemContext(RdProjectItemIdentity identity, bool excludeWildcard, string targetProjectFileName);
    private static RdRemoveItemContext();
    [CompilerGeneratedAttribute]
public RdProjectItemIdentity get_Identity();
    [CompilerGeneratedAttribute]
private void set_Identity(RdProjectItemIdentity value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeWildcard();
    [CompilerGeneratedAttribute]
private void set_ExcludeWildcard(bool value);
    [CompilerGeneratedAttribute]
public string get_TargetProjectFileName();
    [CompilerGeneratedAttribute]
private void set_TargetProjectFileName(string value);
    public void Deconstruct(RdProjectItemIdentity& identity, Boolean& excludeWildcard, String& targetProjectFileName);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdRemoveItemContext other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdRemoveTargetContext : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public static CtxReadDelegate`1<RdRemoveTargetContext> Read;
    public static CtxWriteDelegate`1<RdRemoveTargetContext> Write;
    [NotNullAttribute]
public string Name { get; private set; }
    public RdRemoveTargetContext(string name);
    private static RdRemoveTargetContext();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public void Deconstruct(String& name);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdRemoveTargetContext other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdRemoveTaskContext : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    public static CtxReadDelegate`1<RdRemoveTaskContext> Read;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxWriteDelegate`1<RdRemoveTaskContext> Write;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    [NotNullAttribute]
public string Name { get; private set; }
    [CanBeNullAttribute]
public string Condition { get; private set; }
    public RdRemoveTaskContext(string name, string condition);
    private static RdRemoveTaskContext();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
private void set_Condition(string value);
    public void Deconstruct(String& name, String& condition);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdRemoveTaskContext other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdSavePropertiesContext : object {
    [CompilerGeneratedAttribute]
private List`1<RdSaveProperty> <Properties>k__BackingField;
    public static CtxReadDelegate`1<RdSavePropertiesContext> Read;
    public static CtxReadDelegate`1<List`1<RdSaveProperty>> ReadRdSavePropertyList;
    public static CtxWriteDelegate`1<RdSavePropertiesContext> Write;
    public static CtxWriteDelegate`1<List`1<RdSaveProperty>> WriteRdSavePropertyList;
    [NotNullAttribute]
public List`1<RdSaveProperty> Properties { get; private set; }
    public RdSavePropertiesContext(List`1<RdSaveProperty> properties);
    private static RdSavePropertiesContext();
    [CompilerGeneratedAttribute]
public List`1<RdSaveProperty> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(List`1<RdSaveProperty> value);
    public void Deconstruct(List`1& properties);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdSavePropertiesContext other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdSaveProperty : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewValue>k__BackingField;
    [CompilerGeneratedAttribute]
private RdProjectConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasConfigurationCondition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUserFileProperty>k__BackingField;
    public static CtxReadDelegate`1<RdSaveProperty> Read;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxReadDelegate`1<RdProjectConfiguration> ReadRdProjectConfigurationNullable;
    public static CtxReadDelegate`1<string> ReadStringInternedAtProtocol;
    public static CtxWriteDelegate`1<RdSaveProperty> Write;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    public static CtxWriteDelegate`1<RdProjectConfiguration> WriteRdProjectConfigurationNullable;
    public static CtxWriteDelegate`1<string> WriteStringInternedAtProtocol;
    [NotNullAttribute]
public string Name { get; private set; }
    [CanBeNullAttribute]
public string NewValue { get; private set; }
    [CanBeNullAttribute]
public RdProjectConfiguration Configuration { get; private set; }
    [NotNullAttribute]
public string ItemType { get; private set; }
    [NotNullAttribute]
public string Label { get; private set; }
    public bool HasConfigurationCondition { get; private set; }
    public bool IsUserFileProperty { get; private set; }
    public RdSaveProperty(string name, string newValue, RdProjectConfiguration configuration, string itemType, string label, bool hasConfigurationCondition, bool isUserFileProperty);
    private static RdSaveProperty();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_NewValue();
    [CompilerGeneratedAttribute]
private void set_NewValue(string value);
    [CompilerGeneratedAttribute]
public RdProjectConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
private void set_Configuration(RdProjectConfiguration value);
    [CompilerGeneratedAttribute]
public string get_ItemType();
    [CompilerGeneratedAttribute]
private void set_ItemType(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
private void set_Label(string value);
    [CompilerGeneratedAttribute]
public bool get_HasConfigurationCondition();
    [CompilerGeneratedAttribute]
private void set_HasConfigurationCondition(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsUserFileProperty();
    [CompilerGeneratedAttribute]
private void set_IsUserFileProperty(bool value);
    public void Deconstruct(String& name, String& newValue, RdProjectConfiguration& configuration, String& itemType, String& label, Boolean& hasConfigurationCondition, Boolean& isUserFileProperty);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdSaveProperty other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public abstract class JetBrains.Platform.MsBuildTask.Models.RdSession : RdBindableBase {
    [NotNullAttribute]
protected RdSignal`1<Unit> _Shutdown;
    [NotNullAttribute]
protected RdCall`2<Unit, string> _CheckState;
    public static CtxReadDelegate`1<RdSession> Read;
    public static CtxWriteDelegate`1<RdSession> Write;
    [NotNullAttribute]
public ISource`1<Unit> Shutdown { get; }
    [NotNullAttribute]
public IRdEndpoint`2<Unit, string> CheckState { get; }
    protected RdSession(RdSignal`1<Unit> shutdown, RdCall`2<Unit, string> checkState);
    private static RdSession();
    public ISource`1<Unit> get_Shutdown();
    public IRdEndpoint`2<Unit, string> get_CheckState();
}
public class JetBrains.Platform.MsBuildTask.Models.RdSession_Unknown : RdSession {
    public static CtxReadDelegate`1<RdSession_Unknown> Read;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxWriteDelegate`1<RdSession_Unknown> Write;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    private RdSession_Unknown(RdSignal`1<Unit> shutdown, RdCall`2<Unit, string> checkState);
    private static RdSession_Unknown();
    public virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdSetTargetPropertyContext : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public static CtxReadDelegate`1<RdSetTargetPropertyContext> Read;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxWriteDelegate`1<RdSetTargetPropertyContext> Write;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    [NotNullAttribute]
public string Name { get; private set; }
    [CanBeNullAttribute]
public string Value { get; private set; }
    public RdSetTargetPropertyContext(string name, string value);
    private static RdSetTargetPropertyContext();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
    public void Deconstruct(String& name, String& value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdSetTargetPropertyContext other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdTargetFrameworkValue : object {
    [CompilerGeneratedAttribute]
private string <EvaluatedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    public static CtxReadDelegate`1<RdTargetFrameworkValue> Read;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxWriteDelegate`1<RdTargetFrameworkValue> Write;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    [CanBeNullAttribute]
public string EvaluatedValue { get; private set; }
    [CanBeNullAttribute]
public string TargetFramework { get; private set; }
    public RdTargetFrameworkValue(string evaluatedValue, string targetFramework);
    private static RdTargetFrameworkValue();
    [CompilerGeneratedAttribute]
public string get_EvaluatedValue();
    [CompilerGeneratedAttribute]
private void set_EvaluatedValue(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
private void set_TargetFramework(string value);
    public void Deconstruct(String& evaluatedValue, String& targetFramework);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdTargetFrameworkValue other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdThisProjectItemOrigin : RdProjectItemOrigin {
    public static CtxReadDelegate`1<RdThisProjectItemOrigin> Read;
    public static CtxWriteDelegate`1<RdThisProjectItemOrigin> Write;
    private static RdThisProjectItemOrigin();
    public virtual bool Equals(object obj);
    public bool Equals(RdThisProjectItemOrigin other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.RdUpdateItemContext : object {
    [CompilerGeneratedAttribute]
private RdProjectItemIdentity <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnevaluatedInclude>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RdItemMetadata> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private RdProjectItemOrigin <WildcardOrigin>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetProjectFileName>k__BackingField;
    public static CtxReadDelegate`1<RdUpdateItemContext> Read;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxReadDelegate`1<List`1<RdItemMetadata>> ReadRdItemMetadataList;
    public static CtxReadDelegate`1<RdProjectItemOrigin> ReadRdProjectItemOriginNullable;
    public static CtxWriteDelegate`1<RdUpdateItemContext> Write;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    public static CtxWriteDelegate`1<List`1<RdItemMetadata>> WriteRdItemMetadataList;
    public static CtxWriteDelegate`1<RdProjectItemOrigin> WriteRdProjectItemOriginNullable;
    [NotNullAttribute]
public RdProjectItemIdentity Identity { get; private set; }
    [CanBeNullAttribute]
public string ItemType { get; private set; }
    [CanBeNullAttribute]
public string UnevaluatedInclude { get; private set; }
    [NotNullAttribute]
public List`1<RdItemMetadata> Metadata { get; private set; }
    [CanBeNullAttribute]
public RdProjectItemOrigin WildcardOrigin { get; private set; }
    [CanBeNullAttribute]
public string TargetProjectFileName { get; private set; }
    public RdUpdateItemContext(RdProjectItemIdentity identity, string itemType, string unevaluatedInclude, List`1<RdItemMetadata> metadata, RdProjectItemOrigin wildcardOrigin, string targetProjectFileName);
    private static RdUpdateItemContext();
    [CompilerGeneratedAttribute]
public RdProjectItemIdentity get_Identity();
    [CompilerGeneratedAttribute]
private void set_Identity(RdProjectItemIdentity value);
    [CompilerGeneratedAttribute]
public string get_ItemType();
    [CompilerGeneratedAttribute]
private void set_ItemType(string value);
    [CompilerGeneratedAttribute]
public string get_UnevaluatedInclude();
    [CompilerGeneratedAttribute]
private void set_UnevaluatedInclude(string value);
    [CompilerGeneratedAttribute]
public List`1<RdItemMetadata> get_Metadata();
    [CompilerGeneratedAttribute]
private void set_Metadata(List`1<RdItemMetadata> value);
    [CompilerGeneratedAttribute]
public RdProjectItemOrigin get_WildcardOrigin();
    [CompilerGeneratedAttribute]
private void set_WildcardOrigin(RdProjectItemOrigin value);
    [CompilerGeneratedAttribute]
public string get_TargetProjectFileName();
    [CompilerGeneratedAttribute]
private void set_TargetProjectFileName(string value);
    public void Deconstruct(RdProjectItemIdentity& identity, String& itemType, String& unevaluatedInclude, List`1& metadata, RdProjectItemOrigin& wildcardOrigin, String& targetProjectFileName);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RdUpdateItemContext other);
    public virtual int GetHashCode();
    public sealed virtual void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public abstract class JetBrains.Platform.MsBuildTask.Models.RdUserMessage : object {
    public static CtxReadDelegate`1<RdUserMessage> Read;
    public static CtxWriteDelegate`1<RdUserMessage> Write;
    private static RdUserMessage();
}
public class JetBrains.Platform.MsBuildTask.Models.RdUserMessage_Unknown : RdUserMessage {
    public static CtxReadDelegate`1<RdUserMessage_Unknown> Read;
    public static CtxWriteDelegate`1<RdUserMessage_Unknown> Write;
    private static RdUserMessage_Unknown();
    public virtual bool Equals(object obj);
    public bool Equals(RdUserMessage_Unknown other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public enum JetBrains.Platform.MsBuildTask.Models.RdUserMessageCode : Enum {
    public int value__;
    public static RdUserMessageCode CannotStartBuildingProject;
    public static RdUserMessageCode CannotLoadProject;
    public static RdUserMessageCode CannotUnloadProject;
    public static RdUserMessageCode ProjectFileNotFound;
    public static RdUserMessageCode DuplicateInputParameters;
    public static RdUserMessageCode ProjectFilePathTooLong;
}
public enum JetBrains.Platform.MsBuildTask.Models.RdVerbosityLevel : Enum {
    public int value__;
    public static RdVerbosityLevel Quiet;
    public static RdVerbosityLevel Minimal;
    public static RdVerbosityLevel Normal;
    public static RdVerbosityLevel Detailed;
    public static RdVerbosityLevel Diagnostic;
}
public class JetBrains.Platform.MsBuildTask.Models.ReferenceBuildEvent : ImportantBuildEvent {
    public static CtxReadDelegate`1<ReferenceBuildEvent> Read;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxWriteDelegate`1<ReferenceBuildEvent> Write;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    public ReferenceBuildEvent(string file, string subcategory, int lineNumber, int endLineNumber, int columnNumber, int endColumnNumber, string code, RdProjectId projectId, string targetFramework, string message);
    private static ReferenceBuildEvent();
    public virtual bool Equals(object obj);
    public bool Equals(ReferenceBuildEvent other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public class JetBrains.Platform.MsBuildTask.Models.WarningBuildEvent : ImportantBuildEvent {
    public static CtxReadDelegate`1<WarningBuildEvent> Read;
    public static CtxReadDelegate`1<string> ReadStringNullable;
    public static CtxWriteDelegate`1<WarningBuildEvent> Write;
    public static CtxWriteDelegate`1<string> WriteStringNullable;
    public WarningBuildEvent(string file, string subcategory, int lineNumber, int endLineNumber, int columnNumber, int endColumnNumber, string code, RdProjectId projectId, string targetFramework, string message);
    private static WarningBuildEvent();
    public virtual bool Equals(object obj);
    public bool Equals(WarningBuildEvent other);
    public virtual int GetHashCode();
    public void Print(PrettyPrinter printer);
    public virtual string ToString();
}
public abstract class JetBrains.Platform.MsBuildTask.MsBuildAdapter : object {
    private static ILog ourLogger;
    private static DefaultMsBuildAdapter ourDefaultInstance;
    [CanBeNullAttribute]
private static MsBuildAdapter Instance { get; }
    private static MsBuildAdapter();
    private static MsBuildAdapter get_Instance();
    public static void Execute(Action`1<MsBuildAdapter> func);
    public static T Execute(Func`2<MsBuildAdapter, T> func);
    public static T Execute(TContext context, Func`3<MsBuildAdapter, TContext, T> func);
    public abstract virtual bool IsImplicitTopImport(ProjectImportElement projectImportElement);
    public abstract virtual bool IsImplicitBottomImport(ProjectImportElement projectImportElement);
    public abstract virtual ProjectRootElement LoadProjectRootElement(string projectFilePath, ProjectCollection projectCollection);
    public abstract virtual bool GetExpressedAsAttribute(ProjectMetadataElement projectMetadataElement);
    public abstract virtual void SetExpressedAsAttribute(ProjectMetadataElement projectMetadataElement, bool expressedAsAttribute);
    public abstract virtual bool SupportAlterItems();
    public abstract virtual ProjectItemElement TryCreateUpdateItem(ProjectRootElement projectRootElement, string itemType, string unevaluatedUpdate);
    public abstract virtual ProjectItemElement FindUpdateItem(ProjectRootElement projectRootElement, string itemType, string unevaluatedUpdate);
    public abstract virtual void SetUpdateItem(ProjectItemElement item, string unevaluatedUpdate);
    public abstract virtual string GetSdk(ProjectRootElement projectRootElement);
    [NotNullAttribute]
public abstract virtual string GetNugetShortName(string name);
    public abstract virtual ProjectFactory GetProjectFactory();
}
public abstract class JetBrains.Platform.MsBuildTask.MsBuildSession : object {
}
public class JetBrains.Platform.MsBuildTask.MsBuildSessionController : object {
    private static string PARENT_PROCESS_PID_ENV_VARIABLE;
    private ILog myLogger;
    [CompilerGeneratedAttribute]
private static MsBuildSessionController <Instance>k__BackingField;
    [CanBeNullAttribute]
private MsBuildSession myCurrentSession;
    [CanBeNullAttribute]
private string myCurrentSessionError;
    [CanBeNullAttribute]
public MsBuildAdapter Adapter;
    [CompilerGeneratedAttribute]
private Version <BuildToolVersion>k__BackingField;
    public static MsBuildSessionController Instance { get; private set; }
    [CanBeNullAttribute]
public Version BuildToolVersion { get; private set; }
    public MsBuildSessionController(MsBuildAdapter adapter);
    [CompilerGeneratedAttribute]
public static MsBuildSessionController get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(MsBuildSessionController value);
    [CompilerGeneratedAttribute]
public Version get_BuildToolVersion();
    [CompilerGeneratedAttribute]
private void set_BuildToolVersion(Version value);
    public void Start(string loggerPath, string portValue, string buildToolVersion);
    private void ViewSession(Lifetime sessionLifetime, RdSession protocolSession);
    [NotNullAttribute]
private MsBuildSession CreateSession(Lifetime sessionLifetime, RdSession protocolSession);
    private void InstallExceptionHandler();
    [CompilerGeneratedAttribute]
private void <Start>b__14_0();
    [CompilerGeneratedAttribute]
private void <Start>b__14_1();
    [CompilerGeneratedAttribute]
private void <Start>b__14_2();
    [CompilerGeneratedAttribute]
private void <Start>b__14_3(Lifetime lt);
    [CompilerGeneratedAttribute]
private void <Start>b__14_6();
    [CompilerGeneratedAttribute]
private void <Start>b__14_5(RdLoggingLevel level);
    [CompilerGeneratedAttribute]
private void <InstallExceptionHandler>b__17_0(object sender, UnhandledExceptionEventArgs args);
}
public abstract class JetBrains.Platform.MsBuildTask.ProjectModel.Configurations.BaseProjectManager : object {
    private static Regex ourMatcher;
    protected static string UserProjectFileText;
    protected Project Project;
    protected BaseProjectManager(Project project);
    private static BaseProjectManager();
    public static BaseProjectManager GetInstance(Project project);
    public abstract virtual IReadOnlyCollection`1<RdProjectConfiguration> CollectProjectConfigurations();
    public abstract virtual void ModifyProjectConfigurations(RdModifyConfigurationsContext context);
    public abstract virtual void ModifyProperty(RdSaveProperty item);
    [CanBeNullAttribute]
protected static ProjectRootElement GetTargetProjectElement(Project project, RdSaveProperty item);
    protected bool HasSameConditionAndLabel(ProjectElement element, RdSaveProperty item);
    private static ProjectRootElement GetUserProject(Project project, string userFilePath);
    [CanBeNullAttribute]
protected RdProjectConfiguration ParseCondition(string condition);
    [CanBeNullAttribute]
protected virtual RdProjectConfiguration ParseConditionInternal(string condition);
    [NotNullAttribute]
protected virtual string CreateCondition(RdProjectConfiguration configuration);
    protected virtual bool MatchCondition(string condition, RdProjectConfiguration configuration);
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.Configurations.CppProjectManager : BaseProjectManager {
    private static Regex ourIncludeMatcher;
    private static string ProjectConfigurationsLabel;
    private static string ConfigurationLabel;
    private static string PlatformToolsetPropertyName;
    private static string PlatformToolsetDefaultValue;
    public CppProjectManager(Project project);
    private static CppProjectManager();
    public virtual IReadOnlyCollection`1<RdProjectConfiguration> CollectProjectConfigurations();
    public virtual void ModifyProjectConfigurations(RdModifyConfigurationsContext context);
    public virtual void ModifyProperty(RdSaveProperty item);
    private ProjectPropertyGroupElement AddPropertyGroupFor(RdSaveProperty item, ProjectRootElement projectRootElement);
    private ProjectPropertyGroupElement AddLabeledPropertyGroup(string label);
    private ProjectItemDefinitionGroupElement AddItemDefinitionGroupFor(RdSaveProperty item);
    protected virtual string CreateCondition(RdProjectConfiguration configuration);
    private void RemoveConfiguration(RdProjectConfiguration configuration);
    private void UnregisterConfiguration(RdProjectConfiguration configuration);
    private void CloneConfiguration(RdProjectConfiguration newConfiguration, RdProjectConfiguration baseConfiguration);
    private void RegisterConfiguration(RdProjectConfiguration newConfiguration, RdProjectConfiguration baseConfiguration);
    private RdProjectConfiguration GetConfigurationByInclude(string include);
    private string CreateIncludeByConfiguration(RdProjectConfiguration configuration);
    [IteratorStateMachineAttribute("JetBrains.Platform.MsBuildTask.ProjectModel.Configurations.CppProjectManager/<<AddLabeledPropertyGroup>g__GetNextSiblings|10_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<ProjectElement> <AddLabeledPropertyGroup>g__GetNextSiblings|10_0(ProjectElement current);
}
public abstract class JetBrains.Platform.MsBuildTask.ProjectModel.Configurations.DotNetProjectManager : BaseProjectManager {
    public static string AnyCpuPlatform;
    private String[] myBuildEventsProperties;
    protected DotNetProjectManager(Project project);
    private static DotNetProjectManager();
    public virtual void ModifyProjectConfigurations(RdModifyConfigurationsContext context);
    public virtual void ModifyProperty(RdSaveProperty item);
    private void ModifyUserFileProperty(RdSaveProperty item);
    private void ModifyBuildEventProperty(RdSaveProperty item);
    [NotNullAttribute]
private ProjectPropertyGroupElement GetOrCreatePropertyGroupForBuildEvents(string name);
    [CanBeNullAttribute]
private ProjectPropertyGroupElement GetPropertyGroupForBuildEvent(string name);
    [NotNullAttribute]
private ProjectPropertyGroupElement CreatePropertyGroupForBuildEvents();
    private ProjectPropertyGroupElement AddPropertyGroupFor(RdSaveProperty item, ProjectRootElement projectRootElement);
    protected static IEnumerable`1<ProjectPropertyGroupElement> GetPropertyGroups(ILookup`2<RdProjectConfiguration, ProjectPropertyGroupElement> mapping, RdProjectConfiguration baseConfiguration);
    protected abstract virtual void CreatePropertyGroupFrom(RdProjectConfiguration configuration, List`1<ProjectPropertyElement> baseProperties);
    [CanBeNullAttribute]
protected ProjectPropertyGroupElement GetPropertyGroup(RdProjectConfiguration configuration);
    [NotNullAttribute]
protected ProjectPropertyGroupElement GetOrCreatePropertyGroup(RdProjectConfiguration configuration);
    protected ProjectPropertyGroupElement CreatePropertyGroup(RdProjectConfiguration configuration);
    protected void CopyProperty(ProjectPropertyElement propertyElement, ProjectPropertyGroupElement target);
    [CanBeNullAttribute]
private static string GetLastImportedPropertyValue(ProjectProperty property);
    protected ILookup`2<RdProjectConfiguration, ProjectPropertyGroupElement> FindAllConfigurations();
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.Configurations.NetCoreProjectManager : DotNetProjectManager {
    private static Regex ourShortMatcher;
    public NetCoreProjectManager(Project project);
    private static NetCoreProjectManager();
    public virtual IReadOnlyCollection`1<RdProjectConfiguration> CollectProjectConfigurations();
    public virtual void ModifyProjectConfigurations(RdModifyConfigurationsContext context);
    protected virtual void CreatePropertyGroupFrom(RdProjectConfiguration configuration, List`1<ProjectPropertyElement> baseProperties);
    protected virtual RdProjectConfiguration ParseConditionInternal(string condition);
    protected virtual string CreateCondition(RdProjectConfiguration configuration);
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.Configurations.NetFrameworkProjectManager : DotNetProjectManager {
    private static HashSet`1<string> ourSpecialProperties;
    public NetFrameworkProjectManager(Project project);
    private static NetFrameworkProjectManager();
    public virtual IReadOnlyCollection`1<RdProjectConfiguration> CollectProjectConfigurations();
    protected virtual void CreatePropertyGroupFrom(RdProjectConfiguration configuration, List`1<ProjectPropertyElement> baseProperties);
    private static void AssignDefaultProperties(RdProjectConfiguration configuration, ProjectPropertyGroupElement propertyGroup);
}
public static class JetBrains.Platform.MsBuildTask.ProjectModel.CustomCommandsProcessor : object {
    private static Dictionary`2<string, TimeSpan> ourPauseEvaluates;
    private static CustomCommandsProcessor();
    public static void Execute(RdCustomCommand command);
    public static void BeforeLoadProject(ProjectRootElement projectXml);
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.CustomTargetExecutor : object {
    [NotNullAttribute]
private ProjectCollection myProjectCollection;
    public CustomTargetExecutor(ProjectCollection projectCollection);
    public RdExecuteTargetResult Execute(Project project, RdExecuteTargetRequest request);
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.Editing.AddProjectImportAction : object {
    private static ILog ourLogger;
    private Project myProject;
    private RdAddImportContext myContext;
    public AddProjectImportAction(Project project, RdAddImportContext context);
    private static AddProjectImportAction();
    public void Execute();
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.Editing.AddProjectItemAction : object {
    private static ILog ourLogger;
    private EvaluatedProjects myEvaluatedProjects;
    private ProjectEvaluationTracker myEvaluationTracker;
    private RdAddItemContext myContext;
    public AddProjectItemAction(EvaluatedProjects evaluatedProjects, ProjectEvaluationTracker evaluationTracker, RdAddItemContext context);
    private static AddProjectItemAction();
    [CanBeNullAttribute]
public RdProjectItemOrigin Execute();
    private RdProjectItemOrigin AddProjectItem(ProjectRootElement projectElement);
    [CanBeNullAttribute]
private ProjectItemElement GetReferenceItem(ProjectRootElement projectElement);
    [CanBeNullAttribute]
private ProjectItemGroupElement GetSpecificItemGroup(ProjectRootElement projectElement);
    private void AssignMetadata(T projectItem, Func`4<T, string, string, ProjectMetadataElement> setter);
    [CompilerGeneratedAttribute]
private bool <GetReferenceItem>b__7_0(ProjectItemElement x);
    [CompilerGeneratedAttribute]
private bool <GetSpecificItemGroup>b__8_0(ProjectItemGroupElement x);
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.Editing.AddProjectTargetAction : object {
    private static ILog ourLogger;
    private Project myProject;
    private RdAddTargetContext myContext;
    public AddProjectTargetAction(Project project, RdAddTargetContext context);
    private static AddProjectTargetAction();
    public void Execute();
    [CompilerGeneratedAttribute]
private bool <Execute>b__4_0(ProjectTargetElement x);
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.Editing.ExcludeProjectFolderAction : object {
    private static ILog ourLogger;
    private Project myProject;
    private RdFolderContext myContext;
    public ExcludeProjectFolderAction(Project project, RdFolderContext context);
    private static ExcludeProjectFolderAction();
    public void Execute();
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.Editing.GetProjectFilesAction : object {
    private static ILog ourLogger;
    private Project myProject;
    public GetProjectFilesAction(Project project);
    private static GetProjectFilesAction();
    public List`1<RdProjectFileContent> Execute();
    private static void ProcessProjectElement(ProjectRootElement element, List`1<RdProjectFileContent> result);
    private static string WriteProjectFile(ProjectRootElement element);
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.Editing.IncludeProjectFolderAction : object {
    private static ILog ourLogger;
    private Project myProject;
    private RdFolderContext myContext;
    public IncludeProjectFolderAction(Project project, RdFolderContext context);
    private static IncludeProjectFolderAction();
    public void Execute();
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.Editing.RemoveProjectImportAction : object {
    private static ILog ourLogger;
    private Project myProject;
    private RdRemoveImportContext myContext;
    public RemoveProjectImportAction(Project project, RdRemoveImportContext context);
    private static RemoveProjectImportAction();
    public void Execute();
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.Editing.RemoveProjectItemAction : object {
    private static ILog ourLogger;
    private EvaluatedProjects myEvaluatedProjects;
    private RdRemoveItemContext myContext;
    public RemoveProjectItemAction(EvaluatedProjects evaluatedProjects, RdRemoveItemContext context);
    private static RemoveProjectItemAction();
    public void Execute();
    private bool TryRemoveImportedItem(ProjectItem projectItem);
    private void TryRemoveUpdateItem();
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.Editing.RemoveProjectTargetAction : object {
    private static ILog ourLogger;
    private Project myProject;
    private RdRemoveTargetContext myContext;
    public RemoveProjectTargetAction(Project project, RdRemoveTargetContext context);
    private static RemoveProjectTargetAction();
    public void Execute();
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.Editing.SavePropertiesAction : object {
    private Project myProject;
    private RdSavePropertiesContext myContext;
    private static ILog ourLogger;
    public SavePropertiesAction(Project project, RdSavePropertiesContext context);
    private static SavePropertiesAction();
    public void Execute();
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.Editing.UpdateProjectItemAction : object {
    private static ILog ourLogger;
    private EvaluatedProjects myEvaluatedProjects;
    private ProjectEvaluationTracker myEvaluationTracker;
    private RdUpdateItemContext myContext;
    public UpdateProjectItemAction(EvaluatedProjects evaluatedProjects, ProjectEvaluationTracker evaluationTracker, RdUpdateItemContext context);
    private static UpdateProjectItemAction();
    private bool HasMetadataToWrite(ProjectItem projectItem);
    private bool ShouldChangeItemType(ProjectItem projectItem);
    private bool ShouldChangeUnevaluatedInclude(ProjectItem projectItem);
    [CanBeNullAttribute]
public RdProjectItemOrigin Execute();
    private void ModifyExistingItem(ProjectItem projectItem);
    private bool TryUpdateImportedItem(ProjectItem projectItem, RdProjectItemOrigin& origin);
    private bool CreateUpdateItemElementWithMetadata(string itemType, string unevaluatedUpdate);
    private void ProcessMetadata(ProjectItem projectItem, Func`3<string, string, ProjectMetadataElement> onSet, Action`1<string> onRemove);
    private void ProcessMetadata(ProjectItemElement projectItemElement);
    private static ProjectMetadataElement SetMetadata(ProjectItem projectItem, string name, string unevaluatedValue);
    private static ProjectMetadataElement SetMetadata(ProjectItemElement projectItemElement, string name, string unevaluatedValue);
    private static void RemoveMetadata(ProjectItem projectItem, string name);
    private static void RemoveMetadata(ProjectItemElement projectItemElement, string name);
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.EvaluatedProjects : object {
    [NotNullAttribute]
public Project Project;
    [NotNullAttribute]
public Dictionary`2<TargetFramework, Project> ProjectsWithSpecificTargetFramework;
    [NotNullAttribute]
public IReadOnlyCollection`1<Project> AllProjects { get; }
    public EvaluatedProjects(Project project);
    public EvaluatedProjects(Project project, Dictionary`2<TargetFramework, Project> projectsWithSpecificTargetFramework);
    public IReadOnlyCollection`1<Project> get_AllProjects();
    public void MarkDirty();
}
public interface JetBrains.Platform.MsBuildTask.ProjectModel.IProjectCollectionFactory {
    [NotNullAttribute]
public abstract virtual ProjectCollection Create();
}
[ExtensionAttribute]
public static class JetBrains.Platform.MsBuildTask.ProjectModel.LoggingHelper : object {
    public static ILog Logger;
    private static LoggingHelper();
    [ExtensionAttribute]
[NotNullAttribute]
public static RdProjectLoadResult Log(RdProjectLoadResult result);
    private static void Log(RdProject project);
    private static string FormatOrigin(RdProjectItemOrigin origin);
    private static string FormatMetadata(IList`1<RdProjectMetadata> metadata);
}
[ExtensionAttribute]
public static class JetBrains.Platform.MsBuildTask.ProjectModel.NuGetSupport : object {
    [ExtensionAttribute]
public static bool RequireRestore(RdReloadProjectsSession session, List`1<Project> projects);
    private static bool RequireRestore(Project project);
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.ProjectEvaluationTracker : object {
    [NotNullAttribute]
private EvaluatedProjects myEvaluatedProjects;
    [NotNullAttribute]
private HashSet`1<string> myAffectedIncludes;
    public ProjectEvaluationTracker(EvaluatedProjects evaluatedProjects);
    public void Reevaluate();
    private static void ReevaluateProject(Project project);
    public void BeforeWriteAction(String[] evaluatedIncludes);
    public void BeforeReadAction(String[] evaluatedIncludes);
    private void BeforeAction(String[] evaluatedIncludes, Func`2<string, bool> func);
    [CompilerGeneratedAttribute]
private bool <BeforeWriteAction>b__5_0(string evaluatedInclude);
    [CompilerGeneratedAttribute]
private bool <BeforeReadAction>b__6_0(string evaluatedInclude);
}
public abstract class JetBrains.Platform.MsBuildTask.ProjectModel.ProjectItemSearchResult : object {
}
[ExtensionAttribute]
public static class JetBrains.Platform.MsBuildTask.ProjectModel.ProjectItemSearchResultEx : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ProjectItem GetRandomProjectItem(ProjectItemSearchResult searchResult);
}
[ExtensionAttribute]
public static class JetBrains.Platform.MsBuildTask.ProjectModel.ProjectItemUtil : object {
    public static RdModificationSettings ModificationSettings;
    private static Char[] ourItemListChars;
    private static HashSet`1<string> ourPathMetadataNames;
    public static ProjectLoadSettings DefaultEvaluationSettings { get; }
    public static ProjectLoadSettings DefaultIgnoreMissingImportsEvaluationSettings { get; }
    private static ProjectItemUtil();
    public static ProjectLoadSettings get_DefaultEvaluationSettings();
    public static ProjectLoadSettings get_DefaultIgnoreMissingImportsEvaluationSettings();
    [ExtensionAttribute]
public static void AssertClean(Project project);
    [ExtensionAttribute]
[CanBeNullAttribute]
private static ProjectItem FindProjectItemByIdentity(Project project, RdProjectItemIdentity identity);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ProjectItemSearchResult FindProjectItemByIdentity(EvaluatedProjects evaluatedProjects, RdProjectItemIdentity identity);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ProjectItemElement FindProjectItemElementByIdentity(Project project, RdProjectItemIdentity identity);
    private static bool MatchItemByIdentity(ProjectItem projectItem, RdProjectItemIdentity identity, bool allowAbsoluteMismatch, bool ignoreCondition);
    private static bool MatchProjectItemPath(ProjectItem projectItem, RdProjectItemIdentity identity, bool allowAbsoluteMismatch);
    private static bool MatchItemByIdentity(ProjectItemElement projectItemElement, Project project, RdProjectItemIdentity identity, bool ignoreCondition);
    private static bool MatchConditionByIdentity(ProjectItemElement projectItemElement, RdProjectItemIdentity identity, bool ignoreCondition);
    private static bool MatchMetadataByIdentity(ProjectItemElement projectItemElement, RdProjectItemIdentity identity);
    [ExtensionAttribute]
public static string EvaluateValueSafe(Project project, string unevaluatedValue);
    [ExtensionAttribute]
public static void RemoveProjectElement(ProjectElement element);
    [ExtensionAttribute]
public static bool DefinedInTarget(ProjectElement element);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string GetEffectiveCondition(ProjectElement element);
    [ExtensionAttribute]
public static Nullable`1<bool> IsFromWildcard(ProjectItem projectItem);
    [ExtensionAttribute]
public static bool IsWildcardItem(ProjectItem projectItem);
    [ExtensionAttribute]
public static bool IsUnderExistsCondition(ProjectItem projectItem);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ProjectItemDefinition FindProjectItemDefinitionByIdentity(Project project, RdProjectItemDefinitionIdentity identity);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetFileName(ProjectItem projectItem);
    [ExtensionAttribute]
public static bool IsThisProjectItem(ProjectItem projectItem);
    [ExtensionAttribute]
public static bool IsReadonlyItem(ProjectItem projectItem);
    [ExtensionAttribute]
public static bool SupportAltering(Project project);
    [ExtensionAttribute]
public static bool SupportAltering(ProjectItem projectItem);
    [ExtensionAttribute]
public static bool IsFromTopImports(ProjectItem projectItem);
    [ExtensionAttribute]
public static bool IsSdkProject(Project project);
    [ExtensionAttribute]
public static bool IsSharedProject(Project project);
    [ExtensionAttribute]
public static bool IsCppProject(Project project);
    [ExtensionAttribute]
public static bool IsUserProject(ProjectRootElement project, Project mainProject);
    [ExtensionAttribute]
public static bool IsSharedItemsProject(ProjectRootElement projectElement);
    [ExtensionAttribute]
public static bool IsSharedCppItemsProject(ProjectRootElement projectElement);
    [ExtensionAttribute]
public static bool IsSharedProjectItem(ProjectItem projectItem);
    [ExtensionAttribute]
public static bool AllowSmartModifications(Project project);
    [ExtensionAttribute]
public static ProjectItemGroupElement GetOrCreateGroupFor(ProjectRootElement projectRootElement, string itemType);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string PrepareUnevaluatedValue(RdItemMetadata metadata);
    [ExtensionAttribute]
public static bool IsUserProjectProperty(ProjectProperty projectProperty);
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.ProjectItemWithImportChain : object {
    [NotNullAttribute]
public ElementLocation ElementLocation;
    [NotNullAttribute]
public RdProjectItem ProjectItem;
    [NotNullAttribute]
public IList`1<ElementLocation> ImportChain;
    public int ImportChainLength { get; }
    public ProjectItemWithImportChain(RdProjectItem projectItem, ElementLocation elementLocation, IList`1<ElementLocation> importChain);
    public ElementLocation GetLocation(int index);
    public int get_ImportChainLength();
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.ProjectItemWithImportChainComparer : object {
    public static ProjectItemWithImportChainComparer Instance;
    private static ElementLocationComparer ourLocationComparer;
    private static ProjectItemWithImportChainComparer();
    public sealed virtual int Compare(ProjectItemWithImportChain x, ProjectItemWithImportChain y);
}
[ExtensionAttribute]
public static class JetBrains.Platform.MsBuildTask.ProjectModel.ProjectModelBinder : object {
    private static string AvailableItemName;
    private static IList`1<ElementLocation> ourEmptyImportChain;
    private static ProjectModelBinder();
    [ExtensionAttribute]
[NotNullAttribute]
public static RdProject BindRdProject(BuildResultPart part, ReloadProjectScheme scheme);
    [NotNullAttribute]
private static RdProject BindWithRetry(ReloadProjectScheme scheme, Project project, ProjectInstance projectInstance, ProjectInstance projectInstanceAfterBuild, List`1<RdLoadError> targetErrors, List`1<RdLoadError> targetWarnings, IReadOnlyList`1<string> executedTargets);
    [NotNullAttribute]
private static RdProject Bind(ReloadProjectScheme scheme, Project project, ProjectInstance projectInstance, ProjectInstance projectInstanceAfterBuild, List`1<RdLoadError> targetErrors, List`1<RdLoadError> targetWarnings, IReadOnlyList`1<string> executedTargets);
    [ExtensionAttribute]
[NotNullAttribute]
public static RdProject BindRdProjectWithoutBuild(Project project, ReloadProjectScheme scheme, RdDesignTimeBuildStatus rdDesignTimeBuildStatus);
    [ExtensionAttribute]
[NotNullAttribute]
public static RdProjectDescription BindRdProjectDescription(Project project, ReloadProjectScheme scheme);
    [ExtensionAttribute]
[NotNullAttribute]
public static List`1<RdProjectItem> BindRdItems(ICollection`1<ProjectItem> projectItems, ReloadProjectScheme scheme);
    [ExtensionAttribute]
[NotNullAttribute]
public static List`1<RdProjectItem> BindRdItems(ICollection`1<ProjectItemElement> projectItems, Project project, ReloadProjectScheme scheme);
    [ExtensionAttribute]
private static List`1<ElementLocation> GetImportChain(ResolvedImport import, IDictionary`2<ProjectRootElement, ResolvedImport> importElements);
    [ExtensionAttribute]
[NotNullAttribute]
private static List`1<RdProjectItem> BindRdItems(ICollection`1<ProjectItemInstance> projectItemInstances, IList`1<ResolvedImport> imports, ICollection`1<ProjectItem> projectItems, string projectDirectoryPath, ReloadProjectScheme scheme);
    [ExtensionAttribute]
[NotNullAttribute]
public static RdProjectItem BindRdItem(ProjectItem projectItem, ReloadProjectScheme scheme);
    [ExtensionAttribute]
[NotNullAttribute]
public static RdProjectItemWithInfo BindRdItemWithInfo(ProjectItem projectItem, ReloadProjectScheme scheme);
    [ExtensionAttribute]
[NotNullAttribute]
public static RdProjectItemOrigin BindRdItemOrigin(ProjectItem projectItem);
    [ExtensionAttribute]
[NotNullAttribute]
public static RdProjectItemOrigin BindRdItemOrigin(ProjectItemSearchResult projectItemSearchResult);
    [ExtensionAttribute]
[NotNullAttribute]
private static List`1<RdProjectItemDefinition> BindRdItemDefinitions(ICollection`1<ProjectItemDefinition> projectItemDefinitions, ReloadProjectScheme scheme);
    [ExtensionAttribute]
[NotNullAttribute]
private static List`1<RdProjectItemDefinition> BindRdItemDefinitions(ICollection`1<ProjectItemDefinitionInstance> projectItemDefinitionInstances, ReloadProjectScheme scheme);
    [ExtensionAttribute]
[NotNullAttribute]
public static List`1<RdProjectProperty> BindRdProperties(ICollection`1<ProjectProperty> projectProperties, ReloadProjectScheme scheme);
    [ExtensionAttribute]
[NotNullAttribute]
private static List`1<RdProjectProperty> BindRdProperties(ICollection`1<ProjectPropertyInstance> projectPropertyInstances, ReloadProjectScheme scheme);
    [ExtensionAttribute]
private static List`1<RdProjectMetadata> BindRdMetadata(IEnumerable`1<ProjectMetadataInstance> projectMetadataList, ICollection`1<ProjectMetadata> projectMetadata, ReloadProjectScheme scheme);
    [ExtensionAttribute]
public static List`1<RdProjectMetadata> BindRdMetadata(IEnumerable`1<ProjectMetadata> projectMetadata);
    [ExtensionAttribute]
public static List`1<RdProjectMetadata> BindRdMetadata(IEnumerable`1<ProjectMetadata> projectMetadata, ReloadProjectScheme scheme);
    [ExtensionAttribute]
public static RdProjectMetadata BindRdMetadata(ProjectMetadata projectMetadata);
    [ExtensionAttribute]
public static List`1<RdProjectMetadata> BindRdMetadata(IEnumerable`1<ProjectMetadataElement> projectMetadata, Project project, ReloadProjectScheme scheme);
    [ExtensionAttribute]
public static RdProjectMetadata BindRdMetadata(ProjectMetadataElement projectMetadata, Project project);
    [ExtensionAttribute]
[NotNullAttribute]
public static List`1<RdProjectWildcardItem> BindRdWildcardItems(Project project, ProjectInstance projectInstance, IReadOnlyList`1<string> executedTargets);
    [ExtensionAttribute]
public static List`1<RdProjectImport> BindRdImports(IEnumerable`1<ResolvedImport> projectImports, ProjectInstance projectInstance);
    [ExtensionAttribute]
[NotNullAttribute]
public static List`1<RdProjectTarget> BindRdTargets(Project project);
    [NotNullAttribute]
public static RdLoadError CreateError(RdUserMessage error);
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.ProjectModelEventsConsumer : object {
    private static int DefaultCapacity;
    private RdReloadProjectsSession mySession;
    private RdProjectId myProjectId;
    private ProjectEventsMatcher myMatcher;
    public List`1<RdLoadError> BuildErrors;
    public List`1<RdLoadError> BuildWarnings;
    private Dictionary`2<ItemId, string> myTargets;
    private Dictionary`2<ItemId, string> myTasks;
    private List`1<string> myExecutedTargets;
    public IReadOnlyList`1<string> ExecutedTargets { get; }
    public ProjectModelEventsConsumer(RdReloadProjectsSession session, RdProjectId projectId, ProjectEventsMatcher matcher);
    public IReadOnlyList`1<string> get_ExecutedTargets();
    public sealed virtual void Consume(BuildEventArgs args);
    private void StoreName(BuildEventArgs args, Dictionary`2<ItemId, string> storage, Func`2<BuildEventContext, int> idFunc, Func`2<T, string> nameFunc);
    private void HandleError(BuildEventArgs args, List`1<RdLoadError> storage, Func`2<T, string> fileFunc, Func`2<T, int> lineFunc, Func`2<T, int> columnFunc, Func`2<T, string> codeFunc);
    private void SendProjectStart();
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.ProjectModelEventsConsumerFactory : object {
    private RdReloadProjectsSession mySession;
    public ProjectModelEventsConsumerFactory(RdReloadProjectsSession session);
    public sealed virtual ProjectModelEventsConsumer Create(RdProjectId context, ProjectEventsMatcher matcher, string targetFrameworkId);
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.ProjectModelSessionHost : MsBuildSession {
    private Lifetime myLifetime;
    private ProjectPropertiesCalculator myProjectPropertiesCalculator;
    private ILog myLogger;
    private IViewableMap`2<RdProjectId, RdProjectOperations> myOperationsMap;
    private Dictionary`2<RdProjectId, ProjectOperations> myOperations;
    private ProjectCollection myProjectCollection;
    private RdSimpleDispatcher myProjectResultDispatcher;
    private CustomTargetExecutor myCustomTargetExecutor;
    public ProjectModelSessionHost(Lifetime lifetime, RdProjectModelSession protocolSession);
    private RdProjectUnloadResult UnloadProject(RdProjectId id);
    private void ReloadProjects(Lifetime sessionLifetime, RdReloadProjectsSession session);
    private void ReloadProject(RdReloadProjectsSession session, BuildQueue`2<ProjectModelEventsConsumer, RdProjectId> queue, RdReloadProjectRequest request, TimeMeasure timeMeasure, ProjectFactory projectFactory, ReloadProjectScheme scheme);
    private static RdLoadError CreateErrorFrom(InvalidProjectFileException ex);
    private void OnReloadProjectFailed(RdReloadProjectsSession session, RdProjectId id, RdUserMessage error);
    private void OnReloadProjectFailed(RdReloadProjectsSession session, RdProjectId id, RdLoadError error);
    private void OnReloadProjectWithoutBuild(RdReloadProjectsSession session, ReloadProjectScheme scheme, RdProjectId id, Project project, List`1<Project> projects, RdLoadError loadingError, RdDesignTimeBuildStatus designTimeBuildStatus);
    private bool HandleMissingImports(ProjectRootElement projectXml, Dictionary`2<string, string> properties, ProjectFactory projectFactory, Project& project);
    private Project DoLoadProject(ProjectRootElement projectXml, Dictionary`2<string, string> properties, ProjectLoadSettings settings, ProjectFactory projectFactory);
    private void SendProjectResult(RdReloadProjectsSession session, RdProjectLoadResult result);
    private bool DoUnloadProject(RdProjectId id, RdLoadError& errorMessage);
    private void DoUnloadProjectFromProjectCollection(Project project);
    private void RegisterProject(RdProjectId id, EvaluatedProjects evaluatedProjects);
    private void HandleLoadProjectFailed(string projectFile, ProjectRootElement projectRootElement, Exception exception);
    private void HandleLoadProjectFailed(string projectFile, ProjectRootElement projectRootElement, IEnumerable`1<Exception> exceptions);
    private RdCalculatePropertiesResult CalculateProjectProperties(RdCalculatePropertiesContext context);
    private RdCalculateConfigurationPropertiesResult CalculateConfigurationProperties(RdCalculateConfigurationPropertiesContext context);
    private RdProjectCollectionDump DumpState(Unit _);
    private Unit ExecuteCustomCommand(RdCustomCommand command);
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_3();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__8_0(Lifetime sessionLifetime, RdReloadProjectsSessionWrapper sessionWrapper);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__8_1(Lifetime sessionLifetime, RdEvaluateProjectPropertiesSession session);
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.ProjectOperations : object {
    [NotNullAttribute]
public EvaluatedProjects EvaluatedProjects;
    [NotNullAttribute]
private LifetimeDefinition myLifetimeDefinition;
    [NotNullAttribute]
private ProjectEvaluationTracker myEvaluationTracker;
    [NotNullAttribute]
private CustomTargetExecutor myCustomTargetExecutor;
    [NotNullAttribute]
public Project Project { get; }
    public ProjectOperations(Lifetime lifetime, RdProjectOperations model, EvaluatedProjects evaluatedProjects, CustomTargetExecutor customTargetExecutor);
    public Project get_Project();
    public void Terminate();
    private List`1<RdProjectItem> GetItemsHandler(Unit _);
    private List`1<RdProjectTarget> GetTargetsHandler(Unit _);
    private RdProjectItemWithInfo GetProjectItemHandler(RdGetItemContext context);
    private RdProjectItemDefinition GetProjectItemDefinitionHandler(RdProjectItemDefinitionIdentity identity);
    private List`1<RdTargetFrameworkValue> GetProjectPropertyHandler(string propertyName);
    private List`1<RdProjectFileContent> GetProjectFilesHandler(Unit _);
    private List`1<RdProjectItem> GetOwnProjectItemsIgnoringConditionHandler(Unit _);
    private RdProjectItemOrigin AddItemHandler(RdAddItemContext context);
    private RdProjectItemOrigin UpdateItemHandler(RdUpdateItemContext context);
    private Unit RemoveItemHandler(RdRemoveItemContext context);
    private Unit IncludeFolderHandler(RdFolderContext context);
    private Unit ExcludeFolderHandler(RdFolderContext context);
    private Unit AddImportHandler(RdAddImportContext context);
    private Unit RemoveImportHandler(RdRemoveImportContext context);
    private Unit AddTargetHandler(RdAddTargetContext context);
    private Unit RemoveTargetHandler(RdRemoveTargetContext context);
    private void EditTargetSessionHandler(RdEditTargetSession session);
    private Unit ModifyConfigurationsHandler(RdModifyConfigurationsContext context);
    private Unit SavePropertiesHandler(RdSavePropertiesContext context);
    private Unit ReevaluateHandler(Unit _);
    private RdExecuteTargetResult ExecuteTargetHandler(RdExecuteTargetRequest request);
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.ProjectTargetOperations : object {
    private static ILog ourLogger;
    public ProjectTargetElement TargetElement;
    public string TargetName;
    public ProjectTargetOperations(ProjectTargetElement targetElement, RdEditTargetSession session);
    private static ProjectTargetOperations();
    private List`1<RdProjectTargetProperty> GetPropertiesHandler(Unit _);
    private List`1<RdProjectTargetTask> GetTasksHandler(Unit _);
    private static RdProjectTargetTask CreareRdTask(ProjectTaskElement taskElement);
    private Unit SetPropertyHandler(RdSetTargetPropertyContext context);
    private Unit AddTaskHandler(RdAddTaskContext context);
    private Unit RemoveTaskHandler(RdRemoveTaskContext context);
    private static bool CompareTask(ProjectTaskElement task, string name, string condition);
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.Properties.ProjectPropertiesCalculator : object {
    private ILog myLogger;
    public RdCalculatePropertiesResult Calculate(RdCalculatePropertiesContext context);
    public RdCalculateConfigurationPropertiesResult CalculateConfiguration(RdCalculateConfigurationPropertiesContext context);
    private static bool ReflexiveCondition(ProjectPropertyElement property);
    private static List`1<RdCalculateProperty> BindProperties(Project project, bool onlyActiveValue);
    private static List`1<RdCalculateItem> BindItems(Project project, bool onlyActiveValue);
    private static List`1<RdCalculateItemDefinition> BindItemDefinitions(Project project, bool onlyActiveValue);
    private static RdCalculateMetadata CreateCalculateMetadata(ProjectMetadata m, bool onlyActiveValue);
    private static ProjectProperty GetPropertyFromProject(ProjectProperty property);
    private static ProjectMetadata GetMetadataFromProject(ProjectMetadata metadata);
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.RegularProjectItemSearchResult : ProjectItemSearchResult {
    [CompilerGeneratedAttribute]
private ProjectItem <ProjectItem>k__BackingField;
    [NotNullAttribute]
public ProjectItem ProjectItem { get; }
    public RegularProjectItemSearchResult(ProjectItem projectItem);
    [CompilerGeneratedAttribute]
public ProjectItem get_ProjectItem();
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.ReloadProjectScheme : object {
    [CanBeNullAttribute]
private HashSet`1<string> myProperties;
    [CanBeNullAttribute]
private HashSet`1<string> myItems;
    [CanBeNullAttribute]
private HashSet`1<string> myMetadata;
    public ReloadProjectScheme(RdReloadProjectScheme protocolScheme);
    public bool FilterProperty(string propertyName);
    public bool FilterItem(string itemType, HashSet`1<string> availableItemNames, bool thisProjectFile);
    public bool FilterItemDefinition(string itemType);
    public bool FilterItemMetadata(string metadata);
}
public class JetBrains.Platform.MsBuildTask.ProjectModel.SpecificProjectItemSearchResult : ProjectItemSearchResult {
    [CompilerGeneratedAttribute]
private Dictionary`2<TargetFramework, ProjectItem> <ProjectItems>k__BackingField;
    [NotNullAttribute]
public Dictionary`2<TargetFramework, ProjectItem> ProjectItems { get; }
    [CanBeNullAttribute]
public ProjectItem RandomProjectItem { get; }
    public SpecificProjectItemSearchResult(Dictionary`2<TargetFramework, ProjectItem> projectItems);
    [CompilerGeneratedAttribute]
public Dictionary`2<TargetFramework, ProjectItem> get_ProjectItems();
    public ProjectItem get_RandomProjectItem();
}
[ExtensionAttribute]
public static class JetBrains.Platform.MsBuildTask.ProjectModel.TaskEx : object {
    [ExtensionAttribute]
public static void SetAndLogErrors(IRdEndpoint`2<TReq, TRes> call, Func`2<TReq, TRes> handler, ILog logger);
}
public class JetBrains.Platform.MsBuildTask.ProjectTemplates.ProjectTemplatesSessionHost : MsBuildSession {
    private HashSet`1<string> myDeployItemNames;
    public ProjectTemplatesSessionHost(RdProjectTemplatesSession protocolSession);
    private RdProjectParameters LoadProjectHandler(string projectFile);
    private bool DeployMarkItem(ProjectItemInstance item);
}
[ExtensionAttribute]
public static class JetBrains.Platform.MsBuildTask.Utils.AssemblyUtil : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string GetContainingDirectory(Assembly self);
}
public static class JetBrains.Platform.MsBuildTask.Utils.BinaryLoggerUtil : object {
    private static string BinaryLoggerFqn;
    [CanBeNullAttribute]
public static ILogger CreateBinaryLogger(MsBuildPath fileLoggerPath);
}
public class JetBrains.Platform.MsBuildTask.Utils.MemoryUtil : object {
    private static string AssemblyName;
    private static string EntryPointName;
    private static ILog ourLogger;
    private static Assembly ourMemoryUnitAssembly;
    private static MemoryUtil();
    public static List`1<long> Handler(List`1<string> arg);
    [CanBeNullAttribute]
private static Assembly GetAssembly();
}
[ExtensionAttribute]
public static class JetBrains.Platform.MsBuildTask.Utils.MsBuildConditionUtils : object {
    [ExtensionAttribute]
public static bool EvaluateParentConditions(ProjectInstance projectInstance, ProjectItemElement projectItemElement);
    [ExtensionAttribute]
public static bool EvaluateConditionSafe(ProjectInstance projectInstance, string condition);
    [ExtensionAttribute]
public static string ExpandStringSafe(ProjectInstance projectInstance, string value);
    public static bool CompareConditions(string x, string y);
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
public static T TryGetSingleItem(IEnumerable`1<T> enumerable, T defaultValue);
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
[CollectionAccessAttribute("1")]
public static T TryGetSingleItem(IList`1<T> list);
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
public static T TryGetSingleItem(T[] array);
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
public static T TryGetSingleItem(IEnumerable`1<T> enumerable, Func`2<T, bool> predicate);
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
public static T TryGetSingleItem(IEnumerable`1<T> enumerable, TContext context, Func`3<T, TContext, bool> predicate);
}
[ExtensionAttribute]
public static class JetBrains.Platform.MsBuildTask.Utils.MsBuildItemsUtil : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null;notnull=>notnull")]
public static string ToIncludeValue(string include);
    [NotNullAttribute]
public static IReadOnlyCollection`1<string> SplitPropertyValue(string value);
    [ExtensionAttribute]
[NotNullAttribute]
public static List`1<TItem> GetOrCreate(Dictionary`2<T, List`1<TItem>> dictionary, T key);
    [ExtensionAttribute]
[NotNullAttribute]
public static Dictionary`2<TKey, TValue> GetOrCreate(Dictionary`2<T, Dictionary`2<TKey, TValue>> dictionary, T key);
}
public class JetBrains.Platform.MsBuildTask.Utils.MsBuildPath : object {
    private string myPath;
    public string FullPath { get; }
    public string Directory { get; }
    public bool IsEmpty { get; }
    public string Name { get; }
    public string NameWithoutExtension { get; }
    public string ExtensionWithDot { get; }
    public bool ExistsFile { get; }
    public bool ExistsDirectory { get; }
    public DateTime FileModificationTimeUtc { get; }
    public MsBuildPath(string path);
    public MsBuildPath(String[] pathParts);
    public string get_FullPath();
    public string get_Directory();
    public bool get_IsEmpty();
    public string get_Name();
    public string get_NameWithoutExtension();
    public string get_ExtensionWithDot();
    public bool get_ExistsFile();
    public bool get_ExistsDirectory();
    public DateTime get_FileModificationTimeUtc();
    public MsBuildPath EnsureAbsolute(string basePath);
    public MsBuildPath EnsureAbsolute(MsBuildPath basePath);
    public string Combine(string otherPath);
    public sealed virtual bool Equals(MsBuildPath other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public abstract class JetBrains.Platform.MsBuildTask.Utils.MsBuildProjectFilesVisitor : object {
    public virtual void Visit(Project project);
    protected abstract virtual void VisitInternal(ProjectRootElement element, bool isImported);
}
public class JetBrains.Platform.MsBuildTask.Utils.MsBuildProjectWildcardSearcher : object {
    private static Char[] ourWildcardChars;
    private static Char[] ourSeparatorChars;
    [NotNullAttribute]
private Project myProject;
    [NotNullAttribute]
private Dictionary`2<string, List`1<ProjectWildcardItemValue>> myModels;
    [NotNullAttribute]
private Dictionary`2<string, List`1<ProjectTargetElement>> myTargetDeclarations;
    [NotNullAttribute]
private Dictionary`2<ProjectRootElement, Dictionary`2<ProjectImportElement, List`1<ProjectRootElement>>> myImportsByProject;
    [CanBeNullAttribute]
private ProjectInstance myProjectInstance;
    [CompilerGeneratedAttribute]
private List`1<RdProjectWildcardItem> <FoundWildcardItems>k__BackingField;
    [NotNullAttribute]
public List`1<RdProjectWildcardItem> FoundWildcardItems { get; }
    public MsBuildProjectWildcardSearcher(Project project, ProjectInstance projectInstance, IReadOnlyList`1<string> executedTargets);
    private static MsBuildProjectWildcardSearcher();
    [CompilerGeneratedAttribute]
public List`1<RdProjectWildcardItem> get_FoundWildcardItems();
    private void ProcessProject(ProjectRootElement projectElement);
    private void IterateProjectElements(ProjectElement element, RdProjectItemOrigin origin, Dictionary`2<ProjectImportElement, List`1<ProjectRootElement>> currentImportMap);
    private void ProcessProjectItemElement(ProjectItemElement projectItemElement, RdProjectItemOrigin origin);
    public static bool HasWildcardSymbols(string value);
    public static string ToWildcardFolder(string folder);
    public static string ToFolderWithTrailingSlash(string folder);
    [CompilerGeneratedAttribute]
private void <ProcessProject>g__HandleSpecialImports|11_0(Func`3<MsBuildAdapter, ProjectImportElement, bool> func, <>c__DisplayClass11_0& );
}
public class JetBrains.Platform.MsBuildTask.Utils.MsBuildRuntime : object {
    public static bool IsRunningOnMono;
    private static MsBuildRuntime();
}
public static class JetBrains.Platform.MsBuildTask.Utils.MsBuildThreading : object {
    private static int ourDispatcherThreadId;
    private static IScheduler ourDispatcher;
    public static void Init(IScheduler dispatcher);
    public static void AssertMainThread();
    public static void AssertBackgroundThread();
    public static void AssertAnyThread();
    public static void Queue(Action action);
}
[ExtensionAttribute]
public static class JetBrains.Platform.MsBuildTask.Utils.PathSeparatorUtil : object {
    public static char ProjectFileSeparator;
    public static char OperationSystemSeparator;
    public static IEqualityComparer`1<string> IgnorePathSeparatorComparer;
    private static PathSeparatorUtil();
    [ExtensionAttribute]
public static string EnsureProjectFileSeparators(string value);
    [ExtensionAttribute]
public static string EnsureOperationSystemSeparators(string value);
    [ExtensionAttribute]
public static string GetName(Project project);
    public static bool Equals(string x, string y);
    public static bool NotEquals(string x, string y);
}
public static class JetBrains.Platform.MsBuildTask.Utils.ProjectTypeGuidGuesser : object {
    private static string SharedProjectTypeGuid;
    private static string FSharpProjectTypeGuid;
    private static string CppProjectTypeGuid;
    private static string VBProjectTypeGuid;
    private static string CSharpProjectTypeGuid;
    private static string InstallShieldProjectTypeGuid;
    private static string NodeJsProjectTypeGuid;
    private static string SqlServerDatabaseProjectGuid;
    private static string EcmaScriptProjectGuid;
    [NotNullAttribute]
public static string GetCorrectGuid(ProjectInstance projectInstance);
    [CanBeNullAttribute]
public static string GetWellKnownProjectTypeGuid(string projectFile);
}
[ExtensionAttribute]
public static class JetBrains.Platform.MsBuildTask.Utils.Reflection : object {
    [ExtensionAttribute]
public static Assembly GetAssembly(Type type);
    [ExtensionAttribute]
public static void SetDynamicFieldOrProperty(object thіs, string membername, object value);
    [ExtensionAttribute]
public static object GetFieldOrPropertyValue(object host, string fieldName);
    [ExtensionAttribute]
public static object InvokeDynamicMethod(object reflectedObject, string sMethodName, Object[] args);
    private static bool CheckParameters(ParameterInfo[] parameters, Type[] argsTypes);
}
public static class JetBrains.Platform.MsBuildTask.Utils.RetryUtil : object {
    public static T DoWithRetry(string id, Func`1<T> func);
}
public class JetBrains.Platform.MsBuildTask.Utils.TargetFramework : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NugetShortName>k__BackingField;
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
private string NugetShortName { get; }
    public TargetFramework(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private string get_NugetShortName();
    [CanBeNullAttribute]
public static TargetFramework TryCreate(string name);
    public sealed virtual bool Equals(TargetFramework other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Platform.MsBuildTask.Utils.TargetFrameworksUtil : object {
    public static string TargetFrameworksProperty;
    public static string TargetFrameworkProperty;
    public static string BuildTarget;
    public static String[] DispatchTargets;
    private static TargetFrameworksUtil();
    [ExtensionAttribute]
[NotNullAttribute]
public static List`1<TargetFramework> GetMultipleTargetFrameworksToDispatch(Project project);
    [ExtensionAttribute]
[NotNullAttribute]
public static Dictionary`2<string, string> WithTargetFramework(Dictionary`2<string, string> properties, TargetFramework targetFramework);
    [ExtensionAttribute]
[NotNullAttribute]
public static List`1<string> AsStringList(List`1<TargetFramework> targetFrameworks);
}
public static class JetBrains.Platform.MsBuildTask.Utils.TopImportsFinder : object {
    [NotNullAttribute]
public static HashSet`1<ProjectRootElement> Collect(Project project);
    private static bool Contains(ProjectRootElement current, HashSet`1<ProjectRootElement> result, Dictionary`2<ProjectRootElement, HashSet`1<ProjectRootElement>> mapping);
    private static bool IsTopImport(ProjectImportElement projectImportElement);
    private static bool HasPropertyGroupBefore(ProjectImportElement projectImportElement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.Platform.MsBuildTask.Utils.UserMessageUtil : object {
    [ExtensionAttribute]
public static string ToPresentableText(RdUserMessage message);
    public static RdUserMessage FromCode(RdUserMessageCode code);
    public static RdUserMessage FromCode(RdUserMessageCode code, string argument);
    public static RdUserMessage FromException(Exception exception);
    public static RdUserMessage FromMsBuild(BuildEventArgs args);
    public static RdUserMessage Internal(string message);
}
public interface JetBrains.ProjectModel.Features.SolutionBuilders.IBuildEvent {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
