[ShellComponentAttribute("10")]
public class JetBrains.TextControl.Actions.RestoreCaretOnSelectionElimination : object {
    private ILogger myLogger;
    private IDictionary`2<ITextControl, TextControlSelectionData> myTextControlData;
    public RestoreCaretOnSelectionElimination(Lifetime lifetime, ITextControlManager textControlManager, IActionManager actionManager, ILogger logger);
    private void OnTextControlSelectionChanged(ITextControl textControl, IEquatableList`1<TextControlPosRange> ranges);
    private void OnTextControlRemoved(ITextControl textControl);
}
[RdTypeAttribute]
public class JetBrains.TextControl.Actions.SelectionUndoableActionRecord : object {
    [CompilerGeneratedAttribute]
private RunningTextControlId <TextControlId>k__BackingField;
    [CompilerGeneratedAttribute]
private FrugalLocalList`1<DocOffsetAndVirtualRange> <From>k__BackingField;
    [CompilerGeneratedAttribute]
private FrugalLocalList`1<DocOffsetAndVirtualRange> <To>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public RunningTextControlId TextControlId { get; public set; }
    public FrugalLocalList`1<DocOffsetAndVirtualRange> From { get; public set; }
    public FrugalLocalList`1<DocOffsetAndVirtualRange> To { get; public set; }
    public RunningDocumentId DocumentId { get; }
    public SelectionUndoableActionRecord(RunningTextControlId TextControlId, FrugalLocalList`1<DocOffsetAndVirtualRange> From, FrugalLocalList`1<DocOffsetAndVirtualRange> To);
    public SelectionUndoableActionRecord(RunningTextControlId textControlId, DocOffset from, DocOffset to);
    public SelectionUndoableActionRecord(RunningTextControlId textControlId, DocOffsetAndVirtual from, DocOffsetAndVirtual to);
    [NullableContextAttribute("1")]
public SelectionUndoableActionRecord(RunningTextControlId textControlId, IEnumerable`1<DocOffsetAndVirtualRange> from, IEnumerable`1<DocOffsetAndVirtualRange> to);
    [CompilerGeneratedAttribute]
protected SelectionUndoableActionRecord(SelectionUndoableActionRecord original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public RunningTextControlId get_TextControlId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TextControlId(RunningTextControlId value);
    [CompilerGeneratedAttribute]
public FrugalLocalList`1<DocOffsetAndVirtualRange> get_From();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_From(FrugalLocalList`1<DocOffsetAndVirtualRange> value);
    [CompilerGeneratedAttribute]
public FrugalLocalList`1<DocOffsetAndVirtualRange> get_To();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_To(FrugalLocalList`1<DocOffsetAndVirtualRange> value);
    public static SelectionUndoableActionRecord CreateMoveOnlyOnUndo(RunningTextControlId textControlId, FrugalLocalList`1<DocOffsetAndVirtualRange> position);
    [NullableContextAttribute("1")]
public static SelectionUndoableActionRecord CreateMoveOnlyOnUndo(RunningTextControlId textControlId, DocOffset position);
    [NullableContextAttribute("1")]
public sealed virtual IUndoableActionRecord Reverse();
    public sealed virtual RunningDocumentId get_DocumentId();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SelectionUndoableActionRecord left, SelectionUndoableActionRecord right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SelectionUndoableActionRecord left, SelectionUndoableActionRecord right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(SelectionUndoableActionRecord other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual SelectionUndoableActionRecord <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(RunningTextControlId& TextControlId, FrugalLocalList`1& From, FrugalLocalList`1& To);
}
[ActionAttribute("TextControl.Backspace", "TextControl.Backspace")]
public class JetBrains.TextControl.Actions.TextControl_Backspace : TextControlActionBase {
}
[ActionAttribute("TextControl.Copy", "JetBrains.TextControl.Resources.Strings", "Copy_Text")]
public class JetBrains.TextControl.Actions.TextControl_Copy : TextControlActionBase {
}
[ActionAttribute("TextControl.Cut", "JetBrains.TextControl.Resources.Strings", "Cut_Text")]
public class JetBrains.TextControl.Actions.TextControl_Cut : TextControlActionBase {
}
[ActionAttribute("TextControl.Delete", "TextControl.Delete")]
public class JetBrains.TextControl.Actions.TextControl_Delete : TextControlActionBase {
}
[ActionAttribute("TextControl.DocumentEnd", "TextControl.DocumentEnd")]
public class JetBrains.TextControl.Actions.TextControl_DocumentEnd : TextControlActionBase {
}
[ActionAttribute("TextControl.DocumentEnd.Selection", "TextControl.DocumentEnd.Selection")]
public class JetBrains.TextControl.Actions.TextControl_DocumentEnd_Selection : TextControlActionBase {
}
[ActionAttribute("TextControl.DocumentHome", "TextControl.DocumentHome")]
public class JetBrains.TextControl.Actions.TextControl_DocumentHome : TextControlActionBase {
}
[ActionAttribute("TextControl.DocumentHome.Selection", "TextControl.DocumentHome.Selection")]
public class JetBrains.TextControl.Actions.TextControl_DocumentHome_Selection : TextControlActionBase {
}
[ActionAttribute("TextControl.Down", "TextControl.Down")]
public class JetBrains.TextControl.Actions.TextControl_Down : TextControlActionBase {
}
[ActionAttribute("TextControl.Down.Selection", "TextControl.Down.Selection")]
public class JetBrains.TextControl.Actions.TextControl_Down_Selection : TextControlActionBase {
}
[ActionAttribute("TextControl.End", "TextControl.End")]
public class JetBrains.TextControl.Actions.TextControl_End : TextControlActionBase {
}
[ActionAttribute("TextControl.End.Selection", "TextControl.End.Selection")]
public class JetBrains.TextControl.Actions.TextControl_End_Selection : TextControlActionBase {
}
[ActionAttribute("TextControl.Enter", "TextControl.Enter")]
public class JetBrains.TextControl.Actions.TextControl_Enter : TextControlActionBase {
}
[ActionAttribute("TextControl.Home", "TextControl.Home")]
public class JetBrains.TextControl.Actions.TextControl_Home : TextControlActionBase {
}
[ActionAttribute("TextControl.Home.Selection", "TextControl.Home.Selection")]
public class JetBrains.TextControl.Actions.TextControl_Home_Selection : TextControlActionBase {
}
[ActionAttribute("TextControl.Left", "TextControl.Left")]
public class JetBrains.TextControl.Actions.TextControl_Left : TextControlActionBase {
}
[ActionAttribute("TextControl.Left.Selection", "TextControl.Left.Selection")]
public class JetBrains.TextControl.Actions.TextControl_Left_Selection : TextControlActionBase {
}
[ActionAttribute("TextControl.NextWord", "TextControl.NextWord")]
public class JetBrains.TextControl.Actions.TextControl_NextWord : TextControlActionBase {
}
[ActionAttribute("TextControl.NextWord.Selection", "TextControl.NextWord.Selection")]
public class JetBrains.TextControl.Actions.TextControl_NextWord_Selection : TextControlActionBase {
}
[ActionAttribute("TextControl.PageDown", "TextControl.PageDown")]
public class JetBrains.TextControl.Actions.TextControl_PageDown : TextControlActionBase {
}
[ActionAttribute("TextControl.PageDown.Selection", "TextControl.PageDown.Selection")]
public class JetBrains.TextControl.Actions.TextControl_PageDown_Selection : TextControlActionBase {
}
[ActionAttribute("TextControl.PageUp", "TextControl.PageUp")]
public class JetBrains.TextControl.Actions.TextControl_PageUp : TextControlActionBase {
}
[ActionAttribute("TextControl.PageUp.Selection", "TextControl.PageUp.Selection")]
public class JetBrains.TextControl.Actions.TextControl_PageUp_Selection : TextControlActionBase {
}
[ActionAttribute("TextControl.Paste", "JetBrains.TextControl.Resources.Strings", "Paste_Text")]
public class JetBrains.TextControl.Actions.TextControl_Paste : TextControlActionBase {
}
[ActionAttribute("TextControl.PreviousWord", "TextControl.PreviousWord")]
public class JetBrains.TextControl.Actions.TextControl_PrevWord : TextControlActionBase {
}
[ActionAttribute("TextControl.PreviousWord.Selection", "TextControl.PreviousWord.Selection")]
public class JetBrains.TextControl.Actions.TextControl_PrevWord_Selection : TextControlActionBase {
}
[ActionAttribute("TextControl.Redo", "JetBrains.TextControl.Resources.Strings", "Redo_Text")]
public class JetBrains.TextControl.Actions.TextControl_Redo : TextControlActionBase {
}
[ActionAttribute("TextControl.Right", "TextControl.Right")]
public class JetBrains.TextControl.Actions.TextControl_Right : TextControlActionBase {
}
[ActionAttribute("TextControl.Right.Selection", "TextControl.Right.Selection")]
public class JetBrains.TextControl.Actions.TextControl_Right_Selection : TextControlActionBase {
}
[ActionAttribute("TextControl.SelectAll", "JetBrains.TextControl.Resources.Strings", "SelectAll_Text")]
public class JetBrains.TextControl.Actions.TextControl_SelectAll : TextControlActionBase {
}
[ActionAttribute("TextControl.Tab", "TextControl.Tab")]
public class JetBrains.TextControl.Actions.TextControl_Tab : TextControlActionBase {
}
[ActionAttribute("TextControl.TabLeft", "TextControl.TabLeft")]
public class JetBrains.TextControl.Actions.TextControl_TabLeft : TextControlActionBase {
}
[ActionAttribute("TextControl.Undo", "JetBrains.TextControl.Resources.Strings", "Undo_Text")]
public class JetBrains.TextControl.Actions.TextControl_Undo : TextControlActionBase {
}
[ActionAttribute("TextControl.Up", "TextControl.Up")]
public class JetBrains.TextControl.Actions.TextControl_Up : TextControlActionBase {
}
[ActionAttribute("TextControl.Up.Selection", "TextControl.Up.Selection")]
public class JetBrains.TextControl.Actions.TextControl_Up_Selection : TextControlActionBase {
}
[ActionAttribute("TextControl.WordDeleteToEnd", "Delete text from the caret to the end of the word")]
public class JetBrains.TextControl.Actions.TextControl_WordDeleteToEnd : TextControlActionBase {
}
[ActionAttribute("TextControl.WordDeleteToStart", "Delete text from start of word to the caret")]
public class JetBrains.TextControl.Actions.TextControl_WordDeleteToStart : TextControlActionBase {
}
public class JetBrains.TextControl.Actions.TextControlActionBase : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
[ShellComponentAttribute("0")]
public class JetBrains.TextControl.Actions.TextControlActionsExecutor : object {
    private Registrar myFinalHandlerRegistrar;
    public TextControlActionsExecutor(Registrar finalHandlerRegistrar);
    public virtual bool IsAvailable(TextControlActionBase action, IDataContext context);
    public virtual bool TryExecute(TextControlActionBase action, IDataContext context);
    [CanBeNullAttribute]
private Action GetActionExecute(TextControlActionBase action, IDataContext context);
}
public class JetBrains.TextControl.Actions.TextControlActionsFinalHandler : object {
    [NotNullAttribute]
public static Key`1<TextControlActionsFinalHandler> TextControlActionsFinalHandlerUserDataKey;
    [NotNullAttribute]
public QueryExecuteDelegate QueryExecute;
    public TextControlActionsFinalHandler(QueryExecuteDelegate queryExecute);
    private static TextControlActionsFinalHandler();
}
[ShellComponentAttribute("16")]
public class JetBrains.TextControl.Actions.TextControlShortcutScopeMonitor : ShortcutScopeMonitor {
    public TextControlShortcutScopeMonitor(Lifetime lifetime, TextControlProperties textControlProps);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0(PropertyChangedEventArgs`1<ITextControl> args);
}
public class JetBrains.TextControl.AnonymousTextControl : object {
    [NotNullAttribute]
private IDocument myDocument;
    private bool myIsTmpUnsupportedReportPixelCoordsReportedError;
    private static bool myIsTmpUnsupportedReportPixelCoordsReportedWarning;
    private static bool myIsTmpUnsupportedReportViewBufferCoords;
    private LocalLazy`2<IProperty`1<ITextControlPos>, AnonymousTextControl> myLazyCaretPosition;
    private LocalLazy`2<IProperty`1<bool>, AnonymousTextControl> myLazyIsFocused;
    private LocalLazy`2<IProperty`1<bool>, AnonymousTextControl> myLazyIsVisibleOnScreen;
    private LocalLazy`2<IProperty`1<TextControlMouseEventArgs>, AnonymousTextControl> myLazyMouseAndModifierKeys;
    private LocalLazy`2<ITextControlPopupWindowContextFactory, AnonymousTextControl> myLazyPopupWindowContextFactory;
    private LocalLazy`2<IProperty`1<IEquatableList`1<TextControlPosRange>>, AnonymousTextControl> myLazySelectionRanges;
    private FrugalLocalLazy`1<ConcurrentUserDataHolder> myLazyUserDataHolder;
    private LocalLazy`2<IProperty`1<TextControlPosRange>, AnonymousTextControl> myLazyViewportRange;
    private LocalLazy`2<ISignal`1<EventArgs`1<ITextControl>>, AnonymousTextControl> myLazyWindowKeyboard;
    private LocalLazy`2<ISignal`1<TextControlMouseEventArgs>, AnonymousTextControl> myLazyWindowMouseDown;
    private LocalLazy`2<ISignal`1<TextControlMouseEventArgs>, AnonymousTextControl> myLazyWindowMouseMove;
    private LocalLazy`2<ISignal`1<TextControlMouseEventArgs>, AnonymousTextControl> myLazyWindowMouseUp;
    private Lifetime myLifetime;
    [NotNullAttribute]
private ILogger myLogger;
    private ScrollsTextControlAfterCaretMove myScrollsTextControlAfterCaretMove;
    [NotNullAttribute]
private TransportTextControl myTransport;
    [CompilerGeneratedAttribute]
private RunningTextControlId <Id>k__BackingField;
    public ISignal`1<OutEventArgs`1<ITextControlPopupWindowContextFactory>> PopupWindowContextFactoryRequested;
    public RunningTextControlId Id { get; }
    private ITextControlCaret JetBrains.TextControl.ITextControl.Caret { get; }
    private IProperty`1<ImmutableArray`1<TextRange>> JetBrains.TextControl.ITextControlScrolling.CollapsedViewportRanges { get; }
    private ITextControlCoords JetBrains.TextControl.ITextControl.Coords { get; }
    private IDocument JetBrains.TextControl.ITextControl.Document { get; }
    private ErrorStripeTransport JetBrains.TextControl.ITextControl.ErrorStripe { get; }
    private WindowFrame JetBrains.TextControl.ITextControlWindow.Frame { get; }
    private IProperty`1<bool> JetBrains.TextControl.ITextControlWindow.IsFocused { get; }
    private IProperty`1<bool> JetBrains.TextControl.ITextControlWindow.IsVisibleOnScreen { get; }
    private ISignal`1<EventArgs`1<ITextControl>> JetBrains.TextControl.ITextControlWindow.Keyboard { get; }
    private Lifetime JetBrains.TextControl.ITextControl.Lifetime { get; }
    private IProperty`1<TextControlMouseEventArgs> JetBrains.TextControl.ITextControlWindow.MouseAndModifierKeys { get; }
    private ISignal`1<TextControlMouseEventArgs> JetBrains.TextControl.ITextControlWindow.MouseDown { get; }
    private ISignal`1<TextControlMouseEventArgs> JetBrains.TextControl.ITextControlWindow.MouseMove { get; }
    private ISignal`1<TextControlMouseEventArgs> JetBrains.TextControl.ITextControlWindow.MouseUp { get; }
    private ITextControlOptions JetBrains.TextControl.ITextControl.Options { get; }
    private ITextControlPopupWindowContextFactory JetBrains.TextControl.ITextControl.PopupWindowContextFactory { get; }
    private IProperty`1<ITextControlPos> JetBrains.TextControl.ITextControlCaret.Position { get; }
    private IProperty`1<IEquatableList`1<TextControlPosRange>> JetBrains.TextControl.ITextControlSelection.Ranges { get; }
    private ITextControlScrolling JetBrains.TextControl.ITextControl.Scrolling { get; }
    private ITextControlSelection JetBrains.TextControl.ITextControl.Selection { get; }
    private ITextControl JetBrains.TextControl.ITextControlCaret.TextControl { get; }
    private ITextControl JetBrains.TextControl.ITextControlScrolling.TextControl { get; }
    private ITextControl JetBrains.TextControl.ITextControlSelection.TextControl { get; }
    private ITextControl JetBrains.TextControl.ITextControlWindow.TextControl { get; }
    private TransportTextControl JetBrains.TextControl.ITextControl.Transport { get; }
    private IProperty`1<TextControlPosRange> JetBrains.TextControl.ITextControlScrolling.ViewportRange { get; }
    private ITextControlWindow JetBrains.TextControl.ITextControl.Window { get; }
    public AnonymousTextControl(Lifetime lifetime, RunningTextControlId id, IDocument document, TransportTextControl transport, ILogger logger);
    [CompilerGeneratedAttribute]
public sealed virtual RunningTextControlId get_Id();
    public virtual string ToString();
    private sealed virtual override ITextControlCaret JetBrains.TextControl.ITextControl.get_Caret();
    private sealed virtual override IProperty`1<ImmutableArray`1<TextRange>> JetBrains.TextControl.ITextControlScrolling.get_CollapsedViewportRanges();
    private sealed virtual override ITextControlCoords JetBrains.TextControl.ITextControl.get_Coords();
    private sealed virtual override IAnchoringRect JetBrains.TextControl.ITextControlWindow.CreateViewportAnchor(Lifetime lifetime);
    private sealed virtual override IDocument JetBrains.TextControl.ITextControl.get_Document();
    private sealed virtual override void JetBrains.TextControl.ITextControl.EmulateAction(string actionid);
    private sealed virtual override void JetBrains.TextControl.ITextControl.EmulateTyping(char c);
    private sealed virtual override void JetBrains.TextControl.ITextControlCaret.EnsureVisible();
    private sealed virtual override IEnumerable`1<KeyValuePair`2<object, object>> JetBrains.Util.IUserDataHolder.EnumerateData();
    private sealed virtual override ErrorStripeTransport JetBrains.TextControl.ITextControl.get_ErrorStripe();
    private sealed virtual override void JetBrains.TextControl.ITextControl.FillVirtualSpaceUntilCaret();
    private sealed virtual override void JetBrains.TextControl.ITextControlWindow.Focus();
    private sealed virtual override WindowFrame JetBrains.TextControl.ITextControlWindow.get_Frame();
    private sealed virtual override ITextControlPos JetBrains.TextControl.Coords.ITextControlCoords.FromDocLineColumn(DocumentCoords doccoords);
    private sealed virtual override ITextControlPos JetBrains.TextControl.Coords.ITextControlCoords.FromDocOffset(DocOffset docoffset);
    private sealed virtual override ITextControlPos JetBrains.TextControl.Coords.ITextControlCoords.FromDocOffsetAndVirtual(DocOffsetAndVirtual docoffs);
    private sealed virtual override ITextControlPos JetBrains.TextControl.Coords.ITextControlCoords.FromScreen(JetPhysicalPoint ptScreen);
    private sealed virtual override ITextControlPos JetBrains.TextControl.Coords.ITextControlCoords.FromTextControlLineColumn(TextControlLineColumn textcoords);
    private sealed virtual override T JetBrains.Util.IUserDataHolder.GetData(Key`1<T> key);
    private sealed virtual override T JetBrains.Util.IUserDataHolder.GetOrCreateDataUnderLock(Key`1<T> key, Func`1<T> factory);
    private sealed virtual override T JetBrains.Util.IUserDataHolder.GetOrCreateDataUnderLock(Key`1<T> key, TState state, Func`2<TState, T> factory);
    private sealed virtual override IDisposable JetBrains.TextControl.ITextControl.GetUpdateCookie(string description);
    private sealed virtual override IProperty`1<bool> JetBrains.TextControl.ITextControlWindow.get_IsFocused();
    private sealed virtual override IProperty`1<bool> JetBrains.TextControl.ITextControlWindow.get_IsVisibleOnScreen();
    private sealed virtual override ISignal`1<EventArgs`1<ITextControl>> JetBrains.TextControl.ITextControlWindow.get_Keyboard();
    private sealed virtual override Lifetime JetBrains.TextControl.ITextControl.get_Lifetime();
    private sealed virtual override IProperty`1<TextControlMouseEventArgs> JetBrains.TextControl.ITextControlWindow.get_MouseAndModifierKeys();
    private sealed virtual override ISignal`1<TextControlMouseEventArgs> JetBrains.TextControl.ITextControlWindow.get_MouseDown();
    private sealed virtual override ISignal`1<TextControlMouseEventArgs> JetBrains.TextControl.ITextControlWindow.get_MouseMove();
    private sealed virtual override ISignal`1<TextControlMouseEventArgs> JetBrains.TextControl.ITextControlWindow.get_MouseUp();
    private sealed virtual override void JetBrains.TextControl.ITextControlCaret.MoveTo(ITextControlPos position, CaretVisualPlacement visualplace);
    private sealed virtual override ITextControlOptions JetBrains.TextControl.ITextControl.get_Options();
    private sealed virtual override ITextControlPopupWindowContextFactory JetBrains.TextControl.ITextControl.get_PopupWindowContextFactory();
    private sealed virtual override IProperty`1<ITextControlPos> JetBrains.TextControl.ITextControlCaret.get_Position();
    private sealed virtual override void JetBrains.Util.IUserDataHolder.PutData(Key`1<T> key, T value);
    private sealed virtual override IProperty`1<IEquatableList`1<TextControlPosRange>> JetBrains.TextControl.ITextControlSelection.get_Ranges();
    private sealed virtual override ITextControlScrolling JetBrains.TextControl.ITextControl.get_Scrolling();
    private sealed virtual override void JetBrains.TextControl.ITextControlScrolling.ScrollTo(ITextControlPos position, TextControlScrollType scrollType);
    private sealed virtual override ITextControlSelection JetBrains.TextControl.ITextControl.get_Selection();
    private sealed virtual override void JetBrains.TextControl.ITextControlWindow.Show();
    private sealed virtual override ITextControl JetBrains.TextControl.ITextControlCaret.get_TextControl();
    private sealed virtual override ITextControl JetBrains.TextControl.ITextControlScrolling.get_TextControl();
    private sealed virtual override ITextControl JetBrains.TextControl.ITextControlSelection.get_TextControl();
    private sealed virtual override ITextControl JetBrains.TextControl.ITextControlWindow.get_TextControl();
    private void TmpUnsupportedReportPixelCoords(bool isFatal);
    private void TmpUnsupportedReportViewBufferCoords();
    private sealed virtual override TransportTextControl JetBrains.TextControl.ITextControl.get_Transport();
    private sealed virtual override IProperty`1<TextControlPosRange> JetBrains.TextControl.ITextControlScrolling.get_ViewportRange();
    private sealed virtual override ITextControlWindow JetBrains.TextControl.ITextControl.get_Window();
}
public class JetBrains.TextControl.AssemblyReferenceClass_Platform_TextControl : object {
}
public static class JetBrains.TextControl.BackendTextControlServices : object {
    private static int myTotalLockings;
    public static ITextControl CreateAndBind(Lifetime lifetime, RunningTextControlId textControlId, TransportTextControl transport, IComponentContainer containerForServices, ILogger logger);
    private static void BindActionsAndTypingHandlers(Lifetime lifetime, ITextControl textcontrol, TransportTextControl transport, TextControlTypingHandlers textControlTypingHandlers, IActionDefs defs, DataContexts datacontexts, IActionHandlers handlers);
    private static void BindOnImplementation(Lifetime lifetime, AnonymousTextControl anon, IShellLocks locks, IActionManager actionman);
    private static void BindOnTransport(Lifetime lifetime, ITextControl textcontrol, TransportTextControl transport, TextControlTypingHandlers textControlTypingHandlers, IActionDefs x, DataContexts y, IActionHandlers z, IShellLocks k, ISettingsStore settings, IDocumentMarkupManager markupman, ChangeManager changeman, IIsApplicationActiveState appactive, ILogger logger);
    [NotNullAttribute]
private static IDocument GetBackendDocument(Lifetime lifetime, RunningTextControlId textControlId, IComponentContainer containerForServices, ILogger logger);
    public static bool ExecuteTextControlAction(Lifetime lifetime, IActionDefs defs, DataContexts datacontexts, IActionHandlers handlers, ITextControl textcontrol, string actionid);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.TextControl.BaseImpl.ScrollsTextControlAfterCaretMove : object {
    private IProperty`1<TextControlActiveState> myActiveState;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myIsLayoutKnownByUser;
    public ScrollsTextControlAfterCaretMove(Lifetime lifetime, IProperty`1<TextControlActiveState> activestate, ILogger logger);
    public TextControlScrollType ChooseHowToScrollOnCaretMove(CaretVisualPlacement visualplace);
    private void InitIsLayoutKnownByUser(Lifetime lifetime, IProperty`1<TextControlActiveState> activestate);
}
public static class JetBrains.TextControl.BaseImpl.UselessTextControl : object {
    [NotNullAttribute]
public static ITextControl Create(Lifetime lifetime, RunningTextControlId textControlId, IComponentContainer container, ILogger logger);
    [NotNullAttribute]
public static ITextControl Create(Lifetime lifetime, IDocument document, IComponentContainer container, ILogger logger);
    [NotNullAttribute]
public static ITextControl Create(Lifetime lifetime, string textbody, string docmoniker, IComponentContainer container, ILogger logger);
}
[ExtensionAttribute]
public static class JetBrains.TextControl.CodeWithMe.TextControlClientIdExtensions : object {
    private static ILogger Log;
    private static Key`1<Boxed`1<ClientId>> ourClientIdKey;
    private static TextControlClientIdExtensions();
    [ExtensionAttribute]
public static ClientId GetClientId(ITextControl textControl);
    [ExtensionAttribute]
public static void BindClientId(ITextControl textControl, ClientId clientId);
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
public static ITextControl ForCurrentClient(IDictionaryEvents`2<ClientId, ITextControl> perClientMap);
    [ExtensionAttribute]
public static void ForEachValue_NotNull_AllClients(IDictionaryEvents`2<ClientId, ITextControl> perClientMap, Lifetime lifetime, Action`2<Lifetime, ITextControl> handler);
    [ExtensionAttribute]
public static void ForEachValue_AllClients(IDictionaryEvents`2<ClientId, ITextControl> perClientMap, Lifetime lifetime, Action`2<Lifetime, ITextControl> handler);
    [ExtensionAttribute]
public static void ForEachValue_NotNull_SpecificClient(IDictionaryEvents`2<ClientId, ITextControl> perClientMap, Lifetime lifetime, ClientId clientId, Action`2<Lifetime, ITextControl> handler);
    [ExtensionAttribute]
public static void ForEachValue_SpecificClient(IDictionaryEvents`2<ClientId, ITextControl> perClientMap, Lifetime lifetime, ClientId clientId, Action`2<Lifetime, ITextControl> handler);
    [ExtensionAttribute]
public static void ForEachValue_NotNull_Host(IDictionaryEvents`2<ClientId, ITextControl> perClientMap, Lifetime lifetime, Action`2<Lifetime, ITextControl> handler);
    [ExtensionAttribute]
public static void ForEachValue_Host(IDictionaryEvents`2<ClientId, ITextControl> perClientMap, Lifetime lifetime, Action`2<Lifetime, ITextControl> handler);
    [ExtensionAttribute]
[NotNullAttribute]
public static ITextControl[] FilterForCurrentClient(IEnumerable`1<ITextControl> textControls);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProperty`1<ITextControl> ForSpecificClientLive(IDictionaryEvents`2<ClientId, ITextControl> perClientMap, Lifetime lifetime, ClientId clientId);
}
public interface JetBrains.TextControl.Coords.ITextControlCoords {
    [PureAttribute]
[NotNullAttribute]
public abstract virtual ITextControlPos FromDocLineColumn(DocumentCoords doccoords);
    [PureAttribute]
[NotNullAttribute]
public abstract virtual ITextControlPos FromDocOffset(DocOffset docoffset);
    [PureAttribute]
[NotNullAttribute]
public abstract virtual ITextControlPos FromDocOffsetAndVirtual(DocOffsetAndVirtual docoffs);
    [PureAttribute]
[NotNullAttribute]
public abstract virtual ITextControlPos FromScreen(JetPhysicalPoint ptScreen);
    [PureAttribute]
[NotNullAttribute]
public abstract virtual ITextControlPos FromTextControlLineColumn(TextControlLineColumn textcoords);
}
[ExtensionAttribute]
public static class JetBrains.TextControl.Coords.ITextControlCoordsEx : object {
    [ExtensionAttribute]
public static ITextControlPos FromDocOffset(ITextControlCoords thіs, int offset);
}
public interface JetBrains.TextControl.Coords.ITextControlPos {
    [CanBeNullAttribute]
[ObsoleteAttribute("This ITextControlPos would only remain on frontend, which will not have a text control.")]
public ITextControl TextControl { get; }
    public abstract virtual ITextControl get_TextControl();
    [PureAttribute]
public abstract virtual DocumentCoords ToDocLineColumn();
    [PureAttribute]
public abstract virtual DocOffset ToDocOffset();
    [PureAttribute]
public abstract virtual DocOffsetAndVirtual ToDocOffsetAndVirtual();
    [PureAttribute]
public abstract virtual ITextControlPos ToRetainedPos();
    [PureAttribute]
public abstract virtual JetPhysicalRect ToScreen();
    [PureAttribute]
public abstract virtual TextControlLineColumn ToTextControlLineColumn();
}
public class JetBrains.TextControl.Coords.PositionKinds.TextControlPosDocLineColumn : object {
    private TextControlCoordinateConversionCore myConv;
    private DocumentCoords myPos;
    private ITextControl JetBrains.TextControl.Coords.ITextControlPos.TextControl { get; }
    public TextControlPosDocLineColumn(TextControlCoordinateConversionCore conv, DocumentCoords pos);
    public static bool op_Equality(TextControlPosDocLineColumn left, TextControlPosDocLineColumn right);
    public static bool op_Inequality(TextControlPosDocLineColumn left, TextControlPosDocLineColumn right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual bool Equals(ITextControlPos iother);
    private sealed virtual override DocumentCoords JetBrains.TextControl.Coords.ITextControlPos.ToDocLineColumn();
    private sealed virtual override DocOffset JetBrains.TextControl.Coords.ITextControlPos.ToDocOffset();
    private sealed virtual override DocOffsetAndVirtual JetBrains.TextControl.Coords.ITextControlPos.ToDocOffsetAndVirtual();
    private sealed virtual override ITextControlPos JetBrains.TextControl.Coords.ITextControlPos.ToRetainedPos();
    private sealed virtual override JetPhysicalRect JetBrains.TextControl.Coords.ITextControlPos.ToScreen();
    private sealed virtual override TextControlLineColumn JetBrains.TextControl.Coords.ITextControlPos.ToTextControlLineColumn();
    private sealed virtual override ITextControl JetBrains.TextControl.Coords.ITextControlPos.get_TextControl();
}
public class JetBrains.TextControl.Coords.PositionKinds.TextControlPosDocOffsetAndVirtual : object {
    private TextControlCoordinateConversionCore myConv;
    private DocOffsetAndVirtual myDocOffset;
    private ITextControl JetBrains.TextControl.Coords.ITextControlPos.TextControl { get; }
    public TextControlPosDocOffsetAndVirtual(TextControlCoordinateConversionCore conv, DocOffsetAndVirtual docoffset);
    public static bool op_Equality(TextControlPosDocOffsetAndVirtual left, TextControlPosDocOffsetAndVirtual right);
    public static bool op_Inequality(TextControlPosDocOffsetAndVirtual left, TextControlPosDocOffsetAndVirtual right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual bool Equals(ITextControlPos iother);
    private sealed virtual override DocumentCoords JetBrains.TextControl.Coords.ITextControlPos.ToDocLineColumn();
    private sealed virtual override DocOffset JetBrains.TextControl.Coords.ITextControlPos.ToDocOffset();
    private sealed virtual override DocOffsetAndVirtual JetBrains.TextControl.Coords.ITextControlPos.ToDocOffsetAndVirtual();
    private sealed virtual override ITextControlPos JetBrains.TextControl.Coords.ITextControlPos.ToRetainedPos();
    private sealed virtual override JetPhysicalRect JetBrains.TextControl.Coords.ITextControlPos.ToScreen();
    private sealed virtual override TextControlLineColumn JetBrains.TextControl.Coords.ITextControlPos.ToTextControlLineColumn();
    private sealed virtual override ITextControl JetBrains.TextControl.Coords.ITextControlPos.get_TextControl();
}
public class JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained : object {
    private static bool OptionDontRetainPixels;
    private DocumentCoords myDocLineColumn;
    private DocOffsetAndVirtual myDocOffset;
    [NotNullAttribute]
private ITextControlPos myPosOriginal;
    private Nullable`1<JetPhysicalRect> myScreen;
    [CanBeNullAttribute]
private ITextControl myTextControl;
    private TextControlLineColumn myTextControlLineColumn;
    private ITextControl JetBrains.TextControl.Coords.ITextControlPos.TextControl { get; }
    private TextControlPosRetained(ITextControlPos pos);
    private TextControlPosRetained(ITextControl textControl);
    private static TextControlPosRetained();
    [NotNullAttribute]
public static TextControlPosRetained CreateEmpty(ITextControl tc);
    [NotNullAttribute]
public static ITextControlPos Freeze(ITextControlPos pos);
    public static bool op_Equality(TextControlPosRetained left, TextControlPosRetained right);
    public static bool op_Inequality(TextControlPosRetained left, TextControlPosRetained right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual bool Equals(ITextControlPos iother);
    private sealed virtual override DocumentCoords JetBrains.TextControl.Coords.ITextControlPos.ToDocLineColumn();
    private sealed virtual override DocOffset JetBrains.TextControl.Coords.ITextControlPos.ToDocOffset();
    private sealed virtual override DocOffsetAndVirtual JetBrains.TextControl.Coords.ITextControlPos.ToDocOffsetAndVirtual();
    private sealed virtual override ITextControlPos JetBrains.TextControl.Coords.ITextControlPos.ToRetainedPos();
    private sealed virtual override JetPhysicalRect JetBrains.TextControl.Coords.ITextControlPos.ToScreen();
    private sealed virtual override TextControlLineColumn JetBrains.TextControl.Coords.ITextControlPos.ToTextControlLineColumn();
    private sealed virtual override ITextControl JetBrains.TextControl.Coords.ITextControlPos.get_TextControl();
}
internal class JetBrains.TextControl.Coords.PositionKinds.TextControlPosScreen : object {
    private TextControlCoordinateConversionCore myConv;
    private JetPhysicalPoint myPoint;
    private ITextControl JetBrains.TextControl.Coords.ITextControlPos.TextControl { get; }
    public TextControlPosScreen(TextControlCoordinateConversionCore conv, JetPhysicalPoint point);
    public static bool op_Equality(TextControlPosScreen left, TextControlPosScreen right);
    public static bool op_Inequality(TextControlPosScreen left, TextControlPosScreen right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual bool Equals(ITextControlPos iother);
    private sealed virtual override DocumentCoords JetBrains.TextControl.Coords.ITextControlPos.ToDocLineColumn();
    private sealed virtual override DocOffset JetBrains.TextControl.Coords.ITextControlPos.ToDocOffset();
    private sealed virtual override DocOffsetAndVirtual JetBrains.TextControl.Coords.ITextControlPos.ToDocOffsetAndVirtual();
    private sealed virtual override ITextControlPos JetBrains.TextControl.Coords.ITextControlPos.ToRetainedPos();
    private sealed virtual override JetPhysicalRect JetBrains.TextControl.Coords.ITextControlPos.ToScreen();
    private sealed virtual override TextControlLineColumn JetBrains.TextControl.Coords.ITextControlPos.ToTextControlLineColumn();
    private sealed virtual override ITextControl JetBrains.TextControl.Coords.ITextControlPos.get_TextControl();
}
internal class JetBrains.TextControl.Coords.PositionKinds.TextControlPosTextControlLineColumn : object {
    private TextControlCoordinateConversionCore myConv;
    private TextControlLineColumn myPos;
    private ITextControl JetBrains.TextControl.Coords.ITextControlPos.TextControl { get; }
    public TextControlPosTextControlLineColumn(TextControlCoordinateConversionCore conv, TextControlLineColumn pos);
    public static bool op_Equality(TextControlPosTextControlLineColumn left, TextControlPosTextControlLineColumn right);
    public static bool op_Inequality(TextControlPosTextControlLineColumn left, TextControlPosTextControlLineColumn right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual bool Equals(ITextControlPos iother);
    private sealed virtual override DocumentCoords JetBrains.TextControl.Coords.ITextControlPos.ToDocLineColumn();
    private sealed virtual override DocOffset JetBrains.TextControl.Coords.ITextControlPos.ToDocOffset();
    private sealed virtual override DocOffsetAndVirtual JetBrains.TextControl.Coords.ITextControlPos.ToDocOffsetAndVirtual();
    private sealed virtual override ITextControlPos JetBrains.TextControl.Coords.ITextControlPos.ToRetainedPos();
    private sealed virtual override JetPhysicalRect JetBrains.TextControl.Coords.ITextControlPos.ToScreen();
    private sealed virtual override TextControlLineColumn JetBrains.TextControl.Coords.ITextControlPos.ToTextControlLineColumn();
    private sealed virtual override ITextControl JetBrains.TextControl.Coords.ITextControlPos.get_TextControl();
}
public abstract class JetBrains.TextControl.Coords.TextControlCoordinateConversionCore : object {
    public ITextControl TextControl;
    protected TextControlCoordinateConversionCore(ITextControl textcontrol);
    public virtual DocOffsetAndVirtual DocLineColumn_To_DocOffset(DocumentCoords coords);
    public static DocOffsetAndVirtual DocLineColumn_To_DocOffset_Core(DocumentCoords coords, IDocument document);
    public abstract virtual TextControlLineColumn DocLineColumn_To_TextControlLineColumn(DocumentCoords doccoords);
    public DocumentCoords DocOffset_To_DocLineColumn(DocOffsetAndVirtual docoffset);
    public static DocumentCoords DocOffset_To_DocLineColumn(DocOffsetAndVirtual docoffset, IDocument document);
    public abstract virtual TextControlLineColumn DocOffset_To_TextControlLineColumn(DocOffsetAndVirtual docoffset);
    public abstract virtual TextControlLineColumn Screen_To_TextControlLineColumn(JetPhysicalPoint ptScreen);
    public abstract virtual DocumentCoords TextControlLineColumn_To_DocLineColumn(TextControlLineColumn posTxt);
    public abstract virtual DocOffsetAndVirtual TextControlLineColumn_To_DocOffset(TextControlLineColumn posTxt);
    public abstract virtual JetPhysicalRect TextControlLineColumn_To_Screen(TextControlLineColumn posText);
    protected abstract virtual JetPhysicalPoint Screen_To_Viewport(JetPhysicalPoint ptScreen);
    protected abstract virtual JetPhysicalPoint Viewport_To_Screen(JetPhysicalPoint ptViewport);
}
public class JetBrains.TextControl.Coords.TextControlCoords : object {
    [CompilerGeneratedAttribute]
private TextControlCoordinateConversionCore <ConversionCore>k__BackingField;
    [NotNullAttribute]
public TextControlCoordinateConversionCore ConversionCore { get; }
    public TextControlCoords(TextControlCoordinateConversionCore conv);
    [CompilerGeneratedAttribute]
public TextControlCoordinateConversionCore get_ConversionCore();
    private sealed virtual override ITextControlPos JetBrains.TextControl.Coords.ITextControlCoords.FromDocLineColumn(DocumentCoords posDoc);
    private sealed virtual override ITextControlPos JetBrains.TextControl.Coords.ITextControlCoords.FromDocOffset(DocOffset docoffset);
    private sealed virtual override ITextControlPos JetBrains.TextControl.Coords.ITextControlCoords.FromDocOffsetAndVirtual(DocOffsetAndVirtual docoffs);
    private sealed virtual override ITextControlPos JetBrains.TextControl.Coords.ITextControlCoords.FromScreen(JetPhysicalPoint ptScreen);
    private sealed virtual override ITextControlPos JetBrains.TextControl.Coords.ITextControlCoords.FromTextControlLineColumn(TextControlLineColumn posTextControl);
}
public class JetBrains.TextControl.Coords.TextControlPosRange : object {
    [NotNullAttribute]
public ITextControlPos End;
    [NotNullAttribute]
public ITextControlPos Start;
    [CanBeNullAttribute]
[ObsoleteAttribute("This ITextControlPos would only remain on frontend, which will not have a text control.")]
public ITextControl TextControl;
    public TextControlPosRange(ITextControlPos start, ITextControlPos end);
    [NotNullAttribute]
[PureAttribute]
public static TextControlPosRange FromDocLineColumnRange(ITextControl textControl, DocLineColumnRange range);
    [NotNullAttribute]
[PureAttribute]
public static TextControlPosRange FromDocRange(ITextControl textControl, TextRange range);
    [NotNullAttribute]
[PureAttribute]
public static TextControlPosRange FromDocRange(ITextControl textControl, int start, int end);
    [NotNullAttribute]
[PureAttribute]
public static TextControlPosRange FromTextControlLineCol(ITextControl textControl, TextControlLineColumnRange range);
    public static bool op_Equality(TextControlPosRange left, TextControlPosRange right);
    public static bool op_Inequality(TextControlPosRange left, TextControlPosRange right);
    [PureAttribute]
public DocLineColumnRange ToDocLineColumnRangeNormalized();
    [PureAttribute]
public DocLineColumnRange ToDocLineColumnRangeUnnormalized();
    [PureAttribute]
public TextRange ToDocRangeNormalized();
    [PureAttribute]
public TextRange ToDocRangeUnnormalized();
    [PureAttribute]
public DocumentRange ToDocumentRangeNormalized();
    [PureAttribute]
public DocumentRange ToDocumentRange();
    [PureAttribute]
public TextControlPosRange ToRetained();
    [PureAttribute]
public TextControlLineColumnRange ToTextControlLineColumnRangeNormalized();
    [PureAttribute]
public TextControlLineColumnRange ToTextControlLineColumnRangeUnnormalized();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual bool Equals(TextControlPosRange other);
}
[RegisterHighlighterAttribute("ReSharper Current Line Highlight")]
public static class JetBrains.TextControl.CurrentLine.ReSharperCurrentLineHighlight : object {
    public static string CurrentLineHighlighterId;
}
public class JetBrains.TextControl.Data.RangeableContainer`2 : object {
    private IRangeableSetFactory`2<TItem, TSet> mySetFactory;
    private IDocument myDocument;
    private IShellLocks myLocks;
    private HashSet`1<TItem> myRangeables;
    private List`1<Interval<TItem, TSet>> myIntervals;
    private DocumentChangeData<TItem, TSet> myDocumentChangeData;
    private static ILogger Logger;
    [CompilerGeneratedAttribute]
private Action`1<LocalList`1<TItem>> RemovedOnDocumentChange;
    public RangeableContainer`2(IDocument document, IShellLocks locks, IRangeableSetFactory`2<TItem, TSet> setFactory);
    public RangeableContainer`2(IDocument document, int documentLength, IShellLocks locks, IRangeableSetFactory`2<TItem, TSet> setFactory);
    private static RangeableContainer`2();
    [CompilerGeneratedAttribute]
public sealed virtual void add_RemovedOnDocumentChange(Action`1<LocalList`1<TItem>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RemovedOnDocumentChange(Action`1<LocalList`1<TItem>> value);
    private bool EnsureUpdated();
    public sealed virtual void Add(TItem rangeable);
    private void AddImpl(TItem rangeable);
    private void SplitRangeElement(Interval<TItem, TSet> interval, int intervalIndex, TItem rangeable);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<TItem> GetEnumerator();
    public sealed virtual bool Contains(TItem rangeable);
    public sealed virtual void Remove(TItem rangeable);
    public sealed virtual void RemoveAll();
    private void RemoveImpl(TextRange range, TItem rangeable);
    private void FastCheck(TItem canBeMissingFromIntervals);
    private int MergeElementsPossibly(int index);
    public sealed virtual void BeforeDocumentChange(DocumentChange change);
    public sealed virtual void OnDocumentChange(DocumentChange change);
    private void OnDocumentChangeImpl(DocumentChangeData<TItem, TSet> changeData);
    private void SortChangedRangeables(DocumentChange args, LocalList`1& toBeRemoved, LocalList`1& left, LocalList`1& leftOverlap, LocalList`1& rightOverlap, LocalList`1& right, LocalList`1& overlapping);
    private sealed virtual override IRangeIterator`1<TItem> JetBrains.TextControl.Data.IRangeableContainer<TItem>.Iterate();
    private RangeIterator<TItem, TSet> Iterate();
    private sealed virtual override IRangeIterator`1<TItem> JetBrains.TextControl.Data.IRangeableContainer<TItem>.Iterate(DocOffset documentOffset);
    private RangeIterator<TItem, TSet> Iterate(DocOffset documentOffset);
    private sealed virtual override IEnumerable`1<TItem> JetBrains.TextControl.Data.IRangeableContainer<TItem>.GetAllInRange(TextRange range);
    private sealed virtual override IEnumerable`1<TItem> JetBrains.TextControl.Data.IRangeableContainer<TItem>.GetAllOverRange(TextRange range);
    private JetHashSet`1<TItem> GetAllOverRange(TextRange range);
    private int GetGLBIndex(DocOffset offset);
    private void CheckIntegrity();
    [CompilerGeneratedAttribute]
internal static void <RemoveImpl>g__ReportStartOffsetMismatch|23_0(TextRange range, RangeableContainer`2<TItem, TSet> this, TItem rangeable, int index);
    [CompilerGeneratedAttribute]
internal static void <FastCheck>g__FastCheckCore|24_0(RangeableContainer`2<TItem, TSet> this, TItem canbemissingfromintervals);
    [CompilerGeneratedAttribute]
internal static void <FastCheck>g__ReportMissing|24_1(TItem rangeableMissing, RangeableContainer`2<TItem, TSet> this);
    [CompilerGeneratedAttribute]
private void <OnDocumentChange>b__27_0();
}
[ShellComponentAttribute("16")]
[ZoneMarkerAttribute]
public class JetBrains.TextControl.DataContext.TextControlDataConstantProvider : object {
    private ITextControlManager myTextControlManager;
    public TextControlDataConstantProvider(ITextControlManager textControlManager);
    [IteratorStateMachineAttribute("JetBrains.TextControl.DataContext.TextControlDataConstantProvider/<GetDataConstants>d__2")]
public sealed virtual IEnumerable`1<RdDataConstant> GetDataConstants();
}
public abstract class JetBrains.TextControl.DataContext.TextControlDataConstants : object {
    [NotNullAttribute]
public static DataConstant`1<ITextControl> TEXT_CONTROL;
    [NotNullAttribute]
public static DataConstant`1<ITextControlPos> TextControlPosition;
    private static TextControlDataConstants();
}
[ExtensionAttribute]
public static class JetBrains.TextControl.DataContext.TextControlDataConstantsExtensions : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
public static ITextControl TextControl(IDataContext dataContext);
    [ExtensionAttribute]
[PureAttribute]
public static DocumentRange SingleSelectionRange(ITextControl textControl);
    [ExtensionAttribute]
[NotNullAttribute]
public static IDataContext FromTextControl(DataContexts dataContexts, Lifetime lifetime, ITextControl textControl);
    [ExtensionAttribute]
[NotNullAttribute]
public static Func`3<Lifetime, DataContexts, IDataContext> ToDataContext(ITextControl textControl);
    [ExtensionAttribute]
[NotNullAttribute]
public static ContextRange ToContextRange(ITextControl textControl);
}
[ShellComponentAttribute("10")]
public class JetBrains.TextControl.DataContext.TextControlDataRules : object {
    public TextControlDataRules(Lifetime lifetime, ITextControlManager textControlManager, DataContexts contexts);
}
public class JetBrains.TextControl.DocumentMarkup.Adornments.AdornmentDataModel : object {
    [CanBeNullAttribute]
private IEnumerable`1<BulbMenuItem> myContextMenuItems;
    [CanBeNullAttribute]
private IPresentableItem myContextMenuTitle;
    private AdornmentData myData;
    [CanBeNullAttribute]
private Action`1<PopupWindowContextSource> myExecuteNavigation;
    private Nullable`1<TextRange> mySelectionRange;
    private IEnumerable`1<BulbMenuItem> JetBrains.TextControl.DocumentMarkup.Adornments.IAdornmentDataModel.ContextMenuItems { get; }
    private IPresentableItem JetBrains.TextControl.DocumentMarkup.Adornments.IAdornmentDataModel.ContextMenuTitle { get; }
    private AdornmentData JetBrains.TextControl.DocumentMarkup.Adornments.IAdornmentDataModel.Data { get; }
    private Nullable`1<TextRange> JetBrains.TextControl.DocumentMarkup.Adornments.IAdornmentDataModel.SelectionRange { get; }
    public AdornmentDataModel(AdornmentData& data, IPresentableItem contextMenuTitle, IEnumerable`1<BulbMenuItem> contextMenuItems, Action`1<PopupWindowContextSource> executeNavigation, Nullable`1& selectionRange);
    private sealed virtual override IEnumerable`1<BulbMenuItem> JetBrains.TextControl.DocumentMarkup.Adornments.IAdornmentDataModel.get_ContextMenuItems();
    private sealed virtual override IPresentableItem JetBrains.TextControl.DocumentMarkup.Adornments.IAdornmentDataModel.get_ContextMenuTitle();
    private sealed virtual override AdornmentData JetBrains.TextControl.DocumentMarkup.Adornments.IAdornmentDataModel.get_Data();
    private sealed virtual override void JetBrains.TextControl.DocumentMarkup.Adornments.IAdornmentDataModel.ExecuteNavigation(PopupWindowContextSource popupWindowContextSource);
    private sealed virtual override Nullable`1<TextRange> JetBrains.TextControl.DocumentMarkup.Adornments.IAdornmentDataModel.get_SelectionRange();
}
[ShellComponentAttribute("20")]
public class JetBrains.TextControl.DocumentMarkup.Adornments.HighlighterAdornmentsBackendServices : object {
    private static TimeSpan HighlightersRefreshInterval;
    public HighlighterAdornmentsBackendServices(Lifetime lifetime, RunningTextControls textcontrols, IDocumentMarkupManager markupman, ISettingsStore settings, ILazy`1<BulbMenuComponent> bulbMenuComponent, ILazy`1<DocumentSyncMomentStatusManager> docsync, IShellLocks locks, ILogger logger);
    private static HighlighterAdornmentsBackendServices();
    [CompilerGeneratedAttribute]
internal static void <.ctor>g__InitBindSettings|1_2(Lifetime lifetime, ISettingsStore settings, ITextControl tc, TTransport container);
    [CompilerGeneratedAttribute]
internal static Nullable`1<AdornmentHighlighter> <.ctor>g__PrepareHighlighter|1_3(IHighlighter highlighter, bool isPushToHintActive, ITextControl textControl, ILogger logger, ShowRealWhitespaces showRealWhitespaces);
}
public interface JetBrains.TextControl.DocumentMarkup.Adornments.IHighlighterAdornmentProvider {
    public abstract virtual bool IsValid(IHighlighter highlighter);
    [CanBeNullAttribute]
public abstract virtual IAdornmentDataModel CreateDataModel(IHighlighter highlighter);
}
[ExtensionAttribute]
public static class JetBrains.TextControl.DocumentMarkup.Adornments.PushToHintModeExtensions : object {
    [ExtensionAttribute]
private static PushToHintMode EnsureDefaultInternal(PushToHintMode mode, IContextBoundSettingsStore contextBoundSettingsStore, Expression`1<Func`2<TOptions, PushToHintMode>> getOptionValue);
    [ExtensionAttribute]
public static PushToHintMode EnsureInlayHintsDefault(PushToHintMode mode, IContextBoundSettingsStore contextBoundSettingsStore);
    [ExtensionAttribute]
public static string GetPresentation(PushToHintMode mode, PushToHintMode defaultMode);
}
public class JetBrains.TextControl.DocumentMarkup.AnonymousDocumentMarkupEventsSink : object {
    [CanBeNullAttribute]
private OnDocumentMarkupChangedDelegate myOnDocumentMarkupChanged;
    [CanBeNullAttribute]
private OnDocumentMarkupResetDelegate myOnDocumentMarkupReset;
    public AnonymousDocumentMarkupEventsSink(OnDocumentMarkupChangedDelegate onDocumentMarkupChanged, OnDocumentMarkupResetDelegate onDocumentMarkupReset);
    private sealed virtual override void JetBrains.TextControl.DocumentMarkup.IDocumentMarkupEvents.OnDocumentMarkupChanged(IDocumentMarkup markup, ICollection`1<IHighlighter> added, ICollection`1<IHighlighter> removed, ICollection`1<IHighlighter> modified);
    private sealed virtual override void JetBrains.TextControl.DocumentMarkup.IDocumentMarkupEvents.OnDocumentMarkupReset(IDocumentMarkup newMarkup);
}
public class JetBrains.TextControl.DocumentMarkup.AnonymousHighlighterTooltipProvider : object {
    [NotNullAttribute]
private HighlighterTooltipProviderDelegate myΛ;
    public AnonymousHighlighterTooltipProvider(HighlighterTooltipProviderDelegate λ);
    private sealed virtual override RichTextBlock JetBrains.TextControl.DocumentMarkup.IHighlighterTooltipProvider.TryGetTooltip(IHighlighter highlighter, HighlighterTooltipKind where);
    private sealed virtual override bool JetBrains.TextControl.DocumentMarkup.IHighlighterTooltipProvider.ShouldShowTooltip(IHighlighter highlighter, HighlighterTooltipKind where);
}
public class JetBrains.TextControl.DocumentMarkup.DocumentMarkup : DocumentMarkupBase {
    private IDocumentMarkupEvents myEventSink;
    public DocumentMarkup(IDocument document, IShellLocks locks, HihglighterContext context, IDocumentMarkupEvents eventSink, IHighlightingAttributeRegistry highlightingAttributeRegistry);
    protected virtual void OnDocumentMarkupChanged(BatchChange change);
}
public abstract class JetBrains.TextControl.DocumentMarkup.DocumentMarkupBase : UserDataHolder {
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
protected Stack`1<BatchChange> BatchChanges;
    [NotNullAttribute]
private IHighlightingAttributeRegistry myHighlightingAttributeRegistry;
    private bool myIsWriteLockRequested;
    private int myWriteLockCount;
    [NotNullAttribute]
private HashSet`1<EnumeratorWithReadWriteLock`1<IHighlighter>> myRunningEnumerators;
    [NotNullAttribute]
private OneToSetMap`2<string, IHighlighter> myHighlightersMap;
    [CanBeNullAttribute]
private IRangeableContainer`1<IHighlighter> myHighlighters;
    [CompilerGeneratedAttribute]
private IDocument <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasSkippedHighlightings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CouldHaveSkippedHighlightings>k__BackingField;
    [CompilerGeneratedAttribute]
private HihglighterContext <Context>k__BackingField;
    private RemoveHighlightersRequest myRemoveHighlightersRequest;
    [ThreadStaticAttribute]
private static BatchChange ourBatchChangeInProgress;
    public IDocument Document { get; }
    public bool HasSkippedHighlightings { get; public set; }
    public bool CouldHaveSkippedHighlightings { get; public set; }
    [CanBeNullAttribute]
public HihglighterContext Context { get; }
    protected DocumentMarkupBase(IShellLocks locks, IDocument document, IHighlightingAttributeRegistry highlightingAttributeRegistry, HihglighterContext context);
    [CompilerGeneratedAttribute]
public sealed virtual IDocument get_Document();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasSkippedHighlightings();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasSkippedHighlightings(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CouldHaveSkippedHighlightings();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CouldHaveSkippedHighlightings(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual HihglighterContext get_Context();
    private void FireAtomicChange(IHighlighter added, IHighlighter removed, IHighlighter modified);
    protected void FireBatchChange(BatchChange change);
    protected virtual void OnDocumentMarkupChanged(BatchChange change);
    private void TerminateEnumeratorsAndEnterWriteLock();
    private void ExitWriteLock();
    private T ExecuteWithWriteLock(string name, Func`1<T> func);
    private void ExecuteWithWriteLock(string name, Action action);
    [ConditionalAttribute("JET_MODE_ASSERT")]
private void AssertWriteLockAcquired();
    [ConditionalAttribute("JET_MODE_ASSERT")]
protected void AssertReadLockAcquired();
    [ConditionalAttribute("JET_MODE_ASSERT")]
private void AssertCanModify();
    private bool CanModify(String& message);
    [ConditionalAttribute("JET_MODE_ASSERT")]
private void AssertCanRead();
    private bool CanRead(String& message);
    public sealed virtual IHighlighter AddHighlighterCustom(string key, TextRange range, AreaType areaType, Nullable`1<HighlighterLayer> layer, HighlighterAttributes attributes, ErrorStripeAttributes errorStripeAttributes, IHighlighterTooltipProvider tooltip, IHighlighterAdornmentProvider adornmentProvider, UserDataWrapper userdata);
    public sealed virtual IHighlighter AddHighlighterRegistered(string key, TextRange range, AreaType areaType, Nullable`1<HighlighterLayer> layerOverride, string attributeId, Nullable`1<ErrorStripeAttributes> errorStripeAttributesOverride, IHighlighterTooltipProvider tooltip, IHighlighterAdornmentProvider adornmentProvider, UserDataWrapper userdata);
    private void RegisterNewHighlighter(IHighlighter highlighter);
    private void InitializeContainer();
    public sealed virtual IEnumerable`1<IHighlighter> GetHighlightersEnumerable(OnWriteLockRequestedBehavior behavior, Func`2<IHighlighter, bool> highlighterFilter);
    public sealed virtual IEnumerable`1<IHighlighter> GetHighlightersEnumerable(string key, OnWriteLockRequestedBehavior behavior, Func`2<IHighlighter, bool> highlighterFilter);
    public sealed virtual IEnumerable`1<IHighlighter> GetHighlightersOver(TextRange textRange, OnWriteLockRequestedBehavior behavior, Func`2<IHighlighter, bool> highlighterFilter);
    private IEnumerable`1<IHighlighter> CreateEnumerable(OnWriteLockRequestedBehavior behavior, Func`1<IEnumerable`1<IHighlighter>> createEnumerable);
    private void AssertNoRunningEnumerators();
    public sealed virtual IDisposable BatchChangeCookie(string name);
    public sealed virtual Task`1<bool> RemoveHighlighterAsync(IHighlighter highlighter);
    public sealed virtual bool RemoveHighlighter(IHighlighter highlighter);
    public sealed virtual Task`1<bool> RemoveHighlightersAsync(string key);
    public sealed virtual void RemoveHighlighters(string key);
    public sealed virtual void RemoveAllHighlighters();
    public sealed virtual void OnBeforeDocumentChanged(DocumentChange change);
    public sealed virtual void OnDocumentChanged(DocumentChange change);
    public sealed virtual void RemoveInvalidHighlighters();
    public sealed virtual void FireHighlighterModified(IHighlighter highlighter);
    [CompilerGeneratedAttribute]
private void <InitializeContainer>b__44_0(LocalList`1<IHighlighter> highlighters);
    [CompilerGeneratedAttribute]
private void <CreateEnumerable>b__48_0(EnumeratorWithReadWriteLock`1<IHighlighter> e);
    [CompilerGeneratedAttribute]
internal static void <RemoveHighlighter>g__ReportFailure|52_1(IHighlighter highlighter, Exception ex, ILogger logger);
    [CompilerGeneratedAttribute]
private void <RemoveInvalidHighlighters>b__58_0();
}
[ExtensionAttribute]
public static class JetBrains.TextControl.DocumentMarkup.DocumentMarkupEx : object {
    [ExtensionAttribute]
public static IList`1<IHighlighter> GetFilteredHighlighters(IDocumentMarkup markup, Func`2<IHighlighter, bool> highlighterFilter);
    [ExtensionAttribute]
public static IList`1<IHighlighter> GetFilteredHighlighters(IDocumentMarkup markup, string key, Func`2<IHighlighter, bool> highlighterFilter);
    [ExtensionAttribute]
public static IList`1<IHighlighter> GetFilteredHighlightersOver(IDocumentMarkup markup, TextRange textRange, Func`2<IHighlighter, bool> highlighterFilter);
}
[ShellComponentAttribute("16")]
public class JetBrains.TextControl.DocumentMarkup.DocumentMarkupManager : object {
    private ILogger myLogger;
    private IShellLocks myLocks;
    private IHighlightingAttributeRegistry myHighlightingAttributeRegistry;
    private WeakToWeakDictionary`2<IDocument, IDocumentMarkupImpl> myDocumentMarkups;
    private WeakCollection`1<IDocument> myDocuments;
    private OneToListMap`2<IDocument, IDocumentMarkupEvents> myDocumentMarkupEvents;
    private object myLock;
    public DocumentMarkupManager(Lifetime lifetime, IShellLocks locks, IHighlightingAttributeRegistry highlightingAttributeRegistry, IRunningDocuments runningDocuments, ILogger logger);
    public sealed virtual IDocumentMarkup GetMarkupModel(IDocument document);
    public sealed virtual IDocumentMarkup GetMarkupModelAndKeepAlive(Lifetime lifetime, IDocument document);
    public sealed virtual IDocumentMarkup TryGetMarkupModel(IDocument document);
    public sealed virtual void AdviseMarkupEvents(Lifetime lifetime, IDocument document, IDocumentMarkupEvents sink);
    protected virtual IDocumentMarkupImpl CreateMarkupModel(IDocument document);
    private void OnBeforeDocumentChanged(object sender, EventArgs`1<DocumentChange> args);
    private void OnDocumentChanged(object sender, EventArgs`1<DocumentChange> args);
    private sealed virtual override void JetBrains.TextControl.DocumentMarkup.IDocumentMarkupEvents.OnDocumentMarkupChanged(IDocumentMarkup markup, ICollection`1<IHighlighter> added, ICollection`1<IHighlighter> removed, ICollection`1<IHighlighter> modified);
    private sealed virtual override void JetBrains.TextControl.DocumentMarkup.IDocumentMarkupEvents.OnDocumentMarkupReset(IDocumentMarkup newMarkup);
    private FrugalLocalList`1<IDocumentMarkupEvents> GetSinksForDocument(IDocument document);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_0(AddRemoveEventArgs`1<ValueTuple`2<IDocument, RunningDocumentId>> args);
}
public class JetBrains.TextControl.DocumentMarkup.EmbeddedObjectInfo : object {
    private IRangeMarker myRangeMarker;
    private Key myKey;
    public IRangeMarker RangeMarker { get; }
    public Key Key { get; }
    public EmbeddedObjectInfo(IRangeMarker rangeMarker, Key key);
    public IRangeMarker get_RangeMarker();
    public Key get_Key();
}
public static class JetBrains.TextControl.DocumentMarkup.GutterMarkBackendHelpers : object {
    public static Task`1<GutterMarkMouseDownResult> OnMouseDown(Lifetime lifetime, ImmutableArray`1& docrangesOfGlyphsLine, IDocument document, IconId iconid, PopupWindowContextSource popupctx, GutterMarkComponents& ctx, ILogger logger);
    [CanBeNullAttribute]
private static List`1<BulbMenuItem> GetBulbMenuItems(OuterLifetime lifetime, ImmutableArray`1& docrangesOfGlyphsLine, IDocument document, GutterMarkComponents ctx, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.TextControl.DocumentMarkup.GutterMarkBackendHelpers/<OnMouseDownCore>d__2")]
private static Task`1<GutterMarkMouseDownResult> OnMouseDownCore(Lifetime lifetime, ImmutableArray`1<TextRange> docrangesOfGlyphsLine, IDocument document, IconId iconid, PopupWindowContextSource popupctx, GutterMarkComponents ctx, ILogger logger, UInt32 nesting);
}
[ShellComponentAttribute("16")]
public class JetBrains.TextControl.DocumentMarkup.GutterMarkInfoExtractor : object {
    public virtual IGutterMarkInfo ExtractGutterMarkInfo(IHighlighter highlighter);
}
[ShellComponentAttribute("16")]
[ObsoleteAttribute("Should not be using this component, pass into guttermark click handler if needed.")]
public class JetBrains.TextControl.DocumentMarkup.GutterMarkMenuLayouter : object {
    private IJetActionEditorMarginBehavior myGutterMargin;
    protected IMainWindowPopupWindowContext myMainWindowContext;
    private PopupWindowContextSource myPopupWindowContextSource;
    public GutterMarkMenuLayouter(IJetActionEditorMarginBehavior gutterMargin, IMainWindowPopupWindowContext mainWindowContext);
    [CanBeNullAttribute]
public PopupWindowContextSource GetPopupWindowContextForLine(ITextControl textControl, DocumentRange rangeOfMark);
    [NotNullAttribute]
public PopupWindowContextSource GetPopupWindowContextForWhateverSomething();
    [NotNullAttribute]
protected virtual PopupWindowContextSource GetPopupWindowContextForWhateverSomethingCore();
}
[ShellComponentAttribute("44")]
public class JetBrains.TextControl.DocumentMarkup.GutterMarksBackendServices : object {
    public static IconId FallbackIcon;
    [NotNullAttribute]
private IHighlighterFilter[] myFilters;
    private ISimpleSignal myForceRefresh;
    public GutterMarksBackendServices(Lifetime lifetime, RunningTextControls textcontrols, IJetActionEditorMarginBehavior behavior, IShellLocks locks, IDocumentMarkupManager markupman, BulbMenuComponent bulbmenucomponent, SynchronizationPoints synchronizationPoints, ILogger logger);
    private static GutterMarksBackendServices();
    [NotNullAttribute]
public static IconId GetBestGutterMarkIcon(FrugalLocalList`1& highlighters, ILogger logger);
    public void RegisterFilter(Lifetime lifetime, IHighlighterFilter filter);
}
[ShellComponentAttribute("20")]
public class JetBrains.TextControl.DocumentMarkup.HighlighterAdornmentsAndClassificationsBackendServices : object {
    private static TimeSpan HighlightersRefreshInterval;
    public HighlighterAdornmentsAndClassificationsBackendServices(Lifetime lifetime, RunningTextControls textcontrols, IDocumentMarkupManager markupman, ILazy`1<DocumentSyncMomentStatusManager> docsync, IShellLocks locks, ILogger logger);
    private static HighlighterAdornmentsAndClassificationsBackendServices();
    private static HighlighterLayer GetLayer(IHighlighter highlighter);
}
public static class JetBrains.TextControl.DocumentMarkup.HighlighterBackendServicesHelper : object {
    public static void SetupTransportForHighlighters(Lifetime lifetime, PropertyId`1<TTransportContainer> propidContainer, ISet`1<EffectType> effecttype, GetSessionsForTransportContainerDelegate`2<TTransportContainer, TTransportItem> FGetSessionsForTransportContainer, TimeSpan timeRefresh, RunningTextControls textcontrols, IDocumentMarkupManager markupman, ILazy`1<DocumentSyncMomentStatusManager> docsync, IShellLocks locks, ILogger logger);
}
[IsReadOnlyAttribute]
public class JetBrains.TextControl.DocumentMarkup.HighlighterCountsByKinds : ValueType {
    public UInt32 Errors;
    public UInt32 Infos;
    public UInt32 Suggestions;
    public UInt32 Usages;
    public UInt32 Warnings;
    public HighlighterCountsByKinds(UInt32 infos, UInt32 suggestions, UInt32 warnings, UInt32 errors, UInt32 usages);
    public void Deconstruct(UInt32& nInfos, UInt32& nSuggestions, UInt32& nWarnings, UInt32& nErrors, UInt32& nUsages);
    public virtual string ToString();
}
[ShellComponentAttribute("16")]
public class JetBrains.TextControl.DocumentMarkup.HighlighterCountsByKindsTrackerComponent : object {
    private TimeSpan MaxFullRecalcTimeout;
    private IDocumentMarkupManager myDocumentMarkupManager;
    private Lifetime myLifetime;
    private IShellLocks myLocks;
    private ILogger myLogger;
    private Dictionary`2<ITextControl, TextControlData> myPerTextControlData;
    public HighlighterCountsByKindsTrackerComponent(Lifetime lifetime, IDocumentMarkupManager markupman, IShellLocks locks, ILogger logger);
    public IProperty`1<HighlighterCountsByKinds> FromTextControl(ITextControl tc);
    private void RecalculateAnew(TextControlData data);
    private TextControlData StartTracking(ITextControl tc);
}
[ExtensionAttribute]
public static class JetBrains.TextControl.DocumentMarkup.HighlighterCountsByKindsTrackerComponentEx : object {
    [ExtensionAttribute]
public static IProperty`1<HighlighterCountsByKinds> GetHighlighterCountsByKinds(ITextControl textcontrol, HighlighterCountsByKindsTrackerComponent tracker);
}
[ShellComponentAttribute("0")]
public class JetBrains.TextControl.DocumentMarkup.HighlighterCustomization : object {
    protected ITheming myTheming;
    protected ILazy`1<IHighlightingAttributeRegistry> myHighlightingAttributeRegistry;
    [CompilerGeneratedAttribute]
private ISimpleSignal <CustomizationChanged>k__BackingField;
    public ISimpleSignal CustomizationChanged { get; }
    public HighlighterCustomization(Lifetime lifetime, ILazy`1<IHighlightingAttributeRegistry> highlightingAttributeRegistry, ITheming theming);
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_CustomizationChanged();
    private sealed virtual override CustomizedHighlighterAttributes JetBrains.TextControl.DocumentMarkup.IHighlighterCustomization.GetCustomizedRegisteredHighlighterAttributes(string highlighterAttributeId);
    private sealed virtual override CustomizedHighlighterAttributes JetBrains.TextControl.DocumentMarkup.IHighlighterCustomization.GetCustomizedRegisteredHighlighterAttributes(OWORD highlighterAttributeIdHash);
    protected virtual CustomizedHighlighterAttributes ApplyIdeCustomizations(HighlighterAttributes sample, string registeredHighlighterAttributeId);
}
[ShellComponentAttribute("10")]
public class JetBrains.TextControl.DocumentMarkup.HighlighterFontsAndColorsCache : object {
    private SequentialLifetimes myRecalculateColorsSequentialLifetimes;
    private IHighlighterCustomization myHighlighterCustomization;
    private IThreading myThreading;
    private JetHashSet`1<string> myHighlighterAttributeIds;
    private Dictionary`2<string, TextStyle> myTextStyles;
    [CompilerGeneratedAttribute]
private ISimpleSignal <Changed>k__BackingField;
    public ISimpleSignal Changed { get; }
    public IReadOnlyCollection`1<string> HighlighterAttributeIds { get; }
    public HighlighterFontsAndColorsCache(Lifetime lifetime, IHighlighterCustomization highlighterCustomization, ITheming theming, IThreading threading, ITextControlSchemeManager textControlSchemeManager);
    [CompilerGeneratedAttribute]
public ISimpleSignal get_Changed();
    public void AddHighlightingAttributeIds(IEnumerable`1<string> highlightingAttributeIds);
    private void ScheduleRecalculateColors(Lifetime lifetime);
    public IReadOnlyCollection`1<string> get_HighlighterAttributeIds();
    public TextStyle GetTextStyle(string highlighterAttributeId);
    public Nullable`1<JetRgbaColor> GetColor(string highlighterAttributeId);
    public Nullable`1<JetRgbaColor> GetBackgroundColor(string highlighterAttributeId);
    private void RecalculateColors();
    private TextStyle RecalculateColor(string attributeId);
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_1();
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_2();
    [CompilerGeneratedAttribute]
private void <ScheduleRecalculateColors>b__10_0(LifetimeDefinition lifetimeDefinition);
}
public class JetBrains.TextControl.DocumentMarkup.HighlighterGroup : object {
    [CompilerGeneratedAttribute]
private string <GroupId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PresentableName>k__BackingField;
    [CompilerGeneratedAttribute]
private HighlighterGroupPriority <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private IRiderHighlighterNamesProvider <HighlighterNamesProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DemoText>k__BackingField;
    [NotNullAttribute]
public string GroupId { get; }
    [NotNullAttribute]
public string PresentableName { get; }
    public HighlighterGroupPriority Priority { get; }
    [NotNullAttribute]
public IRiderHighlighterNamesProvider HighlighterNamesProvider { get; }
    [CanBeNullAttribute]
public string DemoText { get; }
    public HighlighterGroup(string groupId, string presentableName, HighlighterGroupPriority priority, string demoText, IRiderHighlighterNamesProvider highlighterNamesProvider);
    [CompilerGeneratedAttribute]
public string get_GroupId();
    [CompilerGeneratedAttribute]
public string get_PresentableName();
    [CompilerGeneratedAttribute]
public HighlighterGroupPriority get_Priority();
    [CompilerGeneratedAttribute]
public IRiderHighlighterNamesProvider get_HighlighterNamesProvider();
    [CompilerGeneratedAttribute]
public string get_DemoText();
    public sealed virtual int CompareTo(HighlighterGroup other);
}
[RegisterHighlighterGroupAttribute("General", "General (Rider)", "6")]
[RegisterHighlighterGroupAttribute("Hidden", "Hidden", "6")]
[RegisterHighlighterGroupAttribute("#RIDER_UNSUPPORTED#", "Rider Unsupported", "7")]
public static class JetBrains.TextControl.DocumentMarkup.HighlighterGroupIds : object {
    public static string GENERAL;
    public static string REGEXP;
    public static string STACKTRACE;
    public static string DOT_COVER;
    public static string DPA;
    public static string SQL;
    public static string ROUTE_TEMPLATE;
    public static string URL_STRING;
    public static string CSHARP;
    public static string IL;
    public static string XAML;
    public static string JAVA_SCRIPT;
    public static string TYPE_SCRIPT;
    public static string JSON;
    public static string HTML;
    public static string CSS;
    public static string ASP_NET;
    public static string CPP;
    public static string RIDER_UNSUPPORTED;
    public static string HIDDEN;
    public static string OTHER;
}
public enum JetBrains.TextControl.DocumentMarkup.HighlighterGroupPriority : Enum {
    public int value__;
    public static HighlighterGroupPriority GENERAL_SETTINGS;
    public static HighlighterGroupPriority COMMON_SETTINGS;
    public static HighlighterGroupPriority CODE_SETTINGS;
    public static HighlighterGroupPriority KEY_LANGUAGE_SETTINGS;
    public static HighlighterGroupPriority LANGUAGE_SETTINGS;
    public static HighlighterGroupPriority OTHER_SETTINGS;
    public static HighlighterGroupPriority HIDDEN_SETTINGS;
    public static HighlighterGroupPriority RIDER_UNSUPPORTED;
}
public class JetBrains.TextControl.DocumentMarkup.HighlighterOnRangeMarker : object {
    private AreaType myAreaType;
    [CanBeNullAttribute]
private string myAttributeId;
    [NotNullAttribute]
private HighlighterAttributes myAttributes;
    private HihglighterContext myContextForHacks;
    private ErrorStripeAttributes myErrorStripeAttributes;
    private IGutterMarkType myGutterMarkType;
    [CanBeNullAttribute]
private IHighlighterAdornmentProvider myAdornmentProvider;
    private string myKey;
    private Nullable`1<HighlighterLayer> myLayer;
    private LocalLazy`2<IAdornmentDataModel, HighlighterOnRangeMarker> myLazyAdornmentDataModel;
    private IHighlighterTooltipProvider myTooltipProvider;
    private object myUserData;
    [NotNullAttribute]
public IRangeMarker RangeMarker;
    private AreaType JetBrains.TextControl.DocumentMarkup.IHighlighter.AreaType { get; }
    private string JetBrains.TextControl.DocumentMarkup.IHighlighter.AttributeId { get; }
    private HighlighterAttributes JetBrains.TextControl.DocumentMarkup.IHighlighter.Attributes { get; }
    private IDocument JetBrains.TextControl.Data.IRangeable.Document { get; }
    private ErrorStripeAttributes JetBrains.TextControl.DocumentMarkup.IHighlighter.ErrorStripeAttributes { get; }
    private IGutterMarkType JetBrains.TextControl.DocumentMarkup.IHighlighter.GutterMarkType { get; }
    private IAdornmentDataModel JetBrains.TextControl.DocumentMarkup.IHighlighter.AdornmentDataModel { get; }
    private bool JetBrains.TextControl.Data.IRangeable.IsValid { get; }
    private string JetBrains.TextControl.DocumentMarkup.IHighlighter.Key { get; }
    private Nullable`1<HighlighterLayer> JetBrains.TextControl.DocumentMarkup.IHighlighter.Layer { get; }
    private TextRange JetBrains.TextControl.Data.IRangeable.Range { get; }
    public DocumentRange DocumentRange { get; }
    private object JetBrains.TextControl.DocumentMarkup.IHighlighter.UserData { get; private set; }
    public HighlighterOnRangeMarker(IRangeMarker rangemarker, EitherRegisteredOrCustom& registeredOrCustom, AreaType areaType, string key, Nullable`1<HighlighterLayer> layer, Nullable`1<ErrorStripeAttributes> errorStripeAttributes, IHighlighterTooltipProvider tooltipProvider, IHighlighterAdornmentProvider adornmentProvider, UserDataWrapper userdata, HihglighterContext context);
    private sealed virtual override AreaType JetBrains.TextControl.DocumentMarkup.IHighlighter.get_AreaType();
    private sealed virtual override string JetBrains.TextControl.DocumentMarkup.IHighlighter.get_AttributeId();
    private sealed virtual override HighlighterAttributes JetBrains.TextControl.DocumentMarkup.IHighlighter.get_Attributes();
    private static IAdornmentDataModel CreateAdornmentDataModel(HighlighterOnRangeMarker highlighter);
    private sealed virtual override IDocument JetBrains.TextControl.Data.IRangeable.get_Document();
    private sealed virtual override ErrorStripeAttributes JetBrains.TextControl.DocumentMarkup.IHighlighter.get_ErrorStripeAttributes();
    private sealed virtual override IGutterMarkType JetBrains.TextControl.DocumentMarkup.IHighlighter.get_GutterMarkType();
    private sealed virtual override IAdornmentDataModel JetBrains.TextControl.DocumentMarkup.IHighlighter.get_AdornmentDataModel();
    private sealed virtual override bool JetBrains.TextControl.Data.IRangeable.get_IsValid();
    private sealed virtual override string JetBrains.TextControl.DocumentMarkup.IHighlighter.get_Key();
    private sealed virtual override Nullable`1<HighlighterLayer> JetBrains.TextControl.DocumentMarkup.IHighlighter.get_Layer();
    private void OnUserDataChangedHack(object before, object after);
    private sealed virtual override TextRange JetBrains.TextControl.Data.IRangeable.get_Range();
    public sealed virtual DocumentRange get_DocumentRange();
    private sealed virtual override RichTextBlock JetBrains.TextControl.DocumentMarkup.IHighlighter.TryGetTooltip(HighlighterTooltipKind where);
    private sealed virtual override bool JetBrains.TextControl.DocumentMarkup.IHighlighter.HasTooltip(HighlighterTooltipKind where);
    private sealed virtual override object JetBrains.TextControl.DocumentMarkup.IHighlighter.get_UserData();
    private sealed virtual override void JetBrains.TextControl.DocumentMarkup.IHighlighter.set_UserData(object value);
}
public class JetBrains.TextControl.DocumentMarkup.HighlightInfo : object {
    [NotNullAttribute]
public string AttributeId;
    public AreaType AreaType;
    public DocumentRange DocumentRange;
    public Nullable`1<HighlighterLayer> Layer;
    public UserDataWrapper HighlighterTooltipProvider;
    [CanBeNullAttribute]
public IHighlighterAdornmentProvider AdornmentProvider;
    [CanBeNullAttribute]
public string HighlighterKey;
    public HighlightInfo(string attributeId, DocumentRange documentRange, AreaType areaType, Nullable`1<HighlighterLayer> layer);
    public HighlightInfo(string attributeId, DocumentRange documentRange, AreaType areaType, Nullable`1<HighlighterLayer> layer, UserDataWrapper highlighterTooltipProvider, IHighlighterAdornmentProvider adornmentProvider, string highlighterKey);
    public virtual IHighlighter CreateHighlighter(IDocumentMarkup markup);
    [NotNullAttribute]
public HighlightInfo WithDocument(IDocument document);
}
[ShellComponentAttribute("16")]
public class JetBrains.TextControl.DocumentMarkup.HighlightingsCommitterEventsManager : object {
    private OneToListMap`2<IDocument, IHighlightingsCommitterEventsSink> myHighlightingsCommitterEventsSinks;
    private object mySync;
    public sealed virtual void Advise(Lifetime lifetime, IDocument document, IHighlightingsCommitterEventsSink sink);
    public sealed virtual void FireBeginEvent(IDocument document);
    public sealed virtual void FireEndEvent(IDocument document);
    private FrugalLocalList`1<IHighlightingsCommitterEventsSink> GetSinksForDocument(IDocument document);
}
public class JetBrains.TextControl.DocumentMarkup.HihglighterContext : object {
    [CompilerGeneratedAttribute]
private IShellLocks <Locks>k__BackingField;
    [CompilerGeneratedAttribute]
private IDocumentMarkupManager <MarkupManager>k__BackingField;
    public IShellLocks Locks { get; }
    public IDocumentMarkupManager MarkupManager { get; }
    public HihglighterContext(IDocumentMarkupManager markupManager, IShellLocks locks);
    [CompilerGeneratedAttribute]
public IShellLocks get_Locks();
    [CompilerGeneratedAttribute]
public IDocumentMarkupManager get_MarkupManager();
}
public class JetBrains.TextControl.DocumentMarkup.IconGutterMarkInfo : object {
    [NotNullAttribute]
private IconGutterMarkType myGutterMarkType;
    [NotNullAttribute]
private IHighlighter myHighlighter;
    private IAnchor JetBrains.TextControl.DocumentMarkup.IGutterMarkInfo.Priority { get; }
    private IconId JetBrains.TextControl.DocumentMarkup.IGutterMarkInfo.IconId { get; }
    private RichTextBlock JetBrains.TextControl.DocumentMarkup.IGutterMarkInfo.RichText { get; }
    public IconGutterMarkInfo(IconGutterMarkType gutterMarkType, IHighlighter highlighter);
    public virtual string ToString();
    private sealed virtual override IAnchor JetBrains.TextControl.DocumentMarkup.IGutterMarkInfo.get_Priority();
    private sealed virtual override IEnumerable`1<BulbMenuItem> JetBrains.TextControl.DocumentMarkup.IGutterMarkInfo.GetBulbMenuItems();
    public sealed virtual IGutterMarkHoverHandler GetHoverHandler();
    private sealed virtual override IconId JetBrains.TextControl.DocumentMarkup.IGutterMarkInfo.get_IconId();
    private sealed virtual override RichTextBlock JetBrains.TextControl.DocumentMarkup.IGutterMarkInfo.get_RichText();
}
public abstract class JetBrains.TextControl.DocumentMarkup.IconGutterMarkType : object {
    [CompilerGeneratedAttribute]
private IconId <IconId>k__BackingField;
    [NotNullAttribute]
public IconId IconId { get; }
    [CanBeNullAttribute]
public IAnchor Priority { get; }
    protected IconGutterMarkType(IconId iconId);
    [CompilerGeneratedAttribute]
public IconId get_IconId();
    public virtual IAnchor get_Priority();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<BulbMenuItem> GetBulbMenuItems(IHighlighter highlighter);
    [NotNullAttribute]
public sealed virtual IGutterMarkInfo GetGutterMarkInfo(IHighlighter highlighter);
    [CanBeNullAttribute]
public virtual IGutterMarkHoverHandler GetHoverHandler(IHighlighter highlighter);
}
public interface JetBrains.TextControl.DocumentMarkup.IDefaultHighlighterTooltipProvider {
}
public interface JetBrains.TextControl.DocumentMarkup.IDocumentMarkup {
    [NotNullAttribute]
public IDocument Document { get; }
    public bool HasSkippedHighlightings { get; public set; }
    public bool CouldHaveSkippedHighlightings { get; public set; }
    public abstract virtual IDocument get_Document();
    [NotNullAttribute]
public abstract virtual IHighlighter AddHighlighterCustom(string key, TextRange range, AreaType areaType, Nullable`1<HighlighterLayer> layer, HighlighterAttributes attributes, ErrorStripeAttributes errorStripeAttributes, IHighlighterTooltipProvider tooltip, IHighlighterAdornmentProvider adornmentProvider, UserDataWrapper userdata);
    [NotNullAttribute]
public abstract virtual IHighlighter AddHighlighterRegistered(string key, TextRange range, AreaType areaType, Nullable`1<HighlighterLayer> layerOverride, string attributeId, Nullable`1<ErrorStripeAttributes> errorStripeAttributesOverride, IHighlighterTooltipProvider tooltip, IHighlighterAdornmentProvider adornmentProvider, UserDataWrapper userdata);
    public abstract virtual IEnumerable`1<IHighlighter> GetHighlightersEnumerable(OnWriteLockRequestedBehavior behavior, Func`2<IHighlighter, bool> highlighterFilter);
    public abstract virtual IEnumerable`1<IHighlighter> GetHighlightersEnumerable(string key, OnWriteLockRequestedBehavior behavior, Func`2<IHighlighter, bool> highlighterFilter);
    public abstract virtual IEnumerable`1<IHighlighter> GetHighlightersOver(TextRange textRange, OnWriteLockRequestedBehavior behavior, Func`2<IHighlighter, bool> highlighterFilter);
    public abstract virtual bool RemoveHighlighter(IHighlighter highlighter);
    public abstract virtual Task`1<bool> RemoveHighlighterAsync(IHighlighter highlighter);
    public abstract virtual void RemoveHighlighters(string key);
    public abstract virtual Task`1<bool> RemoveHighlightersAsync(string key);
    public abstract virtual void RemoveAllHighlighters();
    public abstract virtual IDisposable BatchChangeCookie(string name);
    public abstract virtual bool get_HasSkippedHighlightings();
    public abstract virtual void set_HasSkippedHighlightings(bool value);
    public abstract virtual bool get_CouldHaveSkippedHighlightings();
    public abstract virtual void set_CouldHaveSkippedHighlightings(bool value);
}
public interface JetBrains.TextControl.DocumentMarkup.IDocumentMarkupEvents {
    public abstract virtual void OnDocumentMarkupChanged(IDocumentMarkup markup, ICollection`1<IHighlighter> added, ICollection`1<IHighlighter> removed, ICollection`1<IHighlighter> modified);
    public abstract virtual void OnDocumentMarkupReset(IDocumentMarkup newMarkup);
}
public interface JetBrains.TextControl.DocumentMarkup.IDocumentMarkupImpl {
    public HihglighterContext Context { get; }
    public abstract virtual HihglighterContext get_Context();
    public abstract virtual void FireHighlighterModified(IHighlighter highlighter);
    public abstract virtual void OnBeforeDocumentChanged(DocumentChange change);
    public abstract virtual void OnDocumentChanged(DocumentChange change);
    public abstract virtual void RemoveInvalidHighlighters();
}
public interface JetBrains.TextControl.DocumentMarkup.IDocumentMarkupManager {
    [NotNullAttribute]
public abstract virtual IDocumentMarkup GetMarkupModel(IDocument document);
    [CanBeNullAttribute]
public abstract virtual IDocumentMarkup TryGetMarkupModel(IDocument document);
    [NotNullAttribute]
public abstract virtual IDocumentMarkup GetMarkupModelAndKeepAlive(Lifetime lifetime, IDocument document);
    public abstract virtual void AdviseMarkupEvents(Lifetime lifetime, IDocument document, IDocumentMarkupEvents sink);
}
public interface JetBrains.TextControl.DocumentMarkup.IHighlighterCustomization {
    [NotNullAttribute]
public ISimpleSignal CustomizationChanged { get; }
    public abstract virtual ISimpleSignal get_CustomizationChanged();
    public abstract virtual CustomizedHighlighterAttributes GetCustomizedRegisteredHighlighterAttributes(string highlighterAttributeId);
    public abstract virtual CustomizedHighlighterAttributes GetCustomizedRegisteredHighlighterAttributes(OWORD highlighterAttributeIdHash);
}
[ExtensionAttribute]
public static class JetBrains.TextControl.DocumentMarkup.IHighlighterEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static Exception AddData_Highlighter(Exception thіs, IHighlighter highlighter, string dataname);
}
public interface JetBrains.TextControl.DocumentMarkup.IHighlighterTooltipProvider {
    [CanBeNullAttribute]
[GuardAttribute("1")]
public abstract virtual RichTextBlock TryGetTooltip(IHighlighter highlighter, HighlighterTooltipKind where);
    public abstract virtual bool ShouldShowTooltip(IHighlighter highlighter, HighlighterTooltipKind where);
}
[ExtensionAttribute]
public static class JetBrains.TextControl.DocumentMarkup.IHighlightingAttributeRegistryEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static HighlighterAttributes GetAttributes(IHighlightingAttributeRegistry thіs, Type typeofHighlighterAttributeMarkedClass);
    [ExtensionAttribute]
[NotNullAttribute]
public static HighlighterAttributes GetAttributes(IHighlightingAttributeRegistry thіs);
}
public interface JetBrains.TextControl.DocumentMarkup.IHighlightingsCommitterEventsManager {
    public abstract virtual void Advise(Lifetime lifetime, IDocument document, IHighlightingsCommitterEventsSink sink);
    public abstract virtual void FireBeginEvent(IDocument document);
    public abstract virtual void FireEndEvent(IDocument document);
}
public interface JetBrains.TextControl.DocumentMarkup.IHighlightingsCommitterEventsSink {
    public abstract virtual void OnBeginCommit();
    public abstract virtual void OnEndCommit();
}
public interface JetBrains.TextControl.DocumentMarkup.IntraTextAdornments.IVirtualFormatterOptionsPage {
    public string Id { get; }
    public string LanguageName { get; }
    public abstract virtual string get_Id();
    public abstract virtual string get_LanguageName();
}
public interface JetBrains.TextControl.DocumentMarkup.IRiderHighlighterNamesProvider {
    [NotNullAttribute]
public abstract virtual string GetHighlighterTag(string attributeId);
    [NotNullAttribute]
public abstract virtual string GetPresentableName(string attributeId);
    [NotNullAttribute]
public abstract virtual string GetExternalName(string attributeId);
}
public interface JetBrains.TextControl.DocumentMarkup.IRiderRainbowHighlighterProvider {
    [NotNullAttribute]
public abstract virtual List`1<string> GetRainbowAttributeIds();
}
public interface JetBrains.TextControl.DocumentMarkup.IStructuredHighlighterData {
    public abstract virtual bool StructureEquals(IStructuredHighlighterData other);
}
[ExtensionAttribute]
public static class JetBrains.TextControl.DocumentMarkup.LineMarkers.HighlighterLineMarkerEx : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IActiveLineMarkerInfo GetActiveLineMarkerInfo(IHighlighter highlighter);
}
public interface JetBrains.TextControl.DocumentMarkup.LineMarkers.IActiveLineMarkerInfo {
    [CanBeNullAttribute]
public string Tooltip { get; }
    public abstract virtual string get_Tooltip();
    [CanBeNullAttribute]
public abstract virtual ExecutableItem LeftClick();
}
public interface JetBrains.TextControl.DocumentMarkup.LineMarkers.ILineMarkerInfo {
    [CanBeNullAttribute]
public string RendererId { get; }
    public int Thickness { get; }
    public LineMarkerPosition Position { get; }
    public abstract virtual string get_RendererId();
    public abstract virtual int get_Thickness();
    public abstract virtual LineMarkerPosition get_Position();
}
public enum JetBrains.TextControl.DocumentMarkup.LineMarkers.LineMarkerPosition : Enum {
    public int value__;
    public static LineMarkerPosition LEFT;
    public static LineMarkerPosition RIGHT;
    public static LineMarkerPosition CUSTOM;
}
[ShellComponentAttribute("20")]
public class JetBrains.TextControl.DocumentMarkup.MapTextControlIdsToPushToHintState : object {
    public IDictionaryEvents`2<RunningTextControlId, IProperty`1<PushToHintState>> PushToHintStates;
    private ReadonlyToken myReadonlyToken;
    public MapTextControlIdsToPushToHintState(Lifetime lifetime, RunningTextControls textControls, IShellLocks locks, ILogger logger);
}
public class JetBrains.TextControl.DocumentMarkup.NoHighlighterTooltip : object {
    [NotNullAttribute]
public static NoHighlighterTooltip Default;
    private static NoHighlighterTooltip();
    public virtual string ToString();
    private sealed virtual override RichTextBlock JetBrains.TextControl.DocumentMarkup.IHighlighterTooltipProvider.TryGetTooltip(IHighlighter highlighter, HighlighterTooltipKind where);
    private sealed virtual override bool JetBrains.TextControl.DocumentMarkup.IHighlighterTooltipProvider.ShouldShowTooltip(IHighlighter highlighter, HighlighterTooltipKind where);
}
public class JetBrains.TextControl.DocumentMarkup.PrefixBasedSettingsNamesProvider : RiderDefaultHighlighterNamesProvider {
    [CompilerGeneratedAttribute]
private string <AttributeIdPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagPrefix>k__BackingField;
    public string AttributeIdPrefix { get; }
    public string TagPrefix { get; }
    public PrefixBasedSettingsNamesProvider(string attributeIdPrefix, string tagPrefix);
    [CompilerGeneratedAttribute]
public string get_AttributeIdPrefix();
    [CompilerGeneratedAttribute]
public string get_TagPrefix();
    public virtual string GetHighlighterTag(string attributeId);
    public virtual string GetPresentableName(string attributeId);
}
public class JetBrains.TextControl.DocumentMarkup.PresentationObject : object {
    [CompilerGeneratedAttribute]
private IconId <IconId>k__BackingField;
    [CompilerGeneratedAttribute]
private RichTextBlock <RichText>k__BackingField;
    [CompilerGeneratedAttribute]
private IAnchor <Anchor>k__BackingField;
    public IconId IconId { get; }
    public RichTextBlock RichText { get; }
    public IAnchor Anchor { get; }
    public PresentationObject(IconId iconId, RichTextBlock richText, IAnchor anchor);
    [CompilerGeneratedAttribute]
public IconId get_IconId();
    [CompilerGeneratedAttribute]
public RichTextBlock get_RichText();
    [CompilerGeneratedAttribute]
public IAnchor get_Anchor();
}
[RdModelAttribute]
public class JetBrains.TextControl.DocumentMarkup.PushToHintTransport : RdReflectionBindableBase {
    public static PropertyId`1<PushToHintTransport> PropertyBagId;
    public RdReflectProperty`1<PushToHintState> BwdPushToHintState;
    private static PushToHintTransport();
}
[AttributeUsageAttribute("4")]
public class JetBrains.TextControl.DocumentMarkup.RegisterHighlighterGroupAttribute : PartAttribute {
    [CompilerGeneratedAttribute]
private string <GroupId>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PresentableName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <RiderPresentableNameResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RiderPresentableNameResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private HighlighterGroupPriority <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DemoText>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <RiderNamesProviderType>k__BackingField;
    [NotNullAttribute]
public string GroupId { get; }
    [CanBeNullAttribute]
public Type Language { get; public set; }
    [NotNullAttribute]
public string PresentableName { get; }
    [CanBeNullAttribute]
public Type RiderPresentableNameResourceType { get; public set; }
    [CanBeNullAttribute]
public string RiderPresentableNameResourceName { get; public set; }
    public HighlighterGroupPriority Priority { get; }
    [CanBeNullAttribute]
public string DemoText { get; public set; }
    [CanBeNullAttribute]
public Type RiderNamesProviderType { get; public set; }
    public RegisterHighlighterGroupAttribute(string GroupId, string PresentableName, HighlighterGroupPriority Priority);
    [CompilerGeneratedAttribute]
[UsedImplicitlyAttribute]
public string get_GroupId();
    [CompilerGeneratedAttribute]
[UsedImplicitlyAttribute]
public Type get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(Type value);
    [CompilerGeneratedAttribute]
[UsedImplicitlyAttribute]
public string get_PresentableName();
    [CompilerGeneratedAttribute]
[UsedImplicitlyAttribute]
public Type get_RiderPresentableNameResourceType();
    [CompilerGeneratedAttribute]
public void set_RiderPresentableNameResourceType(Type value);
    [CompilerGeneratedAttribute]
[UsedImplicitlyAttribute]
public string get_RiderPresentableNameResourceName();
    [CompilerGeneratedAttribute]
public void set_RiderPresentableNameResourceName(string value);
    [CompilerGeneratedAttribute]
[UsedImplicitlyAttribute]
public HighlighterGroupPriority get_Priority();
    [CompilerGeneratedAttribute]
[UsedImplicitlyAttribute]
public string get_DemoText();
    [CompilerGeneratedAttribute]
public void set_DemoText(string value);
    [CompilerGeneratedAttribute]
[UsedImplicitlyAttribute]
public Type get_RiderNamesProviderType();
    [CompilerGeneratedAttribute]
public void set_RiderNamesProviderType(Type value);
}
public class JetBrains.TextControl.DocumentMarkup.RiderDefaultHighlighterNamesProvider : object {
    public static string ResharperPrefix;
    public virtual string GetHighlighterTag(string attributeId);
    public virtual string GetPresentableName(string attributeId);
    public virtual string GetExternalName(string attributeId);
    [PureAttribute]
[NotNullAttribute]
protected static string ToUpperCaseDashSeparatedString(string name);
    [NotNullAttribute]
protected static string RemovePrefix(string attributeId, string prefix);
    [NotNullAttribute]
protected static string RemoveSuffix(string attributeId, string suffix);
}
public class JetBrains.TextControl.DocumentMarkup.StaticHighlighterTooltip : object {
    [NotNullAttribute]
public RichTextBlock StaticText;
    public StaticHighlighterTooltip(string plaintext);
    public StaticHighlighterTooltip(RichText plaintext);
    public StaticHighlighterTooltip(RichTextBlock statictext);
    public virtual string ToString();
    private sealed virtual override RichTextBlock JetBrains.TextControl.DocumentMarkup.IHighlighterTooltipProvider.TryGetTooltip(IHighlighter highlighter, HighlighterTooltipKind where);
    private sealed virtual override bool JetBrains.TextControl.DocumentMarkup.IHighlighterTooltipProvider.ShouldShowTooltip(IHighlighter highlighter, HighlighterTooltipKind where);
}
public interface JetBrains.TextControl.DocumentMarkup.VirtualIndents.IVirtualIndentingHighlighting {
    public int RelativeSpaces { get; }
    public int AbsoluteSpaces { get; }
    public bool OnEmptyBlankLine { get; }
    public bool HasParent { get; }
    public int StartOffset { get; }
    public Nullable`1<int> ParentStartOffset { get; }
    public bool OnlyFixForInlayHints { get; }
    public string RealSpaces { get; }
    public abstract virtual int get_RelativeSpaces();
    public abstract virtual int get_AbsoluteSpaces();
    public abstract virtual bool get_OnEmptyBlankLine();
    public abstract virtual bool get_HasParent();
    public abstract virtual int get_StartOffset();
    public abstract virtual Nullable`1<int> get_ParentStartOffset();
    public abstract virtual bool get_OnlyFixForInlayHints();
    public abstract virtual string get_RealSpaces();
}
[ShellComponentAttribute("10")]
public class JetBrains.TextControl.DocumentMarkup.VisibleDocumentsMarkupKeeper : object {
    public VisibleDocumentsMarkupKeeper(Lifetime lifetime, IShellLocks locks, ITextControlManager textControlManager, IDocumentMarkupManager markupManager);
}
public class JetBrains.TextControl.DummyTextControlPopupWindowContextFactory : TextControlPopupWindowContextFactoryBase {
    private ITextControl myTextControl;
    public DummyTextControlPopupWindowContextFactory(ITextControl textControl);
    protected virtual ITextControlPopupWindowContext ForBeginningOfLineCore(Lifetime lifetime, DocOffsetAndVirtual pos);
    protected virtual ITextControlPopupWindowContext ForCaretCore(Lifetime lifetime);
    protected virtual ITextControlPopupWindowContext ForRangeCore(Lifetime lifetime, TextRange range);
}
[ShellComponentAttribute("16")]
public class JetBrains.TextControl.ErrorStripe.ErrorStripeAvailableLayouts : object {
    public ImmutableArray`1<ErrorStripeLayout> AvailableLayouts { get; }
    public virtual ImmutableArray`1<ErrorStripeLayout> get_AvailableLayouts();
}
public static class JetBrains.TextControl.ErrorStripe.ErrorStripeBackendServices : object {
    private static GroupingEventProlongation IntervalTossMarkersIntoSlotsProlongation;
    private static TimeSpan IntervalTossMarkersIntoSlotsWhenActive;
    private static TimeSpan IntervalTossMarkersIntoSlotsWhenInactive;
    private static ErrorStripeBackendServices();
    public static void Bind(Lifetime lifetime, ErrorStripeTransport transport, ITextControl tc, IShellLocks locks, ISettingsStore settings, IDocumentMarkupManager markupman, ChangeManager changeman, IIsApplicationActiveState appactive, ILogger logger);
    private static DocOffset GetOffsetForMarkerSlot(HighlighterExtracted& highlighter, SlotsAllocation allocation, IDocument document);
    [CompilerGeneratedAttribute]
internal static void <Bind>g__CommitCurrentSlot|3_24(<>c__DisplayClass3_5& );
}
[ExtensionAttribute]
public static class JetBrains.TextControl.ErrorStripe.ErrorStripeIndicatorTransportEx : object {
    [ExtensionAttribute]
public static void AdviseShowContextMenu(ErrorStripeIndicatorTransport indicator, Lifetime lifetime, IActionGroupDef group, JetPopupMenus jpms, IShellLocks locks, IActionManager actionman, ITextControl textcontrol, ILogger logger, IEnumerable`1<IDataRule> datarulesAdditional);
    [ExtensionAttribute]
public static void AdviseShowContextMenu2(ErrorStripeIndicatorTransport indicator, Lifetime lifetime, JetPopupMenus jpms, ITextControl textcontrol, IShellLocks locks, IActionManager actionman, ILogger logger);
}
public interface JetBrains.TextControl.ErrorStripe.IErrorStripeAvailableLayouts {
    public ImmutableArray`1<ErrorStripeLayout> AvailableLayouts { get; }
    public abstract virtual ImmutableArray`1<ErrorStripeLayout> get_AvailableLayouts();
}
public abstract class JetBrains.TextControl.ErrorStripe.NavigateErrorStripeAction : object {
    private ErrorStripeMarkerCategories myCategories;
    private bool myIsNextNotPrev;
    protected NavigateErrorStripeAction(bool isNextNotPrev, ErrorStripeMarkerCategories categories);
    public static void NavigateHighlighting(ITextControl tc, bool isNextNotPrev, ErrorStripeMarkerCategories categoriesToInclude, IDocumentMarkupManager markupman, HighlighterCountsByKindsTrackerComponent highlighterCountsByKindsTrackerComponent);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
[ActionAttribute("JetBrains.TextControl.Resources.Strings", "GotoNextCodeAnalysisHighlightingActionText")]
public class JetBrains.TextControl.ErrorStripe.NavigateToNextCodeAnalysisErrorStripeMarkerAction : NavigateErrorStripeAction {
}
[ActionAttribute("ErrorStripeControl.Popup.NavigateToNextHighlighting", "JetBrains.TextControl.Resources.Strings", "GotoNextHighlightingActionText")]
public class JetBrains.TextControl.ErrorStripe.NavigateToNextHighlightingAction : NavigateErrorStripeAction {
}
[ActionAttribute("JetBrains.TextControl.Resources.Strings", "GotoNextHighlightedUsageActionText")]
public class JetBrains.TextControl.ErrorStripe.NavigateToNextUsageAction : NavigateErrorStripeAction {
}
[ActionAttribute("JetBrains.TextControl.Resources.Strings", "GotoPreviousCodeAnalysisHighlightingActionText")]
public class JetBrains.TextControl.ErrorStripe.NavigateToPrevCodeAnalysisErrorStripeMarkerAction : NavigateErrorStripeAction {
}
[ActionAttribute("ErrorStripeControl.Popup.NavigateToPrevHighlighting", "JetBrains.TextControl.Resources.Strings", "GotoPreviousHighlightingActionText")]
public class JetBrains.TextControl.ErrorStripe.NavigateToPrevHighlightingAction : NavigateErrorStripeAction {
}
[ActionAttribute("JetBrains.TextControl.Resources.Strings", "GotoPreviousHighlightedUsageActionText")]
public class JetBrains.TextControl.ErrorStripe.NavigateToPrevUsageAction : NavigateErrorStripeAction {
}
[NullableContextAttribute("1")]
public interface JetBrains.TextControl.IReadonlyTypingContext {
    public ITextControl TextControl { get; }
    public char Char { get; }
    public abstract virtual ITextControl get_TextControl();
    public abstract virtual char get_Char();
}
public interface JetBrains.TextControl.ISyntaxAttributeHighlighting {
    public abstract virtual TextRange OnDocumentChange(ITextControl textControl, DocumentChange args);
    public abstract virtual TextRange GetAttributeIdForOffset(ITextControl textControl, DocOffset offset, String& attributes);
}
public interface JetBrains.TextControl.ISyntaxHighlighting {
    public abstract virtual TextRange OnDocumentChange(ITextControl textControl, DocumentChange args);
    public abstract virtual TextRange GetAttributesForOffset(ITextControl textControl, DocOffset offset, HighlighterAttributes& attributes);
}
public interface JetBrains.TextControl.ITextControl {
    public RunningTextControlId Id { get; }
    [NotNullAttribute]
[GuardAttribute("-1")]
public ITextControlCaret Caret { get; }
    public ITextControlCoords Coords { get; }
    public Lifetime Lifetime { get; }
    [NotNullAttribute]
[GuardAttribute("-1")]
public IDocument Document { get; }
    [NotNullAttribute]
[GuardAttribute("-1")]
public ITextControlScrolling Scrolling { get; }
    [NotNullAttribute]
[GuardAttribute("-1")]
public ITextControlSelection Selection { get; }
    [NotNullAttribute]
[GuardAttribute("-1")]
public ITextControlWindow Window { get; }
    [NotNullAttribute]
public ITextControlOptions Options { get; }
    [NotNullAttribute]
public ITextControlPopupWindowContextFactory PopupWindowContextFactory { get; }
    [NotNullAttribute]
public ErrorStripeTransport ErrorStripe { get; }
    public TransportTextControl Transport { get; }
    public abstract virtual RunningTextControlId get_Id();
    public abstract virtual ITextControlCaret get_Caret();
    public abstract virtual ITextControlCoords get_Coords();
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual IDocument get_Document();
    public abstract virtual ITextControlScrolling get_Scrolling();
    public abstract virtual ITextControlSelection get_Selection();
    public abstract virtual ITextControlWindow get_Window();
    public abstract virtual ITextControlOptions get_Options();
    public abstract virtual ITextControlPopupWindowContextFactory get_PopupWindowContextFactory();
    public abstract virtual ErrorStripeTransport get_ErrorStripe();
    public abstract virtual TransportTextControl get_Transport();
    public abstract virtual void EmulateAction(string actionid);
    public abstract virtual void EmulateTyping(char c);
    [GuardAttribute("1")]
public abstract virtual void FillVirtualSpaceUntilCaret();
    [NotNullAttribute]
[ObsoleteAttribute("I hope we can implement this using the ICommandProcessor::BeginBatchTextChange.")]
public abstract virtual IDisposable GetUpdateCookie(string description);
}
public interface JetBrains.TextControl.ITextControlCaret {
    [NotNullAttribute]
public IProperty`1<ITextControlPos> Position { get; }
    [NotNullAttribute]
public ITextControl TextControl { get; }
    public abstract virtual IProperty`1<ITextControlPos> get_Position();
    public abstract virtual ITextControl get_TextControl();
    public abstract virtual void MoveTo(ITextControlPos position, CaretVisualPlacement visualplace);
    public abstract virtual void EnsureVisible();
}
[ExtensionAttribute]
public static class JetBrains.TextControl.ITextControlCaretEx : object {
    [ExtensionAttribute]
[PureAttribute]
public static DocOffset DocOffset(ITextControlCaret caret);
    [ExtensionAttribute]
[PureAttribute]
public static DocumentOffset DocumentOffset(ITextControlCaret caret);
    [ExtensionAttribute]
public static void MoveTo(ITextControlCaret caret, DocOffsetAndVirtual position, CaretVisualPlacement visualplace);
    [ExtensionAttribute]
public static void MoveTo(ITextControlCaret caret, DocOffset offset, CaretVisualPlacement visualplace);
    [ExtensionAttribute]
public static void MoveTo(ITextControlCaret caret, int offset, CaretVisualPlacement visualplace);
    [ExtensionAttribute]
public static void MoveTo(ITextControlCaret caret, DocumentOffset offset, CaretVisualPlacement visualplace);
    [ExtensionAttribute]
public static void MoveTo(ITextControlCaret caret, TextControlLineColumn posTxt, CaretVisualPlacement visualplace);
    [ExtensionAttribute]
public static void MoveTo(ITextControlCaret caret, DocumentCoords posDoc, CaretVisualPlacement visualplace);
    [ExtensionAttribute]
public static void MoveTo(ITextControlCaret caret, Int32`1<DocLine> line, Int32`1<DocColumn> column, CaretVisualPlacement visualplace);
    [ExtensionAttribute]
[PureAttribute]
public static int Offset(ITextControlCaret caret);
}
public interface JetBrains.TextControl.ITextControlHandlerContext {
    [NotNullAttribute]
public ITextControl TextControl { get; }
    public abstract virtual ITextControl get_TextControl();
    public abstract virtual void CallNext();
    public abstract virtual EnsureWritableResult EnsureWritable();
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.TextControl.ITextControlManager {
    [NotNullAttribute]
public IDictionaryEvents`2<ClientId, ITextControl> CurrentFrameTextControlPerClient { get; }
    [ObsoleteAttribute("Valid only for ClientId.Local (i.e. local only IDE user), Use CurrentFrameTextControlPerClient instead to support any client including remote")]
[NotNullAttribute]
public IProperty`1<ITextControl> CurrentFrameTextControl { get; }
    [NotNullAttribute]
public IDictionaryEvents`2<ClientId, ITextControl> FocusedTextControlPerClient { get; }
    [ObsoleteAttribute("Valid only for ClientId.Local (i.e. local only IDE user), Use FocusedTextControlPerClient instead to support any client including remote")]
public IProperty`1<ITextControl> FocusedTextControl { get; }
    [NotNullAttribute]
public IDictionaryEvents`2<ClientId, ITextControl> LastFocusedTextControlPerClient { get; }
    [NotNullAttribute]
[ObsoleteAttribute("Valid only for ClientId.Local (i.e. local only IDE user), Use LastFocusedTextControlPerClient instead to support any client including remote")]
public IProperty`1<ITextControl> LastFocusedTextControl { get; }
    [NotNullAttribute]
public TextControlManagerDerivativesLegacy Legacy { get; }
    [NotNullAttribute]
public ICollectionEvents`1<ITextControl> TextControls { get; }
    [NotNullAttribute]
public IDictionaryEvents`2<RunningTextControlId, TransportTextControl> TransportTextControls { get; }
    [NotNullAttribute]
public ICollectionEvents`1<ITextControl> VisibleTextControls { get; }
    public abstract virtual IDictionaryEvents`2<ClientId, ITextControl> get_CurrentFrameTextControlPerClient();
    public abstract virtual IProperty`1<ITextControl> get_CurrentFrameTextControl();
    public abstract virtual IDictionaryEvents`2<ClientId, ITextControl> get_FocusedTextControlPerClient();
    public abstract virtual IProperty`1<ITextControl> get_FocusedTextControl();
    public abstract virtual IDictionaryEvents`2<ClientId, ITextControl> get_LastFocusedTextControlPerClient();
    public abstract virtual IProperty`1<ITextControl> get_LastFocusedTextControl();
    public abstract virtual TextControlManagerDerivativesLegacy get_Legacy();
    public abstract virtual ICollectionEvents`1<ITextControl> get_TextControls();
    public abstract virtual IDictionaryEvents`2<RunningTextControlId, TransportTextControl> get_TransportTextControls();
    public abstract virtual ICollectionEvents`1<ITextControl> get_VisibleTextControls();
    [NotNullAttribute]
[GuardAttribute("1")]
public abstract virtual ITextControl CreateTextControl(Lifetime lifetime, IDocument document);
    [CanBeNullAttribute]
public abstract virtual ITextControl TryGetTextControlById(RunningTextControlId tcid);
}
public interface JetBrains.TextControl.ITextControlPopupWindowContext {
    public ITextControl TextControl { get; }
    public DocumentRange DocumentRange { get; }
    public abstract virtual ITextControl get_TextControl();
    public abstract virtual DocumentRange get_DocumentRange();
}
public interface JetBrains.TextControl.ITextControlPopupWindowContextFactory {
    [ObsoleteAttribute("Use overloads which give PopupWindowContextSource.")]
public abstract virtual ITextControlPopupWindowContext CreatePopupWindowContext(Lifetime lifetimeOuter);
    [ObsoleteAttribute("Use overloads which give PopupWindowContextSource.")]
public abstract virtual ITextControlPopupWindowContext CreatePopupWindowContext(Lifetime lifetimeOuter, TextRange textRange);
    [ObsoleteAttribute("Use overloads which give PopupWindowContextSource.")]
public abstract virtual ITextControlPopupWindowContext ForBeginningOfLine(Lifetime lifetimeOuter, ITextControlPos pos);
    [NotNullAttribute]
[PureAttribute]
public abstract virtual PopupWindowContextSource ForBeginningOfLine(DocOffsetAndVirtual pos);
    [NotNullAttribute]
[PureAttribute]
public abstract virtual PopupWindowContextSource ForCaret();
    [NotNullAttribute]
[PureAttribute]
public abstract virtual PopupWindowContextSource ForRange(TextRange range);
}
public interface JetBrains.TextControl.ITextControlScrolling {
    [NotNullAttribute]
public IProperty`1<ImmutableArray`1<TextRange>> CollapsedViewportRanges { get; }
    [NotNullAttribute]
public ITextControl TextControl { get; }
    [NotNullAttribute]
public IProperty`1<TextControlPosRange> ViewportRange { get; }
    public abstract virtual IProperty`1<ImmutableArray`1<TextRange>> get_CollapsedViewportRanges();
    public abstract virtual ITextControl get_TextControl();
    public abstract virtual IProperty`1<TextControlPosRange> get_ViewportRange();
    public abstract virtual void ScrollTo(ITextControlPos position, TextControlScrollType scrollType);
}
[ExtensionAttribute]
public static class JetBrains.TextControl.ITextControlScrollingEx : object {
    private static IComparer`1<TextRange> myCompareRangesByStart;
    private static ITextControlScrollingEx();
    [ExtensionAttribute]
public static bool IsDocumentRangeVisible(ITextControlScrolling thіs, TextRange range);
}
public interface JetBrains.TextControl.ITextControlSelection {
    [NotNullAttribute]
public IProperty`1<IEquatableList`1<TextControlPosRange>> Ranges { get; }
    [NotNullAttribute]
public ITextControl TextControl { get; }
    public abstract virtual IProperty`1<IEquatableList`1<TextControlPosRange>> get_Ranges();
    public abstract virtual ITextControl get_TextControl();
}
[ExtensionAttribute]
public static class JetBrains.TextControl.ITextControlSelectionEx : object {
    [ExtensionAttribute]
public static void Collapse(ITextControlSelection selection, SelectionEnd collapseToWhichEnd);
    [ExtensionAttribute]
public static void Delete(ITextControlSelection selection);
    [ExtensionAttribute]
public static DocOffsetAndVirtualRange[] ToDocOffsetAndVirtualRanges(ITextControlSelection selection);
    [ExtensionAttribute]
public static void ExtendToWholeDocLines(ITextControlSelection selection);
    [MustDisposeResourceAttribute]
[NotNullAttribute]
public static IDisposable Save(ITextControlSelection selection);
    [ExtensionAttribute]
public static void SetRanges(ITextControlSelection selection, TextControlPosRange[] ranges);
}
[ZoneDefinitionAttribute]
public interface JetBrains.TextControl.ITextControlsZone {
}
public interface JetBrains.TextControl.ITextControlWindow {
    public WindowFrame Frame { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsFocused { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsVisibleOnScreen { get; }
    [ObsoleteAttribute("Use MouseAndModifierKeys.")]
public ISignal`1<EventArgs`1<ITextControl>> Keyboard { get; }
    [ObsoleteAttribute("Use MouseAndModifierKeys.")]
public ISignal`1<TextControlMouseEventArgs> MouseDown { get; }
    [ObsoleteAttribute("Use MouseAndModifierKeys.")]
public ISignal`1<TextControlMouseEventArgs> MouseMove { get; }
    [ObsoleteAttribute("Use MouseAndModifierKeys.")]
public ISignal`1<TextControlMouseEventArgs> MouseUp { get; }
    public IProperty`1<TextControlMouseEventArgs> MouseAndModifierKeys { get; }
    [NotNullAttribute]
public ITextControl TextControl { get; }
    public abstract virtual WindowFrame get_Frame();
    public abstract virtual IProperty`1<bool> get_IsFocused();
    public abstract virtual IProperty`1<bool> get_IsVisibleOnScreen();
    public abstract virtual ISignal`1<EventArgs`1<ITextControl>> get_Keyboard();
    public abstract virtual ISignal`1<TextControlMouseEventArgs> get_MouseDown();
    public abstract virtual ISignal`1<TextControlMouseEventArgs> get_MouseMove();
    public abstract virtual ISignal`1<TextControlMouseEventArgs> get_MouseUp();
    public abstract virtual IProperty`1<TextControlMouseEventArgs> get_MouseAndModifierKeys();
    public abstract virtual ITextControl get_TextControl();
    [NotNullAttribute]
public abstract virtual IAnchoringRect CreateViewportAnchor(Lifetime lifetime);
    public abstract virtual void Focus();
    public abstract virtual void Show();
}
[ExtensionAttribute]
public static class JetBrains.TextControl.ITextControlWindowEx : object {
    [ExtensionAttribute]
public static void ShowOrFocus(ITextControlWindow winmodel, bool focus);
}
public interface JetBrains.TextControl.ITypingContext {
    public char Char { get; }
    public abstract virtual char get_Char();
    [NullableContextAttribute("1")]
public abstract virtual void QueueCommand(Action action);
}
public interface JetBrains.TextControl.JetActionMargin.IJetActionEditorMarginBehavior {
    public abstract virtual bool IsApplicable();
    [NotNullAttribute]
public abstract virtual IProperty`1<bool> IsEnabledLive(Lifetime lifetime, ContextRange contextRange);
    public abstract virtual bool IsEnabledTransient(ContextRange contextRange);
    [CanBeNullAttribute]
public abstract virtual PopupWindowContextSource TryGetPopupWindowContext(ITextControl textControl, DocOffsetAndVirtual line, JetThickness margin);
}
[ExtensionAttribute]
public static class JetBrains.TextControl.JetActionMargin.IJetActionEditorMarginBehaviorEx : object {
    public static Key`1<object> SuppressJetActionBarKey;
    private static IJetActionEditorMarginBehaviorEx();
    [ExtensionAttribute]
public static bool IsGutterMarginEnabledAndNotSuppressed(IJetActionEditorMarginBehavior marginBehavior, ITextControl textControl);
    public static bool IsJetActionBarSuppressedByUserData(ITextControl tc);
}
[ShellComponentAttribute("16")]
public class JetBrains.TextControl.JetActionMargin.JetActionEditorMarginBehavior : object {
    private IMainWindowPopupWindowContext myMainWindowPopupWindowContext;
    private static ILogger ourLog;
    [NotNullAttribute]
private Property`1<bool> myAlwaysDisabled;
    public JetActionEditorMarginBehavior(IMainWindowPopupWindowContext mainWindowPopupWindowContext);
    private static JetActionEditorMarginBehavior();
    public virtual bool IsApplicable();
    public virtual IProperty`1<bool> IsEnabledLive(Lifetime lifetime, ContextRange contextRange);
    public virtual bool IsEnabledTransient(ContextRange contextRange);
    public virtual PopupWindowContextSource TryGetPopupWindowContext(ITextControl textcontrol, DocOffsetAndVirtual line, JetThickness margin);
}
public class JetBrains.TextControl.Layout.TextControlAnchoringRect : AnchoringRect {
    [CanBeNullAttribute]
private IRangeMarker myRangeMarker;
    [NotNullAttribute]
public IProperty`1<TextRange> Range;
    [CompilerGeneratedAttribute]
private ITextControl <TextControl>k__BackingField;
    [NotNullAttribute]
public ITextControl TextControl { get; }
    public TextControlAnchoringRect(OuterLifetime lifetimeOuter, ITextControl textcontrol, DocOffset offset, IShellLocks locks);
    public TextControlAnchoringRect(OuterLifetime lifetimeOuter, ITextControl textcontrol, TextRange range, IShellLocks locks);
    [CompilerGeneratedAttribute]
public ITextControl get_TextControl();
    [NotNullAttribute]
public static TextControlAnchoringRect CreateBeginningOfLine(Lifetime lifetime, ITextControl textcontrol, DocOffset offset, IShellLocks locks);
    [NotNullAttribute]
public static TextControlAnchoringRect CreateFromCaretStatic(Lifetime lifetime, ITextControl textcontrol, IShellLocks locks);
    [NotNullAttribute]
public static TextControlAnchoringRect CreateFromRangeStatic(Lifetime lifetime, ITextControl textcontrol, TextRange range, IShellLocks locks);
    [NotNullAttribute]
public static TextControlAnchoringRect CreateFromSelectionStatic(Lifetime lifetime, ITextControl textcontrol, IShellLocks locks);
    private void UpdateAnchorGuarded(IAnchoringRect viewportAnchor, IShellLocks locks);
    private static Int32`1<TextControlColumn> FindMaxColumnOnRange(ITextControl textcontrol, TextRange range);
}
internal class JetBrains.TextControl.Layout.TextControlPopupWindowContext : PopupWindowContext {
    private ITextControl myTextControl;
    private TextRange myTextRange;
    private IShellLocks myLocks;
    private ITextControl JetBrains.TextControl.ITextControlPopupWindowContext.TextControl { get; }
    private DocumentRange JetBrains.TextControl.ITextControlPopupWindowContext.DocumentRange { get; }
    internal TextControlPopupWindowContext(Lifetime lifetimeOuter, ITextControl textControl, TextRange textRange, IShellLocks locks, IActionManager actionman);
    public TextControlPopupWindowContext(Lifetime lifetimeOuter, ITextControl textControl, IShellLocks locks, IActionManager actionman);
    internal static TextControlPopupWindowContext ForBeginningOfLine(Lifetime lifetimeOuter, ITextControlPos pos, IShellLocks locks, IActionManager actionman);
    private sealed virtual override ITextControl JetBrains.TextControl.ITextControlPopupWindowContext.get_TextControl();
    private sealed virtual override DocumentRange JetBrains.TextControl.ITextControlPopupWindowContext.get_DocumentRange();
    public bool Equals(TextControlPopupWindowContext other);
    public virtual IPopupLayouter CreateLayouter(Lifetime lifetime);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_1();
}
public class JetBrains.TextControl.Layout.TextControlPopupWindowContextFactory : TextControlPopupWindowContextFactoryBase {
    private IActionManager myActionManager;
    private IShellLocks myShellLocks;
    private ITextControl myTextControl;
    public TextControlPopupWindowContextFactory(ITextControl textControl, IShellLocks shellLocks, IActionManager actionManager);
    protected virtual ITextControlPopupWindowContext ForBeginningOfLineCore(Lifetime lifetime, DocOffsetAndVirtual pos);
    protected virtual ITextControlPopupWindowContext ForCaretCore(Lifetime lifetime);
    protected virtual ITextControlPopupWindowContext ForRangeCore(Lifetime lifetime, TextRange range);
}
[RegisterHighlighterAttribute("ReSharper Rainbow #0")]
[RegisterHighlighterAttribute("ReSharper Rainbow #1")]
[RegisterHighlighterAttribute("ReSharper Rainbow #2")]
[RegisterHighlighterAttribute("ReSharper Rainbow #3")]
[RegisterHighlighterAttribute("ReSharper Rainbow #4")]
[RegisterHighlighterAttribute("ReSharper Rainbow #5")]
[RegisterHighlighterAttribute("ReSharper Rainbow #6")]
[RegisterHighlighterAttribute("ReSharper Rainbow #7")]
[RegisterHighlighterAttribute("ReSharper Rainbow #8")]
[RegisterHighlighterAttribute("ReSharper Rainbow #9")]
[RegisterHighlighterAttribute("ReSharper Rainbow #10")]
[RegisterHighlighterAttribute("ReSharper Rainbow #11")]
[RegisterHighlighterAttribute("ReSharper Rainbow #12")]
[RegisterHighlighterAttribute("ReSharper Rainbow #13")]
[RegisterHighlighterAttribute("ReSharper Rainbow #14")]
[RegisterHighlighterAttribute("ReSharper Rainbow #15")]
[RegisterHighlighterAttribute("ReSharper Rainbow #16")]
[RegisterHighlighterAttribute("ReSharper Rainbow #17")]
[RegisterHighlighterAttribute("ReSharper Rainbow #18")]
[RegisterHighlighterAttribute("ReSharper Rainbow #19")]
[RegisterHighlighterAttribute("ReSharper Rainbow #20")]
public static class JetBrains.TextControl.Rainbow.ReSharperRainbowHighlight : object {
    public static string RainbowHighlighterIdPrefix;
    public static HighlighterLayer RainbowHighlighterLayer;
    public static int RainbowCount;
    public static string GetRainbowHighlightingsId(int index);
    public static List`1<string> RainbowHighlightings();
    public static int GetColorIndex(IUserDataHolder context, string name);
}
internal class JetBrains.TextControl.Rainbow.UsedColor : object {
    [CompilerGeneratedAttribute]
private string <name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <index>k__BackingField;
    private static Key`1<object> USED_COLOR;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string name { get; public set; }
    public int index { get; public set; }
    public UsedColor(string name, int index);
    [CompilerGeneratedAttribute]
protected UsedColor(UsedColor original);
    private static UsedColor();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_name(string value);
    [CompilerGeneratedAttribute]
public int get_index();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_index(int value);
    public static int GetOrAddColorIndex(IUserDataHolder context, string name, int colorsCount);
    private static int hashColor(string name, int colorsCount);
    private static int indexOfMin(Int32[] values, int start, int end);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(UsedColor left, UsedColor right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(UsedColor left, UsedColor right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(UsedColor other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual UsedColor <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& name, Int32& index);
}
public class JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons : object {
}
[ExtensionAttribute]
public static class JetBrains.TextControl.TextControlAutomationBackendHelpers : object {
    [ExtensionAttribute]
public static TextControlAutomation FromDocument(Factory _, Lifetime lifetime, IDocument document, TextControlHostedIn hostedIn, TextControlPreferences preferences, WindowFrame frame, TextControlAutomationFlags flags, IRunningDocuments rundocs, IShellLocks locks);
    [ExtensionAttribute]
public static TextControlAutomation FromTextControl(Factory _, ITextControl textcontrol, TextControlHostedIn hostedIn, TextControlPreferences preferences, WindowFrame frame, TextControlAutomationFlags flags);
    [ExtensionAttribute]
[NotNullAttribute]
public static TextControlAutomation FromTextControlId(Factory _, RunningTextControlId tcid, TextControlHostedIn hostedIn, TextControlPreferences preferences, WindowFrame frame, TextControlAutomationFlags flags);
    [ExtensionAttribute]
[NotNullAttribute]
public static ICollectionEvents`1<ITextControl> GetConnectedTextControlsLive(TextControlAutomation automation, Lifetime lifetime, ITextControlManager textman);
}
[ExtensionAttribute]
public static class JetBrains.TextControl.TextControlAutomationEx : object {
    [ExtensionAttribute]
public static bool IsSingleView(TextControlAutomation automation);
}
[ShellComponentAttribute("16")]
public class JetBrains.TextControl.TextControlCreator : object {
    private int myLastTextControlId;
    private Lifetime myLifetime;
    private IRunningDocuments myRunningDocuments;
    private RunningTextControls myRunningTextControls;
    private IThreading myThreading;
    [NotNullAttribute]
private ILazy`1<OnBackend> myTransportRootOwner;
    public TextControlCreator(Lifetime lifetime, IThreading threading, ILazy`1<OnBackend> rootowner, RunningTextControls runningTextControls, IRunningDocuments runningDocuments);
    [NotNullAttribute]
[GuardAttribute("1")]
public ITextControl CreateTextControl(Lifetime lifetime, IDocument document);
    private RunningTextControlId CreateNewRunningTextControlId(RunningDocumentId documentId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.TextControl.TextControlExtensions : object {
    [ExtensionAttribute]
public static void EmulateEnter(ITextControl thіs);
    [ExtensionAttribute]
[ObsoleteAttribute("Use lifetimed version.")]
public static IDisposable LockTextControl(ITextControl textControl, IShellLocks shellLocks);
    [ExtensionAttribute]
public static void LockTextControl(ITextControl textControl, Lifetime lifetime, IShellLocks shellLocks);
    [ExtensionAttribute]
public static void ShowAtCaret(ITooltipManager thіs, OuterLifetime lifetime, RichText text, ITextControl textcontrol, IShellLocks locks);
    [ExtensionAttribute]
public static Task`1<ITextControl> WhenBound(Task`1<ITextControl> textControlTask, IThreading threading, Action`1<ITextControl> action, Action noTextControlAction);
    [NullableContextAttribute("2")]
private static void ExecuteTextControlAction(ITextControl textControl, Action`1<ITextControl> action, Action noTextControlAction);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ITextControl TryGetTextControlIfCompletedSync(Task`1<ITextControl> textControlTask);
    [ExtensionAttribute]
public static bool IsReadOnly(ITextControl tc);
    [ExtensionAttribute]
[GuardAttribute("2")]
public static Task EmulateTypingAsync(ITextControl tc, OuterLifetime lifetime, char ch);
}
public class JetBrains.TextControl.TextControlFinalTypingHandler : object {
    [NotNullAttribute]
public static Key`1<TextControlFinalTypingHandler> TextControlFinalTypingHandlerUserDataKey;
    [NotNullAttribute]
public FinalTypingHandlerDelegate FinalTypingHandler;
    public TextControlFinalTypingHandler(FinalTypingHandlerDelegate finalTypingHandler);
    private static TextControlFinalTypingHandler();
}
public class JetBrains.TextControl.TextControlMouseEventArgs : EventArgs {
    [ObsoleteAttribute("Not set and not favored.")]
public bool IsHandled;
    public KeyStateMasks KeysAndButtons;
    [ObsoleteAttribute("Won't have point coordinates on the back side.")]
public Nullable`1<JetPhysicalPoint> ViewportPosition;
    public Nullable`1<DocOffsetAndVirtual> DocumentPosition;
    public UInt32 ClickCount;
    [NotNullAttribute]
public ITextControl TextControl;
    [CompilerGeneratedAttribute]
private bool <IsMouseOutsideTextExtent>k__BackingField;
    public bool IsMouseDown { get; }
    public KeyStateMasks ModifierKeysOnly { get; }
    public bool IsMouseOutsideTextExtent { get; }
    public TextControlMouseEventArgs(ITextControl textcontrol, Nullable`1<JetPhysicalPoint> ptViewport, Nullable`1<DocOffsetAndVirtual> docpos, bool isMouseOutsideTextExtent, UInt32 clickCount);
    public TextControlMouseEventArgs(ITextControl textcontrol, Nullable`1<KeyStateMasks> keysnbuttons, Nullable`1<DocOffsetAndVirtual> docpos, Nullable`1<JetPhysicalPoint> ptViewport, bool isMouseOutsideTextExtent, UInt32 clickCount);
    public bool get_IsMouseDown();
    public KeyStateMasks get_ModifierKeysOnly();
    [CompilerGeneratedAttribute]
public bool get_IsMouseOutsideTextExtent();
    [NotNullAttribute]
[ObsoleteAttribute("You should not use this. Frontend code uses a more sophisticated impl, and backend should do with ITextControlWindow::MouseAndModifierKeys.")]
public static TextControlMouseEventArgs FromCurrentPositionAndState(ITextControl tc, bool isMouseOutsideTextExtent, UInt32 clickCount);
    public virtual string ToString();
    public static KeyStateMasks GetKeysAndButtonsState();
    public sealed virtual bool Equals(TextControlMouseEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(TextControlMouseEventArgs left, TextControlMouseEventArgs right);
    public static bool op_Inequality(TextControlMouseEventArgs left, TextControlMouseEventArgs right);
}
public abstract class JetBrains.TextControl.TextControlPopupWindowContextFactoryBase : object {
    private sealed virtual override ITextControlPopupWindowContext JetBrains.TextControl.ITextControlPopupWindowContextFactory.CreatePopupWindowContext(Lifetime lifetime);
    private sealed virtual override ITextControlPopupWindowContext JetBrains.TextControl.ITextControlPopupWindowContextFactory.CreatePopupWindowContext(Lifetime lifetime, TextRange range);
    private sealed virtual override ITextControlPopupWindowContext JetBrains.TextControl.ITextControlPopupWindowContextFactory.ForBeginningOfLine(Lifetime lifetime, ITextControlPos pos);
    private sealed virtual override PopupWindowContextSource JetBrains.TextControl.ITextControlPopupWindowContextFactory.ForBeginningOfLine(DocOffsetAndVirtual pos);
    protected abstract virtual ITextControlPopupWindowContext ForBeginningOfLineCore(Lifetime lifetime, DocOffsetAndVirtual pos);
    private sealed virtual override PopupWindowContextSource JetBrains.TextControl.ITextControlPopupWindowContextFactory.ForCaret();
    protected abstract virtual ITextControlPopupWindowContext ForCaretCore(Lifetime lifetime);
    private sealed virtual override PopupWindowContextSource JetBrains.TextControl.ITextControlPopupWindowContextFactory.ForRange(TextRange range);
    protected abstract virtual ITextControlPopupWindowContext ForRangeCore(Lifetime lifetime, TextRange range);
}
public abstract class JetBrains.TextControl.TextControlSelectionBase : object {
    public static Tuple`2<DocOffsetAndVirtual, DocOffsetAndVirtual> GetAnchorToActiveSpanForContinuousSelection(IList`1<TextControlPosRange> ranges);
    protected abstract virtual void OnUserSetRanges(IList`1<TextControlPosRange> ranges);
}
[ExtensionAttribute]
public static class JetBrains.TextControl.TextControlSelectionExtensions : object {
    [ExtensionAttribute]
[PureAttribute]
public static bool HasSelection(ITextControlSelection textControlSelection);
    [ExtensionAttribute]
public static void SetRange(ITextControlSelection textControlSelection, TextRange range);
    [ExtensionAttribute]
public static void SetRange(ITextControlSelection textControlSelection, DocumentRange range);
    [ExtensionAttribute]
[PureAttribute]
[ObsoleteAttribute("Undefined semantic. Do not use. Replace with other methods when seen (IsDisjoint, UnionOfDocRanges, OneDocRangeWithCaret).")]
public static TextRange RandomRange(ITextControlSelection textControlSelection);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsDisjoint(ITextControlSelection textControlSelection);
    [ExtensionAttribute]
[PureAttribute]
public static TextRange UnionOfDocRanges(ITextControlSelection textControlSelection);
    [ExtensionAttribute]
[PureAttribute]
public static DocumentRange UnionOfDocumentRanges(ITextControlSelection textControlSelection);
    [ExtensionAttribute]
[PureAttribute]
public static TextRange OneDocRangeWithCaret(ITextControlSelection textControlSelection);
    [ExtensionAttribute]
[PureAttribute]
public static DocumentRange OneDocumentRangeWithCaret(ITextControlSelection textControlSelection);
    [ExtensionAttribute]
[NotNullAttribute]
public static ITextControlPos GetActivePoint(ITextControlSelection textControlSelection);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static ITextControlPos GetAnchorPoint(ITextControlSelection textControlSelection);
    [ExtensionAttribute]
[NotNullAttribute]
public static IList`1<string> GetSelectedText(ITextControlSelection textControlSelection);
}
public interface JetBrains.TextControl.TextControlsManagement.ITextControlIdHost {
    public abstract virtual TextControlId GetTextControlId(ITextControl textControl);
}
[ShellComponentAttribute("10")]
public class JetBrains.TextControl.TextControlsManagement.LockDocumentsWhenOpenedInTextControls : object {
    public LockDocumentsWhenOpenedInTextControls(Lifetime lifetime, RunningTextControls textcontrols, IShellLocks locks, IRunningDocuments runningDocuments);
}
[ShellComponentAttribute("16")]
public class JetBrains.TextControl.TextControlsManagement.RunningTextControls : object {
    [NotNullAttribute]
[GuardAttribute("1")]
public ICollectionEvents`1<ITextControl> TextControls;
    public RunningTextControls(Lifetime lifetime, IShellLocks locks, ILogger logger);
    [CanBeNullAttribute]
public ITextControl TryGetTextControlById(RunningTextControlId textControlId);
    private void BindClientId(Lifetime lifetime);
    private void Init_DontAllowAddingDisposed(Lifetime lifetime);
}
[ShellComponentAttribute("16")]
public class JetBrains.TextControl.TextControlsManagement.TextControlManager : object {
    [NotNullAttribute]
[ObsoleteAttribute("Won't be put to use after migration to transport text controls, consider if we need to resurrect.")]
public static PropertyId`1<ITextControl> TextControlInWindowFrame;
    private RunningTextControls myRunningTextControls;
    private TextControlCreator myTextControlCreator;
    private TextControlManagerDerivativesLegacy myTextControlManagerDerivativesLegacy;
    private TextControlProperties myTextControlProperties;
    [NotNullAttribute]
private ILazy`1<OnBackend> myTransportRootOwner;
    [ObsoleteAttribute("Valid only for ClientId.Local (i.e. local only IDE user), Use CurrentFrameTextControlPerClient instead to support any client including remote")]
public IProperty`1<ITextControl> CurrentFrameTextControl { get; }
    public IDictionaryEvents`2<ClientId, ITextControl> CurrentFrameTextControlPerClient { get; }
    [ObsoleteAttribute("Valid only for ClientId.Local (i.e. local only IDE user), Use FocusedTextControlPerClient instead to support any client including remote")]
public IProperty`1<ITextControl> FocusedTextControl { get; }
    public IDictionaryEvents`2<ClientId, ITextControl> FocusedTextControlPerClient { get; }
    [ObsoleteAttribute("Valid only for ClientId.Local (i.e. local only IDE user), Use LastFocusedTextControlPerClient instead to support any client including remote")]
public IProperty`1<ITextControl> LastFocusedTextControl { get; }
    public IDictionaryEvents`2<ClientId, ITextControl> LastFocusedTextControlPerClient { get; }
    [NotNullAttribute]
public TextControlManagerDerivativesLegacy Legacy { get; }
    [NotNullAttribute]
public ICollectionEvents`1<ITextControl> TextControls { get; }
    [NotNullAttribute]
public IDictionaryEvents`2<RunningTextControlId, TransportTextControl> TransportTextControls { get; }
    [NotNullAttribute]
public ICollectionEvents`1<ITextControl> VisibleTextControls { get; }
    public TextControlManager(ILazy`1<OnBackend> transroot, TextControlCreator textControlCreator, TextControlProperties textControlProperties, RunningTextControls runningTextControls, TextControlManagerDerivativesLegacy textControlManagerDerivativesLegacy);
    private static TextControlManager();
    public sealed virtual IProperty`1<ITextControl> get_CurrentFrameTextControl();
    public sealed virtual IDictionaryEvents`2<ClientId, ITextControl> get_CurrentFrameTextControlPerClient();
    public sealed virtual IProperty`1<ITextControl> get_FocusedTextControl();
    public sealed virtual IDictionaryEvents`2<ClientId, ITextControl> get_FocusedTextControlPerClient();
    public sealed virtual IProperty`1<ITextControl> get_LastFocusedTextControl();
    public sealed virtual IDictionaryEvents`2<ClientId, ITextControl> get_LastFocusedTextControlPerClient();
    public sealed virtual TextControlManagerDerivativesLegacy get_Legacy();
    public sealed virtual ICollectionEvents`1<ITextControl> get_TextControls();
    public sealed virtual IDictionaryEvents`2<RunningTextControlId, TransportTextControl> get_TransportTextControls();
    public sealed virtual ICollectionEvents`1<ITextControl> get_VisibleTextControls();
    public sealed virtual ITextControl CreateTextControl(Lifetime lifetime, IDocument document);
    public sealed virtual ITextControl TryGetTextControlById(RunningTextControlId tcid);
}
[ShellComponentAttribute("16")]
public class JetBrains.TextControl.TextControlsManagement.TextControlManagerDerivativesLegacy : object {
    [NotNullAttribute]
public TextControlProperties myTextControlProperties;
    [CompilerGeneratedAttribute]
private EventHandler CaretMoved;
    [CompilerGeneratedAttribute]
private EventHandler FocusedTextControlChanged;
    [CompilerGeneratedAttribute]
private EventHandler LastFocusedTextControlChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs`1<ITextControl>> TextControlCreated;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs`1<ITextControl>> TextControlDestroyed;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs`1<ITextControl>> TextControlGotFocus;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs`1<ITextControl>> TextControlLostFocus;
    [CompilerGeneratedAttribute]
private EventHandler VisibleAreaChanged;
    [CompilerGeneratedAttribute]
private EventHandler VisibleTextControlsChanged;
    [CanBeNullAttribute]
public ITextControl FocusedTextControl { get; }
    public TextControlManagerDerivativesLegacy(Lifetime lifetime, TextControlProperties textControlProperties, RunningTextControls runningTextControls);
    public ITextControl get_FocusedTextControl();
    [CompilerGeneratedAttribute]
public void add_CaretMoved(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CaretMoved(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_FocusedTextControlChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_FocusedTextControlChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_LastFocusedTextControlChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LastFocusedTextControlChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_TextControlCreated(EventHandler`1<EventArgs`1<ITextControl>> value);
    [CompilerGeneratedAttribute]
public void remove_TextControlCreated(EventHandler`1<EventArgs`1<ITextControl>> value);
    [CompilerGeneratedAttribute]
public void add_TextControlDestroyed(EventHandler`1<EventArgs`1<ITextControl>> value);
    [CompilerGeneratedAttribute]
public void remove_TextControlDestroyed(EventHandler`1<EventArgs`1<ITextControl>> value);
    [CompilerGeneratedAttribute]
public void add_TextControlGotFocus(EventHandler`1<EventArgs`1<ITextControl>> value);
    [CompilerGeneratedAttribute]
public void remove_TextControlGotFocus(EventHandler`1<EventArgs`1<ITextControl>> value);
    [CompilerGeneratedAttribute]
public void add_TextControlLostFocus(EventHandler`1<EventArgs`1<ITextControl>> value);
    [CompilerGeneratedAttribute]
public void remove_TextControlLostFocus(EventHandler`1<EventArgs`1<ITextControl>> value);
    [CompilerGeneratedAttribute]
public void add_VisibleAreaChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_VisibleAreaChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_VisibleTextControlsChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_VisibleTextControlsChanged(EventHandler value);
    private void InitDataFlow(Lifetime lifetime, TextControlProperties textControlProperties, RunningTextControls runningTextControls);
}
[ShellComponentAttribute("16")]
public class JetBrains.TextControl.TextControlsManagement.TextControlProperties : object {
    [NotNullAttribute]
[GuardAttribute("1")]
public IDictionaryEvents`2<ClientId, ITextControl> CurrentFrameTextControlPerClient;
    [NotNullAttribute]
[GuardAttribute("1")]
public IDictionaryEvents`2<ClientId, ITextControl> FocusedTextControlPerClient;
    [NotNullAttribute]
[GuardAttribute("1")]
public IDictionaryEvents`2<ClientId, ITextControl> LastFocusedTextControlPerClient;
    [NotNullAttribute]
[GuardAttribute("1")]
[ObsoleteAttribute("Returns text control only with local client ID. Use CurrentFrameTextControlPerClient instead.")]
public IProperty`1<ITextControl> CurrentFrameTextControl;
    [NotNullAttribute]
[GuardAttribute("1")]
[ObsoleteAttribute("Returns text control only with local client ID. Use FocusedTextControlPerClient property instead.")]
public IProperty`1<ITextControl> FocusedTextControl;
    [NotNullAttribute]
[GuardAttribute("1")]
[ObsoleteAttribute("Returns text control only with local client ID. Use LastFocusedTextControls instead.")]
public IProperty`1<ITextControl> LastFocusedTextControl;
    [ObsoleteAttribute("Looks unused")]
[NotNullAttribute]
[GuardAttribute("1")]
public IProperty`1<ITextControl> LastVisibleTextControl;
    [NotNullAttribute]
[GuardAttribute("1")]
public ICollectionEvents`1<ITextControl> VisibleTextControls;
    private ReadonlyToken myRotoken;
    public TextControlProperties(Lifetime lifetime, RunningTextControls runningTextControls, IThreading threading);
    private void InitFocusAndVisible(Lifetime lifetime, RunningTextControls runningTextControls);
    private void InitLogging(Lifetime lifetime);
    [CompilerGeneratedAttribute]
internal static void <InitFocusAndVisible>g__SetItemNullRemoves|10_3(IDictionaryEvents`2<ClientId, ITextControl> map, ClientId key, ITextControl newvalue, ReadonlyToken rotoken);
}
[ShellComponentAttribute("44")]
public class JetBrains.TextControl.TextControlsManagement.WrapsTransportTextControlsWithBackendITextControl : object {
    public WrapsTransportTextControlsWithBackendITextControl(Lifetime lifetime, OnBackend rootowner, RunningTextControls runnings, IComponentContainer containerForServices, ILogger logger);
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.TextControl.TextControlTypingHandlers : object {
    [NotNullAttribute]
private ILogger myPerfLogger;
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private ICommandProcessor myCommandProcessor;
    [CompilerGeneratedAttribute]
private TypingHandler[] <TypingHandlers>k__BackingField;
    private Signal`1<TimeSpan> myTypeFinishedSignal;
    private Signal`1<TypingEventArgs> myTypingProcessedSignal;
    public static string TypingCommandID;
    [NotNullAttribute]
protected TypingHandler[] TypingHandlers { get; private set; }
    public ISource`1<TimeSpan> TypeFinished { get; }
    public ISource`1<TypingEventArgs> TypingProcessed { get; }
    public TextControlTypingHandlers(IShellLocks locks, ICommandProcessor commandProcessor, Lifetime lifetime);
    [CompilerGeneratedAttribute]
protected TypingHandler[] get_TypingHandlers();
    [CompilerGeneratedAttribute]
private void set_TypingHandlers(TypingHandler[] value);
    public ISource`1<TimeSpan> get_TypeFinished();
    public ISource`1<TypingEventArgs> get_TypingProcessed();
    public void AddTypingHandler(Lifetime lifetime, Action`1<ITypingContext> handler, TypingHandlerModificationKind modificationKind, int priority);
    public virtual void AddTypingNotifier(Lifetime lifetime, Action`1<IReadonlyTypingContext> onTyping, bool after);
    public virtual void Type(ITextControl textControl, char c, TypingHandlerModificationKind kind);
    protected virtual void RunPendingActionsAfterType(IEnumerable`1<Action> pendingActions);
}
public class JetBrains.TextControl.TypingHandlerInfoCookie : object {
    [CompilerGeneratedAttribute]
private static TypingHandlerInfoCookie <Instance>k__BackingField;
    public List`1<string> Infos;
    public static TypingHandlerInfoCookie Instance { get; private set; }
    [CompilerGeneratedAttribute]
public static TypingHandlerInfoCookie get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(TypingHandlerInfoCookie value);
    public static TypingHandlerInfoCookie Create();
    public sealed virtual void Dispose();
}
public enum JetBrains.TextControl.TypingHandlerModificationKind : Enum {
    public int value__;
    public static TypingHandlerModificationKind CanWrite;
    public static TypingHandlerModificationKind Readonly;
}
public static class JetBrains.TextControl.TypingHandlerPriority : object {
    public static int READONLY_BEFORE_AFTER_TYPING_HANDLERS;
    public static int MODIFYING_BEFORE_AFTER_TYPING_HANDLERS;
    public static int FINAL_TYPING_HANDLERS;
    public static int SKIPPING_TYPING_HANDLERS;
}
[ZoneMarkerAttribute]
public class JetBrains.TextControl.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
