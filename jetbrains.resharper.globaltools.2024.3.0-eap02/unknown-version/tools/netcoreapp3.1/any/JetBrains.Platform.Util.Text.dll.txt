public class JetBrains.Text.AnyOrderIdentiferMatcherFactory : object {
    public static IIdentifierMatcherFactory Instance;
    private static AnyOrderIdentiferMatcherFactory();
    public sealed virtual IIdentifierMatcher Create(string pattern, IdentifierMatchingStyle style, TypoCorrectionType correctTypos);
}
public class JetBrains.Text.DefaultIdenfierMatcherFactory : object {
    public static IIdentifierMatcherFactory Instance;
    private static DefaultIdenfierMatcherFactory();
    public sealed virtual IIdentifierMatcher Create(string pattern, IdentifierMatchingStyle style, TypoCorrectionType correctTypos);
}
public class JetBrains.Text.DefaultIdentifierMatcher : object {
    private IdentifierMatcher myImpl;
    public TypoCorrectionType CorrectTypos { get; }
    public IdentifierMatchingStyle MatchingStyle { get; }
    public MatcherScore CurrentScore { get; }
    public bool CurrentResult { get; }
    public string CurrentIdentifier { get; }
    public string Filter { get; }
    public bool HasSuffixShrinkProperty { get; }
    public DefaultIdentifierMatcher(IdentifierMatcher impl);
    public sealed virtual Int32[] CurrentMatchingIndicesCopy();
    public sealed virtual TypoCorrectionType get_CorrectTypos();
    public sealed virtual IdentifierMatchingStyle get_MatchingStyle();
    public sealed virtual MatcherScore get_CurrentScore();
    public sealed virtual bool get_CurrentResult();
    public sealed virtual string get_CurrentIdentifier();
    public sealed virtual string get_Filter();
    public sealed virtual bool Matches(string text);
    public sealed virtual Int32[] MatchingIndicies(string text);
    private sealed virtual override IIdentifierMatcher JetBrains.Util.ICloneable<JetBrains.Text.IIdentifierMatcher>.Clone();
    public sealed virtual object Clone();
    public sealed virtual bool get_HasSuffixShrinkProperty();
}
public class JetBrains.Text.IdentifierMatcher : object {
    private Int32[] myPreCalculatedPrefixMatchPositions;
    private Int32[] myMutableMatchPositionsPlaceholder;
    private IdentifierMatchingStyle myStyle;
    private TypoCorrectionType myCorrectTypos;
    private bool myTrailingStar;
    private Int32[] myMatchPositions;
    private string myPattern;
    private string myLowerPattern;
    private string myAlternateKeyboardLayoutPattern;
    private Thread myFirstUseThread;
    [CompilerGeneratedAttribute]
private MatcherScore <CurrentScore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CurrentResult>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Char[] <CurrentIdentifierBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentIdentifierLength>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    public MatcherScore CurrentScore { get; private set; }
    public bool CurrentResult { get; private set; }
    public string CurrentIdentifier { get; private set; }
    public Char[] CurrentIdentifierBuffer { get; private set; }
    public int CurrentIdentifierLength { get; private set; }
    public Int32[] SharedMatchingIndices { get; }
    public string Filter { get; }
    public IdentifierMatchingStyle MatchingStyle { get; }
    public TypoCorrectionType CorrectTypos { get; }
    private IdentifierMatcher(string filter, string pattern, string alternatePattern, string lowerPattern, IdentifierMatchingStyle style, TypoCorrectionType correctTypos, bool trailingStar, Int32[] mutableMatchPositionsPlaceholder, Int32[] preCalculatedPrefixMatchPositions);
    public IdentifierMatcher(string pattern, IdentifierMatchingStyle style, bool correctTypos);
    public IdentifierMatcher(string pattern, IdentifierMatchingStyle style, TypoCorrectionType correctTypos);
    [CompilerGeneratedAttribute]
public MatcherScore get_CurrentScore();
    [CompilerGeneratedAttribute]
private void set_CurrentScore(MatcherScore value);
    [CompilerGeneratedAttribute]
public bool get_CurrentResult();
    [CompilerGeneratedAttribute]
private void set_CurrentResult(bool value);
    [CompilerGeneratedAttribute]
public string get_CurrentIdentifier();
    [CompilerGeneratedAttribute]
private void set_CurrentIdentifier(string value);
    [CompilerGeneratedAttribute]
public Char[] get_CurrentIdentifierBuffer();
    [CompilerGeneratedAttribute]
private void set_CurrentIdentifierBuffer(Char[] value);
    [CompilerGeneratedAttribute]
public int get_CurrentIdentifierLength();
    [CompilerGeneratedAttribute]
private void set_CurrentIdentifierLength(int value);
    public Int32[] get_SharedMatchingIndices();
    public Int32[] CurrentMatchingIndicesCopy();
    [CompilerGeneratedAttribute]
public string get_Filter();
    public IdentifierMatchingStyle get_MatchingStyle();
    public TypoCorrectionType get_CorrectTypos();
    private sealed virtual override object System.ICloneable.Clone();
    [PublicAPIAttribute]
public sealed virtual IdentifierMatcher Clone();
    public bool Matches(string text);
    public bool Matches(Char[] text, int textLen);
    private void MatchesUnsafe(Char* textData, int textLen);
    [CanBeNullAttribute]
public Int32[] MatchingIndicies(string text);
    [CanBeNullAttribute]
public Int32[] MatchingIndicies(Char[] text, int textLen);
    [ConditionalAttribute("JET_MODE_ASSERT")]
private void CheckThread();
    private bool Execute(Char* textData, int textLen, string pattern);
    private static int NextHmp(UnsafeIntArray humps, int index);
    private bool TypoCorrection(Char* lowerText, int n);
    private void CalculateScore(Char* textData, int textLen, int lastMatch, UnsafeIntArray humps, UnsafeIntArray allocatedEmptyArray, string pattern);
    private void CalcScoreOnHumps(UnsafeIntArray humps, MatcherScore allHumpMatchScore, MatcherScore firstHumpMatchScore, MatcherScore noGapsScore);
}
[ExtensionAttribute]
public static class JetBrains.Text.IdentifierMatcherExtensions : object {
    [ExtensionAttribute]
public static IdentifierMatcher Handle(IdentifierMatcher identifierMatcher, string text);
    [ExtensionAttribute]
public static IIdentifierMatcher Handle(IIdentifierMatcher identifierMatcher, string text);
    [ExtensionAttribute]
public static bool Matches(IIdentifierMatcher identifierMatcher, string text, MatcherScore requiredFlags);
}
[FlagsAttribute]
public enum JetBrains.Text.IdentifierMatchingFlags : Enum {
    public int value__;
    public static IdentifierMatchingFlags None;
    public static IdentifierMatchingFlags MatchPrefixCaseInsensitive;
    public static IdentifierMatchingFlags MatchInsideCaseInsensitive;
    public static IdentifierMatchingFlags MatchPrefixCaseSensitive;
    public static IdentifierMatchingFlags MatchPrefixIgnoreTypos;
}
public enum JetBrains.Text.IdentifierMatchingStyle : Enum {
    public int value__;
    public static IdentifierMatchingStyle BeginingOfIdentifier;
    public static IdentifierMatchingStyle EntireIdentifier;
    public static IdentifierMatchingStyle MiddleOfIdentifier;
    public static IdentifierMatchingStyle Default;
}
public interface JetBrains.Text.IIdentifierMatcher {
    public MatcherScore CurrentScore { get; }
    public bool CurrentResult { get; }
    public string CurrentIdentifier { get; }
    public string Filter { get; }
    public IdentifierMatchingStyle MatchingStyle { get; }
    public TypoCorrectionType CorrectTypos { get; }
    public abstract virtual MatcherScore get_CurrentScore();
    public abstract virtual bool get_CurrentResult();
    public abstract virtual string get_CurrentIdentifier();
    public abstract virtual string get_Filter();
    public abstract virtual IdentifierMatchingStyle get_MatchingStyle();
    public abstract virtual TypoCorrectionType get_CorrectTypos();
    public abstract virtual bool Matches(string text);
    public abstract virtual Int32[] MatchingIndicies(string text);
    public abstract virtual Int32[] CurrentMatchingIndicesCopy();
}
public interface JetBrains.Text.IIdentifierMatcherFactory {
    public abstract virtual IIdentifierMatcher Create(string pattern, IdentifierMatchingStyle style, TypoCorrectionType correctTypos);
}
public interface JetBrains.Text.ISuffixShrinkMatcher {
    public bool HasSuffixShrinkProperty { get; }
    public abstract virtual bool get_HasSuffixShrinkProperty();
}
[FlagsAttribute]
public enum JetBrains.Text.MatcherScore : Enum {
    public int value__;
    public static MatcherScore None;
    public static MatcherScore NoTypos;
    public static MatcherScore NoCaseTypos;
    public static MatcherScore ExactMatch;
    public static MatcherScore ExactPrefixMatch;
    public static MatcherScore CorrectOrder;
    public static MatcherScore WholeWordsMatch;
    public static MatcherScore AllHumpsMatch;
    public static MatcherScore AllLetterHumpsMatch;
    public static MatcherScore FirstHumpMatch;
    public static MatcherScore FirstLetterHumpMatch;
    public static MatcherScore ExactMiddleMatch;
    public static MatcherScore NoGapsBetweenHumps;
    public static MatcherScore NoGapsBetweenLetterHumps;
    public static MatcherScore FirstLetterHumpCaseMatch;
    public static MatcherScore Highest;
}
[ExtensionAttribute]
public static class JetBrains.Text.MatcherScoreEx : object {
    [ExtensionAttribute]
[PureAttribute]
public static int ToComparableInt(MatcherScore score, int adjustmentCoefficient, MatcherScore adjustment);
    [ExtensionAttribute]
[PureAttribute]
public static int ToCompletionScore(MatcherScore score);
    [ExtensionAttribute]
[PureAttribute]
public static int ToTextScore(MatcherScore score);
    [PureAttribute]
public static int HighestCompletionScore();
    [PureAttribute]
public static int ExactPrefixMatchCompletionScore();
    [ExtensionAttribute]
[PureAttribute]
public static bool IsExactPrefixMatch(MatcherScore score);
    [ExtensionAttribute]
[PureAttribute]
public static bool HasTypos(MatcherScore score);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsExactMatch(MatcherScore score);
    [PureAttribute]
public static MatcherScore Max(MatcherScore x, MatcherScore y);
}
[FlagsAttribute]
public enum JetBrains.Text.TypoCorrectionType : Enum {
    public int value__;
    public static TypoCorrectionType None;
    public static TypoCorrectionType KeyboardLayout;
    public static TypoCorrectionType CaseCorrection;
    public static TypoCorrectionType Semantic;
    public static TypoCorrectionType All;
}
public class JetBrains.Util.Text.IdentifierMatcherAnyOrder : object {
    private string myPattern;
    private TypoCorrectionType myCorrectTypos;
    private IdentifierMatchingStyle myStyle;
    private Char[] myPatternLowerChars;
    private Boolean[] myPatternIsLowerLookup;
    private int myPatternLength;
    private Int32[] myMatchingIndicies;
    private Int32[] myGreedyMatchedSources;
    private Boolean[] myKuhnDfsUsed;
    private BoyerMoore myBoyerMoore;
    [CompilerGeneratedAttribute]
private bool <CurrentResult>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private MatcherScore <CurrentScore>k__BackingField;
    public bool HasSuffixShrinkProperty { get; }
    public string Filter { get; }
    public TypoCorrectionType CorrectTypos { get; }
    public IdentifierMatchingStyle MatchingStyle { get; }
    public bool CurrentResult { get; private set; }
    public string CurrentIdentifier { get; private set; }
    public MatcherScore CurrentScore { get; private set; }
    public IdentifierMatcherAnyOrder(string pattern, IdentifierMatchingStyle style, TypoCorrectionType correctTypos);
    public sealed virtual bool get_HasSuffixShrinkProperty();
    public sealed virtual string get_Filter();
    public sealed virtual TypoCorrectionType get_CorrectTypos();
    public sealed virtual IdentifierMatchingStyle get_MatchingStyle();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CurrentResult();
    [CompilerGeneratedAttribute]
private void set_CurrentResult(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CurrentIdentifier();
    [CompilerGeneratedAttribute]
private void set_CurrentIdentifier(string value);
    [CompilerGeneratedAttribute]
public sealed virtual MatcherScore get_CurrentScore();
    [CompilerGeneratedAttribute]
private void set_CurrentScore(MatcherScore value);
    public sealed virtual bool Matches(string text);
    public bool MatchInternal(string text);
    private bool TryMatchNoTypos(UnsafeIntArray bigraphPtr, int n, Char* lowerText, UnsafeIntArray humps, Char* textData, UnsafeIntArray matchingGraph, UnsafeIntArray mt, UnsafeIntArray isHumpLookupPtr, UnsafeIntArray dynMatrix);
    private bool MakeBigraph(UnsafeIntArray graph, int n, Char* lowerText, UnsafeIntArray humps, Char* textData);
    private MatcherScore CalculateScores(UnsafeIntArray humps, UnsafeIntArray emptyAllocatedArray, Int32[] kuhnResult, UnsafeIntArray mt, Char* textData, MatcherScore initialScore);
    public void FindMatchingIndices(UnsafeIntArray bigraph, int patternLength, int inputLength, UnsafeIntArray mt, UnsafeIntArray isHumpLookup, UnsafeIntArray dynMatrix, UnsafeIntArray humps);
    private UnsafeIntArray SolveKuhn(UnsafeIntArray bigraph, int patternLength, int inputLength, UnsafeIntArray mt, SequentialMatchMaxIndexCollector simpleSeqMatch);
    private void FindMatchingIndicesInCorrectOrder(UnsafeIntArray bigraph, int inputLength, UnsafeIntArray mt, UnsafeIntArray isHumpLookup, UnsafeIntArray dynMatrix);
    private static bool TryKuhn(int v, Boolean[] used, UnsafeIntArray mt, UnsafeIntArray bigraph, int inputLength);
    private bool TypoCorrection(Char* lowerText, int n);
    public sealed virtual Int32[] MatchingIndicies(string text);
    public sealed virtual Int32[] CurrentMatchingIndicesCopy();
    public sealed virtual IIdentifierMatcher Clone();
    private sealed virtual override object System.ICloneable.Clone();
}
public class JetBrains.Util.Text.IdentifierMatcherCollection : object {
    [NotNullAttribute]
private IIdentifierMatcher myActive;
    private IIdentifierMatcher[] myMatchers;
    public bool HasSuffixShrinkProperty { get; }
    public MatcherScore CurrentScore { get; }
    public bool CurrentResult { get; }
    public string CurrentIdentifier { get; }
    public string Filter { get; }
    public IdentifierMatchingStyle MatchingStyle { get; }
    public TypoCorrectionType CorrectTypos { get; }
    public IdentifierMatcherCollection(IIdentifierMatcher[] matchers);
    public sealed virtual bool get_HasSuffixShrinkProperty();
    public sealed virtual MatcherScore get_CurrentScore();
    public sealed virtual bool get_CurrentResult();
    public sealed virtual string get_CurrentIdentifier();
    public sealed virtual string get_Filter();
    public sealed virtual IdentifierMatchingStyle get_MatchingStyle();
    public sealed virtual TypoCorrectionType get_CorrectTypos();
    public sealed virtual bool Matches(string text);
    public sealed virtual Int32[] MatchingIndicies(string text);
    public sealed virtual Int32[] CurrentMatchingIndicesCopy();
    public sealed virtual IIdentifierMatcher Clone();
    private sealed virtual override object System.ICloneable.Clone();
}
public static class JetBrains.Util.Text.IdentifierMatcherUtil : object {
    private static HashMap`2<char, char> ourRussianQwertyMap;
    private static HashMap`2<char, char> ourHebrewQwertyMap;
    public static int MinSymbolsForTypoCorrection;
    private static IdentifierMatcherUtil();
    public static string HandleWrongKeyboardLayout(string pattern);
    public static IEnumerable`1<string> SplitToHumps(string name);
    private static IEnumerable`1<string> SplitToHumpsInternal(string name);
    public static void FindHumps(Char* textData, int textLen, UnsafeIntArray& humps, Char* textLowercase);
    public static string HandleCastingTypos(string pattern);
    [PureAttribute]
public static MatcherScore CalcScoreOnHumps(UnsafeIntArray humps, Int32[] matchPosition, MatcherScore all, MatcherScore first, MatcherScore noGaps);
    public static bool IsWholeWordsMatch(UnsafeIntArray humps, Int32[] matchPosition, int inputLength);
}
public class JetBrains.Util.Text.Matchers.BoyerMoore : object {
    private string myPattern;
    [CanBeNullAttribute]
private Int32[] mySkipArray;
    public BoyerMoore(string pattern);
    public int Search(Char* text, int length, int startIndex);
}
public class JetBrains.Util.Text.StringAbbreviator`1 : object {
    private static PropertyId`1<string> Abbr;
    private static PropertyId`1<Nullable`1<char>> Caps;
    private static PropertyId`1<TItem> Item;
    private static PropertyId`1<string> NonCapsText;
    private static PropertyId`1<PropertyBag[]> Parts;
    private static PropertyId`1<string> Text;
    private static string myDisambigChars;
    private static Regex myRegexMatchNonWord;
    private static Regex myRegexSplitByCaps;
    private int myCharsLimit;
    private OneToSetMap`2<string, PropertyBag> myData;
    private Func`2<TItem, string> myFItemName;
    protected StringAbbreviator`1(IEnumerable`1<TItem> items, Func`2<TItem, string> FItemName, int nChars);
    private static StringAbbreviator`1();
    [NotNullAttribute]
public static Dictionary`2<TItem, string> Run(IEnumerable`1<TItem> items, Func`2<TItem, string> FItemName, int nChars);
    private static bool IsCaps(char ch);
    private static string RemoveNonAlphaChars(string text);
    private OneToSetMap`2<string, PropertyBag> CreateData(IEnumerable`1<TItem> items);
    private string GetDefaultAbbreviation(PropertyBag bag);
    [NotNullAttribute]
private PropertyBag GetNameParts(TItem item);
    [NotNullAttribute]
private Dictionary`2<TItem, string> GetResult();
    private void ResolveConflicts();
    private void ResolveConflicts_ChooseUniqueChars();
    private void ResolveConflicts_DisambigChars();
}
public class JetBrains.Util.Text.WildcardIdentifierMatcher : object {
    private string myPattern;
    private bool myCaseSensitive;
    private string myOriginalPattern;
    private Wildcard myWildcard;
    private string myNonstarFilter;
    [CompilerGeneratedAttribute]
private MatcherScore <CurrentScore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CurrentResult>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentIdentifier>k__BackingField;
    public bool HasSuffixShrinkProperty { get; }
    public MatcherScore CurrentScore { get; private set; }
    public bool CurrentResult { get; private set; }
    [CanBeNullAttribute]
public string CurrentIdentifier { get; private set; }
    public string Filter { get; }
    public IdentifierMatchingStyle MatchingStyle { get; }
    public TypoCorrectionType CorrectTypos { get; }
    public WildcardIdentifierMatcher(string wildCardPattern, bool caseSensitive, string originalPattern);
    public sealed virtual IIdentifierMatcher Clone();
    private sealed virtual override object System.ICloneable.Clone();
    public sealed virtual bool get_HasSuffixShrinkProperty();
    [CompilerGeneratedAttribute]
public sealed virtual MatcherScore get_CurrentScore();
    [CompilerGeneratedAttribute]
private void set_CurrentScore(MatcherScore value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CurrentResult();
    [CompilerGeneratedAttribute]
private void set_CurrentResult(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CurrentIdentifier();
    [CompilerGeneratedAttribute]
private void set_CurrentIdentifier(string value);
    public sealed virtual string get_Filter();
    public sealed virtual IdentifierMatchingStyle get_MatchingStyle();
    public sealed virtual TypoCorrectionType get_CorrectTypos();
    public sealed virtual bool Matches(string text);
    public sealed virtual Int32[] MatchingIndicies(string text);
    public sealed virtual Int32[] CurrentMatchingIndicesCopy();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
