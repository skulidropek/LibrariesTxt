public abstract class JetBrains.Profiler.SelfApi.CommonConfig : object {
    internal Nullable`1<int> Pid;
    internal bool DoNotUseApi;
    internal string LogFile;
    internal string OtherArguments;
    internal int Timeout;
}
[ExtensionAttribute]
public static class JetBrains.Profiler.SelfApi.CommonConfigHelpers : object {
    [ExtensionAttribute]
public static T ProfileExternalProcess(T config, int pid);
    [ExtensionAttribute]
private static T DoNotUseApi(T config);
    [ExtensionAttribute]
public static T UseLogFile(T config, string filePath);
    [ExtensionAttribute]
public static T WithCommandLineArgument(T config, string argument);
    [ExtensionAttribute]
public static T UseCustomResponseTimeout(T config, int milliseconds);
}
public static class JetBrains.Profiler.SelfApi.DotMemory : object {
    private static string MessageServicePrefix;
    private static string CltPresentableName;
    private static Prerequisite ConsoleRunnerPackage;
    private static object Mutex;
    private static Session _session;
    private static DotMemory();
    public static Task InitAsync(CancellationToken cancellationToken, IProgress`1<double> progress, Uri nugetUrl, NuGetApi nugetApi, string downloadTo);
    public static void InitOffline(string commandLineToolsFolder);
    public static void Init(Uri nugetUrl, NuGetApi nugetApi, string downloadTo);
    public static Task InitAsync(IProgress`1<double> progress, Uri nugetUrl, NuGetApi nugetApi, string downloadTo);
    [ObsoleteAttribute("Use InitAsync or InitOffline instead")]
public static Task EnsurePrerequisiteAsync(CancellationToken cancellationToken, IProgress`1<double> progress, Uri nugetUrl, NuGetApi nugetApi, string downloadTo);
    [ObsoleteAttribute("Use InitAsync or InitOffline instead")]
public static Task EnsurePrerequisiteAsync(IProgress`1<double> progress, Uri nugetUrl, NuGetApi nugetApi, string downloadTo);
    [ObsoleteAttribute("Use Init or InitOffline instead")]
public static void EnsurePrerequisite(Uri nugetUrl, NuGetApi nugetApi, string downloadTo);
    public static string GetSnapshotOnce();
    public static string GetSnapshotOnce(Config config);
    public static void Attach();
    public static void Attach(Config config);
    public static string Detach();
    public static void GetSnapshot(string name);
    private static string GetSaveToFilePath(Config config);
    private static Session RunConsole(string command, Config config);
}
public static class JetBrains.Profiler.SelfApi.DotTrace : object {
    private static string MessageServicePrefix;
    private static string CltPresentableName;
    private static Prerequisite ConsoleRunnerPackage;
    private static object Mutex;
    private static Session _session;
    private static String[] _collectedSnapshots;
    private static HashSet`1<string> _deletedIndexFiles;
    private static int _packedInZipCount;
    private static DotTrace();
    public static Task InitAsync(CancellationToken cancellationToken, IProgress`1<double> progress, Uri nugetUrl, NuGetApi nugetApi, string downloadTo);
    public static void InitOffline(string commandLineToolsFolder);
    public static void Init(Uri nugetUrl, NuGetApi nugetApi, string downloadTo);
    public static Task InitAsync(IProgress`1<double> progress, Uri nugetUrl, NuGetApi nugetApi, string downloadTo);
    [ObsoleteAttribute("Use InitAsync or InitOffline instead")]
public static Task EnsurePrerequisiteAsync(CancellationToken cancellationToken, IProgress`1<double> progress, Uri nugetUrl, NuGetApi nugetApi, string downloadTo);
    [ObsoleteAttribute("Use InitAsync or InitOffline instead")]
public static Task EnsurePrerequisiteAsync(IProgress`1<double> progress, Uri nugetUrl, NuGetApi nugetApi, string downloadTo);
    [ObsoleteAttribute("Use Init or InitOffline instead")]
public static void EnsurePrerequisite(Uri nugetUrl, NuGetApi nugetApi, string downloadTo);
    public static void Attach();
    public static void Attach(Config config);
    public static void Detach();
    public static void StartCollectingData();
    public static void SaveData();
    public static void DropData();
    public static void StopCollectingData();
    private static String[] GetCollectedSnapshotIndexFilesCore();
    public static String[] GetCollectedSnapshotIndexFiles();
    public static String[] GetCollectedSnapshotFiles();
    public static string GetCollectedSnapshotFilesArchive(bool deleteUnpackedFiles);
    private static String[] GetSnapshotFiles(string indexFile);
    private static string CreateUniqFileName(string directory, string name, string extension);
    private static Session RunProfiler(Config config);
}
internal static class JetBrains.Profiler.SelfApi.Impl.CommandLineToolsConfig : object {
    internal static SemanticVersion NupkgVersion;
    private static CommandLineToolsConfig();
}
internal class JetBrains.Profiler.SelfApi.Impl.ConsoleProfiler : object {
    public static int InfiniteTimeout;
    private Process _process;
    private string _prefix;
    private string _presentableName;
    private List`1<string> _outputLines;
    private List`1<string> _errorLines;
    private Func`1<bool> _isApiReady;
    private int _firstOutputLineToProcess;
    public bool IsApiUsed { get; }
    public ConsoleProfiler(string executable, string arguments, string messageServicePrefix, string presentableName, Func`1<bool> isApiReady, IResponseCommandProcessor commandProcessor);
    public bool get_IsApiUsed();
    private Match WaitFor(Regex regex, int milliseconds);
    private Regex BuildCommandRegex(string command, string argument);
    public void AwaitResponse(string command, int milliseconds);
    private static bool IsInfiniteTimeout(int milliseconds);
    public void Send(string command, String[] args);
    private InvalidOperationException BuildException(string caption);
    public void AwaitFinished(int milliseconds);
    public void AwaitConnected(int milliseconds);
}
internal static class JetBrains.Profiler.SelfApi.Impl.Helper : object {
    internal static void ChModExecutable(string path);
    internal static void CheckAttachCompatibility();
    internal static void CheckSamplingCompatibility();
}
internal interface JetBrains.Profiler.SelfApi.Impl.IResponseCommandProcessor {
    public abstract virtual void ProcessCommand(string command, string args);
}
[ExtensionAttribute]
internal static class JetBrains.Profiler.SelfApi.Impl.NuGet : object {
    public static Uri GetDefaultUrl(NuGetApi nugetApi);
    [ExtensionAttribute]
public static Task`1<HttpContent> GetNupkgContentAsync(HttpClient http, Uri nugetUrl, NuGetApi nugetApi, string packageId, SemanticVersion packageVersion, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Uri Combine(Uri baseUrl, string subPath);
    [ExtensionAttribute]
public static Uri Query(Uri baseUrl, string query);
}
internal abstract class JetBrains.Profiler.SelfApi.Impl.PrerequisiteBase : object {
    public string Name;
    public SemanticVersion SemanticVersion;
    private Task _downloadTask;
    private string _downloadTo;
    private string _runnerPath;
    protected PrerequisiteBase(string name, SemanticVersion semanticVersion);
    public Task DownloadAsync(Uri nugetUrl, NuGetApi nugetApi, string downloadTo, IProgress`1<double> progress, CancellationToken cancellationToken);
    public void VerifyReady();
    public string GetRunnerPath();
    [AsyncStateMachineAttribute("JetBrains.Profiler.SelfApi.Impl.PrerequisiteBase/<DoDownloadAsync>d__9")]
private Task DoDownloadAsync(Uri nugetUrl, NuGetApi nugetApi, string downloadTo, IProgress`1<double> progress, CancellationToken cancellationToken);
    private static void ThrowOperationCanceledExceptionIfNeeded(Exception e, int maxExceptionDepth);
    public bool CheckLocalBinaryFolder(string folderPath);
    public void AssertLocalBinaryFolder(string folderPath);
    private bool TryGetRunnerAtPath(string profilerLocalPath, String& runnerPath);
    private bool TryGetDownloadedRunner(string downloadPath, string runtimeIdString, String& runnerPath);
    protected abstract virtual string GetRunnerName();
    protected abstract virtual string GetPackageName();
    protected abstract virtual long GetEstimatedSize();
    protected abstract virtual string GetPrepareMethodPrefix();
    private static string GetDefaultDownloadPath();
    public static string GetNearbyPath();
    private static void CopyStream(Stream from, Stream to, long estimatedLength, IProgress`1<double> progress, CancellationToken cancellationToken);
}
internal class JetBrains.Profiler.SelfApi.Impl.SubProgress : object {
    private IProgress`1<double> _parent;
    private double _start;
    private double _weight;
    public SubProgress(IProgress`1<double> parent, double start, double weight);
    public sealed virtual void Report(double value);
}
internal static class JetBrains.Profiler.SelfApi.Impl.Unix.LibC : object {
    internal static string LibraryName;
    internal static int chmod(string pathname, UnixFileModes mode);
}
internal enum JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes : Enum {
    public UInt32 value__;
    public static UnixFileModes S_ISUID;
    public static UnixFileModes S_ISGID;
    public static UnixFileModes S_ISVTX;
    public static UnixFileModes S_IRUSR;
    public static UnixFileModes S_IWUSR;
    public static UnixFileModes S_IXUSR;
    public static UnixFileModes S_IRGRP;
    public static UnixFileModes S_IWGRP;
    public static UnixFileModes S_IXGRP;
    public static UnixFileModes S_IROTH;
    public static UnixFileModes S_IWOTH;
    public static UnixFileModes S_IXOTH;
    public static UnixFileModes S_IRWXG;
    public static UnixFileModes S_IRWXU;
    public static UnixFileModes S_IRWXO;
    public static UnixFileModes ACCESSPERMS;
    public static UnixFileModes ALLPERMS;
    public static UnixFileModes DEFFILEMODE;
    public static UnixFileModes S_IFMT;
    public static UnixFileModes S_IFDIR;
    public static UnixFileModes S_IFCHR;
    public static UnixFileModes S_IFBLK;
    public static UnixFileModes S_IFREG;
    public static UnixFileModes S_IFIFO;
    public static UnixFileModes S_IFLNK;
    public static UnixFileModes S_IFSOCK;
    public static UnixFileModes rw_r__r__;
    public static UnixFileModes rwxr_xr_x;
}
internal static class JetBrains.Profiler.SelfApi.Impl.Unix.UnixHelper : object {
    internal static void UnixChMod(string path, UnixFileModes mode);
}
public enum JetBrains.Profiler.SelfApi.NuGetApi : Enum {
    public int value__;
    public static NuGetApi V2;
    public static NuGetApi V3;
}
public static class JetBrains.Profiler.SelfApi.Trace : object {
    public static TraceSource Source;
    private static int _id;
    private static Trace();
    public static void Verbose(string message);
    public static void Verbose(string format, Object[] arguments);
    public static void Info(string message);
    public static void Info(string format, Object[] arguments);
    public static void Error(string message);
    public static void Error(string message, Exception exception);
}
