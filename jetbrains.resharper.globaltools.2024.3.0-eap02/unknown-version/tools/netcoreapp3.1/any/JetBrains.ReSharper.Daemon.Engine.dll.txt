public abstract class JetBrains.ReSharper.Daemon.Actions.NuGet.EnableDaemonForFilesFromNugetPackagesActionBase : object {
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    private Func`2<Data, IEnumerable`1<IProject>> GetProjectsToUpdate;
    private string Target { get; }
    protected EnableDaemonForFilesFromNugetPackagesActionBase(string target, Func`2<Data, IEnumerable`1<IProject>> getProjectsToUpdate);
    [CompilerGeneratedAttribute]
private string get_Target();
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("")]
public class JetBrains.ReSharper.Daemon.Actions.NuGet.EnableDaemonForFilesInProjectFromNugetPackagesAction : EnableDaemonForFilesFromNugetPackagesActionBase {
}
[ActionAttribute("")]
public class JetBrains.ReSharper.Daemon.Actions.NuGet.EnableDaemonForFilesInSolutionFromNugetPackagesAction : EnableDaemonForFilesFromNugetPackagesActionBase {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Daemon.Actions.NuGet.ZoneMarker : object {
}
public abstract class JetBrains.ReSharper.Daemon.ClrInheritanceMarkOnGutterBase`1 : InheritanceMarkOnGutterBase`1<TDeclaredElement> {
    private bool myOverride;
    protected ClrInheritanceMarkOnGutterBase`1(IDeclaration declaration, TDeclaredElement declaredElement);
    public virtual void AddOverriddenMember(TDeclaredElement parent);
    protected virtual RichText FromName(TDeclaredElement declaredElement, bool shortName);
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/CodeSmellStatic")]
public class JetBrains.ReSharper.Daemon.Errors.UnresolvedPathError : object {
    private static string MESSAGE;
    [CompilerGeneratedAttribute]
private IPathReference <PathReference>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IPathReference PathReference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnresolvedPathError(IPathReference pathReference);
    private static UnresolvedPathError();
    [CompilerGeneratedAttribute]
public IPathReference get_PathReference();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ActionAttribute("JetBrains.ReSharper.Daemon.Resources.Strings", "ConfigureActionText")]
public class JetBrains.ReSharper.Daemon.Impl.Actions.ConfigureIgnoredProjectsAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("")]
public class JetBrains.ReSharper.Daemon.Impl.Actions.EnableDaemonAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    [CanBeNullAttribute]
private static IProjectFile TryGetProjectFile(IDataContext context);
    [CanBeNullAttribute]
private static IProjectFolder TryGetProjectFolder(IDataContext context);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IdentifierHighlightings")]
[DaemonTooltipProviderAttribute("")]
public class JetBrains.ReSharper.Daemon.Impl.FormatStringItemHighlighting : object {
    private DocumentRange myRange;
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public FormatStringItemHighlighting(DocumentRange range);
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
}
public abstract class JetBrains.ReSharper.Daemon.Impl.NextPrevActions.NextPrevHandler : object {
    [NotNullAttribute]
protected Lifetime Lifetime;
    [NotNullAttribute]
protected ISolution Solution;
    [CanBeNullAttribute]
protected IProjectFile ProjectFile;
    protected int CaretOffset;
    [CompilerGeneratedAttribute]
private EventHandler CanTryAgain;
    protected NextPrevHandler(Lifetime lifetime, ISolution solution, IDataContext dataContext);
    public abstract virtual bool FindTarget(IProjectFile& file, Int32& offset, RichTextBlock& message);
    [CompilerGeneratedAttribute]
public void add_CanTryAgain(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CanTryAgain(EventHandler value);
    protected void FireCanTryAgain();
}
public abstract class JetBrains.ReSharper.Daemon.Impl.NextPrevActions.NextPrevProblemInFileHandler : NextPrevHandler {
    [CanBeNullAttribute]
private IDocumentMarkup myMarkupModel;
    protected NextPrevProblemInFileHandler(Lifetime lifetime, ISolution solution, IDataContext dataContext);
    private bool IsSuitableByType(IHighlighter highlighter, IPsiSourceFile sourceFile, IDaemon daemon, HighlightingSettingsManager highlightingManager, IContextBoundSettingsStore storeBoundToSourceFile);
    protected virtual bool IsSuitableByType(IHighlighter highlighter);
    protected abstract virtual bool IsSuitableByPosition(IHighlighter marker);
    protected abstract virtual bool IsBetter(IHighlighter first, IHighlighter second);
    public virtual bool FindTarget(IProjectFile& file, Int32& offset, RichTextBlock& message);
    private sealed virtual override void JetBrains.TextControl.DocumentMarkup.IDocumentMarkupEvents.OnDocumentMarkupChanged(IDocumentMarkup markup, ICollection`1<IHighlighter> added, ICollection`1<IHighlighter> removed, ICollection`1<IHighlighter> modified);
    private sealed virtual override void JetBrains.TextControl.DocumentMarkup.IDocumentMarkupEvents.OnDocumentMarkupReset(IDocumentMarkup newMarkup);
}
public interface JetBrains.ReSharper.Daemon.Impl.ProjectModelWrapper.IUpdatableTextRangesSource {
    public abstract virtual void UpdatableRangesInFile(SourceFilePtr file, Func`2<TextRange, TextRange> updateFunc);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.Impl.ProjectModelWrapper.UpdatableTextRangesSources : object {
    private SynchronizedList`1<IUpdatableTextRangesSource> myUpdatableRangeSources;
    private DocumentManager myDocumentManager;
    public UpdatableTextRangesSources(ISolution solution, DocumentManager documentManager, ChangeManager changeManager);
    public sealed virtual object Execute(IChangeMap changeMap);
    public static UpdatableTextRangesSources GetInstance(ISolution solution);
    public void RegisterUpdatableTextRangesSource(Lifetime lifetime, IUpdatableTextRangesSource source);
    public void UpdateTextRanges(SourceFilePtr file, Func`2<TextRange, TextRange> func);
}
public abstract class JetBrains.ReSharper.Daemon.Impl.SyntaxErrorBase : object {
    private string myToolTip;
    private DocumentRange myRange;
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    protected SyntaxErrorBase(string toolTip, DocumentRange range);
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/GutterMarks")]
public class JetBrains.ReSharper.Daemon.InheritanceMarkOnGutter : ClrInheritanceMarkOnGutterBase`1<ITypeMember> {
    [CanBeNullAttribute]
private List`1<ITypeMember> myImplementedOverDefaultList;
    private static DeclaredElementPresenterStyle LOCATION_PRESENTER;
    public string AttributeId { get; }
    public InheritanceMarkOnGutter(IDeclaration inheritor, ITypeMember typeMember);
    private static InheritanceMarkOnGutter();
    public virtual void AddImplementedOverDefaultMember(ITypeMember parent);
    protected virtual RichText FormatLocation(ITypeMember member);
    public virtual string get_AttributeId();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Daemon.InheritanceMarkOnGutter/<GetBulbItems>d__7")]
public virtual IEnumerable`1<BulbMenuItem> GetBulbItems();
}
public abstract class JetBrains.ReSharper.Daemon.InheritanceMarkOnGutterBase`1 : object {
    private List`1<TDeclaredElement> myHiddenList;
    private List`1<TDeclaredElement> myImplementedList;
    private List`1<TDeclaredElement> myOverriddenList;
    protected PsiLanguageType myLanguageType;
    [NotNullAttribute]
private Dictionary`2<TDeclaredElement, RichText> myMessages;
    [NotNullAttribute]
private Dictionary`2<TDeclaredElement, RichText> myShortMessages;
    private TDeclaredElement myInheritor;
    private DocumentRange myRange;
    [CompilerGeneratedAttribute]
private IPsiSourceFile <CurrentFile>k__BackingField;
    public TDeclaredElement Inheritor { get; }
    public IEnumerable`1<TDeclaredElement> HiddenList { get; }
    public IEnumerable`1<TDeclaredElement> ImplementedList { get; }
    public IEnumerable`1<TDeclaredElement> OverriddenList { get; }
    public IPsiSourceFile CurrentFile { get; }
    private string JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.ToolTip { get; }
    private string JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.ErrorStripeToolTip { get; }
    public string AttributeId { get; }
    protected InheritanceMarkOnGutterBase`1(IDeclaration inheritorDeclaration, TDeclaredElement declaredElement);
    public TDeclaredElement get_Inheritor();
    public IEnumerable`1<TDeclaredElement> get_HiddenList();
    public IEnumerable`1<TDeclaredElement> get_ImplementedList();
    public IEnumerable`1<TDeclaredElement> get_OverriddenList();
    [CompilerGeneratedAttribute]
public IPsiSourceFile get_CurrentFile();
    private RichTextBlock GetToolTipBlock(bool addGoToHint);
    private sealed virtual override string JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.get_ToolTip();
    private sealed virtual override string JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.get_ErrorStripeToolTip();
    private sealed virtual override RichTextBlock JetBrains.ReSharper.Feature.Services.Daemon.IRichTextToolTipHighlighting.TryGetTooltip(HighlighterTooltipKind where);
    public virtual string get_AttributeId();
    protected virtual RichText KindName(TDeclaredElement declaredElement);
    protected abstract virtual RichText FromName(TDeclaredElement declaredElement, bool shortName);
    public virtual void AddImplementedMember(TDeclaredElement parent);
    protected virtual RichText GetImplementsMessage(TDeclaredElement parent, bool shortForm);
    public virtual void AddOverriddenMember(TDeclaredElement parent);
    protected virtual RichText GetOverridesMessage(TDeclaredElement parent, bool shortForm);
    public virtual void AddHiddenMember(TDeclaredElement parent);
    protected virtual RichText GetHidesMessage(TDeclaredElement parent, bool shortForm);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Daemon.InheritanceMarkOnGutterBase`1/<GetBulbItems>d__36")]
public virtual IEnumerable`1<BulbMenuItem> GetBulbItems();
    [NotNullAttribute]
protected BulbMenuItem CreateItem(TDeclaredElement member, IconId icon);
    protected abstract virtual RichText FormatLocation(TDeclaredElement member);
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IdentifierHighlightings")]
public class JetBrains.ReSharper.Daemon.RainbowHighlighting : object {
    [CompilerGeneratedAttribute]
private DocumentRange <range>P;
    [CompilerGeneratedAttribute]
private string <AttributeId>k__BackingField;
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public string AttributeId { get; }
    public RainbowHighlighting(string attributeId, DocumentRange range);
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    [CompilerGeneratedAttribute]
public sealed virtual string get_AttributeId();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Daemon.RegionsInfoProvider : DefaultRegionsInfoProvider {
    private ISolution mySolution;
    private GlobalFileStructureBuilder myBuilder;
    public RegionsInfoProvider(ISolution solution, GlobalFileStructureBuilder builder);
    public virtual IRegionsInfo GetCachedInfoForDocument(IDocument document);
    public virtual IRegionsInfo CreateInfoForDocument(IDocument document);
    public virtual IRegionsInfo GetOrCreateInfoForDocument(IDocument document);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Daemon.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string AbstractOrVirtualOverridableEventIsNeverInvoked { get; }
    public static string AccessorInAutoPropertyIsNeverUsed { get; }
    public static string AllUsagesOfAMethodOrReadOnlyPropertyIndexerUseReturnedValueAsIEnumerableTWhileItsDeclaredWithMoreSpecificTypeEGListT { get; }
    public static string ALocalFunctionDoesNotUsethisObjectNeitherImplicitlyNorExplicitlyOrOutsideLocalVariablesAndCanBeMadeStatic { get; }
    public static string AnAbstractOrVirtualOverridableEventIsNeverInvokedInItsClassOrItsInheritors { get; }
    public static string ANonVirtualInstanceMemberDoesNotUsethisObjectNeitherImplicitlyNorExplicitlyAndCanBeMadeStaticShared { get; }
    public static string AutoPropertyAccessorIsNeverUsed { get; }
    public static string AutoPropertyAccessorIsNeverUsedMessage { get; }
    public static string AutoPropertyCanBeMadeGetOnly { get; }
    public static string AutoPropertyCanBeMadeMessage { get; }
    public static string AutoPropertyHasNoWriteUsagesAfterInitializationAndCanBeMadeGetOnly { get; }
    public static string AutoPropertyWithoutSetterHasNoInitializerOrNeverAssignedInConstructor { get; }
    public static string CalculateElementIdForPrivateMembersSettingDescription { get; }
    public static string CanBeMadeMessage { get; }
    public static string CanBeMadeMessage3 { get; }
    public static string CanBeMadeMessage4 { get; }
    public static string CanBeMadeMessage5 { get; }
    public static string CanBeMadePrivateMessage { get; }
    public static string CanBeMadeProtectedMessage { get; }
    public static string CanBeMadeFileLocalMessage { get; }
    public static string ClassCanBeMadeSealedNonInheritable { get; }
    public static string ClassHasNoInheritorsAndCanBeMarkedSealedNonInheritable { get; }
    public static string ClassIsNeverInstantiated { get; }
    public static string ClassWithVirtualOverridableMembersNeverInherited { get; }
    public static string CollectionIsNeverUpdated { get; }
    public static string CollectionsContentIsNeverQueried { get; }
    public static string ConfigureActionText { get; }
    public static string ContentOfCollectionIsNeverUpdatedMessage { get; }
    public static string ContentOfCollectionIsOnlyUpdatedButNeverUsedMessage { get; }
    public static string ConvertLocalVariableOrFieldToConstant { get; }
    public static string ConvertLocalVariableOrFieldToConstant18 { get; }
    public static string ConvertToConstantMessage { get; }
    public static string DefaultEqualityOfStructIsUsedDescription { get; }
    public static string DefaultEqualityOfStructIsUsedMessage { get; }
    public static string DefaultEqualityOfStructIsUsedTitle { get; }
    public static string ElementsAreOnlyAddedToTheCollectionButNeverUsed { get; }
    public static string EntityIsOnlyUsedToCaptureItsName { get; }
    public static string EventIsInvokedNeitherInThisClassNorInItsInheritorsMessage { get; }
    public static string EventIsNeverInvokedMessage { get; }
    public static string EventIsNeverSubscribedTo { get; }
    public static string EventIsNeverSubscribedTo14 { get; }
    public static string EventIsNeverSubscribedToMessage { get; }
    public static string EventIsNotInvokedInAnyOfTheImplementationsMessage { get; }
    public static string EventNeverInvoked { get; }
    public static string EventNeverInvokedNoteThatInCThisWarningIsTheCompilerWarningCSAndIsNotConfiguredHere { get; }
    public static string ExceptInsideItsDeclaration_Text { get; }
    public static string FieldCanBeMadeReadonly { get; }
    public static string FieldHasNoWriteUsagesAfterInitializationAndCanBeMadeReadonly { get; }
    public static string FieldIsAssignedButItsValueIsNeverUsed { get; }
    public static string FieldIsAssignedButItsValueIsNeverUsedCompilerWarning { get; }
    public static string FieldIsNeverAssigned { get; }
    public static string FieldIsNeverAssignedCompilerWarning { get; }
    public static string FieldIsNeverUsed { get; }
    public static string FieldIsNeverUsedCompilerWarning { get; }
    public static string FromTo_Text { get; }
    public static string GetOnlyAutoPropertyIsNeverAssigned { get; }
    public static string GetOnlyAutoPropertyIsNeverAssignedMessage { get; }
    public static string HasNoInheritorsAndCanBeMarkedMessage { get; }
    public static string HasSomeMembersButNoInheritorsMessage { get; }
    public static string ImplicitConversionCompound_Text { get; }
    public static string ImplicitConversionOfElements_Text { get; }
    public static string ImplicitConversion_Text { get; }
    public static string IsAssignedButItsValueIsNeverUsedMessage { get; }
    public static string IsNeverAssignedMessage { get; }
    public static string IsNeverInstantiatedMessage { get; }
    public static string IsNeverOverriddenMessage { get; }
    public static string IsNeverUsedMessage { get; }
    public static string IsNeverUsedMessage1 { get; }
    public static string IsNeverUsedMessage2 { get; }
    public static string IsNeverUsedMessage6 { get; }
    public static string IsNeverUsedMessage7 { get; }
    public static string IsNeverUsedMessage8 { get; }
    public static string IsNeverUsedMessage9 { get; }
    public static string IsOnlyAssignedButItsValueIsNeverUsedMessage { get; }
    public static string IsOnlyUsedToDiscardOutParameterValueMessage { get; }
    public static string IsOnlyUsedToCaptureItsNameMessage { get; }
    public static string LabelIsNeverReferenced { get; }
    public static string LabelIsNeverReferencedMessage { get; }
    public static string LocalFunctionCanBeMadeStatic { get; }
    public static string LocalFunctionReturnValueIsNeverUsedMessage { get; }
    public static string LocalVariableIsAssignedButItsValueIsNeverUsed { get; }
    public static string LocalVariableIsAssignedButItsValueIsNeverUsedCompilerWarning { get; }
    public static string LocalVariableIsNeverUsed { get; }
    public static string LocalVariableIsNeverUsedCompilerWarning { get; }
    public static string LocalVariableParameterIsOnlyUsedToCaptureItsNameVianameofExpression { get; }
    public static string LocalVariableToDiscardOutParameter { get; }
    public static string LocalVariableToDiscardOutParameterDescription { get; }
    public static string MemberCanBeMadePrivate { get; }
    public static string MemberCanBeMadePrivate15 { get; }
    public static string MemberCanBeMadeProtected { get; }
    public static string MemberCanBeMadeProtected16 { get; }
    public static string MemberCanBeMadeStaticShared { get; }
    public static string MemberOrTypeCanBeMadeInternalFriend { get; }
    public static string MethodReturnValueIsNeverUsed { get; }
    public static string MethodReturnValueIsNeverUsed12 { get; }
    public static string MethodReturnValueIsNeverUsedMessage { get; }
    public static string NewElementsAreNeverAddedToTheCollection { get; }
    public static string NonAbstractClassHasVirtualOverridableMembersButHasNoInheritors { get; }
    public static string NonAccessedField { get; }
    public static string NonAccessedLocalVariable { get; }
    public static string NonAccessedPositionalProperty { get; }
    public static string NonStaticClassIsNeverInstantiated { get; }
    public static string OneTypeIsConvertedToAnotherButThereIsNoTypeInTheSolutionWhichIsInheritedFromBothAlsoAppliesToisOperatorAndAndComparisons { get; }
    public static string OnlyImplementationsOfAreUsedMessage { get; }
    public static string OnlyImplementationsOfEventAreSubscribedToMessage { get; }
    public static string OnlyOverridersOfEventAreSubscribedToMessage { get; }
    public static string OnlyOverridesOfAreUsedMessage { get; }
    public static string StructLacksIEquatableImplementationDescription { get; }
    public static string StructLacksIEquatableImplementationMessage { get; }
    public static string StructLacksIEquatableImplementationTitle { get; }
    public static string SuggestBaseTypeForParameter_AvoidMemberVirtualizationTitle { get; }
    public static string SuggestBaseTypeForParameter_AvoidMemberVirtualizationDescription { get; }
    public static string ParameterCanBeDeclaredWithBaseType { get; }
    public static string ConstructorParameterCanBeDeclaredWithBaseType { get; }
    public static string ParameterCanBeDeclaredWithBaseTypeNoteThatWhenTheBaseTypeIsIEnumerableTAnotherInspectionParameterTypeCanBeIEnumerableTWillBeApplied { get; }
    public static string ParameterCanBeDeclaredWithIEnumerableTTypeWhileItsDeclaredWithMoreSpecificTypeEGListT { get; }
    public static string ParameterCanBeOfTypeMessage { get; }
    public static string ParameterDeclaresTheImplicitPositionalPropertyThatIsNeverAccessedThisMayResultInUnnecessaryStateBeingCapturedInInstancesAndParticipatingInImplicitEqualsToStringImplementationsMessage { get; }
    public static string ParameterIsAssignedButItsValueIsNeverUsedMessage { get; }
    public static string ParameterIsNeverUsed { get; }
    public static string ParameterIsNeverUsedMessage { get; }
    public static string ParameterIsNotUsedInAnyOfTheImplementationsMessage { get; }
    public static string ParameterIsOnlyPassedToItselfAndUsedForPreconditionCheckSMessage { get; }
    public static string ParameterIsOnlyPassedToItselfMessage { get; }
    public static string ParameterIsOnlyUsedForPreconditionCheck { get; }
    public static string ParameterIsOnlyUsedForPreconditionCheck13 { get; }
    public static string ParameterIsOnlyUsedForPreconditionCheckSMessage { get; }
    public static string ParameterIsUsedNeitherInThisNorInOverridingsMessage { get; }
    public static string ParameterOfPartialMethodIsNeverUsed { get; }
    public static string ParameterOfThePrimaryConstructorIsDeclaredButNeverUsed { get; }
    public static string ParameterOutputValueIsAlwaysDiscarded { get; }
    public static string ParameterOutputValueIsAlwaysDiscardedMessage { get; }
    public static string ParameterTypeCanBeIEnumerableT { get; }
    public static string PositionalParameterIsNeverUsedDidYouForgetToUseItToInitializeThePropertyWithThatNameMessage { get; }
    public static string PrimaryConstructorParameterIsNeverAccessed { get; }
    public static string PositionalPropertyIsNeverAccessedExceptInImplicitEqualsToStringImplementationsMessage { get; }
    public static string PositionalPropertyIsNeverAccessedForRead { get; }
    public static string PropertyCanBeMadeInitOnly { get; }
    public static string PropertyCanBeMadeMessage { get; }
    public static string PropertySetterCanBeReplacesWithinitAccessorToEnforcePropertyImmutability { get; }
    public static string ReadonlyFieldIsNeverAssigned { get; }
    public static string ReadonlyFieldIsNeverAssignedCompilerWarning { get; }
    public static string ReadonlyIsNeverAssignedMessage { get; }
    public static string ReturnTypeCanBeIEnumerableT { get; }
    public static string ReturnTypeCanBeMessage { get; }
    public static string StructCanBeMadeReadonly { get; }
    public static string StructHasNoMutableMembersAndCanBeMadeReadonly { get; }
    public static string StructMemberCanBeMadeReadonly { get; }
    public static string StructMemberHasNoMutableAccessTothisAndCanBeMadeReadonly { get; }
    public static string SuspiciousCastThereIsNoTypeInTheSolutionWhichIsInheritedFromBothAndMessage { get; }
    public static string SuspiciousComparisonThereIsNoTypeInTheSolutionWhichIsInheritedFromBothAndMessage { get; }
    public static string SuspiciousTypeCheckThereIsNoTypeInTheSolutionWhichIsInheritedFromBothAndMessage { get; }
    public static string SuspiciousTypeConversionOrCheck { get; }
    public static string TheResultingValueOfOutputParameterIsAlwaysDiscarded { get; }
    public static string TypeCanBeMadeFileLocal { get; }
    public static string TypeCanBeMessage { get; }
    public static string TypeIsNeverUsed { get; }
    public static string TypeIsNeverUsed11 { get; }
    public static string TypeMemberIsNeverAccessedViaBaseType { get; }
    public static string TypeMemberIsNeverUsed { get; }
    public static string TypeMemberIsNeverUsed10 { get; }
    public static string TypeMemberIsNeverUsedFromOutsideOfImplementationHierarchyItIsOnlyAccessedFromOverridesThroughBaseCall { get; }
    public static string TypeMemberIsNeverUsedWithBaseTypeOrInterfaceItIsAlwaysAccessedViaMoreSpecificType { get; }
    public static string TypeMemberIsOnlyUsedInOverrides { get; }
    public static string TypeParameterIsNeverUsed { get; }
    public static string TypeParameterIsNeverUsedMessage { get; }
    public static string TypeWithSuspiciousEqualityIsUsedInRecordDescription { get; }
    public static string TypeWithSuspiciousEqualityIsUsedInRecordMessage { get; }
    public static string TypeWithSuspiciousEqualityIsUsedInRecordTitle { get; }
    public static string UnassignedField { get; }
    public static string UnassignedReadonlyField { get; }
    public static string UnusedLabel { get; }
    public static string UnusedLocalVariable { get; }
    public static string UnusedParameter { get; }
    public static string UnusedParameterInPartialMethod { get; }
    public static string UnusedPositionalParameter { get; }
    public static string NotAccessedPrimaryConstructorParameter { get; }
    public static string UnusedTypeParameter { get; }
    public static string UsageCheckingServiceSettingDescription { get; }
    public static string VirtualOverridableMemberIsNeverOverridden { get; }
    public static string VirtualOverridableMemberIsNeverOverriddenAndSoThevirtualoverridableModifierCanBeRemoved { get; }
    public static string WithItsOverridersIsNeverUsedFromOutsideMessage { get; }
    public static string EnableAnalysisInSolution_Text { get; }
    public static string EnableAnalysis_Text { get; }
    public static string DisableAnalysis_Text { get; }
    public static string ResumeAnalysis_Text { get; }
    public static string EnableAnalysisForAll_FilesFromNuGet_Text { get; }
    public static string DisableAnalysisForAll_FilesFromNuGet_Text { get; }
    public static string Implements_From__Text { get; }
    public static string Implements__Text { get; }
    public static string Overrides_From__Text { get; }
    public static string Hides_From__Text { get; }
    public static string Default_ToolTipFormatString_Text { get; }
    public static string ClickToGo_Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_AbstractOrVirtualOverridableEventIsNeverInvoked();
    public static string get_AccessorInAutoPropertyIsNeverUsed();
    public static string get_AllUsagesOfAMethodOrReadOnlyPropertyIndexerUseReturnedValueAsIEnumerableTWhileItsDeclaredWithMoreSpecificTypeEGListT();
    public static string get_ALocalFunctionDoesNotUsethisObjectNeitherImplicitlyNorExplicitlyOrOutsideLocalVariablesAndCanBeMadeStatic();
    public static string get_AnAbstractOrVirtualOverridableEventIsNeverInvokedInItsClassOrItsInheritors();
    public static string get_ANonVirtualInstanceMemberDoesNotUsethisObjectNeitherImplicitlyNorExplicitlyAndCanBeMadeStaticShared();
    public static string get_AutoPropertyAccessorIsNeverUsed();
    public static string get_AutoPropertyAccessorIsNeverUsedMessage();
    public static string get_AutoPropertyCanBeMadeGetOnly();
    public static string get_AutoPropertyCanBeMadeMessage();
    public static string get_AutoPropertyHasNoWriteUsagesAfterInitializationAndCanBeMadeGetOnly();
    public static string get_AutoPropertyWithoutSetterHasNoInitializerOrNeverAssignedInConstructor();
    public static string get_CalculateElementIdForPrivateMembersSettingDescription();
    public static string get_CanBeMadeMessage();
    public static string get_CanBeMadeMessage3();
    public static string get_CanBeMadeMessage4();
    public static string get_CanBeMadeMessage5();
    public static string get_CanBeMadePrivateMessage();
    public static string get_CanBeMadeProtectedMessage();
    public static string get_CanBeMadeFileLocalMessage();
    public static string get_ClassCanBeMadeSealedNonInheritable();
    public static string get_ClassHasNoInheritorsAndCanBeMarkedSealedNonInheritable();
    public static string get_ClassIsNeverInstantiated();
    public static string get_ClassWithVirtualOverridableMembersNeverInherited();
    public static string get_CollectionIsNeverUpdated();
    public static string get_CollectionsContentIsNeverQueried();
    public static string get_ConfigureActionText();
    public static string get_ContentOfCollectionIsNeverUpdatedMessage();
    public static string get_ContentOfCollectionIsOnlyUpdatedButNeverUsedMessage();
    public static string get_ConvertLocalVariableOrFieldToConstant();
    public static string get_ConvertLocalVariableOrFieldToConstant18();
    public static string get_ConvertToConstantMessage();
    public static string get_DefaultEqualityOfStructIsUsedDescription();
    public static string get_DefaultEqualityOfStructIsUsedMessage();
    public static string get_DefaultEqualityOfStructIsUsedTitle();
    public static string get_ElementsAreOnlyAddedToTheCollectionButNeverUsed();
    public static string get_EntityIsOnlyUsedToCaptureItsName();
    public static string get_EventIsInvokedNeitherInThisClassNorInItsInheritorsMessage();
    public static string get_EventIsNeverInvokedMessage();
    public static string get_EventIsNeverSubscribedTo();
    public static string get_EventIsNeverSubscribedTo14();
    public static string get_EventIsNeverSubscribedToMessage();
    public static string get_EventIsNotInvokedInAnyOfTheImplementationsMessage();
    public static string get_EventNeverInvoked();
    public static string get_EventNeverInvokedNoteThatInCThisWarningIsTheCompilerWarningCSAndIsNotConfiguredHere();
    public static string get_ExceptInsideItsDeclaration_Text();
    public static string get_FieldCanBeMadeReadonly();
    public static string get_FieldHasNoWriteUsagesAfterInitializationAndCanBeMadeReadonly();
    public static string get_FieldIsAssignedButItsValueIsNeverUsed();
    public static string get_FieldIsAssignedButItsValueIsNeverUsedCompilerWarning();
    public static string get_FieldIsNeverAssigned();
    public static string get_FieldIsNeverAssignedCompilerWarning();
    public static string get_FieldIsNeverUsed();
    public static string get_FieldIsNeverUsedCompilerWarning();
    public static string get_FromTo_Text();
    public static string get_GetOnlyAutoPropertyIsNeverAssigned();
    public static string get_GetOnlyAutoPropertyIsNeverAssignedMessage();
    public static string get_HasNoInheritorsAndCanBeMarkedMessage();
    public static string get_HasSomeMembersButNoInheritorsMessage();
    public static string get_ImplicitConversionCompound_Text();
    public static string get_ImplicitConversionOfElements_Text();
    public static string get_ImplicitConversion_Text();
    public static string get_IsAssignedButItsValueIsNeverUsedMessage();
    public static string get_IsNeverAssignedMessage();
    public static string get_IsNeverInstantiatedMessage();
    public static string get_IsNeverOverriddenMessage();
    public static string get_IsNeverUsedMessage();
    public static string get_IsNeverUsedMessage1();
    public static string get_IsNeverUsedMessage2();
    public static string get_IsNeverUsedMessage6();
    public static string get_IsNeverUsedMessage7();
    public static string get_IsNeverUsedMessage8();
    public static string get_IsNeverUsedMessage9();
    public static string get_IsOnlyAssignedButItsValueIsNeverUsedMessage();
    public static string get_IsOnlyUsedToDiscardOutParameterValueMessage();
    public static string get_IsOnlyUsedToCaptureItsNameMessage();
    public static string get_LabelIsNeverReferenced();
    public static string get_LabelIsNeverReferencedMessage();
    public static string get_LocalFunctionCanBeMadeStatic();
    public static string get_LocalFunctionReturnValueIsNeverUsedMessage();
    public static string get_LocalVariableIsAssignedButItsValueIsNeverUsed();
    public static string get_LocalVariableIsAssignedButItsValueIsNeverUsedCompilerWarning();
    public static string get_LocalVariableIsNeverUsed();
    public static string get_LocalVariableIsNeverUsedCompilerWarning();
    public static string get_LocalVariableParameterIsOnlyUsedToCaptureItsNameVianameofExpression();
    public static string get_LocalVariableToDiscardOutParameter();
    public static string get_LocalVariableToDiscardOutParameterDescription();
    public static string get_MemberCanBeMadePrivate();
    public static string get_MemberCanBeMadePrivate15();
    public static string get_MemberCanBeMadeProtected();
    public static string get_MemberCanBeMadeProtected16();
    public static string get_MemberCanBeMadeStaticShared();
    public static string get_MemberOrTypeCanBeMadeInternalFriend();
    public static string get_MethodReturnValueIsNeverUsed();
    public static string get_MethodReturnValueIsNeverUsed12();
    public static string get_MethodReturnValueIsNeverUsedMessage();
    public static string get_NewElementsAreNeverAddedToTheCollection();
    public static string get_NonAbstractClassHasVirtualOverridableMembersButHasNoInheritors();
    public static string get_NonAccessedField();
    public static string get_NonAccessedLocalVariable();
    public static string get_NonAccessedPositionalProperty();
    public static string get_NonStaticClassIsNeverInstantiated();
    public static string get_OneTypeIsConvertedToAnotherButThereIsNoTypeInTheSolutionWhichIsInheritedFromBothAlsoAppliesToisOperatorAndAndComparisons();
    public static string get_OnlyImplementationsOfAreUsedMessage();
    public static string get_OnlyImplementationsOfEventAreSubscribedToMessage();
    public static string get_OnlyOverridersOfEventAreSubscribedToMessage();
    public static string get_OnlyOverridesOfAreUsedMessage();
    public static string get_StructLacksIEquatableImplementationDescription();
    public static string get_StructLacksIEquatableImplementationMessage();
    public static string get_StructLacksIEquatableImplementationTitle();
    public static string get_SuggestBaseTypeForParameter_AvoidMemberVirtualizationTitle();
    public static string get_SuggestBaseTypeForParameter_AvoidMemberVirtualizationDescription();
    public static string get_ParameterCanBeDeclaredWithBaseType();
    public static string get_ConstructorParameterCanBeDeclaredWithBaseType();
    public static string get_ParameterCanBeDeclaredWithBaseTypeNoteThatWhenTheBaseTypeIsIEnumerableTAnotherInspectionParameterTypeCanBeIEnumerableTWillBeApplied();
    public static string get_ParameterCanBeDeclaredWithIEnumerableTTypeWhileItsDeclaredWithMoreSpecificTypeEGListT();
    public static string get_ParameterCanBeOfTypeMessage();
    public static string get_ParameterDeclaresTheImplicitPositionalPropertyThatIsNeverAccessedThisMayResultInUnnecessaryStateBeingCapturedInInstancesAndParticipatingInImplicitEqualsToStringImplementationsMessage();
    public static string get_ParameterIsAssignedButItsValueIsNeverUsedMessage();
    public static string get_ParameterIsNeverUsed();
    public static string get_ParameterIsNeverUsedMessage();
    public static string get_ParameterIsNotUsedInAnyOfTheImplementationsMessage();
    public static string get_ParameterIsOnlyPassedToItselfAndUsedForPreconditionCheckSMessage();
    public static string get_ParameterIsOnlyPassedToItselfMessage();
    public static string get_ParameterIsOnlyUsedForPreconditionCheck();
    public static string get_ParameterIsOnlyUsedForPreconditionCheck13();
    public static string get_ParameterIsOnlyUsedForPreconditionCheckSMessage();
    public static string get_ParameterIsUsedNeitherInThisNorInOverridingsMessage();
    public static string get_ParameterOfPartialMethodIsNeverUsed();
    public static string get_ParameterOfThePrimaryConstructorIsDeclaredButNeverUsed();
    public static string get_ParameterOutputValueIsAlwaysDiscarded();
    public static string get_ParameterOutputValueIsAlwaysDiscardedMessage();
    public static string get_ParameterTypeCanBeIEnumerableT();
    public static string get_PositionalParameterIsNeverUsedDidYouForgetToUseItToInitializeThePropertyWithThatNameMessage();
    public static string get_PrimaryConstructorParameterIsNeverAccessed();
    public static string get_PositionalPropertyIsNeverAccessedExceptInImplicitEqualsToStringImplementationsMessage();
    public static string get_PositionalPropertyIsNeverAccessedForRead();
    public static string get_PropertyCanBeMadeInitOnly();
    public static string get_PropertyCanBeMadeMessage();
    public static string get_PropertySetterCanBeReplacesWithinitAccessorToEnforcePropertyImmutability();
    public static string get_ReadonlyFieldIsNeverAssigned();
    public static string get_ReadonlyFieldIsNeverAssignedCompilerWarning();
    public static string get_ReadonlyIsNeverAssignedMessage();
    public static string get_ReturnTypeCanBeIEnumerableT();
    public static string get_ReturnTypeCanBeMessage();
    public static string get_StructCanBeMadeReadonly();
    public static string get_StructHasNoMutableMembersAndCanBeMadeReadonly();
    public static string get_StructMemberCanBeMadeReadonly();
    public static string get_StructMemberHasNoMutableAccessTothisAndCanBeMadeReadonly();
    public static string get_SuspiciousCastThereIsNoTypeInTheSolutionWhichIsInheritedFromBothAndMessage();
    public static string get_SuspiciousComparisonThereIsNoTypeInTheSolutionWhichIsInheritedFromBothAndMessage();
    public static string get_SuspiciousTypeCheckThereIsNoTypeInTheSolutionWhichIsInheritedFromBothAndMessage();
    public static string get_SuspiciousTypeConversionOrCheck();
    public static string get_TheResultingValueOfOutputParameterIsAlwaysDiscarded();
    public static string get_TypeCanBeMadeFileLocal();
    public static string get_TypeCanBeMessage();
    public static string get_TypeIsNeverUsed();
    public static string get_TypeIsNeverUsed11();
    public static string get_TypeMemberIsNeverAccessedViaBaseType();
    public static string get_TypeMemberIsNeverUsed();
    public static string get_TypeMemberIsNeverUsed10();
    public static string get_TypeMemberIsNeverUsedFromOutsideOfImplementationHierarchyItIsOnlyAccessedFromOverridesThroughBaseCall();
    public static string get_TypeMemberIsNeverUsedWithBaseTypeOrInterfaceItIsAlwaysAccessedViaMoreSpecificType();
    public static string get_TypeMemberIsOnlyUsedInOverrides();
    public static string get_TypeParameterIsNeverUsed();
    public static string get_TypeParameterIsNeverUsedMessage();
    public static string get_TypeWithSuspiciousEqualityIsUsedInRecordDescription();
    public static string get_TypeWithSuspiciousEqualityIsUsedInRecordMessage();
    public static string get_TypeWithSuspiciousEqualityIsUsedInRecordTitle();
    public static string get_UnassignedField();
    public static string get_UnassignedReadonlyField();
    public static string get_UnusedLabel();
    public static string get_UnusedLocalVariable();
    public static string get_UnusedParameter();
    public static string get_UnusedParameterInPartialMethod();
    public static string get_UnusedPositionalParameter();
    public static string get_NotAccessedPrimaryConstructorParameter();
    public static string get_UnusedTypeParameter();
    public static string get_UsageCheckingServiceSettingDescription();
    public static string get_VirtualOverridableMemberIsNeverOverridden();
    public static string get_VirtualOverridableMemberIsNeverOverriddenAndSoThevirtualoverridableModifierCanBeRemoved();
    public static string get_WithItsOverridersIsNeverUsedFromOutsideMessage();
    public static string get_EnableAnalysisInSolution_Text();
    public static string get_EnableAnalysis_Text();
    public static string get_DisableAnalysis_Text();
    public static string get_ResumeAnalysis_Text();
    public static string get_EnableAnalysisForAll_FilesFromNuGet_Text();
    public static string get_DisableAnalysisForAll_FilesFromNuGet_Text();
    public static string get_Implements_From__Text();
    public static string get_Implements__Text();
    public static string get_Overrides_From__Text();
    public static string get_Hides_From__Text();
    public static string get_Default_ToolTipFormatString_Text();
    public static string get_ClickToGo_Text();
}
public interface JetBrains.ReSharper.Daemon.Stages.CheckNamespace.ICheckNamespaceSuppressorInFile {
    [PureAttribute]
public abstract virtual bool ShouldProcess(IFile psiFile);
}
public class JetBrains.ReSharper.Daemon.Stages.DummyGlobalStructureLanguageCategoriesProvider : object {
    [NullableAttribute("1")]
public static DummyGlobalStructureLanguageCategoriesProvider Instance;
    private static DummyGlobalStructureLanguageCategoriesProvider();
    [NullableContextAttribute("1")]
public sealed virtual PsiLanguageCategories GetCategories(IPsiSourceFile sourceFile);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DaemonStageAttribute("16")]
public class JetBrains.ReSharper.Daemon.Stages.ExploreFileStructureCollectorStage : object {
    [CompilerGeneratedAttribute]
private GlobalFileStructureBuilder <builder>P;
    private Type[] JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageWithSettings.DaemonStagesRequired { get; }
    public ExploreFileStructureCollectorStage(GlobalFileStructureBuilder builder);
    public sealed virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
    private sealed virtual override int JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageWithSettings.CalcSettingsHash(IPsiSourceFile sourceFile, IContextBoundSettingsStore settingsStore);
    private sealed virtual override Type[] JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageWithSettings.get_DaemonStagesRequired();
}
[DaemonStageAttribute("16")]
public class JetBrains.ReSharper.Daemon.Stages.ExploreSolutionAnalysisFileStructureCollectorStage : ExploreFileStructureCollectorStage {
    [NullableContextAttribute("1")]
public ExploreSolutionAnalysisFileStructureCollectorStage(GlobalFileStructureBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Daemon.Stages.FileStructureBase : object {
    protected Dictionary`2<string, Stack`1<DisableByCommentCodeInspectionSection>> myWarningDisablePoints;
    [CompilerGeneratedAttribute]
private IFile <File>k__BackingField;
    [CompilerGeneratedAttribute]
private OneToListMap`2<string, IDisableCodeInspectionSection> <WarningDisableRange>k__BackingField;
    [CompilerGeneratedAttribute]
private OneToListMap`2<string, DisableOnceCodeInspectionSection> <DisableOnceHighlightingInfos>k__BackingField;
    public IFile File { get; }
    public IEnumerable`1<TreeTextRange> GeneratedTextRanges { get; }
    public OneToListMap`2<string, IDisableCodeInspectionSection> WarningDisableRange { get; }
    public OneToListMap`2<string, DisableOnceCodeInspectionSection> DisableOnceHighlightingInfos { get; }
    protected FileStructureBase(IFile file);
    [CompilerGeneratedAttribute]
public sealed virtual IFile get_File();
    public virtual IEnumerable`1<TreeTextRange> get_GeneratedTextRanges();
    [CompilerGeneratedAttribute]
public sealed virtual OneToListMap`2<string, IDisableCodeInspectionSection> get_WarningDisableRange();
    [CompilerGeneratedAttribute]
public sealed virtual OneToListMap`2<string, DisableOnceCodeInspectionSection> get_DisableOnceHighlightingInfos();
    protected void ProcessComment(ITreeNode commentNode, string commentText);
    protected void CloseAllRanges(IFile file);
    [PureAttribute]
private DocumentRange CalculateRangeForDisableOnceComment(ITreeNode commentNode);
    [NullableContextAttribute("0")]
protected static DocumentRange GetLineRange(IDocument document, Int32`1<DocLine> line);
    [NullableContextAttribute("2")]
protected virtual ITreeNode FindNextValuableTreeNodeForDisableOnceComment(ITreeNode node);
    protected virtual bool SkipNode(ITreeNode sibling);
    [PureAttribute]
private static DocumentOffset GetContainingLineEndOffset(ITreeNode node);
    protected void ProcessPreprocessorDirective(ITreeNode pragmaDirective, bool disable, IReadOnlyCollection`1<string> warningIds);
}
[MeansImplicitUseAttribute]
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Daemon.Stages.IFileStructureExplorer")]
public class JetBrains.ReSharper.Daemon.Stages.FileStructureExplorerAttribute : SolutionComponentAttribute {
    public FileStructureExplorerAttribute(Instantiation instantiation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Daemon.Stages.FileStructureWithRegionsBase : FileStructureBase {
    [CompilerGeneratedAttribute]
private HashSet`1<string> <generatedRegionNames>P;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Stack`1<Pair`2<ITreeNode, string>> myRegionStarts;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Pair`2<ITreeNode, ITreeNode>> myGeneratedCodeRegions;
    private Dictionary`2<ITreeNode, ITreeNode> myStartRegions;
    private Dictionary`2<ITreeNode, ITreeNode> myEndRegions;
    public IEnumerable`1<TreeTextRange> GeneratedTextRanges { get; }
    protected FileStructureWithRegionsBase(IFile file, HashSet`1<string> generatedRegionNames);
    public virtual IEnumerable`1<TreeTextRange> get_GeneratedTextRanges();
    protected void ProcessStartRegion(ITreeNode node, string name);
    protected void ProcessEndRegion(ITreeNode endRegion);
    public ITreeNode GetEndRegionByStart(ITreeNode startNode);
    public ITreeNode GetStartRegionByEnd(ITreeNode endNode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Daemon.Stages.GlobalFileStructureBuilder : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileStructureExplorer> <fileStructureCollectors>P;
    public GlobalFileStructureBuilder(IEnumerable`1<IFileStructureExplorer> fileStructureCollectors);
    [PureAttribute]
public GlobalFileStructure Build(IPsiSourceFile sourceFile, Predicate`1<DocumentRange> isRangeInvalidated, IContextBoundSettingsStore settingsStore);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Daemon.Stages.IFileStructure {
    public IFile File { get; }
    public IEnumerable`1<TreeTextRange> GeneratedTextRanges { get; }
    public OneToListMap`2<string, IDisableCodeInspectionSection> WarningDisableRange { get; }
    public OneToListMap`2<string, DisableOnceCodeInspectionSection> DisableOnceHighlightingInfos { get; }
    public abstract virtual IFile get_File();
    public abstract virtual IEnumerable`1<TreeTextRange> get_GeneratedTextRanges();
    public abstract virtual OneToListMap`2<string, IDisableCodeInspectionSection> get_WarningDisableRange();
    public abstract virtual OneToListMap`2<string, DisableOnceCodeInspectionSection> get_DisableOnceHighlightingInfos();
}
[NullableContextAttribute("1")]
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ReSharper.Daemon.Stages.IFileStructureExplorer {
    public abstract virtual IFileStructure ExploreFile(IFile file, IContextBoundSettingsStore settingsStore, Predicate`1<DocumentRange> isRangeInvalidated);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Daemon.Stages.IFileStructureWithMembersToRehighlight {
    public IReadOnlyCollection`1<ITypeMemberDeclaration> MembersToRehighlight { get; }
    public abstract virtual IReadOnlyCollection`1<ITypeMemberDeclaration> get_MembersToRehighlight();
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Daemon.Stages.IGlobalStructureLanguageCategoriesProvider {
    public abstract virtual PsiLanguageCategories GetCategories(IPsiSourceFile sourceFile);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.Stages.Resolve.PathErrorHandler : object {
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public virtual IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public virtual IHighlighting Run(IReference reference);
}
public class JetBrains.ReSharper.Daemon.Stages.Statistics.DocumentLineCountMark : object {
}
public class JetBrains.ReSharper.Daemon.Stages.Statistics.DocumentTextLengthMark : object {
}
public class JetBrains.ReSharper.Daemon.Stages.Statistics.EnvironmentNewLineCharacterIsCrLfMark : object {
}
public class JetBrains.ReSharper.Daemon.Stages.Statistics.FileIsPresentedInTextControlMark : object {
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Stages.Statistics.GeneralFileStatisticsAnalyzer : ElementProblemAnalyzer`1<IFile> {
    [NullableContextAttribute("1")]
public sealed virtual bool ShouldRun(IFile file, ElementProblemAnalyzerData data);
    [NullableContextAttribute("1")]
protected virtual void Run(IFile file, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Stages.Statistics.GeneralMachineStatisticsAnalyzer : ElementProblemAnalyzer`1<IFile> {
    private static Key`1<Boxed`1<int>> ourPhysicalCpusCountKey;
    private static GeneralMachineStatisticsAnalyzer();
    public sealed virtual bool ShouldRun(IFile file, ElementProblemAnalyzerData data);
    protected virtual void Run(IFile file, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private static int GetPhysicalCpuCoresCount(ElementProblemAnalyzerData data);
}
public class JetBrains.ReSharper.Daemon.Stages.Statistics.IdeArm64ProcessorsCountMark : object {
}
public class JetBrains.ReSharper.Daemon.Stages.Statistics.IdeClrRuntimeIs64BitProcessMark : object {
}
public class JetBrains.ReSharper.Daemon.Stages.Statistics.IdeClrRuntimeKindMark : object {
}
public class JetBrains.ReSharper.Daemon.Stages.Statistics.IdeOsPlatformMark : object {
}
public class JetBrains.ReSharper.Daemon.Stages.Statistics.IdeProcessorArchitectureMark : object {
}
public class JetBrains.ReSharper.Daemon.Stages.Statistics.IdeProcessorsCountMark : object {
}
public class JetBrains.ReSharper.Daemon.Stages.Statistics.IdeX64WindowsProcessorsCountMark : object {
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Daemon.StatusBarMessenger : object {
    private static TimeSpan GracePeriod;
    private string myLastMessage;
    private IStatusBar myStatusBar;
    [NotNullAttribute]
private IShellLocks myShellLocks;
    private ITextControlManager myTextControlManager;
    private IDaemon myDaemon;
    private SubclassedStatusBar mySubclassedStatusBar;
    private MyAsyncCommitClient myAsyncCommitClient;
    private ISolution mySolution;
    private SequentialLifetimes myUpdateMessageSequentialLifetimes;
    public StatusBarMessenger(Lifetime lifetime, ITextControlManager textControlManager, IStatusBar statusBar, IShellLocks shellLocks, IThreading threading, IDaemon daemon, SubclassedStatusBar subclassedStatusBar, AsyncCommitService asyncCommitService, ISolution solution);
    private static StatusBarMessenger();
    [GuardAttribute("1")]
private void UpdateMessage();
    private void SetMessage(string message);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_1();
}
public class JetBrains.ReSharper.Daemon.StringAnalysis.InternalStringAnalyzer : StringAnalyzer {
    private ElementProblemAnalyzerData myData;
    private DocumentRange myBaseDocumentRange;
    [CompilerGeneratedAttribute]
private List`1<TextRange> <EscapeRanges>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TextRange> <RedundantEscapeRanges>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TextRange> <FormatSymbolRanges>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<TextRange, string> <InvalidRanges>k__BackingField;
    protected bool CheckInterruptFlag { get; }
    public List`1<TextRange> EscapeRanges { get; }
    public List`1<TextRange> RedundantEscapeRanges { get; }
    public List`1<TextRange> FormatSymbolRanges { get; }
    public Dictionary`2<TextRange, string> InvalidRanges { get; }
    public IDocument Document { get; }
    public InternalStringAnalyzer(IStringLexer literalLexer, DocumentRange baseDocumentRange, ElementProblemAnalyzerData data);
    protected virtual bool get_CheckInterruptFlag();
    [CompilerGeneratedAttribute]
public List`1<TextRange> get_EscapeRanges();
    [CompilerGeneratedAttribute]
public List`1<TextRange> get_RedundantEscapeRanges();
    [CompilerGeneratedAttribute]
public List`1<TextRange> get_FormatSymbolRanges();
    [CompilerGeneratedAttribute]
public Dictionary`2<TextRange, string> get_InvalidRanges();
    public IDocument get_Document();
    protected virtual void ProcessEscapeCharacter();
    protected virtual void ProcessRedundantSlashEscapeCharacter();
    protected virtual void ProcessFormatCharacter();
    protected virtual void ProcessInvalidCharacter();
    private TextRange GetHighlightingRange();
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IdentifierHighlightings")]
public class JetBrains.ReSharper.Daemon.StringAnalysis.SpecialSymbolHighlighting : StringCharacterHighlighting {
    [CompilerGeneratedAttribute]
private string <AttributeId>k__BackingField;
    public string AttributeId { get; }
    public SpecialSymbolHighlighting(DocumentRange range, string attributeId);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AttributeId();
    public sealed virtual Nullable`1<int> GetStatisticsKey();
}
[DaemonTooltipProviderAttribute("")]
public abstract class JetBrains.ReSharper.Daemon.StringAnalysis.StringCharacterHighlighting : object {
    private DocumentRange myRange;
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    protected StringCharacterHighlighting(DocumentRange range);
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IdentifierHighlightings")]
public class JetBrains.ReSharper.Daemon.StringAnalysis.StringEscapeCharacterHighlighting : StringCharacterHighlighting {
    [CompilerGeneratedAttribute]
private string <AttributeId>k__BackingField;
    public string AttributeId { get; }
    public StringEscapeCharacterHighlighting(DocumentRange range, string attributeId);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AttributeId();
    public sealed virtual Nullable`1<int> GetStatisticsKey();
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IdentifierHighlightings")]
public class JetBrains.ReSharper.Daemon.StringAnalysis.StringInvalidCharacterHighlighting : StringCharacterHighlighting {
    public StringInvalidCharacterHighlighting(DocumentRange range);
}
[HighlightingSourceAttribute]
public abstract class JetBrains.ReSharper.Daemon.StringAnalysis.StringProblemAnalyzerBase`1 : ElementProblemAnalyzer`1<T> {
    protected sealed virtual void Run(T element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    protected virtual HighlightingAttributeSelector CreateEscapeCharacterSelector();
    protected virtual HighlightingAttributeSelector CreateFormatStringItemSelector();
    protected abstract virtual IEnumerable`1<Pair`2<ITokenNode, IStringLexer>> ExtractElements(T element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    protected virtual void ConsumeInvalidHighlighting(IHighlightingConsumer consumer, DocumentRange highlightingRange, string tokenText, ElementProblemAnalyzerData data);
    protected virtual void ConsumeEscapeHighlighting(IHighlightingConsumer consumer, DocumentRange highlightingRange, T element, string highlightingAttributeId, ElementProblemAnalyzerData data);
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IdentifierHighlightings")]
public class JetBrains.ReSharper.Daemon.StringAnalysis.StringRedundantCharacterHighlighting : StringCharacterHighlighting {
    public StringRedundantCharacterHighlighting(DocumentRange range);
}
public static class JetBrains.ReSharper.Daemon.UsageChecking.AccessibilityRestrictionCollector : object {
    public static void SetAccessibilityRestrictions(ITypeElement testType, ITypeMember contextMember, CollectUsagesStageProcess collectUsagesProcess);
    private static void SetAccessibilityRestrictionsForTestType(ITypeMember testType, ITypeMember contextMember, CollectUsagesStageProcess collectUsagesProcess);
    private static void SetAccessibilityRestrictionsForContextMember(ITypeMember testType, ITypeMember contextMember, CollectUsagesStageProcess collectUsagesProcess);
}
public class JetBrains.ReSharper.Daemon.UsageChecking.AccessibleSymbolConstraint : object {
    private IExpression myExpression;
    private ITypeMember myTypeMember;
    public AccessibleSymbolConstraint(IExpression expression, ITypeMember element);
    public sealed virtual bool Satisfies(IDeclaredType type);
}
[DaemonStageAttribute("16")]
public class JetBrains.ReSharper.Daemon.UsageChecking.AfterHierarchyAnalysisStage : object {
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
}
[ConfigurableSeverityHighlightingAttribute("AutoPropertyCanBeMadeGetOnly.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.AutoPropertyCanBeMadeGetOnlyGlobalWarning : AutoPropertyCanBeMadeGetOnlyWarningBase {
    public static string HIGHLIGHTING_ID;
    public AutoPropertyCanBeMadeGetOnlyGlobalWarning(IDeclaration setterDeclaration, IProperty property);
}
[ConfigurableSeverityHighlightingAttribute("AutoPropertyCanBeMadeGetOnly.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.AutoPropertyCanBeMadeGetOnlyLocalWarning : AutoPropertyCanBeMadeGetOnlyWarningBase {
    public static string HIGHLIGHTING_ID;
    public AutoPropertyCanBeMadeGetOnlyLocalWarning(IDeclaration setterDeclaration, IProperty property);
    [NullableContextAttribute("1")]
public sealed virtual IHighlightingPointer TryCreatePointer();
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.AutoPropertyCanBeMadeGetOnlyWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IDeclaration <SetterDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IDeclaration SetterDeclaration { get; }
    public IProperty Property { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public AutoPropertyCanBeMadeGetOnlyWarningBase(IDeclaration setterDeclaration, IProperty property);
    [NotNullAttribute]
[PureAttribute]
public static AutoPropertyCanBeMadeGetOnlyWarningBase Create(IDeclaration setterDeclaration, IProperty property, bool isGlobal);
    [CompilerGeneratedAttribute]
public IDeclaration get_SetterDeclaration();
    [CompilerGeneratedAttribute]
public IProperty get_Property();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("SuggestBaseTypeForParameterInConstructor", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.BaseTypeForParameterInConstructorWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IParameterDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private IType <SuggestedType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IParameterDeclaration Declaration { get; }
    public IType SuggestedType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public BaseTypeForParameterInConstructorWarning(IParameterDeclaration declaration, IType suggestedType);
    [CompilerGeneratedAttribute]
public IParameterDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public IType get_SuggestedType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("SuggestBaseTypeForParameter", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.BaseTypeForParameterWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IParameterDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private IType <SuggestedType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public static Expression`1<Func`2<SuggestBaseTypeForParameterSettings, bool>> SuggestBaseTypeForParameter_AvoidMemberVirtualizationAccessor;
    public IParameterDeclaration Declaration { get; }
    public IType SuggestedType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public BaseTypeForParameterWarning(IParameterDeclaration declaration, IType suggestedType);
    private static BaseTypeForParameterWarning();
    [CompilerGeneratedAttribute]
public IParameterDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public IType get_SuggestedType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Daemon.UsageChecking.ByAttributesUsageInspectionsSuppressor : object {
    public sealed virtual bool SuppressUsageInspectionsOnElement(IDeclaredElement element, ImplicitUseKindFlags& flags);
    private static bool HasImplicitUseAttribute(IDeclaredElement element, ImplicitUseKindFlags& flags, ImplicitUseAnnotationProvider cache);
}
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.UsageChecking.CanLowerAccessChecker : object {
    [NotNullAttribute]
private IUsageChecker myChecker;
    [NotNullAttribute]
private Reporter myReporter;
    [NotNullAttribute]
private DeclarationInfoCache myDeclarationInfoCache;
    [NotNullAttribute]
private IContextBoundSettingsStore mySettingsStore;
    private Severity myFileLocalInspectionSeverity;
    public CanLowerAccessChecker(IUsageChecker checker, Reporter reporter, DeclarationInfoCache declarationInfoCache, IPsiSourceFile sourceFile, IContextBoundSettingsStore settingsStore);
    public void Process(IDeclarationInfo memberDeclaration, HashSet`1<DeclaredElementType> supportedMemberOwners);
    private static bool IsNestedTypeInPartialType(IMemberInfo member);
    private bool CheckCanLowerMemberAccess(IMemberInfo member, IMemberInfo accessorOwner, UsageState stateMask);
}
public class JetBrains.ReSharper.Daemon.UsageChecking.CannotChangeTypeConstraint : object {
    [NotNullAttribute]
public static CannotChangeTypeConstraint Instance;
    [NotNullAttribute]
public static CannotChangeTypeConstraint[] Array;
    private static CannotChangeTypeConstraint();
    public sealed virtual bool Satisfies(IDeclaredType type);
}
public static class JetBrains.ReSharper.Daemon.UsageChecking.ChangeTypeUtil : object {
    [CanBeNullAttribute]
public static IType SuggestTypeByConstraints(IType type, IEnumerable`1<ITypeUsageConstraint> constraints);
    public static bool HasUniqueEnumerableSuperType(IType type, IDeclaredType& enumerableType);
    [CanBeNullAttribute]
private static IDeclaredType IterateAllSuperTypes(IType type, Func`2<IDeclaredType, IterateSuperTypesContinuation> handler);
    [CanBeNullAttribute]
private static IDeclaredType IterateAllSuperTypes(IDeclaredType type, Func`2<IDeclaredType, IterateSuperTypesContinuation> handler, HashSet`1<ITypeElement> visited);
    private static bool IsEnumerable(IType type);
    public static bool ReplaceIncreasesTypeComplexity(IType currentType, IType suggestedType);
    private static int CalculateTypeComplexity(IType type);
}
[ConfigurableSeverityHighlightingAttribute("ClassCanBeSealed.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.ClassCanBeSealedGlobalWarning : ClassCanBeSealedWarningBase {
    public static string HIGHLIGHTING_ID;
    public ClassCanBeSealedGlobalWarning(ITypeDeclaration declaration);
}
[ConfigurableSeverityHighlightingAttribute("ClassCanBeSealed.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.ClassCanBeSealedLocalWarning : ClassCanBeSealedWarningBase {
    public static string HIGHLIGHTING_ID;
    public ClassCanBeSealedLocalWarning(ITypeDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.ClassCanBeSealedWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private ITypeDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITypeDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ClassCanBeSealedWarningBase(ITypeDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public static ClassCanBeSealedWarningBase Create(ITypeDeclaration declaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public ITypeDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("ClassNeverInstantiated.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.ClassNeverInstantiatedGlobalWarning : ClassNeverInstantiatedWarningBase {
    public static string HIGHLIGHTING_ID;
    public ClassNeverInstantiatedGlobalWarning(ITypeDeclaration declaration);
}
[ConfigurableSeverityHighlightingAttribute("ClassNeverInstantiated.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.ClassNeverInstantiatedLocalWarning : ClassNeverInstantiatedWarningBase {
    public static string HIGHLIGHTING_ID;
    public ClassNeverInstantiatedLocalWarning(ITypeDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.ClassNeverInstantiatedWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private ITypeDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    private IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.Declaration { get; }
    public ITypeDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ClassNeverInstantiatedWarningBase(ITypeDeclaration declaration);
    private sealed virtual override IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.get_Declaration();
    [NotNullAttribute]
[PureAttribute]
public static ClassNeverInstantiatedWarningBase Create(ITypeDeclaration declaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public ITypeDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("ClassWithVirtualMembersNeverInherited.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.ClassWithVirtualMembersNeverInheritedGlobalWarning : ClassWithVirtualMembersNeverInheritedWarningBase {
    public static string HIGHLIGHTING_ID;
    public ClassWithVirtualMembersNeverInheritedGlobalWarning(ITypeDeclaration declaration);
}
[ConfigurableSeverityHighlightingAttribute("ClassWithVirtualMembersNeverInherited.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.ClassWithVirtualMembersNeverInheritedLocalWarning : ClassWithVirtualMembersNeverInheritedWarningBase {
    public static string HIGHLIGHTING_ID;
    public ClassWithVirtualMembersNeverInheritedLocalWarning(ITypeDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.ClassWithVirtualMembersNeverInheritedWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private ITypeDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITypeDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ClassWithVirtualMembersNeverInheritedWarningBase(ITypeDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public static ClassWithVirtualMembersNeverInheritedWarningBase Create(ITypeDeclaration declaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public ITypeDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Daemon.UsageChecking.CLRElementFlags : Enum {
    public int value__;
    public static CLRElementFlags AccessRightsMask;
    public static CLRElementFlags Abstract;
    public static CLRElementFlags Sealed;
    public static CLRElementFlags Virtual;
    public static CLRElementFlags Override;
    public static CLRElementFlags Static;
    public static CLRElementFlags Readonly;
    public static CLRElementFlags Extern;
    public static CLRElementFlags Unsafe;
    public static CLRElementFlags Volatile;
    public static CLRElementFlags ExplicitImplementation;
    public static CLRElementFlags VoidMethod;
    public static CLRElementFlags Field;
    public static CLRElementFlags HasTypeParameters;
    public static CLRElementFlags Partial;
    public static CLRElementFlags StaticClass;
    public static CLRElementFlags InitializedInDeclaration;
    public static CLRElementFlags CanConvertToConstant;
    public static CLRElementFlags AutoProperty;
    public static CLRElementFlags TypeHasUniqueEnumerableSuperType;
    public static CLRElementFlags RedundantOverload;
    public static CLRElementFlags FieldLikeEvent;
    public static CLRElementFlags ReadableProperty;
    public static CLRElementFlags WritableProperty;
    public static CLRElementFlags Accessor;
    public static CLRElementFlags HasVirtualMembers;
    public static CLRElementFlags HasAttributes;
    public static CLRElementFlags IsPrimaryConstructor;
    public static CLRElementFlags HasPositionalProperties;
    public static CLRElementFlags IsImplicitMember;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Daemon.UsageChecking.CLRElementInfoUtil : object {
    [ExtensionAttribute]
[PureAttribute]
public static bool IsOverridable(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static AccessRights AccessRights(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsAbstract(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsSealed(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsVirtual(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsOverride(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsStatic(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsReadonly(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsExtern(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsUnsafe(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsVolatile(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsExplicitImplementation(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsVoidMethod(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsField(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool HasTypeParameters(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsInitializedInDeclaration(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool CanConvertToConstant(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsPartial(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsStaticClass(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsAutoProperty(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool TypeHasUniqueEnumerableSuperType(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsRedundantOverload(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsFieldLikeEvent(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsReadableProperty(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsWritableProperty(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsAccessor(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool HasVirtualMembers(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool HasAttributes(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsPrimaryConstructor(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool HasPositionalProperties(IMembersOwnerInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsImplicitMember(IMemberInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static ParameterKindShifted ToShifted(ParameterKind kind);
    [ExtensionAttribute]
[PureAttribute]
public static ParameterKind FromShifted(ParameterKindShifted kind);
    [ExtensionAttribute]
[PureAttribute]
public static ParameterKind Kind(IParameterInfo info);
    [ExtensionAttribute]
[PureAttribute]
public static bool TypeHasUniqueEnumerableSuperType(IParameterInfo info);
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Daemon.UsageChecking.CLRParameterFlags : Enum {
    public short value__;
    public static CLRParameterFlags ParameterKindMask;
    public static CLRParameterFlags TypeHasUniqueEnumerableSuperType;
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.UsageChecking.CLRUnusedDeclarationAnalyzer : object {
    [NotNullAttribute]
protected IUsageChecker Checker;
    [NotNullAttribute]
protected Reporter Reporter;
    [NotNullAttribute]
private CanLowerAccessChecker myCanLowerAccessChecker;
    [NotNullAttribute]
protected DeclarationInfoCache DeclarationInfoCache;
    [NotNullAttribute]
protected IContextBoundSettingsStore SettingsStore;
    [NotNullAttribute]
private UsageCheckingServiceManager myUsageCheckingServiceManager;
    [CanBeNullAttribute]
protected IRedundantOverloadProcessor RedundantOverloadProcessor;
    [NotNullAttribute]
private ImplicitUseAnnotationProvider myImplicitUseAnnotationProvider;
    [NotNullAttribute]
private static HashSet`1<DeclaredElementType> ourSupportedMemberOwners;
    private static IClrTypeName ourDesignerCategoryAttributeName;
    [NotNullAttribute]
protected HashSet`1<DeclaredElementType> SupportedMemberOwners { get; }
    public CLRUnusedDeclarationAnalyzer(FileDependency fileDependency, IUsageChecker usageChecker, PsiLanguageType language, IHighlightingConsumer consumer, DeclarationInfoCache declarationInfoCache, IContextBoundSettingsStore settingsStore, UsageCheckingServiceManager usageCheckingServiceManager, IPsiSourceFile sourceFile);
    private static CLRUnusedDeclarationAnalyzer();
    protected virtual HashSet`1<DeclaredElementType> get_SupportedMemberOwners();
    public sealed virtual void ProcessDeclaration(IDeclarationInfo info);
    protected virtual bool ProcessCustomDeclaredElementTypeEvenIfSkipped(DeclaredElementType declaredElementType, IDeclarationInfo declarationInfo, TypeMemberCheckResult typeMemberCheckResult);
    protected virtual bool ProcessCustomDeclaredElementType(DeclaredElementType declaredElementType, IDeclarationInfo declarationInfo, TypeMemberCheckResult typeMemberCheckResult);
    protected virtual void ProcessConstructor(IDeclarationInfo constructorDeclaration, TypeMemberCheckResult usageState);
    protected virtual bool IsClassType(DeclaredElementType elementType);
    protected virtual bool IsRecordPositionalParameter(IParameterInfo parameterInfo);
    protected virtual void ProcessClass(IDeclarationInfo classDeclaration, TypeMemberCheckResult usageState);
    protected virtual void ProcessStruct(IDeclarationInfo structDeclaration, TypeMemberCheckResult usageState);
    protected virtual void ProcessMethod(IDeclarationInfo methodDeclaration, TypeMemberCheckResult result);
    private void ProcessConstant(IDeclarationInfo constantDeclaration, TypeMemberCheckResult usageState);
    protected virtual void ProcessField(IDeclarationInfo fieldDeclaration, TypeMemberCheckResult usageState);
    private void ReportPossibleCollectionAccessProblems(UsageState collectionUsageState, UsageState usedSubState, IDeclarationInfo typeOwnerInfo);
    private void ReportPossibleFieldCanBeMadeReadonly(IDeclarationInfo fieldDeclaration, IMemberInfo fieldInfo);
    private bool ReportPossibleAutoPropertyCanBeMadeGetOnly(IMemberInfo propertyInfo, IDeclarationInfo setterDeclaration);
    private void ReportPossiblePropertyCanBeMadeInitOnly(IMemberInfo propertyInfo, IDeclarationInfo setterDeclaration);
    protected bool IsPropertyBothAccessedAndAssignedOrHasPolymorphicUsages(IDeclarationInfo propertyDeclaration, IMemberInfo propertyInfo, bool requireToHaveSetter);
    private void ReportPossibleConvertToConstantSuggestion(IDeclarationInfo fieldDeclaration, UsageState usedSubstate, IMemberInfo fieldInfo);
    protected virtual void ProcessProperty(IDeclarationInfo propertyDeclaration, TypeMemberCheckResult propertyUsageState);
    private bool IsUnassignedGetOnlyAutoProperty(IMemberInfo propertyInfo);
    private TypeMemberCheckResult ProcessUnusedTypeMember(IDeclarationInfo memberDeclaration);
    private TypeMemberCheckResult ProcessUsedTypeMember(IDeclarationInfo memberDeclaration);
    private void ProcessVariableDeclaration(IDeclarationInfo variableDeclaration);
    private void CheckUnassignedReadonlyField(IDeclarationInfo variableDeclaration, TypeMemberCheckResult usageState);
    private void DetectVirtualMemberNeverOverridden(IDeclarationInfo memberDeclaration);
    protected virtual void ProcessEvent(IDeclarationInfo eventDeclaration, TypeMemberCheckResult usageState);
    private bool ShouldReportNotInvokedEvent(IDeclarationInfo eventDeclaration);
    private bool MemberCanBeMadeStatic(IDeclarationInfo memberDeclaration);
    private void ProcessParameter(IDeclarationInfo parameterDeclaration);
    [PureAttribute]
protected bool IsPartialDeclarationWithoutBody(IDeclarationInfo parameterDeclaration);
    private bool ShouldCheckParametersOwner(IMemberInfo parametersOwner);
    [CompilerGeneratedAttribute]
private bool <ProcessClass>b__18_1(IMemberInfo constructor);
    [CompilerGeneratedAttribute]
private bool <ProcessUnusedTypeMember>g__OwnerIsNotUsedExceptInImplementations|31_0(<>c__DisplayClass31_0& );
    [CompilerGeneratedAttribute]
internal static bool <ProcessParameter>g__SuppressUsageInspectionsByParameterName|40_0(IParameter parameter);
    [CompilerGeneratedAttribute]
internal static bool <ProcessParameter>g__IsPrimaryConstructorParameter|40_1(IParameterInfo parameterInfo);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.CLRUsageCheckingServices : UsageCheckingServices {
    protected FileDependency myFileDependency;
    protected static DeclaredElementType[] ClrElementTypes;
    [NotNullAttribute]
private static Key`1<object> ourPsiModuleHash;
    public IList`1<DeclaredElementType> SupportedElementTypes { get; }
    protected CLRUsageCheckingServices(FileDependency fileDependency, UsageAnalyzer usageAnalyzer, IPresentationHelper presentationHelper, ILanguageSpecificElementPropertiesCalculator elementPropertiesCalculator);
    private static CLRUsageCheckingServices();
    protected virtual bool ShouldTakeTopLevelDeclaration(IDeclaration declaration);
    [NotNullAttribute]
public virtual IUnusedDeclarationAnalyzer CreateUnusedDeclarationAnalyzer(IUsageChecker usageChecker, PsiLanguageType language, IHighlightingConsumer consumer, DeclarationInfoCache declarationInfoCache, UsageCheckingServiceManager usageCheckingServiceManager, IContextBoundSettingsStore settingsStore, IPsiSourceFile sourceFile);
    public virtual Nullable`1<ElementId> GetElementId(IDeclaredElement element, bool forceCreateForPrivateMembers);
    public static Nullable`1<ElementId> GetElementIdStatic(IDeclaredElement element, bool forceCreateForPrivateMembers);
    public static Nullable`1<ElementId> GetMemberId(ITypeMember member, bool forceCreateForPrivateMembers);
    public static Nullable`1<ElementId> GetParameterId(IParameter parameter);
    public static ElementId GetParameterId(ElementId ownerId, int index);
    public static void PutPsiModule(Hash& hash, StringBuilder testPresentation, IPsiModule psiModule);
    protected static int GetPsiModuleId(IPsiModule psiModule);
    protected static void PutClrTypeName(Hash& hash, StringBuilder testPresentation, IClrTypeName typeClrName);
    private static ElementId CreateChainedParameterId(ElementId parameterOwnerId, int parameterIndex);
    private static Nullable`1<ElementId> CreateChainedAccessorId(Nullable`1<ElementId> accessorOwnerId, IAccessor accessor);
    public virtual IDeclarationInfo CreateWrapperDeclarationInfo(IDeclaration declaration, IDeclaredElement declaredElement);
    public virtual IElementInfo CreateWrapperElementInfo(IDeclaredElement declaredElement, PsiLanguageType language);
    public virtual IList`1<DeclaredElementType> get_SupportedElementTypes();
}
public class JetBrains.ReSharper.Daemon.UsageChecking.CLRWrapperDeclarationInfo : WrapperDeclarationInfoBase {
    public IEnumerable`1<IDeclarationInfo> MemberDeclarations { get; }
    public IEnumerable`1<IDeclarationInfo> AccessorDeclarations { get; }
    public IEnumerable`1<IDeclarationInfo> ParameterDeclarations { get; }
    private CLRWrapperDeclarationInfo(IDeclaration declaration, CLRWrapperElementInfo elementInfo);
    [CanBeNullAttribute]
public static CLRWrapperDeclarationInfo Create(IDeclaration declaration, IDeclaredElement element);
    public virtual IEnumerable`1<IDeclarationInfo> get_MemberDeclarations();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Daemon.UsageChecking.CLRWrapperDeclarationInfo/<get_AccessorDeclarations>d__5")]
public virtual IEnumerable`1<IDeclarationInfo> get_AccessorDeclarations();
    [CanBeNullAttribute]
private static IDeclarationInfo ByDeclaredElement(IClrDeclaredElement element);
    public virtual IEnumerable`1<IDeclarationInfo> get_ParameterDeclarations();
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.CLRWrapperElementInfo : WrapperElementInfoBase {
    public IMemberInfo Owner { get; }
    protected CLRWrapperElementInfo(IClrDeclaredElement element, PsiLanguageType language);
    [CanBeNullAttribute]
public static CLRWrapperElementInfo Create(IDeclaredElement element, PsiLanguageType language);
    public virtual IMemberInfo get_Owner();
}
public class JetBrains.ReSharper.Daemon.UsageChecking.CLRWrapperMemberInfo : CLRWrapperElementInfo {
    [CanBeNullAttribute]
protected ILanguageSpecificElementPropertiesCalculator myPropertiesCalculator;
    public ITypeMember Member { get; }
    public IMembersOwnerInfo MembersOwner { get; }
    [NotNullAttribute]
protected ILanguageSpecificElementPropertiesCalculator PropertiesCalculator { get; }
    private bool IsStaticClass { get; }
    private bool HasVirtualMembers { get; }
    private bool HasAttributes { get; }
    private bool IsPrimaryConstructor { get; }
    private bool HasPositionalProperties { get; }
    private bool IsImplicitMember { get; }
    private AccessRights AccessRights { get; }
    private bool IsAbstract { get; }
    private bool IsSealed { get; }
    private bool IsVirtual { get; }
    private bool IsOverride { get; }
    private bool IsStatic { get; }
    private bool IsReadonly { get; }
    private bool IsExtern { get; }
    private bool IsUnsafe { get; }
    private bool IsVolatile { get; }
    private bool IsExplicitImplementation { get; }
    private bool IsVoidMethod { get; }
    private bool IsField { get; }
    private bool HasTypeParameters { get; }
    private bool IsInitializedInDeclaration { get; }
    private bool CanConvertToConstant { get; }
    private bool IsPartial { get; }
    private bool IsAutoProperty { get; }
    private bool TypeHasUniqueEnumerableSuperType { get; }
    private bool IsRedundantOverload { get; }
    private bool IsFieldLikeEvent { get; }
    private bool IsReadableProperty { get; }
    private bool IsWritableProperty { get; }
    private bool IsAccessor { get; }
    public CLRWrapperMemberInfo(ITypeMember member, PsiLanguageType language);
    public ITypeMember get_Member();
    public sealed virtual IMembersOwnerInfo get_MembersOwner();
    public virtual int GetFlags(int mask);
    protected ILanguageSpecificElementPropertiesCalculator get_PropertiesCalculator();
    private bool get_IsStaticClass();
    private bool get_HasVirtualMembers();
    private bool get_HasAttributes();
    private bool get_IsPrimaryConstructor();
    private bool get_HasPositionalProperties();
    private bool get_IsImplicitMember();
    private AccessRights get_AccessRights();
    private bool get_IsAbstract();
    private bool get_IsSealed();
    private bool get_IsVirtual();
    private bool get_IsOverride();
    private bool get_IsStatic();
    private bool get_IsReadonly();
    private bool get_IsExtern();
    private bool get_IsUnsafe();
    private bool get_IsVolatile();
    private bool get_IsExplicitImplementation();
    private bool get_IsVoidMethod();
    private bool get_IsField();
    private bool get_HasTypeParameters();
    private bool get_IsInitializedInDeclaration();
    private bool get_CanConvertToConstant();
    private bool get_IsPartial();
    private bool get_IsAutoProperty();
    private bool get_TypeHasUniqueEnumerableSuperType();
    private bool get_IsRedundantOverload();
    private bool get_IsFieldLikeEvent();
    private bool get_IsReadableProperty();
    private bool get_IsWritableProperty();
    private bool get_IsAccessor();
}
internal class JetBrains.ReSharper.Daemon.UsageChecking.CLRWrapperMembersOwnerInfo : CLRWrapperMemberInfo {
    [NotNullAttribute]
public ITypeElement TypeElement { get; }
    public IEnumerable`1<IMemberInfo> Constructors { get; }
    public IEnumerable`1<IMemberInfo> PositionalMembers { get; }
    public CLRWrapperMembersOwnerInfo(ITypeElement typeElement, PsiLanguageType language);
    public ITypeElement get_TypeElement();
    public sealed virtual IEnumerable`1<IMemberInfo> get_Constructors();
    public sealed virtual IEnumerable`1<IMemberInfo> get_PositionalMembers();
    [CompilerGeneratedAttribute]
private IMemberInfo <get_Constructors>b__4_0(IConstructor constructor);
    [CompilerGeneratedAttribute]
private IMemberInfo <get_PositionalMembers>b__6_0(ITypeMember positionalMember);
}
internal class JetBrains.ReSharper.Daemon.UsageChecking.CLRWrapperParameterInfo : CLRWrapperElementInfo {
    public IParameter Parameter { get; }
    public int Index { get; }
    private ParameterKind Kind { get; }
    private bool TypeHasUniqueEnumerableSuperType { get; }
    public CLRWrapperParameterInfo(IParameter parameter, PsiLanguageType language);
    public IParameter get_Parameter();
    public sealed virtual int get_Index();
    public virtual int GetFlags(int mask);
    private ParameterKind get_Kind();
    private bool get_TypeHasUniqueEnumerableSuperType();
}
[ConfigurableSeverityHighlightingAttribute("CollectionNeverQueried.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.CollectionNeverQueriedGlobalWarning : CollectionNeverQueriedWarningBase {
    public static string HIGHLIGHTING_ID;
    public CollectionNeverQueriedGlobalWarning(IDeclaration declaration);
}
[ConfigurableSeverityHighlightingAttribute("CollectionNeverQueried.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.CollectionNeverQueriedLocalWarning : CollectionNeverQueriedWarningBase {
    public static string HIGHLIGHTING_ID;
    public CollectionNeverQueriedLocalWarning(IDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.CollectionNeverQueriedWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CollectionNeverQueriedWarningBase(IDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public static CollectionNeverQueriedWarningBase Create(IDeclaration declaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("CollectionNeverUpdated.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.CollectionNeverUpdatedGlobalWarning : CollectionNeverUpdatedWarningBase {
    public static string HIGHLIGHTING_ID;
    public CollectionNeverUpdatedGlobalWarning(IDeclaration declaration);
}
[ConfigurableSeverityHighlightingAttribute("CollectionNeverUpdated.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.CollectionNeverUpdatedLocalWarning : CollectionNeverUpdatedWarningBase {
    public static string HIGHLIGHTING_ID;
    public CollectionNeverUpdatedLocalWarning(IDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.CollectionNeverUpdatedWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CollectionNeverUpdatedWarningBase(IDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public static CollectionNeverUpdatedWarningBase Create(IDeclaration declaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
public class JetBrains.ReSharper.Daemon.UsageChecking.CollectUsagesPsiFileProcessorFactory : object {
    public virtual ICollectUsagesPsiFileProcessor CreatePsiFileProcessor(CollectUsagesStageProcess collectUsagesStageProcess, IDaemonProcess daemonProcess, IContextBoundSettingsStore settingsStore, CollectUsagesStagePersistentData collectUsagesStagePersistentData, ITaskBarrier taskBarrier, IScopeProcessorFactory scopeProcessorFactory, UsageCheckingServiceManager usageCheckingServiceManager, GlobalFileStructureBuilder globalFileStructureBuilder, IEnumerable`1<SwaExtensionProviderBase> swaExtensionProviders);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DaemonStageAttribute("0")]
public class JetBrains.ReSharper.Daemon.UsageChecking.CollectUsagesStage : object {
    private SearchDomainFactory mySearchDomainFactory;
    private UsageCheckingServiceManager myUsageCheckingServiceManager;
    private GlobalFileStructureBuilder myGlobalFileStructureBuilder;
    private IReadOnlyList`1<SwaExtensionProviderBase> mySwaExtensionProviders;
    public CollectUsagesStage(Lifetime lifetime, SearchDomainFactory searchDomainFactory, IReadOnlyList`1<SwaExtensionProviderBase> swaExtensionProviders, UsageCheckingServiceManager usageCheckingServiceManager, GlobalFileStructureBuilder globalFileStructureBuilder);
    public sealed virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
}
public class JetBrains.ReSharper.Daemon.UsageChecking.CollectUsagesStageProcess : object {
    private static ILogger ourLogger;
    private IDaemonProcess myDaemonProcess;
    private SearchDomainFactory mySearchDomainFactory;
    private IContextBoundSettingsStore mySettingsStore;
    private GlobalFileStructureBuilder myGlobalFileStructureBuilder;
    private IEnumerable`1<SwaExtensionProviderBase> mySwaExtensionProviders;
    private MyHierarchyMembersChecker myHierarchyMembersChecker;
    private UsageCheckingServiceManager myUsageCheckingServiceManager;
    private CollectUsagesStagePersistentData myCollectUsagesStagePersistentData;
    private UsageData myMergedData;
    private object FROM_OTHER_STAGES_LOCK;
    private bool myRunning;
    public IDaemonProcess DaemonProcess { get; }
    [NotNullAttribute]
public IEnumerable`1<KeyValuePair`2<ElementId, UsageState>> UsedElementIds { get; }
    [NotNullAttribute]
public ValueTuple`2[] UsageCounters { get; }
    public Dictionary`2<SwaExtensionProviderId, ISwaExtensionInfo> SwaExtensionsUsageDataInfo { get; }
    private UsageCheckScope JetBrains.ReSharper.Daemon.UsageChecking.IUsageChecker.Scope { get; }
    public CollectUsagesStageProcess(IDaemonProcess daemonProcess, SearchDomainFactory searchDomainFactory, UsageCheckingServiceManager usageCheckingServiceManager, IContextBoundSettingsStore settingsStore, GlobalFileStructureBuilder globalFileStructureBuilder, IEnumerable`1<SwaExtensionProviderBase> swaExtensionProviders);
    private static CollectUsagesStageProcess();
    public sealed virtual IDaemonProcess get_DaemonProcess();
    public IEnumerable`1<KeyValuePair`2<ElementId, UsageState>> get_UsedElementIds();
    public ValueTuple`2[] get_UsageCounters();
    public Dictionary`2<SwaExtensionProviderId, ISwaExtensionInfo> get_SwaExtensionsUsageDataInfo();
    private sealed virtual override UsageCheckScope JetBrains.ReSharper.Daemon.UsageChecking.IUsageChecker.get_Scope();
    public sealed virtual bool HasUsages(IMemberInfo member, UsageState stateMask);
    public sealed virtual UsageState GetUsageSubstate(IMemberInfo memberInfo, UsageState stateMask);
    public sealed virtual bool HasUsages(IParameterInfo parameter, UsageState stateMask);
    public sealed virtual UsageState GetUsageSubstate(IParameterInfo parameterInfo, UsageState stateMask);
    [PureAttribute]
public UsageState GetUsageSubstate(IDeclaredElement element, UsageState stateMask);
    private sealed virtual override bool JetBrains.ReSharper.Daemon.UsageChecking.IUsageChecker.HasInheritors(IMembersOwnerInfo typeInfo);
    private sealed virtual override bool JetBrains.ReSharper.Daemon.UsageChecking.IUsageChecker.HasSuperMembers(IMemberInfo memberInfo, bool includeQuasi);
    private sealed virtual override bool JetBrains.ReSharper.Daemon.UsageChecking.IUsageChecker.HasImplementingMembers(IMemberInfo memberInfo, bool includeQuasi);
    private sealed virtual override bool JetBrains.ReSharper.Daemon.UsageChecking.IUsageChecker.HasHierarchyMemberUsages(IMemberInfo memberInfo, UsageState stateMask, HierarchyWalkDirection walkDirection, HierarchyCheckMode mode);
    private sealed virtual override bool JetBrains.ReSharper.Daemon.UsageChecking.IUsageChecker.HasHierarchyParameterUsages(IParameterInfo parameterInfo, UsageState stateMask, HierarchyWalkDirection walkDirection, HierarchyCheckMode mode);
    private sealed virtual override IType JetBrains.ReSharper.Daemon.UsageChecking.IUsageChecker.SuggestParameterTypeByUsage(IParameterInfo parameterInfo);
    public bool IsTypeParameterUsed(ITypeParameter typeParameter);
    public VariableUsageState GetLocalVariableState(IDeclaredElement element);
    public bool IsValueParameterUsed(IAccessor accessor);
    public bool IsLabelAddressed(ILabel label);
    [NotNullAttribute]
public IReadOnlyList`1<ITreeNode> GetDeclaredElementUsages(IDeclaredElement variable);
    [PureAttribute]
public bool HasDeclaredElementUsages(IDeclaredElement variable, UsageState mask);
    [NotNullAttribute]
public IEnumerable`1<ITypeUsageConstraint> GetTypeConstraintsForParameter(IParameter parameter);
    public void SetElementState(IDeclaredElement element, UsageState state);
    public void SetElementUsed(ElementId elementId);
    public sealed virtual void Execute(Action`1<DaemonStageResult> committer);
}
public class JetBrains.ReSharper.Daemon.UsageChecking.CommonCollectUsagesPsiFileProcessor : object {
    private static int MAX_NUMBER_SIMULATIONALLY_PROCESSED_PARTS;
    [NotNullAttribute]
private UsageCheckingServiceManager myUsageCheckingServiceManager;
    [CompilerGeneratedAttribute]
private CollectUsagesStageProcess <UsagesStageProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private IDaemonProcess <DaemonProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private IContextBoundSettingsStore <SettingsStore>k__BackingField;
    [CompilerGeneratedAttribute]
private IScopeProcessorFactory <ProcessorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private GlobalFileStructureBuilder <GlobalFileStructureBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<SwaExtensionProviderBase> <SwaExtensionProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskBarrier <TaskBarrier>k__BackingField;
    [CompilerGeneratedAttribute]
private CollectUsagesStagePersistentData <UsagesStagePersistentData>k__BackingField;
    [CompilerGeneratedAttribute]
private InterruptibleLazy`1<LocalMembersUsageFilter> <MemberUsageFilter>k__BackingField;
    [NotNullAttribute]
protected CollectUsagesStageProcess UsagesStageProcess { get; }
    [NotNullAttribute]
protected IDaemonProcess DaemonProcess { get; }
    [NotNullAttribute]
protected IContextBoundSettingsStore SettingsStore { get; }
    [NotNullAttribute]
protected IScopeProcessorFactory ProcessorFactory { get; }
    [NotNullAttribute]
private GlobalFileStructureBuilder GlobalFileStructureBuilder { get; }
    [NotNullAttribute]
protected IEnumerable`1<SwaExtensionProviderBase> SwaExtensionProviders { get; }
    [NotNullAttribute]
protected ITaskBarrier TaskBarrier { get; }
    [NotNullAttribute]
protected CollectUsagesStagePersistentData UsagesStagePersistentData { get; }
    [NotNullAttribute]
private InterruptibleLazy`1<LocalMembersUsageFilter> MemberUsageFilter { get; }
    public CommonCollectUsagesPsiFileProcessor(CollectUsagesStageProcess collectUsagesStageProcess, IDaemonProcess daemonProcess, IContextBoundSettingsStore settingsStore, CollectUsagesStagePersistentData collectUsagesStagePersistentData, ITaskBarrier taskBarrier, IScopeProcessorFactory scopeProcessorFactory, UsageCheckingServiceManager usageCheckingServiceManager, GlobalFileStructureBuilder globalFileStructureBuilder, IEnumerable`1<SwaExtensionProviderBase> swaExtensionProviders);
    [CompilerGeneratedAttribute]
protected CollectUsagesStageProcess get_UsagesStageProcess();
    [CompilerGeneratedAttribute]
protected IDaemonProcess get_DaemonProcess();
    [CompilerGeneratedAttribute]
protected IContextBoundSettingsStore get_SettingsStore();
    [CompilerGeneratedAttribute]
protected IScopeProcessorFactory get_ProcessorFactory();
    [CompilerGeneratedAttribute]
private GlobalFileStructureBuilder get_GlobalFileStructureBuilder();
    [CompilerGeneratedAttribute]
protected IEnumerable`1<SwaExtensionProviderBase> get_SwaExtensionProviders();
    [CompilerGeneratedAttribute]
protected ITaskBarrier get_TaskBarrier();
    [CompilerGeneratedAttribute]
protected CollectUsagesStagePersistentData get_UsagesStagePersistentData();
    [CompilerGeneratedAttribute]
private InterruptibleLazy`1<LocalMembersUsageFilter> get_MemberUsageFilter();
    public sealed virtual void ProcessFile(IDaemonProcess daemonProcess, IFile psiFile, IScopeProcessor topLevelScopeProcessor);
    public virtual bool InteriorShouldBeProcessed(ITreeNode element, IScopeProcessor scopeProcessor);
    public sealed virtual bool IsProcessingFinished(IScopeProcessor context);
    public virtual void ProcessBeforeInterior(ITreeNode element, IScopeProcessor scopeProcessor);
    private void ProcessMemberDeclaration(ITypeMemberDeclaration memberDeclaration, IScopeProcessor outerProcessor);
    protected static void PostProcessUsageData(ITreeNode element, UsageData usageData);
    public virtual void ProcessAfterInterior(ITreeNode element, IScopeProcessor scopeProcessor);
    private void ProcessPartialType(ITypeElement typeElement, IScopeProcessor scopeProcessor);
    [CanBeNullAttribute]
[PureAttribute]
protected virtual ITypeMemberDeclaration IsTypeMemberDeclaration(ITreeNode element);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Daemon.UsageChecking.ConfigurableSeveritySettingsProviderB687B14070E58EDAFD995B41AB2A753DA96E708BF1C60FC7F3C24EE5D5A16901 : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Daemon.UsageChecking.ConfigurableSeveritySettingsProviderB687B14070E58EDAFD995B41AB2A753DA96E708BF1C60FC7F3C24EE5D5A16901/<GetBooleanOptions>d__0")]
public sealed virtual IEnumerable`1<ValueTuple`2<SettingsScalarEntry, string>> GetBooleanOptions(IContextBoundSettingsStore settingsStore, ConfigurableSeverityItem configurableSeverity);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Daemon.UsageChecking.ConfigurableSeveritySettingsProviderB687B14070E58EDAFD995B41AB2A753DA96E708BF1C60FC7F3C24EE5D5A16901/<GetSeverityOptions>d__1")]
public sealed virtual IEnumerable`1<ValueTuple`2<SettingsScalarEntry, string>> GetSeverityOptions(IContextBoundSettingsStore settingsStore, ConfigurableSeverityItem configurableSeverity);
}
[ConfigurableSeverityHighlightingAttribute("ConvertToConstant.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.ConvertToConstantGlobalWarning : ConvertToConstantWarningBase {
    public static string HIGHLIGHTING_ID;
    public ConvertToConstantGlobalWarning(IDeclaration declaration);
}
[ConfigurableSeverityHighlightingAttribute("ConvertToConstant.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.ConvertToConstantLocalWarning : ConvertToConstantWarningBase {
    public static string HIGHLIGHTING_ID;
    public ConvertToConstantLocalWarning(IDeclaration declaration);
}
public static class JetBrains.ReSharper.Daemon.UsageChecking.ConvertToConstantUtil : object {
    public static bool IsValidConstant(IType constantType, IExpression initializer);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.ConvertToConstantWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    public IDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ConvertToConstantWarningBase(IDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public static ConvertToConstantWarningBase Create(IDeclaration declaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("DefaultStructEqualityIsUsed.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.DefaultStructEqualityIsUsedGlobalWarning : DefaultStructEqualityIsUsedWarningBase {
    public static string HIGHLIGHTING_ID;
    public DefaultStructEqualityIsUsedGlobalWarning(ITypeElement typeElement, IDeclaration preferredDeclaration);
}
[ConfigurableSeverityHighlightingAttribute("DefaultStructEqualityIsUsed.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.DefaultStructEqualityIsUsedLocalWarning : DefaultStructEqualityIsUsedWarningBase {
    public static string HIGHLIGHTING_ID;
    public DefaultStructEqualityIsUsedLocalWarning(ITypeElement typeElement, IDeclaration preferredDeclaration);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.DefaultStructEqualityIsUsedWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private ITypeElement <TypeElement>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaration <PreferredDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITypeElement TypeElement { get; }
    public IDeclaration PreferredDeclaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public DefaultStructEqualityIsUsedWarningBase(ITypeElement typeElement, IDeclaration preferredDeclaration);
    [NotNullAttribute]
[PureAttribute]
public static DefaultStructEqualityIsUsedWarningBase Create(ITypeElement typeElement, IDeclaration preferredDeclaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public ITypeElement get_TypeElement();
    [CompilerGeneratedAttribute]
public IDeclaration get_PreferredDeclaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
public class JetBrains.ReSharper.Daemon.UsageChecking.DummyLanguageSpecificElementPropertiesCalculator : object {
    public sealed virtual bool IsPartialMethod(IMethod method);
    public sealed virtual bool IsPartialClass(IClass classType);
    public sealed virtual bool IsStaticClass(IClass classType);
    public sealed virtual bool CanConvertToConstant(IField field);
    public sealed virtual bool CanConvertToConstant(ILocalVariable local);
    public sealed virtual bool IsRedundantOverload(ITypeMember member);
    public sealed virtual bool IsPrimaryConstructor(IConstructor constructor);
    public sealed virtual bool HasPositionalParameters(ITypeElement typeElement);
    public sealed virtual bool MethodDeclarationHasBody(IDeclaration declaration);
    public sealed virtual bool IsInitializedInDeclaration(IDeclaration declaration);
    public sealed virtual bool IsMemberVirtualByConvention(ITypeElement typeElement, ITypeMember typeMember);
    public sealed virtual IDeclaration GetContainingTypeMember(IDeclaration declaration);
    public sealed virtual IEnumerable`1<ITypeMember> GetPositionalMembers(ITypeElement typeElement);
}
[ConfigurableSeverityHighlightingAttribute("EntityNameCapturedOnly.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.EntityNameCapturedOnlyGlobalWarning : EntityNameCapturedOnlyWarningBase {
    public static string HIGHLIGHTING_ID;
    public EntityNameCapturedOnlyGlobalWarning(IDeclaration declaration);
}
[ConfigurableSeverityHighlightingAttribute("EntityNameCapturedOnly.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.EntityNameCapturedOnlyLocalWarning : EntityNameCapturedOnlyWarningBase {
    public static string HIGHLIGHTING_ID;
    public EntityNameCapturedOnlyLocalWarning(IDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.EntityNameCapturedOnlyWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <RichToolTip>k__BackingField;
    public IDeclaration Declaration { get; }
    public RichText RichToolTip { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public EntityNameCapturedOnlyWarningBase(IDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public static EntityNameCapturedOnlyWarningBase Create(IDeclaration declaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public RichText get_RichToolTip();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual RichTextBlock TryGetTooltip(HighlighterTooltipKind where);
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("EventNeverInvoked", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.EventNeverInvokedWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITypeMemberDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    private IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.Declaration { get; }
    public ITypeMemberDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public EventNeverInvokedWarning(ITypeMemberDeclaration declaration);
    private sealed virtual override IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.get_Declaration();
    [CompilerGeneratedAttribute]
public ITypeMemberDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("EventNeverSubscribedTo.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.EventNeverSubscribedToGlobalWarning : EventNeverSubscribedToWarningBase {
    public static string HIGHLIGHTING_ID;
    public EventNeverSubscribedToGlobalWarning(ITypeMemberDeclaration declaration);
}
[ConfigurableSeverityHighlightingAttribute("EventNeverSubscribedTo.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.EventNeverSubscribedToInBaseGlobalWarning : EventNeverSubscribedToInBaseWarningBase {
    public static string HIGHLIGHTING_ID;
    public EventNeverSubscribedToInBaseGlobalWarning(ITypeMemberDeclaration declaration);
}
[ConfigurableSeverityHighlightingAttribute("EventNeverSubscribedTo.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.EventNeverSubscribedToInBaseLocalWarning : EventNeverSubscribedToInBaseWarningBase {
    public static string HIGHLIGHTING_ID;
    public EventNeverSubscribedToInBaseLocalWarning(ITypeMemberDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.EventNeverSubscribedToInBaseWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private ITypeMemberDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    private IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.Declaration { get; }
    public ITypeMemberDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public EventNeverSubscribedToInBaseWarningBase(ITypeMemberDeclaration declaration);
    private sealed virtual override IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.get_Declaration();
    [NotNullAttribute]
[PureAttribute]
public static EventNeverSubscribedToInBaseWarningBase Create(ITypeMemberDeclaration declaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public ITypeMemberDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("EventNeverSubscribedTo.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.EventNeverSubscribedToInInterfaceGlobalWarning : EventNeverSubscribedToInInterfaceWarningBase {
    public static string HIGHLIGHTING_ID;
    public EventNeverSubscribedToInInterfaceGlobalWarning(ITypeMemberDeclaration declaration);
}
[ConfigurableSeverityHighlightingAttribute("EventNeverSubscribedTo.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.EventNeverSubscribedToInInterfaceLocalWarning : EventNeverSubscribedToInInterfaceWarningBase {
    public static string HIGHLIGHTING_ID;
    public EventNeverSubscribedToInInterfaceLocalWarning(ITypeMemberDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.EventNeverSubscribedToInInterfaceWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private ITypeMemberDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    private IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.Declaration { get; }
    public ITypeMemberDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public EventNeverSubscribedToInInterfaceWarningBase(ITypeMemberDeclaration declaration);
    private sealed virtual override IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.get_Declaration();
    [NotNullAttribute]
[PureAttribute]
public static EventNeverSubscribedToInInterfaceWarningBase Create(ITypeMemberDeclaration declaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public ITypeMemberDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("EventNeverSubscribedTo.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.EventNeverSubscribedToLocalWarning : EventNeverSubscribedToWarningBase {
    public static string HIGHLIGHTING_ID;
    public EventNeverSubscribedToLocalWarning(ITypeMemberDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.EventNeverSubscribedToWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private ITypeMemberDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    private IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.Declaration { get; }
    public ITypeMemberDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public EventNeverSubscribedToWarningBase(ITypeMemberDeclaration declaration);
    private sealed virtual override IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.get_Declaration();
    [NotNullAttribute]
[PureAttribute]
public static EventNeverSubscribedToWarningBase Create(ITypeMemberDeclaration declaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public ITypeMemberDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Daemon.UsageChecking.ExposingAPICounter : UsageCounterBase {
    public static int Id;
    private static ExposingAPICounter();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Daemon.UsageChecking.ExtensionCounter : UsageCounterBase {
    public static int Id;
    private static ExtensionCounter();
}
[ConfigurableSeverityHighlightingAttribute("FieldCanBeMadeReadOnly.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.FieldCanBeMadeReadOnlyGlobalWarning : FieldCanBeMadeReadOnlyWarningBase {
    public static string HIGHLIGHTING_ID;
    public FieldCanBeMadeReadOnlyGlobalWarning(ITypeMemberDeclaration declaration, IField field);
}
[ConfigurableSeverityHighlightingAttribute("FieldCanBeMadeReadOnly.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.FieldCanBeMadeReadOnlyLocalWarning : FieldCanBeMadeReadOnlyWarningBase {
    public static string HIGHLIGHTING_ID;
    public FieldCanBeMadeReadOnlyLocalWarning(ITypeMemberDeclaration declaration, IField field);
    [NullableContextAttribute("1")]
public sealed virtual IHighlightingPointer TryCreatePointer();
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.FieldCanBeMadeReadOnlyWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private ITypeMemberDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private IField <Field>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITypeMemberDeclaration Declaration { get; }
    public IField Field { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public FieldCanBeMadeReadOnlyWarningBase(ITypeMemberDeclaration declaration, IField field);
    [NotNullAttribute]
[PureAttribute]
public static FieldCanBeMadeReadOnlyWarningBase Create(ITypeMemberDeclaration declaration, IField field, bool isGlobal);
    [CompilerGeneratedAttribute]
public ITypeMemberDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public IField get_Field();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionPerClientComponentAttribute("16", "5")]
public class JetBrains.ReSharper.Daemon.UsageChecking.HierarchyAnalysisPersistedDataHolder : object {
    private static Key`1<HierarchyInfo> KEY;
    private static HierarchyAnalysisPersistedDataHolder();
    public sealed virtual HierarchyInfo GetOrCreateHierarchyInfo(IDaemonProcess daemonProcess);
    public sealed virtual void OnFullRehighlightRequested(IDaemonProcess daemonProcess);
    public sealed virtual void OnFullRehighlightFinished(IDaemonProcess daemonProcess);
    public sealed virtual HierarchyInfo TryGetHierarchyInfo(IDaemonProcess daemonProcess);
    public sealed virtual IEnumerable`1<MemberIdInheritanceInfo> GetMemberInheritances(IDaemonProcess daemonProcess);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Daemon.UsageChecking.HierarchyInfo : object {
    private List`1<TypeElementIdInheritanceInfo> myTypeInheritances;
    private List`1<MemberIdInheritanceInfo> myMemberInheritances;
    private List`1<ElementId> myMembersCannotBeInternal;
    private List`1<ElementId> myInterfaceMembers;
    private List`1<ElementId> myAbstractMembers;
    public IReadOnlyList`1<TypeElementIdInheritanceInfo> TypeInheritances { get; }
    public IReadOnlyList`1<MemberIdInheritanceInfo> MemberInheritances { get; }
    public IReadOnlyList`1<ElementId> MembersCannotBeInternal { get; }
    public IReadOnlyList`1<ElementId> InterfaceMembers { get; }
    public IReadOnlyList`1<ElementId> AbstractMembers { get; }
    private HierarchyInfo(List`1<TypeElementIdInheritanceInfo> typeInheritances, List`1<MemberIdInheritanceInfo> memberInheritances, List`1<ElementId> membersCannotBeInternal, List`1<ElementId> interfaceMembers, List`1<ElementId> abstractMembers);
    public IReadOnlyList`1<TypeElementIdInheritanceInfo> get_TypeInheritances();
    public IReadOnlyList`1<MemberIdInheritanceInfo> get_MemberInheritances();
    public IReadOnlyList`1<ElementId> get_MembersCannotBeInternal();
    public IReadOnlyList`1<ElementId> get_InterfaceMembers();
    public IReadOnlyList`1<ElementId> get_AbstractMembers();
    public static HierarchyInfo FromDaemonProcess(IDaemonProcess process);
    [NullableContextAttribute("2")]
public void AddInheritanceInfo(MemberInheritanceInfo info, IPsiSourceFile sourceFile);
    private void AddInheritanceInfo(MemberInheritanceKind inheritanceKind, ITypeMember member, ITypeMember baseMember, bool cannotBeInternal);
    public void AddTypeInheritances(ITypeElement typeElement);
    private void AddTypeInheritances(ElementId inheritorId, ITypeElement fromType, JetHashSet`1<ITypeElement> processedTypes);
    public static ElementId GetMemberId(ITypeMember typeMember);
    public void WriteTo(UnsafeWriter writer);
    public static HierarchyInfo ReadFrom(UnsafeReader reader);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.HierarchyMembersChecker`1 : object {
    protected abstract virtual bool HasUsages(TMember member, UsageState stateMask);
    protected abstract virtual bool HasParameterUsages(TMember member, int parameterIndex, UsageState stateMask);
    protected abstract virtual bool ProcessSuperMembers(TMember member, bool includeQuasi, Func`2<TMember, bool> processor, HierarchyCheckMode mode);
    protected abstract virtual bool ProcessImplementingMembers(TMember member, bool includeQuasi, Func`2<TMember, bool> processor, HierarchyCheckMode mode);
    public bool HasHierarchyMemberUsages(TMember member, UsageState stateMask, HierarchyWalkDirection walkDirection, HierarchyCheckMode mode);
    public bool HasHierarchyParameterUsages(TMember member, int parameterIndex, UsageState stateMask, HierarchyWalkDirection walkDirection, HierarchyCheckMode mode);
    private bool HasHierarchyMember(TMember member, Predicate`1<TMember> predicate, HierarchyWalkDirection walkDirection, HierarchyCheckMode mode, JetHashSet`1<TMember> alreadyChecked);
    private bool CheckReverseDirection(TMember member, Predicate`1<TMember> predicate, HierarchyWalkDirection walkDirection, HierarchyCheckMode mode, JetHashSet`1<TMember> alreadyChecked);
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.UsageChecking.HighlightingFactory : object {
    private UsageCheckScope myScope;
    public HighlightingFactory(UsageCheckScope scope);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateUnusedTypeMemberHighlighting(IDeclaration declaration, bool usedInsideDeclaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateUnusedTypeHighlighting(IDeclaration declaration, bool usedInsideDeclaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateUnusedMemberInBaseHighlighting(IDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateUnusedMemberInInterfaceIHighlighting(IDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateMemberOnlyUsedInBaseCallsHighlighting(IDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateUnusedAutoPropertyAccessorHighlighting(IDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateNotAccessedPositionalPropertyHighlighting(IDeclaration declaration, IProperty positionalProperty);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateDefaultStructEqualityIsUsedHighlighting(ITypeElement typeElement, IDeclaration preferredDeclaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateStructLacksIEquatableHighlighting(IStruct typeElement, IDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateTypeWithSuspiciousEqualityIsUsedInRecordHighlighting(IDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateNotAccessedPositionalPropertyDuplicateStateHighlighting(IDeclaration declaration, IProperty positionalProperty);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateUnusedMethodReturnValueHighlighting(IFunctionDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateUnusedParameterHighlighting(IParameterDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateUnusedPositionalParameterCompilerHighlighting(IParameterDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateNotAccessedPrimaryConstructorParameterCompilerHighlighting(IParameterDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateUnusedParameterInPartialMethodHighlighting(IParameterDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateUnusedAbstractMemberParameterHighlighting(IParameterDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateUnusedVirtualMemberParameterHighlighting(IParameterDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateParameterOnlyPassedToSelfHighlighting(IParameterDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateParameterOnlyAssignedHighlighting(IParameterDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateParameterOnlyUsedForPreconditionCheck(IParameterDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateParameterOnlyPassedToSelfAndUsedForPreconditionCheckHighlighting(IParameterDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateOutParameterValueIsNeverUsedHighlighting(IParameterDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateClassWithVirtualMembersNeverInheritedHighlighting(ITypeDeclaration declaration);
    [CanBeNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateVirtualMemberNeverOverriddenHighlighting(ITypeMemberDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateConvertToConstantSuggestionHighlighting(IDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateUnusedFieldHighlighting(ITypeMemberDeclaration declaration, bool isCompiler);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateNotAccessedFieldHighlighting(ITypeMemberDeclaration declaration, bool isCompiler);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateUnassignedFieldHighlighting(ITypeMemberDeclaration declaration, bool isCompiler);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateUnassignedReadonlyFieldHighlighting(ITypeMemberDeclaration declaration, bool isCompiler);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateUnassignedGetOnlyAutoPropertyHighlighting(ITypeMemberDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateEventNeverInvokedHighlighting(ITypeMemberDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateInterfaceEventNeverInvokedHighlighting(ITypeMemberDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateVirtualEventNeverInvokedHighlighting(ITypeMemberDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateClassNeverInstantiatedHighlighting(ITypeDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateEventNeverSubscribedToHighlighting(ITypeMemberDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateEventNeverSubscribedToInBaseHighlighting(ITypeMemberDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateEventNeverSubscribedToInInterfaceHighlighting(ITypeMemberDeclaration declaration);
    [CanBeNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateCanBePrivateHighlighting(IDeclaration declaration);
    [CanBeNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateCanBeProtectedHighlighting(IDeclaration declaration);
    [CanBeNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateCanBeInternalHighlighting(IDeclaration declaration);
    [CanBeNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateCanBeFileLocalHighlighting(IDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateMemberCanBeMadeStaticHighlighting(ITypeMemberDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateClassCanBeSealedHighlighting(ITypeDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateFieldCanBeMadeReadOnlyHighlighting(ITypeMemberDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateAutoPropertyCanBeMadeGetOnlyHighlighting(IDeclaration setterDeclaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreatePropertyCanBeMadeInitOnlyHighlighting(IDeclaration setterDeclaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateSuggestBaseTypeForParameterHighlighting(IParameterDeclaration declaration, IType suggestedType);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateReturnTypeCanBeEnumerableHighlighting(IDeclaration declaration, IType suggestedType);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreatePropertyTypeCanBeEnumerableHighlighting(ITypeMemberDeclaration declaration, IType suggestedType);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateParameterTypeCanBeEnumerableHighlighting(IParameterDeclaration declaration, IType suggestedType);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateUnusedLocalVariableHighlighting(IDeclaration declaration, bool isCompilerWarning);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateNotAccessedLocalVariableHighlighting(IDeclaration declaration, VariableUsageState state, bool isCompilerWarning);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateLocalNameCapturedOnlyHighlighting(IDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateUnusedLabelHighlighting(IDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateUnusedTypeParameterHighlighting(IDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateCollectionNeverUpdatedHighlighting(IDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateCollectionNeverQueriedHighlighting(IDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateUnusedLocalFunctionHighlighting(IDeclaration declaration, bool isCompiler);
    [NotNullAttribute]
[PureAttribute]
public IUsageAnalysisHighlighting CreateUnusedLocalFunctionReturnValueHighlighting(IDeclaration declaration);
}
public interface JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation {
    [CanBeNullAttribute]
public IDeclaration Declaration { get; }
    public abstract virtual IDeclaration get_Declaration();
}
public interface JetBrains.ReSharper.Daemon.UsageChecking.ICollectUsagesPsiFileProcessor {
    public abstract virtual void ProcessFile(IDaemonProcess daemonProcess, IFile psiFile, IScopeProcessor topLevelScopeProcessor);
}
public interface JetBrains.ReSharper.Daemon.UsageChecking.ICollectUsagesPsiFileProcessorFactory {
    [NotNullAttribute]
[PureAttribute]
public abstract virtual ICollectUsagesPsiFileProcessor CreatePsiFileProcessor(CollectUsagesStageProcess collectUsagesStageProcess, IDaemonProcess daemonProcess, IContextBoundSettingsStore settingsStore, CollectUsagesStagePersistentData collectUsagesStagePersistentData, ITaskBarrier taskBarrier, IScopeProcessorFactory scopeProcessorFactory, UsageCheckingServiceManager usageCheckingServiceManager, GlobalFileStructureBuilder globalFileStructureBuilder, IEnumerable`1<SwaExtensionProviderBase> swaExtensionProviders);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ReSharper.Daemon.UsageChecking.ICustomUsageAnalysisProcessor {
    public abstract virtual void ProcessElement(ITreeNode treeNode, IParameters parameters);
    public abstract virtual void ProcessMemberUsage(ITypeMember member, IReference reference, IParameters parameters);
    public abstract virtual void ProcessDeclaration(IDeclaration declaration, IDeclaredElement element, IParameters parameters);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Daemon.UsageChecking.IHierarchyAnalysisPersistedDataHolder {
    public abstract virtual HierarchyInfo TryGetHierarchyInfo(IDaemonProcess daemonProcess);
    public abstract virtual HierarchyInfo GetOrCreateHierarchyInfo(IDaemonProcess daemonProcess);
    public abstract virtual IEnumerable`1<MemberIdInheritanceInfo> GetMemberInheritances(IDaemonProcess daemonProcess);
}
public interface JetBrains.ReSharper.Daemon.UsageChecking.ILanguageSpecificElementPropertiesCalculator {
    public abstract virtual bool IsPartialMethod(IMethod method);
    public abstract virtual bool IsPartialClass(IClass classType);
    public abstract virtual bool IsStaticClass(IClass classType);
    public abstract virtual bool CanConvertToConstant(IField field);
    public abstract virtual bool CanConvertToConstant(ILocalVariable local);
    public abstract virtual bool IsRedundantOverload(ITypeMember member);
    public abstract virtual bool IsPrimaryConstructor(IConstructor constructor);
    public abstract virtual bool HasPositionalParameters(ITypeElement typeElement);
    public abstract virtual bool MethodDeclarationHasBody(IDeclaration declaration);
    public abstract virtual bool IsInitializedInDeclaration(IDeclaration declaration);
    public abstract virtual bool IsMemberVirtualByConvention(ITypeElement typeElement, ITypeMember typeMember);
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual IDeclaration GetContainingTypeMember(IDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public abstract virtual IEnumerable`1<ITypeMember> GetPositionalMembers(ITypeElement typeElement);
}
[ConfigurableSeverityHighlightingAttribute("EventNeverInvoked.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.InterfaceEventNeverInvokedWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITypeMemberDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    private IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.Declaration { get; }
    public ITypeMemberDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public InterfaceEventNeverInvokedWarning(ITypeMemberDeclaration declaration);
    private sealed virtual override IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.get_Declaration();
    [CompilerGeneratedAttribute]
public ITypeMemberDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
public interface JetBrains.ReSharper.Daemon.UsageChecking.IPresentationHelper {
    [NotNullAttribute]
[PureAttribute]
public abstract virtual string DeclaredElementName(IDeclaredElement declaredElement);
    [CanBeNullAttribute]
public abstract virtual string GetVirtualTerm(IDeclaration declaration);
    [CanBeNullAttribute]
public abstract virtual string GetInternalTerm(IDeclaration declaration);
    [CanBeNullAttribute]
public abstract virtual string GetStaticTerm();
    [CanBeNullAttribute]
public abstract virtual string GetSealedTerm(IDeclaration declaration);
    [CanBeNullAttribute]
public abstract virtual string GetReadOnlyTerm(IDeclaration declaration);
    [CanBeNullAttribute]
public abstract virtual string GetGetOnlyTerm(IDeclaration declaration);
    [CanBeNullAttribute]
public abstract virtual string GetInitOnlyTerm(IDeclaration declaration);
    public abstract virtual DocumentRange ReturnTypeRange(IDeclaration declaration);
    public abstract virtual DocumentRange VirtualMemberNeverOverriddenRange(ITypeMemberDeclaration declaration);
    public abstract virtual DocumentRange LowerAccessHighlightingRange(IDeclaration declaration);
    public abstract virtual DocumentRange TypeUsageRange(IDeclaration declaration);
}
[HighlightingSourceAttribute]
public interface JetBrains.ReSharper.Daemon.UsageChecking.IRedundantOverloadProcessor {
    public abstract virtual void ProcessMethod(IDeclaration declaration, Action`1<IHighlighting> consumer, UsageCheckScope scope);
    public abstract virtual void ProcessConstructor(IDeclaration declaration, Action`1<IHighlighting> consumer, UsageCheckScope scope);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Daemon.UsageChecking.IScopeProcessor {
    public List`1<UsageData> IntermediateUsageData { get; }
    public UsageAnalyzer UsageAnalyzer { get; }
    public abstract virtual List`1<UsageData> get_IntermediateUsageData();
    public abstract virtual void AddIntermediateUsageData(UsageData data);
    public abstract virtual UsageAnalyzer get_UsageAnalyzer();
    public abstract virtual void ProcessElement(ITreeNode element);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Daemon.UsageChecking.IScopeProcessorFactory {
    public abstract virtual IScopeProcessor CreateScopeProcessor(IScopeProcessor parent, CollectUsagesStageProcess collectUsagesStageProcess, UsageAnalyzer usageAnalyzer, UsageData outsideMembersData, IUsageFilter usageFilter, ITypeMember currentMember, IgnoreWarningsRegionsInfo regionsInfo);
}
[HighlightingSourceAttribute]
public interface JetBrains.ReSharper.Daemon.UsageChecking.IUnusedDeclarationAnalyzer {
    public abstract virtual void ProcessDeclaration(IDeclarationInfo info);
}
[HighlightingSourceAttribute]
public interface JetBrains.ReSharper.Daemon.UsageChecking.IUnusedLocalDeclarationAnalyzer {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessDeclaration(IDeclaration declaration, IDeclaredElement declaredElement, IHighlightingConsumer consumer);
}
public interface JetBrains.ReSharper.Daemon.UsageChecking.IUsageAnalysisHighlighting {
}
[HighlightingSourceAttribute]
public interface JetBrains.ReSharper.Daemon.UsageChecking.IUsageAnalysisHighlightingSource {
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ReSharper.Daemon.UsageChecking.IUsageInspectionsSuppressor {
    public abstract virtual bool SuppressUsageInspectionsOnElement(IDeclaredElement element, ImplicitUseKindFlags& flags);
}
[ConfigurableSeverityHighlightingAttribute("LocalFunctionCanBeMadeStatic", "CSHARP")]
public class JetBrains.ReSharper.Daemon.UsageChecking.LocalFunctionCanBeMadeStaticWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IDeclaration <LocalFunctionDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IDeclaration LocalFunctionDeclaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public LocalFunctionCanBeMadeStaticWarning(IDeclaration localFunctionDeclaration);
    [CompilerGeneratedAttribute]
public IDeclaration get_LocalFunctionDeclaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Daemon.UsageChecking.LocalMembersUsageFilter : object {
    private HashSet`1<string> myReferenceNames;
    private HashSet`1<IDeclaredElement> myMembers;
    [CompilerGeneratedAttribute]
private IReferenceNameContainer <ReferenceNameContainer>k__BackingField;
    public bool HasSearchableMembers { get; }
    public bool ProcessDeclarations { get; }
    public IReferenceNameContainer ReferenceNameContainer { get; }
    public LocalMembersUsageFilter(IPsiSourceFile sourceFile, UsageCheckingServiceManager usageCheckingServiceManager);
    public bool get_HasSearchableMembers();
    public sealed virtual bool Accept(string referenceName);
    public sealed virtual bool Accept(IDeclaredElement element);
    public sealed virtual bool get_ProcessDeclarations();
    [CompilerGeneratedAttribute]
public sealed virtual IReferenceNameContainer get_ReferenceNameContainer();
}
[ConfigurableSeverityHighlightingAttribute("MemberCanBeFileLocal", "CSHARP")]
public class JetBrains.ReSharper.Daemon.UsageChecking.MemberCanBeFileLocalWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITypeMember <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <DocumentRange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITypeMember Member { get; }
    public IDeclaration Declaration { get; }
    public DocumentRange DocumentRange { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MemberCanBeFileLocalWarning(ITypeMember member, IDeclaration declaration, DocumentRange documentRange);
    [CompilerGeneratedAttribute]
public ITypeMember get_Member();
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public DocumentRange get_DocumentRange();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("MemberCanBeInternal", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.MemberCanBeInternalWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITypeMember <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <DocumentRange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITypeMember Member { get; }
    public IDeclaration Declaration { get; }
    public DocumentRange DocumentRange { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MemberCanBeInternalWarning(ITypeMember member, IDeclaration declaration, DocumentRange documentRange);
    [CompilerGeneratedAttribute]
public ITypeMember get_Member();
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public DocumentRange get_DocumentRange();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("MemberCanBeMadeStatic.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.MemberCanBeMadeStaticGlobalWarning : MemberCanBeMadeStaticWarningBase {
    public static string HIGHLIGHTING_ID;
    public MemberCanBeMadeStaticGlobalWarning(ITypeMemberDeclaration declaration, ITypeMember member);
}
[ConfigurableSeverityHighlightingAttribute("MemberCanBeMadeStatic.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.MemberCanBeMadeStaticLocalWarning : MemberCanBeMadeStaticWarningBase {
    public static string HIGHLIGHTING_ID;
    public MemberCanBeMadeStaticLocalWarning(ITypeMemberDeclaration declaration, ITypeMember member);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.MemberCanBeMadeStaticWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private ITypeMemberDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeMember <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <RichToolTip>k__BackingField;
    public ITypeMemberDeclaration Declaration { get; }
    public ITypeMember Member { get; }
    public RichText RichToolTip { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MemberCanBeMadeStaticWarningBase(ITypeMemberDeclaration declaration, ITypeMember member);
    [NotNullAttribute]
[PureAttribute]
public static MemberCanBeMadeStaticWarningBase Create(ITypeMemberDeclaration declaration, ITypeMember member, bool isGlobal);
    [CompilerGeneratedAttribute]
public ITypeMemberDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public ITypeMember get_Member();
    [CompilerGeneratedAttribute]
public RichText get_RichToolTip();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual RichTextBlock TryGetTooltip(HighlighterTooltipKind where);
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("MemberCanBePrivate.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.MemberCanBePrivateGlobalWarning : MemberCanBePrivateWarningBase {
    public static string HIGHLIGHTING_ID;
    public MemberCanBePrivateGlobalWarning(ITypeMember member, IDeclaration declaration, DocumentRange documentRange);
}
[ConfigurableSeverityHighlightingAttribute("MemberCanBePrivate.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.MemberCanBePrivateLocalWarning : MemberCanBePrivateWarningBase {
    public static string HIGHLIGHTING_ID;
    public MemberCanBePrivateLocalWarning(ITypeMember member, IDeclaration declaration, DocumentRange documentRange);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.MemberCanBePrivateWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private ITypeMember <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <DocumentRange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITypeMember Member { get; }
    public IDeclaration Declaration { get; }
    public DocumentRange DocumentRange { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MemberCanBePrivateWarningBase(ITypeMember member, IDeclaration declaration, DocumentRange documentRange);
    [NotNullAttribute]
[PureAttribute]
public static MemberCanBePrivateWarningBase Create(ITypeMember member, IDeclaration declaration, DocumentRange documentRange, bool isGlobal);
    [CompilerGeneratedAttribute]
public ITypeMember get_Member();
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public DocumentRange get_DocumentRange();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("MemberCanBeProtected.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.MemberCanBeProtectedGlobalWarning : MemberCanBeProtectedWarningBase {
    public static string HIGHLIGHTING_ID;
    public MemberCanBeProtectedGlobalWarning(ITypeMember member, IDeclaration declaration, DocumentRange documentRange);
}
[ConfigurableSeverityHighlightingAttribute("MemberCanBeProtected.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.MemberCanBeProtectedLocalWarning : MemberCanBeProtectedWarningBase {
    public static string HIGHLIGHTING_ID;
    public MemberCanBeProtectedLocalWarning(ITypeMember member, IDeclaration declaration, DocumentRange documentRange);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.MemberCanBeProtectedWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private ITypeMember <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <DocumentRange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITypeMember Member { get; }
    public IDeclaration Declaration { get; }
    public DocumentRange DocumentRange { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MemberCanBeProtectedWarningBase(ITypeMember member, IDeclaration declaration, DocumentRange documentRange);
    [NotNullAttribute]
[PureAttribute]
public static MemberCanBeProtectedWarningBase Create(ITypeMember member, IDeclaration declaration, DocumentRange documentRange, bool isGlobal);
    [CompilerGeneratedAttribute]
public ITypeMember get_Member();
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public DocumentRange get_DocumentRange();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Daemon.UsageChecking.MemberIdInheritanceInfo : ValueType {
    public MemberInheritanceKind InheritanceKind;
    public ElementId MemberId;
    public ElementId BaseMemberId;
    public MemberIdInheritanceInfo(MemberInheritanceKind inheritanceKind, ElementId memberId, ElementId baseMemberId);
    public void WriteTo(UnsafeWriter writer);
    public static MemberIdInheritanceInfo ReadFrom(UnsafeReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Daemon.UsageChecking.MemberInheritanceInfo : ValueType {
    public MemberInheritanceKind InheritanceKind;
    public ITypeMember Member;
    public ITypeMember BaseMember;
    [NullableAttribute("2")]
public ITypeElement QuasiImplementsInType;
    public MemberInheritanceInfo(MemberInheritanceKind inheritanceKind, ITypeMember member, ITypeMember baseMember);
    public MemberInheritanceInfo(ITypeMember member, ITypeMember baseMember, ITypeElement quasiImplementsInType);
}
public enum JetBrains.ReSharper.Daemon.UsageChecking.MemberInheritanceKind : Enum {
    public int value__;
    public static MemberInheritanceKind OVERRIDES;
    public static MemberInheritanceKind IMPLEMENTS;
    public static MemberInheritanceKind QUASI_IMPLEMENTS;
}
[ConfigurableSeverityHighlightingAttribute("UnusedMemberHierarchy.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.MemberOnlyUsedInBaseCallsGlobalWarning : MemberOnlyUsedInBaseCallsWarningBase {
    public static string HIGHLIGHTING_ID;
    public MemberOnlyUsedInBaseCallsGlobalWarning(IDeclaration declaration);
}
[ConfigurableSeverityHighlightingAttribute("UnusedMemberHierarchy.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.MemberOnlyUsedInBaseCallsLocalWarning : MemberOnlyUsedInBaseCallsWarningBase {
    public static string HIGHLIGHTING_ID;
    public MemberOnlyUsedInBaseCallsLocalWarning(IDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.MemberOnlyUsedInBaseCallsWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    private IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.Declaration { get; }
    public IDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MemberOnlyUsedInBaseCallsWarningBase(IDeclaration declaration);
    private sealed virtual override IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.get_Declaration();
    [NotNullAttribute]
[PureAttribute]
public static MemberOnlyUsedInBaseCallsWarningBase Create(IDeclaration declaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ShellComponentAttribute("16")]
internal class JetBrains.ReSharper.Daemon.UsageChecking.NetCoreImplicitlyUsedMethodsUsageSuppressor : object {
    public sealed virtual bool SuppressUsageInspectionsOnElement(IDeclaredElement element, ImplicitUseKindFlags& flags);
    private bool IsConfigureMethod(IMethod method);
    private bool IsConfigureServicesMethod(IMethod method);
    private static bool CheckParameterType(IParameter parameter, string expectedParameterTypeShortName, string expectedParameterTypeNamespace);
}
[ConfigurableSeverityHighlightingAttribute("NotAccessedField.Compiler", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.NotAccessedFieldCompilerWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITypeMemberDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITypeMemberDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NotAccessedFieldCompilerWarning(ITypeMemberDeclaration declaration);
    [CompilerGeneratedAttribute]
public ITypeMemberDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NotAccessedField.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.NotAccessedFieldGlobalWarning : NotAccessedFieldWarningBase {
    public static string HIGHLIGHTING_ID;
    public NotAccessedFieldGlobalWarning(ITypeMemberDeclaration declaration);
}
[ConfigurableSeverityHighlightingAttribute("NotAccessedField.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.NotAccessedFieldLocalWarning : NotAccessedFieldWarningBase {
    public static string HIGHLIGHTING_ID;
    public NotAccessedFieldLocalWarning(ITypeMemberDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.NotAccessedFieldWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private ITypeMemberDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    private IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.Declaration { get; }
    public ITypeMemberDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NotAccessedFieldWarningBase(ITypeMemberDeclaration declaration);
    private sealed virtual override IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.get_Declaration();
    [NotNullAttribute]
[PureAttribute]
public static NotAccessedFieldWarningBase Create(ITypeMemberDeclaration declaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public ITypeMemberDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NotAccessedOutParameterVariable", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.NotAccessedOutParameterVariableWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NotAccessedOutParameterVariableWarning(IDeclaration declaration);
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UnusedParameter.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.NotAccessedParameterGlobalWarning : NotAccessedParameterWarningBase {
    public static string HIGHLIGHTING_ID;
    public NotAccessedParameterGlobalWarning(IParameterDeclaration declaration);
}
[ConfigurableSeverityHighlightingAttribute("UnusedParameter.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.NotAccessedParameterLocalWarning : NotAccessedParameterWarningBase {
    public static string HIGHLIGHTING_ID;
    public NotAccessedParameterLocalWarning(IParameterDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.NotAccessedParameterWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IParameterDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IParameterDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NotAccessedParameterWarningBase(IParameterDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public static NotAccessedParameterWarningBase Create(IParameterDeclaration declaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public IParameterDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NotAccessedPositionalProperty.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.NotAccessedPositionalPropertyDuplicateStateGlobalWarning : NotAccessedPositionalPropertyDuplicateStateWarningBase {
    public static string HIGHLIGHTING_ID;
    public NotAccessedPositionalPropertyDuplicateStateGlobalWarning(IDeclaration declaration, ITypeMember typeMember);
}
[ConfigurableSeverityHighlightingAttribute("NotAccessedPositionalProperty.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.NotAccessedPositionalPropertyDuplicateStateLocalWarning : NotAccessedPositionalPropertyDuplicateStateWarningBase {
    public static string HIGHLIGHTING_ID;
    public NotAccessedPositionalPropertyDuplicateStateLocalWarning(IDeclaration declaration, ITypeMember typeMember);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.NotAccessedPositionalPropertyDuplicateStateWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeMember <TypeMember>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IDeclaration Declaration { get; }
    public ITypeMember TypeMember { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NotAccessedPositionalPropertyDuplicateStateWarningBase(IDeclaration declaration, ITypeMember typeMember);
    [NotNullAttribute]
[PureAttribute]
public static NotAccessedPositionalPropertyDuplicateStateWarningBase Create(IDeclaration declaration, ITypeMember typeMember, bool isGlobal);
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public ITypeMember get_TypeMember();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NotAccessedPositionalProperty.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.NotAccessedPositionalPropertyGlobalWarning : NotAccessedPositionalPropertyWarningBase {
    public static string HIGHLIGHTING_ID;
    public NotAccessedPositionalPropertyGlobalWarning(IDeclaration declaration, ITypeMember typeMember);
}
[ConfigurableSeverityHighlightingAttribute("NotAccessedPositionalProperty.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.NotAccessedPositionalPropertyLocalWarning : NotAccessedPositionalPropertyWarningBase {
    public static string HIGHLIGHTING_ID;
    public NotAccessedPositionalPropertyLocalWarning(IDeclaration declaration, ITypeMember typeMember);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.NotAccessedPositionalPropertyWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeMember <TypeMember>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <RichToolTip>k__BackingField;
    public IDeclaration Declaration { get; }
    public ITypeMember TypeMember { get; }
    public RichText RichToolTip { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NotAccessedPositionalPropertyWarningBase(IDeclaration declaration, ITypeMember typeMember);
    [NotNullAttribute]
[PureAttribute]
public static NotAccessedPositionalPropertyWarningBase Create(IDeclaration declaration, ITypeMember typeMember, bool isGlobal);
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public ITypeMember get_TypeMember();
    [CompilerGeneratedAttribute]
public RichText get_RichToolTip();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual RichTextBlock TryGetTooltip(HighlighterTooltipKind where);
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NotAccessedPrimaryConstructorParameterCompiler", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.NotAccessedPrimaryConstructorParameterCompilerWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IParameterDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IParameterDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NotAccessedPrimaryConstructorParameterCompilerWarning(IParameterDeclaration declaration);
    [CompilerGeneratedAttribute]
public IParameterDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NotAccessedVariable.Compiler", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.NotAccessedVariableCompilerWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <RichToolTip>k__BackingField;
    public IDeclaration Declaration { get; }
    public RichText RichToolTip { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NotAccessedVariableCompilerWarning(IDeclaration declaration);
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public RichText get_RichToolTip();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual RichTextBlock TryGetTooltip(HighlighterTooltipKind where);
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NotAccessedVariable", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.NotAccessedVariableWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <RichToolTip>k__BackingField;
    public IDeclaration Declaration { get; }
    public RichText RichToolTip { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NotAccessedVariableWarning(IDeclaration declaration);
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public RichText get_RichToolTip();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual RichTextBlock TryGetTooltip(HighlighterTooltipKind where);
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Daemon.UsageChecking.NullUsageFilter : object {
    public static NullUsageFilter Instance;
    public bool ProcessDeclarations { get; }
    [NullableAttribute("2")]
public IReferenceNameContainer ReferenceNameContainer { get; }
    private static NullUsageFilter();
    public sealed virtual bool Accept(string referenceName);
    public sealed virtual bool Accept(IDeclaredElement element);
    public sealed virtual bool get_ProcessDeclarations();
    [NullableContextAttribute("2")]
public sealed virtual IReferenceNameContainer get_ReferenceNameContainer();
}
public class JetBrains.ReSharper.Daemon.UsageChecking.OneOfAnyConstraint : object {
    private ICollection`1<IType> myTypes;
    private ITypeConversionRule myConversionRule;
    private OneOfAnyConstraint(ICollection`1<IType> types, ITypeConversionRule typeConversionRule);
    public static ITypeUsageConstraint Create(ICollection`1<IType> types, IType originalType, ITypeConversionRule typeConversionRule);
    public static ITypeUsageConstraint Create(IType type, IType originalType, ITypeConversionRule typeConversionRule);
    public sealed virtual bool Satisfies(IDeclaredType type);
}
[ConfigurableSeverityHighlightingAttribute("OutParameterValueIsAlwaysDiscarded.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.OutParameterValueIsAlwaysDiscardedGlobalWarning : OutParameterValueIsAlwaysDiscardedWarningBase {
    public static string HIGHLIGHTING_ID;
    public OutParameterValueIsAlwaysDiscardedGlobalWarning(IParameterDeclaration declaration);
}
[ConfigurableSeverityHighlightingAttribute("OutParameterValueIsAlwaysDiscarded.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.OutParameterValueIsAlwaysDiscardedLocalWarning : OutParameterValueIsAlwaysDiscardedWarningBase {
    public static string HIGHLIGHTING_ID;
    public OutParameterValueIsAlwaysDiscardedLocalWarning(IParameterDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.OutParameterValueIsAlwaysDiscardedWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IParameterDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IParameterDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public OutParameterValueIsAlwaysDiscardedWarningBase(IParameterDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public static OutParameterValueIsAlwaysDiscardedWarningBase Create(IParameterDeclaration declaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public IParameterDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
public enum JetBrains.ReSharper.Daemon.UsageChecking.ParameterKindShifted : Enum {
    public int value__;
    public static ParameterKindShifted VALUE;
    public static ParameterKindShifted REFERENCE;
    public static ParameterKindShifted OUTPUT;
    public static ParameterKindShifted UNKNOWN;
}
[ConfigurableSeverityHighlightingAttribute("ParameterOnlyUsedForPreconditionCheck.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.ParameterOnlyPassedToSelfAndUsedForPreconditionCheckGlobalWarning : ParameterOnlyPassedToSelfAndUsedForPreconditionCheckWarningBase {
    public static string HIGHLIGHTING_ID;
    public ParameterOnlyPassedToSelfAndUsedForPreconditionCheckGlobalWarning(IParameterDeclaration declaration);
}
[ConfigurableSeverityHighlightingAttribute("ParameterOnlyUsedForPreconditionCheck.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.ParameterOnlyPassedToSelfAndUsedForPreconditionCheckLocalWarning : ParameterOnlyPassedToSelfAndUsedForPreconditionCheckWarningBase {
    public static string HIGHLIGHTING_ID;
    public ParameterOnlyPassedToSelfAndUsedForPreconditionCheckLocalWarning(IParameterDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.ParameterOnlyPassedToSelfAndUsedForPreconditionCheckWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IParameterDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IParameterDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ParameterOnlyPassedToSelfAndUsedForPreconditionCheckWarningBase(IParameterDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public static ParameterOnlyPassedToSelfAndUsedForPreconditionCheckWarningBase Create(IParameterDeclaration declaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public IParameterDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UnusedParameter.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.ParameterOnlyPassedToSelfGlobalWarning : ParameterOnlyPassedToSelfWarningBase {
    public static string HIGHLIGHTING_ID;
    public ParameterOnlyPassedToSelfGlobalWarning(IParameterDeclaration declaration);
}
[ConfigurableSeverityHighlightingAttribute("UnusedParameter.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.ParameterOnlyPassedToSelfLocalWarning : ParameterOnlyPassedToSelfWarningBase {
    public static string HIGHLIGHTING_ID;
    public ParameterOnlyPassedToSelfLocalWarning(IParameterDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.ParameterOnlyPassedToSelfWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IParameterDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    private IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.Declaration { get; }
    public IParameterDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ParameterOnlyPassedToSelfWarningBase(IParameterDeclaration declaration);
    private sealed virtual override IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.get_Declaration();
    [NotNullAttribute]
[PureAttribute]
public static ParameterOnlyPassedToSelfWarningBase Create(IParameterDeclaration declaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public IParameterDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("ParameterOnlyUsedForPreconditionCheck.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.ParameterOnlyUsedForPreconditionCheckGlobalWarning : ParameterOnlyUsedForPreconditionCheckWarningBase {
    public static string HIGHLIGHTING_ID;
    public ParameterOnlyUsedForPreconditionCheckGlobalWarning(IParameterDeclaration declaration);
}
[ConfigurableSeverityHighlightingAttribute("ParameterOnlyUsedForPreconditionCheck.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.ParameterOnlyUsedForPreconditionCheckLocalWarning : ParameterOnlyUsedForPreconditionCheckWarningBase {
    public static string HIGHLIGHTING_ID;
    public ParameterOnlyUsedForPreconditionCheckLocalWarning(IParameterDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.ParameterOnlyUsedForPreconditionCheckWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IParameterDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IParameterDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ParameterOnlyUsedForPreconditionCheckWarningBase(IParameterDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public static ParameterOnlyUsedForPreconditionCheckWarningBase Create(IParameterDeclaration declaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public IParameterDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("ParameterTypeCanBeEnumerable.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.ParameterTypeCanBeEnumerableGlobalWarning : ParameterTypeCanBeEnumerableWarningBase {
    public static string HIGHLIGHTING_ID;
    public ParameterTypeCanBeEnumerableGlobalWarning(IParameterDeclaration declaration, IType suggestedType);
}
[ConfigurableSeverityHighlightingAttribute("ParameterTypeCanBeEnumerable.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.ParameterTypeCanBeEnumerableLocalWarning : ParameterTypeCanBeEnumerableWarningBase {
    public static string HIGHLIGHTING_ID;
    public ParameterTypeCanBeEnumerableLocalWarning(IParameterDeclaration declaration, IType suggestedType);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.ParameterTypeCanBeEnumerableWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IParameterDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private IType <SuggestedType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IParameterDeclaration Declaration { get; }
    public IType SuggestedType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ParameterTypeCanBeEnumerableWarningBase(IParameterDeclaration declaration, IType suggestedType);
    [NotNullAttribute]
[PureAttribute]
public static ParameterTypeCanBeEnumerableWarningBase Create(IParameterDeclaration declaration, IType suggestedType, bool isGlobal);
    [CompilerGeneratedAttribute]
public IParameterDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public IType get_SuggestedType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
public class JetBrains.ReSharper.Daemon.UsageChecking.PresentationHelper : object {
    [NotNullAttribute]
public static IPresentationHelper GetHelper(PsiLanguageType language);
    public virtual string DeclaredElementName(IDeclaredElement declaredElement);
    public virtual string GetVirtualTerm(IDeclaration declaration);
    public virtual string GetInternalTerm(IDeclaration declaration);
    public virtual string GetStaticTerm();
    public virtual string GetSealedTerm(IDeclaration declaration);
    public virtual string GetReadOnlyTerm(IDeclaration declaration);
    public virtual string GetGetOnlyTerm(IDeclaration declaration);
    public virtual string GetInitOnlyTerm(IDeclaration declaration);
    public virtual DocumentRange ReturnTypeRange(IDeclaration declaration);
    public virtual DocumentRange VirtualMemberNeverOverriddenRange(ITypeMemberDeclaration declaration);
    public virtual DocumentRange LowerAccessHighlightingRange(IDeclaration declaration);
    public virtual DocumentRange TypeUsageRange(IDeclaration declaration);
}
[ConfigurableSeverityHighlightingAttribute("PropertyCanBeMadeInitOnly.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.PropertyCanBeMadeInitOnlyGlobalWarning : PropertyCanBeMadeInitOnlyWarningBase {
    public static string HIGHLIGHTING_ID;
    public PropertyCanBeMadeInitOnlyGlobalWarning(IDeclaration setterDeclaration, IProperty property);
}
[ConfigurableSeverityHighlightingAttribute("PropertyCanBeMadeInitOnly.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.PropertyCanBeMadeInitOnlyLocalWarning : PropertyCanBeMadeInitOnlyWarningBase {
    public static string HIGHLIGHTING_ID;
    public PropertyCanBeMadeInitOnlyLocalWarning(IDeclaration setterDeclaration, IProperty property);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.PropertyCanBeMadeInitOnlyWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IDeclaration <SetterDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IDeclaration SetterDeclaration { get; }
    public IProperty Property { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public PropertyCanBeMadeInitOnlyWarningBase(IDeclaration setterDeclaration, IProperty property);
    [NotNullAttribute]
[PureAttribute]
public static PropertyCanBeMadeInitOnlyWarningBase Create(IDeclaration setterDeclaration, IProperty property, bool isGlobal);
    [CompilerGeneratedAttribute]
public IDeclaration get_SetterDeclaration();
    [CompilerGeneratedAttribute]
public IProperty get_Property();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("ReturnTypeCanBeEnumerable.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.PropertyTypeCanBeEnumerableGlobalWarning : PropertyTypeCanBeEnumerableWarningBase {
    public static string HIGHLIGHTING_ID;
    public PropertyTypeCanBeEnumerableGlobalWarning(ITypeMemberDeclaration declaration, IType suggestedType);
}
[ConfigurableSeverityHighlightingAttribute("ReturnTypeCanBeEnumerable.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.PropertyTypeCanBeEnumerableLocalWarning : PropertyTypeCanBeEnumerableWarningBase {
    public static string HIGHLIGHTING_ID;
    public PropertyTypeCanBeEnumerableLocalWarning(ITypeMemberDeclaration declaration, IType suggestedType);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.PropertyTypeCanBeEnumerableWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private ITypeMemberDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private IType <SuggestedType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITypeMemberDeclaration Declaration { get; }
    public IType SuggestedType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public PropertyTypeCanBeEnumerableWarningBase(ITypeMemberDeclaration declaration, IType suggestedType);
    [NotNullAttribute]
[PureAttribute]
public static PropertyTypeCanBeEnumerableWarningBase Create(ITypeMemberDeclaration declaration, IType suggestedType, bool isGlobal);
    [CompilerGeneratedAttribute]
public ITypeMemberDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public IType get_SuggestedType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Daemon.UsageChecking.ReferenceCounter : UsageCounterBase {
    public static int Id;
    private static ReferenceCounter();
}
[RegisterConfigurableSeverityAttribute("UnusedMember.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "TypeMemberIsNeverUsed", "DeclarationRedundancy", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "TypeMemberIsNeverUsed10", "4")]
[RegisterConfigurableSeverityAttribute("UnusedMember.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "TypeMemberIsNeverUsed", "DeclarationRedundancy", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "TypeMemberIsNeverUsed10", "3")]
[RegisterConfigurableSeverityAttribute("UnusedType.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "TypeIsNeverUsed", "DeclarationRedundancy", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "TypeIsNeverUsed11", "4")]
[RegisterConfigurableSeverityAttribute("UnusedType.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "TypeIsNeverUsed", "DeclarationRedundancy", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "TypeIsNeverUsed11", "3")]
[RegisterConfigurableSeverityAttribute("UnusedMemberInSuper.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "TypeMemberIsNeverAccessedViaBaseType", "DeclarationRedundancy", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "TypeMemberIsNeverUsedWithBaseTypeOrInterfaceItIsAlwaysAccessedViaMoreSpecificType", "4")]
[RegisterConfigurableSeverityAttribute("UnusedMemberInSuper.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "TypeMemberIsNeverAccessedViaBaseType", "DeclarationRedundancy", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "TypeMemberIsNeverUsedWithBaseTypeOrInterfaceItIsAlwaysAccessedViaMoreSpecificType", "3")]
[RegisterConfigurableSeverityAttribute("UnusedMemberHierarchy.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "TypeMemberIsOnlyUsedInOverrides", "DeclarationRedundancy", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "TypeMemberIsNeverUsedFromOutsideOfImplementationHierarchyItIsOnlyAccessedFromOverridesThroughBaseCall", "4")]
[RegisterConfigurableSeverityAttribute("UnusedMemberHierarchy.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "TypeMemberIsOnlyUsedInOverrides", "DeclarationRedundancy", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "TypeMemberIsNeverUsedFromOutsideOfImplementationHierarchyItIsOnlyAccessedFromOverridesThroughBaseCall", "3")]
[RegisterConfigurableSeverityAttribute("UnusedMethodReturnValue.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "MethodReturnValueIsNeverUsed", "DeclarationRedundancy", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "MethodReturnValueIsNeverUsed12", "4")]
[RegisterConfigurableSeverityAttribute("UnusedMethodReturnValue.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "MethodReturnValueIsNeverUsed", "DeclarationRedundancy", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "MethodReturnValueIsNeverUsed12", "3")]
[RegisterConfigurableSeverityAttribute("UnusedParameter.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "UnusedParameter", "DeclarationRedundancy", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ParameterIsNeverUsed", "4")]
[RegisterConfigurableSeverityAttribute("UnusedParameter.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "UnusedParameter", "DeclarationRedundancy", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ParameterIsNeverUsed", "3")]
[RegisterConfigurableSeverityAttribute("UnusedPositionalParameterCompiler", "", "", "", "DeclarationRedundancy", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "UnusedPositionalParameter", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ParameterOfThePrimaryConstructorIsDeclaredButNeverUsed", "4")]
[RegisterConfigurableSeverityAttribute("NotAccessedPrimaryConstructorParameterCompiler", "", "", "", "DeclarationRedundancy", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "NotAccessedPrimaryConstructorParameter", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ParameterOfThePrimaryConstructorIsDeclaredButNeverUsed", "4")]
[RegisterConfigurableSeverityAttribute("ParameterOnlyUsedForPreconditionCheck.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ParameterIsOnlyUsedForPreconditionCheck", "DeclarationRedundancy", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ParameterIsOnlyUsedForPreconditionCheck13", "4")]
[RegisterConfigurableSeverityAttribute("ParameterOnlyUsedForPreconditionCheck.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ParameterIsOnlyUsedForPreconditionCheck", "DeclarationRedundancy", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ParameterIsOnlyUsedForPreconditionCheck13", "3")]
[RegisterConfigurableSeverityAttribute("OutParameterValueIsAlwaysDiscarded.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ParameterOutputValueIsAlwaysDiscarded", "DeclarationRedundancy", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "TheResultingValueOfOutputParameterIsAlwaysDiscarded", "4")]
[RegisterConfigurableSeverityAttribute("OutParameterValueIsAlwaysDiscarded.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ParameterOutputValueIsAlwaysDiscarded", "DeclarationRedundancy", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "TheResultingValueOfOutputParameterIsAlwaysDiscarded", "3")]
[RegisterConfigurableSeverityAttribute("UnusedParameterInPartialMethod", "", "", "", "DeclarationRedundancy", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "UnusedParameterInPartialMethod", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ParameterOfPartialMethodIsNeverUsed", "4")]
[RegisterConfigurableSeverityAttribute("VirtualMemberNeverOverridden.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "VirtualOverridableMemberIsNeverOverridden", "DeclarationRedundancy", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "VirtualOverridableMemberIsNeverOverriddenAndSoThevirtualoverridableModifierCanBeRemoved", "3")]
[RegisterConfigurableSeverityAttribute("VirtualMemberNeverOverridden.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "VirtualOverridableMemberIsNeverOverridden", "DeclarationRedundancy", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "VirtualOverridableMemberIsNeverOverriddenAndSoThevirtualoverridableModifierCanBeRemoved", "3")]
[RegisterConfigurableSeverityAttribute("ClassWithVirtualMembersNeverInherited.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ClassWithVirtualOverridableMembersNeverInherited", "DeclarationRedundancy", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "NonAbstractClassHasVirtualOverridableMembersButHasNoInheritors", "3")]
[RegisterConfigurableSeverityAttribute("ClassWithVirtualMembersNeverInherited.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ClassWithVirtualOverridableMembersNeverInherited", "DeclarationRedundancy", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "NonAbstractClassHasVirtualOverridableMembersButHasNoInheritors", "3")]
[RegisterConfigurableSeverityAttribute("UnusedTypeParameter", "", "", "", "DeclarationRedundancy", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "UnusedTypeParameter", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "TypeParameterIsNeverUsed", "4")]
[RegisterConfigurableSeverityAttribute("UnusedVariable", "", "", "", "DeclarationRedundancy", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "UnusedLocalVariable", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "LocalVariableIsNeverUsed", "4")]
[RegisterConfigurableSeverityAttribute("NotAccessedVariable", "", "", "", "DeclarationRedundancy", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "NonAccessedLocalVariable", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "LocalVariableIsAssignedButItsValueIsNeverUsed", "4")]
[RegisterConfigurableSeverityAttribute("EntityNameCapturedOnly.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "EntityIsOnlyUsedToCaptureItsName", "DeclarationRedundancy", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "LocalVariableParameterIsOnlyUsedToCaptureItsNameVianameofExpression", "4")]
[RegisterConfigurableSeverityAttribute("EntityNameCapturedOnly.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "EntityIsOnlyUsedToCaptureItsName", "DeclarationRedundancy", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "LocalVariableParameterIsOnlyUsedToCaptureItsNameVianameofExpression", "4")]
[RegisterConfigurableSeverityAttribute("NotAccessedOutParameterVariable", "", "", "", "DeclarationRedundancy", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "LocalVariableToDiscardOutParameter", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "LocalVariableToDiscardOutParameterDescription", "4")]
[RegisterConfigurableSeverityAttribute("UnusedLabel", "", "", "", "DeclarationRedundancy", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "UnusedLabel", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "LabelIsNeverReferenced", "4")]
[RegisterConfigurableSeverityAttribute("ClassNeverInstantiated.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ClassIsNeverInstantiated", "CodeSmell", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "NonStaticClassIsNeverInstantiated", "3")]
[RegisterConfigurableSeverityAttribute("ClassNeverInstantiated.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ClassIsNeverInstantiated", "CodeSmell", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "NonStaticClassIsNeverInstantiated", "3")]
[RegisterConfigurableSeverityAttribute("NotAccessedField.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "NonAccessedField", "CodeSmell", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "FieldIsAssignedButItsValueIsNeverUsed", "4")]
[RegisterConfigurableSeverityAttribute("NotAccessedField.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "NonAccessedField", "CodeSmell", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "FieldIsAssignedButItsValueIsNeverUsed", "3")]
[RegisterConfigurableSeverityAttribute("EventNeverSubscribedTo.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "EventIsNeverSubscribedTo", "CodeSmell", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "EventIsNeverSubscribedTo14", "3")]
[RegisterConfigurableSeverityAttribute("EventNeverSubscribedTo.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "EventIsNeverSubscribedTo", "CodeSmell", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "EventIsNeverSubscribedTo14", "3")]
[RegisterConfigurableSeverityAttribute("UnassignedField.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "UnassignedField", "CodeSmell", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "FieldIsNeverAssigned", "4")]
[RegisterConfigurableSeverityAttribute("UnassignedField.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "UnassignedField", "CodeSmell", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "FieldIsNeverAssigned", "3")]
[RegisterConfigurableSeverityAttribute("UnassignedReadonlyField", "", "", "", "CodeSmell", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "UnassignedReadonlyField", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ReadonlyFieldIsNeverAssigned", "4")]
[RegisterConfigurableSeverityAttribute("UnusedAutoPropertyAccessor.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "AutoPropertyAccessorIsNeverUsed", "CodeSmell", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "AccessorInAutoPropertyIsNeverUsed", "4")]
[RegisterConfigurableSeverityAttribute("UnusedAutoPropertyAccessor.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "AutoPropertyAccessorIsNeverUsed", "CodeSmell", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "AccessorInAutoPropertyIsNeverUsed", "4")]
[RegisterConfigurableSeverityAttribute("NotAccessedPositionalProperty.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "NonAccessedPositionalProperty", "CodeSmell", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "PositionalPropertyIsNeverAccessedForRead", "4")]
[RegisterConfigurableSeverityAttribute("NotAccessedPositionalProperty.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "NonAccessedPositionalProperty", "CodeSmell", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "PositionalPropertyIsNeverAccessedForRead", "4")]
[RegisterConfigurableSeverityAttribute("EventNeverInvoked.Global", "", "", "", "CodeSmell", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "AbstractOrVirtualOverridableEventIsNeverInvoked", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "AnAbstractOrVirtualOverridableEventIsNeverInvokedInItsClassOrItsInheritors", "3")]
[RegisterConfigurableSeverityAttribute("SuspiciousTypeConversion.Global", "", "", "", "CodeSmell", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "SuspiciousTypeConversionOrCheck", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "OneTypeIsConvertedToAnotherButThereIsNoTypeInTheSolutionWhichIsInheritedFromBothAlsoAppliesToisOperatorAndAndComparisons", "4")]
[RegisterConfigurableSeverityAttribute("EventNeverInvoked", "", "", "", "CodeSmell", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "EventNeverInvoked", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "EventNeverInvokedNoteThatInCThisWarningIsTheCompilerWarningCSAndIsNotConfiguredHere", "4")]
[RegisterConfigurableSeverityAttribute("CollectionNeverUpdated.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "CollectionIsNeverUpdated", "CodeSmell", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "NewElementsAreNeverAddedToTheCollection", "4")]
[RegisterConfigurableSeverityAttribute("CollectionNeverUpdated.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "CollectionIsNeverUpdated", "CodeSmell", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "NewElementsAreNeverAddedToTheCollection", "4")]
[RegisterConfigurableSeverityAttribute("CollectionNeverQueried.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "CollectionsContentIsNeverQueried", "CodeSmell", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ElementsAreOnlyAddedToTheCollectionButNeverUsed", "4")]
[RegisterConfigurableSeverityAttribute("CollectionNeverQueried.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "CollectionsContentIsNeverQueried", "CodeSmell", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ElementsAreOnlyAddedToTheCollectionButNeverUsed", "4")]
[RegisterConfigurableSeverityAttribute("MemberCanBePrivate.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "MemberCanBeMadePrivate", "BestPractice", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "MemberCanBeMadePrivate15", "3")]
[RegisterConfigurableSeverityAttribute("MemberCanBePrivate.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "MemberCanBeMadePrivate", "BestPractice", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "MemberCanBeMadePrivate15", "3")]
[RegisterConfigurableSeverityAttribute("MemberCanBeProtected.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "MemberCanBeMadeProtected", "BestPractice", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "MemberCanBeMadeProtected16", "3")]
[RegisterConfigurableSeverityAttribute("MemberCanBeProtected.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "MemberCanBeMadeProtected", "BestPractice", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "MemberCanBeMadeProtected16", "3")]
[RegisterConfigurableSeverityAttribute("MemberCanBeInternal", "", "", "", "BestPractice", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "MemberOrTypeCanBeMadeInternalFriend", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "MemberOrTypeCanBeMadeInternalFriend", "0")]
[RegisterConfigurableSeverityAttribute("MemberCanBeFileLocal", "", "", "", "BestPractice", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "TypeCanBeMadeFileLocal", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "TypeCanBeMadeFileLocal", "0")]
[RegisterConfigurableSeverityAttribute("MemberCanBeMadeStatic.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "MemberCanBeMadeStaticShared", "BestPractice", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ANonVirtualInstanceMemberDoesNotUsethisObjectNeitherImplicitlyNorExplicitlyAndCanBeMadeStaticShared", "2")]
[RegisterConfigurableSeverityAttribute("MemberCanBeMadeStatic.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "MemberCanBeMadeStaticShared", "BestPractice", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ANonVirtualInstanceMemberDoesNotUsethisObjectNeitherImplicitlyNorExplicitlyAndCanBeMadeStaticShared", "2")]
[RegisterConfigurableSeverityAttribute("LocalFunctionCanBeMadeStatic", "", "", "", "BestPractice", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "LocalFunctionCanBeMadeStatic", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ALocalFunctionDoesNotUsethisObjectNeitherImplicitlyNorExplicitlyOrOutsideLocalVariablesAndCanBeMadeStatic", "0")]
[RegisterConfigurableSeverityAttribute("ClassCanBeSealed.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ClassCanBeMadeSealedNonInheritable", "BestPractice", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ClassHasNoInheritorsAndCanBeMarkedSealedNonInheritable", "0")]
[RegisterConfigurableSeverityAttribute("ClassCanBeSealed.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ClassCanBeMadeSealedNonInheritable", "BestPractice", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ClassHasNoInheritorsAndCanBeMarkedSealedNonInheritable", "0")]
[RegisterConfigurableSeverityAttribute("FieldCanBeMadeReadOnly.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "FieldCanBeMadeReadonly", "BestPractice", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "FieldHasNoWriteUsagesAfterInitializationAndCanBeMadeReadonly", "3")]
[RegisterConfigurableSeverityAttribute("FieldCanBeMadeReadOnly.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "FieldCanBeMadeReadonly", "BestPractice", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "FieldHasNoWriteUsagesAfterInitializationAndCanBeMadeReadonly", "3")]
[RegisterConfigurableSeverityAttribute("StructMemberCanBeMadeReadOnly", "", "", "", "BestPractice", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "StructMemberCanBeMadeReadonly", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "StructMemberHasNoMutableAccessTothisAndCanBeMadeReadonly", "0")]
[RegisterConfigurableSeverityAttribute("StructCanBeMadeReadOnly", "", "", "", "BestPractice", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "StructCanBeMadeReadonly", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "StructHasNoMutableMembersAndCanBeMadeReadonly", "3")]
[RegisterConfigurableSeverityAttribute("AutoPropertyCanBeMadeGetOnly.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "AutoPropertyCanBeMadeGetOnly", "BestPractice", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "AutoPropertyHasNoWriteUsagesAfterInitializationAndCanBeMadeGetOnly", "3")]
[RegisterConfigurableSeverityAttribute("AutoPropertyCanBeMadeGetOnly.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "AutoPropertyCanBeMadeGetOnly", "BestPractice", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "AutoPropertyHasNoWriteUsagesAfterInitializationAndCanBeMadeGetOnly", "3")]
[RegisterConfigurableSeverityAttribute("PropertyCanBeMadeInitOnly.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "PropertyCanBeMadeInitOnly", "BestPractice", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "PropertySetterCanBeReplacesWithinitAccessorToEnforcePropertyImmutability", "3")]
[RegisterConfigurableSeverityAttribute("PropertyCanBeMadeInitOnly.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "PropertyCanBeMadeInitOnly", "BestPractice", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "PropertySetterCanBeReplacesWithinitAccessorToEnforcePropertyImmutability", "3")]
[RegisterConfigurableSeverityAttribute("UnassignedGetOnlyAutoProperty", "", "", "", "BestPractice", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "GetOnlyAutoPropertyIsNeverAssigned", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "AutoPropertyWithoutSetterHasNoInitializerOrNeverAssignedInConstructor", "4")]
[RegisterConfigurableSeverityAttribute("ConvertToConstant.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ConvertLocalVariableOrFieldToConstant", "BestPractice", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ConvertLocalVariableOrFieldToConstant18", "2")]
[RegisterConfigurableSeverityAttribute("ConvertToConstant.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ConvertLocalVariableOrFieldToConstant", "BestPractice", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ConvertLocalVariableOrFieldToConstant18", "2")]
[RegisterConfigurableSeverityAttribute("SuggestBaseTypeForParameter", "", "", "", "BestPractice", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ParameterCanBeDeclaredWithBaseType", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ParameterCanBeDeclaredWithBaseTypeNoteThatWhenTheBaseTypeIsIEnumerableTAnotherInspectionParameterTypeCanBeIEnumerableTWillBeApplied", "0")]
[RegisterConfigurableSeverityAttribute("SuggestBaseTypeForParameterInConstructor", "", "", "", "BestPractice", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ConstructorParameterCanBeDeclaredWithBaseType", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ParameterCanBeDeclaredWithBaseTypeNoteThatWhenTheBaseTypeIsIEnumerableTAnotherInspectionParameterTypeCanBeIEnumerableTWillBeApplied", "0")]
[RegisterConfigurableSeverityAttribute("ParameterTypeCanBeEnumerable.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ParameterTypeCanBeIEnumerableT", "BestPractice", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ParameterCanBeDeclaredWithIEnumerableTTypeWhileItsDeclaredWithMoreSpecificTypeEGListT", "0")]
[RegisterConfigurableSeverityAttribute("ParameterTypeCanBeEnumerable.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ParameterTypeCanBeIEnumerableT", "BestPractice", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ParameterCanBeDeclaredWithIEnumerableTTypeWhileItsDeclaredWithMoreSpecificTypeEGListT", "0")]
[RegisterConfigurableSeverityAttribute("ReturnTypeCanBeEnumerable.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ReturnTypeCanBeIEnumerableT", "BestPractice", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "AllUsagesOfAMethodOrReadOnlyPropertyIndexerUseReturnedValueAsIEnumerableTWhileItsDeclaredWithMoreSpecificTypeEGListT", "0")]
[RegisterConfigurableSeverityAttribute("ReturnTypeCanBeEnumerable.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ReturnTypeCanBeIEnumerableT", "BestPractice", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "AllUsagesOfAMethodOrReadOnlyPropertyIndexerUseReturnedValueAsIEnumerableTWhileItsDeclaredWithMoreSpecificTypeEGListT", "0")]
[RegisterConfigurableSeverityAttribute("DefaultStructEqualityIsUsed.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "DefaultEqualityOfStructIsUsedTitle", "BestPractice", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "DefaultEqualityOfStructIsUsedDescription", "4")]
[RegisterConfigurableSeverityAttribute("DefaultStructEqualityIsUsed.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "DefaultEqualityOfStructIsUsedTitle", "BestPractice", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "DefaultEqualityOfStructIsUsedDescription", "4")]
[RegisterConfigurableSeverityAttribute("StructLacksIEquatable.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "StructLacksIEquatableImplementationTitle", "BestPractice", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "StructLacksIEquatableImplementationDescription", "4")]
[RegisterConfigurableSeverityAttribute("StructLacksIEquatable.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "StructLacksIEquatableImplementationTitle", "BestPractice", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "StructLacksIEquatableImplementationDescription", "4")]
[RegisterConfigurableSeverityAttribute("TypeWithSuspiciousEqualityIsUsedInRecord.Local", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "TypeWithSuspiciousEqualityIsUsedInRecordTitle", "BestPractice", "Private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "TypeWithSuspiciousEqualityIsUsedInRecordDescription", "4")]
[RegisterConfigurableSeverityAttribute("TypeWithSuspiciousEqualityIsUsedInRecord.Global", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "TypeWithSuspiciousEqualityIsUsedInRecordTitle", "BestPractice", "Non-private accessibility", "", "", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "TypeWithSuspiciousEqualityIsUsedInRecordDescription", "4")]
[RegisterConfigurableSeverityAttribute("UnusedVariable.Compiler", "", "", "", "CompilerWarnings", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "UnusedLocalVariable", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "LocalVariableIsNeverUsedCompilerWarning", "4")]
[RegisterConfigurableSeverityAttribute("NotAccessedVariable.Compiler", "", "", "", "CompilerWarnings", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "NonAccessedLocalVariable", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "LocalVariableIsAssignedButItsValueIsNeverUsedCompilerWarning", "4")]
[RegisterConfigurableSeverityAttribute("UnassignedReadonlyField.Compiler", "", "", "", "CompilerWarnings", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "UnassignedReadonlyField", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "ReadonlyFieldIsNeverAssignedCompilerWarning", "4")]
[RegisterConfigurableSeverityAttribute("UnusedField.Compiler", "", "", "", "CompilerWarnings", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "FieldIsNeverUsed", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "FieldIsNeverUsedCompilerWarning", "4")]
[RegisterConfigurableSeverityAttribute("UnassignedField.Compiler", "", "", "", "CompilerWarnings", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "UnassignedField", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "FieldIsNeverAssignedCompilerWarning", "4")]
[RegisterConfigurableSeverityAttribute("NotAccessedField.Compiler", "", "", "", "CompilerWarnings", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "NonAccessedField", "", "JetBrains.ReSharper.Daemon.Resources.Strings", "FieldIsAssignedButItsValueIsNeverUsedCompilerWarning", "4")]
public class JetBrains.ReSharper.Daemon.UsageChecking.RegisterSeverityComponentD6E9FE72D60329099880360048DB8D45BF1FD203180E2D3B1415E1972FD7E05B : object {
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.UsageChecking.Reporter : object {
    [NotNullAttribute]
private FileDependency myFileDependency;
    [NotNullAttribute]
private IHighlightingConsumer myConsumer;
    [NotNullAttribute]
private DeclarationInfoCache myCache;
    [NotNullAttribute]
private HighlightingFactory myFactory;
    private UsageCheckScope myScope;
    public Reporter(FileDependency fileDependency, IHighlightingConsumer consumer, UsageCheckScope scope, DeclarationInfoCache cache);
    [ContractAnnotationAttribute("null => false")]
public bool ShouldReportForDeclaration(IDeclaration declaration);
    private bool ShouldReportForModule(IClrDeclaredElement element);
    public static bool IsInternal(IClrDeclaredElement element);
    public void AddHighlighting(IHighlighting highlighting);
    public void AddHighlighting(IHighlighting highlighting, DocumentRange documentRange);
    public void ReportUnusedTypeMember(IDeclarationInfo declarationInfo, bool hasUsagesInsideDeclaration);
    public void ReportUnusedAutoPropertyAccessor(IDeclarationInfo declarationInfo);
    public void ReportNotAccessedPositionalProperty(IDeclarationInfo declarationInfo, IProperty positionalProperty, bool parameterHasUsages);
    public void ReportDefaultStructEqualityIsUsed(IDeclarationInfo declarationInfo, ITypeElement typeElement, DocumentRange range, IDeclaration preferredStructDeclaration);
    public void ReportStructLacksIEquatable(IDeclaration declaration, IStruct typeElement);
    public void ReportTypeWithSuspiciousEqualityIsUsedInRecord(IDeclarationInfo declarationInfo, DocumentRange range);
    public void ReportUnusedMemberInBase(IDeclarationInfo declarationInfo);
    public void ReportUnusedMemberInInterface(IDeclarationInfo declarationInfo);
    public void ReportMemberOnlyUsedInBaseCalls(IDeclarationInfo declarationInfo);
    public void ReportUnusedMethodReturnValue(IDeclarationInfo declarationInfo);
    public void ReportConvertToConstantSuggestion(IDeclarationInfo declarationInfo);
    public void ReportFieldCanBeMadeReadOnly(IDeclarationInfo declarationInfo);
    public void ReportAutoPropertyCanBeMadeGetOnly(IDeclarationInfo declarationInfo);
    public void ReportPropertyCanBeMadeInitOnly(IDeclarationInfo declarationInfo);
    public void ReportUnaccessedField(IDeclarationInfo declarationInfo, bool isCompiler);
    public void ReportUnassignedField(IDeclarationInfo declarationInfo, bool isCompiler);
    public void ReportUnusedField(IDeclarationInfo declarationInfo, bool isCompiler);
    public void ReportEventNeverInvoked(IDeclarationInfo declarationInfo);
    public void ReportInterfaceEventNeverInvoked(IDeclarationInfo declarationInfo);
    public void ReportVirtualEventNeverInvoked(IDeclarationInfo declarationInfo);
    public void ReportClassNeverInstantiated(IDeclarationInfo declarationInfo, bool canBeMadeStatic);
    public void ReportUnusedParameter(IDeclarationInfo declarationInfo);
    public void UnusedPositionalParameterCompiler(IDeclarationInfo declarationInfo);
    public void NotAccessedPrimaryConstructorParameterCompiler(IDeclarationInfo declarationInfo);
    public void ReportEntityNameCapturedOny(IDeclarationInfo declarationInfo);
    public void ReportUnusedParameterInPartialMethod(IDeclarationInfo declarationInfo);
    public void ReportUnusedVirtualMemberParameter(IDeclarationInfo declarationInfo);
    public void ReportUnusedAbstractMemberParameter(IDeclarationInfo declarationInfo);
    public void ReportParameterOnlyPassedToSelf(IDeclarationInfo declarationInfo);
    public void ReportParameterOnlyAssigned(IDeclarationInfo declarationInfo);
    public void ReportParameterOnlyUsedForPreconditionCheck(IDeclarationInfo declarationInfo);
    public void ReportParameterOnlyPassedToSelfAndUsedForPreconditionCheck(IDeclarationInfo declarationInfo);
    public void ReportOutParameterValueIsNeverUsed(IDeclarationInfo declarationInfo);
    public void ReportEventNeverSubscribedTo(IDeclarationInfo declarationInfo);
    public void ReportEventNeverSubscribedToInBase(IDeclarationInfo declarationInfo);
    public void ReportEventNeverSubscribedToInInterface(IDeclarationInfo declarationInfo);
    public void ReportMemberCanBeMadeStatic(IDeclarationInfo declarationInfo);
    public void ReportClassCanBeSealed(IDeclarationInfo declarationInfo);
    public void ReportClassWithVirtualMembersNeverInherited(IDeclarationInfo declarationInfo);
    public void ReportVirtualMemberNeverOverridden(IDeclarationInfo declarationInfo);
    public void ReportParameterTypeCanBeEnumerable(IDeclarationInfo declarationInfo, IType suggestedType);
    public void ReportReturnTypeCanBeEnumerable(IDeclarationInfo declarationInfo, IType suggestedType);
    public void ReportPropertyTypeCanBeEnumerable(IDeclarationInfo declarationInfo, IType suggestedType);
    public void ReportCanBePrivate(IDeclarationInfo declarationInfo);
    public void ReportCanBeProtected(IDeclarationInfo declarationInfo);
    public void ReportCanBeInternal(IDeclarationInfo declarationInfo);
    public void ReportCanBeFileLocal(IDeclarationInfo declarationInfo);
    public void ReportUnassignedReadonlyField(IDeclarationInfo declarationInfo, bool isCompiler);
    public void ReportUnassignedGetOnlyAutoProperty(IDeclarationInfo declarationInfo);
    public void ReportSuggestBaseTypeForParameter(IDeclarationInfo declarationInfo, IType suggestedType);
    public void ReportCollectionNeverUpdated(IDeclarationInfo declarationInfo);
    public void ReportCollectionNeverQueried(IDeclarationInfo declarationInfo);
}
[ConfigurableSeverityHighlightingAttribute("ReturnTypeCanBeEnumerable.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.ReturnTypeCanBeEnumerableGlobalWarning : ReturnTypeCanBeEnumerableWarningBase {
    public static string HIGHLIGHTING_ID;
    public ReturnTypeCanBeEnumerableGlobalWarning(IDeclaration declaration, IType suggestedType);
}
[ConfigurableSeverityHighlightingAttribute("ReturnTypeCanBeEnumerable.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.ReturnTypeCanBeEnumerableLocalWarning : ReturnTypeCanBeEnumerableWarningBase {
    public static string HIGHLIGHTING_ID;
    public ReturnTypeCanBeEnumerableLocalWarning(IDeclaration declaration, IType suggestedType);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.ReturnTypeCanBeEnumerableWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private IType <SuggestedType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IDeclaration Declaration { get; }
    public IType SuggestedType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ReturnTypeCanBeEnumerableWarningBase(IDeclaration declaration, IType suggestedType);
    [NotNullAttribute]
[PureAttribute]
public static ReturnTypeCanBeEnumerableWarningBase Create(IDeclaration declaration, IType suggestedType, bool isGlobal);
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public IType get_SuggestedType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Daemon.UsageChecking.ScopeProcessor : object {
    private static ILogger ourLogger;
    [NullableAttribute("2")]
private IScopeProcessor myParent;
    [CompilerGeneratedAttribute]
private UsageAnalyzer <UsageAnalyzer>k__BackingField;
    [CompilerGeneratedAttribute]
private IUsageFilter <UsageFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private UsageData <UsageData>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITypeMember <CurrentMember>k__BackingField;
    [CompilerGeneratedAttribute]
private SharedUsageData <SharedUsageData>k__BackingField;
    [CompilerGeneratedAttribute]
private IgnoreWarningsRegionsInfo <RegionsInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IDaemonProcess <DaemonProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<UsageData> <IntermediateUsageData>k__BackingField;
    public UsageAnalyzer UsageAnalyzer { get; }
    public IUsageFilter UsageFilter { get; }
    public UsageData UsageData { get; }
    [NullableAttribute("2")]
public ITypeMember CurrentMember { get; }
    public SharedUsageData SharedUsageData { get; }
    public IgnoreWarningsRegionsInfo RegionsInfo { get; }
    public IDaemonProcess DaemonProcess { get; }
    public List`1<UsageData> IntermediateUsageData { get; }
    private bool JetBrains.ReSharper.Psi.IRecursiveElementProcessor.ProcessingIsFinished { get; }
    public ScopeProcessor(IScopeProcessor parent, CollectUsagesStageProcess owner, UsageAnalyzer usageAnalyzer, UsageData usageData, IUsageFilter usageFilter, ITypeMember currentMember, IgnoreWarningsRegionsInfo regionsInfo);
    private static ScopeProcessor();
    public sealed virtual void ProcessElement(ITreeNode element);
    [CompilerGeneratedAttribute]
public sealed virtual UsageAnalyzer get_UsageAnalyzer();
    [CompilerGeneratedAttribute]
public sealed virtual IUsageFilter get_UsageFilter();
    [CompilerGeneratedAttribute]
public sealed virtual UsageData get_UsageData();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual ITypeMember get_CurrentMember();
    [CompilerGeneratedAttribute]
public sealed virtual SharedUsageData get_SharedUsageData();
    [CompilerGeneratedAttribute]
public sealed virtual IgnoreWarningsRegionsInfo get_RegionsInfo();
    [CompilerGeneratedAttribute]
public sealed virtual IDaemonProcess get_DaemonProcess();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<UsageData> get_IntermediateUsageData();
    public sealed virtual void AddIntermediateUsageData(UsageData data);
    private sealed virtual override bool JetBrains.ReSharper.Psi.IRecursiveElementProcessor.InteriorShouldBeProcessed(ITreeNode element);
    private sealed virtual override bool JetBrains.ReSharper.Psi.IRecursiveElementProcessor.get_ProcessingIsFinished();
    public virtual void ProcessBeforeInterior(ITreeNode element);
    public virtual void ProcessAfterInterior(ITreeNode element);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
public class JetBrains.ReSharper.Daemon.UsageChecking.ScopeProcessorFactory : object {
    [NullableContextAttribute("1")]
public virtual IScopeProcessor CreateScopeProcessor(IScopeProcessor parent, CollectUsagesStageProcess collectUsagesStageProcess, UsageAnalyzer usageAnalyzer, UsageData outsideMembersData, IUsageFilter usageFilter, ITypeMember currentMember, IgnoreWarningsRegionsInfo regionsInfo);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.UsageChecking.SolutionWideInspectionsProjectProperty : object {
    private Dictionary`2<IProject, SolutionWideInspectionsLevel> myProjectExcludedFromAnalysis;
    private ProjectSettingsStorageComponent myProjectSettingsStorage;
    public SolutionWideInspectionsProjectProperty(Lifetime lifetime, ISettingsStore settingsStore, ProjectSettingsStorageComponent projectSettingsStorage, IProjectModelBatchChangeManager projectModelBatchChangeManager, IShellLocks locks);
    public void SetValue(IProject project, SolutionWideInspectionsLevel value);
    public SolutionWideInspectionsLevel GetValue(IProject project);
    public static SolutionWideInspectionsLevel GetPropertyValue(IProject project);
    public static void SetPropertyValue(IProject project, SolutionWideInspectionsLevel value);
}
[ProjectSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.Daemon.UsageChecking.SolutionWideInspectionsProjectPropertyUpgrader : object {
    public sealed virtual void Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.Daemon.UsageChecking.SpecialMembersUtil : object {
    private static IClrTypeName ourOnDeserializedAttributeName;
    private static IClrTypeName ourOnDeserializingAttributeName;
    private static IClrTypeName ourOnSerializedAttributeName;
    private static IClrTypeName ourOnSerializingAttributeName;
    private static IClrTypeName ourSerializationAttributeName;
    private static IClrTypeName ourISerializableName;
    private static IClrTypeName ourSerializationInfoName;
    private static IClrTypeName ourStreamingContextName;
    private static SpecialMembersUtil();
    [ExtensionAttribute]
public static bool IsSerializationConstructor(IConstructor constructor, Boolean& canBePrivate);
    private static bool CheckCLRName(IExpressionType type, IClrTypeName name);
    [ExtensionAttribute]
public static bool IsSerializationMethod(IMethod method);
}
[ConfigurableSeverityHighlightingAttribute("StructCanBeMadeReadOnly", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.StructCanBeMadeReadOnlyWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITypeDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private IStruct <StructType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITypeDeclaration Declaration { get; }
    public IStruct StructType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public StructCanBeMadeReadOnlyWarning(ITypeDeclaration declaration, IStruct structType);
    [CompilerGeneratedAttribute]
public ITypeDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public IStruct get_StructType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("StructLacksIEquatable.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.StructLacksIEquatableGlobalWarning : StructLacksIEquatableWarningBase {
    public static string HIGHLIGHTING_ID;
    public StructLacksIEquatableGlobalWarning(IStruct typeElement, IDeclaration declaration);
}
[ConfigurableSeverityHighlightingAttribute("StructLacksIEquatable.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.StructLacksIEquatableLocalWarning : StructLacksIEquatableWarningBase {
    public static string HIGHLIGHTING_ID;
    public StructLacksIEquatableLocalWarning(IStruct typeElement, IDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.StructLacksIEquatableWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IStruct <TypeElement>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    public IStruct TypeElement { get; }
    public IDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public StructLacksIEquatableWarningBase(IStruct typeElement, IDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public static StructLacksIEquatableWarningBase Create(IStruct typeElement, IDeclaration declaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public IStruct get_TypeElement();
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("StructMemberCanBeMadeReadOnly", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.StructMemberCanBeMadeReadOnlyWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeMember <TypeMember>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IDeclaration Declaration { get; }
    public ITypeMember TypeMember { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public StructMemberCanBeMadeReadOnlyWarning(IDeclaration declaration, ITypeMember typeMember);
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public ITypeMember get_TypeMember();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.Daemon.HighlightingSettings", "SuggestBaseTypeForParameter inspection settings")]
public class JetBrains.ReSharper.Daemon.UsageChecking.SuggestBaseTypeForParameterSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Daemon.Resources.Strings", "SuggestBaseTypeForParameter_AvoidMemberVirtualizationTitle")]
public bool SuggestBaseTypeForParameter_AvoidMemberVirtualization;
}
public static class JetBrains.ReSharper.Daemon.UsageChecking.SuppressUsageInspectionsUtil : object {
    public static bool ShouldSuppressUsageInspections(IDeclaredElement element, IList`1<IUsageInspectionsSuppressor> suppressors, ImplicitUseKindFlags& flags);
}
[ConfigurableSeverityHighlightingAttribute("SuspiciousTypeConversion.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.SuspiciousCastWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <Range>k__BackingField;
    [CompilerGeneratedAttribute]
private IExpressionType <ExpressionType>k__BackingField;
    [CompilerGeneratedAttribute]
private IType <CastType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IExpression Expression { get; }
    public DocumentRange Range { get; }
    public IExpressionType ExpressionType { get; }
    public IType CastType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public SuspiciousCastWarning(IExpression expression, DocumentRange range, IExpressionType expressionType, IType castType);
    [CompilerGeneratedAttribute]
public IExpression get_Expression();
    [CompilerGeneratedAttribute]
public DocumentRange get_Range();
    [CompilerGeneratedAttribute]
public IExpressionType get_ExpressionType();
    [CompilerGeneratedAttribute]
public IType get_CastType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("SuspiciousTypeConversion.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.SuspiciousComparisonWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <Range>k__BackingField;
    [CompilerGeneratedAttribute]
private IExpressionType <Type1>k__BackingField;
    [CompilerGeneratedAttribute]
private IExpressionType <Type2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IExpression Expression { get; }
    public DocumentRange Range { get; }
    public IExpressionType Type1 { get; }
    public IExpressionType Type2 { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public SuspiciousComparisonWarning(IExpression expression, DocumentRange range, IExpressionType type1, IExpressionType type2);
    [CompilerGeneratedAttribute]
public IExpression get_Expression();
    [CompilerGeneratedAttribute]
public DocumentRange get_Range();
    [CompilerGeneratedAttribute]
public IExpressionType get_Type1();
    [CompilerGeneratedAttribute]
public IExpressionType get_Type2();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("SuspiciousTypeConversion.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.SuspiciousTypeCheckWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITreeNode <TypeCheckNode>k__BackingField;
    [CompilerGeneratedAttribute]
private IExpressionType <ExpressionType>k__BackingField;
    [CompilerGeneratedAttribute]
private IType <CheckType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITreeNode TypeCheckNode { get; }
    public IExpressionType ExpressionType { get; }
    public IType CheckType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public SuspiciousTypeCheckWarning(ITreeNode typeCheckNode, IExpressionType expressionType, IType checkType);
    [CompilerGeneratedAttribute]
public ITreeNode get_TypeCheckNode();
    [CompilerGeneratedAttribute]
public IExpressionType get_ExpressionType();
    [CompilerGeneratedAttribute]
public IType get_CheckType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Daemon.UsageChecking.TypeElementIdInheritanceInfo : ValueType {
    public ElementId TypeElementId;
    public ElementId BaseTypeElementId;
    public TypeElementIdInheritanceInfo(ElementId typeElementId, ElementId baseTypeElementId);
    public void WriteTo(UnsafeWriter writer);
    public static TypeElementIdInheritanceInfo ReadFrom(UnsafeReader reader);
}
[ConfigurableSeverityHighlightingAttribute("TypeWithSuspiciousEqualityIsUsedInRecord.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.TypeWithSuspiciousEqualityIsUsedInRecordGlobalWarning : TypeWithSuspiciousEqualityIsUsedInRecordWarningBase {
    public static string HIGHLIGHTING_ID;
    public TypeWithSuspiciousEqualityIsUsedInRecordGlobalWarning(ITreeNode node);
}
[ConfigurableSeverityHighlightingAttribute("TypeWithSuspiciousEqualityIsUsedInRecord.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.TypeWithSuspiciousEqualityIsUsedInRecordLocalWarning : TypeWithSuspiciousEqualityIsUsedInRecordWarningBase {
    public static string HIGHLIGHTING_ID;
    public TypeWithSuspiciousEqualityIsUsedInRecordLocalWarning(ITreeNode node);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.TypeWithSuspiciousEqualityIsUsedInRecordWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private ITreeNode <Node>k__BackingField;
    public ITreeNode Node { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public TypeWithSuspiciousEqualityIsUsedInRecordWarningBase(ITreeNode node);
    [NotNullAttribute]
[PureAttribute]
public static TypeWithSuspiciousEqualityIsUsedInRecordWarningBase Create(ITreeNode node, bool isGlobal);
    [CompilerGeneratedAttribute]
public ITreeNode get_Node();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UnassignedField.Compiler", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnassignedFieldCompilerWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITypeMemberDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITypeMemberDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnassignedFieldCompilerWarning(ITypeMemberDeclaration declaration);
    [CompilerGeneratedAttribute]
public ITypeMemberDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UnassignedField.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnassignedFieldGlobalWarning : UnassignedFieldWarningBase {
    public static string HIGHLIGHTING_ID;
    public UnassignedFieldGlobalWarning(ITypeMemberDeclaration declaration);
}
[ConfigurableSeverityHighlightingAttribute("UnassignedField.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnassignedFieldLocalWarning : UnassignedFieldWarningBase {
    public static string HIGHLIGHTING_ID;
    public UnassignedFieldLocalWarning(ITypeMemberDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.UnassignedFieldWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private ITypeMemberDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    private IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.Declaration { get; }
    public ITypeMemberDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnassignedFieldWarningBase(ITypeMemberDeclaration declaration);
    private sealed virtual override IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.get_Declaration();
    [NotNullAttribute]
[PureAttribute]
public static UnassignedFieldWarningBase Create(ITypeMemberDeclaration declaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public ITypeMemberDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UnassignedGetOnlyAutoProperty", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnassignedGetOnlyAutoPropertyWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITypeMemberDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    private IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.Declaration { get; }
    public ITypeMemberDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnassignedGetOnlyAutoPropertyWarning(ITypeMemberDeclaration declaration);
    private sealed virtual override IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.get_Declaration();
    [CompilerGeneratedAttribute]
public ITypeMemberDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UnassignedReadonlyField.Compiler", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnassignedReadonlyFieldCompilerWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITypeMemberDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITypeMemberDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnassignedReadonlyFieldCompilerWarning(ITypeMemberDeclaration declaration);
    [CompilerGeneratedAttribute]
public ITypeMemberDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UnassignedReadonlyField", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnassignedReadonlyFieldWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITypeMemberDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITypeMemberDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnassignedReadonlyFieldWarning(ITypeMemberDeclaration declaration);
    [CompilerGeneratedAttribute]
public ITypeMemberDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UnusedParameter.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedAbstractMemberParameterGlobalWarning : UnusedAbstractMemberParameterWarningBase {
    public static string HIGHLIGHTING_ID;
    public UnusedAbstractMemberParameterGlobalWarning(IParameterDeclaration declaration);
}
[ConfigurableSeverityHighlightingAttribute("UnusedParameter.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedAbstractMemberParameterLocalWarning : UnusedAbstractMemberParameterWarningBase {
    public static string HIGHLIGHTING_ID;
    public UnusedAbstractMemberParameterLocalWarning(IParameterDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.UnusedAbstractMemberParameterWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IParameterDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    private IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.Declaration { get; }
    public IParameterDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnusedAbstractMemberParameterWarningBase(IParameterDeclaration declaration);
    private sealed virtual override IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.get_Declaration();
    [NotNullAttribute]
[PureAttribute]
public static UnusedAbstractMemberParameterWarningBase Create(IParameterDeclaration declaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public IParameterDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UnusedAutoPropertyAccessor.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedAutoPropertyAccessorGlobalWarning : UnusedAutoPropertyAccessorWarningBase {
    public static string HIGHLIGHTING_ID;
    public UnusedAutoPropertyAccessorGlobalWarning(IDeclaration declaration);
}
[ConfigurableSeverityHighlightingAttribute("UnusedAutoPropertyAccessor.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedAutoPropertyAccessorLocalWarning : UnusedAutoPropertyAccessorWarningBase {
    public static string HIGHLIGHTING_ID;
    public UnusedAutoPropertyAccessorLocalWarning(IDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.UnusedAutoPropertyAccessorWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <RichToolTip>k__BackingField;
    private IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.Declaration { get; }
    public IDeclaration Declaration { get; }
    public RichText RichToolTip { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnusedAutoPropertyAccessorWarningBase(IDeclaration declaration);
    private sealed virtual override IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.get_Declaration();
    [NotNullAttribute]
[PureAttribute]
public static UnusedAutoPropertyAccessorWarningBase Create(IDeclaration declaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public RichText get_RichToolTip();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual RichTextBlock TryGetTooltip(HighlighterTooltipKind where);
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UnusedField.Compiler", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedFieldCompilerWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITypeMemberDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITypeMemberDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnusedFieldCompilerWarning(ITypeMemberDeclaration declaration);
    [CompilerGeneratedAttribute]
public ITypeMemberDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UnusedMember.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedFieldGlobalWarning : UnusedFieldWarningBase {
    public static string HIGHLIGHTING_ID;
    public UnusedFieldGlobalWarning(ITypeMemberDeclaration declaration);
}
[ConfigurableSeverityHighlightingAttribute("UnusedMember.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedFieldLocalWarning : UnusedFieldWarningBase {
    public static string HIGHLIGHTING_ID;
    public UnusedFieldLocalWarning(ITypeMemberDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.UnusedFieldWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private ITypeMemberDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    private IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.Declaration { get; }
    public ITypeMemberDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnusedFieldWarningBase(ITypeMemberDeclaration declaration);
    private sealed virtual override IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.get_Declaration();
    [NotNullAttribute]
[PureAttribute]
public static UnusedFieldWarningBase Create(ITypeMemberDeclaration declaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public ITypeMemberDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DaemonStageAttribute("0")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedGlobalDeclarationStage : object {
    [CompilerGeneratedAttribute]
private SolutionAnalysisService <solutionAnalysisService>P;
    [CompilerGeneratedAttribute]
private UsageCheckingServiceManager <usageCheckingServiceManager>P;
    public UnusedGlobalDeclarationStage(SolutionAnalysisService solutionAnalysisService, UsageCheckingServiceManager usageCheckingServiceManager);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Daemon.UsageChecking.UnusedGlobalDeclarationStage/<CreateProcess>d__3")]
public sealed virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedGlobalDeclarationStageProcess : object {
    [CompilerGeneratedAttribute]
private PsiLanguageType <language>P;
    [CompilerGeneratedAttribute]
private UsageCheckingServiceManager <usageCheckingServiceManager>P;
    [CompilerGeneratedAttribute]
private SolutionAnalysisService <solutionAnalysisService>P;
    [CompilerGeneratedAttribute]
private IContextBoundSettingsStore <settingsStore>P;
    [CompilerGeneratedAttribute]
private IDaemonProcess <DaemonProcess>k__BackingField;
    public IDaemonProcess DaemonProcess { get; }
    public UnusedGlobalDeclarationStageProcess(IDaemonProcess process, PsiLanguageType language, UsageCheckingServiceManager usageCheckingServiceManager, SolutionAnalysisService solutionAnalysisService, IContextBoundSettingsStore settingsStore);
    [CompilerGeneratedAttribute]
public sealed virtual IDaemonProcess get_DaemonProcess();
    public sealed virtual void Execute(Action`1<DaemonStageResult> committer);
    private IReadOnlyList`1<HighlightingInfo> CollectHighlightingsForFile(IPsiSourceFile psiSourceFile, UsageCheckingServices usageCheckingServices, DeclarationInfoCache declarationInfoCache);
    private void ProcessDeclaration(IDeclarationInfo info, IUnusedDeclarationAnalyzer declarationAnalyzer);
}
[ConfigurableSeverityHighlightingAttribute("UnusedLabel", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedLabelWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnusedLabelWarning(IDeclaration declaration);
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    private sealed virtual override IHighlightingPointer JetBrains.ReSharper.Feature.Services.Daemon.ISupportsHighlightingPointer.TryCreatePointer();
    public sealed virtual bool IsValid();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedLocalDeclarationAnalyzer : object {
    private CollectUsagesStageProcess myCollectUsagesStage;
    private UsageCheckingServiceManager myUsageCheckingServiceManager;
    private HighlightingFactory myHighlightingFactory;
    public UnusedLocalDeclarationAnalyzer(CollectUsagesStageProcess collectUsagesStage, UsageCheckingServiceManager usageCheckingServiceManager, HighlightingFactory highlightingFactory);
    public virtual void ProcessDeclaration(IDeclaration declaration, IDeclaredElement declaredElement, IHighlightingConsumer consumer);
    protected virtual bool ShouldReportLocalUsageIssue(ITreeNode context);
    private void ProcessLocalVariable(ILocalVariable local, IDeclaration declaration, IHighlightingConsumer consumer);
    protected virtual bool TryReportMoreSpecificNotAccessedVariableWarning(ILocalVariable localVariable, VariableUsageState variableUsageState, IHighlightingConsumer consumer);
    [PureAttribute]
protected virtual bool NotAccessedVariableIsFine(ILocalVariable localVariable, VariableUsageState variableUsageState);
    private static bool IsDummyUnusedVariableName(string shortName);
    private void ProcessLabel(ILabel label, IDeclaration declaration, IHighlightingConsumer consumer);
    protected virtual void ProcessTypeParameter(ITypeParameter typeParameter, IDeclaration typeParameterDeclaration, IHighlightingConsumer consumer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DaemonStageAttribute("16")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedLocalDeclarationStage : object {
    [CompilerGeneratedAttribute]
private UsageCheckingServiceManager <usageCheckingServiceManager>P;
    public UnusedLocalDeclarationStage(UsageCheckingServiceManager usageCheckingServiceManager);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Daemon.UsageChecking.UnusedLocalDeclarationStage/<CreateProcess>d__2")]
public sealed virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
    private bool IsSupported(IPsiSourceFile sourceFile);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedLocalDeclarationStageProcess : object {
    [CompilerGeneratedAttribute]
private IDaemonProcess <process>P;
    [CompilerGeneratedAttribute]
private CollectUsagesStageProcess <collectUsagesStageProcess>P;
    [CompilerGeneratedAttribute]
private UsageCheckingServiceManager <usageCheckingServiceManager>P;
    [CompilerGeneratedAttribute]
private IContextBoundSettingsStore <settingsStore>P;
    [NullableAttribute("2")]
private UsageCheckingServices myUsageCheckingServices;
    [NullableAttribute("2")]
private IUnusedDeclarationAnalyzer myDeclarationAnalyzer;
    [NullableAttribute("2")]
private IUnusedLocalDeclarationAnalyzer myUnusedLocalDeclarationAnalyzer;
    public IDaemonProcess DaemonProcess { get; }
    public UnusedLocalDeclarationStageProcess(IDaemonProcess process, CollectUsagesStageProcess collectUsagesStageProcess, UsageCheckingServiceManager usageCheckingServiceManager, IContextBoundSettingsStore settingsStore);
    public sealed virtual IDaemonProcess get_DaemonProcess();
    public sealed virtual void Execute(Action`1<DaemonStageResult> committer);
    public sealed virtual bool InteriorShouldBeProcessed(ITreeNode element, IHighlightingConsumer context);
    public sealed virtual bool IsProcessingFinished(IHighlightingConsumer context);
    public sealed virtual void ProcessBeforeInterior(ITreeNode element, IHighlightingConsumer consumer);
    public sealed virtual void ProcessAfterInterior(ITreeNode element, IHighlightingConsumer consumer);
}
[ConfigurableSeverityHighlightingAttribute("UnusedLocalFunction.Compiler", "CSHARP")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedLocalFunctionCompilerWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <RichToolTip>k__BackingField;
    public IDeclaration Declaration { get; }
    public RichText RichToolTip { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnusedLocalFunctionCompilerWarning(IDeclaration declaration);
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public RichText get_RichToolTip();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual RichTextBlock TryGetTooltip(HighlighterTooltipKind where);
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UnusedLocalFunctionReturnValue", "CSHARP")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedLocalFunctionReturnValueWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <RichToolTip>k__BackingField;
    public IDeclaration Declaration { get; }
    public RichText RichToolTip { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnusedLocalFunctionReturnValueWarning(IDeclaration declaration);
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public RichText get_RichToolTip();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual RichTextBlock TryGetTooltip(HighlighterTooltipKind where);
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UnusedLocalFunction", "CSHARP")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedLocalFunctionWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <RichToolTip>k__BackingField;
    public IDeclaration Declaration { get; }
    public RichText RichToolTip { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnusedLocalFunctionWarning(IDeclaration declaration);
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public RichText get_RichToolTip();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual RichTextBlock TryGetTooltip(HighlighterTooltipKind where);
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UnusedMember.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedMemberGlobalWarning : UnusedMemberWarningBase {
    public static string HIGHLIGHTING_ID;
    public UnusedMemberGlobalWarning(IDeclaration declaration, bool usedInsideDeclaration);
}
[ConfigurableSeverityHighlightingAttribute("UnusedMemberInSuper.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedMemberInBaseGlobalWarning : UnusedMemberInBaseWarningBase {
    public static string HIGHLIGHTING_ID;
    public UnusedMemberInBaseGlobalWarning(IDeclaration declaration);
}
[ConfigurableSeverityHighlightingAttribute("UnusedMemberInSuper.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedMemberInBaseLocalWarning : UnusedMemberInBaseWarningBase {
    public static string HIGHLIGHTING_ID;
    public UnusedMemberInBaseLocalWarning(IDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.UnusedMemberInBaseWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    private IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.Declaration { get; }
    public IDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnusedMemberInBaseWarningBase(IDeclaration declaration);
    private sealed virtual override IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.get_Declaration();
    [NotNullAttribute]
[PureAttribute]
public static UnusedMemberInBaseWarningBase Create(IDeclaration declaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UnusedMemberInSuper.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedMemberInInterfaceGlobalWarning : UnusedMemberInInterfaceWarningBase {
    public static string HIGHLIGHTING_ID;
    public UnusedMemberInInterfaceGlobalWarning(IDeclaration declaration);
}
[ConfigurableSeverityHighlightingAttribute("UnusedMemberInSuper.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedMemberInInterfaceLocalWarning : UnusedMemberInInterfaceWarningBase {
    public static string HIGHLIGHTING_ID;
    public UnusedMemberInInterfaceLocalWarning(IDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.UnusedMemberInInterfaceWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    private IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.Declaration { get; }
    public IDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnusedMemberInInterfaceWarningBase(IDeclaration declaration);
    private sealed virtual override IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.get_Declaration();
    [NotNullAttribute]
[PureAttribute]
public static UnusedMemberInInterfaceWarningBase Create(IDeclaration declaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UnusedMember.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedMemberLocalWarning : UnusedMemberWarningBase {
    public static string HIGHLIGHTING_ID;
    public UnusedMemberLocalWarning(IDeclaration declaration, bool usedInsideDeclaration);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.UnusedMemberWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsedInsideDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <RichToolTip>k__BackingField;
    private IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.Declaration { get; }
    public IDeclaration Declaration { get; }
    public bool UsedInsideDeclaration { get; }
    public RichText RichToolTip { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnusedMemberWarningBase(IDeclaration declaration, bool usedInsideDeclaration);
    private sealed virtual override IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.get_Declaration();
    [NotNullAttribute]
[PureAttribute]
public static UnusedMemberWarningBase Create(IDeclaration declaration, bool usedInsideDeclaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public bool get_UsedInsideDeclaration();
    [CompilerGeneratedAttribute]
public RichText get_RichToolTip();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual RichTextBlock TryGetTooltip(HighlighterTooltipKind where);
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UnusedMethodReturnValue.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedMethodReturnValueGlobalWarning : UnusedMethodReturnValueWarningBase {
    public static string HIGHLIGHTING_ID;
    public UnusedMethodReturnValueGlobalWarning(IFunctionDeclaration declaration, IMethod method);
}
[ConfigurableSeverityHighlightingAttribute("UnusedMethodReturnValue.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedMethodReturnValueLocalWarning : UnusedMethodReturnValueWarningBase {
    public static string HIGHLIGHTING_ID;
    public UnusedMethodReturnValueLocalWarning(IFunctionDeclaration declaration, IMethod method);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.UnusedMethodReturnValueWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IFunctionDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private IMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IFunctionDeclaration Declaration { get; }
    public IMethod Method { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnusedMethodReturnValueWarningBase(IFunctionDeclaration declaration, IMethod method);
    [NotNullAttribute]
[PureAttribute]
public static UnusedMethodReturnValueWarningBase Create(IFunctionDeclaration declaration, IMethod method, bool isGlobal);
    [CompilerGeneratedAttribute]
public IFunctionDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public IMethod get_Method();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UnusedParameter.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedParameterGlobalWarning : UnusedParameterWarningBase {
    public static string HIGHLIGHTING_ID;
    public UnusedParameterGlobalWarning(IParameterDeclaration declaration);
}
[ConfigurableSeverityHighlightingAttribute("UnusedParameterInPartialMethod", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedParameterInPartialMethodWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IParameterDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IParameterDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnusedParameterInPartialMethodWarning(IParameterDeclaration declaration);
    [CompilerGeneratedAttribute]
public IParameterDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UnusedParameter.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedParameterLocalWarning : UnusedParameterWarningBase {
    public static string HIGHLIGHTING_ID;
    public UnusedParameterLocalWarning(IParameterDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.UnusedParameterWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IParameterDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IParameterDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnusedParameterWarningBase(IParameterDeclaration declaration);
    [NotNullAttribute]
[PureAttribute]
public static UnusedParameterWarningBase Create(IParameterDeclaration declaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public IParameterDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UnusedPositionalParameterCompiler", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedPositionalParameterCompilerWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IParameterDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IParameterDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnusedPositionalParameterCompilerWarning(IParameterDeclaration declaration);
    [CompilerGeneratedAttribute]
public IParameterDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UnusedType.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedTypeGlobalWarning : UnusedTypeWarningBase {
    public static string HIGHLIGHTING_ID;
    public UnusedTypeGlobalWarning(IDeclaration declaration, bool usedInsideDeclaration);
}
[ConfigurableSeverityHighlightingAttribute("UnusedType.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedTypeLocalWarning : UnusedTypeWarningBase {
    public static string HIGHLIGHTING_ID;
    public UnusedTypeLocalWarning(IDeclaration declaration, bool usedInsideDeclaration);
}
[ConfigurableSeverityHighlightingAttribute("UnusedTypeParameter", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedTypeParameterWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <RichToolTip>k__BackingField;
    public IDeclaration Declaration { get; }
    public RichText RichToolTip { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnusedTypeParameterWarning(IDeclaration declaration);
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public RichText get_RichToolTip();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual RichTextBlock TryGetTooltip(HighlighterTooltipKind where);
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.UnusedTypeWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsedInsideDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <RichToolTip>k__BackingField;
    public IDeclaration Declaration { get; }
    public bool UsedInsideDeclaration { get; }
    public RichText RichToolTip { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnusedTypeWarningBase(IDeclaration declaration, bool usedInsideDeclaration);
    [NotNullAttribute]
[PureAttribute]
public static UnusedTypeWarningBase Create(IDeclaration declaration, bool usedInsideDeclaration, bool isGlobal);
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public bool get_UsedInsideDeclaration();
    [CompilerGeneratedAttribute]
public RichText get_RichToolTip();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual RichTextBlock TryGetTooltip(HighlighterTooltipKind where);
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UnusedVariable.Compiler", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedVariableCompilerWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <RichToolTip>k__BackingField;
    public IDeclaration Declaration { get; }
    public RichText RichToolTip { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnusedVariableCompilerWarning(IDeclaration declaration);
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public RichText get_RichToolTip();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual RichTextBlock TryGetTooltip(HighlighterTooltipKind where);
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UnusedVariable", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedVariableWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <RichToolTip>k__BackingField;
    public IDeclaration Declaration { get; }
    public RichText RichToolTip { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnusedVariableWarning(IDeclaration declaration);
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public RichText get_RichToolTip();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual RichTextBlock TryGetTooltip(HighlighterTooltipKind where);
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UnusedParameter.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedVirtualMemberParameterGlobalWarning : UnusedVirtualMemberParameterWarningBase {
    public static string HIGHLIGHTING_ID;
    public UnusedVirtualMemberParameterGlobalWarning(IParameterDeclaration declaration, IParametersOwner owner);
}
[ConfigurableSeverityHighlightingAttribute("UnusedParameter.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UnusedVirtualMemberParameterLocalWarning : UnusedVirtualMemberParameterWarningBase {
    public static string HIGHLIGHTING_ID;
    public UnusedVirtualMemberParameterLocalWarning(IParameterDeclaration declaration, IParametersOwner owner);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.UnusedVirtualMemberParameterWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IParameterDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private IParametersOwner <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    private IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.Declaration { get; }
    public IParameterDeclaration Declaration { get; }
    public IParametersOwner Owner { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnusedVirtualMemberParameterWarningBase(IParameterDeclaration declaration, IParametersOwner owner);
    private sealed virtual override IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.get_Declaration();
    [NotNullAttribute]
[PureAttribute]
public static UnusedVirtualMemberParameterWarningBase Create(IParameterDeclaration declaration, IParametersOwner owner, bool isGlobal);
    [CompilerGeneratedAttribute]
public IParameterDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public IParametersOwner get_Owner();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
public class JetBrains.ReSharper.Daemon.UsageChecking.UsageAnalyzer : object {
    [NotNullAttribute]
private List`1<IUsageInspectionsSuppressor> mySuppressors;
    [NotNullAttribute]
private List`1<ICustomUsageAnalysisProcessor> myCustomProcessors;
    [NotNullAttribute]
protected static Key ImplicitlyUsedCtorsKey;
    [NotNullAttribute]
private static Key ImplicitlyUsedCtorParametersKey;
    [NotNullAttribute]
private static ClrTypeName ourDependencyPropertyTypeName;
    private static UsageState ImplicitlyUsedCtorUsageState;
    public UsageAnalyzer(IEnumerable`1<IUsageInspectionsSuppressor> suppressors, IEnumerable`1<ICustomUsageAnalysisProcessor> customProcessors);
    private static UsageAnalyzer();
    [NotNullAttribute]
public IEnumerable`1<ITypeMemberDeclaration> MembersToRehighlight(IDaemonProcess daemonProcess);
    public virtual bool InteriorShouldBeProcessed(ITreeNode element, IParameters parameters);
    public virtual void ProcessElement(ITreeNode treeNode, IParameters parameters);
    protected virtual bool ShouldSkipUsageForCounter(IReference reference);
    protected virtual void ProcessUsage(IDeclaredElement element, ITreeNode node, IReference reference, IParameters parameters);
    private void ProcessSubstitutionUsage(IDeclaredElement element, ISubstitution substitution, IReference reference, IParameters parameters);
    protected virtual VariableUsageState GetVariableUsageState(IDeclaredElement variable, IReference reference, IParameters parameters);
    private void AnalyseParameterUsage(IParameter parameter, IExpression expression, IParameters parameters);
    protected void AnalyseReturnValueUsage(IClrDeclaredElement member, IType returnType, ITreeNode usageNode, IParameters parameters);
    [NotNullAttribute]
protected virtual ICollection`1<ITypeUsageConstraint> TypeConstraintsFromUsage(IDeclaredElement declaredElement, IType elementType, ITreeNode usageNode, IParameters parameters);
    protected virtual void ProcessMemberUsage(ITypeMember member, IReference reference, IParameters parameters);
    protected virtual void ProcessTypeElementUsage(ITypeElement typeElement, IReference reference, IParameters parameters);
    [PureAttribute]
protected virtual bool IsInstanceOnlyMemberReference(IReference reference, ITypeMember member);
    protected virtual ImplicitUseFlags GetImplicitUseFlagsByParameterUsage(ITreeNode typeOfExpression);
    protected void ProcessPropertyUsage(IProperty property, ITreeNode node, UsageState accessState, UsageState accessRightsState, bool isCallToBase, IParameters parameters);
    private void ProcessMethodUsage(IMethod method, ITreeNode node, IReference reference, bool isCallToBase, IParameters parameters);
    protected virtual void ProcessOutParametersOfParametersOwnerUsage(IParametersOwner parametersOwner, IReference reference, IParameters parameters);
    protected void ProcessAssignmentToDelegate(IClrDeclaredElement method, ITreeNode node, IReference reference, IParameters parameters);
    protected void ProcessReturnValueUsage(IClrDeclaredElement method, ITreeNode node, bool isCallToBase, IParameters parameters);
    protected virtual UsageState GetParameterUsageState(IParameter parameter, IReference reference, IParameters parameters);
    protected virtual UsageState GetAccessRightsUsageState(IReference reference, ITypeMember typeMember);
    protected virtual bool UpdateAccessRightsUsageState(IReference reference, ITypeMember typeMember, UsageState currentUsageState, UsageState& updatedState);
    protected virtual VariableUsageState GetExpressionAccessState(IExpression expression, IReference reference);
    private static void CollectExposingApi(IDeclaredElement element, UsageData usageData);
    private static void CollectExtensionMethod(IDeclaredElement element, UsageData usageData);
    protected virtual void ProcessDeclaration(IDeclaration declaration, IDeclaredElement element, IParameters parameters);
    protected bool ShouldSuppressUsageInspections(IDeclaredElement element, ImplicitUseKindFlags& useKindFlags);
    protected virtual void ProcessTypeElementDeclaration(ITypeElement typeElement, IDeclaration declaration, IParameters parameters);
    private static ValueTuple`2<bool, IConstructor> HasInstanceConstructorDeclarations(IClass classElement);
    protected virtual bool CanTypeDeclarationBeFileLocal(ITypeElement typeElement, IDeclaration declaration);
    protected static void ApplyImplicitUseKind(IDeclaredElement element, IParameters parameters, ImplicitUseFlags flags);
    private static void SetImplicitlyUsedTypeMembers(UsageData usageData, ITypeElement typeElement, DynamicallyAccessedMemberTypes dynamicallyAccessedMemberTypes);
    protected static void MarkDefaultBaseConstructorUsage(IClass classType, IParameters parameters);
    protected virtual bool CanMakeFieldReadonly(UsageState accessState, IReference reference, IField field);
    protected virtual bool CanMakeAutoPropertyGetOnly(UsageState accessState, IReference reference, IProperty property);
    protected virtual bool CanMakePropertyInitOnly(UsageState accessState, IReference reference, IProperty property);
    protected virtual bool IsCallToBase(IReference reference, IOverridableMember member);
    protected virtual Nullable`1<bool> IsInGeneratedCode(ITreeNode node, IRegionsInfo regionsInfo);
    protected virtual UsageState GetReturnValueUsageState(IExpression expression, bool isCallToBase);
    [CanBeNullAttribute]
protected virtual ITreeNode GetContainingTypeOfExpression(IReference reference);
    protected virtual bool IsTypeArgument(IReference reference, ImplicitUseFlags& implicitUseFlags);
    protected virtual bool IsAssignToDelegate(IReference reference);
    public virtual bool ShouldSkipUsage(IReference reference, IDeclaredElement declaredElement);
    protected bool IsReferenceInsideItself(ITreeNode node, ITypeMember targetMember, IParameters parameters);
    protected virtual void SetCannotBeStaticContext(IParameters parameters, IDeclaredElement culprit, bool isRecursiveReference);
    [CompilerGeneratedAttribute]
internal static void <CollectExposingApi>g__ProcessElem|26_0(IDeclaredElement elem, <>c__DisplayClass26_0& );
    [CompilerGeneratedAttribute]
internal static void <ApplyImplicitUseKind>g__AllContainingTypesAreUsedImplicitly|33_0(ITypeElement containingType, <>c__DisplayClass33_0& );
    [CompilerGeneratedAttribute]
internal static void <ApplyImplicitUseKind>g__ProcessImplicitlyUsedConstructors|33_1(ITypeElement typeElement, ImplicitUseFlags flags, IParameters parameters);
}
public static class JetBrains.ReSharper.Daemon.UsageChecking.UsageCheckingScopeUtil : object {
    private static String[] SYSTEM_COLLECTION_IMMUTABLE;
    private static String[] SYSTEM_COLLECTION_CONCURRENT;
    private static HashSet`1<IClrTypeName> ourForbiddenTargetTypes;
    private static UsageCheckingScopeUtil();
    [PureAttribute]
public static bool ShouldCheckTypeMember(IMemberInfo member, IUsageChecker checker, HashSet`1<DeclaredElementType> supportedMemberOwners);
    public static EffectiveAccessibility CalcEffectiveAccessibility(IMemberInfo member);
    [PureAttribute]
public static TypeMemberCheckResult CheckTypeMember(IMemberInfo member, IUsageChecker checker, HashSet`1<DeclaredElementType> supportedMemberOwners);
    public static bool ShouldSuggestMoreGeneralParameterType(IParameter parameter, IType suggestedType);
    public static bool ShouldSuggestMoreGeneralType(IParametersOwner owner, IType currentType, IType suggestedType);
    [PureAttribute]
private static bool IsTypeFromNamespace(ITypeElement typeElement, String[] namespaceNames);
}
[PsiSharedComponentAttribute]
public class JetBrains.ReSharper.Daemon.UsageChecking.UsageCheckingServiceManager : object {
    private Dictionary`2<PsiLanguageType, UsageCheckingServices> myServices;
    private UsageCheckingServices myGenericService;
    [NotNullAttribute]
public static UsageCheckingServiceManager Instance { get; }
    public UsageCheckingServiceManager(Lifetime lifetime, LanguageManager languageManager, ILanguages languages, IEnumerable`1<IUsageInspectionsSuppressor> suppressors, IEnumerable`1<ICustomUsageAnalysisProcessor> customProcessors);
    public static UsageCheckingServiceManager get_Instance();
    [NotNullAttribute]
public UsageCheckingServices GetService(PsiLanguageType language);
}
public class JetBrains.ReSharper.Daemon.UsageChecking.UsageCheckingServices : object {
    [CompilerGeneratedAttribute]
private UsageAnalyzer <UsageAnalyzer>k__BackingField;
    [CompilerGeneratedAttribute]
private IPresentationHelper <PresentationHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private ILanguageSpecificElementPropertiesCalculator <ElementPropertiesCalculator>k__BackingField;
    [NotNullAttribute]
public UsageAnalyzer UsageAnalyzer { get; }
    [NotNullAttribute]
public IList`1<DeclaredElementType> SupportedElementTypes { get; }
    public bool UseUnknownLanguageStage { get; }
    [CanBeNullAttribute]
public IPresentationHelper PresentationHelper { get; }
    [NotNullAttribute]
public ILanguageSpecificElementPropertiesCalculator ElementPropertiesCalculator { get; }
    [CanBeNullAttribute]
public IRedundantOverloadProcessor RedundantOverloadProcessor { get; }
    public UsageCheckingServices(IEnumerable`1<IUsageInspectionsSuppressor> suppressors, IEnumerable`1<ICustomUsageAnalysisProcessor> customProcessors);
    protected UsageCheckingServices(UsageAnalyzer usageAnalyzer, IPresentationHelper presentationHelper, ILanguageSpecificElementPropertiesCalculator elementPropertiesCalculator);
    [CompilerGeneratedAttribute]
public UsageAnalyzer get_UsageAnalyzer();
    public virtual bool GetUnusedDeclarationsSupported();
    protected virtual bool ShouldTakeTopLevelDeclaration(IDeclaration declaration);
    public virtual IEnumerable`1<IDeclaration> TopLevelDeclarations(IFile file);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Daemon.UsageChecking.UsageCheckingServices/<TopLevelDeclarations>d__8")]
private IEnumerable`1<IDeclaration> TopLevelDeclarations(ITreeNode node);
    [CanBeNullAttribute]
public virtual IUnusedDeclarationAnalyzer CreateUnusedDeclarationAnalyzer(IUsageChecker usageChecker, PsiLanguageType language, IHighlightingConsumer consumer, DeclarationInfoCache declarationInfoCache, UsageCheckingServiceManager usageCheckingServiceManager, IContextBoundSettingsStore settingsStore, IPsiSourceFile sourceFile);
    [CanBeNullAttribute]
[PureAttribute]
public virtual IUnusedLocalDeclarationAnalyzer CreateUnusedLocalDeclarationAnalyzer(CollectUsagesStageProcess collectUsagesStage, UsageCheckingServiceManager usageCheckingServiceManager, HighlightingFactory highlightingFactory);
    public virtual Nullable`1<ElementId> GetElementId(IDeclaredElement element, bool forceCreateForPrivateMembers);
    [CanBeNullAttribute]
public virtual IDeclarationInfo CreateWrapperDeclarationInfo(IDeclaration declaration, IDeclaredElement declaredElement);
    [CanBeNullAttribute]
public virtual IElementInfo CreateWrapperElementInfo(IDeclaredElement declaredElement, PsiLanguageType language);
    public virtual IList`1<DeclaredElementType> get_SupportedElementTypes();
    public virtual bool get_UseUnknownLanguageStage();
    [CompilerGeneratedAttribute]
public IPresentationHelper get_PresentationHelper();
    [CompilerGeneratedAttribute]
public ILanguageSpecificElementPropertiesCalculator get_ElementPropertiesCalculator();
    public virtual IRedundantOverloadProcessor get_RedundantOverloadProcessor();
    [PureAttribute]
public virtual bool HasImplicitPrivateAccessor(IDeclaration declaration, IDeclaredElement declaredElement);
    [PureAttribute]
[NotNullAttribute]
public virtual IEnumerable`1<IParameter> TryGetPrimaryParameters(ITypeElement typeElement);
    [PureAttribute]
[NotNullAttribute]
public virtual IEnumerable`1<ITypeMember> TryGetImplicitMembers(ITypeElement typeElement);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.ReSharper.Daemon.Resources.Strings", "UsageCheckingServiceSettingDescription")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UsageCheckingServicesSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Daemon.Resources.Strings", "CalculateElementIdForPrivateMembersSettingDescription")]
public bool CalculateElementIdForPrivateMembers;
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.UsageChecking.UsageCheckingServicesSettingsProvider : object {
    private static bool myCalculateElementIdForPrivateMembers;
    private IProperty`1<bool> calculateElementIdForPrivateMembers;
    public UsageCheckingServicesSettingsProvider(Lifetime lifetime, ISettingsStore store);
    public static bool IsPrivateElementIdEnabled();
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.UsageCounterBase : object {
    [CompilerGeneratedAttribute]
private int <CounterId>k__BackingField;
    public int CounterId { get; }
    protected UsageCounterBase(string name);
    protected UsageCounterBase(int id);
    [CompilerGeneratedAttribute]
public sealed virtual int get_CounterId();
}
[ConfigurableSeverityHighlightingAttribute("EventNeverInvoked.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.VirtualEventNeverInvokedWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITypeMemberDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    private IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.Declaration { get; }
    public ITypeMemberDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public VirtualEventNeverInvokedWarning(ITypeMemberDeclaration declaration);
    private sealed virtual override IDeclaration JetBrains.ReSharper.Daemon.UsageChecking.ICanBeSuppressedWithAnnotation.get_Declaration();
    [CompilerGeneratedAttribute]
public ITypeMemberDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("VirtualMemberNeverOverridden.Global", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.VirtualMemberNeverOverriddenGlobalWarning : VirtualMemberNeverOverriddenWarningBase {
    public static string HIGHLIGHTING_ID;
    public VirtualMemberNeverOverriddenGlobalWarning(ITypeMemberDeclaration declaration, ITypeMember member, DocumentRange documentRange);
}
[ConfigurableSeverityHighlightingAttribute("VirtualMemberNeverOverridden.Local", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.UsageChecking.VirtualMemberNeverOverriddenLocalWarning : VirtualMemberNeverOverriddenWarningBase {
    public static string HIGHLIGHTING_ID;
    public VirtualMemberNeverOverriddenLocalWarning(ITypeMemberDeclaration declaration, ITypeMember member, DocumentRange documentRange);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.VirtualMemberNeverOverriddenWarningBase : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private ITypeMemberDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeMember <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <DocumentRange>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <RichToolTip>k__BackingField;
    public ITypeMemberDeclaration Declaration { get; }
    public ITypeMember Member { get; }
    public DocumentRange DocumentRange { get; }
    public RichText RichToolTip { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public VirtualMemberNeverOverriddenWarningBase(ITypeMemberDeclaration declaration, ITypeMember member, DocumentRange documentRange);
    [NotNullAttribute]
[PureAttribute]
public static VirtualMemberNeverOverriddenWarningBase Create(ITypeMemberDeclaration declaration, ITypeMember member, DocumentRange documentRange, bool isGlobal);
    [CompilerGeneratedAttribute]
public ITypeMemberDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public ITypeMember get_Member();
    [CompilerGeneratedAttribute]
public DocumentRange get_DocumentRange();
    [CompilerGeneratedAttribute]
public RichText get_RichToolTip();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual RichTextBlock TryGetTooltip(HighlighterTooltipKind where);
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.WrapperDeclarationInfoBase : object {
    [CompilerGeneratedAttribute]
private WrapperElementInfoBase <elementInfo>P;
    [NotNullAttribute]
protected IDeclaration Declaration;
    [CanBeNullAttribute]
protected IDeclaredElement DeclaredElement { get; }
    public IElementInfo Element { get; }
    public IEnumerable`1<IDeclarationInfo> MemberDeclarations { get; }
    public IEnumerable`1<IDeclarationInfo> AccessorDeclarations { get; }
    public IEnumerable`1<IDeclarationInfo> ParameterDeclarations { get; }
    protected WrapperDeclarationInfoBase(IDeclaration declaration, WrapperElementInfoBase elementInfo);
    protected IDeclaredElement get_DeclaredElement();
    public sealed virtual IElementInfo get_Element();
    [NotNullAttribute]
public sealed virtual IDeclaration FindDeclaration(DeclarationInfoCache cache);
    public sealed virtual IDeclaredElement FindDeclaredElement(DeclarationInfoCache cache);
    public abstract virtual IEnumerable`1<IDeclarationInfo> get_MemberDeclarations();
    public abstract virtual IEnumerable`1<IDeclarationInfo> get_AccessorDeclarations();
    public abstract virtual IEnumerable`1<IDeclarationInfo> get_ParameterDeclarations();
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.WrapperElementInfoBase : object {
    [CompilerGeneratedAttribute]
private IDeclaredElement <Element>k__BackingField;
    protected PsiLanguageType Language;
    public IDeclaredElement Element { get; }
    public DeclaredElementType ElementType { get; }
    public IMemberInfo Owner { get; }
    protected WrapperElementInfoBase(IDeclaredElement element, PsiLanguageType language);
    [CompilerGeneratedAttribute]
public IDeclaredElement get_Element();
    public sealed virtual DeclaredElementType get_ElementType();
    public abstract virtual int GetFlags(int mask);
    public abstract virtual IMemberInfo get_Owner();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Daemon.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
