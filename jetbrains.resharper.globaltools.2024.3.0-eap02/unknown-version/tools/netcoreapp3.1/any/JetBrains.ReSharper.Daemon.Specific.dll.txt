public class JetBrains.ReSharper.Daemon.Specific.AssemblyReferenceClass_PsiFeaturesDaemonSpecific : object {
    public static Bitmap AssemblyReferenceField_SystemDrawing;
}
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.Specific.CheckNamespace.CheckNamespaceDaemonProcess : object {
    [NotNullAttribute]
private IDaemonProcess myDaemonProcess;
    [NotNullAttribute]
private IFile myPsiFile;
    private IFile JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageProcessWithPsiFile.File { get; }
    public IDaemonProcess DaemonProcess { get; }
    public CheckNamespaceDaemonProcess(IDaemonProcess daemonProcess, IFile psiFile);
    private sealed virtual override IFile JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageProcessWithPsiFile.get_File();
    public sealed virtual IDaemonProcess get_DaemonProcess();
    public sealed virtual void Execute(Action`1<DaemonStageResult> committer);
    [CanBeNullAttribute]
private IHighlighting Check(DocumentRange& documentRange);
    private static ExpectedNamespaceAndNamespaceChecker GetExpectedNamespaceName(IFile psiFile);
}
[DaemonStageAttribute("16")]
internal class JetBrains.ReSharper.Daemon.Specific.CheckNamespace.CheckNamespaceDaemonStage : object {
    public Type[] DaemonStagesRequired { get; }
    public sealed virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
    private static bool IsSupported(IPsiSourceFile sourceFile);
    public sealed virtual int CalcSettingsHash(IPsiSourceFile sourceFile, IContextBoundSettingsStore settingsStore);
    public sealed virtual Type[] get_DaemonStagesRequired();
}
[ConfigurableSeverityHighlightingAttribute("CheckNamespace", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.Specific.Errors.CheckNamespaceWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITypeAndNamespaceHolderDeclaration <HolderDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpectedNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActualNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITypeAndNamespaceHolderDeclaration HolderDeclaration { get; }
    public string ExpectedNamespace { get; }
    public string ActualNamespace { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CheckNamespaceWarning(ITypeAndNamespaceHolderDeclaration holderDeclaration, string expectedNamespace, string actualNamespace);
    [CompilerGeneratedAttribute]
public ITypeAndNamespaceHolderDeclaration get_HolderDeclaration();
    [CompilerGeneratedAttribute]
public string get_ExpectedNamespace();
    [CompilerGeneratedAttribute]
public string get_ActualNamespace();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Daemon.Specific.Errors.ConfigurableSeveritySettingsProvider65B1E5A8FD69EB8F9FAF4F4951A0FEFEF782D0D4A7BB6B686900B2C5DE0DA233 : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Daemon.Specific.Errors.ConfigurableSeveritySettingsProvider65B1E5A8FD69EB8F9FAF4F4951A0FEFEF782D0D4A7BB6B686900B2C5DE0DA233/<GetBooleanOptions>d__0")]
public sealed virtual IEnumerable`1<ValueTuple`2<SettingsScalarEntry, string>> GetBooleanOptions(IContextBoundSettingsStore settingsStore, ConfigurableSeverityItem configurableSeverity);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Daemon.Specific.Errors.ConfigurableSeveritySettingsProvider65B1E5A8FD69EB8F9FAF4F4951A0FEFEF782D0D4A7BB6B686900B2C5DE0DA233/<GetSeverityOptions>d__1")]
public sealed virtual IEnumerable`1<ValueTuple`2<SettingsScalarEntry, string>> GetSeverityOptions(IContextBoundSettingsStore settingsStore, ConfigurableSeverityItem configurableSeverity);
}
[ConfigurableSeverityHighlightingAttribute("FormatStringProblem", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.Specific.Errors.FormatStringAlignmentIsNotNumberWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("FormatStringProblem", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.Specific.Errors.FormatStringArgumentIsNotIFormattableWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("FormatStringProblem", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.Specific.Errors.FormatStringArgumentIsNotUsedWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IExpression <UnusedArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private IExpression <FormatStringArgument>k__BackingField;
    public IExpression UnusedArgument { get; }
    public IExpression FormatStringArgument { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public FormatStringArgumentIsNotUsedWarning(IExpression unusedArgument, IExpression formatStringArgument);
    [CompilerGeneratedAttribute]
public IExpression get_UnusedArgument();
    [CompilerGeneratedAttribute]
public IExpression get_FormatStringArgument();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("FormatStringProblem", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.Specific.Errors.FormatStringInexistingArgumentWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IArgumentsOwner <ArgumentsOwner>k__BackingField;
    public IArgumentsOwner ArgumentsOwner { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public FormatStringInexistingArgumentWarning(IArgumentsOwner argumentsOwner);
    [CompilerGeneratedAttribute]
public IArgumentsOwner get_ArgumentsOwner();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("FormatStringProblem", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.Specific.Errors.FormatStringInvalidFormatItemIndexWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("FormatStringProblem", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.Specific.Errors.FormatStringUnescapedLBraceWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private int <BraceEndOffset>k__BackingField;
    public int BraceEndOffset { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public FormatStringUnescapedLBraceWarning(int braceEndOffset);
    [CompilerGeneratedAttribute]
public int get_BraceEndOffset();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("FormatStringProblem", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.Specific.Errors.FormatStringUnescapedRBraceWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private int <BraceEndOffset>k__BackingField;
    public int BraceEndOffset { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public FormatStringUnescapedRBraceWarning(int braceEndOffset);
    [CompilerGeneratedAttribute]
public int get_BraceEndOffset();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("HighlightingSourceContractViolationOnBaseClass", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.Specific.Errors.Internal.HighlightingSourceContractViolationOnBaseClassWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITypeDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private IClass <SuperClass>k__BackingField;
    [CompilerGeneratedAttribute]
private IInterface <ContractInterface>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITypeDeclaration Declaration { get; }
    public IClass SuperClass { get; }
    public IInterface ContractInterface { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public HighlightingSourceContractViolationOnBaseClassWarning(ITypeDeclaration declaration, IClass superClass, IInterface contractInterface);
    [CompilerGeneratedAttribute]
public ITypeDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public IClass get_SuperClass();
    [CompilerGeneratedAttribute]
public IInterface get_ContractInterface();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("HighlightingSourceContractViolation", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.Specific.Errors.Internal.HighlightingSourceContractViolationWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITreeNode <TypeSpecification>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaredType <HighlightingType>k__BackingField;
    [CompilerGeneratedAttribute]
private IInterface <ContractInterface>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITreeNode TypeSpecification { get; }
    public IDeclaredType HighlightingType { get; }
    public IInterface ContractInterface { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public HighlightingSourceContractViolationWarning(ITreeNode typeSpecification, IDeclaredType highlightingType, IInterface contractInterface);
    [CompilerGeneratedAttribute]
public ITreeNode get_TypeSpecification();
    [CompilerGeneratedAttribute]
public IDeclaredType get_HighlightingType();
    [CompilerGeneratedAttribute]
public IInterface get_ContractInterface();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[RegisterConfigurableHighlightingsGroupAttribute("Internal: Highlighting Types", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "HighlightingTypesGroup_Title", "")]
public static class JetBrains.ReSharper.Daemon.Specific.Errors.Internal.HighlightingTypesGroup : object {
    public static string ID;
}
public interface JetBrains.ReSharper.Daemon.Specific.Errors.Internal.IHighlightingSourceAnalysisHighlighting {
}
[ConfigurableSeverityHighlightingAttribute("MissingHighlightingSourceAttribute", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.Specific.Errors.Internal.MissingHighlightingSourceAttributeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITypeDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private HighlightingSourceKind <PossibleKind>k__BackingField;
    public ITypeDeclaration Declaration { get; }
    public HighlightingSourceKind PossibleKind { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MissingHighlightingSourceAttributeWarning(ITypeDeclaration declaration, HighlightingSourceKind possibleKind);
    [CompilerGeneratedAttribute]
public ITypeDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public HighlightingSourceKind get_PossibleKind();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("MultipleHighlightingSourceAttributes", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.Specific.Errors.Internal.MultipleHighlightingSourceAttributesWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITreeNode <Annotation>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNode <ExistingAnnotation>k__BackingField;
    [CompilerGeneratedAttribute]
private HighlightingSourceKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private HighlightingSourceKind <ExistingKind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITreeNode Annotation { get; }
    public ITreeNode ExistingAnnotation { get; }
    public HighlightingSourceKind Kind { get; }
    public HighlightingSourceKind ExistingKind { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MultipleHighlightingSourceAttributesWarning(ITreeNode annotation, ITreeNode existingAnnotation, HighlightingSourceKind kind, HighlightingSourceKind existingKind);
    [CompilerGeneratedAttribute]
public ITreeNode get_Annotation();
    [CompilerGeneratedAttribute]
public ITreeNode get_ExistingAnnotation();
    [CompilerGeneratedAttribute]
public HighlightingSourceKind get_Kind();
    [CompilerGeneratedAttribute]
public HighlightingSourceKind get_ExistingKind();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("MultipleHighlightingSourceContracts", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.Specific.Errors.Internal.MultipleHighlightingSourceContractsWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITypeDeclaration <Declaration>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IInterface> <ContractInterfaces>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITypeDeclaration Declaration { get; }
    public List`1<IInterface> ContractInterfaces { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public MultipleHighlightingSourceContractsWarning(ITypeDeclaration declaration, List`1<IInterface> contractInterfaces);
    [CompilerGeneratedAttribute]
public ITypeDeclaration get_Declaration();
    [CompilerGeneratedAttribute]
public List`1<IInterface> get_ContractInterfaces();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
    [CompilerGeneratedAttribute]
private string <.ctor>b__2_0(IInterface x);
}
[ConfigurableSeverityHighlightingAttribute("RedundantHighlightingType", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.Specific.Errors.Internal.RedundantHighlightingTypeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITreeNode <TypeSpecification>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeElement <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITreeNode TypeSpecification { get; }
    public ITypeElement Origin { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public RedundantHighlightingTypeWarning(ITreeNode typeSpecification, ITypeElement origin);
    [CompilerGeneratedAttribute]
public ITreeNode get_TypeSpecification();
    [CompilerGeneratedAttribute]
public ITypeElement get_Origin();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[RegisterConfigurableSeverityAttribute("UnregisteredHighlightingType", "", "", "", "Internal: Highlighting Types", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "UnregisteredHighlightingType_Title", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "UnregisteredHighlightingType_Description", "4")]
[RegisterConfigurableSeverityAttribute("RedundantHighlightingType", "", "", "", "Internal: Highlighting Types", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "RedundantHighlightingType_Title", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "RedundantHighlightingType_Description", "4")]
[RegisterConfigurableSeverityAttribute("MultipleHighlightingSourceAttributes", "", "", "", "Internal: Highlighting Types", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "MultipleHighlightingSourceAttributes_Title", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "MultipleHighlightingSourceAttributes_Description", "5")]
[RegisterConfigurableSeverityAttribute("MissingHighlightingSourceAttribute", "", "", "", "Internal: Highlighting Types", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "MissingHighlightingSourceAttribute_Title", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "MissingHighlightingSourceAttribute_Description", "4")]
[RegisterConfigurableSeverityAttribute("MultipleHighlightingSourceContracts", "", "", "", "Internal: Highlighting Types", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "MultipleHighlightingSourceContracts_Title", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "MultipleHighlightingSourceContracts_Description", "5")]
[RegisterConfigurableSeverityAttribute("HighlightingSourceContractViolation", "", "", "", "Internal: Highlighting Types", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "HighlightingSourceContractViolation_Title", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "HighlightingSourceContractViolation_Description", "5")]
[RegisterConfigurableSeverityAttribute("HighlightingSourceContractViolationOnBaseClass", "", "", "", "Internal: Highlighting Types", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "HighlightingSourceContractViolationOnBaseClass_Title", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "HighlightingSourceContractViolationOnBaseClass_Description", "5")]
public class JetBrains.ReSharper.Daemon.Specific.Errors.Internal.RegisterSeverityComponentC42D01AC9E1327B4507C59A212B88A9B095043959ECF4A6A60BAB0F7D955A53C : object {
}
[ConfigurableSeverityHighlightingAttribute("UnregisteredHighlightingType", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.Specific.Errors.Internal.UnregisteredHighlightingTypeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITreeNode <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaredType <HighlightingType>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeElement <ContainingType>k__BackingField;
    [CompilerGeneratedAttribute]
private HighlightingSourceKind <HighlightingSourceKind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITreeNode Node { get; }
    public IDeclaredType HighlightingType { get; }
    public ITypeElement ContainingType { get; }
    public HighlightingSourceKind HighlightingSourceKind { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UnregisteredHighlightingTypeWarning(ITreeNode node, IDeclaredType highlightingType, ITypeElement containingType, HighlightingSourceKind highlightingSourceKind);
    [CompilerGeneratedAttribute]
public ITreeNode get_Node();
    [CompilerGeneratedAttribute]
public IDeclaredType get_HighlightingType();
    [CompilerGeneratedAttribute]
public ITypeElement get_ContainingType();
    [CompilerGeneratedAttribute]
public HighlightingSourceKind get_HighlightingSourceKind();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Daemon.Specific.Errors.Internal.ZoneMarker : object {
}
[ConfigurableSeverityHighlightingAttribute("PassStringInterpolation", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.Specific.Errors.PassStringInterpolationWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IArgumentsOwner <Invocation>k__BackingField;
    [CompilerGeneratedAttribute]
private IExpression <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IExpression> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private IMethod <SuggestedMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private IFunctionInvocationClrWrapper <FormattingInvocationWrapper>k__BackingField;
    public IArgumentsOwner Invocation { get; }
    public IExpression FormatString { get; }
    public IReadOnlyList`1<IExpression> Arguments { get; }
    public IMethod SuggestedMethod { get; }
    public IFunctionInvocationClrWrapper FormattingInvocationWrapper { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public PassStringInterpolationWarning(IArgumentsOwner Invocation, IExpression FormatString, IReadOnlyList`1<IExpression> Arguments, IMethod suggestedMethod, IFunctionInvocationClrWrapper formattingInvocationWrapper);
    [CompilerGeneratedAttribute]
public IArgumentsOwner get_Invocation();
    [CompilerGeneratedAttribute]
public IExpression get_FormatString();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IExpression> get_Arguments();
    [CompilerGeneratedAttribute]
public IMethod get_SuggestedMethod();
    [CompilerGeneratedAttribute]
public IFunctionInvocationClrWrapper get_FormattingInvocationWrapper();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("PossibleInfiniteInheritance", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.Specific.Errors.PossibleInfiniteInheritanceWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITypeDeclaration <Declaration>k__BackingField;
    public ITypeDeclaration Declaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public PossibleInfiniteInheritanceWarning(ITypeDeclaration declaration);
    [CompilerGeneratedAttribute]
public ITypeDeclaration get_Declaration();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[RegisterConfigurableSeverityAttribute("FormatStringProblem", "", "", "", "CodeSmell", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "StringFormattingMethodProblems", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "FormatStringSyntaxErrorsUnescapedBracesInvalidIdicesAlignmentsUnusedArgumentsEtcAndOtherFormattingMethodInvocationProblems", "4")]
[RegisterConfigurableSeverityAttribute("StructuredMessageTemplateProblem", "", "", "", "CodeSmell", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "StructuredMessageTemplateProblems", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "StructuredMessageTemplateSyntaxErrorsUnescapedBracesUnusedArgumentsEtc", "4")]
[RegisterConfigurableSeverityAttribute("PossibleInfiniteInheritance", "", "", "", "CodeSmell", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "PossibleInfiniteInheritance", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "AccordingToECMAPartIIMetadataParagraphGenericsAndRecursiveInheritanceGraphs", "4")]
[RegisterConfigurableSeverityAttribute("UseFormatSpecifierInFormatString", "", "", "", "CodeSmell", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "UseFormatSpecifierInFormatStrings", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "ToStringCallCouldBeReplacedWithFormatSpecifier", "3")]
[RegisterConfigurableSeverityAttribute("UseStringInterpolation", "", "", "", "LanguageUsage", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "UseStringInterpolationExpression", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "ReplaceStringConstructionByStringFormatMethodInvocationWithStringInterpolationExpression", "3")]
[RegisterConfigurableSeverityAttribute("UseStringInterpolationWhenPossible", "", "", "", "LanguageUsage", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "UseStringInterpolationExpressionWhenPossible", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "ReplaceStringConstructionByStringFormatMethodInvocationWithStringInterpolationExpression", "2")]
[RegisterConfigurableSeverityAttribute("PassStringInterpolation", "", "", "", "LanguageUsage", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "PassStringInterpolationExpression", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "ReplaceFormattingMethodArgumentsByPassingStringInterpolationExpression", "2")]
[RegisterConfigurableSeverityAttribute("CheckNamespace", "", "", "", "ConstraintViolation", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "NamespaceDoesNotCorrespondToFileLocation", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "NamespaceInFileDoesNotHaveAFormOfProjectDefaultNamespacePlusFolderNamesInThePathToFileYouCanConfigureWhichFoldersParticipateInNamespaceBuildingProcessOnTheFoldersPropertiesPage", "4")]
public class JetBrains.ReSharper.Daemon.Specific.Errors.RegisterSeverityComponentD4B4FF7EC78FCEFF75B230858D76E119E0EE933D71F1D3699242F23DCBF78CE8 : object {
}
[ConfigurableSeverityHighlightingAttribute("StructuredMessageTemplateProblem", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.Specific.Errors.StructuredMessageTemplateArgumentIsNotUsedWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IExpression <UnusedArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private IExpression <MessageTemplateArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPositionalArgument>k__BackingField;
    public IExpression UnusedArgument { get; }
    public IExpression MessageTemplateArgument { get; }
    public bool IsPositionalArgument { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public StructuredMessageTemplateArgumentIsNotUsedWarning(IExpression unusedArgument, IExpression messageTemplateArgument, bool isPositionalArgument);
    [CompilerGeneratedAttribute]
public IExpression get_UnusedArgument();
    [CompilerGeneratedAttribute]
public IExpression get_MessageTemplateArgument();
    [CompilerGeneratedAttribute]
public bool get_IsPositionalArgument();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("StructuredMessageTemplateProblem", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.Specific.Errors.StructuredMessageTemplateNonexistingArgumentWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IArgumentsOwner <ArgumentsOwner>k__BackingField;
    public IArgumentsOwner ArgumentsOwner { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public StructuredMessageTemplateNonexistingArgumentWarning(IArgumentsOwner argumentsOwner);
    [CompilerGeneratedAttribute]
public IArgumentsOwner get_ArgumentsOwner();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("StructuredMessageTemplateProblem", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.Specific.Errors.StructuredMessageTemplateUnescapedLBraceWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private int <BraceEndOffset>k__BackingField;
    public int BraceEndOffset { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public StructuredMessageTemplateUnescapedLBraceWarning(int braceEndOffset);
    [CompilerGeneratedAttribute]
public int get_BraceEndOffset();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("StructuredMessageTemplateProblem", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.Specific.Errors.StructuredMessageTemplateUnescapedRBraceWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private int <BraceEndOffset>k__BackingField;
    public int BraceEndOffset { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public StructuredMessageTemplateUnescapedRBraceWarning(int braceEndOffset);
    [CompilerGeneratedAttribute]
public int get_BraceEndOffset();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("UseFormatSpecifierInFormatString", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.Specific.Errors.UseFormatSpecifierInFormatStringWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private IArgumentsOwner <FormattingInvocation>k__BackingField;
    public IExpression Expression { get; }
    public IArgumentsOwner FormattingInvocation { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UseFormatSpecifierInFormatStringWarning(IExpression expression, IArgumentsOwner formattingInvocation);
    [CompilerGeneratedAttribute]
public IExpression get_Expression();
    [CompilerGeneratedAttribute]
public IArgumentsOwner get_FormattingInvocation();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.Daemon.HighlightingSettings", "UseStringInterpolation inspection settings")]
public class JetBrains.ReSharper.Daemon.Specific.Errors.UseStringInterpolationSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "UseStringInterpolationSettingConvertToStringInterpolationWhenPossibleTitle")]
public Severity ConvertToStringInterpolationWhenPossible;
}
[ConfigurableSeverityHighlightingAttribute("UseStringInterpolation", "CSHARP,VBASIC")]
public class JetBrains.ReSharper.Daemon.Specific.Errors.UseStringInterpolationWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IArgumentsOwner <Invocation>k__BackingField;
    [CompilerGeneratedAttribute]
private IExpression <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IExpression> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WhenPossible>k__BackingField;
    public static Expression`1<Func`2<UseStringInterpolationSettings, Severity>> ConvertToStringInterpolationWhenPossibleAccessor;
    public IArgumentsOwner Invocation { get; }
    public IExpression FormatString { get; }
    public IReadOnlyList`1<IExpression> Arguments { get; }
    public bool WhenPossible { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public UseStringInterpolationWarning(IArgumentsOwner invocation, IExpression formatString, IReadOnlyList`1<IExpression> Arguments, bool whenPossible);
    private static UseStringInterpolationWarning();
    [CompilerGeneratedAttribute]
public IArgumentsOwner get_Invocation();
    [CompilerGeneratedAttribute]
public IExpression get_FormatString();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IExpression> get_Arguments();
    [CompilerGeneratedAttribute]
public bool get_WhenPossible();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ElementProblemAnalyzerAttribute("0", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Specific.FormatString.FormatStringProblemAnalyzer : ElementProblemAnalyzer`1<IExpression> {
    [NotNullAttribute]
private LanguageManager myLanguageManager;
    [NotNullAttribute]
private FormattingFunctionInvocationInfoProvider myFormattingInvocationProvider;
    [NotNullAttribute]
private StructuredMessageTemplateFunctionInvocationInfoProvider myStructuredMessageTemplateFunctionInvocationInfoProvider;
    [NotNullAttribute]
private static Char[] ourBraceCharacters;
    public FormatStringProblemAnalyzer(LanguageManager languageManager, StructuredMessageTemplateFunctionInvocationInfoProvider structuredMessageTemplateFunctionInvocationInfoProvider, FormattingFunctionInvocationInfoProvider formattingInvocationProvider);
    private static FormatStringProblemAnalyzer();
    private static bool IsLanguageSupported(IExpression expression);
    protected virtual void Run(IExpression expression, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    [PureAttribute]
private static bool IsNUnitAssertionWithoutFormatArguments(FormattingFunctionInvocationInfo invocationInfo);
    internal void CheckFormatString(FormattingFunctionInvocationInfo invocationInfo, IHighlightingConsumer consumer, ElementProblemAnalyzerData data, IList`1<IExpression> formatArguments, bool formatStringIsConstant, IExpression stringFormatArgumentExpression, FormattingFunctionKind formattingFunctionKind);
    private static void HighlightUnusedStructuredArguments(FormattingFunctionInvocationInfo invocationInfo, IReadOnlyList`1<FormatItem> formatItems, IList`1<IExpression> formatArguments, IExpression stringFormatArgumentExpression, bool canCheckUnusedArguments, bool formatStringIsConstant, IHighlightingConsumer consumer);
    private void HighlightUnusedPositionalArguments(FormattingFunctionInvocationInfo invocationInfo, IHighlightingConsumer consumer, ElementProblemAnalyzerData data, IList`1<IExpression> formatArguments, bool formatStringIsConstant, IExpression stringFormatArgumentExpression, FormattingFunctionKind formattingFunctionKind, IReadOnlyList`1<FormatItem> formatItems, bool canUseStringInterpolation, bool canCheckUnusedArguments);
    private void CheckSimplifiableArguments(FormattingFunctionInvocationInfo invocationInfo, ElementProblemAnalyzerData data, IHighlightingConsumer consumer, IReadOnlyList`1<FormatItem> formatItems);
    private void TrySuggestStringInterpolation(FormattingFunctionInvocationInfo invocationInfo, IHighlightingConsumer consumer, ElementProblemAnalyzerData data, IReadOnlyList`1<FormatItem> formatItems);
    [PureAttribute]
private static bool HasLineBreaksInInvocation(FormattingFunctionInvocationInfo info);
    private static void AddSameHighlightings(IEnumerable`1<DocumentRange> ranges, IHighlightingConsumer consumer, Func`2<DocumentRange, IHighlighting> factory);
    public static bool AllFormatItemsAreInLiterals(IStringConcatenationClrWrapper formatString, IEnumerable`1<FormatItem> formatItemsToDecrement);
}
internal class JetBrains.ReSharper.Daemon.Specific.InheritedGutterMark.FindFirstResultConsumer : object {
    [CompilerGeneratedAttribute]
private bool <FoundImplementingMethod>k__BackingField;
    public bool FoundImplementingMethod { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_FoundImplementingMethod();
    [CompilerGeneratedAttribute]
private void set_FoundImplementingMethod(bool value);
    public sealed virtual IDeclaredElement Build(FindResult result);
    public sealed virtual FindExecution Merge(IDeclaredElement data);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Daemon.Specific.InheritedGutterMark.GutterMarkPopupBehaviour : object {
    public virtual OccurrencePopupMenuOptions GetPopupMenuOptions(IconId iconId, SearchRequest searchRequest, ICollection`1<IOccurrence> occurrences, bool skipMenuIfSingleEnabled);
}
[HighlightingSourceAttribute]
public interface JetBrains.ReSharper.Daemon.Specific.InheritedGutterMark.IInheritedMembersHighlighterProcessFactory {
    [CanBeNullAttribute]
public abstract virtual IDaemonStageProcess CreateProcess(IDaemonProcess process, IFile psiFile);
}
[HighlightingSourceAttribute]
public interface JetBrains.ReSharper.Daemon.Specific.InheritedGutterMark.IInheritedMembersHighlightingContract {
}
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.Specific.InheritedGutterMark.InheritedMembersHighlighterProcess : object {
    [CompilerGeneratedAttribute]
private IDaemonProcess <DaemonProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private IFile <File>k__BackingField;
    public IDaemonProcess DaemonProcess { get; }
    [NotNullAttribute]
public IFile File { get; }
    public InheritedMembersHighlighterProcess(IDaemonProcess daemonProcess, IFile psiFile);
    public sealed virtual void Execute(Action`1<DaemonStageResult> committer);
    [CompilerGeneratedAttribute]
public sealed virtual IDaemonProcess get_DaemonProcess();
    [CompilerGeneratedAttribute]
public sealed virtual IFile get_File();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.Specific.InheritedGutterMark.InheritedMembersHighlighterProcessFactory : object {
    public virtual IDaemonStageProcess CreateProcess(IDaemonProcess process, IFile psiFile);
}
[DaemonStageAttribute("16")]
public class JetBrains.ReSharper.Daemon.Specific.InheritedGutterMark.InheritedMembersHighlighterStage : object {
    public sealed virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
    private static bool IsSupported(IPsiSourceFile sourceFile);
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/GutterMarks")]
public class JetBrains.ReSharper.Daemon.Specific.InheritedGutterMark.TypeHasSupersMarkOnGutter : TypeHasSupersMarkOnGutterBase {
    private IReadOnlyCollection`1<IDeclaredType> mySuperTypes;
    public TypeHasSupersMarkOnGutter(ITypeDeclaration typeDeclaration, ITypeElement typeElement, IReadOnlyCollection`1<IDeclaredType> superTypes, DocumentRange nameDocumentRange);
    public TypeHasSupersMarkOnGutter(ITypeDeclaration typeDeclaration, ITypeElement typeElement, IReadOnlyCollection`1<IDeclaredType> superTypes);
    protected virtual SearchRequest CreateBaseSearchRequest(IDeclaredElement declaredElement);
    protected virtual SuperTypesSet InspectSuperTypes();
}
public abstract class JetBrains.ReSharper.Daemon.Specific.InheritedGutterMark.TypeHasSupersMarkOnGutterBase : TypeMarkOnGutterBase {
    public RichText ToolTip { get; }
    public string AttributeId { get; }
    protected TypeHasSupersMarkOnGutterBase(IDeclaration typeDeclaration, IDeclaredElement declaredElement, DocumentRange nameDocumentRange);
    public virtual RichText get_ToolTip();
    public virtual string get_AttributeId();
    public virtual void OnClick(IconId iconId);
    protected abstract virtual SearchRequest CreateBaseSearchRequest(IDeclaredElement declaredElement);
    protected abstract virtual SuperTypesSet InspectSuperTypes();
    [CompilerGeneratedAttribute]
private SearchRequest <OnClick>b__5_0(IDataContext _);
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/GutterMarks")]
public class JetBrains.ReSharper.Daemon.Specific.InheritedGutterMark.TypeIsInheritedMarkOnGutter : TypeIsInheritedMarkOnGutterBase {
    public RichText ToolTip { get; }
    public string AttributeId { get; }
    public TypeIsInheritedMarkOnGutter(IDeclaration typeDeclaration, DocumentRange nameDocumentRange);
    public virtual RichText get_ToolTip();
    public virtual string get_AttributeId();
    private bool IsInterfaceImplementation();
    protected virtual SearchRequest CreateInheritorsSearchRequest(IDeclaredElement declaredElement, ISearchDomain domain);
}
public abstract class JetBrains.ReSharper.Daemon.Specific.InheritedGutterMark.TypeIsInheritedMarkOnGutterBase : TypeMarkOnGutterBase {
    private DocumentRange myRangeOfMark;
    public RichText ToolTip { get; }
    protected TypeIsInheritedMarkOnGutterBase(IDeclaration typeDeclaration, IDeclaredElement declaredElement, DocumentRange nameDocumentRange);
    public virtual RichText get_ToolTip();
    public virtual void OnClick(IconId iconId);
    protected abstract virtual SearchRequest CreateInheritorsSearchRequest(IDeclaredElement declaredElement, ISearchDomain domain);
    [CompilerGeneratedAttribute]
private SearchRequest <OnClick>b__4_0(IDataContext context);
}
public abstract class JetBrains.ReSharper.Daemon.Specific.InheritedGutterMark.TypeMarkOnGutterBase : object {
    [CompilerGeneratedAttribute]
private IDeclaration <TypeDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <NameDocumentRange>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaredElement <DeclaredElement>k__BackingField;
    protected IDeclaration TypeDeclaration { get; }
    protected DocumentRange NameDocumentRange { get; }
    protected IDeclaredElement DeclaredElement { get; }
    public RichText ToolTip { get; }
    private string JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.ToolTip { get; }
    public string AttributeId { get; }
    public string ErrorStripeToolTip { get; }
    protected TypeMarkOnGutterBase(IDeclaration typeDeclaration, IDeclaredElement declaredElement, DocumentRange nameDocumentRange);
    [CompilerGeneratedAttribute]
protected IDeclaration get_TypeDeclaration();
    [CompilerGeneratedAttribute]
protected DocumentRange get_NameDocumentRange();
    [CompilerGeneratedAttribute]
protected IDeclaredElement get_DeclaredElement();
    public abstract virtual RichText get_ToolTip();
    private sealed virtual override string JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.get_ToolTip();
    public abstract virtual string get_AttributeId();
    public abstract virtual void OnClick(IconId iconId);
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual RichTextBlock TryGetTooltip(HighlighterTooltipKind where);
    public static void ShowMenu(IconId iconId, DocumentRange range, Func`2<IDataContext, SearchRequest> searchFunc);
    private static PopupWindowContextSource GuessPopupWindowContext(DocumentRange range);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Daemon.Specific.InplaceUsageAnalyzer.FindFirstExternalReferenceConsumer : object {
    [CompilerGeneratedAttribute]
private IDeclaredElement <searchDeclaredElement>P;
    [CompilerGeneratedAttribute]
private Func`1<bool> <checkForInterrupt>P;
    [CompilerGeneratedAttribute]
private UsageAnalyzer <usageAnalyzer>P;
    [CompilerGeneratedAttribute]
private bool <FoundUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InheritedElementIsUsed>k__BackingField;
    public bool FoundUsage { get; private set; }
    public bool InheritedElementIsUsed { get; private set; }
    public FindFirstExternalReferenceConsumer(IDeclaredElement searchDeclaredElement, Func`1<bool> checkForInterrupt, UsageAnalyzer usageAnalyzer);
    [CompilerGeneratedAttribute]
public bool get_FoundUsage();
    [CompilerGeneratedAttribute]
private void set_FoundUsage(bool value);
    public sealed virtual Nullable`1<bool> Build(FindResult result);
    public sealed virtual FindExecution Merge(Nullable`1<bool> foundExternalUsage);
    [CompilerGeneratedAttribute]
public bool get_InheritedElementIsUsed();
    [CompilerGeneratedAttribute]
private void set_InheritedElementIsUsed(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Daemon.Specific.InplaceUsageAnalyzer.InplaceUsageAnalysisData : object {
    private HashSet`1<ElementId> myUsedElements;
    private HashSet`1<ElementId> myUnusedElements;
    private HashSet`1<ElementId> myOnlyInheritorsUsedTypeMembers;
    public void MarkExternallyUsed(Nullable`1<ElementId> declaredElement);
    public bool IsExternallyUsed(Nullable`1<ElementId> declaredElement);
    public void MarkUnused(Nullable`1<ElementId> declaredElement);
    public bool IsUnused(Nullable`1<ElementId> declaredElement);
    public void MarkOnlyInheritorUsed(Nullable`1<ElementId> typeMember);
    public bool IsOnlyInheritorUsed(Nullable`1<ElementId> typeMember);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.Specific.InplaceUsageAnalyzer.InplaceUsageAnalyzerProcess : object {
    private static Key`1<InplaceUsageAnalysisData> KEY_PERSISTED_DATA;
    private static ClrTypeName ourDesignerCategoryAttributeName;
    private static int MAX_NUMBER_OF_OCCURRENCES_TO_CHECK;
    private IPsiServices myPsiServices;
    private SourcesTrigramIndex mySourcesTrigramIndex;
    private CollectUsagesStageProcess myCollectUsagesStageProcess;
    private SolutionWideInspectionsLevel mySolutionWideInspectionsLevel;
    private bool myShowUnusedTypes;
    private bool myShowUnusedTypeMembers;
    private UsageAnalyzer myUsageAnalyzer;
    private UsageCheckingServices myUsageCheckingServices;
    [CompilerGeneratedAttribute]
private IDaemonProcess <DaemonProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private IFile <File>k__BackingField;
    public IDaemonProcess DaemonProcess { get; }
    public IFile File { get; }
    public InplaceUsageAnalyzerProcess(IDaemonProcess daemonProcess, IFile file, UsageCheckingServiceManager usageCheckingServiceManager, IPsiServices psiServices, SourcesTrigramIndex sourcesTrigramIndex, CollectUsagesStageProcess collectUsagesStageProcess, SolutionWideInspectionsLevel solutionWideInspectionsLevel, bool showUnusedTypes, bool showUnusedTypeMembers);
    private static InplaceUsageAnalyzerProcess();
    public sealed virtual void Execute(Action`1<DaemonStageResult> committer);
    private void FilterTypeMembers(List`1& usedTypeMembers, List`1& unusedTypeMembers, List`1& onlyInheritorsUsedTypeMembers, List`1& typeMembersToCheckUsage);
    private bool ShouldReportUnused(InplaceUsageAnalysisData inplaceUsageAnalysisData, IDeclaredElement declaredElement);
    private static bool IsQuasiImplementation(ITypeMember typeMember);
    private InplaceUsageAnalysisData GetOrCreateUsageAnalysisData();
    [CompilerGeneratedAttribute]
public sealed virtual IDaemonProcess get_DaemonProcess();
    [CompilerGeneratedAttribute]
public sealed virtual IFile get_File();
    [CompilerGeneratedAttribute]
private void <Execute>g__MarkContainingTypeAsUsedIfExtensionMethod|12_0(ITypeMember usedTypeMember, <>c__DisplayClass12_0& );
    [CompilerGeneratedAttribute]
internal static bool <Execute>g__MayBeOverridden|12_1(ITypeMember typeMember);
    [CompilerGeneratedAttribute]
internal static bool <Execute>g__IsStaticClass|12_2(IClass clazz);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DaemonStageAttribute("0")]
public class JetBrains.ReSharper.Daemon.Specific.InplaceUsageAnalyzer.InplaceUsageAnalyzerStage : object {
    [CompilerGeneratedAttribute]
private UsageCheckingServiceManager <usageCheckingServiceManager>P;
    [CompilerGeneratedAttribute]
private SolutionAnalysisConfiguration <solutionAnalysisConfiguration>P;
    [CompilerGeneratedAttribute]
private HighlightingSettingsManager <highlightingSettingsManager>P;
    [CompilerGeneratedAttribute]
private IPsiServices <psiServices>P;
    [CompilerGeneratedAttribute]
private SourcesTrigramIndex <sourcesTrigramIndex>P;
    public InplaceUsageAnalyzerStage(UsageCheckingServiceManager usageCheckingServiceManager, SolutionAnalysisConfiguration solutionAnalysisConfiguration, HighlightingSettingsManager highlightingSettingsManager, IPsiServices psiServices, SourcesTrigramIndex sourcesTrigramIndex);
    public sealed virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
    private bool IsSupported(IPsiSourceFile sourceFile);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Daemon.Specific.Internal.HighlightingTypes.DaemonPredefinedTypes : object {
    public static ClrTypeName ELEMENT_PROBLEM_ANALYZER_ATTRIBUTE_FQN;
    public static ClrTypeName HIGHLIGHTING_SOURCE_ATTRIBUTE_FQN;
    public static ClrTypeName NON_HIGHLIGHTING_SOURCE_ATTRIBUTE_FQN;
    public static ClrTypeName DAEMON_STAGE_ATTRIBUTE_FQN;
    public static ClrTypeName IELEMENT_PROBLEM_ANALYZER_FQN;
    public static ClrTypeName ICONDITIONAL_ELEMENT_PROBLEM_ANALYZER_FQN;
    public static ClrTypeName ELEMENT_PROBLEM_ANALYZER_FQN;
    public static ClrTypeName IHIGHLIGHTING_FQN;
    public static ClrTypeName IHIGHLIGHTING_CONSUMER_FQN;
    public static ClrTypeName IDAEMON_STAGE_FQN;
    public static ClrTypeName IDAEMON_STAGE_PROCESS_FQN;
    public static ClrTypeName IDAEMON_STAGE_PROCESS_WITH_PSI_FILE_FQN;
    [NullableAttribute("2")]
private IDeclaredType myElementProblemAnalyzerAttribute;
    [NullableAttribute("2")]
private IDeclaredType myHighlightingSourceAttribute;
    [NullableAttribute("2")]
private IDeclaredType myDaemonStageAttribute;
    [NullableAttribute("2")]
private IDeclaredType myIElementProblemAnalyzer;
    [NullableAttribute("2")]
private IDeclaredType myIDaemonStage;
    [NullableAttribute("2")]
private IDeclaredType myIDaemonStageProcess;
    [NullableAttribute("2")]
private IDeclaredType myIHighlighting;
    [NullableAttribute("2")]
private IDeclaredType myIHighlightingConsumer;
    [NullableAttribute("2")]
private ITypeElement myIHighlightingTypeElement;
    [NullableAttribute("2")]
private ITypeElement myIHighlightingConsumerTypeElement;
    [CompilerGeneratedAttribute]
private IPsiModule <Module>k__BackingField;
    public IPsiModule Module { get; }
    public IDeclaredType ElementProblemAnalyzerAttribute { get; }
    public IDeclaredType HighlightingSourceAttribute { get; }
    public IDeclaredType DaemonStageAttribute { get; }
    public IDeclaredType IElementProblemAnalyzer { get; }
    public IDeclaredType IDaemonStage { get; }
    public IDeclaredType IDaemonStageProcess { get; }
    public IDeclaredType IHighlighting { get; }
    public IDeclaredType IHighlightingConsumer { get; }
    [NullableAttribute("2")]
public ITypeElement IHighlightingTypeElement { get; }
    [NullableAttribute("2")]
public ITypeElement IHighlightingConsumerTypeElement { get; }
    public DaemonPredefinedTypes(IPsiModule psiModule);
    private static DaemonPredefinedTypes();
    [CompilerGeneratedAttribute]
public IPsiModule get_Module();
    public IDeclaredType get_ElementProblemAnalyzerAttribute();
    public IDeclaredType get_HighlightingSourceAttribute();
    public IDeclaredType get_DaemonStageAttribute();
    public IDeclaredType get_IElementProblemAnalyzer();
    public IDeclaredType get_IDaemonStage();
    public IDeclaredType get_IDaemonStageProcess();
    public IDeclaredType get_IHighlighting();
    public IDeclaredType get_IHighlightingConsumer();
    [NullableContextAttribute("2")]
public ITypeElement get_IHighlightingTypeElement();
    [NullableContextAttribute("2")]
public ITypeElement get_IHighlightingConsumerTypeElement();
    [NullableContextAttribute("2")]
[PureAttribute]
public bool IsDescendantOfIHighlighting(ITypeElement typeElement);
    [NullableContextAttribute("2")]
[PureAttribute]
public bool IsDescendantOfIHighlightingConsumer(ITypeElement typeElement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.ReSharper.Daemon.Specific.Internal.HighlightingTypes.DaemonPredefinedTypesExtensions : object {
    public static Key`1<DaemonPredefinedTypes> ourKey;
    private static DaemonPredefinedTypesExtensions();
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static DaemonPredefinedTypes GetDaemonPredefinedTypes(ElementProblemAnalyzerData data);
}
public enum JetBrains.ReSharper.Daemon.Specific.Internal.HighlightingTypes.HighlightingSourceKind : Enum {
    public byte value__;
    public static HighlightingSourceKind None;
    public static HighlightingSourceKind ElementProblemAnalyzer;
    public static HighlightingSourceKind HighlightingSource;
    public static HighlightingSourceKind DaemonStage;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.ReSharper.Daemon.Specific.Internal.HighlightingTypes.HighlightingSourceKindUtils : object {
    [ExtensionAttribute]
public static IClrTypeName ToAttributeTypeName(HighlightingSourceKind kind);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ITypeElement ToAttributeTypeElement(HighlightingSourceKind kind, IPsiModule psiModule);
    public static HighlightingSourceKind FromAttributeTypeElement(ITypeElement typeElement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Daemon.Specific.Internal.HighlightingTypes.HighlightingTypesCache : object {
    [CompilerGeneratedAttribute]
private IPsiModule <psiModule>P;
    private static HashSet`1<IClrTypeName> ourPredefinedTypesWithoutAnnotations;
    private ConcurrentDictionary`2<ITypeElement, Entry> myCache;
    [NullableAttribute("2")]
private DaemonPredefinedTypes myDaemonPredefinedTypes;
    public DaemonPredefinedTypes DaemonPredefinedTypes { get; }
    public HighlightingTypesCache(IPsiModule psiModule);
    private static HighlightingTypesCache();
    [PureAttribute]
private static bool IsWellKnownIgnorableType(ITypeElement typeElement);
    private Entry GetOrAdd(ITypeElement typeElement);
    public DaemonPredefinedTypes get_DaemonPredefinedTypes();
    [MustUseReturnValueAttribute]
public HighlightingSourceKind GetHighlightingSourceKind(ITypeElement typeElement);
    [MustUseReturnValueAttribute]
public HashSet`1<IDeclaredType> GetOwnHighlightingTypes(ITypeElement typeElement);
    public void Clear();
    [MustUseReturnValueAttribute]
public ITypeElement FindHighlightingTypeOrigin(ITypeElement typeElement, IDeclaredType highlightingType, HighlightingTypeSources sources, bool allowHighlightingSuperTypes);
    [MustUseReturnValueAttribute]
public FrugalLocalHashSet`1<IInterface> GetHighlightingSourceContracts(ITypeElement typeElement);
    private static Entry CalculateEntry(ITypeElement key);
    private static bool IsTypeFromNonCheckableNamespace(ITypeElement typeElement);
    private static Entry CreateEntry(ITypeElement typeElement, HighlightingSourceKind kind, IClrTypeName attributeTypeName);
    [CompilerGeneratedAttribute]
private ITypeElement <FindHighlightingTypeOrigin>g__FindCore|13_0(ITypeElement currentTypeElement, HighlightingTypeSources currentSources, <>c__DisplayClass13_0& );
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private ITypeElement <FindHighlightingTypeOrigin>g__FindHigherInHierarchy|13_1(ITypeElement currentTypeElement, ITypeElement superTypeElement, HighlightingTypeSources currentSources, <>c__DisplayClass13_0& );
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Daemon.Specific.Internal.HighlightingTypes.HighlightingTypeSources : Enum {
    public byte value__;
    public static HighlightingTypeSources None;
    public static HighlightingTypeSources Own;
    public static HighlightingTypeSources Inherited;
    public static HighlightingTypeSources FromHighlightingSources;
    public static HighlightingTypeSources All;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Daemon.Specific.Internal.HighlightingTypes.HighlightingTypesUtils : object {
    public static string HighlightingTypesPropertyName;
    private static Key`1<CacheMap> ourKey;
    private static HighlightingTypesUtils();
    [MustUseReturnValueAttribute]
public static HighlightingTypesCache GetHighlightingTypesCache(IPsiModule module);
    [PureAttribute]
public static bool HasNonHighlightingSourceAnnotation(ITypeElement typeElement);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Daemon.Specific.Internal.ZoneMarker : object {
}
public class JetBrains.ReSharper.Daemon.Specific.NamingConsistencyCheck.InconsistentNamingCheckMark : object {
}
[ConfigurableSeverityHighlightingAttribute("InconsistentNaming", "CSHARP,VBASIC,XAML,JAVA_SCRIPT")]
public class JetBrains.ReSharper.Daemon.Specific.NamingConsistencyCheck.InconsistentNamingWarning : InconsistentNamingWarningBase {
    public bool IsSuppressed { get; }
    public InconsistentNamingWarning(ITreeNode declarationOrUsageContext, IDeclaredElement declaredElement, string name, string rule, string suggestedName, IPsiSourceFile sourceFile, DocumentRange range, ITreeNode optionalDeclarationNode);
    public sealed virtual bool get_IsSuppressed();
}
[RegisterConfigurableSeverityAttribute("InconsistentNaming", "", "", "", "ConstraintViolation", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "InconsistentNaming_Text", "", "JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "NameDoesnTMatchNamingStyleDefinedFor_Text", "4")]
public abstract class JetBrains.ReSharper.Daemon.Specific.NamingConsistencyCheck.InconsistentNamingWarningBase : object {
    [CompilerGeneratedAttribute]
private ITreeNode <DeclarationOrUsageContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiSourceFile <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaredElement <DeclaredElement>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Rule>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SuggestedName>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNode <OptionalDeclarationNode>k__BackingField;
    private DocumentRange myRange;
    protected static string MESSAGE;
    [CanBeNullAttribute]
public ITreeNode DeclarationOrUsageContext { get; }
    [NotNullAttribute]
public IPsiSourceFile SourceFile { get; }
    public IDeclaredElement DeclaredElement { get; }
    public string Name { get; }
    public string Rule { get; }
    public string SuggestedName { get; }
    public ITreeNode OptionalDeclarationNode { get; }
    public bool CanAlterRule { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    protected InconsistentNamingWarningBase(ITreeNode declarationOrUsageContext, IDeclaredElement declaredElement, string name, string rule, string suggestedName, IPsiSourceFile sourceFile, DocumentRange range, ITreeNode optionalDeclarationNode);
    private static InconsistentNamingWarningBase();
    [CompilerGeneratedAttribute]
public ITreeNode get_DeclarationOrUsageContext();
    [CompilerGeneratedAttribute]
public IPsiSourceFile get_SourceFile();
    [CompilerGeneratedAttribute]
public IDeclaredElement get_DeclaredElement();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Rule();
    [CompilerGeneratedAttribute]
public string get_SuggestedName();
    [CompilerGeneratedAttribute]
public ITreeNode get_OptionalDeclarationNode();
    public virtual bool get_CanAlterRule();
    public virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Daemon.Specific.NamingConsistencyCheck.InconsistentNamingWarningBase/<GetAbbreviationCandidates>d__32")]
[PureAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<string> GetAbbreviationCandidates();
    [CompilerGeneratedAttribute]
[PureAttribute]
internal static bool <GetAbbreviationCandidates>g__CanBeAbbreviation|32_0(NamingPolicy namingPolicy, bool first, bool firstInNamePart);
}
[DaemonStageAttribute("16")]
public class JetBrains.ReSharper.Daemon.Specific.NamingConsistencyCheck.NamingConsistencyCheckStage : object {
    [NotNullAttribute]
private ILanguageManager myLanguageManager;
    [NotNullAttribute]
private NamingPolicyManager myNamingPolicyManager;
    [NotNullAttribute]
private HighlightingSettingsManager myHighlightingSettingsManager;
    [NotNullAttribute]
public Type[] DaemonStagesRequired { get; }
    public NamingConsistencyCheckStage(ILogger logger, ILanguageManager languageManager, NamingPolicyManager namingPolicyManager, HighlightingSettingsManager highlightingSettingsManager);
    public sealed virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
    private bool ShouldCheck(IPsiSourceFile sourceFile, IContextBoundSettingsStore settings);
    public sealed virtual int CalcSettingsHash(IPsiSourceFile sourceFile, IContextBoundSettingsStore settingsStore);
    public sealed virtual Type[] get_DaemonStagesRequired();
}
public class JetBrains.ReSharper.Daemon.Specific.NamingConsistencyCheck.NamingFilter : PencilsFilterBase {
    public string Kind { get; }
    public virtual string get_Kind();
    public virtual bool Accept(HighlightingInfo info);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Daemon.Specific.NamingConsistencyCheck.NamingFilterProvider : object {
    public sealed virtual IEnumerable`1<IPencilsFilter> GetFilters(Lifetime lifetime, ISolution solution, ISettingsStore store);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Specific.PossibleInfiniteInheritance.PossibleInfiniteInheritanceChecker : ElementProblemAnalyzer`1<ITypeDeclaration> {
    protected virtual void Run(ITypeDeclaration typeDeclaration, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Daemon.Specific.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string TODOHighlightings_Text { get; }
    public static string TypeIsImplemented_Text { get; }
    public static string TypeIsInherited_Text { get; }
    public static string _NCTRLClickToFollowLink_Text { get; }
    public static string AccordingToECMAPartIIMetadataParagraphGenericsAndRecursiveInheritanceGraphs { get; }
    public static string ArgumentIsNotUsedInFormatStringMessage { get; }
    public static string ArgumentIsNotUsedInMessageTemplateMessage { get; }
    public static string FormatItemIndexMustBeANumberStartingWithoutLeadingOrTrailingWhitespacesMessage { get; }
    public static string FormatStringItemAlignmentIsNotANumberMessage { get; }
    public static string FormatStringSyntaxErrorsUnescapedBracesInvalidIdicesAlignmentsUnusedArgumentsEtcAndOtherFormattingMethodInvocationProblems { get; }
    public static string FormattingIsSpecifiedButArgumentIsNotIFormattableMessage { get; }
    public static string Name_DoesNotMatchRule_SuggestedName_Text { get; }
    public static string NamespaceDoesNotCorrespondToFileLocation { get; }
    public static string NamespaceDoesNotCorrespondToFileLocationShouldBeMessage { get; }
    public static string NamespaceInFileDoesNotHaveAFormOfProjectDefaultNamespacePlusFolderNamesInThePathToFileYouCanConfigureWhichFoldersParticipateInNamespaceBuildingProcessOnTheFoldersPropertiesPage { get; }
    public static string NonExistingArgumentInFormatStringMessage { get; }
    public static string NonExistingArgumentInMessageTemplateMessage { get; }
    public static string PassStringInterpolationExpression { get; }
    public static string PassStringInterpolationMessage { get; }
    public static string PossibleInfiniteInheritance { get; }
    public static string PossibleInfiniteInheritanceMessage { get; }
    public static string ReplaceFormattingMethodArgumentsByPassingStringInterpolationExpression { get; }
    public static string ReplaceStringConstructionByStringFormatMethodInvocationWithStringInterpolationExpression { get; }
    public static string StringFormattingMethodProblems { get; }
    public static string StructuredMessageTemplateProblems { get; }
    public static string StructuredMessageTemplateSyntaxErrorsUnescapedBracesUnusedArgumentsEtc { get; }
    public static string ToStringCallCouldBeReplacedWithFormatSpecifier { get; }
    public static string UnmatchedClosingBraceInFormatStringMessage { get; }
    public static string UnmatchedClosingBraceInMessageTemplateMessage { get; }
    public static string UnmatchedOpeningBraceInFormatStringMessage { get; }
    public static string UnmatchedOpeningBraceInMessageTemplateMessage { get; }
    public static string UseFormatSpecifierInFormatStrings { get; }
    public static string UseFormatSpecifierMessage { get; }
    public static string UseStringInterpolationExpression { get; }
    public static string UseStringInterpolationExpressionMessage { get; }
    public static string UseStringInterpolationExpressionWhenPossible { get; }
    public static string UseStringInterpolationSettingConvertToStringInterpolationWhenPossibleDescription { get; }
    public static string UseStringInterpolationSettingConvertToStringInterpolationWhenPossibleTitle { get; }
    public static string InconsistentNaming_Text { get; }
    public static string NameDoesnTMatchNamingStyleDefinedFor_Text { get; }
    public static string NamingStyle_Text { get; }
    public static string TypeHasBaseTypes_Text { get; }
    public static string TypeHasBase_Text { get; }
    public static string MemberImplementsInterfaces_Text { get; }
    public static string MemberImplementsInterface_Text { get; }
    public static string HighlightingTypesGroup_Title { get; }
    public static string UnregisteredHighlightingType_Title { get; }
    public static string UnregisteredHighlightingType_Description { get; }
    public static string UnregisteredHighlightingType_Message { get; }
    public static string RedundantHighlightingType_Title { get; }
    public static string RedundantHighlightingType_Description { get; }
    public static string RedundantHighlightingType_Message { get; }
    public static string MultipleHighlightingSourceAttributes_Title { get; }
    public static string MultipleHighlightingSourceAttributes_Description { get; }
    public static string MultipleHighlightingSourceAttributes_Message { get; }
    public static string MissingHighlightingSourceAttribute_Title { get; }
    public static string MissingHighlightingSourceAttribute_Description { get; }
    public static string MissingHighlightingSourceAttribute_Message { get; }
    public static string MultipleHighlightingSourceContracts_Title { get; }
    public static string MultipleHighlightingSourceContracts_Description { get; }
    public static string MultipleHighlightingSourceContracts_Message { get; }
    public static string HighlightingSourceContractViolation_Title { get; }
    public static string HighlightingSourceContractViolation_Description { get; }
    public static string HighlightingSourceContractViolation_Message { get; }
    public static string HighlightingSourceContractViolationOnBaseClass_Title { get; }
    public static string HighlightingSourceContractViolationOnBaseClass_Description { get; }
    public static string HighlightingSourceContractViolationOnBaseClass_Message { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_TODOHighlightings_Text();
    public static string get_TypeIsImplemented_Text();
    public static string get_TypeIsInherited_Text();
    public static string get__NCTRLClickToFollowLink_Text();
    public static string get_AccordingToECMAPartIIMetadataParagraphGenericsAndRecursiveInheritanceGraphs();
    public static string get_ArgumentIsNotUsedInFormatStringMessage();
    public static string get_ArgumentIsNotUsedInMessageTemplateMessage();
    public static string get_FormatItemIndexMustBeANumberStartingWithoutLeadingOrTrailingWhitespacesMessage();
    public static string get_FormatStringItemAlignmentIsNotANumberMessage();
    public static string get_FormatStringSyntaxErrorsUnescapedBracesInvalidIdicesAlignmentsUnusedArgumentsEtcAndOtherFormattingMethodInvocationProblems();
    public static string get_FormattingIsSpecifiedButArgumentIsNotIFormattableMessage();
    public static string get_Name_DoesNotMatchRule_SuggestedName_Text();
    public static string get_NamespaceDoesNotCorrespondToFileLocation();
    public static string get_NamespaceDoesNotCorrespondToFileLocationShouldBeMessage();
    public static string get_NamespaceInFileDoesNotHaveAFormOfProjectDefaultNamespacePlusFolderNamesInThePathToFileYouCanConfigureWhichFoldersParticipateInNamespaceBuildingProcessOnTheFoldersPropertiesPage();
    public static string get_NonExistingArgumentInFormatStringMessage();
    public static string get_NonExistingArgumentInMessageTemplateMessage();
    public static string get_PassStringInterpolationExpression();
    public static string get_PassStringInterpolationMessage();
    public static string get_PossibleInfiniteInheritance();
    public static string get_PossibleInfiniteInheritanceMessage();
    public static string get_ReplaceFormattingMethodArgumentsByPassingStringInterpolationExpression();
    public static string get_ReplaceStringConstructionByStringFormatMethodInvocationWithStringInterpolationExpression();
    public static string get_StringFormattingMethodProblems();
    public static string get_StructuredMessageTemplateProblems();
    public static string get_StructuredMessageTemplateSyntaxErrorsUnescapedBracesUnusedArgumentsEtc();
    public static string get_ToStringCallCouldBeReplacedWithFormatSpecifier();
    public static string get_UnmatchedClosingBraceInFormatStringMessage();
    public static string get_UnmatchedClosingBraceInMessageTemplateMessage();
    public static string get_UnmatchedOpeningBraceInFormatStringMessage();
    public static string get_UnmatchedOpeningBraceInMessageTemplateMessage();
    public static string get_UseFormatSpecifierInFormatStrings();
    public static string get_UseFormatSpecifierMessage();
    public static string get_UseStringInterpolationExpression();
    public static string get_UseStringInterpolationExpressionMessage();
    public static string get_UseStringInterpolationExpressionWhenPossible();
    public static string get_UseStringInterpolationSettingConvertToStringInterpolationWhenPossibleDescription();
    public static string get_UseStringInterpolationSettingConvertToStringInterpolationWhenPossibleTitle();
    public static string get_InconsistentNaming_Text();
    public static string get_NameDoesnTMatchNamingStyleDefinedFor_Text();
    public static string get_NamingStyle_Text();
    public static string get_TypeHasBaseTypes_Text();
    public static string get_TypeHasBase_Text();
    public static string get_MemberImplementsInterfaces_Text();
    public static string get_MemberImplementsInterface_Text();
    public static string get_HighlightingTypesGroup_Title();
    public static string get_UnregisteredHighlightingType_Title();
    public static string get_UnregisteredHighlightingType_Description();
    public static string get_UnregisteredHighlightingType_Message();
    public static string get_RedundantHighlightingType_Title();
    public static string get_RedundantHighlightingType_Description();
    public static string get_RedundantHighlightingType_Message();
    public static string get_MultipleHighlightingSourceAttributes_Title();
    public static string get_MultipleHighlightingSourceAttributes_Description();
    public static string get_MultipleHighlightingSourceAttributes_Message();
    public static string get_MissingHighlightingSourceAttribute_Title();
    public static string get_MissingHighlightingSourceAttribute_Description();
    public static string get_MissingHighlightingSourceAttribute_Message();
    public static string get_MultipleHighlightingSourceContracts_Title();
    public static string get_MultipleHighlightingSourceContracts_Description();
    public static string get_MultipleHighlightingSourceContracts_Message();
    public static string get_HighlightingSourceContractViolation_Title();
    public static string get_HighlightingSourceContractViolation_Description();
    public static string get_HighlightingSourceContractViolation_Message();
    public static string get_HighlightingSourceContractViolationOnBaseClass_Title();
    public static string get_HighlightingSourceContractViolationOnBaseClass_Description();
    public static string get_HighlightingSourceContractViolationOnBaseClass_Message();
}
public static class JetBrains.ReSharper.Daemon.Specific.TodoItems.TodoHighlightingAttributeIds : object {
    public static string NONE_ITEM;
    public static string EDIT_ITEM;
    public static string EDIT_ITEM_ERROR_STRIPE;
    public static string ERROR_ITEM;
    public static string ERROR_ITEM_ERROR_STRIPE;
    public static string NORMAL_ITEM;
    public static string NORMAL_ITEM_ERROR_STRIPE;
    public static string QUESTION_ITEM;
    public static string QUESTION_ITEM_ERROR_STRIPE;
    public static string WARNING_ITEM;
    public static string WARNING_ITEM_ERROR_STRIPE;
    public static string HYPERLINK;
}
[RegisterHighlighterAttribute("ReSharper Todo Item None")]
[RegisterHighlighterAttribute("ReSharper Todo Item Edit")]
[RegisterHighlighterAttribute("ReSharper Todo Item Edit Marker on Error Stripe")]
[RegisterHighlighterAttribute("ReSharper Todo Item Error")]
[RegisterHighlighterAttribute("ReSharper Todo Item Error Marker on Error Stripe")]
[RegisterHighlighterAttribute("ReSharper Todo Item Normal")]
[RegisterHighlighterAttribute("ReSharper Todo Item Normal Marker on Error Stripe")]
[RegisterHighlighterAttribute("ReSharper Todo Item Question")]
[RegisterHighlighterAttribute("ReSharper Todo Item Question Marker on Error Stripe")]
[RegisterHighlighterAttribute("ReSharper Todo Item Warning")]
[RegisterHighlighterAttribute("ReSharper Todo Item Warning Marker on Error Stripe")]
[RegisterHighlighterAttribute("ReSharper Todo Item Hyperlink")]
[RegisterStaticHighlightingsGroupAttribute("JetBrains.ReSharper.Daemon.Specific.Resources.Strings", "TODOHighlightings_Text", "False")]
public static class JetBrains.ReSharper.Daemon.Specific.TodoItems.TODOHighlightings : object {
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Daemon.Specific.TodoItems.TODOHighlightings")]
[DaemonTooltipProviderAttribute("JetBrains.ReSharper.Daemon.Impl.ErrorStripeTooltipProvider")]
public class JetBrains.ReSharper.Daemon.Specific.TodoItems.TodoItemEditHighlighting : TodoItemHighlightingBase {
    public TodoItemEditHighlighting(ITodoItem item, DocumentRange documentRange);
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Daemon.Specific.TodoItems.TODOHighlightings")]
[DaemonTooltipProviderAttribute("JetBrains.ReSharper.Daemon.Impl.ErrorStripeTooltipProvider")]
public class JetBrains.ReSharper.Daemon.Specific.TodoItems.TodoItemErrorHighlighting : TodoItemHighlightingBase {
    public TodoItemErrorHighlighting(ITodoItem item, DocumentRange documentRange);
}
public abstract class JetBrains.ReSharper.Daemon.Specific.TodoItems.TodoItemHighlightingBase : object {
    private DocumentRange myDocumentRange;
    [CompilerGeneratedAttribute]
private ITodoItem <Item>k__BackingField;
    public ITodoItem Item { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    protected TodoItemHighlightingBase(ITodoItem item, DocumentRange documentRange);
    [CompilerGeneratedAttribute]
public ITodoItem get_Item();
    public virtual string get_ToolTip();
    public virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Daemon.Specific.TodoItems.TODOHighlightings")]
public class JetBrains.ReSharper.Daemon.Specific.TodoItems.TodoItemHyperlinkHighlighting : TodoItemHighlightingBase {
    [CompilerGeneratedAttribute]
private Uri <TodoUri>k__BackingField;
    public Uri TodoUri { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public TodoItemHyperlinkHighlighting(ITodoItem item, DocumentRange tagRange, Uri todoUri);
    [CompilerGeneratedAttribute]
public Uri get_TodoUri();
    public virtual string get_ToolTip();
    public virtual string get_ErrorStripeToolTip();
}
[HyperlinkProviderAttribute("0", "16")]
internal class JetBrains.ReSharper.Daemon.Specific.TodoItems.TodoItemHyperlinkProvider : TodoItemHyperlinkProviderBase {
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private IDocumentMarkupManager myDocumentMarkupManager;
    public TodoItemHyperlinkProvider(ISolution solution, IDocumentMarkupManager documentMarkupManager);
    public virtual TodoItemHyperlink TryGetTodoItemHyperlinkAt(DocumentOffset documentOffset);
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Daemon.Specific.TodoItems.TODOHighlightings")]
[DaemonTooltipProviderAttribute("JetBrains.ReSharper.Daemon.Impl.ErrorStripeTooltipProvider")]
public class JetBrains.ReSharper.Daemon.Specific.TodoItems.TodoItemNoneHighlighting : TodoItemHighlightingBase {
    public TodoItemNoneHighlighting(ITodoItem item, DocumentRange documentRange);
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Daemon.Specific.TodoItems.TODOHighlightings")]
[DaemonTooltipProviderAttribute("JetBrains.ReSharper.Daemon.Impl.ErrorStripeTooltipProvider")]
public class JetBrains.ReSharper.Daemon.Specific.TodoItems.TodoItemNormalHighlighting : TodoItemHighlightingBase {
    public TodoItemNormalHighlighting(ITodoItem item, DocumentRange documentRange);
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Daemon.Specific.TodoItems.TODOHighlightings")]
[DaemonTooltipProviderAttribute("JetBrains.ReSharper.Daemon.Impl.ErrorStripeTooltipProvider")]
public class JetBrains.ReSharper.Daemon.Specific.TodoItems.TodoItemQuestionHighlighting : TodoItemHighlightingBase {
    public TodoItemQuestionHighlighting(ITodoItem item, DocumentRange documentRange);
}
[DaemonStageAttribute("0")]
public class JetBrains.ReSharper.Daemon.Specific.TodoItems.TodoItemsDaemonStage : object {
    [NotNullAttribute]
private HighlightingSettingsManager mySettingsManager;
    [NotNullAttribute]
private PsiProjectFileTypeCoordinator myCoordinator;
    [NotNullAttribute]
private IPrimaryTodoManager myTodoManager;
    public TodoItemsDaemonStage(IPrimaryTodoManager todoManager, HighlightingSettingsManager settingsManager, PsiProjectFileTypeCoordinator coordinator);
    public sealed virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
}
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.Specific.TodoItems.TodoItemsDaemonStageProcess : object {
    private PsiProjectFileTypeCoordinator myCoordinator;
    private IDaemonProcess myProcess;
    private IPrimaryTodoManager myTodoManager;
    public IDaemonProcess DaemonProcess { get; }
    public TodoItemsDaemonStageProcess(IDaemonProcess process, IPrimaryTodoManager todoManager, PsiProjectFileTypeCoordinator coordinator);
    public sealed virtual IDaemonProcess get_DaemonProcess();
    public sealed virtual void Execute(Action`1<DaemonStageResult> committer);
    [NotNullAttribute]
[PureAttribute]
private static IHighlighting CreateTodoHighlighting(ITodoItem item, TodoRegexMatcher matcher, DocumentRange documentRange);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.Specific.TodoItems.TodoItemsHighlighterInvalidator : object {
    public TodoItemsHighlighterInvalidator(Lifetime lifetime, IPrimaryTodoManager todoManager, DaemonBase daemon);
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Daemon.Specific.TodoItems.TODOHighlightings")]
[DaemonTooltipProviderAttribute("JetBrains.ReSharper.Daemon.Impl.ErrorStripeTooltipProvider")]
public class JetBrains.ReSharper.Daemon.Specific.TodoItems.TodoItemWarningHighlighting : TodoItemHighlightingBase {
    public TodoItemWarningHighlighting(ITodoItem item, DocumentRange documentRange);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Daemon.Specific.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
