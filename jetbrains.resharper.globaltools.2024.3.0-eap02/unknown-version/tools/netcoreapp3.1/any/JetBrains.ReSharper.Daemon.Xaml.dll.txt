public class JetBrains.ReSharper.Daemon.Xaml.AssemblyReferenceClass_DaemonXaml : AssemblyReferenceClass_PsiResx {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CodeCleanupModuleAttribute]
public class JetBrains.ReSharper.Daemon.Xaml.CodeCleanup.XamlRemoveRedundantCodeCleanupModule : HighlightingCleanupModule {
    public static CodeCleanupOptionDescriptor`1<bool> REMOVE_REDUNDANT_NAMESPACE_ALIAS;
    public static CodeCleanupOptionDescriptor`1<bool> REMOVE_REDUNDANT_FREEZE_ATTRIBUTE;
    public static CodeCleanupOptionDescriptor`1<bool> REMOVE_REDUNDANT_MODIFIERS_ATTRIBUTE;
    public static CodeCleanupOptionDescriptor`1<bool> REMOVE_REDUNDANT_NAME_ATTRIBUTE;
    public static CodeCleanupOptionDescriptor`1<bool> REMOVE_REDUNDANT_RESOURCE;
    public static CodeCleanupOptionDescriptor`1<bool> REMOVE_REDUNDANT_COLLECTION_PROPERTY;
    public static CodeCleanupOptionDescriptor`1<bool> REMOVE_REDUNDANT_ATTACHED_PROPERTY_SETTER;
    public static CodeCleanupOptionDescriptor`1<bool> REMOVE_REDUNDANT_STYLED_VALUE;
    public static CodeCleanupOptionDescriptor`1<bool> REMOVE_FORBIDDEN_RESOURCE_NAME;
    public static CodeCleanupOptionDescriptor`1<bool> REMOVE_REDUNDANT_GRID_DEFINITIONS_ATTRIBUTE;
    public static CodeCleanupOptionDescriptor`1<bool> REMOVE_REDUNDANT_UPDATE_SOURCE_TRIGGER_ATTRIBUTE;
    public static CodeCleanupOptionDescriptor`1<bool> REMOVE_REDUNDANT_BINDING_MODE_ATTRIBUTE;
    public static CodeCleanupOptionDescriptor`1<bool> REMOVE_REDUNDANT_GRID_SPAN_ATTRIBUTE;
    private static CodeCleanupOptionDescriptor`1[] ALL_DESCRIPTORS;
    public string Name { get; }
    public ICollection`1<CodeCleanupOptionDescriptor> Descriptors { get; }
    public PsiLanguageType LanguageType { get; }
    private static XamlRemoveRedundantCodeCleanupModule();
    public virtual string get_Name();
    public virtual ICollection`1<CodeCleanupOptionDescriptor> get_Descriptors();
    public virtual PsiLanguageType get_LanguageType();
    public virtual void SetDefaultSetting(CodeCleanupProfile profile, DefaultProfileType profileType);
    public virtual bool IsAvailable(CodeCleanupProfile profile);
}
[ContainsContextConsumerAttribute]
public class JetBrains.ReSharper.Daemon.Xaml.ContextHighlighters.XamlMatchingBracesContextHighlighter : ContainingBracesContextHighlighterBase`1<XamlLanguage> {
    [CanBeNullAttribute]
[AsyncContextConsumerAttribute]
public static Action ProcessDataContext(Lifetime lifetime, IPsiDocumentRangeView psiDocumentRangeView, InvisibleBraceHintManager invisibleBraceHintManager, MatchingBraceSuggester matchingBraceSuggester, MatchingBraceConsumerFactory consumerFactory, HighlightingProlongedLifetime prolongedLifetime);
    protected virtual void CollectHighlightings(IPsiView psiView, MatchingHighlightingsConsumer consumer);
}
[ConfigurableSeverityHighlightingAttribute("Xaml.FieldModifierRequiresNameAttribute", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Errors.FieldModifierRequiresNameAttributeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IModifiersAttribute <Attribute>k__BackingField;
    public IModifiersAttribute Attribute { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public FieldModifierRequiresNameAttributeWarning(IModifiersAttribute attribute);
    [CompilerGeneratedAttribute]
public IModifiersAttribute get_Attribute();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[RegisterConfigurableSeverityAttribute("ObsoleteElement", "", "", "", "CompilerWarnings", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "UseOfObsoleteTypeOrTypeMember", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "UseOfObsoleteTypeOrTypeMemberInXAMLMarkup", "4")]
[RegisterConfigurableSeverityAttribute("ObsoleteElementError", "", "", "", "CompilerWarnings", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "UseOfObsoleteTypeOrTypeMemberError", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "UseOfObsoleteTypeOrTypeMemberInXAMLMarkupError", "5")]
[RegisterConfigurableSeverityAttribute("Xaml.DuplicateStyleSetter", "", "", "", "CodeSmell", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "DuplicateStylePropertyEventSetter", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "DuplicateStylePropertyEventSetter", "4")]
[RegisterConfigurableSeverityAttribute("Xaml.StyleInvalidTargetType", "", "", "", "CodeSmell", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "StyleTargetTypeIsNotConvertibleToBaseType", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "StyleDeclarationTargetTypeIsNotConvertibleToStyleBaseType", "5")]
[RegisterConfigurableSeverityAttribute("Xaml.XKeyAttributeDisallowed", "", "", "", "CodeSmell", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "XKeyIsAllowedForResourcesAndDictionaryElementsOnly", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "XKeyIsAllowedForResourcesAndDictionaryElementsOnly", "5")]
[RegisterConfigurableSeverityAttribute("Xaml.RedundantFreezeAttribute", "", "", "", "CodeRedundancy", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "RedundantFreezeAttribute", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "FreezeAttributeIsNotUsedAndCanBeSafelyRemoved", "4")]
[RegisterConfigurableSeverityAttribute("Xaml.RedundantModifiersAttribute", "", "", "", "CodeRedundancy", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "RedundantModifiersAttribute", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "AccessibilitySetByAttributeCoincidesWithDefaultOneThusAttributeCanBeSafelyRemoved", "4")]
[RegisterConfigurableSeverityAttribute("Xaml.RedundantNameAttribute", "", "", "", "CodeRedundancy", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "RedundantNameAttribute", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "NameAttributeInResourceDeclarationIsNeglectableAndCanBeSafelyRemoved", "4")]
[RegisterConfigurableSeverityAttribute("Xaml.RedundantNamespaceAlias", "", "", "", "CodeRedundancy", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "RedundantNamespaceAlias", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "NamespaceAliasIsNotRequiredByCodeAndCanBeSafelyRemoved", "4")]
[RegisterConfigurableSeverityAttribute("Xaml.RedundantResource", "", "", "", "CodeRedundancy", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "RedundantResource", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "ResourceIsNotUsedAndCanBeSafelyRemoved", "4")]
[RegisterConfigurableSeverityAttribute("Xaml.RedundantPropertyTypeQualifier", "", "", "", "CodeRedundancy", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "RedundantPropertyTypeQualifier", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "PropertyOwnerTypeQualifierIsRedundantAndCanBeSafelyRemoved", "4")]
[RegisterConfigurableSeverityAttribute("Xaml.RedundantCollectionProperty", "", "", "", "CodeRedundancy", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "RedundantEmptyCollectionPropertySetter", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "EmptyCollectionPropertySetterIsRedundantAndCanBeSafelyRemoved", "4")]
[RegisterConfigurableSeverityAttribute("Xaml.RedundantAttachedProperty", "", "", "", "CodeRedundancy", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "RemoveRedundantAttachedPropertySetter", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "AttachedPropertySetterHasNoEffectInCurrentContextAndCanBeRemoved", "4")]
[RegisterConfigurableSeverityAttribute("Xaml.RedundantStyledValue", "", "", "", "CodeRedundancy", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "PropertyValueIsEqualToStyleProvided", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "PropertyValueIsEqualToValueProvidedByExplicitStyleAndCanBeRemoved", "4")]
[RegisterConfigurableSeverityAttribute("Xaml.FieldModifierRequiresNameAttribute", "", "", "", "CodeInfo", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "XFieldModifierAttributeRequiresXNameAttribute", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "XFieldModifierAttributeRequiresXNameAttribute", "4")]
public class JetBrains.ReSharper.Daemon.Xaml.Errors.RegisterSeverityComponent131A9FD4BB391D7C2CC3A49207B22C929287053E22AF3B4137755B6E8FDFDF1F : object {
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Errors.XamlAccessRightsError : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IReference <Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IReference Reference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public XamlAccessRightsError(IReference reference);
    [CompilerGeneratedAttribute]
public IReference get_Reference();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("ObsoleteElementError", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Errors.XamlObsoleteElementError : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IReference <Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ObsoleteMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IReference Reference { get; }
    public string ObsoleteMessage { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public XamlObsoleteElementError(IReference reference, string obsoleteMessage);
    [CompilerGeneratedAttribute]
public IReference get_Reference();
    [CompilerGeneratedAttribute]
public string get_ObsoleteMessage();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("ObsoleteElement", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Errors.XamlObsoleteElementWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IReference <Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ObsoleteMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IReference Reference { get; }
    public string ObsoleteMessage { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public XamlObsoleteElementWarning(IReference reference, string obsoleteMessage);
    [CompilerGeneratedAttribute]
public IReference get_Reference();
    [CompilerGeneratedAttribute]
public string get_ObsoleteMessage();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("Xaml.RedundantAttachedProperty", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Errors.XamlRedundantAttachedPropertySetterWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IType <OwnerType>k__BackingField;
    [CompilerGeneratedAttribute]
private IPropertySetter <PropertySetter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IType OwnerType { get; }
    public IPropertySetter PropertySetter { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public XamlRedundantAttachedPropertySetterWarning(IType ownerType, IPropertySetter propertySetter);
    [CompilerGeneratedAttribute]
public IType get_OwnerType();
    [CompilerGeneratedAttribute]
public IPropertySetter get_PropertySetter();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("Xaml.RedundantCollectionProperty", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Errors.XamlRedundantCollectionPropertyWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IXamlPropertyElement <PropertyElement>k__BackingField;
    public IXamlPropertyElement PropertyElement { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public XamlRedundantCollectionPropertyWarning(IXamlPropertyElement propertyElement);
    [CompilerGeneratedAttribute]
public IXamlPropertyElement get_PropertyElement();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("Xaml.RedundantFreezeAttribute", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Errors.XamlRedundantFreezeAttributeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IXamlAttribute <FreezeAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IXamlAttribute FreezeAttribute { get; }
    public string Message { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public XamlRedundantFreezeAttributeWarning(IXamlAttribute freezeAttribute, string message);
    [CompilerGeneratedAttribute]
public IXamlAttribute get_FreezeAttribute();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("Xaml.RedundantModifiersAttribute", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Errors.XamlRedundantModifiersAttributeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IModifiersAttribute <ModifiersAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFieldModifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IModifiersAttribute ModifiersAttribute { get; }
    public bool IsFieldModifier { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public XamlRedundantModifiersAttributeWarning(IModifiersAttribute modifiersAttribute, bool isFieldModifier);
    [CompilerGeneratedAttribute]
public IModifiersAttribute get_ModifiersAttribute();
    [CompilerGeneratedAttribute]
public bool get_IsFieldModifier();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("Xaml.RedundantNameAttribute", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Errors.XamlRedundantNameAttributeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IXamlAttribute <NameAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IXamlAttribute NameAttribute { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public XamlRedundantNameAttributeWarning(IXamlAttribute nameAttribute);
    [CompilerGeneratedAttribute]
public IXamlAttribute get_NameAttribute();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("Xaml.RedundantNamespaceAlias", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Errors.XamlRedundantNamespaceAliasWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private INamespaceAlias <NamespaceAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<INamespaceAlias> <AllUnused>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public INamespaceAlias NamespaceAlias { get; }
    public IList`1<INamespaceAlias> AllUnused { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public XamlRedundantNamespaceAliasWarning(INamespaceAlias namespaceAlias, IList`1<INamespaceAlias> allUnused);
    [CompilerGeneratedAttribute]
public INamespaceAlias get_NamespaceAlias();
    [CompilerGeneratedAttribute]
public IList`1<INamespaceAlias> get_AllUnused();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("Xaml.RedundantPropertyTypeQualifier", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Errors.XamlRedundantPropertyTypeQualifierWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IQualifiableReference <TypeReference>k__BackingField;
    [CompilerGeneratedAttribute]
private IReference <PropertyReference>k__BackingField;
    public IQualifiableReference TypeReference { get; }
    public IReference PropertyReference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public XamlRedundantPropertyTypeQualifierWarning(IQualifiableReference typeReference, IReference propertyReference);
    [CompilerGeneratedAttribute]
public IQualifiableReference get_TypeReference();
    [CompilerGeneratedAttribute]
public IReference get_PropertyReference();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    private static DocumentRange CalculateRange(IQualifiableReference typeReference, IReference propertyReference);
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("Xaml.RedundantResource", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Errors.XamlRedundantResourceWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IResourceDeclaration <ResourceDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IResourceDeclaration ResourceDeclaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public XamlRedundantResourceWarning(IResourceDeclaration resourceDeclaration);
    [CompilerGeneratedAttribute]
public IResourceDeclaration get_ResourceDeclaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    [NotNullAttribute]
private string GetResourceName();
    private DocumentRange GetSmartHighlightingRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("Xaml.RedundantStyledValue", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Errors.XamlRedundantStyledValueWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITreeNode <PropertySetter>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlResource <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ITreeNode> <AllUnusedProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITreeNode PropertySetter { get; }
    public IXamlResource Resource { get; }
    public IList`1<ITreeNode> AllUnusedProperties { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public XamlRedundantStyledValueWarning(ITreeNode propertySetter, IXamlResource resource, IList`1<ITreeNode> allUnusedProperties);
    [CompilerGeneratedAttribute]
public ITreeNode get_PropertySetter();
    [CompilerGeneratedAttribute]
public IXamlResource get_Resource();
    [CompilerGeneratedAttribute]
public IList`1<ITreeNode> get_AllUnusedProperties();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("Xaml.DuplicateStyleSetter", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Errors.XamlStyleDuplicateSetterWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IXamlObjectElement <Setter>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaredElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private ISubstitution <Substitution>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IXamlObjectElement Setter { get; }
    public IDeclaredElement Element { get; }
    public ISubstitution Substitution { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public XamlStyleDuplicateSetterWarning(IXamlObjectElement setter, IDeclaredElement element, ISubstitution substitution);
    [CompilerGeneratedAttribute]
public IXamlObjectElement get_Setter();
    [CompilerGeneratedAttribute]
public IDeclaredElement get_Element();
    [CompilerGeneratedAttribute]
public ISubstitution get_Substitution();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("Xaml.StyleInvalidTargetType", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Errors.XamlStyleInvalidTargetTypeError : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITreeNode <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IType <TargetType>k__BackingField;
    [CompilerGeneratedAttribute]
private IType <BasedOnStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private IReference <TargetTypeReference>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITreeNode Context { get; }
    public IType TargetType { get; }
    public IType BasedOnStyle { get; }
    public IReference TargetTypeReference { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public XamlStyleInvalidTargetTypeError(ITreeNode context, IType targetType, IType basedOnStyle, IReference targetTypeReference);
    [CompilerGeneratedAttribute]
public ITreeNode get_Context();
    [CompilerGeneratedAttribute]
public IType get_TargetType();
    [CompilerGeneratedAttribute]
public IType get_BasedOnStyle();
    [CompilerGeneratedAttribute]
public IReference get_TargetTypeReference();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("Xaml.XKeyAttributeDisallowed", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Errors.XamlXKeyAttributeDisallowedError : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITreeNode <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITreeNode Element { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public XamlXKeyAttributeDisallowedError(ITreeNode element);
    [CompilerGeneratedAttribute]
public ITreeNode get_Element();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Errors.XamlXKeyAttributeRequiredError : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private IResourceDeclaration <ResourceDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IResourceDeclaration ResourceDeclaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public XamlXKeyAttributeRequiredError(IResourceDeclaration resourceDeclaration);
    [CompilerGeneratedAttribute]
public IResourceDeclaration get_ResourceDeclaration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Errors.XamlXmlnsDefinedInTheSameProjectCannotBeReferencedError : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private INamespaceAlias <NamespaceAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public INamespaceAlias NamespaceAlias { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public XamlXmlnsDefinedInTheSameProjectCannotBeReferencedError(INamespaceAlias namespaceAlias);
    [CompilerGeneratedAttribute]
public INamespaceAlias get_NamespaceAlias();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[StaticSeverityHighlightingAttribute("4", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Errors.XamlXmlnsDefinedInTheSameProjectCannotBeReferencedWarning : object {
    private string MESSAGE;
    [CompilerGeneratedAttribute]
private INamespaceAlias <NamespaceAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public INamespaceAlias NamespaceAlias { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public XamlXmlnsDefinedInTheSameProjectCannotBeReferencedWarning(INamespaceAlias namespaceAlias);
    [CompilerGeneratedAttribute]
public INamespaceAlias get_NamespaceAlias();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlCornerRadiusArgumentInlayHintAdornmentProvider : object {
    private ISolution mySolution;
    private ISettingsStore mySettingsStore;
    public XamlCornerRadiusArgumentInlayHintAdornmentProvider(ISolution solution, ISettingsStore settingsStore);
    public sealed virtual bool IsValid(IHighlighter highlighter);
    public sealed virtual IAdornmentDataModel CreateDataModel(IHighlighter highlighter);
}
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlCornerRadiusArgumentInlayHintDataModel : XamlInlayHintDataModelBase`2<XamlCornerRadiusArgumentInlayHintHighlighting, XamlInlayHintsOptions2> {
    public XamlCornerRadiusArgumentInlayHintDataModel(ISolution solution, ISettingsStore settingsStore, XamlCornerRadiusArgumentInlayHintHighlighting highlighting);
}
[DaemonAdornmentProviderAttribute("JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlCornerRadiusArgumentInlayHintAdornmentProvider")]
[DaemonTooltipProviderAttribute("JetBrains.ReSharper.Feature.Services.InlayHints.InlayHintTooltipProvider")]
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IntraTextAdornments")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlCornerRadiusArgumentInlayHintHighlighting : XamlInlayHintHighlightingBase {
    public XamlCornerRadiusArgumentInlayHintHighlighting(DocumentOffset documentOffset, string text, PushToHintMode mode);
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IntraTextAdornments")]
[DaemonTooltipProviderAttribute("")]
[InlayHintContextActionStyleAttribute("JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "XamlCornerRadiusArgumentHints_Text", "True")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlCornerRadiusHintContextActionHighlighting : XamlInlayHintContextActionHighlighting {
    public XamlCornerRadiusHintContextActionHighlighting(DocumentRange range);
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IntraTextAdornments")]
[DaemonTooltipProviderAttribute("")]
[InlayHintContextActionStyleAttribute("JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "XamlDataContextHints_Text", "True")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlDataContextHintContextActionHighlighting : XamlInlayHintContextActionHighlighting {
    public XamlDataContextHintContextActionHighlighting(DocumentRange range);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlDataContextInlayHintAdornmentProvider : object {
    private ISolution mySolution;
    private ISettingsStore mySettingsStore;
    public XamlDataContextInlayHintAdornmentProvider(ISolution solution, ISettingsStore settingsStore);
    public sealed virtual bool IsValid(IHighlighter highlighter);
    public sealed virtual IAdornmentDataModel CreateDataModel(IHighlighter highlighter);
}
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlDataContextInlayHintDataModel : XamlInlayHintDataModelBase`2<XamlDataContextInlayHintHighlighting, XamlInlayHintsOptions2> {
    public XamlDataContextInlayHintDataModel(ISolution solution, ISettingsStore settingsStore, XamlDataContextInlayHintHighlighting highlighting);
    public virtual void ExecuteNavigation(PopupWindowContextSource popupWindowContextSource);
    protected virtual IList`1<BulbMenuItem> BuildContextMenuItems();
    [CompilerGeneratedAttribute]
private void <BuildContextMenuItems>b__2_0();
}
[DaemonAdornmentProviderAttribute("JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlDataContextInlayHintAdornmentProvider")]
[DaemonTooltipProviderAttribute("JetBrains.ReSharper.Feature.Services.InlayHints.InlayHintTooltipProvider")]
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IntraTextAdornments")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlDataContextInlayHintHighlighting : XamlInlayHintHighlightingBase {
    [CompilerGeneratedAttribute]
private ITypePointer <TypePointer>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPreceding>k__BackingField;
    public ITypePointer TypePointer { get; }
    public RichText Description { get; }
    public bool IsPreceding { get; }
    public XamlDataContextInlayHintHighlighting(DocumentOffset documentOffset, ITypePointer typePointer, string text, RichText description, bool isPreceding, PushToHintMode mode);
    [CompilerGeneratedAttribute]
public ITypePointer get_TypePointer();
    [CompilerGeneratedAttribute]
public virtual RichText get_Description();
    [CompilerGeneratedAttribute]
public bool get_IsPreceding();
}
[InlayHintContextActionProviderAttribute("JetBrains.ProjectModel.KnownProjectFileType", "16")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlHintContextActionsProvider : InlayHintContextActionsProvider`1<XamlInlayHintContextActionHighlighting> {
    private ISettingsStore mySettingsStore;
    public XamlHintContextActionsProvider(ISettingsStore settingsStore);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlHintContextActionsProvider/<GetPerHighlightingActions>d__2")]
public virtual IEnumerable`1<IntentionAction> GetPerHighlightingActions(IEnumerable`1<IInlayHintContextActionHighlighting> highlightings, IAnchor configureAnchor, IAnchor configureParentAnchor);
    public virtual IEnumerable`1<IntentionAction> GetCommonActions(IEnumerable`1<IInlayHintContextActionHighlighting> highlightings, IAnchor configureAnchor);
    public virtual string GetOptionsPageId(IEnumerable`1<IInlayHintContextActionHighlighting> highlightings);
}
[DaemonTooltipProviderAttribute("")]
public abstract class JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlInlayHintContextActionHighlighting : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression`1<Func`2<XamlInlayHintsOptions2, PushToHintMode>> <Option>k__BackingField;
    private DocumentRange myRange;
    public string Title { get; }
    public Expression`1<Func`2<XamlInlayHintsOptions2, PushToHintMode>> Option { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public string TestOutput { get; }
    protected XamlInlayHintContextActionHighlighting(DocumentRange range, string title, Expression`1<Func`2<XamlInlayHintsOptions2, PushToHintMode>> option);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public Expression`1<Func`2<XamlInlayHintsOptions2, PushToHintMode>> get_Option();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual string get_TestOutput();
}
public abstract class JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlInlayHintDataModelBase`2 : object {
    private ISolution mySolution;
    private ISettingsStore mySettingsStore;
    [CompilerGeneratedAttribute]
private THighlighting <Highlighting>k__BackingField;
    [NotNullAttribute]
private Expression`1<Func`2<TKeyClass, PushToHintMode>> myLambdaexpression;
    private IList`1<BulbMenuItem> myContextMenuItems;
    [CompilerGeneratedAttribute]
private AdornmentData <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private IPresentableItem <ContextMenuTitle>k__BackingField;
    protected THighlighting Highlighting { get; }
    public AdornmentData Data { get; }
    public IPresentableItem ContextMenuTitle { get; }
    public IEnumerable`1<BulbMenuItem> ContextMenuItems { get; }
    public Nullable`1<TextRange> SelectionRange { get; }
    protected XamlInlayHintDataModelBase`2(ISolution solution, ISettingsStore settingsStore, THighlighting highlighting, string contextMenuTitle, Expression`1<Func`2<TKeyClass, PushToHintMode>> lambdaexpression, bool isPreceding, bool isNavigable, Nullable`1<int> orderOverride);
    [CompilerGeneratedAttribute]
protected THighlighting get_Highlighting();
    [CompilerGeneratedAttribute]
public sealed virtual AdornmentData get_Data();
    [CompilerGeneratedAttribute]
public sealed virtual IPresentableItem get_ContextMenuTitle();
    public sealed virtual IEnumerable`1<BulbMenuItem> get_ContextMenuItems();
    public virtual Nullable`1<TextRange> get_SelectionRange();
    protected virtual IList`1<BulbMenuItem> BuildContextMenuItems();
    public virtual void ExecuteNavigation(PopupWindowContextSource popupWindowContextSource);
    [CompilerGeneratedAttribute]
private void <BuildContextMenuItems>b__18_0();
}
public abstract class JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlInlayHintHighlightingBase : object {
    [CompilerGeneratedAttribute]
private PushToHintMode <Mode>k__BackingField;
    protected DocumentRange myDocumentRange;
    protected string myText;
    public PushToHintMode Mode { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public RichText Description { get; }
    public string TestOutput { get; }
    public RichText Text { get; }
    public Nullable`1<TextRange> SelectionRange { get; }
    protected XamlInlayHintHighlightingBase(DocumentOffset documentOffset, string text, PushToHintMode mode);
    [CompilerGeneratedAttribute]
public PushToHintMode get_Mode();
    public virtual string get_ToolTip();
    public virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
    public virtual RichText get_Description();
    public sealed virtual string get_TestOutput();
    public RichText get_Text();
    public Nullable`1<TextRange> get_SelectionRange();
}
public static class JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlInlayHintOrder : object {
    public static int TopPriority;
    public static int BottomPriority;
    public static int DataContext;
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IntraTextAdornments")]
[DaemonTooltipProviderAttribute("")]
[InlayHintContextActionStyleAttribute("JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "XamlMarkupAttributeNameHints_Text", "True")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlMarkupAttributeNameHintContextActionHighlighting : XamlInlayHintContextActionHighlighting {
    public XamlMarkupAttributeNameHintContextActionHighlighting(DocumentRange range);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlMarkupAttributeNameInlayHintAdornmentProvider : object {
    private ISolution mySolution;
    private ISettingsStore mySettingsStore;
    public XamlMarkupAttributeNameInlayHintAdornmentProvider(ISolution solution, ISettingsStore settingsStore);
    public sealed virtual bool IsValid(IHighlighter highlighter);
    public sealed virtual IAdornmentDataModel CreateDataModel(IHighlighter highlighter);
}
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlMarkupAttributeNameInlayHintDataModel : XamlInlayHintDataModelBase`2<XamlMarkupAttributeNameInlayHintHighlighting, XamlInlayHintsOptions2> {
    public XamlMarkupAttributeNameInlayHintDataModel(ISolution solution, ISettingsStore settingsStore, XamlMarkupAttributeNameInlayHintHighlighting highlighting);
}
[DaemonAdornmentProviderAttribute("JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlMarkupAttributeNameInlayHintAdornmentProvider")]
[DaemonTooltipProviderAttribute("JetBrains.ReSharper.Feature.Services.InlayHints.InlayHintTooltipProvider")]
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IntraTextAdornments")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlMarkupAttributeNameInlayHintHighlighting : XamlInlayHintHighlightingBase {
    public XamlMarkupAttributeNameInlayHintHighlighting(DocumentOffset documentOffset, string text, PushToHintMode mode);
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IntraTextAdornments")]
[DaemonTooltipProviderAttribute("")]
[InlayHintContextActionStyleAttribute("JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "XamlMissingGridIndexHints_Text", "True")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlMissingGridIndexHintContextActionHighlighting : XamlInlayHintContextActionHighlighting {
    public XamlMissingGridIndexHintContextActionHighlighting(DocumentRange range);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlMissingGridIndexInlayHintAdornmentProvider : object {
    private ISettingsStore mySettingsStore;
    private ISolution mySolution;
    private IQuickFixes myQuickFixes;
    private ITextControlManager myTextControlManager;
    public XamlMissingGridIndexInlayHintAdornmentProvider(ISettingsStore settingsStore, ISolution solution, IQuickFixes quickFixes, ITextControlManager textControlManager);
    public sealed virtual bool IsValid(IHighlighter highlighter);
    public sealed virtual IAdornmentDataModel CreateDataModel(IHighlighter highlighter);
}
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlMissingGridIndexInlayHintDataModel : XamlInlayHintDataModelBase`2<XamlMissingGridIndexInlayHintHighlighting, XamlInlayHintsOptions2> {
    private ISolution mySolution;
    private IQuickFixes myQuickFixes;
    private ITextControlManager myTextControlManager;
    public XamlMissingGridIndexInlayHintDataModel(ISettingsStore settingsStore, XamlMissingGridIndexInlayHintHighlighting highlighting, ISolution solution, IQuickFixes quickFixes, ITextControlManager textControlManager);
    protected virtual IList`1<BulbMenuItem> BuildContextMenuItems();
}
[DaemonAdornmentProviderAttribute("JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlMissingGridIndexInlayHintAdornmentProvider")]
[DaemonTooltipProviderAttribute("JetBrains.ReSharper.Feature.Services.InlayHints.InlayHintTooltipProvider")]
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IntraTextAdornments")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlMissingGridIndexInlayHintHighlighting : XamlInlayHintHighlightingBase {
    [CompilerGeneratedAttribute]
private XamlMissingGridIndexHighlighting <MissingGridIndexHighlighting>k__BackingField;
    public XamlMissingGridIndexHighlighting MissingGridIndexHighlighting { get; }
    public XamlMissingGridIndexInlayHintHighlighting(DocumentOffset documentOffset, string text, XamlMissingGridIndexHighlighting missingGridIndexHighlighting, PushToHintMode mode);
    [CompilerGeneratedAttribute]
public XamlMissingGridIndexHighlighting get_MissingGridIndexHighlighting();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlThicknessArgumentInlayHintAdornmentProvider : object {
    private ISolution mySolution;
    private ISettingsStore mySettingsStore;
    public XamlThicknessArgumentInlayHintAdornmentProvider(ISolution solution, ISettingsStore settingsStore);
    public sealed virtual bool IsValid(IHighlighter highlighter);
    public sealed virtual IAdornmentDataModel CreateDataModel(IHighlighter highlighter);
}
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlThicknessArgumentInlayHintDataModel : XamlInlayHintDataModelBase`2<XamlThicknessArgumentInlayHintHighlighting, XamlInlayHintsOptions2> {
    public XamlThicknessArgumentInlayHintDataModel(ISolution solution, ISettingsStore settingsStore, XamlThicknessArgumentInlayHintHighlighting highlighting);
}
[DaemonAdornmentProviderAttribute("JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlThicknessArgumentInlayHintAdornmentProvider")]
[DaemonTooltipProviderAttribute("JetBrains.ReSharper.Feature.Services.InlayHints.InlayHintTooltipProvider")]
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IntraTextAdornments")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlThicknessArgumentInlayHintHighlighting : XamlInlayHintHighlightingBase {
    public XamlThicknessArgumentInlayHintHighlighting(DocumentOffset documentOffset, string text, PushToHintMode mode);
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IntraTextAdornments")]
[DaemonTooltipProviderAttribute("")]
[InlayHintContextActionStyleAttribute("JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "XamlThicknessArgumentHints_Text", "True")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.Inlay.XamlThicknessAttributeHintContextActionHighlighting : XamlInlayHintContextActionHighlighting {
    public XamlThicknessAttributeHintContextActionHighlighting(DocumentRange range);
}
public interface JetBrains.ReSharper.Daemon.Xaml.Highlightings.IXamlHighlighting {
}
[RegisterConfigurableSeverityAttribute("Xaml.AvaloniaWrongBindingModeForStreamBindingOperator", "", "", "", "CodeInfo", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "UsingStreamBindingOperatorInTwoWayOr_TitleText", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "UsingStreamBindingOperatorInTwoWayOr_DescriptionText", "4")]
[ConfigurableSeverityHighlightingAttribute("Xaml.AvaloniaWrongBindingModeForStreamBindingOperator", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlAvaloniaWrongBindingModeForStreamBindingHighlighting : XamlHighlightingBase {
    [CompilerGeneratedAttribute]
private IBindingMarkup <Binding>k__BackingField;
    public static string SEVERITY_ID;
    public IBindingMarkup Binding { get; }
    public XamlAvaloniaWrongBindingModeForStreamBindingHighlighting(IBindingMarkup binding);
    [CompilerGeneratedAttribute]
public IBindingMarkup get_Binding();
    private static string GetTooltip(IBindingMarkup binding);
    public virtual DocumentRange CalculateRange();
}
[RegisterConfigurableSeverityAttribute("Xaml.BindingWithoutContextNotResolved", "", "", "", "CodeInfo", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "UnresolvedBindingPathWhenContextIsUnknown_TitleText", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "UnresolvedBindingPathNotSpecified_DescriptionText", "2")]
[RegisterConfigurableSeverityAttribute("Xaml.BindingWithContextNotResolved", "", "", "", "CodeInfo", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "UnresolvedBindingPathWhenContextIsKnown_TitleText", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "UnresolvedBindingPathWhenContextIsKnown_DescriptionText", "4")]
[ConfigurableSeverityHighlightingAttribute("Xaml.BindingWithContextNotResolved", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlBindingWithContextNotResolvedHighlighting : XamlNotResolvedLateBoundHighlighting {
    public IBinding BindingElement;
    public IXamlObjectElement ObjectElementWithDataContext;
    public static string SEVERITY_ID;
    public XamlBindingWithContextNotResolvedHighlighting(IReference reference, IBinding binding, IXamlObjectElement objectElementWithDataContext);
    private static string CreateTooltip(IReference reference);
}
[ConfigurableSeverityHighlightingAttribute("Xaml.BindingWithoutContextNotResolved", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlBindingWithoutContextNotResolvedHighlighting : XamlNotResolvedLateBoundHighlighting {
    public IBinding BindingElement;
    public IXamlObjectElement UpperContextElement;
    public static string SEVERITY_ID;
    public XamlBindingWithoutContextNotResolvedHighlighting(IReference reference, IBinding bindingElement, IXamlObjectElement upperContextElement);
    private static string CreateTooltip(IReference reference);
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlCompiledBindingNotResolvedHighlighting : XamlResolveErrorHighlighting {
    public XamlCompiledBindingNotResolvedHighlighting(IReference reference);
    private static string CreateTooltip(IReference reference);
}
[RegisterConfigurableSeverityAttribute("Xaml.ConstructorWarning", "", "", "", "CodeInfo", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "ConstructorNotResolved_Text", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "ConstructorNotResolved_Text", "4")]
[ConfigurableSeverityHighlightingAttribute("Xaml.ConstructorWarning", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlConstructorWarningHiglighting : XamlResolveErrorHighlightingBase {
    private static string SEVERITY_ID;
    public XamlConstructorWarningHiglighting(IXamlConstructorReference reference);
    private static string CreateTooltip(IXamlFunctionReference reference);
}
[RegisterConfigurableSeverityAttribute("Xaml.DependencyPropertyResolveError", "", "", "", "CodeInfo", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "DependencyPropertyDescriptorFieldMissing_TitleText", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "DependencyPropertyDescriptorFieldMissing_DescriptionText", "4")]
[ConfigurableSeverityHighlightingAttribute("Xaml.DependencyPropertyResolveError", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlDependencyPropertyWarningHighlighting : XamlReferenceErrorHighlighting {
    public static string SEVERITY_ID;
    public XamlDependencyPropertyWarningHighlighting(IReference reference);
}
[RegisterConfigurableSeverityAttribute("Xaml.XamlDuplicateDeviceFamilyTypeViewHighlighting", "", "", "", "CodeSmell", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "DuplicateDeviceFamilyView_Text", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "DuplicateDeviceFamilyView_Text", "5")]
[ConfigurableSeverityHighlightingAttribute("Xaml.XamlDuplicateDeviceFamilyTypeViewHighlighting", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlDuplicateDeviceFamilyTypeViewHighlighting : XamlHighlightingBase {
    private DocumentRange myDocumentRange;
    public static string SEVERITY_ID;
    [CompilerGeneratedAttribute]
private IXamlTypeDeclaration <TypeDeclaration>k__BackingField;
    public IXamlTypeDeclaration TypeDeclaration { get; }
    public XamlDuplicateDeviceFamilyTypeViewHighlighting(IXamlTypeDeclaration typeDeclaration, DocumentRange documentRange);
    [CompilerGeneratedAttribute]
public IXamlTypeDeclaration get_TypeDeclaration();
    public virtual DocumentRange CalculateRange();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlDuplicatedTypeDeclarationHighlighting : XamlHighlightingBase {
    private DocumentRange myRange;
    [CompilerGeneratedAttribute]
private IXamlTypeDeclaration <TypeDeclaration>k__BackingField;
    public IXamlTypeDeclaration TypeDeclaration { get; }
    public XamlDuplicatedTypeDeclarationHighlighting(IXamlTypeDeclaration typeDeclaration, DocumentRange range);
    [CompilerGeneratedAttribute]
public IXamlTypeDeclaration get_TypeDeclaration();
    public virtual bool IsValid();
    public virtual DocumentRange CalculateRange();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlDuplicatedTypeMemberDeclarationHighlighting : XamlHighlightingBase {
    private DocumentRange myRange;
    [CompilerGeneratedAttribute]
private ITypeMemberDeclaration <MemberDeclaration>k__BackingField;
    public ITypeMemberDeclaration MemberDeclaration { get; }
    public XamlDuplicatedTypeMemberDeclarationHighlighting(ITypeMemberDeclaration memberDeclaration, DocumentRange range);
    [CompilerGeneratedAttribute]
public ITypeMemberDeclaration get_MemberDeclaration();
    public virtual bool IsValid();
    public virtual DocumentRange CalculateRange();
}
[RegisterConfigurableSeverityAttribute("Xaml.DynamicResourceError", "", "", "", "CodeInfo", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "DynamicResourceCanOnlyBeUsedWithDependency_Text", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "DynamicResourceCanOnlyBeUsedWithDependencyProperty_Text", "5")]
[ConfigurableSeverityHighlightingAttribute("Xaml.DynamicResourceError", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlDynamicResourceNotAllowedErrorHighlighting : XamlHighlightingBase {
    private DocumentRange myRange;
    public static string SEVERITY_ID;
    [CompilerGeneratedAttribute]
private IResourceUsage <ResourceUsage>k__BackingField;
    [NotNullAttribute]
public IResourceUsage ResourceUsage { get; }
    public XamlDynamicResourceNotAllowedErrorHighlighting(IResourceUsage resourceUsage, DocumentRange range);
    [CompilerGeneratedAttribute]
public IResourceUsage get_ResourceUsage();
    public virtual bool IsValid();
    public virtual DocumentRange CalculateRange();
}
[RegisterConfigurableSeverityAttribute("Xaml.ElementNameReferenceNotResolved", "", "", "", "CodeInfo", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "ElementNameReferenceNotResolved_Text", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "ElementNameReferenceNotResolvedToAny_Text", "5")]
[ConfigurableSeverityHighlightingAttribute("Xaml.ElementNameReferenceNotResolved", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlElementNameReferenceNotResolvedHiglighting : XamlHighlightingBase {
    private DocumentRange myRange;
    public static string SEVERITY_ID;
    public XamlElementNameReferenceNotResolvedHiglighting(string elementName, string scopeName, DocumentRange range);
    public XamlElementNameReferenceNotResolvedHiglighting(string elementName, DocumentRange range);
    public virtual DocumentRange CalculateRange();
}
[RegisterConfigurableSeverityAttribute("Xaml.EmptyGridLengthDefinition", "", "", "", "CodeInfo", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "GridLengthDefinitionShouldNotBeEmpty_Text", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "GridLengthDefinitionShouldNotBeEmpty_Text", "5")]
[ConfigurableSeverityHighlightingAttribute("Xaml.EmptyGridLengthDefinition", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlEmptyGridLengthDefinitionHighlighting : XamlHighlightingBase {
    [NotNullAttribute]
private IXmlAttributeValue myAttributeValue;
    private TreeTextRange myRangeWithin;
    public static string SEVERITY_ID;
    public XamlEmptyGridLengthDefinitionHighlighting(IXmlAttributeValue attributeValue, TreeTextRange rangeWithin);
    public virtual bool IsValid();
    public virtual DocumentRange CalculateRange();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlErrorHighlighting : XamlHighlightingBase {
    private DocumentRange myRange;
    public XamlErrorHighlighting(string toolTip, DocumentRange range);
    [StringFormatMethodAttribute("toolTipFormat")]
public XamlErrorHighlighting(string toolTipFormat, DocumentRange range, Object[] args);
    public virtual bool IsValid();
    public virtual DocumentRange CalculateRange();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlEventHandlerNotResolvedError : XamlNotResolvedError {
    public XamlEventHandlerNotResolvedError(IReference reference);
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlEventHandlerSignatureError : XamlResolveErrorHighlighting {
    public XamlEventHandlerSignatureError(IReference reference);
}
[RegisterConfigurableSeverityAttribute("Xaml.GridDefinitionsCanBeConvertedToAttribute", "", "", "", "CodeInfo", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "GridColumnsRowsDefinitionsCanBeConverted_Text", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "GridColumnsRowsDefinitionsCanBeConverted_Text", "2")]
[ConfigurableSeverityHighlightingAttribute("Xaml.GridDefinitionsCanBeConvertedToAttribute", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlGridDefinitionsCanBeConvertedToAttributeHighlighting : XamlHighlightingBase {
    public static string SEVERITY_ID;
    [CompilerGeneratedAttribute]
private IXamlObjectElement <GridElement>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlPropertyElement <DefinitionElement>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefinitionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MeaningfulPropertyName>k__BackingField;
    [NotNullAttribute]
public IXamlObjectElement GridElement { get; }
    [NotNullAttribute]
public IXamlPropertyElement DefinitionElement { get; }
    [NotNullAttribute]
public string DefinitionName { get; public set; }
    [NotNullAttribute]
public string MeaningfulPropertyName { get; public set; }
    public XamlGridDefinitionsCanBeConvertedToAttributeHighlighting(IXamlObjectElement gridElement, IXamlPropertyElement definitionElement, string definitionName, string meaningfulPropertyName);
    [CompilerGeneratedAttribute]
public IXamlObjectElement get_GridElement();
    [CompilerGeneratedAttribute]
public IXamlPropertyElement get_DefinitionElement();
    [CompilerGeneratedAttribute]
public string get_DefinitionName();
    [CompilerGeneratedAttribute]
public void set_DefinitionName(string value);
    [CompilerGeneratedAttribute]
public string get_MeaningfulPropertyName();
    [CompilerGeneratedAttribute]
public void set_MeaningfulPropertyName(string value);
    public virtual bool IsValid();
    public virtual DocumentRange CalculateRange();
}
[RegisterConfigurableSeverityAttribute("Xaml.IndexOutOfGridDefinition", "", "", "", "CodeSmell", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "GridElementColumnRowIndexIsOutOfGrid_Text", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "GridElementColumnRowIndexIsOutOfGrid_Text", "4")]
[ConfigurableSeverityHighlightingAttribute("Xaml.IndexOutOfGridDefinition", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlGridIndexOutOfRangeHighlighting : XamlHighlightingBase {
    private DocumentRange myDocumentRange;
    public static string SEVERITY_ID;
    [CompilerGeneratedAttribute]
private IXamlObjectElement <GridElement>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefinitionName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Span>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Range>k__BackingField;
    [NotNullAttribute]
public IXamlObjectElement GridElement { get; }
    [NotNullAttribute]
public string DefinitionName { get; public set; }
    public int Index { get; public set; }
    public Nullable`1<int> Span { get; public set; }
    public int Range { get; public set; }
    public XamlGridIndexOutOfRangeHighlighting(IXamlObjectElement gridElement, string definitionName, int index, Nullable`1<int> span, int range, DocumentRange documentRange);
    [CompilerGeneratedAttribute]
public IXamlObjectElement get_GridElement();
    [CompilerGeneratedAttribute]
public string get_DefinitionName();
    [CompilerGeneratedAttribute]
public void set_DefinitionName(string value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Span();
    [CompilerGeneratedAttribute]
public void set_Span(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public int get_Range();
    [CompilerGeneratedAttribute]
public void set_Range(int value);
    public virtual bool IsValid();
    public virtual DocumentRange CalculateRange();
}
public static class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlHighlighterGroup : object {
    private static string XAML_GROUP_PREFIX;
    public static string DEMO_TEXT;
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlHighlightingAttributeIdProvider : XmlHighlightingAttributeIdProvider {
    public virtual string GetHighlightingAttributeId(IDeclaredElement declaredElement, bool isDeclaration);
    protected virtual string GetHighlightAttributeForTypeElement(ITypeElement typeElement);
}
[RegisterHighlighterGroupAttribute("XAML", "Xaml", "3")]
[RegisterHighlighterAttribute("ReSharper Xaml Field")]
[RegisterHighlighterAttribute("ReSharper Xaml Template Field")]
[RegisterHighlighterAttribute("ReSharper Xaml Implicit Field")]
[RegisterHighlighterAttribute("ReSharper Xaml Class")]
[RegisterHighlighterAttribute("ReSharper Xaml Style Class")]
[RegisterHighlighterAttribute("ReSharper Xaml Predefined Element")]
[RegisterHighlighterAttribute("ReSharper Xaml Property Identifier")]
[RegisterHighlighterAttribute("ReSharper Xaml Attached Property Identifier")]
[RegisterHighlighterAttribute("ReSharper Xaml Namespace Alias")]
[RegisterHighlighterAttribute("ReSharper Xaml Resource")]
public static class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlHighlightingAttributeIds : object {
    public static string FIELD;
    public static string IMPLICIT_FIELD;
    public static string TEMPLATE_FIELD;
    public static string CLASS;
    public static string STYLE_CLASS;
    public static string PREDEFINED_ELEMENT;
    public static string PROPERTY;
    public static string ATTACHED_PROPERTY;
    public static string NAMESPACE_ALIAS;
    public static string RESOURCE;
}
public abstract class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlHighlightingBase : object {
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public string ToolTip { get; protected set; }
    public string ErrorStripeToolTip { get; }
    protected XamlHighlightingBase(string toolTip);
    [StringFormatMethodAttribute("toolTipFormat")]
protected XamlHighlightingBase(string toolTipFormat, Object[] args);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    [CompilerGeneratedAttribute]
protected void set_ToolTip(string value);
    public sealed virtual string get_ErrorStripeToolTip();
    public virtual bool IsValid();
    public abstract virtual DocumentRange CalculateRange();
}
[DaemonTooltipProviderAttribute("JetBrains.ReSharper.Daemon.Xaml.Stages.XamlIdentifierTooltipProvider")]
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IdentifierHighlightings")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlIdentifierHighlighting : XmlIdentifierHighlighting {
    public XamlIdentifierHighlighting(string attributeId, DocumentRange documentRange);
}
[RegisterConfigurableSeverityAttribute("Xaml.IgnoredPathHighlighting", "", "", "", "CodeInfo", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "IgnoredPath_Text", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "PathIsIgnoredInProjectSettings_Text", "0")]
[ConfigurableSeverityHighlightingAttribute("Xaml.IgnoredPathHighlighting", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlIgnoredPathHighlighting : XamlResolveErrorHighlighting {
    public static string SEVERITY_ID;
    public XamlIgnoredPathHighlighting(IPathReference pathReference);
}
[RegisterConfigurableSeverityAttribute("Xaml.InvalidDynamicResourceType", "", "CodeInfo", "XAML dynamic resource of invalid type", "XAML dynamic resource of invalid type", "3")]
[ConfigurableSeverityHighlightingAttribute("Xaml.InvalidDynamicResourceType", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlInvalidDynamicResourceTypeErrorHighlighting : XamlInvalidTypeErrorBase`1<IResourceReference> {
    private static string SEVERITY_ID;
    public XamlInvalidDynamicResourceTypeErrorHighlighting(IResourceReference reference);
    protected virtual IType GetActualType(IResourceReference reference);
    protected virtual IList`1<IType> GetExpectedTypes(IResourceReference reference);
}
[RegisterConfigurableSeverityAttribute("Xaml.InvalidMemberType", "", "CodeInfo", "Member of invalid type", "Member of invalid type", "5")]
[ConfigurableSeverityHighlightingAttribute("Xaml.InvalidMemberType", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlInvalidMemberTypeErrorHighlighting : XamlInvalidTypeErrorBase`1<ITypeMemberReference> {
    public static string SEVERITY_ID;
    public XamlInvalidMemberTypeErrorHighlighting(ITypeMemberReference reference);
    protected virtual string GetReason(ITypeMemberReference reference);
    protected virtual IType GetActualType(ITypeMemberReference reference);
    protected virtual IList`1<IType> GetExpectedTypes(ITypeMemberReference reference);
}
[RegisterConfigurableSeverityAttribute("Xaml.InvalidResourceTargetType", "", "CodeInfo", "XAML style of invalid target type", "XAML style of invalid target type", "5")]
[ConfigurableSeverityHighlightingAttribute("Xaml.InvalidResourceTargetType", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlInvalidResourceTargetTypeErrorHighlighting : XamlInvalidTypeErrorBase`1<IResourceReference> {
    public static string SEVERITY_ID;
    public XamlInvalidResourceTargetTypeErrorHighlighting(IResourceReference reference, IType expectedType);
    protected virtual string GetReason(IResourceReference reference);
    protected virtual IType GetActualType(IResourceReference reference);
}
[RegisterConfigurableSeverityAttribute("Xaml.InvalidResourceType", "", "CodeInfo", "XAML resource of invalid type", "XAML resource of invalid type", "5")]
[ConfigurableSeverityHighlightingAttribute("Xaml.InvalidResourceType", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlInvalidResourceTypeErrorHighlighting : XamlInvalidTypeErrorBase`1<IResourceReference> {
    public static string SEVERITY_ID;
    public XamlInvalidResourceTypeErrorHighlighting(IResourceReference reference);
    protected virtual IType GetActualType(IResourceReference reference);
    protected virtual IList`1<IType> GetExpectedTypes(IResourceReference reference);
}
public abstract class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlInvalidTypeErrorBase`1 : XamlResolveErrorHighlightingBase {
    protected XamlInvalidTypeErrorBase`1(TReference reference, IType[] expectedTypes);
    protected virtual string GetReason(TReference reference);
    [CanBeNullAttribute]
protected abstract virtual IType GetActualType(TReference reference);
    [NotNullAttribute]
protected virtual IList`1<IType> GetExpectedTypes(TReference reference);
    private string CreateInvalidTypeTooltip(TReference reference, IType[] types);
    protected virtual void PrintActualType(IType actualType, StringBuilder sb, PsiLanguageType language);
}
[RegisterConfigurableSeverityAttribute("Xaml.InvalidType", "", "CodeInfo", "Object/markup extension of invalid type", "Object/markup extension of invalid type", "5")]
[ConfigurableSeverityHighlightingAttribute("Xaml.InvalidType", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlInvalidTypeErrorHighlighting : XamlInvalidTypeErrorBase`1<IXamlTypeReference> {
    public static string SEVERITY_ID;
    public XamlInvalidTypeErrorHighlighting(IXamlTypeReference reference);
    protected virtual string GetReason(IXamlTypeReference reference);
    protected virtual IType GetActualType(IXamlTypeReference reference);
    protected virtual IList`1<IType> GetExpectedTypes(IXamlTypeReference reference);
    protected virtual void PrintActualType(IType actualType, StringBuilder sb, PsiLanguageType language);
}
[RegisterConfigurableSeverityAttribute("Xaml.LanguageLevel", "", "", "", "CodeSmell", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "XAMLLanguageLevelError_Text", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "XAML2009LanguageConstructIsNotAllowed_Text", "5")]
[ConfigurableSeverityHighlightingAttribute("Xaml.LanguageLevel", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlLanguageLevelErrorHighlighting : XamlHighlightingBase {
    private DocumentRange myRange;
    public static string ERROR_TOOLTIP;
    public static string SEVERITY_ID;
    [CompilerGeneratedAttribute]
private ITreeNode <Element>k__BackingField;
    public ITreeNode Element { get; }
    public XamlLanguageLevelErrorHighlighting(ITreeNode element, string tooltip, DocumentRange range);
    private static XamlLanguageLevelErrorHighlighting();
    [CompilerGeneratedAttribute]
public ITreeNode get_Element();
    public virtual bool IsValid();
    public virtual DocumentRange CalculateRange();
}
[ConfigurableSeverityHighlightingAttribute("Xaml.LanguageLevel", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlLanguageLevelResolveErrorHighlighting : XamlResolveErrorHighlightingBase {
    public XamlLanguageLevelResolveErrorHighlighting(IReference reference);
}
[RegisterConfigurableSeverityAttribute("Xaml.MappedPathHighlighting", "", "CodeInfo", "Mapped path", "Path is mapped to a different path in project settings", "2")]
[ConfigurableSeverityHighlightingAttribute("Xaml.MappedPathHighlighting", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlMappedPathHighlighting : XamlResolveErrorHighlighting {
    public static string SEVERITY_ID;
    public XamlMappedPathHighlighting(IPathReference pathReference);
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlMarkupPropertyStaticnessErrorHighlighting : XamlResolveErrorHighlightingBase {
    public XamlMarkupPropertyStaticnessErrorHighlighting(IMarkupPropertyReference reference);
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlMemberAccessErrorHighlighting : XamlHighlightingBase {
    [CompilerGeneratedAttribute]
private IReference <Reference>k__BackingField;
    private ITreeNode myAnchor;
    [CompilerGeneratedAttribute]
private AccessErrorType <ErrorType>k__BackingField;
    public IReference Reference { get; }
    public AccessErrorType ErrorType { get; }
    public XamlMemberAccessErrorHighlighting(IReference reference, ITreeNode anchor, AccessErrorType errorType);
    [CompilerGeneratedAttribute]
public IReference get_Reference();
    [CompilerGeneratedAttribute]
public AccessErrorType get_ErrorType();
    private static string GetTooltip(AccessErrorType errorType, ITreeNode anchor);
    public static XamlMemberAccessErrorHighlighting NoSetter(IReference reference, ITreeNode anchor);
    public static XamlMemberAccessErrorHighlighting NoGetter(IReference reference, ITreeNode anchor);
    public static XamlMemberAccessErrorHighlighting FieldIsReadonly(IReference reference, ITreeNode anchor);
    public static XamlMemberAccessErrorHighlighting SetterNotAccessible(IReference reference, ITreeNode anchor);
    public virtual DocumentRange CalculateRange();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlMethodErrorHiglighting : XamlResolveErrorHighlightingBase {
    public XamlMethodErrorHiglighting(IXamlMethodReference reference);
    private static string CreateTooltip(IXamlMethodReference methodReference);
}
[RegisterConfigurableSeverityAttribute("Xaml.XamlMismatchedDeviceFamilyViewClrNameHighlighting", "", "CodeSmell", "DeviceFamily-specific view type name does not match generic type name", "DeviceFamily-specific view type name does not match generic type name", "4")]
[ConfigurableSeverityHighlightingAttribute("Xaml.XamlMismatchedDeviceFamilyViewClrNameHighlighting", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlMismatchedDeviceFamilyViewClrNameHighlighting : XamlHighlightingBase {
    private DocumentRange myDocumentRange;
    [CompilerGeneratedAttribute]
private IXamlTypeDeclaration <TypeDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpectedName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NamespaceName>k__BackingField;
    public static string SEVERITY_ID;
    public IXamlTypeDeclaration TypeDeclaration { get; }
    public string ExpectedName { get; }
    public string Name { get; }
    public string NamespaceName { get; }
    public XamlMismatchedDeviceFamilyViewClrNameHighlighting(IXamlTypeDeclaration typeDeclaration, string expectedName, DocumentRange documentRange);
    [CompilerGeneratedAttribute]
public IXamlTypeDeclaration get_TypeDeclaration();
    [CompilerGeneratedAttribute]
public string get_ExpectedName();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_NamespaceName();
    public virtual DocumentRange CalculateRange();
}
[RegisterConfigurableSeverityAttribute("Xaml.MissingGridIndex", "", "", "", "CodeSmell", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "MissingGridColumnRowSetterForNonFirst_TitleText", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "MissingGridColumnRowSetterForNonFirst_DescriptionText", "4")]
[ConfigurableSeverityHighlightingAttribute("Xaml.MissingGridIndex", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlMissingGridIndexHighlighting : XamlHighlightingBase {
    public static string SEVERITY_ID;
    [CompilerGeneratedAttribute]
private IXamlObjectElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefinitionName>k__BackingField;
    [NotNullAttribute]
public IXamlObjectElement Element { get; public set; }
    [NotNullAttribute]
public string DefinitionName { get; }
    public XamlMissingGridIndexHighlighting(string definitionName, IXamlObjectElement element);
    public virtual DocumentRange CalculateRange();
    public virtual bool IsValid();
    [CompilerGeneratedAttribute]
public IXamlObjectElement get_Element();
    [CompilerGeneratedAttribute]
public void set_Element(IXamlObjectElement value);
    [CompilerGeneratedAttribute]
public string get_DefinitionName();
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/GutterMarks")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlNamespaceAliasMarkOnGutter : ClrInheritanceMarkOnGutterBase`1<IDeclaredElement> {
    public XamlNamespaceAliasMarkOnGutter(IDeclaration inheritor);
    protected virtual RichText FromName(IDeclaredElement declaredElement, bool shortName);
    protected virtual RichText FormatLocation(IDeclaredElement member);
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlNotResolvedError : XamlResolveErrorHighlighting {
    public XamlNotResolvedError(IReference reference);
    private static string GetTooltip(IReference reference);
}
public abstract class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlNotResolvedLateBoundHighlighting : XamlResolveErrorHighlighting {
    protected XamlNotResolvedLateBoundHighlighting(IReference reference, string tooltip);
}
[RegisterConfigurableSeverityAttribute("Xaml.AssignNullToNotNullAttribute", "", "", "", "ConstraintViolation", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "PossibleNullAssignmentToNonNullable_Text", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "AnExpressionWhichCanHaveNullValueIs_Text", "4")]
[ConfigurableSeverityHighlightingAttribute("Xaml.AssignNullToNotNullAttribute", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlNullAssignmentToNotNullableWarning : XamlHighlightingBase {
    private static string SEVERITY_ID;
    private ITreeNode myNode;
    public XamlNullAssignmentToNotNullableWarning(ITreeNode node);
    public virtual DocumentRange CalculateRange();
}
[RegisterConfigurableSeverityAttribute("Xaml.OverloadsCollision", "", "", "", "CodeInfo", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "MultipleOverloadsWithSameArgumentsCount_Text", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "MultipleOverloadsWithSameArgumentsCount_Text", "4")]
[ConfigurableSeverityHighlightingAttribute("Xaml.OverloadsCollision", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlOverloadsCollisionWarningHighlighting : XamlResolveErrorHighlightingBase {
    public static string SEVERITY_ID;
    public XamlOverloadsCollisionWarningHighlighting(IXamlXBindMethodReference reference);
    public virtual DocumentRange CalculateRange();
}
[RegisterConfigurableSeverityAttribute("Xaml.ParentIsOutOfCurrentComponentTree", "", "CodeInfo", "Parent is outside the current component tree", "Parent is outside the current component tree", "4")]
[ConfigurableSeverityHighlightingAttribute("Xaml.ParentIsOutOfCurrentComponentTree", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlParentIsOutOfCurrentComponentTreeWarning : object {
    private ITreeNode myTreeNode;
    public static string HIGHLIGHTING_ID;
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public XamlParentIsOutOfCurrentComponentTreeWarning(ITreeNode treeNode);
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
}
[RegisterConfigurableSeverityAttribute("Xaml.PathError", "", "CodeSmell", "Path error", "Path error", "4")]
[ConfigurableSeverityHighlightingAttribute("Xaml.PathError", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlPathReferenceError : XamlResolveErrorHighlighting {
    internal static string SEVERITY_ID;
    public XamlPathReferenceError(IPathReference pathReference);
}
[RegisterConfigurableSeverityAttribute("Xaml.PossibleNullReferenceException", "", "", "", "CodeSmell", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "PossibleNullValueInThePathOfBinding_Text", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "DereferencingAnExpressionWhichCanHave_Text", "3")]
[ConfigurableSeverityHighlightingAttribute("Xaml.PossibleNullReferenceException", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlPossibleNullReferenceExceptionWarning : XamlHighlightingBase {
    private static string SEVERITY_ID;
    private ITreeNode myNode;
    public XamlPossibleNullReferenceExceptionWarning(ITreeNode node);
    public virtual DocumentRange CalculateRange();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlPropertyIsAlreadySetHighlighting : XamlHighlightingBase {
    [CompilerGeneratedAttribute]
private IReference <Reference>k__BackingField;
    public IReference Reference { get; }
    public XamlPropertyIsAlreadySetHighlighting(IReference reference);
    [CompilerGeneratedAttribute]
public IReference get_Reference();
    public virtual bool IsValid();
    public virtual DocumentRange CalculateRange();
}
[RegisterConfigurableSeverityAttribute("Xaml.RedundantBindingModeAttribute", "", "CodeRedundancy", "Binding mode is equal to default", "Binding mode is equal to default", "4")]
[ConfigurableSeverityHighlightingAttribute("Xaml.RedundantBindingModeAttribute", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlRedundantBindingModeAttributeWarning : object {
    private BindingMode myMode;
    [CompilerGeneratedAttribute]
private IMarkupAttribute <Attribute>k__BackingField;
    public static string HIGHLIGHTING_ID;
    public IMarkupAttribute Attribute { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public XamlRedundantBindingModeAttributeWarning(IMarkupAttribute attribute, BindingMode mode);
    [CompilerGeneratedAttribute]
public IMarkupAttribute get_Attribute();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
}
public abstract class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlRedundantElementHighlightingBase : XmlHighlighting {
    [CompilerGeneratedAttribute]
private string <QuickFixText>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNode <UnusedElement>k__BackingField;
    [NotNullAttribute]
public string QuickFixText { get; }
    [NotNullAttribute]
public ITreeNode UnusedElement { get; }
    protected XamlRedundantElementHighlightingBase(string tooltipText, string quickFixText, ITreeNode element);
    [CompilerGeneratedAttribute]
public string get_QuickFixText();
    [CompilerGeneratedAttribute]
public ITreeNode get_UnusedElement();
    public virtual bool IsValid();
    public virtual DocumentRange CalculateRange();
}
[RegisterConfigurableSeverityAttribute("Xaml.RedundantGridDefinitions", "", "", "", "CodeRedundancy", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "SingleGridRowColumnDefinitionIsRedundant_Text", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "SingleGridRowColumnDefinitionIsRedundant_Text", "4")]
[ConfigurableSeverityHighlightingAttribute("Xaml.RedundantGridDefinitions", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlRedundantGridDefinitionsAttributeHighlighting : XamlRedundantElementHighlightingBase {
    public static string SEVERITY_ID;
    public XamlRedundantGridDefinitionsAttributeHighlighting(string definitionName, IXamlPropertyElement setter);
}
[RegisterConfigurableSeverityAttribute("Xaml.RedundantGridSpan", "", "", "", "CodeRedundancy", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "SingleCellGridColumnRowSpanIsRedundant_Text", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "SingleCellGridColumnRowSpanIsRedundant_Text", "4")]
[ConfigurableSeverityHighlightingAttribute("Xaml.RedundantGridSpan", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlRedundantGridSpanAttributeHighlighting : XamlRedundantElementHighlightingBase {
    public static string SEVERITY_ID;
    public XamlRedundantGridSpanAttributeHighlighting(string definitionName, IPropertySetter setter);
}
[RegisterConfigurableSeverityAttribute("Xaml.RedundantUpdateSourceTriggerAttribute", "", "CodeRedundancy", "UpdateSourceTrigger=Default is redundant", "UpdateSourceTrigger=Default is redundant", "4")]
[ConfigurableSeverityHighlightingAttribute("Xaml.RedundantUpdateSourceTriggerAttribute", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlRedundantUpdateSourceTriggerAttributeWarning : object {
    [CompilerGeneratedAttribute]
private IMarkupAttribute <Attribute>k__BackingField;
    public static string HIGHLIGHTING_ID;
    public IMarkupAttribute Attribute { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public XamlRedundantUpdateSourceTriggerAttributeWarning(IMarkupAttribute attribute);
    [CompilerGeneratedAttribute]
public IMarkupAttribute get_Attribute();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
}
[RegisterConfigurableSeverityAttribute("Xaml.RedundantXamarinFormsClassDeclaration", "", "CodeSmell", "Resource cannot be accessed by class name because of x:Key attribute", "Resource cannot be accessed by class name because of x:Key attribute", "4")]
[ConfigurableSeverityHighlightingAttribute("Xaml.RedundantXamarinFormsClassDeclaration", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlRedundantXamarinFormsClassDeclarationWarning : object {
    public static string SEVERITY_ID;
    [CompilerGeneratedAttribute]
private IXamarinFormsClassElement <XamarinFormsClassElement>k__BackingField;
    [CompilerGeneratedAttribute]
private IXKeyElement <XKeyElement>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IXamarinFormsClassElement XamarinFormsClassElement { get; }
    public IXKeyElement XKeyElement { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public XamlRedundantXamarinFormsClassDeclarationWarning(IXamarinFormsClassElement xamarinFormsClassElement, IXKeyElement xKeyElement);
    [CompilerGeneratedAttribute]
public IXamarinFormsClassElement get_XamarinFormsClassElement();
    [CompilerGeneratedAttribute]
public IXKeyElement get_XKeyElement();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlReferenceErrorHighlighting : XamlHighlightingBase {
    [CompilerGeneratedAttribute]
private IReference <Reference>k__BackingField;
    [NotNullAttribute]
public IReference Reference { get; }
    public XamlReferenceErrorHighlighting(IReference reference, string toolTip);
    [StringFormatMethodAttribute("toolTipFormat")]
public XamlReferenceErrorHighlighting(IReference reference, string toolTipFormat, String[] args);
    [CompilerGeneratedAttribute]
public IReference get_Reference();
    public virtual bool IsValid();
    public virtual DocumentRange CalculateRange();
}
[RegisterConfigurableSeverityAttribute("Xaml.XamlRelativeSourceDefaultModeWarningHighlighting", "", "CodeSmell", "RelativeSourceMode is not set explicitly", "Default RelativeSourceMode value is platform-specific, explicit specification is required to process RelativeSource usage unambiguously", "4")]
[ConfigurableSeverityHighlightingAttribute("Xaml.XamlRelativeSourceDefaultModeWarningHighlighting", "XAML")]
internal class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlRelativeSourceDefaultModeWarningHighlighting : XamlHighlightingBase {
    public static string SEVERITY_ID;
    [CompilerGeneratedAttribute]
private IRelativeSourceUsage <RelativeSourceUsage>k__BackingField;
    public IRelativeSourceUsage RelativeSourceUsage { get; }
    public XamlRelativeSourceDefaultModeWarningHighlighting(IRelativeSourceUsage relativeSourceUsage, DocumentRange range);
    [CompilerGeneratedAttribute]
public IRelativeSourceUsage get_RelativeSourceUsage();
    public virtual bool IsValid();
    public virtual DocumentRange CalculateRange();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlRelativeSourceErrorHighlighting : XamlHighlightingBase {
    [CompilerGeneratedAttribute]
private IRelativeSourceUsage <RelativeSourceUsage>k__BackingField;
    public IRelativeSourceUsage RelativeSourceUsage { get; }
    public XamlRelativeSourceErrorHighlighting(IRelativeSourceUsage relativeSourceUsage, string tooltip);
    [CompilerGeneratedAttribute]
public IRelativeSourceUsage get_RelativeSourceUsage();
    public virtual bool IsValid();
    public virtual DocumentRange CalculateRange();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlRelativeSourceParentAndIndexOrderErrorHighlighting : XamlHighlightingBase {
    [CompilerGeneratedAttribute]
private IRelativeSourceExpression <RelativeSourceExpression>k__BackingField;
    public IRelativeSourceExpression RelativeSourceExpression { get; }
    public XamlRelativeSourceParentAndIndexOrderErrorHighlighting(IRelativeSourceExpression relativeSourceExpression);
    [CompilerGeneratedAttribute]
public IRelativeSourceExpression get_RelativeSourceExpression();
    public virtual DocumentRange CalculateRange();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlResolveErrorHighlighting : XamlResolveErrorHighlightingBase {
    public XamlResolveErrorHighlighting(IReference reference);
    public XamlResolveErrorHighlighting(IReference reference, string tooltip);
}
public abstract class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlResolveErrorHighlightingBase : XamlHighlightingBase {
    [CompilerGeneratedAttribute]
private IReference <Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private ResolveErrorType <ErrorType>k__BackingField;
    public IReference Reference { get; }
    public ResolveErrorType ErrorType { get; }
    protected XamlResolveErrorHighlightingBase(IReference reference);
    protected XamlResolveErrorHighlightingBase(IReference reference, string tooltip);
    [CompilerGeneratedAttribute]
public IReference get_Reference();
    [CompilerGeneratedAttribute]
public ResolveErrorType get_ErrorType();
    public virtual DocumentRange CalculateRange();
    protected static string CreateTooltip(IReference reference, ResolveResultWithInfo resolveResultWithInfo);
    protected static string CreateTooltip(IReference reference);
    private static string CreateLanguageLevelTooltip(IReference reference);
    protected static string FormatResourceReference(IResourceReference resourceReference);
    public virtual bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlResolveFolderOrAssemblyErrorHiglighting : XamlResolveErrorHighlighting {
    public XamlResolveFolderOrAssemblyErrorHiglighting(IFolderOrAssemblyReference reference);
}
[RegisterConfigurableSeverityAttribute("Xaml.ResourceFilePathCaseMismatch", "", "", "", "CodeInfo", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "PathToResourceIsCaseSensitive_Text", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "PathToResourceIsCaseSensitive_Text", "4")]
[ConfigurableSeverityHighlightingAttribute("Xaml.ResourceFilePathCaseMismatch", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlResourceFilePathCaseMismatchErrorHighlighting : XamlHighlightingBase {
    [CompilerGeneratedAttribute]
private IReference <Reference>k__BackingField;
    public static string SEVERITY_ID;
    [NotNullAttribute]
public IReference Reference { get; }
    public XamlResourceFilePathCaseMismatchErrorHighlighting(IReference reference);
    [CompilerGeneratedAttribute]
public IReference get_Reference();
    public virtual DocumentRange CalculateRange();
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/GutterMarks")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlResourceMarkOnGutter : ClrInheritanceMarkOnGutterBase`1<IDeclaredElement> {
    public XamlResourceMarkOnGutter(IDeclaration inheritor);
    protected virtual RichText FromName(IDeclaredElement declaredElement, bool shortName);
    protected virtual RichText FormatLocation(IDeclaredElement member);
}
[RegisterConfigurableSeverityAttribute("Xaml.RoutedEventResolveError", "", "CodeInfo", "Routed event descriptor field missing", "Routed event descriptor field missing or implementation does not comply with Microsoft style guide", "4")]
[ConfigurableSeverityHighlightingAttribute("Xaml.RoutedEventResolveError", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlRoutedEventWarningHighlighting : XamlReferenceErrorHighlighting {
    public static string SEVERITY_ID;
    public XamlRoutedEventWarningHighlighting(IReference reference);
}
public static class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups : object {
}
[RegisterConfigurableSeverityAttribute("Xaml.StaticResourceNotResolved", "", "CodeInfo", "Static resource not resolved", "Static resource not resolved", "4")]
[ConfigurableSeverityHighlightingAttribute("Xaml.StaticResourceNotResolved", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticResourceNotResolvedHighlighting : XamlNotResolvedLateBoundHighlighting {
    public static string SEVERITY_ID;
    public IResourceReference Reference { get; }
    public XamlStaticResourceNotResolvedHighlighting(IResourceReference reference);
    public IResourceReference get_Reference();
    private static string CreateTooltip(IResourceReference reference);
}
[RegisterConfigurableSeverityAttribute("Xaml.StyleClassNotFound", "", "CodeInfo", "Style class not found", "Style class not found", "4")]
[ConfigurableSeverityHighlightingAttribute("Xaml.StyleClassNotFound", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStyleClassNotResolvedHighlighting : XamlHighlightingBase {
    public static string SEVERITY_ID;
    public static string Description;
    private IXamlStyleClassReference myReference;
    public XamlStyleClassNotResolvedHighlighting(IXamlStyleClassReference reference);
    private static string GetTooltip(IXamlStyleClassReference reference);
    public virtual DocumentRange CalculateRange();
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/GutterMarks")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStyleSetterResourceMarkOnGutter : object {
    private IPropertySetter mySetter;
    private DocumentRange myDocumentRange;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    [NotNullAttribute]
public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public string AttributeId { get; }
    public XamlStyleSetterResourceMarkOnGutter(IPropertySetter propertySetter, IXamlResource basedOnResource, DocumentRange documentRange);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual string get_AttributeId();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStyleSetterResourceMarkOnGutter/<GetBulbItems>d__12")]
public sealed virtual IEnumerable`1<BulbMenuItem> GetBulbItems();
    [CompilerGeneratedAttribute]
private void <GetBulbItems>b__12_0();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlTextAfterMarkupIsNotAllowedErrorHighlighting : XamlHighlightingBase {
    private DocumentRange myRange;
    public XamlTextAfterMarkupIsNotAllowedErrorHighlighting(DocumentRange range);
    public virtual DocumentRange CalculateRange();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlTextMissingHighlighting : XamlHighlightingBase {
    private DocumentRange myRange;
    [CompilerGeneratedAttribute]
private DocumentOffset <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TextToInsert>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNode <Element>k__BackingField;
    public DocumentOffset Offset { get; }
    public string TextToInsert { get; }
    public ITreeNode Element { get; }
    public XamlTextMissingHighlighting(ITreeNode element, DocumentOffset offset, string textToInsert, string tooltip, DocumentRange range);
    [CompilerGeneratedAttribute]
public DocumentOffset get_Offset();
    [CompilerGeneratedAttribute]
public string get_TextToInsert();
    [CompilerGeneratedAttribute]
public ITreeNode get_Element();
    public virtual bool IsValid();
    public virtual DocumentRange CalculateRange();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlTypeDeclarationAccessRightsErrorHighlighting : XamlHighlightingBase {
    private ITreeNode myAnchor;
    [CompilerGeneratedAttribute]
private IXamlTypeDeclaration <TypeDeclaration>k__BackingField;
    public IXamlTypeDeclaration TypeDeclaration { get; }
    public XamlTypeDeclarationAccessRightsErrorHighlighting(IXamlTypeDeclaration typeDeclaration, ITreeNode anchor);
    [CompilerGeneratedAttribute]
public IXamlTypeDeclaration get_TypeDeclaration();
    public virtual bool IsValid();
    public virtual DocumentRange CalculateRange();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlTypeNotResolvedError : XamlNotResolvedError {
    public XamlTypeNotResolvedError(IReference reference);
}
[RegisterConfigurableSeverityAttribute("Xaml.UnexpectedElement", "", "CodeSmell", "Unexpected element error", "Unexpected element error", "5")]
[ConfigurableSeverityHighlightingAttribute("Xaml.UnexpectedElement", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlUnexpectedElementHighlighting : XamlErrorHighlighting {
    public static string SEVERITY_ID;
    public XamlUnexpectedElementHighlighting(IXamlObjectElement element, string parentName);
}
[RegisterConfigurableSeverityAttribute("Xaml.UnexpectedTextToken", "", "CodeSmell", "Unexpected text token error", "Unexpected text token error", "5")]
[ConfigurableSeverityHighlightingAttribute("Xaml.UnexpectedTextToken", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlUnexpectedTextTokenHighlighting : XmlSyntaxErrorHighlighting {
    public static string SEVERITY_ID;
    public XamlUnexpectedTextTokenHighlighting(IXmlFloatingTextTokenNode textTokenNode, string errorText);
}
[RegisterConfigurableSeverityAttribute("Xaml.CompiledBindingMissingDataTypeErrorHighlighting", "", "CodeInfo", "x:DataType not specified for CompiledBinding", "x:DataType not specified for CompiledBinding", "5")]
[ConfigurableSeverityHighlightingAttribute("Xaml.CompiledBindingMissingDataTypeErrorHighlighting", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlUninferrableDataContextTypeForCompiledBindingErrorHighlighting : XamlHighlightingBase {
    [CompilerGeneratedAttribute]
private IBinding <Binding>k__BackingField;
    public static string SEVERITY_ID;
    public IBinding Binding { get; }
    public XamlUninferrableDataContextTypeForCompiledBindingErrorHighlighting(IBinding binding);
    [CompilerGeneratedAttribute]
public IBinding get_Binding();
    public virtual DocumentRange CalculateRange();
}
[RegisterConfigurableSeverityAttribute("Xaml.XamlUnknownDeviceFamilyTypeHighlighting", "", "", "", "CodeSmell", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "UnknownDeviceFamily_TitleText", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "UnknownDeviceFamily_TitleText", "4")]
[ConfigurableSeverityHighlightingAttribute("Xaml.XamlUnknownDeviceFamilyTypeHighlighting", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlUnknownDeviceFamilyTypeHighlighting : XamlHighlightingBase {
    private DocumentRange myDocumentRange;
    public static string SEVERITY_ID;
    [CompilerGeneratedAttribute]
private IXamlTypeDeclaration <TypeDeclaration>k__BackingField;
    public IXamlTypeDeclaration TypeDeclaration { get; }
    public XamlUnknownDeviceFamilyTypeHighlighting(IXamlTypeDeclaration typeDeclaration, DocumentRange documentRange);
    [CompilerGeneratedAttribute]
public IXamlTypeDeclaration get_TypeDeclaration();
    public virtual DocumentRange CalculateRange();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlValueTypeResourceCannotHaveNameHighlighting : XamlRedundantElementHighlightingBase {
    public XamlValueTypeResourceCannotHaveNameHighlighting(IXmlAttribute nameAttribute);
}
[RegisterConfigurableSeverityAttribute("Xaml.XamlXamarinFormsDataTypeAndBindingContextTypeMismatchedHighlighting", "", "", "", "CodeSmell", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "TypesInXDataTypeAndBindingContextMismatch_Text", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "TypesInXDataTypeAndBindingContextAre_Text", "4")]
[ConfigurableSeverityHighlightingAttribute("Xaml.XamlXamarinFormsDataTypeAndBindingContextTypeMismatchedHighlighting", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlXamarinFormsDataTypeAndBindingContextTypeMismatchedHighlighting : XamlHighlightingBase {
    public static string SEVERITY_ID;
    private DocumentRange myDocumentRange;
    public XamlXamarinFormsDataTypeAndBindingContextTypeMismatchedHighlighting(IPropertyAttribute dataTypeAttribute, ITreeNode bindingContextNode, IType dataTypeType, IType bindingContextType);
    public virtual DocumentRange CalculateRange();
}
[RegisterConfigurableSeverityAttribute("Xaml.MethodArgumentsWillBeIgnored", "", "", "", "CodeInfo", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "MethodArgumentsWillBeReplacedByEvent_Text", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "MethodArgumentsWillBeReplacedByEvent_Text", "4")]
[ConfigurableSeverityHighlightingAttribute("Xaml.MethodArgumentsWillBeIgnored", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlXBindArgumentsWillBeIgnoredWarningHighlighting : XamlHighlightingBase {
    [NotNullAttribute]
private IMethodInvocationExpression myMethodInvocationExpression;
    public static string SEVERITY_ID;
    public XamlXBindArgumentsWillBeIgnoredWarningHighlighting(IMethodInvocationExpression methodInvocationExpression);
    public virtual DocumentRange CalculateRange();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlXBindBindingModeInconsistencyErrorHighlighting : XamlHighlightingBase {
    [CompilerGeneratedAttribute]
private InconsistencyErrorType <InconsistencyType>k__BackingField;
    [CompilerGeneratedAttribute]
private IXBindMarkup <BindingMarkup>k__BackingField;
    private ITreeNode myAnchor;
    public InconsistencyErrorType InconsistencyType { get; }
    public IXBindMarkup BindingMarkup { get; }
    public XamlXBindBindingModeInconsistencyErrorHighlighting(InconsistencyErrorType inconsistencyType, IXBindMarkup markup, ITreeNode anchor);
    [CompilerGeneratedAttribute]
public InconsistencyErrorType get_InconsistencyType();
    [CompilerGeneratedAttribute]
public IXBindMarkup get_BindingMarkup();
    private static string GetTooltip(InconsistencyErrorType inconsistencyErrorType);
    public static XamlXBindBindingModeInconsistencyErrorHighlighting RedundantBindBack(IXBindMarkup markup);
    public static XamlXBindBindingModeInconsistencyErrorHighlighting MissingBindBack(IXBindMarkup markup);
    public static XamlXBindBindingModeInconsistencyErrorHighlighting MissingMethodInvocation(IXBindMarkup markup);
    public static XamlXBindBindingModeInconsistencyErrorHighlighting CastIsUnavailable(IXBindMarkup markup);
    public static XamlXBindBindingModeInconsistencyErrorHighlighting TwoWayBindingForEvent(IXBindMarkup markup);
    public virtual DocumentRange CalculateRange();
}
[RegisterConfigurableSeverityAttribute("Xaml.DecimalParsingIsCultureDependent", "", "", "", "CodeInfo", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "DecimalNumbersParsedDependingOnCurrent_Text", "", "JetBrains.ReSharper.Daemon.Xaml.Resources.Strings", "DecimalNumbersParsedDependingOnCurrent_Text", "4")]
[ConfigurableSeverityHighlightingAttribute("Xaml.DecimalParsingIsCultureDependent", "XAML")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlXBindDecimalParsingIsCultureDependentWarningHighlighting : XamlHighlightingBase {
    [NotNullAttribute]
private IMarkupNumberConstant myNumberConstant;
    public static string SEVERITY_ID;
    public XamlXBindDecimalParsingIsCultureDependentWarningHighlighting(IMarkupNumberConstant numberConstant);
    public virtual DocumentRange CalculateRange();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlXBindMethodErrorHighlighting : XamlResolveErrorHighlightingBase {
    public XamlXBindMethodErrorHighlighting(IXamlXBindMethodReference reference);
    private static string CreateTooltip(IXamlXBindMethodReference reference);
    public virtual DocumentRange CalculateRange();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlXBindMethodInvocationUnavailableErrorHighlighting : XamlHighlightingBase {
    [CompilerGeneratedAttribute]
private IMethodInvocationExpression <Invocation>k__BackingField;
    public IMethodInvocationExpression Invocation { get; }
    public XamlXBindMethodInvocationUnavailableErrorHighlighting(IMethodInvocationExpression element);
    [CompilerGeneratedAttribute]
public IMethodInvocationExpression get_Invocation();
    public virtual DocumentRange CalculateRange();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlStaticHighlightingsGroups/XAMLErrors")]
public class JetBrains.ReSharper.Daemon.Xaml.Highlightings.XamlXBindUpdateSourceTriggerErrorHighlighting : XamlHighlightingBase {
    private ITreeNode myAnchor;
    [CompilerGeneratedAttribute]
private ErrorType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IXBindMarkup <BindingMarkup>k__BackingField;
    public ErrorType Type { get; }
    public IXBindMarkup BindingMarkup { get; }
    public XamlXBindUpdateSourceTriggerErrorHighlighting(ErrorType errorType, IXBindMarkup bindingMarkup, ITreeNode anchor);
    private static string GetTooltip(ErrorType errorType, IXBindMarkup bindingMarkup);
    public virtual DocumentRange CalculateRange();
    public static XamlXBindUpdateSourceTriggerErrorHighlighting NotAllowed(IXBindMarkup xBindMarkup);
    public static XamlXBindUpdateSourceTriggerErrorHighlighting ValueIsNotSupported(IXBindMarkup xBindMarkup);
    [CompilerGeneratedAttribute]
public ErrorType get_Type();
    [CompilerGeneratedAttribute]
public IXBindMarkup get_BindingMarkup();
}
[QuickFixAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.I18n.SetResourceVisibilityToPublicFix : QuickFixBase {
    private static Dictionary`2<string, string> ourCustomToolToPublicMap;
    private XamlResolveErrorHighlighting myHighlighting;
    public string Text { get; }
    public SetResourceVisibilityToPublicFix(XamlResolveErrorHighlighting highlighting);
    private static SetResourceVisibilityToPublicFix();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual Action`1<ITextControl> ExecuteAfterPsiTransaction(ISolution solution, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
    private static bool IsResourceReference(IReference reference);
    private static void SetPublicCustomTool(IProjectFile projectFile, string publicCustomTool);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Daemon.Xaml.I18n.ZoneMarker : object {
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.Xaml.InlayHints.XamlInlayHintsOptionStore : object {
    public XamlInlayHintsOptionStore(InlayHintsOptionsStore inlayHintsOptionsStore, ISettingsStore settingsStore);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Daemon.Xaml.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string CodeCleanupTask_Xaml_RedundantFreezeAttribute { get; }
    public static string CodeCleanupTask_Xaml_RemoveRedundantModifiersAttribute { get; }
    public static string CodeCleanupTask_Xaml_RemoveRedundantNameAttribute { get; }
    public static string CodeCleanupTask_Xaml_RemoveRedundantResource { get; }
    public static string CodeCleanupTask_Xaml_RemoveRedundantCollectionProperty { get; }
    public static string CodeCleanupTask_Xaml_RemoveRedundantAttachedPropertySetter { get; }
    public static string CodeCleanupTask_Xaml_RemoveRedundantStyledValue { get; }
    public static string CodeCleanupTask_Xaml_RemoveRedundantNamespaceAlias { get; }
    public static string CodeCleanupTask_Xaml_RemoveForbiddenResourceName { get; }
    public static string CodeCleanupTask_Xaml_RemoveRedundantGridDefinitionsAttribute { get; }
    public static string CodeCleanupTask_Xaml_RemoveRedundantUpdateSourceTriggerAttribute { get; }
    public static string CodeCleanupTask_Xaml_RemoveRedundantBindingModeAttribute { get; }
    public static string CodeCleanupTask_Xaml_RemoveRedundantGridSpanAttribut { get; }
    public static string CodeCleanupTask_Xaml_RedundantFreezeAttributes { get; }
    public static string CodeCleanupTask_Xaml_RemoveRedundantModifiersAttributes { get; }
    public static string CodeCleanupTask_Xaml_RemoveRedundantNameAttributes { get; }
    public static string CodeCleanupTask_Xaml_RemoveRedundantResources { get; }
    public static string CodeCleanupTask_Xaml_RemoveRedundantCollectionPropertys { get; }
    public static string CodeCleanupTask_Xaml_RemoveRedundantAttachedPropertySetters { get; }
    public static string CodeCleanupTask_Xaml_RemoveRedundantStyledValues { get; }
    public static string CodeCleanupTask_Xaml_RemoveRedundantNamespaceAliass { get; }
    public static string CodeCleanupTask_Xaml_RemoveForbiddenResourceNames { get; }
    public static string CodeCleanupTask_Xaml_RemoveRedundantGridDefinitionsAttributes { get; }
    public static string CodeCleanupTask_Xaml_RemoveRedundantUpdateSourceTriggerAttributes { get; }
    public static string CodeCleanupTask_Xaml_RemoveRedundantBindingModeAttributes { get; }
    public static string CodeCleanupTask_Xaml_RemoveRedundantGridSpanAttributs { get; }
    public static string XAMLErrors_Text { get; }
    public static string XamlRemoveRedundantCodeCleanupModule_GetModuleActionName_Remove_Redundant_Code_in_XAML { get; }
    public static string AnalysisIsNotAvailableForTheFileFile_Text { get; }
    public static string RemoveRedundantDefinitions_Text { get; }
    public static string SingleCell_SpanIsRedundant_ToolTip { get; }
    public static string RemoveSpanAttribute_Text { get; }
    public static string MissingGrid_SetterForNonFirstChild_Text { get; }
    public static string _TagCanBeConvertedToAttribute_Text { get; }
    public static string GridLengthDefinitionShouldNotBeEmpty_Text { get; }
    public static string _Index__IsOutOfGrid_DefinitionsRange_ToolTip { get; }
    public static string _Index_WithSpan_IsOutOfGrid_DefinitionsRange_ToolTip { get; }
    public static string MissingGrid_SetterForNonFirstChild_ToolTip { get; }
    public static string _TagCanBeConvertedToAttribute_ToolTip { get; }
    public static string _IsDefaultBindingModeAndCanBeSafely_Text { get; }
    public static string SpecifiedParentIsOutsideTheCurrentComponent_Text { get; }
    public static string DefaultIsTheDefaultValueForUpdateSourceTrigger_Text { get; }
    public static string ResourceCannotBeAccessedByClass_Because_Text { get; }
    public static string AccessibilitySetByAttributeCoincidesWithDefaultOneThusAttributeCanBeSafelyRemoved { get; }
    public static string AreByDefaultMessage { get; }
    public static string AttachedPropertySetterHasNoEffectInCurrentContextAndCanBeRemoved { get; }
    public static string AttachedPropertySetterHasNoEffectInCurrentContextAndCanBeRemovedMessage { get; }
    public static string AttributeInResourcesIsNegligibleMessage { get; }
    public static string AttributeRequiredMessage { get; }
    public static string DuplicateSetterMessage { get; }
    public static string DuplicateStylePropertyEventSetter { get; }
    public static string EmptyCollectionPropertySetterIsRedundantAndCanBeSafelyRemoved { get; }
    public static string EmptyCollectionPropertySetterIsRedundantAndCanBeSafelyRemovedMessage { get; }
    public static string EqualValueProvidedByStyleMessage { get; }
    public static string FreezeAttributeIsNotUsedAndCanBeSafelyRemoved { get; }
    public static string IsAllowedForResourcesAndDictionaryElementsOnlyMessage { get; }
    public static string IsNotMessage { get; }
    public static string Message { get; }
    public static string NameAttributeInResourceDeclarationIsNeglectableAndCanBeSafelyRemoved { get; }
    public static string NamespaceAliasIsNotRequiredByCodeAndCanBeSafelyRemoved { get; }
    public static string NamespaceAliasIsNotRequiredByCodeAndCanBeSafelyRemovedMessage { get; }
    public static string PropertyOwnerTypeQualifierIsRedundantAndCanBeSafelyRemoved { get; }
    public static string PropertyValueIsEqualToStyleProvided { get; }
    public static string PropertyValueIsEqualToValueProvidedByExplicitStyleAndCanBeRemoved { get; }
    public static string RedundantEmptyCollectionPropertySetter { get; }
    public static string RedundantFreezeAttribute { get; }
    public static string RedundantModifiersAttribute { get; }
    public static string RedundantNameAttribute { get; }
    public static string RedundantNamespaceAlias { get; }
    public static string RedundantPropertyTypeQualifier { get; }
    public static string RedundantPropertyTypeQualifierMessage { get; }
    public static string RedundantResource { get; }
    public static string RemoveRedundantAttachedPropertySetter { get; }
    public static string ResourceIsNeverUsedMessage { get; }
    public static string ResourceIsNotUsedAndCanBeSafelyRemoved { get; }
    public static string StyleDeclarationTargetTypeIsNotConvertibleToStyleBaseType { get; }
    public static string StyleTargetTypeIsNotConvertibleToBaseType { get; }
    public static string TargetTypeIsNotConvertibleToBaseTypeMessage { get; }
    public static string UseOfObsoleteTypeOrTypeMember { get; }
    public static string UseOfObsoleteTypeOrTypeMemberError { get; }
    public static string UseOfObsoleteTypeOrTypeMemberInXAMLMarkup { get; }
    public static string UseOfObsoleteTypeOrTypeMemberInXAMLMarkupError { get; }
    public static string XFieldModifierAttributeRequiresXNameAttribute { get; }
    public static string XFieldModifierAttributeRequiresXNameAttributeMessage { get; }
    public static string XKeyIsAllowedForResourcesAndDictionaryElementsOnly { get; }
    public static string XmlNsDefinitionAttributeForIsDeclaredInTheSameProjectAndCannotBeReferencedMessage { get; }
    public static string NavigateToDeclaration_Text { get; }
    public static string Configure_Text { get; }
    public static string UsingStreamBindingOperatorIn_Binding_Text { get; }
    public static string DuplicateViewForDeviceFamily__ToolTip { get; }
    public static string Class_IsAlreadyDeclared_ToolTip { get; }
    public static string Field_IsAlreadyDeclared_ToolTip { get; }
    public static string DynamicResourceCanOnlyBeUsedWithDependency_Text { get; }
    public static string NoElement_FoundIn__ToolTip { get; }
    public static string ElementNotFound__ToolTip { get; }
    public static string SetterFor_IsNotAccessible_Text { get; }
    public static string _HasNoGetter_Text { get; }
    public static string _HasNoSetter_Text { get; }
    public static string _IsReadonly_Text { get; }
    public static string MismatchedClassName_Expected_ToolTip { get; }
    public static string PossibleNullAssignmentToNonNullable_Text { get; }
    public static string AnExpressionWhichCanHaveNullValueIs_Text { get; }
    public static string PossibleNullValueInThePathOfBinding_Text { get; }
    public static string DereferencingAnExpressionWhichCanHave_Text { get; }
    public static string Property_IsSetMoreThanOnce_ToolTip { get; }
    public static string RoutedEventDescriptorField_Missing_ToolTip { get; }
    public static string DependencyPropertyDescriptorField_Missing_ToolTip { get; }
    public static string RelativeSourceModeIsNotSetDefaultRelativeSourceMode_Text { get; }
    public static string ParentTypeShouldBeSpecifiedBeforeParent_Text { get; }
    public static string WrongNameCase_Text { get; }
    public static string IncorrectMethodSignature_Text { get; }
    public static string _IsNotAccessible_Text { get; }
    public static string CannotAccess____Text { get; }
    public static string IncorrectNumberOfParameters_Text { get; }
    public static string IncorrectParameterType_Text { get; }
    public static string IncorrectNumberOfTypeParameters_Text { get; }
    public static string XAML2009LanguageConstructIsNotAllowed_Text { get; }
    public static string XAMLLanguageLevelError_Text { get; }
    public static string ThisConstructIsNotSupportedByXAMLCompiler_Text { get; }
    public static string ThisConstructIsSupportedByWorkflowXAML_Text { get; }
    public static string _IsNotFoundInXmlns__Text { get; }
    public static string PathToResourceIsCaseSensitive_Text { get; }
    public static string StyleClass_NotFound_Text { get; }
    public static string HidesStyleSetterFromBaseStyle__Text { get; }
    public static string TextAfterMarkupIsNotAllowed_Text { get; }
    public static string InconsistentAccessibilityType_Text { get; }
    public static string UnknownDeviceFamily_Text { get; }
    public static string ResourcesOfValueTypesAndTypesWithout_ToolTip { get; }
    public static string Remove_Attribute_Text { get; }
    public static string Type_SpecifiedInBindingContextDoesNot_Text { get; }
    public static string MethodArgumentsWillBeReplacedByEvent_Text { get; }
    public static string BindBackIsAllowedOnlyInTwoWayBindings_Text { get; }
    public static string BindBackIsRequiredInTwoWayBindingsWith_Text { get; }
    public static string TwoWayBindingCannotBeAppliedToCastExpression_Text { get; }
    public static string TwoWayBindingSTargetShouldBeADependency_Text { get; }
    public static string DecimalNumbersParsedDependingOnCurrent_Text { get; }
    public static string UpdateSourceTriggerIsAllowedOnlyInTwoWay_Text { get; }
    public static string _IsNotSupportedForXBind_Text { get; }
    public static string SetResourceVisibilityToPublic_Text { get; }
    public static string AttributeIsNotAllowedInPropertyElement_ToolTip { get; }
    public static string InvalidFreezeAttributeValue_ToolTip { get; }
    public static string _IsAllowedAtTopLevelOnly_ToolTip { get; }
    public static string _IsNotAllowedInPropertyElements_ToolTip { get; }
    public static string _IsNotAllowedInObjectElementsForXAML_Text { get; }
    public static string Property_DoesNotHaveValue_ToolTip { get; }
    public static string ElementAttributesAreNotAllowedOnObjects_Text { get; }
    public static string PropertyElementsAreNotAllowedOnObjects_Text { get; }
    public static string TextIsNotExpectedHere_Text { get; }
    public static string TextNotAllowedAsContentInADictionary_Text { get; }
    public static string DefaultConstructorMustBePublic_Text { get; }
    public static string ConstructorMustBePublic_Text { get; }
    public static string TooManyDefaultConstructorsTheBehaviour_Text { get; }
    public static string TooManyConstructorsWith_ParametersThe_Text { get; }
    public static string NoDefaultConstructorFound_Text { get; }
    public static string NoConstructorWith_ParametersFound_Text { get; }
    public static string ConstructorIsNotAccessible_Text { get; }
    public static string Method_IsNotAccessible_Text { get; }
    public static string ConstructorReturnTypeMustBeConvertible_Text { get; }
    public static string Method_ReturnTypeMustBeConvertibleTo_Text { get; }
    public static string ConstructorIsNotResolved_Text { get; }
    public static string Method_IsNotResolved_Text { get; }
    public static string MultipleOverloadsWithSameArgumentsCount_Text { get; }
    public static string ElementIsNotExpectedHereSinceContent_Text { get; }
    public static string UnableToInferDataContextTypeForCompiled_Text { get; }
    public static string EventsCanOnlyBeBoundToNonOverloaded_Text { get; }
    public static string CanTConvertType_To__Text { get; }
    public static string MethodInvocationIsNotAllowedInBindBack_Text { get; }
    public static string XmlnsNameMissing_Text { get; }
    public static string CannotConvertType_To__Text { get; }
    public static string InvalidNumberOfArguments1Or4IsExpected_Text { get; }
    public static string DuplicateNameAttribute__Text { get; }
    public static string MissingGrid_Value_Text { get; }
    public static string _AttributeRequiresXNameAttribute_Text { get; }
    public static string ParentIndexShouldBeSpecifiedAtMostOnce_Text { get; }
    public static string ParentTypeShouldBeSpecifiedAtMostOnce_Text { get; }
    public static string ParentIndexShouldBeNonNegativeInteger_Text { get; }
    public static string AncestorTypeMustBeSpecifiedInFindAncestor_ToolTip { get; }
    public static string Missing_PropertySetter_Text { get; }
    public static string SharedAttributeIsAllowedInResources_Text { get; }
    public static string SharedAttributeValueMustBeTrueOrFalse_Text { get; }
    public static string LengthExpected__Text { get; }
    public static string InvalidLength__Text { get; }
    public static string InvalidLengthValue_Text { get; }
    public static string InvalidNumberOfArguments_IsExpected_Text { get; }
    public static string IncorrectTypeArgument_Text { get; }
    public static string ReferenceTypeExpected_Text { get; }
    public static string ValueTypeExpected_Text { get; }
    public static string UnmanagedTypeExpected_Text { get; }
    public static string Type_HasNoDefaultConstructor_Text { get; }
    public static string Type_DoesNotSatisfyConstraint__Text { get; }
    public static string DuplicatedResourceKey__Text { get; }
    public static string _IsAllowedAtTheRootElementOnly_Text { get; }
    public static string _IsAllowedIn_Only_Text { get; }
    public static string Only_ElementsAllowedIn__Text { get; }
    public static string OnlyAttributesAllowedIn__Text { get; }
    public static string EmptyXKeyElementIsNotAllowed_Text { get; }
    public static string DuplicateElementXKey_Text { get; }
    public static string CannotResolveSymbol_DueToUnknownDataContext_Text { get; }
    public static string CannotResolveSymbol__Text { get; }
    public static string CannotResolveFieldOrProperty_InData_Text { get; }
    public static string CannotResolveMethod_InDataContextOf_Text { get; }
    public static string CannotResolveProperty_InDataContext_Text { get; }
    public static string PathReferenceCannotBeEmpty_Text { get; }
    public static string AssemblyNameExpectedInsteadOfProject_ToolTip { get; }
    public static string Resource_IsNotFound_Text { get; }
    public static string ModuleComponentMustBePrecededWith_ToolTip { get; }
    public static string GenericTypesCannotBeReferencedInXAML_ToolTip { get; }
    public static string UnknownDeviceFamily_TitleText { get; }
    public static string DynamicResourceCanOnlyBeUsedWithDependencyProperty_Text { get; }
    public static string UsingStreamBindingOperatorInTwoWayOr_TitleText { get; }
    public static string UsingStreamBindingOperatorInTwoWayOr_DescriptionText { get; }
    public static string TypesInXDataTypeAndBindingContextMismatch_Text { get; }
    public static string TypesInXDataTypeAndBindingContextAre_Text { get; }
    public static string UnresolvedBindingPathNotSpecified_DescriptionText { get; }
    public static string UnresolvedBindingPathWhenContextIsUnknown_TitleText { get; }
    public static string UnresolvedBindingPathWhenContextIsKnown_TitleText { get; }
    public static string UnresolvedBindingPathWhenContextIsKnown_DescriptionText { get; }
    public static string ConstructorNotResolved_Text { get; }
    public static string DependencyPropertyDescriptorFieldMissing_TitleText { get; }
    public static string DependencyPropertyDescriptorFieldMissing_DescriptionText { get; }
    public static string DuplicateDeviceFamilyView_Text { get; }
    public static string ElementNameReferenceNotResolved_Text { get; }
    public static string ElementNameReferenceNotResolvedToAny_Text { get; }
    public static string GridElementColumnRowIndexIsOutOfGrid_Text { get; }
    public static string SingleCellGridColumnRowSpanIsRedundant_Text { get; }
    public static string MissingGridColumnRowSetterForNonFirst_TitleText { get; }
    public static string MissingGridColumnRowSetterForNonFirst_DescriptionText { get; }
    public static string GridColumnsRowsDefinitionsCanBeConverted_Text { get; }
    public static string SingleGridRowColumnDefinitionIsRedundant_Text { get; }
    public static string IgnoredPath_Text { get; }
    public static string PathIsIgnoredInProjectSettings_Text { get; }
    public static string Single_IsRedundant_Text { get; }
    public static string XamlThicknessArgumentHints_Text { get; }
    public static string XamlMissingGridIndexHints_Text { get; }
    public static string XamlCornerRadiusArgumentHints_Text { get; }
    public static string XamlDataContextHints_Text { get; }
    public static string XamlMarkupAttributeNameHints_Text { get; }
    public static string ClassNameCannotBeEmpty_Text { get; }
    public static string PropertiesAndVariablesField_Text { get; }
    public static string PropertiesAndVariablesTemplateField_Text { get; }
    public static string PropertiesAndVariablesImplicitField_Text { get; }
    public static string TypesClass_Text { get; }
    public static string StyleClass_Text { get; }
    public static string TypesPredefinedElement_Text { get; }
    public static string PropertiesAndVariablesProperty_Text { get; }
    public static string PropertiesAndVariablesAttachedProperty_Text { get; }
    public static string NamespaceAlias_Text { get; }
    public static string Resource_Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_CodeCleanupTask_Xaml_RedundantFreezeAttribute();
    public static string get_CodeCleanupTask_Xaml_RemoveRedundantModifiersAttribute();
    public static string get_CodeCleanupTask_Xaml_RemoveRedundantNameAttribute();
    public static string get_CodeCleanupTask_Xaml_RemoveRedundantResource();
    public static string get_CodeCleanupTask_Xaml_RemoveRedundantCollectionProperty();
    public static string get_CodeCleanupTask_Xaml_RemoveRedundantAttachedPropertySetter();
    public static string get_CodeCleanupTask_Xaml_RemoveRedundantStyledValue();
    public static string get_CodeCleanupTask_Xaml_RemoveRedundantNamespaceAlias();
    public static string get_CodeCleanupTask_Xaml_RemoveForbiddenResourceName();
    public static string get_CodeCleanupTask_Xaml_RemoveRedundantGridDefinitionsAttribute();
    public static string get_CodeCleanupTask_Xaml_RemoveRedundantUpdateSourceTriggerAttribute();
    public static string get_CodeCleanupTask_Xaml_RemoveRedundantBindingModeAttribute();
    public static string get_CodeCleanupTask_Xaml_RemoveRedundantGridSpanAttribut();
    public static string get_CodeCleanupTask_Xaml_RedundantFreezeAttributes();
    public static string get_CodeCleanupTask_Xaml_RemoveRedundantModifiersAttributes();
    public static string get_CodeCleanupTask_Xaml_RemoveRedundantNameAttributes();
    public static string get_CodeCleanupTask_Xaml_RemoveRedundantResources();
    public static string get_CodeCleanupTask_Xaml_RemoveRedundantCollectionPropertys();
    public static string get_CodeCleanupTask_Xaml_RemoveRedundantAttachedPropertySetters();
    public static string get_CodeCleanupTask_Xaml_RemoveRedundantStyledValues();
    public static string get_CodeCleanupTask_Xaml_RemoveRedundantNamespaceAliass();
    public static string get_CodeCleanupTask_Xaml_RemoveForbiddenResourceNames();
    public static string get_CodeCleanupTask_Xaml_RemoveRedundantGridDefinitionsAttributes();
    public static string get_CodeCleanupTask_Xaml_RemoveRedundantUpdateSourceTriggerAttributes();
    public static string get_CodeCleanupTask_Xaml_RemoveRedundantBindingModeAttributes();
    public static string get_CodeCleanupTask_Xaml_RemoveRedundantGridSpanAttributs();
    public static string get_XAMLErrors_Text();
    public static string get_XamlRemoveRedundantCodeCleanupModule_GetModuleActionName_Remove_Redundant_Code_in_XAML();
    public static string get_AnalysisIsNotAvailableForTheFileFile_Text();
    public static string get_RemoveRedundantDefinitions_Text();
    public static string get_SingleCell_SpanIsRedundant_ToolTip();
    public static string get_RemoveSpanAttribute_Text();
    public static string get_MissingGrid_SetterForNonFirstChild_Text();
    public static string get__TagCanBeConvertedToAttribute_Text();
    public static string get_GridLengthDefinitionShouldNotBeEmpty_Text();
    public static string get__Index__IsOutOfGrid_DefinitionsRange_ToolTip();
    public static string get__Index_WithSpan_IsOutOfGrid_DefinitionsRange_ToolTip();
    public static string get_MissingGrid_SetterForNonFirstChild_ToolTip();
    public static string get__TagCanBeConvertedToAttribute_ToolTip();
    public static string get__IsDefaultBindingModeAndCanBeSafely_Text();
    public static string get_SpecifiedParentIsOutsideTheCurrentComponent_Text();
    public static string get_DefaultIsTheDefaultValueForUpdateSourceTrigger_Text();
    public static string get_ResourceCannotBeAccessedByClass_Because_Text();
    public static string get_AccessibilitySetByAttributeCoincidesWithDefaultOneThusAttributeCanBeSafelyRemoved();
    public static string get_AreByDefaultMessage();
    public static string get_AttachedPropertySetterHasNoEffectInCurrentContextAndCanBeRemoved();
    public static string get_AttachedPropertySetterHasNoEffectInCurrentContextAndCanBeRemovedMessage();
    public static string get_AttributeInResourcesIsNegligibleMessage();
    public static string get_AttributeRequiredMessage();
    public static string get_DuplicateSetterMessage();
    public static string get_DuplicateStylePropertyEventSetter();
    public static string get_EmptyCollectionPropertySetterIsRedundantAndCanBeSafelyRemoved();
    public static string get_EmptyCollectionPropertySetterIsRedundantAndCanBeSafelyRemovedMessage();
    public static string get_EqualValueProvidedByStyleMessage();
    public static string get_FreezeAttributeIsNotUsedAndCanBeSafelyRemoved();
    public static string get_IsAllowedForResourcesAndDictionaryElementsOnlyMessage();
    public static string get_IsNotMessage();
    public static string get_Message();
    public static string get_NameAttributeInResourceDeclarationIsNeglectableAndCanBeSafelyRemoved();
    public static string get_NamespaceAliasIsNotRequiredByCodeAndCanBeSafelyRemoved();
    public static string get_NamespaceAliasIsNotRequiredByCodeAndCanBeSafelyRemovedMessage();
    public static string get_PropertyOwnerTypeQualifierIsRedundantAndCanBeSafelyRemoved();
    public static string get_PropertyValueIsEqualToStyleProvided();
    public static string get_PropertyValueIsEqualToValueProvidedByExplicitStyleAndCanBeRemoved();
    public static string get_RedundantEmptyCollectionPropertySetter();
    public static string get_RedundantFreezeAttribute();
    public static string get_RedundantModifiersAttribute();
    public static string get_RedundantNameAttribute();
    public static string get_RedundantNamespaceAlias();
    public static string get_RedundantPropertyTypeQualifier();
    public static string get_RedundantPropertyTypeQualifierMessage();
    public static string get_RedundantResource();
    public static string get_RemoveRedundantAttachedPropertySetter();
    public static string get_ResourceIsNeverUsedMessage();
    public static string get_ResourceIsNotUsedAndCanBeSafelyRemoved();
    public static string get_StyleDeclarationTargetTypeIsNotConvertibleToStyleBaseType();
    public static string get_StyleTargetTypeIsNotConvertibleToBaseType();
    public static string get_TargetTypeIsNotConvertibleToBaseTypeMessage();
    public static string get_UseOfObsoleteTypeOrTypeMember();
    public static string get_UseOfObsoleteTypeOrTypeMemberError();
    public static string get_UseOfObsoleteTypeOrTypeMemberInXAMLMarkup();
    public static string get_UseOfObsoleteTypeOrTypeMemberInXAMLMarkupError();
    public static string get_XFieldModifierAttributeRequiresXNameAttribute();
    public static string get_XFieldModifierAttributeRequiresXNameAttributeMessage();
    public static string get_XKeyIsAllowedForResourcesAndDictionaryElementsOnly();
    public static string get_XmlNsDefinitionAttributeForIsDeclaredInTheSameProjectAndCannotBeReferencedMessage();
    public static string get_NavigateToDeclaration_Text();
    public static string get_Configure_Text();
    public static string get_UsingStreamBindingOperatorIn_Binding_Text();
    public static string get_DuplicateViewForDeviceFamily__ToolTip();
    public static string get_Class_IsAlreadyDeclared_ToolTip();
    public static string get_Field_IsAlreadyDeclared_ToolTip();
    public static string get_DynamicResourceCanOnlyBeUsedWithDependency_Text();
    public static string get_NoElement_FoundIn__ToolTip();
    public static string get_ElementNotFound__ToolTip();
    public static string get_SetterFor_IsNotAccessible_Text();
    public static string get__HasNoGetter_Text();
    public static string get__HasNoSetter_Text();
    public static string get__IsReadonly_Text();
    public static string get_MismatchedClassName_Expected_ToolTip();
    public static string get_PossibleNullAssignmentToNonNullable_Text();
    public static string get_AnExpressionWhichCanHaveNullValueIs_Text();
    public static string get_PossibleNullValueInThePathOfBinding_Text();
    public static string get_DereferencingAnExpressionWhichCanHave_Text();
    public static string get_Property_IsSetMoreThanOnce_ToolTip();
    public static string get_RoutedEventDescriptorField_Missing_ToolTip();
    public static string get_DependencyPropertyDescriptorField_Missing_ToolTip();
    public static string get_RelativeSourceModeIsNotSetDefaultRelativeSourceMode_Text();
    public static string get_ParentTypeShouldBeSpecifiedBeforeParent_Text();
    public static string get_WrongNameCase_Text();
    public static string get_IncorrectMethodSignature_Text();
    public static string get__IsNotAccessible_Text();
    public static string get_CannotAccess____Text();
    public static string get_IncorrectNumberOfParameters_Text();
    public static string get_IncorrectParameterType_Text();
    public static string get_IncorrectNumberOfTypeParameters_Text();
    public static string get_XAML2009LanguageConstructIsNotAllowed_Text();
    public static string get_XAMLLanguageLevelError_Text();
    public static string get_ThisConstructIsNotSupportedByXAMLCompiler_Text();
    public static string get_ThisConstructIsSupportedByWorkflowXAML_Text();
    public static string get__IsNotFoundInXmlns__Text();
    public static string get_PathToResourceIsCaseSensitive_Text();
    public static string get_StyleClass_NotFound_Text();
    public static string get_HidesStyleSetterFromBaseStyle__Text();
    public static string get_TextAfterMarkupIsNotAllowed_Text();
    public static string get_InconsistentAccessibilityType_Text();
    public static string get_UnknownDeviceFamily_Text();
    public static string get_ResourcesOfValueTypesAndTypesWithout_ToolTip();
    public static string get_Remove_Attribute_Text();
    public static string get_Type_SpecifiedInBindingContextDoesNot_Text();
    public static string get_MethodArgumentsWillBeReplacedByEvent_Text();
    public static string get_BindBackIsAllowedOnlyInTwoWayBindings_Text();
    public static string get_BindBackIsRequiredInTwoWayBindingsWith_Text();
    public static string get_TwoWayBindingCannotBeAppliedToCastExpression_Text();
    public static string get_TwoWayBindingSTargetShouldBeADependency_Text();
    public static string get_DecimalNumbersParsedDependingOnCurrent_Text();
    public static string get_UpdateSourceTriggerIsAllowedOnlyInTwoWay_Text();
    public static string get__IsNotSupportedForXBind_Text();
    public static string get_SetResourceVisibilityToPublic_Text();
    public static string get_AttributeIsNotAllowedInPropertyElement_ToolTip();
    public static string get_InvalidFreezeAttributeValue_ToolTip();
    public static string get__IsAllowedAtTopLevelOnly_ToolTip();
    public static string get__IsNotAllowedInPropertyElements_ToolTip();
    public static string get__IsNotAllowedInObjectElementsForXAML_Text();
    public static string get_Property_DoesNotHaveValue_ToolTip();
    public static string get_ElementAttributesAreNotAllowedOnObjects_Text();
    public static string get_PropertyElementsAreNotAllowedOnObjects_Text();
    public static string get_TextIsNotExpectedHere_Text();
    public static string get_TextNotAllowedAsContentInADictionary_Text();
    public static string get_DefaultConstructorMustBePublic_Text();
    public static string get_ConstructorMustBePublic_Text();
    public static string get_TooManyDefaultConstructorsTheBehaviour_Text();
    public static string get_TooManyConstructorsWith_ParametersThe_Text();
    public static string get_NoDefaultConstructorFound_Text();
    public static string get_NoConstructorWith_ParametersFound_Text();
    public static string get_ConstructorIsNotAccessible_Text();
    public static string get_Method_IsNotAccessible_Text();
    public static string get_ConstructorReturnTypeMustBeConvertible_Text();
    public static string get_Method_ReturnTypeMustBeConvertibleTo_Text();
    public static string get_ConstructorIsNotResolved_Text();
    public static string get_Method_IsNotResolved_Text();
    public static string get_MultipleOverloadsWithSameArgumentsCount_Text();
    public static string get_ElementIsNotExpectedHereSinceContent_Text();
    public static string get_UnableToInferDataContextTypeForCompiled_Text();
    public static string get_EventsCanOnlyBeBoundToNonOverloaded_Text();
    public static string get_CanTConvertType_To__Text();
    public static string get_MethodInvocationIsNotAllowedInBindBack_Text();
    public static string get_XmlnsNameMissing_Text();
    public static string get_CannotConvertType_To__Text();
    public static string get_InvalidNumberOfArguments1Or4IsExpected_Text();
    public static string get_DuplicateNameAttribute__Text();
    public static string get_MissingGrid_Value_Text();
    public static string get__AttributeRequiresXNameAttribute_Text();
    public static string get_ParentIndexShouldBeSpecifiedAtMostOnce_Text();
    public static string get_ParentTypeShouldBeSpecifiedAtMostOnce_Text();
    public static string get_ParentIndexShouldBeNonNegativeInteger_Text();
    public static string get_AncestorTypeMustBeSpecifiedInFindAncestor_ToolTip();
    public static string get_Missing_PropertySetter_Text();
    public static string get_SharedAttributeIsAllowedInResources_Text();
    public static string get_SharedAttributeValueMustBeTrueOrFalse_Text();
    public static string get_LengthExpected__Text();
    public static string get_InvalidLength__Text();
    public static string get_InvalidLengthValue_Text();
    public static string get_InvalidNumberOfArguments_IsExpected_Text();
    public static string get_IncorrectTypeArgument_Text();
    public static string get_ReferenceTypeExpected_Text();
    public static string get_ValueTypeExpected_Text();
    public static string get_UnmanagedTypeExpected_Text();
    public static string get_Type_HasNoDefaultConstructor_Text();
    public static string get_Type_DoesNotSatisfyConstraint__Text();
    public static string get_DuplicatedResourceKey__Text();
    public static string get__IsAllowedAtTheRootElementOnly_Text();
    public static string get__IsAllowedIn_Only_Text();
    public static string get_Only_ElementsAllowedIn__Text();
    public static string get_OnlyAttributesAllowedIn__Text();
    public static string get_EmptyXKeyElementIsNotAllowed_Text();
    public static string get_DuplicateElementXKey_Text();
    public static string get_CannotResolveSymbol_DueToUnknownDataContext_Text();
    public static string get_CannotResolveSymbol__Text();
    public static string get_CannotResolveFieldOrProperty_InData_Text();
    public static string get_CannotResolveMethod_InDataContextOf_Text();
    public static string get_CannotResolveProperty_InDataContext_Text();
    public static string get_PathReferenceCannotBeEmpty_Text();
    public static string get_AssemblyNameExpectedInsteadOfProject_ToolTip();
    public static string get_Resource_IsNotFound_Text();
    public static string get_ModuleComponentMustBePrecededWith_ToolTip();
    public static string get_GenericTypesCannotBeReferencedInXAML_ToolTip();
    public static string get_UnknownDeviceFamily_TitleText();
    public static string get_DynamicResourceCanOnlyBeUsedWithDependencyProperty_Text();
    public static string get_UsingStreamBindingOperatorInTwoWayOr_TitleText();
    public static string get_UsingStreamBindingOperatorInTwoWayOr_DescriptionText();
    public static string get_TypesInXDataTypeAndBindingContextMismatch_Text();
    public static string get_TypesInXDataTypeAndBindingContextAre_Text();
    public static string get_UnresolvedBindingPathNotSpecified_DescriptionText();
    public static string get_UnresolvedBindingPathWhenContextIsUnknown_TitleText();
    public static string get_UnresolvedBindingPathWhenContextIsKnown_TitleText();
    public static string get_UnresolvedBindingPathWhenContextIsKnown_DescriptionText();
    public static string get_ConstructorNotResolved_Text();
    public static string get_DependencyPropertyDescriptorFieldMissing_TitleText();
    public static string get_DependencyPropertyDescriptorFieldMissing_DescriptionText();
    public static string get_DuplicateDeviceFamilyView_Text();
    public static string get_ElementNameReferenceNotResolved_Text();
    public static string get_ElementNameReferenceNotResolvedToAny_Text();
    public static string get_GridElementColumnRowIndexIsOutOfGrid_Text();
    public static string get_SingleCellGridColumnRowSpanIsRedundant_Text();
    public static string get_MissingGridColumnRowSetterForNonFirst_TitleText();
    public static string get_MissingGridColumnRowSetterForNonFirst_DescriptionText();
    public static string get_GridColumnsRowsDefinitionsCanBeConverted_Text();
    public static string get_SingleGridRowColumnDefinitionIsRedundant_Text();
    public static string get_IgnoredPath_Text();
    public static string get_PathIsIgnoredInProjectSettings_Text();
    public static string get_Single_IsRedundant_Text();
    public static string get_XamlThicknessArgumentHints_Text();
    public static string get_XamlMissingGridIndexHints_Text();
    public static string get_XamlCornerRadiusArgumentHints_Text();
    public static string get_XamlDataContextHints_Text();
    public static string get_XamlMarkupAttributeNameHints_Text();
    public static string get_ClassNameCannotBeEmpty_Text();
    public static string get_PropertiesAndVariablesField_Text();
    public static string get_PropertiesAndVariablesTemplateField_Text();
    public static string get_PropertiesAndVariablesImplicitField_Text();
    public static string get_TypesClass_Text();
    public static string get_StyleClass_Text();
    public static string get_TypesPredefinedElement_Text();
    public static string get_PropertiesAndVariablesProperty_Text();
    public static string get_PropertiesAndVariablesAttachedProperty_Text();
    public static string get_NamespaceAlias_Text();
    public static string get_Resource_Text();
}
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.Xaml.Stages.AttributeAnalysis : XamlAnalysisBase {
    public virtual bool InteriorShouldBeProcessed(ITreeNode element, IHighlightingConsumer consumer);
    public virtual void ProcessAfterInterior(ITreeNode element, IHighlightingConsumer consumer);
    private static void ProcessFreezeAttribute(IXamlAttribute attribute, IHighlightingConsumer highlightings);
}
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.Xaml.Stages.ColorAnalysis : XamlAnalysisBase {
    private VisualElementHighlighter myVisualElementHighlighter;
    public ColorAnalysis(PsiLanguageType language, IContextBoundSettingsStore settingsStore);
    public virtual bool InteriorShouldBeProcessed(ITreeNode element, IHighlightingConsumer consumer);
    public virtual void ProcessBeforeInterior(ITreeNode element, IHighlightingConsumer consumer);
}
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.Xaml.Stages.DeviceFamilyAnalysis : XamlAnalysisBase {
    public virtual void ProcessAfterInterior(ITreeNode element, IHighlightingConsumer highlightings);
    private void CheckDuplicateViews(IXamlTypeDeclaration typeDeclaration, IHighlightingConsumer highlightings);
    private void CheckKnownFamilyType(IXamlTypeDeclaration typeDeclaration, IHighlightingConsumer highlightings);
    private void CheckViewClrName(IXamlTypeDeclaration typeDeclaration, IHighlightingConsumer highlightings);
    private static DocumentRange GetHighlightingRange(IXamlTypeDeclaration typeDeclaration);
}
[FileStructureExplorerAttribute("16")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.FileStructureStage.XamlFileStructureExplorer : object {
    public sealed virtual IFileStructure ExploreFile(IFile file, IContextBoundSettingsStore settingsStore, Predicate`1<DocumentRange> isRangeInvalidated);
}
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.Xaml.Stages.FolderReferenceAnalysis : XamlAnalysisBase {
    public virtual bool InteriorShouldBeProcessed(ITreeNode element, IHighlightingConsumer consumer);
    public virtual void ProcessBeforeInterior(ITreeNode element, IHighlightingConsumer highlightings);
}
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.Xaml.Stages.MiscAnalysis : XamlAnalysisBase {
    public virtual void ProcessBeforeInterior(ITreeNode element, IHighlightingConsumer consumer);
}
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.Xaml.Stages.NamespaceAliasAnalysis : XamlAnalysisBase {
    private XamlErrorStageProcess myXamlErrorProcess;
    private JetHashSet`1<INamespaceAlias> myNamespaceAliases;
    public NamespaceAliasAnalysis(XamlErrorStageProcess xamlErrorProcess);
    public virtual bool InteriorShouldBeProcessed(ITreeNode element, IHighlightingConsumer consumer);
    public virtual void Init(IXmlFile file);
    public virtual void Done(IXmlFile file, IHighlightingConsumer consumer);
    public virtual void ProcessBeforeInterior(ITreeNode element, IHighlightingConsumer highlightings);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.Resolve.XamlIncorrectTypeParameterNumberErrorHandler : XmlIncorrectTypeParameterNumberErrorHandler {
    public virtual IHighlighting Run(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.Resolve.XamlNotResolvedErrorHandler : XmlNotResolvedErrorHandler {
    protected virtual IHighlighting CreateNotResolvedLateBoundReferenceHighlighting(IReference reference);
    protected virtual IHighlighting CreateNotResolvedErrorHighlighting(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.Resolve.XamlPathErrorHandler : PathErrorHandler {
    private static ResolveErrorType[] ourXamlPathErrors;
    public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    private static XamlPathErrorHandler();
    public virtual IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    public virtual IHighlighting Run(IReference reference);
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.Resolve.XamlPathHighlightingUtil : object {
    public static IHighlighting CreateHighlighting(IPathReference pathReference);
}
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.Xaml.Stages.ResourcesAnalysis : XamlAnalysisBase {
    [NotNullAttribute]
private UnusedResourcesCollection myAllResources;
    [NotNullAttribute]
private Stack`1<IResourceDeclaration> myCurrentResources;
    [NotNullAttribute]
private XamlErrorStageProcess myErrorProcess;
    [NotNullAttribute]
private Dictionary`2<IXmlTag, OneToSetMap`2<object, IResourceDeclaration>> myResourcesPerDictionary;
    private static ClrTypeName ourKeyValuePairName;
    public ResourcesAnalysis(XamlErrorStageProcess errorProcess);
    private static ResourcesAnalysis();
    public virtual bool InteriorShouldBeProcessed(ITreeNode element, IHighlightingConsumer consumer);
    public virtual void Init(IXmlFile file);
    public virtual void Done(IXmlFile file, IHighlightingConsumer consumer);
    private static void MarkHiddenResources(IResourceDeclaration resourceDeclaration, IHighlightingConsumer consumer);
    public virtual void ProcessBeforeInterior(ITreeNode element, IHighlightingConsumer consumer);
    private static OneToSetMap`2<object, IResourceDeclaration> CollectBaseResources(ISymbolTable table);
    private static bool IsBoundByTypeResourceDeclaration(IResourceDeclaration resourceDeclaration);
    private static bool IsResourceDictionary(IXmlTag tag);
    private static bool IsCustomKeyValueCollection(IXmlTag tag);
    private static IDeclaredType GetType(IXmlTag tag);
    private void ProcessAttributes(IResourceDeclaration resourceDeclaration, IHighlightingConsumer consumer);
    public virtual void ProcessAfterInterior(ITreeNode element, IHighlightingConsumer highlightings);
}
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.Xaml.Stages.TagAnalysis : XamlAnalysisBase {
    public virtual bool InteriorShouldBeProcessed(ITreeNode element, IHighlightingConsumer highlightingConsumer);
    public virtual void ProcessBeforeInterior(ITreeNode element, IHighlightingConsumer consumer);
    private static IResolveResult GetTypeReferenceResolveResult(IXamlObjectElement objectElement);
    private static void ProcessObjectElement(IXamlObjectElement objectElement, IHighlightingConsumer highlightings);
    private static void ProcessKeyElement(IXKeyObjectElement xKeyElement, IHighlightingConsumer highlightings);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.TextAfterMarkupAnalyzer : ElementProblemAnalyzer`1<IMarkup> {
    protected virtual void Run(IMarkup element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
internal class JetBrains.ReSharper.Daemon.Xaml.Stages.UnusedResourcesCollection : object {
    [NotNullAttribute]
private IList`1<IResourceDeclaration> myAllResources;
    private static bool CanMarkResourceAsUnused(IResourceDeclaration declaration);
    public IEnumerable`1<IResourceDeclaration> GetUnusedResources();
    public void AddResourceDeclaration(IResourceDeclaration declaration);
    public void MarkResourceDeclarationUsed(IResourceDeclaration declaration);
    public void Clear();
}
[DaemonStageAttribute("16")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.UsageChecking.CollectPrivateUsagesStage : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Daemon.Xaml.Stages.UsageChecking.CollectPrivateUsagesStage/<CreateProcess>d__0")]
public sealed virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
}
public class JetBrains.ReSharper.Daemon.Xaml.Stages.UsageChecking.CollectPrivateUsagesStageProcess : object {
    private IXamlFile myFile;
    private CollectUsagesStageProcess myCollectUsagesStageProcess;
    [CompilerGeneratedAttribute]
private IDaemonProcess <DaemonProcess>k__BackingField;
    public IDaemonProcess DaemonProcess { get; }
    public CollectPrivateUsagesStageProcess(IXamlFile file, IDaemonProcess daemonProcess);
    public sealed virtual void Execute(Action`1<DaemonStageResult> committer);
    [CompilerGeneratedAttribute]
public sealed virtual IDaemonProcess get_DaemonProcess();
}
internal class JetBrains.ReSharper.Daemon.Xaml.Stages.UsageChecking.XamlElementPropertiesCalculator : object {
    public sealed virtual bool IsPartialClass(IClass classType);
    public sealed virtual bool IsPartialMethod(IMethod method);
    public sealed virtual bool IsStaticClass(IClass classType);
    public sealed virtual bool CanConvertToConstant(IField field);
    public sealed virtual bool CanConvertToConstant(ILocalVariable local);
    public sealed virtual bool IsRedundantOverload(ITypeMember member);
    public sealed virtual bool IsPrimaryConstructor(IConstructor constructor);
    public sealed virtual bool HasPositionalParameters(ITypeElement typeElement);
    public sealed virtual bool MethodDeclarationHasBody(IDeclaration declaration);
    public sealed virtual bool IsInitializedInDeclaration(IDeclaration declaration);
    public sealed virtual bool IsMemberVirtualByConvention(ITypeElement typeElement, ITypeMember typeMember);
    public sealed virtual IDeclaration GetContainingTypeMember(IDeclaration declaration);
    public sealed virtual IEnumerable`1<ITypeMember> GetPositionalMembers(ITypeElement typeElement);
}
internal class JetBrains.ReSharper.Daemon.Xaml.Stages.UsageChecking.XamlPresentationHelper : PresentationHelper {
    public virtual string GetInternalTerm(IDeclaration declaration);
    public virtual DocumentRange LowerAccessHighlightingRange(IDeclaration declaration);
}
internal class JetBrains.ReSharper.Daemon.Xaml.Stages.UsageChecking.XamlUsageAnalyzer : UsageAnalyzer {
    private static UsageState SHOULD_BE_PUBLIC;
    public XamlUsageAnalyzer(IEnumerable`1<IUsageInspectionsSuppressor> suppressors, IEnumerable`1<ICustomUsageAnalysisProcessor> customProcessors);
    public virtual void ProcessElement(ITreeNode node, IParameters parameters);
    protected virtual VariableUsageState GetVariableUsageState(IDeclaredElement variable, IReference reference, IParameters parameters);
    protected virtual void ProcessUsage(IDeclaredElement element, ITreeNode node, IReference reference, IParameters parameters);
    private static void ProcessResourceReference(IXamlResource xamlResource, IParameters parameters);
    private static void ProcessBindingToStaticProperty(IProperty property, ITreeNode node, IParameters parameters);
    private static void ProcessXClassDeclaration(IXClassAttribute attribute, IParameters parameters);
    private static void ProcessApplicationDefinition(IXamlTypeDeclaration typeDeclaration, IParameters parameters);
    private static void ProcessNameDeclaration(IXmlAttribute nameAttribute, IParameters parameters);
    private static void ProcessRelatedMembersUsage(ITypeMember typeMember, ITreeNode node, IParameters parameters);
    private static void ProcessXamlMemberUsage(ITypeMember typeMember, IXamlTypeCache cache, IParameters parameters, string memberName, Func`3<ITypeMember, IXamlTypeCache, bool> isRelatedMember);
    private static void ProcessPathElementUsage(IPathDeclaredElement pathElement, IParameters parameters);
    protected virtual UsageState GetAccessRightsUsageState(IReference reference, ITypeMember typeMember);
    protected virtual bool UpdateAccessRightsUsageState(IReference reference, ITypeMember typeMember, UsageState currentUsageState, UsageState& updatedState);
}
[ConfigurableSeverityImplementedForLanguageAttribute("UnusedMember.Local", "XAML")]
[ConfigurableSeverityImplementedForLanguageAttribute("UnusedMember.Global", "XAML")]
[ConfigurableSeverityImplementedForLanguageAttribute("UnusedType.Local", "XAML")]
[ConfigurableSeverityImplementedForLanguageAttribute("UnusedType.Global", "XAML")]
[ConfigurableSeverityImplementedForLanguageAttribute("UnusedMember.Local", "XAML")]
[ConfigurableSeverityImplementedForLanguageAttribute("UnusedMember.Global", "XAML")]
[ConfigurableSeverityImplementedForLanguageAttribute("NotAccessedField.Local", "XAML")]
[ConfigurableSeverityImplementedForLanguageAttribute("NotAccessedField.Global", "XAML")]
[ConfigurableSeverityImplementedForLanguageAttribute("MemberCanBePrivate.Global", "XAML")]
[ConfigurableSeverityImplementedForLanguageAttribute("MemberCanBeProtected.Global", "XAML")]
[ConfigurableSeverityImplementedForLanguageAttribute("MemberCanBeInternal", "XAML")]
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
internal class JetBrains.ReSharper.Daemon.Xaml.Stages.UsageChecking.XamlUsageCheckingServices : CLRUsageCheckingServices {
    public XamlUsageCheckingServices(FileDependency fileDependency, IEnumerable`1<IUsageInspectionsSuppressor> suppressors, IEnumerable`1<ICustomUsageAnalysisProcessor> customProcessors);
    public virtual bool GetUnusedDeclarationsSupported();
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlAccessRightsProblemAnalyzer : ElementProblemAnalyzer`1<IXamlTypeDeclaration> {
    protected virtual void Run(IXamlTypeDeclaration element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlAnalysisBase : XmlAnalysis {
    public virtual bool InteriorShouldBeProcessed(ITreeNode element, IHighlightingConsumer context);
}
[XmlAnalysisProviderAttribute("16")]
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlAnalysisProvider : object {
    public bool OnlyPrimary { get; }
    public sealed virtual IEnumerable`1<IXmlAnalysis> GetAnalyses(IXmlFile file, IDaemonProcess process, IContextBoundSettingsStore settingsStore);
    public sealed virtual bool get_OnlyPrimary();
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlAvaloniaBindingModeInconsistencyProblemAnalyzer : ElementProblemAnalyzer`1<IBindingMarkup> {
    protected virtual void Run(IBindingMarkup element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlBindingNullabilityProblemAnalyzer : XamlNullabilityProblemAnalyzerBase`1<IBinding> {
    protected virtual void Run(IBinding element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlCastExpressionProblemAnalyzer : ElementProblemAnalyzer`1<ICastExpression> {
    protected virtual void Run(ICastExpression element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlCompiledBindingProblemAnalyzer : ElementProblemAnalyzer`1<IBinding> {
    protected virtual void Run(IBinding binding, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlCornerRadiusPropertyAttributeValueAnalyzer : ElementProblemAnalyzer`1<IPropertyAttributeValue> {
    protected virtual void Run(IPropertyAttributeValue element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    public static void AnalyzeCornerRadiusValue(ElementProblemAnalyzerData data, IHighlightingConsumer consumer, string unquotedValue, DocumentOffset startOffset, DocumentOffset endOffset, ITreeNode element);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlCornerRadiusPropertyElementValueAnalyzer : ElementProblemAnalyzer`1<IXamlPropertyElement> {
    protected virtual void Run(IXamlPropertyElement element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
public abstract class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlDaemonStageBase : object {
    public sealed virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
    [CanBeNullAttribute]
protected abstract virtual IDaemonStageProcess TryCreateProcessInternal(IXamlFile file, IDaemonProcess process, DaemonProcessKind processKind, IContextBoundSettingsStore settings);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlDataContextInBindingMarkupInlayHintProblemAnalyzer : ElementProblemAnalyzer`1<IBinding> {
    private PushToHintMode myMode;
    private bool myShowFullQualifiedNamesForDataContext;
    private bool myHideHintForTemplateBindingIfDataContextHasPresented;
    public sealed virtual bool ShouldRun(IFile file, ElementProblemAnalyzerData data);
    protected virtual void Run(IBinding element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlElementNameProblemAnalyzer : ElementProblemAnalyzer`1<IXamlObjectElement> {
    protected virtual void Run(IXamlObjectElement objectElement, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlElementNameUsageProblemAnalyzer : ElementProblemAnalyzer`1<IPropertyAttributeValue> {
    protected virtual void Run(IPropertyAttributeValue element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[DaemonStageAttribute("0")]
internal class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlErrorStage : XamlDaemonStageBase {
    [NotNullAttribute]
private ResolveHighlighterRegistrar myResolveHighlighterRegistrar;
    [NotNullAttribute]
private ElementProblemAnalyzerRegistrar myElementProblemAnalyzerRegistrar;
    public XamlErrorStage(ResolveHighlighterRegistrar resolveHighlighterRegistrar, ElementProblemAnalyzerRegistrar elementProblemAnalyzerRegistrar);
    protected virtual IDaemonStageProcess TryCreateProcessInternal(IXamlFile file, IDaemonProcess process, DaemonProcessKind processKind, IContextBoundSettingsStore settings);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlGridProblemAnalyzer : ElementProblemAnalyzer`1<IXamlObjectElement> {
    protected virtual void Run(IXamlObjectElement element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private static Nullable`1<int> TryGetDefinitionsCount(IXamlObjectElement element, IType gridType, IType definitionType, string propertyName, string meaningfulPropertyName, IHighlightingConsumer consumer);
    private static void InspectChildren(IXamlObjectElement element, IType gridType, int definitionsCount, string indexPropertyName, string spanPropertyName, IHighlightingConsumer consumer, ElementProblemAnalyzerData data);
    public static Nullable`1<int> TryGetNumericPropertyValue(IXmlTag element, IType propertyOwner, string propertyName, IPropertySetter& propertySetter);
    [CanBeNullAttribute]
public static string TryGetStringPropertyValue(IXmlTag element, IType propertyOwner, string propertyName, IPropertySetter& propertySetter);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlIdentifierTooltipProvider : IdentifierTooltipProvider`1<XamlLanguage> {
    public XamlIdentifierTooltipProvider(Lifetime lifetime, ISolution solution, IDeclaredElementDescriptionPresenter presenter, DeclaredElementPresenterTextStylesService textStylesService, IIdentifierTooltipSuppressor identifierTooltipSuppressor, DeclaredElementPresenterTextStyles textStyles);
    protected virtual PsiLanguageType SelectPresentationLanguage(IDeclaredElement declaredElement, IFile psiFile);
}
public static class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlInlayHintUtils : object {
    public static PushToHintMode GetMode(ElementProblemAnalyzerData data, Expression`1<Func`2<TKeyClass, PushToHintMode>> lambdaexpression);
    public static bool ShowFullQualifiedNamesForDataContextAttribute(ElementProblemAnalyzerData data);
    public static bool HideHintForTemplateBindingIfDataContextHasBeenPresented(ElementProblemAnalyzerData data);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlMarkupAttributeNameInlayHintProblemAnalyzer : ElementProblemAnalyzer`1<IMarkupAttribute> {
    protected virtual void Run(IMarkupAttribute element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    public sealed virtual bool ShouldRun(IFile file, ElementProblemAnalyzerData data);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlMemberAccessProblemAnalyzer : ElementProblemAnalyzer`1<IPropertyExpression> {
    protected virtual void Run(IPropertyExpression element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private void AnalyzeWriteAccessProblems(IPropertyExpression element, IHighlightingConsumer consumer, IReference reference);
    private void AnalyzeReadAccessProblems(IPropertyExpression element, IHighlightingConsumer consumer, IReference reference);
    [CanBeNullAttribute]
private ITreeNode GetPropertyNameNode(IPropertyExpression expression);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlModifiersAttributeProblemAnalyzer : ElementProblemAnalyzer`1<IModifiersAttribute> {
    protected virtual void Run(IModifiersAttribute element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[HighlightingSourceAttribute]
public abstract class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlNullabilityProblemAnalyzerBase`1 : ElementProblemAnalyzer`1<T> {
    protected void AnalyzePath(ITreeNode path, IHighlightingConsumer consumer, ValueAnalysisMode valueAnalysisMode, bool analyzeNullReferences, CodeAnnotationsCache nullnessProvider);
    [CanBeNullAttribute]
private IQualifierExpression TryGetQualifier(ITreeNode element);
    private void AnalyzeArgument(IXamlArgument element, IHighlightingConsumer consumer, ValueAnalysisMode analysisMode, CodeAnnotationsCache codeAnnotationsCache);
    private bool CanElementBeNull(ITreeNode element, CodeAnnotationsCache codeAnnotationsCache, ValueAnalysisMode valueAnalysisMode);
    private bool CanReferenceBeNull(IReference propertyReference, ValueAnalysisMode valueAnalysisMode, INullnessProvider infoProvider);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlObsoleteElementProblemAnalyzer : object {
    public sealed virtual void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private static void ProcessReference(IReference reference, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlPropertySetterProblemAnalyzer : ElementProblemAnalyzer`1<IPropertySetter> {
    protected virtual void Run(IPropertySetter element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    [CanBeNullAttribute]
private static IDeclaredType GetPossibleAttachedOwnerType(ITreeNode context, IDeclaredElement property);
    private static void CheckPropertyElement(IXamlPropertyElement propertyElement, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlRelativeSourceExpressionProblemAnalyzer : ElementProblemAnalyzer`1<IRelativeSourceExpression> {
    protected virtual void Run(IRelativeSourceExpression element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private void AnalyzeParameters(IRelativeSourceExpression element, IRelativeSourceParametersExpression elementParameters, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlRelativeSourceProblemAnalyzer : ElementProblemAnalyzer`1<IRelativeSourceUsage> {
    protected virtual void Run(IRelativeSourceUsage element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlResourceUsageProblemAnalyzer : ElementProblemAnalyzer`1<IResourceUsage> {
    protected virtual void Run(IResourceUsage resourceUsage, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlSharedAttributeProblemAnalyzer : ElementProblemAnalyzer`1<ISharedAttribute> {
    protected virtual void Run(ISharedAttribute attribute, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[DaemonStageAttribute("16")]
internal class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlSmartResolverStage : XamlDaemonStageBase {
    protected virtual IDaemonStageProcess TryCreateProcessInternal(IXamlFile file, IDaemonProcess process, DaemonProcessKind processKind, IContextBoundSettingsStore settings);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlStyledControlProblemAnalyzer : ElementProblemAnalyzer`1<IXamlObjectElement> {
    protected virtual void Run(IXamlObjectElement element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlStyleDeclarationProblemAnalyzer : ElementProblemAnalyzer`1<IStyleDeclaration> {
    protected virtual void Run(IStyleDeclaration declaration, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    [ContractAnnotationAttribute("valueElement: null => null")]
private static IType GetBasedOnType(ITreeNode valueElement, IResourceDeclaration& declaration);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlStyleResourceProblemAnalyzer : ElementProblemAnalyzer`1<IResourceUsage> {
    protected virtual void Run(IResourceUsage element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlThinknessPropertyAttributeValueAnalyzer : ElementProblemAnalyzer`1<IPropertyAttributeValue> {
    protected virtual void Run(IPropertyAttributeValue element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    public static void AnalyzeThicknessValue(ElementProblemAnalyzerData data, IHighlightingConsumer consumer, string unquotedValue, DocumentOffset startOffset, DocumentOffset endOffset, ITreeNode element);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlThinknessPropertyElementValueAnalyzer : ElementProblemAnalyzer`1<IXamlPropertyElement> {
    protected virtual void Run(IXamlPropertyElement element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlTypeArgumentsAttributeProblemAnalyzer : ElementProblemAnalyzer`1<ITypeArgumentsAttribute> {
    protected virtual void Run(ITypeArgumentsAttribute attribute, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlXBindBindingModeProblemAnalyzer : ElementProblemAnalyzer`1<IXBindMarkup> {
    protected virtual void Run(IXBindMarkup element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlXBindDecimalParsingIsCultureDependentProblemAnalyzer : ElementProblemAnalyzer`1<IMarkupNumberConstant> {
    protected virtual void Run(IMarkupNumberConstant element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlXBindMethodInvocationUnavailableProblemAnalyzer : ElementProblemAnalyzer`1<IMethodInvocationExpression> {
    protected virtual void Run(IMethodInvocationExpression element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlXBindNullabilityProblemAnalyzer : XamlNullabilityProblemAnalyzerBase`1<IXBindMarkup> {
    protected virtual void Run(IXBindMarkup element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Xaml.Stages.XamlXBindUpdateSourceTriggerProblemAnalyzer : ElementProblemAnalyzer`1<IXBindMarkup> {
    protected virtual void Run(IXBindMarkup element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Daemon.Xaml.Syntax.XamlSyntaxHighlightingManager : SyntaxHighlightingManager {
    public virtual SyntaxHighlightingProcessor CreateProcessor();
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.Xaml.Syntax.XamlSyntaxHighlightingProcessor : SyntaxHighlightingProcessor {
    protected string StringAttributeId { get; }
    protected virtual string get_StringAttributeId();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Daemon.Xaml.Syntax.ZoneMarker : object {
}
internal class JetBrains.ReSharper.Daemon.Xaml.Util.DeclarationsUtil : object {
    public static TDeclaration FindHiddenDeclaration(ISymbolTable symbolTable, TDeclaration currentDeclaration, Func`4<TDeclaration, TDeclaration, bool, bool> canHideDelegate);
}
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.Daemon.Xaml.Util.XKeyUtil : object {
    public static void CheckXKeyAllowance(ITreeNode xKey, IHighlightingConsumer highlightings);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
internal class JetBrains.ReSharper.Daemon.Xaml.XamlDaemonBehavior : XmlDaemonBehavior {
    public bool CanShowErrorBox { get; }
    public bool RunInSolutionAnalysis { get; }
    public virtual ErrorStripeRequestWithDescription InitialErrorStripe(IPsiSourceFile sourceFile);
    public virtual bool get_CanShowErrorBox();
    public virtual bool get_RunInSolutionAnalysis();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Daemon.Xaml.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
