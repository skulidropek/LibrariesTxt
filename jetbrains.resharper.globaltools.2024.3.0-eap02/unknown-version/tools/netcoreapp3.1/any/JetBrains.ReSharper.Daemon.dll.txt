[ActionGroupAttribute("ErrorStripeControl.Popup.CodeAnalysisSettings", "0", "10")]
public class JetBrains.ReSharper.Daemon.Actions.CodeAnalysisSettingsActionBar : object {
    public CodeAnalysisSettingsActionBar(MarkModifiedAction markModified, MarkUnchangedAction markUnchanged, ToggleEnhancedSyntaxColoringAction toggleEnhancedSyntaxColoring, ToggleShowImportPopupAction toggleShowImportPopup, ToggleShowCppImportPopupAction toggleShowCppImportPopup, ToggleInlayHintsAction toggleInlayHint, ToggleVirtualIndentingAction toggleVirtualIndentingAction, Separator sep1, CodeAnalysisSettingsVSIntegrationActionBar vsIntegration, Separator sep2);
}
[ActionGroupAttribute("ErrorStripeControl.Popup.CodeInspections.VSIntegration", "0", "16")]
public class JetBrains.ReSharper.Daemon.Actions.CodeAnalysisSettingsVSIntegrationActionBar : object {
}
[ActionGroupAttribute("ErrorStripeControl.Popup", "0", "10")]
public class JetBrains.ReSharper.Daemon.Actions.DaemonIndicatorNextPrevHighlightingActionBar : object {
    public DaemonIndicatorNextPrevHighlightingActionBar(NavigateToPrevCodeAnalysisErrorStripeMarkerAction prevHighlightingAction, NavigateToNextCodeAnalysisErrorStripeMarkerAction nextHighlightingAction, Separator sep1);
}
public interface JetBrains.ReSharper.Daemon.Actions.IWhyNoDaemonActionFilter {
    public abstract virtual bool ShowWhyNoDaemon(DaemonStateWithDescription stateWithDescription);
}
[ActionAttribute("ErrorStripeControl.Popup.MarkModifiedAction", "JetBrains.ReSharper.Daemon.Resources.Strings3", "MarkFileAsModifiedToShowHiddenHighlightingsActionText")]
public class JetBrains.ReSharper.Daemon.Actions.MarkModifiedAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("ErrorStripeControl.Popup.MarkUnchangedAction", "JetBrains.ReSharper.Daemon.Resources.Strings3", "MarkFileAsUnchangedToHideExcessiveHighlightingsActionText")]
public class JetBrains.ReSharper.Daemon.Actions.MarkUnchangedAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("ErrorStripeControl.Popup.ToggleEnhancedSyntaxColoring", "JetBrains.ReSharper.Daemon.Resources.Strings3", "ToggleEnhancedSyntaxColoringActionText")]
public class JetBrains.ReSharper.Daemon.Actions.ToggleEnhancedSyntaxColoringAction : ToggleBooleanSettingActionBase`1<HighlightingSettings> {
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
[ActionAttribute("JetBrains.ReSharper.Daemon.Resources.Strings3", "ToggleInlayHintsActionText")]
public class JetBrains.ReSharper.Daemon.Actions.ToggleInlayHintsAction : ToggleBooleanSettingActionBase`1<GeneralInlayHintsOptions> {
}
[ActionAttribute("JetBrains.ReSharper.Daemon.Resources.Strings3", "ToggleParameterNameHintsActionText")]
public class JetBrains.ReSharper.Daemon.Actions.ToggleParameterNameHintsAction : ToggleBooleanSettingActionBase`1<GeneralInlayHintsOptions> {
}
[ActionAttribute("ErrorStripeControl.Popup.ToggleShowCppImportPopup", "JetBrains.ReSharper.Daemon.Resources.Strings3", "ToggleShowCImportPopupActionText")]
public class JetBrains.ReSharper.Daemon.Actions.ToggleShowCppImportPopupAction : ToggleShowImportPopupActionBase {
    protected virtual bool AcceptsFileType(ProjectFileType fileType);
}
[ActionAttribute("ErrorStripeControl.Popup.ToggleShowImportPopup", "JetBrains.ReSharper.Daemon.Resources.Strings3", "ToggleShowImportPopupActionText")]
public class JetBrains.ReSharper.Daemon.Actions.ToggleShowImportPopupAction : ToggleShowImportPopupActionBase {
    protected virtual bool AcceptsFileType(ProjectFileType fileType);
}
public abstract class JetBrains.ReSharper.Daemon.Actions.ToggleShowImportPopupActionBase : ToggleBooleanSettingActionBase`1<HighlightingSettings> {
    protected ToggleShowImportPopupActionBase(string text, Expression`1<Func`2<HighlightingSettings, bool>> option);
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    protected abstract virtual bool AcceptsFileType(ProjectFileType fileType);
}
[ActionAttribute("Toggle Virtual Indents")]
public class JetBrains.ReSharper.Daemon.Actions.ToggleVirtualIndentingAction : ToggleBooleanSettingActionBase`1<GeneralVirtualIndentingSettings> {
}
[ActionAttribute("JetBrains.ReSharper.Daemon.Resources.Strings3", "WhyNoDaemonActionText")]
public class JetBrains.ReSharper.Daemon.Actions.WhyNoDaemonAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    protected virtual string TryGetNoDaemonDescription(IDataContext context);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Daemon.Actions.WhyNoDaemonActionFilter : object {
    public virtual bool ShowWhyNoDaemon(DaemonStateWithDescription stateWithDescription);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Daemon.Actions.ZoneMarker : object {
}
[PolymorphicMarshallerAttribute("5")]
public class JetBrains.ReSharper.Daemon.CallGraph.CallGraphDataElement : object {
    [NotNullAttribute]
[ItemNotNullAttribute]
private List`1<CallGraphRootMarksProviderBase> myCallGraphRootMarkProviders;
    [NotNullAttribute]
[ItemNotNullAttribute]
private List`1<ICallGraphEdgeProvider> myEdgeProviders;
    [NotNullAttribute]
private IElementIdProvider myElementIdProvider;
    [NotNullAttribute]
private CallGraphStructure myStructure;
    [UsedImplicitlyAttribute]
public static ReadDelegate`1<object> ReadDelegate;
    [UsedImplicitlyAttribute]
public static WriteDelegate`1<object> WriteDelegate;
    [NotNullAttribute]
public CountingSet`1<ElementId> Vertices { get; }
    [NotNullAttribute]
public OneToCompactCountingSet`2<ElementId, ElementId> Edges { get; }
    [NotNullAttribute]
public OneToCompactCountingSet`2<ElementId, ElementId> InvertedEdges { get; }
    [NotNullAttribute]
public OneToCompactCountingSet`2<CallGraphRootMarkId, ElementId> RootMarks { get; }
    [NotNullAttribute]
public OneToCompactCountingSet`2<CallGraphRootMarkId, ElementId> BanMarks { get; }
    public CallGraphDataElement(IEnumerable`1<CallGraphRootMarksProviderBase> callGraphRootMarksProviders, IEnumerable`1<ICallGraphEdgeProvider> edgeProviders, IElementIdProvider elementIdProvider);
    private CallGraphDataElement(CallGraphStructure structure);
    private static CallGraphDataElement();
    public CountingSet`1<ElementId> get_Vertices();
    public OneToCompactCountingSet`2<ElementId, ElementId> get_Edges();
    public OneToCompactCountingSet`2<ElementId, ElementId> get_InvertedEdges();
    public OneToCompactCountingSet`2<CallGraphRootMarkId, ElementId> get_RootMarks();
    public OneToCompactCountingSet`2<CallGraphRootMarkId, ElementId> get_BanMarks();
    public sealed virtual void Dump(StreamWriter writer, ISolution solution);
    private static void MergeOneToCompactCountingSets(OneToCompactCountingSet`2<T, ElementId> dest, OneToCompactCountingSet`2<T, ElementId> additionalData);
    private static void MergeCountingSet(CountingSet`1<T> dest, CountingSet`1<T> additionalData);
    public sealed virtual void AddData(ISwaExtensionData data);
    [NotNullAttribute]
public sealed virtual ISwaExtensionInfo ToInfo(CollectUsagesStagePersistentData persistentData);
    private void AddMarkTo(CallGraphRootMarkId markId, IDeclaredElement element, OneToCompactCountingSet`2<CallGraphRootMarkId, ElementId> targetMarks);
    public sealed virtual void ProcessBeforeInterior(ITreeNode element, IParameters parameters);
    public sealed virtual void ProcessAfterInterior(ITreeNode element, IParameters parameters);
    private static void CheckForInterrupt(IParameters parameters);
    public sealed virtual void ProcessNode(ITreeNode node, IParameters parameters);
    private static void Write(UnsafeWriter writer, CallGraphDataElement info);
    private static CallGraphDataElement Read(UnsafeReader reader);
    private static void WriteMarks(OneToCompactCountingSet`2<CallGraphRootMarkId, ElementId> marks, UnsafeWriter writer);
    private static void WriteEdges(OneToCompactCountingSet`2<ElementId, ElementId> edges, UnsafeWriter writer);
    private static OneToCompactCountingSet`2<CallGraphRootMarkId, ElementId> ReadMarks(UnsafeReader reader);
    [NotNullAttribute]
private static OneToCompactCountingSet`2<ElementId, ElementId> ReadEdges(UnsafeReader reader);
    private static void WriteCountingSet(IReadonlyCountingSet`1<ElementId> set, UnsafeWriter writer);
    private static CountingSet`1<ElementId> ReadCountingSet(UnsafeReader reader);
}
public class JetBrains.ReSharper.Daemon.CallGraph.CallGraphDefaultEdgeConsumer : object {
    private IElementIdProvider myProvider;
    private List`1<ValueTuple`2<ElementId, ElementId>> myEdges;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<ValueTuple`2<ElementId, ElementId>> Edges { get; }
    public CallGraphDefaultEdgeConsumer(IElementIdProvider provider);
    public IReadOnlyList`1<ValueTuple`2<ElementId, ElementId>> get_Edges();
    public sealed virtual void AddEdge(ElementId from, ElementId to);
    public sealed virtual void AddEdge(IDeclaredElement from, IDeclaredElement to);
}
public abstract class JetBrains.ReSharper.Daemon.CallGraph.CallGraphEdgeProviderBase`1 : object {
    public sealed virtual void FindEdges(ITreeNode treeNode, IDeclaredElement caller, ICallGraphEdgeConsumer consumer);
    protected abstract virtual void FindEdges(T treeNode, IDeclaredElement caller, ICallGraphEdgeConsumer consumer);
}
public class JetBrains.ReSharper.Daemon.CallGraph.CallGraphInfoIndex : object {
    [NotNullAttribute]
private Dictionary`2<CallGraphRootMarkId, ICallGraphPropagator> myPropagators;
    [NotNullAttribute]
private CallGraphStructure myStructure;
    [NotNullAttribute]
private ReadWriteWatcher myWatcher;
    [NotNullAttribute]
private CountingSet`1<ElementId> Vertices { get; }
    [NotNullAttribute]
private OneToCompactCountingSet`2<ElementId, ElementId> Edges { get; }
    [NotNullAttribute]
private OneToCompactCountingSet`2<ElementId, ElementId> InvertedEdges { get; }
    [NotNullAttribute]
private OneToCompactCountingSet`2<CallGraphRootMarkId, ElementId> RootMarks { get; }
    [NotNullAttribute]
private OneToCompactCountingSet`2<CallGraphRootMarkId, ElementId> BanMarks { get; }
    public CallGraphInfoIndex(IEnumerable`1<CallGraphRootMarksProviderBase> markProviders);
    private CountingSet`1<ElementId> get_Vertices();
    private OneToCompactCountingSet`2<ElementId, ElementId> get_Edges();
    private OneToCompactCountingSet`2<ElementId, ElementId> get_InvertedEdges();
    private OneToCompactCountingSet`2<CallGraphRootMarkId, ElementId> get_RootMarks();
    private OneToCompactCountingSet`2<CallGraphRootMarkId, ElementId> get_BanMarks();
    private void PropagateRemoveEdge(ElementId from, ElementId to);
    private void PropagateUnmark(CallGraphRootMarkId markId, ElementId vertexId);
    private void PropagatePermitVertex(CallGraphRootMarkId rootMarkId, ElementId vertexId);
    private void PropagateRemoveVertex(ElementId vertexId);
    private void PropagateAddVertex(ElementId vertex);
    private void PropagateBanVertex(CallGraphRootMarkId rootMarkId, ElementId vertexId);
    private void PropagateRootVertex(CallGraphRootMarkId markId, ElementId vertexId);
    private void PropagateAddEdge(ElementId from, ElementId to);
    private void RemoveEdge(ElementId from, ElementId to, int count);
    private static void RemoveEdgeStatic(ElementId from, ElementId to, int count, CallGraphInfoIndex this);
    private void UnrootVertex(CallGraphRootMarkId markId, ElementId vertex, int count);
    private static void UnrootVertexStatic(CallGraphRootMarkId markId, ElementId vertex, int count, CallGraphInfoIndex this);
    private void PermitVertex(CallGraphRootMarkId rootMarkId, ElementId vertex, int count);
    private static void PermitVertexStatic(CallGraphRootMarkId markId, ElementId vertex, int count, CallGraphInfoIndex this);
    private void RemoveVertex(ElementId id, int count);
    private static void RemoveVertexStatic(ElementId vertex, int count, CallGraphInfoIndex this);
    private void AddVertex(ElementId vertex, int count);
    private static void AddVertexStatic(ElementId vertex, int count, CallGraphInfoIndex this);
    private void BanVertex(CallGraphRootMarkId rootMarkId, ElementId vertex, int count);
    private static void BanVertexStatic(CallGraphRootMarkId markId, ElementId vertex, int count, CallGraphInfoIndex this);
    private void RootVertex(CallGraphRootMarkId markId, ElementId vertex, int count);
    private static void RootVertexStatic(CallGraphRootMarkId markId, ElementId vertex, int count, CallGraphInfoIndex this);
    private void AddEdge(ElementId from, ElementId to, int count);
    private static void AddEdgeStatic(ElementId from, ElementId to, int count, CallGraphInfoIndex this);
    private static void MergeOneToCompactCountingSet(OneToCompactCountingSet`2<TFrom, TTo> old, OneToCompactCountingSet`2<TFrom, TTo> new, Action`4<TFrom, TTo, int, CallGraphInfoIndex> whatToDo, CallGraphInfoIndex this);
    private static void MergeCountingSet(CountingSet`1<T> old, CountingSet`1<T> new, Action`3<T, int, CallGraphInfoIndex> whatToDo, CallGraphInfoIndex this);
    private void MergeInternal(CallGraphDataElement oldCallGraphDataElement, CallGraphDataElement newCallGraphDataElement);
    private bool IsMarkedInternal(CallGraphRootMarkId markId, ElementId vertex, bool global);
    private void ClearInternal();
    public void DumpSize(StreamWriter writer);
    public void DumpFull(StreamWriter writer, ISolution solution);
    public bool IsMarkedLocal(CallGraphRootMarkId markId, ElementId vertex);
    public bool IsMarkedGlobal(CallGraphRootMarkId markId, ElementId vertex);
    [ObsoleteAttribute]
public bool IsRootMarked(CallGraphRootMarkId markId, ElementId vertex);
    public void Merge(ISwaExtensionInfo oldData, ISwaExtensionInfo newData);
    public void Clear();
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Daemon.CallGraph.CallGraphRootMarkId : ValueType {
    public int Id;
    public CallGraphRootMarkId(string id);
    public CallGraphRootMarkId(int id);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public bool Equals(CallGraphRootMarkId anotherId);
    public virtual string ToString();
    public static CallGraphRootMarkId Read(UnsafeReader reader);
    public void Write(UnsafeWriter writer);
    public static bool op_Equality(CallGraphRootMarkId id1, CallGraphRootMarkId id2);
    public static bool op_Inequality(CallGraphRootMarkId id1, CallGraphRootMarkId id2);
}
public abstract class JetBrains.ReSharper.Daemon.CallGraph.CallGraphRootMarksProviderBase : object {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ICallGraphPropagator <Propagator>k__BackingField;
    private CallGraphRootMarkId myId;
    public IProperty`1<bool> Enabled { get; }
    public string Name { get; }
    public ICallGraphPropagator Propagator { get; }
    public CallGraphRootMarkId Id { get; }
    protected CallGraphRootMarksProviderBase(string name, ICallGraphPropagator propagator, bool isEnabled);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_Enabled();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public ICallGraphPropagator get_Propagator();
    public abstract virtual LocalList`1<IDeclaredElement> GetRootMarksFromNode(ITreeNode currentNode, IDeclaredElement containingFunction);
    public abstract virtual LocalList`1<IDeclaredElement> GetBanMarksFromNode(ITreeNode currentNode, IDeclaredElement containingFunction);
    protected bool Equals(CallGraphRootMarksProviderBase other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public CallGraphRootMarkId get_Id();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.CallGraph.CallGraphRootMarksProviderIdToNameMap : object {
    public IReadOnlyDictionary`2<int, string> IdToName;
    public CallGraphRootMarksProviderIdToNameMap(IEnumerable`1<CallGraphRootMarksProviderBase> callGraphMarksProviders);
}
public class JetBrains.ReSharper.Daemon.CallGraph.CallGraphStructure : object {
    [CompilerGeneratedAttribute]
private CountingSet`1<ElementId> <Vertices>k__BackingField;
    [CompilerGeneratedAttribute]
private OneToCompactCountingSet`2<ElementId, ElementId> <Edges>k__BackingField;
    [CompilerGeneratedAttribute]
private OneToCompactCountingSet`2<ElementId, ElementId> <InvertedEdges>k__BackingField;
    [CompilerGeneratedAttribute]
private OneToCompactCountingSet`2<CallGraphRootMarkId, ElementId> <RootMarks>k__BackingField;
    [CompilerGeneratedAttribute]
private OneToCompactCountingSet`2<CallGraphRootMarkId, ElementId> <BanMarks>k__BackingField;
    [NotNullAttribute]
public CountingSet`1<ElementId> Vertices { get; }
    [NotNullAttribute]
public OneToCompactCountingSet`2<ElementId, ElementId> Edges { get; }
    [NotNullAttribute]
public OneToCompactCountingSet`2<ElementId, ElementId> InvertedEdges { get; }
    [NotNullAttribute]
public OneToCompactCountingSet`2<CallGraphRootMarkId, ElementId> RootMarks { get; }
    [NotNullAttribute]
public OneToCompactCountingSet`2<CallGraphRootMarkId, ElementId> BanMarks { get; }
    public CallGraphStructure(CountingSet`1<ElementId> vertices, OneToCompactCountingSet`2<ElementId, ElementId> edges, OneToCompactCountingSet`2<ElementId, ElementId> invertedEdges, OneToCompactCountingSet`2<CallGraphRootMarkId, ElementId> rootMarks, OneToCompactCountingSet`2<CallGraphRootMarkId, ElementId> banMarks);
    [CompilerGeneratedAttribute]
public CountingSet`1<ElementId> get_Vertices();
    [CompilerGeneratedAttribute]
public OneToCompactCountingSet`2<ElementId, ElementId> get_Edges();
    [CompilerGeneratedAttribute]
public OneToCompactCountingSet`2<ElementId, ElementId> get_InvertedEdges();
    [CompilerGeneratedAttribute]
public OneToCompactCountingSet`2<CallGraphRootMarkId, ElementId> get_RootMarks();
    [CompilerGeneratedAttribute]
public OneToCompactCountingSet`2<CallGraphRootMarkId, ElementId> get_BanMarks();
    public CallGraphStructure InvertEdges();
    private static int GetSize(OneToCompactCountingSet`2<T1, T2> set);
    public void DumpSize(StreamWriter writer);
    public void DumpFull(StreamWriter writer, ISolution solution);
    public void Clear();
    [CompilerGeneratedAttribute]
internal static void <DumpSize>g__DumpCount|19_0(string name, int count, <>c__DisplayClass19_0& );
    [CompilerGeneratedAttribute]
internal static void <DumpFull>g__Write|20_0(string s, <>c__DisplayClass20_0& );
    [CompilerGeneratedAttribute]
internal static void <DumpFull>g__DumpCountingSet|20_1(CountingSet`1<T1> countingSet, string name, <>c__DisplayClass20_0& );
    [CompilerGeneratedAttribute]
internal static void <DumpFull>g__DumpMarks|20_2(OneToCompactCountingSet`2<CallGraphRootMarkId, T> oneToCompactCountingSet, string name, <>c__DisplayClass20_0& );
    [CompilerGeneratedAttribute]
internal static void <DumpFull>g__DumpOneToCompCountingSet|20_3(OneToCompactCountingSet`2<T1, T2> oneToCompactCountingSet, string name, <>c__DisplayClass20_0& );
}
public interface JetBrains.ReSharper.Daemon.CallGraph.ICallGraphEdgeConsumer {
    public abstract virtual void AddEdge(IDeclaredElement from, IDeclaredElement to);
    public abstract virtual void AddEdge(ElementId from, ElementId to);
}
public interface JetBrains.ReSharper.Daemon.CallGraph.ICallGraphEdgeProvider {
    public abstract virtual void FindEdges(ITreeNode treeNode, IDeclaredElement caller, ICallGraphEdgeConsumer consumer);
}
public interface JetBrains.ReSharper.Daemon.CallGraph.ICallGraphPropagator {
    public abstract virtual void RemoveEdge(CallGraphStructure structure, IReadonlyCountingSet`1<ElementId> rootMarks, IReadonlyCountingSet`1<ElementId> banMarks, ElementId startVertex, ElementId endVertex);
    public abstract virtual void UnrootVertex(CallGraphStructure structure, IReadonlyCountingSet`1<ElementId> rootMarks, IReadonlyCountingSet`1<ElementId> banMarks, ElementId vertex);
    public abstract virtual void PermitVertex(CallGraphStructure structure, IReadonlyCountingSet`1<ElementId> rootMarks, IReadonlyCountingSet`1<ElementId> banMarks, ElementId vertex);
    public abstract virtual void RemoveVertex(CallGraphStructure structure, IReadonlyCountingSet`1<ElementId> rootMarks, IReadonlyCountingSet`1<ElementId> banMarks, ElementId vertex);
    public abstract virtual void AddVertex(CallGraphStructure structure, IReadonlyCountingSet`1<ElementId> rootMarks, IReadonlyCountingSet`1<ElementId> banMarks, ElementId vertex);
    public abstract virtual void BanVertex(CallGraphStructure structure, IReadonlyCountingSet`1<ElementId> rootMarks, IReadonlyCountingSet`1<ElementId> banMarks, ElementId vertex);
    public abstract virtual void RootVertex(CallGraphStructure structure, IReadonlyCountingSet`1<ElementId> rootMarks, IReadonlyCountingSet`1<ElementId> banMarks, ElementId vertex);
    public abstract virtual void AddEdge(CallGraphStructure structure, IReadonlyCountingSet`1<ElementId> rootMarks, IReadonlyCountingSet`1<ElementId> banMarks, ElementId startVertex, ElementId endVertex);
    public abstract virtual bool IsMarkedLocal(CallGraphStructure structure, IReadonlyCountingSet`1<ElementId> rootMarks, IReadonlyCountingSet`1<ElementId> banMarks, ElementId vertex);
    public abstract virtual bool IsMarkedGlobal(CallGraphStructure structure, IReadonlyCountingSet`1<ElementId> rootMarks, IReadonlyCountingSet`1<ElementId> banMarks, ElementId vertex);
    public abstract virtual void Clear();
}
[NullableContextAttribute("2")]
public interface JetBrains.ReSharper.Daemon.CallGraph.ICallGraphScopeProcessor {
    public IDeclaredElement CurrentLocalMember { get; }
    public abstract virtual IDeclaredElement get_CurrentLocalMember();
}
public interface JetBrains.ReSharper.Daemon.CallGraph.ICallGraphSwaExtensionProvider {
    public SwaExtensionProviderId Id { get; }
    public abstract virtual void DumpSize(StreamWriter writer);
    public abstract virtual void DumpFull(StreamWriter writer, ISolution solution);
    public abstract virtual SwaExtensionProviderId get_Id();
    public abstract virtual bool IsMarkedGlobal(CallGraphRootMarkId markId, ElementId vertex);
    public abstract virtual bool IsMarkedLocal(CallGraphRootMarkId markId, ElementId vertex);
}
public abstract class JetBrains.ReSharper.Daemon.CaretDependentFeatures.BracesHighlighterBase : object {
    [ObsoleteAttribute("Use overload with ConsumerFactory")]
public Action ProcessDataContextImpl(Lifetime lifetime, HighlightingProlongedLifetime prolongedLifetime, IPsiDocumentRangeView psiDocumentRangeView, InvisibleBraceHintManager invisibleBraceHintManager, MatchingBraceSuggester matchingBraceSuggester);
    [CanBeNullAttribute]
public Action ProcessDataContextImpl(Lifetime lifetime, HighlightingProlongedLifetime prolongedLifetime, IPsiDocumentRangeView psiDocumentRangeView, InvisibleBraceHintManager invisibleBraceHintManager, MatchingBraceSuggester matchingBraceSuggester, MatchingBraceConsumerFactory consumerFactory);
    protected abstract virtual void CollectHighlightings(IPsiDocumentRangeView psiDocumentRangeView, MatchingHighlightingsConsumer consumer);
}
public abstract class JetBrains.ReSharper.Daemon.CaretDependentFeatures.ClrFormatItemAndMatchingArgumentContextHighlighter : ContextHighlighterBase {
    [NotNullAttribute]
protected abstract virtual IPsiView GetPsiView(IPsiDocumentRangeView psiDocumentRangeView);
    [CanBeNullAttribute]
private Info TryGetSelectedFormatItem(IPsiDocumentRangeView psiDocumentRangeView);
    [CanBeNullAttribute]
private Info TryGetSelectedFormattingArgument(IPsiDocumentRangeView psiDocumentRangeView);
    protected virtual void CollectHighlightings(IPsiDocumentRangeView psiDocumentRangeView, HighlightingsConsumer consumer);
    private void HighlightSelectedFormatItemsInStructuredMessageTemplate(Info info, HighlightingsConsumer consumer);
    private void HighlightSelectedFormatItemsInStringFormat(Info info, HighlightingsConsumer consumer);
}
public abstract class JetBrains.ReSharper.Daemon.CaretDependentFeatures.ContainingBracesContextHighlighterBase`1 : BracesHighlighterBase {
    protected virtual void CollectHighlightings(IPsiDocumentRangeView psiDocumentRangeView, MatchingHighlightingsConsumer consumer);
    protected abstract virtual void CollectHighlightings(IPsiView psiView, MatchingHighlightingsConsumer consumer);
    protected void TryConsumeHighlighting(IPsiView psiView, MatchingHighlightingsConsumer consumer, Func`2<TTreeNode, ITokenNode> leftTokenGetter, Func`2<TTreeNode, ITokenNode> rightTokenGetter, MatchingBraceDirection direction);
    protected void TryConsumeHighlightingLowLevel(IPsiDocumentRangeView psiDocumentRangeView, MatchingHighlightingsConsumer consumer, DocumentRange leftRange, DocumentRange rightRange, MatchingBraceDirection direction);
}
public abstract class JetBrains.ReSharper.Daemon.CaretDependentFeatures.ContextHighlighterBase : object {
    [NotNullAttribute]
public virtual Action GetDataProcessAction(HighlightingProlongedLifetime prolongedLifetime, IPsiDocumentRangeView psiDocumentRangeView);
    protected abstract virtual void CollectHighlightings(IPsiDocumentRangeView psiDocumentRangeView, HighlightingsConsumer consumer);
    protected static TEntryValue GetSettingValue(IPsiDocumentRangeView psiDocumentRangeView, Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaExpression);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.CaretDependentFeatures.ContextHighlighterFocusedTextControlPressAndHoldPushToHintHint : object {
    public ContextHighlighterFocusedTextControlPressAndHoldPushToHintHint(Lifetime lifetime, MapTextControlIdsToPushToHintState pushToHintState, ITextControlManager textControlManager, ContextManager contextManager);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.CaretDependentFeatures.ContextHighlighterPsiFileView : object {
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private ContextManager myContextManager;
    [NotNullAttribute]
private ITextControlManager myTextControlManager;
    public ContextHighlighterPsiFileView(Lifetime lifetime, IShellLocks shellLocks, ContextManager contextManager, AsyncCommitService asyncCommitService, ISolution solution, IPsiFiles psiFiles, ITextControlManager textControlManager);
    private Action HandleContext(Lifetime contextLifetime);
}
public class JetBrains.ReSharper.Daemon.CaretDependentFeatures.CurrentInvisibleBraceHintCookieKey : ContextKeyWithPerClientValueBase`1<InvisibleBraceHint> {
    public static CurrentInvisibleBraceHintCookieKey Instance;
    private static CurrentInvisibleBraceHintCookieKey();
}
public class JetBrains.ReSharper.Daemon.CaretDependentFeatures.HighlightingsConsumer : object {
    [NotNullAttribute]
private List`1<HighlightInfo> myHighlightInfos;
    [NotNullAttribute]
[ItemNotNullAttribute]
public IReadOnlyList`1<HighlightInfo> HighlightInfos { get; }
    public IReadOnlyList`1<HighlightInfo> get_HighlightInfos();
    public void ConsumeHighlighting(string highlightingId, DocumentRange documentRange);
    public void ConsumeHighlighting(HighlightInfo highlightInfo);
}
public interface JetBrains.ReSharper.Daemon.CaretDependentFeatures.IMatchingBraceContextHighlighter {
    public abstract virtual void HighlightMatchingBracesInFile(MatchingHighlightingsConsumer consumer, IFile file);
}
public class JetBrains.ReSharper.Daemon.CaretDependentFeatures.InvisibleBraceHint : object {
    [CompilerGeneratedAttribute]
private DocumentRange <LBraceRange>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <RBraceRange>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<ITextControl, RichTextBlock> <HintTextGetter>k__BackingField;
    public DocumentRange LBraceRange { get; }
    public DocumentRange RBraceRange { get; }
    [NotNullAttribute]
public Func`2<ITextControl, RichTextBlock> HintTextGetter { get; }
    public InvisibleBraceHint(DocumentRange lBraceRange, DocumentRange rBraceRange, Func`2<ITextControl, RichTextBlock> hintTextGetter);
    [CompilerGeneratedAttribute]
public DocumentRange get_LBraceRange();
    [CompilerGeneratedAttribute]
public DocumentRange get_RBraceRange();
    [CompilerGeneratedAttribute]
public Func`2<ITextControl, RichTextBlock> get_HintTextGetter();
    public bool IsValid();
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.CaretDependentFeatures.InvisibleBraceHintManager : object {
    [NotNullAttribute]
private ContextManager myContextManager;
    [NotNullAttribute]
private CaretDependentFeaturesUtilComponent myCaretDependentFeatures;
    private IShellLocks myLocks;
    private ITextControlManager myTextControlManager;
    public InvisibleBraceHintManager(Lifetime lifetime, ContextManager contextManager, CaretDependentFeaturesUtilComponent caretDependentFeatures, IShellLocks locks, ITextControlManager textControlManager);
    private void HandleContext(Lifetime contextLifetime);
    public void SetCurrentInvisibleBraceHintCookie(Lifetime lifetime, InvisibleBraceHint cookie);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Daemon.CaretDependentFeatures.MatchingBraceConsumerFactory : object {
    public virtual MatchingHighlightingsConsumer Create(IPsiDocumentRangeView psiDocumentRangeView);
}
public abstract class JetBrains.ReSharper.Daemon.CaretDependentFeatures.MatchingBraceContextHighlighterBase`1 : BracesHighlighterBase {
    protected abstract virtual void TryHighlightToLeft(MatchingHighlightingsConsumer consumer, ITokenNode selectedToken, TreeOffset treeOffset);
    protected abstract virtual void TryHighlightToRight(MatchingHighlightingsConsumer consumer, ITokenNode selectedToken, TreeOffset treeOffset);
    protected virtual void CollectHighlightings(IPsiDocumentRangeView psiDocumentRangeView, MatchingHighlightingsConsumer consumer);
    public sealed virtual void HighlightMatchingBracesInFile(MatchingHighlightingsConsumer consumer, IFile file);
    private void TryHighlightTokensByOffset(MatchingHighlightingsConsumer consumer, PsiTokensAtOffset tokensAtOffset, bool skipLeft, bool skipRight);
    private void TryHighlightSingleTokenInRange(MatchingHighlightingsConsumer consumer, PsiTokensAtRange tokensAtRange);
    [PureAttribute]
protected abstract virtual bool IsLeftBracket(TokenNodeType tokenType);
    [PureAttribute]
protected abstract virtual bool IsRightBracket(TokenNodeType tokenType);
    [PureAttribute]
protected abstract virtual bool Match(TokenNodeType token1, TokenNodeType token2);
    [PureAttribute]
protected virtual bool IsLeftBracket(ITokenNode tokenNode);
    [PureAttribute]
protected virtual bool IsRightBracket(ITokenNode tokenNode);
    [PureAttribute]
protected virtual bool IsValidNode(ITokenNode currentToken);
    [PureAttribute]
protected virtual ITokenNode GetActualToken(ITokenNode currentToken);
    protected bool FindMatchingLeftBracket(ITokenNode selectedNode, ITokenNode& matchedToken);
    protected bool FindMatchingRightBracket(ITokenNode selectedNode, ITokenNode& matchedToken);
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Daemon.CaretDependentFeatures.MatchingBraceDirection : Enum {
    public int value__;
    public static MatchingBraceDirection NONE;
    public static MatchingBraceDirection FROM_LEFT_TO_RIGHT;
    public static MatchingBraceDirection FROM_RIGHT_TO_LEFT;
    public static MatchingBraceDirection ALL;
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.CaretDependentFeatures.MatchingBraceSuggester : object {
    private MatchingBraceCookie myCookie;
    private JetDispatcher myDispatcher;
    public MatchingBraceSuggester(IShellLocks shellLocks);
    internal void SetMatchingBraceCookie(Lifetime lifetime, MatchingBraceCookie cookie);
    [PureAttribute]
public DocumentRange GetMatchingBraceRange(DocumentOffset caretPos);
}
public class JetBrains.ReSharper.Daemon.CaretDependentFeatures.MatchingHighlightingsConsumer : HighlightingsConsumer {
    [CompilerGeneratedAttribute]
private BraceMatchingStyle <BraceMatchingStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private BraceMatchingPosition <BraceMatchingPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReplaceInvisibleBraceWithInlayHint>k__BackingField;
    [CompilerGeneratedAttribute]
private InvisibleBraceHint <InvisibleBraceHint>k__BackingField;
    [CompilerGeneratedAttribute]
private MatchingBraceCookie <MatchingBraceCookie>k__BackingField;
    public BraceMatchingStyle BraceMatchingStyle { get; }
    public BraceMatchingPosition BraceMatchingPosition { get; }
    public bool ReplaceInvisibleBraceWithInlayHint { get; }
    [CanBeNullAttribute]
public InvisibleBraceHint InvisibleBraceHint { get; private set; }
    public MatchingBraceCookie MatchingBraceCookie { get; private set; }
    public MatchingHighlightingsConsumer(IPsiDocumentRangeView psiDocumentRangeView);
    [CompilerGeneratedAttribute]
public virtual BraceMatchingStyle get_BraceMatchingStyle();
    [CompilerGeneratedAttribute]
public BraceMatchingPosition get_BraceMatchingPosition();
    [CompilerGeneratedAttribute]
public bool get_ReplaceInvisibleBraceWithInlayHint();
    [CompilerGeneratedAttribute]
public InvisibleBraceHint get_InvisibleBraceHint();
    [CompilerGeneratedAttribute]
private void set_InvisibleBraceHint(InvisibleBraceHint value);
    public void ConsumeInvisibleBraceHint(InvisibleBraceHint invisibleBraceHint);
    [CompilerGeneratedAttribute]
public MatchingBraceCookie get_MatchingBraceCookie();
    [CompilerGeneratedAttribute]
private void set_MatchingBraceCookie(MatchingBraceCookie value);
    public void ConsumeBraceCookie(DocumentRange leftBraceRange, DocumentRange rightBraceRange);
    public void ConsumeMatchedBraces(DocumentRange leftBraceRange, DocumentRange rightBraceRange, bool singleCharRange);
    protected virtual void HighlightMatchedBraces(DocumentRange leftBraceRange, DocumentRange rightBraceRange, bool singleCharRange);
    public void ConsumeUnmatchedBrace(DocumentRange unmatchedBraceRange);
}
public class JetBrains.ReSharper.Daemon.CaretDependentFeatures.PushToHintPressAndHoldKey : ContextKeyWithoutValueBase {
    [NotNullAttribute]
public static PushToHintPressAndHoldKey Instance;
    private static PushToHintPressAndHoldKey();
}
[RegisterHighlighterGroupAttribute("ReSharper Default Folding Group", "Default Folding Group", "6")]
[RegisterHighlighterAttribute("ReSharper Default Folding")]
[RegisterHighlighterAttribute("ReSharper Methods Folding")]
[RegisterHighlighterAttribute("ReSharper Tags Folding")]
[RegisterHighlighterAttribute("ReSharper Preprocessor Regions Folding")]
[RegisterHighlighterAttribute("ReSharper Imports Folding")]
[RegisterHighlighterAttribute("ReSharper Doc Comments Folding")]
[RegisterHighlighterAttribute("ReSharper Comments Folding")]
[RegisterHighlighterAttribute("ReSharper File Header Folding")]
[RegisterHighlighterAttribute("ReSharper .NET Attributes Folding")]
[RegisterHighlighterAttribute("ReSharper Case Section Folding")]
[RegisterHighlighterAttribute("ReSharper Case Section Body Folding")]
[RegisterHighlighterAttribute("ReSharper String Constant Folding")]
[RegisterHighlighterAttribute("ReSharper Code Block Folding")]
[RegisterHighlighterAttribute("ReSharper Preprocessor Conditional Branches Folding")]
public static class JetBrains.ReSharper.Daemon.CodeFolding.CodeFoldingAttributes : object {
    public static string GROUP_ID;
    public static string DEFAULT_FOLDING_ATTRIBUTE;
    public static string METHOD_FOLDING_ATTRIBUTE;
    public static string TAG_FOLDING_ATTRIBUTE;
    public static string REGION_FOLDING_ATTRIBUTE;
    public static string IMPORTS_FOLDING_ATTRIBUTE;
    public static string DOCUMENTATION_COMMENTS_FOLDING_ATTRIBUTE;
    public static string COMMENTS_FOLDING_ATTRIBUTE;
    public static string FILE_HEADER_FOLDING_ATTRIBUTE;
    public static string ATTRIBUTES_FOLDING_ATTRIBUTE;
    public static string CASE_SECTION_FOLDING_ATTRIBUTE;
    public static string CASE_SECTION_BODY_FOLDING_ATTRIBUTE;
    public static string STRING_CONSTANT_FOLDING_ATTRIBUTE;
    public static string CODE_BLOCK_FOLDING_ATTRIBUTE;
    public static string PP_BRANCHES_FOLDING_ATTRIBUTE;
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Daemon.CodeFolding.CodeFoldingHighlighting/CodeFoldingHighlightings")]
public class JetBrains.ReSharper.Daemon.CodeFolding.CodeFoldingHighlighting : object {
    private DocumentRange myRange;
    [CompilerGeneratedAttribute]
private bool <CollapsedByDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FoldingPriority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PlaceholderText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AttributeId>k__BackingField;
    public bool CollapsedByDefault { get; }
    public int FoldingPriority { get; }
    public string PlaceholderText { get; }
    public string AttributeId { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CodeFoldingHighlighting(string attributeId, string placeholderText, DocumentRange range, bool collapsedByDefault, int foldingPriority);
    public CodeFoldingHighlighting(string codeFoldingHighlighting, string placeholderText, DocumentRange foldingRange, int foldingPriority);
    [CompilerGeneratedAttribute]
public bool get_CollapsedByDefault();
    [CompilerGeneratedAttribute]
public int get_FoldingPriority();
    [CompilerGeneratedAttribute]
public string get_PlaceholderText();
    [CompilerGeneratedAttribute]
public sealed virtual string get_AttributeId();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
    private bool StructureEquals(CodeFoldingHighlighting other);
    public sealed virtual bool StructureEquals(IStructuredHighlighterData other);
}
public enum JetBrains.ReSharper.Daemon.CodeFolding.CodeFoldingPriorities : Enum {
    public int value__;
    public static CodeFoldingPriorities LOWER_FOLDING_PRIORITY;
    public static CodeFoldingPriorities DEFAULT_FOLDING_PRIORITY;
    public static CodeFoldingPriorities HIGHER_FOLDING_PRIORITY;
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.CodeFolding.CodeFoldingProcess : object {
    private IContextBoundSettingsStore mySettingsStore;
    [CompilerGeneratedAttribute]
private IDaemonProcess <DaemonProcess>k__BackingField;
    public IDaemonProcess DaemonProcess { get; }
    public CodeFoldingProcess(IDaemonProcess process, IContextBoundSettingsStore settings);
    [CompilerGeneratedAttribute]
public sealed virtual IDaemonProcess get_DaemonProcess();
    public sealed virtual void Execute(Action`1<DaemonStageResult> committer);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Daemon.CodeFolding.CodeFoldingUtil : object {
    public static string BracesFoldingPresentation;
    public static string BracketsFoldingPresentation;
    public static string LtGtFoldingPresentation;
    public static string XmlCommentFoldingPresentation;
    public static string CStyleMultilineCommentFoldingPresentation;
    private static int MaxRemainingCommentTextLength;
    private static string SummaryTagStart;
    private static string SummaryTagEnd;
    private static String[] ourJsDocLikeDescs;
    private static CodeFoldingUtil();
    [ExtensionAttribute]
[PureAttribute]
public static bool IsNotEmptyNormalized(TextRange textRange);
    [ExtensionAttribute]
[PureAttribute]
public static DocumentOffset FindLastNewLineOffset(IDocument document, int start, int end);
    [ExtensionAttribute]
[PureAttribute]
public static bool HasNewLine(DocumentRange range);
    [ExtensionAttribute]
[PureAttribute]
public static bool HasNewLine(IDocument document, TextRange range);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ITreeNode SkipRightWhitespaceTokens(ITreeNode node, int limit);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ITreeNode SkipLeftWhitespaceTokens(ITreeNode tokenNode, int limit);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ITreeNode SkipLeftWhitespaces(ITreeNode tokenNode, TokenNodeType newLineToken, int newLineLimit);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ITreeNode SkipRightWhitespaces(ITreeNode tokenNode, TokenNodeType newLineToken, int newLineLimit);
    [ExtensionAttribute]
[CanBeNullAttribute]
private static ITreeNode SkipWhiteSpacesInternal(ITreeNode tokenNode, TokenNodeType newLineToken, bool searchToLeft, int newLineLimit);
    public static DocumentRange GetRangeForListOfSimilarTreeNodes(TTreeNode lastNode);
    public static DocumentRange GetRangeForListOfSimilarTokenNodeTypes(ITreeNode lastNode, TokenNodeType sampleTokenType, TokenNodeType newLineToken, int newLineLimit);
    [ExtensionAttribute]
internal static void AppendRangeWithOverlappingResolve(IList`1<HighlightingInfo> result, IList`1<HighlightingInfo> range);
    private static void InsertFolding(IList`1<HighlightingInfo> result, HighlightingInfo highlightingInfo);
    [ExtensionAttribute]
public static bool AddFoldingForBracedConstruct(FoldingHighlightingConsumer context, string attributeId, ITokenNode lbrace, ITokenNode rbrace, ITreeNode anchorToken, ITreeNode hintRange, string placeholder);
    [ExtensionAttribute]
public static bool AddFoldingForBracedConstruct(FoldingHighlightingConsumer context, ITokenNode lbrace, ITokenNode rbrace, ITreeNode anchorToken, ITreeNode hintRange, string placeholder);
    [ExtensionAttribute]
public static bool AddFoldingForCodeBlockConstruct(FoldingHighlightingConsumer context, ITokenNode lbrace, ITokenNode rbrace, ITreeNode anchorToken, ITreeNode hintRange, string placeholder);
    private static string ProcessXmlDocLikeSummary(string text);
    private static string ProcessJsDocLikeSummary(string text);
    private static string ProcessFirstNonEmptyLineAsDocSummary(string text);
    public static string CalculateCLikeCommentPresentation(DocumentRange range, string prefix, string postfix);
    private static string ExtractCommentBodyText(string rangeText, string prefix, string postfix);
    [ExtensionAttribute]
public static void AddFoldingForCLikeCommentTokens(FoldingHighlightingConsumer context, ITreeNode node, TokenNodeType lineComment, TokenNodeType cStyleComment, TokenNodeType newLine);
    [ExtensionAttribute]
public static bool AddTreeNodeFolding(FoldingHighlightingConsumer context, string attributeId, ITreeNode node, string placeholder);
    [ExtensionAttribute]
public static void AddXmlDocCommentFolding(FoldingHighlightingConsumer context, ITreeNode xmlDoc);
}
internal class JetBrains.ReSharper.Daemon.CodeFolding.FoldingComparer : object {
    public static FoldingComparer Instance;
    private static FoldingComparer();
    public sealed virtual int Compare(HighlightingInfo x, HighlightingInfo y);
}
public class JetBrains.ReSharper.Daemon.CodeFolding.FoldingDescriptor : object {
    public string AttributeId;
    public DocumentRange TextRange;
    public DocumentRange HintRange;
    public string Placeholder;
    public CodeFoldingPriorities Priority;
    public FoldingDescriptor(string attributeId, DocumentRange range, DocumentRange hintRange, string placeholder, CodeFoldingPriorities priority);
}
public class JetBrains.ReSharper.Daemon.CodeFolding.FoldingHighlightingConsumer : object {
    private Action`1<FoldingDescriptor> myProcessor;
    public FoldingHighlightingConsumer(Action`1<FoldingDescriptor> processor);
    public void AddHigherPriorityFolding(string attributeId, DocumentRange range, string placeholder);
    public void AddDefaultPriorityFolding(string attributeId, DocumentRange range, string placeholder);
    public void AddDefaultPriorityFolding(string attributeId, DocumentRange range, DocumentRange hintRange, string placeholder);
    public void AddLowerPriorityFolding(string attributeId, DocumentRange range, DocumentRange hintRange, string placeholder);
    private void AddFolding(string attributeId, DocumentRange range, DocumentRange hintRange, string placeholder, CodeFoldingPriorities priority);
}
public interface JetBrains.ReSharper.Daemon.CodeFolding.ICodeFoldingProcessor {
}
public interface JetBrains.ReSharper.Daemon.CodeFolding.ICodeFoldingProcessorFactory {
    public abstract virtual ICodeFoldingProcessor CreateProcessor();
}
public class JetBrains.ReSharper.Daemon.CodeFolding.RiderDefaultFoldingNamesProvider : RiderDefaultHighlighterNamesProvider {
    public static string FoldingSuffix;
    public virtual string GetHighlighterTag(string attributeId);
    public virtual string GetPresentableName(string attributeId);
}
public class JetBrains.ReSharper.Daemon.CodeInsights.CodeInsightHighlightInfo : object {
    [CompilerGeneratedAttribute]
private IHighlighter <Highlighter>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeInsightsHighlighting <CodeInsightsHighlighting>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public IHighlighter Highlighter { get; public set; }
    public CodeInsightsHighlighting CodeInsightsHighlighting { get; public set; }
    public CodeInsightHighlightInfo(IHighlighter Highlighter, CodeInsightsHighlighting CodeInsightsHighlighting);
    [CompilerGeneratedAttribute]
protected CodeInsightHighlightInfo(CodeInsightHighlightInfo original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IHighlighter get_Highlighter();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Highlighter(IHighlighter value);
    [CompilerGeneratedAttribute]
public CodeInsightsHighlighting get_CodeInsightsHighlighting();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CodeInsightsHighlighting(CodeInsightsHighlighting value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CodeInsightHighlightInfo left, CodeInsightHighlightInfo right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CodeInsightHighlightInfo left, CodeInsightHighlightInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(CodeInsightHighlightInfo other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual CodeInsightHighlightInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(IHighlighter& Highlighter, CodeInsightsHighlighting& CodeInsightsHighlighting);
}
public static class JetBrains.ReSharper.Daemon.CodeInsights.CodeInsightsEx : object {
}
[RegisterHighlighterAttribute("CodeInsights")]
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/CodeInsights")]
public class JetBrains.ReSharper.Daemon.CodeInsights.CodeInsightsHighlighting : object {
    public static string Id;
    public DocumentRange Range;
    [CompilerGeneratedAttribute]
private IDeclaredElement <DeclaredElement>k__BackingField;
    [CompilerGeneratedAttribute]
private ICodeInsightsProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeVisionEntryBase <Entry>k__BackingField;
    public IDeclaredElement DeclaredElement { get; }
    public ICodeInsightsProvider Provider { get; }
    public CodeVisionEntryBase Entry { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CodeInsightsHighlighting(DocumentRange range, string displayText, string tooltipText, string moreText, ICodeInsightsProvider provider, IDeclaredElement elt, IconModel icon, List`1<CodeVisionEntryExtraActionModel> extraActions);
    public CodeInsightsHighlighting(DocumentRange range, CodeVisionEntryBase entry, ICodeInsightsProvider provider, IDeclaredElement elt);
    [CompilerGeneratedAttribute]
public IDeclaredElement get_DeclaredElement();
    [CompilerGeneratedAttribute]
public ICodeInsightsProvider get_Provider();
    [CompilerGeneratedAttribute]
public CodeVisionEntryBase get_Entry();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual Nullable`1<int> GetStatisticsKey();
}
public interface JetBrains.ReSharper.Daemon.CodeInsights.ICodeInsightsProvider {
    public string ProviderId { get; }
    public string DisplayName { get; }
    public CodeVisionAnchorKind DefaultAnchor { get; }
    public ICollection`1<CodeVisionRelativeOrdering> RelativeOrderings { get; }
    public abstract virtual string get_ProviderId();
    public abstract virtual string get_DisplayName();
    public abstract virtual CodeVisionAnchorKind get_DefaultAnchor();
    public abstract virtual ICollection`1<CodeVisionRelativeOrdering> get_RelativeOrderings();
    public abstract virtual bool IsAvailableIn(ISolution solution);
    public abstract virtual void OnClick(CodeInsightHighlightInfo highlightInfo, ISolution solution);
    public abstract virtual void OnExtraActionClick(CodeInsightHighlightInfo highlightInfo, string actionId, ISolution solution);
}
public abstract class JetBrains.ReSharper.Daemon.CodeInsights.PopupCodeInsightProviderBase : object {
    public string ProviderId { get; }
    public string DisplayName { get; }
    public CodeVisionAnchorKind DefaultAnchor { get; }
    public ICollection`1<CodeVisionRelativeOrdering> RelativeOrderings { get; }
    public abstract virtual string get_ProviderId();
    public abstract virtual string get_DisplayName();
    public abstract virtual CodeVisionAnchorKind get_DefaultAnchor();
    public abstract virtual ICollection`1<CodeVisionRelativeOrdering> get_RelativeOrderings();
    public virtual bool IsAvailableIn(ISolution solution);
    public sealed virtual void OnClick(CodeInsightHighlightInfo highlightInfo, ISolution solution);
    protected abstract virtual BeControl CreateControl();
    public sealed virtual void OnExtraActionClick(CodeInsightHighlightInfo highlightInfo, string actionId, ISolution solution);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Daemon.CodeInsights.ZoneMarker : object {
}
public class JetBrains.ReSharper.Daemon.CodeStyle.CodeStyleRule`2 : object {
    [NotNullAttribute]
private Expression`1<Func`2<TSettingKeyClass, TSettingValue>> mySettingAccessExpression;
    [CompilerGeneratedAttribute]
private CodeStyleRuleDescription <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeStyleRuleType <Type>k__BackingField;
    public CodeStyleRuleDescription Description { get; }
    public CodeStyleRuleType Type { get; }
    internal CodeStyleRule`2(CodeStyleRuleType type, CodeStyleRuleDescription description, Expression`1<Func`2<TSettingKeyClass, TSettingValue>> settingAccessExpression);
    [CompilerGeneratedAttribute]
public CodeStyleRuleDescription get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual CodeStyleRuleType get_Type();
    [NotNullAttribute]
protected virtual IEnumerable`1<ICodeStyleRuleValue> GetAllAvailableValues();
    public virtual IEnumerable`1<ICodeStyleRuleValue> GetAvailableValuesToSet(IContextBoundSettingsStore settingsStore);
    public sealed virtual TSettingValue GetValueFrom(IContextBoundSettingsStore settingsStore);
    public void SetValueTo(IContextBoundSettingsStore settingsStore, TSettingValue ruleValue);
    public sealed virtual void SetValueTo(IContextBoundSettingsStore settingsStore, ICodeStyleRuleValue ruleValue);
}
internal class JetBrains.ReSharper.Daemon.CodeStyle.CodeStyleRuleBooleanBased`1 : CodeStyleRule`2<bool, TSettingKeyClass> {
    [CompilerGeneratedAttribute]
private string <EnableActionTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisableActionTitle>k__BackingField;
    public string EnableActionTitle { get; }
    public string DisableActionTitle { get; }
    internal CodeStyleRuleBooleanBased`1(CodeStyleRuleType type, CodeStyleRuleDescription description, string enableActionTitle, string disableActionTitle, Expression`1<Func`2<TSettingKeyClass, bool>> settingAccessExpression);
    [CompilerGeneratedAttribute]
public sealed virtual string get_EnableActionTitle();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisableActionTitle();
    public sealed virtual void ReverseValue(IContextBoundSettingsStore settingsStore);
}
internal class JetBrains.ReSharper.Daemon.CodeStyle.CodeStyleRuleCustom`2 : CodeStyleRule`2<TSettingValue, TSettingKeyClass> {
    internal CodeStyleRuleCustom`2(CodeStyleRuleType type, CodeStyleRuleDescription description, Expression`1<Func`2<TSettingKeyClass, TSettingValue>> settingAccessExpression);
}
public class JetBrains.ReSharper.Daemon.CodeStyle.CodeStyleRuleDescription : ValueType {
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Category { get; }
    public string Title { get; }
    public string Description { get; }
    public CodeStyleRuleDescription(string category, string titile, string description);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Category();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Title();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Description();
}
internal class JetBrains.ReSharper.Daemon.CodeStyle.CodeStyleRuleEnumBased`2 : CodeStyleRule`2<TRuleSettingEnumValue, TSettingKeyClass> {
    private List`1<CodeStyleRuleValue`1<TRuleSettingEnumValue>> myList;
    internal CodeStyleRuleEnumBased`2(CodeStyleRuleType type, CodeStyleRuleDescription description, Expression`1<Func`2<TSettingKeyClass, TRuleSettingEnumValue>> settingAccessExpression);
    protected virtual IEnumerable`1<ICodeStyleRuleValue> GetAllAvailableValues();
    public virtual IEnumerable`1<ICodeStyleRuleValue> GetAvailableValuesToSet(IContextBoundSettingsStore settingsStore);
}
public class JetBrains.ReSharper.Daemon.CodeStyle.CodeStyleRulesFactory : object {
    public static CodeStyleRule`2<bool, TSettingKeyClass> CreateBooleanBased(string category, string titile, string description, string enableActionTitle, string disableActionTitle, Expression`1<Func`2<TSettingKeyClass, bool>> settingAccessExpression);
    public static CodeStyleRule`2<TCodeStyleValue, TSettingKeyClass> CreateEnumBased(string category, string title, string description, Expression`1<Func`2<TSettingKeyClass, TCodeStyleValue>> settingAccessExpression);
    public static CodeStyleRule`2<TCodeStyleValue, TSettingKeyClass> Create(string category, string title, string description, Expression`1<Func`2<TSettingKeyClass, TCodeStyleValue>> settingAccessExpression, CodeStyleRuleType type);
}
public enum JetBrains.ReSharper.Daemon.CodeStyle.CodeStyleRuleType : Enum {
    public int value__;
    public static CodeStyleRuleType OneFromMultiple;
    public static CodeStyleRuleType ManyFromMultiple;
    public static CodeStyleRuleType Scalar;
}
public class JetBrains.ReSharper.Daemon.CodeStyle.CodeStyleRuleValue`1 : object {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSet>k__BackingField;
    public T Value { get; }
    public string Title { get; }
    public bool IsSet { get; }
    public CodeStyleRuleValue`1(string title, T value);
    public CodeStyleRuleValue`1(string title, T value, bool isSet);
    [CompilerGeneratedAttribute]
public sealed virtual T get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Title();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSet();
    public CodeStyleRuleValue`1<T> DefineAsSet();
}
[CustomHighlightingActionProviderAttribute("JetBrains.ProjectModel.KnownProjectFileType")]
public class JetBrains.ReSharper.Daemon.CodeStyle.ContextActions.ChangeCodeStyleSettingActionProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Daemon.CodeStyle.ContextActions.ChangeCodeStyleSettingActionProvider/<GetActions>d__0")]
public sealed virtual IEnumerable`1<IntentionAction> GetActions(IHighlighting highlighting, DocumentRange highlightingRange, IPsiSourceFile sourceFile, IAnchor configureAnchor);
}
public interface JetBrains.ReSharper.Daemon.CodeStyle.ContextActions.ICodeStyleOptionsPageProvider {
    public abstract virtual string GetOptionsPageId();
}
public class JetBrains.ReSharper.Daemon.CodeStyle.ContextActions.OpenCodeStyleOptionsPageAction : object {
    private PsiLanguageType myCurrentPsiLanguage;
    public string Text { get; }
    public OpenCodeStyleOptionsPageAction(PsiLanguageType currentPsiLanguage);
    public sealed virtual string get_Text();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
}
public class JetBrains.ReSharper.Daemon.CodeStyle.ContextActions.ReverseCodeStyleSettingContextAction : object {
    private bool myCurrentValue;
    private ICodeStyleRuleBooleanBased myRelatedCodeStyleRule;
    private IPsiSourceFile mySourceFile;
    public string Text { get; }
    public ReverseCodeStyleSettingContextAction(bool currentValue, ICodeStyleRuleBooleanBased relatedCodeStyleRule, IPsiSourceFile sourceFile);
    public sealed virtual string get_Text();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
}
public class JetBrains.ReSharper.Daemon.CodeStyle.ContextActions.SelectCodeStyleSettingContextAction : object {
    private ICodeStyleRuleValue myCodeStyleRuleValue;
    private ICodeStyleRule myRelatedCodeStyleRule;
    private IPsiSourceFile mySourceFile;
    public string Text { get; }
    public SelectCodeStyleSettingContextAction(ICodeStyleRuleValue codeStyleRuleValue, ICodeStyleRule relatedCodeStyleRule, IPsiSourceFile sourceFile);
    public sealed virtual string get_Text();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
}
public class JetBrains.ReSharper.Daemon.CodeStyle.Highlightings.CodeStyleFilter : PencilsFilterBase {
    public string Kind { get; }
    public virtual string get_Kind();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Daemon.CodeStyle.Highlightings.CodeStyleFilterProvider : object {
    public sealed virtual IEnumerable`1<IPencilsFilter> GetFilters(Lifetime lifetime, ISolution solution, ISettingsStore store);
}
public interface JetBrains.ReSharper.Daemon.CodeStyle.Highlightings.ICodeStyleHighlighting {
    public abstract virtual ICodeStyleRule GetRelatedCodeStyleRule();
}
public interface JetBrains.ReSharper.Daemon.CodeStyle.ICodeStyleRule {
    public CodeStyleRuleType Type { get; }
    public abstract virtual CodeStyleRuleType get_Type();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<ICodeStyleRuleValue> GetAvailableValuesToSet(IContextBoundSettingsStore settingsStore);
    public abstract virtual void SetValueTo(IContextBoundSettingsStore settingsStore, ICodeStyleRuleValue ruleValue);
}
public interface JetBrains.ReSharper.Daemon.CodeStyle.ICodeStyleRuleBooleanBased {
    [NotNullAttribute]
public string EnableActionTitle { get; }
    [NotNullAttribute]
public string DisableActionTitle { get; }
    public abstract virtual string get_EnableActionTitle();
    public abstract virtual string get_DisableActionTitle();
    public abstract virtual bool GetValueFrom(IContextBoundSettingsStore settingsStore);
    public abstract virtual void ReverseValue(IContextBoundSettingsStore settingsStore);
}
public interface JetBrains.ReSharper.Daemon.CodeStyle.ICodeStyleRuleValue {
    public string Title { get; }
    public bool IsSet { get; }
    public abstract virtual string get_Title();
    public abstract virtual bool get_IsSet();
}
public interface JetBrains.ReSharper.Daemon.CodeStyle.ICodeStyleRuleValue`1 {
    public TCodeStyleRuleSettingValueType Value { get; }
    public abstract virtual TCodeStyleRuleSettingValueType get_Value();
}
public abstract class JetBrains.ReSharper.Daemon.DaemonBase : DefaultDaemon {
    public bool IsSuspended { get; }
    public bool InterruptFlag { get; public set; }
    public int DaemonTimestamp { get; }
    public static DaemonBase GetInstance(ISolution solution);
    public abstract virtual bool get_IsSuspended();
    public abstract virtual bool get_InterruptFlag();
    public abstract virtual void set_InterruptFlag(bool value);
    public abstract virtual int get_DaemonTimestamp();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.DaemonSuppressor : DaemonSuppressorBase {
    [NotNullAttribute]
private SolutionAnalysisConfiguration myConfiguration;
    [NotNullAttribute]
private Reasons`1<string> myReasons;
    public DaemonSuppressor(ISolution solution, ILogger logger, SolutionAnalysisConfiguration configuration);
    public virtual void Suppress(Lifetime lifetime, string reason, bool alsoSuppressSwa);
    public sealed virtual Nullable`1<DaemonDisableResult> GetDaemonDisableResult(IProjectFile file);
    public sealed virtual Nullable`1<DaemonDisableResult> GetDaemonDisableResult(IPsiSourceFile file);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Daemon.DefaultNamespaceFolderProvider : HaveDefaultSettings`1<NamespaceProviderSettings> {
    public string Name { get; }
    public DefaultNamespaceFolderProvider(ILogger logger, ISettingsSchema settingsSchema);
    public virtual void InitDefaultSettings(ISettingsStorageMountPoint mountPoint);
    public virtual string get_Name();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.DocComment.DocCommentExternalFilesDaemonInvalidator : object {
    private IDaemon myDaemon;
    public DocCommentExternalFilesDaemonInvalidator(Lifetime lifetime, DocCommentExternalFilesManager docCommentExternalFilesManager, IDaemon daemon);
    private void DocCommentExternalFilesManagerOnCacheEntryInvalidated(VirtualFileSystemPath fileSystemPath);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.DocComment.DocCommentExternalFilesManager : object {
    private object myLock;
    private Dictionary`2<VirtualFileSystemPath, CacheEntry> myCache;
    private Lifetime myLifetime;
    private ISolution mySolution;
    private IFileSystemTracker myFileSystemTracker;
    private DocumentManager myDocumentManager;
    [CompilerGeneratedAttribute]
private Action`1<VirtualFileSystemPath> CacheEntryInvalidated;
    public DocCommentExternalFilesManager(Lifetime lifetime, ISolution solution, IFileSystemTracker fileSystemTracker, DocumentManager documentManager);
    public void Invalidate(VirtualFileSystemPath fileSystemPath);
    [CompilerGeneratedAttribute]
public void add_CacheEntryInvalidated(Action`1<VirtualFileSystemPath> value);
    [CompilerGeneratedAttribute]
public void remove_CacheEntryInvalidated(Action`1<VirtualFileSystemPath> value);
    private void OnCacheEntryInvalidated(VirtualFileSystemPath fileSystemPath);
    private void ClearCache();
    public CacheEntry GetExternalXml(VirtualFileSystemPath filePath);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.DocComment.DocCommentExternalFilesMonitor : object {
    private IFileSystemTracker myFileSystemTracker;
    private DocumentManager myDocumentManager;
    private DocCommentExternalFilesManager myExternalFilesManager;
    public DocCommentExternalFilesMonitor(Lifetime lifetime, ChangeManager changeManager, IFileSystemTracker fileSystemTracker, DocumentManager documentManager, DocCommentExternalFilesManager externalFilesManager);
    private void OnChangeManagerChanged(ChangeEventArgs changeEventArgs);
    private void Invalidate(VirtualFileSystemPath fileSystemPath);
    private void OnFileSystemChange(FileSystemChange fileSystemChange);
    private void OnDocumentChanged(ProjectFileDocumentChange documentChange);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.EditorConfig.SuppressDaemonUntilConfigFilesProcessed : object {
    private ConfigFileProcessor myProcessor;
    public SuppressDaemonUntilConfigFilesProcessed(Lifetime lifetime, ConfigFileProcessor processor, ILogger logger, SolutionAnalysisConfiguration sweaConfig);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.EditorConfig.SuppressDaemonUntilRuleSetsProcessed : object {
    public SuppressDaemonUntilRuleSetsProcessed(Lifetime lifetime, MsBuildPropertiesFileProcessor processor, ILogger logger, SolutionAnalysisConfiguration sweaConfig);
}
[RegisterHighlighterAttribute("ReSharper File Level Annotation")]
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/FileAnnotations")]
public class JetBrains.ReSharper.Daemon.FileAnnotations.FileAnnotationHighlighting : object {
    private static string Id;
    public DocumentRange Range;
    public string Text;
    public FileAnnotationType AnnotationType;
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public FileAnnotationHighlighting(DocumentRange range, string displayText, FileAnnotationType severity);
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
}
public static class JetBrains.ReSharper.Daemon.FileResolveErrorUtil : object {
    public static string CreateErrorTooltip(IPathReference reference, FileResolveErrorType errorType);
}
public abstract class JetBrains.ReSharper.Daemon.Formatter.CommonFormatHighlightingIdsBase : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<FormatMismatchType, ValueTuple`2<string, string>> <FormatMismatchInfo>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<BlankLinesMismatchType, ValueTuple`2<string, string>> <BlankLineMismatchInfo>k__BackingField;
    protected string LanguagePrefix { get; }
    public string MissingIndent { get; }
    public string BadIndent { get; }
    public string TabsAndSpacesMismatch { get; }
    public string WrongIndentSize { get; }
    public string IndentIsOffPrevLevel { get; }
    public string MissingLinebreak { get; }
    public string MissingSpace { get; }
    public string RedundantLinebreak { get; }
    public string RedundantSpace { get; }
    public string MultipleSpaces { get; }
    public string TabsOutsideIndent { get; }
    public string MissingBlankLines { get; }
    public string RedundantBlankLines { get; }
    public string IndentProblemsCompoundItem { get; }
    public string SpacesProblemsCompoundItem { get; }
    public string LineBreaksProblemsCompoundItem { get; }
    public string BlankLinesProblemsCompoundItem { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<FormatMismatchType, ValueTuple`2<string, string>> FormatMismatchInfo { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<BlankLinesMismatchType, ValueTuple`2<string, string>> BlankLineMismatchInfo { get; }
    public string MissingLinebreakDescription { get; }
    public string MissingSpaceDescription { get; }
    public string RedundantLinebreakDescription { get; }
    public string RedundantSpaceDescription { get; }
    public string MissingBlankLinesDescription { get; }
    public string RedundantBlankLinesDescription { get; }
    public string ElsewhereDescription { get; }
    protected abstract virtual string get_LanguagePrefix();
    public sealed virtual string get_MissingIndent();
    public sealed virtual string get_BadIndent();
    public sealed virtual string get_TabsAndSpacesMismatch();
    public sealed virtual string get_WrongIndentSize();
    public sealed virtual string get_IndentIsOffPrevLevel();
    public sealed virtual string get_MissingLinebreak();
    public sealed virtual string get_MissingSpace();
    public sealed virtual string get_RedundantLinebreak();
    public sealed virtual string get_RedundantSpace();
    public sealed virtual string get_MultipleSpaces();
    public sealed virtual string get_TabsOutsideIndent();
    public sealed virtual string get_MissingBlankLines();
    public sealed virtual string get_RedundantBlankLines();
    public sealed virtual string get_IndentProblemsCompoundItem();
    public sealed virtual string get_SpacesProblemsCompoundItem();
    public sealed virtual string get_LineBreaksProblemsCompoundItem();
    public sealed virtual string get_BlankLinesProblemsCompoundItem();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<FormatMismatchType, ValueTuple`2<string, string>> get_FormatMismatchInfo();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<BlankLinesMismatchType, ValueTuple`2<string, string>> get_BlankLineMismatchInfo();
    public sealed virtual string get_MissingLinebreakDescription();
    public sealed virtual string get_MissingSpaceDescription();
    public sealed virtual string get_RedundantLinebreakDescription();
    public sealed virtual string get_RedundantSpaceDescription();
    public sealed virtual string get_MissingBlankLinesDescription();
    public sealed virtual string get_RedundantBlankLinesDescription();
    public sealed virtual string get_ElsewhereDescription();
}
[DaemonStageAttribute("16")]
public class JetBrains.ReSharper.Daemon.Formatter.FormatterDaemonStage : object {
    private Lazy`1<PsiLanguageType[]> myLanguages;
    public FormatterDaemonStage(ISolution solution);
    public sealed virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
    public ErrorStripeRequest NeedsErrorStripe(IPsiSourceFile sourceFile, IContextBoundSettingsStore settingsStore);
    private bool IsSupported(IPsiSourceFile sourceFile);
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.Formatter.FormatterDaemonStageProcess : object {
    private HighlightingSettingsManager myHighlightingManager;
    private ICommonFormatHighlightingIds myCommonFormatHighlightingIds;
    [CompilerGeneratedAttribute]
private IDaemonProcess <DaemonProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private IContextBoundSettingsStore <SettingsStore>k__BackingField;
    [CompilerGeneratedAttribute]
private FilteringHighlightingConsumer <Consumer>k__BackingField;
    [CompilerGeneratedAttribute]
private IFile <File>k__BackingField;
    public bool HighlightIndents { get; }
    public bool HighlightLineBreaks { get; }
    public bool HighlightSpaces { get; }
    public bool HighlightBlankLines { get; }
    public IDaemonProcess DaemonProcess { get; }
    public IContextBoundSettingsStore SettingsStore { get; }
    private FilteringHighlightingConsumer Consumer { get; }
    [NotNullAttribute]
public IFile File { get; }
    public FormatterDaemonStageProcess(IDaemonProcess daemonProcess, IContextBoundSettingsStore settingsStore, IFile file, HighlightingSettingsManager highlightingSettingsManager);
    public sealed virtual bool get_HighlightIndents();
    public sealed virtual bool get_HighlightLineBreaks();
    public sealed virtual bool get_HighlightSpaces();
    public sealed virtual bool get_HighlightBlankLines();
    public sealed virtual void Execute(Action`1<DaemonStageResult> committer);
    [CompilerGeneratedAttribute]
public sealed virtual IDaemonProcess get_DaemonProcess();
    [CompilerGeneratedAttribute]
public IContextBoundSettingsStore get_SettingsStore();
    [CompilerGeneratedAttribute]
private FilteringHighlightingConsumer get_Consumer();
    [CompilerGeneratedAttribute]
public sealed virtual IFile get_File();
    public sealed virtual IClosableIndentingHighlighting MissingIndent(ITreeNode node, ITreeNode closingNode, IndentMismatchType mismatchType, String[] highlightingId, Whitespace expectedDifference);
    private void GetBestIdFromArray(String[] highlightingId, String& bestId, String& bestTitle, string initialId);
    public sealed virtual IClosableIndentingHighlighting TabAndSpacesMismatch(ITreeNode node, ITreeNode closingNode, int tabsExpected, int spacesExpected, int tabsEncountered, int spacesEncountered);
    public sealed virtual IClosableIndentingHighlighting UnknownIndent(ITreeNode node, ITreeNode closingNode, String[] highlightingId);
    public sealed virtual IClosableIndentingHighlighting TabsMustGoFirst(ITreeNode node, ITreeNode closingNode);
    public sealed virtual void IncorrectFormat(FormatMismatchType mismatchType, RuleResultInfo`1[] rules, FormattingRangeContext range);
    private string GetFormatHighlighting(RuleResultInfo`1[] rules, bool missing);
    public sealed virtual void MultipleSpacesOrTabs(FormattingRangeContext range, int nSpaces, int nTabs);
    public sealed virtual void IncorrectBlankLines(BlankLinesMismatchType mismatchType, RuleResultInfo`1[] rules, FormattingRangeContext range, int expected, int actual);
}
[ConfigurableSeverityHighlightingAttribute("", "CSHARP,HTML,XML,XAML")]
public class JetBrains.ReSharper.Daemon.Formatter.FormattingHighlighting : object {
    [CompilerGeneratedAttribute]
private ITreeNode <RightNode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigurableSeverityId>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<SettingsEntry> <UsedSettings>k__BackingField;
    public ITreeNode RightNode { get; }
    public string ToolTip { get; }
    public string ConfigurableSeverityId { get; }
    public string ErrorStripeToolTip { get; }
    public IEnumerable`1<SettingsEntry> UsedSettings { get; }
    public FormattingHighlighting(ITreeNode rightNode, string toolTip, string configurableSeverityId, IEnumerable`1<SettingsEntry> usedSettings);
    [CompilerGeneratedAttribute]
public ITreeNode get_RightNode();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConfigurableSeverityId();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<SettingsEntry> get_UsedSettings();
}
public interface JetBrains.ReSharper.Daemon.Formatter.ICommonFormatHighlightingIds {
    public string MissingIndent { get; }
    public string BadIndent { get; }
    public string TabsAndSpacesMismatch { get; }
    public string WrongIndentSize { get; }
    public string IndentIsOffPrevLevel { get; }
    public string MissingLinebreak { get; }
    public string MissingSpace { get; }
    public string RedundantLinebreak { get; }
    public string RedundantSpace { get; }
    public string MultipleSpaces { get; }
    public string TabsOutsideIndent { get; }
    public string MissingBlankLines { get; }
    public string RedundantBlankLines { get; }
    public string IndentProblemsCompoundItem { get; }
    public string SpacesProblemsCompoundItem { get; }
    public string LineBreaksProblemsCompoundItem { get; }
    public string BlankLinesProblemsCompoundItem { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<FormatMismatchType, ValueTuple`2<string, string>> FormatMismatchInfo { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<BlankLinesMismatchType, ValueTuple`2<string, string>> BlankLineMismatchInfo { get; }
    public string MissingLinebreakDescription { get; }
    public string MissingSpaceDescription { get; }
    public string RedundantLinebreakDescription { get; }
    public string RedundantSpaceDescription { get; }
    public string MissingBlankLinesDescription { get; }
    public string RedundantBlankLinesDescription { get; }
    public string ElsewhereDescription { get; }
    public abstract virtual string get_MissingIndent();
    public abstract virtual string get_BadIndent();
    public abstract virtual string get_TabsAndSpacesMismatch();
    public abstract virtual string get_WrongIndentSize();
    public abstract virtual string get_IndentIsOffPrevLevel();
    public abstract virtual string get_MissingLinebreak();
    public abstract virtual string get_MissingSpace();
    public abstract virtual string get_RedundantLinebreak();
    public abstract virtual string get_RedundantSpace();
    public abstract virtual string get_MultipleSpaces();
    public abstract virtual string get_TabsOutsideIndent();
    public abstract virtual string get_MissingBlankLines();
    public abstract virtual string get_RedundantBlankLines();
    public abstract virtual string get_IndentProblemsCompoundItem();
    public abstract virtual string get_SpacesProblemsCompoundItem();
    public abstract virtual string get_LineBreaksProblemsCompoundItem();
    public abstract virtual string get_BlankLinesProblemsCompoundItem();
    public abstract virtual Dictionary`2<FormatMismatchType, ValueTuple`2<string, string>> get_FormatMismatchInfo();
    public abstract virtual Dictionary`2<BlankLinesMismatchType, ValueTuple`2<string, string>> get_BlankLineMismatchInfo();
    public abstract virtual string get_MissingLinebreakDescription();
    public abstract virtual string get_MissingSpaceDescription();
    public abstract virtual string get_RedundantLinebreakDescription();
    public abstract virtual string get_RedundantSpaceDescription();
    public abstract virtual string get_MissingBlankLinesDescription();
    public abstract virtual string get_RedundantBlankLinesDescription();
    public abstract virtual string get_ElsewhereDescription();
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Daemon.Formatter.IFormatterHighlighting {
    public IEnumerable`1<SettingsEntry> UsedSettings { get; }
    public abstract virtual IEnumerable`1<SettingsEntry> get_UsedSettings();
}
[ConfigurableSeverityHighlightingAttribute("", "CSHARP,HTML,XML,XAML")]
public class JetBrains.ReSharper.Daemon.Formatter.IndentingHighlighting : object {
    [CompilerGeneratedAttribute]
private ITreeNode <ClosingNode>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNode <NodeToIndent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigurableSeverityId>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<SettingsEntry> <UsedSettings>k__BackingField;
    public ITreeNode ClosingNode { get; private set; }
    public ITreeNode NodeToIndent { get; }
    public string ToolTip { get; }
    public string ConfigurableSeverityId { get; }
    public string ErrorStripeToolTip { get; }
    public IEnumerable`1<SettingsEntry> UsedSettings { get; }
    public IndentingHighlighting(ITreeNode nodeToIndent, string toolTip, string configurableSeverityId, ITreeNode closingNode, IEnumerable`1<SettingsEntry> usedSettings);
    [CompilerGeneratedAttribute]
public ITreeNode get_ClosingNode();
    [CompilerGeneratedAttribute]
private void set_ClosingNode(ITreeNode value);
    [CompilerGeneratedAttribute]
public ITreeNode get_NodeToIndent();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConfigurableSeverityId();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual void SetClosingNode(ITreeNode node);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<SettingsEntry> get_UsedSettings();
}
public abstract class JetBrains.ReSharper.Daemon.HighlightingBasedHighlighterTooltipProviderBase : object {
    private static ILogger Logger;
    [CanBeNullAttribute]
private DaemonBase myDaemon;
    [CanBeNullAttribute]
private IShellLocks myLocks;
    protected HighlightingBasedHighlighterTooltipProviderBase(Lifetime lifetime, IShellLocks locks, DaemonBase daemon);
    private static HighlightingBasedHighlighterTooltipProviderBase();
    [CanBeNullAttribute]
private static RichTextBlock GetTooltipForHighlighting(IHighlighting highlighting, HighlighterTooltipKind where);
    public virtual bool ShouldShowTooltip(IHighlighter highlighter, HighlighterTooltipKind where);
    private sealed virtual override RichTextBlock JetBrains.TextControl.DocumentMarkup.IHighlighterTooltipProvider.TryGetTooltip(IHighlighter highlighter, HighlighterTooltipKind where);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0();
    [CompilerGeneratedAttribute]
internal static RichTextBlock <JetBrains.TextControl.DocumentMarkup.IHighlighterTooltipProvider.TryGetTooltip>g__FallbackText|6_0(IHighlighter highlighter);
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.Daemon.HighlightingSettingsUpgrader : object {
    public sealed virtual void Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Daemon.HighlightingsUnderCaretProvider : object {
    [NotNullAttribute]
private DocumentManager myDocumentManager;
    public HighlightingsUnderCaretProvider(DocumentManager documentManager);
    [CanBeNullAttribute]
private ILanguageSpecificHighlightingsUnderCaretProvider GetLanguageSpecificServices(ITextControl textControl, IPsiSourceFile& sourceFile, PsiLanguageType& language);
    [CanBeNullAttribute]
public IUnderCaretHighlighter GetHighlighterUnderCaret(ITextControl textControl);
    [CanBeNullAttribute]
public IUnderCaretHighlighter GetHighlighterUnderCaret(ITextControl textControl, DocumentOffset offset);
}
public interface JetBrains.ReSharper.Daemon.IFullRehighlightPersistedDataHolder {
    public abstract virtual void OnFullRehighlightRequested(IDaemonProcess daemonProcess);
    public abstract virtual void OnFullRehighlightFinished(IDaemonProcess daemonProcess);
}
public interface JetBrains.ReSharper.Daemon.IHighlightingSuppressor {
    public abstract virtual IProperty`1<bool> ShouldSuppress(Lifetime lifetime, IProjectFile projectFile, ITextControl textControl);
}
public interface JetBrains.ReSharper.Daemon.IInterruptable {
    public bool InterruptFlag { get; }
    public abstract virtual bool get_InterruptFlag();
}
[ContainsContextConsumerAttribute]
public class JetBrains.ReSharper.Daemon.IL.ContextHighlighters.ILCommentedMetadataTokensContextHighlighter : ContextHighlighterBase {
    private static string HIGHLIGHTING_ID;
    [NotNullAttribute]
[AsyncContextConsumerAttribute]
public static Action ProcessContext(Lifetime lifetime, HighlightingProlongedLifetime prolongedLifetime, IPsiDocumentRangeView psiDocumentRangeView);
    protected virtual void CollectHighlightings(IPsiDocumentRangeView psiDocumentRangeView, HighlightingsConsumer consumer);
}
[ContainsContextConsumerAttribute]
public class JetBrains.ReSharper.Daemon.IL.ContextHighlighters.ILCustomAttributeOwnerContextHighlighter : ContextHighlighterBase {
    private static string HIGHLIGHTING_ID;
    [NotNullAttribute]
[AsyncContextConsumerAttribute]
public static Action ProcessContext(Lifetime lifetime, HighlightingProlongedLifetime prolongedLifetime, IPsiDocumentRangeView psiDocumentRangeView);
    protected virtual void CollectHighlightings(IPsiDocumentRangeView psiDocumentRangeView, HighlightingsConsumer consumer);
    [CanBeNullAttribute]
private static IGenericParameterDeclaration GetTypeParameter(ITreeNode body, IGenericParameterPointer genericParameterPointer);
    private static void Highlight(HighlightingsConsumer consumer, ITreeNode node);
}
[ContainsContextConsumerAttribute]
public class JetBrains.ReSharper.Daemon.IL.ContextHighlighters.ILFunctionExitsContextHighlighter : ContextHighlighterBase {
    private static string HIGHLIGHTING_ID;
    [NotNullAttribute]
[AsyncContextConsumerAttribute]
public static Action ProcessContext(Lifetime lifetime, HighlightingProlongedLifetime prolongedLifetime, IPsiDocumentRangeView psiDocumentRangeView);
    protected virtual void CollectHighlightings(IPsiDocumentRangeView psiDocumentRangeView, HighlightingsConsumer consumer);
    private static void Highlight(HighlightingsConsumer consumer, ITreeNode node);
}
[ContainsContextConsumerAttribute]
public class JetBrains.ReSharper.Daemon.IL.ContextHighlighters.ILLabelsContextHighlighter : ContextHighlighterBase {
    private static string HIGHLIGHTING_ID;
    [NotNullAttribute]
[AsyncContextConsumerAttribute]
public static Action ProcessContext(Lifetime lifetime, HighlightingProlongedLifetime prolongedLifetime, IPsiDocumentRangeView psiDocumentRangeView);
    protected virtual void CollectHighlightings(IPsiDocumentRangeView psiDocumentRangeView, HighlightingsConsumer consumer);
}
[ContainsContextConsumerAttribute]
public class JetBrains.ReSharper.Daemon.IL.ContextHighlighters.ILLocalsContextHighlighter : ContextHighlighterBase {
    private static string HIGHLIGHTING_ID;
    [NotNullAttribute]
[AsyncContextConsumerAttribute]
public static Action ProcessContext(Lifetime lifetime, HighlightingProlongedLifetime prolongedLifetime, IPsiDocumentRangeView psiDocumentRangeView);
    protected virtual void CollectHighlightings(IPsiDocumentRangeView psiDocumentRangeView, HighlightingsConsumer consumer);
    private static void Highlight(HighlightingsConsumer consumer, ITreeNode node);
}
[ContainsContextConsumerAttribute]
public class JetBrains.ReSharper.Daemon.IL.ContextHighlighters.ILParametersContextHighlighter : ContextHighlighterBase {
    private static string HIGHLIGHTING_ID;
    [NotNullAttribute]
[AsyncContextConsumerAttribute]
public static Action ProcessContext(Lifetime lifetime, HighlightingProlongedLifetime prolongedLifetime, IPsiDocumentRangeView psiDocumentRangeView);
    protected virtual void CollectHighlightings(IPsiDocumentRangeView psiDocumentRangeView, HighlightingsConsumer consumer);
    private static bool TryGetParameterInfo(IPsiDocumentRangeView psiDocumentRangeView, Int32& index, IILMethodDeclaration& methodDeclaration);
    private static void Highlight(HighlightingsConsumer consumer, ITreeNode node);
}
[ContainsContextConsumerAttribute]
public class JetBrains.ReSharper.Daemon.IL.ContextHighlighters.ILSwitchContextHighlighter : ContextHighlighterBase {
    private static string HIGHLIGHTING_ID;
    [NotNullAttribute]
[AsyncContextConsumerAttribute]
public static Action ProcessContext(Lifetime lifetime, HighlightingProlongedLifetime prolongedLifetime, IPsiDocumentRangeView psiDocumentRangeView);
    protected virtual void CollectHighlightings(IPsiDocumentRangeView psiDocumentRangeView, HighlightingsConsumer consumer);
    private static void Highlight(HighlightingsConsumer consumer, ITreeNode node);
}
[ContainsContextConsumerAttribute]
public class JetBrains.ReSharper.Daemon.IL.ContextHighlighters.ILUsagesContextHighlighter : ContextHighlighterBase {
    private static string HIGHLIGHTING_ID;
    [AsyncContextConsumerAttribute]
public static Action ProcessContext(Lifetime lifetime, HighlightingProlongedLifetime prolongedLifetime, IPsiDocumentRangeView psiDocumentRangeView);
    protected virtual void CollectHighlightings(IPsiDocumentRangeView psiDocumentRangeView, HighlightingsConsumer consumer);
    [CanBeNullAttribute]
private static IReference GetReference(IPsiView psiView);
    [CanBeNullAttribute]
private static IReference GetReferenceUnderCaret(IReference reference, TreeTextRange treeRange);
}
internal class JetBrains.ReSharper.Daemon.IL.Highlightings.IlDescriptionUtil : object {
    public static string ToMultiline(string s);
    private static string ToMultiline(string s, int minLineLength, int maxLineLength);
    public static string ConcatWithLineBreak(string s1, string s2);
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/GutterMarks")]
public class JetBrains.ReSharper.Daemon.IL.Highlightings.IlGotoLabelMarkOnGutter : object {
    private ITargetLabel myElement;
    private DocumentRange myRange;
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public IlGotoLabelMarkOnGutter(ITargetLabel element, DocumentRange range);
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
}
[RegisterHighlighterGroupAttribute("IL", "IL (Intermediate Language)", "4")]
[RegisterHighlighterAttribute("ReSharper IL Keyword")]
[RegisterHighlighterAttribute("ReSharper IL Comment")]
[RegisterHighlighterAttribute("ReSharper IL Instruction")]
[RegisterHighlighterAttribute("ReSharper IL String Literal")]
[RegisterHighlighterAttribute("ReSharper IL Constant Literal")]
[RegisterHighlighterAttribute("ReSharper IL Code Label")]
[RegisterHighlighterAttribute("ReSharper IL Target Code Label")]
[RegisterHighlighterAttribute("ReSharper IL Qualified Name")]
[RegisterHighlighterAttribute("ReSharper IL Method Identifier")]
[RegisterHighlighterAttribute("ReSharper IL Parameter Identifier")]
[RegisterHighlighterAttribute("ReSharper IL Identifier")]
[RegisterHighlighterAttribute("ReSharper IL Target")]
[RegisterHighlighterAttribute("ReSharper IL Viewer Synchronization")]
public static class JetBrains.ReSharper.Daemon.IL.Highlightings.IlHighlightingAttributeIds : object {
    public static string KEYWORD;
    public static string COMMENT;
    public static string CONSTANT_LITERAL;
    public static string STRING_LITERAL;
    public static string IDENTIFIER;
    public static string QUALIFIED_NAME;
    public static string METHOD;
    public static string PARAMETER;
    public static string INSTRUCTION;
    public static string CODE_LABEL;
    public static string TARGET_LABEL;
    public static string TARGET;
    public static string IL_VIEWER_SYNCHRONIZATION_HIGHLIGHTER;
}
internal abstract class JetBrains.ReSharper.Daemon.IL.Highlightings.IlHighlightingBase : object {
    private DocumentRange myRange;
    [CompilerGeneratedAttribute]
private string <AttributeId>k__BackingField;
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public string AttributeId { get; }
    protected IlHighlightingBase(string attributeId, DocumentRange range);
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    [CompilerGeneratedAttribute]
public sealed virtual string get_AttributeId();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual Nullable`1<int> GetStatisticsKey();
}
[DaemonTooltipProviderAttribute("JetBrains.ReSharper.Daemon.IL.Highlightings.IlIdentifierTooltipProvider")]
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IdentifierHighlightings")]
internal class JetBrains.ReSharper.Daemon.IL.Highlightings.IlIdentifierHighlighting : IlHighlightingBase {
    public IlIdentifierHighlighting(string attributeId, DocumentRange range);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Daemon.IL.Highlightings.IlIdentifierTooltipProvider : IdentifierTooltipProvider`1<ILLanguage> {
    public IlIdentifierTooltipProvider(Lifetime lifetime, ISolution solution, IDeclaredElementDescriptionPresenter presenter, DeclaredElementPresenterTextStylesService textStylesService, IIdentifierTooltipSuppressor identifierTooltipSuppressor);
    protected virtual bool ShouldShowTooltip(IHighlighter highlighter);
}
[DaemonTooltipProviderAttribute("JetBrains.ReSharper.Daemon.IL.Highlightings.IlTooltipProvider")]
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IdentifierHighlightings")]
internal class JetBrains.ReSharper.Daemon.IL.Highlightings.IlInstructionHighlighting : IlHighlightingBase {
    public IlInstructionHighlighting(DocumentRange range);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Daemon.IL.Highlightings.IlInstructionsDescription : object {
    private Lazy`1<Dictionary`2<OpcodeValue, string>> myDescription;
    private Lazy`1<Dictionary`2<string, Opcode>> myOpcodes;
    [CanBeNullAttribute]
public string TryGetDescription(string instruction);
    private string GetStackTransition(Opcode opcode);
    private string GetStackBehaviorDescription(StackBehavior stackBehavior, OpcodeValue opcodeValue);
    private static Dictionary`2<string, Opcode> CreateOpcodesDictionary();
    private static Dictionary`2<OpcodeValue, string> CreateDescriptionDictionary();
}
[DaemonTooltipProviderAttribute("JetBrains.ReSharper.Daemon.IL.Highlightings.IlTooltipProvider")]
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IdentifierHighlightings")]
internal class JetBrains.ReSharper.Daemon.IL.Highlightings.IlKeywordHighlighting : IlHighlightingBase {
    [CompilerGeneratedAttribute]
private IILTreeNode <IlKeywordNode>k__BackingField;
    public IILTreeNode IlKeywordNode { get; }
    public IlKeywordHighlighting(DocumentRange range, IILTreeNode ilKeywordNode);
    [CompilerGeneratedAttribute]
public IILTreeNode get_IlKeywordNode();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Daemon.IL.Highlightings.IlKeywordsDescription : object {
    private Lazy`1<Dictionary`2<string, string>> myDescription;
    private static string DotParamConstraintInMethod;
    private static string DotParamConstraintInType;
    private static string DotParamTypeInMethod;
    private static string DotParamTypeInType;
    private static string DotInterfaceimplType;
    private static string DotAssemblyExtern;
    private static string DotModuleExtern;
    private static string DotClassExtern;
    private static string DotFileAlignment;
    private static string DotHashAlgorithm;
    private static string DotOverrideMethod;
    private static string AsAny;
    private static string FixedArray;
    private static string FixedSysstring;
    private static string NativeIntType;
    private static string NativeUnsignedIntType;
    private static string IntType;
    private static string UnsignedIntType;
    private static string Int8Type;
    private static string UnsignedInt8Type;
    private static string Int16Type;
    private static string UnsignedInt16Type;
    private static string Int32Type;
    private static string UnsignedInt32Type;
    private static string Int64Type;
    private static string UnsignedInt64Type;
    private static string NestedAssembly;
    private static string NestedFamandassem;
    private static string NestedFamily;
    private static string NestedFamorassem;
    private static string NestedPrivate;
    private static string NestedPublic;
    private static string UnmanagedCdecl;
    private static string UnmanagedStdcall;
    private static string UnmanagedFastcall;
    private static string UnmanagedThiscall;
    [CanBeNullAttribute]
internal string TryGetDescription(string keyword, IlKeywordHighlighting keywordHighlighting);
    private static Dictionary`2<string, string> CreateDescriptionDictionary();
    [CanBeNullAttribute]
private static string GetContextDescription(string keyword, IILTreeNode keywordNode);
    [CompilerGeneratedAttribute]
internal static string <GetContextDescription>g__GetPrevKeyword|40_0(<>c__DisplayClass40_0& );
    [CompilerGeneratedAttribute]
internal static string <GetContextDescription>g__GetPrev2Keyword|40_1(<>c__DisplayClass40_0& );
    [CompilerGeneratedAttribute]
internal static string <GetContextDescription>g__GetNextKeyword|40_2(<>c__DisplayClass40_0& );
    [CompilerGeneratedAttribute]
internal static MemberDeclarationType <GetContextDescription>g__GetMemberDeclarationType|40_3(<>c__DisplayClass40_0& );
}
internal class JetBrains.ReSharper.Daemon.IL.Highlightings.IlSettingsNamesProvider : PrefixBasedSettingsNamesProvider {
    private static string IL_GROUP_PREFIX;
}
[DaemonTooltipProviderAttribute("JetBrains.ReSharper.Daemon.IL.Highlightings.IlTooltipProvider")]
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IdentifierHighlightings")]
internal class JetBrains.ReSharper.Daemon.IL.Highlightings.IlSpecialSymbolHighlighting : IlHighlightingBase {
    [CompilerGeneratedAttribute]
private IILTreeNode <SymbolNode>k__BackingField;
    public IILTreeNode SymbolNode { get; }
    public IlSpecialSymbolHighlighting(DocumentRange range, IILTreeNode symbolNode);
    [CompilerGeneratedAttribute]
public IILTreeNode get_SymbolNode();
}
internal static class JetBrains.ReSharper.Daemon.IL.Highlightings.IlSpecialSymbolsDescription : object {
    [CanBeNullAttribute]
public static string TryGetDescription(string symbol, IlSpecialSymbolHighlighting specialSymbolHighlighting);
}
[SolutionComponentAttribute("10")]
[NonHighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.IL.Highlightings.IlTooltipProvider : object {
    private IlInstructionsDescription myIlInstructionsDescription;
    private IlKeywordsDescription myIlKeywordsDescription;
    private DaemonBase myDaemon;
    private IPsiServices myPsiServices;
    private IShellLocks myLocks;
    public IlTooltipProvider(Lifetime lifetime, IlInstructionsDescription ilInstructionsDescription, IlKeywordsDescription ilKeywordsDescription, DaemonBase daemon, IPsiServices psiServices, IShellLocks locks);
    private IlHighlightingBase GetHighlighting(IHighlighter highlighter);
    private sealed virtual override bool JetBrains.TextControl.DocumentMarkup.IHighlighterTooltipProvider.ShouldShowTooltip(IHighlighter highlighter, HighlighterTooltipKind where);
    private sealed virtual override RichTextBlock JetBrains.TextControl.DocumentMarkup.IHighlighterTooltipProvider.TryGetTooltip(IHighlighter highlighter, HighlighterTooltipKind where);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0();
}
public abstract class JetBrains.ReSharper.Daemon.IL.IlDaemonStageBase : object {
    [CanBeNullAttribute]
protected abstract virtual IDaemonStageProcess CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind, IILFile file);
    public sealed virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
    private bool IsSupported(IPsiSourceFile sourceFile);
}
public abstract class JetBrains.ReSharper.Daemon.IL.IlDaemonStageProcessBase : TreeNodeVisitor`1<IHighlightingConsumer> {
    [NotNullAttribute]
private IILFile myFile;
    [NotNullAttribute]
private IDaemonProcess myProcess;
    [CompilerGeneratedAttribute]
private IContextBoundSettingsStore <SettingsStore>k__BackingField;
    [CompilerGeneratedAttribute]
private DaemonProcessKind <ProcessKind>k__BackingField;
    [NotNullAttribute]
public IILFile File { get; }
    public IDaemonProcess DaemonProcess { get; }
    private IFile JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageProcessWithPsiFile.File { get; }
    [NotNullAttribute]
protected IContextBoundSettingsStore SettingsStore { get; }
    protected DaemonProcessKind ProcessKind { get; }
    protected IlDaemonStageProcessBase(IILFile file, IDaemonProcess process, DaemonProcessKind processKind, IContextBoundSettingsStore settingsStore);
    public IILFile get_File();
    public sealed virtual IDaemonProcess get_DaemonProcess();
    private sealed virtual override IFile JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageProcessWithPsiFile.get_File();
    [CompilerGeneratedAttribute]
protected IContextBoundSettingsStore get_SettingsStore();
    [CompilerGeneratedAttribute]
protected DaemonProcessKind get_ProcessKind();
    public abstract virtual void Execute(Action`1<DaemonStageResult> committer);
    protected void HighlightInFile(Action`2<IILFile, IHighlightingConsumer> fileHighlighter, Action`1<DaemonStageResult> commiter);
    public virtual bool InteriorShouldBeProcessed(ITreeNode element, IHighlightingConsumer context);
    public sealed virtual bool IsProcessingFinished(IHighlightingConsumer context);
    public sealed virtual void ProcessBeforeInterior(ITreeNode element, IHighlightingConsumer context);
    public sealed virtual void ProcessAfterInterior(ITreeNode element, IHighlightingConsumer context);
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.IL.Stages.IlHighlighterProcess : IlDaemonStageProcessBase {
    public IlHighlighterProcess(IILFile file, IDaemonProcess process, DaemonProcessKind processKind, IContextBoundSettingsStore settingsStore);
    public virtual bool InteriorShouldBeProcessed(ITreeNode element, IHighlightingConsumer context);
    public virtual void VisitNode(ITreeNode node, IHighlightingConsumer context);
    private static void HighlightToken(IHighlightingConsumer context, TokenNodeType tokenType, IILTreeNode ilTreeNode);
    private static bool IsMethodName(ITreeNode node);
    public virtual void Execute(Action`1<DaemonStageResult> committer);
    [CompilerGeneratedAttribute]
private void <Execute>b__5_0(IILFile file, IHighlightingConsumer consumer);
}
[DaemonStageAttribute("16")]
public class JetBrains.ReSharper.Daemon.IL.Stages.IlHighlightingStage : IlDaemonStageBase {
    protected virtual IDaemonStageProcess CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind, IILFile file);
}
public class JetBrains.ReSharper.Daemon.IL.Stages.IlResolver : NonQualifiedReferencesResolverBase {
}
public class JetBrains.ReSharper.Daemon.IL.Stages.IlSmartResolverProcess : IlDaemonStageProcessBase {
    public IlSmartResolverProcess(IILFile file, IDaemonProcess process, DaemonProcessKind processKind, IContextBoundSettingsStore settingsStore);
    public virtual void Execute(Action`1<DaemonStageResult> committer);
}
[DaemonStageAttribute("16")]
public class JetBrains.ReSharper.Daemon.IL.Stages.IlSmartResolverStage : IlDaemonStageBase {
    protected virtual IDaemonStageProcess CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind, IILFile file);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Daemon.IL.ZoneMarker : object {
}
public interface JetBrains.ReSharper.Daemon.ILanguageSpecificHighlightingsUnderCaretProvider {
    [CanBeNullAttribute]
public abstract virtual IUnderCaretHighlighter GetHighlighter(IFile file, IDocument document, DocumentOffset caretOffset, IContextBoundSettingsStore settingsStore);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.Impl.DaemonEnablePolicy : DaemonEnablePolicyDefault {
    public static Key`1<object> EnableSwaForMiscModuleKey;
    private SynchronizedSet`1<IPsiSourceFile> myIsolatedFiles;
    private IEnumerable`1<IDaemonAutoDisableStrategy> myStrategies;
    private DaemonExcludedFilesManager myExcludedFileManager;
    private DocumentManager myDocumentManager;
    private IContextBoundSettingsStore mySettingsStore;
    private ISolution mySolution;
    private IPsiModules myPsiModules;
    private ConcurrentDictionary`2<IPsiSourceFile, bool> mySwaEnabled;
    public DaemonEnablePolicy(IEnumerable`1<IDaemonAutoDisableStrategy> strategies, ISolutionLoadTasksScheduler scheduler, DaemonExcludedFilesManager excludedFileManager, DocumentManager documentManager, ISettingsStore settingsStore, ISolution solution, ChangeManager changeManager, IPsiModules psiModules, PsiCachesRepairService psiCachesRepairService);
    private static DaemonEnablePolicy();
    public Nullable`1<DaemonDisableResult> GetDaemonDisableResultIgnoreSettings(IProjectFile file);
    public Nullable`1<DaemonDisableResult> GetDaemonDisableResultIgnoreSettings(IPsiSourceFile file);
    public virtual Nullable`1<DaemonDisableResult> GetDaemonDisableResult(IDocument document);
    private Nullable`1<DaemonDisableResult> GetDaemonDisableResult(IProjectFile projectFile, IFileSkipChecker fileSkipChecker);
    private Nullable`1<DaemonDisableResult> GetDaemonDisableResult(IProjectFile projectFile);
    private Nullable`1<DaemonDisableResult> GetDaemonDisableResult(IPsiSourceFile psiSourceFile);
    public virtual ErrorStripeRequestWithDescription NeedErrorStripe(IPsiSourceFile sourceFile);
    public virtual void Isolate(IPsiSourceFile sourceFile);
    private bool CalcSwaEnabled(IPsiSourceFile sourceFile);
    public virtual bool IsSwaEnabled(IPsiSourceFile sourceFile);
    private void Invalidate(IPsiSourceFile sourceFile);
    private void Invalidate(IEnumerable`1<IPsiSourceFile> sourceFiles);
    private void InvalidateAll();
    public sealed virtual object Execute(IChangeMap changeMap);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.Impl.DaemonImpl : DaemonBase {
    private static int DAEMONS_FOR_INVISIBLE_DOCUMENTS_LIMIT;
    protected ISolution mySolution;
    protected Lifetime myLifetime;
    private IPsiServices myPsiServices;
    protected DocumentManager myDocumentManager;
    protected ITextControlManager myTextControlManager;
    private InvisibleTextControlsTracker myTextControlsTracker;
    protected HighlightingSettingsManager myHighlightingSettingsManager;
    private IDaemonThread myDaemonThread;
    private ISolutionLoadTasksScheduler myScheduler;
    private DaemonEnablePolicy myDaemonEnablePolicy;
    protected IDocumentMarkupManager myDocumentMarkupManager;
    protected IShellLocks myLocks;
    protected SolutionAnalysisService mySolutionAnalysisService;
    private AsyncCommitServiceImpl myAsyncCommitService;
    private DaemonExcludedFilesManager myDaemonExcludedFilesManager;
    private ISolutionAnalysisIndicator mySolutionAnalysisIndicator;
    private ISettingsStore mySettingsStore;
    private SolutionAnalysisConfiguration mySolutionAnalysisConfiguration;
    private ILogger myLogger;
    private static Key`1<VisibleDocumentDaemonProcess> ourDaemonProcessInDocumentKey;
    protected object mySyncRoot;
    private HashSet`1<IDocument> myForcedToRehighlightDocuments;
    protected WeakCollection`1<DaemonProcessBase> myDaemonProcesses;
    private SequentialLifetimes mySequentialLifetimes;
    private Lifetime myActualLifetime;
    private bool isInvalidateRequested;
    private DateTime myLastDocumentChange;
    private int mySuspended;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) myDaemonTimestamp;
    protected SolutionDocumentTransactionManager mySolutionDocumentTransactionManager;
    private ProjectModelUpdateStates myProjectModelUpdateStates;
    private IHighlightingAttributeRegistry myRegistry;
    protected PencilsManager PencilsManager;
    private IHighlightingsCommitterEventsManager myHighlightingsCommitterEventsManager;
    protected ModifiedFilesCacheForDaemon myModifiedFilesCache;
    private HighlighterCountsByKindsTrackerComponent myHighlighterCountsByKindsTrackerComponent;
    private GroupingEvent myRemoveDaemonFromInvisibleDocumentsGroupingEvent;
    private IActionManager myActionManager;
    private IShellLocks myShellLocks;
    private JetPopupMenus myJetPopupMenus;
    private IImmutableList`1<IDaemonResetOnCodeStyleChangeOverrider> myResetOverriders;
    [CompilerGeneratedAttribute]
private Action Interrupted;
    public IDaemonThread DaemonThread { get; }
    public bool InterruptFlag { get; public set; }
    public bool IsSuspended { get; }
    public int DaemonTimestamp { get; }
    private bool SolutionAnalysisEnabled { get; }
    public DaemonImpl(ISolution solution, IPsiServices psiServices, DocumentManager documentManager, IShellLocks locks, ITextControlManager textControlManager, InvisibleTextControlsTracker textControlsTracker, ChangeManager changeManager, DaemonStagesManager daemonStagesManager, HighlightingSettingsManager highlightingSettingsManager, DaemonExcludedFilesManager excludedFilesManager, SolutionAnalysisService solutionAnalysisService, IDocumentMarkupManager documentMarkupManager, AsyncCommitService asyncCommitService, ISolutionAnalysisIndicator solutionAnalysisIndicator, ISettingsStore settingsStore, IDaemonThread daemonThread, ISolutionLoadTasksScheduler scheduler, DaemonEnablePolicy daemonEnablePolicy, SolutionDocumentTransactionManager solutionDocumentTransactionManager, SolutionAnalysisConfiguration solutionAnalysisConfiguration, DocumentToProjectFileMappingStorage documentStorage, ProjectContext projectContext, ProjectModelUpdateStates projectModelUpdateStates, IHighlightingAttributeRegistry registry, PencilsManager pencilsManager, IHighlightingsCommitterEventsManager highlightingsCommitterEventsManager, ModifiedFilesCacheForDaemon modifiedFilesCache, IEditorManager editorManager, HighlighterCountsByKindsTrackerComponent highlighterCountsByKindsTrackerComponent, IActionManager actionman, JetPopupMenus jpms, IImmutableList`1<IDaemonResetOnCodeStyleChangeOverrider> resetOverriders);
    private static DaemonImpl();
    private bool ShouldTriggerResetOnCodeStyleChange(SettingsStoreChangeArgs args, SettingsKey codeStyle);
    private void OnStagesChangedInit();
    private void InitializeFilesToForceEnableAndSkip(Lifetime lifetime, DaemonExcludedFilesManager excludedFilesManager);
    private void OnFolderRemovedToSkip(IProjectFolder folder);
    private void OnFolderAddedToSkip(IProjectFolder folder);
    public IDaemonThread get_DaemonThread();
    public virtual bool get_InterruptFlag();
    public virtual void set_InterruptFlag(bool value);
    [CompilerGeneratedAttribute]
public void add_Interrupted(Action value);
    [CompilerGeneratedAttribute]
public void remove_Interrupted(Action value);
    public virtual bool get_IsSuspended();
    public virtual IDisposable Suspend();
    public virtual int get_DaemonTimestamp();
    private bool get_SolutionAnalysisEnabled();
    [CanBeNullAttribute]
private sealed virtual override Action JetBrains.ReSharper.Psi.IAsyncCommitClient.BeforeCommit();
    private void EnqueueHighlightingJobWithSWEA(List`1<VisibleDocumentDaemonProcess> capturedProcesses);
    private void EnqueueHighlightingJobWithoutSWEA(List`1<VisibleDocumentDaemonProcess> capturedProcesses);
    [NotNullAttribute]
private List`1<IDocument> GetOrderedDocumentsToAnalyze();
    private sealed virtual override void JetBrains.ReSharper.Psi.IAsyncCommitClient.OnInterrupt();
    public sealed virtual void Dispose();
    private void OnHighlightingSettingsChange();
    protected virtual void OnStagesChanged();
    protected virtual void OnStagesChangedQueue();
    private void OnPsiChange(ITreeNode changedElement, PsiChangedElementType type);
    private void OnSomethingChanged(ChangeEventArgs changeEventArgs);
    private void OnPsiModulesChange(ICollection`1<Change`1<IPsiSourceFile>> fileChanges);
    public virtual void RepostHighlightingRequest(string reason);
    public virtual void Invalidate(string reason);
    private void InvalidateInternal();
    public virtual void Invalidate(string reason, IDocument document);
    private void RemoveAllHighlighters();
    public virtual bool ForceReHighlight(IDocument document);
    private void InvisibleDocumentsAnalysisJob(List`1<VisibleDocumentDaemonProcess> rehighlightedProcesses, List`1<VisibleDocumentDaemonProcess> uptodateProcesses);
    private void AnalyzeInvisibleFilesSequentially(ConcurrentQueue`1<IPsiSourceFile> filesQueue);
    private void AnalyzeInvisibleFilesInParallel(ConcurrentQueue`1<IPsiSourceFile> filesQueue, bool justBeforeInterrupt);
    protected virtual void OnVisibleTextControlsChanged(object sender, EventArgs e);
    public virtual IDaemonProcess TryGetExistingDaemonProcess(IDocument document);
    [CanBeNullAttribute]
protected VisibleDocumentDaemonProcess CreateDaemonForDocument(IDocument document, string requester);
    [NotNullAttribute]
protected virtual VisibleDocumentDaemonProcess CreateDaemonForDocumentImpl(IDocument document, IPsiSourceFile sourceFile);
    private void RemoveDaemonFromInvisibleDocuments();
    private void RemoveDaemonFromInvisibleDocumentsImpl();
    protected void RemoveDaemonFromDocument(IDocument document);
    private void OnBeforeDocumentChanged(DocumentChange args);
    protected virtual void OnDocumentChanged(DocumentChange args);
    private void RemoveHighlightinsOverModifiedRange(IDocument document, TextRange modifiedRange, string newText);
    protected virtual void OnPsiTransactionStarted();
    protected virtual void OnBeforeAcquiringWriteLock();
    public virtual IHighlighting GetHighlighting(IHighlighter highlighter);
    [ObsoleteAttribute("Don't use it (RIDER-38329)")]
private HighlightingProgressState ProcessState(IDocument document);
    public virtual DaemonStateWithDescription StateWithDescription(IDocument document);
    internal void RaiseDaemonStateChanged(IDocument document);
    private void UpdateTextControlIndicator(IDocument document, DaemonIndicatorState indicatorState);
    [CompilerGeneratedAttribute]
private void <OnFolderRemovedToSkip>b__46_0();
    [CompilerGeneratedAttribute]
private void <OnFolderAddedToSkip>b__47_0();
    [CompilerGeneratedAttribute]
private void <Suspend>b__58_0();
    [CompilerGeneratedAttribute]
private void <OnHighlightingSettingsChange>b__69_0();
    [CompilerGeneratedAttribute]
private void <OnStagesChangedQueue>b__71_0();
    [CompilerGeneratedAttribute]
private void <OnStagesChangedQueue>b__71_1(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private void <OnStagesChangedQueue>b__71_2();
    [CompilerGeneratedAttribute]
private void <OnVisibleTextControlsChanged>b__84_0();
    [CompilerGeneratedAttribute]
private void <RemoveHighlightinsOverModifiedRange>g__HighlighterAction|94_0(IHighlighter highlighter, <>c__DisplayClass94_0& );
}
public abstract class JetBrains.ReSharper.Daemon.Impl.DaemonProcessBaseImpl : DaemonProcessBase {
    [NotNullAttribute]
protected DaemonImpl myDaemon;
    [NotNullAttribute]
private SolutionAnalysisService mySolutionAnalysisService;
    public bool InterruptFlag { get; }
    protected DaemonProcessBaseImpl(IPsiSourceFile sourceFile, IDocument document);
    protected virtual void FilePartlyReanalyzed(IPsiSourceFile sourceFile, DaemonProcessBase daemonProcessBase, DaemonProcessKind processKind);
    protected virtual void AnalysisCompleted(IPsiSourceFile sourceFile, DaemonProcessBase daemonProcessBase, DependencySet dependencies, bool analysisSupported, DaemonProcessKind processKind);
    protected virtual void AnalysisStageCompleted(IPsiSourceFile sourceFile, IDaemonStage stage, byte layer, List`1<HighlightingInfo> stageHighlightings, bool stageFullRehighlight, List`1<DocumentRange> stageRanges, DaemonProcessKind processKind, IContextBoundSettingsStore settingsStore);
    protected virtual bool ShouldNotifySwea(IPsiSourceFile sourceFile);
    public virtual bool get_InterruptFlag();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Daemon.Impl.DaemonStagesManager : object {
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myIsInitialized;
    private object myInitializationLock;
    private List`1<IDaemonStage> mySortedStages;
    private Dictionary`2<Type, DaemonStageAttribute> myStageToAttribute;
    private Dictionary`2<Type, IDaemonStage> myTypeToStage;
    private Dictionary`2<IDaemonStage, HighlightingTypesSet> myStageHighlightingTypes;
    private OneToSetMap`2<IDaemonStage, IDaemonStage> myStagesBefore;
    private OneToSetMap`2<IDaemonStage, IDaemonStage> myStagesAfter;
    private OneToSetMap`2<IDaemonStage, IDaemonStage> myTransitiveStagesOnlyBefore;
    private ComponentContainer myContainer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<IDaemonStage, IDaemonStage, Nullable`1<int>> myStagesComparer;
    public IReadOnlyCollection`1<IDaemonStage> AllRegisteredStagesSorted { get; }
    public DaemonStagesManager(NestedComponentContainerAllByPartAttribute`2<DaemonStageAttribute, ShellPartCatalogSet> nestedComponentContainer);
    [PureAttribute]
public static DaemonStagesManager GetInstance(ISolution solution);
    public sealed virtual IReadOnlyCollection`1<IDaemonStage> get_AllRegisteredStagesSorted();
    public sealed virtual Nullable`1<int> TryCompareStages(IDaemonStage x, IDaemonStage y);
    public sealed virtual DaemonStageAttribute GetStageAttribute(IDaemonStage stage);
    public sealed virtual HighlightingTypesSet GetStageHighlightingTypes(IDaemonStage stage);
    public IDaemonStage StageByType(Type stageType);
    public sealed virtual IEnumerable`1<IDaemonStage> GetBeforeStagesFor(IDaemonStage stage);
    public sealed virtual IEnumerable`1<IDaemonStage> GetAfterStagesFor(IDaemonStage stage);
    public sealed virtual IEnumerable`1<IDaemonStage> GetTransitiveBeforeOnlyStagesFor(IDaemonStage stage);
    public sealed virtual Type[] GetStagesOverridenBy(Type stageType);
    private void Update();
    private void InitializeStages();
    [ConditionalAttribute("JET_MODE_ASSERT")]
private void ValidateStageDependency(IDaemonStage afterStage, IDaemonStage beforeStage);
    [ConditionalAttribute("JET_MODE_ASSERT")]
private static void ValidateReferredClassesAsDaemonStages(IDaemonStage annotatedStage, IEnumerable`1<Type> stages);
    public virtual void ValidateDaemonStageResult(IDaemonStage stage, DaemonStageResult result);
    [CompilerGeneratedAttribute]
private void <InitializeStages>g__AddBeforeStageAndItsBeforeDependencies|24_0(IDaemonStage beforeStage, <>c__DisplayClass24_0& , <>c__DisplayClass24_1& );
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.Impl.ErrorStripeTooltipProvider : HighlightingBasedHighlighterTooltipProviderBase {
    public ErrorStripeTooltipProvider(Lifetime lifetime, DaemonBase daemon, IShellLocks locks);
    public virtual bool ShouldShowTooltip(IHighlighter highlighter, HighlighterTooltipKind where);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Daemon.Impl.ErrorTooltipProvider : HighlightingBasedHighlighterTooltipProviderBase {
    public ErrorTooltipProvider(Lifetime lifetime, DaemonBase daemon, IShellLocks locks);
}
public interface JetBrains.ReSharper.Daemon.Impl.IDaemonResetOnCodeStyleChangeOverrider {
    public abstract virtual bool ShouldOverride(SettingsEntry entry);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.Impl.SlowTooltipProvider : HighlightingBasedHighlighterTooltipProviderBase {
    public SlowTooltipProvider(Lifetime lifetime, DaemonBase daemon, IShellLocks locks);
}
public class JetBrains.ReSharper.Daemon.Impl.VisibleDocumentDaemonProcess : DaemonProcessBaseImpl {
    public static Key`1<IncrementalStageInvalidationContext> IncrementalStageInvalidationContextKey;
    [CanBeNullAttribute]
private IncrementalStageInvalidationContext myIncrementalStageInvalidationContext;
    [NotNullAttribute]
[ItemNotNullAttribute]
private IReadOnlyCollection`1<IFullRehighlightPersistedDataHolder> myFullRehighlightPersistentDataSinks;
    private HighlightingProgressState modreq(System.Runtime.CompilerServices.IsVolatile) myHighlightingInProgress;
    private DocumentRange myVisibleTextRange;
    private InvalidationContext myInvalidationContext;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) myLastGlobalStagesRunStamp;
    private HashSet`1<string> myStageTypeToKey;
    [NotNullAttribute]
private IDocumentMarkupManager myDocumentMarkupManager;
    private ITextControlManager myTextControlManager;
    private SolutionAnalysisService mySolutionAnalysisService;
    private HighlightingSettingsManager myHighlightingSettingsManager;
    private IShellLocks myLocks;
    private SolutionDocumentTransactionManager myDocumentTransactionManager;
    protected PencilsManager PencilsManager;
    protected Lifetime myLifetime;
    private IHighlightingsCommitterEventsManager myCommitterEventsManager;
    private ModifiedFilesCacheForDaemon myModifiedFilesCache;
    internal ILogger Logger;
    [CompilerGeneratedAttribute]
private IDocumentMarkup <DocumentMarkup>k__BackingField;
    [NotNullAttribute]
private IEnumerable`1<IExternalVisibleDaemonDescriptor> myExternalDaemons;
    [NotNullAttribute]
private IEnumerable`1<IHighlighterAdornmentProvider> myAdornmentsProviders;
    [NotNullAttribute]
private ConcurrentDictionary`2<Type, IHighlighterAdornmentProvider> myAdornmentsMap;
    [NotNullAttribute]
public IDocumentMarkup DocumentMarkup { get; private set; }
    public DaemonStateWithDescription ErrorStripeIndicatorState { get; }
    public HighlightingProgressState HighlightingInProgress { get; public set; }
    public DocumentRange VisibleRange { get; }
    public bool FullRehighlightingRequired { get; }
    public bool IsUpToDate { get; }
    public bool IsGlobalAnalysisUpToDate { get; }
    public VisibleDocumentDaemonProcess(IDocument document, IPsiSourceFile sourceFile, IDocumentMarkupManager documentMarkupManager, ITextControlManager textControlManager, DocumentManager documentManager, SolutionAnalysisService solutionAnalysisService, HighlightingSettingsManager highlightingSettingsManager, IShellLocks locks, SolutionDocumentTransactionManager documentTransactionManager, PencilsManager pencilsManager, Lifetime lifetime, IHighlightingsCommitterEventsManager committerEventsManager, ModifiedFilesCacheForDaemon modifiedFilesCache);
    private static VisibleDocumentDaemonProcess();
    [CompilerGeneratedAttribute]
public IDocumentMarkup get_DocumentMarkup();
    [CompilerGeneratedAttribute]
private void set_DocumentMarkup(IDocumentMarkup value);
    [NotNullAttribute]
private static string KeyToString(ValueTuple`2<Type, byte> stageResultKey);
    [NotNullAttribute]
private string GetKeyForStage(ValueTuple`2<Type, byte> stageType);
    public DaemonStateWithDescription get_ErrorStripeIndicatorState();
    public HighlightingProgressState get_HighlightingInProgress();
    public void set_HighlightingInProgress(HighlightingProgressState value);
    public virtual DocumentRange get_VisibleRange();
    public virtual bool IsRangeInvalidated(DocumentRange range);
    public virtual bool get_FullRehighlightingRequired();
    public void InvalidateRange(DocumentRange range);
    public void Invalidate();
    public bool get_IsUpToDate();
    [CanBeNullAttribute]
public IHighlighterAdornmentProvider GetAdornmentProvider(Type highlightingType);
    public virtual void RemoveHighlightings();
    public void EnqueueHighlightingJob(bool globalAnalysisStages);
    private bool CheckUpToDate(bool globalAnalysisStages);
    public bool get_IsGlobalAnalysisUpToDate();
    public void DoHighlighting(bool globalAnalysisStages);
    [NotNullAttribute]
protected virtual Committer CreateCommitter();
    protected virtual void WaitForHighlightingsCommitter(Committer committer);
    public bool RefreshMarkup();
    public virtual void ClearOverlapResolver(Layer layerMask);
    [CompilerGeneratedAttribute]
private void <DoHighlighting>b__49_1();
    [CompilerGeneratedAttribute]
private bool <ClearOverlapResolver>b__57_0();
}
public class JetBrains.ReSharper.Daemon.InterruptableOnProgress : object {
    private IProgressIndicator myProgress;
    public bool InterruptFlag { get; }
    public InterruptableOnProgress(IProgressIndicator progress);
    public sealed virtual bool get_InterruptFlag();
}
[DerivedComponentsInstantiationRequirementAttribute("0")]
public interface JetBrains.ReSharper.Daemon.ISolutionAnalysisIndicator {
    public abstract virtual IProgressIndicator ShowLoadingProgress();
    public abstract virtual void StartAnalyzingChanges();
    public abstract virtual void AnalyzingFile(IPsiSourceFile file);
    public abstract virtual void AnalyzingFilesCompleted();
    public abstract virtual void AnalyzingFilesInterrupted();
    public abstract virtual void Initialize();
}
public interface JetBrains.ReSharper.Daemon.IUnderCaretHighlighter {
    [ItemNotNullAttribute]
[NotNullAttribute]
public abstract virtual IEnumerable`1<HighlightingInfo> GetHighlightingsForRange(DocumentRange analysisRange);
}
[ActionAttribute("JetBrains.ReSharper.Daemon.Resources.Strings3", "GotoBraceActionText")]
[VsOverrideActionAttribute("({1496A755-94DE-11D0-8C3F-00C04FC2AAE2}:53)")]
internal class JetBrains.ReSharper.Daemon.MatchingElements.GotoBraceActionHandler : GotoBraceActionHandlerBase {
    protected virtual void ExecuteInternal(IDataContext context);
}
public abstract class JetBrains.ReSharper.Daemon.MatchingElements.GotoBraceActionHandlerBase : SimpleOverridingActionHandler {
    protected static DocumentRange GetMatchingRange(IDataContext context);
    protected virtual bool IsAvailable(IDataContext context);
}
[ActionAttribute("JetBrains.ReSharper.Daemon.Resources.Strings3", "GotoBraceExtendActionText")]
[VsOverrideActionAttribute("({1496A755-94DE-11D0-8C3F-00C04FC2AAE2}:54)")]
public class JetBrains.ReSharper.Daemon.MatchingElements.GotoBraceExtendActionHandler : GotoBraceActionHandlerBase {
    protected virtual void ExecuteInternal(IDataContext context);
}
[HighlightingSourceAttribute]
public abstract class JetBrains.ReSharper.Daemon.MethodSeparators.FirstApplicableChildSkippingProcessor : object {
    private LanguageService myLanguageService;
    protected FirstApplicableChildSkippingProcessor(LanguageService languageService);
    public abstract virtual bool IsApplicable(ITreeNode element);
    public virtual bool InteriorShouldBeProcessed(ITreeNode element);
    public void Process(ITreeNode root, MethodSeparatorConsumer consumer);
    private bool HasApplicablePrevSibling(ITreeNode element);
}
public interface JetBrains.ReSharper.Daemon.MethodSeparators.IMethodSeparatorFactory {
    public abstract virtual void CollectSeparators(IFile file, MethodSeparatorConsumer consumer);
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.MethodSeparators.MethodSeparatorConsumer : DefaultHighlightingConsumer {
    [CompilerGeneratedAttribute]
private MethodSeparatorPlacement <DefaultPlacement>k__BackingField;
    public MethodSeparatorPlacement DefaultPlacement { get; }
    public MethodSeparatorConsumer(IPsiSourceFile sourceFile);
    [CompilerGeneratedAttribute]
public MethodSeparatorPlacement get_DefaultPlacement();
    public void ConsumeSeparator(DocumentRange range);
    public void ConsumeSeparator(ITreeNode node);
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.MethodSeparators.MethodSeparatorDaemonStageProcess : object {
    [CompilerGeneratedAttribute]
private IPsiServices <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private IDaemonProcess <DaemonProcess>k__BackingField;
    public IPsiServices Services { get; }
    public IDaemonProcess DaemonProcess { get; }
    public MethodSeparatorDaemonStageProcess(IDaemonProcess process);
    [CompilerGeneratedAttribute]
public IPsiServices get_Services();
    [CompilerGeneratedAttribute]
public sealed virtual IDaemonProcess get_DaemonProcess();
    public sealed virtual void Execute(Action`1<DaemonStageResult> committer);
}
[RegisterHighlighterAttribute("ReSharper Method Separator Highlighting")]
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Daemon.MethodSeparators.MethodSeparatorHighlighting/MethodSeparatorHighlightings")]
public class JetBrains.ReSharper.Daemon.MethodSeparators.MethodSeparatorHighlighting : object {
    [CompilerGeneratedAttribute]
private MethodSeparatorPlacement <Placement>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <Range>k__BackingField;
    public MethodSeparatorPlacement Placement { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public DocumentRange Range { get; }
    public string AttributeId { get; }
    public MethodSeparatorHighlighting(DocumentRange range, MethodSeparatorPlacement placement);
    [CompilerGeneratedAttribute]
public MethodSeparatorPlacement get_Placement();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
    [CompilerGeneratedAttribute]
public DocumentRange get_Range();
    public sealed virtual string get_AttributeId();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.NamespaceFolderProvider : object {
    private Lifetime myLifetime;
    private ProjectModelElementPointerManager myElementPointerManager;
    private IShellLocks myLocks;
    private ChangeManager myChangeManager;
    private NamespaceFolderProperty myNamespaceFolderProperty;
    private SettingsIndexedEntry myIndexedEntry;
    private Dictionary`2<IProject, NamespaceFolderProviderForProject> myDataPerProject;
    public NamespaceFolderProvider(Lifetime lifetime, ProjectSettingsStorageComponent projects, ISolution solution, ProjectModelElementPointerManager elementPointerManager, ISettingsStore settingsStore, IShellLocks locks, ChangeManager changeManager, NamespaceFolderProperty namespaceFolderProperty, ILogger logger);
    private void SyncFromSettings(NamespaceFolderProviderForProject data, IProject project, AsyncItemsProcessor`1<Action> writeActions);
    private void SyncFromSettings(IEnumerable`1<IProjectFolder> folders, IContextBoundSettingsStoreLive contextForRead, IProject project, AsyncItemsProcessor`1<Action> writeActions);
    private Nullable`1<bool> GetStoredNamespaceFolderValue(IProjectFolder projectFolder, IContextBoundSettingsStoreLive contextForRead, IProject project, IDictionary`2<object, object> existingValues);
    private Nullable`1<bool> GetIndexedValue(IContextBoundSettingsStoreLive contextForRead, VirtualFileSystemPath index, IDictionary`2<object, object> existingValues);
    private static VirtualFileSystemPath GetOldIndex(IProjectFolder projectFolder, IProject project);
    private static VirtualFileSystemPath GetIndex(IProjectFolder projectFolder, IProject project);
    public static VirtualFileSystemPath GetIndexFromOldIndex(VirtualFileSystemPath oldIndex);
    private void OnProjectItemChanged(ProjectItemChange projectItemChange, JetHashSet`1<Pair`2<IProjectFolder, IProject>> foldersToResync, IDictionary`2<IProjectFolder, bool> foldersToStore);
    private void StoreNamespaceFolderValue(IProjectFolder projectFolder, bool newValue, IProject project, NamespaceFolderProviderForProject data);
    private void StoreNamespaceFolderValueIfNecessary(IProjectFolder projectFolder, bool newValue);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Resources.Settings.CodeInspectionSettings", "JetBrains.ReSharper.Daemon.Resources.Strings3", "NamespaceProviderSettingsSettingDescription")]
public class JetBrains.ReSharper.Daemon.NamespaceProviderSettings : object {
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Daemon.Resources.Strings3", "WhetherTheFolderActsAsANamespaceProviderFolderPathRelativeToTheProjectRootSettingDescription")]
public IIndexedEntry`2<VirtualFileSystemPath, bool> NamespaceFoldersToSkip;
}
public static class JetBrains.ReSharper.Daemon.NamespaceProviderSettingsAccessor : object {
    public static Expression`1<Func`2<NamespaceProviderSettings, IIndexedEntry`2<VirtualFileSystemPath, bool>>> NamespaceFoldersToSkip;
    private static NamespaceProviderSettingsAccessor();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Daemon.NuGet.NuGetSolutionAnalysisSuppressor : object {
    private Lifetime myLifetime;
    private ILogger myLogger;
    private SolutionAnalysisConfiguration mySolutionAnalysisConfiguration;
    private NuGetContentFileStorage myContentFileStorage;
    public NuGetSolutionAnalysisSuppressor(Lifetime lifetime, ILogger logger, SolutionAnalysisConfiguration solutionAnalysisConfiguration, NuGetContentFileStorage contentFileStorage);
    private void SuppressSwaWhenContentFileStorageIsBusy();
    [CompilerGeneratedAttribute]
private void <SuppressSwaWhenContentFileStorageIsBusy>b__5_0(Lifetime lt);
    [CompilerGeneratedAttribute]
private void <SuppressSwaWhenContentFileStorageIsBusy>b__5_1();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Daemon.NuGet.ZoneMarker : object {
}
public class JetBrains.ReSharper.Daemon.NullInterruptable : object {
    public static NullInterruptable Instance;
    public bool InterruptFlag { get; }
    private static NullInterruptable();
    public sealed virtual bool get_InterruptFlag();
}
public class JetBrains.ReSharper.Daemon.OptionPages.Inspections.AnnotationsChecker : object {
    public static string JbAnnotationsFqn;
    [NotNullAttribute]
public virtual IEnumerable`1<string> GetNamespaces();
    public virtual AnnotationsState GetAnnotationsState(string namespaceFqn);
}
public enum JetBrains.ReSharper.Daemon.OptionPages.Inspections.AnnotationsState : Enum {
    public int value__;
    public static AnnotationsState UNKNOWN;
    public static AnnotationsState HAS_ANNOTATIONS;
    public static AnnotationsState NO_ANNOTATIONS;
}
[OptionsPageAttribute("CodeAnnotations", "Code Annotations", "JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons/ValueAnalysis")]
public class JetBrains.ReSharper.Daemon.OptionPages.Inspections.CodeAnnotationsPage : CustomSimpleOptionsPage {
    public static string PID;
    public CodeAnnotationsPage(Lifetime lifetime, OptionsSettingsSmartContext settings, IShellLocks shellLocks, Clipboard clipboard, IPsiFiles psiFiles, IPsiCaches psiCaches, ISymbolCache symbolCache);
    [NotNullAttribute]
private Dictionary`2<string, AnnotationNamespaceViewModel> GetAnnotationNamespaceViewModels(IShellLocks shellLocks, IPsiFiles psiFiles, IPsiCaches psiCaches, ISymbolCache symbolCache);
    [NotNullAttribute]
private IProperty`1<string> GetDefaultAnnotationNamespaceProperty(ICollection`1<string> annotationNamespaces);
    [NotNullAttribute]
private IProperty`1<bool> GetPropagateAnnotationsProperty();
    [NotNullAttribute]
private AnnotationNamespaceViewModel GetAnnotationNamespaceViewModel(string namespaceName, bool isChecked);
    [CompilerGeneratedAttribute]
private void <GetDefaultAnnotationNamespaceProperty>b__3_0(PropertyChangedEventArgs`1<string> args);
    [CompilerGeneratedAttribute]
private void <GetPropagateAnnotationsProperty>b__4_0(PropertyChangedEventArgs`1<bool> args);
}
[OptionsPageAttribute("CodeInspectionGeneratedSettings", "Generated Code", "JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons/GeneratedCode")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.OptionPages.Inspections.CodeInspectionGeneratedPage : CustomSimpleOptionsPage {
    public static string PID;
    private IContextBoundSettingsStore mySettingsStoreForGeneratedFiles;
    public CodeInspectionGeneratedPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, IPromptWinForm promptWinForms, IShellLocks shellLocks, ProjectModelElementPresentationService projectModelElementPresentationService, ISolution solution);
    private void ApplyDiff(Expression`1<Func`2<GeneratedCodeSettingsKey, IIndexedEntry`2<string, string>>> keyExpression, IEnumerable`1<string> newValues);
}
[OptionsPageAttribute("CodeInspectionSettings", "Settings", "JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons/CodeInspections")]
public class JetBrains.ReSharper.Daemon.OptionPages.Inspections.CodeInspectionSettingsPage : BeSimpleOptionsPage {
    public static string PID;
    private Lifetime myLifetime;
    private IShellLocks myShellLocks;
    private IUIApplication myEnvironment;
    private SolutionAnalysisService mySolutionAnalysisService;
    private bool myPrevAnalysisEnabledPropertyValue;
    private bool myPrevAnalysisEnabledInWholeSolutionPropertyValue;
    private bool updatingProperties;
    public CodeInspectionSettingsPage(Lifetime lifetime, IShellLocks locks, OptionsSettingsSmartContext optionsSettingsSmartContext, IUIApplication environment, OptionsPageContext optionsPageContext, CodeInspectionSettingsPageTexts codeInspectionSettingsPageTexts, ICalculatedSettingsSchema calculatedSettingsSchema, ProductConfigurations productConfigurations, SolutionAnalysisService solutionAnalysisService);
    private void ProcessAnalysisEnabledPropertiesChanged(IProperty`1<bool> analysisEnabledProperty, IProperty`1<bool> analysisEnabledInWholeSolutionProperty);
    private void SaveParams(IProperty`1<bool> analysisEnabledProperty, IProperty`1<bool> analysisEnabledInWholeSolutionProperty);
    private static bool IsReSharperCppActive(ProductConfigurations configurations);
}
[OptionsPageAttribute("InspectionSeverity", "Inspection Severity", "JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons/Highlighting")]
public class JetBrains.ReSharper.Daemon.OptionPages.Inspections.CodeInspectionSeverityPage : ObservableObject {
    private string myLocalSearchText;
    public static string PID;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<SeverityRootGroupViewModel> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private IChildrenProvider <ChildrenProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<OptionsFilterResult> <SearchFilter>k__BackingField;
    public string LocalSearchText { get; public set; }
    [NotNullAttribute]
public IReadOnlyList`1<SeverityRootGroupViewModel> Items { get; }
    [NotNullAttribute]
public IChildrenProvider ChildrenProvider { get; }
    private string JetBrains.Application.UI.Options.IOptionsPage.Id { get; }
    public IProperty`1<OptionsFilterResult> SearchFilter { get; }
    public CodeInspectionSeverityPage(Lifetime lifetime, HighlightingSettingsManager highlightingManager, CustomHighlightingsGroupManager customHighlightingsGroupManager, OptionsSettingsSmartContext optionsSettingsContext, ICalculatedSettingsSchema calculatedSettingsSchema, IEnumerable`1<ICodeInspectionWikiDataProvider> inspectionWikiData, IEnumerable`1<ICodeInspectionSettingsProvider> settingsProviders);
    public string get_LocalSearchText();
    public void set_LocalSearchText(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<SeverityRootGroupViewModel> get_Items();
    [CompilerGeneratedAttribute]
public IChildrenProvider get_ChildrenProvider();
    private sealed virtual override string JetBrains.Application.UI.Options.IOptionsPage.get_Id();
    private sealed virtual override bool JetBrains.Application.UI.Options.IOptionsPage.OnOk();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<OptionsFilterResult> get_SearchFilter();
    public sealed virtual OptionsPageKeywords GetKeywords();
    private sealed virtual override void JetBrains.Application.UI.Options.ISearchablePage.HighLightKeyword(OptionsFilterResult text);
    private sealed virtual override IEnumerable`1<string> JetBrains.Application.UI.Options.ISearchablePage.GetTagKeywordsForPage();
    private sealed virtual override IFilterDescriptor JetBrains.Application.UI.Options.ITreeGridViewFilterPage.GetFilter();
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.OptionPages.Inspections.CustomHighlightingsGroupManager : object {
    private Dictionary`2<string, string> myGroupIdToName;
    public CustomHighlightingsGroupManager(IEnumerable`1<ICustomHighlightingsGroupContributor> contributors);
    public bool TryGetCustomGroupName(string groupId, String& groupName);
}
[OptionsPageAttribute("EntityFrameworkAnalysisSettings", "Entity Framework", "JetBrains.UI.ThemedIcons.EntityFrameworkThemedIcons/EntityFramework")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.OptionPages.Inspections.EntityFrameworkSettingsPage : BeSimpleOptionsPage {
    public static string PID;
    public EntityFrameworkSettingsPage(Lifetime lifetime, OptionsPageContext optionsPageContext, OptionsSettingsSmartContext optionsSettingsSmartContext, IIconHost iconHost, HelpSystem helpSystem, ISolution solution, bool wrapInScrollablePanel);
    private ValueTuple`2<BeGrid, BeToolbar> GetTableAndToolbarOption(Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryClass, TEntryValue>>> lambdaExpression, OptionsTableConfiguration`3<TKeyClass, TEntryClass, TEntryValue> configuration, OptionsSettingsSmartContext smartContext, IIconHost iconHost, string description);
}
public interface JetBrains.ReSharper.Daemon.OptionPages.Inspections.ICustomHighlightingsGroupContributor {
    public string CustomGroupName { get; }
    public String[] GroupIds { get; }
    public abstract virtual string get_CustomGroupName();
    public abstract virtual String[] get_GroupIds();
}
public class JetBrains.ReSharper.Daemon.OptionPages.Inspections.SolutionAnnotationsChecker : AnnotationsChecker {
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private IPsiFiles myPsiFiles;
    [NotNullAttribute]
private IPsiCaches myPsiCaches;
    [NotNullAttribute]
private ISymbolCache mySymbolCache;
    [CanBeNullAttribute]
private ICollection`1<string> myNamespaces;
    public SolutionAnnotationsChecker(IShellLocks locks, IPsiFiles psiFiles, IPsiCaches psiCaches, ISymbolCache symbolCache);
    [NotNullAttribute]
private ICollection`1<string> ExploreAnnotationNamespaces();
    public virtual IEnumerable`1<string> GetNamespaces();
    public virtual AnnotationsState GetAnnotationsState(string namespaceFqn);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Daemon.OptionPages.Inspections.SolutionAnnotationsChecker/<CandidateNamespaces>d__9")]
[NotNullAttribute]
private static IEnumerable`1<INamespace> CandidateNamespaces(ISymbolScope symbolScope, string shortName);
}
public class JetBrains.ReSharper.Daemon.OptionPages.Inspections.ViewModel.AnnotationNamespaceViewModel : ObservableObject {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <IconId>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Name>k__BackingField;
    public IProperty`1<bool> IsEnabled { get; }
    public IconId IconId { get; }
    public RichText Name { get; }
    public AnnotationNamespaceViewModel(IProperty`1<bool> isEnabled, IconId iconId, string name);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsEnabled();
    [CompilerGeneratedAttribute]
public IconId get_IconId();
    [CompilerGeneratedAttribute]
public RichText get_Name();
}
public class JetBrains.ReSharper.Daemon.OptionPages.Inspections.ViewModel.CodeAnnotationsPageViewModel : ObservableObject {
    private Clipboard myClipboard;
    [CompilerGeneratedAttribute]
private IList`1<AnnotationNamespaceViewModel> <AnnotationNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <PropagateAnnotationsProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <DefaultAnnotationNamespaceProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <AnnotationNamespaceNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MakeAnnotationsInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MakeAnnotationsConditional>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <CopyCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <ShowPackageCommand>k__BackingField;
    [NotNullAttribute]
public RichText GeneralAnnotationsText { get; }
    [NotNullAttribute]
public string AnnotationPackageText { get; }
    [NotNullAttribute]
public string AnnotationSourceText { get; }
    [NotNullAttribute]
public RichText CustomNamespaceText { get; }
    [NotNullAttribute]
public string CopyAnnotationsText { get; }
    [NotNullAttribute]
public string PropagateAnnotationsText { get; }
    [NotNullAttribute]
public string DefaultAnnotationNamespaceText { get; }
    [NotNullAttribute]
public IList`1<AnnotationNamespaceViewModel> AnnotationNamespaces { get; }
    [NotNullAttribute]
public IProperty`1<bool> PropagateAnnotationsProperty { get; public set; }
    [NotNullAttribute]
public IProperty`1<string> DefaultAnnotationNamespaceProperty { get; }
    [NotNullAttribute]
public IList`1<string> AnnotationNamespaceNames { get; }
    public bool MakeAnnotationsInternal { get; public set; }
    public bool MakeAnnotationsConditional { get; public set; }
    [NotNullAttribute]
public ICommand CopyCommand { get; }
    [NotNullAttribute]
public ICommand ShowPackageCommand { get; }
    public CodeAnnotationsPageViewModel(Dictionary`2<string, AnnotationNamespaceViewModel> namespaces, IProperty`1<bool> propagateAnnotationsProperty, IProperty`1<string> defaultAnnotationNamespaceProperty, Clipboard clipboard);
    public RichText get_GeneralAnnotationsText();
    public string get_AnnotationPackageText();
    public string get_AnnotationSourceText();
    public RichText get_CustomNamespaceText();
    public string get_CopyAnnotationsText();
    public string get_PropagateAnnotationsText();
    public string get_DefaultAnnotationNamespaceText();
    [CompilerGeneratedAttribute]
public IList`1<AnnotationNamespaceViewModel> get_AnnotationNamespaces();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_PropagateAnnotationsProperty();
    [CompilerGeneratedAttribute]
public void set_PropagateAnnotationsProperty(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_DefaultAnnotationNamespaceProperty();
    [CompilerGeneratedAttribute]
public IList`1<string> get_AnnotationNamespaceNames();
    [CompilerGeneratedAttribute]
public bool get_MakeAnnotationsInternal();
    [CompilerGeneratedAttribute]
public void set_MakeAnnotationsInternal(bool value);
    [CompilerGeneratedAttribute]
public bool get_MakeAnnotationsConditional();
    [CompilerGeneratedAttribute]
public void set_MakeAnnotationsConditional(bool value);
    [CompilerGeneratedAttribute]
public ICommand get_CopyCommand();
    [CompilerGeneratedAttribute]
public ICommand get_ShowPackageCommand();
    private static void ShowPackageExecute();
    private void CopyAnnotationsExecute();
}
public class JetBrains.ReSharper.Daemon.OptionPages.Inspections.ViewModel.CodeInspectionGeneratedViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private StringCollectionEditViewModel <GeneratedFilesItemsViewModel>k__BackingField;
    [CompilerGeneratedAttribute]
private PairStringCollectionEditViewModel <PairStringCollectionEditViewModel>k__BackingField;
    public StringCollectionEditViewModel GeneratedFilesItemsViewModel { get; }
    public PairStringCollectionEditViewModel PairStringCollectionEditViewModel { get; }
    public CodeInspectionGeneratedViewModel(StringCollectionEditViewModel generatedFilesItemsViewModel, PairStringCollectionEditViewModel pairStringCollectionEditViewModel);
    [CompilerGeneratedAttribute]
public StringCollectionEditViewModel get_GeneratedFilesItemsViewModel();
    [CompilerGeneratedAttribute]
public PairStringCollectionEditViewModel get_PairStringCollectionEditViewModel();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Daemon.OptionPages.Inspections.ViewModel.CodeInspectionSettingsPageTexts : object {
    public virtual string ReadSettingsFromFileLevelText();
}
public class JetBrains.ReSharper.Daemon.OptionPages.Inspections.ViewModel.CodeInspectionSeverity.HighlightingBoolSettingViewModel : HighlightingSettingViewModelBase {
    private bool myDefaultValue;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <CanResetSeverity>k__BackingField;
    public IProperty`1<bool> Value { get; }
    public IProperty`1<bool> CanResetSeverity { get; }
    public HighlightingBoolSettingViewModel(Lifetime lifetime, ConfigurableSeverityItem severityItem, IContextBoundSettingsStoreLive settingsStore, ICalculatedSettingsSchema calculatedSettingsSchema, SettingsScalarEntry entry, string description);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_Value();
    [CompilerGeneratedAttribute]
public virtual IProperty`1<bool> get_CanResetSeverity();
    public virtual void ExecuteReset();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__4_0(bool x);
}
public abstract class JetBrains.ReSharper.Daemon.OptionPages.Inspections.ViewModel.CodeInspectionSeverity.HighlightingSettingViewModelBase : SeverityElementViewModelBase {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [NotNullAttribute]
public IProperty`1<bool> IsEnabled { get; }
    [NotNullAttribute]
public string Description { get; }
    public string Title { get; }
    [NotNullAttribute]
public IProperty`1<bool> CanResetSeverity { get; }
    [NotNullAttribute]
public ICommand ResetSeverity { get; }
    protected HighlightingSettingViewModelBase(Lifetime lifetime, ConfigurableSeverityItem severityItem, SettingsScalarEntry entry, string description);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsEnabled();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public virtual string get_Title();
    public abstract virtual IProperty`1<bool> get_CanResetSeverity();
    public ICommand get_ResetSeverity();
    public abstract virtual void ExecuteReset();
}
public class JetBrains.ReSharper.Daemon.OptionPages.Inspections.ViewModel.CodeInspectionSeverity.HighlightingSeveritySettingViewModel : HighlightingSettingViewModelBase {
    private Severity myDefaultValue;
    [CompilerGeneratedAttribute]
private IProperty`1<Severity> <SeverityValue>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SeverityOption> <SeverityOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <CanResetSeverity>k__BackingField;
    public IProperty`1<Severity> SeverityValue { get; }
    [NotNullAttribute]
public IList`1<SeverityOption> SeverityOptions { get; }
    public IProperty`1<bool> CanResetSeverity { get; }
    public HighlightingSeveritySettingViewModel(Lifetime lifetime, ConfigurableSeverityItem severityItem, IContextBoundSettingsStore settingsStore, SettingsScalarEntry entry, IList`1<SeverityOption> severityOptions, string description);
    [CompilerGeneratedAttribute]
public IProperty`1<Severity> get_SeverityValue();
    [CompilerGeneratedAttribute]
public IList`1<SeverityOption> get_SeverityOptions();
    [CompilerGeneratedAttribute]
public virtual IProperty`1<bool> get_CanResetSeverity();
    public virtual void ExecuteReset();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__7_0(Severity x);
}
public class JetBrains.ReSharper.Daemon.OptionPages.Inspections.ViewModel.CodeInspectionSeverity.SeverityCompoundViewModel : SeverityElementViewModelBase {
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private string myTitle;
    [NotNullAttribute]
private List`1<SeverityViewModel> myItems;
    [NotNullAttribute]
private HashSet`1<SeverityOption> mySeverityOptions;
    private bool myChildUpdateInProcess;
    [CompilerGeneratedAttribute]
private IProperty`1<Nullable`1<bool>> <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsSeverityChooserVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Severity> <SeverityValue>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <CanResetSeverity>k__BackingField;
    public string Title { get; }
    [NotNullAttribute]
public IProperty`1<Nullable`1<bool>> IsEnabled { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsSeverityChooserVisible { get; }
    [NotNullAttribute]
public IProperty`1<Severity> SeverityValue { get; }
    [NotNullAttribute]
public ICollection`1<SeverityOption> SeverityOptions { get; }
    [NotNullAttribute]
public ICommand ResetSeverity { get; }
    [NotNullAttribute]
public IProperty`1<bool> CanResetSeverity { get; }
    [NotNullAttribute]
public string Description { get; }
    public IEnumerable`1<SeverityElementViewModelBase> InnerElements { get; }
    public SeverityCompoundViewModel(Lifetime lifetime, string title);
    public virtual string get_Title();
    [CompilerGeneratedAttribute]
public IProperty`1<Nullable`1<bool>> get_IsEnabled();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsSeverityChooserVisible();
    [CompilerGeneratedAttribute]
public IProperty`1<Severity> get_SeverityValue();
    public ICollection`1<SeverityOption> get_SeverityOptions();
    public ICommand get_ResetSeverity();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_CanResetSeverity();
    public void ExecuteSeverityReset();
    public string get_Description();
    public void AddSeverity(SeverityViewModel severity);
    private Severity CalculateValue();
    private void UpdateChildren(PropertyChangedEventArgs`1<Severity> args);
    public virtual IEnumerable`1<SeverityElementViewModelBase> get_InnerElements();
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_1(PropertyChangedEventArgs`1<Nullable`1<bool>> args);
    [CompilerGeneratedAttribute]
private void <AddSeverity>b__27_0(PropertyChangedEventArgs`1<bool> _);
    [CompilerGeneratedAttribute]
private void <AddSeverity>b__27_1(PropertyChangedEventArgs`1<Severity> _);
    [CompilerGeneratedAttribute]
private void <AddSeverity>b__27_2(PropertyChangedEventArgs`1<bool> args);
}
public class JetBrains.ReSharper.Daemon.OptionPages.Inspections.ViewModel.CodeInspectionSeverity.SeverityCustomRootGroupViewModel : SeverityRootGroupViewModel {
    public SeverityCustomRootGroupViewModel(string name);
}
public abstract class JetBrains.ReSharper.Daemon.OptionPages.Inspections.ViewModel.CodeInspectionSeverity.SeverityElementViewModelBase : AAutomation {
    [NotNullAttribute]
public string Title { get; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<SeverityElementViewModelBase> InnerElements { get; }
    public abstract virtual string get_Title();
    public virtual IEnumerable`1<SeverityElementViewModelBase> get_InnerElements();
    [NotNullAttribute]
public static IChildrenProvider GetChildrenProvider(IEnumerable`1<SeverityElementViewModelBase> roots);
}
public class JetBrains.ReSharper.Daemon.OptionPages.Inspections.ViewModel.CodeInspectionSeverity.SeverityGroupViewModel : SeverityElementViewModelBase {
    [NotNullAttribute]
private string myTitle;
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private List`1<SeverityViewModel> myItems;
    [NotNullAttribute]
private Dictionary`2<string, SeverityCompoundViewModel> myCompoundItems;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <CanResetSeverity>k__BackingField;
    public string Title { get; }
    public int InspectionsCount { get; }
    [NotNullAttribute]
public ICommand ResetSeverity { get; }
    [NotNullAttribute]
public IProperty`1<bool> CanResetSeverity { get; }
    [NotNullAttribute]
public string InspectionsHint { get; }
    public IEnumerable`1<SeverityElementViewModelBase> InnerElements { get; }
    public SeverityGroupViewModel(string title, Lifetime lifetime);
    public virtual string get_Title();
    public int get_InspectionsCount();
    public ICommand get_ResetSeverity();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_CanResetSeverity();
    public void ExecuteSeverityReset();
    public string get_InspectionsHint();
    public void AddSeverity(SeverityViewModel severity);
    private void UpdateCanResetSeverity(PropertyChangedEventArgs`1<bool> args);
    public void AddCompoundSeverity(Lifetime lifetime, string compoundName, SeverityViewModel severity);
    public virtual IEnumerable`1<SeverityElementViewModelBase> get_InnerElements();
}
public class JetBrains.ReSharper.Daemon.OptionPages.Inspections.ViewModel.CodeInspectionSeverity.SeverityItemToDescriptionConverter : object {
    [CanBeNullAttribute]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class JetBrains.ReSharper.Daemon.OptionPages.Inspections.ViewModel.CodeInspectionSeverity.SeverityLanguageGroupViewModel : SeverityRootGroupViewModel {
    public SeverityLanguageGroupViewModel(PsiLanguageType language);
    public SeverityLanguageGroupViewModel(string language);
    [NotNullAttribute]
[PureAttribute]
public static string PsiLanguagePresentation(PsiLanguageType type);
}
public abstract class JetBrains.ReSharper.Daemon.OptionPages.Inspections.ViewModel.CodeInspectionSeverity.SeverityRootGroupViewModel : SeverityElementViewModelBase {
    [NotNullAttribute]
private Dictionary`2<string, SeverityGroupViewModel> myGroups;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public string Title { get; }
    [NotNullAttribute]
public string InspectionsHint { get; }
    public IEnumerable`1<SeverityElementViewModelBase> InnerElements { get; }
    protected SeverityRootGroupViewModel(string name);
    [CompilerGeneratedAttribute]
public virtual string get_Title();
    public string get_InspectionsHint();
    public virtual IEnumerable`1<SeverityElementViewModelBase> get_InnerElements();
    [NotNullAttribute]
[PureAttribute]
public SeverityGroupViewModel GetOrCreateSeverityGroup(string groupId, HighlightingSettingsManager highlightingManager, Lifetime lifetime);
}
public class JetBrains.ReSharper.Daemon.OptionPages.Inspections.ViewModel.CodeInspectionSeverity.SeverityViewModel : SeverityElementViewModelBase {
    [NotNullAttribute]
private ConfigurableSeverityItem mySeverityItem;
    private IEnumerable`1<ICodeInspectionWikiDataProvider> myInspectionWikiData;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <CanResetSeverity>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Severity> <SeverityValue>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HighlightingSettingViewModelBase> <HighlightingSettings>k__BackingField;
    private static SeverityOption[] OptionsNoError;
    private static SeverityOption[] OptionsWithError;
    public string Title { get; }
    [NotNullAttribute]
public string Description { get; }
    public IProperty`1<bool> IsEnabled { get; }
    private Severity DefaultSeverityToEnable { get; }
    [NotNullAttribute]
public ICommand ResetSeverity { get; }
    [NotNullAttribute]
public IProperty`1<bool> CanResetSeverity { get; }
    public IEnumerable`1<SeverityElementViewModelBase> InnerElements { get; }
    [NotNullAttribute]
public IProperty`1<Severity> SeverityValue { get; }
    [NotNullAttribute]
public IList`1<SeverityOption> SeverityOptions { get; }
    [NotNullAttribute]
public IList`1<HighlightingSettingViewModelBase> HighlightingSettings { get; }
    public SeverityViewModel(Lifetime lifetime, ConfigurableSeverityItem severityItem, IContextBoundSettingsStoreLive settingsStore, ICalculatedSettingsSchema calculatedSettingsSchema, IEnumerable`1<ICodeInspectionWikiDataProvider> inspectionWikiData, IEnumerable`1<ICodeInspectionSettingsProvider> settingsProviders);
    private static SeverityViewModel();
    public virtual string get_Title();
    public string get_Description();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsEnabled();
    private Severity get_DefaultSeverityToEnable();
    public ICommand get_ResetSeverity();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_CanResetSeverity();
    private void UpdateCanResetSeverity();
    public void ExecuteSeverityReset();
    public virtual IEnumerable`1<SeverityElementViewModelBase> get_InnerElements();
    [CompilerGeneratedAttribute]
public IProperty`1<Severity> get_SeverityValue();
    public IList`1<SeverityOption> get_SeverityOptions();
    [CompilerGeneratedAttribute]
public IList`1<HighlightingSettingViewModelBase> get_HighlightingSettings();
    [CompilerGeneratedAttribute]
private Severity <.ctor>b__2_1(bool isEnabled);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Daemon.OptionPages.ZoneMarker : object {
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.Daemon.Options.Upgrade.EditorSettingsUpgrader : SettingTablesUpgrader {
    private static string USE_CAMEL_HUMPS_TAG;
    private static string BRACKET_MATCH_HIGHLIGHT_STYLE;
    private static string BRACKET_MATCH_HIGHLIGHT_POSITION;
    public EditorSettingsUpgrader(ProductConfigurations productConfigurations);
    protected virtual void DoUpgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime, SettingsTableBase workspaceSettingsTable, SettingsTableBase globalSettingsTable);
}
[ObsoleteAttribute]
public class JetBrains.ReSharper.Daemon.Options.Upgrade.VBUseReSharperAnalysis : object {
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Property`1<bool> Property;
    public VBUseReSharperAnalysis(Lifetime lifetime, IComponentSettingsProvider shellSettingsComponent);
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/GutterMarks")]
public class JetBrains.ReSharper.Daemon.RecursionMarkOnGutter : object {
    private ITreeNode myElement;
    private DocumentRange myRange;
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public RecursionMarkOnGutter(ITreeNode element, DocumentRange range);
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Daemon.Resources.Strings3 : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string CodeAnalysisActionGroupText { get; }
    public static string CodeAnnotationsOptionPageTitle { get; }
    public static string CodeFoldingHighlightings_Text { get; }
    public static string DisposeAnalysisMode_OptionOptimisticCaption { get; }
    public static string DisposeAnalysisMode_OptionPessimisticCaption { get; }
    public static string DisposeAnalysisMode_OptionsCaption { get; }
    public static string EntityFrameworkQueryAnalysisDisabledOption { get; }
    public static string EntityFrameworkQueryAnalysisModeOption { get; }
    public static string EntityFrameworkQueryOptimisticModeOption { get; }
    public static string EntityFrameworkQueryPessimisticModeOption { get; }
    public static string GeneratedCodeOptionPageTitle { get; }
    public static string GotoBraceActionText { get; }
    public static string GotoBraceExtendActionText { get; }
    public static string IgnoredCodeOptionPageTitle { get; }
    public static string InspectionSeverityOptionPageTitle { get; }
    public static string MarkFileAsModifiedToShowHiddenHighlightingsActionText { get; }
    public static string MarkFileAsUnchangedToHideExcessiveHighlightingsActionText { get; }
    public static string NamespaceProviderSettingsSettingDescription { get; }
    public static string ReSharperMethodSeparatorHighlighting_Text { get; }
    public static string ResourcesUtilization_Text { get; }
    public static string SettingsOptionPageTitle { get; }
    public static string SyntaxHighlightings_Text { get; }
    public static string ToggleEnhancedSyntaxColoringActionText { get; }
    public static string ToggleInlayHintsActionText { get; }
    public static string ToggleParameterNameHintsActionText { get; }
    public static string ToggleShowCImportPopupActionText { get; }
    public static string ToggleShowImportPopupActionText { get; }
    public static string WhetherTheFolderActsAsANamespaceProviderFolderPathRelativeToTheProjectRootSettingDescription { get; }
    public static string WhyNoDaemonActionText { get; }
    public static string GeneratedDirectoriesAndFilesSetting_Text { get; }
    public static string OptimisticWhenExplicitlyMarkedWithCanBeNull_Text { get; }
    public static string PessimisticWhenEntityDoesnTHaveExplicit_Text { get; }
    public static string TrustAPIContractsWhenAValueIsAnnotated_Text { get; }
    public static string TrustOnlyRuntimeChecksOnlyWhenAValue_Text { get; }
    public static string ShowAllIssues_Text { get; }
    public static string ShowSuggestionsWarningsAndErrors_Text { get; }
    public static string ShowWarningsAndErrors_Text { get; }
    public static string OnlyShowErrors_Text { get; }
    public static string ProjectsToIgnore_Header_Text { get; }
    public static string SpecifyProjectFileNamesToExcludeProjects_Text_Text { get; }
    public static string ToEditTheListOfIgnoredProjectsYouShould_Text_Text { get; }
    public static string ElementsToSkip_Header_Text { get; }
    public static string HereYouCanSpecifyFilesFileMasksAndFolders_Text_Text { get; }
    public static string NoteThatIfSomeSymbolsAreOnlyUsedInThe_Text_Text { get; }
    public static string FilesAndFoldersAreSpecifiedRelative_Text_Text { get; }
    public static string ToEditTheListOfSkippedFilesAndFolders_Text_Text { get; }
    public static string _EnableCodeAnalysis_BoolOption_Text { get; }
    public static string Analysis_Header_Text { get; }
    public static string ReadSettingsFromEditorconfigAndProject_Text { get; }
    public static string EnableSolutionWide_analysis_BoolOption_Text { get; }
    public static string EnableComputationallyExpensiveInspections_Text { get; }
    public static string EnablesInspectionsThatPerformComplex_Text { get; }
    public static string MonitorWarnings_Text { get; }
    public static string IncludesWarningsToSolutionWideAnalysis_BoolOption_ToolTip { get; }
    public static string IncludeSourceGeneratedFiles_Text { get; }
    public static string IncludesFilesProducedBySourceGenerators_Text { get; }
    public static string Show_unusedNonPrivateTypeMembersWhen_BoolOption_Text { get; }
    public static string ShowUnused_globalUsingDirectivesWhen_BoolOption_Text { get; }
    public static string ValueAnalysisModeWhenToAssumeEntity_RadioOption_Caption { get; }
    public static string NullableReferenceTypesWarningsModeWhen_RadioOption_Caption { get; }
    public static string AnalyzeIntegerArithmetic_BoolOption_Text { get; }
    public static string EnableTheAnalysisOfIntegerValuesCurrently_Text { get; }
    public static string HighlightLevelForFilesWithoutRecent_RadioOption_Caption { get; }
    public static string RecentChangesPeriodDays_Text { get; }
    public static string Highlighting_Header_Text { get; }
    public static string Caret_Dependent_Highlightings_Header_Text { get; }
    public static string _ColorIdentifiers_BoolOption_Text { get; }
    public static string YouCanEditIdentifierColorsInSettings_Text { get; }
    public static string YouCanEditIdentifierColorsOnTheVisual_Text { get; }
    public static string ThisOptionDoesNotAffectCToToggleSyntax_Text { get; }
    public static string HighlightColorUsages_BoolOption_Text { get; }
    public static string HighlightUsagesOfTheElementUnderCursor_BoolOption_Text { get; }
    public static string HighlightSpecialCharactersInStringLiterals_BoolOption_Text { get; }
    public static string HighlightContextExits_BoolOption_Text { get; }
    public static string HighlightRelatedAsyncAwaitKeywords_BoolOption_Text { get; }
    public static string HighlightConditionElements_Text { get; }
    public static string HighlightCapturedPrimaryParameters_Text { get; }
    public static string HighlightGroupsOfLogicalOperatorSigns_Text { get; }
    public static string HighlightCapturedPrimaryParametersDescription_Text { get; }
    public static string QuickFixesAndContextActions_Header_Text { get; }
    public static string UseParallelCodeAnalysisWhenApplying_BoolOption_Text { get; }
    public static string UtilizesAvailableCPUsToPerformCodeAnalysis_BoolOption_ToolTip { get; }
    public static string UseSolutionWideAnalysisResultsWhenApplying_BoolOption_Text { get; }
    public static string MakeUseOfSolutionWideAnalysisResults_BoolOption_ToolTip { get; }
    public static string EnhancedSyntaxColoring_Text { get; }
    public static string ShowCImportPopups_Text { get; }
    public static string ShowTheImportNamespacePopup_Text { get; }
    public static string ShowInlayHints_Text { get; }
    public static string ShowVirtualIndents_Text { get; }
    public static string Why_IsNotAvailableInCurrentFile_Text { get; }
    public static string AnalysisIsSwitchedOffForTheFileFile_Text { get; }
    public static string AnalysisIsNotAvailableForTheFileNoFile_Text { get; }
    public static string AnalysisIsNotAvailableForTheFileNoDaemon_Text { get; }
    public static string AnalysisIsNotAvailableForTheFileNoLanguage_Text { get; }
    public static string CodeAnalysisIsDisabledForTheWholeSolution_Text { get; }
    public static string AnalysisIsDisabledNoProjectFileForThis_Text { get; }
    public static string CodeAnalysisIsDisabledForTheContaining_Text { get; }
    public static string FileWasExcludedFromCodeAnalysis_Text { get; }
    public static string FileWasIsolatedBecauseCodeAnalysisLed_Text { get; }
    public static string AnalysisIsNotSupported__Text { get; }
    public static string RunningLocalAnalysis_Text { get; }
    public static string RunningGlobalAnalysis_Text { get; }
    public static string RunningSlowAnalysis_Text { get; }
    public static string AnalysisIsCompleteFileIsConsideredGenerated_Text { get; }
    public static string AnalysisIsComplete_Text { get; }
    public static string FileWillBeReanalysed_Text { get; }
    public static string FileIsOutOfUserScopeItMightComeFrom_Text { get; }
    public static string ConfigureSyntaxStyle_Text { get; }
    public static string AnalysisIsSuspendedForTheFileWaiting_Text { get; }
    public static string FoldersThatDoNotMeanANamespace_Text { get; }
    public static string LineShouldOnlyBeIndentedWithSpaces_ToolTip { get; }
    public static string LineShouldOnlyBeIndentedWithTabs_ToolTip { get; }
    public static string IncorrectTabSpacesMixInTheLineIndent_ToolTip { get; }
    public static string UnexpectedLineIndentChange__ToolTip { get; }
    public static string TabsMustGoFirstInIndent_ToolTip { get; }
    public static string TabsAreProhibitedHere_ToolTip { get; }
    public static string MultipleSpacesAreProhibited_ToolTip { get; }
    public static string Indent { get; }
    public static string Outdent { get; }
    public static string Tab_Plural { get; }
    public static string Space_Plural { get; }
    public static string WrongIndentSizeWrapperForTabs { get; }
    public static string WrongIndentSizeWrapperForSpaces { get; }
    public static string WrongIndentSizeWrapperForTabsAndSpaces { get; }
    public static string IndentSizeIsIncorrect__Text { get; }
    public static string LineNotIndentedRelativeToThePrevious_Text { get; }
    public static string LineIndentNotRestoredToThePreviousLevel__Text { get; }
    public static string LineNotOutdentedRelativeToThePrevious_Text { get; }
    public static string OutdentSizeIsIncorrect__Text { get; }
    public static string ProcessingConfigFiles_Text { get; }
    public static string ProcessingRulesetFiles_Text { get; }
    public static string GeneratedFileMasks_Caption { get; }
    public static string GeneratedCodeRegions_Caption { get; }
    public static string GeneratedFilesAndDirectories_Caption { get; }
    public static string CloseOptions_Text { get; }
    public static string AnnotationsSourceCodeIsCopiedToTheClipboard_Text { get; }
    public static string RecursiveCall_Text { get; }
    public static string Path_NotResolved_Text { get; }
    public static string InvalidCharactersInPath_Text { get; }
    public static string Path_NotFound_Text { get; }
    public static string Path_NotFoundInTheProject__Text { get; }
    public static string Path_NotFoundInTheSolution_Text { get; }
    public static string ProjectFileExpectedAt__Text { get; }
    public static string ProjectFolderExpectedAt__Text { get; }
    public static string UnexpectedProjectFileTypeAt__Text { get; }
    public static string ExpectedBuildAction_At__Text { get; }
    public static string UnexpectedProjectFileBuildActionAt__Text { get; }
    public static string _At__Text { get; }
    public static string CodeAnnotationsOptionsPage_Text { get; }
    public static string ReSharperAnnotationsHelpReduceFalse_Text { get; }
    public static string ReSharperAlwaysSupportsAnnotationsFrom_Text { get; }
    public static string SyntaxStyle_Text { get; }
    public static string OfficialNuGetPackageRecommendedWayTo_Text { get; }
    public static string AnnotationsSourceCode_Text { get; }
    public static string CopyCImplementationToClipboard_Text { get; }
    public static string AutomaticallyPropagateAnnotationsIn_Text { get; }
    public static string DefaultAnnotationsNamespaceToUse_Text { get; }
    public static string CommonFormatHighlightingIdsBase_IndentProblemsCompoundItem_Incorrect_indent { get; }
    public static string CommonFormatHighlightingIdsBase_SpacesProblemsCompoundItem_Incorrect_spacing { get; }
    public static string CommonFormatHighlightingIdsBase_LineBreaksProblemsCompoundItem_Incorrect_line_breaks { get; }
    public static string CommonFormatHighlightingIdsBase_BlankLinesProblemsCompoundItem_Incorrect_blank_lines { get; }
    public static string CommonFormatHighlightingIdsBase_Line_break_is_missing { get; }
    public static string CommonFormatHighlightingIdsBase_Space_is_missing { get; }
    public static string CommonFormatHighlightingIdsBase_Line_break_is_redundant { get; }
    public static string CommonFormatHighlightingIdsBase_Space_is_redundant { get; }
    public static string Elsewhere { get; }
    public static string MissingBlankLinesDescription { get; }
    public static string RedundantBlankLinesDescription { get; }
    public static string IncorrectBlankLines_Minimum { get; }
    public static string IncorrectBlankLines_Maximum { get; }
    public static string IncorrectBlankLinesWrapper { get; }
    public static string AHref_LearnMoreA_Text { get; }
    public static string EnableIncrementalDaemonStagesOptimization_BoolOption_Text { get; }
    public static string EnableIncrementalDaemonStagesOptimization_Tooltip_Text { get; }
    public static string EnableEntityFrameworkAnalysisOption { get; }
    public static string EntityFrameworkOptionsReanalyze { get; }
    public static string EntityFrameworkFQNKeyColumn { get; }
    public static string EntityFrameworkSettingsPageName { get; }
    public static string EntityFrameworkDisabledDbContextsTableDescription { get; }
    public static string IlKeywordHighlighterName { get; }
    public static string IlCommentHighlighterName { get; }
    public static string IlInstructionHighlighterName { get; }
    public static string IlStringLiteralHighlighterName { get; }
    public static string IlConstantLiteralHighlighterName { get; }
    public static string IlViewerSynchronizationHighlighterName { get; }
    public static string IlCodeLabelHighlighterName { get; }
    public static string IlTargetLabelHighlighterName { get; }
    public static string IlQualifiedNameHighlighterName { get; }
    public static string IlMethodNameHighlighterName { get; }
    public static string IlParameterHighlighterName { get; }
    public static string IlIdentifierHighlighterName { get; }
    public static string IlTargetHighlighterName { get; }
    public static string IlHighlighterGroupName { get; }
    public static string Vulnerable_api_inspection_title { get; }
    public static string Vulnerable_api_inspection_description { get; }
    public static string EnableEntityFrameworkEntityAdornmentOption { get; }
    public static string EnableEntityFrameworkModelAnalysisOption { get; }
    public static string EnableEntityFrameworkModelAnalysisOption_Comment { get; }
    public static string AnalysisInProgress_Text { get; }
    public static string AnalysisSwitchedOff_Text { get; }
    public static string AnalysisWillBeginShortly_Text { get; }
    public static string ClickToNavigate_Text { get; }
    public static string DaemonIndicatorErrorsAndWarnings_Text { get; }
    public static string DaemonIsInInvalidState_Text { get; }
    public static string LowPriorityAnalysesStillRunning_Text { get; }
    public static string NavigateToNextError_Text { get; }
    public static string NavigateToNextMessage_Text { get; }
    public static string NavigateToNextUsage_Text { get; }
    public static string NavigateToNextWarning_Text { get; }
    public static string NoErrorsOrWarnings_Text { get; }
    public static string Plural_Errors { get; }
    public static string Plural_Warnings { get; }
    public static string SomeResultsWereHiddenToReduceComplexity_Text { get; }
    private static Strings3();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_CodeAnalysisActionGroupText();
    public static string get_CodeAnnotationsOptionPageTitle();
    public static string get_CodeFoldingHighlightings_Text();
    public static string get_DisposeAnalysisMode_OptionOptimisticCaption();
    public static string get_DisposeAnalysisMode_OptionPessimisticCaption();
    public static string get_DisposeAnalysisMode_OptionsCaption();
    public static string get_EntityFrameworkQueryAnalysisDisabledOption();
    public static string get_EntityFrameworkQueryAnalysisModeOption();
    public static string get_EntityFrameworkQueryOptimisticModeOption();
    public static string get_EntityFrameworkQueryPessimisticModeOption();
    public static string get_GeneratedCodeOptionPageTitle();
    public static string get_GotoBraceActionText();
    public static string get_GotoBraceExtendActionText();
    public static string get_IgnoredCodeOptionPageTitle();
    public static string get_InspectionSeverityOptionPageTitle();
    public static string get_MarkFileAsModifiedToShowHiddenHighlightingsActionText();
    public static string get_MarkFileAsUnchangedToHideExcessiveHighlightingsActionText();
    public static string get_NamespaceProviderSettingsSettingDescription();
    public static string get_ReSharperMethodSeparatorHighlighting_Text();
    public static string get_ResourcesUtilization_Text();
    public static string get_SettingsOptionPageTitle();
    public static string get_SyntaxHighlightings_Text();
    public static string get_ToggleEnhancedSyntaxColoringActionText();
    public static string get_ToggleInlayHintsActionText();
    public static string get_ToggleParameterNameHintsActionText();
    public static string get_ToggleShowCImportPopupActionText();
    public static string get_ToggleShowImportPopupActionText();
    public static string get_WhetherTheFolderActsAsANamespaceProviderFolderPathRelativeToTheProjectRootSettingDescription();
    public static string get_WhyNoDaemonActionText();
    public static string get_GeneratedDirectoriesAndFilesSetting_Text();
    public static string get_OptimisticWhenExplicitlyMarkedWithCanBeNull_Text();
    public static string get_PessimisticWhenEntityDoesnTHaveExplicit_Text();
    public static string get_TrustAPIContractsWhenAValueIsAnnotated_Text();
    public static string get_TrustOnlyRuntimeChecksOnlyWhenAValue_Text();
    public static string get_ShowAllIssues_Text();
    public static string get_ShowSuggestionsWarningsAndErrors_Text();
    public static string get_ShowWarningsAndErrors_Text();
    public static string get_OnlyShowErrors_Text();
    public static string get_ProjectsToIgnore_Header_Text();
    public static string get_SpecifyProjectFileNamesToExcludeProjects_Text_Text();
    public static string get_ToEditTheListOfIgnoredProjectsYouShould_Text_Text();
    public static string get_ElementsToSkip_Header_Text();
    public static string get_HereYouCanSpecifyFilesFileMasksAndFolders_Text_Text();
    public static string get_NoteThatIfSomeSymbolsAreOnlyUsedInThe_Text_Text();
    public static string get_FilesAndFoldersAreSpecifiedRelative_Text_Text();
    public static string get_ToEditTheListOfSkippedFilesAndFolders_Text_Text();
    public static string get__EnableCodeAnalysis_BoolOption_Text();
    public static string get_Analysis_Header_Text();
    public static string get_ReadSettingsFromEditorconfigAndProject_Text();
    public static string get_EnableSolutionWide_analysis_BoolOption_Text();
    public static string get_EnableComputationallyExpensiveInspections_Text();
    public static string get_EnablesInspectionsThatPerformComplex_Text();
    public static string get_MonitorWarnings_Text();
    public static string get_IncludesWarningsToSolutionWideAnalysis_BoolOption_ToolTip();
    public static string get_IncludeSourceGeneratedFiles_Text();
    public static string get_IncludesFilesProducedBySourceGenerators_Text();
    public static string get_Show_unusedNonPrivateTypeMembersWhen_BoolOption_Text();
    public static string get_ShowUnused_globalUsingDirectivesWhen_BoolOption_Text();
    public static string get_ValueAnalysisModeWhenToAssumeEntity_RadioOption_Caption();
    public static string get_NullableReferenceTypesWarningsModeWhen_RadioOption_Caption();
    public static string get_AnalyzeIntegerArithmetic_BoolOption_Text();
    public static string get_EnableTheAnalysisOfIntegerValuesCurrently_Text();
    public static string get_HighlightLevelForFilesWithoutRecent_RadioOption_Caption();
    public static string get_RecentChangesPeriodDays_Text();
    public static string get_Highlighting_Header_Text();
    public static string get_Caret_Dependent_Highlightings_Header_Text();
    public static string get__ColorIdentifiers_BoolOption_Text();
    public static string get_YouCanEditIdentifierColorsInSettings_Text();
    public static string get_YouCanEditIdentifierColorsOnTheVisual_Text();
    public static string get_ThisOptionDoesNotAffectCToToggleSyntax_Text();
    public static string get_HighlightColorUsages_BoolOption_Text();
    public static string get_HighlightUsagesOfTheElementUnderCursor_BoolOption_Text();
    public static string get_HighlightSpecialCharactersInStringLiterals_BoolOption_Text();
    public static string get_HighlightContextExits_BoolOption_Text();
    public static string get_HighlightRelatedAsyncAwaitKeywords_BoolOption_Text();
    public static string get_HighlightConditionElements_Text();
    public static string get_HighlightCapturedPrimaryParameters_Text();
    public static string get_HighlightGroupsOfLogicalOperatorSigns_Text();
    public static string get_HighlightCapturedPrimaryParametersDescription_Text();
    public static string get_QuickFixesAndContextActions_Header_Text();
    public static string get_UseParallelCodeAnalysisWhenApplying_BoolOption_Text();
    public static string get_UtilizesAvailableCPUsToPerformCodeAnalysis_BoolOption_ToolTip();
    public static string get_UseSolutionWideAnalysisResultsWhenApplying_BoolOption_Text();
    public static string get_MakeUseOfSolutionWideAnalysisResults_BoolOption_ToolTip();
    public static string get_EnhancedSyntaxColoring_Text();
    public static string get_ShowCImportPopups_Text();
    public static string get_ShowTheImportNamespacePopup_Text();
    public static string get_ShowInlayHints_Text();
    public static string get_ShowVirtualIndents_Text();
    public static string get_Why_IsNotAvailableInCurrentFile_Text();
    public static string get_AnalysisIsSwitchedOffForTheFileFile_Text();
    public static string get_AnalysisIsNotAvailableForTheFileNoFile_Text();
    public static string get_AnalysisIsNotAvailableForTheFileNoDaemon_Text();
    public static string get_AnalysisIsNotAvailableForTheFileNoLanguage_Text();
    public static string get_CodeAnalysisIsDisabledForTheWholeSolution_Text();
    public static string get_AnalysisIsDisabledNoProjectFileForThis_Text();
    public static string get_CodeAnalysisIsDisabledForTheContaining_Text();
    public static string get_FileWasExcludedFromCodeAnalysis_Text();
    public static string get_FileWasIsolatedBecauseCodeAnalysisLed_Text();
    public static string get_AnalysisIsNotSupported__Text();
    public static string get_RunningLocalAnalysis_Text();
    public static string get_RunningGlobalAnalysis_Text();
    public static string get_RunningSlowAnalysis_Text();
    public static string get_AnalysisIsCompleteFileIsConsideredGenerated_Text();
    public static string get_AnalysisIsComplete_Text();
    public static string get_FileWillBeReanalysed_Text();
    public static string get_FileIsOutOfUserScopeItMightComeFrom_Text();
    public static string get_ConfigureSyntaxStyle_Text();
    public static string get_AnalysisIsSuspendedForTheFileWaiting_Text();
    public static string get_FoldersThatDoNotMeanANamespace_Text();
    public static string get_LineShouldOnlyBeIndentedWithSpaces_ToolTip();
    public static string get_LineShouldOnlyBeIndentedWithTabs_ToolTip();
    public static string get_IncorrectTabSpacesMixInTheLineIndent_ToolTip();
    public static string get_UnexpectedLineIndentChange__ToolTip();
    public static string get_TabsMustGoFirstInIndent_ToolTip();
    public static string get_TabsAreProhibitedHere_ToolTip();
    public static string get_MultipleSpacesAreProhibited_ToolTip();
    public static string get_Indent();
    public static string get_Outdent();
    public static string get_Tab_Plural();
    public static string get_Space_Plural();
    public static string get_WrongIndentSizeWrapperForTabs();
    public static string get_WrongIndentSizeWrapperForSpaces();
    public static string get_WrongIndentSizeWrapperForTabsAndSpaces();
    public static string get_IndentSizeIsIncorrect__Text();
    public static string get_LineNotIndentedRelativeToThePrevious_Text();
    public static string get_LineIndentNotRestoredToThePreviousLevel__Text();
    public static string get_LineNotOutdentedRelativeToThePrevious_Text();
    public static string get_OutdentSizeIsIncorrect__Text();
    public static string get_ProcessingConfigFiles_Text();
    public static string get_ProcessingRulesetFiles_Text();
    public static string get_GeneratedFileMasks_Caption();
    public static string get_GeneratedCodeRegions_Caption();
    public static string get_GeneratedFilesAndDirectories_Caption();
    public static string get_CloseOptions_Text();
    public static string get_AnnotationsSourceCodeIsCopiedToTheClipboard_Text();
    public static string get_RecursiveCall_Text();
    public static string get_Path_NotResolved_Text();
    public static string get_InvalidCharactersInPath_Text();
    public static string get_Path_NotFound_Text();
    public static string get_Path_NotFoundInTheProject__Text();
    public static string get_Path_NotFoundInTheSolution_Text();
    public static string get_ProjectFileExpectedAt__Text();
    public static string get_ProjectFolderExpectedAt__Text();
    public static string get_UnexpectedProjectFileTypeAt__Text();
    public static string get_ExpectedBuildAction_At__Text();
    public static string get_UnexpectedProjectFileBuildActionAt__Text();
    public static string get__At__Text();
    public static string get_CodeAnnotationsOptionsPage_Text();
    public static string get_ReSharperAnnotationsHelpReduceFalse_Text();
    public static string get_ReSharperAlwaysSupportsAnnotationsFrom_Text();
    public static string get_SyntaxStyle_Text();
    public static string get_OfficialNuGetPackageRecommendedWayTo_Text();
    public static string get_AnnotationsSourceCode_Text();
    public static string get_CopyCImplementationToClipboard_Text();
    public static string get_AutomaticallyPropagateAnnotationsIn_Text();
    public static string get_DefaultAnnotationsNamespaceToUse_Text();
    public static string get_CommonFormatHighlightingIdsBase_IndentProblemsCompoundItem_Incorrect_indent();
    public static string get_CommonFormatHighlightingIdsBase_SpacesProblemsCompoundItem_Incorrect_spacing();
    public static string get_CommonFormatHighlightingIdsBase_LineBreaksProblemsCompoundItem_Incorrect_line_breaks();
    public static string get_CommonFormatHighlightingIdsBase_BlankLinesProblemsCompoundItem_Incorrect_blank_lines();
    public static string get_CommonFormatHighlightingIdsBase_Line_break_is_missing();
    public static string get_CommonFormatHighlightingIdsBase_Space_is_missing();
    public static string get_CommonFormatHighlightingIdsBase_Line_break_is_redundant();
    public static string get_CommonFormatHighlightingIdsBase_Space_is_redundant();
    public static string get_Elsewhere();
    public static string get_MissingBlankLinesDescription();
    public static string get_RedundantBlankLinesDescription();
    public static string get_IncorrectBlankLines_Minimum();
    public static string get_IncorrectBlankLines_Maximum();
    public static string get_IncorrectBlankLinesWrapper();
    public static string get_AHref_LearnMoreA_Text();
    public static string get_EnableIncrementalDaemonStagesOptimization_BoolOption_Text();
    public static string get_EnableIncrementalDaemonStagesOptimization_Tooltip_Text();
    public static string get_EnableEntityFrameworkAnalysisOption();
    public static string get_EntityFrameworkOptionsReanalyze();
    public static string get_EntityFrameworkFQNKeyColumn();
    public static string get_EntityFrameworkSettingsPageName();
    public static string get_EntityFrameworkDisabledDbContextsTableDescription();
    public static string get_IlKeywordHighlighterName();
    public static string get_IlCommentHighlighterName();
    public static string get_IlInstructionHighlighterName();
    public static string get_IlStringLiteralHighlighterName();
    public static string get_IlConstantLiteralHighlighterName();
    public static string get_IlViewerSynchronizationHighlighterName();
    public static string get_IlCodeLabelHighlighterName();
    public static string get_IlTargetLabelHighlighterName();
    public static string get_IlQualifiedNameHighlighterName();
    public static string get_IlMethodNameHighlighterName();
    public static string get_IlParameterHighlighterName();
    public static string get_IlIdentifierHighlighterName();
    public static string get_IlTargetHighlighterName();
    public static string get_IlHighlighterGroupName();
    public static string get_Vulnerable_api_inspection_title();
    public static string get_Vulnerable_api_inspection_description();
    public static string get_EnableEntityFrameworkEntityAdornmentOption();
    public static string get_EnableEntityFrameworkModelAnalysisOption();
    public static string get_EnableEntityFrameworkModelAnalysisOption_Comment();
    public static string get_AnalysisInProgress_Text();
    public static string get_AnalysisSwitchedOff_Text();
    public static string get_AnalysisWillBeginShortly_Text();
    public static string get_ClickToNavigate_Text();
    public static string get_DaemonIndicatorErrorsAndWarnings_Text();
    public static string get_DaemonIsInInvalidState_Text();
    public static string get_LowPriorityAnalysesStillRunning_Text();
    public static string get_NavigateToNextError_Text();
    public static string get_NavigateToNextMessage_Text();
    public static string get_NavigateToNextUsage_Text();
    public static string get_NavigateToNextWarning_Text();
    public static string get_NoErrorsOrWarnings_Text();
    public static string get_Plural_Errors();
    public static string get_Plural_Warnings();
    public static string get_SomeResultsWereHiddenToReduceComplexity_Text();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Daemon.SolutionAnalysisConfiguration : object {
    private Reasons`1<string> mySuppressor;
    [NotNullAttribute]
private IShellLocks myLocks;
    private IPsiCachesState myCachesState;
    [NotNullAttribute]
private SolutionCaches mySolutionCaches;
    public SimpleSignal RestartRequested;
    private IContextBoundSettingsStoreLive myBoundSettingsStoreLive;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <PausedByUser>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Paused>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <EnabledAndReady>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <SweaCachesReady>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <CanShowIndicator>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <CanBeginLoading>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ContainerInitialized>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Loaded>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Completed>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<SweaWarningsMode> <WarningsMode>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<SolutionAnalysisResourcesUtilization> <ResourcesUtilization>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ResourcesUtilizationLowEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ResourcesUtilizationHighEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ResourcesUtilizationHighEnabledUntilFinished>k__BackingField;
    private static string CompletedOncePersistentKey;
    private static string WarningsModePersistentKey;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <CompletedOnceAfterStart>k__BackingField;
    private static string PausedByUserReason;
    public IProperty`1<bool> PausedByUser { get; }
    [NotNullAttribute]
public string PauseReason { get; }
    public IProperty`1<bool> Paused { get; }
    public IProperty`1<bool> Enabled { get; }
    public IProperty`1<bool> EnabledAndReady { get; }
    public IProperty`1<bool> SweaCachesReady { get; }
    public IProperty`1<bool> CanShowIndicator { get; }
    public IProperty`1<bool> CanBeginLoading { get; }
    public IProperty`1<bool> ContainerInitialized { get; }
    public IProperty`1<bool> Loaded { get; }
    public IProperty`1<bool> Completed { get; }
    public IProperty`1<SweaWarningsMode> WarningsMode { get; }
    public IProperty`1<SolutionAnalysisResourcesUtilization> ResourcesUtilization { get; }
    public IProperty`1<bool> ResourcesUtilizationLowEnabled { get; }
    public IProperty`1<bool> ResourcesUtilizationHighEnabled { get; }
    public IProperty`1<bool> ResourcesUtilizationHighEnabledUntilFinished { get; }
    public IProperty`1<bool> CompletedOnceAfterStart { get; }
    public SolutionAnalysisConfiguration(Lifetime lifetime, ISolution solution, ISettingsStore settingsStore, ISolutionOwner solutionOwner, ISolutionLoadTasksScheduler scheduler, IShellLocks locks, IPsiCachesState cachesState, ILogger logger, SuspendHardOperationsManager suspendHardOperationsManager, SolutionCaches solutionCaches, ICalculatedSettingsSchema calculatedSettingsSchema);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_PausedByUser();
    public void Pause(Lifetime pauseLifetime, string reason);
    public string get_PauseReason();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_Paused();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_Enabled();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_EnabledAndReady();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_SweaCachesReady();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_CanShowIndicator();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_CanBeginLoading();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ContainerInitialized();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_Loaded();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_Completed();
    [CompilerGeneratedAttribute]
public IProperty`1<SweaWarningsMode> get_WarningsMode();
    [CompilerGeneratedAttribute]
public IProperty`1<SolutionAnalysisResourcesUtilization> get_ResourcesUtilization();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ResourcesUtilizationLowEnabled();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ResourcesUtilizationHighEnabled();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ResourcesUtilizationHighEnabledUntilFinished();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_CompletedOnceAfterStart();
    public bool CanSwitchPauseState();
    private bool IsPausedAutomatically();
    [NotNullAttribute]
public static SolutionAnalysisConfiguration GetInstance(ISolution solution);
    [NotNullAttribute]
public IProperty`1<AnalysisScope> GetEnabledPropertyFromSettings(Lifetime lifetime);
}
[SolutionComponentAttribute("2")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Daemon.SolutionAnalysisIndicatorDefault : object {
    private ILogger myLogger;
    public SolutionAnalysisIndicatorDefault(ILogger logger);
    private sealed virtual override void JetBrains.Application.Extensibility.IComponentWithAdditionalInitOnPrimaryThread.InitOnPrimaryThread();
    protected virtual void DoInit();
    public virtual IProgressIndicator ShowLoadingProgress();
    public virtual void StartAnalyzingChanges();
    public virtual void AnalyzingFile(IPsiSourceFile file);
    public virtual void AnalyzingFilesCompleted();
    public virtual void AnalyzingFilesInterrupted();
    public virtual void Initialize();
}
[DerivedComponentsInstantiationRequirementAttribute("0")]
public abstract class JetBrains.ReSharper.Daemon.SolutionAnalysisService : object {
    public static Key`1<IGlobalUsageChecker> UsageCheckerInDaemonProcessKey;
    public bool Loaded { get; }
    [CanBeNullAttribute]
public IGlobalUsageChecker UsageChecker { get; }
    [CanBeNullAttribute]
public ISimpleSignal Reanalyzing { get; }
    [CanBeNullAttribute]
public SolutionAnalysisConfiguration Configuration { get; }
    private static SolutionAnalysisService();
    [NotNullAttribute]
public static SolutionAnalysisService GetInstance(ISolution solution);
    public abstract virtual bool ShowEnablingAnalysisWarning(IWin32Window parent, IWindowBranding windowBranding);
    [MustDisposeResourceAttribute]
public abstract virtual IDisposable RunAnalysisCookie();
    public abstract virtual void AnalysisStageCompleted(IPsiSourceFile sourceFile, IDaemonStage stage, byte layer, IEnumerable`1<HighlightingInfo> highlightings, bool fullRehighlight, IEnumerable`1<DocumentRange> ranges, DaemonProcessKind processKind, IContextBoundSettingsStore settingsStore);
    public abstract virtual void AnalysisCompleted(IPsiSourceFile sourceFile, IDaemonProcess daemonProcess, DependencySet dependencies, bool analysisSupported, DaemonProcessKind processKind);
    public abstract virtual void FilePartlyReanalyzed(IPsiSourceFile sourceFile, IDaemonProcess daemonProcess, DaemonProcessKind processKind);
    public virtual bool ShouldNotifySwea(IPsiSourceFile sourceFile);
    public abstract virtual Nullable`1<ElementId> GetElementId(IDeclaredElement element);
    public abstract virtual bool get_Loaded();
    public abstract virtual bool Load();
    public abstract virtual void Unload();
    public abstract virtual IGlobalUsageChecker get_UsageChecker();
    public abstract virtual bool FetchGlobalUsageAnalysisData(IPsiSourceFile sourceFile, IGlobalUsageChecker& usageChecker, IFileContentInfo& fileContentInfo);
    public abstract virtual IList`1<IPsiSourceFile> GetFilesToAnalyze(IInterruptable interruptable);
    public virtual void AnalyzeInvisibleFile(IPsiSourceFile sourceFile);
    public abstract virtual void AnalyzeInvisibleFile(IPsiSourceFile sourceFile, bool sync);
    public abstract virtual void AllFilesAnalyzed();
    public abstract virtual void NavigateInErrorsView(IPsiSourceFile sourceFile);
    public abstract virtual ISimpleSignal get_Reanalyzing();
    public abstract virtual void ReanalyzeAll();
    public abstract virtual void ReanalyzeFile(IPsiSourceFile psiSourceFile);
    public abstract virtual void MarkModuleAsDirty(IPsiModule psiModule);
    public abstract virtual SolutionAnalysisConfiguration get_Configuration();
    [CanBeNullAttribute]
public abstract virtual T GetComponent();
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Daemon.SolutionAnalysisServiceDefault : SolutionAnalysisService {
    public bool Loaded { get; }
    public IGlobalUsageChecker UsageChecker { get; }
    public ISimpleSignal Reanalyzing { get; }
    public SolutionAnalysisConfiguration Configuration { get; }
    public virtual bool ShowEnablingAnalysisWarning(IWin32Window parent, IWindowBranding windowBranding);
    public virtual IDisposable RunAnalysisCookie();
    public virtual void AnalysisStageCompleted(IPsiSourceFile sourceFile, IDaemonStage stage, byte layer, IEnumerable`1<HighlightingInfo> highlightings, bool fullRehighlight, IEnumerable`1<DocumentRange> ranges, DaemonProcessKind processKind, IContextBoundSettingsStore settingsStore);
    public virtual void AnalysisCompleted(IPsiSourceFile sourceFile, IDaemonProcess daemonProcess, DependencySet dependencies, bool analysisSupported, DaemonProcessKind processKind);
    public virtual void FilePartlyReanalyzed(IPsiSourceFile sourceFile, IDaemonProcess daemonProcess, DaemonProcessKind processKind);
    public virtual Nullable`1<ElementId> GetElementId(IDeclaredElement element);
    public virtual bool get_Loaded();
    public virtual bool Load();
    public virtual void Unload();
    public virtual IGlobalUsageChecker get_UsageChecker();
    public virtual bool FetchGlobalUsageAnalysisData(IPsiSourceFile sourceFile, IGlobalUsageChecker& usageChecker, IFileContentInfo& fileContentInfo);
    public virtual IList`1<IPsiSourceFile> GetFilesToAnalyze(IInterruptable interruptable);
    public virtual void AnalyzeInvisibleFile(IPsiSourceFile sourceFile, bool sync);
    public virtual void AllFilesAnalyzed();
    public virtual void NavigateInErrorsView(IPsiSourceFile sourceFile);
    public virtual void ReanalyzeFile(IPsiSourceFile psiSourceFile);
    public virtual ISimpleSignal get_Reanalyzing();
    public virtual void ReanalyzeAll();
    public virtual void MarkModuleAsDirty(IPsiModule psiModule);
    public virtual SolutionAnalysisConfiguration get_Configuration();
    public virtual T GetComponent();
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.Daemon.SolutionAnalysisSettingsGlobalUpgrader : SettingTablesUpgrader {
    public SolutionAnalysisSettingsGlobalUpgrader(ProductConfigurations productConfigurations);
    protected virtual void DoUpgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime, SettingsTableBase workspaceSettingsTable, SettingsTableBase globalSettingsTable);
}
[SolutionSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.Daemon.SolutionAnalysisSettingsSolutionUpgrader : object {
    private ProductConfigurations myProductConfigurations;
    public SolutionAnalysisSettingsSolutionUpgrader(ProductConfigurations productConfigurations);
    private sealed virtual override void JetBrains.ProjectModel.Settings.Upgrade.ISolutionSettingsUpgrader.Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Daemon.Statistics.DocumentDataSampleCollector : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<ValueTuple`2<string, string>, Dictionary`2<ValueTuple`2<string, int>, int>> myMarkers;
    private int mySamplesCount;
    private static Key`1<DataBag> ourDataBagKey;
    private static DocumentDataSampleCollector();
    public static void SetData(IDocument document, int value);
    public static void SetMultipleData(IDocument document, Int32[] values);
    [MustUseReturnValueAttribute]
public static bool HasKey(IDocument document);
    public void CollectSample(ITextControl textControl, ISolution solution);
    public void FlushDataIfNeeded(ViewportSamplingUsagesCollector usagesCollector, ISolution solution);
}
[ExtensionAttribute]
[HighlightingSourceAttribute]
public static class JetBrains.ReSharper.Daemon.Statistics.FeatureStatisticsExtensions : object {
    [ExtensionAttribute]
[PureAttribute]
public static bool IsStatisticsCollectionEnabled(ElementProblemAnalyzerData data);
    [ExtensionAttribute]
public static void SetDocumentStatisticsMark(ElementProblemAnalyzerData data, int value);
    [ExtensionAttribute]
public static void SetDocumentStatisticsMarks(ElementProblemAnalyzerData data, Int32[] values);
    [ExtensionAttribute]
public static void SetDocumentStatisticsMark(ElementProblemAnalyzerData data, bool value);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static bool HasDocumentStatisticsMarkReportedRecently(ElementProblemAnalyzerData data);
    [ExtensionAttribute]
public static void AddStatisticsMark(IHighlightingConsumer consumer, DocumentOffset documentOffset);
    [ExtensionAttribute]
public static void AddStatisticsMark(IHighlightingConsumer consumer, int statisticsKey, DocumentOffset documentOffset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Daemon.Statistics.MarkupModelSampleCollector : object {
    [CompilerGeneratedAttribute]
private IDocumentMarkupManager <documentMarkupManager>P;
    [CompilerGeneratedAttribute]
private MapTextControlIdsToPushToHintState <pushToHintStateProvider>P;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<ValueTuple`2<string, string>, Dictionary`2<ValueTuple`2<string, int>, ValueTuple`2<int, int>>> myHighlightings;
    private int mySamplesCount;
    public MarkupModelSampleCollector(IDocumentMarkupManager documentMarkupManager, MapTextControlIdsToPushToHintState pushToHintStateProvider);
    public void CollectSample(ITextControl textControl, ISolution solution);
    private bool CollectHighlighting(IHighlighter highlighter, IHighlighting highlighting, int highlightingKind, bool pushToHintIsActive, string fileExtension, string filePersistentId);
    private bool CollectInvisibleMark(InvisibleFeatureStatisticsMark invisibleMark, string fileExtension, string filePersistentId);
    private void AppendHighlighting(string highlightingTypeName, int statisticsKey, int rangeLength, string fileExtension, string filePersistentId);
    public void FlushDataIfNeeded(ViewportSamplingUsagesCollector usagesCollector, ISolution solution);
}
public static class JetBrains.ReSharper.Daemon.Statistics.TypeNameHelper : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<Type, string> ourCache;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ThreadStaticAttribute]
private static HashSet`1<Type> ourTypesInProgress;
    private static TypeNameHelper();
    [NullableContextAttribute("1")]
[PureAttribute]
public static string TryGetTypeName(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.Statistics.ViewportSamplingHighlightingsCollector : object {
    private Lifetime myLifetime;
    private ILogger myLogger;
    private ISolution mySolution;
    private IThreading myThreading;
    private ITextControlManager myTextControlManager;
    private IIsApplicationActiveState myApplicationActiveState;
    private ViewportSamplingUsagesCollector myViewportSamplingUsagesCollector;
    private ActivityTrackingSettings myActivityTrackingSettings;
    private MarkupModelSampleCollector myModelSampleCollector;
    private DocumentDataSampleCollector myDocumentDataSampleCollector;
    private object myTimersChangeLock;
    private Timer myHighFrequencyTimer;
    private int myHighFrequencyTicksLeft;
    private bool myIsStatisticsEnabled;
    private static TimeSpan ourActivityPeriod;
    private static TimeSpan ourHighFrequencyPeriod;
    private static TimeSpan ourLowFrequencyPeriod;
    private static int ourHighFrequencyTicksCount;
    private static int ourLowFrequencyTicksDivisor;
    public bool IsStatisticsCollectionCurrentlyEnabled { get; }
    public ViewportSamplingHighlightingsCollector(Lifetime lifetime, ILogger logger, ISolution solution, IThreading threading, ContextManager contextManager, ITextControlManager textControlManager, IDocumentMarkupManager documentMarkupManager, IIsApplicationActiveState applicationActiveState, ViewportSamplingUsagesCollector viewportSamplingUsagesCollector, ActivityTrackingSettings activityTrackingSettings, MapTextControlIdsToPushToHintState pushToHintStateProvider);
    private static ViewportSamplingHighlightingsCollector();
    public bool get_IsStatisticsCollectionCurrentlyEnabled();
    private void HandleTimerTick(object state);
    private void HandleTickOnMainThreadGuarded();
    private void HandleUserActivity(Lifetime viewportRangeLifetime);
    private void HandleHighFrequencyTick(ITextControl textControl);
    private void HandleLowFrequencyTick(ITextControl textControl);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <HandleTimerTick>b__22_0(Task`1<bool> task);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.ReSharper.Daemon.Statistics.ViewportSamplingUsagesCollector : CounterUsagesCollector {
    private EventLogGroup myGroup;
    private VarargEventId myHighlightingTypeEvent;
    private StringEventField myTypeField;
    private IntEventField myKindField;
    private LongEventField myCountField;
    private LongEventField myCharactersField;
    private StringEventField myFileExtensionField;
    private AnonymizedIdField myFileIdField;
    public ViewportSamplingUsagesCollector(FeatureUsageLogger featureUsageLogger, EventLogConfiguration eventLogConfiguration);
    public virtual EventLogGroup GetGroup();
    public void Report(ISolution solution, string highlightingType, int highlightingKind, long samplesCount, long charactersCount, string fileExtension, string filePersistentId);
}
[ConfigurableSeverityHighlightingAttribute("", "CSHARP")]
public class JetBrains.ReSharper.Daemon.StructuralPatterns.CustomTemplateHighlighting : StructuralSearchPatternHighlightingBase {
    public string ConfigurableSeverityId { get; }
    public CustomTemplateHighlighting(ICustomPattern pattern, IStructuralMatchResult result);
    public sealed virtual string get_ConfigurableSeverityId();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Daemon.StructuralPatterns.PredefinedCustomPatternsManager : object {
    private ILogger myLogger;
    private StructuralSearchMatcherManager myStructuralSearchMatcherManager;
    private IEnumerable`1<IPredefinedCustomPatternsSource> myPredefinedCustomPatternsSources;
    private Dictionary`2<Type, Dictionary`2<ICustomPattern, IStructuralMatcher>> myMatchers;
    private List`1<ICustomPattern> myPatterns;
    public IEnumerable`1<Tuple`2<PsiLanguageType, ConfigurableSeverityItem>> ConfigurableSeverityItems { get; }
    public PredefinedCustomPatternsManager(ILogger logger, StructuralSearchMatcherManager structuralSearchMatcherManager, IEnumerable`1<IPredefinedCustomPatternsSource> predefinedCustomPatternsSources);
    private void InitMatchers();
    public IEnumerable`1<KeyValuePair`2<ICustomPattern, IStructuralMatcher>> GetMatchersFor();
    private void InitPatterns();
    public sealed virtual IEnumerable`1<Tuple`2<PsiLanguageType, ConfigurableSeverityItem>> get_ConfigurableSeverityItems();
}
public abstract class JetBrains.ReSharper.Daemon.StructuralPatterns.PredefinedPatternsStage`2 : object {
    private PredefinedCustomPatternsManager myPatternsManager;
    protected PredefinedPatternsStage`2(PredefinedCustomPatternsManager patternsManager);
    private static bool IsSupported(IPsiSourceFile sourceFile);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Daemon.StructuralPatterns.PredefinedPatternsStage`2/<CreateProcess>d__3")]
public sealed virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
    protected abstract virtual IDaemonStageProcess CreateStageProcess(IDaemonProcess process, IContextBoundSettingsStore settings, IEnumerable`1<KeyValuePair`2<ICustomPattern, IStructuralMatcher>> matchers, TFile file);
}
[HighlightingSourceAttribute]
public abstract class JetBrains.ReSharper.Daemon.StructuralPatterns.StructuralSearchDaemonStageProcessBase : object {
    [NotNullAttribute]
private IDaemonProcess myDaemonProcess;
    [NotNullAttribute]
private IFile myPsiFile;
    [NotNullAttribute]
private IHighlightingConsumer myConsumer;
    private ITaskBarrier myTaskBarrier;
    [NotNullAttribute]
private IFile JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageProcessWithPsiFile.File { get; }
    public IDaemonProcess DaemonProcess { get; }
    protected ITaskBarrier TaskBarrier { get; }
    protected StructuralSearchDaemonStageProcessBase(IDaemonProcess process, IFile psiFile);
    private sealed virtual override IFile JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageProcessWithPsiFile.get_File();
    public sealed virtual IDaemonProcess get_DaemonProcess();
    public sealed virtual void Execute(Action`1<DaemonStageResult> committer);
    protected ITaskBarrier get_TaskBarrier();
    protected void Match(ITreeNode param, Dictionary`2<ICustomPattern, IStructuralMatcher> matchers, IMatchingContext context);
    [CanBeNullAttribute]
protected virtual IHighlighting CreateHighlighting(IStructuralMatchResult result, ICustomPattern pattern);
    public virtual bool InteriorShouldBeProcessed(ITreeNode element, IMatchingContext context);
    public sealed virtual bool IsProcessingFinished(IMatchingContext context);
    public abstract virtual void ProcessBeforeInterior(ITreeNode element, IMatchingContext context);
    public sealed virtual void ProcessAfterInterior(ITreeNode element, IMatchingContext context);
}
public abstract class JetBrains.ReSharper.Daemon.StructuralPatterns.StructuralSearchPatternHighlightingBase : object {
    private DocumentRange myRange;
    [CompilerGeneratedAttribute]
private ICustomPattern <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private IStructuralMatchResult <Result>k__BackingField;
    public ICustomPattern Pattern { get; }
    public IStructuralMatchResult Result { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public Severity Severity { get; }
    protected StructuralSearchPatternHighlightingBase(ICustomPattern pattern, IStructuralMatchResult result);
    [CompilerGeneratedAttribute]
public sealed virtual ICustomPattern get_Pattern();
    [CompilerGeneratedAttribute]
public IStructuralMatchResult get_Result();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual Severity get_Severity();
    public sealed virtual DocumentRange CalculateRange();
}
[HighlightingSourceAttribute]
public interface JetBrains.ReSharper.Daemon.Syntax.ISyntaxHighlightingProcessor {
}
[ZoneDefinitionAttribute]
public interface JetBrains.ReSharper.Daemon.Syntax.ISyntaxHighlightingZone {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
public class JetBrains.ReSharper.Daemon.Syntax.SyntaxHighlightingManager : object {
    [CanBeNullAttribute]
public virtual SyntaxHighlightingStageProcess CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, IFile getPrimaryPsiFile);
    [CanBeNullAttribute]
public virtual DefaultSyntaxHighlighting CreateSyntaxHighlighting();
    [NotNullAttribute]
public virtual SyntaxHighlightingProcessor CreateProcessor();
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.Syntax.SyntaxHighlightingProcessor : DefaultSyntaxHighlighting {
    public virtual bool InteriorShouldBeProcessed(ITreeNode element, IHighlightingConsumer context);
    public virtual bool IsProcessingFinished(IHighlightingConsumer context);
    public virtual void ProcessBeforeInterior(ITreeNode element, IHighlightingConsumer context);
    public virtual void ProcessAfterInterior(ITreeNode element, IHighlightingConsumer context);
}
[DaemonStageAttribute("16")]
public class JetBrains.ReSharper.Daemon.Syntax.SyntaxHighlightingStage : object {
    public sealed virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.Syntax.SyntaxHighlightingStageProcess : object {
    [CompilerGeneratedAttribute]
private SyntaxHighlightingProcessor <processor>P;
    [CompilerGeneratedAttribute]
private IFile <File>k__BackingField;
    [CompilerGeneratedAttribute]
private IDaemonProcess <DaemonProcess>k__BackingField;
    public IFile File { get; }
    public IDaemonProcess DaemonProcess { get; }
    public SyntaxHighlightingStageProcess(IDaemonProcess process, IFile file, SyntaxHighlightingProcessor processor);
    [CompilerGeneratedAttribute]
public sealed virtual IFile get_File();
    [CompilerGeneratedAttribute]
public sealed virtual IDaemonProcess get_DaemonProcess();
    public sealed virtual void Execute(Action`1<DaemonStageResult> committer);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Daemon.Syntax.ZoneMarker : object {
}
public class JetBrains.ReSharper.Daemon.SyntaxHighlighting.DefaultSyntaxHighlighting : object {
    protected string BlockCommentAttributeId { get; }
    protected string LineCommentAttributeId { get; }
    protected string StringAttributeId { get; }
    protected string PreprocessorAttributeId { get; }
    protected string KeywordAttributeId { get; }
    protected string NumberAttributeId { get; }
    [PureAttribute]
[CanBeNullAttribute]
public virtual string GetAttributeId(TokenNodeType tokenType);
    protected virtual string get_BlockCommentAttributeId();
    protected virtual string get_LineCommentAttributeId();
    protected virtual string get_StringAttributeId();
    protected virtual string get_PreprocessorAttributeId();
    protected virtual string get_KeywordAttributeId();
    protected virtual string get_NumberAttributeId();
    protected virtual bool IsBlockComment(TokenNodeType tokenType);
    protected virtual bool IsLineComment(TokenNodeType tokenType);
    protected virtual bool IsString(TokenNodeType tokenType);
    protected virtual bool IsPreprocessor(TokenNodeType tokenType);
    protected virtual bool IsKeyword(TokenNodeType tokenType);
    protected virtual bool IsNumber(TokenNodeType tokenType);
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Daemon.SyntaxHighlighting.ReSharperSyntaxHighlighting/ReSharperSyntaxHighlightings")]
public class JetBrains.ReSharper.Daemon.SyntaxHighlighting.ReSharperSyntaxHighlighting : object {
    private DocumentRange myRange;
    [CompilerGeneratedAttribute]
private string <AttributeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public string AttributeId { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public int NavigationOffsetPatch { get; }
    public ReSharperSyntaxHighlighting(string attributeId, string toolTip, DocumentRange range);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AttributeId();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public int get_NavigationOffsetPatch();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual Nullable`1<int> GetStatisticsKey();
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.KnownProjectFileType", "0")]
public class JetBrains.ReSharper.Daemon.SyntaxHighlighting.SyntaxHighlighting : DefaultSyntaxHighlighting {
    private ProjectFileType myProjectFileType;
    private SolutionsManager mySolutionManager;
    private ITextControlSchemeManager myTextControlSchemeManager;
    protected string BlockCommentAttributeId { get; }
    public SyntaxHighlighting(ProjectFileType projectFileType, SolutionsManager solutionManager, ITextControlSchemeManager textControlSchemeManager);
    public sealed virtual TextRange OnDocumentChange(ITextControl textControl, DocumentChange args);
    [CanBeNullAttribute]
protected CachingLexer GetLexer(ITextControl textControl);
    protected virtual string get_BlockCommentAttributeId();
    protected virtual HighlighterAttributes GetAttributesForAttributeId(string attributesId);
    [NotNullAttribute]
[ObsoleteAttribute]
protected virtual HighlighterAttributes GetAttributesForToken(TokenNodeType tokenType);
    public virtual TextRange GetAttributesForOffset(ITextControl textControl, DocOffset offset, HighlighterAttributes& attributes);
    public virtual TextRange GetAttributeIdForOffset(ITextControl textControl, DocOffset offset, String& attributesId);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Daemon.SyntaxHighlighting.SyntaxHighlightingUtil : object {
    [ExtensionAttribute]
public static DocumentRange GetDocumentRangeTrimWhiteSpaces(ITreeNode node);
    [ExtensionAttribute]
public static DocumentRange GetDocumentRangeTrimTokenWhiteSpaces(ITokenNode tokenNode);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Daemon.Tooltips.DefaultIdentifierTooltipSuppressor : object {
    public virtual bool ShouldSuppressTooltips(IHighlighter highlighter, HighlighterTooltipKind where);
}
public abstract class JetBrains.ReSharper.Daemon.Tooltips.IdentifierTooltipProvider : object {
    [CompilerGeneratedAttribute]
private IIdentifierTooltipSuppressor <IdentifierTooltipSuppressor>k__BackingField;
    [NotNullAttribute]
private IIdentifierTooltipSuppressor IdentifierTooltipSuppressor { get; }
    protected IdentifierTooltipProvider(IIdentifierTooltipSuppressor identifierTooltipSuppressor);
    [CompilerGeneratedAttribute]
private IIdentifierTooltipSuppressor get_IdentifierTooltipSuppressor();
    public sealed virtual RichTextBlock TryGetTooltip(IHighlighter highlighter, HighlighterTooltipKind where);
    public sealed virtual bool ShouldShowTooltip(IHighlighter highlighter, HighlighterTooltipKind where);
    [ObsoleteAttribute("Please, use the overload with HighlighterTooltipKind instead", "True")]
protected virtual RichTextBlock GetRichTooltip(IHighlighter highlighter);
    protected abstract virtual RichTextBlock GetRichTooltip(IHighlighter highlighter, HighlighterTooltipKind where);
    protected abstract virtual bool ShouldShowTooltip(IHighlighter highlighter);
}
public abstract class JetBrains.ReSharper.Daemon.Tooltips.IdentifierTooltipProvider`1 : IdentifierTooltipProvider {
    private DeclaredElementPresenterTextStylesService myTextStylesService;
    private DeclaredElementPresenterStyle myPresentingStyle;
    private IHighlightingAttributeIdProvider myAttributeIdProvider;
    public static string RIDER_TOOLTIP_SEPARATOR;
    [CompilerGeneratedAttribute]
private IDeclaredElementDescriptionPresenter <Presenter>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    protected IDeclaredElementDescriptionPresenter Presenter { get; private set; }
    protected ISolution Solution { get; private set; }
    protected IdentifierTooltipProvider`1(Lifetime lifetime, ISolution solution, IDeclaredElementDescriptionPresenter presenter, DeclaredElementPresenterTextStylesService textStylesService, IIdentifierTooltipSuppressor identifierTooltipSuppressor, DeclaredElementPresenterTextStyles textStyles);
    protected virtual DeclaredElementPresenterStyle GetPresenterStyle(PsiLanguageType primaryLanguage, PsiLanguageType projectLanguage);
    protected virtual DeclaredElementPresenterStyle GetPresenterStyle(IDeclaredElement declaredElement, IFile psiFile);
    [CompilerGeneratedAttribute]
protected IDeclaredElementDescriptionPresenter get_Presenter();
    [CompilerGeneratedAttribute]
private void set_Presenter(IDeclaredElementDescriptionPresenter value);
    [CompilerGeneratedAttribute]
protected ISolution get_Solution();
    [CompilerGeneratedAttribute]
private void set_Solution(ISolution value);
    [CanBeNullAttribute]
protected virtual IFile GetPsiFile(IPsiSourceFile sourceFile, DocumentRange documentRange);
    protected virtual bool ShouldShowTooltip(IHighlighter highlighter);
    [CanBeNullAttribute]
protected virtual RichTextBlock GetRichTooltip(IHighlighter highlighter, HighlighterTooltipKind where);
    [NotNullAttribute]
protected virtual PsiLanguageType SelectPresentationLanguage(IDeclaredElement declaredElement, IFile psiFile);
    [NotNullAttribute]
protected virtual RichTextBlock GetPresentationIncludingDocumentation(IDeclaredElement declaredElement, ISubstitution substitution, IFile psiFile, DocumentRange documentRange, DeclaredElementPresenterStyle presenterStyle);
    [CanBeNullAttribute]
protected virtual DeclaredElementInstance GetCustomElementInstance(IReference reference, ResolveResultWithInfo resolveResult);
    [CanBeNullAttribute]
protected virtual DeclaredElementInstance GetCustomElementInstance(ITreeNode element);
    [CanBeNullAttribute]
protected virtual RichTextBlock GetCustomPresentation(ITreeNode element);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0();
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ReSharper.Daemon.Tooltips.IIdentifierTooltipSuppressor {
    public abstract virtual bool ShouldSuppressTooltips(IHighlighter highlighter, HighlighterTooltipKind where);
}
public class JetBrains.ReSharper.Daemon.UsageChecking.CollectUsagesStagePersistentData : object {
    [NotNullAttribute]
private static Key`1<CollectUsagesStagePersistentData> KEY;
    [NotNullAttribute]
public Dictionary`2<ITypeMemberDeclaration, UsageData> MemberToData;
    [NotNullAttribute]
public UsageData OutsideMembersData;
    [NotNullAttribute]
public Dictionary`2<IPsiSourceFile, long> FileToTimestamp;
    [NotNullAttribute]
public ElementIdCache ElementIdCache;
    public CollectUsagesStagePersistentData(ElementIdCache elementIdCache, IEnumerable`1<SwaExtensionProviderBase> swaExtensionProviders);
    private CollectUsagesStagePersistentData(Dictionary`2<ITypeMemberDeclaration, UsageData> memberToData, UsageData outsideMembersData, Dictionary`2<IPsiSourceFile, long> fileToTimestamp, ElementIdCache elementIdCache);
    private static CollectUsagesStagePersistentData();
    [NotNullAttribute]
public static CollectUsagesStagePersistentData Restore(IDaemonProcess daemonProcess, IEnumerable`1<SwaExtensionProviderBase> swaExtensionProviders);
    public void Store(IDaemonProcess daemonProcess);
    [NotNullAttribute]
public CollectUsagesStagePersistentData Clone();
}
public class JetBrains.ReSharper.Daemon.UsageChecking.DeclarationInfoCache : object {
    public Dictionary`2<IDeclaration, IList`1<IDeclaration>> DeclarationToMemberDeclarations;
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Daemon.UsageChecking.ElementId : ValueType {
    private static int CompiledIdMask;
    [CompilerGeneratedAttribute]
private int <Value>k__BackingField;
    public int Value { get; }
    public bool IsCompiledElementId { get; }
    private ElementId(int value);
    public ElementId(int value, bool isCompiledElement);
    [CompilerGeneratedAttribute]
public int get_Value();
    public bool get_IsCompiledElementId();
    public static ElementId ReadFrom(UnsafeReader reader);
    public void WriteTo(UnsafeWriter writer);
    public sealed virtual bool Equals(ElementId elementId);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ElementId id1, ElementId id2);
    public static bool op_Inequality(ElementId id1, ElementId id2);
    public sealed virtual int CompareTo(ElementId other);
    public virtual string ToString();
}
public class JetBrains.ReSharper.Daemon.UsageChecking.ElementIdCache : object {
    [NotNullAttribute]
private SolutionAnalysisService mySolutionAnalysisService;
    [NotNullAttribute]
private Dictionary`2<IDeclaredElement, Nullable`1<ElementId>> myElementToId;
    public ElementIdCache(SolutionAnalysisService solutionAnalysisService);
    public void RegisterElement(IDeclaredElement element);
    public Nullable`1<ElementId> GetItem(IDeclaredElement element);
    public void CleanUpInvalidElements();
}
public class JetBrains.ReSharper.Daemon.UsageChecking.ElementIdEqualityComparer : object {
    public sealed virtual bool Equals(ElementId x, ElementId y);
    public sealed virtual int GetHashCode(ElementId obj);
}
public enum JetBrains.ReSharper.Daemon.UsageChecking.HierarchyCheckMode : Enum {
    public int value__;
    public static HierarchyCheckMode ANY;
    public static HierarchyCheckMode ALL;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Daemon.UsageChecking.HierarchyCheckModeUtil : object {
    [ExtensionAttribute]
public static Nullable`1<bool> Return(HierarchyCheckMode mode, bool result);
    [ExtensionAttribute]
public static bool DefaultReturn(HierarchyCheckMode mode);
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Daemon.UsageChecking.HierarchyWalkDirection : Enum {
    public int value__;
    public static HierarchyWalkDirection INCLUDE_THIS;
    public static HierarchyWalkDirection START_UP;
    public static HierarchyWalkDirection CAN_GO_REVERSE;
    public static HierarchyWalkDirection REVERSE_MANY_TIMES;
    public static HierarchyWalkDirection DOWN;
    public static HierarchyWalkDirection DOWN_AND_UP;
    public static HierarchyWalkDirection DOWN_AND_UP_MANY_TIMES;
}
public interface JetBrains.ReSharper.Daemon.UsageChecking.IDeclarationInfo {
    [NotNullAttribute]
public IElementInfo Element { get; }
    [NotNullAttribute]
public IEnumerable`1<IDeclarationInfo> MemberDeclarations { get; }
    [NotNullAttribute]
public IEnumerable`1<IDeclarationInfo> AccessorDeclarations { get; }
    [NotNullAttribute]
public IEnumerable`1<IDeclarationInfo> ParameterDeclarations { get; }
    public abstract virtual IElementInfo get_Element();
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual IDeclaration FindDeclaration(DeclarationInfoCache cache);
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual IDeclaredElement FindDeclaredElement(DeclarationInfoCache cache);
    public abstract virtual IEnumerable`1<IDeclarationInfo> get_MemberDeclarations();
    public abstract virtual IEnumerable`1<IDeclarationInfo> get_AccessorDeclarations();
    public abstract virtual IEnumerable`1<IDeclarationInfo> get_ParameterDeclarations();
}
public interface JetBrains.ReSharper.Daemon.UsageChecking.IElementIdProvider {
    public abstract virtual Nullable`1<ElementId> GetElementId(IDeclaredElement element);
}
public interface JetBrains.ReSharper.Daemon.UsageChecking.IElementInfo {
    [NotNullAttribute]
public DeclaredElementType ElementType { get; }
    [CanBeNullAttribute]
public IMemberInfo Owner { get; }
    public abstract virtual DeclaredElementType get_ElementType();
    [PureAttribute]
public abstract virtual int GetFlags(int mask);
    public abstract virtual IMemberInfo get_Owner();
}
public interface JetBrains.ReSharper.Daemon.UsageChecking.IFileContentInfo {
    public PsiLanguageType Language { get; }
    public IEnumerable`1<IDeclarationInfo> TopLevelDeclarations { get; }
    public abstract virtual PsiLanguageType get_Language();
    public abstract virtual IEnumerable`1<IDeclarationInfo> get_TopLevelDeclarations();
}
public interface JetBrains.ReSharper.Daemon.UsageChecking.IGlobalUsageChecker {
    public int Timestamp { get; }
    public abstract virtual int get_Timestamp();
    public abstract virtual bool HasUsages(ElementId elementId, UsageState stateMask);
    public abstract virtual int GetMembersUsageCountWithSupers(ElementId member);
    public abstract virtual int GetUsageCount(ElementId member);
    public abstract virtual int GetExtensionMethodsCount(ElementId member);
    public abstract virtual int GetExposingApiCount(ElementId member);
    public abstract virtual int GetExposingApiCountWithDerived(ElementId member);
    public abstract virtual int GetDerivedTypeMembersCount(ElementId member);
    public abstract virtual int GetDerivedTypeElementsCount(ElementId member);
    public abstract virtual int GetCounterValue(ElementId id, IUsageCounter usageCounter);
}
public interface JetBrains.ReSharper.Daemon.UsageChecking.IMemberInfo {
    [CanBeNullAttribute]
public IMembersOwnerInfo MembersOwner { get; }
    public abstract virtual IMembersOwnerInfo get_MembersOwner();
}
public interface JetBrains.ReSharper.Daemon.UsageChecking.IMembersOwnerInfo {
    [NotNullAttribute]
public IEnumerable`1<IMemberInfo> Constructors { get; }
    [NotNullAttribute]
public IEnumerable`1<IMemberInfo> PositionalMembers { get; }
    public abstract virtual IEnumerable`1<IMemberInfo> get_Constructors();
    public abstract virtual IEnumerable`1<IMemberInfo> get_PositionalMembers();
}
public interface JetBrains.ReSharper.Daemon.UsageChecking.IParameterInfo {
    public int Index { get; }
    public abstract virtual int get_Index();
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Daemon.UsageChecking.IParameters {
    public UsageData UsageData { get; }
    public SharedUsageData SharedUsageData { get; }
    public IDaemonProcess DaemonProcess { get; }
    public IgnoreWarningsRegionsInfo RegionsInfo { get; }
    [NullableAttribute("2")]
public ITypeMember CurrentMember { get; }
    public IUsageFilter UsageFilter { get; }
    public abstract virtual UsageData get_UsageData();
    public abstract virtual SharedUsageData get_SharedUsageData();
    public abstract virtual IDaemonProcess get_DaemonProcess();
    public abstract virtual IgnoreWarningsRegionsInfo get_RegionsInfo();
    [NullableContextAttribute("2")]
public abstract virtual ITypeMember get_CurrentMember();
    public abstract virtual IUsageFilter get_UsageFilter();
}
public interface JetBrains.ReSharper.Daemon.UsageChecking.ITypeUsageConstraint {
    public abstract virtual bool Satisfies(IDeclaredType type);
}
public interface JetBrains.ReSharper.Daemon.UsageChecking.IUsageChecker {
    public UsageCheckScope Scope { get; }
    public abstract virtual UsageCheckScope get_Scope();
    [PureAttribute]
public abstract virtual bool HasUsages(IMemberInfo member, UsageState stateMask);
    [PureAttribute]
public abstract virtual UsageState GetUsageSubstate(IMemberInfo member, UsageState stateMask);
    [PureAttribute]
public abstract virtual bool HasUsages(IParameterInfo parameter, UsageState stateMask);
    [PureAttribute]
public abstract virtual UsageState GetUsageSubstate(IParameterInfo parameter, UsageState stateMask);
    [PureAttribute]
public abstract virtual bool HasSuperMembers(IMemberInfo member, bool includeQuasi);
    [PureAttribute]
public abstract virtual bool HasImplementingMembers(IMemberInfo member, bool includeQuasi);
    [PureAttribute]
public abstract virtual bool HasHierarchyMemberUsages(IMemberInfo member, UsageState stateMask, HierarchyWalkDirection walkDirection, HierarchyCheckMode mode);
    [PureAttribute]
public abstract virtual bool HasHierarchyParameterUsages(IParameterInfo parameter, UsageState stateMask, HierarchyWalkDirection walkDirection, HierarchyCheckMode mode);
    [PureAttribute]
public abstract virtual bool HasInheritors(IMembersOwnerInfo typeElement);
    [CanBeNullAttribute]
public abstract virtual IType SuggestParameterTypeByUsage(IParameterInfo parameter);
}
public interface JetBrains.ReSharper.Daemon.UsageChecking.IUsageCounter {
    public int CounterId { get; }
    public abstract virtual int get_CounterId();
}
public interface JetBrains.ReSharper.Daemon.UsageChecking.IUsageFilter {
    public bool ProcessDeclarations { get; }
    [CanBeNullAttribute]
public IReferenceNameContainer ReferenceNameContainer { get; }
    [PureAttribute]
public abstract virtual bool Accept(string referenceName);
    [PureAttribute]
public abstract virtual bool Accept(IDeclaredElement element);
    public abstract virtual bool get_ProcessDeclarations();
    public abstract virtual IReferenceNameContainer get_ReferenceNameContainer();
}
public class JetBrains.ReSharper.Daemon.UsageChecking.SharedUsageData : object {
    [NotNullAttribute]
private object mySyncLock;
    [NotNullAttribute]
private OneToSetMap`2<IDeclaredElement, Key> myStates;
    [NotNullAttribute]
private ConcurrentDictionary`2<ITypeMember, ICollection`1<ITypeMember>> myOuterMembers;
    private UsageData mySharedUsageData;
    public SharedUsageData(UsageData usageData);
    public bool HasElementStates(IDeclaredElement declaredElement, Key membersKey);
    public void SetElementStates(TDeclaredElement declaredElement, Key membersKey, Func`2<TDeclaredElement, IEnumerable`1<TChildElement>> getChildren, UsageState usageState);
    public bool IsInsideContainingTypeMembers(ITypeMember currentMember, ITypeMember typeMember);
}
public interface JetBrains.ReSharper.Daemon.UsageChecking.SwaExtension.ISwaExtensionData {
    public abstract virtual void AddData(ISwaExtensionData data);
    public abstract virtual ISwaExtensionInfo ToInfo(CollectUsagesStagePersistentData persistentData);
    public abstract virtual void ProcessBeforeInterior(ITreeNode element, IParameters parameters);
    public abstract virtual void ProcessAfterInterior(ITreeNode element, IParameters parameters);
    public abstract virtual void ProcessNode(ITreeNode element, IParameters parameters);
}
public interface JetBrains.ReSharper.Daemon.UsageChecking.SwaExtension.ISwaExtensionInfo {
    public abstract virtual void Dump(StreamWriter writer, ISolution solution);
}
public abstract class JetBrains.ReSharper.Daemon.UsageChecking.SwaExtension.SwaExtensionProviderBase : object {
    public SwaExtensionProviderId Id;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IViewableProperty`1<bool> <Enabled>k__BackingField;
    public string Name { get; }
    public IViewableProperty`1<bool> Enabled { get; }
    public SwaExtensionProviderBase(string name, bool isEnabled);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IViewableProperty`1<bool> get_Enabled();
    public abstract virtual ISwaExtensionData CreateUsageDataElement(UsageData owner);
    public abstract virtual void Merge(ISwaExtensionInfo oldData, ISwaExtensionInfo newData);
    public abstract virtual void Clear();
    public abstract virtual bool IsApplicable(IPsiSourceFile psiSourceFile);
    protected bool Equals(SwaExtensionProviderBase other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Daemon.UsageChecking.SwaExtension.SwaExtensionProviderId : ValueType {
    public int Id;
    public SwaExtensionProviderId(int id);
    public sealed virtual bool Equals(SwaExtensionProviderId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum JetBrains.ReSharper.Daemon.UsageChecking.UsageCheckScope : Enum {
    public int value__;
    public static UsageCheckScope LOCAL;
    public static UsageCheckScope GLOBAL;
}
public class JetBrains.ReSharper.Daemon.UsageChecking.UsageData : object {
    [NotNullAttribute]
private static ILogger ourLogger;
    [NotNullAttribute]
private object mySyncRoot;
    [NotNullAttribute]
private ElementIdCache myElementIdCache;
    [NotNullAttribute]
public ConcurrentDictionary`2<IDeclaredElement, bool> CollectionLikeElements;
    [NotNullAttribute]
public Dictionary`2<IDeclaredElement, UsageState> ElementStates;
    [NotNullAttribute]
public Dictionary`2<IDeclaredElement, VariableUsageState> LocalVariableStates;
    [NotNullAttribute]
public HashSet`1<IAccessor> AccessorsWithUsedValueParameter;
    [NotNullAttribute]
public HashSet`1<ILabel> AddressedLabels;
    [NotNullAttribute]
public HashSet`1<ITypeParameter> UsedTypeParameters;
    [NotNullAttribute]
public OneToListMap`2<IDeclaredElement, ITreeNode> DeclaredElementUsages;
    [NotNullAttribute]
public OneToSetMap`2<IParameter, ITypeUsageConstraint> ParameterUsages;
    [NotNullAttribute]
public HashSet`1<ElementId> AdditionalUsedElementIds;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, CountingSet`1<IDeclaredElement>> <UsageCount>k__BackingField;
    public Dictionary`2<SwaExtensionProviderBase, ISwaExtensionData> SwaExtensionsData;
    [NotNullAttribute]
public Dictionary`2<int, CountingSet`1<IDeclaredElement>> UsageCount { get; }
    public UsageData(ElementIdCache elementIdCache, IEnumerable`1<SwaExtensionProviderBase> swaExtensionProviders);
    private static UsageData();
    [CompilerGeneratedAttribute]
public Dictionary`2<int, CountingSet`1<IDeclaredElement>> get_UsageCount();
    [NotNullAttribute]
public static UsageData Merge(IEnumerable`1<UsageData> data, ElementIdCache elementIdCache, IEnumerable`1<SwaExtensionProviderBase> swaExtensionProviders, IDaemonProcess daemonProcess);
    public void AddData(UsageData data);
    public void AddUsage(IDeclaredElement element, int counterId);
    public void SetElementState(IDeclaredElement element, UsageState state);
    private static bool SetState(Dictionary`2<TElement, UsageState> map, TElement element, UsageState state);
    public void SetLocalVariableState(IDeclaredElement variable, VariableUsageState state);
    public void AddAccessorsWithUsedValueParameter(IAccessor accessor);
    [PureAttribute]
public bool IsCollectionLike(ITreeNode context, IDeclaredElement variable);
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Daemon.UsageChecking.UsageState : Enum {
    public int value__;
    public static UsageState NONE;
    public static UsageState ACCESSED;
    public static UsageState ASSIGNED;
    public static UsageState NAME_CAPTURED;
    public static UsageState USED_MASK;
    public static UsageState USED_EXCEPT_BASE_CALL;
    public static UsageState REAL_PARAMETER_USAGE;
    public static UsageState PARAMETER_PASSED_TO_SELF;
    public static UsageState PARAMETER_USED_IN_PRECONDITION_CHECK;
    public static UsageState PARAMETER_USED_MASK;
    public static UsageState CANNOT_BE_READONLY;
    public static UsageState CANNOT_BE_CONSTANT;
    public static UsageState CANNOT_BE_INIT_ONLY;
    public static UsageState HAS_STRUCT_INSTANCE_STATE_MEMBERS;
    public static UsageState HAS_STRUCT_INSTANCE_MEMBERS_WITH_STATE_ACCESS;
    public static UsageState HAS_STRUCT_INSTANCE_STATE_ACCESS;
    public static UsageState PRIMARY_PARAMETER_CAPTURED_INTO_TYPE_STATE;
    public static UsageState PRIMARY_PARAMETER_HAS_MUTATION_IN_CAPTURED_CONTEXT;
    public static UsageState METHOD_ASSIGNED_TO_DELEGATE_IN_USER_CODE;
    public static UsageState METHOD_ASSIGNED_TO_DELEGATE_IN_GENERATED_CODE;
    public static UsageState METHOD_ASSIGNED_TO_DELEGATE_MASK;
    public static UsageState RETURN_VALUE_USED_TUPLE_COMPONENT_0;
    public static UsageState RETURN_VALUE_USED_TUPLE_COMPONENT_1;
    public static UsageState RETURN_VALUE_USED_TUPLE_COMPONENT_2;
    public static UsageState RETURN_VALUE_USED_TUPLE_COMPONENT_3;
    public static UsageState RETURN_VALUE_USED;
    public static UsageState OUT_PARAMETER_RESULT_USED;
    public static UsageState PARAMETER_USED_FOR_COMPILER;
    public static UsageState PARAMETER_USED_IMPLICITLY;
    public static UsageState CANNOT_BE_PRIVATE;
    public static UsageState CANNOT_BE_INTERNAL;
    public static UsageState CANNOT_BE_PROTECTED;
    public static UsageState TYPEOF;
    public static UsageState CANNOT_BE_STATIC;
    public static UsageState IMPLICITLY_USED_TYPE_MEMBER;
    public static UsageState PARAMETER_TYPE_CANNOT_BE_CHANGED;
    public static UsageState TYPE_CANNOT_BE_ENUMERABLE;
    public static UsageState IS_CUSTOM_EVENT_IMPLEMENTATION;
    public static UsageState IS_INTERFACE_MEMBER;
    public static UsageState IS_ABSTRACT_MEMBER;
    public static UsageState ELEMENT_PROPERTIES_MASK;
    public static UsageState CANNOT_BE_LOCAL_VARIABLE;
    public static UsageState CANNOT_BE_FILE_LOCAL;
    public static UsageState COLLECTION_DECLARATION;
    public static UsageState COLLECTION_APPENDED;
    public static UsageState COLLECTION_READ;
    public static UsageState COLLECTION_ARRAY_LENGTH;
    public static UsageState COLLECTION_INITIALIZED_WITH_NOT_IN_PLACE_CREATED_ARRAY;
    public static UsageState COLLECTION_FULL_ACCESS;
    public static UsageState USED_FOR_COMPILER;
    public static UsageState ASSIGNED_FOR_COMPILER;
    public static UsageState USED_INSIDE_DECLARATION;
    public static UsageState EQUALITY_USED;
    public static UsageState ALL_MASK;
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Daemon.UsageChecking.VariableUsageState : Enum {
    public int value__;
    public static VariableUsageState NONE;
    public static VariableUsageState ACCESSED;
    public static VariableUsageState ASSIGNED;
    public static VariableUsageState ACCESSED_AND_ASSIGNED;
    public static VariableUsageState ASSIGNED_ONLY_IN_DECLARATION;
    public static VariableUsageState USED_FOR_COMPILER;
    public static VariableUsageState NAME_CAPTURED;
    public static VariableUsageState REFERENCE_CAPTURED;
    public static VariableUsageState COLLECTION_DECLARATION;
    public static VariableUsageState COLLECTION_APPENDED;
    public static VariableUsageState COLLECTION_READ;
    public static VariableUsageState COLLECTION_ARRAY_LENGTH;
    public static VariableUsageState COLLECTION_INITIALIZED_WITH_NOT_IN_PLACE_CREATED_ARRAY;
    public static VariableUsageState COLLECTION_FULL_ACCESS;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Daemon.UsageChecking.VariableUsageStateExtensions : object {
    [ExtensionAttribute]
[PureAttribute]
public static UsageState ToUsageState(VariableUsageState state);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Daemon.Util.DaemonEnablingUtil : object {
    public static bool AnalysisIsNotRecommended(ISolution solution, IProjectFile projectFile, IPsiSourceFile sourceFile);
    [ExtensionAttribute]
public static void ToggleAnalysisMode(DaemonExcludedFilesManager manager, IProjectFile projectFile, bool notRecommended);
    [ExtensionAttribute]
public static bool DisableAnalysis(DaemonExcludedFilesManager manager, IProjectFile projectFile, bool notRecommended);
    [ExtensionAttribute]
public static bool EnableAnalysis(DaemonExcludedFilesManager manager, IProjectFile projectFile, bool notRecommended);
    [ExtensionAttribute]
public static bool IsAnalysisEnabled(DaemonExcludedFilesManager manager, IProjectFile projectFile, bool notRecommended);
    [ExtensionAttribute]
public static void InvalidateCacheOnChange(DaemonExcludedFilesManager settings, IDocument document);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Daemon.Util.LinqToolsAnalyzerEnabler : object {
    public bool Enabled { get; }
    public virtual bool get_Enabled();
}
public static class JetBrains.ReSharper.Daemon.Util.MatchingBraceUtil : object {
    private static bool IsPositionAboveScreen(TextControlPosRange viewportRange, DocOffset position);
    private static bool IsPositionVisible(TextControlPosRange viewportRange, int position);
    public static bool NeedToShowIbh(TextControlPosRange viewportRange, DocumentRange lBrace, DocumentRange rBrace);
}
public static class JetBrains.ReSharper.Daemon.Util.WinRTHighlightingRule : object {
    public static IClrTypeName DependencyObject;
    public static IClrTypeName DefaultAttribute;
    public static IClrTypeName WriteOnlyArrayAttribute;
    public static IClrTypeName ReadOnlyArrayAttrbute;
    public static IClrTypeName ReturnValueNameAttrbute;
    public static IClrTypeName IAsyncInfo;
    public static IClrTypeName IAsyncAction;
    private static double Threshold;
    private static HashSet`1<string> ourClrProjectedTypes;
    private static WinRTHighlightingRule();
    public static bool IsExportedToWinMD(AccessRights accessRights);
    public static bool IsWinRTType(IType type);
    public static bool IsWinRTFieldType(IType type);
    public static INamespace GetRootNamespace(IPsiModule module);
    private static INamespace FindNestedRoot(INamespace namespace, ISymbolScope cache);
    private static int CalculateNamespaceWeight(INamespace namespace, ISymbolScope cache);
    private static ITypeElement GetTypeElementByCLRName(IClrTypeName clrName, IPsiModule module);
    public static WinRTProblems IsPossibleInheritance(IClass fromClass, IPsiModule module);
    public static WinRTProblems IsPossibleImplementation(IInterface interface, IDeclaredType declaredType, IPsiModule module);
    public static IList`1<Pair`2<WinRTProblems, IList`1<IDeclaration>>> IsPossibleOverloads(TreeNodeEnumerable`1<TDeclaration> declarations, bool isStatic);
    public static WinRTProblems IsPossibleTypeElement(ITypeElement typeElement);
    public static WinRTProblems IsPossibleMethod(IMethod method, String& returnValueName);
    private static WinRTProblems CheckReturnValueName(IMethod method, String& returnValueName);
    private static string GetReturnValueName(IMethod method, Boolean& isExplicit);
    public static WinRTProblems IsPossibleProperty(IProperty property);
    public static WinRTProblems IsPossibleMember(ITypeMember member);
    public static WinRTProblems IsPossibleParameter(IParameter parameter);
    public static Pair`2<WinRTProblems, INamespace> IsPossibleNamespace(INamespace namespace, IPsiSourceFile file);
    public static WinRTProblems IsPossibleWinRTType(IType type);
    public static WinRTProblems IsPossibleWinRTFieldType(IType type);
    private static string ConcatName(string name, Boolean& shouldHaveStatic);
    public static Pair`2<WinRTProblems, string> IsConflictedWithGeneratedCLRName(string name, string containingNamespaceName, IPsiModule module);
    public static IList`1<Pair`2<IDeclaration, IDeclaredElement>> CollectCaseInsensitiveMemberNamesConflicts(TreeNodeEnumerable`1<TDeclaration> memberDeclarations);
    public static IList`1<IDeclaration> CollectStaticnessMemberNamesConflicts(TreeNodeEnumerable`1<TDeclaration> memberDeclarations);
}
public enum JetBrains.ReSharper.Daemon.Util.WinRTProblems : Enum {
    public int value__;
    public static WinRTProblems None;
    public static WinRTProblems Generic;
    public static WinRTProblems NestedType;
    public static WinRTProblems InGlobalNamespace;
    public static WinRTProblems ImpossibleInheritance;
    public static WinRTProblems ImplementationOfInternalInterface;
    public static WinRTProblems ImplementationOfNonWinRTInterface;
    public static WinRTProblems ImplementationOfIAsync;
    public static WinRTProblems OverloadsWithoutDefaultAttribute;
    public static WinRTProblems OverloadedConstructorsWithSameArity;
    public static WinRTProblems MultipleOverloadsWithDefaultAttribute;
    public static WinRTProblems PropertyWithoutGetter;
    public static WinRTProblems RootNamespaceNotFound;
    public static WinRTProblems NotUnderRootNamespace;
    public static WinRTProblems RootNamespaceIsNotDefault;
    public static WinRTProblems NotWinRTType;
    public static WinRTProblems PointerType;
    public static WinRTProblems MultiRankArray;
    public static WinRTProblems NestedArray;
    public static WinRTProblems NotWinRTFieldType;
    public static WinRTProblems NameConflictsWithGenerated;
    public static WinRTProblems VirtualMember;
    public static WinRTProblems ProtectedStaticMember;
    public static WinRTProblems MultipleImplementation;
    public static WinRTProblems OptionalParameter;
    public static WinRTProblems ParameterArray;
    public static WinRTProblems ReferenceParameter;
    public static WinRTProblems ArrayParameterBothReadWrite;
    public static WinRTProblems ArrayParameterNoDirection;
    public static WinRTProblems ArrayParameterOutReadonly;
    public static WinRTProblems ConstructorOutParameter;
    public static WinRTProblems ConstructorReturnValueName;
    public static WinRTProblems IndexerDeclaration;
    public static WinRTProblems OperatorDeclaration;
    public static WinRTProblems InvalidReturnValueName;
    public static WinRTProblems ReturnValueNameCollide;
    public static WinRTProblems ReturnValueNameDiffers;
}
[DaemonStageAttribute("16")]
public class JetBrains.ReSharper.Daemon.VirtualFormatter.VirtualFormatterDaemonStage : object {
    public VirtualFormatterDaemonStage(ApplicationWideContextBoundSettingStore contextBoundSettingStore, Lifetime lifetime, ISolution solution, ISolutionLoadTasksScheduler scheduler);
    public sealed virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
    public ErrorStripeRequest NeedsErrorStripe(IPsiSourceFile sourceFile, IContextBoundSettingsStore settingsStore);
    protected bool IsSupported(IPsiSourceFile sourceFile);
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.VirtualFormatter.VirtualFormatterDaemonStageProcess : object {
    [CompilerGeneratedAttribute]
private IDaemonProcess <DaemonProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private IFile <File>k__BackingField;
    [CompilerGeneratedAttribute]
private IContextBoundSettingsStore <SettingsStore>k__BackingField;
    private DefaultHighlightingConsumer myConsumer;
    private bool myOnlyFixForInlayHints;
    public IDaemonProcess DaemonProcess { get; }
    public IFile File { get; }
    public IContextBoundSettingsStore SettingsStore { get; }
    public VirtualFormatterDaemonStageProcess(IDaemonProcess daemonProcess, IContextBoundSettingsStore settingsStore, IFile file, bool onlyFixForInlayHints);
    [CompilerGeneratedAttribute]
public sealed virtual IDaemonProcess get_DaemonProcess();
    [CompilerGeneratedAttribute]
public sealed virtual IFile get_File();
    [CompilerGeneratedAttribute]
public IContextBoundSettingsStore get_SettingsStore();
    public sealed virtual void Execute(Action`1<DaemonStageResult> committer);
    private ITokenNode SkipLeftSimpleWhitespaces(ITreeNode node, IVirtualCodeFormatter formatter);
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IntraTextAdornments")]
public class JetBrains.ReSharper.Daemon.VirtualFormatter.VirtualIndentingHighlighting : object {
    [CompilerGeneratedAttribute]
private ITreeNodePointer`1<ITreeNode> <NodeToIndent>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNodePointer`1<ITreeNode> <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RelativeSpaces>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AbsoluteSpaces>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OnEmptyBlankLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ParentStartOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasParent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OnlyFixForInlayHints>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RealSpaces>k__BackingField;
    public ITreeNodePointer`1<ITreeNode> NodeToIndent { get; }
    private ITreeNodePointer`1<ITreeNode> Parent { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public int RelativeSpaces { get; }
    public int AbsoluteSpaces { get; }
    public bool OnEmptyBlankLine { get; }
    public int StartOffset { get; }
    public Nullable`1<int> ParentStartOffset { get; }
    public bool HasParent { get; }
    public bool OnlyFixForInlayHints { get; }
    public string RealSpaces { get; }
    public string TestOutput { get; }
    public VirtualIndentingHighlighting(ITreeNode nodeToIndent, VirtualIndent virtualIndent, bool onlyFixForInlayHints, bool onEmptyBlankLine);
    [CompilerGeneratedAttribute]
public ITreeNodePointer`1<ITreeNode> get_NodeToIndent();
    [CompilerGeneratedAttribute]
private ITreeNodePointer`1<ITreeNode> get_Parent();
    public sealed virtual string get_ToolTip();
    private string GetDebugInfo();
    public sealed virtual string get_ErrorStripeToolTip();
    public virtual string ToString();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
    [CompilerGeneratedAttribute]
public sealed virtual int get_RelativeSpaces();
    [CompilerGeneratedAttribute]
public sealed virtual int get_AbsoluteSpaces();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_OnEmptyBlankLine();
    [CompilerGeneratedAttribute]
public sealed virtual int get_StartOffset();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_ParentStartOffset();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasParent();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_OnlyFixForInlayHints();
    [CompilerGeneratedAttribute]
public sealed virtual string get_RealSpaces();
    public sealed virtual string get_TestOutput();
}
[DeclaredElementIconProviderAttribute("0", "16")]
public class JetBrains.ReSharper.Daemon.VisualElements.ColorPropertyPsiIconManagerExtension : object {
    [CanBeNullAttribute]
private static Nullable`1<JetRgbaColor> GetColor(string name);
    public sealed virtual IconId GetImageId(IDeclaredElement declaredElement, PsiLanguageType languageType, Boolean& canApplyExtensions);
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Daemon.VisualElements.DaemonIndicatorState : ValueType {
    public static PropertyId`1<DaemonIndicatorState> BagId;
    public DaemonIndicatorStateKind Kind;
    [CanBeNullAttribute]
public string Message;
    public DaemonIndicatorState(DaemonIndicatorStateKind kind, string message);
    private static DaemonIndicatorState();
    public sealed virtual bool Equals(DaemonIndicatorState other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(DaemonIndicatorState left, DaemonIndicatorState right);
    public static bool op_Inequality(DaemonIndicatorState left, DaemonIndicatorState right);
    public virtual string ToString();
}
public enum JetBrains.ReSharper.Daemon.VisualElements.DaemonIndicatorStateKind : Enum {
    public int value__;
    public static DaemonIndicatorStateKind Hidden;
    public static DaemonIndicatorStateKind Invalid;
    public static DaemonIndicatorStateKind Working;
    public static DaemonIndicatorStateKind On;
    public static DaemonIndicatorStateKind Off;
    public static DaemonIndicatorStateKind WorkingSlow;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Daemon.VisualElements.DaemonIndicatorStates : object {
    private static Key`1<IProperty`1<DaemonIndicatorState>> ourDaemonIndicatorStatePropertyKey;
    private static DaemonIndicatorStates();
    public static DaemonIndicatorState Hidden(string message);
    public static DaemonIndicatorState Invalid(string message);
    public static DaemonIndicatorState On(string message);
    public static DaemonIndicatorState Working(string message);
    public static DaemonIndicatorState WorkingSlow(string message);
    [NotNullAttribute]
public static IconId GetDaemonIndicatorIcon(DaemonIndicatorState& state, HighlighterCountsByKinds& counts, bool skipping);
    [NotNullAttribute]
public static PresentableItemBlock GetDaemonIndicatorText(DaemonIndicatorState state, HighlighterCountsByKinds counts, bool skipping);
    public static DaemonIndicatorState Off(string message);
    [ExtensionAttribute]
public static void SetDaemonState(ErrorStripeTransport errorstripe, DaemonIndicatorState state, ITextControl textcontrol, HighlighterCountsByKindsTrackerComponent highlighterCountsByKindsTrackerComponent, IActionManager actionman, IShellLocks locks, JetPopupMenus jpms, ILogger logger);
    [ExtensionAttribute]
public static IProperty`1<DaemonIndicatorState> GetOrCreateDaemonIndicatorStateProperty(ITextControl textcontrol);
    [NotNullAttribute]
private static ErrorStripeIndicatorTransport AddNewIndicator(ErrorStripeTransport errorstripe, ITextControl textcontrol, HighlighterCountsByKindsTrackerComponent highlighterCountsByKindsTrackerComponent, IActionManager actionman, IShellLocks locks, JetPopupMenus jpms, ILogger logger);
    public static DaemonIndicatorState GetErrorStripeIndicatorState(IDocument document, DaemonStateWithDescription stateWithDescription);
    [CompilerGeneratedAttribute]
internal static IconId <GetDaemonIndicatorIcon>g__IconFromCounts|6_0(HighlighterCountsByKinds& counts, bool skipping);
    [CompilerGeneratedAttribute]
internal static string <GetDaemonIndicatorText>g__TryGetPhaseStateText|7_0(DaemonIndicatorState state);
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Daemon.VisualElements.VisualElementHighlighter : object {
    [NotNullAttribute]
private IVisualElementFactory myVisualElementFactory;
    private bool myHighlightingEnabled;
    public VisualElementHighlighter(PsiLanguageType languageType, IContextBoundSettingsStore settingsStore);
    [CanBeNullAttribute]
public HighlightingInfo CreateColorHighlightingInfo(ITreeNode element);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Daemon.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
