public class JetBrains.PsiFeatures.UIInteractive.Features.ExternalSources.ILViewer.IlViewerViewModel : AAutomation {
    private bool myLinesChanging;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private IUIApplication <UIApplication>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionBarManager <ActionBarManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<LineRange> <Lines>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ITextControl> <TextControl>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<TextControlAutomation> <TextControlElement>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <UnavailabilityReason>k__BackingField;
    public Lifetime Lifetime { get; }
    public IUIApplication UIApplication { get; }
    public IActionBarManager ActionBarManager { get; }
    public IProperty`1<LineRange> Lines { get; }
    public IProperty`1<ITextControl> TextControl { get; }
    public IProperty`1<TextControlAutomation> TextControlElement { get; }
    public IProperty`1<string> UnavailabilityReason { get; }
    public IlViewerViewModel(Lifetime lifetime, IActionBarManager actionBarManager, IUIApplication uiapp);
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public IUIApplication get_UIApplication();
    [CompilerGeneratedAttribute]
public IActionBarManager get_ActionBarManager();
    [CompilerGeneratedAttribute]
public IProperty`1<LineRange> get_Lines();
    [CompilerGeneratedAttribute]
public IProperty`1<ITextControl> get_TextControl();
    [CompilerGeneratedAttribute]
public IProperty`1<TextControlAutomation> get_TextControlElement();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_UnavailabilityReason();
    private void UpdateCaretLine(Lifetime positionLifetime, ITextControlPos position);
    private void UpdateTextControlCaret();
    private IDisposable WithLinesChanging();
    [CompilerGeneratedAttribute]
private void <WithLinesChanging>b__25_0();
    [CompilerGeneratedAttribute]
private void <WithLinesChanging>b__25_1();
}
public class JetBrains.PsiFeatures.UIInteractive.Features.ExternalSources.ILViewer.LineRange : ValueType {
    public int StartLine;
    public int EndLine;
    public LineRange(int startLine, int endLine);
    public LineRange(int line);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyDiff.Actions.DiffModeActionBase : object {
    protected DiffMode DiffMode { get; }
    public sealed virtual void Execute(IDataContext context);
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    protected abstract virtual DiffMode get_DiffMode();
}
[ActionGroupAttribute("1", "10")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.Actions.DiffModeGroup : object {
    public DiffModeGroup(DiffModeShowAllAction all, DiffModeShowOnlyDifferencesAction onlyDifferences, DiffModeShowOnlySignatureDifferencesAction onlySignatureDifferences, DiffModeShowOnlyPublicAPIDifferencesAction onlyPublicAPIDifferences);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "DiffModeShowAll_Text")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.Actions.DiffModeShowAllAction : DiffModeActionBase {
    protected DiffMode DiffMode { get; }
    protected virtual DiffMode get_DiffMode();
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "DiffModeShowOnlyDifferences_Text")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.Actions.DiffModeShowOnlyDifferencesAction : DiffModeActionBase {
    protected DiffMode DiffMode { get; }
    protected virtual DiffMode get_DiffMode();
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "DiffModeShowOnlyPublicApiDifferences_Text")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.Actions.DiffModeShowOnlyPublicAPIDifferencesAction : DiffModeActionBase {
    protected DiffMode DiffMode { get; }
    protected virtual DiffMode get_DiffMode();
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "DiffModeShowOnlySignatureDifferences_Text")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.Actions.DiffModeShowOnlySignatureDifferencesAction : DiffModeActionBase {
    protected DiffMode DiffMode { get; }
    protected virtual DiffMode get_DiffMode();
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "OpenDiffOptionsActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.Actions.DiffOptionsAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.ExternalSource.ExternalSourcesSettings", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "AssemblyDiffExplorerSettingsSettingDescription")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.AssemblyDiffExplorerSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "XmlDocumentRepresentingAssemblyDiffExplorerStateSettingDescription")]
public string XmlDocument;
}
[FlagsAttribute]
internal enum JetBrains.ReSharper.ExternalSources.AssemblyDiff.ComparisonMode : Enum {
    public int value__;
    public static ComparisonMode CompareBodies;
    public static ComparisonMode CompareSignatures;
    public static ComparisonMode ComparePublicApi;
    public static ComparisonMode CompareMask;
    public static ComparisonMode IgnoreMemberOrder;
    public static ComparisonMode IgnoreAttributeOrder;
    public static ComparisonMode IgnoreNullableReferenceTypesAnnotations;
    public static ComparisonMode ShowCompilerGeneratedCode;
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.ExternalSources.AssemblyDiff.ComparisonModeEx : object {
    [ExtensionAttribute]
public static bool CompareBodies(ComparisonMode mode);
    [ExtensionAttribute]
public static bool CompareSignatures(ComparisonMode mode);
    [ExtensionAttribute]
public static bool ComparePublicApi(ComparisonMode mode);
    [ExtensionAttribute]
public static bool IgnoreMemberOrder(ComparisonMode mode);
    [ExtensionAttribute]
public static bool IgnoreAttributeOrder(ComparisonMode mode);
    [ExtensionAttribute]
public static bool IgnoreNullableReferenceTypesAnnotations(ComparisonMode mode);
    [ExtensionAttribute]
public static bool ShowCompilerGeneratedCode(ComparisonMode mode);
    [ExtensionAttribute]
public static ComparisonMode ToComparisonMode(DiffMode diffMode, bool ignoreMemberOrder, bool ignoreAttributeOrder, bool ignoreNullableReferenceTypesAnnotations, bool showCompilerGeneratedCode);
}
public enum JetBrains.ReSharper.ExternalSources.AssemblyDiff.DiffMode : Enum {
    public int value__;
    public static DiffMode ShowAll;
    public static DiffMode ShowOnlyDifferences;
    public static DiffMode ShowOnlySignatureDifferences;
    public static DiffMode ShowOnlyPublicAPIDifferences;
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.DiffModelManager : object {
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private SolutionFeaturePartsContainer myApplicableProviders;
    [NotNullAttribute]
private AssemblyExplorerStyles myAssemblyExplorerStyles;
    public DiffModelManager(ILogger logger, SolutionFeaturePartsContainer applicableProviders, AssemblyExplorerStyles assemblyExplorerStyles);
    public static DiffModelManager GetInstance(ISolution solution);
    public ICollection`1<IExplorerNode> GetChildren(IDiffNode diffNode);
    public void Present(IDiffNode diffNode, IPresentableItem item, Action`2<IExplorerNode, IPresentableItem> present, PresentationState state);
    private RichText PresentPathDiff(FileSystemPath oldPath, FileSystemPath newPath, PresentationState state);
    private RichText PresentDiff(RichText oldRichText, RichText newRichText, string oldText, string newText, PresentationState state);
    internal static RichText AppendChangedPart(RichText richText, string oldPart, string newPart, AssemblyExplorerStyles styles, PresentationState state);
    [CompilerGeneratedAttribute]
private void <GetChildren>g__ProcessNode|5_0(IExplorerNode child, bool old, <>c__DisplayClass5_0& );
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.DiffOptions : object {
    [CompilerGeneratedAttribute]
private IProperty`1<DiffMode> <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IgnoreMemberOrderDifferences>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IgnoreAttributeOrderDifferences>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IgnoreNullableReferenceTypesAnnotationsDifferences>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ShowCompilerGeneratedCode>k__BackingField;
    public IProperty`1<DiffMode> Mode { get; }
    public IProperty`1<bool> IgnoreMemberOrderDifferences { get; }
    public IProperty`1<bool> IgnoreAttributeOrderDifferences { get; }
    public IProperty`1<bool> IgnoreNullableReferenceTypesAnnotationsDifferences { get; }
    public IProperty`1<bool> ShowCompilerGeneratedCode { get; public set; }
    public DiffOptions(Lifetime lifetime, ISettingsStore settingsStore, IThreading threading);
    [CompilerGeneratedAttribute]
public IProperty`1<DiffMode> get_Mode();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IgnoreMemberOrderDifferences();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IgnoreAttributeOrderDifferences();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IgnoreNullableReferenceTypesAnnotationsDifferences();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ShowCompilerGeneratedCode();
    [CompilerGeneratedAttribute]
public void set_ShowCompilerGeneratedCode(IProperty`1<bool> value);
    internal ComparisonMode GetComparisonMode();
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.ExternalSource.ExternalSourcesSettings", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "DiffSettingsSettingDescription")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.DiffSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "DiffModeSettingDescription")]
public DiffMode Mode;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "DiffIgnoreMemberOrderDifferencesSettingDescription")]
public bool IgnoreMemberOrderDifferences;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "DiffIgnoreAttributeOrderDifferencesSettingDescription")]
public bool IgnoreAttributeOrderDifferences;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "DiffIgnoreNullableReferenceTypesAnnotationsDifferencesSettingDescription")]
public bool IgnoreNullableReferenceTypesAnnotationsDifferences;
}
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.DiffUtil : object {
    internal static NodeDiffState CalculateDiffState(IAssemblyFileNode old, IAssemblyFileNode new, AssemblyInfoDatabase assemblyInfoDatabase);
    internal static bool CompareContent(IAssemblyLocation old, IAssemblyLocation new);
    internal static bool CompareContent(FileSystemPath old, FileSystemPath new);
    internal static bool CompareFolderContent(FileSystemPath oldFolder, FileSystemPath newFolder, IFolderNode oldNode, IFolderNode newNode, FolderCache cache);
    private static bool CompareFolderContent(FileSystemPath oldFolder, FileSystemPath newFolder, IPersistentNode oldPersistentNode, IPersistentNode newPersistentNode, bool oldFilterFiles, bool newFilterFiles, bool oldWatchForChanges, bool newWatchForChanges, FolderCache cache);
    internal static bool CompareResources(IManifestResourceDisposition oldDisposition, IManifestResourceDisposition newDisposition);
    internal static bool CompareContent(Stream old, Stream new);
    private static bool CompareNativeHostRelatedFilesContent(IAssemblyLocation oldNativeAppHostLocation, IAssemblyLocation newNativeAppHostLocation);
    internal static bool CompareContent(IDeclaredElement old, IDeclaredElement new, ISymbolScope oldSymbolScope, ISymbolScope newSymbolScope, IAssemblyLocation oldLocation, IAssemblyLocation newLocation, ComparisonMode mode);
    private static bool CompareNamespaces(INamespace oldNamespace, INamespace newNamespace, ISymbolScope oldSymbolScope, ISymbolScope newSymbolScope, IAssemblyLocation oldLocation, IAssemblyLocation newLocation, ComparisonMode mode);
    private static ICollection`1<ITypeElement> GetTypesForComparison(INamespace ns, ISymbolScope symbolScope, ComparisonMode mode);
    internal static bool CompareTypes(ITypeElement oldTypeElement, ITypeElement newTypeElement, IAssemblyLocation oldLocation, IAssemblyLocation newLocation, ComparisonMode mode);
    private static Nullable`1<bool> CompareAccessRights(IDeclaredElement oldDeclaredElement, IDeclaredElement newDeclaredElement, ComparisonMode mode);
    private static bool CompareMembersXmlDocIds(ITypeElement oldTypeElement, ITypeElement newTypeElement, ComparisonMode mode);
    private static List`1<ITypeMember> GetMembersForComparison(ITypeElement typeElement, ComparisonMode mode);
    private static bool CompareTypeMembers(ITypeMember oldTypeMember, ITypeMember newTypeMember, IAssemblyLocation oldLocation, IAssemblyLocation newLocation, ComparisonMode mode);
    private static bool CompareIlCode(IAssemblyLocation oldLocation, IAssemblyLocation newLocation, IEnumerable`1<ValueTuple`2<MetadataToken, MetadataToken>> pairs, ComparisonMode mode);
    [ContractAnnotationAttribute("oldDeclaredElement:null => false; newDeclaredElement:null => false")]
internal static bool CompareDeclaredElementsXmlDocIds(IDeclaredElement oldDeclaredElement, IDeclaredElement newDeclaredElement);
    internal static int GetPairWeight(AssemblyNameInfo oldName, AssemblyNameInfo newName);
    internal static int GetPairWeight(Version oldVersion, Version newVersion);
    internal static int GetPairWeight(NuGetVersion oldVersion, NuGetVersion newVersion);
    internal static int GetPairWeight(string oldName, string newName, int maxWeight);
    private static int GetCommonStartPlusEndSymbolsCount(string oldName, string newName);
    public static ValueTuple`4<string, string, string, string> ComparePaths(FileSystemPath oldPath, FileSystemPath newPath);
    public static ValueTuple`2<string, string> GetFirstDifference(FileSystemPath oldPath, FileSystemPath newPath);
    public static IEnumerable`1<ValueTuple`3<TextRange, TextRange, bool>> MatchParts(string oldText, string newText);
    private static StringPartNode BuildStringPartsTree(string text);
    private static List`1<ValueTuple`2<TextRange, StringPartTokenType>> ToTokens(string text);
    private static ValueTuple`2[] FindLongestCommonSubsequence(List`1<StringSlice> oldSequence, List`1<StringSlice> newSequence);
    private static bool IsOneSymbolToken(StringPartTokenType tokenType);
    [CompilerGeneratedAttribute]
internal static bool <CompareFolderContent>g__CompareNames|4_0(IList`1<FileSystemPath> oldList, IList`1<FileSystemPath> newList);
    [CompilerGeneratedAttribute]
internal static bool <CompareFolderContent>g__CompareFiles|4_1(IList`1<FileSystemPath> oldList, IList`1<FileSystemPath> newList);
    [CompilerGeneratedAttribute]
internal static bool <CompareNativeHostRelatedFilesContent>g__Compare|7_3(Func`3<ValueTuple`2<IAssemblyLocation, bool>, ValueTuple`2<IAssemblyLocation, bool>, bool> compare, <>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static string <ComparePaths>g__GetMiddle|23_0(string s, string prefix, string suffix);
    [CompilerGeneratedAttribute]
internal static TextRange <MatchParts>g__GetRange|25_7(int index, int indexLimit, List`1<StringPartNode> parts);
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<List`1<StringSlice>, List`1<int>> <MatchParts>g__ToSlicesSkipDelimiters|25_5(string text, List`1<StringPartNode> parts);
    [CompilerGeneratedAttribute]
internal static TextRange <MatchParts>g__GetEmptyRange|25_8(int index, int count, List`1<StringPartNode> parts);
    [CompilerGeneratedAttribute]
internal static bool <MatchParts>g__IsSpace|25_3(string text, TextRange range);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.NodeProviders.DiffNodesProvider : ExplorerNodesProviderBase {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
    public virtual bool HasChildren(IExplorerNode explorerNode);
    public virtual bool CanHaveChildren(IExplorerNode explorerNode);
    public virtual bool CollectLoadActions(IExplorerNode explorerNode, List`1<Action`1<IProgressIndicator>> actions);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.NodeProviders.PersistentAssemblyDiffProvider : PersistentDiffNodeProvider`1<PersistentAssemblyDiffNode> {
    protected string TagName { get; }
    protected virtual string get_TagName();
    protected virtual PersistentAssemblyDiffNode CreatePersistentDiffNode(Lifetime lifetime, FileSystemPath oldPath, FileSystemPath newPath, IExtendablePersistentNode parent);
    public virtual bool IsApplicable(FileSystemPath oldPath, FileSystemPath newPath);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyDiff.NodeProviders.PersistentDiffNodeProvider`1 : object {
    protected static string OLD_PATH_ATTRIBUTE_NAME;
    protected static string NEW_PATH_ATTRIBUTE_NAME;
    protected string TagName { get; }
    public int FileExtensionPriority { get; }
    protected abstract virtual string get_TagName();
    protected abstract virtual TPersistentDiffNode CreatePersistentDiffNode(Lifetime lifetime, FileSystemPath oldPath, FileSystemPath newPath, IExtendablePersistentNode parent);
    public sealed virtual IPersistentNode CreateDiffNodeFromPaths(FileSystemPath oldPath, FileSystemPath newPath, IExtendablePersistentNode parent);
    public sealed virtual IPersistentNode CreateNodeFromXmlElement(XmlElement xmlElement, IExtendablePersistentNode parent);
    public sealed virtual XmlElement WriteNodeToXmlElement(IPersistentNode node, XmlDocument owner);
    public abstract virtual bool IsApplicable(FileSystemPath oldPath, FileSystemPath newPath);
    public sealed virtual bool IsApplicable(XmlElement xmlElement);
    public sealed virtual bool IsApplicable(FileSystemPath fileSystemPath);
    public sealed virtual bool IsApplicable(INodeData nodeData);
    public sealed virtual int get_FileExtensionPriority();
    public sealed virtual ICollection`1<string> GetSupportedExtensionFilters();
    public sealed virtual IPersistentNode CreateNodeFromPath(FileSystemPath path, IExtendablePersistentNode parent);
    public sealed virtual IPersistentNode CreateNodeFromNodeData(INodeData nodeData, IExtendablePersistentNode parent);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.NodeProviders.PersistentFolderDiffProvider : PersistentDiffNodeProvider`1<PersistentFolderDiffNode> {
    private NuGetPackagesCacheStructure myNuGetPackagesCacheStructure;
    protected string TagName { get; }
    public PersistentFolderDiffProvider(NuGetPackagesCacheStructure nuGetPackagesCacheStructure);
    protected virtual string get_TagName();
    protected virtual PersistentFolderDiffNode CreatePersistentDiffNode(Lifetime lifetime, FileSystemPath oldPath, FileSystemPath newPath, IExtendablePersistentNode parent);
    public virtual bool IsApplicable(FileSystemPath oldPath, FileSystemPath newPath);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.NodeProviders.PersistentNuGetDiffProvider : PersistentDiffNodeProvider`1<PersistentNuGetDiffNode> {
    private NuGetPackagesCacheStructure myNuGetPackagesCacheStructure;
    protected string TagName { get; }
    public PersistentNuGetDiffProvider(NuGetPackagesCacheStructure nuGetPackagesCacheStructure);
    protected virtual string get_TagName();
    protected virtual PersistentNuGetDiffNode CreatePersistentDiffNode(Lifetime lifetime, FileSystemPath oldPath, FileSystemPath newPath, IExtendablePersistentNode parent);
    public virtual bool IsApplicable(FileSystemPath oldPath, FileSystemPath newPath);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.NodeProviders.PersistentZipFileDiffProvider : PersistentDiffNodeProvider`1<PersistentZipFileDiffNode> {
    protected string TagName { get; }
    protected virtual string get_TagName();
    protected virtual PersistentZipFileDiffNode CreatePersistentDiffNode(Lifetime lifetime, FileSystemPath oldPath, FileSystemPath newPath, IExtendablePersistentNode parent);
    public virtual bool IsApplicable(FileSystemPath oldPath, FileSystemPath newPath);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.PairingProviders.AssemblyFileDiffPairingProvider : DiffPairingProvider`2<IAssemblyFileNode, string> {
    [NotNullAttribute]
private AssemblyInfoDatabase myAssemblyInfoDatabase;
    public AssemblyFileDiffPairingProvider(AssemblyInfoDatabase assemblyInfoDatabase, DiffOptions diffOptions);
    protected virtual string GetKey(IAssemblyFileNode node);
    protected virtual int GetPairWeight(IAssemblyFileNode old, IAssemblyFileNode new);
    protected virtual IDiffNode CreateDiffNode(IAssemblyFileNode old, IAssemblyFileNode new, NodeDiffState diffState, IDiffNode parent);
    protected virtual NodeDiffState CalculateDiffState(IAssemblyFileNode old, IAssemblyFileNode new, IDiffNode parent);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.PairingProviders.AssemblyReferenceDiffPairingProvider : DiffPairingProvider`2<IAssemblyReferenceNode, string> {
    protected bool PairSingles { get; }
    public AssemblyReferenceDiffPairingProvider(DiffOptions diffOptions);
    protected virtual bool get_PairSingles();
    protected virtual string GetKey(IAssemblyReferenceNode node);
    protected virtual int GetPairWeight(IAssemblyReferenceNode old, IAssemblyReferenceNode new);
    protected virtual NodeDiffState CalculateDiffState(IAssemblyReferenceNode old, IAssemblyReferenceNode new, IDiffNode parent);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.PairingProviders.AssemblyReferencesFolderDiffPairingProvider : DiffPairingProvider`2<AssemblyReferencesFolderNode, int> {
    public AssemblyReferencesFolderDiffPairingProvider(DiffOptions diffOptions);
    protected virtual int GetKey(AssemblyReferencesFolderNode node);
    protected virtual int GetPairWeight(AssemblyReferencesFolderNode old, AssemblyReferencesFolderNode new);
    protected virtual NodeDiffState CalculateDiffState(AssemblyReferencesFolderNode old, AssemblyReferencesFolderNode new, IDiffNode parent);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.PairingProviders.DeclaredElementDiffPairingProvider : DiffPairingProvider`2<DeclaredElementNode, string> {
    [NotNullAttribute]
private IPsiModules myPsiModules;
    [NotNullAttribute]
private ISymbolCache mySymbolCache;
    protected bool PairSingles { get; }
    public DeclaredElementDiffPairingProvider(IPsiModules psiModules, ISymbolCache symbolCache, DiffOptions diffOptions);
    protected virtual bool get_PairSingles();
    protected virtual bool IsApplicable(DeclaredElementNode node);
    private bool IsNotEmpty(INamespace namespace, DeclaredElementNode namespaceNode, Func`2<ITypeElement, bool> predicate);
    protected virtual string GetKey(DeclaredElementNode node);
    protected virtual int GetPairWeight(DeclaredElementNode old, DeclaredElementNode new);
    protected virtual NodeDiffState CalculateDiffState(DeclaredElementNode old, DeclaredElementNode new, IDiffNode parent);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyDiff.PairingProviders.DiffPairingProvider`2 : object {
    [CompilerGeneratedAttribute]
private DiffOptions <DiffOptions>k__BackingField;
    [NotNullAttribute]
protected DiffOptions DiffOptions { get; }
    protected bool PairSingles { get; }
    protected DiffPairingProvider`2(DiffOptions diffOptions);
    [CompilerGeneratedAttribute]
protected DiffOptions get_DiffOptions();
    public sealed virtual bool IsApplicable(IExplorerNode node);
    protected virtual bool IsApplicable(TNode node);
    public sealed virtual ICollection`1<IExplorerNode> Pair(IList`1<IExplorerNode> oldNodes, IList`1<IExplorerNode> newNodes, IDiffNode parent);
    private void AddIfNotNull(List`1<IExplorerNode> list, IExplorerNode item);
    protected virtual bool get_PairSingles();
    private ICollection`1<ValueTuple`2<List`1<TNode>, List`1<TNode>>> Group(IList`1<IExplorerNode> oldNodes, IList`1<IExplorerNode> newNodes);
    private ICollection`1<IExplorerNode> Pair(List`1<TNode> oldNodes, List`1<TNode> newNodes, IDiffNode parent);
    protected abstract virtual TKey GetKey(TNode node);
    [CanBeNullAttribute]
protected virtual IEqualityComparer`1<TKey> GetKeyComparer();
    protected abstract virtual int GetPairWeight(TNode old, TNode new);
    [NotNullAttribute]
protected virtual IDiffNode CreateDiffNode(TNode old, TNode new, NodeDiffState diffState, IDiffNode parent);
    [CanBeNullAttribute]
private IDiffNode CreateDiffNode(TNode old, TNode new, IDiffNode parent);
    protected abstract virtual NodeDiffState CalculateDiffState(TNode old, TNode new, IDiffNode parent);
    [CompilerGeneratedAttribute]
private void <Group>g__ProcessNode|10_0(IExplorerNode node, bool old, <>c__DisplayClass10_0& );
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.PairingProviders.FolderLikeDiffPairingProvider : DiffPairingProvider`2<IFolderLikeNode, string> {
    [NotNullAttribute]
private FolderCache myCache;
    public FolderLikeDiffPairingProvider(FolderCache cache, DiffOptions diffOptions);
    protected virtual string GetKey(IFolderLikeNode node);
    private static string ToKey(string name);
    protected virtual IEqualityComparer`1<string> GetKeyComparer();
    protected virtual int GetPairWeight(IFolderLikeNode old, IFolderLikeNode new);
    protected virtual NodeDiffState CalculateDiffState(IFolderLikeNode old, IFolderLikeNode new, IDiffNode parent);
}
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.PairingProviders.ForwardedTypeDiffPairingProvider : DiffPairingProvider`2<ForwardedTypeNode, ValueTuple`2<string, string>> {
    public ForwardedTypeDiffPairingProvider(DiffOptions diffOptions);
    protected virtual ValueTuple`2<string, string> GetKey(ForwardedTypeNode node);
    protected virtual int GetPairWeight(ForwardedTypeNode old, ForwardedTypeNode new);
    protected virtual NodeDiffState CalculateDiffState(ForwardedTypeNode old, ForwardedTypeNode new, IDiffNode parent);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.PairingProviders.ForwardedTypesFolderDiffPairingProvider : DiffPairingProvider`2<ForwardedTypesFolderNode, int> {
    [NotNullAttribute]
private ForwardedTypesCache myForwardedTypesCache;
    public ForwardedTypesFolderDiffPairingProvider(ForwardedTypesCache forwardedTypesCache, DiffOptions diffOptions);
    protected virtual int GetKey(ForwardedTypesFolderNode node);
    protected virtual int GetPairWeight(ForwardedTypesFolderNode old, ForwardedTypesFolderNode new);
    protected virtual NodeDiffState CalculateDiffState(ForwardedTypesFolderNode old, ForwardedTypesFolderNode new, IDiffNode parent);
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyDiff.PairingProviders.IDiffPairingProvider {
    public abstract virtual bool IsApplicable(IExplorerNode node);
    [NotNullAttribute]
public abstract virtual ICollection`1<IExplorerNode> Pair(IList`1<IExplorerNode> oldNodes, IList`1<IExplorerNode> newNodes, IDiffNode parent);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.PairingProviders.ModuleReferenceDiffPairingProvider : DiffPairingProvider`2<ModuleReferenceNode, string> {
    public ModuleReferenceDiffPairingProvider(DiffOptions diffOptions);
    protected virtual string GetKey(ModuleReferenceNode node);
    protected virtual int GetPairWeight(ModuleReferenceNode old, ModuleReferenceNode new);
    protected virtual NodeDiffState CalculateDiffState(ModuleReferenceNode old, ModuleReferenceNode new, IDiffNode parent);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.PairingProviders.NetResourceEntryDiffPairingProvider : DiffPairingProvider`2<NetResourceEntryNode, string> {
    public NetResourceEntryDiffPairingProvider(DiffOptions diffOptions);
    protected virtual string GetKey(NetResourceEntryNode node);
    protected virtual IEqualityComparer`1<string> GetKeyComparer();
    protected virtual int GetPairWeight(NetResourceEntryNode old, NetResourceEntryNode new);
    protected virtual NodeDiffState CalculateDiffState(NetResourceEntryNode old, NetResourceEntryNode new, IDiffNode parent);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.PairingProviders.NetResourceFolderDiffPairingProvider : DiffPairingProvider`2<NetResourceFolderNode, string> {
    public NetResourceFolderDiffPairingProvider(DiffOptions diffOptions);
    protected virtual string GetKey(NetResourceFolderNode node);
    protected virtual IEqualityComparer`1<string> GetKeyComparer();
    protected virtual int GetPairWeight(NetResourceFolderNode old, NetResourceFolderNode new);
    protected virtual NodeDiffState CalculateDiffState(NetResourceFolderNode old, NetResourceFolderNode new, IDiffNode parent);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.PairingProviders.NonAssemblyFileDiffPairingProvider : DiffPairingProvider`2<NonAssemblyFileNode, string> {
    public NonAssemblyFileDiffPairingProvider(DiffOptions diffOptions);
    protected virtual string GetKey(NonAssemblyFileNode node);
    protected virtual IEqualityComparer`1<string> GetKeyComparer();
    protected virtual int GetPairWeight(NonAssemblyFileNode old, NonAssemblyFileNode new);
    protected virtual NodeDiffState CalculateDiffState(NonAssemblyFileNode old, NonAssemblyFileNode new, IDiffNode parent);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.PairingProviders.NuGetDependenciesFolderDiffPairingProvider : DiffPairingProvider`2<NuGetDependenciesFolderNode, int> {
    public NuGetDependenciesFolderDiffPairingProvider(DiffOptions diffOptions);
    protected virtual int GetKey(NuGetDependenciesFolderNode node);
    protected virtual int GetPairWeight(NuGetDependenciesFolderNode old, NuGetDependenciesFolderNode new);
    private List`1<PackageDependencyGroup> GetDependencyGroups(NuspecSource nuspecSource);
    protected virtual NodeDiffState CalculateDiffState(NuGetDependenciesFolderNode old, NuGetDependenciesFolderNode new, IDiffNode parent);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.PairingProviders.NuGetDependencyDiffPairingProvider : DiffPairingProvider`2<NuGetDependencyNode, string> {
    protected bool PairSingles { get; }
    public NuGetDependencyDiffPairingProvider(DiffOptions diffOptions);
    protected virtual bool get_PairSingles();
    protected virtual string GetKey(NuGetDependencyNode node);
    protected virtual int GetPairWeight(NuGetDependencyNode old, NuGetDependencyNode new);
    protected virtual NodeDiffState CalculateDiffState(NuGetDependencyNode old, NuGetDependencyNode new, IDiffNode parent);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.PairingProviders.NuGetDependencyGroupDiffPairingProvider : DiffPairingProvider`2<NuGetDependencyGroupNode, string> {
    protected bool PairSingles { get; }
    public NuGetDependencyGroupDiffPairingProvider(DiffOptions diffOptions);
    protected virtual bool get_PairSingles();
    protected virtual string GetKey(NuGetDependencyGroupNode node);
    protected virtual int GetPairWeight(NuGetDependencyGroupNode old, NuGetDependencyGroupNode new);
    protected virtual NodeDiffState CalculateDiffState(NuGetDependencyGroupNode old, NuGetDependencyGroupNode new, IDiffNode parent);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.PairingProviders.ResourceDiffPairingProvider : DiffPairingProvider`2<ResourceNode, string> {
    public ResourceDiffPairingProvider(DiffOptions diffOptions);
    protected virtual string GetKey(ResourceNode node);
    protected virtual int GetPairWeight(ResourceNode old, ResourceNode new);
    protected virtual NodeDiffState CalculateDiffState(ResourceNode old, ResourceNode new, IDiffNode parent);
}
[SolutionFeaturePartAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.PairingProviders.ResourcesFolderDiffPairingProvider : DiffPairingProvider`2<ResourcesFolderNode, int> {
    [NotNullAttribute]
private ManifestResourceDispositionCache myClrResourcesCache;
    public ResourcesFolderDiffPairingProvider(ManifestResourceDispositionCache clrResourcesCache, DiffOptions diffOptions);
    protected virtual int GetKey(ResourcesFolderNode node);
    protected virtual int GetPairWeight(ResourcesFolderNode old, ResourcesFolderNode new);
    protected virtual NodeDiffState CalculateDiffState(ResourcesFolderNode old, ResourcesFolderNode new, IDiffNode parent);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.PairingProviders.TopLevelEntryPointDiffPairingProvider : DiffPairingProvider`2<TopLevelEntryPointNode, int> {
    public TopLevelEntryPointDiffPairingProvider(DiffOptions diffOptions);
    protected virtual int GetKey(TopLevelEntryPointNode node);
    protected virtual int GetPairWeight(TopLevelEntryPointNode old, TopLevelEntryPointNode new);
    protected virtual NodeDiffState CalculateDiffState(TopLevelEntryPointNode old, TopLevelEntryPointNode new, IDiffNode parent);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyDiff.Presenters.DiffNodePresenterBase`1 : object {
    public sealed virtual bool IsApplicable(IDiffNode node);
    public sealed virtual RichText Present(IDiffNode node, PresentationState state);
    [CanBeNullAttribute]
protected abstract virtual RichText Present(TDiffNode node, PresentationState state);
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyDiff.Presenters.IDiffNodePresenter {
    public abstract virtual bool IsApplicable(IDiffNode node);
    [CanBeNullAttribute]
public abstract virtual RichText Present(IDiffNode node, PresentationState state);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.Presenters.NuGetDependencyDiffNodePresenter : DiffNodePresenterBase`1<IDiffNode`1<NuGetDependencyNode>> {
    [NotNullAttribute]
private AssemblyExplorerStyles myAssemblyExplorerStyles;
    public NuGetDependencyDiffNodePresenter(AssemblyExplorerStyles assemblyExplorerStyles);
    protected virtual RichText Present(IDiffNode`1<NuGetDependencyNode> node, PresentationState state);
    private void AppendDiff(RichText richText, string oldText, string newText, PresentationState state);
    private static string GetInclude(PackageDependency dependency);
    private static string GetExclude(PackageDependency dependency);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.Presenters.PersistentFolderDiffNodePresenter : DiffNodePresenterBase`1<PersistentFolderDiffNode> {
    [NotNullAttribute]
private AssemblyExplorerStyles myAssemblyExplorerStyles;
    public PersistentFolderDiffNodePresenter(AssemblyExplorerStyles assemblyExplorerStyles);
    protected virtual RichText Present(PersistentFolderDiffNode node, PresentationState state);
    protected virtual FileSystemPath TransformPath(FileSystemPath path);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.PropertiesProviders.AssemblyDiffNodePropertiesProvider : AssemblyDiffSubtreeNodePropertiesProvider {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual GridData GetProperties(IExplorerNode explorerNode);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyDiff.PropertiesProviders.AssemblyDiffSubtreeNodePropertiesProvider : AssemblyLocationDiffNodePropertiesProvider {
}
[SolutionFeaturePartAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.PropertiesProviders.AssemblyLocationDiffNodePropertiesProvider : PathDiffNodePropertiesProvider {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual GridData GetProperties(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.PropertiesProviders.DeclaredElementDiffNodePropertiesProvider : AssemblyDiffSubtreeNodePropertiesProvider {
    private IPsiFiles myPsiFiles;
    public DeclaredElementDiffNodePropertiesProvider(IPsiFiles psiFiles);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual GridData GetProperties(IExplorerNode explorerNode);
    [CanBeNullAttribute]
protected IDeclaredElement GetDeclaredElement(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.PropertiesProviders.NuGetPackageDiffNodePropertiesProvider : PathDiffNodePropertiesProvider {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual GridData GetProperties(IExplorerNode explorerNode);
    private ValueTuple`2<INuGetPackageNode, INuGetPackageNode> GetNuGetPackages(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyDiff.PropertiesProviders.PathDiffNodePropertiesProvider : object {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual GridData GetProperties(IExplorerNode explorerNode);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.ActionRequiringPdb : object {
    [CanBeNullAttribute]
protected PdbInfo GetPdbInfo(IDataContext context, bool tryToDownloadPdb, Boolean& pdbCanBeDownloaded);
    protected abstract virtual IAssemblyFile GetAssemblyFile(IDataContext context);
    public abstract virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public abstract virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "ExploreFolDerActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.AssemblyExplorerAddFolderActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "AssemblyExplorerAddItemsActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.AssemblyExplorerAddItemsActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    internal static string GetFilter(PersistentModelManager persistentModelManager);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.AssemblyExplorerDiffNodePathActionBase : AssemblyExplorerPathActionBase`1<IFileSystemPathNode> {
    protected bool IsOld { get; }
    protected string SingleItemText { get; }
    protected abstract virtual bool get_IsOld();
    protected abstract virtual string get_SingleItemText();
    protected virtual bool Update(FileSystemPath path, IDataContext context, ActionPresentation presentation);
    protected virtual IFileSystemPathNode GetNode(TreeModelNode node);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "LoadActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.AssemblyExplorerLoadNodeAction : AssemblyExplorerLoadUnloadNodeActionBase {
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.AssemblyExplorerLoadUnloadNodeActionBase : object {
    private bool myDoLoad;
    protected AssemblyExplorerLoadUnloadNodeActionBase(bool doLoad);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private static IEnumerable`1<IUnloadablePersistentNode> GetUnloadableNodes(IDataContext context);
    [CompilerGeneratedAttribute]
private bool <Update>b__2_0(IUnloadablePersistentNode node);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.AssemblyExplorerPathActionBase`1 : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    protected abstract virtual void PathAction(FileSystemPath path);
    protected virtual bool Update(FileSystemPath path, IDataContext context, ActionPresentation presentation);
    [CanBeNullAttribute]
private FileSystemPath GetPath(IDataContext context);
    [CanBeNullAttribute]
protected static TreeModelNode GetNode(IDataContext context);
    protected virtual TFileSystemPathNode GetNode(TreeModelNode node);
    [CanBeNullAttribute]
protected virtual IZipFileNode FindUpperParentZip(TFileSystemPathNode fileSystemPathNode);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "RemoveItemFromListActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.AssemblyExplorerRemoveItemsActionHandler : SimpleOverridingActionHandler {
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private IEnumerable`1<IPersistentNode> GetPersistentNodes(IDataContext context);
    protected virtual bool IsAvailable(IDataContext context);
    protected virtual void ExecuteInternal(IDataContext context);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "UnloadActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.AssemblyExplorerUnloadNodeAction : AssemblyExplorerLoadUnloadNodeActionBase {
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "ClearAssemblyListActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.ClearWorkspaceActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.CopyDiffNodeItemFullPathAction : AssemblyExplorerDiffNodePathActionBase {
    protected string SingleItemText { get; }
    protected virtual string get_SingleItemText();
    protected virtual void PathAction(FileSystemPath path);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "CopyFullPathActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.CopyItemFullPathActionHandler : AssemblyExplorerPathActionBase`1<IFileSystemPathNode> {
    protected virtual void PathAction(FileSystemPath path);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "CopySecondItemFullPathActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.CopyItemNewFullPathActionHandler : CopyDiffNodeItemFullPathAction {
    protected bool IsOld { get; }
    protected virtual bool get_IsOld();
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "CopyFirstItemFullPathActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.CopyItemOldFullPathActionHandler : CopyDiffNodeItemFullPathAction {
    protected bool IsOld { get; }
    protected virtual bool get_IsOld();
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "ExtractBundleContentsToFolderActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.ExtractBundleContentsActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    [CanBeNullAttribute]
private static BundleManifest TryGetBundleHeader(IDataContext context, VirtualFileSystemPath& bundleLocation);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "ExtractToFileActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.ExtractFileFromBundleActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    [CanBeNullAttribute]
private static BundleFileEntryLocation TryGetBundleFileEntryLocation(IDataContext context);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "ExtractToFileActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.ExtractMetadataBlobToFileActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    [CanBeNullAttribute]
private static BlobNode TryGetBlobNode(IDataContext context);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "ShowStrings_ActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.Internal.ShowStringsActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    [CanBeNullAttribute]
private IAssemblyFile TryGetAssemblyFile(IDataContext context);
    public static void DumpToNotepad(Action`1<StreamWriter> writer);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "ShowXmlDocLocations_ActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.Internal.ShowXmlDocLocationsActionHandler : object {
    [NotNullAttribute]
private IList`1<IAssemblyFile> GetAssemblies(IDataContext context);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.Internal.ZoneMarker : object {
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.LocateDiffNodeItemInFileExplorerActionBase : AssemblyExplorerDiffNodePathActionBase {
    protected string SingleItemText { get; }
    protected virtual string get_SingleItemText();
    protected virtual void PathAction(FileSystemPath path);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "LocateInFileExplorerActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.LocateItemInFileExplorerActionHandler : AssemblyExplorerPathActionBase`1<IFileSystemPathNode> {
    protected virtual void PathAction(FileSystemPath path);
    protected virtual bool Update(FileSystemPath path, IDataContext context, ActionPresentation presentation);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "LocateSecondItemInFileExplorerActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.LocateItemNewInFileExplorerActionHandler : LocateDiffNodeItemInFileExplorerActionBase {
    protected bool IsOld { get; }
    protected virtual bool get_IsOld();
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "LocateFirstItemInFileExplorerActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.LocateItemOldInFileExplorerActionHandler : LocateDiffNodeItemInFileExplorerActionBase {
    protected bool IsOld { get; }
    protected virtual bool get_IsOld();
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "OpenInBrowserActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.NavigateToAssemblyRepositoryActionHandler : ActionRequiringPdb {
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    protected virtual IAssemblyFile GetAssemblyFile(IDataContext context);
    [CanBeNullAttribute]
private string TryGetRepositoryUrl(IDataContext context, bool tryToDownloadPdb, Boolean& pdbCanBeDownloaded);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "OpenInBrowserActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.NavigateToNuGetPackageRepositoryActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    [CanBeNullAttribute]
private static string TryGetRepositoryUrl(IDataContext context);
}
public static class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.NavigateToRepositoryUtil : object {
    private static string GitHubUserContent;
    private static string GitHub;
    private static string BlobPart;
    private static string TreePart;
    private static string HttpPrefix;
    private static string HttpsPrefix;
    private static string SeparatorString;
    private static char Separator;
    private static int CommitPartLength;
    [CanBeNullAttribute]
public static string ComposeUrl(string repositoryUrl, string commit);
    [NotNullAttribute]
public static string ConvertToGitHubSourceUrl(string gitHubUserContentSourceUrl);
    [NotNullAttribute]
private static string ConvertToGitHubRepositoryUrl(string gitHubUserContentRepositoryUrl);
    [NotNullAttribute]
private static string ConvertToGitHubUrl(string gitHubUserContentUrl, string folderBeforeCommit);
    public static int FindCommitIndex(string url);
    private static int FindCommitEndIndex(string url);
    [NotNullAttribute]
public static string ToShortPresentation(string url);
    [NotNullAttribute]
private static string ToCommitUrl(string url);
    [NotNullAttribute]
private static string GetCommitUrl(string uriPattern);
    [NotNullAttribute]
private static string FindCommonFolder(string path1, string path2);
    [CanBeNullAttribute]
public static string GetRepositoryUrl(SourceLink sourceLink);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "OpenInBrowserActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.NavigateToSourceInRepositoryActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    [CanBeNullAttribute]
private static IReadOnlyCollection`1<ValueTuple`2<string, string>> TryGetSourceUrls(IDataContext context, bool tryToDownloadPdb, Boolean& pdbCanBeDownloaded);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "OpenAssemblyListActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.OpenAssemblyListActionHandler : object {
    public static string AssemblyListFilter { get; }
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public static string get_AssemblyListFilter();
    public static void Execute(ISolution solution, IAssemblyExplorerManager assemblyExplorerManager, FileSystemPath path);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "SaveAssemblyListActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.SaveAssemblyListActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public static void Execute(ISolution solution, IAssemblyExplorerManager assemblyExplorerManager, FileSystemPath path);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "ShowPDBContentForAssemblyActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Actions.ShowPdbContentForAssemblyActionHandler : ActionRequiringPdb {
    protected virtual IAssemblyFile GetAssemblyFile(IDataContext context);
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "ShowAtRootLevelActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.AddToRoot.AssemblyExplorerAddToRootAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private IList`1<FileSystemPath> GetPaths(IList`1<TreeModelNode> nodes, IEnumerable`1<IAssemblyExplorerCanAddNodeToRoot> addToRootHandlers);
}
[ShellComponentAttribute("16")]
internal class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.AddToRoot.AssemblyExplorerCanAddCommonFileSystemBasedNodes : object {
    public sealed virtual FileSystemPath GetPathToAdd(IExplorerNode node);
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.AddToRoot.IAssemblyExplorerCanAddNodeToRoot {
    [CanBeNullAttribute]
public abstract virtual FileSystemPath GetPathToAdd(IExplorerNode assemblyExplorerCanAddNodeToRoot);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.AssemblyDiffExplorerManager : AssemblyExplorerManagerBase {
    [CompilerGeneratedAttribute]
private IProperty`1<DiffMode> <DiffMode>k__BackingField;
    public IProperty`1<DiffMode> DiffMode { get; private set; }
    public AssemblyDiffExplorerManager(Lifetime lifetime, ISolution solution, IShellLocks shellLocks, IPsiFiles psiFiles, IPsiModules psiModules, IPsiCachesState psiCachesState, AssemblyDiffExplorerPersistence assemblyDiffExplorerPersistence, ExplorerModelManager explorerModelManager, ChangeManager changeManager, AsyncCommitService commitService, UITaskExecutor uiTaskExecutor, IUIApplication uiApplication, ISettingsStore settingsStore, IActionManager actionManager, IAssemblyExplorerComparerProvider assemblyExplorerComparerProvider, PersistentModelManager persistentModelManager, SolutionFeaturePartsContainer parts, ElementSearchCache elementSearchCache, AssemblyExplorerDescriptorSettings assemblyExplorerSettings, IGroupingEventFactory groupingEventFactory);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.ExternalSources.AssemblyExplorer.AssemblyDiffExplorerManager/<InitDiffMode>d__1")]
private Task InitDiffMode();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<DiffMode> get_DiffMode();
    [CompilerGeneratedAttribute]
private void set_DiffMode(IProperty`1<DiffMode> value);
    protected virtual IAssemblyExplorerDescriptor CreateDescriptorNew(Lifetime lifetime, ISolution solution, IAssemblyExplorerModel model, IAssemblyExplorerPersistence assemblyExplorerPersistence, IEnumerable`1<INodeSearchProvider> nodeSearchProviders, IAssemblyExplorerComparerProvider assemblyExplorerComparerProvider, StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, ExplorerModelManager explorerModelManager, ElementSearchCache elementSearchCache, UITaskExecutor uiTaskExecutor, IUIApplication uiApplication, ChangeManager changeManager, AsyncCommitService commitService, IPsiCachesState psiCachesState, IPsiModules psiModules, IGroupingEventFactory groupingEventFactory, IShellLocks locks);
    protected virtual IAssemblyExplorerDescriptor CreateDescriptor(ISolution solution, IShellLocks shellLocks, IPsiFiles psiFiles, IPsiModules psiModules, IPsiCachesState psiCaches, IAssemblyExplorerPersistence assemblyExplorerPersistence, bool clearAssemblyList, ExplorerModelManager explorerModelManager, ChangeManager changeManager, UITaskExecutor uiTaskExecutor, IUIApplication uiApplication, ISettingsStore settingsStore, IActionManager actionManager, IAssemblyExplorerComparerProvider assemblyExplorerComparerProvider, PersistentModelManager persistentModelManager, SolutionFeaturePartsContainer solutionFeaturePartsContainer, ElementSearchCache elementSearchCache);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.AssemblyDiffExplorerPersistence : AssemblyExplorerPersistenceBase {
    protected string RootTagName { get; }
    public AssemblyDiffExplorerPersistence(Lifetime lifetime, ISettingsStore settingsStore, PersistentModelManager persistentModelManager, ISolution solution);
    protected virtual string get_RootTagName();
    protected virtual string GetAssemblyExplorerStateFromSettings();
    protected virtual void SetAssemblyExplorerStateToSettings(string state);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.AssemblyExplorer : object {
    [CompilerGeneratedAttribute]
private IAssemblyExplorerDescriptor <Descriptor>k__BackingField;
    public IAutomation Content { get; }
    public IAssemblyExplorerDescriptor Descriptor { get; }
    [CanBeNullAttribute]
public IFocusablePanel FocusablePanel { get; }
    public AssemblyExplorer(IAssemblyExplorerDescriptor assemblyExplorerDescriptor);
    public IAutomation get_Content();
    [CompilerGeneratedAttribute]
public IAssemblyExplorerDescriptor get_Descriptor();
    public IFocusablePanel get_FocusablePanel();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.AssemblyExplorerDescriptorSettings : object {
    [CompilerGeneratedAttribute]
private bool <UseNewTree>k__BackingField;
    public bool UseNewTree { get; }
    public AssemblyExplorerDescriptorSettings(Lifetime lifetime, ISettingsStore settingsStore, ISolution solution);
    [CompilerGeneratedAttribute]
public virtual bool get_UseNewTree();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.AssemblyExplorerManager : AssemblyExplorerManagerBase {
    public AssemblyExplorerManager(Lifetime lifetime, ISolution solution, IShellLocks shellLocks, IPsiFiles psiFiles, IPsiModules psiModules, IPsiCachesState psiCachesState, AssemblyExplorerPersistence assemblyExplorerPersistence, ExplorerModelManager explorerModelManager, ChangeManager changeManager, AsyncCommitService commitService, UITaskExecutor uiTaskExecutor, IUIApplication uiApplication, ISettingsStore settingsStore, IActionManager actionManager, IAssemblyExplorerComparerProvider assemblyExplorerComparerProvider, PersistentModelManager persistentModelManager, SolutionFeaturePartsContainer parts, ElementSearchCache elementSearchCache, AssemblyExplorerDescriptorSettings assemblyExplorerSettings, IGroupingEventFactory groupingEventFactory);
    protected virtual IAssemblyExplorerDescriptor CreateDescriptorNew(Lifetime lifetime, ISolution solution, IAssemblyExplorerModel model, IAssemblyExplorerPersistence assemblyExplorerPersistence, IEnumerable`1<INodeSearchProvider> nodeSearchProviders, IAssemblyExplorerComparerProvider assemblyExplorerComparerProvider, StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, ExplorerModelManager explorerModelManager, ElementSearchCache elementSearchCache, UITaskExecutor uiTaskExecutor, IUIApplication uiApplication, ChangeManager changeManager, AsyncCommitService commitService, IPsiCachesState psiCachesState, IPsiModules psiModules, IGroupingEventFactory groupingEventFactory, IShellLocks locks);
    protected virtual IAssemblyExplorerDescriptor CreateDescriptor(ISolution solution, IShellLocks shellLocks, IPsiFiles psiFiles, IPsiModules psiModules, IPsiCachesState psiCaches, IAssemblyExplorerPersistence assemblyExplorerPersistence, bool clearAssemblyList, ExplorerModelManager explorerModelManager, ChangeManager changeManager, UITaskExecutor uiTaskExecutor, IUIApplication uiApplication, ISettingsStore settingsStore, IActionManager actionManager, IAssemblyExplorerComparerProvider assemblyExplorerComparerProvider, PersistentModelManager persistentModelManager, SolutionFeaturePartsContainer solutionFeaturePartsContainer, ElementSearchCache elementSearchCache);
    public virtual Task`1<AssemblyExplorer> EnsureOpenAndReady();
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.AssemblyExplorerManagerBase : object {
    protected AssemblyExplorer myOpened;
    protected Lifetime myLifetime;
    private bool myUseNewTree;
    protected ISolution mySolution;
    protected IShellLocks myShellLocks;
    private IPsiFiles myPsiFiles;
    protected IPsiModules myPsiModules;
    private IPsiCachesState myPsiCachesState;
    protected IAssemblyExplorerDescriptor myAssemblyExplorerDescriptor;
    protected IAssemblyExplorerPersistence myAssemblyExplorerPersistence;
    private ExplorerModelManager myExplorerModelManager;
    private ChangeManager myChangeManager;
    private AsyncCommitService myCommitService;
    private UITaskExecutor myUITaskExecutor;
    private IUIApplication myUIApplication;
    protected ISettingsStore mySettingsStore;
    private IActionManager myActionManager;
    private IAssemblyExplorerComparerProvider myAssemblyExplorerComparerProvider;
    private PersistentModelManager myPersistentModelManager;
    protected SolutionFeaturePartsContainer myParts;
    protected ElementSearchCache myElementSearchCache;
    [NotNullAttribute]
private IGroupingEventFactory myGroupingEventFactory;
    [CompilerGeneratedAttribute]
private ISignal`1<EventArgs> <DescriptorReloadedSignal>k__BackingField;
    public ISignal`1<EventArgs> DescriptorReloadedSignal { get; }
    public AssemblyExplorer Opened { get; }
    [CanBeNullAttribute]
protected IAssemblyExplorerModel AssemblyExplorerModel { get; }
    protected AssemblyExplorerManagerBase(Lifetime lifetime, ISolution solution, IShellLocks shellLocks, IPsiFiles psiFiles, IPsiModules psiModules, IPsiCachesState psiCachesState, IAssemblyExplorerPersistence assemblyExplorerPersistence, ExplorerModelManager explorerModelManager, ChangeManager changeManager, AsyncCommitService commitService, UITaskExecutor uiTaskExecutor, IUIApplication uiApplication, ISettingsStore settingsStore, IActionManager actionManager, IAssemblyExplorerComparerProvider assemblyExplorerComparerProvider, PersistentModelManager persistentModelManager, SolutionFeaturePartsContainer parts, ElementSearchCache elementSearchCache, AssemblyExplorerDescriptorSettings assemblyExplorerSettings, IGroupingEventFactory groupingEventFactory);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<EventArgs> get_DescriptorReloadedSignal();
    protected IAssemblyExplorerDescriptor EnsureAssemblyExplorerDescriptor(Lifetime lifetime, bool clearAssemblyList);
    protected abstract virtual IAssemblyExplorerDescriptor CreateDescriptorNew(Lifetime lifetime, ISolution solution, IAssemblyExplorerModel model, IAssemblyExplorerPersistence assemblyExplorerPersistence, IEnumerable`1<INodeSearchProvider> nodeSearchProviders, IAssemblyExplorerComparerProvider assemblyExplorerComparerProvider, StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, ExplorerModelManager explorerModelManager, ElementSearchCache elementSearchCache, UITaskExecutor uiTaskExecutor, IUIApplication uiApplication, ChangeManager changeManager, AsyncCommitService commitService, IPsiCachesState psiCachesState, IPsiModules psiModules, IGroupingEventFactory groupingEventFactory, IShellLocks locks);
    protected abstract virtual IAssemblyExplorerDescriptor CreateDescriptor(ISolution solution, IShellLocks shellLocks, IPsiFiles psiFiles, IPsiModules psiModules, IPsiCachesState psiCaches, IAssemblyExplorerPersistence assemblyExplorerPersistence, bool clearAssemblyList, ExplorerModelManager explorerModelManager, ChangeManager changeManager, UITaskExecutor uiTaskExecutor, IUIApplication uiApplication, ISettingsStore settingsStore, IActionManager actionManager, IAssemblyExplorerComparerProvider assemblyExplorerComparerProvider, PersistentModelManager persistentModelManager, SolutionFeaturePartsContainer solutionFeaturePartsContainer, ElementSearchCache elementSearchCache);
    public sealed virtual AssemblyExplorer get_Opened();
    public virtual void Open();
    public virtual void NavigateToTreeModelNode(TreeModelNode node, bool transferFocus);
    public virtual void NavigateToTreeModelNode(IExplorerNode node, bool transferFocus);
    public sealed virtual void AddItemsByNodeData(IEnumerable`1<INodeData> nodeDatas);
    public sealed virtual void AddItemsByPath(IEnumerable`1<FileSystemPath> paths);
    public sealed virtual bool AddDiffItemByPaths(FileSystemPath oldPath, FileSystemPath newPath);
    private bool AddItems(Func`2<IAssemblyExplorerModel, IList`1<IPersistentNode>> addItems);
    public sealed virtual bool CanAddItemByPath(FileSystemPath path);
    public sealed virtual void LoadModelFromTextReader(TextReader assemblyListReader);
    public sealed virtual void SaveModelToTextWriter(TextWriter assemblyListWriter);
    public sealed virtual void ClearModel();
    private void EnsureOpened();
    protected virtual void ShowExplorer();
    public sealed virtual void RequestFullUpdate();
    protected void NavigateToAssemblyExplorer(IExplorerNode explorerNode);
    protected IAssemblyExplorerModel get_AssemblyExplorerModel();
    protected void InitDescriptor(LifetimeDefinition& descriptorLifetime);
    [CompilerGeneratedAttribute]
private void <InitDescriptor>b__48_0();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.AssemblyExplorerPersistence : AssemblyExplorerPersistenceBase {
    protected string RootTagName { get; }
    public AssemblyExplorerPersistence(Lifetime lifetime, ISettingsStore settingsStore, PersistentModelManager persistentModelManager, ISolution solution);
    protected virtual string get_RootTagName();
    protected virtual string GetAssemblyExplorerStateFromSettings();
    protected virtual void SetAssemblyExplorerStateToSettings(string state);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.AssemblyExplorerPersistenceBase : object {
    private Lifetime myLifetime;
    private PersistentModelManager myPersistentModelManager;
    protected IContextBoundSettingsStoreLive mySettingsStoreLive;
    protected string RootTagName { get; }
    protected AssemblyExplorerPersistenceBase(Lifetime lifetime, ISettingsStore settingsStore, PersistentModelManager persistentModelManager, ISolution solution);
    protected abstract virtual string get_RootTagName();
    protected abstract virtual string GetAssemblyExplorerStateFromSettings();
    protected abstract virtual void SetAssemblyExplorerStateToSettings(string state);
    public virtual void LoadModelFromSettings(IAssemblyExplorerModel model);
    public virtual void LoadModelFromTextReader(IAssemblyExplorerModel model, TextReader reader);
    public virtual void SaveModelToSettings(IAssemblyExplorerModel model);
    public virtual void SaveModelToTextWriter(IAssemblyExplorerModel model, TextWriter writer);
    private XmlElement SerializeModel(IAssemblyExplorerModel model);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.AssemblyExplorerStyles : object {
    private IColorThemeManager myColorThemeManager;
    [CompilerGeneratedAttribute]
private TextStyle <InfoTextStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private TextStyle <UsageTextStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private TextStyle <EmphasizedTextStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private TextStyle <MetadataTokenTextStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private TextStyle <BaseInheritorsTextStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private TextStyle <DiffAddedTextStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private TextStyle <DiffRemovedTextStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private TextStyle <DiffChangedTextStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private TextStyle <DiffAddedPartTextStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private TextStyle <DiffRemovedPartTextStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private TextStyle <DiffChangedPartTextStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private TextStyle <DiffAddedPartSelectedTextStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private TextStyle <DiffRemovedPartSelectedTextStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private TextStyle <DiffChangedPartSelectedTextStyle>k__BackingField;
    public TextStyle InfoTextStyle { get; protected set; }
    public TextStyle UsageTextStyle { get; protected set; }
    public TextStyle EmphasizedTextStyle { get; protected set; }
    public TextStyle MetadataTokenTextStyle { get; protected set; }
    public TextStyle BaseInheritorsTextStyle { get; protected set; }
    public TextStyle DiffAddedTextStyle { get; protected set; }
    public TextStyle DiffRemovedTextStyle { get; protected set; }
    public TextStyle DiffChangedTextStyle { get; protected set; }
    public TextStyle DiffAddedPartTextStyle { get; protected set; }
    public TextStyle DiffRemovedPartTextStyle { get; protected set; }
    public TextStyle DiffChangedPartTextStyle { get; protected set; }
    public TextStyle DiffAddedPartSelectedTextStyle { get; protected set; }
    public TextStyle DiffRemovedPartSelectedTextStyle { get; protected set; }
    public TextStyle DiffChangedPartSelectedTextStyle { get; protected set; }
    public AssemblyExplorerStyles(Lifetime lifetime, IColorThemeManager colorThemeManager);
    protected AssemblyExplorerStyles(Lifetime lifetime, IColorThemeManager colorThemeManager, bool invalidateStylesOnThemeChange);
    [CompilerGeneratedAttribute]
public virtual TextStyle get_InfoTextStyle();
    [CompilerGeneratedAttribute]
protected virtual void set_InfoTextStyle(TextStyle value);
    [CompilerGeneratedAttribute]
public virtual TextStyle get_UsageTextStyle();
    [CompilerGeneratedAttribute]
protected virtual void set_UsageTextStyle(TextStyle value);
    [CompilerGeneratedAttribute]
public virtual TextStyle get_EmphasizedTextStyle();
    [CompilerGeneratedAttribute]
protected virtual void set_EmphasizedTextStyle(TextStyle value);
    [CompilerGeneratedAttribute]
public virtual TextStyle get_MetadataTokenTextStyle();
    [CompilerGeneratedAttribute]
protected virtual void set_MetadataTokenTextStyle(TextStyle value);
    [CompilerGeneratedAttribute]
public virtual TextStyle get_BaseInheritorsTextStyle();
    [CompilerGeneratedAttribute]
protected virtual void set_BaseInheritorsTextStyle(TextStyle value);
    [CompilerGeneratedAttribute]
public virtual TextStyle get_DiffAddedTextStyle();
    [CompilerGeneratedAttribute]
protected virtual void set_DiffAddedTextStyle(TextStyle value);
    [CompilerGeneratedAttribute]
public virtual TextStyle get_DiffRemovedTextStyle();
    [CompilerGeneratedAttribute]
protected virtual void set_DiffRemovedTextStyle(TextStyle value);
    [CompilerGeneratedAttribute]
public virtual TextStyle get_DiffChangedTextStyle();
    [CompilerGeneratedAttribute]
protected virtual void set_DiffChangedTextStyle(TextStyle value);
    [CompilerGeneratedAttribute]
public virtual TextStyle get_DiffAddedPartTextStyle();
    [CompilerGeneratedAttribute]
protected virtual void set_DiffAddedPartTextStyle(TextStyle value);
    [CompilerGeneratedAttribute]
public virtual TextStyle get_DiffRemovedPartTextStyle();
    [CompilerGeneratedAttribute]
protected virtual void set_DiffRemovedPartTextStyle(TextStyle value);
    [CompilerGeneratedAttribute]
public virtual TextStyle get_DiffChangedPartTextStyle();
    [CompilerGeneratedAttribute]
protected virtual void set_DiffChangedPartTextStyle(TextStyle value);
    [CompilerGeneratedAttribute]
public virtual TextStyle get_DiffAddedPartSelectedTextStyle();
    [CompilerGeneratedAttribute]
protected virtual void set_DiffAddedPartSelectedTextStyle(TextStyle value);
    [CompilerGeneratedAttribute]
public virtual TextStyle get_DiffRemovedPartSelectedTextStyle();
    [CompilerGeneratedAttribute]
protected virtual void set_DiffRemovedPartSelectedTextStyle(TextStyle value);
    [CompilerGeneratedAttribute]
public virtual TextStyle get_DiffChangedPartSelectedTextStyle();
    [CompilerGeneratedAttribute]
protected virtual void set_DiffChangedPartSelectedTextStyle(TextStyle value);
    private void InvalidateStyles(bool darkTheme);
    private JetRgbaColor GetTransparentColor(ThemeColor color, double opacity);
    [CompilerGeneratedAttribute]
private void <.ctor>b__58_0(PropertyChangedEventArgs`1<bool> v);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Comparers.AssemblyExplorerComparer : TreeModelBrowserComparer {
    private IEnumerable`1<IDependencyDefinition> JetBrains.Application.UI.TreeModels.New.ILiveTreeModelComparer.Dependencies { get; }
    public AssemblyExplorerComparer(IEnumerable`1<Type> extraTypes, Action`1<MultiTypeComparer> addExtraComparers);
    private static int CompareAssemblyFileNodes(IAssemblyFileNode x, IAssemblyFileNode y);
    private static int CompareFileSystemPathNodes(IFileSystemPathNode x, IFileSystemPathNode y);
    private int CompareDiffNodes(IDiffNode x, IDiffNode y);
    private static int CompareStringsOrdinalIgnoreCase(string x, string y);
    private static int GetFolderProviderNodeSpecificTypeWeight(IFolderLikeNode node);
    private static int CompareFolderLikeNodes(IFolderLikeNode x, IFolderLikeNode y);
    private static int CompareForwardedTypeNodes(ForwardedTypeNode x, ForwardedTypeNode y);
    private int CompareDeclaredElementNodes(DeclaredElementNode x, DeclaredElementNode y);
    private int CompareTreeModelNodes(TreeModelNode xNode, TreeModelNode yNode);
    private static int CompareAssemblyReferences(AssemblyNameInfo x, AssemblyNameInfo y);
    private static int CompareNonAssemblyFileDiffNode(NonAssemblyFileDiffNodeObsolete x, NonAssemblyFileDiffNodeObsolete y);
    private static int CompareDependencies(PackageDependency x, PackageDependency y);
    private static int CompareWin32Resources(ResourceDirectoryEntry x, ResourceDirectoryEntry y);
    internal static int CompareTargetFrameworks(NuGetFramework x, NuGetFramework y);
    protected virtual int CompareTypeMember(ITypeMember x, ITypeMember y);
    private static int GetTypeMemberWeight(ITypeMember x);
    private sealed virtual override int System.Collections.Generic.IComparer<JetBrains.Application.UI.TreeModels.New.ITreeModelNode>.Compare(ITreeModelNode x, ITreeModelNode y);
    private sealed virtual override IEnumerable`1<IDependencyDefinition> JetBrains.Application.UI.TreeModels.New.ILiveTreeModelComparer.get_Dependencies();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Comparers.AssemblyExplorerComparerProvider : object {
    public virtual AssemblyExplorerComparer GetComparer();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Comparers.IAssemblyExplorerComparerProvider {
    public abstract virtual AssemblyExplorerComparer GetComparer();
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Content.AssemblyBasedNode : object {
    protected ProjectModelElementEnvoy myOwnerEnvoy;
    [NotNullAttribute]
public ProjectModelElementEnvoy OwnerEnvoy { get; }
    [CanBeNullAttribute]
public IAssembly Owner { get; }
    protected AssemblyBasedNode(IAssembly owner);
    public ProjectModelElementEnvoy get_OwnerEnvoy();
    public IAssembly get_Owner();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Content.AssemblyDiffExplorerDescriptor : AssemblyExplorerDescriptor {
    public string ActionBarID { get; }
    public AssemblyDiffExplorerDescriptor(ISolution solution, IShellLocks shellLocks, IPsiFiles psiFiles, IPsiModules psiModules, IPsiCachesState psiCaches, IAssemblyExplorerPersistence assemblyExplorerPersistence, bool clearAssemblyList, ExplorerModelManager explorerModelManager, ChangeManager changeManager, UITaskExecutor uiTaskExecutor, IUIApplication uiApplication, ISettingsStore settingsStore, IActionManager actionManager, IAssemblyExplorerComparerProvider assemblyExplorerComparerProvider, PersistentModelManager persistentModelManager, SolutionFeaturePartsContainer solutionFeaturePartsContainer, ElementSearchCache elementSearchCache);
    public virtual string get_ActionBarID();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Content.AssemblyExplorerDescriptor : TreeModelBrowserDescriptorPsi {
    private IPsiModules myPsiModules;
    private TreeModelBrowserPresenter myPresenter;
    private AssemblyExplorerTreeModel myTreeModel;
    private GroupingEvent myRefreshEvent;
    private GroupingEvent mySaveModelToSettingsEvent;
    private IPsiCachesState myPsiCaches;
    private ExplorerModelManager myExplorerModelManager;
    private UITaskExecutor myUiTaskExecutor;
    private SolutionFeaturePartsContainer mySolutionFeaturePartsContainer;
    private ElementSearchCache myElementSearchCache;
    private PersistentModelManager myPersistentModelManager;
    private AssemblyExplorerModel myModel;
    private IShellLocks myShellLocks;
    private IPsiFiles myPsiFiles;
    [CompilerGeneratedAttribute]
private ISignal`1<EventArgs> <ReloadedSignal>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <RequestFullUpdateSignal>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Visible>k__BackingField;
    private bool myIsRefreshDropped;
    [CompilerGeneratedAttribute]
private IProperty`1<IFocusablePanel> <FocusablePanelWhenConnectedToView>k__BackingField;
    public ISignal`1<EventArgs> ReloadedSignal { get; }
    public ISimpleSignal RequestFullUpdateSignal { get; }
    public IProperty`1<bool> Visible { get; }
    public string ActionBarID { get; }
    public string ContextMenuID { get; }
    public TreeModel Model { get; }
    public IAssemblyExplorerModel AssemblyExplorerModel { get; }
    public IEnumerable`1<TreeModelNode> Roots { get; }
    public AssemblyExplorerTreeModel AssemblyExplorerTreeModel { get; }
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> Presenter { get; }
    public bool DragDropSupported { get; }
    public IProperty`1<IFocusablePanel> FocusablePanelWhenConnectedToView { get; }
    public bool QuickSearchSupported { get; }
    public FilteringMode FilteringMode { get; }
    public AssemblyExplorerDescriptor(ISolution solution, IShellLocks shellLocks, IPsiFiles psiFiles, IPsiModules psiModules, IPsiCachesState psiCaches, IAssemblyExplorerPersistence assemblyExplorerPersistence, bool clearAssemblyList, ExplorerModelManager explorerModelManager, ChangeManager changeManager, UITaskExecutor uiTaskExecutor, IUIApplication uiApplication, ISettingsStore settingsStore, IActionManager actionManager, IAssemblyExplorerComparerProvider assemblyExplorerComparerProvider, PersistentModelManager persistentModelManager, SolutionFeaturePartsContainer solutionFeaturePartsContainer, ElementSearchCache elementSearchCache);
    public AssemblyExplorerDescriptor(ISolution solution, IShellLocks shellLocks, IPsiFiles psiFiles, IPsiModules psiModules, IPsiCachesState psiCaches, ExplorerModelManager explorerModelManager, ChangeManager changeManager, UITaskExecutor uiTaskExecutor, IUIApplication uiApplication, ISettingsStore settingsStore, IActionManager actionManager, IAssemblyExplorerComparerProvider assemblyExplorerComparerProvider, PersistentModelManager persistentModelManager, SolutionFeaturePartsContainer solutionFeaturePartsContainer, ElementSearchCache elementSearchCache);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<EventArgs> get_ReloadedSignal();
    [CompilerGeneratedAttribute]
public ISimpleSignal get_RequestFullUpdateSignal();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_Visible();
    private void DisposeNodes();
    public virtual string get_ActionBarID();
    public virtual string get_ContextMenuID();
    public virtual TreeModel get_Model();
    public sealed virtual IAssemblyExplorerModel get_AssemblyExplorerModel();
    public sealed virtual IEnumerable`1<TreeModelNode> get_Roots();
    public AssemblyExplorerTreeModel get_AssemblyExplorerTreeModel();
    public virtual StructuredPresenter`2<TreeModelNode, IPresentableItem> get_Presenter();
    public sealed virtual void DragDrop(TreeModelNode node, RelativeLocation location, DragEventArgs data);
    public sealed virtual DragResponse Dragging(TreeModelNode node, DragEventArgs data);
    public sealed virtual DragDropEffects DragStarting(IList`1<TreeModelNode> selectedNodes, IDataObject dataObject);
    public virtual bool get_DragDropSupported();
    private void DoRefresh();
    public virtual bool AutoExpandOnQuickSearch(TreeModelNode node);
    public sealed virtual void ImmediateLoad();
    private void UnloadAll();
    private void UnloadAll(IPersistentNode node);
    public sealed virtual object Execute(IChangeMap changeMap);
    public virtual bool Navigate(TreeModelNode node, PopupWindowContextSource windowContext, bool transferFocus, TabOptions options);
    public sealed virtual void RequestFullUpdate();
    public sealed virtual bool HasAnyCachedChildren(TreeModelNode node);
    public sealed virtual void ImmediateTreeUpdate();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IFocusablePanel> get_FocusablePanelWhenConnectedToView();
    public virtual bool get_QuickSearchSupported();
    private IEnumerable`1<INodeSearchProvider> GetApplicableProviders(IExplorerNode node);
    public virtual Nullable`1<bool> IsQuickSearchAccepted(TreeModelNode node, string filter);
    private bool IsSearchAccepted(IExplorerNode explorerNode, IIdentifierMatcher matcher, Boolean& noApplicableProviders);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Content.AssemblyExplorerDescriptor/<PrepareQuickSearch>d__64")]
public virtual Task`1<bool> PrepareQuickSearch(string filter, Func`1<bool> checkForInterrupt);
    private static bool InBaseOrInheritorsSubtree(IExplorerNode node);
    public virtual bool ExpandNodeInitially(TreeModelNode modelNode);
    public virtual FilteringMode get_FilteringMode();
    private sealed virtual override LifetimeDefinition JetBrains.ReSharper.ExternalSources.AssemblyExplorer.IAssemblyExplorerDescriptor.get_LifetimeDefinition();
    [CompilerGeneratedAttribute]
private void <.ctor>b__25_0(Lifetime trueLifetime);
    [CompilerGeneratedAttribute]
private void <DoRefresh>b__46_0();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Content.AssemblyExplorerPresenter : TreeModelBrowserPresenter {
    private IProperty`1<bool> myShowMetadataTokenValuesProperty;
    public static DeclaredElementPresenterStyle TopLevelEntryPointStyle;
    public AssemblyExplorerPresenter(Lifetime lifetime, ISettingsStore settingsStore, IThreading threading);
    private static AssemblyExplorerPresenter();
    protected void PresentDeclaredElementNode(DeclaredElementNode value, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
    private void PresentDeclaredElementDiffNode(DeclaredElementDiffNodeObsolete value, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
    private void PresentTopLevelEntryPointNode(TopLevelEntryPointNode value, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
    protected virtual void AddTypeMemberInfo(ITypeMember typeMember, IPresentableItem item, TreeModelNode modelNode);
    protected virtual DeclaredElementPresenterStyle GetTypeMemberStyle(ITypeMember typeMember, TreeModelNode modelNode);
    private void PresentExplorerNode(IExplorerNode value, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
    private void PresentTreeModelNode(TreeModelNode value, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
    private void PresentDiffNode(IDiffNode value, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
    protected virtual bool IsNaturalParent(object parentValue, object childValue);
    protected virtual object Unwrap(object value);
    protected virtual void AppendMetadataToken(ICompiledElement compiledElement, IPresentableItem item);
    public static void AppendMetadataToken(IPresentableItem item, UInt32 token, AssemblyExplorerStyles assemblyExplorerStyles);
    protected virtual void AppendOccurrencesCount(IPresentableItem item, TreeModelNode node);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Content.AssemblyExplorerSession : object {
    private IPersistentNode myPersistentRoot;
    public IPersistentNode PersistentRoot { get; }
    public AssemblyExplorerModel Model { get; }
    public AssemblyExplorerSession(IPersistentNode persistentRoot);
    public sealed virtual IPersistentNode get_PersistentRoot();
    public sealed virtual AssemblyExplorerModel get_Model();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Content.AssemblyExplorerTreeModel : TreeDemandModel {
    private ISolution mySolution;
    private IAssemblyExplorerModel myModel;
    public AssemblyExplorerTreeModel(ISolution solution, IAssemblyExplorerModel model, AssemblyExplorerComparer comparer);
    protected virtual bool HasChildren(TreeModelNode modelNode);
    protected virtual IEnumerable GetChildren(TreeModelNode modelNode);
    public IExplorerNode[] GetOrAddNodesByPath(FileSystemPath[] paths);
    public bool HasAnyCachedChildren(TreeModelNode node);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "ContextActionPageUISettingsSettingDescription")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Content.AssemblyExplorerViewSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "UseNewTreeForAssemblyExplorerSettingDescription")]
public bool UseNewTree;
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Content.New.AssemblyDiffExplorerDescriptorNew : AssemblyExplorerDescriptorNew {
    public string ActionBarID { get; }
    public AssemblyDiffExplorerDescriptorNew(Lifetime lifetime, ISolution solution, IAssemblyExplorerModel model, IAssemblyExplorerPersistence assemblyExplorerPersistence, IEnumerable`1<INodeSearchProvider> nodeSearchProviders, IAssemblyExplorerComparerProvider assemblyExplorerComparerProvider, StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, ExplorerModelManager explorerModelManager, ElementSearchCache elementSearchCache, UITaskExecutor uiTaskExecutor, ChangeManager changeManager, AsyncCommitService commitService, IPsiCachesState psiCachesState, IPsiModules psiModules, IGroupingEventFactory groupingEventFactory, IShellLocks locks);
    public virtual string get_ActionBarID();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Content.New.AssemblyExplorerDescriptorNew : AsyncLiveTreeModelBrowserDescriptor {
    private IProperty`1<bool> myBusyIndicatorForPrepareCache;
    private IProperty`1<bool> myBusyIndicatorForProcessingNodes;
    [NotNullAttribute]
private List`1<IProperty`1<bool>> myBusyIndicators;
    private ElementSearchCache myElementSearchCache;
    private ExplorerModelManager myExplorerModelManager;
    private IGroupingEvent myFullTreeRefreshEvent;
    private IGroupingEvent myLoadModelEvent;
    [NotNullAttribute]
private IEnumerable`1<INodeSearchProvider> myNodeSearchProviders;
    private ISet`1<NodeWithAsyncChildren> myPendingNodes;
    private object myPendingNodesSync;
    private ISet`1<NodeWithAsyncChildren> myPendingWithLoadedModelNodes;
    private IGroupingEvent myProcessRequestedNodesEvent;
    [NotNullAttribute]
private IPsiModules myPsiModules;
    private IGroupingEvent mySaveModelToSettingsEvent;
    private SequentialLifetimes mySearchLifetimes;
    private UITaskExecutor myUITaskExecutor;
    [NotNullAttribute]
private IGroupingEvent myUpdateIsBusyStateGroupingEvent;
    private string myLastFilter;
    private IIdentifierMatcher myMatcher;
    [CompilerGeneratedAttribute]
private IAssemblyExplorerModel <AssemblyExplorerModel>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<EventArgs> <ReloadedSignal>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IFocusablePanel> <FocusablePanelWhenConnectedToView>k__BackingField;
    public bool ModelHandlesQuickSearch { get; }
    public string ActionBarID { get; }
    public string ContextMenuID { get; }
    public IAssemblyExplorerModel AssemblyExplorerModel { get; }
    public IEnumerable`1<TreeModelNode> Roots { get; }
    public IProperty`1<bool> Visible { get; }
    public ISignal`1<EventArgs> ReloadedSignal { get; }
    public IProperty`1<IFocusablePanel> FocusablePanelWhenConnectedToView { get; }
    public AssemblyExplorerDescriptorNew(Lifetime lifetime, ISolution solution, IAssemblyExplorerModel model, IAssemblyExplorerPersistence assemblyExplorerPersistence, IEnumerable`1<INodeSearchProvider> nodeSearchProviders, IAssemblyExplorerComparerProvider assemblyExplorerComparerProvider, StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, ExplorerModelManager explorerModelManager, ElementSearchCache elementSearchCache, UITaskExecutor uiTaskExecutor, ChangeManager changeManager, AsyncCommitService commitService, IPsiCachesState psiCachesState, IPsiModules psiModules, IGroupingEventFactory groupingEventFactory, IShellLocks locks);
    public virtual bool get_ModelHandlesQuickSearch();
    public virtual string get_ActionBarID();
    public virtual string get_ContextMenuID();
    [CompilerGeneratedAttribute]
public sealed virtual IAssemblyExplorerModel get_AssemblyExplorerModel();
    public sealed virtual IEnumerable`1<TreeModelNode> get_Roots();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_Visible();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<EventArgs> get_ReloadedSignal();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IFocusablePanel> get_FocusablePanelWhenConnectedToView();
    public sealed virtual void ImmediateTreeUpdate();
    public sealed virtual void RequestFullUpdate();
    public sealed virtual bool HasAnyCachedChildren(TreeModelNode node);
    public sealed virtual void ImmediateLoad();
    private sealed virtual override object JetBrains.Application.changes.IChangeProvider.Execute(IChangeMap changeMap);
    private void OnShowMetadataTokenValuesChanged();
    private void UpdatePresentationRecursively(IEnumerable`1<ITreeModelNode> children);
    private void OnShowCompilerGeneratedCodeChanged();
    private void OnShowDiffSettingsChanged();
    protected virtual AsyncLiveTreeModel CreateAsyncLiveTreeModel();
    protected virtual void WrapEvaluateNodes(Action evaluateNodes);
    public Task BeginLoad(Lifetime lifetime);
    public virtual bool AutoExpandOnQuickSearch(TreeModelNode node);
    public virtual Task`1<bool> PrepareQuickSearch(string filter, Func`1<bool> checkForInterrupt);
    protected virtual void HandleExpandNodeFailed(ICollection`1<NodeWithAsyncChildren> nodesToEvaluate);
    protected virtual void EvaluateNodes(ICollection`1<NodeWithAsyncChildren> nodesToEvaluate);
    private void ImmediateLoadModel();
    private void ImmediateLoadModelWithWriteLock();
    private void ProcessRequestedNodes();
    private void UnloadAll();
    private void UnloadAll(IPersistentNode node);
    private void HandleModelModification(AssemblyExplorerTreeModification modification);
    private void RefreshRecursively(ITreeModelNode node);
    public virtual bool Navigate(TreeModelNode node, PopupWindowContextSource windowContext, bool transferFocus, TabOptions options);
    private void HandleBusyIndicatorChangedImmediately();
    private void HandleBusyIndicatorChanged();
    protected virtual IIdentifierMatcher GetMatcher(string filter);
    private sealed virtual override LifetimeDefinition JetBrains.ReSharper.ExternalSources.AssemblyExplorer.IAssemblyExplorerDescriptor.get_LifetimeDefinition();
    [CompilerGeneratedAttribute]
private void <OnShowMetadataTokenValuesChanged>b__45_0();
    [CompilerGeneratedAttribute]
private void <RefreshRecursively>g__RefreshRecursivelyInternal|62_0(ITreeModelNode treeNode);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Content.New.AssemblyExplorerLiveModel : AsyncLiveTreeModel {
    public ITreeModelNode Root { get; }
    protected bool ShouldUpdateItemOnItemAdded { get; }
    protected bool ReadLockRequiresToResetChildren { get; }
    public AssemblyExplorerLiveModel(Lifetime lifetime, ReadWriteLock rwLock, StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, ITreeModelAdapter treeModelAdapter, IShellLocks locks, IFreeThreadedThrottlingGroupingEventFactory freeThreadedThrottlingGroupingEventFactory, INodeChildrenUpdaterFactory nodeChildrenUpdaterFactory);
    public ITreeModelNode get_Root();
    protected virtual bool get_ShouldUpdateItemOnItemAdded();
    protected virtual bool get_ReadLockRequiresToResetChildren();
}
internal class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Content.New.AssemblyExplorerLiveTreeModelNodeFactory : DefaultLiveTreeModelNodeFactory {
    public AssemblyExplorerLiveTreeModelNodeFactory(RichTextLiveTreeModel richTextLiveTreeModel, IFreeThreadedThrottlingGroupingEvent throttlingGroupingEvent);
    public virtual CompositeRichTextLiveTreeNode CreateRoot();
}
internal class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Content.New.AssemblyExplorerTreeAdapter : object {
    private ILogger myLogger;
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private IAssemblyExplorerModel myModel;
    private Queue`1<Action> myPendingOutgoingsBuilds;
    private AsyncCommitService myCommitService;
    private IPsiCachesState myCachesState;
    private ISet`1<object> myCalculatedNodes;
    public object RootNode { get; }
    public AssemblyExplorerTreeAdapter(Lifetime lifetime, IAssemblyExplorerModel model, AsyncCommitService commitService, IPsiCachesState psiCachesState);
    public sealed virtual object get_RootNode();
    public sealed virtual ICollection GetOutgoing(object node);
    public sealed virtual bool CanHaveChildren(object node);
    public sealed virtual bool IsOutgoingBuilt(object node);
    public sealed virtual Task BuildOutgoingAsync(object parentNode, IProgressIndicator progressIndicator, bool runSynchronous);
    private void BuildOutgoing(object parentNode);
    public sealed virtual bool SemanticCompare(object firstNode, object secondNode);
    public sealed virtual bool RecursionPreventionCompare(object firstNode, object secondNode);
    private object GetOriginalNode(object node);
    private bool CheckEquals(object firstNode, object secondNode);
    private sealed virtual override Action JetBrains.ReSharper.Psi.IAsyncCommitClient.BeforeCommit();
    private sealed virtual override void JetBrains.ReSharper.Psi.IAsyncCommitClient.OnInterrupt();
    private void ProcessBuildOutgoings();
    [CompilerGeneratedAttribute]
private void <JetBrains.ReSharper.Psi.IAsyncCommitClient.OnInterrupt>b__20_0();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Content.New.AssemblyExplorerTreeFilter : object {
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private IEnumerable`1<INodeSearchProvider> myProviders;
    [NotNullAttribute]
private Action`1<ITreeModelNode> myRequestEvaluate;
    [CanBeNullAttribute]
private IIdentifierMatcher myMatcher;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDependencyDefinition> <Dependencies>k__BackingField;
    private Instance myRootSource;
    private IDictionary`2<ITreeModelNode, Instance> mySources;
    private HashSet`1<ITreeModelNode> myMatchedNodes;
    public IEnumerable`1<IDependencyDefinition> Dependencies { get; }
    [CanBeNullAttribute]
public IIdentifierMatcher Matcher { get; public set; }
    public bool AppliesToCollections { get; }
    public bool AppliesToSingleElement { get; }
    public AssemblyExplorerTreeFilter(Lifetime lifetime, IEnumerable`1<INodeSearchProvider> providers, Action`1<ITreeModelNode> requestEvaluate);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<IDependencyDefinition> get_Dependencies();
    public IIdentifierMatcher get_Matcher();
    public void set_Matcher(IIdentifierMatcher value);
    public sealed virtual LiveTreeModelFilterMatchResult Matches(ITreeModelNode node);
    private LiveTreeModelFilterMatchResult MatchNode(ITreeModelNode node);
    private bool IsSearchAccepted(IExplorerNode explorerNode);
    private static bool InBaseOrInheritorsSubtree(IExplorerNode node);
    private IEnumerable`1<INodeSearchProvider> GetApplicableProviders(IExplorerNode node);
    public sealed virtual bool get_AppliesToCollections();
    public sealed virtual bool get_AppliesToSingleElement();
    private void Reevaluate();
    private void Reevaluate(ITreeModelNode node);
    public sealed virtual IDependency ConstructForCollection(IBindableView`1<TElement> sourceElements, IPathNavigator pathNavigator);
    public sealed virtual IDependency ConstructForElement(TElement sourceElement, IPathNavigator pathNavigator);
    private static bool AreRoots(ITreeModelNodeCollection nodes);
    private static bool IsRoot(ITreeModelNode node);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Core.AssemblyExplorerModel : object {
    private Lifetime myLifetime;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtendablePersistentNode <Root>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <PersistentModelChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <ModelChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<AssemblyExplorerTreeModification> <Modification>k__BackingField;
    public ISolution Solution { get; }
    public IExtendablePersistentNode Root { get; }
    public ISimpleSignal PersistentModelChanged { get; }
    public ISimpleSignal ModelChanged { get; }
    public ISignal`1<AssemblyExplorerTreeModification> Modification { get; }
    public AssemblyExplorerModel(Lifetime lifetime, ISolution solution);
    [CompilerGeneratedAttribute]
public sealed virtual ISolution get_Solution();
    [CompilerGeneratedAttribute]
public sealed virtual IExtendablePersistentNode get_Root();
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_PersistentModelChanged();
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_ModelChanged();
    public void ExpandRecursively(IExplorerNode node);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<AssemblyExplorerTreeModification> get_Modification();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Core.AssemblyExplorerModelExtensions : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IAssembly GetAssembly(IAssemblyExplorerModel model, IAssemblyLocation assemblyLocation);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Core.AssemblyExplorerTreeModification : NodePendingChange {
    public AssemblyExplorerTreeModification(IExplorerNode node);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Core.AssemblyExplorerUtil : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
internal static IExplorerNode ToExplorerNode(TreeModelNode treeModelNode);
    public static void SearchRecursive(TreeModelNode node, List`1<TreeModelNode> result, Func`2<IExplorerNode, bool> filter, Func`2<TreeModelNode, bool> stopCondition);
    public static void SearchRecursive(TreeModelNode node, List`1<TreeModelNode> result, AssemblyExplorerTreeModel assemblyExplorerTreeModel, Func`2<IExplorerNode, bool> filter);
    public static void SearchRecursive(IExplorerNode node, List`1<IExplorerNode> result, Func`2<IExplorerNode, bool> filter, Func`2<IExplorerNode, bool> stopCondition);
    public static void SearchRecursive(IExplorerNode node, List`1<IExplorerNode> result, AssemblyExplorerTreeModel assemblyExplorerTreeModel, Func`2<IExplorerNode, bool> filter);
    public static void SearchRecursiveStopAtVirtual(TreeModelNode node, List`1<TreeModelNode> result, Func`2<IExplorerNode, bool> filter);
    public static void SearchRecursiveStopAtVirtual(IExplorerNode node, List`1<IExplorerNode> result, Func`2<IExplorerNode, bool> filter);
    [ExtensionAttribute]
public static IEnumerable`1<ProjectModelElementEnvoy> ProjectElementsToEnvoy(IEnumerable`1<IProjectModelElement> elements);
    [ExtensionAttribute]
public static IEnumerable`1<IDeclaredElementEnvoy> ToEnvoys(IEnumerable`1<T> typeElements);
    [ExtensionAttribute]
public static IEnumerable`1<T> SelectValid(IEnumerable`1<T> elements);
    public static string GetProjectNameFromAssembly(IAssemblyFile assemblyFile);
    public static IAssemblyFile TryGetExistingAssemblyFile(IDataContext context, ISolution& solution, bool withRetargeting);
    [CanBeNullAttribute]
public static IList`1<IAssembly> TryGetExistingAssemblies(IDataContext context, ISolution& solution, bool withRetargeting);
    [CanBeNullAttribute]
public static IAssemblyFile TryGetExistingAssemblyFile(IAssemblyFile assemblyFile, ISolution solution, bool withRetargeting);
    [NotNullAttribute]
private static IAssemblyFile RetargetAssemblyFile(IAssemblyFile assemblyFile, ISolution solution);
    [CanBeNullAttribute]
public static IAssembly RetargetAssembly(IAssembly assembly, ISolution solution);
    [CanBeNullAttribute]
private static IAssemblyFile TryGetAssemblyFile(TreeModelNode assemblyNode);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Core.ExplorerModelManager : object {
    private ILogger myLogger;
    private SolutionFeaturePartsContainer myApplicableProviders;
    private IPsiFiles myPsiFiles;
    public ExplorerModelManager(ILogger logger, SolutionFeaturePartsContainer applicableProviders, IPsiFiles psiFiles);
    public static ExplorerModelManager GetInstance(ISolution solution);
    public ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
    public bool CanHaveChildren(IExplorerNode explorerNode);
    public bool CollectLoadActions(IExplorerNode node, List`1<Action`1<IProgressIndicator>> actions);
    private bool CollectLoadActionsRec(IExplorerNode node, List`1<Action`1<IProgressIndicator>> actions);
    public List`1<Action`1<IProgressIndicator>> CollectLoadActions(IAssemblyExplorerModel model, Boolean& longRunning);
    public ICollection`1<TreeModelNode> LocateNodes(object target, IEnumerable`1<TreeModelNode> roots);
    public ICollection`1<IExplorerNode> LocateNodes(object target, IEnumerable`1<IExplorerNode> roots);
    public void PresentExplorerNode(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
    public bool HasChildren(IExplorerNode explorerNode);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Core.ExplorerNode : object {
    [CompilerGeneratedAttribute]
private IExplorerNode <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssemblyExplorerModel <Model>k__BackingField;
    public IExplorerNode Parent { get; }
    public IAssemblyExplorerModel Model { get; }
    protected ExplorerNode(IAssemblyExplorerModel model, IExplorerNode parent);
    [CompilerGeneratedAttribute]
public sealed virtual IExplorerNode get_Parent();
    [CompilerGeneratedAttribute]
public sealed virtual IAssemblyExplorerModel get_Model();
    public virtual ICollection`1<IExplorerNode> GetChildren();
    public abstract virtual bool Equals(object obj);
    public abstract virtual int GetHashCode();
    public virtual bool HasChildren();
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Core.ExtendablePersistentNode : PersistentExplorerNode {
    protected ExtendablePersistentNode(Lifetime lifetime, IAssemblyExplorerModel model, IPersistentNode parent);
    public sealed virtual IPersistentNode AddChild(Func`2<Lifetime, IPersistentNode> nodeFactory);
    public sealed virtual bool RemoveChild(IPersistentNode node);
    public sealed virtual void Clear();
    public virtual ICollection`1<IExplorerNode> GetChildren();
    public virtual bool HasChildren();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Core.IAssemblyExplorerModel {
    public ISolution Solution { get; }
    public IExtendablePersistentNode Root { get; }
    public ISimpleSignal PersistentModelChanged { get; }
    public ISimpleSignal ModelChanged { get; }
    public ISignal`1<AssemblyExplorerTreeModification> Modification { get; }
    public abstract virtual ISolution get_Solution();
    public abstract virtual IExtendablePersistentNode get_Root();
    public abstract virtual ISimpleSignal get_PersistentModelChanged();
    public abstract virtual ISimpleSignal get_ModelChanged();
    public abstract virtual ISignal`1<AssemblyExplorerTreeModification> get_Modification();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Core.IAutoExpandOnQuickSearch {
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Core.IExplorerNode {
    [CanBeNullAttribute]
public IExplorerNode Parent { get; }
    [NotNullAttribute]
public IAssemblyExplorerModel Model { get; }
    public abstract virtual IExplorerNode get_Parent();
    public abstract virtual IAssemblyExplorerModel get_Model();
    public abstract virtual ICollection`1<IExplorerNode> GetChildren();
    public abstract virtual bool HasChildren();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Core.IExtendablePersistentNode {
    [CanBeNullAttribute]
public abstract virtual IPersistentNode AddChild(Func`2<Lifetime, IPersistentNode> nodeFactory);
    public abstract virtual bool RemoveChild(IPersistentNode node);
    public abstract virtual void Clear();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Core.IPersistentDiffNode {
    [NotNullAttribute]
public FileSystemPath OldPath { get; }
    [NotNullAttribute]
public FileSystemPath NewPath { get; }
    public abstract virtual FileSystemPath get_OldPath();
    public abstract virtual FileSystemPath get_NewPath();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Core.IPersistentDiffNodeProvider {
    public abstract virtual bool IsApplicable(FileSystemPath oldPath, FileSystemPath newPath);
    [CanBeNullAttribute]
public abstract virtual IPersistentNode CreateDiffNodeFromPaths(FileSystemPath oldPath, FileSystemPath newPath, IExtendablePersistentNode parent);
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Core.IPersistentNode {
    [NotNullAttribute]
public IReadOnlyList`1<IPersistentNode> PersistentChildren { get; }
    [CanBeNullAttribute]
public IPersistentNode Parent { get; }
    [NotNullAttribute]
public Lifetime TransientChildrenLifetime { get; }
    public abstract virtual IReadOnlyList`1<IPersistentNode> get_PersistentChildren();
    public abstract virtual IPersistentNode get_Parent();
    public abstract virtual Lifetime get_TransientChildrenLifetime();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Core.IPersistentNodeProvider {
    public int FileExtensionPriority { get; }
    public abstract virtual bool IsApplicable(XmlElement xmlElement);
    public abstract virtual bool IsApplicable(FileSystemPath fileSystemPath);
    public abstract virtual bool IsApplicable(INodeData nodeData);
    public abstract virtual int get_FileExtensionPriority();
    public abstract virtual ICollection`1<string> GetSupportedExtensionFilters();
    [CanBeNullAttribute]
public abstract virtual IPersistentNode CreateNodeFromPath(FileSystemPath path, IExtendablePersistentNode parent);
    [CanBeNullAttribute]
public abstract virtual IPersistentNode CreateNodeFromXmlElement(XmlElement xmlElement, IExtendablePersistentNode parent);
    [CanBeNullAttribute]
public abstract virtual IPersistentNode CreateNodeFromNodeData(INodeData nodeData, IExtendablePersistentNode parent);
    [CanBeNullAttribute]
public abstract virtual XmlElement WriteNodeToXmlElement(IPersistentNode node, XmlDocument owner);
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Core.IRecursionCauseNode {
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Core.IResourceConsumingNode {
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Core.IUnloadablePersistentNode {
    public bool Loaded { get; public set; }
    public abstract virtual bool get_Loaded();
    public abstract virtual void set_Loaded(bool value);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Core.PersistentExplorerNode : ExplorerNode {
    protected Lifetime myLifetime;
    protected List`1<Pair`2<LifetimeDefinition, IPersistentNode>> myChildren;
    private SequentialLifetimes myChildrenLifetimeSeq;
    private Lifetime myChildrenLifetime;
    public IReadOnlyList`1<IPersistentNode> PersistentChildren { get; }
    public IPersistentNode Parent { get; }
    public Lifetime TransientChildrenLifetime { get; }
    protected PersistentExplorerNode(Lifetime lifetime, IAssemblyExplorerModel model, IPersistentNode parent);
    protected void NextTransientChildrenLifetime();
    public sealed virtual IReadOnlyList`1<IPersistentNode> get_PersistentChildren();
    public sealed virtual IPersistentNode get_Parent();
    public virtual Lifetime get_TransientChildrenLifetime();
    [CompilerGeneratedAttribute]
private void <NextTransientChildrenLifetime>b__5_0(Lifetime lt);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Core.UnloadablePersistentExplorerNode : PersistentExplorerNode {
    private bool myLoaded;
    public bool Loaded { get; public set; }
    protected UnloadablePersistentExplorerNode(Lifetime lifetime, IAssemblyExplorerModel model, IPersistentNode parent, bool loaded);
    public sealed virtual bool get_Loaded();
    public sealed virtual void set_Loaded(bool value);
    public virtual ICollection`1<IExplorerNode> GetChildren();
    public virtual bool HasChildren();
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Locators.AssemblyExplorerLocatorBase : object {
    public virtual IEnumerable`1<TreeModelNode> ProvideScope(object target, IEnumerable`1<TreeModelNode> roots);
    public abstract virtual bool IsApplicable(object target);
    public abstract virtual ICollection`1<TreeModelNode> LocateNodes(object target, ICollection`1<TreeModelNode> scope);
}
[SolutionFeaturePartAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Locators.AssemblyLocator : AssemblyExplorerLocatorBase {
    private AssemblyCollection myAssemblyCollection;
    public AssemblyLocator(AssemblyCollection assemblyCollection);
    public virtual bool IsApplicable(object target);
    public virtual ICollection`1<TreeModelNode> LocateNodes(object target, ICollection`1<TreeModelNode> scope);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Locators.AssemblyNamespace : object {
    private IAssembly myAssembly;
    private INamespace myNs;
    public INamespace Ns { get; }
    public IAssembly Assembly { get; }
    public AssemblyNamespace(IAssembly assembly, INamespace ns);
    public static AssemblyNamespace TryCreateAssemblyNamespace(INamespace ns);
    public INamespace get_Ns();
    public IAssembly get_Assembly();
}
[SolutionFeaturePartAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Locators.AssemblyNamespaceLocator : AssemblyExplorerLocatorBase {
    public virtual bool IsApplicable(object target);
    public virtual ICollection`1<TreeModelNode> LocateNodes(object target, ICollection`1<TreeModelNode> scope);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Locators.FileSystemPathNodeLocator : AssemblyExplorerLocatorBase {
    public virtual bool IsApplicable(object target);
    public virtual IEnumerable`1<TreeModelNode> ProvideScope(object target, IEnumerable`1<TreeModelNode> roots);
    public virtual ICollection`1<TreeModelNode> LocateNodes(object target, ICollection`1<TreeModelNode> scope);
    private static bool Filter(IExplorerNode explorerNode, FileSystemPath fileSystemPathToFind);
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Locators.IAssemblyExplorerLocator {
    public abstract virtual bool IsApplicable(object target);
    public abstract virtual IEnumerable`1<TreeModelNode> ProvideScope(object target, IEnumerable`1<TreeModelNode> roots);
    public abstract virtual ICollection`1<TreeModelNode> LocateNodes(object target, ICollection`1<TreeModelNode> scope);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Locators.New.AssemblyExplorerLocatorBaseNew : object {
    public virtual IEnumerable`1<IExplorerNode> ProvideScope(object target, IEnumerable`1<IExplorerNode> roots);
    public abstract virtual bool IsApplicable(object target);
    public abstract virtual ICollection`1<IExplorerNode> LocateNodes(object target, ICollection`1<IExplorerNode> scope);
}
[SolutionFeaturePartAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Locators.New.AssemblyLocatorNew : AssemblyExplorerLocatorBaseNew {
    private AssemblyCollection myAssemblyCollection;
    public AssemblyLocatorNew(AssemblyCollection assemblyCollection);
    public virtual bool IsApplicable(object target);
    public virtual ICollection`1<IExplorerNode> LocateNodes(object target, ICollection`1<IExplorerNode> scope);
}
[SolutionFeaturePartAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Locators.New.AssemblyNamespaceLocatorNew : AssemblyExplorerLocatorBaseNew {
    public virtual bool IsApplicable(object target);
    public virtual ICollection`1<IExplorerNode> LocateNodes(object target, ICollection`1<IExplorerNode> scope);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Locators.New.FileSystemPathNodeLocatorNew : AssemblyExplorerLocatorBaseNew {
    public virtual bool IsApplicable(object target);
    public virtual IEnumerable`1<IExplorerNode> ProvideScope(object target, IEnumerable`1<IExplorerNode> roots);
    public virtual ICollection`1<IExplorerNode> LocateNodes(object target, ICollection`1<IExplorerNode> scope);
    private static bool Filter(IExplorerNode explorerNode, FileSystemPath fileSystemPathToFind);
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Locators.New.IAssemblyExplorerLocatorNew {
    public abstract virtual bool IsApplicable(object target);
    public abstract virtual IEnumerable`1<IExplorerNode> ProvideScope(object target, IEnumerable`1<IExplorerNode> roots);
    public abstract virtual ICollection`1<IExplorerNode> LocateNodes(object target, ICollection`1<IExplorerNode> scope);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Locators.New.TypeMemberLocatorNew : AssemblyExplorerLocatorBaseNew {
    public virtual bool IsApplicable(object target);
    public virtual ICollection`1<IExplorerNode> LocateNodes(object target, ICollection`1<IExplorerNode> scope);
    private static List`1<IExplorerNode> GetPreciseResult(ITypeMember typeMember, IEnumerable`1<IExplorerNode> matchedModuleNodes);
    private static void AddToPreciseResult(IExplorerNode curNode, ITypeMember typeMember, List`1<IExplorerNode> preciseResult);
    private static bool NodeContentEquals(IExplorerNode node, ITypeMember typeMember);
    private static bool MemberEquals(ITypeMember x, ITypeMember y);
    private static List`1<IExplorerNode> SelectMatchedModuleNodes(ITypeMember typeMember, IEnumerable`1<IExplorerNode> scope);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Locators.TypeMemberLocator : AssemblyExplorerLocatorBase {
    public virtual bool IsApplicable(object target);
    public virtual ICollection`1<TreeModelNode> LocateNodes(object target, ICollection`1<TreeModelNode> scope);
    private static List`1<TreeModelNode> GetPreciseResult(ITypeMember typeMember, IEnumerable`1<TreeModelNode> matchedModuleNodes);
    private static void AddToPreciseResult(TreeModelNode curNode, ITypeMember typeMember, List`1<TreeModelNode> preciseResult);
    private static bool NodeContentEquals(TreeModelNode node, ITypeMember typeMember);
    private static bool MemberEquals(ITypeMember x, ITypeMember y);
    private static List`1<TreeModelNode> SelectMatchedModuleNodes(ITypeMember typeMember, IEnumerable`1<TreeModelNode> scope);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.AppHostContentDiffProviderObsolete : AppHostContentProviderBase {
    public AppHostContentDiffProviderObsolete(IAssemblyInfoDatabase assemblyInfoDatabase);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
    public virtual bool CollectLoadActions(IExplorerNode explorerNode, List`1<Action`1<IProgressIndicator>> actions);
    [CompilerGeneratedAttribute]
internal static void <GetChildren>g__AddIfExists|2_0(FileSystemPath oldFilePath, FileSystemPath currentFilePath, bool assembly, <>c__DisplayClass2_0& , <>c__DisplayClass2_1& );
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.AppHostContentProvider : AppHostContentProviderBase {
    public AppHostContentProvider(IAssemblyInfoDatabase assemblyInfoDatabase);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
    private static ValueTuple`2[] GetNativeHostRelatedFiles(FileSystemPath nativeAppHostPath);
    internal static ValueTuple`2[] GetNativeHostRelatedFiles(IAssemblyLocation nativeAppHostLocation);
    public virtual bool CollectLoadActions(IExplorerNode explorerNode, List`1<Action`1<IProgressIndicator>> actions);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.AppHostContentProviderBase : ExplorerNodesProviderBase {
    protected IAssemblyInfoDatabase myAssemblyInfoDatabase;
    protected AppHostContentProviderBase(IAssemblyInfoDatabase assemblyInfoDatabase);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.AssemblyFilePathActionDiffProviderObsolete : AssemblyPathActionProviderBase {
    private AssemblyCollection myAssemblyCollection;
    public AssemblyFilePathActionDiffProviderObsolete(AssemblyCollection assemblyCollection, WorkspaceManager workspaceManager);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual bool CollectLoadActions(IExplorerNode explorerNode, List`1<Action`1<IProgressIndicator>> actions);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.AssemblyFilePathActionProvider : AssemblyPathActionProviderBase {
    private AssemblyCollection myAssemblyCollection;
    public AssemblyFilePathActionProvider(AssemblyCollection assemblyCollection, WorkspaceManager workspaceManager);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual bool CollectLoadActions(IExplorerNode explorerNode, List`1<Action`1<IProgressIndicator>> actions);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.AssemblyPathActionProviderBase : ExplorerNodesProviderBase {
    protected WorkspaceManager myWorkspaceManager;
    public AssemblyPathActionProviderBase(WorkspaceManager workspaceManager);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
    protected void AddPathAction(IExplorerNode explorerNode, List`1<Action`1<IProgressIndicator>> actions, IAssemblyLocation location);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.BaseTypes.BaseTypesNodeProvider : BaseTypesProviderBase {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual bool HasChildren(IExplorerNode explorerNode);
    public virtual bool CanHaveChildren(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.BaseTypes.BaseTypesProvider : BaseTypesProviderBase {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual bool HasChildren(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.BaseTypes.BaseTypesProviderBase : ExplorerNodesProviderBase {
    protected bool HasChildren(IDeclaredElementEnvoy envoy);
    protected ICollection`1<IDeclaredElement> GetChildren(IDeclaredElementEnvoy envoy);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.Caches.AssemblyLocationNodesCache`1 : NodesCache`2<IAssemblyLocation, T> {
    protected AssemblyLocationNodesCache`1(Func`2<IAssemblyLocation, T> contentFactory);
    protected virtual FileSystemPath GetPath(IAssemblyLocation key);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.Caches.FileSystemNodesCache`1 : NodesCache`2<FileSystemPath, T> {
    internal FileSystemNodesCache`1(Func`2<FileSystemPath, T> contentFactory, bool directories);
    protected virtual FileSystemPath GetPath(FileSystemPath key);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.Caches.FolderCache : object {
    private FolderProvider myFolderProvider;
    private FileSystemNodesCache`1<FolderContent> myCacheWithNonAssemblyFilesIncluded;
    private FileSystemNodesCache`1<FolderContent> myCacheWithNonAssemblyFilesExcluded;
    public FolderCache(FolderProvider folderProvider);
    [CanBeNullAttribute]
public FolderContent GetFolderContent(IFolderLikeNode folderLikeNode);
    [CanBeNullAttribute]
public FolderContent GetFolderContent(FileSystemPath folder, IPersistentNode persistentNode, bool filterFiles, bool watchForChanges);
    internal static bool WatchForChanges(IFolderLikeNode folderLikeNode);
    private static FolderContent CreateFolderContentIncludeNonAssemblyFiles(FileSystemPath folder);
    private static FolderContent CreateFolderContentExcludeNonAssemblyFiles(FileSystemPath folder);
    private static FolderContent CreateFolderContent(FileSystemPath folder, bool includeNonAssemblyFiles);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.Caches.FolderContent : object {
    [CompilerGeneratedAttribute]
private IList`1<FileSystemPath> <Folders>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<FileSystemPath> <Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<FileSystemPath> <NonAssemblyFiles>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public IList`1<FileSystemPath> Folders { get; public set; }
    public IList`1<FileSystemPath> Assemblies { get; public set; }
    public IList`1<FileSystemPath> NonAssemblyFiles { get; public set; }
    public FolderContent(IList`1<FileSystemPath> Folders, IList`1<FileSystemPath> Assemblies, IList`1<FileSystemPath> NonAssemblyFiles);
    [CompilerGeneratedAttribute]
protected FolderContent(FolderContent original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IList`1<FileSystemPath> get_Folders();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Folders(IList`1<FileSystemPath> value);
    [CompilerGeneratedAttribute]
public IList`1<FileSystemPath> get_Assemblies();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Assemblies(IList`1<FileSystemPath> value);
    [CompilerGeneratedAttribute]
public IList`1<FileSystemPath> get_NonAssemblyFiles();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NonAssemblyFiles(IList`1<FileSystemPath> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(FolderContent left, FolderContent right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(FolderContent left, FolderContent right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(FolderContent other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual FolderContent <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(IList`1& Folders, IList`1& Assemblies, IList`1& NonAssemblyFiles);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.Caches.ForwardedTypesCache : AssemblyLocationNodesCache`1<IMetadataForwardedTypeInfo[]> {
    private static IMetadataForwardedTypeInfo[] ReadForwardedTypes(IAssemblyLocation assemblyLocation);
}
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.Caches.ManifestResourceDispositionCache : AssemblyLocationNodesCache`1<ValueTuple`3[]> {
    private static ValueTuple`3[] ReadResources(IAssemblyLocation assemblyLocation);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.Caches.NetResourceCache : AssemblyLocationNodesCache`1<IDictionary`2<string, IList`1<string>>> {
    private static IDictionary`2<string, IList`1<string>> MakeEmptyCacheEntry(IAssemblyLocation arg);
    public IList`1<string> GetNetResourceEntries(IManifestResourceDisposition disposition, IPersistentNode parent, IAssemblyLocation assemblyLocation);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.Caches.NodesCache`2 : object {
    private Func`2<TKey, T> myContentFactory;
    private bool myDirectories;
    private Dictionary`2<IPersistentNode, Dictionary`2<TKey, T>> myCache;
    protected NodesCache`2(Func`2<TKey, T> contentFactory, bool directories);
    public T GetContent(IPersistentNode parent, TKey key, bool watchForChanges);
    [CanBeNullAttribute]
protected abstract virtual FileSystemPath GetPath(TKey key);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.Caches.Win32ResourcesCache : AssemblyLocationNodesCache`1<ResourceDirectoryEntry[]> {
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.Caches.ZipFilesCache : FileSystemNodesCache`1<List`1<FileSystemPath>> {
    private static List`1<FileSystemPath> CollectZipFiles(FileSystemPath folder);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.CompilerGeneratedSensitiveNodesProvider : ExplorerNodesProviderBase {
    private IProperty`1<bool> myShowCompilerGeneratedCode;
    private ISymbolCache mySymbolCache;
    protected bool ShowCompilerGeneratedCode { get; }
    protected CompilerGeneratedSensitiveNodesProvider(Lifetime lifetime, ISettingsStore settingsStore, ISymbolCache symbolCache, IThreading threading);
    protected bool get_ShowCompilerGeneratedCode();
    [CanBeNullAttribute]
protected ISymbolScope TryGetSymbolScope(IExplorerNode explorerNode, bool isOldLocationNeed);
    private bool ElementShouldBeExcluded(IDeclaredElement element);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.CompilerGeneratedSensitiveNodesProvider/<SelectDeclaredElementsAndFilterCompilerGeneratedIfNeeded>d__7")]
protected IEnumerable`1<IDeclaredElement> SelectDeclaredElementsAndFilterCompilerGeneratedIfNeeded(IEnumerable`1<IOccurrence> occurrences);
    protected IEnumerable`1<T> SelectValidAndFilterBadCompilerGeneratedElementsIfNeeded(IEnumerable`1<T> elements);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.DeclaredElementDiffNodeProviderObsolete : DeclaredElementNodeProviderBase {
    public DeclaredElementDiffNodeProviderObsolete(Lifetime lifetime, ISettingsStore settingsStore, ISymbolCache symbolCache, IThreading threading);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual bool HasChildrenFast(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
    [CompilerGeneratedAttribute]
private bool <HasChildrenFast>g__HasOldChildren|2_0(<>c__DisplayClass2_0& );
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.DeclaredElementNodeProvider : DeclaredElementNodeProviderBase {
    public DeclaredElementNodeProvider(Lifetime lifetime, ISettingsStore settingsStore, ISymbolCache symbolCache, IThreading threading);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.DeclaredElementNodeProviderBase : CompilerGeneratedSensitiveNodesProvider {
    protected DeclaredElementNodeProviderBase(Lifetime lifetime, ISettingsStore settingsStore, ISymbolCache symbolCache, IThreading threading);
    public virtual bool HasChildren(IExplorerNode explorerNode);
    public virtual bool CanHaveChildren(IExplorerNode explorerNode);
    public virtual bool HasChildrenFast(IExplorerNode explorerNode);
    protected static bool HasMembers(ITypeElement typeElement);
    private static bool IsDefaultConstructor(ITypeMember typeMember);
    protected ICollection`1<IExplorerNode> GetTypesFromAssembly(IExplorerNode explorerNode, IDeclaredElementEnvoy assemblyEnvoy, AssemblyDiffState diffState);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.ExplorerNodesProviderBase : object {
    public abstract virtual bool IsApplicable(IExplorerNode explorerNode);
    public abstract virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
    public virtual bool HasChildren(IExplorerNode explorerNode);
    public virtual bool HasChildrenFast(IExplorerNode explorerNode);
    public virtual bool CanHaveChildren(IExplorerNode explorerNode);
    public virtual bool CollectLoadActions(IExplorerNode explorerNode, List`1<Action`1<IProgressIndicator>> actions);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.FolderLikeContentProvider : ExplorerNodesProviderBase {
    private FolderCache myCache;
    private NuGetPackagesCacheStructure myNuGetPackagesCacheStructure;
    public FolderLikeContentProvider(FolderCache cache, NuGetPackagesCacheStructure nuGetPackagesCacheStructure);
    public virtual bool CollectLoadActions(IExplorerNode explorerNode, List`1<Action`1<IProgressIndicator>> actions);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual bool HasChildren(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
    private IExplorerNode CreateFolderNode(FileSystemPath childDir, IAssemblyExplorerModel model, IFolderLikeNode parent);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.FolderProvider : object {
    private ZipContentProvider myZipContentProvider;
    public FolderProvider(ZipContentProvider zipContentProvider);
    [CanBeNullAttribute]
public FileSystemPath GetFolder(IFolderLikeNode folderLikeNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.ForwardedTypes.ForwardedTypesFolderProvider : ExplorerNodesProviderBase {
    private ForwardedTypesCache myForwardedTypesCache;
    public ForwardedTypesFolderProvider(ForwardedTypesCache forwardedTypesCache);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.ForwardedTypes.ForwardedTypesProvider : ExplorerNodesProviderBase {
    private ForwardedTypesCache myForwardedTypesCache;
    public ForwardedTypesProvider(ForwardedTypesCache forwardedTypesCache);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.IExplorerNodesProvider {
    public abstract virtual bool IsApplicable(IExplorerNode explorerNode);
    [CanBeNullAttribute]
public abstract virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
    public abstract virtual bool HasChildren(IExplorerNode explorerNode);
    public abstract virtual bool HasChildrenFast(IExplorerNode explorerNode);
    public abstract virtual bool CollectLoadActions(IExplorerNode explorerNode, List`1<Action`1<IProgressIndicator>> actions);
    public abstract virtual bool CanHaveChildren(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.Inheritors.InheritorsNodeProvider : CompilerGeneratedSensitiveNodesProvider {
    public InheritorsNodeProvider(Lifetime lifetime, ISettingsStore settingsStore, ISymbolCache symbolCache, IThreading threading);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
    public virtual bool CanHaveChildren(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.Inheritors.InheritorsProvider : CompilerGeneratedSensitiveNodesProvider {
    public InheritorsProvider(Lifetime lifetime, ISettingsStore settingsStore, ISymbolCache symbolCache, IThreading threading);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual bool HasChildren(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.NamespacesDiffProviderObsolete : NamespacesProviderBase {
    public NamespacesDiffProviderObsolete(Lifetime lifetime, ISettingsStore settingsStore, ISymbolCache symbolCache, IThreading threading);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual bool HasChildren(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.NamespacesProvider : NamespacesProviderBase {
    public NamespacesProvider(Lifetime lifetime, ISettingsStore settingsStore, ISymbolCache symbolCache, IThreading threading);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual bool HasChildren(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.NamespacesProviderBase : CompilerGeneratedSensitiveNodesProvider {
    protected NamespacesProviderBase(Lifetime lifetime, ISettingsStore settingsStore, ISymbolCache symbolCache, IThreading threading);
    protected ICollection`1<IExplorerNode> CollectNamespacesFromAssembly(IExplorerNode explorerNode, ISymbolScope cache, AssemblyDiffState diffState);
    protected void CollectNonEmptyNamespaces(ISymbolScope cache, INamespace ns, List`1<INamespace> allNamespaces);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.NuGet.NuGetDependenciesFolderProvider : ExplorerNodesProviderBase {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.NuGet.NuGetDependencyGroupProvider : ExplorerNodesProviderBase {
    private ILogger myLogger;
    public NuGetDependencyGroupProvider(ILogger logger);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.NuGet.NuGetDependencyProvider : ExplorerNodesProviderBase {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.ReferencedAssembliesFolderDiffProviderObsolete : ReferencedAssembliesFolderProviderBase {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.ReferencedAssembliesFolderProvider : ReferencedAssembliesFolderProviderBase {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.ReferencedAssembliesFolderProviderBase : ExplorerNodesProviderBase {
    protected bool CheckAssemblyReferences(IAssemblyFileNode explorerNode, bool isOldLocationNeed);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.ReferencedAssemblyDiffProviderObsolete : ReferencedAssemblyProviderBase {
    public ReferencedAssemblyDiffProviderObsolete(AssemblyCollection assemblyCollection, AssemblyToAssemblyReferencesResolveManager assemblyToAssemblyReferencesResolveManager);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual bool HasChildren(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.ReferencedAssemblyProvider : ReferencedAssemblyProviderBase {
    public ReferencedAssemblyProvider(AssemblyCollection assemblyCollection, AssemblyToAssemblyReferencesResolveManager assemblyToAssemblyReferencesResolveManager);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual bool HasChildren(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.ReferencedAssemblyProviderBase : ExplorerNodesProviderBase {
    protected AssemblyCollection myAssemblyCollection;
    protected AssemblyToAssemblyReferencesResolveManager myAssemblyToAssemblyReferencesResolveManager;
    protected static Version ourWindowsSdkVersion;
    protected ReferencedAssemblyProviderBase(AssemblyCollection assemblyCollection, AssemblyToAssemblyReferencesResolveManager assemblyToAssemblyReferencesResolveManager);
    private static ReferencedAssemblyProviderBase();
    protected ICollection`1<IExplorerNode> GetAssemblyReferences(IExplorerNode explorerNode, IAssemblyLocation assemblyLocation, AssemblyDiffState diffState);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.Resources.AssemblyFileNodeProvider : ResourcesProviderBase`3<IAssemblyFileNode, ResourcesFolderNode, Win32ResourcesFolderNode> {
    public AssemblyFileNodeProvider(ManifestResourceDispositionCache clrResourcesCache, Win32ResourcesCache win32ResourcesCache);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.Resources.NetResourceEntryNodeProvider : ExplorerNodesProviderBase {
    private NetResourceCache myCache;
    public NetResourceEntryNodeProvider(NetResourceCache cache);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
    [NotNullAttribute]
private static IList`1<IExplorerNode> BuildTree(ResourceNode resourceNode, IEnumerable`1<string> entries);
}
[SolutionFeaturePartAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.Resources.ResourcesFolderNodeProvider : ResourcesProviderBase`3<IAssemblyFileNode, ResourcesFolderNode, Win32ResourcesFolderNode> {
    public ResourcesFolderNodeProvider(ManifestResourceDispositionCache clrResourcesCache, Win32ResourcesCache win32ResourcesCache);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.Resources.ResourcesProviderBase`3 : ExplorerNodesProviderBase {
    protected ManifestResourceDispositionCache myClrResourcesCache;
    protected Win32ResourcesCache myWin32ResourcesCache;
    protected ResourcesProviderBase`3(ManifestResourceDispositionCache clrResourcesCache, Win32ResourcesCache win32ResourcesCache);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
    private bool ShowWin32ResourcesFolder(IPersistentNode persistentNode, IAssemblyLocation assemblyLocation);
    protected Win32ResourcesFolderNode TryGetWin32FolderNode(IPersistentNode persistentNode, IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.Resources.Win32ResourceNodeProvider : ExplorerNodesProviderBase {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.Resources.Win32ResourcesFolderNodeProvider : ResourcesProviderBase`3<IAssemblyFileNode, ResourcesFolderNode, Win32ResourcesFolderNode> {
    public Win32ResourcesFolderNodeProvider(ManifestResourceDispositionCache clrResourcesCache, Win32ResourcesCache win32ResourcesCache);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.ZipContentProvider : object {
    private static HashSet`1<string> ourImportantExtensionsWithDot;
    private IFileSystemTracker myFileSystemTracker;
    private WorkspaceManager myWorkspaceManager;
    private ISolution mySolution;
    private Lifetime myLifetime;
    private IShellLocks myShellLocks;
    private IDictionary`2<FileSystemPath, FileSystemPath> myCachedUnpackedZipFolder;
    private IDictionary`2<IPersistentNode, FileSystemPath> myWatchCookies;
    private static ZipContentProvider();
    public ZipContentProvider(IFileSystemTracker fileSystemTracker, WorkspaceManager workspaceManager, ISolution solution, Lifetime lifetime, IShellLocks shellLocks);
    private FileSystemPath Unpack(FileSystemPath zipPath, bool filterFiles);
    private static bool NeedToUnzip(RelativePath file);
    private FileSystemPath UnpackAll(FileSystemPath zipPath);
    private FileSystemPath UnpackFiltered(FileSystemPath zipPath);
    public FileSystemPath GetUnpackedZipFolder(IZipFileNode zipNode);
    private void OnChangeAction(FileSystemPath zipPath);
    [CompilerGeneratedAttribute]
private void <OnChangeAction>b__15_0();
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.NodeProviders.ZipFileNodeProvider : ExplorerNodesProviderBase {
    private ZipFilesCache myCache;
    private FolderProvider myFolderProvider;
    private NuGetPackagesCacheStructure myNuGetPackagesCacheStructure;
    private ZipContentProvider myZipContentProvider;
    public ZipFileNodeProvider(ZipFilesCache cache, FolderProvider folderProvider, NuGetPackagesCacheStructure nuGetPackagesCacheStructure, ZipContentProvider zipContentProvider);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
    private IExplorerNode CreateZipFileNode(FileSystemPath path, IAssemblyExplorerModel model, IExplorerNode parent);
}
[DebuggerDisplayAttribute("AssemblyFileDiffNodeObsolete: {OldLocation} - {Location}")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.AssemblyFileDiffNodeObsolete : AssemblyFileNodeBase {
    [CompilerGeneratedAttribute]
private AssemblyDiffState <DiffState>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssemblyLocation <OldLocation>k__BackingField;
    public AssemblyDiffState DiffState { get; public set; }
    public FileSystemPath OldPath { get; }
    public IAssemblyLocation OldLocation { get; }
    public AppHostType OldAppHostType { get; }
    public AssemblyFileDiffNodeObsolete(IAssemblyLocation oldLocation, IAssemblyLocation currentLocation, IAssemblyExplorerModel model, IExplorerNode parent);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual AssemblyDiffState get_DiffState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DiffState(AssemblyDiffState value);
    public sealed virtual FileSystemPath get_OldPath();
    [CompilerGeneratedAttribute]
public sealed virtual IAssemblyLocation get_OldLocation();
    public sealed virtual AppHostType get_OldAppHostType();
    public virtual ICollection`1<IExplorerNode> GetChildren();
    public virtual bool HasChildren();
}
[DebuggerDisplayAttribute("AssemblyFileNode: {Location}")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.AssemblyFileNode : AssemblyFileNodeBase {
    public AssemblyFileNode(IAssemblyLocation assemblyLocation, IAssemblyExplorerModel model, IExplorerNode parent);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual ICollection`1<IExplorerNode> GetChildren();
    public virtual bool HasChildren();
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.AssemblyFileNodeBase : ExplorerNode {
    protected AssemblyInfoDatabase myAssemblyInfoDataBase;
    protected ISolution mySolution;
    [CompilerGeneratedAttribute]
private IAssemblyLocation <Location>k__BackingField;
    public FileSystemPath Path { get; }
    public IAssemblyLocation Location { get; }
    public AppHostType AppHostType { get; }
    protected AssemblyFileNodeBase(IAssemblyLocation assemblyLocation, IAssemblyExplorerModel model, IExplorerNode parent);
    public sealed virtual FileSystemPath get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual IAssemblyLocation get_Location();
    public sealed virtual AppHostType get_AppHostType();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.AssemblyReferenceDiffNodeObsolete : AssemblyReferenceNode {
    [CompilerGeneratedAttribute]
private AssemblyDiffState <DiffState>k__BackingField;
    public AssemblyDiffState DiffState { get; public set; }
    public AssemblyReferenceDiffNodeObsolete(IAssemblyToAssemblyReference reference, MetadataToken assemblyReferenceToken, IAssemblyExplorerModel model, IExplorerNode parent);
    [CompilerGeneratedAttribute]
public sealed virtual AssemblyDiffState get_DiffState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DiffState(AssemblyDiffState value);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.AssemblyReferenceNode : ExplorerNode {
    private IAssemblyToAssemblyReference myReference;
    [CompilerGeneratedAttribute]
private MetadataToken <AssemblyReferenceToken>k__BackingField;
    public MetadataToken AssemblyReferenceToken { get; }
    public IAssemblyToAssemblyReference Reference { get; }
    public AssemblyNameInfo TargetAssemblyName { get; }
    public AssemblyReferenceNode(IAssemblyToAssemblyReference reference, MetadataToken assemblyReferenceToken, IAssemblyExplorerModel model, IExplorerNode parent);
    [CompilerGeneratedAttribute]
public sealed virtual MetadataToken get_AssemblyReferenceToken();
    public sealed virtual IAssemblyToAssemblyReference get_Reference();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual AssemblyNameInfo get_TargetAssemblyName();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.AssemblyReferencesFolderDiffNodeObsolete : AssemblyReferencesFolderNode {
    [CompilerGeneratedAttribute]
private AssemblyDiffState <DiffState>k__BackingField;
    public AssemblyDiffState DiffState { get; public set; }
    public IAssemblyFileDiffNodeObsolete Parent { get; }
    public AssemblyReferencesFolderDiffNodeObsolete(IAssemblyExplorerModel model, IAssemblyFileDiffNodeObsolete parent);
    [CompilerGeneratedAttribute]
public sealed virtual AssemblyDiffState get_DiffState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DiffState(AssemblyDiffState value);
    public IAssemblyFileDiffNodeObsolete get_Parent();
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.AssemblyReferencesFolderNode : ExplorerNode {
    public IAssemblyFileNode Parent { get; }
    public AssemblyReferencesFolderNode(IAssemblyExplorerModel model, IAssemblyFileNode parent);
    public IAssemblyFileNode get_Parent();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.BaseTypesNode : ExplorerNode {
    public DeclaredElementNode Parent { get; }
    public BaseTypesNode(IDeclaredElementEnvoy owner, IAssemblyExplorerModel model, DeclaredElementNode explorerNode);
    public DeclaredElementNode get_Parent();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.DeclaredElementDiffNodeObsolete : DeclaredElementNode {
    [CompilerGeneratedAttribute]
private IDeclaredElementEnvoy <AdditionalDiffEnvoy>k__BackingField;
    [CompilerGeneratedAttribute]
private AssemblyDiffState <DiffState>k__BackingField;
    [CanBeNullAttribute]
public IDeclaredElementEnvoy AdditionalDiffEnvoy { get; public set; }
    public AssemblyDiffState DiffState { get; public set; }
    public DeclaredElementDiffNodeObsolete(IDeclaredElementEnvoy elementEnvoy, IAssemblyExplorerModel model, IExplorerNode parent);
    [CompilerGeneratedAttribute]
public IDeclaredElementEnvoy get_AdditionalDiffEnvoy();
    [CompilerGeneratedAttribute]
public void set_AdditionalDiffEnvoy(IDeclaredElementEnvoy value);
    [CompilerGeneratedAttribute]
public sealed virtual AssemblyDiffState get_DiffState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DiffState(AssemblyDiffState value);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.DeclaredElementNode : ExplorerNode {
    [CompilerGeneratedAttribute]
private IDeclaredElementEnvoy <Envoy>k__BackingField;
    public IDeclaredElementEnvoy Envoy { get; }
    public DeclaredElementNode(IDeclaredElementEnvoy elementEnvoy, IAssemblyExplorerModel model, IExplorerNode parent);
    [CompilerGeneratedAttribute]
public IDeclaredElementEnvoy get_Envoy();
    public virtual bool HasChildren();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.Diff.AssemblyFileDiffNode : DiffNode`1<IAssemblyFileNode> {
    public AssemblyFileDiffNode(IAssemblyFileNode old, IAssemblyFileNode new, NodeDiffState diffState, IDiffNode parent);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.Diff.DiffNode`1 : ExplorerNode {
    [CompilerGeneratedAttribute]
private TNode <TypedOld>k__BackingField;
    [CompilerGeneratedAttribute]
private TNode <TypedNew>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeDiffState <DiffState>k__BackingField;
    public IExplorerNode Old { get; }
    public IExplorerNode New { get; }
    public TNode TypedOld { get; }
    public TNode TypedNew { get; }
    public NodeDiffState DiffState { get; }
    public DiffNode`1(TNode old, TNode new, NodeDiffState diffState, IDiffNode parent);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual IExplorerNode get_Old();
    public sealed virtual IExplorerNode get_New();
    [CompilerGeneratedAttribute]
public sealed virtual TNode get_TypedOld();
    [CompilerGeneratedAttribute]
public sealed virtual TNode get_TypedNew();
    [CompilerGeneratedAttribute]
public sealed virtual NodeDiffState get_DiffState();
    [CompilerGeneratedAttribute]
internal static bool <Equals>g__Eq|1_0(TNode n1, TNode n2);
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.Diff.IAssemblyFileDiffNode {
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.Diff.IDiffNode {
    public NodeDiffState DiffState { get; }
    [CanBeNullAttribute]
public IExplorerNode Old { get; }
    [CanBeNullAttribute]
public IExplorerNode New { get; }
    public abstract virtual NodeDiffState get_DiffState();
    public abstract virtual IExplorerNode get_Old();
    public abstract virtual IExplorerNode get_New();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.Diff.IDiffNode`1 {
    [CanBeNullAttribute]
public TNode TypedOld { get; }
    [CanBeNullAttribute]
public TNode TypedNew { get; }
    public abstract virtual TNode get_TypedOld();
    public abstract virtual TNode get_TypedNew();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.Diff.IFolderDiffNode {
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.Diff.INuGetDiffNode {
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.Diff.IZipFileDiffNode {
}
public enum JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.Diff.NodeDiffState : Enum {
    public int value__;
    public static NodeDiffState Unchanged;
    public static NodeDiffState ChangedInternally;
    public static NodeDiffState Changed;
    public static NodeDiffState Removed;
    public static NodeDiffState Added;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.ExplorerDiffNodeEx : object {
    [ExtensionAttribute]
[ObsoleteAttribute]
public static ICollection`1<IExplorerNode> ProcessDeclaredNodesForDiff(ICollection`1<IExplorerNode> firstDeclaredNodes, ICollection`1<IExplorerNode> secondDeclaredNodes, ISymbolScope firstCache, ISymbolScope secondCache);
    private static string RenderIlCodeForDiff(IAssemblyLocation location, IDeclaredElement declaredElementDiffNode);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static ICollection`1<IExplorerNode> ProcessReferencedNodesForDiff(ICollection`1<IExplorerNode> firstReferencedNodes, ICollection`1<IExplorerNode> secondReferencedNodes);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static ICollection`1<IExplorerNode> ProcessResourcesNodesForDiff(ICollection`1<IExplorerNode> firstResourcesNodes, ICollection`1<IExplorerNode> secondResourcesNodes);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.ExplorerNodeEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IPersistentNode GetPersistentNode(IExplorerNode explorerNode);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IAssemblyFile GetAssemblyFile(IAssemblyFileNode assemblyFileNode, bool isOldLocationNeed);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IAssemblyFile TryGetAssemblyFile(IExplorerNode explorerNode, bool isOldLocationNeed);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IAssemblyFileNode TryGetAssemblyFileNode(IExplorerNode explorerNode);
    [ExtensionAttribute]
public static TNode GetContainingNode(IExplorerNode explorerNode, bool returnThis);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IPsiModule ToPsiModule(IExplorerNode node, IPsiModules psiModules, bool isOldLocationNeed);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IPsiModule TryGetPsiModule(IExplorerNode explorerNode, IPsiModules psiModules, bool isOldLocationNeed);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ISymbolScope TryGetSymbolScope(IExplorerNode explorerNode, IPsiModules psiModules, ISymbolCache symbolCache, IPsiModule& psiModule, bool isOldLocationNeed);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ISymbolScope TryGetSymbolScope(IExplorerNode explorerNode, IPsiModules psiModules, ISymbolCache symbolCache, bool isOldLocationNeed);
    [ExtensionAttribute]
public static bool AssemblyIsBroken(IAssemblyFileNode assemblyFileNode, AssemblyInfoDatabase assemblyInfoCache, bool isOldLocationNeed);
    [ExtensionAttribute]
public static bool HasChildren(IAssemblyFileNode assemblyFileNode, AssemblyInfoDatabase assemblyInfoCache, bool fullCheck, bool isOldLocationNeed);
    [ExtensionAttribute]
internal static bool FilterFiles(IFolderLikeNode folderLikeNode);
}
internal class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.FolderNode : ExplorerNode {
    [CompilerGeneratedAttribute]
private FileSystemPath <Path>k__BackingField;
    [NotNullAttribute]
public FileSystemPath Path { get; }
    public FolderNode(FileSystemPath path, IAssemblyExplorerModel model, IExplorerNode parent);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_Path();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.ForwardedTypeNode : ExplorerNode {
    [CompilerGeneratedAttribute]
private IMetadataForwardedTypeInfo <ForwardedType>k__BackingField;
    [NotNullAttribute]
public IMetadataForwardedTypeInfo ForwardedType { get; }
    public ForwardedTypesFolderNode Parent { get; }
    public ForwardedTypeNode(IMetadataForwardedTypeInfo forwardedType, IAssemblyExplorerModel model, ForwardedTypesFolderNode parent);
    [CompilerGeneratedAttribute]
public IMetadataForwardedTypeInfo get_ForwardedType();
    public ForwardedTypesFolderNode get_Parent();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.ForwardedTypesFolderNode : ExplorerNode {
    public IAssemblyFileNode Parent { get; }
    public ForwardedTypesFolderNode(IAssemblyExplorerModel model, IAssemblyFileNode parent);
    public IAssemblyFileNode get_Parent();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.IAssemblyFileDiffNodeObsolete {
    [CanBeNullAttribute]
public FileSystemPath OldPath { get; }
    [NotNullAttribute]
public IAssemblyLocation OldLocation { get; }
    public AppHostType OldAppHostType { get; }
    public abstract virtual FileSystemPath get_OldPath();
    public abstract virtual IAssemblyLocation get_OldLocation();
    public abstract virtual AppHostType get_OldAppHostType();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.IAssemblyFileNode {
    public AppHostType AppHostType { get; }
    public abstract virtual AppHostType get_AppHostType();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.IAssemblyLocationNode {
    [NotNullAttribute]
public IAssemblyLocation Location { get; }
    public abstract virtual IAssemblyLocation get_Location();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.IAssemblyReferenceNode {
    [NotNullAttribute]
public AssemblyNameInfo TargetAssemblyName { get; }
    public MetadataToken AssemblyReferenceToken { get; }
    [CanBeNullAttribute]
public IAssemblyToAssemblyReference Reference { get; }
    public abstract virtual AssemblyNameInfo get_TargetAssemblyName();
    public abstract virtual MetadataToken get_AssemblyReferenceToken();
    public abstract virtual IAssemblyToAssemblyReference get_Reference();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.IFileSystemPathNode {
    [CanBeNullAttribute]
public FileSystemPath Path { get; }
    public abstract virtual FileSystemPath get_Path();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.IFolderLikeNode {
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.IFolderNode {
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.InheritorsNode : ExplorerNode {
    public DeclaredElementNode Parent { get; }
    public InheritorsNode(IDeclaredElementEnvoy owner, IAssemblyExplorerModel model, DeclaredElementNode explorerNode);
    public DeclaredElementNode get_Parent();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.INodeDiffStateObsolete {
    public AssemblyDiffState DiffState { get; public set; }
    public abstract virtual AssemblyDiffState get_DiffState();
    public abstract virtual void set_DiffState(AssemblyDiffState value);
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.IPdbNode {
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.IProjFileAccessorNodeBase {
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.IResourceNode {
    [CanBeNullAttribute]
public IManifestResourceDisposition Disposition { get; }
    public abstract virtual IManifestResourceDisposition get_Disposition();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.IWin32ResourceNode {
    public ResourceDirectoryEntry ResourceDirectoryEntry { get; }
    public int Level { get; }
    public abstract virtual ResourceDirectoryEntry get_ResourceDirectoryEntry();
    public abstract virtual int get_Level();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.IZipFileNode {
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.AssemblyMetadataTreeFolderNode : MetadataTreeFolderNode {
    public IAssemblyFileNode Parent { get; }
    public AssemblyMetadataTreeFolderNode(IAssemblyFileNode parent, AssemblyToAssemblyReferencesResolveManager resolveManager);
    public IAssemblyFileNode get_Parent();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.AttributeFlagNode : AttributeValueNode`1<AttributeFlag> {
    public IValueNode Parent { get; }
    public AttributeFlagNode(bool isSet, AttributeFlag description, int order, IValueNode parent);
    public IValueNode get_Parent();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.AttributeOptionNode : AttributeValueNode`1<AttributeOption> {
    [CompilerGeneratedAttribute]
private AttributeOptionsMask <OptionsMaskDescription>k__BackingField;
    public AttributeOptionsMask OptionsMaskDescription { get; }
    public AttributeOptionNode(bool isSet, AttributeOption description, AttributeOptionsMask optionsMaskDescription, int order, IMetadataTreeNode parent);
    [CompilerGeneratedAttribute]
public AttributeOptionsMask get_OptionsMaskDescription();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.AttributeOptionsMaskNode : AttributeValueNode`1<AttributeOptionsMask> {
    public IValueNode Parent { get; }
    public AttributeOptionsMaskNode(AttributeOptionsMask description, int order, IValueNode parent);
    public IValueNode get_Parent();
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.AttributeValueNode`1 : MetadataTreeOrderedNode {
    [CompilerGeneratedAttribute]
private bool <IsSet>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Description>k__BackingField;
    public bool IsSet { get; }
    public T Description { get; }
    protected AttributeValueNode`1(bool isSet, T description, int order, IMetadataTreeNode parent);
    [CompilerGeneratedAttribute]
public bool get_IsSet();
    [CompilerGeneratedAttribute]
public T get_Description();
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.BinaryStructNode : MetadataTreeOrderedNode {
    [CompilerGeneratedAttribute]
private BinaryStruct <Struct>k__BackingField;
    public BinaryStruct Struct { get; }
    public UInt32 AbsoluteOffset { get; }
    protected BinaryStructNode(BinaryStruct binaryStruct, IMetadataTreeNode parent);
    [CompilerGeneratedAttribute]
public BinaryStruct get_Struct();
    public sealed virtual UInt32 get_AbsoluteOffset();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.BinaryStructResourceTreeNode : BinaryStructNode {
    [CompilerGeneratedAttribute]
private IBinaryStructResourceTreeNode <Node>k__BackingField;
    public IBinaryStructResourceTreeNode Node { get; }
    protected BinaryStructResourceTreeNode(IBinaryStructResourceTreeNode binaryStructResourceTreeNode, IMetadataTreeNode parent);
    [CompilerGeneratedAttribute]
public IBinaryStructResourceTreeNode get_Node();
    public static BinaryStructResourceTreeNode Create(IBinaryStructResourceTreeNode binaryStructResourceTreeNode, IMetadataTreeNode parent);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.BinaryStructRowNode : MetadataTreeOrderedNode {
    [CompilerGeneratedAttribute]
private BinaryStructRow <Row>k__BackingField;
    public BinaryStructRow Row { get; }
    public UInt32 AbsoluteOffset { get; }
    public BinaryStructNode Parent { get; }
    private AttributesStructure JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.IValueNode.FlagsStructure { get; }
    private ulong JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.IValueNode.FlagsValue { get; }
    private RowType JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.IValueNode.FlagsType { get; }
    public BinaryStructRowNode(BinaryStructRow row, BinaryStructNode parent);
    [CompilerGeneratedAttribute]
public BinaryStructRow get_Row();
    public sealed virtual UInt32 get_AbsoluteOffset();
    public BinaryStructNode get_Parent();
    private sealed virtual override AttributesStructure JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.IValueNode.get_FlagsStructure();
    private sealed virtual override ulong JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.IValueNode.get_FlagsValue();
    private sealed virtual override RowType JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.IValueNode.get_FlagsType();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.BlobHeapNode : MetadataHeapNode {
    public int ItemCount { get; }
    public BlobHeapNode(MetadataTreeFolderNode parent);
    public virtual int get_ItemCount();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.BlobNode : MetadataItemNode {
    [CompilerGeneratedAttribute]
private int <BlobOffset>k__BackingField;
    public int BlobOffset { get; }
    public IEnumerable`1<MetadataToken> Usages { get; }
    public int UsagesCount { get; }
    public UInt32 ItemAbsoluteOffset { get; }
    [CanBeNullAttribute]
public string DecodedBlob { get; }
    [CanBeNullAttribute]
public string RawBlobString { get; }
    [CanBeNullAttribute]
public Byte[] RawBlob { get; }
    public BlobNode(int blobOffset, int columnIndex, int order, IMetadataTreeNode parent);
    public BlobNode(int blobOffset, IMetadataTreeNode parent);
    [CompilerGeneratedAttribute]
public int get_BlobOffset();
    public virtual IEnumerable`1<MetadataToken> get_Usages();
    public virtual int get_UsagesCount();
    public virtual UInt32 get_ItemAbsoluteOffset();
    public virtual ICollection`1<int> GetItemUsagesColumnIndicesIn(MetadataToken token);
    public string get_DecodedBlob();
    public string get_RawBlobString();
    public Byte[] get_RawBlob();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.BundleFileEntryHeaderNode : BinaryStructNode {
    public BundleFileEntryHeaderNode(BinaryStruct bundleFileEntryHeader, IMetadataTreeNode parent);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.CliHeaderNode : BinaryStructNode {
    public CliHeaderNode(IMetadataTreeNode parent);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.DataDirectoriesNode : BinaryStructNode {
    public DataDirectoriesNode(IMetadataTreeNode parent);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.DebugDirectoryEntryDataNode : BinaryStructNode {
    public DebugDirectoryEntryDataNode(DebugDirectoryEntryNode parent);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.DebugDirectoryEntryNode : BinaryStructNode {
    [CompilerGeneratedAttribute]
private BinaryStruct <EntryData>k__BackingField;
    public BinaryStruct EntryData { get; }
    public DebugDirectoryEntryNode(BinaryStruct entry, BinaryStruct entryData, IMetadataTreeNode parent);
    [CompilerGeneratedAttribute]
public BinaryStruct get_EntryData();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.DebugDirectoryNode : BinaryStructNode {
    public DebugDirectoryNode(IMetadataTreeNode parent);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.DirectoriesFolderNode : BinaryStructNode {
    public DirectoriesFolderNode(IMetadataTreeNode parent);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.DosHeaderNode : BinaryStructNode {
    public DosHeaderNode(IMetadataTreeNode parent);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.ExportDirectoryArrayNode : BinaryStructNode {
    public ExportDirectoryArrayNode(BinaryStruct entry, IMetadataTreeNode parent);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.ExportDirectoryNode : BinaryStructNode {
    public ExportDirectoryNode(IMetadataTreeNode parent);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.FileHeaderNode : BinaryStructNode {
    public FileHeaderNode(IMetadataTreeNode parent);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.GuidHeapNode : MetadataHeapNode {
    public int ItemCount { get; }
    public GuidHeapNode(MetadataTreeFolderNode parent);
    public virtual int get_ItemCount();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.GuidNode : MetadataItemNode {
    [CompilerGeneratedAttribute]
private int <GuidIndex>k__BackingField;
    public Guid Guid { get; }
    public int GuidIndex { get; }
    public IEnumerable`1<MetadataToken> Usages { get; }
    public int UsagesCount { get; }
    public UInt32 ItemAbsoluteOffset { get; }
    public GuidNode(int guidIndex, int columnIndex, int order, IMetadataTreeNode parent);
    public GuidNode(int guidIndex, IMetadataTreeNode parent);
    public Guid get_Guid();
    [CompilerGeneratedAttribute]
public int get_GuidIndex();
    public virtual IEnumerable`1<MetadataToken> get_Usages();
    public virtual int get_UsagesCount();
    public virtual UInt32 get_ItemAbsoluteOffset();
    public virtual ICollection`1<int> GetItemUsagesColumnIndicesIn(MetadataToken token);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.HeadersFolderNode : MetadataTreeNode {
    private int myHashCode;
    public MetadataTreeFolderNode Parent { get; }
    public HeadersFolderNode(MetadataTreeFolderNode parent);
    public MetadataTreeFolderNode get_Parent();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.IMetadataTreeNode {
    public MetadataContent MetadataContent { get; }
    public abstract virtual MetadataContent get_MetadataContent();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.IOffsetMetadataTreeNode {
    public UInt32 AbsoluteOffset { get; }
    public abstract virtual UInt32 get_AbsoluteOffset();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.IValueNode {
    [CanBeNullAttribute]
public AttributesStructure FlagsStructure { get; }
    public ulong FlagsValue { get; }
    public RowType FlagsType { get; }
    public abstract virtual AttributesStructure get_FlagsStructure();
    public abstract virtual ulong get_FlagsValue();
    public abstract virtual RowType get_FlagsType();
}
internal class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.ManifestResourceTokenNode : MetadataTokenNode {
    public IManifestResourceDisposition Disposition { get; }
    public ManifestResourceTokenNode(MetadataToken token, int columnIndex, int order, IMetadataTreeNode parent);
    public sealed virtual IManifestResourceDisposition get_Disposition();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.MetadataDeltaTreeFolderNode : MetadataTreeFolderNode {
    [CompilerGeneratedAttribute]
private int <Generation>k__BackingField;
    public int Generation { get; }
    public MetadataDeltaTreeFolderNode(AssemblyMetadataTreeFolderNode parent, AssemblyToAssemblyReferencesResolveManager resolveManager, IAssemblyLocation metadataLocation, IMetadataAssembly metadataAssembly, ILReaderMetadataAccess deltaAccess, int generation, bool embeddedPortablePdb);
    [CompilerGeneratedAttribute]
public int get_Generation();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.MetadataHeaderNode : BinaryStructNode {
    public MetadataHeaderNode(IMetadataTreeNode parent);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.MetadataHeapNode : MetadataTreeNode {
    [CompilerGeneratedAttribute]
private string <HeapName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StreamIndex>k__BackingField;
    private int myHashCode;
    public string HeapName { get; }
    public int StreamIndex { get; }
    public int ItemCount { get; }
    public MetadataTreeFolderNode Parent { get; }
    public UInt32 AbsoluteOffset { get; }
    protected MetadataHeapNode(string heapName, int streamIndex, MetadataTreeFolderNode parent);
    [CompilerGeneratedAttribute]
public string get_HeapName();
    [CompilerGeneratedAttribute]
public int get_StreamIndex();
    public abstract virtual int get_ItemCount();
    public MetadataTreeFolderNode get_Parent();
    public sealed virtual UInt32 get_AbsoluteOffset();
    public UInt32 GetSize();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.MetadataItemNode : MetadataTreeOrderedNode {
    [CompilerGeneratedAttribute]
private int <ColumnIndex>k__BackingField;
    protected static int UndefinedColumnIndex;
    public int ColumnIndex { get; }
    public IEnumerable`1<MetadataToken> Usages { get; }
    public int UsagesCount { get; }
    public UInt32 AbsoluteOffset { get; }
    public UInt32 ItemAbsoluteOffset { get; }
    public UInt32 ColumnAbsoluteOffset { get; }
    protected MetadataItemNode(int columnIndex, int order, IMetadataTreeNode parent);
    [CompilerGeneratedAttribute]
public int get_ColumnIndex();
    public abstract virtual IEnumerable`1<MetadataToken> get_Usages();
    public abstract virtual int get_UsagesCount();
    public sealed virtual UInt32 get_AbsoluteOffset();
    public abstract virtual UInt32 get_ItemAbsoluteOffset();
    public UInt32 get_ColumnAbsoluteOffset();
    public virtual ICollection`1<int> GetItemUsagesColumnIndicesIn(MetadataToken token);
    public virtual bool CanHaveUsages();
    internal bool TryGetTableColumn(Column& column);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.MetadataTableNode : MetadataTreeNode {
    [CompilerGeneratedAttribute]
private MetadataTableId <TableId>k__BackingField;
    private int myHashCode;
    public MetadataTableId TableId { get; }
    public int ItemCount { get; }
    public UInt32 AbsoluteOffset { get; }
    public MetadataTreeFolderNode Parent { get; }
    public MetadataTableNode(MetadataTableId tableId, MetadataTreeFolderNode parent);
    [CompilerGeneratedAttribute]
public MetadataTableId get_TableId();
    public int get_ItemCount();
    public sealed virtual UInt32 get_AbsoluteOffset();
    public MetadataTreeFolderNode get_Parent();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.MetadataTokenNode : MetadataItemNode {
    [CompilerGeneratedAttribute]
private MetadataToken <Token>k__BackingField;
    public MetadataToken Token { get; }
    public IEnumerable`1<MetadataToken> Usages { get; }
    public int UsagesCount { get; }
    public UInt32 ItemAbsoluteOffset { get; }
    protected MetadataTokenNode(MetadataToken token, int columnIndex, int order, IMetadataTreeNode parent);
    [CompilerGeneratedAttribute]
public MetadataToken get_Token();
    public static MetadataTokenNode Create(MetadataToken token, int columnIndex, int order, IMetadataTreeNode parent);
    public static MetadataTokenNode Create(MetadataToken token, IMetadataTreeNode parent);
    public virtual IEnumerable`1<MetadataToken> get_Usages();
    public virtual int get_UsagesCount();
    public virtual UInt32 get_ItemAbsoluteOffset();
    public virtual ICollection`1<int> GetItemUsagesColumnIndicesIn(MetadataToken token);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.MetadataTreeFolderNode : ExplorerNode {
    private AssemblyToAssemblyReferencesResolveManager myResolveManager;
    protected bool myEmbeddedPortablePdb;
    private MetadataContent myMetadataContent;
    private object myMetadataContentLock;
    private int myHashCode;
    [CompilerGeneratedAttribute]
private IAssemblyLocation <MetadataLocation>k__BackingField;
    [NotNullAttribute]
public IAssemblyLocation MetadataLocation { get; }
    [NotNullAttribute]
public MetadataContent MetadataContent { get; }
    protected MetadataTreeFolderNode(IExplorerNode parent, AssemblyToAssemblyReferencesResolveManager resolveManager, IAssemblyLocation metadataLocation, MetadataContent metadataContent, bool embeddedPortablePdb);
    [CompilerGeneratedAttribute]
public IAssemblyLocation get_MetadataLocation();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual MetadataContent get_MetadataContent();
    [CanBeNullAttribute]
protected virtual IAssemblyLocation GetParentMetadataLocation();
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.MetadataTreeNode : ExplorerNode {
    [CompilerGeneratedAttribute]
private MetadataContent <MetadataContent>k__BackingField;
    public MetadataContent MetadataContent { get; }
    public IMetadataTreeNode Parent { get; }
    protected MetadataTreeNode(IMetadataTreeNode parent);
    [CompilerGeneratedAttribute]
public sealed virtual MetadataContent get_MetadataContent();
    public IMetadataTreeNode get_Parent();
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.MetadataTreeOrderedNode : MetadataTreeNode {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public int Order { get; }
    protected MetadataTreeOrderedNode(int order, IMetadataTreeNode parent);
    [CompilerGeneratedAttribute]
public int get_Order();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.MethodDebugInformationTokenNode : MetadataTokenNode {
    [CompilerGeneratedAttribute]
private MetadataToken <MethodDefToken>k__BackingField;
    public MetadataToken MethodDefToken { get; }
    public IEnumerable`1<MetadataToken> Usages { get; }
    public int UsagesCount { get; }
    public MethodDebugInformationTokenNode(MetadataToken token, int columnIndex, int order, IMetadataTreeNode parent);
    [CompilerGeneratedAttribute]
public MetadataToken get_MethodDefToken();
    public virtual IEnumerable`1<MetadataToken> get_Usages();
    public virtual int get_UsagesCount();
    public virtual ICollection`1<int> GetItemUsagesColumnIndicesIn(MetadataToken token);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.NtHeadersNode : BinaryStructNode {
    public NtHeadersNode(IMetadataTreeNode parent);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.OptionalHeaderNode : BinaryStructNode {
    public OptionalHeaderNode(IMetadataTreeNode parent);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.PdbStreamNode : BinaryStructNode {
    public PdbStreamNode(IMetadataTreeNode parent);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.PortablePdbMetadataTreeFolderNode : MetadataTreeFolderNode {
    [CompilerGeneratedAttribute]
private int <DebugDirectoryEntryIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PdbFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Signature>k__BackingField;
    public int DebugDirectoryEntryIndex { get; }
    [CanBeNullAttribute]
public string PdbFile { get; }
    [CanBeNullAttribute]
public string Signature { get; }
    public AssemblyMetadataTreeFolderNode Parent { get; }
    public bool IsEmbeddedPdb { get; }
    public PortablePdbMetadataTreeFolderNode(AssemblyMetadataTreeFolderNode parent, AssemblyToAssemblyReferencesResolveManager resolveManager, int debugDirectoryEntryIndex, IAssemblyLocation metadataLocation, bool embeddedPortablePdb, string pdbFile, string signature);
    [CompilerGeneratedAttribute]
public int get_DebugDirectoryEntryIndex();
    [CompilerGeneratedAttribute]
public string get_PdbFile();
    [CompilerGeneratedAttribute]
public string get_Signature();
    public AssemblyMetadataTreeFolderNode get_Parent();
    public bool get_IsEmbeddedPdb();
    protected virtual IAssemblyLocation GetParentMetadataLocation();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.R2RCoreHeaderNode : BinaryStructNode {
    [CompilerGeneratedAttribute]
private IExplorerNode[] <Sections>k__BackingField;
    public IExplorerNode[] Sections { get; public set; }
    public R2RCoreHeaderNode(IMetadataTreeNode parent);
    [CompilerGeneratedAttribute]
public IExplorerNode[] get_Sections();
    [CompilerGeneratedAttribute]
public void set_Sections(IExplorerNode[] value);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.R2RHeaderNode : BinaryStructNode {
    public R2RHeaderNode(IMetadataTreeNode parent);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.R2RSectionNode : BinaryStructNode {
    public R2RSectionNode(BinaryStruct binaryStruct, IMetadataTreeNode parent);
}
internal class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.ResourceDirectoryEntryStructNode : BinaryStructResourceTreeNode {
    public ResourceDirectoryEntry ResourceDirectoryEntry { get; }
    public int Level { get; }
    public ResourceDirectoryEntryStructNode(IResourceDirectoryEntryStruct resourceDirectoryEntryStruct, IMetadataTreeNode parent);
    public sealed virtual ResourceDirectoryEntry get_ResourceDirectoryEntry();
    public sealed virtual int get_Level();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.SectionHeaderNode : BinaryStructNode {
    public SectionHeaderNode(BinaryStruct sectionHeader, IMetadataTreeNode parent);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.SectionHeadersFolderNode : BinaryStructNode {
    public SectionHeadersFolderNode(IMetadataTreeNode parent);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.SingleFileBundleHeaderNode : BinaryStructNode {
    public SingleFileBundleHeaderNode(IMetadataTreeNode parent);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.StreamHeaderNode : BinaryStructNode {
    public StreamHeaderNode(BinaryStruct streamHeader, IMetadataTreeNode parent);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.StringHeapNode : MetadataHeapNode {
    public int ItemCount { get; }
    public StringHeapNode(MetadataTreeFolderNode parent);
    public virtual int get_ItemCount();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.StringNode : MetadataItemNode {
    [CompilerGeneratedAttribute]
private int <StringOffset>k__BackingField;
    public string String { get; }
    public int StringOffset { get; }
    public IEnumerable`1<MetadataToken> Usages { get; }
    public int UsagesCount { get; }
    public UInt32 ItemAbsoluteOffset { get; }
    public StringNode(int stringOffset, int columnIndex, int order, IMetadataTreeNode parent);
    public StringNode(int stringOffset, IMetadataTreeNode parent);
    public string get_String();
    [CompilerGeneratedAttribute]
public int get_StringOffset();
    public virtual IEnumerable`1<MetadataToken> get_Usages();
    public virtual int get_UsagesCount();
    public virtual UInt32 get_ItemAbsoluteOffset();
    public virtual ICollection`1<int> GetItemUsagesColumnIndicesIn(MetadataToken token);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.TablesHeaderNode : BinaryStructNode {
    public TablesHeaderNode(IMetadataTreeNode parent);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.UsagesFolderNode : MetadataTreeNode {
    public MetadataItemNode Parent { get; }
    public UsagesFolderNode(MetadataItemNode parent);
    public MetadataItemNode get_Parent();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.UserStringHeapNode : MetadataHeapNode {
    public int ItemCount { get; }
    public UserStringHeapNode(MetadataTreeFolderNode parent);
    public virtual int get_ItemCount();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.UserStringNode : MetadataItemNode {
    [CompilerGeneratedAttribute]
private int <UserStringOffset>k__BackingField;
    public string UserString { get; }
    public int UserStringOffset { get; }
    public IEnumerable`1<MetadataToken> Usages { get; }
    public int UsagesCount { get; }
    public UInt32 ItemAbsoluteOffset { get; }
    public UserStringNode(int userStringOffset, int columnIndex, int order, IMetadataTreeNode parent);
    public UserStringNode(int userStringOffset, IMetadataTreeNode parent);
    public string get_UserString();
    [CompilerGeneratedAttribute]
public int get_UserStringOffset();
    public virtual IEnumerable`1<MetadataToken> get_Usages();
    public virtual int get_UsagesCount();
    public virtual UInt32 get_ItemAbsoluteOffset();
    public virtual bool CanHaveUsages();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.ValueNode : MetadataItemNode {
    public UInt32 Value { get; }
    internal Column Structure { get; }
    public MetadataTokenNode Parent { get; }
    public IEnumerable`1<MetadataToken> Usages { get; }
    public int UsagesCount { get; }
    public UInt32 ItemAbsoluteOffset { get; }
    private AttributesStructure JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.IValueNode.FlagsStructure { get; }
    private ulong JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.IValueNode.FlagsValue { get; }
    private RowType JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.IValueNode.FlagsType { get; }
    public ValueNode(int columnIndex, int order, MetadataTokenNode parent);
    public UInt32 get_Value();
    internal Column get_Structure();
    public MetadataTokenNode get_Parent();
    public virtual IEnumerable`1<MetadataToken> get_Usages();
    public virtual int get_UsagesCount();
    public virtual UInt32 get_ItemAbsoluteOffset();
    public virtual bool CanHaveUsages();
    private sealed virtual override AttributesStructure JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.IValueNode.get_FlagsStructure();
    private sealed virtual override ulong JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.IValueNode.get_FlagsValue();
    private sealed virtual override RowType JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.IValueNode.get_FlagsType();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.ValueNodeEx : object {
    [ExtensionAttribute]
public static bool IsFlags(IValueNode node);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.WebAssemblyHeaderNode : BinaryStructNode {
    public WebAssemblyHeaderNode(IMetadataTreeNode parent);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.WebAssemblySectionNode : BinaryStructNode {
    [CompilerGeneratedAttribute]
private WasmSection <WasmSection>k__BackingField;
    public WasmSection WasmSection { get; }
    public WebAssemblySectionNode(WasmSection wasmSection, BinaryStruct webAssemblySection, IMetadataTreeNode parent);
    [CompilerGeneratedAttribute]
public WasmSection get_WasmSection();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.MetadataTree.WebCilHeaderNode : BinaryStructNode {
    public WebCilHeaderNode(IMetadataTreeNode parent);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.ModuleReferenceDiffNodeObsolete : ModuleReferenceNode {
    [CompilerGeneratedAttribute]
private AssemblyDiffState <DiffState>k__BackingField;
    public AssemblyDiffState DiffState { get; public set; }
    public ModuleReferenceDiffNodeObsolete(string moduleName, MetadataToken moduleReferenceToken, IAssemblyExplorerModel model, IExplorerNode parent);
    [CompilerGeneratedAttribute]
public sealed virtual AssemblyDiffState get_DiffState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DiffState(AssemblyDiffState value);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.ModuleReferenceNode : ExplorerNode {
    [CompilerGeneratedAttribute]
private string <ModuleName>k__BackingField;
    [CompilerGeneratedAttribute]
private MetadataToken <ModuleReferenceToken>k__BackingField;
    public string ModuleName { get; }
    public MetadataToken ModuleReferenceToken { get; }
    public ModuleReferenceNode(string moduleName, MetadataToken moduleReferenceToken, IAssemblyExplorerModel model, IExplorerNode parent);
    [CompilerGeneratedAttribute]
public string get_ModuleName();
    [CompilerGeneratedAttribute]
public MetadataToken get_ModuleReferenceToken();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.NetResourceEntryNode : ExplorerNode {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryName>k__BackingField;
    [NotNullAttribute]
public string FileName { get; }
    [NotNullAttribute]
public string EntryName { get; }
    public NetResourceEntryNode(string fileName, string entryName, IAssemblyExplorerModel model, IExplorerNode parent);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public string get_EntryName();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.NetResourceFolderNode : ExplorerNode {
    [CompilerGeneratedAttribute]
private string <FolderName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IExplorerNode> <Children>k__BackingField;
    [NotNullAttribute]
public string FolderName { get; }
    [NotNullAttribute]
public List`1<IExplorerNode> Children { get; }
    public NetResourceFolderNode(string folderName, IAssemblyExplorerModel model, IExplorerNode parent);
    [CompilerGeneratedAttribute]
public string get_FolderName();
    [CompilerGeneratedAttribute]
public List`1<IExplorerNode> get_Children();
    public virtual ICollection`1<IExplorerNode> GetChildren();
    public virtual bool HasChildren();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DebuggerDisplayAttribute("NonAssemblyFileDiffNodeObsolete: {OldLocation} - {Location}")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.NonAssemblyFileDiffNodeObsolete : NonAssemblyFileNodeBase {
    [CompilerGeneratedAttribute]
private IAssemblyLocation <OldLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private AssemblyDiffState <DiffState>k__BackingField;
    public IAssemblyLocation OldLocation { get; }
    public AssemblyDiffState DiffState { get; public set; }
    public NonAssemblyFileDiffNodeObsolete(IAssemblyLocation oldAssemblyLocation, IAssemblyLocation currentAssemblyLocation, IAssemblyExplorerModel model, IExplorerNode parent);
    [CompilerGeneratedAttribute]
public IAssemblyLocation get_OldLocation();
    [CompilerGeneratedAttribute]
public sealed virtual AssemblyDiffState get_DiffState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DiffState(AssemblyDiffState value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DebuggerDisplayAttribute("NonAssemblyFileNode: {Location}")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.NonAssemblyFileNode : NonAssemblyFileNodeBase {
    public NonAssemblyFileNode(IAssemblyLocation location, IAssemblyExplorerModel model, IExplorerNode parent);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.NonAssemblyFileNodeBase : ExplorerNode {
    [CompilerGeneratedAttribute]
private IAssemblyLocation <Location>k__BackingField;
    public IAssemblyLocation Location { get; }
    public FileSystemPath Path { get; }
    protected NonAssemblyFileNodeBase(IAssemblyLocation location, IAssemblyExplorerModel model, IExplorerNode parent);
    [CompilerGeneratedAttribute]
public sealed virtual IAssemblyLocation get_Location();
    public sealed virtual FileSystemPath get_Path();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.NuGet.INuGetPackageInfo {
    [NotNullAttribute]
public NuspecSource NuspecSource { get; }
    [NotNullAttribute]
public FileSystemPath PackageFolder { get; }
    [NotNullAttribute]
public string PackageId { get; }
    [NotNullAttribute]
public NuGetVersion PackageVersion { get; }
    public abstract virtual NuspecSource get_NuspecSource();
    public abstract virtual FileSystemPath get_PackageFolder();
    public abstract virtual string get_PackageId();
    public abstract virtual NuGetVersion get_PackageVersion();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.NuGet.INuGetPackageNode {
    public INuGetPackageInfo Info { get; }
    public abstract virtual INuGetPackageInfo get_Info();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.NuGet.NuGetDependenciesFolderNode : ExplorerNode {
    public NuspecSource NuspecSource { get; }
    public INuGetPackageNode Parent { get; }
    public NuGetDependenciesFolderNode(IAssemblyExplorerModel model, INuGetPackageNode parent);
    public NuspecSource get_NuspecSource();
    public INuGetPackageNode get_Parent();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.NuGet.NuGetDependencyGroupNode : ExplorerNode {
    [CompilerGeneratedAttribute]
private PackageDependencyGroup <DependencyGroup>k__BackingField;
    public PackageDependencyGroup DependencyGroup { get; }
    public NuGetDependenciesFolderNode Parent { get; }
    public NuGetDependencyGroupNode(IAssemblyExplorerModel model, NuGetDependenciesFolderNode parent, PackageDependencyGroup dependencyGroup);
    [CompilerGeneratedAttribute]
public PackageDependencyGroup get_DependencyGroup();
    public NuGetDependenciesFolderNode get_Parent();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.NuGet.NuGetDependencyNode : ExplorerNode {
    [CompilerGeneratedAttribute]
private PackageDependency <Dependency>k__BackingField;
    private string myDependencyString;
    public PackageDependency Dependency { get; }
    public NuGetDependencyGroupNode Parent { get; }
    public NuGetDependencyNode(IAssemblyExplorerModel model, NuGetDependencyGroupNode parent, PackageDependency dependency);
    [CompilerGeneratedAttribute]
public PackageDependency get_Dependency();
    public NuGetDependencyGroupNode get_Parent();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.NuGet.NuGetPackageFolderNode : FolderNode {
    [CompilerGeneratedAttribute]
private INuGetPackageInfo <Info>k__BackingField;
    public INuGetPackageInfo Info { get; }
    public NuGetPackageFolderNode(FileSystemPath packageFolder, NuspecSource nuspecSource, IAssemblyExplorerModel model, IExplorerNode parent);
    [CompilerGeneratedAttribute]
public sealed virtual INuGetPackageInfo get_Info();
}
internal abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.NuGet.NuGetPackageInfoBase : object {
    private string myPackageId;
    private NuGetVersion myPackageVersion;
    [CompilerGeneratedAttribute]
private NuspecSource <NuspecSource>k__BackingField;
    public NuspecSource NuspecSource { get; }
    public FileSystemPath PackageFolder { get; }
    public string PackageId { get; }
    public NuGetVersion PackageVersion { get; }
    protected NuGetPackageInfoBase(NuspecSource nuspecSource);
    private void InitPackageIdAndVersion();
    protected abstract virtual void FallbackInitPackageAndVersion(String& packageId, NuGetVersion& packageVersion);
    [CompilerGeneratedAttribute]
public sealed virtual NuspecSource get_NuspecSource();
    public abstract virtual FileSystemPath get_PackageFolder();
    public sealed virtual string get_PackageId();
    public sealed virtual NuGetVersion get_PackageVersion();
    [CompilerGeneratedAttribute]
private void <InitPackageIdAndVersion>b__3_0(NuspecReader nuspecReader);
}
internal class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.NuGet.NuGetPackageInfoFromFolder : NuGetPackageInfoBase {
    [CompilerGeneratedAttribute]
private FileSystemPath <PackageFolder>k__BackingField;
    public FileSystemPath PackageFolder { get; }
    public NuGetPackageInfoFromFolder(FileSystemPath packageFolder, NuspecSource nuspecSource);
    protected virtual void FallbackInitPackageAndVersion(String& packageId, NuGetVersion& packageVersion);
    [CompilerGeneratedAttribute]
public virtual FileSystemPath get_PackageFolder();
}
internal class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.NuGet.NuGetPackageInfoFromNupkg : NuGetPackageInfoBase {
    [NotNullAttribute]
private IZipFileNode myNupkgFileNode;
    [NotNullAttribute]
private ZipContentProvider myZipContentProvider;
    private FileSystemPath myPackageFolder;
    public FileSystemPath PackageFolder { get; }
    public NuGetPackageInfoFromNupkg(IZipFileNode nupkgFileNode, ZipContentProvider zipContentProvider, FileSystemPath nupkgPath);
    protected virtual void FallbackInitPackageAndVersion(String& packageId, NuGetVersion& packageVersion);
    public virtual FileSystemPath get_PackageFolder();
}
internal class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.NuGet.NupkgFileNode : ZipFileNode {
    private ZipContentProvider myZipContentProvider;
    private INuGetPackageInfo myInfo;
    public INuGetPackageInfo Info { get; }
    public NupkgFileNode(FileSystemPath nupkgPath, IAssemblyExplorerModel model, IExplorerNode parent, ZipContentProvider zipContentProvider);
    public sealed virtual INuGetPackageInfo get_Info();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.PersistentNodes.PersistentAssemblyDiffNode : PersistentDiffNode`1<IAssemblyFileNode> {
    private AssemblyInfoDatabase myAssemblyInfoDatabase;
    [CompilerGeneratedAttribute]
private IAssemblyFileNode <TypedOld>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssemblyFileNode <TypedNew>k__BackingField;
    public NodeDiffState DiffState { get; }
    [NotNullAttribute]
public IAssemblyFileNode TypedOld { get; }
    [NotNullAttribute]
public IAssemblyFileNode TypedNew { get; }
    public PersistentAssemblyDiffNode(Lifetime lifetime, FileSystemPath oldPath, FileSystemPath newPath, IAssemblyExplorerModel model, IPersistentNode parent);
    public virtual NodeDiffState get_DiffState();
    [CompilerGeneratedAttribute]
public virtual IAssemblyFileNode get_TypedOld();
    [CompilerGeneratedAttribute]
public virtual IAssemblyFileNode get_TypedNew();
}
[DebuggerDisplayAttribute("PersistentAssemblyDiffNodeObsolete: {OldLocation} - {Location}")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.PersistentNodes.PersistentAssemblyDiffNodeObsolete : PersistentAssemblyNodeBase {
    [CompilerGeneratedAttribute]
private AssemblyDiffState <DiffState>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssemblyLocation <OldLocation>k__BackingField;
    public AssemblyDiffState DiffState { get; public set; }
    public FileSystemPath OldPath { get; }
    public FileSystemPath NewPath { get; }
    public IAssemblyLocation OldLocation { get; }
    public AppHostType OldAppHostType { get; }
    public PersistentAssemblyDiffNodeObsolete(Lifetime lifetime, IAssemblyLocation oldLocation, IAssemblyLocation currentLocation, IAssemblyExplorerModel model, IPersistentNode parent);
    [CompilerGeneratedAttribute]
public sealed virtual AssemblyDiffState get_DiffState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DiffState(AssemblyDiffState value);
    public sealed virtual FileSystemPath get_OldPath();
    public sealed virtual FileSystemPath get_NewPath();
    [CompilerGeneratedAttribute]
public sealed virtual IAssemblyLocation get_OldLocation();
    public sealed virtual AppHostType get_OldAppHostType();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual bool HasChildren();
    public virtual ICollection`1<IExplorerNode> GetChildren();
}
[DebuggerDisplayAttribute("PersistentAssemblyNode: {Location}")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.PersistentNodes.PersistentAssemblyNode : PersistentAssemblyNodeBase {
    public PersistentAssemblyNode(Lifetime lifetime, IAssemblyLocation assemblyLocation, IAssemblyExplorerModel model, IPersistentNode parent);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool HasChildren();
    public virtual ICollection`1<IExplorerNode> GetChildren();
    public virtual string ToString();
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.PersistentNodes.PersistentAssemblyNodeBase : PersistentExplorerNode {
    protected AssemblyInfoDatabase myAssemblyInfoDataBase;
    protected ISolution mySolution;
    [CompilerGeneratedAttribute]
private IAssemblyLocation <Location>k__BackingField;
    public FileSystemPath Path { get; }
    public IAssemblyLocation Location { get; }
    public AppHostType AppHostType { get; }
    protected PersistentAssemblyNodeBase(Lifetime lifetime, IAssemblyLocation assemblyLocation, IAssemblyExplorerModel model, IPersistentNode parent);
    public sealed virtual FileSystemPath get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual IAssemblyLocation get_Location();
    public sealed virtual AppHostType get_AppHostType();
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.PersistentNodes.PersistentDiffNode`1 : PersistentExplorerNode {
    [CompilerGeneratedAttribute]
private FileSystemPath <OldPath>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <NewPath>k__BackingField;
    public NodeDiffState DiffState { get; }
    [NotNullAttribute]
public TNode TypedOld { get; }
    [NotNullAttribute]
public TNode TypedNew { get; }
    [NotNullAttribute]
public IExplorerNode Old { get; }
    [NotNullAttribute]
public IExplorerNode New { get; }
    public FileSystemPath OldPath { get; }
    public FileSystemPath NewPath { get; }
    protected PersistentDiffNode`1(Lifetime lifetime, FileSystemPath oldPath, FileSystemPath newPath, IAssemblyExplorerModel model, IPersistentNode parent);
    public abstract virtual NodeDiffState get_DiffState();
    public abstract virtual TNode get_TypedOld();
    public abstract virtual TNode get_TypedNew();
    public sealed virtual IExplorerNode get_Old();
    public sealed virtual IExplorerNode get_New();
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_OldPath();
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_NewPath();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.PersistentNodes.PersistentFolderDiffNode : PersistentDiffNode`1<IFolderNode> {
    private FolderCache myFolderCache;
    [CompilerGeneratedAttribute]
private IFolderNode <TypedOld>k__BackingField;
    [CompilerGeneratedAttribute]
private IFolderNode <TypedNew>k__BackingField;
    public NodeDiffState DiffState { get; }
    [NotNullAttribute]
public IFolderNode TypedOld { get; }
    [NotNullAttribute]
public IFolderNode TypedNew { get; }
    public PersistentFolderDiffNode(Lifetime lifetime, FileSystemPath oldPath, FileSystemPath newPath, IAssemblyExplorerModel model, IPersistentNode parent);
    public virtual NodeDiffState get_DiffState();
    [CompilerGeneratedAttribute]
public virtual IFolderNode get_TypedOld();
    [CompilerGeneratedAttribute]
public virtual IFolderNode get_TypedNew();
}
[DebuggerDisplayAttribute("PersistentFolderNode: {Path}")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.PersistentNodes.PersistentFolderNode : UnloadablePersistentExplorerNode {
    [CompilerGeneratedAttribute]
private FileSystemPath <Path>k__BackingField;
    [NotNullAttribute]
public FileSystemPath Path { get; }
    public PersistentFolderNode(Lifetime lifetime, FileSystemPath path, IAssemblyExplorerModel model, IPersistentNode parent, bool loaded);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_Path();
    public virtual string ToString();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.PersistentNodes.PersistentNuGetDiffNode : PersistentDiffNode`1<INuGetPackageNode> {
    private FolderCache myFolderCache;
    [CompilerGeneratedAttribute]
private INuGetPackageNode <TypedOld>k__BackingField;
    [CompilerGeneratedAttribute]
private INuGetPackageNode <TypedNew>k__BackingField;
    public NodeDiffState DiffState { get; }
    [NotNullAttribute]
public INuGetPackageNode TypedOld { get; }
    [NotNullAttribute]
public INuGetPackageNode TypedNew { get; }
    public PersistentNuGetDiffNode(Lifetime lifetime, FileSystemPath oldPath, FileSystemPath newPath, IAssemblyExplorerModel model, IPersistentNode parent);
    public virtual NodeDiffState get_DiffState();
    [CompilerGeneratedAttribute]
public virtual INuGetPackageNode get_TypedOld();
    [CompilerGeneratedAttribute]
public virtual INuGetPackageNode get_TypedNew();
}
internal class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.PersistentNodes.PersistentNuGetPackageFolderNode : PersistentFolderNode {
    [CompilerGeneratedAttribute]
private INuGetPackageInfo <Info>k__BackingField;
    public INuGetPackageInfo Info { get; }
    public PersistentNuGetPackageFolderNode(Lifetime lifetime, FileSystemPath packageFolder, NuspecSource nuspecSource, IAssemblyExplorerModel model, IPersistentNode parent, bool loaded);
    [CompilerGeneratedAttribute]
public sealed virtual INuGetPackageInfo get_Info();
}
internal class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.PersistentNodes.PersistentNupkgFileNode : PersistentZipFileNode {
    [NotNullAttribute]
private ZipContentProvider myZipContentProvider;
    private INuGetPackageInfo myInfo;
    public INuGetPackageInfo Info { get; }
    public PersistentNupkgFileNode(Lifetime lifetime, FileSystemPath nupkgPath, IAssemblyExplorerModel model, IPersistentNode parent, bool loaded, ZipContentProvider zipContentProvider);
    public sealed virtual INuGetPackageInfo get_Info();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.PersistentNodes.PersistentZipFileDiffNode : PersistentDiffNode`1<IZipFileNode> {
    [CompilerGeneratedAttribute]
private IZipFileNode <TypedOld>k__BackingField;
    [CompilerGeneratedAttribute]
private IZipFileNode <TypedNew>k__BackingField;
    public NodeDiffState DiffState { get; }
    [NotNullAttribute]
public IZipFileNode TypedOld { get; }
    [NotNullAttribute]
public IZipFileNode TypedNew { get; }
    public PersistentZipFileDiffNode(Lifetime lifetime, FileSystemPath oldPath, FileSystemPath newPath, IAssemblyExplorerModel model, IPersistentNode parent);
    public virtual NodeDiffState get_DiffState();
    [CompilerGeneratedAttribute]
public virtual IZipFileNode get_TypedOld();
    [CompilerGeneratedAttribute]
public virtual IZipFileNode get_TypedNew();
}
internal class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.PersistentNodes.PersistentZipFileNode : UnloadablePersistentExplorerNode {
    [CompilerGeneratedAttribute]
private FileSystemPath <Path>k__BackingField;
    [NotNullAttribute]
public FileSystemPath Path { get; }
    public PersistentZipFileNode(Lifetime lifetime, FileSystemPath zipPath, IAssemblyExplorerModel model, IPersistentNode parent, bool loaded);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_Path();
    public virtual string ToString();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.ResourceDiffNodeObsolete : ResourceNodeBase {
    [CompilerGeneratedAttribute]
private AssemblyDiffState <DiffState>k__BackingField;
    public AssemblyDiffState DiffState { get; public set; }
    private ResourcesFolderDiffNodeObsolete Parent { get; }
    public ResourceDiffNodeObsolete(MetadataToken resourceToken, ManifestResourceAttributes flags, IManifestResourceDisposition disposition, IAssemblyExplorerModel model, ResourcesFolderDiffNodeObsolete parent);
    [CompilerGeneratedAttribute]
public sealed virtual AssemblyDiffState get_DiffState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DiffState(AssemblyDiffState value);
    private ResourcesFolderDiffNodeObsolete get_Parent();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.ResourceNode : ResourceNodeBase {
    public ResourcesFolderNode Parent { get; }
    public ResourceNode(MetadataToken resourceToken, ManifestResourceAttributes flags, IManifestResourceDisposition disposition, IAssemblyExplorerModel model, ResourcesFolderNode parent);
    public ResourcesFolderNode get_Parent();
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.ResourceNodeBase : ExplorerNode {
    [CompilerGeneratedAttribute]
private IManifestResourceDisposition <Disposition>k__BackingField;
    [CompilerGeneratedAttribute]
private MetadataToken <ResourceToken>k__BackingField;
    [CompilerGeneratedAttribute]
private ManifestResourceAttributes <Flags>k__BackingField;
    public IManifestResourceDisposition Disposition { get; }
    public MetadataToken ResourceToken { get; }
    public ManifestResourceAttributes Flags { get; }
    protected ResourceNodeBase(MetadataToken resourceToken, ManifestResourceAttributes flags, IManifestResourceDisposition disposition, IAssemblyExplorerModel model, ResourcesFolderNode parent);
    [CompilerGeneratedAttribute]
public sealed virtual IManifestResourceDisposition get_Disposition();
    [CompilerGeneratedAttribute]
public MetadataToken get_ResourceToken();
    [CompilerGeneratedAttribute]
public ManifestResourceAttributes get_Flags();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.ResourcesFolderDiffNodeObsolete : ResourcesFolderNode {
    [CompilerGeneratedAttribute]
private AssemblyDiffState <DiffState>k__BackingField;
    public AssemblyDiffState DiffState { get; public set; }
    public IAssemblyFileDiffNodeObsolete Parent { get; }
    public ResourcesFolderDiffNodeObsolete(IAssemblyExplorerModel model, IAssemblyFileNode parent);
    [CompilerGeneratedAttribute]
public sealed virtual AssemblyDiffState get_DiffState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DiffState(AssemblyDiffState value);
    public IAssemblyFileDiffNodeObsolete get_Parent();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.ResourcesFolderNode : ExplorerNode {
    public IAssemblyFileNode Parent { get; }
    public ResourcesFolderNode(IAssemblyExplorerModel model, IAssemblyFileNode parent);
    public IAssemblyFileNode get_Parent();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.RootNode : ExtendablePersistentNode {
    public RootNode(Lifetime lifetime, IAssemblyExplorerModel model);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.TopLevelEntryPointDiffNodeObsolete : TopLevelEntryPointNode {
    [CompilerGeneratedAttribute]
private IDeclaredElementEnvoy <AdditionalDiffProgramTypeEnvoy>k__BackingField;
    [CompilerGeneratedAttribute]
private AssemblyDiffState <DiffState>k__BackingField;
    [CanBeNullAttribute]
public IDeclaredElementEnvoy AdditionalDiffProgramTypeEnvoy { get; public set; }
    public AssemblyDiffState DiffState { get; public set; }
    public TopLevelEntryPointDiffNodeObsolete(IDeclaredElementEnvoy programTypeEnvoy, IDeclaredElementEnvoy entryPointMethodEnvoy, IAssemblyExplorerModel model, IExplorerNode parent);
    [CompilerGeneratedAttribute]
public IDeclaredElementEnvoy get_AdditionalDiffProgramTypeEnvoy();
    [CompilerGeneratedAttribute]
public void set_AdditionalDiffProgramTypeEnvoy(IDeclaredElementEnvoy value);
    [CompilerGeneratedAttribute]
public sealed virtual AssemblyDiffState get_DiffState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DiffState(AssemblyDiffState value);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.TopLevelEntryPointNode : ExplorerNode {
    [CompilerGeneratedAttribute]
private IDeclaredElementEnvoy <ProgramTypeEnvoy>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaredElementEnvoy <EntryPointMethodEnvoy>k__BackingField;
    [NotNullAttribute]
public IDeclaredElementEnvoy ProgramTypeEnvoy { get; }
    [NotNullAttribute]
public IDeclaredElementEnvoy EntryPointMethodEnvoy { get; }
    public TopLevelEntryPointNode(IDeclaredElementEnvoy programTypeEnvoy, IDeclaredElementEnvoy entryPointMethodEnvoy, IAssemblyExplorerModel model, IExplorerNode parent);
    [CompilerGeneratedAttribute]
public IDeclaredElementEnvoy get_ProgramTypeEnvoy();
    [CompilerGeneratedAttribute]
public IDeclaredElementEnvoy get_EntryPointMethodEnvoy();
    public virtual bool HasChildren();
    public virtual ICollection`1<IExplorerNode> GetChildren();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.UnresolvedAssemblyReferenceDiffNodeObsolete : UnresolvedAssemblyReferenceNode {
    [CompilerGeneratedAttribute]
private AssemblyDiffState <DiffState>k__BackingField;
    public AssemblyDiffState DiffState { get; public set; }
    public UnresolvedAssemblyReferenceDiffNodeObsolete(AssemblyReference assemblyReference, IAssemblyExplorerModel model, IExplorerNode parent);
    [CompilerGeneratedAttribute]
public sealed virtual AssemblyDiffState get_DiffState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DiffState(AssemblyDiffState value);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.UnresolvedAssemblyReferenceNode : ExplorerNode {
    [CompilerGeneratedAttribute]
private AssemblyReference <myAssemblyReference>k__BackingField;
    public AssemblyReference myAssemblyReference { get; }
    public AssemblyNameInfo TargetAssemblyName { get; }
    public MetadataToken AssemblyReferenceToken { get; }
    public IAssemblyToAssemblyReference Reference { get; }
    public UnresolvedAssemblyReferenceNode(AssemblyReference assemblyReference, IAssemblyExplorerModel model, IExplorerNode parent);
    [CompilerGeneratedAttribute]
public AssemblyReference get_myAssemblyReference();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual AssemblyNameInfo get_TargetAssemblyName();
    public sealed virtual MetadataToken get_AssemblyReferenceToken();
    public sealed virtual IAssemblyToAssemblyReference get_Reference();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.Win32ResourceDiffNodeObsolete : Win32ResourceNode {
    [CompilerGeneratedAttribute]
private AssemblyDiffState <DiffState>k__BackingField;
    public AssemblyDiffState DiffState { get; public set; }
    public Win32ResourceDiffNodeObsolete(ResourceDirectoryEntry resourceDirectoryEntry, int level, IAssemblyExplorerModel model, IExplorerNode parent);
    [CompilerGeneratedAttribute]
public sealed virtual AssemblyDiffState get_DiffState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DiffState(AssemblyDiffState value);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.Win32ResourceNode : ExplorerNode {
    [CompilerGeneratedAttribute]
private ResourceDirectoryEntry <ResourceDirectoryEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Level>k__BackingField;
    public ResourceDirectoryEntry ResourceDirectoryEntry { get; }
    public int Level { get; }
    public Win32ResourceNode(ResourceDirectoryEntry resourceDirectoryEntry, int level, IAssemblyExplorerModel model, IExplorerNode parent);
    [CompilerGeneratedAttribute]
public sealed virtual ResourceDirectoryEntry get_ResourceDirectoryEntry();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Level();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.Win32ResourceNodeEx : object {
    [ExtensionAttribute]
public static ResourceType GetResourceType(IWin32ResourceNode node);
    [CanBeNullAttribute]
private static IWin32ResourceNode GetParentResourceNode(IWin32ResourceNode node);
    [ExtensionAttribute]
public static Int32[] GetSingleResourceIds(IWin32ResourceNode node);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string GetSingleResourceMoniker(IWin32ResourceNode node, string assemblyMoniker);
    private static string GetMoniker(ResourceDirectoryEntry resourceDirectoryEntry);
    [ExtensionAttribute]
public static long GetContentSize(IWin32ResourceNode node);
    private static long GetContentSize(ResourceDirectoryEntry entry);
    private static long GetContentSize(ResourceDirectory resourceDirectory);
    [CompilerGeneratedAttribute]
internal static void <GetSingleResourceIds>g__AddId|2_0(ResourceDirectoryEntry entry, <>c__DisplayClass2_0& );
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.Win32ResourcesFolderDiffNodeObsolete : Win32ResourcesFolderNode {
    [CompilerGeneratedAttribute]
private AssemblyDiffState <DiffState>k__BackingField;
    public AssemblyDiffState DiffState { get; public set; }
    public Win32ResourcesFolderDiffNodeObsolete(IAssemblyExplorerModel model, IExplorerNode parent);
    [CompilerGeneratedAttribute]
public sealed virtual AssemblyDiffState get_DiffState();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DiffState(AssemblyDiffState value);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.Win32ResourcesFolderNode : ExplorerNode {
    public Win32ResourcesFolderNode(IAssemblyExplorerModel model, IExplorerNode parent);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Nodes.ZipFileNode : ExplorerNode {
    [CompilerGeneratedAttribute]
private FileSystemPath <Path>k__BackingField;
    [NotNullAttribute]
public FileSystemPath Path { get; }
    public ZipFileNode(FileSystemPath zipPath, IAssemblyExplorerModel model, IExplorerNode parent);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_Path();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Persistence.FileSystemFolderProvider : object {
    private static string TAG_NAME;
    private static string PATH_ATTRIBUTE_NAME;
    private static string LOADED_ATTRIBUTE_NAME;
    private NuGetPackagesCacheStructure myNuGetPackagesCacheStructure;
    public int FileExtensionPriority { get; }
    public FileSystemFolderProvider(NuGetPackagesCacheStructure nuGetPackagesCacheStructure);
    public sealed virtual bool IsApplicable(FileSystemPath path);
    public sealed virtual bool IsApplicable(INodeData nodeData);
    public sealed virtual IPersistentNode CreateNodeFromPath(FileSystemPath path, IExtendablePersistentNode parent);
    public sealed virtual ICollection`1<string> GetSupportedExtensionFilters();
    public sealed virtual IPersistentNode CreateNodeFromXmlElement(XmlElement xmlElement, IExtendablePersistentNode parent);
    private IPersistentNode CreateFolderNode(Lifetime lifetime, FileSystemPath path, bool loaded, IAssemblyExplorerModel model, IPersistentNode parent);
    public sealed virtual IPersistentNode CreateNodeFromNodeData(INodeData nodeData, IExtendablePersistentNode parent);
    public sealed virtual XmlElement WriteNodeToXmlElement(IPersistentNode node, XmlDocument owner);
    public sealed virtual bool IsApplicable(XmlElement xmlElement);
    public sealed virtual int get_FileExtensionPriority();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Persistence.IAssemblyExplorerSession {
    public IPersistentNode PersistentRoot { get; }
    public AssemblyExplorerModel Model { get; }
    public abstract virtual IPersistentNode get_PersistentRoot();
    public abstract virtual AssemblyExplorerModel get_Model();
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Persistence.PersistentAssemblyProvider : object {
    internal static string BsjbExtensionWithDot;
    internal static string EmptyExtensionWithDot;
    internal static HashSet`1<string> SupportedExtensionsWithDot;
    private static string TAG_NAME;
    private static string PATH_ATTRIBUTE_NAME;
    public int FileExtensionPriority { get; }
    private static PersistentAssemblyProvider();
    public sealed virtual bool IsApplicable(FileSystemPath path);
    public static bool CanBeAssembly(FileSystemPath path);
    public static bool IsAssemblyExtension(string extensionWithDot);
    public sealed virtual bool IsApplicable(INodeData nodeData);
    public sealed virtual IPersistentNode CreateNodeFromPath(FileSystemPath path, IExtendablePersistentNode parent);
    public sealed virtual ICollection`1<string> GetSupportedExtensionFilters();
    public static ChooseFileType[] GetFileTypes();
    public static string GetAssemblyExtensionFilter();
    public sealed virtual IPersistentNode CreateNodeFromXmlElement(XmlElement xmlElement, IExtendablePersistentNode parent);
    public sealed virtual IPersistentNode CreateNodeFromNodeData(INodeData nodeData, IExtendablePersistentNode parent);
    public sealed virtual XmlElement WriteNodeToXmlElement(IPersistentNode node, XmlDocument owner);
    public sealed virtual bool IsApplicable(XmlElement xmlElement);
    public sealed virtual int get_FileExtensionPriority();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Persistence.PersistentModelManager : object {
    private static string CHILDREN_TAG_NAME;
    private SolutionFeaturePartsContainer myApplicableProviders;
    public PersistentModelManager(SolutionFeaturePartsContainer applicableProviders);
    public IEnumerable`1<string> GetSupportedExtensionFilters();
    public bool CanAddFileToPersistentModel(FileSystemPath path);
    [CanBeNullAttribute]
public IPersistentNode AddFileToPersistentModel(FileSystemPath path, IExtendablePersistentNode parent);
    [CanBeNullAttribute]
public IPersistentNode AddDiffToPersistentModel(FileSystemPath oldPath, FileSystemPath newPath, IExtendablePersistentNode parent);
    [CanBeNullAttribute]
public IPersistentNode AddNodeDataToPersistentModel(INodeData nodeData, IExtendablePersistentNode parent);
    [CanBeNullAttribute]
private static IPersistentNode GetExistingNode(FileSystemPath path, IExtendablePersistentNode parent);
    [CanBeNullAttribute]
private static IPersistentDiffNode GetExistingDiffNode(FileSystemPath oldPath, FileSystemPath newPath, IExtendablePersistentNode parent);
    public XmlElement WriteNodeToXmlElement(IPersistentNode node, XmlDocument owner);
    public IPersistentNode CreateNodeFromXmlElement(XmlElement element, IExtendablePersistentNode parent);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Persistence.PersistentZipFileNodeProvider : object {
    private ZipContentProvider myZipContentProvider;
    private static string TAG_NAME;
    private static string PATH_ATTRIBUTE_NAME;
    private static string LOADED_ATTRIBUTE_NAME;
    public static HashSet`1<string> SupportedExtensionsWithDot;
    public int FileExtensionPriority { get; }
    public PersistentZipFileNodeProvider(ZipContentProvider zipContentProvider);
    private static PersistentZipFileNodeProvider();
    public sealed virtual bool IsApplicable(FileSystemPath fileSystemPath);
    public static bool IsZipFileFast(FileSystemPath fileSystemPath);
    public static bool IsNupkgFile(FileSystemPath path);
    public static ChooseFileType[] GetFileTypesExceptNupkg();
    public static ChooseFileType[] GetNupkgFileTypes();
    public sealed virtual bool IsApplicable(INodeData nodeData);
    public sealed virtual IPersistentNode CreateNodeFromPath(FileSystemPath path, IExtendablePersistentNode parent);
    public sealed virtual ICollection`1<string> GetSupportedExtensionFilters();
    public sealed virtual IPersistentNode CreateNodeFromXmlElement(XmlElement xmlElement, IExtendablePersistentNode parent);
    public IPersistentNode CreateZipFileNode(Lifetime lifetime, FileSystemPath path, IAssemblyExplorerModel model, IPersistentNode parent, bool loaded);
    public sealed virtual IPersistentNode CreateNodeFromNodeData(INodeData nodeData, IExtendablePersistentNode parent);
    public sealed virtual XmlElement WriteNodeToXmlElement(IPersistentNode node, XmlDocument owner);
    public sealed virtual bool IsApplicable(XmlElement xmlElement);
    public sealed virtual int get_FileExtensionPriority();
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Presenters.AssemblyDiffNodePresenterObsolete : AssemblyNodePresenterBase {
    public AssemblyDiffNodePresenterObsolete(ProjectModelIcons projectModelIcons, AssemblyInfoDatabase assemblyInfoDataBase, FrameworkLocationService frameworkLocationService, AssemblyExplorerStyles assemblyExplorerStyles);
    public virtual bool IsApplicable(IExplorerNode node);
    public virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Presenters.AssemblyNodePresenter : AssemblyNodePresenterBase {
    public AssemblyNodePresenter(ProjectModelIcons projectModelIcons, AssemblyInfoDatabase assemblyInfoDataBase, FrameworkLocationService frameworkLocationService, AssemblyExplorerStyles assemblyExplorerStyles);
    public virtual bool IsApplicable(IExplorerNode node);
    public virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Presenters.AssemblyNodePresenterBase : object {
    private ProjectModelIcons myProjectModelIcons;
    private AssemblyInfoDatabase myAssemblyInfoDataBase;
    private FrameworkLocationService myFrameworkLocationService;
    private AssemblyExplorerStyles myExplorerStyles;
    protected AssemblyNodePresenterBase(ProjectModelIcons projectModelIcons, AssemblyInfoDatabase assemblyInfoDataBase, FrameworkLocationService frameworkLocationService, AssemblyExplorerStyles assemblyExplorerStyles);
    protected void PresentAssemblyBase(IAssemblyFileNode assemblyNode, IPresentableItem item, IAssemblyLocation assemblyLocation, FileSystemPath assemblyPath, AppHostType appHostType, bool isOldLocationNeed);
    public abstract virtual bool IsApplicable(IExplorerNode node);
    public abstract virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
    [CompilerGeneratedAttribute]
internal static string <PresentAssemblyBase>g__GetNativeImageName|5_0(NativeImageType nativeImageType);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Presenters.AssemblyReferencePresenter : object {
    private IProperty`1<bool> myShowMetadataTokenValuesProperty;
    private AssemblyExplorerStyles myExplorerStyles;
    public AssemblyReferencePresenter(Lifetime lifetime, ISettingsStore settingsStore, IThreading threading, AssemblyExplorerStyles assemblyExplorerStyles);
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Presenters.AssemblyReferencesFolderPresenter : object {
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Presenters.BaseTypesNodePresenter : object {
    private AssemblyExplorerStyles myExplorerStyles;
    public BaseTypesNodePresenter(AssemblyExplorerStyles assemblyExplorerStyles);
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Presenters.FolderNodePresenter : object {
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
    protected virtual FileSystemPath TransformPath(FileSystemPath path);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Presenters.ForwardedTypeNodePresenter : object {
    private AssemblyExplorerStyles myAssemblyExplorerStyles;
    private IProperty`1<bool> myShowMetadataTokenValuesProperty;
    public ForwardedTypeNodePresenter(Lifetime lifetime, ISettingsStore settingsStore, IThreading threading, AssemblyExplorerStyles assemblyExplorerStyles);
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Presenters.ForwardedTypesFolderNodePresenter : object {
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Presenters.IExplorerNodePresenter {
    public abstract virtual bool IsApplicable(IExplorerNode node);
    public abstract virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Presenters.InheritorsNodePresenter : object {
    private AssemblyExplorerStyles myExplorerStyles;
    public InheritorsNodePresenter(AssemblyExplorerStyles assemblyExplorerStyles);
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Presenters.ModuleReferencePresenter : object {
    private IProperty`1<bool> myShowMetadataTokenValuesProperty;
    public ModuleReferencePresenter(Lifetime lifetime, ISettingsStore settingsStore, IThreading threading, AssemblyExplorerStyles assemblyExplorerStyles);
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Presenters.NetResourceFolderPresenter : object {
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Presenters.NetResourceNodePresenter : ResourceNodePresenterBase`1<NetResourceEntryNode> {
    public NetResourceNodePresenter(AssemblyExplorerIconsManager fileIconsManager, AssemblyExplorerStyles assemblyExplorerStyles);
    public virtual bool IsApplicable(IExplorerNode node);
    protected virtual ValueTuple`2<string, string> GetNameAndExtensionWithDot(NetResourceEntryNode node);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Presenters.NonAssemblyFileNodePresenter : ResourceNodePresenterBase`1<NonAssemblyFileNodeBase> {
    public NonAssemblyFileNodePresenter(AssemblyExplorerIconsManager iconsManager, AssemblyExplorerStyles assemblyExplorerStyles);
    public virtual bool IsApplicable(IExplorerNode node);
    protected virtual ValueTuple`2<string, string> GetNameAndExtensionWithDot(NonAssemblyFileNodeBase node);
    protected virtual RichText GetText(string name, string extensionWithDot);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Presenters.NuGetDependenciesFolderPresenter : object {
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Presenters.NuGetDependencyGroupPresenter : object {
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
    [CanBeNullAttribute]
private static string ShortenFrameworkName(string fullName);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Presenters.NuGetDependencyPresenter : object {
    private AssemblyExplorerStyles myExplorerStyles;
    public NuGetDependencyPresenter(AssemblyExplorerStyles assemblyExplorerStyles);
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
    internal static void AppendInclude(StringBuilder sb, PackageDependency dependency);
    internal static void AppendExclude(StringBuilder sb, PackageDependency dependency);
    private static void AppendList(StringBuilder sb, string name, IReadOnlyList`1<string> list);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Presenters.NuGetPackageNodePresenter : object {
    private AssemblyExplorerStyles myExplorerStyles;
    public NuGetPackageNodePresenter(AssemblyExplorerStyles assemblyExplorerStyles);
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Presenters.ResourceNodePresenter : ResourceNodePresenterBase`1<ResourceNodeBase> {
    private IProperty`1<bool> myShowMetadataTokenValuesProperty;
    public ResourceNodePresenter(Lifetime lifetime, ISettingsStore settingsStore, IThreading threading, AssemblyExplorerIconsManager iconsManager, AssemblyExplorerStyles assemblyExplorerStyles);
    public virtual bool IsApplicable(IExplorerNode node);
    private string GetExtensionWithDot(string name);
    protected virtual ValueTuple`2<string, string> GetNameAndExtensionWithDot(ResourceNodeBase node);
    protected virtual void AppendInfo(IPresentableItem item, ResourceNodeBase resourceNode);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Presenters.ResourceNodePresenterBase`1 : object {
    private AssemblyExplorerIconsManager myIconsManager;
    protected AssemblyExplorerStyles myExplorerStyles;
    protected ResourceNodePresenterBase`1(AssemblyExplorerIconsManager iconsManager, AssemblyExplorerStyles assemblyExplorerStyles);
    public virtual bool IsApplicable(IExplorerNode node);
    public virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
    protected abstract virtual ValueTuple`2<string, string> GetNameAndExtensionWithDot(TNode node);
    protected virtual RichText GetText(string name, string extensionWithDot);
    protected virtual void AppendInfo(IPresentableItem item, TNode resourceNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Presenters.ResourcesFolderPresenter : object {
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Presenters.Win32ResourceNodePresenter : object {
    private AssemblyExplorerStyles myAssemblyExplorerStyles;
    public Win32ResourceNodePresenter(AssemblyExplorerStyles assemblyExplorerStyles);
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Presenters.Win32ResourcesFolderPresenter : object {
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.Presenters.ZipFileNodePresenter : object {
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.PropertiesProviders.AssemblyFileNodePropertiesProvider : AssemblyFilePropertiesProviderBase {
    protected virtual IAssemblyFileNode GetAssemblyFileNode(IExplorerNode explorerNode);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.PropertiesProviders.AssemblyFilePropertiesProviderBase : AssemblySubtreeNodePropertiesProvider {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual GridData GetProperties(IExplorerNode explorerNode);
    [CanBeNullAttribute]
protected abstract virtual IAssemblyFileNode GetAssemblyFileNode(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.PropertiesProviders.AssemblyReferenceNodePropertiesProvider : object {
    public sealed virtual bool IsApplicable(IExplorerNode explorerNode);
    public sealed virtual GridData GetProperties(IExplorerNode explorerNode);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.PropertiesProviders.AssemblySubtreeNodePropertiesProvider : object {
    public abstract virtual bool IsApplicable(IExplorerNode explorerNode);
    public abstract virtual GridData GetProperties(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.PropertiesProviders.BaseTypesAndInheritorsNodePropertiesProvider : CompiledElementNodePropertiesProvider {
    public BaseTypesAndInheritorsNodePropertiesProvider(IPsiFiles psiFiles);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    protected virtual IDeclaredElementEnvoy GetDeclaredElementEnvoy(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.PropertiesProviders.CompiledElementNodePropertiesProvider : DeclaredElementNodePropertiesProvider {
    public CompiledElementNodePropertiesProvider(IPsiFiles psiFiles);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    protected virtual GridData CreateGridData(IDeclaredElement declaredElement, IExplorerNode explorerNode);
    [CanBeNullAttribute]
private ICompiledElement GetCompiledEntity(IExplorerNode explorerNode);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.PropertiesProviders.DeclaredElementNodePropertiesProvider : AssemblySubtreeNodePropertiesProvider {
    private IPsiFiles myPsiFiles;
    protected DeclaredElementNodePropertiesProvider(IPsiFiles psiFiles);
    public virtual GridData GetProperties(IExplorerNode explorerNode);
    [CanBeNullAttribute]
protected IDeclaredElement GetDeclaredElement(IExplorerNode explorerNode);
    [CanBeNullAttribute]
protected virtual IDeclaredElementEnvoy GetDeclaredElementEnvoy(IExplorerNode explorerNode);
    [CanBeNullAttribute]
protected abstract virtual GridData CreateGridData(IDeclaredElement declaredElement, IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.PropertiesProviders.FileSystemPathNodePropertiesProvider : object {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual GridData GetProperties(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.PropertiesProviders.ForwardedTypeNodePropertiesProvider : AssemblySubtreeNodePropertiesProvider {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual GridData GetProperties(IExplorerNode explorerNode);
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.PropertiesProviders.INodePropertiesProvider {
    public abstract virtual bool IsApplicable(IExplorerNode explorerNode);
    [CanBeNullAttribute]
public abstract virtual GridData GetProperties(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.PropertiesProviders.MetadataAndReferencesAndResourcesNodePropertiesProvider : AssemblyFilePropertiesProviderBase {
    protected virtual IAssemblyFileNode GetAssemblyFileNode(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.PropertiesProviders.ModuleReferenceNodePropertiesProvider : object {
    public sealed virtual bool IsApplicable(IExplorerNode explorerNode);
    public sealed virtual GridData GetProperties(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.PropertiesProviders.NamespaceNodePropertiesProvider : DeclaredElementNodePropertiesProvider {
    public NamespaceNodePropertiesProvider(IPsiFiles psiFiles);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    protected virtual GridData CreateGridData(IDeclaredElement declaredElement, IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.PropertiesProviders.NetResourceEntryNodePropertiesProvider : ResourceSubtreeNodePropertiesProvider {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual GridData GetProperties(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.PropertiesProviders.NetResourceFolderNodePropertiesProvider : ResourceSubtreeNodePropertiesProvider {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual GridData GetProperties(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.PropertiesProviders.NonAssemblyFileNodePropertiesProvider : object {
    public sealed virtual bool IsApplicable(IExplorerNode explorerNode);
    public sealed virtual GridData GetProperties(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.PropertiesProviders.NuGetDependenciesFolderNodePropertiesProvider : NupkgPropertiesProviderBase {
    public NuGetDependenciesFolderNodePropertiesProvider(ILogger logger);
    protected virtual INuGetPackageNode GetNuGetPackageNode(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.PropertiesProviders.NuGetDependencyGroupNodePropertiesProvider : object {
    public sealed virtual bool IsApplicable(IExplorerNode explorerNode);
    public sealed virtual GridData GetProperties(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.PropertiesProviders.NuGetDependencyNodePropertiesProvider : object {
    public sealed virtual bool IsApplicable(IExplorerNode explorerNode);
    public sealed virtual GridData GetProperties(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.PropertiesProviders.NuGetPackageNodePropertiesProvider : NupkgPropertiesProviderBase {
    public NuGetPackageNodePropertiesProvider(ILogger logger);
    protected virtual INuGetPackageNode GetNuGetPackageNode(IExplorerNode explorerNode);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.PropertiesProviders.NupkgPropertiesProviderBase : FileSystemPathNodePropertiesProvider {
    private ILogger myLogger;
    private string myObjectType;
    protected NupkgPropertiesProviderBase(ILogger logger, string objectType);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual GridData GetProperties(IExplorerNode explorerNode);
    protected abstract virtual INuGetPackageNode GetNuGetPackageNode(IExplorerNode explorerNode);
    [CanBeNullAttribute]
private NuspecSource TryGetNuspecSource(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.PropertiesProviders.ResourceNodePropertiesProvider : ResourceSubtreeNodePropertiesProvider {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual GridData GetProperties(IExplorerNode explorerNode);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.PropertiesProviders.ResourceSubtreeNodePropertiesProvider : AssemblySubtreeNodePropertiesProvider {
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.PropertiesProviders.TopLevelEntryPointNodePropertiesProvider : CompiledElementNodePropertiesProvider {
    public TopLevelEntryPointNodePropertiesProvider(IPsiFiles psiFiles);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    protected virtual IDeclaredElementEnvoy GetDeclaredElementEnvoy(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.PropertiesProviders.Win32ResourceNodePropertiesProvider : AssemblySubtreeNodePropertiesProvider {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual GridData GetProperties(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("0")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.SearchProviders.AssemblyNodeSearchProvider : NodeSearchProviderWithResourceCaches`1<IAssemblyFileNode> {
    private ElementSearchCache myElementSearchCache;
    public AssemblyNodeSearchProvider(IPsiModules psiModules, ISearchCache searchCache, NetResourceCache netResourceCache, ManifestResourceDispositionCache manifestResourceDispositionCache, ElementSearchCache elementSearchCache);
    protected virtual string GetNodeText(IAssemblyFileNode node);
    protected virtual bool CheckContent(IAssemblyFileNode node, IIdentifierMatcher matcher);
    protected virtual bool CheckContent(IAssemblyFileNode node, IIdentifierMatcher matcher, IPsiModule psiModule);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.SearchProviders.AssemblyReferenceNodeSearchProvider : NodeStopSearchProvider`1<AssemblyReferenceNode> {
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.SearchProviders.AssemblyReferencesFolderNodeSearchProvider : NodeStopSearchProvider`1<AssemblyReferencesFolderNode> {
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.SearchProviders.DeclaredElementNodeSearchProvider : NodeSearchProvider`1<DeclaredElementNode> {
    private ElementSearchCache myElementSearchCache;
    public DeclaredElementNodeSearchProvider(ElementSearchCache elementSearchCache);
    protected virtual string GetNodeText(DeclaredElementNode node);
    protected virtual bool CheckContent(DeclaredElementNode node, IIdentifierMatcher matcher);
    private bool CheckDeclaredElement(IDeclaredElement declaredElement, DeclaredElementNode node, IIdentifierMatcher matcher);
    private bool InBaseOrInheritorsSubtree(IExplorerNode node);
    [CanBeNullAttribute]
private IAssembly GetAssembly(IExplorerNode node);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.SearchProviders.ElementSearchCache : object {
    private static int GotoItemsLimit;
    private Lifetime mySolutionLifetime;
    private ISolution mySolution;
    private IShellLocks myShellLocks;
    [CanBeNullAttribute]
private ElementSearchCacheController myGotoController;
    private SequentialLifetimes myItemsProviderLifetime;
    private string myCurrentFilter;
    private OneToListMap`2<IAssembly, INamespace> myNamespaces;
    private HashSet`1<ITypeMember> myTypeMembers;
    private HashSet`1<IAssembly> myAssemblies;
    private IMainWindowPopupWindowContext myMainWindowPopupWindowContext;
    private Lifetime myControllerLifetime;
    public ElementSearchCache(Lifetime solutionLifetime, ISolution solution, IShellLocks shellLocks, GotoMerger gotoMerger, IMainWindowPopupWindowContext mainWindowPopupWindowContext);
    public bool CheckAssembly(IAssembly assembly, string filter);
    public bool CheckNamespace(IAssembly assembly, INamespace ns, string filter);
    public bool CheckTypeMember(ITypeMember typeMember, string filter);
    private void ClearCaches();
    public void ResetGotoController();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.SearchProviders.ElementSearchCache/<PrepareCache>d__18")]
public Task`1<bool> PrepareCache(IEnumerable`1<IPsiModule> modules, string filter, Func`1<bool> checkForInterrupt);
    private void ItemsConsumer(IEnumerable`1<JetPopupMenuItem> items);
    private bool AddAssembly(IAssembly assembly);
    private void AddTypeMember(IAssembly assembly, ITypeMember typeMember);
    private void AddNamespace(IAssembly assembly, INamespace ns);
}
internal class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.SearchProviders.ElementSearchCacheController : GotoSearchController {
    [CompilerGeneratedAttribute]
private int <MenuItemsCountLimit>k__BackingField;
    [NotNullAttribute]
public ElementSearchCacheItemsProvider Provider { get; }
    public int MenuItemsCountLimit { get; }
    private ElementSearchCacheController(Lifetime lifetime, GotoByNameModel model, ElementSearchCacheItemsProvider itemsProvider, ISolution solution, IMainWindowPopupWindowContext popupContext, int gotoItemsLimit);
    public ElementSearchCacheItemsProvider get_Provider();
    [CompilerGeneratedAttribute]
public virtual int get_MenuItemsCountLimit();
    [NotNullAttribute]
public static ElementSearchCacheController Create(Lifetime lifetime, ISolution solution, IMainWindowPopupWindowContext popupContext, int gotoItemsLimit);
}
internal class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.SearchProviders.ElementSearchCacheItemsProvider : GotoSymbolItemsProvider {
    private IEnumerable`1<IPsiModule> myModules;
    [CompilerGeneratedAttribute]
private GotoContext <GotoContext>k__BackingField;
    public GotoContext GotoContext { get; }
    public ElementSearchCacheItemsProvider(Lifetime lifetime, ISolution solution);
    protected virtual ICollection`1<ChainedNavigationItemData> InitScopes(bool isSearchingInLibs, INavigationProviderFilter navfilter);
    public void SetPsiModulesScope(IEnumerable`1<IPsiModule> modules);
    [CompilerGeneratedAttribute]
public GotoContext get_GotoContext();
    public void ConsumeItems(string filterString, int itemsCount, GotoItemsConsumer itemsConsumer, Func`1<bool> checkForInterrupt);
    protected virtual bool AutoActivateAdvancedSearch(bool containingScopeNotEmpty, INavigationProviderFilter navfilter, GotoItemsProviderModel itemsModel);
    protected virtual void DeactivateAdvancedSearchIfNeeded(string filterString, Boolean& isSearchingInLibs, INavigationProviderFilter navfilter, GotoItemsProviderModel itemsModel);
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.SearchProviders.INodeSearchProvider {
    public abstract virtual bool IsApplicable(IExplorerNode node);
    public abstract virtual bool IsSearchAccepted(IExplorerNode node, IIdentifierMatcher matcher);
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.SearchProviders.ISearchCache {
    public abstract virtual void AddSearchResult(object item, IPsiModule psiModule, string filter, bool searchResult);
    public abstract virtual Nullable`1<bool> TryGetSearchResult(object item, IPsiModule psiModule, string filter);
    public abstract virtual void Clear();
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.SearchProviders.KeywordsNodeSearchProvider`1 : object {
    protected String[] Keywords { get; }
    protected abstract virtual String[] get_Keywords();
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual bool IsSearchAccepted(IExplorerNode node, IIdentifierMatcher matcher);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.SearchProviders.NodeSearchProvider`1 : object {
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public virtual bool IsSearchAccepted(IExplorerNode node, IIdentifierMatcher matcher);
    [CanBeNullAttribute]
protected abstract virtual string GetNodeText(TNode node);
    protected abstract virtual bool CheckContent(TNode node, IIdentifierMatcher matcher);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.SearchProviders.NodeSearchProviderWithResourceCaches`1 : NodeSearchProvider`1<TNode> {
    private IPsiModules myPsiModules;
    private ISearchCache mySearchCache;
    private NetResourceCache myNetResourceCache;
    private ManifestResourceDispositionCache myManifestResourceDispositionCache;
    protected NodeSearchProviderWithResourceCaches`1(IPsiModules psiModules, ISearchCache searchCache, NetResourceCache netResourceCache, ManifestResourceDispositionCache manifestResourceDispositionCache);
    protected virtual bool CheckContent(TNode node, IIdentifierMatcher matcher);
    protected abstract virtual bool CheckContent(TNode node, IIdentifierMatcher matcher, IPsiModule psiModule);
    protected bool TestManifestResourceDispositionsCache(IPersistentNode parent, IAssemblyLocation assemblyLocation, IIdentifierMatcher matcher, IPsiModule psiModule);
    private bool TestManifestResourceDispositions(IPersistentNode parent, IAssemblyLocation assemblyLocation, IIdentifierMatcher matcher);
    protected bool TestManifestResourceDisposition(IManifestResourceDisposition disposition, IPersistentNode parent, IAssemblyLocation assemblyLocation, IIdentifierMatcher matcher);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.SearchProviders.NodeStopSearchProvider`1 : NodeSearchProvider`1<TNode> {
    public virtual bool IsSearchAccepted(IExplorerNode node, IIdentifierMatcher matcher);
    protected virtual string GetNodeText(TNode node);
    protected virtual bool CheckContent(TNode node, IIdentifierMatcher matcher);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.SearchProviders.ResourceConsumingNodeSearchProvider : NodeStopSearchProvider`1<IResourceConsumingNode> {
}
[SolutionFeaturePartAttribute("0")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.SearchProviders.ResourceNodeSearchProvider : NodeSearchProviderWithResourceCaches`1<ResourceNode> {
    public ResourceNodeSearchProvider(IPsiModules psiModules, ISearchCache searchCache, NetResourceCache netResourceCache, ManifestResourceDispositionCache manifestResourceDispositionCache);
    protected virtual string GetNodeText(ResourceNode node);
    protected virtual bool CheckContent(ResourceNode node, IIdentifierMatcher matcher, IPsiModule psiModule);
}
[SolutionFeaturePartAttribute("0")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.SearchProviders.ResourcesFolderNodeSearchProvider : NodeSearchProviderWithResourceCaches`1<ResourcesFolderNode> {
    public ResourcesFolderNodeSearchProvider(IPsiModules psiModules, ISearchCache searchCache, NetResourceCache netResourceCache, ManifestResourceDispositionCache manifestResourceDispositionCache);
    protected virtual string GetNodeText(ResourcesFolderNode node);
    protected virtual bool CheckContent(ResourcesFolderNode node, IIdentifierMatcher matcher, IPsiModule psiModule);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.SearchProviders.SearchCache : object {
    private Dictionary`2<Pair`2<object, IPsiModule>, bool> myCache;
    private string myFilter;
    public sealed virtual void AddSearchResult(object item, IPsiModule psiModule, string filter, bool searchResult);
    public sealed virtual Nullable`1<bool> TryGetSearchResult(object item, IPsiModule psiModule, string filter);
    public sealed virtual void Clear();
    private void TestFilter(string filter);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExplorerNodesModel.SearchProviders.TopLevelEntryPointNodeSearchProvider : KeywordsNodeSearchProvider`1<TopLevelEntryPointNode> {
    [CompilerGeneratedAttribute]
private String[] <Keywords>k__BackingField;
    protected String[] Keywords { get; }
    [CompilerGeneratedAttribute]
protected virtual String[] get_Keywords();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.Comparers.AssemblyExplorerWithProjFilesComparer : AssemblyExplorerComparer {
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.Comparers.AssemblyExplorerWithProjFilesComparerProvider : AssemblyExplorerComparerProvider {
    public virtual AssemblyExplorerComparer GetComparer();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.Locators.LocationExtensions : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static HashSet`1<FileSystemPath> TryGetSourceFileLocations(ITypeMember typeMember);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static HashSet`1<FileSystemPath> TryGetNamespaceFolderLocations(AssemblyNamespace assemblyNamespace);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static HashSet`1<FileSystemPath> TryGetNamespaceFolderLocations(INamespace ns, IAssembly assembly);
    [ExtensionAttribute]
public static ICollection`1<TreeModelNode> SelectFileSystemPathNodes(IEnumerable`1<TreeModelNode> scope, HashSet`1<FileSystemPath> locations);
    [ExtensionAttribute]
public static ICollection`1<TreeModelNode> SelectAssemblyFileNodes(IEnumerable`1<TreeModelNode> scope, IAssembly assembly);
    [ExtensionAttribute]
public static ICollection`1<IExplorerNode> SelectAssemblyFileNodes(IEnumerable`1<IExplorerNode> scope, IAssembly assembly);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.Locators.ProjFileSourceLocator : AssemblyExplorerLocatorBase {
    public virtual bool IsApplicable(object target);
    public virtual ICollection`1<TreeModelNode> LocateNodes(object target, ICollection`1<TreeModelNode> scope);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.Menu.AssemblyExplorerWithProjFilesReferencesHierarchyNodeChecker : AssemblyExplorerReferencesHierarchyNodeChecker {
    public AssemblyExplorerWithProjFilesReferencesHierarchyNodeChecker(AssemblyInfoDatabase assemblyInfoDataBase);
    protected virtual bool LastChanceCheck(object dataValue);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.NodeProviders.ProjFileAssemblyPathActionProvider : AssemblyPathActionProviderBase {
    public ProjFileAssemblyPathActionProvider(WorkspaceManager workspaceManager);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual bool CollectLoadActions(IExplorerNode explorerNode, List`1<Action`1<IProgressIndicator>> actions);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.NodeProviders.ProjFileFolderNodesProvider : ExplorerNodesProviderBase {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.NodeProviders.ProjFileItemNodesProvider : ExplorerNodesProviderBase {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.NodeProviders.ProjFileReferenceNodesProvider : ExplorerNodesProviderBase {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    [CanBeNullAttribute]
private IDictionary`2<string, IAssemblyToAssemblyReference> TryGetAssemblyReferences(IAssembly assembly);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.NodeProviders.ProjFileReferencesFolderNodeProvider : ExplorerNodesProviderBase {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.Nodes.IFolderElementAccessorNode {
    [CanBeNullAttribute]
public FolderElement Folder { get; }
    public abstract virtual FolderElement get_Folder();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.Nodes.IProjFileAccessorNode {
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.Nodes.IProjFileNode {
    [CanBeNullAttribute]
public IAssemblyLocation BoundAssemblyLocation { get; }
    public abstract virtual IAssemblyLocation get_BoundAssemblyLocation();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.Nodes.ProjectFileItemNode : ExplorerNode {
    private IProjFileAccessor myProjFileAccessor;
    private ProjFile myProject;
    [CompilerGeneratedAttribute]
private FileSystemPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemElement <ItemElement>k__BackingField;
    public ProjFile Project { get; }
    [NotNullAttribute]
public FileSystemPath Path { get; }
    public ItemElement ItemElement { get; }
    public ProjectFileItemNode(ItemElement itemElement, FileSystemPath path, IAssemblyExplorerModel model, IProjFileAccessorNode parent);
    public sealed virtual ProjFile get_Project();
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_Path();
    [CompilerGeneratedAttribute]
public ItemElement get_ItemElement();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.Nodes.ProjFileFolderNode : ExplorerNode {
    private IProjFileAccessor myProjFileAccessor;
    private ProjFile myProject;
    [CompilerGeneratedAttribute]
private FileSystemPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private FolderElement <Folder>k__BackingField;
    public ProjFile Project { get; }
    [NotNullAttribute]
public FileSystemPath Path { get; }
    public FolderElement Folder { get; }
    public ProjFileFolderNode(FolderElement folderElement, IAssemblyExplorerModel model, IProjFileAccessorNode parent);
    public sealed virtual ProjFile get_Project();
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual FolderElement get_Folder();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[DebuggerDisplayAttribute("ProjFileNode: {Path}")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.Nodes.ProjFileNode : ExplorerNode {
    [CompilerGeneratedAttribute]
private FileSystemPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssemblyLocation <BoundAssemblyLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjFile <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private FolderElement <Folder>k__BackingField;
    public static HashSet`1<string> SupportedExtensionsWithDot;
    [NotNullAttribute]
public FileSystemPath Path { get; }
    public IAssemblyLocation BoundAssemblyLocation { get; }
    public ProjFile Project { get; }
    public FolderElement Folder { get; }
    public ProjFileNode(FileSystemPath path, IAssemblyLocation assemblyLocation, IAssemblyExplorerModel model, IExplorerNode parent, Lifetime lifetime);
    private static ProjFileNode();
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual IAssemblyLocation get_BoundAssemblyLocation();
    [CompilerGeneratedAttribute]
public sealed virtual ProjFile get_Project();
    [CompilerGeneratedAttribute]
public sealed virtual FolderElement get_Folder();
    private void AddRemoveMappingsLifetimeBracket(ProjFile projFile, Lifetime lifetime);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.Nodes.ProjFileReferenceNode : ExplorerNode {
    private IProjFileAccessor myProjFileAccessor;
    private IAssembly myReferenceAssembly;
    private ProjFile myProject;
    [CompilerGeneratedAttribute]
private ItemElement <ReferenceElement>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reference>k__BackingField;
    public ProjFile Project { get; }
    [CanBeNullAttribute]
public IAssembly ReferenceAssembly { get; }
    public ItemElement ReferenceElement { get; }
    public string Reference { get; }
    public ProjFileReferenceNode(ItemElement referenceElement, IAssemblyExplorerModel model, IProjFileAccessorNode parent);
    public sealed virtual ProjFile get_Project();
    public IAssembly get_ReferenceAssembly();
    [CompilerGeneratedAttribute]
public ItemElement get_ReferenceElement();
    [CompilerGeneratedAttribute]
public string get_Reference();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool <get_ReferenceAssembly>b__6_0(IAssemblyToAssemblyReference assemblyToAssemblyReference);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.Nodes.ProjFileReferencesFolderNode : ExplorerNode {
    private IProjFileAccessor myProjFileAccessor;
    private ProjFile myProject;
    public ProjFile Project { get; }
    public ProjFileReferencesFolderNode(IAssemblyExplorerModel model, IProjFileAccessorNode parent);
    public sealed virtual ProjFile get_Project();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DebuggerDisplayAttribute("PersistentProjFileNode: {Path}")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.Persistence.PersistentProjFileNode : PersistentExplorerNode {
    [CompilerGeneratedAttribute]
private FileSystemPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssemblyLocation <BoundAssemblyLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjFile <Project>k__BackingField;
    [NotNullAttribute]
public FileSystemPath Path { get; }
    public IAssemblyLocation BoundAssemblyLocation { get; }
    public ProjFile Project { get; private set; }
    public FolderElement Folder { get; }
    private PersistentProjFileNode(FileSystemPath path, IAssemblyLocation boundAssemblyLocation, Lifetime lifetime, IAssemblyExplorerModel model, IPersistentNode parent);
    public PersistentProjFileNode(ProjFile projFile, Lifetime lifetime, IAssemblyExplorerModel model, IPersistentNode parent);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual IAssemblyLocation get_BoundAssemblyLocation();
    [CompilerGeneratedAttribute]
public sealed virtual ProjFile get_Project();
    [CompilerGeneratedAttribute]
private void set_Project(ProjFile value);
    public sealed virtual FolderElement get_Folder();
    [CanBeNullAttribute]
public static PersistentProjFileNode Create(FileSystemPath path, Lifetime lifetime, IAssemblyExplorerModel model, IPersistentNode parent);
    private void HandleDescriptorReloadedEvent(EventArgs args);
    private void AddRemoveMappingsLifetimeBracket(ProjFile projFile);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.Persistence.PersistentProjFileNodeProvider : object {
    private static string TagName;
    private static string PathAttributeName;
    public int FileExtensionPriority { get; }
    public sealed virtual bool IsApplicable(XmlElement xmlElement);
    public sealed virtual bool IsApplicable(FileSystemPath fileSystemPath);
    public sealed virtual bool IsApplicable(INodeData nodeData);
    public sealed virtual int get_FileExtensionPriority();
    public sealed virtual ICollection`1<string> GetSupportedExtensionFilters();
    public sealed virtual IPersistentNode CreateNodeFromPath(FileSystemPath path, IExtendablePersistentNode parent);
    private static IPersistentNode CreateProjFileNodeFromFile(FileSystemPath path, IExtendablePersistentNode parent);
    public sealed virtual IPersistentNode CreateNodeFromXmlElement(XmlElement xmlElement, IExtendablePersistentNode parent);
    public sealed virtual IPersistentNode CreateNodeFromNodeData(INodeData nodeData, IExtendablePersistentNode parent);
    public sealed virtual XmlElement WriteNodeToXmlElement(IPersistentNode node, XmlDocument owner);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.Presenters.ProjFileFolderNodePresenter : object {
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.Presenters.ProjFileItemNodePresenter : object {
    private AssemblyExplorerIconsManager myIconsManager;
    public ProjFileItemNodePresenter(AssemblyExplorerIconsManager iconsManager);
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.Presenters.ProjFileNodePresenter : object {
    private AssemblyExplorerStyles myExplorerStyles;
    public ProjFileNodePresenter(AssemblyExplorerStyles assemblyExplorerStyles);
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.Presenters.ProjFileReferenceNodePresenter : object {
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.Presenters.ProjFileReferencesFolderNodePresenter : object {
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "ExportToProjectActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.ProjFileModel.Export.AssemblyExplorerExportToProjectActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.ProjFileModel.Export.ExportToProjectUserInteractionStub : object {
    public virtual void Export(IAssemblyFile assemblyFile);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.ProjFileModel.Export.History.AssemblyExportHistoryManager : object {
    private IContextBoundSettingsStoreLive mySettingsStoreLive;
    private Dictionary`2<string, string> myAssembly2Project;
    private static string HistoryRootTag;
    private static string HistoryElementTag;
    private static string AssemblyAttribute;
    private static string ProjectAttribute;
    public AssemblyExportHistoryManager(Lifetime lifetime, ISettingsStore settingsStore);
    public sealed virtual FileSystemPath TryGetExportedProject(IAssemblyFile assemblyFile);
    public sealed virtual void Store(IAssemblyFile assemblyFile, ProjFile projFile);
    private static string GetKey(IAssemblyFile assemblyFile);
    private void LoadHistoryFromSettings();
    private void LoadHistoryFromTextReader(TextReader reader);
    private void SaveHistoryToSettings();
    private XmlElement SerializeHistory();
}
[SettingsKeyAttribute("JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.ProjFileModel.Export.History.AssemblyExportSettings", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "AssemblyExportHistoryAssemblyFileWithModificationTimeCreatedProjectPathSettingDescription")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.ProjFileModel.Export.History.AssemblyExportHistorySettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "HistoryXMLSettingDescription")]
public string History;
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "AssemblyExportParametersSettingDescription")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.ProjFileModel.Export.History.AssemblyExportSettings : object {
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.ProjFileModel.Export.History.IAssemblyExportHistoryManager {
    [CanBeNullAttribute]
public abstract virtual FileSystemPath TryGetExportedProject(IAssemblyFile assemblyFile);
    public abstract virtual void Store(IAssemblyFile assemblyFile, ProjFile projFile);
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.ProjFileModel.Export.IExportParameters {
    public bool AddProjectToAssemblyExplorer { get; }
    public bool OpenProjectInVisualStudio { get; }
    public abstract virtual bool get_AddProjectToAssemblyExplorer();
    public abstract virtual bool get_OpenProjectInVisualStudio();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.ProjFileModel.Export.IExportToProjectUserInteraction {
    public abstract virtual void Export(IAssemblyFile assemblyFile);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "OpenInVisualStudioActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.ProjFileModel.Export.OpenProjectInVisualStudioActionHandler : AssemblyExplorerPathActionBase`1<IProjFileNode> {
    protected virtual void PathAction(FileSystemPath path);
    protected virtual IZipFileNode FindUpperParentZip(IProjFileNode fileSystemPathNode);
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.ProjFileModel.IProjFileAccessor {
    [CanBeNullAttribute]
public ProjFile Project { get; }
    public abstract virtual ProjFile get_Project();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.ProjFileModel.IProjFileSourceMappings {
    public abstract virtual ProjFileItemElementMapping AddMapping(LinkedItemElement linkedItemElement, ProjFile projFile);
    [CanBeNullAttribute]
public abstract virtual ProjFileItemElementMapping GetMapping(FileSystemPath path);
    public abstract virtual IEnumerable`1<ProjFileItemElementMapping> GetMappings(IClrDeclaredElement declaredElement);
    public abstract virtual void RemoveMappings(ProjFile projFile);
    public abstract virtual IEnumerable`1<ProjFile> GetProjFiles(IAssembly assembly);
    public abstract virtual void Clear();
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.ProjFileModel.Occurrences.ProjFileChainedCodeModelOccurrencePresenter : ChainedCodeModelOccurrencePresenter {
    protected virtual void DisplayLocationAndGlyph(IMenuItemDescriptor descriptor, OccurrencePresentationOptions options, IDeclaredElement element, DeclaredElementOccurrence declaredElementOccurrence, bool specifyVersion, Nullable`1<DocumentCoords> coords);
    public virtual bool IsApplicable(IOccurrence occurrence);
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.ProjFileModel.Occurrences.ProjFileDeclaredElementOccurrencePresenter : DeclaredElementOccurrencePresenter {
    protected virtual void DisplayLocationAndGlyph(IMenuItemDescriptor descriptor, OccurrencePresentationOptions options, IDeclaredElement element, DeclaredElementOccurrence declaredElementOccurrence, bool specifyVersion, Nullable`1<DocumentCoords> coords);
    public virtual bool IsApplicable(IOccurrence occurrence);
}
public static class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.ProjFileModel.Occurrences.ProjFileOccurrencePresenterUtil : object {
    public static void DisplayProjFileLocationAndGlyph(IMenuItemDescriptor descriptor, OccurrencePresentationOptions options, ProjFile projFile);
    [CanBeNullAttribute]
public static ProjFile GetProjFile(IDeclaredElement declaredElement);
    [CanBeNullAttribute]
public static ProjFile GetProjFile(IProjectItem projectItem);
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.ProjFileModel.Occurrences.ProjFileProjectItemOccurrencePresenter : ProjectItemOccurrencePresenter {
    protected virtual void PresentLocation(IMenuItemDescriptor descriptor, OccurrencePresentationOptions options, IProjectItem projectItem, bool showSpecificVersion);
    public virtual bool IsApplicable(IOccurrence occurrence);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.ProjFileModel.ProjFileAssemblyMappings : object {
    private Dictionary`2<IAssembly, HashSet`1<ProjFile>> myMappings;
    public IEnumerable`1<ProjFile> GetProjFiles(IAssembly assembly);
    public bool AddMapping(IAssembly assembly, ProjFile projFile);
    public bool RemoveMapping(IAssembly assembly, ProjFile projFile);
    public bool RemoveMapping(ProjFile projFile);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.ProjFileModel.ProjFileExternalSourcesProvider : ExternalSourcesProviderBase {
    private IProjFileSourceMappings myProjFileSourceMappings;
    public ProjFileExternalSourcesProvider(IProjFileSourceMappings projFileSourceMappings);
    public virtual ExternalSourcesMapping MapFileToAssembly(FileSystemPath file);
    public virtual IReadOnlyCollection`1<ExternalSourcesMapping> NavigateToSources(ICompiledElement compiledElement, ITaskExecutor taskExecutor);
    [CompilerGeneratedAttribute]
private ExternalSourcesMapping <NavigateToSources>b__3_0(ProjFileItemElementMapping mapping);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.ProjFileModel.ProjFileItemElementMapping : object {
    private LinkedItemElement myLinkedItemElement;
    [CompilerGeneratedAttribute]
private IAssembly <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjFile <Project>k__BackingField;
    public FileSystemPath FileLocation { get; }
    public ItemElement Item { get; }
    public IAssembly Assembly { get; }
    public ProjFile Project { get; }
    public ProjFileItemElementMapping(LinkedItemElement linkedItemElement, ProjFile projFile, IAssembly assembly);
    public ProjFileItemElementMapping(LinkedItemElement linkedItemElement, ProjFile projFile);
    public FileSystemPath get_FileLocation();
    public ItemElement get_Item();
    [CompilerGeneratedAttribute]
public IAssembly get_Assembly();
    [CompilerGeneratedAttribute]
public ProjFile get_Project();
    public virtual string ToString();
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.ProjFileModel.ProjFileItemNavigationProvider : object {
    public static string ProjFileItemId;
    private FileSystemPathNavigator myFileSystemPathNavigator;
    public ProjFileItemNavigationProvider(FileSystemPathNavigator fileSystemPathNavigator);
    public sealed virtual bool IsApplicable(TreeModelNode data);
    public sealed virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(TreeModelNode target);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.ProjFileModel.ProjFileSourceMappings : object {
    private Dictionary`2<string, ProjFileItemElementMapping> myMappings;
    private ProjFileAssemblyMappings myProjFileAssemblyMappings;
    public sealed virtual ProjFileItemElementMapping AddMapping(LinkedItemElement linkedItemElement, ProjFile projFile);
    public sealed virtual ProjFileItemElementMapping GetMapping(FileSystemPath path);
    public sealed virtual IEnumerable`1<ProjFileItemElementMapping> GetMappings(IClrDeclaredElement declaredElement);
    public sealed virtual void RemoveMappings(ProjFile projFile);
    public sealed virtual IEnumerable`1<ProjFile> GetProjFiles(IAssembly assembly);
    private IEnumerable`1<string> GetAssociatedMappingsKeys(ProjFile projFile);
    public sealed virtual void Clear();
    private void AddNewMapping(ProjFileItemElementMapping mapping);
    private static string GetKey(FileSystemPath path);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.ProjFileModel.ProjFileSourceMappingsExtensions : object {
    [ExtensionAttribute]
public static void AddMappings(IProjFileSourceMappings projFileSourceMappings, ProjFile projFile);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.ProjFileModel.ProjFileXmlNavigationProvider : object {
    public static string PresentableName;
    private FileSystemPathNavigator myFileSystemPathNavigator;
    public ProjFileXmlNavigationProvider(FileSystemPathNavigator fileSystemPathNavigator);
    public sealed virtual bool IsApplicable(TreeModelNode data);
    public sealed virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(TreeModelNode target);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.PropertiesProviders.ProjFileAccessorNodePropertiesProvider : object {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual GridData GetProperties(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.PropertiesProviders.ProjFileFolderNodePropertiesProvider : ProjFileAccessorNodePropertiesProvider {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual GridData GetProperties(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.PropertiesProviders.ProjFileItemNodePropertiesProvider : ProjFileAccessorNodePropertiesProvider {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual GridData GetProperties(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.PropertiesProviders.ProjFileNodePropertiesProvider : ProjFileAccessorNodePropertiesProvider {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual GridData GetProperties(IExplorerNode explorerNode);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.ExportedProject.ZoneMarker : object {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.FileTypes.AssemblyExplorerIconsManager : object {
    [NotNullAttribute]
public IconId GetFileIcon(string extensionWithDot);
}
public static class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Highlighting.AssemblyExplorerHighlightingAttributeGroup : object {
    public static string ID;
    public static string Title;
    private static AssemblyExplorerHighlightingAttributeGroup();
}
[RegisterHighlighterAttribute("Assembly Explorer Additional Information")]
[RegisterHighlighterAttribute("Assembly Explorer Metadata Usage")]
[RegisterHighlighterAttribute("Assembly Explorer Metadata Emphasized")]
[RegisterHighlighterAttribute("Assembly Explorer Metadata Token")]
[RegisterHighlighterAttribute("Assembly Explorer Base/Inheritors")]
[RegisterHighlighterAttribute("Assembly Explorer Type Element")]
[RegisterHighlighterAttribute("Assembly Explorer Internal/Private")]
[RegisterConfigurableHighlightingsGroupAttribute("Assembly Explorer", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "AssemblyExplorerActionGroupText", "")]
[RegisterHighlighterGroupAttribute("Assembly Explorer", "Assembly Explorer", "4")]
public static class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Highlighting.AssemblyExplorerHighlightingAttributeIds : object {
    public static string ADDITIONAL_INFORMATION;
    public static string METADATA_USAGE;
    public static string METADATA_EMPHASIZED;
    public static string METADATA_TOKEN;
    public static string BASE_INHERITORS;
    public static string TYPE_ELEMENT;
    public static string INTERNAL_OR_PRIVATE;
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.IAssemblyDiffExplorerManager {
    [CanBeNullAttribute]
public IProperty`1<DiffMode> DiffMode { get; }
    public abstract virtual IProperty`1<DiffMode> get_DiffMode();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.IAssemblyExplorerDescriptor {
    [NotNullAttribute]
public LifetimeDefinition LifetimeDefinition { get; }
    [NotNullAttribute]
public IAssemblyExplorerModel AssemblyExplorerModel { get; }
    [NotNullAttribute]
public IEnumerable`1<TreeModelNode> Roots { get; }
    [NotNullAttribute]
public IProperty`1<bool> Visible { get; }
    [NotNullAttribute]
public ISignal`1<EventArgs> ReloadedSignal { get; }
    [NotNullAttribute]
public IProperty`1<IFocusablePanel> FocusablePanelWhenConnectedToView { get; }
    public abstract virtual LifetimeDefinition get_LifetimeDefinition();
    public abstract virtual IAssemblyExplorerModel get_AssemblyExplorerModel();
    public abstract virtual IEnumerable`1<TreeModelNode> get_Roots();
    public abstract virtual IProperty`1<bool> get_Visible();
    public abstract virtual ISignal`1<EventArgs> get_ReloadedSignal();
    public abstract virtual void ImmediateTreeUpdate();
    public abstract virtual void ImmediateLoad();
    public abstract virtual void RequestFullUpdate();
    public abstract virtual bool HasAnyCachedChildren(TreeModelNode node);
    public abstract virtual IProperty`1<IFocusablePanel> get_FocusablePanelWhenConnectedToView();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.IAssemblyExplorerManager {
    [ItemCanBeNullAttribute]
public abstract virtual Task`1<AssemblyExplorer> EnsureOpenAndReady();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.IAssemblyExplorerManagerBase {
    [CanBeNullAttribute]
public AssemblyExplorer Opened { get; }
    public ISignal`1<EventArgs> DescriptorReloadedSignal { get; }
    public abstract virtual void Open();
    public abstract virtual AssemblyExplorer get_Opened();
    public abstract virtual void AddItemsByPath(IEnumerable`1<FileSystemPath> paths);
    public abstract virtual void AddItemsByNodeData(IEnumerable`1<INodeData> nodeDatas);
    public abstract virtual bool AddDiffItemByPaths(FileSystemPath oldPath, FileSystemPath newPath);
    public abstract virtual bool CanAddItemByPath(FileSystemPath path);
    public abstract virtual void LoadModelFromTextReader(TextReader assemblyListReader);
    public abstract virtual void SaveModelToTextWriter(TextWriter assemblyListWriter);
    public abstract virtual void ClearModel();
    public abstract virtual void RequestFullUpdate();
    public abstract virtual void NavigateToTreeModelNode(TreeModelNode node, bool transferFocus);
    public abstract virtual void NavigateToTreeModelNode(IExplorerNode node, bool transferFocus);
    public abstract virtual ISignal`1<EventArgs> get_DescriptorReloadedSignal();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.IAssemblyExplorerPersistence {
    public abstract virtual void LoadModelFromSettings(IAssemblyExplorerModel model);
    public abstract virtual void LoadModelFromTextReader(IAssemblyExplorerModel model, TextReader reader);
    public abstract virtual void SaveModelToSettings(IAssemblyExplorerModel model);
    public abstract virtual void SaveModelToTextWriter(IAssemblyExplorerModel model, TextWriter writer);
}
[ActionGroupAttribute("1", "10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Menu.AssemblyDiffExplorerActionBarActionGroup : object {
    public AssemblyDiffExplorerActionBarActionGroup(AssemblyDiffExplorerActionBarCompareActionGroup compareActionGroup, Separator sep1, DiffOptionsAction diffOptions, DiffModeGroup diffModeGroup);
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Menu.AssemblyDiffExplorerActionBarCompareActionGroup : object {
}
[ActionGroupAttribute("1", "10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Menu.AssemblyExplorerActionBarActionGroup : object {
    public AssemblyExplorerActionBarActionGroup(AssemblyExplorerAddItemsActionHandler assemblyExplorerAddItemsActionHandler, AssemblyExplorerAddFolderActionHandler assemblyExplorerAddFolderActionHandler, AssemblyExplorerActionBarOpenFromActionGroup actionBarOpenFromActionGroup, Separator sep1, OpenAssemblyListActionHandler openAssemblyListActionHandler, SaveAssemblyListActionHandler saveAssemblyListActionHandler, ClearWorkspaceActionHandler clearWorkspaceActionHandler, Separator sep3, AssemblyExplorerActionBarExportActionGroup exportActionGroup);
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Menu.AssemblyExplorerActionBarExportActionGroup : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Menu.AssemblyExplorerActionBarOpenFromActionGroup : object {
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Menu.InsertIntoAssemblyExplorerContextMenuAnchoredActionGroup1 : object {
    public InsertIntoAssemblyExplorerContextMenuAnchoredActionGroup1(AssemblyExplorerLoadNodeAction assemblyExplorerLoadNodeAction, AssemblyExplorerUnloadNodeAction assemblyExplorerUnloadNodeAction, AssemblyExplorerAddToRootAction assemblyExplorerAddToRootAction, ExtractFileFromBundleActionHandler extractFileFromBundleAction, ExtractBundleContentsActionHandler extractBundleContentsAction, ExtractMetadataBlobToFileActionHandler extractMetadataBlobToFileAction, AssemblyExplorerOpenResourceActionHandler assemblyExplorerOpenResourceActionHandler, AssemblyExplorerOpenResourceWithActionHandler assemblyExplorerOpenResourceWithActionHandler, AssemblyExplorerSaveResourceActionHandler assemblyExplorerSaveResourceActionHandler, AssemblyExplorerRemoveItemsActionHandler assemblyExplorerRemoveItemsActionHandler);
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Menu.InsertIntoAssemblyExplorerContextMenuAnchoredActionGroup2 : object {
    public InsertIntoAssemblyExplorerContextMenuAnchoredActionGroup2(NavigateToDecompiledSourcesActionHandler navigateToDecompiledSourcesActionHandler, NavigateToPdbActionHandler navigateToPdbActionHandler, NavigateToNuGetPackageRepositoryActionHandler navigateToNuGetPackageRepositoryAction, NavigateToAssemblyRepositoryActionHandler navigateToAssemblyRepositoryActionHandler, NavigateToSourceInRepositoryActionHandler navigateToSourceInRepositoryAction);
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Menu.InsertIntoAssemblyExplorerContextMenuAnchoredActionGroup3 : object {
    public InsertIntoAssemblyExplorerContextMenuAnchoredActionGroup3(LocateItemInFileExplorerActionHandler locateItemInFileExplorerActionHandler, LocateItemOldInFileExplorerActionHandler locateItemOldInFileExplorerActionHandler, LocateItemNewInFileExplorerActionHandler locateItemNewInFileExplorerActionHandler, CopyItemFullPathActionHandler copyItemFullPathActionHandler, CopyItemOldFullPathActionHandler copyItemOldFullPathActionHandler, CopyItemNewFullPathActionHandler copyItemNewFullPathActionHandler);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.AssemblyExplorerAssemblyInfoDiffNavigationProvider : AssemblyExplorerAssemblyInfoNavigationProviderBase {
    private DiffNavigator myDiffNavigator;
    public AssemblyExplorerAssemblyInfoDiffNavigationProvider(IPsiModules psiModules, FileSystemPathNavigator fileSystemPathNavigator, DiffNavigator diffNavigator, AssemblyInfoDecompilationHelper assemblyInfoDecompilationHelper, MetadataViewerExternalSourcesProvider metadataViewerExternalSourcesProvider, IAssemblyInfoDatabase assemblyInfoDatabase, ISharedDecompilationCache sharedDecompilationCache, IAssemblyCollection assemblyCollection);
    public virtual bool IsApplicable(TreeModelNode data);
    public virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(TreeModelNode target);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.AssemblyExplorerAssemblyInfoNavigationProvider : AssemblyExplorerAssemblyInfoNavigationProviderBase {
    public AssemblyExplorerAssemblyInfoNavigationProvider(IPsiModules psiModules, FileSystemPathNavigator fileSystemPathNavigator, AssemblyInfoDecompilationHelper assemblyInfoDecompilationHelper, MetadataViewerExternalSourcesProvider metadataViewerExternalSourcesProvider, IAssemblyInfoDatabase assemblyInfoDatabase, ISharedDecompilationCache sharedDecompilationCache, IAssemblyCollection assemblyCollection);
    public virtual bool IsApplicable(TreeModelNode data);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.AssemblyExplorerAssemblyInfoNavigationProviderBase : FileNavigationProviderBase`1<IAssemblyFileNode> {
    private IPsiModules myPsiModules;
    private FileSystemPathNavigator myFileSystemPathNavigator;
    private AssemblyInfoDecompilationHelper myAssemblyInfoDecompilationHelper;
    private MetadataViewerExternalSourcesProvider myMetadataViewerExternalSourcesProvider;
    private IAssemblyInfoDatabase myAssemblyInfoDatabase;
    private ISharedDecompilationCache mySharedDecompilationCache;
    private IAssemblyCollection myAssemblyCollection;
    protected AssemblyExplorerAssemblyInfoNavigationProviderBase(IPsiModules psiModules, FileSystemPathNavigator fileSystemPathNavigator, AssemblyInfoDecompilationHelper assemblyInfoDecompilationHelper, MetadataViewerExternalSourcesProvider metadataViewerExternalSourcesProvider, IAssemblyInfoDatabase assemblyInfoDatabase, ISharedDecompilationCache sharedDecompilationCache, IAssemblyCollection assemblyCollection);
    protected virtual FileSystemPathNavigationPoint CreateFileSystemPathNavigationPoint(IAssemblyFileNode assemblyFileNode);
    private string GetBundleInfo(BundleManifest bundleHeader, VirtualFileSystemPath bundlePath);
    private string ToNetCoreVersion(UInt32 bundleMajorVersion, UInt32 bundleMinorVersion);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.AssemblyExplorerDeclaredElementDiffNavigationProvider : object {
    public sealed virtual bool IsApplicable(TreeModelNode data);
    public sealed virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(TreeModelNode target);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.AssemblyExplorerDeclaredElementNavigationProvider : object {
    public sealed virtual bool IsApplicable(TreeModelNode data);
    public sealed virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(TreeModelNode target);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.AssemblyExplorerExternalSourcesProvider : ExternalSourcesProviderBase {
    private INavigationModeProvider myNavigationModeProvider;
    private ISolution mySolution;
    public AssemblyExplorerExternalSourcesProvider(INavigationModeProvider navigationModeProvider, ISolution solution);
    public virtual bool IsApplicableForNavigation(CompiledElementNavigationInfo navigationInfo, bool ignoreOptions);
    public virtual IReadOnlyCollection`1<ExternalSourcesMapping> NavigateToSources(ICompiledElement compiledElement, ITaskExecutor taskExecutor);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.AssemblyExplorerForwardedTypeNavigationProvider : object {
    private IPsiModules myPsiModules;
    public AssemblyExplorerForwardedTypeNavigationProvider(IPsiModules psiModules);
    public sealed virtual bool IsApplicable(TreeModelNode data);
    public sealed virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(TreeModelNode target);
    [CanBeNullAttribute]
public static ICompiledElement GetCompiledElement(ForwardedTypeNode forwardedTypeNode, IPsiModules psiModules);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.AssemblyExplorerModuleNavigationPoint : object {
    private IAssembly myReferencedAssembly;
    public AssemblyExplorerModuleNavigationPoint(IAssembly referencedAssembly);
    public sealed virtual Task`1<bool> Navigate(NavigationOptions options);
    public sealed virtual IconId GetPresentationImage();
    public sealed virtual RichText GetPresentationText();
    public sealed virtual RichText GetSecondaryPresentationText();
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.AssemblyExplorerModuleNavigationProvider : object {
    public virtual bool IsApplicable(IProjectModelElement data);
    public virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(IProjectModelElement target);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.AssemblyExplorerModuleReferenceNavigationProvider : object {
    public sealed virtual bool IsApplicable(TreeModelNode data);
    public sealed virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(TreeModelNode target);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.AssemblyExplorerNamespaceNavigationPoint : object {
    private INamespace myNamespace;
    private IAssembly myAssembly;
    public AssemblyExplorerNamespaceNavigationPoint(IAssembly assembly, INamespace ns);
    public sealed virtual Task`1<bool> Navigate(NavigationOptions options);
    public sealed virtual IconId GetPresentationImage();
    public sealed virtual RichText GetPresentationText();
    public sealed virtual RichText GetSecondaryPresentationText();
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.AssemblyExplorerNamespaceNavigationProvider : DefaultDeclaredElementNavigator {
    public AssemblyExplorerNamespaceNavigationProvider(ISolution solution, IFeaturePartsContainer shellFeaturePartsContainer, ISettingsStore settingsStore);
    public virtual bool IsApplicable(IDeclaredElement declaredElement);
    public virtual void Navigate(IDeclaredElement declaredElement, PopupWindowContextSource windowContext, bool transferFocus, SolutionFeaturePartsContainer filters, Nullable`1<OccurrencePresentationOptions> options, TabOptions tabOptions);
    private static List`1<INavigationPoint> CreateNavigationPoints(IEnumerable`1<IPsiModule> filteredModules, INamespace ns);
    private IEnumerable`1<IPsiModule> FilterModules(List`1<IPsiModule> psiModules, INamespace ns, ISymbolScope cache);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.AssemblyExplorerNavigationExtensions : object {
    [ExtensionAttribute]
public static bool NavigateToAssemblyExplorer(IAssembly assembly, PopupWindowContextSource source, bool transferFocus);
}
public static class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.AssemblyExplorerNavigationUtil : object {
    [AsyncStateMachineAttribute("JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.AssemblyExplorerNavigationUtil/<LocateAndNavigateToNodeAsync>d__0")]
public static Task`1<bool> LocateAndNavigateToNodeAsync(object target, ISolution solution, bool transferFocus);
    private static bool LocateAndNavigateToNodeNew(object target, bool transferFocus, IAssemblyExplorerDescriptor descriptor, IAssemblyExplorerManager assemblyExplorerManager, ExplorerModelManager explorerModelManager);
    private static bool LocateAndNavigateToNodeOld(object target, bool transferFocus, IAssemblyExplorerDescriptor descriptor, IAssemblyExplorerManager assemblyExplorerManager, ExplorerModelManager explorerModelManager);
    [CanBeNullAttribute]
private static IAssembly GetAssembly(object target);
    [CompilerGeneratedAttribute]
internal static bool <LocateAndNavigateToNodeAsync>g__DoNavigate|0_0(<>c__DisplayClass0_0& );
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.AssemblyExplorerNuspecNavigationProvider : object {
    private FileSystemPathNavigator myFileSystemPathNavigator;
    public AssemblyExplorerNuspecNavigationProvider(FileSystemPathNavigator fileSystemPathNavigator);
    public sealed virtual bool IsApplicable(TreeModelNode data);
    public sealed virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(TreeModelNode target);
    [CanBeNullAttribute]
private static FileSystemPath GetNuspecPath(TreeModelNode node);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.ContextSearches.LocateAssemblyContextSearch : LocateInAssemblyExplorerContextSearchBase {
    public virtual void Execute(IDataContext dataContext);
    public virtual bool IsContextApplicable(IDataContext dataContext);
    private IAssembly GetAssembly(IDataContext dataContext);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.ContextSearches.LocateCompileElementsContextSearch : LocateInAssemblyExplorerContextSearchBase {
    public virtual bool IsContextApplicable(IDataContext dataContext);
    public virtual void Execute(IDataContext dataContext);
}
public static class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.ContextSearches.LocateCompileElementsUtil : object {
    [CanBeNullAttribute]
public static ICompiledElement GetCompiledElement(IDataContext dataContext);
    [CanBeNullAttribute]
public static ICompiledElement GetCompiledElementDeclaration(IDataContext dataContext, ISolution solution);
    [CanBeNullAttribute]
public static ICompiledElement GetCompiledElementDeclaration(PsiEditorView psiEditorView);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.ContextSearches.LocateInAssemblyExplorerContextSearchBase : object {
    public virtual bool IsAvailable(IDataContext dataContext);
    public abstract virtual bool IsContextApplicable(IDataContext dataContext);
    public abstract virtual void Execute(IDataContext dataContext);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.FileNavigationProviderBase`1 : object {
    [CanBeNullAttribute]
protected abstract virtual FileSystemPathNavigationPoint CreateFileSystemPathNavigationPoint(TExplorerNode node);
    public virtual bool IsApplicable(TreeModelNode data);
    public virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(TreeModelNode target);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.NetResourceDiffNavigationProvider : NetResourceNavigationProviderBase {
    public NetResourceDiffNavigationProvider(AssemblyToAssemblyReferencesResolveManager resolveManager, INavigationDecompilationCache navigationDecompilationCache, FileSystemPathNavigator fileSystemPathNavigator, DiffNavigator diffNavigator);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.NetResourceNavigationProvider : NetResourceNavigationProviderBase {
    public NetResourceNavigationProvider(AssemblyToAssemblyReferencesResolveManager resolveManager, INavigationDecompilationCache navigationDecompilationCache, FileSystemPathNavigator fileSystemPathNavigator);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.NetResourceNavigationProviderBase : ResourceDataNavigationProviderBase`1<NetResourceEntryData> {
    [NotNullAttribute]
private AssemblyToAssemblyReferencesResolveManager myResolveManager;
    protected NetResourceNavigationProviderBase(AssemblyToAssemblyReferencesResolveManager resolveManager, INavigationDecompilationCache navigationDecompilationCache, FileSystemPathNavigator fileSystemPathNavigator, DiffNavigator diffNavigator, bool isDiffMode);
    protected virtual ResourceNavigationData GetResourceNavigationData(NetResourceEntryData target);
    [NotNullAttribute]
private ResourceNavigationData NavigateToBaml(ResourceNavigationData data);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.NonAssemblyFileDiffNavigationProvider : NonAssemblyFileNavigationProviderBase {
    [NotNullAttribute]
private DiffNavigator myDiffNavigator;
    public NonAssemblyFileDiffNavigationProvider(ISharedDecompilationCache sharedDecompilationCache, FileSystemPathNavigator fileSystemPathNavigator, DiffNavigator diffNavigator);
    public virtual bool IsApplicable(TreeModelNode data);
    public virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(TreeModelNode target);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.NonAssemblyFileNavigationProvider : NonAssemblyFileNavigationProviderBase {
    public NonAssemblyFileNavigationProvider(ISharedDecompilationCache sharedDecompilationCache, FileSystemPathNavigator fileSystemPathNavigator);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.NonAssemblyFileNavigationProviderBase : FileNavigationProviderBase`1<NonAssemblyFileNode> {
    [NotNullAttribute]
private ISharedDecompilationCache mySharedDecompilationCache;
    [NotNullAttribute]
private FileSystemPathNavigator myFileSystemPathNavigator;
    protected NonAssemblyFileNavigationProviderBase(ISharedDecompilationCache sharedDecompilationCache, FileSystemPathNavigator fileSystemPathNavigator);
    protected virtual FileSystemPathNavigationPoint CreateFileSystemPathNavigationPoint(NonAssemblyFileNode nonAssemblyFileNode);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.ResourceDataNavigationProviderBase`1 : object {
    public static string DecompilerId;
    [CompilerGeneratedAttribute]
private INavigationDecompilationCache <NavigationDecompilationCache>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPathNavigator <FileSystemPathNavigator>k__BackingField;
    [CanBeNullAttribute]
private DiffNavigator myDiffNavigator;
    private bool myIsDiffMode;
    [NotNullAttribute]
protected INavigationDecompilationCache NavigationDecompilationCache { get; }
    [NotNullAttribute]
protected FileSystemPathNavigator FileSystemPathNavigator { get; }
    public ResourceDataNavigationProviderBase`1(INavigationDecompilationCache navigationDecompilationCache, FileSystemPathNavigator fileSystemPathNavigator, DiffNavigator diffNavigator, bool isDiffMode);
    [CompilerGeneratedAttribute]
protected INavigationDecompilationCache get_NavigationDecompilationCache();
    [CompilerGeneratedAttribute]
protected FileSystemPathNavigator get_FileSystemPathNavigator();
    [CanBeNullAttribute]
protected virtual ResourceNavigationData GetResourceNavigationData(TNavigationData target);
    [CanBeNullAttribute]
protected virtual TNavigationData ConvertNodeToNavigationTarget(IExplorerNode node);
    public sealed virtual bool IsApplicable(TreeModelNode data);
    private bool IsApplicableToDiffNode(TreeModelNode data);
    public virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(TreeModelNode target);
    private IEnumerable`1<INavigationPoint> CreateDiffNavigationPoints(TreeModelNode target);
    [CanBeNullAttribute]
private FileSystemPathNavigationPoint CreatePointForDiff(IExplorerNode node);
    public IEnumerable`1<INavigationPoint> CreatePoints(TNavigationData target);
    [CanBeNullAttribute]
protected virtual INavigationPoint CreatePoint(TNavigationData target);
    private bool CanBeOpenInEditor(FileSystemPath path, string extensionNoDot);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.ResourceExternalSourcesProvider : BindExternalSourcesProviderBase {
    public ResourceExternalSourcesProvider(INavigationDecompilationCache navigationDecompilationCache);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Navigation.Win32ResourceDataNavigationProvider : ResourceDataNavigationProviderBase`1<Win32ResourceDataBase> {
    public Win32ResourceDataNavigationProvider(INavigationDecompilationCache navigationDecompilationCache, FileSystemPathNavigator fileSystemPathNavigator);
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.NuPeek.Handlers.IOpenFromNuGetDialogOwner {
    public abstract virtual void Execute(Action`1<PackageSelectorViewModel> openAction);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.NuPeek.Handlers.OpenFromNuGetActionExecutor : OpenFromNuGetActionHandlerBase {
    public void Execute(IDataContext context);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.ExternalSources.AssemblyExplorer.NuPeek.Handlers.OpenFromNuGetActionExecutor/<DownloadPackagesAsync>d__1")]
private Task`1<IList`1<FileSystemPath>> DownloadPackagesAsync(IProgressIndicator progressIndicator, PackageSource packageSource, string id, string version, bool loadDependencies);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.NuPeek.Handlers.OpenFromNuGetActionHandlerBase : object {
    protected void OpenPackageFilesInCurrentSolution(IDataContext context, IEnumerable`1<FileSystemPath> packageFiles);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.ExternalSources.AssemblyExplorer.NuPeek.Handlers.OpenFromNuGetActionHandlerBase/<CollectPackagesAsync>d__1")]
protected Task CollectPackagesAsync(PackageIdentity package, HashSet`1<PackageIdentity> packages, bool recurse, FindPackageByIdResource findPackageByIdResource, SourceCacheContext sourceCacheContext, ILogger logger, CancellationToken cancellationToken, IProgressIndicator progressIndicator);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.ExternalSources.AssemblyExplorer.NuPeek.Handlers.OpenFromNuGetActionHandlerBase/<GetPackagesToOpenAsync>d__2")]
protected Task`1<IList`1<FileSystemPath>> GetPackagesToOpenAsync(ICollection`1<PackageIdentity> packages, List`1<FindPackageByIdResource> findPackageByIdResources, SourceCacheContext sourceCacheContext, ILogger logger, CancellationToken cancellationToken, IProgressIndicator progressIndicator);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.ExternalSources.AssemblyExplorer.NuPeek.Handlers.OpenFromNuGetActionHandlerBase/<DownloadPackageAsync>d__3")]
private Task`1<FileSystemPath> DownloadPackageAsync(PackageIdentity package, FindPackageByIdResource findPackageByIdResource, SourceCacheContext sourceCacheContext, ILogger logger, CancellationToken cancellationToken);
    private FileSystemPath GetFolderForDownload();
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.NuPeek.Handlers.OpenFromNuGetDialogOwnerStub : object {
    public virtual void Execute(Action`1<PackageSelectorViewModel> openAction);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "OpenNuGetPackagesConfigActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.NuPeek.Handlers.OpenNugetPackagesConfigActionHandler : OpenFromNuGetActionHandlerBase {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.ExternalSources.AssemblyExplorer.NuPeek.Handlers.OpenNugetPackagesConfigActionHandler/<GetPackagesAsync>d__2")]
private Task`1<IList`1<FileSystemPath>> GetPackagesAsync(IProgressIndicator progressIndicator, String[] packagesConfigFileNames);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.NuPeek.Infrastructure.CredentialsDialog : object {
    private static int ValidBannerHeight;
    private static int ValidBannerWidth;
    [CompilerGeneratedAttribute]
private bool <AlwaysDisplay>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeCertificates>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Persist>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepName>k__BackingField;
    private string _username;
    private string _password;
    [CompilerGeneratedAttribute]
private bool <SaveChecked>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SaveDisplayed>k__BackingField;
    private string _target;
    private string _caption;
    private string _message;
    private Image _banner;
    public bool AlwaysDisplay { get; public set; }
    public bool ExcludeCertificates { get; public set; }
    public bool Persist { get; public set; }
    public bool KeepName { get; public set; }
    public string Username { get; public set; }
    public string Password { get; public set; }
    public bool SaveChecked { get; public set; }
    public bool SaveDisplayed { get; public set; }
    public string Target { get; public set; }
    public string Caption { get; public set; }
    public string Message { get; public set; }
    public Image Banner { get; public set; }
    public CredentialsDialog(string target);
    public CredentialsDialog(string target, string caption);
    public CredentialsDialog(string target, string caption, string message);
    public CredentialsDialog(string target, string caption, string message, Image banner);
    [CompilerGeneratedAttribute]
public bool get_AlwaysDisplay();
    [CompilerGeneratedAttribute]
public void set_AlwaysDisplay(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeCertificates();
    [CompilerGeneratedAttribute]
public void set_ExcludeCertificates(bool value);
    [CompilerGeneratedAttribute]
public bool get_Persist();
    [CompilerGeneratedAttribute]
public void set_Persist(bool value);
    [CompilerGeneratedAttribute]
public bool get_KeepName();
    [CompilerGeneratedAttribute]
public void set_KeepName(bool value);
    public string get_Username();
    public void set_Username(string value);
    public string get_Password();
    public void set_Password(string value);
    [CompilerGeneratedAttribute]
public bool get_SaveChecked();
    [CompilerGeneratedAttribute]
public void set_SaveChecked(bool value);
    [CompilerGeneratedAttribute]
public bool get_SaveDisplayed();
    [CompilerGeneratedAttribute]
public void set_SaveDisplayed(bool value);
    public string get_Target();
    public void set_Target(string value);
    public string get_Caption();
    public void set_Caption(string value);
    public string get_Message();
    public void set_Message(string value);
    public Image get_Banner();
    public void set_Banner(Image value);
    public DialogResult Show();
    public DialogResult Show(bool saveChecked);
    public DialogResult Show(string name);
    public DialogResult Show(string name, string password);
    public DialogResult Show(string name, string password, bool saveChecked);
    public DialogResult Show(IWin32Window owner);
    public DialogResult Show(IWin32Window owner, bool saveChecked);
    public DialogResult Show(IWin32Window owner, string name, string password);
    public DialogResult Show(IWin32Window owner, string name, string password, bool saveChecked);
    public void Confirm(bool value);
    private DialogResult ShowDialog(IWin32Window owner);
    private INFO GetInfo(Lifetime lifetime, IWin32Window owner);
    private FLAGS GetFlags();
    private DialogResult GetDialogResult(ReturnCodes code);
}
internal static class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.NuPeek.Infrastructure.CREDUI : object {
    public static int MAX_MESSAGE_LENGTH;
    public static int MAX_CAPTION_LENGTH;
    public static int MAX_GENERIC_TARGET_LENGTH;
    public static int MAX_DOMAIN_TARGET_LENGTH;
    public static int MAX_USERNAME_LENGTH;
    public static int MAX_PASSWORD_LENGTH;
    public static ReturnCodes PromptForCredentials(INFO& creditUR, string targetName, IntPtr reserved1, int iError, StringBuilder userName, int maxUserName, StringBuilder password, int maxPassword, Int32& iSave, FLAGS flags);
    public static ReturnCodes ConfirmCredentials(string targetName, bool confirm);
}
public static class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.NuPeek.NuGetUtil : object {
    public static SourceRepository GetSourceRepository(PackageSource packageSource);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.ExternalSources.AssemblyExplorer.NuPeek.NuGetUtil/<SearchAsync>d__1")]
public static Task`1<IEnumerable`1<IPackageSearchMetadata>> SearchAsync(SourceRepository sourceRepository, string searchTerm, bool showPrerelease, bool includeUnlisted, ILogger logger, Lifetime lifetime);
    public static ILogger GetLogger();
}
public static class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.NuPeek.PackageSources : object {
    public static PackageSource NuGetPackageSource;
    private static PackageSources();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.NuPeek.ViewModels.PackageDefinitionViewModel : object {
    private Func`1<Task`1<List`1<PackageDefinitionViewModel>>> myGetChildrenAsync;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<PackageDefinitionViewModel> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageIdentity <Package>k__BackingField;
    private string myPublished;
    [CompilerGeneratedAttribute]
private string <Authors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownloadCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowCalculationIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public ObservableCollection`1<PackageDefinitionViewModel> Children { get; public set; }
    private static PackageDefinitionViewModel AsyncCalculationStub { get; }
    internal PackageIdentity Package { get; }
    public string Id { get; }
    public string Version { get; }
    public string Published { get; public set; }
    public string Authors { get; }
    public string Summary { get; }
    public string DownloadCount { get; }
    public bool ShowCalculationIcon { get; }
    public PackageDefinitionViewModel(IPackageSearchMetadata p, Func`1<Task`1<List`1<PackageDefinitionViewModel>>> getChildrenAsync);
    private PackageDefinitionViewModel(PackageIdentity package, string published, string summary, string authors, string downloadCount, Func`1<Task`1<List`1<PackageDefinitionViewModel>>> getChildrenAsync, bool showCalculationIcon);
    [CompilerGeneratedAttribute]
public ObservableCollection`1<PackageDefinitionViewModel> get_Children();
    [CompilerGeneratedAttribute]
public void set_Children(ObservableCollection`1<PackageDefinitionViewModel> value);
    private static PackageDefinitionViewModel get_AsyncCalculationStub();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.ExternalSources.AssemblyExplorer.NuPeek.ViewModels.PackageDefinitionViewModel/<UpdateChildren>d__9")]
public Task UpdateChildren();
    [CompilerGeneratedAttribute]
internal PackageIdentity get_Package();
    public string get_Id();
    public string get_Version();
    public string get_Published();
    public void set_Published(string value);
    public void SetPublished(Nullable`1<DateTimeOffset> published);
    [CompilerGeneratedAttribute]
public string get_Authors();
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
public string get_DownloadCount();
    [CompilerGeneratedAttribute]
public bool get_ShowCalculationIcon();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
private void OnPropertyChanged(string propertyName);
    private static string PresentDownloadCount(Nullable`1<long> downloadCount);
    private static string PresentPublished(Nullable`1<DateTimeOffset> published);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.NuPeek.ViewModels.PackageSelectorViewModel : object {
    private string myPackageSource;
    private PackageDefinitionViewModel myPackage;
    private ObservableCollection`1<string> myPackageSources;
    private ObservableCollection`1<PackageDefinitionViewModel> myPackages;
    private HashSet`1<string> myInitialPackageSources;
    private string mySearchTerm;
    private string myStatus;
    private bool myLoadDependencies;
    private bool myShowPrerelease;
    private ICommand myOpenCommand;
    private int mySearchesInProgress;
    private Dictionary`2<string, PackageSource> mySourceToPackageSource;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public string PackageSource { get; public set; }
    public string SearchTerm { get; public set; }
    public string Status { get; public set; }
    public int SearchesInProgress { get; public set; }
    public PackageDefinitionViewModel SelectedPackage { get; public set; }
    public ObservableCollection`1<string> PackageSources { get; public set; }
    public ObservableCollection`1<PackageDefinitionViewModel> Packages { get; public set; }
    public bool LoadDependencies { get; public set; }
    public bool ShowPrerelease { get; public set; }
    public ICommand OpenCommand { get; public set; }
    public PackageSelectorViewModel(Lifetime lifetime, ISolution solution, bool showPrerelease, bool loadDependencies, string selectedPackageSource, IList`1<string> customPackageSources);
    public PackageSource GetPackageSource();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.ExternalSources.AssemblyExplorer.NuPeek.ViewModels.PackageSelectorViewModel/<GetNewCustomPackageSources>d__14")]
public IEnumerable`1<string> GetNewCustomPackageSources();
    public string get_PackageSource();
    public void set_PackageSource(string value);
    public string get_SearchTerm();
    public void set_SearchTerm(string value);
    public string get_Status();
    public void set_Status(string value);
    public int get_SearchesInProgress();
    public void set_SearchesInProgress(int value);
    public PackageDefinitionViewModel get_SelectedPackage();
    public void set_SelectedPackage(PackageDefinitionViewModel value);
    public ObservableCollection`1<string> get_PackageSources();
    public void set_PackageSources(ObservableCollection`1<string> value);
    public ObservableCollection`1<PackageDefinitionViewModel> get_Packages();
    public void set_Packages(ObservableCollection`1<PackageDefinitionViewModel> value);
    public bool get_LoadDependencies();
    public void set_LoadDependencies(bool value);
    public bool get_ShowPrerelease();
    public void set_ShowPrerelease(bool value);
    public ICommand get_OpenCommand();
    public void set_OpenCommand(ICommand value);
    protected void InitializePackageSources(FileSystemPath solutionDirectory, string selectedPackageSource, IList`1<string> customPackageSources);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
private void OnPropertyChanged(string propertyName);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.PdbGeneration.AssemblyExplorerAssemblyByPdbProvider : AssemblyExplorerAssemblyByPdbDefaultProvider {
    private Lifetime myLifetime;
    private IAssemblyExplorerManager myAssemblyExplorerManager;
    private IShellLocks myLocks;
    public AssemblyExplorerAssemblyByPdbProvider(Lifetime lifetime, IShellLocks locks, AssemblyInfoDatabase assemblyInfoDataBase, IAssemblyExplorerManager assemblyExplorerManager);
    protected virtual IEnumerable`1<FileSystemPath> GetAssembliesWithName(string name);
    private static void CollectAssemblyPaths(HashSet`1<FileSystemPath> files, string assemblyName, IExplorerNode node);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.PdbGeneration.AssemblyHierarchyDescriptor : TreeModelBrowserDescriptorPsi {
    private List`1<ProjectModelElementEnvoy> myProjectModelElementEnvoys;
    private TreeModelBrowserPresenter myPresenter;
    private TreeModel myModel;
    private static IconId ourRecursionImage;
    public TreeModel Model { get; }
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> Presenter { get; }
    public AssemblyHierarchyDescriptor(ICollection`1<IAssembly> rootAssemblies, ISolution solution);
    private static AssemblyHierarchyDescriptor();
    private void MakeModel();
    public virtual TreeModel get_Model();
    public virtual StructuredPresenter`2<TreeModelNode, IPresentableItem> get_Presenter();
    private bool RootsContain(IProjectModelElement projectModelElement);
    private void PresentAdorements(object value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "GeneratePdbActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.PdbGeneration.GeneratePdbActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private static void GeneratePdb(IPdbGenerationParameters parameters, ISolution solution);
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.PdbGeneration.IPdbGenerationDialogOwner {
    public abstract virtual void Execute(IList`1<IAssembly> rootAssemblies, ISolution solution, Action`2<IPdbGenerationParameters, ISolution> generatePdbAction);
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.PdbGeneration.IPdbGenerationParameters {
    public FileSystemPath Folder { get; }
    public ICollection`1<IAssemblyFile> AssemblyFiles { get; }
    public abstract virtual FileSystemPath get_Folder();
    public abstract virtual ICollection`1<IAssemblyFile> get_AssemblyFiles();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.PdbGeneration.PdbGenerationDialogOwnerStub : object {
    public virtual void Execute(IList`1<IAssembly> rootAssemblies, ISolution solution, Action`2<IPdbGenerationParameters, ISolution> generatePdbAction);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.PdbGeneration.PdbGenerationParameters : object {
    [CompilerGeneratedAttribute]
private FileSystemPath <Folder>k__BackingField;
    private ICollection`1<IAssemblyFile> myAssemblyFiles;
    public FileSystemPath Folder { get; }
    public ICollection`1<IAssemblyFile> AssemblyFiles { get; }
    public PdbGenerationParameters(FileSystemPath folder, ICollection`1<IAssemblyFile> assemblyFiles);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_Folder();
    public sealed virtual ICollection`1<IAssemblyFile> get_AssemblyFiles();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.PdbGeneration.ZoneMarker : object {
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "AssemblyExplorerOpenResourceActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Resources.AssemblyExplorerOpenResourceActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "OpenWithActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Resources.AssemblyExplorerOpenResourceWithActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "SaveResourceToFileActionText")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Resources.AssemblyExplorerSaveResourceActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public abstract class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Resources.BindExternalSourcesProviderBase : ExternalSourcesProviderBase {
    protected INavigationDecompilationCache myNavigationDecompilationCache;
    public bool Enabled { get; }
    public bool AllowExpired { get; }
    protected BindExternalSourcesProviderBase(string presentableShortName, string id, INavigationDecompilationCache navigationDecompilationCache);
    public bool get_Enabled();
    public virtual bool get_AllowExpired();
    public virtual ExternalSourcesMapping MapFileToAssembly(FileSystemPath file);
    public virtual IReadOnlyCollection`1<ExternalSourcesMapping> NavigateToSources(ICompiledElement compiledElement, ITaskExecutor taskExecutor);
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Resources.IManifestResourceData {
    [NotNullAttribute]
public IManifestResourceDisposition Disposition { get; }
    public abstract virtual IManifestResourceDisposition get_Disposition();
}
public interface JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Resources.IResourceData {
    [NotNullAttribute]
public IAssembly Assembly { get; }
    public abstract virtual IAssembly get_Assembly();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Resources.ManifestResourceData : object {
    [CompilerGeneratedAttribute]
private IAssembly <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private IManifestResourceDisposition <Disposition>k__BackingField;
    public IAssembly Assembly { get; }
    public IManifestResourceDisposition Disposition { get; }
    public ManifestResourceData(IAssembly assembly, IManifestResourceDisposition disposition);
    [CompilerGeneratedAttribute]
public sealed virtual IAssembly get_Assembly();
    [CompilerGeneratedAttribute]
public sealed virtual IManifestResourceDisposition get_Disposition();
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Resources.ManifestResourceDataDiffNavigationProvider : ManifestResourceDataNavigationProviderBase {
    public ManifestResourceDataDiffNavigationProvider(INavigationDecompilationCache navigationDecompilationCache, FileSystemPathNavigator fileSystemPathNavigator, DiffNavigator diffNavigator);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Resources.ManifestResourceDataNavigationProvider : ManifestResourceDataNavigationProviderBase {
    public ManifestResourceDataNavigationProvider(INavigationDecompilationCache navigationDecompilationCache, FileSystemPathNavigator fileSystemPathNavigator);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Resources.ManifestResourceDataNavigationProviderBase : ResourceDataNavigationProviderBase`1<ManifestResourceData> {
    protected bool IsResXMode { get; }
    public ManifestResourceDataNavigationProviderBase(INavigationDecompilationCache navigationDecompilationCache, FileSystemPathNavigator fileSystemPathNavigator, DiffNavigator diffNavigator, bool isDiffMode);
    protected virtual bool get_IsResXMode();
    protected virtual INavigationPoint CreatePoint(ManifestResourceData navigationInfo);
    protected virtual ManifestResourceData ConvertNodeToNavigationTarget(IExplorerNode node);
    [CanBeNullAttribute]
private static string CreateResx(IManifestResourceDisposition manifestResourceDisposition);
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Resources.NetResourceEntryData : object {
    [CompilerGeneratedAttribute]
private IAssembly <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private IManifestResourceDisposition <Disposition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryName>k__BackingField;
    public IAssembly Assembly { get; }
    public IManifestResourceDisposition Disposition { get; }
    public string EntryName { get; }
    public NetResourceEntryData(IAssembly assembly, IManifestResourceDisposition disposition, string entryName);
    [CompilerGeneratedAttribute]
public sealed virtual IAssembly get_Assembly();
    [CompilerGeneratedAttribute]
public sealed virtual IManifestResourceDisposition get_Disposition();
    [CompilerGeneratedAttribute]
public string get_EntryName();
}
public static class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Resources.ResourceNavigationUtil : object {
    private static HashSet`1<string> ourSupportedExtensionsNoDot;
    private static ResourceNavigationUtil();
    [CanBeNullAttribute]
public static IResourceData ConvertNodeToNavigationTarget(TreeModelNode node);
    [CanBeNullAttribute]
public static IResourceData ConvertNodeToNavigationTarget(IExplorerNode node);
    [CanBeNullAttribute]
private static Win32ResourceDataBase ConvertNodeToNavigationTarget(IWin32ResourceNode win32ResourceNode);
    [CanBeNullAttribute]
private static ResourceDataEntry GetSingleResourceDataEntry(ResourceDirectoryEntry resourceDirectoryEntry);
    private static bool IsStringTableNode(IWin32ResourceNode win32ResourceNode);
    [CanBeNullAttribute]
public static ResourceNavigationData ReadResource(IResourceData navigationTarget);
    [NotNullAttribute]
private static string StripExtension(string name);
    private static void SplitName(string fullName, String& name, String& extension);
    public static bool CanBeOpenInEditor(FileSystemPath path);
    public static bool CanBeOpenInEditor(FileSystemPath path, string extensionNoDot);
    internal static bool CanBeTextFile(FileSystemPath path, string extensionNoDot);
    [CanBeNullAttribute]
private static string GuessFileExtension(Win32ResourceData win32ResourceData);
    [CanBeNullAttribute]
internal static string GuessFileExtension(IWin32ResourceNode win32ResourceNode);
    public static void OpenFileExternally(FileSystemPath path);
    private static void OpenAs(string file);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Resources.ResxDiffNavigationProvider : ManifestResourceDataDiffNavigationProvider {
    protected bool IsResXMode { get; }
    public ResxDiffNavigationProvider(INavigationDecompilationCache navigationDecompilationCache, FileSystemPathNavigator fileSystemPathNavigator, DiffNavigator diffNavigator);
    protected virtual bool get_IsResXMode();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Resources.ResxExternalSourcesProvider : BindExternalSourcesProviderBase {
    public ResxExternalSourcesProvider(INavigationDecompilationCache navigationDecompilationCache);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Resources.ResxNavigationProvider : ManifestResourceDataNavigationProvider {
    public static string DecompilerId;
    protected bool IsResXMode { get; }
    public ResxNavigationProvider(INavigationDecompilationCache navigationDecompilationCache, FileSystemPathNavigator fileSystemPathNavigator);
    protected virtual bool get_IsResXMode();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Resources.StringTableWin32ResourceData : Win32ResourceDataBase {
    [CompilerGeneratedAttribute]
private ResourceDirectoryEntry <StringTableDirectory>k__BackingField;
    [NotNullAttribute]
public ResourceDirectoryEntry StringTableDirectory { get; }
    public StringTableWin32ResourceData(IAssembly assembly, IAssemblyLocation assemblyLocation, ResourceDirectoryEntry stringTableDirectory);
    [CompilerGeneratedAttribute]
public ResourceDirectoryEntry get_StringTableDirectory();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Resources.Win32ResourceData : Win32ResourceDataBase {
    [CompilerGeneratedAttribute]
private ResourceDataEntry <Entry>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <Ids>k__BackingField;
    [NotNullAttribute]
public ResourceDataEntry Entry { get; }
    public ResourceType Type { get; }
    [NotNullAttribute]
public Int32[] Ids { get; }
    public Win32ResourceData(IAssembly assembly, IAssemblyLocation assemblyLocation, string entryName, ResourceDataEntry entry, ResourceType type, Int32[] ids);
    [CompilerGeneratedAttribute]
public ResourceDataEntry get_Entry();
    [CompilerGeneratedAttribute]
public ResourceType get_Type();
    [CompilerGeneratedAttribute]
public Int32[] get_Ids();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Resources.Win32ResourceDataBase : object {
    [CompilerGeneratedAttribute]
private IAssembly <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssemblyLocation <AssemblyLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public IAssembly Assembly { get; }
    [NotNullAttribute]
public IAssemblyLocation AssemblyLocation { get; }
    [NotNullAttribute]
public string Name { get; }
    public Win32ResourceDataBase(IAssembly assembly, IAssemblyLocation assemblyLocation, string name);
    [CompilerGeneratedAttribute]
public sealed virtual IAssembly get_Assembly();
    [CompilerGeneratedAttribute]
public IAssemblyLocation get_AssemblyLocation();
    [CompilerGeneratedAttribute]
public string get_Name();
}
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Resources.WindowsShellNavigationPoint : object {
    private FileSystemPath myLocation;
    public WindowsShellNavigationPoint(FileSystemPath location);
    public sealed virtual Task`1<bool> Navigate(NavigationOptions options);
    public sealed virtual IconId GetPresentationImage();
    public sealed virtual RichText GetPresentationText();
    public sealed virtual RichText GetSecondaryPresentationText();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Utils.AssemblyExplorerModelEx : object {
    [ExtensionAttribute]
public static IEnumerable`1<AssemblyNameInfo> GetAssemblies(IAssemblyExplorerModel self);
    [CompilerGeneratedAttribute]
internal static void <GetAssemblies>g__TraverseModel|0_0(IExplorerNode node, <>c__DisplayClass0_0& );
    [CompilerGeneratedAttribute]
internal static void <GetAssemblies>g__AddAssembly|0_1(IAssemblyFileNode assemblyNode, <>c__DisplayClass0_0& );
}
public static class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.Utils.TextFileUtil : object {
    private static HashSet`1<string> ourTextFileExtensions;
    private static TextFileUtil();
    public static bool IsTextFileExtension(string extensionNoDot);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.ExternalSources.AssemblyExplorer.WorkspaceManager : object {
    private IShellLocks myShellLocks;
    private AssemblyGC myAssemblyGc;
    private IAssemblyFactory myAssemblyFactory;
    private IExplicitlyObservedAssemblies myExplicitlyObservedAssemblies;
    private Lifetime myLifetime;
    private FileSystemPath myTemporaryDirectory;
    private GroupingEvent myAssemblyGcEvent;
    private IDictionary`2<IPersistentNode, IDictionary`2<IAssemblyLocation, IAssemblyCookie>> myCookies;
    public FileSystemPath TemporaryDirectory { get; }
    public WorkspaceManager(IShellLocks shellLocks, AssemblyGC assemblyGc, Lifetime lifetime, IAssemblyFactory assemblyFactory, IExplicitlyObservedAssemblies explicitlyObservedAssemblies);
    public void AddAssemblyToWorkspace(IPersistentNode persistentNode, IAssemblyLocation assemblyLocation);
    private void DisposeNode(IPersistentNode node);
    public bool AssemblyInWorkspace(IPersistentNode persistentNode, IAssemblyLocation assemblyLocation);
    public FileSystemPath get_TemporaryDirectory();
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_0();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.FeatureSettings.ExternalSourcesFeatureSettings : object {
    private static ExternalSourcesFeatureSettings ourInstance;
    public static ExternalSourcesFeatureSettings GetInstance();
    public virtual bool ShouldDecompileMethodBodies(Func`1<bool> fallback);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.Generation.EnableDebuggingFeatureSuggester : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
private IShellLocks myThreading;
    [NotNullAttribute]
private IFeatureSuggestionNotificationProvider myNotificationProvider;
    [NotNullAttribute]
private NonexistentPdbGenerator myPdbGenerator;
    [CompilerGeneratedAttribute]
private IFeatureSuggestionAspect[] <Aspects>k__BackingField;
    public IFeatureSuggestionAspect[] Aspects { get; }
    public EnableDebuggingFeatureSuggester(Lifetime lifetime, IShellLocks threading, IFeatureSuggestionNotificationProvider notificationProvider, NonexistentPdbGenerator pdbGenerator);
    [CompilerGeneratedAttribute]
public sealed virtual IFeatureSuggestionAspect[] get_Aspects();
    public sealed virtual IProperty`1<IFeatureSuggestion> Subscribe(Lifetime lifetime, FeatureSuggestionMode mode);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.Generation.GenerationManager : DefaultGenerationManager {
    private Lifetime myLifetime;
    private ILogger myLogger;
    private IShellLocks myShellLocks;
    [CompilerGeneratedAttribute]
private ListEvents`1<GenerationItemViewModel> <Items>k__BackingField;
    public Signal`1<GenerationItemViewModel> BringIntoView;
    public IProperty`1<bool> IsGenerating;
    public IProperty`1<int> GenerationsCount;
    public IProperty`1<bool> HasPdbGenerations;
    public IProperty`1<bool> HasProjGenerations;
    public IProperty`1<double> Progress;
    private GroupingEvent myProgressUpdateGroupingEvent;
    private int myGenerationCountForProgress;
    private CollectionEvents`1<GenerationStateViewModel> myCancellableGenerations;
    public ListEvents`1<GenerationItemViewModel> Items { get; }
    public GenerationManager(Lifetime lifetimeComponent, ILogger logger, IShellLocks shellLocks);
    [CompilerGeneratedAttribute]
public ListEvents`1<GenerationItemViewModel> get_Items();
    private void UpdateProperties(AddRemove action);
    private void UpdateProgress();
    [CanBeNullAttribute]
private GenerationStateViewModel AddItem(string fileName, string filePath, string assemblyName, string assemblyPath, string infoMessage, GenerationState state);
    public virtual GenerationStateViewModel AddItem(FileSystemPath filePath, IAssemblyLocation assemblyLocation);
    public virtual void AddInfoItem(string fileName, string filePath, string assemblyName, string assemblyLocation, string infoMessage);
    public virtual void AddDoneItem(string fileName, string filePath, string assemblyName, string assemblyLocation, string infoMessage);
    public virtual void Clear();
    public virtual void CancelAll();
    private void RunOnMainDispatcherThread(Action action);
    [CompilerGeneratedAttribute]
private void <Clear>b__22_0();
    [CompilerGeneratedAttribute]
private void <CancelAll>b__23_0();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.Generation.NonexistentPdbGenerator : DefaultExternalSourcesPdbGenerator {
    private IShellLocks myShellLocks;
    private ILogger myLogger;
    private ITextControlManager myTextControlManager;
    private DocumentManager myDocumentManager;
    private ISymbolsProvidersManager mySymbolsProvidersManager;
    private IVsDebuggerSettings myVsDebuggerSettings;
    private IAssemblyFactory myAssemblyFactory;
    private AssemblyInfoDatabase myAssemblyInfoDatabase;
    private IPsiCaches myPsiCaches;
    private DecompiledSourceLegalNotice myLegalNotice;
    private PdbManager myPdbManager;
    private IGenerationManager myGenerationManager;
    private DecompiledSourcesExternalSourcesProvider myDecompiledSourcesExternalSourcesProvider;
    private Action`3<string, string, Action> myShowSuggestion;
    public NonexistentPdbGenerator(IShellLocks shellLocks, ILogger logger, ITextControlManager textControlManager, DocumentManager documentManager, ISymbolsProvidersManager symbolsProvidersManager, IVsDebuggerSettings vsDebuggerSettings, IAssemblyFactory assemblyFactory, AssemblyInfoDatabase assemblyInfoDatabase, IPsiCaches psiCaches, DecompiledSourceLegalNotice legalNotice, PdbManager pdbManager, IGenerationManager generationManager, DecompiledSourcesExternalSourcesProvider decompiledSourcesExternalSourcesProvider);
    public virtual bool CanGenerate();
    private bool IsSymbolCacheFolderSpecified();
    public virtual void EnableDebuggingForAssemblies(IEnumerable`1<FileSystemPath> assemblies, IDebugProgram program);
    public virtual void EnableDebuggingForDecompiledSource(FileSystemPath decompiledSourceFile, IDebugProgram program);
    internal void SetSuggestion(Action`3<string, string, Action> showSuggestion);
    private static void AppendAssemblies(StringBuilder sb, List`1<FileSystemPath> assemblies, string hint, int messageAssembliesCount, Boolean& needComma);
    private bool EnsureDebuggerSettingsAreCorrect();
    private bool DebuggerSettingsAreCorrect();
    private string GetUpdateSettingsQuestion();
    private string GetSuggestionMessage(string assemblyName, bool updateSettings);
    private void AddUpdatingSettingsDescription(StringBuilder message);
    private void SetCorrectDebuggerSettings();
    private FileSystemPath GetDefaultSymbolCacheFolder();
    private IAssemblyLocation TryGetAssembly(FileSystemPath sourceFile);
    private void Generate(IList`1<FileSystemPath> assemblies, Action`1<FileSystemPath> loadSymbolsForAssembly);
    private bool Supported(IAssemblyLocation assemblyLocation);
    private bool CanDebug(IAssemblyLocation assemblyLocation);
    private bool NeedToGeneratePdb(FileSystemPath assemblyPath, FileSystemPath cacheFolder, bool showMessages);
    private bool NeedToGeneratePdb(FileSystemPath assemblyPath, FileSystemPath cacheFolder, bool showMessages, FileSystemPath& existingPdbPath);
    private void ShowInfo(FileSystemPath pdbPath, FileSystemPath assemblyPath, string message);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.Generation.ProtectedAssembliesImpl : ProtectedAssemblies {
    private ISettingsStore mySettingsStore;
    public ProtectedAssembliesImpl(ISettingsStore settingsStore);
    protected virtual bool DecompileProtectedAssemblies();
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "CancelAllGenerationsActionText")]
public class JetBrains.ReSharper.ExternalSources.Generation.ToolWindow.CancelAllGenerationsActionHandler : GenerationActionHandlerBase {
    protected virtual void Execute(IGenerationManager generationManager);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "ClearListActionText")]
public class JetBrains.ReSharper.ExternalSources.Generation.ToolWindow.ClearGenerationsListActionHandler : GenerationActionHandlerBase {
    protected virtual void Execute(IGenerationManager generationManager);
}
[ActionGroupAttribute("Generation.ActionBar", "1", "10")]
public class JetBrains.ReSharper.ExternalSources.Generation.ToolWindow.GenerationActionBarActionGroup : object {
    public GenerationActionBarActionGroup(CancelAllGenerationsActionHandler cancelAll, ClearGenerationsListActionHandler clearGenerationLog);
}
public abstract class JetBrains.ReSharper.ExternalSources.Generation.ToolWindow.GenerationActionHandlerBase : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    protected abstract virtual void Execute(IGenerationManager generationManager);
    [CanBeNullAttribute]
private static IGenerationManager GetGenerationManager(IDataContext context);
}
public class JetBrains.ReSharper.ExternalSources.Generation.ToolWindow.GenerationItemViewModel : object {
    [CompilerGeneratedAttribute]
private IProperty`1<string> <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <ToolTip>k__BackingField;
    [CompilerGeneratedAttribute]
private GenerationStateViewModel <Status>k__BackingField;
    public IProperty`1<string> FileName { get; }
    public IProperty`1<string> FilePath { get; }
    public IProperty`1<string> ToolTip { get; }
    public GenerationStateViewModel Status { get; }
    public GenerationItemViewModel(Lifetime lifetime, string fileName, string filePath, string assemblyName, string assemblyPath, GenerationState state, string infoMessage);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_FileName();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_FilePath();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_ToolTip();
    [CompilerGeneratedAttribute]
public GenerationStateViewModel get_Status();
    public void Navigate();
}
[UsedImplicitlyAttribute]
public class JetBrains.ReSharper.ExternalSources.Generation.ToolWindow.GenerationManagerControlAutomation : AAutomationRecord {
    [CompilerGeneratedAttribute]
private GenerationManager <GenerationManager>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public GenerationManager GenerationManager { get; public set; }
    public GenerationManagerControlAutomation(GenerationManager GenerationManager);
    [CompilerGeneratedAttribute]
protected GenerationManagerControlAutomation(GenerationManagerControlAutomation original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public GenerationManager get_GenerationManager();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_GenerationManager(GenerationManager value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(GenerationManagerControlAutomation left, GenerationManagerControlAutomation right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(GenerationManagerControlAutomation left, GenerationManagerControlAutomation right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(AAutomationRecord other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(GenerationManagerControlAutomation other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual AAutomationRecord <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(GenerationManager& GenerationManager);
}
[ToolWindowDescriptorAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.Generation.ToolWindow.GenerationToolWindowDescriptor : ToolWindowDescriptor {
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.Generation.ToolWindow.GenerationWindowManager : object {
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>P;
    [CompilerGeneratedAttribute]
private IShellLocks <Locks>P;
    [CompilerGeneratedAttribute]
private ILazy`1<ToolWindowManager> <ToolWindowManager>P;
    public GenerationWindowManager(Lifetime Lifetime, IShellLocks Locks, ILazy`1<ToolWindowManager> ToolWindowManager);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.ExternalSources.Generation.ToolWindow.GenerationWindowManager/<ShowGenerationWindowAsync>d__4")]
public Task ShowGenerationWindowAsync();
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "PdbGenerationStatusActionText")]
public class JetBrains.ReSharper.ExternalSources.Generation.ToolWindow.ShowGenerationWindowActionHandler : ActivateToolWindowActionHandler`1<GenerationToolWindowDescriptor> {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.ExternalSources.Generation.ZoneMarker : object {
}
[ActionGroupAttribute("IlViewer.ActionBar", "1", "10")]
public class JetBrains.ReSharper.ExternalSources.ILViewer.Actions.IlViewerActionBarActionGroup : object {
    public IlViewerActionBarActionGroup(IlViewerSynchronizeCaretToViewAction synchronizeCaretToViewAction, IlViewerSynchronizeViewToCaretAction synchronizeViewToCaretAction, IlViewerCodeTypeGroup codeTypeGroup);
}
public abstract class JetBrains.ReSharper.ExternalSources.ILViewer.Actions.IlViewerCodeTypeBase : object {
    protected CodeType CodeType { get; }
    public sealed virtual void Execute(IDataContext context);
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    protected abstract virtual CodeType get_CodeType();
}
[ActionGroupAttribute("1", "10")]
public class JetBrains.ReSharper.ExternalSources.ILViewer.Actions.IlViewerCodeTypeGroup : object {
    public IlViewerCodeTypeGroup(IlViewerCodeTypeIl il, IlViewerCodeTypeLowLevelCSharp lowLevelCSharp, IlViewerCodeTypeHighLevelCSharp highLevelCSharp);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "ILViewerCodeTypeHighLevelCSharpText")]
public class JetBrains.ReSharper.ExternalSources.ILViewer.Actions.IlViewerCodeTypeHighLevelCSharp : IlViewerCodeTypeBase {
    protected CodeType CodeType { get; }
    protected virtual CodeType get_CodeType();
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "ILViewerCodeTypeILText")]
public class JetBrains.ReSharper.ExternalSources.ILViewer.Actions.IlViewerCodeTypeIl : IlViewerCodeTypeBase {
    protected CodeType CodeType { get; }
    protected virtual CodeType get_CodeType();
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "ILViewerCodeTypeLowLevelCSharpText")]
public class JetBrains.ReSharper.ExternalSources.ILViewer.Actions.IlViewerCodeTypeLowLevelCSharp : IlViewerCodeTypeBase {
    protected CodeType CodeType { get; }
    protected virtual CodeType get_CodeType();
}
[ActionAttribute("IlViewer.SynchronizeCaretToView", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "TrackCaretInEditorActionText")]
public class JetBrains.ReSharper.ExternalSources.ILViewer.Actions.IlViewerSynchronizeCaretToViewAction : object {
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
}
[ActionAttribute("IlViewer.SynchronizeViewToCaret", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "AutomaticallyScrollToSourceActionText")]
public class JetBrains.ReSharper.ExternalSources.ILViewer.Actions.IlViewerSynchronizeViewToCaretAction : object {
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "ILViewerActionText")]
public class JetBrains.ReSharper.ExternalSources.ILViewer.Actions.ShowIlViewerWindowActionHandler : ActivateToolWindowActionHandler`1<IlViewerToolWindowDescriptor> {
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "ILViewerViewILCodeAction_Caption")]
public class JetBrains.ReSharper.ExternalSources.ILViewer.Actions.ViewIlCodeActionHandler : ContextNavigationActionBase`1<NavigateToIlCodeContextNavigationProvider> {
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "ILViewerViewLowLevelCSharpCodeAction_Caption")]
public class JetBrains.ReSharper.ExternalSources.ILViewer.Actions.ViewLowLevelCSharpCodeActionHandler : ContextNavigationActionBase`1<NavigateToLowLevelCSharpCodeContextNavigationProvider> {
}
internal class JetBrains.ReSharper.ExternalSources.ILViewer.AssemblyInfoSynchronizationElement : object {
    public sealed virtual ValueTuple`2<RangeNode, DocumentRange> GetRanges(CachedCode cachedCode, IDocument sourceDocument, ISolution solution);
    public sealed virtual IMetadataTypeInfo GetTopLevelType(IMetadataAssembly metadataAssembly);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.ILViewer.BaseIlViewerModel : IlViewerModel {
    private ISolution mySolution;
    private DocumentManager myDocumentManager;
    private ITextControlManager myTextControlManager;
    private IShellLocks myShellLocks;
    private ILazy`1<ToolWindowManager> myToolWindowManager;
    private IRunningDocuments myRunningDocuments;
    [CompilerGeneratedAttribute]
private IlViewerViewModel <ViewModel>k__BackingField;
    public IlViewerViewModel ViewModel { get; public set; }
    public BaseIlViewerModel(ISolution solution, DocumentManager documentManager, ITextControlManager textControlManager, IShellLocks shellLocks, ILazy`1<ToolWindowManager> toolWindowManager, IlSynchronizationHighlightingManager highlightingManager, IRunningDocuments runningDocuments);
    [CompilerGeneratedAttribute]
public IlViewerViewModel get_ViewModel();
    [CompilerGeneratedAttribute]
public void set_ViewModel(IlViewerViewModel value);
    public virtual void SetUnavailabilityReason(string unavailabilityReason);
    public virtual void SetIlTextControl(Lifetime lifetime, ITextControl textControl);
    protected virtual void UpdateCaret(ITextControl ilTextControl, RangeNode rangeNode, DocumentRange ilDocumentRange);
    public virtual ITextControl CreateIlTextControl(Lifetime lifetime, FileSystemPath location);
    protected virtual bool IsKeywordsHighlightingNeeded(IProjectFile projectFile);
    private void TryHighlightKeywords(IProjectFile projectFile, IDocument fileDocument, ITextControl textControl);
    public virtual void Show();
    [CompilerGeneratedAttribute]
private void <SetIlTextControl>b__12_0();
}
internal class JetBrains.ReSharper.ExternalSources.ILViewer.CachedCode : object {
    private CodeData myCachedCode;
    private object myLockObject;
    [CanBeNullAttribute]
private TypeRangeNode myTopLevelTypeRangeNode;
    private Dictionary`2<MetadataToken, TokenOwnerRangeNode> myCachedTokenOwnerRangeNodes;
    private AssemblyToAssemblyReferencesResolveManager myResolveManager;
    private ILogger myLogger;
    [CanBeNullAttribute]
private IMetadataTranslator myMetadataTranslator;
    private IlViewerTranslatorOptionsTransformer myOptionsTransformer;
    public CachedCode(AssemblyToAssemblyReferencesResolveManager resolveManager, ILogger logger, IMetadataTranslator metadataTranslator, IlViewerTranslatorOptionsTransformer optionsTransformer);
    [CanBeNullAttribute]
public CodeData GetCode(DebugData sourceDebugData, IAssemblyLocation assemblyLocation, MetadataTranslatorOptions options, CodeType codeType, ISynchronizationElement syncElement);
    [CanBeNullAttribute]
public RangeNode FindRangeNode(DocumentCoords coords);
    [CanBeNullAttribute]
public TokenOwnerRangeNode FindRangeNode(MetadataToken elementToken);
    [CanBeNullAttribute]
public TokenOwnerRangeNode FindContainingRangeNode(MetadataToken elementToken);
    [CanBeNullAttribute]
public TokenOwnerRangeNode FindRangeNode(IDeclaration declaration);
    [CanBeNullAttribute]
public MethodRangeNode FindTopLevelEntryPointRangeNode();
    private CodeData GetCachedOrCreateCode(IMetadataTypeInfo topLevelType, DebugData sourceDebugData, MetadataTranslatorOptions options, CodeType codeType);
    private CodeData GetCachedOrCreateAssemblyInfoCode(IMetadataAssembly assembly, DebugData sourceDebugData, MetadataTranslatorOptions options, CodeType codeType);
    private ValueTuple`2<CodeData, TypeRangeNode> GetIlCode(IMetadataTypeInfo topLevelType, CodeParameters parameters, DebugData sourceDebugData);
    private CodeData GetAssemblyInfoIlCode(IMetadataAssembly assembly, CodeParameters parameters, DebugData sourceDebugData);
    private CodeData GetAssemblyInfoCSharpCode(IMetadataAssembly assembly, CodeParameters parameters, DebugData sourceDebugData);
    private ValueTuple`2<CodeData, TypeRangeNode> GetCSharpCode(IMetadataTypeInfo topLevelType, CodeParameters parameters, DebugData sourceDebugData);
    [CanBeNullAttribute]
private static TypeRangeNode BuildRangeTree(IMetadataTypeInfo topLevelType, DebugData originalDebugData, DebugData decompiledDebugData);
    [CanBeNullAttribute]
private static TypeRangeNode BuildTypeMemberTree(IMetadataTypeInfo topLevelType, TypeMemberRange[] memberRanges);
    private static List`1<OriginalSequencePointToRange> CollectSequencePointRanges(DebugData originalDebugData, DebugData decompiledDebugData);
    private static TextRange GetCombinedRange(Queue`1<SequencePoint> sequencePoints, int maxIlOffset);
    private static void AddSequencePointNodes(TypeRangeNode topLevelTypeNode, List`1<OriginalSequencePointToRange> sequencePointRanges);
    private void CollectTokenNodes(RangeNode node);
}
public class JetBrains.ReSharper.ExternalSources.ILViewer.CachedDebugData : object {
    private ILogger myLogger;
    private IPdbService myPdbService;
    private PdbCache myPdbCache;
    private SrcSrvSourcesCache mySrcSrvSourcesCache;
    private SourceLinkOrEmbeddedSourcesCache mySourceLinkOrEmbeddedSourcesCache;
    private INavigationDecompilationCache myDecompilationCache;
    private DebugData myCachedDebugData;
    private DebugData myCachedDocumentDebugData;
    private DateTime myTimestamp;
    private FileSystemPath myPdbFilePath;
    private FileSystemPath myDocumentPath;
    public CachedDebugData(ILogger logger, IPdbService pdbService, PdbCache pdbCache, SrcSrvSourcesCache srcSrvSourcesCache, SourceLinkOrEmbeddedSourcesCache sourceLinkOrEmbeddedSourcesCache, INavigationDecompilationCache decompilationCache);
    [CanBeNullAttribute]
public DebugData TryGetSourceDebugData(IProjectFile projectFile, string codeTypePresentation, IAssemblyLocation& assemblyLocation, MetadataTranslatorOptions& decompiledSourceTranslatorOptions, String& unavailabilityReason, DebugDataOrigin& origin, bool mainThread);
    [NotNullAttribute]
private DebugData TryGetDocumentDebugDataFromPdb(FileSystemPath documentPath, bool isExternalSource, PdbInfo pdbInfo);
    [NotNullAttribute]
private DebugDocument GetDocumentFromCachedContent(FileSystemPath documentPath, bool isExternalSource, PdbInfo pdbInfo);
}
internal class JetBrains.ReSharper.ExternalSources.ILViewer.CodeData : object {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private DebugData <DebugData>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeParameters <Parameters>k__BackingField;
    [NotNullAttribute]
public string Code { get; }
    [CanBeNullAttribute]
public DebugData DebugData { get; }
    [NotNullAttribute]
public CodeParameters Parameters { get; }
    public CodeData(string code, DebugData debugData, CodeParameters parameters);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public DebugData get_DebugData();
    [CompilerGeneratedAttribute]
public CodeParameters get_Parameters();
}
internal class JetBrains.ReSharper.ExternalSources.ILViewer.CodeParameters : object {
    [CompilerGeneratedAttribute]
private AssemblyId <AssemblyId>k__BackingField;
    [CompilerGeneratedAttribute]
private MetadataToken <TopLevelTypeToken>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <OriginalPdbFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DocumentIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private MetadataTranslatorOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeType <CodeType>k__BackingField;
    public AssemblyId AssemblyId { get; }
    public MetadataToken TopLevelTypeToken { get; }
    [CanBeNullAttribute]
public FileSystemPath OriginalPdbFilePath { get; }
    public int DocumentIndex { get; }
    public MetadataTranslatorOptions Options { get; }
    public CodeType CodeType { get; }
    public CodeParameters(IMetadataTypeInfo topLevelType, DebugData sourceDebugData, MetadataTranslatorOptions options, CodeType codeType);
    public CodeParameters(IMetadataAssembly assembly, DebugData sourceDebugData, MetadataTranslatorOptions options, CodeType codeType);
    [CompilerGeneratedAttribute]
public AssemblyId get_AssemblyId();
    [CompilerGeneratedAttribute]
public MetadataToken get_TopLevelTypeToken();
    [CompilerGeneratedAttribute]
public FileSystemPath get_OriginalPdbFilePath();
    [CompilerGeneratedAttribute]
public int get_DocumentIndex();
    [CompilerGeneratedAttribute]
public MetadataTranslatorOptions get_Options();
    [CompilerGeneratedAttribute]
public CodeType get_CodeType();
    public sealed virtual bool Equals(CodeParameters other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(CodeParameters left, CodeParameters right);
    public static bool op_Inequality(CodeParameters left, CodeParameters right);
}
public enum JetBrains.ReSharper.ExternalSources.ILViewer.CodeType : Enum {
    public int value__;
    [DisplayAttribute]
public static CodeType IL;
    [DisplayAttribute]
public static CodeType LowLevelCSharp;
    [DisplayAttribute]
public static CodeType HighLevelCSharp;
}
public enum JetBrains.ReSharper.ExternalSources.ILViewer.DebugDataOrigin : Enum {
    public int value__;
    public static DebugDataOrigin Unknown;
    public static DebugDataOrigin OutputAssemblyPdb;
    public static DebugDataOrigin ExternalAssemblyPdb;
    public static DebugDataOrigin Decompiler;
}
internal class JetBrains.ReSharper.ExternalSources.ILViewer.DeclarationSynchronizationElement : object {
    [CanBeNullAttribute]
private string myTopLevelTypeName;
    [NotNullAttribute]
private IDeclaration myDeclaration;
    [CanBeNullAttribute]
private ISynchronizationElement myFallbackSynchronizationElement;
    public DeclarationSynchronizationElement(string topLevelTypeName, IDeclaration declaration, ISynchronizationElement fallbackSynchronizationElement);
    public sealed virtual ValueTuple`2<RangeNode, DocumentRange> GetRanges(CachedCode cachedCode, IDocument sourceDocument, ISolution solution);
    public sealed virtual IMetadataTypeInfo GetTopLevelType(IMetadataAssembly metadataAssembly);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.ExternalSources.ILViewer.Highlighting.IlSynchronizationHighlightingManager : object {
    private IDocumentMarkupManager myDocumentMarkupManager;
    private IShellLocks myLocks;
    private HashSet`1<IlSynchronizationHighlightingRequest> myRequests;
    private static string ourKey;
    private static Key`1<IlSynchronizationHighlightingRequest> ourHighlighterKey;
    private IProperty`1<bool> mySynchronizeCaretToView;
    private IProperty`1<bool> mySynchronizeViewToCaret;
    public IlSynchronizationHighlightingManager(Lifetime lifetime, IDocumentMarkupManager documentMarkupManager, ITextControlManager textControlManager, ISettingsStore settingsStore, IShellLocks locks);
    private static IlSynchronizationHighlightingManager();
    public void Update(ITextControl textControl, TextRange range);
    public void Hide(ITextControl textControl);
    public void HideAll();
    private void HideIfNeeded(Lifetime lifetime, bool hide);
    private bool ShouldHighlightTextControl(ITextControl textControl);
    private static bool IsIlTextControl(ITextControl textControl);
    private static bool IsSrcTextControl(ITextControl textControl);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_2(Lifetime lt, bool b);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_3(Lifetime lt, bool b);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_4(AddRemoveEventArgs`1<ITextControl> args);
    [CompilerGeneratedAttribute]
private void <HideIfNeeded>b__11_0();
}
public class JetBrains.ReSharper.ExternalSources.ILViewer.Highlighting.IlSynchronizationHighlightingRequest : object {
    [CompilerGeneratedAttribute]
private IHighlighter <Highlighter>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextControl <TextControl>k__BackingField;
    public IHighlighter Highlighter { get; }
    public ITextControl TextControl { get; }
    public IlSynchronizationHighlightingRequest(IHighlighter highlighter, ITextControl textControl);
    [CompilerGeneratedAttribute]
public IHighlighter get_Highlighter();
    [CompilerGeneratedAttribute]
public ITextControl get_TextControl();
}
public interface JetBrains.ReSharper.ExternalSources.ILViewer.ICodeTextWriterWithLineTracking {
    public int CurrentLineIndex { get; }
    public int CurrentLineIndexIgnoringNewLine { get; }
    public abstract virtual int get_CurrentLineIndex();
    public abstract virtual int get_CurrentLineIndexIgnoringNewLine();
}
public interface JetBrains.ReSharper.ExternalSources.ILViewer.IIlViewerManager {
    public IProperty`1<bool> SynchronizeCaretToIlView { get; }
    public IProperty`1<bool> SynchronizeIlViewToCaret { get; }
    public IProperty`1<CodeType> CodeType { get; }
    public abstract virtual void ShowIlViewer(CodeType codeType);
    public abstract virtual bool CanViewIl(ITextControl textControl);
    public abstract virtual IProperty`1<bool> get_SynchronizeCaretToIlView();
    public abstract virtual IProperty`1<bool> get_SynchronizeIlViewToCaret();
    public abstract virtual IProperty`1<CodeType> get_CodeType();
}
[ZoneDefinitionAttribute]
public interface JetBrains.ReSharper.ExternalSources.ILViewer.IIlViewerZone {
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.ILViewer.IlBindProvider : BindExternalSourcesProviderBase {
    public bool AllowExpired { get; }
    public IlBindProvider(INavigationDecompilationCache navigationDecompilationCache);
    public virtual bool get_AllowExpired();
    [CanBeNullAttribute]
internal FileSystemPath Bind(CodeData codeData, IAssemblyLocation assemblyLocation);
}
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.ILViewer.IlViewerCodeTypeUsagesCollector : CounterUsagesCollector {
    private EventLogGroup myGroup;
    private EventId2`2<CodeType, DebugDataOrigin> myCodeUpdatedEvent;
    public IlViewerCodeTypeUsagesCollector(FeatureUsageLogger featureUsageLogger);
    public virtual EventLogGroup GetGroup();
    public void LogCodeUpdated(ISolution solution, CodeType codeType, DebugDataOrigin debugDataOrigin);
}
[SolutionComponentAttribute("10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.ExternalSources.ILViewer.IlViewerManager : object {
    private ILogger myLogger;
    private IlBindProvider myIlBindProvider;
    private IFileLocationsBlacklist myFileLocationsBlacklist;
    private OutputAssemblies myOutputAssemblies;
    private IlViewerCodeTypeUsagesCollector myUsagesCollector;
    private TranslatorOptions myTranslatorOptions;
    private Lifetime myLifetime;
    private ISolution mySolution;
    private ChangeManager myChangeManager;
    private ITextControlManager myTextControlManager;
    private DocumentManager myDocumentManager;
    private IShellLocks myShellLocks;
    private INavigationDecompilationCache myDecompilationCache;
    private CachedCode myCachedCode;
    private CachedDebugData myCachedDebugData;
    private SequentialLifetimes myIlTextControlLifetimes;
    private CodeParameters myCodeParameters;
    private GroupingEvent mySyncCaretToIlViewEvent;
    private GroupingEvent mySyncIlViewToCaretEvent;
    private TimeSpan mySyncTimeSpan;
    private TimeSpan myReadLockTimeout;
    private IlViewerModel myModel;
    private int mySequencePointIlOffset;
    private MetadataToken myElementToken;
    private bool myIlViewerTextUpdated;
    private MetadataToken mySequencePointMethodToken;
    private bool myFocusIsLost;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <SynchronizeCaretToIlView>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <SynchronizeIlViewToCaret>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<CodeType> <CodeType>k__BackingField;
    public IProperty`1<bool> SynchronizeCaretToIlView { get; }
    public IProperty`1<bool> SynchronizeIlViewToCaret { get; }
    public IProperty`1<CodeType> CodeType { get; }
    public IlViewerManager(ILogger logger, Lifetime lifetime, ISolution solution, ISolutionOwner solutionOwner, ChangeManager changeManager, ITextControlManager textControlManager, DocumentManager documentManager, IShellLocks shellLocks, ISettingsStore settingsStore, AssemblyToAssemblyReferencesResolveManager resolveManager, INavigationDecompilationCache decompilationCache, IlBindProvider ilBindProvider, IFileLocationsBlacklist fileLocationsBlacklist, OutputAssemblies outputAssemblies, IlViewerCodeTypeUsagesCollector usagesCollector, IPdbService pdbService, PdbCache pdbCache, SrcSrvSourcesCache srcSrvSourcesCache, SourceLinkOrEmbeddedSourcesCache sourceLinkOrEmbeddedSourcesCache, ILanguageManager languageManager, TranslatorOptions translatorOptions, IlViewerTranslatorOptionsTransformer translatorOptionsTransformer, IlViewerModel model);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_SynchronizeCaretToIlView();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_SynchronizeIlViewToCaret();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<CodeType> get_CodeType();
    public void IlViewerContentFactory(Lifetime toolWindowLifetime, IProperty`1<bool> isVisible);
    private void OnTextControlClosed(AddRemoveEventArgs`1<ITextControl> args);
    private void OnTextControlFocused(Lifetime textControlLifetime, ITextControl textControl);
    private void SetSourceTextControl(Lifetime textControlLifetime, ITextControl sourceTextControl, bool ilViewerIsFocused);
    private GroupingEvent CreateSyncCaretToIlViewEvent(Lifetime lifetime);
    private GroupingEvent CreateSyncIlViewToCaretEvent(Lifetime lifetime, ITextControl textControl);
    private void HighlightCodeCorrespondingToIlCurrentLine(ITextControl sourceTextControl);
    private void UpdateCodeInViewer();
    private bool UpdateSequencePoint(SequencePointInMethod& sequencePoint);
    private bool UpdateElementToken(MetadataToken elementToken);
    public sealed virtual bool CanViewIl(ITextControl textControl);
    private void ShowIlForCodeUnderCaret(Lifetime lifetime);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.ExternalSources.ILViewer.IlViewerManager/<UpdateIlViewAsync>d__49")]
private Task UpdateIlViewAsync(Lifetime lt, DebugData sourceDebugData, IAssemblyLocation assemblyLocation, MetadataTranslatorOptions metadataTranslatorOptions, DebugDataOrigin debugDataOrigin, CodeType codeType);
    private bool UpdateSynchronizationElement(DebugData sourceDebugData, ISynchronizationElement& synchronizationElement);
    private bool UpdateAssemblyInfoSync(ISynchronizationElement& synchronizationElement, string hint);
    private static Nullable`1<SequencePointInMethod> GetSequencePointsNearPosition(DebugData sourceDebugData, int documentIndex, DocumentCoords position, Nullable`1<DocumentRange> range, ITextControl textControl);
    private static bool IsAssemblyInfo(DebugData sourceDebugData);
    private void HighlightCodeCorrespondingToSrcCaret(ISynchronizationElement syncElement);
    public sealed virtual void ShowIlViewer(CodeType codeType);
    private void HideIl(string unavailabilityReason);
    private void HideIl_NoSourceCode();
    [NotNullAttribute]
private static string GetCodeTypePresentation(CodeType codeType);
    private bool IsDecompiledDocument(IDocument document);
    [CanBeNullAttribute]
private IProject GetProject(ITextControl textControl);
    [CompilerGeneratedAttribute]
private void <IlViewerContentFactory>b__37_0(Lifetime visibleLifetime);
    [CompilerGeneratedAttribute]
private void <IlViewerContentFactory>b__37_1();
}
public abstract class JetBrains.ReSharper.ExternalSources.ILViewer.IlViewerModel : object {
    private ILogger myLogger;
    protected IlSynchronizationHighlightingManager myHighlightingManager;
    [CompilerGeneratedAttribute]
private ITextControl <SourceCodeTextControl>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextControl <IlCodeTextControl>k__BackingField;
    public ITextControl SourceCodeTextControl { get; private set; }
    public ITextControl IlCodeTextControl { get; private set; }
    public bool HasIlCodeTextControl { get; }
    public bool HasSourceCodeTextControl { get; }
    public IlViewerModel(IlSynchronizationHighlightingManager highlightingManager);
    [CompilerGeneratedAttribute]
public ITextControl get_SourceCodeTextControl();
    [CompilerGeneratedAttribute]
private void set_SourceCodeTextControl(ITextControl value);
    [CompilerGeneratedAttribute]
public ITextControl get_IlCodeTextControl();
    [CompilerGeneratedAttribute]
private void set_IlCodeTextControl(ITextControl value);
    public bool get_HasIlCodeTextControl();
    public bool get_HasSourceCodeTextControl();
    public void SetIlTextControl(ITextControl textControl);
    public virtual void SetIlTextControl(Lifetime lifetime, ITextControl textControl);
    public void SetSourceTextControl(ITextControl textControl);
    public void ClearSourceControl();
    public void RemoveHighlighting();
    public void HighlightInSrc(DocumentRange range, bool updateCaret);
    public void HighlightInIl(RangeNode rangeNode, bool updateCaret);
    protected virtual void UpdateCaret(ITextControl ilTextControl, RangeNode rangeNode, DocumentRange ilDocumentRange);
    public abstract virtual void SetUnavailabilityReason(string unavailabilityReason);
    public abstract virtual ITextControl CreateIlTextControl(Lifetime lifetime, FileSystemPath location);
    public abstract virtual void Show();
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.ExternalSource.ExternalSourcesSettings", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "ILViewerToolWindowSettingsSettingDescription")]
public class JetBrains.ReSharper.ExternalSources.ILViewer.IlViewerSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "SynchronizeCaretToILViewSettingDescription")]
public bool SynchronizeCaretToView;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "SynchronizeILViewToCaretSettingDescription")]
public bool SynchronizeViewToCaret;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "ILViewerCodeTypeSettingDescription")]
public CodeType CodeType;
}
public class JetBrains.ReSharper.ExternalSources.ILViewer.IlViewerToolWindowContent : NestedAutomationWrapper {
    public IlViewerToolWindowContent(Lifetime lifetime, ToolWindowInstance twi, BaseIlViewerModel baseIlViewerModel, IlViewerManager ilViewerManager, IActionBarManager actionBarManager, IUIApplication uiapp);
}
[ToolWindowDescriptorAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.ILViewer.IlViewerToolWindowDescriptor : ToolWindowDescriptor {
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.ILViewer.IlViewerTranslatorOptionsTransformer : object {
    public MetadataTranslatorOptions Transform(MetadataTranslatorOptions options, CodeType codeType);
    protected virtual bool TransformReplaceInvalidCharactersInIdentifiers(bool replaceInvalidCharactersInIdentifiers);
}
internal class JetBrains.ReSharper.ExternalSources.ILViewer.IlWithSequencePointsFormatter : IlMetadataFormatter {
    private DebugData mySourceDebugData;
    private Dictionary`2<MetadataToken, Dictionary`2<int, SequencePoint>> mySequencePointsDictionary;
    private ICodeTextWriterWithLineTracking myLineTracker;
    private TypeRangeNode myParentType;
    private RangeNode myCurrentParent;
    public IlWithSequencePointsFormatter(ICodeTextWriterWithLineTracking writer, IMetadataAssembly containingAssembly, DebugData sourceDebugData, bool showMetadataTokenValues, bool decompileProtectedAssemblies);
    public void RenderTypeWithInfoComment(IMetadataTypeInfo type, IImageBodyReader bodyReader);
    public void RenderManifestWithInfoComment(IImageBodyReader bodyReader);
    [StringFormatMethodAttribute("format")]
private void WriteCommentedLine(string format, Object[] args);
    [CanBeNullAttribute]
public TypeRangeNode GetTypeRangeNode();
    private int GetCurrentLineIndex(bool ignoringNewLine);
    private void StartRendering(RangeNode node);
    private void EndRendering();
    protected virtual void StartTypeRendering(IMetadataTypeInfo type);
    protected virtual void EndTypeRendering(IMetadataTypeInfo type);
    protected virtual void StartMethodRendering(IMetadataMethod method);
    protected virtual void EndMethodRendering(IMetadataMethod method);
    protected virtual void EndMethodBodyRendering(IMethodBody methodBody);
    protected virtual void StartFieldRendering(IMetadataField field);
    protected virtual void EndFieldRendering(IMetadataField field);
    protected virtual void StartPropertyRendering(IMetadataProperty property);
    protected virtual void EndPropertyRendering(IMetadataProperty property);
    protected virtual void StartEventRendering(IMetadataEvent event);
    protected virtual void EndEventRendering(IMetadataEvent event);
    protected virtual void StartInstructionRendering(IMethodBody methodBody, Instruction instruction);
}
internal interface JetBrains.ReSharper.ExternalSources.ILViewer.ISynchronizationElement {
    public abstract virtual ValueTuple`2<RangeNode, DocumentRange> GetRanges(CachedCode cachedCode, IDocument sourceDocument, ISolution solution);
    [CanBeNullAttribute]
public abstract virtual IMetadataTypeInfo GetTopLevelType(IMetadataAssembly metadataAssembly);
}
[ContextNavigationProviderAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.ILViewer.NavigateToIlCodeContextNavigationProvider : NavigateToIlViewerContextNavigationProviderBase {
    protected Type Action { get; }
    protected string ActionTitle { get; }
    protected CodeType CodeType { get; }
    protected virtual Type get_Action();
    protected virtual string get_ActionTitle();
    protected virtual CodeType get_CodeType();
}
public abstract class JetBrains.ReSharper.ExternalSources.ILViewer.NavigateToIlViewerContextNavigationProviderBase : object {
    protected Type Action { get; }
    protected string ActionTitle { get; }
    protected CodeType CodeType { get; }
    protected abstract virtual Type get_Action();
    protected abstract virtual string get_ActionTitle();
    protected abstract virtual CodeType get_CodeType();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.ExternalSources.ILViewer.NavigateToIlViewerContextNavigationProviderBase/<CreateWorkflow>d__6")]
public sealed virtual IEnumerable`1<ContextNavigation> CreateWorkflow(IDataContext dataContext);
    private bool IsAvailable(IDataContext context);
    private static void Navigate(IDataContext context, CodeType codeType);
}
[ContextNavigationProviderAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.ILViewer.NavigateToLowLevelCSharpCodeContextNavigationProvider : NavigateToIlViewerContextNavigationProviderBase {
    protected Type Action { get; }
    protected string ActionTitle { get; }
    protected CodeType CodeType { get; }
    protected virtual Type get_Action();
    protected virtual string get_ActionTitle();
    protected virtual CodeType get_CodeType();
}
public class JetBrains.ReSharper.ExternalSources.ILViewer.RangeTree.EventRangeNode : TokenOwnerRangeNode {
    [CompilerGeneratedAttribute]
private IMetadataEvent <Event>k__BackingField;
    public IMetadataEvent Event { get; }
    public string Name { get; }
    public EventRangeNode(IMetadataEvent event, RangeNode parent, int startLine);
    public EventRangeNode(IMetadataEvent event, RangeNode parent, DocumentCoords start, DocumentCoords end);
    [CompilerGeneratedAttribute]
public IMetadataEvent get_Event();
    public virtual string get_Name();
}
public class JetBrains.ReSharper.ExternalSources.ILViewer.RangeTree.FieldRangeNode : TokenOwnerRangeNode {
    [CompilerGeneratedAttribute]
private IMetadataField <Field>k__BackingField;
    public IMetadataField Field { get; }
    public string Name { get; }
    public FieldRangeNode(IMetadataField field, RangeNode parent, int startLine);
    public FieldRangeNode(IMetadataField field, RangeNode parent, DocumentCoords start, DocumentCoords end);
    [CompilerGeneratedAttribute]
public IMetadataField get_Field();
    public virtual string get_Name();
}
internal static class JetBrains.ReSharper.ExternalSources.ILViewer.RangeTree.IlViewerPsiUtil : object {
    [CanBeNullAttribute]
public static IMetadataTokenOwner TryGetTokenOwner(IDeclaration declaration);
    public static DocumentRange GetElementDeclarationNameRange(MetadataToken elementToken, PsiEditorView editorView);
    public static DocumentRange GetElementDeclarationNameRange(string elementXmlDocId, PsiEditorView editorView);
    [CanBeNullAttribute]
public static string TryGetDeclarationXmlDocId(IDeclaration declaration);
    public static DocumentRange GetLocalFunctionDeclarationNameRange(IMetadataMethod localFunction, PsiEditorView editorView);
    public static DocumentRange GetTopLevelCodeRange(PsiEditorView editorView);
    public static bool CompareSignatureFast(IMetadataMethod localFunction, ILocalFunctionDeclaration localFunctionDeclaration, IFunctionDeclaration containingDeclaration);
    public static bool IsInsideFunctionBody(PsiEditorView editorView, IDeclaration function);
    public static bool IsInsideAssemblyOrModuleAttribute(PsiEditorView editorView);
    public static bool ContainsAssemblyOrModuleAttributes(PsiEditorView editorView);
    private static bool IsAssemblyOrModule(IAttributeSection attributeSection);
    [CanBeNullAttribute]
public static IDeclaration TryGetCSharpDeclaration(PsiEditorView editorView);
    [CanBeNullAttribute]
private static IDeclaration TryFindTypeDeclarationNearSelectedNode(IPsiView psiView);
    [CanBeNullAttribute]
private static IDeclaration TryFindTypeMemberDeclarationNearSelectedNode(IPsiView psiView, ITypeDeclaration parentTypeDeclaration);
    [CanBeNullAttribute]
private static IDeclaration TryFindDeclarationNearSelectedNode(IPsiView psiView, ITreeNode parent, Func`2<ITreeNode, TreeNodeActionType> acceptDeclaration);
    private static TreeNodeActionType AcceptTypeDeclaration(ITreeNode node);
    private static TreeNodeActionType AcceptTypeMemberDeclaration(ITreeNode node);
    [CanBeNullAttribute]
public static string TryGetTopLevelTypeName(IDeclaration declaration, ITopLevelCode& topLevelCode);
    public static ITopLevelCode TryGetTopLevelCode(PsiEditorView editorView);
    [CompilerGeneratedAttribute]
internal static IDeclaration <TryFindDeclarationNearSelectedNode>g__GetDeclaration|14_0(ITreeNode declaration, <>c__DisplayClass14_0& );
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.ExternalSources.ILViewer.RangeTree.IlViewerRangeExtensions : object {
    [ExtensionAttribute]
public static bool IsAnotherSplitter(ITextControl a, ITextControl b);
    private static int GetSrcDocumentOffset(IDocument document, Int32`1<DocLine> line, Int32`1<DocColumn> column);
    [ExtensionAttribute]
[PureAttribute]
public static TextRange TextRangeFromSequencePointCoords(IDocument document, Int32`1<DocLine> startLine, Int32`1<DocColumn> startColumn, Int32`1<DocLine> endLine, Int32`1<DocColumn> endColumn);
    [ExtensionAttribute]
[PureAttribute]
public static DocumentRange GetDocumentRange(IDocument document, SequencePoint& sequencePoint);
    [ExtensionAttribute]
[PureAttribute]
public static DocumentRange GetDocumentRange(IDocument document, RangeNode rangeNode, ILogger logger);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static Nullable`1<SequencePointInMethod> TryGetInnerSequencePoint(DebugData debugData, int documentIndex, DocumentCoords& coords);
    [ExtensionAttribute]
public static void GetSequencePointsNearPosition(DebugData debugData, int documentIndex, DocumentCoords position, Nullable`1& before, Nullable`1& after);
}
public class JetBrains.ReSharper.ExternalSources.ILViewer.RangeTree.MethodRangeNode : TokenOwnerRangeNode {
    [CompilerGeneratedAttribute]
private IMetadataMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocalFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTopLevelEntryPoint>k__BackingField;
    public IMetadataMethod Method { get; }
    public bool IsLocalFunction { get; }
    public bool IsTopLevelEntryPoint { get; }
    public string Name { get; }
    public MethodRangeNode(IMetadataMethod method, RangeNode parent, int startLine);
    public MethodRangeNode(IMetadataMethod method, RangeNode parent, DocumentCoords start, DocumentCoords end);
    [CompilerGeneratedAttribute]
public IMetadataMethod get_Method();
    [CompilerGeneratedAttribute]
public bool get_IsLocalFunction();
    [CompilerGeneratedAttribute]
public bool get_IsTopLevelEntryPoint();
    public virtual string get_Name();
}
public class JetBrains.ReSharper.ExternalSources.ILViewer.RangeTree.PropertyRangeNode : TokenOwnerRangeNode {
    [CompilerGeneratedAttribute]
private IMetadataProperty <Property>k__BackingField;
    public IMetadataProperty Property { get; }
    public string Name { get; }
    public PropertyRangeNode(IMetadataProperty property, RangeNode parent, int startLine);
    public PropertyRangeNode(IMetadataProperty property, RangeNode parent, DocumentCoords start, DocumentCoords end);
    [CompilerGeneratedAttribute]
public IMetadataProperty get_Property();
    public virtual string get_Name();
}
public abstract class JetBrains.ReSharper.ExternalSources.ILViewer.RangeTree.RangeNode : object {
    [CompilerGeneratedAttribute]
private DocumentCoords <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentCoords <End>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RangeNode> <SortedChildren>k__BackingField;
    [CompilerGeneratedAttribute]
private RangeNode <Parent>k__BackingField;
    protected static int UninitializedLine;
    protected static int UninitializedColumn;
    private int myIndex;
    public DocumentCoords Start { get; }
    public DocumentCoords End { get; private set; }
    public List`1<RangeNode> SortedChildren { get; }
    [CanBeNullAttribute]
public RangeNode Parent { get; }
    private bool EndIsInitialized { get; }
    public bool IgnoreColumns { get; }
    protected static DocumentCoords Uninitialized { get; }
    protected RangeNode(RangeNode parent, DocumentCoords start, DocumentCoords end);
    [CompilerGeneratedAttribute]
public DocumentCoords get_Start();
    [CompilerGeneratedAttribute]
public DocumentCoords get_End();
    [CompilerGeneratedAttribute]
private void set_End(DocumentCoords value);
    [CompilerGeneratedAttribute]
public List`1<RangeNode> get_SortedChildren();
    [CompilerGeneratedAttribute]
public RangeNode get_Parent();
    private bool get_EndIsInitialized();
    public bool get_IgnoreColumns();
    public void SetEndLine(int endLine);
    public void SetEnd(DocumentCoords end);
    protected static DocumentCoords CreateLine(int line);
    protected static DocumentCoords get_Uninitialized();
    [CanBeNullAttribute]
public RangeNode Find(DocumentCoords coords);
    public bool Contains(DocumentCoords coords);
    public int Compare(DocumentCoords coords);
    public bool IsFirst();
    public bool IsLast();
    [CanBeNullAttribute]
public RangeNode PrevSibling();
    [CanBeNullAttribute]
public RangeNode NextSibling();
    public RangeNode Next();
    [CompilerGeneratedAttribute]
private int <.ctor>b__33_0(RangeNode node);
}
internal static class JetBrains.ReSharper.ExternalSources.ILViewer.RangeTree.RangeTreeUtil : object {
    [CanBeNullAttribute]
public static Nullable`1<SequencePointInMethod> TryGetNonHiddenSequencePoint(RangeNode rangeNode);
    [CanBeNullAttribute]
public static TokenOwnerRangeNode TryGetTokenOwnerNode(RangeNode rangeNode);
    [CanBeNullAttribute]
public static TokenOwnerRangeNode TryGetNodeWithDeclaration(TypeRangeNode topLevelType, IDeclaration declaration);
    [CanBeNullAttribute]
private static TypeRangeNode TryGetTypeNode(TypeRangeNode topLevelType, ITypeDeclaration typeDeclaration);
    [CanBeNullAttribute]
private static TypeRangeNode TryGetTypeNode(TypeRangeNode topLevelType, List`1<ITypeDeclaration> typeChain);
    private static bool Match(TypeRangeNode typeNode, ITypeDeclaration typeDeclaration);
    private static List`1<ITypeDeclaration> GetTypeChain(ITypeDeclaration typeDeclaration);
    [CanBeNullAttribute]
private static TokenOwnerRangeNode TryGetTypeMemberNode(TokenOwnerRangeNode containingNode, string memberXmlDocId);
    [CanBeNullAttribute]
private static TokenOwnerRangeNode TryGetLocalFunctionNode(TypeRangeNode containingType, ILocalFunctionDeclaration localFunctionDeclaration, IFunctionDeclaration containingDeclaration);
    private static void CollectLocalFunctionNodesByName(TokenOwnerRangeNode containingNode, string localFunctionName, IFunctionDeclaration containingDeclaration, List`1<MethodRangeNode> localFunctionNodes);
}
public class JetBrains.ReSharper.ExternalSources.ILViewer.RangeTree.SequencePointRangeNode : RangeNode {
    [CompilerGeneratedAttribute]
private SequencePointInMethod <SequencePoint>k__BackingField;
    public SequencePointInMethod SequencePoint { get; }
    public SequencePointRangeNode(SequencePointInMethod& sequencePoint, RangeNode parent, int startLine);
    public SequencePointRangeNode(SequencePointInMethod& sequencePoint, RangeNode parent, DocumentCoords start, DocumentCoords end);
    [CompilerGeneratedAttribute]
public SequencePointInMethod get_SequencePoint();
    public virtual string ToString();
}
public abstract class JetBrains.ReSharper.ExternalSources.ILViewer.RangeTree.TokenOwnerRangeNode : RangeNode {
    [CompilerGeneratedAttribute]
private MetadataToken <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XmlDocId>k__BackingField;
    public MetadataToken Token { get; }
    public string XmlDocId { get; }
    public string Name { get; }
    protected TokenOwnerRangeNode(IMetadataTypeMember typeMember, RangeNode parent, DocumentCoords start, DocumentCoords end);
    [CompilerGeneratedAttribute]
public MetadataToken get_Token();
    [CompilerGeneratedAttribute]
public string get_XmlDocId();
    public abstract virtual string get_Name();
    public virtual string ToString();
}
public class JetBrains.ReSharper.ExternalSources.ILViewer.RangeTree.TypeRangeNode : TokenOwnerRangeNode {
    [CompilerGeneratedAttribute]
private IMetadataTypeInfo <Type>k__BackingField;
    public IMetadataTypeInfo Type { get; }
    public string Name { get; }
    public TypeRangeNode(IMetadataTypeInfo type, RangeNode parent, int startLine);
    public TypeRangeNode(IMetadataTypeInfo type, RangeNode parent, DocumentCoords start, DocumentCoords end);
    [CompilerGeneratedAttribute]
public IMetadataTypeInfo get_Type();
    public virtual string get_Name();
}
internal class JetBrains.ReSharper.ExternalSources.ILViewer.SequencePointSynchronizationElement : TokenSynchronizationElement {
    private SequencePoint mySequencePoint;
    public SequencePointSynchronizationElement(MetadataToken token, SequencePoint sequencePoint);
    public virtual ValueTuple`2<RangeNode, DocumentRange> GetRanges(CachedCode cachedCode, IDocument sourceDocument, ISolution solution);
    public virtual string ToString();
    private bool FindSequencePointRanges(RangeNode range, SequencePointRangeNode& sequencePointRangeNode);
}
internal class JetBrains.ReSharper.ExternalSources.ILViewer.StringBuilderCodeTextWriterWithLineTracking : StringBuilderCodeTextWriter {
    [CompilerGeneratedAttribute]
private int <CurrentLineIndex>k__BackingField;
    private bool myNewLineEnded;
    public int CurrentLineIndex { get; private set; }
    public int CurrentLineIndexIgnoringNewLine { get; }
    public StringBuilderCodeTextWriterWithLineTracking(StringBuilder stringBuilder);
    [CompilerGeneratedAttribute]
public sealed virtual int get_CurrentLineIndex();
    [CompilerGeneratedAttribute]
private void set_CurrentLineIndex(int value);
    public sealed virtual int get_CurrentLineIndexIgnoringNewLine();
    protected virtual void WriteTextInternal(string text);
    protected virtual void WriteNewLineInternal();
}
internal class JetBrains.ReSharper.ExternalSources.ILViewer.TokenSynchronizationElement : object {
    protected MetadataToken Token;
    public TokenSynchronizationElement(MetadataToken token);
    public virtual ValueTuple`2<RangeNode, DocumentRange> GetRanges(CachedCode cachedCode, IDocument sourceDocument, ISolution solution);
    protected RangeNode GetRange(CachedCode cachedCode);
    protected DocumentRange GetSourceRange(IDocument sourceDocument, ISolution solution);
    public sealed virtual IMetadataTypeInfo GetTopLevelType(IMetadataAssembly metadataAssembly);
    private static IEnumerable`1<IMetadataEntity> GetMembers(IMetadataTypeInfo type, MetadataToken elementToken);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.ExternalSources.ILViewer.TopLevelCodeSynchronizationElement : object {
    private ITopLevelCode myTopLevelCode;
    public TopLevelCodeSynchronizationElement(ITopLevelCode topLevelCode);
    public sealed virtual ValueTuple`2<RangeNode, DocumentRange> GetRanges(CachedCode cachedCode, IDocument sourceDocument, ISolution solution);
    public sealed virtual IMetadataTypeInfo GetTopLevelType(IMetadataAssembly metadataAssembly);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.ExternalSources.ILViewer.ZoneMarker : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.ExternalSources.Menu.ExternalSourceInformationActionGroup : object {
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.ReSharper.ExternalSources.Menu.IntoContextNavigateDecompiledGroup : object {
    public IntoContextNavigateDecompiledGroup(NavigateToMetadataViewActionHandler navigateToMetadataViewActionHandler, NavigateToDecompiledSourcesActionHandler navigateToDecompiledSourcesActionHandler, NavigateToPdbActionHandler navigateToPdbActionHandler, NavigateToSourceInRepositoryActionHandler navigateToSourceInRepositoryActionHandler);
}
public class JetBrains.ReSharper.ExternalSources.MetadataContent.BinaryStruct : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private BinaryStructRow[] <Rows>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [NotNullAttribute]
public string Name { get; }
    public int Offset { get; internal set; }
    public int Size { get; private set; }
    [NotNullAttribute]
public BinaryStructRow[] Rows { get; public set; }
    [CanBeNullAttribute]
public string Description { get; public set; }
    public BinaryStruct(string name, string description, int offset, BinaryStructRow[] rows);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
internal void set_Offset(int value);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(int value);
    [CompilerGeneratedAttribute]
public BinaryStructRow[] get_Rows();
    [CompilerGeneratedAttribute]
public void set_Rows(BinaryStructRow[] value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    private void SetOffsets();
}
public class JetBrains.ReSharper.ExternalSources.MetadataContent.BinaryStructRow : object {
    public static string RowTypeQWord;
    public static string RowTypeDWord;
    public static string RowTypeWord;
    public static string RowTypeByte;
    [CompilerGeneratedAttribute]
private RowType <ElementType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ElementCount>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributesStructure <AttributesStructure>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public RowType ElementType { get; }
    public int ElementCount { get; }
    public bool IsArray { get; }
    [CanBeNullAttribute]
public AttributesStructure AttributesStructure { get; }
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public string Type { get; }
    public int Size { get; }
    public int Offset { get; internal set; }
    [NotNullAttribute]
public object Value { get; }
    [CanBeNullAttribute]
public string Description { get; }
    public BinaryStructRow(string name, RowType elementType, int elementCount, object value, string description, AttributesStructure attributesStructure);
    public BinaryStructRow(string name, RowType elementType, object value, string description, AttributesStructure attributesStructure);
    [CompilerGeneratedAttribute]
public RowType get_ElementType();
    [CompilerGeneratedAttribute]
public int get_ElementCount();
    public bool get_IsArray();
    [CompilerGeneratedAttribute]
public AttributesStructure get_AttributesStructure();
    [CompilerGeneratedAttribute]
public string get_Name();
    public string get_Type();
    public int get_Size();
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
internal void set_Offset(int value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public string get_Description();
    private int GetElementSize();
    private string GetElementType();
}
public class JetBrains.ReSharper.ExternalSources.MetadataContent.HeadersStructure : object {
    public static int NtHeadersSignatureSize;
    public static int FileHeaderSize;
    public static int DataDirectoriesSize;
    private static string Reserved;
    private static string Obsolete;
    public static BinaryStruct CreateDosHeader(DosHeader header);
    public static BinaryStruct CreateNtHeaders(PEFile peFile);
    public static BinaryStruct CreateFileHeader(PEFile peFile);
    public static BinaryStruct CreateOptionalHeader(PEFile peFile);
    public static BinaryStruct CreateWebAssemblyHeader(WebCilWasmModule wasm);
    public static BinaryStruct CreateWebAssemblySectionHeader(WasmSection section, bool isWebCilSection);
    private static string Uleb128Presentation(UInt32 value);
    public static BinaryStruct CreateWebCilHeader(WebCilPayload webCil);
    public static BinaryStruct CreateDataDirectories(PEFile peFile);
    private static void AddDirectory(List`1<BinaryStructRow> rows, string directoryName, CliImage cliImage, PeDirectoryEntry directoryId);
    private static void AddDirectory(List`1<BinaryStructRow> rows, string directoryName, DataDirectory dataDirectory, string rvaSection);
    public static BinaryStruct CreateDirectoriesFolder(int offset);
    public static BinaryStruct CreateExportDirectory(ExportDirectory dir, int offset);
    public static BinaryStruct[] CreateExportDirectoryArrays(ExportDirectory dir, PEFile peFile);
    public static BinaryStruct CreateDebugDirectory(int offset);
    public static BinaryStruct CreateDebugDirectoryEntry(Entry entry, int offset, int imageOffset);
    public static BinaryStruct CreateCodeViewDebugInfo(DebugInfo7 debugInfo7, int offset);
    public static BinaryStruct CreatePdbChecksumDebugInfo(string algorithmName, Byte[] checksum, int offset);
    private static string BytesToString(Byte[] bytes);
    public static BinaryStruct CreateResourceDirectory(ResourceDirectory resourceDirectory, int offset, int level);
    public static BinaryStruct CreateResourceDirectoryEntry(ResourceDirectoryEntry resourceDirectoryEntry, int offset, int level);
    public static BinaryStruct CreateResourceDataEntry(ResourceDataEntry resourceDataEntry, int offset);
    public static BinaryStruct CreateSectionHeadersFolder(PEFile peFile);
    public static BinaryStruct CreateSectionHeadersFolder(WebCilPayload webCil);
    public static BinaryStruct CreateSectionHeadersFolder(int offset);
    public static BinaryStruct CreateSectionHeader(PEFile peFile, int sectionIndex);
    public static BinaryStruct CreateSectionHeader(WebCilPayload webCil, int sectionIndex);
    private static BinaryStruct CreateSectionHeader(CliImage cliImage, int sectionIndex, int offset, int pointerToRawDataShift);
    private static BinaryStructRow[] CreateSectionHeaderRows(SectionHeaderBase header, int pointerToRawDataShift);
    [CanBeNullAttribute]
public static BinaryStruct CreateCliHeader(CliImage cliImage);
    [CanBeNullAttribute]
public static BinaryStruct CreateR2RHeader(PEFile peFile);
    [CanBeNullAttribute]
public static R2RData CreateR2RParsedHeader(PEFile peFile);
    [CanBeNullAttribute]
public static BinaryStruct CreateR2RCoreHeader(PEFile peFile);
    [CanBeNullAttribute]
public static BinaryStruct[] CreateR2RSections(PEFile peFile);
    [CanBeNullAttribute]
public static BinaryStruct CreateMetadataHeader(CliImage cliImage);
    [NotNullAttribute]
public static BinaryStruct CreateMetadataHeader(MetadataHeader header, int offset);
    public static BinaryStruct CreateStreamHeader(StreamHeader header, int streamHeaderOffset);
    public static BinaryStruct CreateTablesHeader(TableManager tables);
    public static BinaryStruct CreatePdbStream(PdbStream pdbStream);
    public static BinaryStruct CreateSingleFileBundleHeader(BundleManifest bundleHeader, int bundleHeaderOffset);
    public static BinaryStruct CreateBundleFileEntryHeader(FileEntry fileEntry, int entryOffset, UInt32 bundleMajorVersion);
}
public class JetBrains.ReSharper.ExternalSources.MetadataContent.MetadataContent : object {
    private static MetadataTableId[] ourKnownBlobTypes;
    private static MetadataTableId[] ourTablesWithBlobInBlob;
    private Boolean[] myDecodedBlobTypes;
    private int myBlobTypesNeedToDecode;
    private bool myAllBlobsAreDecoded;
    private Dictionary`2<UInt32, object> myBlobHeap;
    private Dictionary`2<UInt32, object> myConstants;
    private static int MaxBytesPresented;
    [CanBeNullAttribute]
private string myCachedRawBlob;
    private int myCachedRawBlobOffset;
    private HashSet`1<MetadataToken> myFieldRefTokens;
    public static int TableCount;
    private static int TokenTypeCount;
    private Dictionary`2<int, string> myStringHeap;
    private Dictionary`2<int, string> myUserStringHeap;
    private HashSet`1<int> myOverlappedStringOffsets;
    private Guid[] myGuidHeap;
    private List`1<int> myBlobOffsets;
    private int myMaxBlobOffset;
    private UInt32[0...,0...][] myTables;
    private int myMetadataHeaderOffset;
    private UInt32[] myTableRelativeOffsets;
    private Int32[] myTableRowSizes;
    private Int32[] myTokenSizes;
    private int myBlobOffsetSize;
    private int myGuidIndexSize;
    private int myStringOffsetSize;
    private CompactOneToSetMap`2<MetadataToken, MetadataToken> myTokenUsages;
    private CompactOneToSetMap`2<int, MetadataToken> myStringUsages;
    private CompactOneToSetMap`2<UInt32, MetadataToken> myGuidUsages;
    private CompactOneToSetMap`2<UInt32, MetadataToken> myBlobUsages;
    [CanBeNullAttribute]
private IMetadataStreamsAccess myStreams;
    private MetadataMemberNames myMetadataMemberNames;
    [CompilerGeneratedAttribute]
private BinaryStruct <DosHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private BinaryStruct <NtHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private BinaryStruct <FileHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private BinaryStruct <OptionalHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private BinaryStruct <WebAssemblyHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private BinaryStruct[] <WebAssemblySections>k__BackingField;
    [CompilerGeneratedAttribute]
private WasmSection[] <WasmSections>k__BackingField;
    [CompilerGeneratedAttribute]
private BinaryStruct <WebCilHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private BinaryStruct <DataDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private BinaryStruct <SectionHeadersFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private BinaryStruct[] <SectionHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private BinaryStruct <CliHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private BinaryStruct <R2RHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private BinaryStruct <R2RCoreHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private BinaryStruct[] <R2RSections>k__BackingField;
    [CompilerGeneratedAttribute]
private R2RData <R2RParsedHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private BinaryStruct <MetadataHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private BinaryStruct[] <StreamHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private BinaryStruct <TablesHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private BinaryStruct <PdbStream>k__BackingField;
    [CompilerGeneratedAttribute]
private BinaryStruct <SingleFileBundleHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private BinaryStruct[] <BundleFileEntryHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssemblyLocation <MetadataLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Mvid>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Generation>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <EncId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <EncBaseId>k__BackingField;
    private Dictionary`2<string, int> myHeapNameToStreamHeaderIndex;
    private Dictionary`2<MetadataToken, IManifestResourceDisposition> myManifestResourceDispositions;
    private object myLock;
    [CanBeNullAttribute]
private IMetadataAssembly myAssembly;
    [CanBeNullAttribute]
private TableManager myTableManager;
    private AssemblyToAssemblyReferencesResolveManager myResolveManager;
    private bool myEmbeddedPortablePdb;
    private string mySha1;
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private BinaryStruct <DirectoriesFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private BinaryStruct <ExportDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private BinaryStruct <DebugDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private Pair`2[] <DebugDirectoryEntries>k__BackingField;
    [CompilerGeneratedAttribute]
private BinaryStruct[] <ExportDirectoryArrays>k__BackingField;
    [CompilerGeneratedAttribute]
private IBinaryStructResourceTreeNode <RootResourceDirectory>k__BackingField;
    [CanBeNullAttribute]
public BinaryStruct DosHeader { get; private set; }
    [CanBeNullAttribute]
public BinaryStruct NtHeaders { get; private set; }
    [CanBeNullAttribute]
public BinaryStruct FileHeader { get; private set; }
    [CanBeNullAttribute]
public BinaryStruct OptionalHeader { get; private set; }
    [CanBeNullAttribute]
public BinaryStruct WebAssemblyHeader { get; private set; }
    [CanBeNullAttribute]
public BinaryStruct[] WebAssemblySections { get; private set; }
    [CanBeNullAttribute]
public WasmSection[] WasmSections { get; private set; }
    [CanBeNullAttribute]
public BinaryStruct WebCilHeader { get; private set; }
    [CanBeNullAttribute]
public BinaryStruct DataDirectories { get; private set; }
    [CanBeNullAttribute]
internal BinaryStruct SectionHeadersFolder { get; private set; }
    [CanBeNullAttribute]
public BinaryStruct[] SectionHeaders { get; private set; }
    [CanBeNullAttribute]
public BinaryStruct CliHeader { get; private set; }
    [CanBeNullAttribute]
public BinaryStruct R2RHeader { get; private set; }
    [CanBeNullAttribute]
public BinaryStruct R2RCoreHeader { get; private set; }
    [CanBeNullAttribute]
public BinaryStruct[] R2RSections { get; private set; }
    [CanBeNullAttribute]
public R2RData R2RParsedHeader { get; private set; }
    [CanBeNullAttribute]
public BinaryStruct MetadataHeader { get; private set; }
    [CanBeNullAttribute]
public BinaryStruct[] StreamHeaders { get; private set; }
    [CanBeNullAttribute]
public BinaryStruct TablesHeader { get; private set; }
    [CanBeNullAttribute]
public BinaryStruct PdbStream { get; private set; }
    [CanBeNullAttribute]
public BinaryStruct SingleFileBundleHeader { get; private set; }
    [CanBeNullAttribute]
public BinaryStruct[] BundleFileEntryHeaders { get; private set; }
    [NotNullAttribute]
public IAssemblyLocation MetadataLocation { get; }
    public Guid Mvid { get; private set; }
    public int Generation { get; private set; }
    public Guid EncId { get; private set; }
    public Guid EncBaseId { get; private set; }
    public int StringCount { get; }
    public int UserStringCount { get; }
    public int GuidCount { get; }
    public int BlobCount { get; }
    [CanBeNullAttribute]
internal BinaryStruct DirectoriesFolder { get; private set; }
    [CanBeNullAttribute]
internal BinaryStruct ExportDirectory { get; private set; }
    [CanBeNullAttribute]
internal BinaryStruct DebugDirectory { get; private set; }
    [CanBeNullAttribute]
public Pair`2[] DebugDirectoryEntries { get; private set; }
    [CanBeNullAttribute]
public BinaryStruct[] ExportDirectoryArrays { get; private set; }
    [CanBeNullAttribute]
public IBinaryStructResourceTreeNode RootResourceDirectory { get; private set; }
    internal MetadataContent(IAssemblyLocation metadataLocation, IMetadataAssembly assembly, TableManager tableManager, AssemblyToAssemblyReferencesResolveManager resolveManager, bool embeddedPortablePdb, IAssemblyLocation parentMetadataLocation);
    private static MetadataContent();
    [CanBeNullAttribute]
public string GetDecodedBlob(int offset);
    public string GetRawBlobString(int offset);
    public Byte[] GetRawBlob(int offset);
    private void PrepareBlobDecoding();
    private void DecodeBlobs(int blobOffset);
    private void DecodeBlobs(MetadataTableId tableId);
    private static bool LoadingReferencesIsNeededForDecoding(MetadataTableId tableId);
    private void DecodeForEachRow(MetadataTableId tableId, int blobColumnIndex, IMetadataStreamsAccess streams, Func`2<IBlob, string> decodeBlob);
    private void DecodeForEachRow(MetadataTokenRange tokenRange, int blobColumnIndex, IMetadataStreamsAccess streams, Func`2<IBlob, string> decodeBlob);
    private void DecodeForEachRow(MetadataTableId tableId, int blobColumnIndex, Dictionary`2<UInt32, object> decodedBlobs, IMetadataStreamsAccess streams, Func`3<IBlob, MetadataToken, object> decodeBlob);
    private void DecodeForEachRow(MetadataTokenRange tokenRange, int blobColumnIndex, Dictionary`2<UInt32, object> decodedBlobs, IMetadataStreamsAccess streams, Func`3<IBlob, MetadataToken, object> decodeBlob);
    private void DecodeForEachRow(MetadataTableId tableId, int blobColumnIndex, Func`2<MetadataToken, string> decodeBlob);
    private bool IsValidOffset(UInt32 blobOffset, Dictionary`2<UInt32, object> decodedBlobs);
    private void DecodeFieldBlobs(IMetadataAssembly metadataAssembly, IMetadataStreamsAccess streams);
    private void DecodeMethodDefBlobs(IMetadataAssembly metadataAssembly, IMetadataStreamsAccess streams);
    private void DecodeMemberRefBlobs(IMetadataAssembly metadataAssembly, IMetadataStreamsAccess streams);
    public bool IsFieldRef(MetadataToken token);
    private void DecodeConstantBlobs(IMetadataStreamsAccess streams);
    private void DecodeCustomAttributeBlobs(IMetadataAssembly metadataAssembly);
    private void DecodeFieldMarshalBlobs(IMetadataAssembly metadataAssembly, IMetadataStreamsAccess streams);
    private void DecodeDeclSecurityBlobs(IMetadataAssembly metadataAssembly);
    private void DecodePropertyBlobs(IMetadataAssembly metadataAssembly, IMetadataStreamsAccess streams);
    private void DecodeTypeSpecBlobs(IMetadataAssembly metadataAssembly, IMetadataStreamsAccess streams);
    private void DecodeAssemblyBlobs(IMetadataStreamsAccess streams);
    private void DecodeAssemblyRefBlobs(IMetadataStreamsAccess streams);
    private void DecodeFileBlobs(IMetadataStreamsAccess streams);
    private void DecodeMethodSpecBlobs(IMetadataAssembly metadataAssembly, IMetadataStreamsAccess streams);
    private void DecodeDocumentBlobs(IMetadataStreamsAccess streams);
    private void DecodeMethodDebugInformationBlobs(IMetadataStreamsAccess streams);
    private void DecodeImportScopeBlobs(IMetadataStreamsAccess streams);
    private void DecodeCustomDebugInformationBlobs(IMetadataStreamsAccess streams);
    private static void AppendTypeFullName(StringBuilder sb, IMetadataType metadataType);
    private static string PresentType(IMetadataType metadataType);
    private static string PresentSignature(MethodSignature signature, IMetadataTypeParameter[] typeParameters);
    private static string PresentCustomAttribute(IMetadataCustomAttribute customAttribute);
    private static string PresentMarshalSpec(IMarshalSpec marshalSpec, IMetadataAssembly metadataAssembly);
    private static string PresentSecurityAttributes(IMetadataSecurityAttribute[] attributes);
    private static string PresentBytes(IBlob blob);
    private static string PresentBytes(IBlob blob, int maxBytesPresented);
    private static void AppendValue(StringBuilder sb, MetadataAttributeValue value);
    private static void AppendCommaIfNeeded(StringBuilder sb, Boolean& first);
    private static void AssertIsBlob(MetadataTableId tableId, int blobIndex);
    private static void AssertIsByte(MetadataTableId tableId, int byteIndex);
    private static void AssertIsToken(MetadataTableId tableId, int tokenIndex);
    private void LogDecodingException(Exception ex, MetadataToken token);
    [CompilerGeneratedAttribute]
public BinaryStruct get_DosHeader();
    [CompilerGeneratedAttribute]
private void set_DosHeader(BinaryStruct value);
    [CompilerGeneratedAttribute]
public BinaryStruct get_NtHeaders();
    [CompilerGeneratedAttribute]
private void set_NtHeaders(BinaryStruct value);
    [CompilerGeneratedAttribute]
public BinaryStruct get_FileHeader();
    [CompilerGeneratedAttribute]
private void set_FileHeader(BinaryStruct value);
    [CompilerGeneratedAttribute]
public BinaryStruct get_OptionalHeader();
    [CompilerGeneratedAttribute]
private void set_OptionalHeader(BinaryStruct value);
    [CompilerGeneratedAttribute]
public BinaryStruct get_WebAssemblyHeader();
    [CompilerGeneratedAttribute]
private void set_WebAssemblyHeader(BinaryStruct value);
    [CompilerGeneratedAttribute]
public BinaryStruct[] get_WebAssemblySections();
    [CompilerGeneratedAttribute]
private void set_WebAssemblySections(BinaryStruct[] value);
    [CompilerGeneratedAttribute]
public WasmSection[] get_WasmSections();
    [CompilerGeneratedAttribute]
private void set_WasmSections(WasmSection[] value);
    [CompilerGeneratedAttribute]
public BinaryStruct get_WebCilHeader();
    [CompilerGeneratedAttribute]
private void set_WebCilHeader(BinaryStruct value);
    [CompilerGeneratedAttribute]
public BinaryStruct get_DataDirectories();
    [CompilerGeneratedAttribute]
private void set_DataDirectories(BinaryStruct value);
    [CompilerGeneratedAttribute]
internal BinaryStruct get_SectionHeadersFolder();
    [CompilerGeneratedAttribute]
private void set_SectionHeadersFolder(BinaryStruct value);
    [CompilerGeneratedAttribute]
public BinaryStruct[] get_SectionHeaders();
    [CompilerGeneratedAttribute]
private void set_SectionHeaders(BinaryStruct[] value);
    [CompilerGeneratedAttribute]
public BinaryStruct get_CliHeader();
    [CompilerGeneratedAttribute]
private void set_CliHeader(BinaryStruct value);
    [CompilerGeneratedAttribute]
public BinaryStruct get_R2RHeader();
    [CompilerGeneratedAttribute]
private void set_R2RHeader(BinaryStruct value);
    [CompilerGeneratedAttribute]
public BinaryStruct get_R2RCoreHeader();
    [CompilerGeneratedAttribute]
private void set_R2RCoreHeader(BinaryStruct value);
    [CompilerGeneratedAttribute]
public BinaryStruct[] get_R2RSections();
    [CompilerGeneratedAttribute]
private void set_R2RSections(BinaryStruct[] value);
    [CompilerGeneratedAttribute]
public R2RData get_R2RParsedHeader();
    [CompilerGeneratedAttribute]
private void set_R2RParsedHeader(R2RData value);
    [CompilerGeneratedAttribute]
public BinaryStruct get_MetadataHeader();
    [CompilerGeneratedAttribute]
private void set_MetadataHeader(BinaryStruct value);
    [CompilerGeneratedAttribute]
public BinaryStruct[] get_StreamHeaders();
    [CompilerGeneratedAttribute]
private void set_StreamHeaders(BinaryStruct[] value);
    [CompilerGeneratedAttribute]
public BinaryStruct get_TablesHeader();
    [CompilerGeneratedAttribute]
private void set_TablesHeader(BinaryStruct value);
    [CompilerGeneratedAttribute]
public BinaryStruct get_PdbStream();
    [CompilerGeneratedAttribute]
private void set_PdbStream(BinaryStruct value);
    [CompilerGeneratedAttribute]
public BinaryStruct get_SingleFileBundleHeader();
    [CompilerGeneratedAttribute]
private void set_SingleFileBundleHeader(BinaryStruct value);
    [CompilerGeneratedAttribute]
public BinaryStruct[] get_BundleFileEntryHeaders();
    [CompilerGeneratedAttribute]
private void set_BundleFileEntryHeaders(BinaryStruct[] value);
    [CompilerGeneratedAttribute]
public IAssemblyLocation get_MetadataLocation();
    [CompilerGeneratedAttribute]
public Guid get_Mvid();
    [CompilerGeneratedAttribute]
private void set_Mvid(Guid value);
    [CompilerGeneratedAttribute]
public int get_Generation();
    [CompilerGeneratedAttribute]
private void set_Generation(int value);
    [CompilerGeneratedAttribute]
public Guid get_EncId();
    [CompilerGeneratedAttribute]
private void set_EncId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_EncBaseId();
    [CompilerGeneratedAttribute]
private void set_EncBaseId(Guid value);
    private void ReadHeaders();
    private void DoWithMetadataAccess(Action`1<IMetadataAccess> action);
    private void DoWithMetadataAssembly(bool loadReferences, Action`1<IMetadataAssembly> action);
    private void DoWithMetadataAssemblyAndStreamsManager(bool loadReferences, Action`2<IMetadataAssembly, IMetadataStreamsAccess> action);
    private void DoWithMetadataAssembly(Action`1<IMetadataAssembly> action);
    [CanBeNullAttribute]
private UInt32[0...,0...] TryReadTable(int tableIndex, IMetadataStreamsAccess tables);
    private void AddStringUsage(int stringOffset, MetadataToken token);
    private void FindRangeUsages();
    private void AddRangeUsages(MetadataToken token, MetadataTableId refTableId, UInt32 currentRangeFirstRid, UInt32 nextRangeFirstRid);
    public string GetString(int offset);
    public bool IsOverlappedString(int offset);
    public bool IsGarbageString(int offset);
    public string GetUserString(int offset);
    public Guid GetGuid(int index);
    public int GetLastModificationGeneration(MetadataToken token);
    public int GetGuidGeneration(int index);
    public int GetStringGeneration(int offset);
    public int GetUserStringGeneration(int offset);
    public int GetBlobGeneration(int offset);
    public int get_StringCount();
    public int get_UserStringCount();
    public int get_GuidCount();
    public int get_BlobCount();
    public UInt32 GetData(MetadataToken token, int columnIndex);
    public MetadataTokenRange GetRangeData(MetadataToken token, int columnIndex);
    private int GetTableMaxRid(MetadataTableId tableId);
    public int GetTableLength(MetadataTableId tableId);
    public bool Contains(MetadataToken token);
    public IEnumerable`1<int> GetAllStringOffsets();
    public IEnumerable`1<int> GetAllUserStringOffsets();
    public IEnumerable`1<int> GetAllBlobOffsets();
    public IEnumerable`1<int> GetAllGuidIndices();
    public MetadataTokenRange GetTokens(MetadataTableId tableId);
    public IEnumerable`1<MetadataToken> GetTokenUsages(MetadataToken token);
    public IEnumerable`1<MetadataToken> GetStringUsages(int stringOffset);
    public IEnumerable`1<MetadataToken> GetGuidUsages(int guidIndex);
    public IEnumerable`1<MetadataToken> GetBlobUsages(int blobOffset);
    private bool IsNullGuidUsed();
    public int GetTokenUsagesCount(MetadataToken token);
    public int GetStringUsagesCount(int stringOffset);
    public int GetGuidUsagesCount(int guidIndex);
    public int GetBlobUsagesCount(int blobOffset);
    private static ICollection`1<int> GetUsagesColumnIndices(MetadataToken token, Func`4<MetadataToken, int, Column, bool> isUsage);
    public ICollection`1<int> GetTokenUsagesColumnIndices(MetadataToken tokenToFind, MetadataToken token);
    public ICollection`1<int> GetStringUsagesColumnIndices(int stringOffset, MetadataToken token);
    public ICollection`1<int> GetGuidUsagesColumnIndices(int guidIndex, MetadataToken token);
    public ICollection`1<int> GetBlobUsagesColumnIndices(int blobOffset, MetadataToken token);
    private void ReadAllManifestResourceDispositions();
    public IManifestResourceDisposition GetManifestResourceDisposition(MetadataToken manifestResourceToken);
    [CanBeNullAttribute]
public BinaryStruct GetStreamHeader(string heapName);
    public bool TryGetMemberName(MetadataToken memberToken, String& memberName, String& containingTypeName);
    public UInt32 GetTableAbsoluteOffset(MetadataTableId tableId);
    public UInt32 GetTableRowAbsoluteOffset(MetadataToken token);
    private int GetColumnSize(Column column);
    public UInt32 GetTableRowColumnAbsoluteOffset(MetadataToken token, int columnIndex);
    public UInt32 GetStreamAbsoluteOffset(string heapName);
    public UInt32 GetStreamSize(string heapName);
    public UInt32 GetBlobAbsoluteOffset(int blobOffset);
    public UInt32 GetUserStringAbsoluteOffset(int userStringOffset);
    public UInt32 GetStringAbsoluteOffset(int stringOffset);
    public UInt32 GetGuidAbsoluteOffset(int guidIndex);
    public string GetSha1();
    private PathCookie GetPathCookie();
    [CompilerGeneratedAttribute]
internal BinaryStruct get_DirectoriesFolder();
    [CompilerGeneratedAttribute]
private void set_DirectoriesFolder(BinaryStruct value);
    [CompilerGeneratedAttribute]
internal BinaryStruct get_ExportDirectory();
    [CompilerGeneratedAttribute]
private void set_ExportDirectory(BinaryStruct value);
    [CompilerGeneratedAttribute]
internal BinaryStruct get_DebugDirectory();
    [CompilerGeneratedAttribute]
private void set_DebugDirectory(BinaryStruct value);
    [CompilerGeneratedAttribute]
public Pair`2[] get_DebugDirectoryEntries();
    [CompilerGeneratedAttribute]
private void set_DebugDirectoryEntries(Pair`2[] value);
    [CompilerGeneratedAttribute]
public BinaryStruct[] get_ExportDirectoryArrays();
    [CompilerGeneratedAttribute]
private void set_ExportDirectoryArrays(BinaryStruct[] value);
    [CompilerGeneratedAttribute]
public IBinaryStructResourceTreeNode get_RootResourceDirectory();
    [CompilerGeneratedAttribute]
private void set_RootResourceDirectory(IBinaryStructResourceTreeNode value);
    private void CreateDirectories(PEFile peFile);
    private void CreateExportDirectories(PEFile peFile);
    private void CreateDebugDirectories(CliImage cliImage);
    private void CreateResourcesDirectory(PEFile peFile);
    [CompilerGeneratedAttribute]
private object <DecodeConstantBlobs>b__28_0(IBlob blob, MetadataToken token);
    [CompilerGeneratedAttribute]
private object <DecodeMethodDebugInformationBlobs>b__39_0(IBlob blob, MetadataToken token);
    [CompilerGeneratedAttribute]
private object <DecodeCustomDebugInformationBlobs>b__41_0(IBlob blob, MetadataToken token);
    [CompilerGeneratedAttribute]
private void <.ctor>b__194_0(IMetadataAccess streams);
    [CompilerGeneratedAttribute]
private void <ReadAllManifestResourceDispositions>b__246_0(IMetadataAssembly metadataAssembly);
}
internal class JetBrains.ReSharper.ExternalSources.MetadataContent.MetadataMemberNames : object {
    [NotNullAttribute]
private IAssemblyLocation myAssemblyLocation;
    [CanBeNullAttribute]
private IMetadataAssembly myAssembly;
    private Dictionary`2<MetadataToken, MetadataToken> myMemberToType;
    private Dictionary`2<MetadataToken, string> myMemberNames;
    private Dictionary`2<MetadataToken, string> myTypeNames;
    public MetadataMemberNames(IAssemblyLocation assemblyLocation, IMetadataAssembly assembly);
    public bool TryGetMemberName(MetadataToken memberToken, String& memberName, String& containingTypeName);
    public void BuildNames();
    private void BuildNames(IMetadataAssembly metadataAssembly);
}
public class JetBrains.ReSharper.ExternalSources.MetadataContent.R2RData : object {
    [CompilerGeneratedAttribute]
private string <Compiler>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstructionSet>k__BackingField;
    public string Compiler { get; }
    public string InstructionSet { get; }
    public R2RData(string compiler, string instructionSet);
    [CompilerGeneratedAttribute]
public string get_Compiler();
    [CompilerGeneratedAttribute]
public string get_InstructionSet();
}
internal static class JetBrains.ReSharper.ExternalSources.MetadataContent.ResourceDirectoryEntryIds : object {
    public static string GetLevel(int level);
    [CanBeNullAttribute]
public static string GetDescription(int resourceDirectoryEntryId, int level);
    [CanBeNullAttribute]
private static string GetTypeDescription(ResourceType resourceType);
    public static void AddChainDescription(StringBuilder& sb, ResourceDirectory resourceDirectory, int level, bool startWithDelimiter);
    public static void AddChainDescription(StringBuilder& sb, ResourceDirectoryEntry resourceDirectoryEntry, int level);
}
public enum JetBrains.ReSharper.ExternalSources.MetadataContent.RowType : Enum {
    public int value__;
    public static RowType Byte;
    public static RowType Word;
    public static RowType DWord;
    public static RowType DWordTimeDateStamp;
    public static RowType QWord;
}
internal static class JetBrains.ReSharper.ExternalSources.MetadataContent.SectionNames : object {
    private static Dictionary`2<string, string> ourDescriptions;
    private static SectionNames();
    [CanBeNullAttribute]
public static string GetDescription(string sectionName);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Navigation.AssemblyExplorerBlobUsagesNavigationProvider : AssemblyExplorerMetadataItemUsagesNavigationProvider`1<BlobNode> {
    public AssemblyExplorerBlobUsagesNavigationProvider(IPsiModules psiModules, AssemblyToAssemblyReferencesResolveManager resolveManager, EffectiveReferencedAssemblyNamesExtractor assemblyNamesExtractor, FileSystemPathNavigator fileSystemPathNavigator, UITaskExecutor taskExecutor, IPdbService pdbService, SourceLinkOrEmbeddedSourcesCache sourceLinkOrEmbeddedSourcesCache);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Navigation.AssemblyExplorerGuidUsagesNavigationProvider : AssemblyExplorerMetadataItemUsagesNavigationProvider`1<GuidNode> {
    public AssemblyExplorerGuidUsagesNavigationProvider(IPsiModules psiModules, AssemblyToAssemblyReferencesResolveManager resolveManager, EffectiveReferencedAssemblyNamesExtractor assemblyNamesExtractor, FileSystemPathNavigator fileSystemPathNavigator, UITaskExecutor taskExecutor, IPdbService pdbService, SourceLinkOrEmbeddedSourcesCache sourceLinkOrEmbeddedSourcesCache);
}
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Navigation.AssemblyExplorerMetadataItemUsagesNavigationProvider`1 : object {
    private IPsiModules myPsiModules;
    private AssemblyToAssemblyReferencesResolveManager myResolveManager;
    private EffectiveReferencedAssemblyNamesExtractor myAssemblyNamesExtractor;
    private FileSystemPathNavigator myFileSystemPathNavigator;
    private UITaskExecutor myTaskExecutor;
    private IPdbService myPdbService;
    private SourceLinkOrEmbeddedSourcesCache mySourceLinkOrEmbeddedSourcesCache;
    private static int MaxUsagesCount;
    public AssemblyExplorerMetadataItemUsagesNavigationProvider`1(IPsiModules psiModules, AssemblyToAssemblyReferencesResolveManager resolveManager, EffectiveReferencedAssemblyNamesExtractor assemblyNamesExtractor, FileSystemPathNavigator fileSystemPathNavigator, UITaskExecutor taskExecutor, IPdbService pdbService, SourceLinkOrEmbeddedSourcesCache sourceLinkOrEmbeddedSourcesCache);
    public sealed virtual bool IsApplicable(TreeModelNode data);
    public sealed virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(TreeModelNode target);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Navigation.AssemblyExplorerMetadataTokenNavigationProvider : object {
    private IPsiModules myPsiModules;
    private AssemblyToAssemblyReferencesResolveManager myResolveManager;
    private EffectiveReferencedAssemblyNamesExtractor myAssemblyNamesExtractor;
    private FileSystemPathNavigator myFileSystemPathNavigator;
    private UITaskExecutor myTaskExecutor;
    private IPdbService myPdbService;
    private SourceLinkOrEmbeddedSourcesCache mySourceLinkOrEmbeddedSourcesCache;
    public AssemblyExplorerMetadataTokenNavigationProvider(IPsiModules psiModules, AssemblyToAssemblyReferencesResolveManager resolveManager, EffectiveReferencedAssemblyNamesExtractor assemblyNamesExtractor, FileSystemPathNavigator fileSystemPathNavigator, UITaskExecutor taskExecutor, IPdbService pdbService, SourceLinkOrEmbeddedSourcesCache sourceLinkOrEmbeddedSourcesCache);
    public sealed virtual bool IsApplicable(TreeModelNode data);
    public sealed virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(TreeModelNode target);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Navigation.AssemblyExplorerPortablePdbMetadataNavigationProvider : object {
    private PdbXmlNavigator myPdbXmlNavigator;
    private PdbCache myPdbCache;
    public AssemblyExplorerPortablePdbMetadataNavigationProvider(PdbXmlNavigator pdbXmlNavigator, PdbCache pdbCache);
    public sealed virtual bool IsApplicable(TreeModelNode data);
    public sealed virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(TreeModelNode target);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Navigation.AssemblyExplorerStringUsagesNavigationProvider : AssemblyExplorerMetadataItemUsagesNavigationProvider`1<StringNode> {
    public AssemblyExplorerStringUsagesNavigationProvider(IPsiModules psiModules, AssemblyToAssemblyReferencesResolveManager resolveManager, EffectiveReferencedAssemblyNamesExtractor assemblyNamesExtractor, FileSystemPathNavigator fileSystemPathNavigator, UITaskExecutor taskExecutor, IPdbService pdbService, SourceLinkOrEmbeddedSourcesCache sourceLinkOrEmbeddedSourcesCache);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Navigation.AssemblyExplorerUserStringUsagesNavigationProvider : object {
    private IPsiModules myPsiModules;
    private AssemblyToAssemblyReferencesResolveManager myResolveManager;
    public AssemblyExplorerUserStringUsagesNavigationProvider(IPsiModules psiModules, AssemblyToAssemblyReferencesResolveManager resolveManager);
    public sealed virtual bool IsApplicable(TreeModelNode data);
    public sealed virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(TreeModelNode target);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "LocateInMetadataTreeContextNavigationProvider_ActionTitle")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Navigation.LocateInMetadataTreeAction : ContextNavigationActionBase`1<LocateInMetadataTreeContextNavigationProvider> {
}
[ContextNavigationProviderAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Navigation.LocateInMetadataTreeContextNavigationProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.ExternalSources.MetadataTree.Navigation.LocateInMetadataTreeContextNavigationProvider/<CreateWorkflow>d__0")]
public sealed virtual IEnumerable`1<ContextNavigation> CreateWorkflow(IDataContext dataContext);
    private static bool IsAvailable(IDataContext context);
    private static void Navigate(IDataContext context);
    private static MetadataTokenInAssembly GetMetadataTokenInAssembly(IDataContext context);
}
public static class JetBrains.ReSharper.ExternalSources.MetadataTree.Navigation.MetadataDataConstants : object {
    [NotNullAttribute]
public static DataConstant`1<MetadataTokenInAssembly> MetadataTokenElement;
    private static MetadataDataConstants();
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.ExternalSources.MetadataTree.Navigation.MetadataDataRules : object {
    private IPsiModules myPsiModules;
    private AssemblyToAssemblyReferencesResolveManager myResolveManager;
    public MetadataDataRules(Lifetime lifetime, DataContexts dc, IPsiModules psiModules, AssemblyToAssemblyReferencesResolveManager resolveManager);
    [CanBeNullAttribute]
private MetadataTokenInAssembly MetadataTokenElementFromNodesOrDeclaredElements(IDataContext context);
    [CanBeNullAttribute]
private ICollection`1<IDeclaredElement> DeclaredElementsFromMetadataTokenNodes(IDataContext context);
}
public static class JetBrains.ReSharper.ExternalSources.MetadataTree.Navigation.MetadataNavigationUtil : object {
    [CanBeNullAttribute]
public static INavigationPoint GetNavigationPoint(MetadataToken token, IAssemblyPsiModule assemblyPsiModule, IAssemblyFile assemblyFile, AssemblyToAssemblyReferencesResolveManager resolveManager, EffectiveReferencedAssemblyNamesExtractor assemblyNamesExtractor, FileSystemPathNavigator fileSystemPathNavigator, UITaskExecutor taskExecutor, IPdbService pdbService, SourceLinkOrEmbeddedSourcesCache sourceLinkOrEmbeddedSourcesCache);
    [CanBeNullAttribute]
public static IList`1<INavigationPoint> GetNavigationPoints(IEnumerable`1<MetadataToken> tokens, IAssemblyPsiModule assemblyPsiModule, IAssemblyFile assemblyFile, AssemblyToAssemblyReferencesResolveManager resolveManager, EffectiveReferencedAssemblyNamesExtractor assemblyNamesExtractor, FileSystemPathNavigator fileSystemPathNavigator, UITaskExecutor taskExecutor, IPdbService pdbService, SourceLinkOrEmbeddedSourcesCache sourceLinkOrEmbeddedSourcesCache);
    [CanBeNullAttribute]
private static INavigationPoint GetNavigationPoint(MetadataToken token, IAssemblyPsiModule assemblyPsiModule, IAssemblyFile assemblyFile, IMetadataAssembly metadataAssembly, EffectiveReferencedAssemblyNamesExtractor assemblyNamesExtractor, FileSystemPathNavigator fileSystemPathNavigator, UITaskExecutor taskExecutor, IPdbService pdbService, SourceLinkOrEmbeddedSourcesCache sourceLinkOrEmbeddedSourcesCache);
    [CanBeNullAttribute]
public static IList`1<INavigationPoint> GetUserStringUsagesNavigationPoints(MetadataToken userStringToken, string userString, IAssemblyPsiModule assemblyPsiModule, IAssemblyLocation assemblyLocation, AssemblyToAssemblyReferencesResolveManager resolveManager);
}
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Navigation.MetadataTokenInAssembly : object {
    [CompilerGeneratedAttribute]
private MetadataToken <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssemblyPsiModule <Assembly>k__BackingField;
    public MetadataToken Token { get; }
    public IAssemblyPsiModule Assembly { get; }
    public MetadataTokenInAssembly(MetadataToken token, IAssemblyPsiModule assembly);
    [CompilerGeneratedAttribute]
public MetadataToken get_Token();
    [CompilerGeneratedAttribute]
public IAssemblyPsiModule get_Assembly();
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Navigation.MetadataTokenLocator : AssemblyExplorerLocatorBase {
    public virtual bool IsApplicable(object target);
    public virtual ICollection`1<TreeModelNode> LocateNodes(object target, ICollection`1<TreeModelNode> scope);
    private static List`1<TreeModelNode> SelectMatchedAssemblyNodes(IAssemblyPsiModule assembly, IEnumerable`1<TreeModelNode> scope);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Navigation.MetadataTokenLocatorNew : AssemblyExplorerLocatorBaseNew {
    public virtual bool IsApplicable(object target);
    public virtual ICollection`1<IExplorerNode> LocateNodes(object target, ICollection`1<IExplorerNode> scope);
    private static List`1<IExplorerNode> SelectMatchedAssemblyNodes(IAssemblyPsiModule assembly, IEnumerable`1<IExplorerNode> scope);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.NodeProviders.AttributeOptionsProvider : ExplorerNodesProviderBase {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.NodeProviders.BinaryStructContentProvider : ExplorerNodesProviderBase {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.NodeProviders.BlobNodesProvider : HeapChildNodesProviderBase`2<BlobHeapNode, BlobNode> {
    protected virtual int GetChildCount(MetadataContent metadataContent);
    protected virtual IEnumerable`1<int> GetAllIds(MetadataContent metadataContent);
    protected virtual BlobNode CreateChildNode(int childId, BlobHeapNode heapNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.NodeProviders.FlagsContentProvider : ExplorerNodesProviderBase {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.NodeProviders.GuidNodesProvider : HeapChildNodesProviderBase`2<GuidHeapNode, GuidNode> {
    protected virtual int GetChildCount(MetadataContent metadataContent);
    protected virtual IEnumerable`1<int> GetAllIds(MetadataContent metadataContent);
    protected virtual GuidNode CreateChildNode(int childId, GuidHeapNode heapNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.NodeProviders.HeadersFolderContentProvider : ExplorerNodesProviderBase {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
public abstract class JetBrains.ReSharper.ExternalSources.MetadataTree.NodeProviders.HeapChildNodesProviderBase`2 : ExplorerNodesProviderBase {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    protected abstract virtual int GetChildCount(MetadataContent metadataContent);
    protected abstract virtual IEnumerable`1<int> GetAllIds(MetadataContent metadataContent);
    protected abstract virtual TChildNode CreateChildNode(int childId, THeapNode heapNode);
    [CanBeNullAttribute]
private THeapNode TryGetHeapNode(IExplorerNode explorerNode);
    public virtual bool HasChildren(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.NodeProviders.MetadataItemUsagesProvider : ExplorerNodesProviderBase {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.NodeProviders.MetadataTokenNodeContentProvider : ExplorerNodesProviderBase {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual bool HasChildren(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.NodeProviders.MetadataTokenNodesProvider : ExplorerNodesProviderBase {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    [CanBeNullAttribute]
private MetadataTableNode TryGetTableNode(IExplorerNode explorerNode);
    public virtual bool HasChildren(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.NodeProviders.MetadataTreeFolderContentProvider : ExplorerNodesProviderBase {
    private Lifetime myLifetime;
    private ISymbolsProvidersManager mySymbolsProvidersManager;
    private AssemblyToAssemblyReferencesResolveManager myResolveManager;
    public MetadataTreeFolderContentProvider(Lifetime lifetime, ISymbolsProvidersManager symbolsProvidersManager, AssemblyToAssemblyReferencesResolveManager resolveManager);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual bool CanHaveChildren(IExplorerNode explorerNode);
    public virtual bool HasChildrenFast(IExplorerNode explorerNode);
    public virtual bool HasChildren(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.NodeProviders.MetadataTreeFolderProvider : ExplorerNodesProviderBase {
    private AssemblyToAssemblyReferencesResolveManager myResolveManager;
    public MetadataTreeFolderProvider(AssemblyToAssemblyReferencesResolveManager resolveManager);
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    [CanBeNullAttribute]
private static IAssemblyFileNode TryGetAssemblyFileNode(IExplorerNode explorerNode);
    public virtual bool CanHaveChildren(IExplorerNode explorerNode);
    public virtual bool HasChildrenFast(IExplorerNode explorerNode);
    public virtual bool HasChildren(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.NodeProviders.StringNodesProvider : HeapChildNodesProviderBase`2<StringHeapNode, StringNode> {
    protected virtual int GetChildCount(MetadataContent metadataContent);
    protected virtual IEnumerable`1<int> GetAllIds(MetadataContent metadataContent);
    protected virtual StringNode CreateChildNode(int childId, StringHeapNode heapNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.NodeProviders.UsagesFolderProvider : ExplorerNodesProviderBase {
    public virtual bool IsApplicable(IExplorerNode explorerNode);
    public virtual bool HasChildren(IExplorerNode explorerNode);
    public virtual ICollection`1<IExplorerNode> GetChildren(IExplorerNode explorerNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.NodeProviders.UserStringNodesProvider : HeapChildNodesProviderBase`2<UserStringHeapNode, UserStringNode> {
    protected virtual int GetChildCount(MetadataContent metadataContent);
    protected virtual IEnumerable`1<int> GetAllIds(MetadataContent metadataContent);
    protected virtual UserStringNode CreateChildNode(int childId, UserStringHeapNode heapNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Presenters.AssemblyMetadataTreeFolderNodePresenter : object {
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Presenters.AttributeFlagNodePresenter : MetadataTreeNodePresenterBase`1<AttributeFlagNode> {
    public AttributeFlagNodePresenter(AssemblyExplorerStyles assemblyExplorerStyles);
    protected virtual IconId GetIcon(AttributeFlagNode node);
    protected virtual string GetId(AttributeFlagNode node);
    protected virtual string GetName(AttributeFlagNode node);
    protected virtual void AppendInfo(RichText itemText, AttributeFlagNode node, bool detailedPresentation);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Presenters.AttributeOptionNodePresenter : MetadataTreeNodePresenterBase`1<AttributeOptionNode> {
    public AttributeOptionNodePresenter(AssemblyExplorerStyles assemblyExplorerStyles);
    protected virtual IconId GetIcon(AttributeOptionNode node);
    protected virtual string GetId(AttributeOptionNode node);
    protected virtual string GetName(AttributeOptionNode node);
    protected virtual void AppendInfo(RichText itemText, AttributeOptionNode node, bool detailedPresentation);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Presenters.AttributeOptionsMaskNodePresenter : MetadataTreeNodePresenterBase`1<AttributeOptionsMaskNode> {
    public AttributeOptionsMaskNodePresenter(AssemblyExplorerStyles assemblyExplorerStyles);
    protected virtual IconId GetIcon(AttributeOptionsMaskNode node);
    protected virtual string GetId(AttributeOptionsMaskNode node);
    protected virtual string GetName(AttributeOptionsMaskNode node);
    protected virtual void AppendInfo(RichText itemText, AttributeOptionsMaskNode node, bool detailedPresentation);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Presenters.BinaryStructNodePresenter : MetadataTreeNodePresenterBase`1<BinaryStructNode> {
    public BinaryStructNodePresenter(AssemblyExplorerStyles assemblyExplorerStyles);
    protected virtual IconId GetIcon(BinaryStructNode node);
    protected virtual string GetId(BinaryStructNode node);
    protected virtual string GetName(BinaryStructNode node);
    protected virtual void AppendInfo(RichText itemText, BinaryStructNode node, bool detailedPresentation);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Presenters.BinaryStructRowNodePresenter : MetadataTreeNodePresenterBase`1<BinaryStructRowNode> {
    public BinaryStructRowNodePresenter(AssemblyExplorerStyles assemblyExplorerStyles);
    protected virtual string GetId(BinaryStructRowNode node);
    protected virtual string GetName(BinaryStructRowNode node);
    protected virtual IconId GetIcon(BinaryStructRowNode node);
    protected virtual void AppendInfo(RichText itemText, BinaryStructRowNode node, bool detailedPresentation);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Presenters.BlobNodePresenter : MetadataTreeNodePresenterBase`1<BlobNode> {
    public BlobNodePresenter(AssemblyExplorerStyles assemblyExplorerStyles);
    protected virtual string GetNodeType(BlobNode node);
    protected virtual string GetId(BlobNode node);
    protected virtual string GetName(BlobNode node);
    protected virtual IconId GetIcon(BlobNode node);
    protected virtual string GetIconTooltip(BlobNode node);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Presenters.GuidNodePresenter : MetadataTreeNodePresenterBase`1<GuidNode> {
    public GuidNodePresenter(AssemblyExplorerStyles assemblyExplorerStyles);
    protected virtual string GetNodeType(GuidNode node);
    protected virtual string GetId(GuidNode node);
    protected virtual string GetName(GuidNode node);
    protected virtual IconId GetIcon(GuidNode node);
    protected virtual string GetIconTooltip(GuidNode node);
    protected virtual void AppendInfo(RichText itemText, GuidNode node, bool detailedPresentation);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Presenters.HeadersFolderNodePresenter : object {
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Presenters.MetadataDeltaTreeFolderNodePresenter : object {
    private AssemblyExplorerStyles myExplorerStyles;
    public MetadataDeltaTreeFolderNodePresenter(AssemblyExplorerStyles assemblyExplorerStyles);
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Presenters.MetadataHeapNodePresenter : MetadataTreeNodePresenterBase`1<MetadataHeapNode> {
    public MetadataHeapNodePresenter(AssemblyExplorerStyles assemblyExplorerStyles);
    protected virtual IconId GetIcon(MetadataHeapNode node);
    protected virtual string GetId(MetadataHeapNode node);
    protected virtual string GetName(MetadataHeapNode node);
    protected virtual int GetItemCount(MetadataHeapNode node);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Presenters.MetadataTableNodePresenter : MetadataTreeNodePresenterBase`1<MetadataTableNode> {
    public MetadataTableNodePresenter(AssemblyExplorerStyles assemblyExplorerStyles);
    protected virtual IconId GetIcon(MetadataTableNode node);
    protected virtual string GetId(MetadataTableNode node);
    protected virtual string GetName(MetadataTableNode node);
    protected virtual int GetItemCount(MetadataTableNode node);
    protected virtual void AppendInfo(RichText itemText, MetadataTableNode node, bool detailedPresentation);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Presenters.MetadataTokenNodePresenter : MetadataTreeNodePresenterBase`1<MetadataTokenNode> {
    public MetadataTokenNodePresenter(AssemblyExplorerStyles assemblyExplorerStyles);
    protected virtual IconId GetIcon(MetadataTokenNode node);
    protected virtual string GetIconTooltip(MetadataTokenNode node);
    protected virtual string GetNodeType(MetadataTokenNode node);
    protected virtual string GetId(MetadataTokenNode node);
    protected virtual string GetName(MetadataTokenNode node);
    protected virtual void AppendInfo(RichText itemText, MetadataTokenNode node, bool detailedPresentation);
}
public abstract class JetBrains.ReSharper.ExternalSources.MetadataTree.Presenters.MetadataTreeNodePresenterBase`1 : object {
    [CompilerGeneratedAttribute]
private TextStyle <DefaultTextStyle>k__BackingField;
    protected AssemblyExplorerStyles myExplorerStyles;
    protected TextStyle DefaultTextStyle { get; }
    protected MetadataTreeNodePresenterBase`1(AssemblyExplorerStyles assemblyExplorerStyles);
    [CompilerGeneratedAttribute]
protected TextStyle get_DefaultTextStyle();
    public virtual bool IsApplicable(IExplorerNode node);
    protected virtual string GetNodeType(TMetadataTreeNode node);
    [CanBeNullAttribute]
protected abstract virtual string GetId(TMetadataTreeNode node);
    [NotNullAttribute]
protected abstract virtual string GetName(TMetadataTreeNode node);
    [NotNullAttribute]
protected abstract virtual IconId GetIcon(TMetadataTreeNode node);
    protected virtual string GetIconTooltip(TMetadataTreeNode node);
    protected virtual void AppendInfo(RichText itemText, TMetadataTreeNode node, bool detailedPresentation);
    protected virtual int GetItemCount(TMetadataTreeNode node);
    public virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
    [CanBeNullAttribute]
private string GetColumnDescription(MetadataItemNode itemNode);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Presenters.PortablePdbMetadataTreeFolderNodePresenter : object {
    private AssemblyExplorerStyles myExplorerStyles;
    public PortablePdbMetadataTreeFolderNodePresenter(AssemblyExplorerStyles assemblyExplorerStyles);
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
public static class JetBrains.ReSharper.ExternalSources.MetadataTree.Presenters.PresentationUtil : object {
    private static Dictionary`2<MetadataTableId, int> ourTablePresentationColumn;
    private static PresentationUtil();
    public static IconId GetIcon(MetadataTableId tableId);
    private static string GetShortTokenData(MetadataToken token, MetadataContent metadataContent, String& containingTypeInfo);
    public static string GetDataPresentation(ulong data, RowType dataType);
    public static string GetDataPresentation(UInt32 data, ColumnDataType dataType, MetadataContent metadataContent, String& containingTypeInfo);
    public static string GetDataPresentation(ValueNode valueNode);
    public static string GetDataPresentation(MetadataToken token, int columnIndex, ColumnDataType dataType, MetadataContent metadataContent, String& containingTypeInfo);
    public static bool IsSpecialPresentationNeeded(MetadataToken token, int columnIndex);
    private static bool ShowContainingTypeInfo(MetadataTokenNode node, int columnIndex);
    [CanBeNullAttribute]
public static string PresentMultilineString(string s);
    public static void AppendFullTokenData(RichText itemText, MetadataTokenNode node, bool showColumnNames, TextStyle defaultTextStyle, TextStyle markedColumnTextStyle, TextStyle emphasizedTextStyle, TextStyle infoTextStyle);
    public static void AppendMethodDefInfo(RichText itemText, MetadataToken methodToken, MetadataContent metadataContent, TextStyle infoTextStyle, bool newLineAndToken);
    public static string GetBinaryStructRowValuePresentation(BinaryStructRow row);
    private static ulong GetValue(BinaryStructRow row);
    [CanBeNullAttribute]
public static string TryPresentColumnName(MetadataItemNode itemNode);
    internal static string PresentColumnName(Column column);
    [CanBeNullAttribute]
public static string TryPresentColumnDataType(MetadataItemNode itemNode);
    internal static string PresentColumnDataType(Column column);
    [CanBeNullAttribute]
private static string TryPresentFlagsStructure(BinaryStructRow row);
    [CanBeNullAttribute]
private static string TryPresentTimeDateStamp(BinaryStructRow row);
    [CanBeNullAttribute]
public static string TryPresentDescription(BinaryStructRow row);
    public static string PresentFlagsStructure(IValueNode node);
    public static string PresentTableStructure(MetadataTableId tableId);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Presenters.StringNodePresenter : MetadataTreeNodePresenterBase`1<StringNode> {
    public StringNodePresenter(AssemblyExplorerStyles assemblyExplorerStyles);
    protected virtual string GetNodeType(StringNode node);
    protected virtual string GetId(StringNode node);
    protected virtual string GetName(StringNode node);
    protected virtual IconId GetIcon(StringNode node);
    protected virtual string GetIconTooltip(StringNode node);
    protected virtual void AppendInfo(RichText itemText, StringNode node, bool detailedPresentation);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Presenters.UsagesFolderNodePresenter : object {
    private AssemblyExplorerStyles myExplorerStyles;
    public UsagesFolderNodePresenter(AssemblyExplorerStyles assemblyExplorerStyles);
    public sealed virtual bool IsApplicable(IExplorerNode node);
    public sealed virtual void Present(IExplorerNode node, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Presenters.UserStringNodePresenter : MetadataTreeNodePresenterBase`1<UserStringNode> {
    public UserStringNodePresenter(AssemblyExplorerStyles assemblyExplorerStyles);
    protected virtual string GetNodeType(UserStringNode node);
    protected virtual string GetId(UserStringNode node);
    protected virtual string GetName(UserStringNode node);
    protected virtual IconId GetIcon(UserStringNode node);
    protected virtual string GetIconTooltip(UserStringNode node);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.Presenters.ValueNodePresenter : MetadataTreeNodePresenterBase`1<ValueNode> {
    public ValueNodePresenter(AssemblyExplorerStyles assemblyExplorerStyles);
    protected virtual string GetId(ValueNode node);
    protected virtual string GetNodeType(ValueNode node);
    protected virtual string GetName(ValueNode node);
    protected virtual IconId GetIcon(ValueNode node);
    protected virtual void AppendInfo(RichText itemText, ValueNode node, bool detailedPresentation);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.PropertiesProviders.AttributeFlagNodePropertiesProvider : MetadataTreeNodePropertiesProvider`1<AttributeFlagNode> {
    protected virtual MetadataTreeNodeGridData<AttributeFlagNode> CreateGridData(AttributeFlagNode node);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.PropertiesProviders.AttributeOptionNodePropertiesProvider : MetadataTreeNodePropertiesProvider`1<AttributeOptionNode> {
    protected virtual MetadataTreeNodeGridData<AttributeOptionNode> CreateGridData(AttributeOptionNode node);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.PropertiesProviders.AttributeOptionsMaskNodePropertiesProvider : MetadataTreeNodePropertiesProvider`1<AttributeOptionsMaskNode> {
    protected virtual MetadataTreeNodeGridData<AttributeOptionsMaskNode> CreateGridData(AttributeOptionsMaskNode node);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.PropertiesProviders.BinaryStructNodePropertiesProvider : MetadataTreeNodePropertiesProvider`1<BinaryStructNode> {
    protected virtual MetadataTreeNodeGridData<BinaryStructNode> CreateGridData(BinaryStructNode node);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.PropertiesProviders.BinaryStructRowNodePropertiesProvider : MetadataTreeNodePropertiesProvider`1<BinaryStructRowNode> {
    protected virtual MetadataTreeNodeGridData<BinaryStructRowNode> CreateGridData(BinaryStructRowNode node);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.PropertiesProviders.HeadersFolderNodePropertiesProvider : MetadataTreeNodePropertiesProvider`1<HeadersFolderNode> {
    protected virtual MetadataTreeNodeGridData<HeadersFolderNode> CreateGridData(HeadersFolderNode node);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.PropertiesProviders.MetadataDeltaTreeFolderNodePropertiesProvider : MetadataTreeNodePropertiesProvider`1<MetadataDeltaTreeFolderNode> {
    protected virtual MetadataTreeNodeGridData<MetadataDeltaTreeFolderNode> CreateGridData(MetadataDeltaTreeFolderNode node);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.PropertiesProviders.MetadataHeapNodePropertiesProvider : MetadataTreeNodePropertiesProvider`1<MetadataHeapNode> {
    protected virtual MetadataTreeNodeGridData<MetadataHeapNode> CreateGridData(MetadataHeapNode node);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.PropertiesProviders.MetadataItemNodePropertiesProvider : MetadataTreeNodePropertiesProvider`1<MetadataItemNode> {
    protected virtual MetadataTreeNodeGridData<MetadataItemNode> CreateGridData(MetadataItemNode node);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.PropertiesProviders.MetadataTableNodePropertiesProvider : MetadataTreeNodePropertiesProvider`1<MetadataTableNode> {
    protected virtual MetadataTreeNodeGridData<MetadataTableNode> CreateGridData(MetadataTableNode node);
}
public abstract class JetBrains.ReSharper.ExternalSources.MetadataTree.PropertiesProviders.MetadataTreeNodePropertiesProvider`1 : object {
    public sealed virtual bool IsApplicable(IExplorerNode explorerNode);
    public sealed virtual GridData GetProperties(IExplorerNode explorerNode);
    protected abstract virtual MetadataTreeNodeGridData<TMetadataTreeNode> CreateGridData(TMetadataTreeNode node);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.PropertiesProviders.PortablePdbMetadataTreeFolderNodePropertiesProvider : MetadataTreeNodePropertiesProvider`1<PortablePdbMetadataTreeFolderNode> {
    protected virtual MetadataTreeNodeGridData<PortablePdbMetadataTreeFolderNode> CreateGridData(PortablePdbMetadataTreeFolderNode node);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.ExternalSources.MetadataTree.ZoneMarker : object {
}
[ShellComponentAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.MetadataViewer.DecompiledSourceLegalNotice : object {
    private ISettingsStore mySettingsStore;
    public DecompiledSourceLegalNotice(ISettingsStore settingsStore);
    public virtual bool CheckAndAskUser();
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataViewer.DecompiledSourceLegalNoticeSettingsUpgrader : object {
    public sealed virtual void Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.ExternalSources.MetadataViewer.DecompiledSourcesExternalSourcesProvider : DecompilerBasedExternalSourcesProvider {
    private DecompiledSourceLegalNotice myLegalNotice;
    [CompilerGeneratedAttribute]
private bool <UseDiffTranslatorOptions>k__BackingField;
    internal bool UseDiffTranslatorOptions { get; internal set; }
    public DecompiledSourcesExternalSourcesProvider(Lifetime lifetime, INavigationDecompilationCache navigationDecompilationCache, ILanguageManager languageManager, TranslatorOptions translatorOptions, ISettingsStore settingsStore, INavigationModeProvider navigationModeProvider, DecompiledSourceLegalNotice legalNotice);
    public virtual bool IsApplicableForNavigation(CompiledElementNavigationInfo navigationInfo, bool ignoreOptions);
    public virtual bool IsPreferredForNavigation();
    public virtual ExtendedDebugData GetTypeDebugData(ICompiledElement type, ITaskExecutor taskExecutor);
    public virtual ExtendedDebugData GetSourceDebugData(FileSystemPath file);
    public virtual bool IsPreferredForGettingDebugData(FileSystemPath file);
    private bool InCacheDirectory(FileSystemPath file);
    protected virtual bool CheckOptions(MetadataTranslatorOptions translatorOptions);
    public virtual MetadataTranslatorOptions GetTranslatorOptions();
    [CompilerGeneratedAttribute]
internal bool get_UseDiffTranslatorOptions();
    [CompilerGeneratedAttribute]
internal void set_UseDiffTranslatorOptions(bool value);
    protected virtual Tuple`2<PsiLanguageType, string> GetLanguage();
    public static bool IsDecompilerAvailable();
}
public abstract class JetBrains.ReSharper.ExternalSources.MetadataViewer.DecompilerBasedExternalSourcesProvider : ExternalSourcesProviderBase {
    protected INavigationDecompilationCache NavigationDecompilationCache;
    private ILanguageManager myLanguageManager;
    private TranslatorOptions myTranslatorOptions;
    private INavigationModeProvider myNavigationModeProvider;
    private IContextBoundSettingsStoreLive myContextBoundSettings;
    protected DecompilerBasedExternalSourcesProvider(string presentableShortName, string id, int priority, Lifetime lifetime, INavigationDecompilationCache navigationDecompilationCache, ILanguageManager languageManager, TranslatorOptions translatorOptions, ISettingsStore settingsStore, INavigationModeProvider navigationModeProvider);
    public virtual ExternalSourcesMapping MapFileToAssembly(FileSystemPath file);
    public virtual IReadOnlyCollection`1<ExternalSourcesMapping> NavigateToSources(ICompiledElement compiledElement, ITaskExecutor taskExecutor);
    [CanBeNullAttribute]
protected DecompilationCacheItem GetCacheItem(ICompiledElement compiledElement, ITaskExecutor taskExecutor, string taskName, Func`1<Exception> canceledExceptionFactory);
    protected abstract virtual bool CheckOptions(MetadataTranslatorOptions translatorOptions);
    protected abstract virtual Tuple`2<PsiLanguageType, string> GetLanguage();
    public DecompilationCacheItem PresentType(IProgressIndicator indicator, ITypeElement typeElement, PsiLanguageType targetLanguage, string fileName, MetadataTranslatorOptions translatorOptions, IDictionary`2<string, string> properties);
    public IDictionary`2<string, string> GetFlags(ITypeElement typeElement, PsiLanguageType languageType);
    public virtual MetadataTranslatorOptions GetTranslatorOptions();
    protected bool GetDecompileMethodBodiesValue();
    protected bool IsSourcesNavigationMode();
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.ExternalSource.ExternalSourcesSettings", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "DecompilerOptionsSettingDescription")]
public class JetBrains.ReSharper.ExternalSources.MetadataViewer.DecompilerSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "ReorderMembersAccordingToCurrentOptionsSettingDescription")]
public bool ReorderMembers;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "ShowXMLDocInDecompiledCodeSettingDescription")]
public bool ShowXmlDoc;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "DecompileMethodBodiesSettingDescription")]
public bool DecompileMethodBodies;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "DecompileVeryLongMethodsSettingDescription")]
public bool DecompileLongMethods;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "DecompileProtectedAssembliesSettingDescription")]
public bool DecompileProtectedAssemblies;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "ShowCodeGeneratedByCompilerSettingDescription")]
public bool ShowCompilerGeneratedCode;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "ShowMetadataTokenValuesSettingDescription")]
public bool ShowMetadataTokenValues;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "ShowILCodeInCommentsSettingDescription")]
public bool ShowIlCodeInComments;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "IndentStyleWhitespacesOrTabsSettingDescription")]
public IndentStyle IndentStyle;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "IndentSizeSettingDescription")]
public int IndentSize;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "PlaceOpenBraceOnNewLineSettingDescription")]
public bool PlaceOpenBraceOnNewLine;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "UseExpressionBodiedMembersSettingDescription")]
public bool UseExpressionBodiedMembers;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "UseTernaryConditionalOperatorsSettingDescription")]
public bool UseConditionalOperators;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "UseNullConditionalOperatorsAndSettingDescription")]
public bool UseNullConditionalOperators;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "UseNullCoalescingOperatorsSettingDescription")]
public bool UseNullCoalescingOperators;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "UseWithExpressionsSettingDescription")]
public bool UseWithExpressions;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.ExternalSources.Resources.Strings", "DecompilerLegalNoticeIsAcceptedByUserSettingDescription")]
public bool DecompilerLegalNoticeAccepted;
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataViewer.DecompilerSettingsConverter : object {
    public sealed virtual void Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataViewer.DecompilerSettingsDumper : object {
    private ISettingsStore mySettingsStore;
    private ISolution mySolution;
    public DecompilerSettingsDumper(ISettingsStore settingsStore, ISolution solution);
    public sealed virtual void Dump(TextWriter sw);
}
public static class JetBrains.ReSharper.ExternalSources.MetadataViewer.MetadataViewerConstants : object {
    public static string Id;
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.ExternalSources.MetadataViewer.MetadataViewerExternalSourcesProvider : DecompilerBasedExternalSourcesProvider {
    public MetadataViewerExternalSourcesProvider(Lifetime lifetime, INavigationDecompilationCache navigationDecompilationCache, ILanguageManager languageManager, TranslatorOptions translatorOptions, ISettingsStore settingsStore, INavigationModeProvider navigationModeProvider);
    protected virtual bool CheckOptions(MetadataTranslatorOptions translatorOptions);
    protected virtual Tuple`2<PsiLanguageType, string> GetLanguage();
    public virtual MetadataTranslatorOptions GetTranslatorOptions();
    public virtual bool IsApplicableForNavigation(CompiledElementNavigationInfo navigationInfo, bool ignoreOptions);
    public virtual bool IsPreferredForNavigation();
    public virtual IReadOnlyCollection`1<ExternalSourcesMapping> NavigateToSources(CompiledElementNavigationInfo navigationInfo, ITaskExecutor taskExecutor);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.ExternalSources.MetadataViewer.MetadataViewerTextControlsUpdater : object {
    private ISolution mySolution;
    private TextControlManager myTextControlManager;
    private INavigationDecompilationCache myNavigationDecompilationCache;
    private AssemblyInfoDecompilationHelper myAssemblyInfoDecompilationHelper;
    private IPsiModules myPsiModules;
    private IExternalSourcesMappingChangeManager myMappingChangeManager;
    private GroupingEvent myUpdateEvent;
    private ITaskExecutor myTaskExecutor;
    private IPsiFiles myPsiFiles;
    private ExternalSourcesActivation myExternalSourcesActivation;
    private ILanguages myLanguages;
    public MetadataViewerTextControlsUpdater(Lifetime lifetime, IShellLocks threading, IEnumerable`1<DecompilerBasedExternalSourcesProvider> externalSourcesProviders, ISolution solution, UITaskExecutor uiTaskExecutor, TextControlManager textControlManager, INavigationDecompilationCache navigationDecompilationCache, AssemblyInfoDecompilationHelper assemblyInfoDecompilationHelper, IPsiModules psiModules, ChangeManager changeManager, ISettingsStore settingsStore, IExternalSourcesMappingChangeManager mappingChangeManager, IPsiFiles psiFiles, ExternalSourcesActivation externalSourcesActivation, ILanguages languages);
    private void QueueUpdate();
    private void UpdateMetadataView(DecompilerBasedExternalSourcesProvider externalSourcesProvider);
    private IDictionary`2<ITextControl, FileSystemPath> GetOpenedMiscFiles();
    public sealed virtual object Execute(IChangeMap changeMap);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "DecompiledSourcesActionText")]
public class JetBrains.ReSharper.ExternalSources.MetadataViewer.Navigation.NavigateToDecompiledSourcesActionHandler : ContextNavigationActionBase`1<NavigateToDecompiledSourcesProvider> {
}
[ContextNavigationProviderAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataViewer.Navigation.NavigateToDecompiledSourcesProvider : SpecificExternalSourcesContextNavigationProviderBase`1<NavigateToDecompiledSourcesSolutionProvider> {
    public sealed virtual IEnumerable`1<ContextNavigation> CreateWorkflow(IDataContext dataContext);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.MetadataViewer.Navigation.NavigateToDecompiledSourcesSolutionProvider : SpecificExternalSourcesSolutionContextNavigationProviderBase {
    private DecompiledSourcesExternalSourcesProvider myExternalSourcesProvider;
    protected IExternalSourcesProvider ExternalSourcesProvider { get; }
    public string Title { get; }
    public Type Action { get; }
    public NavigationActionGroup ContextNavigationGroup { get; }
    public NavigateToDecompiledSourcesSolutionProvider(ExternalSourcesPointsProvider externalSourcesPointsProvider, NavigationManager navigationManager, DecompiledSourcesExternalSourcesProvider externalSourcesProvider, INavigationModeProvider navigationModeProvider);
    protected virtual IExternalSourcesProvider get_ExternalSourcesProvider();
    public virtual string get_Title();
    public virtual Type get_Action();
    public virtual NavigationActionGroup get_ContextNavigationGroup();
    public virtual bool IsAvailable(IDataContext context);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "MetadataViewActionText")]
public class JetBrains.ReSharper.ExternalSources.MetadataViewer.Navigation.NavigateToMetadataViewActionHandler : ContextNavigationActionBase`1<NavigateToMetadataViewProvider> {
}
[ContextNavigationProviderAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.MetadataViewer.Navigation.NavigateToMetadataViewProvider : SpecificExternalSourcesContextNavigationProviderBase`1<NavigateToMetadataViewSolutionProvider> {
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.MetadataViewer.Navigation.NavigateToMetadataViewSolutionProvider : SpecificExternalSourcesSolutionContextNavigationProviderBase {
    private MetadataViewerExternalSourcesProvider myExternalSourcesProvider;
    protected IExternalSourcesProvider ExternalSourcesProvider { get; }
    public string Title { get; }
    public Type Action { get; }
    public NavigationActionGroup ContextNavigationGroup { get; }
    public NavigateToMetadataViewSolutionProvider(ExternalSourcesPointsProvider externalSourcesPointsProvider, NavigationManager navigationManager, MetadataViewerExternalSourcesProvider externalSourcesProvider, INavigationModeProvider navigationModeProvider);
    protected virtual IExternalSourcesProvider get_ExternalSourcesProvider();
    public virtual string get_Title();
    public virtual Type get_Action();
    public virtual NavigationActionGroup get_ContextNavigationGroup();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.ExternalSources.MetadataViewer.TranslatorOptions : object {
    protected IContextBoundSettingsStoreLive myContextBoundSettings;
    private GroupingEvent myUpdateOptionsEvent;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <DecompileProtectedAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <OptionsChanged>k__BackingField;
    protected IProperty`1<bool> DecompileProtectedAssemblies { get; }
    public ISimpleSignal OptionsChanged { get; }
    public TranslatorOptions(Lifetime lifetime, ISettingsStore settingsStore, IShellLocks shellLocks);
    [CompilerGeneratedAttribute]
protected IProperty`1<bool> get_DecompileProtectedAssemblies();
    protected void FireOptionsChanged();
    public virtual bool GetDecompileMethodBodiesValue(IContextBoundSettingsStoreLive contextBoundSettings);
    public virtual MetadataTranslatorOptions GetOptions();
    [CompilerGeneratedAttribute]
public ISimpleSignal get_OptionsChanged();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.Navigation.CompiledElementIconProvider : object {
    private Dictionary`2<OccurrenceKind, IconId> myIconsMap;
    public sealed virtual IconId GetImageId(OccurrenceKind occurrenceKind);
    public sealed virtual int GetPriority(OccurrenceKind occurrenceKind);
}
public class JetBrains.ReSharper.ExternalSources.Navigation.CompiledElementNavigationPoint : DeclaredElementNavigationPoint {
    public CompiledElementNavigationPoint(ICompiledElement compiledElement);
    protected virtual void AppendContainer(RichText text, ITypeMember typeMember, PsiLanguageType language);
}
[SolutionComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.ExternalSources.Navigation.CompiledElementOccurrenceKindProvider : DeclaredElementOccurrenceKindProvider {
    private static IEnumerable`1<OccurrenceKind> ourCachedKinds;
    public virtual ICollection`1<OccurrenceKind> GetOccurrenceKinds(IOccurrence occurrence);
    public virtual IEnumerable`1<OccurrenceKind> GetAllPossibleOccurrenceKinds();
}
public class JetBrains.ReSharper.ExternalSources.Navigation.CompiledElementsDiffNavigationPoint : object {
    [NotNullAttribute]
private ICompiledElement myOld;
    [NotNullAttribute]
private ICompiledElement myNew;
    public CompiledElementsDiffNavigationPoint(ICompiledElement old, ICompiledElement new);
    public sealed virtual Task`1<bool> Navigate(NavigationOptions options);
    public sealed virtual IconId GetPresentationImage();
    public sealed virtual RichText GetPresentationText();
    public sealed virtual RichText GetSecondaryPresentationText();
}
public static class JetBrains.ReSharper.ExternalSources.Navigation.CompiledOccurrenceKinds : object {
    [NotNullAttribute]
public static OccurrenceKind InCompiledMethod;
    [NotNullAttribute]
public static OccurrenceKind InCompiledParameter;
    [NotNullAttribute]
public static OccurrenceKind InCompiledField;
    [NotNullAttribute]
public static OccurrenceKind InCompiledConstructor;
    [NotNullAttribute]
public static OccurrenceKind InCompiledProperty;
    [NotNullAttribute]
public static OccurrenceKind InCompiledEvent;
    public static IEnumerable`1<OccurrenceKind> AllCompiledKinds;
    private static CompiledOccurrenceKinds();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.Navigation.DiffNavigator : object {
    private FileSystemPathDiffNavigator myFileSystemPathDiffNavigator;
    private ExternalSourcesPointsProvider myExternalSourcesPointsProvider;
    private DecompiledSourcesExternalSourcesProvider myDecompiledSourcesExternalSourcesProvider;
    private IShellLocks myShellLocks;
    public DiffNavigator(FileSystemPathDiffNavigator fileSystemPathDiffNavigator, ExternalSourcesPointsProvider externalSourcesPointsProvider, DecompiledSourcesExternalSourcesProvider decompiledSourcesExternalSourcesProvider, IShellLocks shellLocks);
    internal IEnumerable`1<INavigationPoint> CreateFilesDiffNavigationPoints(TreeModelNode target, Func`2<TNode, FileSystemPathNavigationPoint> createFileNavigationPoint);
    internal Task`1<bool> OpenDiff(ICompiledElement oldCompiledElement, ICompiledElement newCompiledElement, NavigationOptions options);
    [CanBeNullAttribute]
private FileSystemPathNavigationPoint GetDecompiledSourceNavigationPoint(ICompiledElement compiledElement);
}
public class JetBrains.ReSharper.ExternalSources.Navigation.FilesDiffNavigationPoint : object {
    [NotNullAttribute]
private FileSystemPathNavigationPoint myOld;
    [NotNullAttribute]
private FileSystemPathNavigationPoint myNew;
    private FileSystemPathDiffNavigator myDiffNavigator;
    public FilesDiffNavigationPoint(FileSystemPathNavigationPoint old, FileSystemPathNavigationPoint new, FileSystemPathDiffNavigator diffNavigator);
    public sealed virtual Task`1<bool> Navigate(NavigationOptions options);
    public sealed virtual IconId GetPresentationImage();
    public sealed virtual RichText GetPresentationText();
    public sealed virtual RichText GetSecondaryPresentationText();
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.Navigation.Goto.GotoMetadataTokenProvider : object {
    public Func`2<MatcherScore, int> ItemsPriorityFunc { get; }
    public sealed virtual bool IsApplicable(INavigationScope scope, GotoContext gotoContext, IIdentifierMatcher matcher);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.ExternalSources.Navigation.Goto.GotoMetadataTokenProvider/<GetNextChainedScopes>d__1")]
public sealed virtual IEnumerable`1<ChainedNavigationItemData> GetNextChainedScopes(GotoContext gotoContext, IIdentifierMatcher matcher, INavigationScope containingScope);
    public sealed virtual IEnumerable`1<MatchingInfo> FindMatchingInfos(IIdentifierMatcher matcher, INavigationScope scope, GotoContext gotoContext);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.ExternalSources.Navigation.Goto.GotoMetadataTokenProvider/<GetOccurrencesByMatchingInfo>d__3")]
public sealed virtual IEnumerable`1<IOccurrence> GetOccurrencesByMatchingInfo(MatchingInfo navigationInfo, INavigationScope scope, GotoContext gotoContext);
    public sealed virtual Func`2<MatcherScore, int> get_ItemsPriorityFunc();
    private TokenInAssemblyList GetTokenInAssemblyList(IIdentifierMatcher matcher, INavigationScope scope);
    private MetadataToken TryGetMetadataToken(string s);
}
[ShellFeaturePartAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.ExternalSources.Navigation.Goto.GotoStringProvider : object {
    private static ILogger ourLog;
    public Func`2<MatcherScore, int> ItemsPriorityFunc { get; }
    private static GotoStringProvider();
    public sealed virtual bool IsApplicable(INavigationScope scope, GotoContext gotoContext, IIdentifierMatcher matcher);
    public sealed virtual IEnumerable`1<MatchingInfo> FindMatchingInfos(IIdentifierMatcher matcher, INavigationScope scope, GotoContext gotoContext);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.ExternalSources.Navigation.Goto.GotoStringProvider/<GetOccurrencesByMatchingInfo>d__3")]
public sealed virtual IEnumerable`1<IOccurrence> GetOccurrencesByMatchingInfo(MatchingInfo navigationInfo, INavigationScope scope, GotoContext gotoContext);
    public sealed virtual Func`2<MatcherScore, int> get_ItemsPriorityFunc();
}
internal class JetBrains.ReSharper.ExternalSources.Navigation.Goto.IndexOfStringMatcher : object {
    private string mySubstring;
    public IndexOfStringMatcher(string substring);
    public bool Matches(string text);
    public MatchingInfo CreateMatchingInfo(string text);
}
internal class JetBrains.ReSharper.ExternalSources.Navigation.Goto.MetadataTokenNavigationScope : object {
    [CompilerGeneratedAttribute]
private TokenAssemblyId <TokenAssemblyId>k__BackingField;
    [CompilerGeneratedAttribute]
private LibrariesFlag <ExtendedSearchFlag>k__BackingField;
    [CompilerGeneratedAttribute]
private INavigationProviderFilter <Filter>k__BackingField;
    public TokenAssemblyId TokenAssemblyId { get; }
    public LibrariesFlag ExtendedSearchFlag { get; public set; }
    public INavigationProviderFilter Filter { get; }
    public MetadataTokenNavigationScope(TokenAssemblyId tokenAssemblyId, LibrariesFlag extendedSearchFlag, INavigationProviderFilter filter);
    [CompilerGeneratedAttribute]
public TokenAssemblyId get_TokenAssemblyId();
    [CompilerGeneratedAttribute]
public sealed virtual LibrariesFlag get_ExtendedSearchFlag();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExtendedSearchFlag(LibrariesFlag value);
    public sealed virtual ISolution GetSolution();
    [CompilerGeneratedAttribute]
public sealed virtual INavigationProviderFilter get_Filter();
}
public static class JetBrains.ReSharper.ExternalSources.Navigation.Goto.MetadataTokenUtils : object {
    public static bool TokenIsInAssembly(MetadataToken token, IMetadataStreamsAccess streams);
    public static bool LoadingReferencedAssembliesNeeded(MetadataToken token);
    [CanBeNullAttribute]
public static ICompiledElement GetCompiledElementByToken(MetadataToken token, IAssemblyPsiModule assemblyPsiModule, IMetadataAssembly metadataAssembly);
    public static ICompiledElement GetConstantStringParentCompiledElementByToken(MetadataToken token, IAssemblyPsiModule assemblyPsiModule, IMetadataAssembly metadataAssembly);
    private static bool ElementHasToken(ICompiledElement element, MetadataToken token);
    [CanBeNullAttribute]
private static ITypeElement GetTypeElementByToken(MetadataToken typeToken, IAssemblyPsiModule assemblyPsiModule, IMetadataAssembly metadataAssembly);
    [CanBeNullAttribute]
private static ICompiledElement GetMemberByToken(MetadataToken memberToken, ITypeElement declaringType);
    [CanBeNullAttribute]
private static ICompiledElement GetMemberByToken(MetadataToken memberToken, MetadataToken declaringTypeToken, IAssemblyPsiModule assemblyPsiModule, IMetadataAssembly metadataAssembly);
    [CanBeNullAttribute]
private static ITableReader GetTableRowReader(MetadataToken indexToken, IMetadataAssembly metadataAssembly);
    [CanBeNullAttribute]
private static ICompiledElement GetElementFromTableRow(MetadataToken indexToken, int offset, MetadataTokenType elementType, IAssemblyPsiModule assemblyPsiModule, IMetadataAssembly metadataAssembly);
    [CanBeNullAttribute]
private static ICompiledElement GetCorrespondingTypeFromTableRow(MetadataToken indexToken, IAssemblyPsiModule assemblyPsiModule, IMetadataAssembly metadataAssembly);
    [CanBeNullAttribute]
private static IMetadataTypeInfo GetMainTypeInfo(IMetadataType type);
    [CanBeNullAttribute]
private static string GetExportedTypeClrName(MetadataToken exportedTypeToken, IMetadataAssembly metadataAssembly);
}
internal class JetBrains.ReSharper.ExternalSources.Navigation.Goto.StringMatcher : object {
    private IIdentifierMatcher myIdentifierMatcher;
    private bool mySubstringMatcher;
    private string mySubstring;
    public StringMatcher(IIdentifierMatcher identifierMatcher);
    public bool Matches(string text);
    public MatchingInfo CreateMatchingInfo(string text);
}
internal class JetBrains.ReSharper.ExternalSources.Navigation.Goto.TokenAssemblyId : Tuple`3<MetadataToken, IAssemblyPsiModule, AssemblyId> {
    public TokenAssemblyId(MetadataToken a, IAssemblyPsiModule b, AssemblyId c);
}
public class JetBrains.ReSharper.ExternalSources.Navigation.StringInCompiledElementNavigationPoint : CompiledElementNavigationPoint {
    private CompiledElementNavigationInfo myInfo;
    public StringInCompiledElementNavigationPoint(CompiledElementNavigationInfo info);
    public virtual Task`1<bool> Navigate(NavigationOptions options);
    protected virtual void AppendContainer(RichText text, ITypeMember typeMember, PsiLanguageType language);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.ExternalSources.NetSDK.NetCoreSDKScanner : ItemScannerBase`1<NetSDKItem> {
    private VirtualFileSystemPath[] myVirtualFileSystemPaths;
    public NetCoreSDKScanner(Lifetime lifetime, ProductSettingsLocation settingsLocation, IShellLocks shellLocks);
    protected virtual NetSDKItem ReadItem(BinaryReader reader);
    protected virtual void WriteItem(BinaryWriter writer, NetSDKItem item);
    protected virtual NetSDKItem[] Scan();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.ExternalSources.NetSDK.NetCoreSDKScanner/<Collect>d__5")]
private IEnumerable`1<NetSDKItem> Collect(VirtualFileSystemPath gacPath);
    public void SetPaths(VirtualFileSystemPath[] virtualFileSystemPaths);
}
public class JetBrains.ReSharper.ExternalSources.NetSDK.NetSDKItem : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<NetSDKItem> <Children>k__BackingField;
    public string Name { get; }
    public Version Version { get; }
    public string Location { get; }
    public ICollection`1<NetSDKItem> Children { get; public set; }
    public NetSDKItem(string name, string version, string location);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<NetSDKItem> get_Children();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Children(ICollection`1<NetSDKItem> value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal static NetSDKItem Read(BinaryReader reader);
    internal void Write(BinaryWriter writer);
}
public class JetBrains.ReSharper.ExternalSources.NuGet.NuGetPackageItem : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Authors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SingleLineSummary>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<NuGetPackageItem> <Children>k__BackingField;
    public string Id { get; }
    public NuGetVersion Version { get; }
    public string Location { get; }
    public string Authors { get; }
    public string Summary { get; }
    public string SingleLineSummary { get; }
    public ICollection`1<NuGetPackageItem> Children { get; public set; }
    public NuGetPackageItem(string id, NuGetVersion version, string location, string authors, string summary);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public NuGetVersion get_Version();
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
public string get_Authors();
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
public string get_SingleLineSummary();
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<NuGetPackageItem> get_Children();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Children(ICollection`1<NuGetPackageItem> value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal static NuGetPackageItem Read(BinaryReader reader);
    internal void Write(BinaryWriter writer);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.ExternalSources.NuGet.NuGetPackagesCacheAssembliesScanner : ItemScannerBase`1<FileSystemPath> {
    private NuGetPackagesCacheStructure myNuGetPackagesCacheStructure;
    public NuGetPackagesCacheAssembliesScanner(Lifetime lifetime, ProductSettingsLocation settingsLocation, IShellLocks shellLocks, NuGetPackagesCacheStructure nuGetPackagesCacheStructure);
    protected virtual FileSystemPath[] Scan();
    protected virtual FileSystemPath ReadItem(BinaryReader reader);
    protected virtual void WriteItem(BinaryWriter writer, FileSystemPath item);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.NuGet.NuGetPackagesCacheAssemblyByPdbProvider : NuGetPackagesCacheAssemblyByPdbDefaultProvider {
    private NuGetPackagesCacheAssembliesScanner myNuGetPackagesCacheAssembliesScanner;
    public NuGetPackagesCacheAssemblyByPdbProvider(AssemblyInfoDatabase assemblyInfoDataBase, NuGetPackagesCacheAssembliesScanner nuGetPackagesCacheAssembliesScanner);
    protected virtual IEnumerable`1<FileSystemPath> GetAssembliesWithName(string name);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.ExternalSources.NuGet.NuGetPackagesCacheScanner : ItemScannerBase`1<NuGetPackageItem> {
    private ILogger myLogger;
    private NuGetPackagesCacheStructure myNuGetPackagesCacheStructure;
    public NuGetPackagesCacheScanner(Lifetime lifetime, ProductSettingsLocation settingsLocation, IShellLocks shellLocks, ILogger logger, NuGetPackagesCacheStructure nuGetPackagesCacheStructure);
    protected virtual NuGetPackageItem[] Scan();
    protected virtual NuGetPackageItem ReadItem(BinaryReader reader);
    protected virtual void WriteItem(BinaryWriter writer, NuGetPackageItem item);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.NuGet.NuGetPackagesCacheStructure : object {
    private FileSystemPath myGlobalPackagesCacheFolder;
    public FileSystemPath GlobalPackagesCacheFolder { get; }
    public FileSystemPath get_GlobalPackagesCacheFolder();
    protected void SetGlobalPackagesCacheFolder(FileSystemPath globalPackagesCacheFolder);
    public bool InPackagesCache(FileSystemPath path);
    public bool IsPackageFolder(FileSystemPath folder);
    [CanBeNullAttribute]
public FileSystemPath GetNupkgPath(FileSystemPath packageFolder);
    [CanBeNullAttribute]
public string GetNupkgFileName(FileSystemPath packageFolder);
    [CanBeNullAttribute]
private static string GetNupkgFileName(string id, string version);
    [CanBeNullAttribute]
public static FileSystemPath GetNuspecPath(string packageId, FileSystemPath packageFolder);
    [CanBeNullAttribute]
public FileSystemPath GetNuspecPath(FileSystemPath packageFolder);
    [CanBeNullAttribute]
private static string GetNuspecFileName(string id);
    [CanBeNullAttribute]
public NuspecSource GetNuspecSource(FileSystemPath packageFolder);
    internal static string GetPackageId(FileSystemPath packageFolder);
    internal static string GetPackageVersion(FileSystemPath packageFolder);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.ExternalSources.NuGet.NuGetPackagesCacheStructure/<GetAllPackages>d__15")]
internal IEnumerable`1<PackageInNuGetPackages> GetAllPackages();
}
public class JetBrains.ReSharper.ExternalSources.NuGet.NuspecSource : object {
    [CompilerGeneratedAttribute]
private FileSystemPath <NupkgPath>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <NuspecPath>k__BackingField;
    [CanBeNullAttribute]
public FileSystemPath NupkgPath { get; }
    [CanBeNullAttribute]
public FileSystemPath NuspecPath { get; }
    public NuspecSource(FileSystemPath nupkgPath, FileSystemPath nuspecPath);
    [CompilerGeneratedAttribute]
public FileSystemPath get_NupkgPath();
    [CompilerGeneratedAttribute]
public FileSystemPath get_NuspecPath();
    public void ReadNuspec(Action`1<NuspecReader> read);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.OpenFromGac.GacAssemblyByPdbProvider : GacAssemblyByPdbDefaultProvider {
    private GacScanner myGacScanner;
    public GacAssemblyByPdbProvider(AssemblyInfoDatabase assemblyInfoDataBase, GacScanner gacScanner);
    protected virtual IEnumerable`1<FileSystemPath> GetAssembliesWithName(string name);
}
public class JetBrains.ReSharper.ExternalSources.OpenFromGac.GacItem : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublicKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<GacItem> <Children>k__BackingField;
    public string Name { get; }
    public Version Version { get; }
    public string PublicKey { get; }
    public string Location { get; }
    public ICollection`1<GacItem> Children { get; public set; }
    public GacItem(string name, string version, string publicKey, string location);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
public string get_PublicKey();
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<GacItem> get_Children();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Children(ICollection`1<GacItem> value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal static GacItem Read(BinaryReader reader);
    internal void Write(BinaryWriter writer);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.OpenFromGac.GacScanner : ItemScannerBase`1<GacItem> {
    private static Regex ourVersionRegex;
    private static Regex ourVersion40Regex;
    public GacScanner(Lifetime lifetime, ProductSettingsLocation settingsLocation, IShellLocks shellLocks);
    private static GacScanner();
    protected virtual GacItem ReadItem(BinaryReader reader);
    protected virtual void WriteItem(BinaryWriter writer, GacItem item);
    protected virtual GacItem[] Scan();
    private bool ParseVersion(string str, String& version, String& publickey);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.ExternalSources.OpenFromGac.GacScanner/<Collect>d__7")]
private IEnumerable`1<GacItem> Collect(VirtualFileSystemPath gacPath);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "AddSourceLinkToPortablePDB_ActionText")]
public class JetBrains.ReSharper.ExternalSources.Pdb.Internal.Actions.AddSourceLinkToPortablePdbActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionGroupAttribute("2", "10")]
public class JetBrains.ReSharper.ExternalSources.Pdb.Internal.Actions.InsertIntoInternalToolsMenuAnchoredActionGroup : object {
    public InsertIntoInternalToolsMenuAnchoredActionGroup(PatchPdbSignatureAndAgeActionHandler patchPdbSignatureAndAgeAction, AddSourceLinkToPortablePdbActionHandler addSourceLinkToPortablePdbAction, ShowPdbContentActionHandler showPdbContentAction);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "PatchPdbBindWithAssembly_ActionText")]
public class JetBrains.ReSharper.ExternalSources.Pdb.Internal.Actions.PatchPdbSignatureAndAgeActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.ExternalSources.Pdb.Internal.Actions.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.ExternalSources.Pdb.Internal.ZoneMarker : object {
}
public interface JetBrains.ReSharper.ExternalSources.Pdb.IPdbAdvancedOptionsDialogExecutor {
    public abstract virtual void ShowDialog(ImmutableArray`1<FolderSubstitution> folderSubstitutions, Action`1<ImmutableArray`1<FolderSubstitution>> submit);
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "ShowPDBContentActionText")]
public class JetBrains.ReSharper.ExternalSources.Pdb.Navigation.Actions.ShowPdbContentActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.ExternalSources.Pdb.Navigation.Actions.ZoneMarker : object {
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "SourcesFromSymbolFilesActionText")]
public class JetBrains.ReSharper.ExternalSources.Pdb.Navigation.NavigateToPdbActionHandler : ContextNavigationActionBase`1<NavigateToPdbProvider> {
}
[ContextNavigationProviderAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.Pdb.Navigation.NavigateToPdbProvider : SpecificExternalSourcesContextNavigationProviderBase`1<NavigateToPdbSolutionProvider> {
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.ExternalSources.Pdb.Navigation.NavigateToPdbSolutionProvider : SpecificExternalSourcesSolutionContextNavigationProviderBase {
    private PdbExternalSourcesProvider myPdbExternalSourcesProvider;
    private ITooltipManager myTooltipManager;
    private IProperty`1<bool> myDownloadProperty;
    protected IExternalSourcesProvider ExternalSourcesProvider { get; }
    public string Title { get; }
    public Type Action { get; }
    public NavigationActionGroup ContextNavigationGroup { get; }
    public NavigateToPdbSolutionProvider(Lifetime lifetime, ExternalSourcesPointsProvider externalSourcesPointsProvider, NavigationManager navigationManager, ISettingsStore settingsStore, INavigationModeProvider navigationModeProvider, PdbExternalSourcesProvider pdbExternalSourcesProvider, ITooltipManager tooltipManager);
    protected virtual IExternalSourcesProvider get_ExternalSourcesProvider();
    protected virtual void SetSpecificOptions(Lifetime navigationLifetime);
    protected virtual void PresentEmptyResult(IDataContext context);
    protected virtual string GetLogToolWindow();
    public virtual string get_Title();
    public virtual Type get_Action();
    public virtual NavigationActionGroup get_ContextNavigationGroup();
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.Pdb.Navigation.PdbXmlNavigationProvider : object {
    private PdbXmlNavigator myPdbXmlNavigator;
    public PdbXmlNavigationProvider(PdbXmlNavigator pdbXmlNavigator);
    public sealed virtual bool IsApplicable(PdbInfo data);
    public sealed virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(PdbInfo pdbInfo);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.Pdb.Navigation.PdbXmlNavigator : object {
    private static string ourTempFolder;
    private static string PresentableName;
    private FileSystemPathNavigator myFileSystemPathNavigator;
    private PdbCache myPdbCache;
    private IPdbSpecificLogger myPdbSpecificLogger;
    public PdbXmlNavigator(FileSystemPathNavigator fileSystemPathNavigator, PdbCache pdbCache, IPdbSpecificLogger pdbSpecificLogger);
    private static PdbXmlNavigator();
    public IEnumerable`1<INavigationPoint> CreateNavigationPoints(PdbInfo pdbInfo);
    public static FileSystemPath GetTempFolder();
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.Pdb.PdbAdvancedOptionsDialogExecutorStub : object {
    public virtual void ShowDialog(ImmutableArray`1<FolderSubstitution> folderSubstitutions, Action`1<ImmutableArray`1<FolderSubstitution>> submit);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.Pdb.PdbCmdExecutionConfirmationImpl : DefaultPdbCmdExecutionConfirmation {
    private Lifetime myLifetime;
    private IThreading myMainThread;
    private ISettingsStore mySettingsStore;
    private IPdbSpecificLogger myPdbSpecificLogger;
    private IDialogHost myDialogHost;
    private Property`1<RequestResult> myRequestResult;
    private static string AllKey;
    private static int UndefinedValue;
    private static int AcceptedValue;
    private static int UnacceptedValue;
    public PdbCmdExecutionConfirmationImpl(Lifetime lifetime, IThreading mainThread, ISettingsStore settingsStore, IPdbSpecificLogger pdbSpecificLogger, IDialogHost dialogHost);
    public virtual bool RequestCommandExecutionConfirmation(string command, string pattern);
    private RequestResult GetRequestResult(string command, string pattern);
    private static BeDialog CreateDialog(Lifetime lifetime, Property`1<RequestResult> result, string command, string pattern);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.Pdb.PdbExternalSourcesProvider : ExternalSourcesProviderBase {
    private static ILogger ourLog;
    private IPdbService myPdbService;
    private IThreading myThreading;
    private PdbCache myPdbCache;
    private IPdbSpecificLogger myPdbSpecificLogger;
    private ISymbolsProvidersManager mySymbolsProvidersManager;
    private INavigationModeProvider myNavigationModeProvider;
    private OutputAssemblies myOutputAssemblies;
    private static long MinimumFileSize;
    public PdbExternalSourcesProvider(Lifetime lifetime, IPdbService pdbService, IThreading threading, PdbCache pdbCache, IPdbSpecificLogger pdbSpecificLogger, ISymbolsProvidersManager symbolsProvidersManager, INavigationModeProvider navigationModeProvider, OutputAssemblies outputAssemblies);
    private static PdbExternalSourcesProvider();
    public virtual bool IsApplicableForNavigation(CompiledElementNavigationInfo navigationInfo, bool ignoreOptions);
    public virtual bool IsPreferredForNavigation();
    public virtual ExternalSourcesMapping MapFileToAssembly(FileSystemPath file);
    public virtual IReadOnlyCollection`1<ExternalSourcesMapping> NavigateToSources(ICompiledElement compiledElement, ITaskExecutor taskExecutor);
    [CanBeNullAttribute]
private IEnumerable`1<PdbSourceFile> GetPdbSources(ICompiledElement compiledElement, ITaskExecutor taskExecutor);
    public virtual ExtendedDebugData GetTypeDebugData(ICompiledElement type, ITaskExecutor taskExecutor);
    public virtual ExtendedDebugData GetSourceDebugData(FileSystemPath file);
    public virtual bool IsPreferredForGettingDebugData(FileSystemPath file);
    [CanBeNullAttribute]
public PdbInfo GetPdbInformationForAssembly(IAssembly assembly, ITaskExecutor taskExecutor, bool shouldDownloadPdb);
    [CanBeNullAttribute]
private ExtendedDebugData GetSourcesDebugData(PdbSourceFile[] pdbSourceFiles);
    public bool TryDownloadPdb(FileSystemPath assemblyPath, ITaskExecutor taskExecutor);
    [CompilerGeneratedAttribute]
private ExternalSourcesMapping <NavigateToSources>b__13_0(PdbSourceFile x);
}
public interface JetBrains.ReSharper.ExternalSources.QuickDefinition.IQuickDefinitionElementProcessor`1 {
    [CanBeNullAttribute]
public abstract virtual TResult Process(RangeOccurrence rangeOccurrence);
    [CanBeNullAttribute]
public abstract virtual TResult Process(ProjectItemOccurrence projectItemOccurrence);
    [CanBeNullAttribute]
public abstract virtual TResult Process(ICompiledElement compiledElement, IFile psiFile, IPsiSourceFile sourceFile, FileSystemPathNavigationPoint navigationPoint, NavigationArea singleNavigationArea);
    [CanBeNullAttribute]
public abstract virtual TResult Process(IDeclaredElement declaredElement, IPsiSourceFile psiSourceFile, IDeclaration declaration, IProjectFile projectFile);
}
public abstract class JetBrains.ReSharper.ExternalSources.QuickDefinition.QuickDefinitionUtil`1 : object {
    [CanBeNullAttribute]
private IQuickDefinitionElementProcessor`1<TResult> myElementProcessor;
    [NotNullAttribute]
private IShellLocks myLocks;
    protected QuickDefinitionUtil`1(IShellLocks locks, IQuickDefinitionElementProcessor`1<TResult> elementProcessor);
    public void ConsumeDocumentPeekResults(IDeclaredElement declaredElement, IModuleReferenceResolveContext resolveContext, Action`2<TResult, IOccurrence> consumer, Lifetime lifetime);
    public void ConsumeDocumentPeekResults(SearchRequest searchRequest, IModuleReferenceResolveContext resolveContext, Action`2<TResult, IOccurrence> consumer, Lifetime lifetime);
    private static void CommitAllDocumentsOnPrimaryThread(IPsiServices psiServices);
    public void ConsumeDocumentPeekResults(ICollection`1<IOccurrence> occurrences, IModuleReferenceResolveContext resolveContext, Action`2<TResult, IOccurrence> consumer, Lifetime lifetime);
    public void ProcessOccurrence(IOccurrence sourceOccurrence, IModuleReferenceResolveContext resolveContext, Lifetime lifetime, Action`2<TResult, IOccurrence> consumer);
    [NotNullAttribute]
[MustUseReturnValueAttribute]
private ICollection`1<IOccurrence> GetOccurrences(IDeclaredElement declaredElement, IModuleReferenceResolveContext resolveContext);
    [NotNullAttribute]
[MustUseReturnValueAttribute]
private ICollection`1<IOccurrence> GetOccurrences(SearchRequest searchRequest, IModuleReferenceResolveContext resolveContext);
    private static int CompareRangeOccurrences(IOccurrence x, IOccurrence y);
    private void ProcessProjectItemOccurrence(ProjectItemOccurrence projectItemOccurrence, Action`2<TResult, IOccurrence> consumer);
    private void ProcessRangeOccurrence(RangeOccurrence rangeOccurrence, Action`2<TResult, IOccurrence> consumer);
    private void ProcessCompiledElementOccurrence(IDeclaredElementOccurrence declaredElementOccurrence, ICompiledElement compiledElement, IModuleReferenceResolveContext resolveContext, IProgressIndicator progressIndicatorWrap, Lifetime lifetime, Action`2<TResult, IOccurrence> consumer);
    private void ProcessDeclaredElementOccurrence(IDeclaredElementOccurrence declaredElementOccurrence, IDeclaredElement declaredElement, IModuleReferenceResolveContext resolveContext, Action`2<TResult, IOccurrence> consumer);
}
[OptionsPageAttribute("AssemblyDiff", "Assembly Diff", "JetBrains.ReSharper.Feature.Services.Resources.LocalHistoryThemedIcons/Diff")]
public class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.AssemblyDiffOptionsPage : AssemblyDiffOptionsPageBase {
    public AssemblyDiffOptionsPage(Lifetime lifetime, OptionsPageContext optionsPageContext, OptionsSettingsSmartContext optionsSettingsSmartContext);
}
public class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.AssemblyDiffOptionsPageBase : BeSimpleOptionsPage {
    public static string PID;
    public AssemblyDiffOptionsPageBase(Lifetime lifetime, OptionsPageContext optionsPageContext, OptionsSettingsSmartContext optionsSettingsSmartContext);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.AssemblyExplorerReferencesHierarchyNodeChecker : DefaultReferencesHierarchyNodeChecker {
    private AssemblyInfoDatabase myAssemblyInfoDataBase;
    public AssemblyExplorerReferencesHierarchyNodeChecker(AssemblyInfoDatabase assemblyInfoDataBase);
    protected virtual bool CheckDataValue(object dataValue);
    protected virtual bool LastChanceCheck(object dataValue);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.AssemblyInfoDecompilationHelper : object {
    public static string Moniker;
    private ILanguageManager myLanguageManager;
    private IPsiModules myPsiModules;
    private INavigationDecompilationCache myNavigationDecompilationCache;
    private MetadataViewerExternalSourcesProvider myMetadataViewerExternalSourcesProvider;
    public AssemblyInfoDecompilationHelper(ILanguageManager languageManager, IPsiModules psiModules, INavigationDecompilationCache navigationDecompilationCache, MetadataViewerExternalSourcesProvider metadataViewerExternalSourcesProvider);
    [CanBeNullAttribute]
public DecompilationCacheItem GetCacheItem(IAssembly assembly);
    [CanBeNullAttribute]
public DecompilationCacheItem GetCacheItem(IAssembly assembly, IAssemblyPsiModule assemblyPsiModule);
    public IDictionary`2<string, string> GetProperties();
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.CSharp.CSharpAssemblyAttributeNavigationProvider : DefaultAssemblyAttributeNavigationProvider {
    private IPsiModules myPsiModules;
    private IExternalSourcesService myExternalFiles;
    private FileSystemPathNavigator myFileSystemPathNavigator;
    private MetadataViewerExternalSourcesProvider myMetadataViewerExternalSourcesProvider;
    private AssemblyInfoDecompilationHelper myAssemblyInfoDecompilationHelper;
    public double Priority { get; }
    public CSharpAssemblyAttributeNavigationProvider(IPsiModules psiModules, FileSystemPathNavigator fileSystemPathNavigator, IExternalSourcesService externalFiles, MetadataViewerExternalSourcesProvider metadataViewerExternalSourcesProvider, AssemblyInfoDecompilationHelper assemblyInfoDecompilationHelper);
    public virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(AssemblyAttributeNavigationData navigationInfo);
    private TextRange GetTextRange(AssemblyAttributeNavigationData navigationInfo, FileSystemPath location, IAssemblyPsiModule assemblyPsiModule);
    private IEnumerable`1<IReference> GetAttributeReferences(IAttribute attributeNode);
    public double get_Priority();
}
internal static class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.CSharp.CSharpExternalSourcesNavigationUtil : object {
    internal static TextRange FindTextRangeInNavigationArea(CompiledElementNavigationInfo navigationInfo, NavigationArea dataToSearchIn, bool returnDefaultNavigation);
    private static IEnumerable`1<TextRange> GetStringNavigationRanges(ITreeNode area, CompiledStringNavigationTarget target, ITargetPosition targetPosition);
    private static bool IsNameof(IInvocationExpression invocationExpression, IReferenceExpression& nameofArgument);
    private static bool IsDllImportAttribute(IAttribute attribute);
    private static TextRange TryCreateExactTextRange(CompiledStringNavigationTarget target, IExpression expression);
    private static TextRange TryCreateExactTextRange(CompiledStringNavigationTarget target, IInvocationExpression invocationExpression);
    public static TextRange TryCreateExactTextRange(CompiledStringNavigationTarget target, ILiteralExpression literalExpression);
    private static List`1<TextRange> GetDeclaredElementTextRanges(IDeclaredElement element, ITreeNode area);
    internal static TextRange FindUsageRangeInFieldDeclaration(CompiledElementNavigationInfo navigationInfo, IFieldDeclaration fieldDeclaration);
    internal static List`1<NavigationArea> GetNavigationAreas(IDeclaredElement declaredElement, ExternalSourceFile[] files, ICompiledNavigationTarget target);
    private static void ProcessConstructor(IDeclaredElement declaredElement, List`1<ITreeNode> fileAreas, ExternalSourceFile file);
    private static ITreeNode[] GetExtendedAreas(IDeclaration declaration, ICompiledNavigationTarget target);
    internal static IEnumerable`1<ITreeNode> GetConstructorsAreas(IConstructor constructor, ExternalSourceFile file);
    internal static IEnumerable`1<ITreeNode> GetInitializersAreas(IConstructor constructor, ExternalSourceFile file);
    private static ICollection`1<IDeclaredElement> GetTargets(IDeclaredElement target, ISolution solution);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.CSharp.CSharpNavigationAreasProvider : DefaultNavigationAreasProvider {
    public virtual List`1<NavigationArea> GetNavigationAreas(IDeclaredElement declaredElement, ExternalSourceFile[] files, ICompiledNavigationTarget target);
    public virtual TextRange FindTextRangeInNavigationArea(CompiledElementNavigationInfo navigationInfo, NavigationArea dataToSearchIn, bool returnDefaultNavigation);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.CSharp.ZoneMarker : object {
}
[SolutionFeaturePartAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.DefaultAssemblyAttributeNavigationProvider : object {
    public sealed virtual bool IsApplicable(AssemblyAttributeNavigationData data);
    public virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(AssemblyAttributeNavigationData target);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.DefaultCompiledElementNavigationProvider : object {
    private ExternalSourcesPointsProvider myExternalSourcesPointsProvider;
    private IPsiCachesState myPsiCaches;
    private IShellLocks myShellLocks;
    public DefaultCompiledElementNavigationProvider(IExternalSourcesService service, TextControlManager textControlManager, IPsiCachesState psiCaches, ExternalSourcesFirstTimeNavigation firstTimeNavigation, FileSystemPathNavigator fileSystemPathNavigator, DocumentManager documentManager, ExternalSourcesPsiSourceFiles externalSourceFilesService, IShellLocks shellLocks, ISolution solution, ISettingsStore settingsStore, ExternalSourcesActivation externalSourcesActivation, ExternalSourcesPointsProvider externalSourcesPointsProvider);
    public virtual bool IsApplicable(ICompiledElement target);
    public virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(ICompiledElement target);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.DefaultNavigationAreasProvider : object {
    public virtual List`1<NavigationArea> GetNavigationAreas(IDeclaredElement declaredElement, ExternalSourceFile[] files, ICompiledNavigationTarget target);
    public virtual TextRange FindTextRangeInNavigationArea(CompiledElementNavigationInfo navigationInfo, NavigationArea dataToSearchIn, bool returnDefaultNavigation);
}
public class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.ExternalSourceFile : object {
    [CompilerGeneratedAttribute]
private IFile <PsiFile>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private IExternalSourcesProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    public IFile PsiFile { get; }
    public FileSystemPath Location { get; }
    public IExternalSourcesProvider Provider { get; }
    public string AssemblyName { get; }
    public ExternalSourceFile(IFile psiFile, FileSystemPath location, IExternalSourcesProvider provider, string assemblyName);
    [CompilerGeneratedAttribute]
public IFile get_PsiFile();
    [CompilerGeneratedAttribute]
public FileSystemPath get_Location();
    [CompilerGeneratedAttribute]
public IExternalSourcesProvider get_Provider();
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.ExternalSourceNavigationProvider : object {
    private FileSystemPathNavigator myFileSystemPathNavigator;
    private ProjectFileExtensions myProjectFileExtensions;
    private PsiProjectFileTypeCoordinator myPsiProjectFileTypeCoordinator;
    private IEditorManager myEditorManager;
    public ExternalSourceNavigationProvider(FileSystemPathNavigator fileSystemPathNavigator, ProjectFileExtensions projectFileExtensions, PsiProjectFileTypeCoordinator psiProjectFileTypeCoordinator, IEditorManager editorManager, INavigationDecompilationCache navigationDecompilationCache);
    public virtual bool IsApplicable(ExternalSourceNavigationData data);
    public virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(ExternalSourceNavigationData decompiledFileNavigationData);
}
[OccurrenceProviderAttribute]
public class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.ExternalSourceOccurrenceProvider : object {
    public sealed virtual IOccurrence MakeOccurrence(FindResult findResult);
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.ExternalSourcesFirstTimeNavigation : object {
    public virtual bool Execute();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.ExternalSourcesNavigationContextService : DefaultExternalSourcesNavigationContextService {
    private IExternalSourcesService myService;
    public ExternalSourcesNavigationContextService(IExternalSourcesService service);
    public virtual IDisposable SetExternalSourcesNavigationContext(IPsiSourceFile sourceFile);
}
[OptionsPageAttribute("ExternalSources", "External Sources", "JetBrains.ReSharper.ExternalSources.Resources.ExternalSourcesThemedIcons/ExternalSources")]
public class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.ExternalSourcesOptionsPage : CustomSimpleOptionsPage {
    public static string ID;
    public ExternalSourcesOptionsPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, IPdbAdvancedOptionsDialogExecutor advancedOptionsDialogExecutor, IShellLocks locks, ExternalSourcesDebugInfoDumper externalSourcesDebugInfoDumper);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.ExternalSourcesPointsProvider : object {
    private AssemblyFactory myAssemblyFactory;
    private IAssemblyCollection myAssemblyCollection;
    private IPsiFiles myPsiFiles;
    private INavigationAreasProvider myNavigationAreasProvider;
    private RuntimeAssembliesManager myRuntimeAssembliesManager;
    private IExternalSourcesService myService;
    private IPsiCaches myPsiCaches;
    private ExternalSourcesFirstTimeNavigation myFirstTimeNavigation;
    private FileSystemPathNavigator myFileSystemPathNavigator;
    private IExternalSourcesService myExternalSourceFilesService;
    private ExternalSourcesActivation myExternalSourcesActivation;
    private FrameworkLocationService myFrameworkLocationService;
    private INavigationModeProvider myNavigationModeProvider;
    private IContextBoundSettingsStore myContextBoundSettingsStore;
    private ISolution mySolution;
    private List`1<IAssemblyCookie> myCreatedAssembliesCookie;
    public ExternalSourcesPointsProvider(IExternalSourcesService service, IPsiCaches psiCaches, ExternalSourcesFirstTimeNavigation firstTimeNavigation, FileSystemPathNavigator fileSystemPathNavigator, ExternalSourcesActivation externalSourcesActivation, ISettingsStore settingsStore, FrameworkLocationService frameworkLocationService, INavigationModeProvider navigationModeProvider, ISolution solution, Lifetime lifetime, IShellLocks locks, IExternalSourcesService externalSourceFilesService, AssemblyFactory assemblyFactory, IAssemblyCollection assemblyCollection, IPsiFiles psiFiles, INavigationAreasProvider navigationAreasProvider, RuntimeAssembliesManager runtimeAssembliesManager);
    [CanBeNullAttribute]
public INavigationPoint[] CreateNavigationPoints(CompiledElementNavigationInfo navigationInfo);
    [CanBeNullAttribute]
public INavigationPoint[] CreateNavigationPoints(CompiledElementNavigationInfo navigationInfo, IReadOnlyCollection`1<IExternalSourcesProvider> providers, bool ignoreOptions);
    [CanBeNullAttribute]
private IReadOnlyCollection`1<ExternalSourcesMapping> GetSources(CompiledElementNavigationInfo navigationInfo, IReadOnlyCollection`1<IExternalSourcesProvider> providers, bool ignoreOptions);
    [CanBeNullAttribute]
public IAssemblyPsiModule GetPsiAssemblyHonorSurfaceAssemblies(IAssemblyPsiModule module, IModuleReferenceResolveContext resolveContext);
    private IAssemblyFile LoadAssemblyForExternalSources(IAssemblyLocation runtimeAssemblyLocation, IModuleReferenceResolveContext resolveContext);
    [CanBeNullAttribute]
public ICompiledElement RetargetDeclaredElement(ICompiledElement initialDeclaredElement);
    private CompiledElementNavigationInfo RetargetNavigationInfo(CompiledElementNavigationInfo navigationInfo);
    private INavigationPoint[] GetSourcePoint(CompiledElementNavigationInfo initialNavigationInfo, IReadOnlyCollection`1<IExternalSourcesProvider> providers, bool ignoreOptions);
    public FileSystemPathNavigationPoint[] FindSpecificElementInFile(CompiledElementNavigationInfo compiledElementNavigationInfo, IReadOnlyCollection`1<ExternalSourcesMapping> files, IProgressIndicator indicator, ExternalSourceFile[]& externalSourceFiles);
    public NavigationArea[] FindSpecificElementAreasInFile(CompiledElementNavigationInfo compiledElementNavigationInfo, IReadOnlyCollection`1<ExternalSourcesMapping> files, IProgressIndicator indicator);
    public ExternalSourceFile[] ParseFiles(IReadOnlyCollection`1<ExternalSourcesMapping> files, IProgressIndicator indicator);
    [NotNullAttribute]
[ItemNotNullAttribute]
private FileSystemPathNavigationPoint[] CreateNavigation(ExternalSourceFile[] files, CompiledElementNavigationInfo navigationInfo, bool returnDefaultNavigation);
    private NavigationArea[] CreateNavigationAreas(ExternalSourceFile[] files, CompiledElementNavigationInfo navigationInfo);
    [CanBeNullAttribute]
private FileSystemPathNavigationPoint[] TryConvertToNavigationPoints(NavigationArea[] navigationAreas, CompiledElementNavigationInfo navigationInfo, bool returnDefaultNavigation);
    [CanBeNullAttribute]
public FileSystemPathNavigationPoint TryConvertToNavigationPoint(NavigationArea navigationArea, CompiledElementNavigationInfo navigationInfo, bool returnDefaultNavigation);
    public void ReleaseLoadedAssemblies();
}
[ProjectModelElementPresenterAttribute("100", "16")]
public class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.ExternalSourcesProjectFilePresenter : object {
    public sealed virtual IconId GetIcon(IProjectModelElement projectModelElement);
    public sealed virtual string GetPresentableLocation(IProjectModelElement projectModelElement);
    private static IAssembly GetAssembly(IProjectModelElement element);
}
public class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.ExternalSourcesShowSupportInfoViewModel : AAutomation {
    private Lifetime myLifetime;
    private ExternalSourcesDebugInfoDumper myExternalSourcesDebugInfoDumper;
    private IShellLocks myLocks;
    [CompilerGeneratedAttribute]
private string <Caption>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <ShowCommand>k__BackingField;
    [UsedImplicitlyAttribute]
public string Caption { get; private set; }
    [UsedImplicitlyAttribute]
public DelegateCommand ShowCommand { get; private set; }
    public ExternalSourcesShowSupportInfoViewModel(Lifetime lifetime, ExternalSourcesDebugInfoDumper externalSourcesDebugInfoDumper, IShellLocks locks, string caption);
    [CompilerGeneratedAttribute]
public string get_Caption();
    [CompilerGeneratedAttribute]
private void set_Caption(string value);
    [CompilerGeneratedAttribute]
public DelegateCommand get_ShowCommand();
    [CompilerGeneratedAttribute]
private void set_ShowCommand(DelegateCommand value);
    private void ShowSupportInformation();
    [CompilerGeneratedAttribute]
private void <ShowSupportInformation>b__12_0();
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.ExternalSourcesUtil : object {
    internal static CompiledElementNavigationInfo GetNavigationInfo(object target);
    [ExtensionAttribute]
internal static bool IsFromWinmdModule(ICompiledElement compiledElement);
    [ExtensionAttribute]
internal static bool IsFromWinmdModule(CompiledElementNavigationInfo info);
}
public interface JetBrains.ReSharper.ExternalSources.ReSharperIntegration.INavigationAreasProvider {
    public abstract virtual List`1<NavigationArea> GetNavigationAreas(IDeclaredElement declaredElement, ExternalSourceFile[] files, ICompiledNavigationTarget target);
    public abstract virtual TextRange FindTextRangeInNavigationArea(CompiledElementNavigationInfo navigationInfo, NavigationArea dataToSearchIn, bool returnDefaultNavigation);
}
public class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.NavigationArea : object {
    [CompilerGeneratedAttribute]
private ExternalSourceFile <File>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ITreeNode> <NodesToSearchIn>k__BackingField;
    public ExternalSourceFile File { get; }
    public List`1<ITreeNode> NodesToSearchIn { get; }
    public NavigationArea(ExternalSourceFile file, List`1<ITreeNode> declarations);
    [CompilerGeneratedAttribute]
public ExternalSourceFile get_File();
    [CompilerGeneratedAttribute]
public List`1<ITreeNode> get_NodesToSearchIn();
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.PreciseExternalSourcesNavigationProvider : object {
    private ExternalSourcesPointsProvider myExternalSourcesPointsProvider;
    private IShellLocks myShellLocks;
    public PreciseExternalSourcesNavigationProvider(IExternalSourcesService service, TextControlManager textControlManager, IPsiCachesState psiCaches, ExternalSourcesFirstTimeNavigation firstTimeNavigation, FileSystemPathNavigator fileSystemPathNavigator, DocumentManager documentManager, ExternalSourcesPsiSourceFiles externalSourceFilesService, IShellLocks shellLocks, ISolution solution, ISettingsStore settingsStore, ExternalSourcesActivation externalSourcesActivation, ExternalSourcesPointsProvider externalSourcesPointsProvider);
    public virtual bool IsApplicable(CompiledElementNavigationInfo target);
    public virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(CompiledElementNavigationInfo target);
}
public class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.SpecificExternalSourcesContextNavigationProviderBase`1 : object {
    [CanBeNullAttribute]
private TSolutionContextNavigationProvider GetRealNavigationProvider(IDataContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.ExternalSources.ReSharperIntegration.SpecificExternalSourcesContextNavigationProviderBase`1/<CreateWorkflow>d__1")]
public sealed virtual IEnumerable`1<ContextNavigation> CreateWorkflow(IDataContext dataContext);
}
public abstract class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.SpecificExternalSourcesSolutionContextNavigationProviderBase : object {
    private ExternalSourcesPointsProvider myExternalSourcesPointsProvider;
    private NavigationManager myNavigationManager;
    private INavigationModeProvider myNavigationModeProvider;
    protected IExternalSourcesProvider ExternalSourcesProvider { get; }
    public string Title { get; }
    public Type Action { get; }
    public NavigationActionGroup ContextNavigationGroup { get; }
    protected SpecificExternalSourcesSolutionContextNavigationProviderBase(ExternalSourcesPointsProvider externalSourcesPointsProvider, NavigationManager navigationManager, INavigationModeProvider navigationModeProvider);
    public void Navigate(IDataContext context);
    public virtual bool IsAvailable(IDataContext context);
    protected abstract virtual IExternalSourcesProvider get_ExternalSourcesProvider();
    protected virtual void SetSpecificOptions(Lifetime navigationLifetime);
    protected virtual void PresentEmptyResult(IDataContext context);
    public abstract virtual string get_Title();
    public abstract virtual Type get_Action();
    public abstract virtual NavigationActionGroup get_ContextNavigationGroup();
}
public class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.Xaml.CompiledXamlResourceNavigationInfo : object {
    [CompilerGeneratedAttribute]
private IXamlExternalResource <Resource>k__BackingField;
    [NotNullAttribute]
public IXamlExternalResource Resource { get; }
    public CompiledXamlResourceNavigationInfo(IXamlExternalResource resource);
    [CompilerGeneratedAttribute]
public IXamlExternalResource get_Resource();
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.Xaml.CompiledXamlResourceNavigator : DefaultDeclaredElementNavigator {
    public CompiledXamlResourceNavigator(ISolution solution, IFeaturePartsContainer shellFeaturePartsContainer, ISettingsStore settingsStore);
    public virtual bool IsApplicable(IDeclaredElement declaredElement);
    public virtual void Navigate(IDeclaredElement declaredElement, PopupWindowContextSource windowContext, bool transferFocus, SolutionFeaturePartsContainer filters, Nullable`1<OccurrencePresentationOptions> options, TabOptions tabOptions);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.Xaml.DefaultBamlNavigationProvider : object {
    [NotNullAttribute]
private INavigationDecompilationCache myNavigationDecompilationCache;
    [NotNullAttribute]
private IXamlAssemblyResourcesCache myAssemblyResourcesCache;
    [NotNullAttribute]
private AssemblyToAssemblyReferencesResolveManager myResolveManager;
    [NotNullAttribute]
private FileSystemPathNavigator myFileSystemPathNavigator;
    private static string DecompilerId;
    public DefaultBamlNavigationProvider(IXamlAssemblyResourcesCache assemblyResourcesCache, AssemblyToAssemblyReferencesResolveManager resolveManager, INavigationDecompilationCache navigationDecompilationCache, FileSystemPathNavigator fileSystemPathNavigator);
    public sealed virtual bool IsApplicable(ICompiledElement data);
    public sealed virtual bool IsApplicable(CompiledElementNavigationInfo data);
    public sealed virtual bool IsApplicable(CompiledXamlResourceNavigationInfo data);
    public sealed virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(CompiledElementNavigationInfo target);
    public sealed virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(CompiledXamlResourceNavigationInfo target);
    public sealed virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(ICompiledElement target);
    [CanBeNullAttribute]
private DecompilationCacheItem ToDecompiledBaml(IAssembly assembly, FileSystemPath location, string bamlPath);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.ExternalSources.ReSharperIntegration.Xaml.ZoneMarker : object {
}
[ActionAttribute("JetBrains.ReSharper.ExternalSources.Resources.Strings", "DecompileResourcesFileActionText")]
public class JetBrains.ReSharper.ExternalSources.Resources.Actions.DecompileResourcesActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private static void SaveResourceToFile(Stream resource, string resourceName, FileSystemPath rootFolder);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.ExternalSources.Resources.Actions.ZoneMarker : object {
}
public class JetBrains.ReSharper.ExternalSources.Resources.AssemblyExplorerThemedIcons : object {
}
public class JetBrains.ReSharper.ExternalSources.Resources.ExternalSourcesThemedIcons : object {
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.ExternalSources.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string GeneratingPDBs_Text { get; }
    public static string ProjectPDBGenerationStatus_Text { get; }
    public static string _HeapItem_Text { get; }
    public static string _NeverUseThisTemplate_Text { get; }
    public static string _TrustTheCommandsGeneratedFromThisTemplate_Text { get; }
    public static string Adding_AssembliesToAssemblyExplorer_Text { get; }
    public static string AdditionalInformation_RiderPresentableName { get; }
    public static string AddSourceLinkToPortablePDB_ActionText { get; }
    public static string AdvancedSymbolsOptions_Button_Text { get; }
    public static string AllFiles__Text { get; }
    public static string AllowDownloadingFromRemoteLocations_BoolOption_Text { get; }
    public static string AllSupportedExtensions__Text { get; }
    public static string And_MoreAssemblies_Text { get; }
    public static string AppHost_Text { get; }
    public static string AssemblyContains_Image_ToolTip { get; }
    public static string AssemblyExplorer_Text { get; }
    public static string AssemblyExplorerActionGroupText { get; }
    public static string AssemblyDiffExplorerActionGroupText { get; }
    public static string AssemblyDiffExplorerSettingsSettingDescription { get; }
    public static string AssemblyExplorerAddItemsActionText { get; }
    public static string AssemblyExplorerHighlightingAttributeGroup_Title_Assembly_Explorer { get; }
    public static string AssemblyExplorerOpenResourceActionText { get; }
    public static string AssemblyExportHistoryAssemblyFileWithModificationTimeCreatedProjectPathSettingDescription { get; }
    public static string AssemblyExportParametersSettingDescription { get; }
    public static string AssemblyFiles__Text { get; }
    public static string AssemblyList__Text { get; }
    public static string AssemblyVersion__Text { get; }
    public static string AuthorizationToken_Text { get; }
    public static string AutomaticallyScrollToSourceActionText { get; }
    public static string BaseInheritors_RiderPresentableName { get; }
    public static string BaseTypes_Text { get; }
    public static string BCLAssembly_ToolTip { get; }
    public static string BCLAssemblyContains_Image_ToolTip { get; }
    public static string Bundle_Text { get; }
    public static string BundleV___Text { get; }
    public static string ByDefaultReSharperNavigatesToAssembly_Text { get; }
    public static string ByDefaultReSharperNavigatesToMetadata_Text { get; }
    public static string ByDefaultReSharperNavigatesToObject_Text { get; }
    public static string CancelAllGenerationsActionText { get; }
    public static string CanTResolveAssemblyReference_Text { get; }
    public static string CanTShowTheContentOfPDBNItDoesnTMeet_Text { get; }
    public static string ClearAssemblyList_Caption { get; }
    public static string ClearAssemblyListActionText { get; }
    public static string ClearListActionText { get; }
    public static string CollectingAssembliesFrom__Text { get; }
    public static string CollectingPackages__Text { get; }
    public static string CollectingPackages_Text { get; }
    public static string ConnectionProblems_Text { get; }
    public static string ContextActionPageUISettingsSettingDescription { get; }
    public static string CopyFullPathActionText { get; }
    public static string CopyFirstItemFullPathActionText { get; }
    public static string CopySecondItemFullPathActionText { get; }
    public static string Declarations_Caption { get; }
    public static string DecompiledSourcesActionText { get; }
    public static string DecompileMethodBodiesSettingDescription { get; }
    public static string DecompileMethods_BoolOption_Text { get; }
    public static string DecompileProtectedAssemblies_BoolOption_Text { get; }
    public static string Decompiler_Text { get; }
    public static string DecompileResourcesFileActionText { get; }
    public static string DecompilerLegalNoticeAccept_Caption { get; }
    public static string DecompilerLegalNoticeIsAcceptedByUserSettingDescription { get; }
    public static string DecompilerOptionsSettingDescription { get; }
    public static string DecompileProtectedAssembliesSettingDescription { get; }
    public static string DecompileVeryLongMethodsSettingDescription { get; }
    public static string DefaultVisualStudioNavigation_Text { get; }
    public static string Delta_Text { get; }
    public static string DeltaGeneration___Text { get; }
    public static string Dependencies_Text { get; }
    public static string DiffIgnoreAttributeOrderDifferencesSettingDescription { get; }
    public static string DiffIgnoreAttributeOrderDifferences_Text { get; }
    public static string DiffIgnoreMemberOrderDifferencesSettingDescription { get; }
    public static string DiffIgnoreMemberOrderDifferences_Text { get; }
    public static string DiffIgnoreNullableReferenceTypesAnnotationsDifferencesSettingDescription { get; }
    public static string DiffIgnoreNullableReferenceTypesAnnotationsDifferences_Text { get; }
    public static string DiffModeGroup_Text { get; }
    public static string DiffModeGroup_PresentationText { get; }
    public static string DiffModeSettingDescription { get; }
    public static string DiffMode_RadioOption_Caption { get; }
    public static string DiffModeShowAll_Text { get; }
    public static string DiffModeShowAll_Comment_Text { get; }
    public static string DiffModeShowOnlyDifferences_Text { get; }
    public static string DiffModeShowOnlyDifferences_Comment_Text { get; }
    public static string DiffModeShowOnlySignatureDifferences_Text { get; }
    public static string DiffModeShowOnlySignatureDifferences_Comment_Text { get; }
    public static string DiffModeShowOnlyPublicApiDifferences_Text { get; }
    public static string DiffModeShowOnlyPublicApiDifferences_Comment_Text { get; }
    public static string DiffOptionsDescription { get; }
    public static string Diff_OptionsPageTitle { get; }
    public static string DiffSettingsSettingDescription { get; }
    public static string DoesNotContainAnyDebugDirectory_Text { get; }
    public static string Downloading_NuGetPackage_Text { get; }
    public static string DownloadingNuGetPackages_Text { get; }
    public static string DoYouWantToUpdateTheseSettingsAndEnableDebugging_Text { get; }
    public static string EmbeddedPortablePDBMetadata_Text { get; }
    public static string Enable_Text { get; }
    public static string EnablePrivateSourceLinkSupport_BoolOption_Text { get; }
    public static string ExecuteTheCommandToGetTheSourceCode_Text { get; }
    public static string ExploreFolDerActionText { get; }
    public static string ExportToProjectActionText { get; }
    public static string ExternalSources_Text { get; }
    public static string ExternalSourcesNavigator_Text { get; }
    public static string ExternalSourcesOptionPageTitle { get; }
    public static string ExtractBundleContentsToFolder_Caption { get; }
    public static string ExtractBundleContentsToFolderActionText { get; }
    public static string ExtractToFileActionText { get; }
    public static string FailedToDownloadPdbRequiredForLocatingRepository_Text { get; }
    public static string FailedToDownloadPdbRequiredForLocatingSource_Text { get; }
    public static string FailedToFindInfoForBuidingUrlForThisAssembly_Text { get; }
    public static string FailedToFindInfoForBuidingUrlForThisElement_Text { get; }
    public static string FilePathIsRelative_Text { get; }
    public static string FilePathIsRelative_ToolTip { get; }
    public static string FileWasRemoved_Text { get; }
    public static string FileWasRemoved_ToolTip { get; }
    public static string ForwardedTypes_Text { get; }
    public static string GeneratePdbActionText { get; }
    public static string GeneratingDebugData_Text { get; }
    public static string Headers_Text { get; }
    public static string HistoryXMLSettingDescription { get; }
    public static string ILViewer_Text { get; }
    public static string ILViewerActionBarActionGroupText { get; }
    public static string ILViewerActionText { get; }
    public static string ILViewerCodeTypeGroupText { get; }
    public static string ILViewerCodeTypeHighLevelCSharpText { get; }
    public static string ILViewerCodeTypeILText { get; }
    public static string ILViewerCodeTypeLowLevelCSharpText { get; }
    public static string ILViewerCodeTypeSettingDescription { get; }
    public static string ILViewerCodeUnavailabilityReason_BuildProject_Text { get; }
    public static string ILViewerCodeUnavailabilityReason_ExpiredCacheItem_Text { get; }
    public static string ILViewerCodeUnavailabilityReason_NotInProject_Text { get; }
    public static string ILViewerCodeUnavailabilityReason_OpenSource_Text { get; }
    public static string ILViewerCodeUnavailabilityReason_PutCursorInsideType_Text { get; }
    public static string ILViewerToolWindowSettingsSettingDescription { get; }
    public static string ILViewerViewILCodeAction_Caption { get; }
    public static string ILViewerViewLowLevelCSharpCodeAction_Caption { get; }
    public static string In__Text { get; }
    public static string InConstructor_Text { get; }
    public static string IndentSizeSettingDescription { get; }
    public static string IndentStyleWhitespacesOrTabsSettingDescription { get; }
    public static string InEvent_Text { get; }
    public static string InField_Text { get; }
    public static string Inheritors_Text { get; }
    public static string InMethod_Text { get; }
    public static string InParameter_Text { get; }
    public static string InProperty_Text { get; }
    public static string INTERNALERROR_Text { get; }
    public static string InternalPrivate_RiderPresentableName { get; }
    public static string IsNotSupported_Text { get; }
    public static string JustMyCodeEnabledDisabled_Text { get; }
    public static string LibraryFiles_Text { get; }
    public static string LibraryFiles__Text { get; }
    public static string LoadActionText { get; }
    public static string Loading_Text { get; }
    public static string LocateInFileExplorerActionText { get; }
    public static string LocateFirstItemInFileExplorerActionText { get; }
    public static string LocateSecondItemInFileExplorerActionText { get; }
    public static string LocateInMetadataTreeContextNavigationProvider_ActionTitle { get; }
    public static string MemberRefField_Text { get; }
    public static string MemberRefMethod_Text { get; }
    public static string Metadata_Text { get; }
    public static string MetadataEmphasized_RiderPresentableName { get; }
    public static string MetadataToken_RiderPresentableName { get; }
    public static string MetadataTreeDownloadSource_Text { get; }
    public static string MetadataUsage_RiderPresentableName { get; }
    public static string MetadataViewActionText { get; }
    public static string MetadataViewer_Text { get; }
    public static string ModuleReference__ToolTip { get; }
    public static string Modules_Text { get; }
    public static string NativeAppHost_ToolTip { get; }
    public static string NavigateTo_NamespaceIn_Caption { get; }
    public static string NavigatingTo__Text { get; }
    public static string NavigationIsCarriedOutByVisualStudio_Text { get; }
    public static string NavigationToAssemblyExplorer_Text { get; }
    public static string NavigationToExternalSource_RadioOption_Caption { get; }
    public static string NavigationToObjectBrowser_Text { get; }
    public static string NavigationToSources_Text { get; }
    public static string NuGetPackages_Text { get; }
    public static string UnmanagedAssemblyLimitedSupport_Text { get; }
    public static string UnmanagedAssemblyLimitedSupport_ToolTip { get; }
    public static string NuGetPackagesConfig_Text { get; }
    public static string OpenAssemblyListActionText { get; }
    public static string OpenContainingFolder_Text { get; }
    public static string OpenDiffOptionsActionText { get; }
    public static string OpenFolder_Text { get; }
    public static string OpenInBrowserActionText { get; }
    public static string OpeningNuGetPackagesConfig_Text { get; }
    public static string OpenInVisualStudioActionText { get; }
    public static string OpenNuGetPackagesConfigActionText { get; }
    public static string OpenResource_Caption { get; }
    public static string OpenWithActionText { get; }
    public static string Output_Text { get; }
    public static string ParsingFiles_Text { get; }
    public static string PatchPdbBindWithAssembly_ActionText { get; }
    public static string PdbAlreadyExists_Text { get; }
    public static string PdbAlreadyLoaded_Text { get; }
    public static string PdbDataIsEmbeddedIntoAssembly_Text { get; }
    public static string PdbFileAlreadyExistsSignature_Provider__Text { get; }
    public static string PdbFileIsAlreadyInTheVisualStudioCacheSignature__Text { get; }
    public static string PdbFilesWillNotBeGeneratedForTheAssembliy_Text { get; }
    public static string PdbFilesWillNotBeGeneratedForTheFollowingAssemblies_Text { get; }
    public static string PdbFileWasNotDownloaded_Text { get; }
    public static string PdbGenerationStatusActionText { get; }
    public static string PdbGenerationStatus_Text { get; }
    public static string PdbHasNotBeenGeneratedBecauseAssemblyDoesNotContainCodeViewDebugDirectoryEntry { get; }
    public static string PlaceOpenBraceOnNewLineSettingDescription { get; }
    public static string PortablePDBMetadata_Text { get; }
    public static string PreparingAssemblyExplorer_Text { get; }
    public static string Processing__Text { get; }
    public static string ProjectItemNavigation_Caption { get; }
    public static string ProjFileItem_Text { get; }
    public static string RecursiveReferences__ToolTip { get; }
    public static string References_Text { get; }
    public static string RemoveItemFromListActionText { get; }
    public static string RemoveItemsFromList_Text { get; }
    public static string ReorderMembersAccordingToCurrentOptionsSettingDescription { get; }
    public static string ReSharperCanEnableDebuggingWithoutSymbols_Text { get; }
    public static string Resources_Text { get; }
    public static string ResourcesDecompiler_Text { get; }
    public static string ResourcesFiles_Files_Filter_Text { get; }
    public static string SaveAssemblyListActionText { get; }
    public static string SaveDecompiledResourcesToFolder_Caption { get; }
    public static string SavePatchedSymbolFile_Title { get; }
    public static string SaveResourceToFileActionText { get; }
    public static string SelectAssemblyToBindPdbWith_Title { get; }
    public static string SelectSourceLinkToAddToPdb_Title { get; }
    public static string SelectSymbolPdbFileToPatch_Title { get; }
    public static string ShowAtRootLevelActionText { get; }
    public static string ShowCodeGeneratedByCompilerSettingDescription { get; }
    public static string ShowILCodeInCommentsSettingDescription { get; }
    public static string ShowMetadataTokenValuesSettingDescription { get; }
    public static string ShowNonPublicCompiledItemsInGoToResults_BoolOption_Text { get; }
    public static string ShowPDBContentActionText { get; }
    public static string ShowPDBContentForAssemblyActionText { get; }
    public static string ShowStrings_ActionText { get; }
    public static string ShowXMLDocInDecompiledCodeSettingDescription { get; }
    public static string ShowXmlDocLocations_ActionText { get; }
    public static string SingleFileBundle_ToolTip { get; }
    public static string SourceLinkJsonFiles__Text { get; }
    public static string SourcesFromSymbolFiles_Text { get; }
    public static string SourcesFromSymbolFilesActionText { get; }
    public static string SourcesFromSymbolFilesWereNotFoundNTo_Text { get; }
    public static string SymbolCacheDirectoryNotSet__Text { get; }
    public static string SymbolFiles__Text { get; }
    public static string SynchronizeCaretToILViewSettingDescription { get; }
    public static string SynchronizeILViewToCaretSettingDescription { get; }
    public static string Test_Button_Text { get; }
    public static string TheCommandIsGeneratedFromThisTemplate_Text { get; }
    public static string ThereAreNoSymbolsForAssembly_ButReSharperCanEnableDebuggingWithoutSymbolsForThisAssembly_Text { get; }
    public static string ThisWillRemoveAllAssembliesFromAssembly_Text { get; }
    public static string ToDoSoItWillUpdateTheFollowingVisualStudioSettings_Text { get; }
    public static string ToEnableDebuggingWithoutSymbolsReSharperWillUpdateTheFollowingVisualStudioSettings_Text { get; }
    public static string TopLevelEntryPoint_Text { get; }
    public static string TrackCaretInEditorActionText { get; }
    public static string TypeElement_RiderPresentableName { get; }
    public static string UndefinedTargetFramework_Text { get; }
    public static string UnloadActionText { get; }
    public static string UpdateSettingsAndEnable_Text { get; }
    public static string UpdatingTypePresentations_Text { get; }
    public static string Usages__Text { get; }
    public static string Usages_Text { get; }
    public static string UseAssemblyExplorerInsteadOfObjectBrowser_BoolOption_Text { get; }
    public static string UseExpressionBodiedMembersSettingDescription { get; }
    public static string UseNewTreeForAssemblyExplorerSettingDescription { get; }
    public static string UseNullCoalescingOperatorsSettingDescription { get; }
    public static string UseNullConditionalOperatorsAndSettingDescription { get; }
    public static string UserName_Text { get; }
    public static string UseSourcesFromSymbolFilesWhenAvailable_BoolOption_Text { get; }
    public static string UseTernaryConditionalOperatorsSettingDescription { get; }
    public static string UseWithExpressionsSettingDescription { get; }
    public static string WebAssemblyLimitedSupport_Text { get; }
    public static string WebAssemblyLimitedSupport_ToolTip { get; }
    public static string XamlResourceNavigation_Text { get; }
    public static string XmlDocumentRepresentingAssemblyDiffExplorerStateSettingDescription { get; }
    public static string ZipArchives_Text { get; }
    public static string ZipArchives__Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_GeneratingPDBs_Text();
    public static string get_ProjectPDBGenerationStatus_Text();
    public static string get__HeapItem_Text();
    public static string get__NeverUseThisTemplate_Text();
    public static string get__TrustTheCommandsGeneratedFromThisTemplate_Text();
    public static string get_Adding_AssembliesToAssemblyExplorer_Text();
    public static string get_AdditionalInformation_RiderPresentableName();
    public static string get_AddSourceLinkToPortablePDB_ActionText();
    public static string get_AdvancedSymbolsOptions_Button_Text();
    public static string get_AllFiles__Text();
    public static string get_AllowDownloadingFromRemoteLocations_BoolOption_Text();
    public static string get_AllSupportedExtensions__Text();
    public static string get_And_MoreAssemblies_Text();
    public static string get_AppHost_Text();
    public static string get_AssemblyContains_Image_ToolTip();
    public static string get_AssemblyExplorer_Text();
    public static string get_AssemblyExplorerActionGroupText();
    public static string get_AssemblyDiffExplorerActionGroupText();
    public static string get_AssemblyDiffExplorerSettingsSettingDescription();
    public static string get_AssemblyExplorerAddItemsActionText();
    public static string get_AssemblyExplorerHighlightingAttributeGroup_Title_Assembly_Explorer();
    public static string get_AssemblyExplorerOpenResourceActionText();
    public static string get_AssemblyExportHistoryAssemblyFileWithModificationTimeCreatedProjectPathSettingDescription();
    public static string get_AssemblyExportParametersSettingDescription();
    public static string get_AssemblyFiles__Text();
    public static string get_AssemblyList__Text();
    public static string get_AssemblyVersion__Text();
    public static string get_AuthorizationToken_Text();
    public static string get_AutomaticallyScrollToSourceActionText();
    public static string get_BaseInheritors_RiderPresentableName();
    public static string get_BaseTypes_Text();
    public static string get_BCLAssembly_ToolTip();
    public static string get_BCLAssemblyContains_Image_ToolTip();
    public static string get_Bundle_Text();
    public static string get_BundleV___Text();
    public static string get_ByDefaultReSharperNavigatesToAssembly_Text();
    public static string get_ByDefaultReSharperNavigatesToMetadata_Text();
    public static string get_ByDefaultReSharperNavigatesToObject_Text();
    public static string get_CancelAllGenerationsActionText();
    public static string get_CanTResolveAssemblyReference_Text();
    public static string get_CanTShowTheContentOfPDBNItDoesnTMeet_Text();
    public static string get_ClearAssemblyList_Caption();
    public static string get_ClearAssemblyListActionText();
    public static string get_ClearListActionText();
    public static string get_CollectingAssembliesFrom__Text();
    public static string get_CollectingPackages__Text();
    public static string get_CollectingPackages_Text();
    public static string get_ConnectionProblems_Text();
    public static string get_ContextActionPageUISettingsSettingDescription();
    public static string get_CopyFullPathActionText();
    public static string get_CopyFirstItemFullPathActionText();
    public static string get_CopySecondItemFullPathActionText();
    public static string get_Declarations_Caption();
    public static string get_DecompiledSourcesActionText();
    public static string get_DecompileMethodBodiesSettingDescription();
    public static string get_DecompileMethods_BoolOption_Text();
    public static string get_DecompileProtectedAssemblies_BoolOption_Text();
    public static string get_Decompiler_Text();
    public static string get_DecompileResourcesFileActionText();
    public static string get_DecompilerLegalNoticeAccept_Caption();
    public static string get_DecompilerLegalNoticeIsAcceptedByUserSettingDescription();
    public static string get_DecompilerOptionsSettingDescription();
    public static string get_DecompileProtectedAssembliesSettingDescription();
    public static string get_DecompileVeryLongMethodsSettingDescription();
    public static string get_DefaultVisualStudioNavigation_Text();
    public static string get_Delta_Text();
    public static string get_DeltaGeneration___Text();
    public static string get_Dependencies_Text();
    public static string get_DiffIgnoreAttributeOrderDifferencesSettingDescription();
    public static string get_DiffIgnoreAttributeOrderDifferences_Text();
    public static string get_DiffIgnoreMemberOrderDifferencesSettingDescription();
    public static string get_DiffIgnoreMemberOrderDifferences_Text();
    public static string get_DiffIgnoreNullableReferenceTypesAnnotationsDifferencesSettingDescription();
    public static string get_DiffIgnoreNullableReferenceTypesAnnotationsDifferences_Text();
    public static string get_DiffModeGroup_Text();
    public static string get_DiffModeGroup_PresentationText();
    public static string get_DiffModeSettingDescription();
    public static string get_DiffMode_RadioOption_Caption();
    public static string get_DiffModeShowAll_Text();
    public static string get_DiffModeShowAll_Comment_Text();
    public static string get_DiffModeShowOnlyDifferences_Text();
    public static string get_DiffModeShowOnlyDifferences_Comment_Text();
    public static string get_DiffModeShowOnlySignatureDifferences_Text();
    public static string get_DiffModeShowOnlySignatureDifferences_Comment_Text();
    public static string get_DiffModeShowOnlyPublicApiDifferences_Text();
    public static string get_DiffModeShowOnlyPublicApiDifferences_Comment_Text();
    public static string get_DiffOptionsDescription();
    public static string get_Diff_OptionsPageTitle();
    public static string get_DiffSettingsSettingDescription();
    public static string get_DoesNotContainAnyDebugDirectory_Text();
    public static string get_Downloading_NuGetPackage_Text();
    public static string get_DownloadingNuGetPackages_Text();
    public static string get_DoYouWantToUpdateTheseSettingsAndEnableDebugging_Text();
    public static string get_EmbeddedPortablePDBMetadata_Text();
    public static string get_Enable_Text();
    public static string get_EnablePrivateSourceLinkSupport_BoolOption_Text();
    public static string get_ExecuteTheCommandToGetTheSourceCode_Text();
    public static string get_ExploreFolDerActionText();
    public static string get_ExportToProjectActionText();
    public static string get_ExternalSources_Text();
    public static string get_ExternalSourcesNavigator_Text();
    public static string get_ExternalSourcesOptionPageTitle();
    public static string get_ExtractBundleContentsToFolder_Caption();
    public static string get_ExtractBundleContentsToFolderActionText();
    public static string get_ExtractToFileActionText();
    public static string get_FailedToDownloadPdbRequiredForLocatingRepository_Text();
    public static string get_FailedToDownloadPdbRequiredForLocatingSource_Text();
    public static string get_FailedToFindInfoForBuidingUrlForThisAssembly_Text();
    public static string get_FailedToFindInfoForBuidingUrlForThisElement_Text();
    public static string get_FilePathIsRelative_Text();
    public static string get_FilePathIsRelative_ToolTip();
    public static string get_FileWasRemoved_Text();
    public static string get_FileWasRemoved_ToolTip();
    public static string get_ForwardedTypes_Text();
    public static string get_GeneratePdbActionText();
    public static string get_GeneratingDebugData_Text();
    public static string get_Headers_Text();
    public static string get_HistoryXMLSettingDescription();
    public static string get_ILViewer_Text();
    public static string get_ILViewerActionBarActionGroupText();
    public static string get_ILViewerActionText();
    public static string get_ILViewerCodeTypeGroupText();
    public static string get_ILViewerCodeTypeHighLevelCSharpText();
    public static string get_ILViewerCodeTypeILText();
    public static string get_ILViewerCodeTypeLowLevelCSharpText();
    public static string get_ILViewerCodeTypeSettingDescription();
    public static string get_ILViewerCodeUnavailabilityReason_BuildProject_Text();
    public static string get_ILViewerCodeUnavailabilityReason_ExpiredCacheItem_Text();
    public static string get_ILViewerCodeUnavailabilityReason_NotInProject_Text();
    public static string get_ILViewerCodeUnavailabilityReason_OpenSource_Text();
    public static string get_ILViewerCodeUnavailabilityReason_PutCursorInsideType_Text();
    public static string get_ILViewerToolWindowSettingsSettingDescription();
    public static string get_ILViewerViewILCodeAction_Caption();
    public static string get_ILViewerViewLowLevelCSharpCodeAction_Caption();
    public static string get_In__Text();
    public static string get_InConstructor_Text();
    public static string get_IndentSizeSettingDescription();
    public static string get_IndentStyleWhitespacesOrTabsSettingDescription();
    public static string get_InEvent_Text();
    public static string get_InField_Text();
    public static string get_Inheritors_Text();
    public static string get_InMethod_Text();
    public static string get_InParameter_Text();
    public static string get_InProperty_Text();
    public static string get_INTERNALERROR_Text();
    public static string get_InternalPrivate_RiderPresentableName();
    public static string get_IsNotSupported_Text();
    public static string get_JustMyCodeEnabledDisabled_Text();
    public static string get_LibraryFiles_Text();
    public static string get_LibraryFiles__Text();
    public static string get_LoadActionText();
    public static string get_Loading_Text();
    public static string get_LocateInFileExplorerActionText();
    public static string get_LocateFirstItemInFileExplorerActionText();
    public static string get_LocateSecondItemInFileExplorerActionText();
    public static string get_LocateInMetadataTreeContextNavigationProvider_ActionTitle();
    public static string get_MemberRefField_Text();
    public static string get_MemberRefMethod_Text();
    public static string get_Metadata_Text();
    public static string get_MetadataEmphasized_RiderPresentableName();
    public static string get_MetadataToken_RiderPresentableName();
    public static string get_MetadataTreeDownloadSource_Text();
    public static string get_MetadataUsage_RiderPresentableName();
    public static string get_MetadataViewActionText();
    public static string get_MetadataViewer_Text();
    public static string get_ModuleReference__ToolTip();
    public static string get_Modules_Text();
    public static string get_NativeAppHost_ToolTip();
    public static string get_NavigateTo_NamespaceIn_Caption();
    public static string get_NavigatingTo__Text();
    public static string get_NavigationIsCarriedOutByVisualStudio_Text();
    public static string get_NavigationToAssemblyExplorer_Text();
    public static string get_NavigationToExternalSource_RadioOption_Caption();
    public static string get_NavigationToObjectBrowser_Text();
    public static string get_NavigationToSources_Text();
    public static string get_NuGetPackages_Text();
    public static string get_UnmanagedAssemblyLimitedSupport_Text();
    public static string get_UnmanagedAssemblyLimitedSupport_ToolTip();
    public static string get_NuGetPackagesConfig_Text();
    public static string get_OpenAssemblyListActionText();
    public static string get_OpenContainingFolder_Text();
    public static string get_OpenDiffOptionsActionText();
    public static string get_OpenFolder_Text();
    public static string get_OpenInBrowserActionText();
    public static string get_OpeningNuGetPackagesConfig_Text();
    public static string get_OpenInVisualStudioActionText();
    public static string get_OpenNuGetPackagesConfigActionText();
    public static string get_OpenResource_Caption();
    public static string get_OpenWithActionText();
    public static string get_Output_Text();
    public static string get_ParsingFiles_Text();
    public static string get_PatchPdbBindWithAssembly_ActionText();
    public static string get_PdbAlreadyExists_Text();
    public static string get_PdbAlreadyLoaded_Text();
    public static string get_PdbDataIsEmbeddedIntoAssembly_Text();
    public static string get_PdbFileAlreadyExistsSignature_Provider__Text();
    public static string get_PdbFileIsAlreadyInTheVisualStudioCacheSignature__Text();
    public static string get_PdbFilesWillNotBeGeneratedForTheAssembliy_Text();
    public static string get_PdbFilesWillNotBeGeneratedForTheFollowingAssemblies_Text();
    public static string get_PdbFileWasNotDownloaded_Text();
    public static string get_PdbGenerationStatusActionText();
    public static string get_PdbGenerationStatus_Text();
    public static string get_PdbHasNotBeenGeneratedBecauseAssemblyDoesNotContainCodeViewDebugDirectoryEntry();
    public static string get_PlaceOpenBraceOnNewLineSettingDescription();
    public static string get_PortablePDBMetadata_Text();
    public static string get_PreparingAssemblyExplorer_Text();
    public static string get_Processing__Text();
    public static string get_ProjectItemNavigation_Caption();
    public static string get_ProjFileItem_Text();
    public static string get_RecursiveReferences__ToolTip();
    public static string get_References_Text();
    public static string get_RemoveItemFromListActionText();
    public static string get_RemoveItemsFromList_Text();
    public static string get_ReorderMembersAccordingToCurrentOptionsSettingDescription();
    public static string get_ReSharperCanEnableDebuggingWithoutSymbols_Text();
    public static string get_Resources_Text();
    public static string get_ResourcesDecompiler_Text();
    public static string get_ResourcesFiles_Files_Filter_Text();
    public static string get_SaveAssemblyListActionText();
    public static string get_SaveDecompiledResourcesToFolder_Caption();
    public static string get_SavePatchedSymbolFile_Title();
    public static string get_SaveResourceToFileActionText();
    public static string get_SelectAssemblyToBindPdbWith_Title();
    public static string get_SelectSourceLinkToAddToPdb_Title();
    public static string get_SelectSymbolPdbFileToPatch_Title();
    public static string get_ShowAtRootLevelActionText();
    public static string get_ShowCodeGeneratedByCompilerSettingDescription();
    public static string get_ShowILCodeInCommentsSettingDescription();
    public static string get_ShowMetadataTokenValuesSettingDescription();
    public static string get_ShowNonPublicCompiledItemsInGoToResults_BoolOption_Text();
    public static string get_ShowPDBContentActionText();
    public static string get_ShowPDBContentForAssemblyActionText();
    public static string get_ShowStrings_ActionText();
    public static string get_ShowXMLDocInDecompiledCodeSettingDescription();
    public static string get_ShowXmlDocLocations_ActionText();
    public static string get_SingleFileBundle_ToolTip();
    public static string get_SourceLinkJsonFiles__Text();
    public static string get_SourcesFromSymbolFiles_Text();
    public static string get_SourcesFromSymbolFilesActionText();
    public static string get_SourcesFromSymbolFilesWereNotFoundNTo_Text();
    public static string get_SymbolCacheDirectoryNotSet__Text();
    public static string get_SymbolFiles__Text();
    public static string get_SynchronizeCaretToILViewSettingDescription();
    public static string get_SynchronizeILViewToCaretSettingDescription();
    public static string get_Test_Button_Text();
    public static string get_TheCommandIsGeneratedFromThisTemplate_Text();
    public static string get_ThereAreNoSymbolsForAssembly_ButReSharperCanEnableDebuggingWithoutSymbolsForThisAssembly_Text();
    public static string get_ThisWillRemoveAllAssembliesFromAssembly_Text();
    public static string get_ToDoSoItWillUpdateTheFollowingVisualStudioSettings_Text();
    public static string get_ToEnableDebuggingWithoutSymbolsReSharperWillUpdateTheFollowingVisualStudioSettings_Text();
    public static string get_TopLevelEntryPoint_Text();
    public static string get_TrackCaretInEditorActionText();
    public static string get_TypeElement_RiderPresentableName();
    public static string get_UndefinedTargetFramework_Text();
    public static string get_UnloadActionText();
    public static string get_UpdateSettingsAndEnable_Text();
    public static string get_UpdatingTypePresentations_Text();
    public static string get_Usages__Text();
    public static string get_Usages_Text();
    public static string get_UseAssemblyExplorerInsteadOfObjectBrowser_BoolOption_Text();
    public static string get_UseExpressionBodiedMembersSettingDescription();
    public static string get_UseNewTreeForAssemblyExplorerSettingDescription();
    public static string get_UseNullCoalescingOperatorsSettingDescription();
    public static string get_UseNullConditionalOperatorsAndSettingDescription();
    public static string get_UserName_Text();
    public static string get_UseSourcesFromSymbolFilesWhenAvailable_BoolOption_Text();
    public static string get_UseTernaryConditionalOperatorsSettingDescription();
    public static string get_UseWithExpressionsSettingDescription();
    public static string get_WebAssemblyLimitedSupport_Text();
    public static string get_WebAssemblyLimitedSupport_ToolTip();
    public static string get_XamlResourceNavigation_Text();
    public static string get_XmlDocumentRepresentingAssemblyDiffExplorerStateSettingDescription();
    public static string get_ZipArchives_Text();
    public static string get_ZipArchives__Text();
}
public class JetBrains.ReSharper.ExternalSources.SourceLink.PrivateSourceLinkStatistics : PrivateSourceLinkStatisticsStub {
    private JObject myStatisticObject;
    private bool myInitializedBeforeProcess;
    private object myLock;
    private Holder myValues;
    public void ProcessSolutionStatistics(JObject log);
    private JObject GetStatistics();
    public virtual void Authorized();
    public virtual void NoReaction();
    public virtual void Disabled();
    public virtual void Enabled();
    public virtual void LogServer(SourceLinkServer server);
    public virtual void SuccessfullyDownloaded();
    public virtual void CannotDownload();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.ExternalSources.SourceLink.SourceLinkCredentialManager : object {
    private ILogger myLogger;
    private ISourceLinkCredentialProvider[] myCredentialProviders;
    private ISourceLinkInfoProvider[] myInfoProviders;
    private IDialogHost myDialogHost;
    private IPrivateSourceLinkStatistics myStatistics;
    private SolutionCertificateManager mySolutionCertificateManager;
    private ConcurrentDictionary`2<Uri, ValidatedToken> myCredentialsCache;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabled>k__BackingField;
    public IProperty`1<bool> IsEnabled { get; }
    public SourceLinkCredentialManager(Lifetime lifetime, ILogger logger, IEnumerable`1<ISourceLinkCredentialProvider> credentialProviders, IEnumerable`1<ISourceLinkInfoProvider> providers, IDialogHost dialogHost, ISettingsStore settingsStore, IPrivateSourceLinkStatistics statistics);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsEnabled();
    public sealed virtual Nullable`1<AuthorizationToken> TryGetCachedAuthorizationToken(Uri uri);
    public sealed virtual Nullable`1<AuthorizationToken> TryGetAuthorizationToken(Uri uri, Func`1<bool> checkForInterrupt);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.ExternalSources.SourceLink.SourceLinkCredentialManager/<TryGetAuthorizationTokenAsync>d__13")]
public sealed virtual Task`1<Nullable`1<AuthorizationToken>> TryGetAuthorizationTokenAsync(Lifetime lifetime, Uri uri);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.ExternalSources.SourceLink.SourceLinkCredentialManager/<AskAuthorizationTokenAsync>d__14")]
public sealed virtual Task`1<Nullable`1<ValidatedToken>> AskAuthorizationTokenAsync(Lifetime lifetime, Uri uri);
    public sealed virtual void LogDownloadSuccessfully(Uri uri);
    public sealed virtual void LogCannotDownload(Uri uri);
    private Nullable`1<ValidatedToken> GetCredentials(Uri uri, ISourceLinkInfoProvider infoProvider, Func`1<bool> checkForInterrupt);
    private Task`1<Nullable`1<ValidatedToken>> GetCredentialsAsync(Lifetime lifetime, Uri uri, ISourceLinkInfoProvider infoProvider);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.ExternalSources.SourceLink.SourceLinkCredentialManager/<GetValidatedTokenAsync>d__19")]
private Task`1<Nullable`1<ValidatedToken>> GetValidatedTokenAsync(Lifetime lifetime, Uri uri, ISourceLinkInfoProvider infoProvider);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.ExternalSources.SourceLink.SourceLinkCredentialManager/<GetValidatedTokenWithoutCacheAsync>d__20")]
private Task`1<Nullable`1<ValidatedToken>> GetValidatedTokenWithoutCacheAsync(Lifetime lifetime, Uri uri, ISourceLinkInfoProvider infoProvider);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.ExternalSources.SourceLink.SourceLinkCredentialManager/<GetValidatedTokenAsync>d__21")]
private Task`1<ValidatedToken> GetValidatedTokenAsync(Lifetime lifetime, Uri uri, ISourceLinkInfoProvider provider, SourceLinkCredentials credentials);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.ExternalSources.SourceLink.SourceLinkCredentialManager/<SetCredentialsAsync>d__22")]
private Task`1<bool> SetCredentialsAsync(Lifetime lifetime, Uri authUri, SourceLinkCredentials credentials);
    [CanBeNullAttribute]
private ISourceLinkInfoProvider TryGetProvider(Uri uri);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.ExternalSources.SourceLink.SourceLinkCredentialManager/<AskAsync>d__24")]
private Task`1<Nullable`1<ValidatedToken>> AskAsync(Lifetime lifetime, Uri uri, ISourceLinkInfoProvider provider);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.ExternalSources.SourceLink.SourceLinkCredentialManager/<ValidateUriAsync>d__25")]
private Task`1<HttpStatusCode> ValidateUriAsync(Lifetime lifetime, Uri uri, AuthorizationToken token, bool supportHeadRequest);
    private Task`1<SourceLinkCredentials> ShowDialogWithCheckAsync(Lifetime lifetime, bool requiredUserName, Uri uri, string host, Func`2<SourceLinkCredentials, Task`1<HttpStatusCode>> validator);
    private Task`1<Nullable`1<ValidatedToken>> ShowDialogAsync(Lifetime parent, Uri uri, ISourceLinkInfoProvider provider);
    private static string GetShortName(Uri uri);
}
public static class JetBrains.ReSharper.ExternalSources.Utils.DecompilerSettingsUtil : object {
    public static IProperty`1<bool> GetShowCompilerGeneratedCodeProperty(Lifetime lifetime, ISettingsStore settingsStore, IThreading threading);
    public static IProperty`1<bool> GetShowCompilerGeneratedCodeProperty(Lifetime lifetime, ISettingsStore settingsStore, ApartmentForNotifications apartmentForNotifications);
    public static IProperty`1<bool> GetShowMetadataTokenValuesProperty(Lifetime lifetime, ISettingsStore settingsStore, IThreading threading);
}
public static class JetBrains.ReSharper.ExternalSources.Utils.ExternalProcessUtil : object {
    public static void LocateInFileExplorer(FileSystemPath path);
    public static void OpenInVisualStudio(FileSystemPath path);
    private static bool CheckPath(FileSystemPath path);
}
internal static class JetBrains.ReSharper.ExternalSources.Utils.ExternalSourcesPsiUtils : object {
}
public interface JetBrains.ReSharper.ExternalSources.Utils.IItemScanner`1 {
    public IProperty`1<Nullable`1<ImmutableArray`1<TItem>>> CurrentContent { get; }
    public IProperty`1<bool> IsUpdateActive { get; }
    public abstract virtual IProperty`1<Nullable`1<ImmutableArray`1<TItem>>> get_CurrentContent();
    public abstract virtual IProperty`1<bool> get_IsUpdateActive();
    public abstract virtual void RequestUpdate();
    public abstract virtual IEnumerable`1<TItem> GetItemsImmediate();
}
public interface JetBrains.ReSharper.ExternalSources.Utils.IItemWithChildren`1 {
    public ICollection`1<T> Children { get; public set; }
    public abstract virtual ICollection`1<T> get_Children();
    public abstract virtual void set_Children(ICollection`1<T> value);
}
public abstract class JetBrains.ReSharper.ExternalSources.Utils.ItemScannerBase`1 : object {
    private IShellLocks myShellLocks;
    private Property`1<Nullable`1<ImmutableArray`1<TItem>>> myCurrentContent;
    private Property`1<bool> myIsUpdateActive;
    private FileSystemPath myCacheFilePath;
    public IProperty`1<Nullable`1<ImmutableArray`1<TItem>>> CurrentContent { get; }
    public IProperty`1<bool> IsUpdateActive { get; }
    protected ItemScannerBase`1(Lifetime lifetime, ProductSettingsLocation settingsLocation, IShellLocks shellLocks, string name);
    public sealed virtual IProperty`1<Nullable`1<ImmutableArray`1<TItem>>> get_CurrentContent();
    public sealed virtual IProperty`1<bool> get_IsUpdateActive();
    public sealed virtual IEnumerable`1<TItem> GetItemsImmediate();
    public sealed virtual void RequestUpdate();
    private void Update();
    private void LoadContentFromCache();
    private void WriteContentCache(TItem[] items);
    protected abstract virtual TItem[] Scan();
    protected abstract virtual TItem ReadItem(BinaryReader reader);
    protected abstract virtual void WriteItem(BinaryWriter writer, TItem item);
    [CompilerGeneratedAttribute]
private void <RequestUpdate>b__10_0(object _);
    [CompilerGeneratedAttribute]
private void <RequestUpdate>b__10_1();
    [CompilerGeneratedAttribute]
private void <LoadContentFromCache>b__12_0();
    [CompilerGeneratedAttribute]
private void <LoadContentFromCache>b__12_1(BinaryReader reader);
}
public static class JetBrains.ReSharper.ExternalSources.Utils.RetargetingUtil : object {
    [CanBeNullAttribute]
private static ITypeElement RetargetTypeElement(ITypeElement typeElement, IPsiModule targetModule);
    [CanBeNullAttribute]
private static ITypeMember RetargetTypeMember(ITypeMember typeMember, IPsiModule targetModule);
    [CanBeNullAttribute]
private static IParameter RetargetParameter(IParameter parameter, IPsiModule targetModule);
    [CanBeNullAttribute]
private static ITypeParameter RetargetTypeParameter(ITypeParameter typeParameter, IPsiModule targetModule);
    [CanBeNullAttribute]
public static IDeclaredElement RetargetDeclaredElement(IDeclaredElement declaredElement, IPsiModule targetModule);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.ExternalSources.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
