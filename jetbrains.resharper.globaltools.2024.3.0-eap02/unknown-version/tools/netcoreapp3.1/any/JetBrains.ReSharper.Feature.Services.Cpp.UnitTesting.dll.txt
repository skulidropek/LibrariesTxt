[ZoneDefinitionAttribute]
public interface JetBrains.ReSharper.Feature.Services.Cpp.ICppUnitTestingExplorationZone {
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.BoostTest.BoostTestContentParser : object {
    private static string Header;
    private static Regex ourTestLinePattern;
    private IUnitTestRun myRun;
    private IUnitTestElement myParentElement;
    private IUnitTestElement myCurrentElement;
    private bool mySeenHeader;
    private bool mySeenModuleName;
    public Dictionary`2<string, IUnitTestElement> AllTestElements;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FinishedParsing>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private StringBuilder <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IUnitTestElement> <DiscoveredElements>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IUnitTestElement> <DisabledElements>k__BackingField;
    protected ILogger Logger { get; }
    protected bool FinishedParsing { get; protected set; }
    public string ErrorMessage { get; protected set; }
    public StringBuilder Output { get; protected set; }
    public List`1<IUnitTestElement> DiscoveredElements { get; }
    public List`1<IUnitTestElement> DisabledElements { get; }
    public BoostTestContentParser(IUnitTestRun run, ILogger logger);
    private static BoostTestContentParser();
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
protected bool get_FinishedParsing();
    [CompilerGeneratedAttribute]
protected void set_FinishedParsing(bool value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
protected void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public StringBuilder get_Output();
    [CompilerGeneratedAttribute]
protected void set_Output(StringBuilder value);
    [CompilerGeneratedAttribute]
public List`1<IUnitTestElement> get_DiscoveredElements();
    [CompilerGeneratedAttribute]
public List`1<IUnitTestElement> get_DisabledElements();
    public void ParseLine(string text);
    protected void ParseLineImpl(string text);
    private IUnitTestElement GetChild(IUnitTestElement parent, string testName);
    protected IUnitTestElement DiscoverElement(IUnitTestElement parentElement, string testName, string idFormatString, bool isDisabled, CppFileLocation locationFile, TextRange locationRange);
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.BoostTest.BoostTestElement : CppUnitTestElement {
    [CompilerGeneratedAttribute]
private ulong <ExpectedFailures>k__BackingField;
    [PersistAttribute]
public ulong ExpectedFailures { get; public set; }
    public string Kind { get; }
    public BoostTestElement(string testId, string shortName);
    [CompilerGeneratedAttribute]
public ulong get_ExpectedFailures();
    [CompilerGeneratedAttribute]
public void set_ExpectedFailures(ulong value);
    public virtual string get_Kind();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.BoostTest.BoostTestElementsSource : CppElementsSource {
    private static string BoostVersion;
    private BoostTestServiceProvider myServiceProvider;
    public BoostTestElementsSource(Lifetime lifetime, ISolution solution, IShellLocks shellLocks, BoostTestServiceProvider serviceProvider, IUnitTestDiscoveryManager discoveryManager, IUnitTestElementRepository repository, ILogger logger);
    protected virtual IUnitTestsCollector CreateUnitTestsCollector(IUnitTestElementObserver observer, IProjectFile projectFile, Func`1<bool> isInterrupted);
    protected virtual bool ShouldExploreSolution(CppGlobalSymbolCache cache);
    private static Nullable`1<int> GetTestFrameworkVersionFromPPSymbol(CppPPDefineSymbol defineSymbol);
    protected virtual void OnExploreSolution(CppGlobalSymbolCache cache);
    protected virtual void OnExploreFile(CppFile file);
}
[UnitTestProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.BoostTest.BoostTestProvider : CppTestProvider {
    internal static string BOOST_TEST_ID;
    public string ID { get; }
    public string Name { get; }
    public virtual string get_ID();
    public virtual string get_Name();
    public virtual bool IsElementOfKind(IUnitTestElement element, UnitTestElementKind elementKind);
    public virtual IUnitTestRunStrategy GetRunStrategy(IUnitTestElement element, IHostProvider hostProvider);
    public virtual bool SupportsResultEventsForParentOf(IUnitTestElement element);
}
[SolutionComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.BoostTest.BoostTestRunStrategy : CppUnitTestRunStrategy {
    [NotNullAttribute]
private IUnitTestDebugHost myDebuggerFacade;
    [NotNullAttribute]
private ICppUnitTestDebugProcessFactory myDebugProcessFactory;
    public BoostTestRunStrategy(IUnitTestDebugHost debuggerFacade, ICppUnitTestDebugProcessFactory debugProcessFactory);
    protected virtual ICppUnitTestRunner CreateUnitTestRunner();
    protected virtual ICppUnitTestRunner CreateDebugUnitTestRunner();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.BoostTest.BoostTestServiceProvider : CppUnitTestServiceProvider {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TestFrameworkVersion>k__BackingField;
    public Nullable`1<int> TestFrameworkVersion { get; public set; }
    public BoostTestServiceProvider(BoostTestProvider provider, IBoostTestRunStrategy runStrategy);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TestFrameworkVersion();
    [CompilerGeneratedAttribute]
public void set_TestFrameworkVersion(Nullable`1<int> value);
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.BoostTest.BoostTestSuiteElement : CppUnitTestSuite {
    public string Kind { get; }
    public BoostTestSuiteElement(string testId, string shortName);
    public virtual string get_Kind();
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.BoostTest.BoostTestUnitTestRunner : CppUnitTestRunner {
    private static string ListContentDotCmdLineArgument;
    private static string ListContentStdOutDotCmdLineArgument;
    private static string CmdLineArguments;
    private static string CmdLineArgumentsWithLogger;
    protected virtual void RunInternal(IUnitTestRun run);
    private Nullable`1<int> GetBoostVersion(IUnitTestRun run);
    private ValueTuple`2<Dictionary`2<string, IUnitTestElement>, Dictionary`2<string, CppUnitTestElement>> DiscoverTests(IUnitTestRun run, string pipeName, Nullable`1<int> boostVersion);
    protected virtual CppProcessWrapper CreateProcess(IUnitTestRun run, ProcessStartInfo startInfo);
    private void GetRunFilters(Dictionary`2<string, CppUnitTestElement> testsToRun, List`1<string> filters);
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.BoostTest.BoostTestXmlLogParser : object {
    private static string TestLogElement;
    private static string TestSuiteElement;
    private static string TestCaseElement;
    private static string MessageElement;
    private static string WarningElement;
    private static string ErrorElement;
    private static string FatalErrorElement;
    private static string ExceptionElement;
    private static string LastCheckpoint;
    private static string ContextElement;
    private static string FrameElement;
    private static string NameAttribute;
    private static string SkippedAttribute;
    private static string ReasonAttribute;
    private static string FileAttribute;
    private static string LineAttribute;
    private static Dictionary`2<string, string> ourElementsWithLocation;
    private static HashSet`1<string> ourElementsWithOutput;
    private ILogger myLogger;
    private IUnitTestRun myRun;
    private Dictionary`2<string, IUnitTestElement> myAllTests;
    private Stack`1<string> myElementsStack;
    private Stack`1<IUnitTestElement> myTestElementsStack;
    private Dictionary`2<IUnitTestElement, UnitTestStatus> myResults;
    private Dictionary`2<IUnitTestElement, ulong> myErrorsPerElement;
    private string myLocationFile;
    private string myLocationLine;
    private bool mySeenModuleSuite;
    private IUnitTestElement CurrentTestElement { get; }
    public BoostTestXmlLogParser(ILogger logger, Dictionary`2<string, IUnitTestElement> allTests, IUnitTestRun run);
    private static BoostTestXmlLogParser();
    private void Output(string text, TestOutputType outputType);
    private IUnitTestElement get_CurrentTestElement();
    public void Parse(Stream stream);
    private void OnElement(XmlReader reader);
    private void OnEndElement(XmlReader reader);
    private void OnText(XmlReader reader);
    private IUnitTestElement GetChildElement(string testCaseName);
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.BoostTest.Debug.BoostTestUnitTestDebugRunner : BoostTestUnitTestRunner {
    [NotNullAttribute]
private IUnitTestDebugHost myDebuggerFacade;
    [NotNullAttribute]
private ICppUnitTestDebugProcessFactory myDebugProcessFactory;
    public BoostTestUnitTestDebugRunner(IUnitTestDebugHost debuggerFacade, ICppUnitTestDebugProcessFactory debugProcessFactory);
    protected virtual CppProcessWrapper CreateProcess(IUnitTestRun run, ProcessStartInfo startInfo);
}
public interface JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.BoostTest.IBoostTestRunStrategy {
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Catch.CatchDynamicElement : CatchElementBase {
    public string Kind { get; }
    public bool IsNotRunnableStandalone { get; }
    public CatchDynamicElement(string testId, string shortName);
    public virtual string get_Kind();
    public sealed virtual bool get_IsNotRunnableStandalone();
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Catch.CatchElement : CatchElementBase {
    public string Kind { get; }
    public CatchElement(string testId, string shortName);
    public virtual string get_Kind();
}
public abstract class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Catch.CatchElementBase : CppUnitTestElement {
    protected CatchElementBase(string testId, string shortName);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Catch.CatchElementsSource : CppElementsSource {
    public CatchElementsSource(Lifetime lifetime, ISolution solution, IShellLocks shellLocks, CatchServiceProvider serviceProvider, IUnitTestDiscoveryManager discoveryManager, IUnitTestElementRepository repository, ILogger logger);
    protected virtual IUnitTestsCollector CreateUnitTestsCollector(IUnitTestElementObserver observer, IProjectFile projectFile, Func`1<bool> isInterrupted);
    protected virtual bool ShouldExploreSolution(CppGlobalSymbolCache cache);
}
[UnitTestProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Catch.CatchProvider : CppTestProvider {
    internal static string CATCH_ID;
    public string ID { get; }
    public string Name { get; }
    public virtual string get_ID();
    public virtual string get_Name();
    public virtual bool IsElementOfKind(IUnitTestElement element, UnitTestElementKind elementKind);
    public virtual IUnitTestRunStrategy GetRunStrategy(IUnitTestElement element, IHostProvider hostProvider);
}
[UnitTestElementsTransformationRuleAttribute("0")]
internal class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Catch.CatchRemoveElementsWithHideTagRule : object {
    private IUnitTestResultManager myResultManager;
    private ILogger myLogger;
    private CatchProvider myProvider;
    public CatchRemoveElementsWithHideTagRule(IUnitTestResultManager resultManager, ILogger logger, CatchProvider provider);
    public sealed virtual IUnitTestElementCriterion Apply(IUnitTestElementCriterion criterion, IUnitTestSession session, IHostProvider hostProvider);
    public sealed virtual void Apply(ISet`1<IUnitTestElement> elements, IUnitTestSession session, IHostProvider hostProvider);
    [CompilerGeneratedAttribute]
internal static bool <Apply>g__IsHiddenTest|5_0(IUnitTestElement element);
    [CompilerGeneratedAttribute]
internal static bool <Apply>g__IsBenchmarkTest|5_1(IUnitTestElement element);
}
[SolutionComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Catch.CatchRunStrategy : CppUnitTestRunStrategy {
    [NotNullAttribute]
private IUnitTestDebugHost myDebuggerFacade;
    [NotNullAttribute]
private ICppUnitTestDebugProcessFactory myDebugProcessFactory;
    public CatchRunStrategy(IUnitTestDebugHost debuggerFacade, ICppUnitTestDebugProcessFactory debugProcessFactory);
    protected virtual ICppUnitTestRunner CreateUnitTestRunner();
    protected virtual ICppUnitTestRunner CreateDebugUnitTestRunner();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Catch.CatchServiceProvider : CppUnitTestServiceProvider {
    public CatchServiceProvider(CatchProvider provider, ICatchRunStrategy runStrategy);
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Catch.CatchTemplateElement : CatchElementBase {
    public string Kind { get; }
    public CatchTemplateElement(string testId, string shortName);
    public virtual string get_Kind();
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Catch.CatchTemplateTestElement : CatchElementBase {
    public string Kind { get; }
    public CatchTemplateTestElement(string testId, string shortName);
    public virtual string get_Kind();
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Catch.CatchUnitTestRunner : CppUnitTestRunner {
    private static string LibIdentifyCmdLineArguments;
    private static string ListTestsCatch2CmdLineArguments;
    private static string ListTestsCatch3CmdLineArguments;
    private static string CmdLineArguments;
    private static Regex ourVersionPattern;
    private static CatchUnitTestRunner();
    protected virtual void RunInternal(IUnitTestRun run);
    private Nullable`1<int> TestCatchVersion(IUnitTestRun run);
    private void WriteTestNames(List`1<string> testsToRun, FileSystemPath inputFile);
    private string EscapeTestName(string testName);
    private List`1<CppUnitTestElement> DiscoverTestsCatch2(IUnitTestRun run);
    private CatchElement CreateElement(IUnitTestRun run, List`1<CppUnitTestElement> elements, string name, string fileName, int lineNumber);
    private List`1<CppUnitTestElement> DiscoverTestsCatch3(IUnitTestRun run);
    protected virtual CppProcessWrapper CreateProcess(IUnitTestRun run, ProcessStartInfo startInfo);
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Catch.CatchUtil : object {
    public static string HideTag;
    public static string BenchmarkTag;
    public static UnitTestElementCategory HideCategory;
    public static UnitTestElementCategory BenchmarkCategory;
    private static CatchUtil();
    public static HashSet`1<string> ParseTags(string str);
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Catch.CatchXmlLogParser : object {
    private static string CatchElement;
    private static string GroupElement;
    private static string TestCaseElement;
    private static string SectionElement;
    private static string OverallResultsElement;
    private static string OverallResultElement;
    private static string ExceptionElement;
    private static string InfoElement;
    private static string WarningElement;
    private static string FailureElement;
    private static string FatalErrorConditionElement;
    private static string ExpressionElement;
    private static string OriginalElement;
    private static string ExpandedElement;
    private static string StdOutElement;
    private static string StdErrElement;
    private static string ExpectedFailuresAttribute;
    private static string FailuresAttribute;
    private static string DurationInSecondsAttribute;
    private static string NameAttribute;
    private static string SuccessAttribute;
    private static string FilenameAttribute;
    private static string LineAttribute;
    private static string TypeAttribute;
    private ILogger myLogger;
    private IUnitTestRun myRun;
    private Stack`1<CppUnitTestElement> myElementsStack;
    private Dictionary`2<string, CppUnitTestElement> myElementsByTestId;
    private Dictionary`2<IUnitTestElement, double> myDurations;
    private string myExpressionType;
    private TestOutputType myTestOutputType;
    public CatchXmlLogParser(ILogger logger, IUnitTestRun run);
    public void Parse(Stream stream);
    private void OnElement(XmlReader reader);
    private string FormatLocation(XmlReader reader);
    private void OnEndElement(XmlReader reader);
    private void OnText(XmlReader reader);
    private void Output(string text);
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Catch.Debug.CatchUnitTestDebugRunner : CatchUnitTestRunner {
    private IUnitTestDebugHost myDebuggerFacade;
    private ICppUnitTestDebugProcessFactory myDebugProcessFactory;
    public CatchUnitTestDebugRunner(IUnitTestDebugHost debuggerFacade, ICppUnitTestDebugProcessFactory debugProcessFactory);
    protected virtual CppProcessWrapper CreateProcess(IUnitTestRun run, ProcessStartInfo startInfo);
}
public interface JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Catch.ICatchRunStrategy {
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.CppDebugProcessWrapper : CppProcessWrapper {
    private Thread myWaitThread;
    public CppDebugProcessWrapper(int processId, Stream stdOut);
    protected virtual void WaitForExit();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0();
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.CppElementLocation : ValueType {
    public static CppElementLocation Empty;
    [CompilerGeneratedAttribute]
private CppFileLocation <File>k__BackingField;
    [CompilerGeneratedAttribute]
private TextRange <Range>k__BackingField;
    [CompilerGeneratedAttribute]
private UnitTestElementNamespace <Namespace>k__BackingField;
    public CppFileLocation File { get; }
    public TextRange Range { get; }
    public UnitTestElementNamespace Namespace { get; }
    public CppElementLocation(CppFileLocation file, TextRange range, UnitTestElementNamespace ns);
    private static CppElementLocation();
    [CompilerGeneratedAttribute]
public CppFileLocation get_File();
    [CompilerGeneratedAttribute]
public TextRange get_Range();
    [CompilerGeneratedAttribute]
public UnitTestElementNamespace get_Namespace();
    public sealed virtual bool Equals(CppElementLocation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.CppElementLocationMarshaller : object {
    public sealed virtual void Marshal(UnsafeWriter writer, CppElementLocation value);
    public sealed virtual CppElementLocation Unmarshal(UnsafeReader reader);
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.CppElementLocationsCoalescer : object {
    public sealed virtual UnitTestElementChanges Merge(IUnitTestElement target, IUnitTestElement original, IUnitTestElementSource source);
}
public abstract class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.CppElementsSource : object {
    private Lifetime myLifetime;
    private ISolution mySolution;
    private IShellLocks myShellLocks;
    private IUnitTestDiscoveryManager myDiscoveryManager;
    private Lazy`1<CppGlobalCacheImpl> myGlobalCache;
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private IUnitTestProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestElementRepository <Repository>k__BackingField;
    public IUnitTestProvider Provider { get; }
    public CppGlobalCacheImpl GlobalCache { get; }
    protected IUnitTestElementRepository Repository { get; }
    protected CppElementsSource(Lifetime lifetime, ISolution solution, IShellLocks shellLocks, IUnitTestProvider provider, IUnitTestDiscoveryManager discoveryManager, IUnitTestElementRepository repository, ILogger logger);
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestProvider get_Provider();
    public CppGlobalCacheImpl get_GlobalCache();
    [CompilerGeneratedAttribute]
protected IUnitTestElementRepository get_Repository();
    protected abstract virtual IUnitTestsCollector CreateUnitTestsCollector(IUnitTestElementObserver observer, IProjectFile projectFile, Func`1<bool> isInterrupted);
    protected abstract virtual bool ShouldExploreSolution(CppGlobalSymbolCache cache);
    protected virtual void OnExploreSolution(CppGlobalSymbolCache cache);
    protected virtual void OnExploreFile(CppFile file);
    public sealed virtual Task ProcessExternal(CancellationToken ct);
    public sealed virtual void ProcessFile(IFile psiFile, IUnitTestElementObserverOnFile observer, Func`1<bool> interrupted);
    public sealed virtual void ProcessFile(CppFileSymbolTable symbolTable, IProjectFile projectFile, IUnitTestElementObserver observer, Func`1<bool> interrupted);
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.CppProcessWrapper : object {
    public static int MaxCommandLineLength;
    protected Process myProcess;
    [CompilerGeneratedAttribute]
private int <ExitCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <StdOut>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <myLogger>k__BackingField;
    public int ExitCode { get; protected set; }
    public Stream StdOut { get; }
    public IntPtr ProcessHandle { get; }
    protected ILogger myLogger { get; }
    protected int ProcessId { get; }
    public CppProcessWrapper(Process process, Stream stdOut);
    [CompilerGeneratedAttribute]
public int get_ExitCode();
    [CompilerGeneratedAttribute]
protected void set_ExitCode(int value);
    [CompilerGeneratedAttribute]
public Stream get_StdOut();
    public IntPtr get_ProcessHandle();
    [CompilerGeneratedAttribute]
protected ILogger get_myLogger();
    protected int get_ProcessId();
    public sealed virtual void Dispose();
    public static CppProcessWrapper Start(ProcessStartInfo startInfo);
    public void Wait();
    protected virtual void WaitForExit();
    public virtual void Abort();
    public static string GetCommandLine(ProcessStartInfo startInfo);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.CppRunSettingsProvider : object {
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <TestCommandArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <MergeEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <UseDebuggingCommandArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <UseNamedPipes>k__BackingField;
    protected IProperty`1<string> Command { get; }
    protected IProperty`1<string> TestCommandArguments { get; }
    protected IProperty`1<string> WorkingDirectory { get; }
    protected IProperty`1<string> Environment { get; }
    protected IProperty`1<bool> MergeEnvironment { get; }
    protected IProperty`1<bool> UseDebuggingCommandArguments { get; }
    protected IProperty`1<bool> UseNamedPipes { get; }
    public CppRunSettingsProvider(Lifetime lifetime, IApplicationWideContextBoundSettingStore settingsStore);
    [CompilerGeneratedAttribute]
protected IProperty`1<string> get_Command();
    [CompilerGeneratedAttribute]
protected IProperty`1<string> get_TestCommandArguments();
    [CompilerGeneratedAttribute]
protected IProperty`1<string> get_WorkingDirectory();
    [CompilerGeneratedAttribute]
protected IProperty`1<string> get_Environment();
    [CompilerGeneratedAttribute]
protected IProperty`1<bool> get_MergeEnvironment();
    [CompilerGeneratedAttribute]
protected IProperty`1<bool> get_UseDebuggingCommandArguments();
    [CompilerGeneratedAttribute]
protected IProperty`1<bool> get_UseNamedPipes();
    public virtual string GetCommand(IProject project);
    public virtual string GetTestCommandArguments(IProject project);
    public virtual string GetWorkingDirectory(IProject project);
    public virtual string GetEnvironment(IProject project);
    public virtual bool GetMergeEnvironment(IProject project);
    public virtual bool GetUseDebuggingCommandArguments(IProject project);
    public virtual bool GetUseNamedPipes();
    public virtual bool IsAvailable();
    private static VirtualFileSystemPath GetSolutionDirectory(IProject project);
    public virtual string GetDebuggerCommandArguments(IProject project);
}
[OptionsPageAttribute("C++ Tests", "C++ Tests", "JetBrains.ReSharper.Psi.Resources.PsiSymbolsThemedIcons/CppSource")]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.CppTestPage : CustomSimpleOptionsPage {
    private static string PID;
    public CppTestPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, IEnumerable`1<CppTestProvider> providers, ISolution solution);
}
public abstract class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.CppTestProvider : object {
    public string ID { get; }
    public string Name { get; }
    public abstract virtual string get_ID();
    public abstract virtual string get_Name();
    public sealed virtual bool IsElementOfKind(IDeclaredElement declaredElement, UnitTestElementKind elementKind);
    public abstract virtual bool IsElementOfKind(IUnitTestElement element, UnitTestElementKind elementKind);
    public sealed virtual bool IsSupported(IHostProvider hostProvider, IProject project, TargetFrameworkId targetFrameworkId);
    public sealed virtual bool IsSupported(IProject project, TargetFrameworkId targetFrameworkId);
    public virtual bool SupportsResultEventsForParentOf(IUnitTestElement element);
    public abstract virtual IUnitTestRunStrategy GetRunStrategy(IUnitTestElement element, IHostProvider hostProvider);
}
[SettingsKeyAttribute("JetBrains.ReSharper.UnitTestFramework.Settings.UnitTestingSettings", "JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Resources.Strings", "SettingsForCUnitTestProvidersSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.CppTestProviderSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Resources.Strings", "CommandSettingDescription")]
public string Command;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Resources.Strings", "CommandArgumentsSettingDescription")]
public string CommandArguments;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Resources.Strings", "WorkingDirectorySettingDescription")]
public string WorkingDirectory;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Resources.Strings", "EnvironmentSettingDescription")]
public string Environment;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Resources.Strings", "MergeEnvironmentSettingDescription")]
public bool MergeEnvironment;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Resources.Strings", "UseCommandLineArgumentsFromDebuggingCommandArgumentsSettingDescription")]
public bool UseDebuggingCommandArguments;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Resources.Strings", "UseNamedPipesSettingDescription")]
public bool UseNamedPipes;
}
public static class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.CppTestUtil : object {
    private static int MaxEnvironmentVariableLength;
    public static XmlReaderSettings XmlReaderSettings;
    private static string InsertedTextToEmulateClangFormatChange;
    private static CppTestUtil();
    public static TextRange GetTestTextRange(ICppSymbol symbol);
    public static string GetStringLiteralValue(ICppExpression arg);
    public static UnitTestElementNamespace CreateUnitTestNamespace(ICppParserSymbol symbol, bool dropLastNamespace, Func`2<string, bool> isIgnoredNamespaceFunc);
    public static List`1<string> GetFilterEnvironmentVariables(IEnumerable`1<string> tests, char separator);
    public static List`1<string> GetFilterCommandLines(IEnumerable`1<string> tests, int cmdLineLength, string filterArgument, char filterSeparator);
    public static string GeneratePipeName();
    public static bool UseNamedPipes(IUnitTestRun run);
    public static string GeneratePipeOrTemporaryFileName(IUnitTestRun run);
    public static UnitTestElementLocation GetElementDispositionFromFileAndLine(IProject project, string fileName, int lineNumber);
    public static void GetElementDispositionFromFileAndLine(IUnitTestRun run, string fileName, int lineNumber, CppFileLocation& fileLocation, TextRange& textRange);
    public static Dictionary`2<string, CppUnitTestElement> BuildElementByIdMap(IUnitTestRun run);
    public static void EmulateClangFormat_DoPsiModificationOnCommit(Lifetime lifetime, ISolution solution);
    public static void EmulateClangFormat_CleanupTextControlBeforeDump(ITextControl textControl);
    public static void EmulateClangFormat_CleanupTextControlBeforeDump(IDocument document);
    [CompilerGeneratedAttribute]
internal static int <GetElementDispositionFromFileAndLine>g__GetIndexOfNonWhitespace|10_0(string line);
}
public abstract class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.CppUnitTestElement : UnitTestElement {
    [CompilerGeneratedAttribute]
private CppElementLocation <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CoalescePropertyAttribute("JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.CppElementLocationsCoalescer")]
[PersistAttribute("JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.CppElementLocationMarshaller")]
public CppElementLocation Location { get; public set; }
    [PersistAttribute]
public string DisplayName { get; public set; }
    public string ShortName { get; }
    protected CppUnitTestElement(string testId, string shortName);
    [CompilerGeneratedAttribute]
public CppElementLocation get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(CppElementLocation value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    public virtual string get_ShortName();
    public virtual IDeclaredElement GetDeclaredElement();
    public virtual UnitTestElementNamespace GetNamespace();
    public virtual IReadOnlyCollection`1<IUnitTestElement> GetRelatedUnitTestElements();
    public virtual IEnumerable`1<IProjectFile> GetProjectFiles();
    public virtual IEnumerable`1<UnitTestElementLocation> GetLocations();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.CppUnitTestFileExplorer : object {
    private ISolution mySolution;
    private IEnumerable`1<ICppElementsSource> myExplorers;
    private IUnitTestProviderManager myProviderManager;
    private IUnitTestDiscoveryManager myDiscoveryManager;
    public CppUnitTestFileExplorer(ISolution solution, IEnumerable`1<ICppElementsSource> explorers, IUnitTestProviderManager providerManager, IUnitTestDiscoveryManager discoveryManager);
    public virtual void Explore(CppFileSymbolTable table);
    [CompilerGeneratedAttribute]
internal static bool <Explore>g__IsInterrupted|5_0();
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.CppUnitTestServiceProvider : object {
    [CompilerGeneratedAttribute]
private IUnitTestProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestRunStrategy <RunStrategy>k__BackingField;
    public IUnitTestProvider Provider { get; }
    public IUnitTestRunStrategy RunStrategy { get; }
    public CppUnitTestServiceProvider(IUnitTestProvider provider, IUnitTestRunStrategy runStrategy);
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestProvider get_Provider();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestRunStrategy get_RunStrategy();
}
public abstract class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.CppUnitTestSuite : CppUnitTestElement {
    private ICollection`1<IProjectFile> myProjectFiles;
    protected CppUnitTestSuite(string testId, string testCaseName);
    internal CppUnitTestSuite Clone();
    internal void SetProjectFilesForDiscovery(ISet`1<IProjectFile> projectFiles);
    public virtual IEnumerable`1<IProjectFile> GetProjectFiles();
    public virtual IEnumerable`1<UnitTestElementLocation> GetLocations();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.CppXmlReaderUtil : object {
    [ExtensionAttribute]
public static int GetIntValue(XmlReader reader, string attr);
    [ExtensionAttribute]
public static int GetIntValue(XmlReader reader, string attr, int defaultValue);
    [ExtensionAttribute]
public static double GetDoubleValue(XmlReader reader, string attr);
    [ExtensionAttribute]
public static Nullable`1<double> TryGetDoubleValue(XmlReader reader, string attr);
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Doctest.Debug.DoctestUnitTestDebugRunner : DoctestUnitTestRunner {
    private IUnitTestDebugHost myDebuggerFacade;
    private ICppUnitTestDebugProcessFactory myDebugProcessFactory;
    public DoctestUnitTestDebugRunner(IUnitTestDebugHost debuggerFacade, ICppUnitTestDebugProcessFactory debugProcessFactory);
    protected virtual CppProcessWrapper CreateProcess(IUnitTestRun run, ProcessStartInfo startInfo);
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Doctest.DoctestDynamicElement : CppUnitTestElement {
    public string Kind { get; }
    public bool IsNotRunnableStandalone { get; }
    public DoctestDynamicElement(string testId, string shortName);
    public virtual string get_Kind();
    public sealed virtual bool get_IsNotRunnableStandalone();
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Doctest.DoctestElement : CppUnitTestElement {
    public string Kind { get; }
    public DoctestElement(string testId, string shortName);
    public virtual string get_Kind();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Doctest.DoctestElementsSource : CppElementsSource {
    private static string DoctestGuardName;
    public DoctestElementsSource(Lifetime lifetime, ISolution solution, IShellLocks shellLocks, DoctestServiceProvider serviceProvider, IUnitTestDiscoveryManager discoveryManager, IUnitTestElementRepository repository, ILogger logger);
    protected virtual IUnitTestsCollector CreateUnitTestsCollector(IUnitTestElementObserver observer, IProjectFile projectFile, Func`1<bool> isInterrupted);
    protected virtual bool ShouldExploreSolution(CppGlobalSymbolCache cache);
}
[UnitTestProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Doctest.DoctestProvider : CppTestProvider {
    internal static string DOCTEST_ID;
    public string ID { get; }
    public string Name { get; }
    public virtual string get_ID();
    public virtual string get_Name();
    public virtual bool IsElementOfKind(IUnitTestElement element, UnitTestElementKind elementKind);
    public virtual IUnitTestRunStrategy GetRunStrategy(IUnitTestElement element, IHostProvider hostProvider);
    public virtual bool SupportsResultEventsForParentOf(IUnitTestElement element);
}
[SolutionComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Doctest.DoctestRunStrategy : CppUnitTestRunStrategy {
    [NotNullAttribute]
private IUnitTestDebugHost myDebuggerFacade;
    [NotNullAttribute]
private ICppUnitTestDebugProcessFactory myDebugProcessFactory;
    public DoctestRunStrategy(IUnitTestDebugHost debuggerFacade, ICppUnitTestDebugProcessFactory debugProcessFactory);
    protected virtual ICppUnitTestRunner CreateUnitTestRunner();
    protected virtual ICppUnitTestRunner CreateDebugUnitTestRunner();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Doctest.DoctestServiceProvider : CppUnitTestServiceProvider {
    public DoctestServiceProvider(DoctestProvider provider, IDoctestRunStrategy runStrategy);
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Doctest.DoctestSuiteElement : CppUnitTestSuite {
    public string Kind { get; }
    public DoctestSuiteElement(string testId, string shortName);
    public virtual string get_Kind();
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Doctest.DoctestUnitTestRunner : CppUnitTestRunner {
    private static string CmdLineArguments;
    protected virtual void RunInternal(IUnitTestRun run);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Doctest.DoctestUnitTestRunner/<GetTestCasesFilter>d__2")]
private IEnumerable`1<HashSet`1<string>> GetTestCasesFilter(List`1<string> testsToRun, int cmdLineLength);
    protected virtual CppProcessWrapper CreateProcess(IUnitTestRun run, ProcessStartInfo startInfo);
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Doctest.DoctestXmlLogParser : object {
    private static string DoctestElement;
    private static string TestCaseElement;
    private static string TestSuiteElement;
    private static string SubCaseElement;
    private static string OverallResultsAssertsElement;
    private static string ExceptionElement;
    private static string ExpectedExceptionElement;
    private static string ExpressionElement;
    private static string OriginalElement;
    private static string ExpandedElement;
    private static string MessageElement;
    private static string InfoElement;
    private static string TextElement;
    private static string NameAttribute;
    private static string FailuresAttribute;
    private static string ExpectedFailuresAttribute;
    private static string DurationAttribute;
    private static string SuccessAttribute;
    private static string FilenameAttribute;
    private static string LineAttribute;
    private static string TypeAttribute;
    private static string ShouldFailAttribute;
    private static string MayFailAttribute;
    private ILogger myLogger;
    private IUnitTestRun myRun;
    private Dictionary`2<IUnitTestElement, double> myDurations;
    private Stack`1<CppUnitTestElement> myElementsStack;
    private string myTestSuite;
    private Dictionary`2<string, CppUnitTestElement> myElementsByTestId;
    private bool mySeenException;
    private bool mySeenErrorInSubcase;
    private bool myInsideExpressionNode;
    private bool myTestCaseShouldFail;
    private bool myTestCaseMayFail;
    private string myExpressionType;
    public DoctestXmlLogParser(ILogger logger, IUnitTestRun run);
    public void Parse(Stream stream);
    private void OnElement(XmlReader reader);
    private string GetTestCaseTemplateName(string name);
    private UnitTestStatus GetTestCaseStatus(int failures, int expectedFailures);
    private string FormatLocation(XmlReader reader);
    private void OnEndElement(XmlReader reader);
    private void OnText(XmlReader reader);
    private void Output(string text);
}
public interface JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Doctest.IDoctestRunStrategy {
}
[CannotApplyEqualityOperatorAttribute]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Execution.CppRuntimeDescriptor : object {
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetPlatform <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutablePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandLineArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MergeEnvironment>k__BackingField;
    public IProject Project { get; }
    public TargetPlatform Platform { get; }
    public bool HasNativeCode { get; }
    public string ExecutablePath { get; }
    public string WorkingDirectory { get; }
    public string CommandLineArguments { get; }
    public string Environment { get; }
    public bool MergeEnvironment { get; }
    public CppRuntimeDescriptor(IProject project, TargetPlatform targetPlatform, string executablePath, string workingDirectory, string commandLineArguments, string environment, bool mergeEnvironment);
    [CompilerGeneratedAttribute]
public sealed virtual IProject get_Project();
    [CompilerGeneratedAttribute]
public sealed virtual TargetPlatform get_Platform();
    public sealed virtual bool get_HasNativeCode();
    [CompilerGeneratedAttribute]
public string get_ExecutablePath();
    [CompilerGeneratedAttribute]
public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public string get_CommandLineArguments();
    [CompilerGeneratedAttribute]
public string get_Environment();
    [CompilerGeneratedAttribute]
public bool get_MergeEnvironment();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public bool Equals(CppRuntimeDescriptor other);
    public virtual string ToString();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Execution.CppUnitTestDefaultDebugProcessFactory : object {
    [CanBeNullAttribute]
public virtual CppProcessWrapper CreateDebugProcess(Lifetime lifetime, ICreateProcessDebugSession session);
}
public abstract class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Execution.CppUnitTestRunner : object {
    private static Dictionary`2<UInt32, string> ourExitCodes;
    private static UInt32 EXIT_CODE_TERMINATED;
    protected object Lock;
    private CppProcessWrapper myRunningProcess;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WasAborted>k__BackingField;
    protected ILogger Logger { get; }
    protected bool WasAborted { get; private set; }
    private static CppUnitTestRunner();
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
private void set_WasAborted(bool value);
    [CompilerGeneratedAttribute]
protected bool get_WasAborted();
    protected abstract virtual void RunInternal(IUnitTestRun run);
    public sealed virtual void Run(IUnitTestRun run);
    protected void ReportError(IUnitTestRun run, Exception e, bool showMessageBox, string message, string description);
    protected static string ParsePath(string pathStr, VirtualFileSystemPath projectLocation, string description);
    public static Dictionary`2<string, string> SplitEnvironmentString(string environment);
    protected CppProcessWrapper CreateNoDebugProcess(IUnitTestRun run, ProcessStartInfo startInfo);
    protected static ProcessStartInfo GetProcessStartInfo(IRuntimeDescriptor runtimeEnvironment, string extraCommandLineArguments, Dictionary`2<string, string> environmentVariables);
    protected void RunProcess(Func`1<CppProcessWrapper> createProcessFunc, Action`1<CppProcessWrapper> callback);
    private void RunProcessWithNamedPipe(IUnitTestRun run, string pipeName, Func`1<CppProcessWrapper> createProcessFunc, Action`2<CppProcessWrapper, Stream> callback);
    protected void RunProcessWithNamedPipeOrTemporaryFile(IUnitTestRun run, string pipeOrFileName, Func`1<CppProcessWrapper> createProcessFunc, Action`2<CppProcessWrapper, Stream> callback);
    protected void LogProcessOutput(IUnitTestRun run, CppProcessWrapper process);
    protected void ReadLines(CppProcessWrapper process, Action`1<string> callback, Stream inputStream);
    protected void RunProcessWithLineCallback(Func`1<CppProcessWrapper> createProcessFunc, Action`1<string> callback);
    protected void RunInSeparateThread(CppProcessWrapper process, Action[] callbacks);
    public sealed virtual void Cancel();
    public sealed virtual void Abort();
    [CompilerGeneratedAttribute]
private Thread <RunInSeparateThread>b__25_0(Action c);
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Execution.CppUnitTestRunnerException : Exception {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowMessageBox>k__BackingField;
    public string Description { get; public set; }
    public bool ShowMessageBox { get; public set; }
    public CppUnitTestRunnerException(string message, Exception inner);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowMessageBox();
    [CompilerGeneratedAttribute]
public void set_ShowMessageBox(bool value);
}
public abstract class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Execution.CppUnitTestRunStrategy : object {
    [NotNullAttribute]
private Key`1<ICppUnitTestRunner> myRunnerKey;
    public virtual IRuntimeDescriptor GetRuntimeDescriptor(IUnitTestLaunch launch, IUnitTestElement element);
    public virtual IRuntimeDescriptor GetRuntimeDescriptor(IUnitTestLaunch launch, IProject project, TargetFrameworkId targetFrameworkId, IUnitTestElement element);
    public virtual Task Run(IUnitTestRun run);
    protected abstract virtual ICppUnitTestRunner CreateUnitTestRunner();
    protected abstract virtual ICppUnitTestRunner CreateDebugUnitTestRunner();
    protected Task DoRun(Lifetime lifetime, ITaskRunnerHostController runController, IUnitTestRun run, IUnitTestLaunch launch);
    public sealed virtual void Cancel(IUnitTestRun run);
    public sealed virtual void Abort(IUnitTestRun run);
    public virtual bool RequiresProjectBuild(IProject project);
    public sealed virtual bool RequiresProjectExplorationAfterBuild(IProject project);
    public virtual IProject GetProjectForPropertiesRefreshBeforeLaunch(IUnitTestElement element);
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Execution.CppVsDebugProcessWrapper : CppDebugProcessWrapper {
    private ICreateProcessDebugSession mySession;
    public CppVsDebugProcessWrapper(ICreateProcessDebugSession session);
    private static Stream CreateStream(IPreparedProcess process);
    public virtual void Abort();
}
public interface JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Execution.ICppUnitTestDebugProcessFactory {
    public abstract virtual CppProcessWrapper CreateDebugProcess(Lifetime lifetime, ICreateProcessDebugSession session);
}
public interface JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Execution.ICppUnitTestRunner {
    public abstract virtual void Run(IUnitTestRun run);
    public abstract virtual void Cancel();
    public abstract virtual void Abort();
}
[ZoneMarkerAttribute]
internal class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Execution.ZoneMarker : object {
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.GTest.Debug.GTestUnitTestDebugRunner : GTestUnitTestRunner {
    private IUnitTestDebugHost myDebuggerFacade;
    private ICppUnitTestDebugProcessFactory myDebugProcessFactory;
    public GTestUnitTestDebugRunner(IUnitTestDebugHost debuggerFacade, ICppUnitTestDebugProcessFactory debugProcessFactory);
    protected virtual CppProcessWrapper CreateProcess(IUnitTestRun run, ProcessStartInfo startInfo);
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.GTest.GTestDynamicTest : CppUnitTestElement {
    public string Kind { get; }
    public GTestDynamicTest(string testId, string name);
    public virtual string get_Kind();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.GTest.GTestElementsSource : CppElementsSource {
    public GTestElementsSource(Lifetime lifetime, ISolution solution, IShellLocks shellLocks, GTestServiceProvider serviceProvider, IUnitTestDiscoveryManager discoveryManager, IUnitTestElementRepository repository, ILogger logger);
    protected virtual IUnitTestsCollector CreateUnitTestsCollector(IUnitTestElementObserver observer, IProjectFile projectFile, Func`1<bool> isInterrupted);
    protected virtual bool ShouldExploreSolution(CppGlobalSymbolCache cache);
}
[UnitTestProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.GTest.GTestProvider : CppTestProvider {
    internal static string GTEST_ID;
    public string ID { get; }
    public string Name { get; }
    public virtual string get_ID();
    public virtual string get_Name();
    public virtual bool IsElementOfKind(IUnitTestElement element, UnitTestElementKind elementKind);
    public virtual IUnitTestRunStrategy GetRunStrategy(IUnitTestElement element, IHostProvider hostProvider);
}
[SolutionComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.GTest.GTestRunStrategy : CppUnitTestRunStrategy {
    [NotNullAttribute]
private IUnitTestDebugHost myDebuggerFacade;
    [NotNullAttribute]
private ICppUnitTestDebugProcessFactory myDebugProcessFactory;
    public GTestRunStrategy(IUnitTestDebugHost debuggerFacade, ICppUnitTestDebugProcessFactory debugProcessFactory);
    protected virtual ICppUnitTestRunner CreateUnitTestRunner();
    protected virtual ICppUnitTestRunner CreateDebugUnitTestRunner();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.GTest.GTestServiceProvider : CppUnitTestServiceProvider {
    public GTestServiceProvider(GTestProvider provider, IGTestRunStrategy runStrategy);
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.GTest.GTestTest : CppUnitTestElement {
    [CompilerGeneratedAttribute]
private bool <IsDisabled>k__BackingField;
    public string Kind { get; }
    [PersistAttribute]
public bool IsDisabled { get; public set; }
    public GTestTest(string testId, string testName);
    public virtual string get_Kind();
    [CompilerGeneratedAttribute]
public bool get_IsDisabled();
    [CompilerGeneratedAttribute]
public void set_IsDisabled(bool value);
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.GTest.GTestTestCase : CppUnitTestSuite {
    public string Kind { get; }
    public GTestTestCase(string testId, string testCaseName);
    public virtual string get_Kind();
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.GTest.GTestUnitTestRunner : CppUnitTestRunner {
    private static string StatusOk;
    private static string StatusRun;
    private static string StatusFailed;
    private static string StatusSkipped;
    private static string GTestFilterEnvironmentVariable;
    private static Regex ourTestPattern;
    private static Regex ourListTestsPattern;
    private IUnitTestElement myCurrentElement;
    private Dictionary`2<string, IUnitTestElement> myElementByIdMap;
    private Dictionary`2<IUnitTestElement, ElementInfo> myElementInfos;
    private static GTestUnitTestRunner();
    protected virtual void RunInternal(IUnitTestRun run);
    private IList`1<TestInfo> DiscoverTests(IUnitTestRun run, string filterString);
    protected Dictionary`2<string, string> GetFilterEnvironment(string filterString);
    private HashSet`1<IUnitTestElement> CreateDynamicTests(IUnitTestRun run, IList`1<TestInfo> tests, HashSet`1<string> testsToRun);
    protected virtual CppProcessWrapper CreateProcess(IUnitTestRun run, ProcessStartInfo startInfo);
    protected void ProcessOnOutputDataReceived(IUnitTestRun run, string text, HashSet`1<IUnitTestElement> dynamicElements);
}
public static class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.GTest.GTestUtil : object {
    private static string DisabledPrefix;
    public static bool IsDisabled(String& name);
}
public interface JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.GTest.IGTestRunStrategy {
}
public interface JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.ICppElementsSource {
    public IUnitTestProvider Provider { get; }
    public abstract virtual IUnitTestProvider get_Provider();
    public abstract virtual void ProcessFile(CppFileSymbolTable symbolTable, IProjectFile projectFile, IUnitTestElementObserver observer, Func`1<bool> interrupted);
}
public interface JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.ICppUnitTestElementWithDisposition {
}
[ZoneDefinitionAttribute]
public interface JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.ICppUnitTestingZone {
}
public interface JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.ICppUnitTestServiceProvider {
    public IUnitTestProvider Provider { get; }
    public IUnitTestRunStrategy RunStrategy { get; }
    public abstract virtual IUnitTestProvider get_Provider();
    public abstract virtual IUnitTestRunStrategy get_RunStrategy();
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string AdditionalCommandLineArguments_StringOption_ToolTip { get; }
    public static string Command_StringOption_Text { get; }
    public static string CommandArguments_StringOption_Text { get; }
    public static string CommandArgumentsSettingDescription { get; }
    public static string CommandSettingDescription { get; }
    public static string CTestsOptionPageTitle { get; }
    public static string DeterminesWhetherTheVariablesThatAre_BoolOption_ToolTip { get; }
    public static string EitherNamedPipesOrTemporaryFilesCan_BoolOption_ToolTip { get; }
    public static string Environment_StringOption_Text { get; }
    public static string EnvironmentSettingDescription { get; }
    public static string IfCommandIsNotSetReSharperWillGetThe_Text_Text { get; }
    public static string MergeEnvironment_BoolOption_Text { get; }
    public static string MergeEnvironmentSettingDescription { get; }
    public static string PathToTheTestBinaryAbsoluteOrRelative_StringOption_ToolTip { get; }
    public static string PathToTheWorkingDirectoryAbsoluteOr_StringOption_ToolTip { get; }
    public static string SettingsForCUnitTestProvidersSettingDescription { get; }
    public static string StressTestsAreNotSupported_Text { get; }
    public static string TestIsDisabledWithEAutomationTestFlags_Text { get; }
    public static string TestRunConfiguration_Header_Text { get; }
    public static string TheListOfEnvironmentVariablesToUseWhen_StringOption_ToolTip { get; }
    public static string ThisTestIsDisabledForCurrentlySelected_Text { get; }
    public static string UnrealEngineCanTRunTestWithSymbol_Text { get; }
    public static string UseCommandLineArgumentsFromDebuggingCommandArgumentsSettingDescription { get; }
    public static string UseCommandLineArgumentsFromTheDebugging_BoolOption_Text { get; }
    public static string UseNamedPipesSettingDescription { get; }
    public static string UseNamedPipesToCommunicateWithChild_BoolOption_Text { get; }
    public static string WhenThisSettingIsOnTheValueOfTheDebugging_BoolOption_ToolTip { get; }
    public static string WorkingDirectory_StringOption_Text { get; }
    public static string WorkingDirectorySettingDescription { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_AdditionalCommandLineArguments_StringOption_ToolTip();
    public static string get_Command_StringOption_Text();
    public static string get_CommandArguments_StringOption_Text();
    public static string get_CommandArgumentsSettingDescription();
    public static string get_CommandSettingDescription();
    public static string get_CTestsOptionPageTitle();
    public static string get_DeterminesWhetherTheVariablesThatAre_BoolOption_ToolTip();
    public static string get_EitherNamedPipesOrTemporaryFilesCan_BoolOption_ToolTip();
    public static string get_Environment_StringOption_Text();
    public static string get_EnvironmentSettingDescription();
    public static string get_IfCommandIsNotSetReSharperWillGetThe_Text_Text();
    public static string get_MergeEnvironment_BoolOption_Text();
    public static string get_MergeEnvironmentSettingDescription();
    public static string get_PathToTheTestBinaryAbsoluteOrRelative_StringOption_ToolTip();
    public static string get_PathToTheWorkingDirectoryAbsoluteOr_StringOption_ToolTip();
    public static string get_SettingsForCUnitTestProvidersSettingDescription();
    public static string get_StressTestsAreNotSupported_Text();
    public static string get_TestIsDisabledWithEAutomationTestFlags_Text();
    public static string get_TestRunConfiguration_Header_Text();
    public static string get_TheListOfEnvironmentVariablesToUseWhen_StringOption_ToolTip();
    public static string get_ThisTestIsDisabledForCurrentlySelected_Text();
    public static string get_UnrealEngineCanTRunTestWithSymbol_Text();
    public static string get_UseCommandLineArgumentsFromDebuggingCommandArgumentsSettingDescription();
    public static string get_UseCommandLineArgumentsFromTheDebugging_BoolOption_Text();
    public static string get_UseNamedPipesSettingDescription();
    public static string get_UseNamedPipesToCommunicateWithChild_BoolOption_Text();
    public static string get_WhenThisSettingIsOnTheValueOfTheDebugging_BoolOption_ToolTip();
    public static string get_WorkingDirectory_StringOption_Text();
    public static string get_WorkingDirectorySettingDescription();
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.RunnerOriginCriterion : object {
    public static RunnerOriginCriterion Instance;
    private static RunnerOriginCriterion();
    public sealed virtual bool Matches(IUnitTestElement entity);
    public sealed virtual IUnitTestElementCriterion CreateSnapshot();
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.UnrealTest.Debug.UnrealTestUnitTestDebugRunner : UnrealTestUnitTestRunner {
    private IUnitTestDebugHost myDebuggerFacade;
    private ICppUnitTestDebugProcessFactory myDebugProcessFactory;
    public UnrealTestUnitTestDebugRunner(IUnitTestDebugHost debuggerFacade, ICppUnitTestDebugProcessFactory debugProcessFactory);
    protected virtual CppProcessWrapper CreateProcess(IUnitTestRun run, ProcessStartInfo startInfo);
}
public interface JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.UnrealTest.IUnrealTestRunStrategy {
}
public abstract class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.UnrealTest.UnrealTestBase : CppUnitTestElement {
    [CompilerGeneratedAttribute]
private UnrealTestCategoryType <UnitTestCategories>k__BackingField;
    [PersistAttribute]
public UnrealTestCategoryType UnitTestCategories { get; public set; }
    protected UnrealTestBase(string testId, string shortName);
    [CompilerGeneratedAttribute]
public UnrealTestCategoryType get_UnitTestCategories();
    [CompilerGeneratedAttribute]
public void set_UnitTestCategories(UnrealTestCategoryType value);
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.UnrealTest.UnrealTestDynamicTest : UnrealTestBase {
    public string Kind { get; }
    public UnrealTestDynamicTest(string testId, string name, CppUnitTestElement parent);
    public virtual string get_Kind();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.UnrealTest.UnrealTestElementsSource : CppElementsSource {
    public UnrealTestElementsSource(Lifetime lifetime, ISolution solution, IShellLocks shellLocks, UnrealTestServiceProvider serviceProvider, IUnitTestDiscoveryManager discoveryManager, IUnitTestElementRepository repository, ILogger logger);
    protected virtual IUnitTestsCollector CreateUnitTestsCollector(IUnitTestElementObserver observer, IProjectFile projectFile, Func`1<bool> isInterrupted);
    protected virtual bool ShouldExploreSolution(CppGlobalSymbolCache cache);
}
[UnitTestProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.UnrealTest.UnrealTestProvider : CppTestProvider {
    private static string UNREALTEST_ID;
    public string ID { get; }
    public string Name { get; }
    public virtual string get_ID();
    public virtual string get_Name();
    public virtual bool IsElementOfKind(IUnitTestElement element, UnitTestElementKind elementKind);
    public virtual IUnitTestRunStrategy GetRunStrategy(IUnitTestElement element, IHostProvider hostProvider);
}
[SolutionComponentAttribute("0")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.UnrealTest.UnrealTestRunStrategy : CppUnitTestRunStrategy {
    [NotNullAttribute]
private IUnitTestDebugHost myDebuggerFacade;
    [NotNullAttribute]
private ICppUnitTestDebugProcessFactory myDebugProcessFactory;
    private ICppUE4SolutionDetector myUE4SolutionDetector;
    private ICppUE4TargetInfoProvider myTargetInfoProvider;
    private IActiveConfigurationManager myActiveConfigurationManager;
    public UnrealTestRunStrategy(IUnitTestDebugHost debuggerFacade, ICppUnitTestDebugProcessFactory debugProcessFactory, ICppUE4SolutionDetector ue4SolutionDetector, ICppUE4TargetInfoProvider targetInfoProvider, IActiveConfigurationManager activeConfigurationManager);
    protected virtual ICppUnitTestRunner CreateUnitTestRunner();
    private bool IsBinaryEngineProject(IProject project);
    public virtual bool RequiresProjectBuild(IProject project);
    public virtual IRuntimeDescriptor GetRuntimeDescriptor(IUnitTestLaunch launch, IUnitTestElement element);
    [CanBeNullAttribute]
private IRuntimeDescriptor GetRuntimeEnvironmentForUproject(IProject project);
    private string GetExecutablePath(CppUE4Configuration ue4Configuration, VirtualFileSystemPath unrealEngineRoot, VirtualFileSystemPath uprojectFile);
    private static VirtualFileSystemPath GetBinariesDirectory(CppUE4Configuration ue4Configuration, VirtualFileSystemPath unrealEngineRoot, VirtualFileSystemPath uprojectPath);
    [NotNullAttribute]
private string GetExecutableNameWithoutExtension(CppUE4Configuration ue4Configuration, VirtualFileSystemPath uprojectFile);
    [NotNullAttribute]
private string GetTargetName(CppUE4Configuration ue4Configuration, VirtualFileSystemPath uprojectFile);
    [NotNullAttribute]
private static string GetExtension(CppUE4Configuration ue4Configuration);
    private IProject GetProjectForRuntimeEnvironment(IProject project);
    private IRuntimeDescriptor GetRuntimeEnvironmentForSln(IUnitTestLaunch launch, IProject project, TargetFrameworkId targetFrameworkId, IUnitTestElement element);
    protected virtual ICppUnitTestRunner CreateDebugUnitTestRunner();
    public virtual IProject GetProjectForPropertiesRefreshBeforeLaunch(IUnitTestElement element);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.UnrealTest.UnrealTestServiceProvider : CppUnitTestServiceProvider {
    public UnrealTestServiceProvider(UnrealTestProvider provider, IUnrealTestRunStrategy runStrategy);
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.UnrealTest.UnrealTestTest : UnrealTestBase {
    [CompilerGeneratedAttribute]
private UnrealTestType <TestType>k__BackingField;
    [PersistAttribute]
public UnrealTestType TestType { get; public set; }
    public string Kind { get; }
    public UnrealTestTest(string testId, string testName, UnrealTestCategoryType unitTestCategories, UnrealTestType testType);
    [CompilerGeneratedAttribute]
public UnrealTestType get_TestType();
    [CompilerGeneratedAttribute]
public void set_TestType(UnrealTestType value);
    public virtual string get_Kind();
}
public enum JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.UnrealTest.UnrealTestType : Enum {
    public int value__;
    public static UnrealTestType Simple;
    public static UnrealTestType Complex;
    public static UnrealTestType Spec;
    public static UnrealTestType Invalid;
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.UnrealTest.UnrealTestUnitTestRunner : CppUnitTestRunner {
    private static string StatusFailed;
    private static string StatusFail;
    private static string StatusPassed;
    private static string StatusSuccess;
    private static int MAX_NUMBER_OF_TESTS_AT_ONCE;
    private static Regex ourTestStartedPattern;
    private static Regex ourTestCompletedPattern;
    private static Regex ourTestNotFound;
    private static Regex ourNumberOfTestsPattern;
    private static Regex ourTestNamePattern;
    private static Regex ourFoundAutomationTestsPattern;
    private List`1<Dictionary`2<string, UnrealTestBase>> myCollectionOfTasksById;
    private List`1<UnrealTestBase> myTasksWithDynamicChildren;
    private Dictionary`2<string, UnrealTestDynamicTest> myDynamicTests;
    private static string TestIsDisabledText { get; }
    private static string TestIsNotCompiledText { get; }
    private static string StressTestIsNotSupportedText { get; }
    private static string SingleCommaIsNotSupportedText { get; }
    private static UnrealTestUnitTestRunner();
    private static string get_TestIsDisabledText();
    private static string get_TestIsNotCompiledText();
    private static string get_StressTestIsNotSupportedText();
    private static string get_SingleCommaIsNotSupportedText();
    protected virtual void RunInternal(IUnitTestRun run);
    private void RunTestsWithDynamicChildren(IUnitTestRun run);
    private void RunDynamicTests(IUnitTestRun run, string testNameSuffix);
    private void ProcessDynamicTestsOutputDataReceived(IUnitTestRun run, string text, DynamicTestsProcessingContext context);
    private void RunCommonTests(IUnitTestRun run, IEnumerable`1<UnrealTestBase> listTasks, string testNameSuffix);
    private static bool IsTestEnabledInUEProjectModel(ISolution solution, VirtualFileSystemPath file);
    private void CollectTasks(IUnitTestRun run);
    private void AddTest(UnrealTestBase unrealTestElement);
    private static bool SkipTask(IUnitTestRun run, UnrealTestBase unrealTestElement);
    protected virtual CppProcessWrapper CreateProcess(IUnitTestRun run, ProcessStartInfo startInfo);
    private void ProcessTestWithDynamicChildrenOutput(IUnitTestRun run, string text, TestsWithDynamicChildrenProcessingContext context, UnrealTestBase parent);
    private void ProcessOnOutputDataReceived(IUnitTestRun run, string text, OutputProcessingContext context);
    private static UnitTestStatus StatusTextToEnum(string statusText);
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.UnrealTest.Utils.CollectTestCategoriesVisitor : CppAbstractSymbolVisitor`1<bool> {
    public CppStringLiteralValue CachedFlags;
    public virtual bool Visit(ICppSymbol symbol);
    public virtual bool Visit(CppClassSymbol classSymbol);
    public bool Visit(CppDeclaratorWithFuncBodySymbol declaratorWithFuncBodySymbol);
    public virtual bool Visit(CppCompoundStatementSymbol compoundStatementSymbol);
    public virtual bool Visit(CppExpressionStatementSymbol statement);
    public bool Visit(CppBinaryExpression binaryExpression);
}
public class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.UnrealTest.Utils.CollectTestNameVisitor : CppAbstractSymbolVisitor`1<bool> {
    public CppStringLiteralValue CachedName;
    public virtual bool Visit(ICppSymbol symbol);
    public virtual bool Visit(CppClassSymbol classSymbol);
    public bool Visit(CppDeclaratorWithFuncBodySymbol declaratorWithFuncBodySymbol);
    public virtual bool Visit(CppCompoundStatementSymbol compoundStatementSymbol);
    public virtual bool Visit(CppExpressionStatementSymbol statement);
    public bool Visit(CppBinaryExpression binaryExpression);
    public bool Visit(CppCallExpression callExpression);
    public bool Visit(CppMemberAccessExpression memberAccessExpression);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.UnrealTest.Utils.UnrealTestUtil : object {
    private static Dictionary`2<UnrealTestCategoryType, UnitTestElementCategory> ourFlagToElement;
    private static UnrealTestUtil();
    [ExtensionAttribute]
public static bool IsDisabledTest(UnrealTestCategoryType categoryType);
    [ExtensionAttribute]
public static bool IsEngineTest(UnrealTestCategoryType categoryType);
    [ExtensionAttribute]
public static bool IsStressTest(UnrealTestCategoryType categoryType);
    [ExtensionAttribute]
public static bool NeedsRhiTest(UnrealTestCategoryType categoryType);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.UnrealTest.Utils.UnrealTestUtil/<ExtractUnitTestCategories>d__6")]
public static IEnumerable`1<UnitTestElementCategory> ExtractUnitTestCategories(UnrealTestCategoryType categories);
}
[ZoneMarkerAttribute]
internal class JetBrains.ReSharper.Feature.Services.Cpp.UnitTesting.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
