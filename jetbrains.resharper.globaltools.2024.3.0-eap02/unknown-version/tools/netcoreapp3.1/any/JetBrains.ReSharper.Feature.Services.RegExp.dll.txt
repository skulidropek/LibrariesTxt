public class JetBrains.ReSharper.Feature.Services.RegExp.SelectEmbracingConstruct.BaseLanguage.RegExpDotSelection : DotSelection`1<IRegexContainer> {
    private RegExpSelectEmbracingConstructProvider myProvider;
    public RegExpDotSelection(IRegexContainer fileNode, TreeOffset offset, bool selectBetterToken, RegExpSelectEmbracingConstructProvider provider);
    protected virtual ISelectedRange GetParentInternal(ITokenNode tokenNode);
    protected virtual ISelectedRange CreateTokenPartSelection(ITokenNode tokenNode, TreeTextRange treeTextRange);
    protected virtual ISelectedRange CreateTreeNodeSelection(ITokenNode tokenNode);
    protected virtual bool IsWordToken(ITokenNode token);
    protected virtual bool IsLiteralToken(ITokenNode token);
    protected virtual bool IsSpaceToken(ITokenNode token);
    protected virtual bool IsNewLineToken(ITokenNode token);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.RegExp.BaseLanguage.RegexBaseLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.RegExp.SelectEmbracingConstruct.BaseLanguage.RegExpSelectEmbracingConstructProvider : object {
    private ISettingsStore mySettingsStore;
    public RegExpSelectEmbracingConstructProvider(ISettingsStore settingsStore);
    public bool DoUseCameHumps(ITreeNode treeNode);
    public sealed virtual bool IsAvailable(IPsiSourceFile sourceFile);
    protected ISelectedRange GetSelectedRangeImpl(IPsiSourceFile sourceFile, DocumentRange documentRange);
    protected virtual RegExpDotSelection CreateDotSelection(TFile psiFile, TreeTextRange translatedRange);
    public virtual ISelectedRange GetSelectedRange(IPsiSourceFile sourceFile, DocumentRange documentRange);
    public virtual ISelectedRange ExtendRangeSelection(IRegexContainer fileNode, ITreeNode first, ITreeNode last);
}
public class JetBrains.ReSharper.Feature.Services.RegExp.SelectEmbracingConstruct.BaseLanguage.RegExpTokenPartSelection : TokenPartSelection`1<IRegexContainer> {
    private RegExpSelectEmbracingConstructProvider myProvider;
    public ISelectedRange Parent { get; }
    public RegExpTokenPartSelection(IRegexContainer fileNode, TreeTextRange treeTextRange, ITokenNode token, RegExpSelectEmbracingConstructProvider provider);
    public virtual ISelectedRange get_Parent();
}
public class JetBrains.ReSharper.Feature.Services.RegExp.SelectEmbracingConstruct.BaseLanguage.RegExpTreeNodeSelection : TreeNodeSelection`1<IRegexContainer> {
    private RegExpSelectEmbracingConstructProvider myProvider;
    public ISelectedRange Parent { get; }
    public RegExpTreeNodeSelection(IRegexContainer fileNode, ITreeNode node, RegExpSelectEmbracingConstructProvider provider);
    public virtual ISelectedRange get_Parent();
}
public class JetBrains.ReSharper.Feature.Services.RegExp.SelectEmbracingConstruct.BaseLanguage.RegExpTreeRangeSelection : TreeRangeSelection`1<IRegexContainer> {
    private RegExpSelectEmbracingConstructProvider myProvider;
    public ISelectedRange Parent { get; }
    public RegExpTreeRangeSelection(IRegexContainer fileNode, ITreeNode first, ITreeNode last, RegExpSelectEmbracingConstructProvider provider);
    public virtual ISelectedRange get_Parent();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.RegExp.ClrRegex.ClrRegexLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.RegExp.SelectEmbracingConstruct.ClrRegex.ClrRegExpSelectEmbracingConstructProvider : RegExpSelectEmbracingConstructProvider {
    public ClrRegExpSelectEmbracingConstructProvider(ISettingsStore settingsStore);
    public virtual ISelectedRange GetSelectedRange(IPsiSourceFile sourceFile, DocumentRange documentRange);
    public virtual ISelectedRange ExtendRangeSelection(IRegexContainer fileNode, ITreeNode first, ITreeNode last);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.RegExp.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
