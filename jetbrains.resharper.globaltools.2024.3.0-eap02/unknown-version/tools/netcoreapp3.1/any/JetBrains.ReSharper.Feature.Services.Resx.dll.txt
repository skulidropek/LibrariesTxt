public abstract class JetBrains.ReSharper.Feature.Services.Resx.CodeStructure.CodeStructureElementBase`1 : CodeStructureElement {
    [NotNullAttribute]
private ITreeNodePointer`1<T> myTagPointer;
    private DocumentRange myDocumentRange;
    [CompilerGeneratedAttribute]
private IconId <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private PsiLanguageType <Language>k__BackingField;
    [CanBeNullAttribute]
public T Tag { get; }
    [NotNullAttribute]
public IconId Image { get; }
    public ITreeNode TreeNode { get; }
    public PsiLanguageType Language { get; }
    protected CodeStructureElementBase`1(CodeStructureElement parent, T tag, IconId image);
    public T get_Tag();
    [CompilerGeneratedAttribute]
public IconId get_Image();
    public virtual ITreeNode get_TreeNode();
    [CompilerGeneratedAttribute]
public virtual PsiLanguageType get_Language();
    public virtual DocumentRange GetTextRange();
    protected virtual void DumpSelf(TextWriter builder);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Resx.ResxLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.Resx.CodeStructure.ResxCodeStructureProvider : XmlCodeStructureProvider {
    public virtual CodeStructureRootElement Build(IFile file, CodeStructureOptions options);
    private static void CreateDataTagElement(ResxFileElement fileElement, IResxDataTagDeclaration dataTag);
}
internal class JetBrains.ReSharper.Feature.Services.Resx.CodeStructure.ResxDataTagCommentElement : ResxTagElementBase`2<ResxDataTagElement, IResxDataCommentTag> {
    private static IconId ourBitmap;
    public ResxDataTagCommentElement(ResxDataTagElement resxDataTagElement, IResxDataCommentTag commentTag);
    private static ResxDataTagCommentElement();
    protected virtual ResxTagAspectsBase CreateAspects();
}
public class JetBrains.ReSharper.Feature.Services.Resx.CodeStructure.ResxDataTagElement : CodeStructureDeclarationElement {
    private MyCodeStructureDeclarationAspects myAspects;
    public ResxDataTagElement(ResxFileElement fileElement, IResxDataTagDeclaration resxTag);
    public virtual IFileStructureAspect GetFileStructureAspect();
    public virtual IGotoFileMemberAspect GetGotoMemberAspect();
    public virtual IMemberNavigationAspect GetMemberNavigationAspect();
}
public class JetBrains.ReSharper.Feature.Services.Resx.CodeStructure.ResxFileElement : CodeStructureRootElement {
    public IResxFile File { get; }
    public ResxFileElement(IResxFile file);
    public IResxFile get_File();
}
internal abstract class JetBrains.ReSharper.Feature.Services.Resx.CodeStructure.ResxTagAspectsBase : object {
    protected DocumentRange GotoFileMemberNavigationRange { get; }
    protected DocumentRange FileStructureNavigationRange { get; }
    private DocumentRange JetBrains.ReSharper.Feature.Services.CodeStructure.IGotoFileMemberAspect.NavigationRange { get; }
    private DocumentRange JetBrains.ReSharper.Feature.Services.CodeStructure.IFileStructureAspect.NavigationRange { get; }
    public bool InitiallyExpanded { get; }
    public abstract virtual void Present(StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    protected virtual DocumentRange get_GotoFileMemberNavigationRange();
    protected abstract virtual DocumentRange get_FileStructureNavigationRange();
    protected virtual IList`1<string> GotoFileMemberGetQuickSearchTexts();
    protected abstract virtual IList`1<string> FileStructureGetQuickSearchTexts();
    private sealed virtual override DocumentRange JetBrains.ReSharper.Feature.Services.CodeStructure.IGotoFileMemberAspect.get_NavigationRange();
    private sealed virtual override DocumentRange JetBrains.ReSharper.Feature.Services.CodeStructure.IFileStructureAspect.get_NavigationRange();
    private sealed virtual override IList`1<string> JetBrains.ReSharper.Feature.Services.CodeStructure.IGotoFileMemberAspect.GetQuickSearchTexts();
    public abstract virtual IPsiSourceFile GetSourceFile();
    private sealed virtual override IList`1<string> JetBrains.ReSharper.Feature.Services.CodeStructure.IFileStructureAspect.GetQuickSearchTexts();
    public abstract virtual void Present(IMenuItemDescriptor descriptor, PresentationState state);
    public abstract virtual bool get_InitiallyExpanded();
    public abstract virtual bool CanMoveElements(RelativeLocation location, IList`1<CodeStructureElement> dropElements);
    public abstract virtual void MoveElements(RelativeLocation location, IList`1<CodeStructureElement> dropElements);
    public abstract virtual bool CanRemove();
    public abstract virtual void Remove();
    public abstract virtual bool CanRename();
    public abstract virtual string InitialName();
    public abstract virtual void Rename(string newName);
    public abstract virtual DocumentRange[] GetNavigationRanges();
}
internal abstract class JetBrains.ReSharper.Feature.Services.Resx.CodeStructure.ResxTagElementBase`2 : CodeStructureElementBase`1<TElement> {
    private ResxTagAspectsBase myAspects;
    protected ResxTagElementBase`2(TParent parent, TElement resxTag, IconId image);
    public virtual IFileStructureAspect GetFileStructureAspect();
    public virtual IGotoFileMemberAspect GetGotoMemberAspect();
    public virtual IMemberNavigationAspect GetMemberNavigationAspect();
    protected abstract virtual ResxTagAspectsBase CreateAspects();
}
public static class JetBrains.ReSharper.Feature.Services.Resx.CrossPlatformStronglyTypedResourceBuilder : object {
    private static ILogger ourLogger;
    private static Lazy`1<Func`3<string, CodeDomProvider, string>> ourLazyVerifyResourceName;
    private static Lazy`1<CreateDelegate> ourLazyCreate;
    private static Lazy`1<Type> ourLazyStronglyTypedResourceBuilder;
    private static CrossPlatformStronglyTypedResourceBuilder();
    private static string VerifyResourceNameNetFramework(string validIdentifier, CodeDomProvider codeDomProvider);
    private static CodeCompileUnit CreateNetFramework(IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, CodeDomProvider codeProvider, bool internalClass, String[]& unmatchable);
    private static Type GetStronglyTypedResourceBuilderTypeFallBack();
    private static FileSystemPath GetSystemDesignDll();
    public static string VerifyResourceName(string key, CodeDomProvider provider);
    public static CodeCompileUnit Create(IDictionary resourceList, string baseName, string generatedCodeNamespace, CodeDomProvider codeProvider, bool internalClass, String[]& unmatchable);
    public static CodeCompileUnit Create(IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, CodeDomProvider codeProvider, bool internalClass, String[]& unmatchable);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Resx.ResxLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.Resx.ExtendSelection.ResxSelectEmbracingConstructProvider : XmlSelectEmbracingConstructProvider {
    public ResxSelectEmbracingConstructProvider(ISettingsStore settingsStore);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Resx.Generators.JetResourceGeneratorComponent : object {
    [CompilerGeneratedAttribute]
private ILogger <logger>P;
    private static string Suffix;
    private Guid fsharpProjectId;
    private Guid fsharpSdkProjectId;
    private static string FSharpTemplate;
    private static string CSharpTemplate;
    private static string VBTemplate;
    public JetResourceGeneratorComponent(ILogger logger);
    public string Generate(IProjectFile projectFile, bool useInternalAccessor, VirtualFileSystemPath& generatedFilePath);
    private string GenerateForFSharp(string namespaceName, string resourceName, string className, string inputFileContent, bool useInternalAccessor);
    private void ExtractLanguageProperties(IProject project, CodeDomProvider& codeDomProvider, PsiLanguageType& languageType);
    public string GenerateForCSharp(string namespaceName, string resourceName, string className, string inputFileContent, bool useInternalAccessor);
    public string GenerateForVB(string namespaceName, string resourceName, string className, string inputFileContent, bool useInternalAccessor);
    private object GetFSharpAccessor(string type, string className, string name);
    private object GetVBAccessor(string type, string name);
    private static string GetCSharpAccessor(string type, string name);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Resx.Generators.ZoneMarker : object {
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Feature.Services.Resx.i18n.ResourceItemValue : ValueType {
    public static ResourceItemValue BAD_VALUE;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private IType <Type>k__BackingField;
    [CanBeNullAttribute]
public string Value { get; }
    [CanBeNullAttribute]
public IType Type { get; }
    public ResourceItemValue(string value, IType type);
    private static ResourceItemValue();
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public IType get_Type();
    [PureAttribute]
public bool IsBadValue();
    [PureAttribute]
public bool IsValid();
    [PureAttribute]
public bool IsString();
    [NotNullAttribute]
[PureAttribute]
public ConstantValue ToStringConstantValue();
    public sealed virtual bool Equals(ResourceItemValue other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.ReswProjectFileType", "16")]
internal class JetBrains.ReSharper.Feature.Services.Resx.i18n.ReswResourceProvider : ResxResourceProviderBase {
}
[PolymorphicMarshallerAttribute]
internal class JetBrains.ReSharper.Feature.Services.Resx.i18n.ResxResourceItem : ResourceItemBase {
    [UsedImplicitlyAttribute]
public static ReadDelegate`1<object> ReadDelegate;
    [UsedImplicitlyAttribute]
public static WriteDelegate`1<object> WriteDelegate;
    public IResourceItemDeclaredElement DeclaredElement { get; }
    public ResxResourceItem(IPsiSourceFile psiSourceFile, string name, int offset, int formatArgs);
    private static ResxResourceItem();
    public virtual DocumentRange GetNameDocumentRange();
    public virtual IResourceItemDeclaredElement get_DeclaredElement();
    private IResxDataTagDeclaration GetDeclaration();
    public static ResxResourceItem Read(UnsafeReader reader);
    public static void Write(UnsafeWriter writer, ResxResourceItem item);
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.ResxProjectFileType", "16")]
internal class JetBrains.ReSharper.Feature.Services.Resx.i18n.ResxResourceProvider : ResxResourceProviderBase {
}
internal class JetBrains.ReSharper.Feature.Services.Resx.i18n.ResxResourceProviderBase : object {
    public sealed virtual void GetResourceItemValueAndComment(IPsiSourceFile resourceFile, string name, ResourceItemValue& value, String& comment);
    public sealed virtual ResourceItemValue GetResourceItemValue(IPsiSourceFile resourceFile, string name);
    public sealed virtual string GetResourceItemComment(IPsiSourceFile resourceFile, string name);
    public sealed virtual IEnumerable`1<IResourceItem> EnumerateResourceItems(IPsiSourceFile resourceFile);
    [NotNullAttribute]
private static IResourceItem CreateResourceItem(IPsiSourceFile sourceFile, IResxDataTagDeclaration declaration);
}
public interface JetBrains.ReSharper.Feature.Services.Resx.IResourceItem {
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public IPsiSourceFile PsiSourceFile { get; }
    [CanBeNullAttribute]
public IResourceItemDeclaredElement DeclaredElement { get; }
    public int Offset { get; }
    public int FormatArgs { get; }
    public abstract virtual string get_Name();
    public abstract virtual IPsiSourceFile get_PsiSourceFile();
    public abstract virtual IResourceItemDeclaredElement get_DeclaredElement();
    public abstract virtual int get_Offset();
    public abstract virtual int get_FormatArgs();
    public abstract virtual DocumentRange GetNameDocumentRange();
    public abstract virtual bool IsValid();
}
public interface JetBrains.ReSharper.Feature.Services.Resx.ISolutionResourceCache {
    public abstract virtual bool TryGetMapItemsByName(IPsiSourceFile sourceFile, CompactOneToListMap`2& itemsByName);
    public abstract virtual bool TryGetMapItemsByHashValue(IPsiSourceFile sourceFile, CompactOneToListMap`2& itemsByHashValue);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IPsiSourceFile> GetResourcesInReferencedProjects(IProject project, Func`2<IPsiSourceFile, bool> predicate);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IPsiSourceFile> GetResourcesInProject(IProject project, Func`2<IPsiSourceFile, bool> predicate);
    public abstract virtual bool HasResourcesInReferencedProjects(IProject getProject, Func`2<IPsiSourceFile, bool> predicate);
    public abstract virtual bool ContainsItems(IPsiSourceFile sourceFile);
    public abstract virtual bool ContainsItems(IPsiSourceFile sourceFile, string name);
    [NotNullAttribute]
public abstract virtual ICollection`1<string> GetResourceItemNames(IPsiSourceFile sourceFile);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IResourceItem> EnumerateResourceItems(IPsiSourceFile sourceFile);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IResourceItem> EnumerateResourceItems(IPsiSourceFile sourceFile, string name);
}
public interface JetBrains.ReSharper.Feature.Services.Resx.IVirtualIResourceItem {
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Resx.Occurrences.ResxOccurrencePresenter : RangeOccurrencePresenter {
    protected virtual RichText GetDisplayText(OccurrencePresentationOptions options, RangeOccurrence rangeOccurrence);
    public virtual bool IsApplicable(IOccurrence occurrence);
}
public interface JetBrains.ReSharper.Feature.Services.Resx.QuickDoc.IResxEditorNavigationHost {
    public abstract virtual void EditWithLocalizationManager(IResourceItemDeclaredElement resourceItemDeclaredElement);
}
public class JetBrains.ReSharper.Feature.Services.Resx.QuickDoc.QuickDocResxPresenter : object {
    private static string ourOurLastViewedCulture;
    private ISolutionResourceCache mySolutionResourceCache;
    private IResxEditorNavigationHost myResxEditorNavigationHost;
    private IEditorManager myEditorManager;
    [NotNullAttribute]
private IResourceItemDeclaredElement myResourceItemDeclaredElement;
    private static string FilePrefix;
    private static string IndexId;
    private int myCurrentIndex;
    private static string EditWithLocalizationManagerId;
    public QuickDocResxPresenter(ISolutionResourceCache solutionResourceCache, IResxEditorNavigationHost resxEditorNavigationHost, IEditorManager editorManager, IResourceItemDeclaredElement resourceItemDeclaredElement, int currentIndex);
    private static QuickDocResxPresenter();
    public sealed virtual IQuickDocPresenter Resolve(string id);
    public sealed virtual QuickDocTitleAndText GetHtml(PsiLanguageType presentationLanguage);
    private XmlNode BuildEmptyNode(IResxDataTagDeclaration element);
    private string PresentCultureName(IResxDataTagDeclaration cultureElement);
    private string PresentCultureName(string cultureName);
    private void PresentLinkedFileResource(StringBuilder text, bool isBold, IResxDataTagDeclaration cultureElement);
    private void PresentTextResource(StringBuilder text, bool isBold, IResxDataTagDeclaration cultureElement);
    private void PresentGeneralResource(StringBuilder text, bool isBold, IResxDataTagDeclaration cultureElement);
    public sealed virtual string GetId();
    public sealed virtual void OpenInEditor(string navigationId);
    public sealed virtual void ReadMore(string navigationId);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IResourceItem> <BuildEmptyNode>b__12_0(IPsiSourceFile file);
}
[QuickDocProviderAttribute("-10")]
public class JetBrains.ReSharper.Feature.Services.Resx.QuickDoc.QuickDocResxProvider : object {
    private Lifetime myLifetime;
    private ISolution mySolution;
    private GeneratedFileFinder myGeneratedFileFinder;
    private DocumentManager myDocumentManager;
    private IEditorManager myEditorManager;
    private ISolutionResourceCache mySolutionResourceCache;
    private IResxEditorNavigationHost myResxEditorNavigationHost;
    private ITheming myTheming;
    public QuickDocResxProvider(Lifetime lifetime, ISolution solution, ITheming theming, GeneratedFileFinder generatedFileFinder, DocumentManager documentManager, IEditorManager editorManager, ISolutionResourceCache solutionResourceCache, IResxEditorNavigationHost resxEditorNavigationHost);
    public sealed virtual bool CanNavigate(IDataContext context);
    public sealed virtual void Resolve(IDataContext context, Action`2<IQuickDocPresenter, PsiLanguageType> resolved);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Resx.QuickDoc.ResxEditorNavigationHostStab : object {
    public virtual void EditWithLocalizationManager(IResourceItemDeclaredElement resourceItemDeclaredElement);
}
public interface JetBrains.ReSharper.Feature.Services.Resx.Resolve.IResourceItemSymbolInfo {
    [NotNullAttribute]
public IResourceItem Entry { get; }
    public abstract virtual IResourceItem get_Entry();
}
public abstract class JetBrains.ReSharper.Feature.Services.Resx.Resolve.ResourceItemBase : object {
    [CompilerGeneratedAttribute]
private IPsiSourceFile <PsiSourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FormatArgs>k__BackingField;
    public IPsiSourceFile PsiSourceFile { get; public set; }
    public string Name { get; }
    public int Offset { get; }
    public int FormatArgs { get; }
    public IResourceItemDeclaredElement DeclaredElement { get; }
    protected ResourceItemBase(IPsiSourceFile psiSourceFile, string name, int offset, int formatArgs);
    [CompilerGeneratedAttribute]
public sealed virtual IPsiSourceFile get_PsiSourceFile();
    [CompilerGeneratedAttribute]
public void set_PsiSourceFile(IPsiSourceFile value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Offset();
    [CompilerGeneratedAttribute]
public sealed virtual int get_FormatArgs();
    public virtual IResourceItemDeclaredElement get_DeclaredElement();
    public virtual DocumentRange GetNameDocumentRange();
    public virtual bool IsValid();
    protected bool Equals(IResourceItem other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.Resx.Resolve.ResourceItemDeclaredElement : object {
    private IResourceItem myResourceItem;
    public IPsiModule Module { get; }
    public string ShortName { get; }
    public bool CaseSensitiveName { get; }
    public PsiLanguageType PresentationLanguage { get; }
    public ResourceItemDeclaredElement(IResourceItem resourceItem);
    public sealed virtual IPsiModule get_Module();
    public sealed virtual string get_ShortName();
    public sealed virtual bool get_CaseSensitiveName();
    public sealed virtual PsiLanguageType get_PresentationLanguage();
    public sealed virtual bool IsValid();
    public sealed virtual IPsiServices GetPsiServices();
    public sealed virtual IList`1<IDeclaration> GetDeclarations();
    public sealed virtual IList`1<IDeclaration> GetDeclarationsIn(IPsiSourceFile sourceFile);
    public sealed virtual DeclaredElementType GetElementType();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public sealed virtual XmlNode GetXMLDescriptionSummary(bool inherit);
    public sealed virtual bool IsSynthetic();
    public sealed virtual bool HasDeclarationsIn(IPsiSourceFile sourceFile);
    public sealed virtual HybridCollection`1<IPsiSourceFile> GetSourceFiles();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    protected bool Equals(IResourceItemDeclaredElement other);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.Resx.Resolve.ResourceItemSymbolInfo : object {
    [NotNullAttribute]
private ISubstitution mySubstitution;
    [CompilerGeneratedAttribute]
private int <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private IResourceItem <Entry>k__BackingField;
    public int Level { get; }
    public string ShortName { get; }
    public IResourceItem Entry { get; }
    public Nullable`1<int> InheritanceLevel { get; }
    public ResourceItemSymbolInfo(IResourceItem item);
    public ResourceItemSymbolInfo(string shortName, IResourceItem item);
    public ResourceItemSymbolInfo(string shortName, IResourceItem item, ISubstitution substitution, int level);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Level();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ShortName();
    [CompilerGeneratedAttribute]
public sealed virtual IResourceItem get_Entry();
    public sealed virtual Nullable`1<int> get_InheritanceLevel();
    public sealed virtual IDeclaredElement GetDeclaredElement();
    public sealed virtual ISubstitution GetSubstitution();
    public sealed virtual ISymbolInfo ReplaceSubstitution(ISubstitution substitution);
    public sealed virtual ISymbolInfo ReplaceLevel(int level);
}
public class JetBrains.ReSharper.Feature.Services.Resx.Resolve.ResourceItemSymbolTable : SymbolTableBase {
    private IPsiSourceFile myPsiSourceFile;
    private ISolutionResourceCache myResourceManager;
    public ResourceItemSymbolTable(IPsiSourceFile psiSourceFile);
    public virtual IList`1<ISymbolInfo> GetSymbolInfos(string name);
    public virtual void AppendSymbolInfos(string name, List`1<ISymbolInfo> consumer);
    public virtual bool ForAllSymbolInfos(TState state, Func`3<TState, ISymbolInfo, bool> processor);
    public virtual IEnumerable`1<string> Names();
    public virtual ISymbolTableDependencySet GetDependencySet();
    protected virtual ISymbolInfo CreateSymbolInfo(IResourceItem item);
}
public class JetBrains.ReSharper.Feature.Services.Resx.Resolve.ReswSymbolTable : ResourceItemSymbolTable {
    public ReswSymbolTable(IPsiSourceFile psiSourceFile);
    public virtual IEnumerable`1<string> Names();
    public virtual IList`1<ISymbolInfo> GetSymbolInfos(string name);
    public virtual void AppendSymbolInfos(string name, List`1<ISymbolInfo> consumer);
    protected virtual ISymbolInfo CreateSymbolInfo(IResourceItem item);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Resx.ResourceCultureEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetNameWithoutCulture(IPsiSourceFile projectFile);
    [ExtensionAttribute]
public static bool IsDefaultCulture(IPsiSourceFile projectFile);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetCultureName(IProjectFile projectFile);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetCultureName(IPsiSourceFile psiSourceFile);
}
public class JetBrains.ReSharper.Feature.Services.Resx.Resources.Services118nThemedIcons : object {
}
public static class JetBrains.ReSharper.Feature.Services.Resx.ResxFileUtil : object {
    [NotNullAttribute]
public static string VerifyResourceFileName(string fileName);
    public static bool IsDefaultCulture(string fileName);
    [NotNullAttribute]
public static string GetCultureName(string fileName);
    [NotNullAttribute]
public static string GetNamespace(string fileName, IProjectFileExtensions projectFileExtensions);
    [NotNullAttribute]
public static string GetNamespace(string fileName, ProjectFileType projectFileType, IProjectFileExtensions projectFileExtensions);
    [NotNullAttribute]
public static string GetNamespace(string fileName, PsiLanguageType psiLanguageType, IProjectFileExtensions projectFileExtensions);
    [NotNullAttribute]
public static string GetTypeName(string fileName, IProjectFileExtensions projectFileExtensions);
    [NotNullAttribute]
public static string GetTypeName(string fileName, ProjectFileType projectFileType, IProjectFileExtensions projectFileExtensions);
    [NotNullAttribute]
public static string GetTypeName(string fileName, PsiLanguageType psiLanguageType, IProjectFileExtensions projectFileExtensions);
    public static string GetFullTypeName(string fileName, IProjectFileExtensions projectFileExtensions);
    public static string GetFullTypeName(string fileName, ProjectFileType projectFileType, IProjectFileExtensions projectFileExtensions);
    [NotNullAttribute]
public static string VerifyMemberName(string resourceName, IProjectFileExtensions projectFileExtensions);
    [NotNullAttribute]
public static string VerifyMemberName(string resourceName, ProjectFileType projectFileType, IProjectFileExtensions projectFileExtensions);
    [NotNullAttribute]
public static string VerifyMemberName(string resourceName, PsiLanguageType languageType, IProjectFileExtensions projectFileExtensions);
    [NotNullAttribute]
public static string VerifyMemberName(string resourceName, CodeDomProvider codeDomProvider);
    public static bool IsValidResourceFileName(string fileName);
    private static string CreateValidIdentifier(CodeDomProvider codeDomProvider, string memberName);
    private static string ValidateName(string name);
}
[PsiSharedComponentAttribute]
public class JetBrains.ReSharper.Feature.Services.Resx.Searching.GeneratedFileFinder : object {
    [NotNullAttribute]
private IOrderedImmutableList`1<IGeneratedFileFinder> myFinders;
    public static GeneratedFileFinder Instance { get; }
    public GeneratedFileFinder(Lifetime lifetime, IOrderedImmutableList`2<IGeneratedFileFinder, GeneratedFileFinderAttribute> finders);
    public static GeneratedFileFinder get_Instance();
    public bool IsGeneratedFile(IProjectFile projectFile);
    [CanBeNullAttribute]
public IProjectFile FindGeneratedFile(IProjectFile masterFile);
    [CanBeNullAttribute]
public IProjectFile FindMasterFile(IProjectFile generatedFile);
    [NotNullAttribute]
public IEnumerable`1<ITypeMember> FindMembersByMasterFile(IProjectFile masterFile, string name, bool caseSensitive);
    [NotNullAttribute]
public IEnumerable`1<ITypeMember> FindMembersInFile(IProjectFile projectFile, string name, bool caseSensitive);
    [NotNullAttribute]
public IEnumerable`1<T> FindElementsInFile(IPsiSourceFile sourceFile);
}
[MeansImplicitUseAttribute]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.Resx.Searching.IGeneratedFileFinder")]
public class JetBrains.ReSharper.Feature.Services.Resx.Searching.GeneratedFileFinderAttribute : PsiSharedComponentAttribute {
    [CompilerGeneratedAttribute]
private byte <Priority>k__BackingField;
    public byte Priority { get; public set; }
    public GeneratedFileFinderAttribute(Instantiation instantiation);
    [CompilerGeneratedAttribute]
public sealed virtual byte get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(byte value);
}
[GeneratedFileFinderAttribute("16")]
internal class JetBrains.ReSharper.Feature.Services.Resx.Searching.GeneratedFileFinderByDesignerExtension : object {
    private static string DesignerExtension;
    public sealed virtual bool IsGeneratedFile(IProjectFile projectFile);
    public sealed virtual IProjectFile FindGeneratedFile(IProjectFile masterFile);
    public sealed virtual IProjectFile FindMasterFile(IProjectFile generatedFile);
    private static IProjectFile SelectBestCandidate(LocalList`1<IProjectFile> candidates);
}
[GeneratedFileFinderAttribute("16")]
internal class JetBrains.ReSharper.Feature.Services.Resx.Searching.GeneratedFileFinderByProperies : object {
    public sealed virtual bool IsGeneratedFile(IProjectFile projectFile);
    public sealed virtual IProjectFile FindGeneratedFile(IProjectFile masterFile);
    public sealed virtual IProjectFile FindMasterFile(IProjectFile generatedFile);
}
[GeneratedFileFinderAttribute("16")]
internal class JetBrains.ReSharper.Feature.Services.Resx.Searching.GeneratedFileFinderByRelation : object {
    public sealed virtual bool IsGeneratedFile(IProjectFile projectFile);
    public sealed virtual IProjectFile FindGeneratedFile(IProjectFile masterFile);
    public sealed virtual IProjectFile FindMasterFile(IProjectFile generatedFile);
}
public interface JetBrains.ReSharper.Feature.Services.Resx.Searching.IGeneratedFileFinder {
    public abstract virtual bool IsGeneratedFile(IProjectFile projectFile);
    [CanBeNullAttribute]
public abstract virtual IProjectFile FindGeneratedFile(IProjectFile masterFile);
    [CanBeNullAttribute]
public abstract virtual IProjectFile FindMasterFile(IProjectFile generatedFile);
}
public class JetBrains.ReSharper.Feature.Services.Resx.Searching.ResourceNameFinder : object {
    private bool myFindFirst;
    private Dictionary`2<ITypeMemberDeclaration, string> myResourceAccessors;
    private Stack`1<ITypeMemberDeclaration> myFindStack;
    private JetHashSet`1<IDeclaration> myVisitedElements;
    private JetHashSet`1<IDeclaration> myVisitedInteriorsElements;
    [NotNullAttribute]
protected Dictionary`2<ITypeMemberDeclaration, string> ResourceAccessors { get; }
    private bool JetBrains.ReSharper.Psi.IRecursiveElementProcessor.ProcessingIsFinished { get; }
    public ResourceNameFinder(bool findFirst);
    protected Dictionary`2<ITypeMemberDeclaration, string> get_ResourceAccessors();
    [CanBeNullAttribute]
public static IResourceItemDeclaredElement FindResourceItemDeclaredElement(GeneratedFileFinder generatedFileFinder, IDeclaredElement declaredElement);
    [CanBeNullAttribute]
private static IPsiSourceFile FindResourceFile(GeneratedFileFinder generatedFileFinder, IPsiSourceFile sourceFile);
    [CanBeNullAttribute]
public static string FindResourceDeclarationName(ITreeNode codeElement);
    private sealed virtual override bool JetBrains.ReSharper.Psi.IRecursiveElementProcessor.get_ProcessingIsFinished();
    private sealed virtual override bool JetBrains.ReSharper.Psi.IRecursiveElementProcessor.InteriorShouldBeProcessed(ITreeNode element);
    private sealed virtual override void JetBrains.ReSharper.Psi.IRecursiveElementProcessor.ProcessBeforeInterior(ITreeNode element);
    private sealed virtual override void JetBrains.ReSharper.Psi.IRecursiveElementProcessor.ProcessAfterInterior(ITreeNode element);
    private static string FindResourceEntryName(ITreeNode element);
    private void FindRecursive(ITreeNode element);
    private static bool IsValidCandidate(IDeclaredElement declaredElement);
}
[ShellComponentAttribute("16")]
[LocalizableAttribute("False")]
public class JetBrains.ReSharper.Feature.Services.Resx.Services.CultureInfoService : object {
    private Regex myUnknownCulturePattern;
    private IDictionary`2<string, CultureInfo> myCulturesCache;
    public static CultureInfoService Instance { get; }
    public static CultureInfoService get_Instance();
    private sealed virtual override void System.IDisposable.Dispose();
    public bool IsCultureName(string name);
    [NotNullAttribute]
public CultureInfo GetCultureInfo(string cultureName);
    public string GetEnglishName(string cultureName);
    [NotNullAttribute]
public CultureInfo GetBaseCulture(string cultureName);
}
public interface JetBrains.ReSharper.Feature.Services.Resx.Services.IResourceProvider {
    public abstract virtual ResourceItemValue GetResourceItemValue(IPsiSourceFile resourceFile, string name);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IResourceItem> EnumerateResourceItems(IPsiSourceFile resourceFile);
    [CanBeNullAttribute]
public abstract virtual string GetResourceItemComment(IPsiSourceFile resourceFile, string name);
    public abstract virtual void GetResourceItemValueAndComment(IPsiSourceFile resourceFile, string name, ResourceItemValue& value, String& comment);
}
public abstract class JetBrains.ReSharper.Feature.Services.Resx.Services.ResourceService : object {
    [NotNullAttribute]
public virtual ICollection`1<IPsiSourceFile> GetResourcesWithBaseCultures(IPsiSourceFile resourceFile);
    [NotNullAttribute]
public virtual ICollection`1<IPsiSourceFile> GetResourcesWithBaseCulture(IPsiSourceFile resourceFile);
    public ICollection`1<IPsiSourceFile> GetResourcesWithDefaultCulture(IPsiSourceFile resourceFile);
    [NotNullAttribute]
public abstract virtual string GetCultureName(IPsiSourceFile sourceFile);
    [NotNullAttribute]
public abstract virtual ICollection`1<IPsiSourceFile> GetResourcesWithSpecificCultures(IPsiSourceFile resourceFile);
    [NotNullAttribute]
public abstract virtual ICollection`1<IPsiSourceFile> GetResourcesWithCulture(IPsiSourceFile resourceFile, string cultureName);
    public abstract virtual bool IsDefaultCulture(IPsiSourceFile resourceFile);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IPsiSourceFile> GetResourcesWithAllCultures(IPsiSourceFile resourceFile);
    [NotNullAttribute]
public abstract virtual StringSlice GetResourceName(IPsiSourceFile resourceFile);
    [CompilerGeneratedAttribute]
private string <GetResourcesWithBaseCultures>b__0_0(IPsiSourceFile file);
    [CompilerGeneratedAttribute]
private bool <GetResourcesWithDefaultCulture>b__2_0(IPsiSourceFile file);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Resx.Services.ResourceServiceEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static ResourceService GetResourceService(IPsiSourceFile resourceFile);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ResourceService TryGetResourceService(IPsiSourceFile resourceFile);
    [ExtensionAttribute]
[NotNullAttribute]
public static ResourceService GetResourceService(IProjectFile resourceFile);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ResourceService TryGetResourceService(IProjectFile resourceFile);
    [ExtensionAttribute]
[NotNullAttribute]
public static ResourceService GetResourceService(ISolution solution, ProjectFileType projectFileType);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ResourceService TryGetResourceService(ISolution solution, ProjectFileType projectFileType);
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.ReswProjectFileType", "16")]
public class JetBrains.ReSharper.Feature.Services.Resx.Services.ReswResourceService : WinRTResourceServiceBase {
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.ResxProjectFileType", "16")]
public class JetBrains.ReSharper.Feature.Services.Resx.Services.ResxResourceServiceBase : ResourceService {
    private ISolutionResourceCache mySolutionResourceCache;
    private object mySync;
    private CultureInfoService myCultureInfoService;
    public virtual bool IsDefaultCulture(IPsiSourceFile resourceFile);
    public virtual IEnumerable`1<IPsiSourceFile> GetResourcesWithAllCultures(IPsiSourceFile resourceFile);
    private void EnsureSolutionResourceCache(IPsiSourceFile resourceFile);
    public virtual StringSlice GetResourceName(IPsiSourceFile resourceFile);
    public virtual ICollection`1<IPsiSourceFile> GetResourcesWithSpecificCultures(IPsiSourceFile resourceFile);
    public virtual ICollection`1<IPsiSourceFile> GetResourcesWithCulture(IPsiSourceFile resourceFile, string cultureName);
    public virtual string GetCultureName(IPsiSourceFile sourceFile);
    [CanBeNullAttribute]
public IPsiSourceFile GetBaseCultureFile(IPsiSourceFile projectFile, string baseCultureName);
    [CanBeNullAttribute]
public IPsiSourceFile GetResourceWithCulture(IPsiSourceFile resourceFile, string cultureName);
    [CompilerGeneratedAttribute]
private void <EnsureSolutionResourceCache>b__5_1();
}
public static class JetBrains.ReSharper.Feature.Services.Resx.Services.WinRTResourceHelper : object {
    public static string DefaultResourceFileName;
    public static string PackageAppxManifest;
    public static Regex FolderNameQualifierParser;
    public static Regex FileNameQualifierParser;
    private static WinRTResourceHelper();
    public static bool IsWindowsStorePackage(IProject project);
    public static bool IsDefaultResourceFile(string resourceFileName);
    public static string GetResourceFileFullName(IPsiSourceFile projectFile);
    [NotNullAttribute]
public static OneToSetMap`2<string, string> GetResourceFileQualifiers(IPsiSourceFile file);
    private static void FillQuialifiers(Match match, OneToSetMap`2<string, string> qualifiers);
    [NotNullAttribute]
public static ICollection`1<IPsiSourceFile> ResolveResourceFiles(IProject project, string resourceFullName, TargetFrameworkId targetFrameworkId);
    public static List`1<DeclaredElementInstance> ResolveResource(IList`1<string> nameParts, IProject currentProject, TargetFrameworkId targetFrameworkId);
    [NotNullAttribute]
public static IEnumerable`1<DeclaredElementInstance`1<T>> ResolveResourceItem(IDictionary`2<string, IProject> packagesMap, string packageName, string resourceFileName, string resourceName);
    [NotNullAttribute]
public static IEnumerable`1<DeclaredElementInstance`1<T>> ResolveResourceItem(IProject project, string resourceFileName, string resourceName);
    [NotNullAttribute]
public static IEnumerable`1<IPsiSourceFile> ResolveResourceFilesInProject(IProject project, string resourceFileName);
    [NotNullAttribute]
public static ISymbolTable GetResourcesSymbolTable(IProject project);
    [NotNullAttribute]
public static IDictionary`2<string, IProject> GetPackagesMap(IProject project, TargetFrameworkId targetFrameworkId);
}
public abstract class JetBrains.ReSharper.Feature.Services.Resx.Services.WinRTResourceServiceBase : ResourceService {
    public virtual bool IsDefaultCulture(IPsiSourceFile resourceFile);
    public virtual IEnumerable`1<IPsiSourceFile> GetResourcesWithAllCultures(IPsiSourceFile resourceFile);
    public virtual ICollection`1<IPsiSourceFile> GetResourcesWithSpecificCultures(IPsiSourceFile resourceFile);
    public virtual ICollection`1<IPsiSourceFile> GetResourcesWithCulture(IPsiSourceFile resourceFile, string cultureName);
    public virtual string GetCultureName(IPsiSourceFile sourceFile);
    public virtual StringSlice GetResourceName(IPsiSourceFile resourceFile);
    [NotNullAttribute]
private ICollection`1<IPsiSourceFile> GetResourceWithDefaultCulture(IPsiSourceFile resourceFile);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Resx.StringUtil : object {
    [ExtensionAttribute]
public static string TrimToLength(string text);
    [ExtensionAttribute]
public static string TrimToLength(string text, int length);
    [ExtensionAttribute]
public static string TrimAllLines(string text);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Resx.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
