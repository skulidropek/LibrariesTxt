[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.VB.AI.VBLanguageChatContextProvider : object {
    [PureAttribute]
private static Nullable`1<VBLanguageLevel> GetVBLanguageLevel(IPsiModule module_);
    public sealed virtual override string GetLanguageOrTechnologyPresentation(IPsiModule module_);
}
public class JetBrains.ReSharper.Feature.Services.VB.AttributeInfoCandidateFactory : object {
    private IDeclaredType AttributeClass;
    public AttributeInfoCandidateFactory(IDeclaredType _class);
    public sealed virtual override ICandidate CreateCandidate(ISolution solution, IParametersOwner parametersOwner, ISubstitution substitution, bool isExtensionMethod);
    public sealed virtual override void FilterCandidates(ParameterInfoContextBase context, IArgumentList argList);
}
public interface JetBrains.ReSharper.Feature.Services.VB.Bulbs.IVBContextActionDataProvider {
    [NotNullAttribute]
public VBElementFactory ElementFactory { get; }
    [CanBeNullAttribute]
public abstract virtual IVBControlFlowGraph GetControlFlowGraph();
    public abstract virtual VBElementFactory get_ElementFactory();
}
[ContextActionDataBuilderAttribute("JetBrains.ReSharper.Feature.Services.VB.Bulbs.IVBContextActionDataProvider", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Bulbs.VBContextActionDataBuilder : ContextActionDataBuilderBase`2<VBLanguage, IVBFile> {
    public virtual IContextActionDataProvider BuildFromPsi(ISolution solution, ITextControl textControl, IVBFile psiFile);
}
public class JetBrains.ReSharper.Feature.Services.VB.Bulbs.VBContextActionDataProvider : CachedContextActionDataProviderBase`1<IVBFile> {
    private bool myIsControlFlowGraphCached;
    private IVBControlFlowGraph myCachedControlFlowGraph;
    public VBElementFactory ElementFactory { get; }
    public VBContextActionDataProvider(ISolution solution, ITextControl textControl, IVBFile file);
    public sealed virtual override VBElementFactory get_ElementFactory();
    public sealed virtual override IVBControlFlowGraph GetControlFlowGraph();
    public sealed virtual override VBContextActionDataProvider TryTranslateToCurrentFork(IContentModelForkTranslator translator);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Code.VBReferenceSorterLanguageService : ReferenceSorterLanguageService {
    public virtual ReferenceComparatorDelegate GetReferenceComparator();
    private bool ShouldProcessBefore(IReference referenceX, IReference referenceY, OneToListMap`2<ITreeNode, IReference> references);
    [CompilerGeneratedAttribute]
private int _Lambda$__1-0(IReference referenceX, IReference referenceY, OneToListMap`2<ITreeNode, IReference> references);
}
[CodeCleanupModuleAttribute]
public class JetBrains.ReSharper.Feature.Services.VB.CodeCleanup.OptimizeImports : object {
    public static CodeCleanupOptionDescriptor`1<bool> OptimizeUsingsDescriptor;
    public static CodeCleanupOptionDescriptor`1<bool> ShortenReferencesDescriptor;
    public ICollection`1<CodeCleanupOptionDescriptor> Descriptors { get; }
    public string Name { get; }
    public PsiLanguageType LanguageType { get; }
    public bool IsAvailableOnSelection { get; }
    private static OptimizeImports();
    public sealed virtual override ICollection`1<CodeCleanupOptionDescriptor> get_Descriptors();
    public sealed virtual override void SetDefaultSetting(CodeCleanupProfile profile, DefaultProfileType profileType);
    public sealed virtual override string get_Name();
    public sealed virtual override PsiLanguageType get_LanguageType();
    public sealed virtual override bool get_IsAvailableOnSelection();
    public sealed virtual override bool IsAvailable(IPsiSourceFile sourceFile);
    public sealed virtual override bool IsAvailable(CodeCleanupProfile profile);
    public sealed virtual override void Process(IPsiSourceFile sourceFile, IRangeMarker rangeMarker, CodeCleanupProfile profile, IProgressIndicator progressIndicator, IUserDataHolder cache);
}
[CodeCleanupModuleAttribute]
public class JetBrains.ReSharper.Feature.Services.VB.CodeCleanup.VBReformatCodeCleanupModule : object {
    private static CodeCleanupOptionDescriptor`1<bool> Descriptor;
    private static CodeCleanupOptionDescriptor`1<bool> CommentsDescriptor;
    public ICollection`1<CodeCleanupOptionDescriptor> Descriptors { get; }
    public string Name { get; }
    public PsiLanguageType LanguageType { get; }
    public bool IsAvailableOnSelection { get; }
    private static VBReformatCodeCleanupModule();
    public sealed virtual override ICollection`1<CodeCleanupOptionDescriptor> get_Descriptors();
    public sealed virtual override void SetDefaultSetting(CodeCleanupProfile profile, DefaultProfileType profileType);
    public sealed virtual override string get_Name();
    public sealed virtual override PsiLanguageType get_LanguageType();
    public sealed virtual override bool get_IsAvailableOnSelection();
    public sealed virtual override bool IsAvailable(IPsiSourceFile sourceFile);
    public sealed virtual override bool IsAvailable(CodeCleanupProfile profile);
    public sealed virtual override void Process(IPsiSourceFile sourceFile, IRangeMarker rangeMarker, CodeCleanupProfile profile, IProgressIndicator progressIndicator, IUserDataHolder cache);
}
public interface JetBrains.ReSharper.Feature.Services.VB.CodeCompletion.ISmartCompleatebleReference {
}
public class JetBrains.ReSharper.Feature.Services.VB.CodeCompletion.LookupItems.VBDeclaredElementLookupItemUtil : object {
    public static DeclaredElementPresenterStyle PresenterStyle;
    public static DeclaredElementPresenterStyle NoParametersPresenter;
    public static DeclaredElementPresenterStyle ExtensionMethodsPresenterStyle;
    private static VBDeclaredElementLookupItemUtil();
    public static string GetSimpleTypeNameString(DeclaredElementInstance declaredElementInstance);
    public static bool GetBind(DeclaredElementInstance declaredElementInstance);
    public static bool IsEscapingNecessary(DocumentRange replaceRange);
    public static DocumentRange FixReplaceRangeForEscapedName(ITextControl textControl, DocumentRange replaceRange);
}
public class JetBrains.ReSharper.Feature.Services.VB.CodeCompletion.LookupItems2.VBDeclaredElementBehavior`1 : DeclaredElementBehavior`1<TInfo> {
    private bool myFixTypeInName;
    public bool RemovesTypeQualifier { get; }
    public bool FixTypeInName { get; public set; }
    public VBDeclaredElementBehavior`1(TInfo info);
    private string RemoveContainingTypeIfNecessary(string typeInName);
    protected virtual DocumentRange DoReplaceText(ITextControl textControl, DocumentRange replaceRange, string typeInName, Suffix& suffix);
    public virtual void FixTypeInNameAndReplaceRangeIfNecessary(ITextControl textcontrol, String& typeInName, DocumentRange& replaceRange);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    protected virtual void InsertTailType(ITextControl textControl, ISolution solution, DocumentOffset offset, TailType tailType, LookupItemInsertType lookupItemInsertType);
    protected virtual void OnAfterComplete(ITextControl textControl, LookupItemInsertType insertType, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker, Boolean& keepCaretStill);
    public virtual bool get_RemovesTypeQualifier();
    public bool get_FixTypeInName();
    public void set_FixTypeInName(bool Value);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.AutopopupEnabledSettingsKey", "JetBrains.ReSharper.Feature.Services.VB.Resources.LocalizedStrings", "VBNETSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.VB.CodeCompletion.Settings.VBAutopopupEnabledSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.VB.Resources.LocalizedStrings", "LetterAndDigitsSettingDescription")]
public AutopopupType OnIdent;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.VB.Resources.LocalizedStrings", "AfterDotSettingDescription")]
public AutopopupType AfterDot;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.VB.Resources.LocalizedStrings", "AfterSettingDescription")]
public AutopopupType AfterUnderscore;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.VB.Resources.LocalizedStrings", "InDocCommentsSettingDescription")]
public AutopopupType OnDocComment;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.VB.Resources.LocalizedStrings", "AfternewSettingDescription")]
public AutopopupType AfterNew;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.VB.Resources.LocalizedStrings", "WhereValueIsExpectedSettingDescription")]
public AutopopupType WhereValueIsExpected;
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntelliSenseCompletingCharactersSettingsKey", "JetBrains.ReSharper.Feature.Services.VB.Resources.LocalizedStrings", "VBNETSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.VB.CodeCompletion.Settings.VBIntelliSenseCompletingCharactersSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.VB.Resources.LocalizedStrings", "CompleteOnSpaceSettingDescription")]
public bool CompleteOnSpace;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.VB.Resources.LocalizedStrings", "NonCompletingCharactersSettingDescription")]
public string NonCompletingCharacters;
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntellisenseEnabledSettingsKey", "JetBrains.ReSharper.Feature.Services.VB.Resources.LocalizedStrings", "OverrideVSIntelliSenseForVBNETSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.VB.CodeCompletion.Settings.VBIntellisenseEnabledSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.VB.Resources.LocalizedStrings", "VBNETVbFilesAndVBNETCodeInSupportedServerPagesSettingDescription")]
public bool IntellisenseEnabled;
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.VB.CodeCompletion.Settings.VBIntellisenseManager : LanguageSpecificCodeCompletionManager {
    public PsiLanguageType PsiLanguage { get; }
    public VBIntellisenseManager(CodeCompletionSettingsService codeCompletionSettings);
    public virtual SettingsScalarEntry GetSettingsEntry(ISettingsSchema settingsSchema);
    public virtual PsiLanguageType get_PsiLanguage();
}
public abstract class JetBrains.ReSharper.Feature.Services.VB.CodeCompletion.VBCodeCompletionContextBase : ClrSpecificCodeCompletionContext {
    protected VBReparsedCodeCompletionContext myUnterminatedContext;
    private TextLookupRanges myRanges;
    private string myContextId;
    private ExpectedTypeCompletionContextBase myExpectedTypesContext;
    private IVBExpectedTypesProvider myExpectedTypesProvider;
    private IVBExpression myExpression;
    private Nullable`1<bool> myIsQualified;
    public bool IsQualified { get; }
    public string ContextId { get; }
    public VBReparsedCodeCompletionContext UnterminatedContext { get; }
    public TextLookupRanges Ranges { get; }
    [CanBeNullAttribute]
public ExpectedTypeCompletionContextBase ExpectedTypeContext { get; }
    public IVBExpression Expression { get; }
    public IVBExpectedTypesProvider ExpectedTypesProvider { get; }
    public VBCodeCompletionContextBase(CodeCompletionContext codeCompletionContext, VBReparsedCodeCompletionContext unterminatedContext, TextLookupRanges ranges, ExpectedTypeCompletionContextBase expectedTypeContext, IVBExpectedTypesProvider expectedTypeProvider, IVBExpression expression, ITreeNode nodeInFile, IPsiModule psiModule);
    public sealed virtual override bool get_IsQualified();
    public bool IsQualifiedReference(IReference reference);
    public virtual string get_ContextId();
    public VBReparsedCodeCompletionContext get_UnterminatedContext();
    public TextLookupRanges get_Ranges();
    public ExpectedTypeCompletionContextBase get_ExpectedTypeContext();
    public IVBExpression get_Expression();
    public IVBExpectedTypesProvider get_ExpectedTypesProvider();
    protected abstract virtual string GetContextId();
}
public class JetBrains.ReSharper.Feature.Services.VB.CodeCompletion.VBReparsedCodeCompletionContext : ReparsedCodeCompletionContext {
    private int myReferenceOffset;
    public VBReparsedCodeCompletionContext(IFile file, TreeTextRange range, string newText, int referenceOffset);
    protected virtual IReparseContext GetReparseContext(IFile file, TreeTextRange range);
    protected virtual TreeTextRange GetRangeOfReference(int startOffsetInNewNode);
}
internal class JetBrains.ReSharper.Feature.Services.VB.CodeStructure.VBCodeStructureAspect : CodeStructureDeclarationAspects {
    private VBCodeStructureDeclaredElement myElement;
    public VBCodeStructureAspect(VBCodeStructureDeclaredElement element, IDeclaration declaration);
    public virtual DocumentRange[] GetNavigationRanges();
    public virtual void Present(StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    public virtual bool CanMoveElements(RelativeLocation location, IList`1<CodeStructureElement> dropElements);
    public virtual void MoveElements(RelativeLocation location, IList`1<CodeStructureElement> dropElements);
}
internal class JetBrains.ReSharper.Feature.Services.VB.CodeStructure.VBCodeStructureClass : VBCodeStructureDeclaredElement {
    public VBCodeStructureClass(CodeStructureElement parentElement, IDeclaration declaration, VBCodeStructureProcessingState state);
}
internal class JetBrains.ReSharper.Feature.Services.VB.CodeStructure.VBCodeStructureDeclaredElement : CodeStructureDeclarationElement {
    private InheritanceInformation myInheritanceInformation;
    private VBCodeStructureRegion myRegion;
    private VBCodeStructureAspect myAspect;
    [CompilerGeneratedAttribute]
private bool _ChildrenHasInheritance;
    public InheritanceInformation InheritanceInformation { get; }
    public ICodeStructureBlockStart ParentBlock { get; }
    public VBCodeStructureRegion Region { get; }
    public bool ChildrenHasInheritance { get; public set; }
    public VBCodeStructureDeclaredElement(CodeStructureElement parentElement, IDeclaration declaration, VBCodeStructureProcessingState state);
    public InheritanceInformation get_InheritanceInformation();
    public virtual ICodeStructureBlockStart get_ParentBlock();
    public VBCodeStructureRegion get_Region();
    [CompilerGeneratedAttribute]
public bool get_ChildrenHasInheritance();
    [CompilerGeneratedAttribute]
public void set_ChildrenHasInheritance(bool AutoPropertyValue);
    public virtual IMemberNavigationAspect GetMemberNavigationAspect();
    public virtual IGotoFileMemberAspect GetGotoMemberAspect();
    public virtual IFileStructureAspect GetFileStructureAspect();
}
public class JetBrains.ReSharper.Feature.Services.VB.CodeStructure.VBCodeStructureEndRegion : CodeStructurePreprocessorElement {
    private VBCodeStructureRegion myRegion;
    public ICodeStructureBlockStart ParentBlock { get; }
    public VBCodeStructureEndRegion(CodeStructureElement parentElement, IPreprocessorDirective preprocessorDirective, VBCodeStructureProcessingState state);
    public virtual override ICodeStructureBlockStart get_ParentBlock();
    public virtual bool CanMoveElements(RelativeLocation location, IList`1<CodeStructureElement> dropElements);
    public virtual void MoveElements(RelativeLocation location, IList`1<CodeStructureElement> dropElements);
    protected virtual string GetText();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.CodeStructure.VBCodeStructureEnregionService : object {
    public PsiLanguageType Language { get; }
    public sealed virtual override PsiLanguageType get_Language();
    public sealed virtual override ITreeNode Execute(IList`1<CodeStructureElement> elements);
}
internal class JetBrains.ReSharper.Feature.Services.VB.CodeStructure.VBCodeStructureNamespace : VBCodeStructureDeclaredElement {
    public VBCodeStructureNamespace(CodeStructureElement parentElement, IDeclaration declaration, VBCodeStructureProcessingState state);
    public virtual IMemberNavigationAspect GetMemberNavigationAspect();
}
public class JetBrains.ReSharper.Feature.Services.VB.CodeStructure.VBCodeStructureProcessingState : object {
    private CodeStructureOptions myOptions;
    private Stack`1<VBCodeStructureRegion> myRegions;
    public CodeStructureOptions Options { get; }
    public Stack`1<VBCodeStructureRegion> Regions { get; }
    public VBCodeStructureProcessingState(CodeStructureOptions options);
    public CodeStructureOptions get_Options();
    public Stack`1<VBCodeStructureRegion> get_Regions();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.CodeStructure.VBCodeStructureProvider : object {
    private static string myClassStub;
    private static VBCodeStructureProvider();
    public sealed virtual override CodeStructureRootElement Build(IFile file, CodeStructureOptions options);
    private static void ProcessElement(ITreeNode element, CodeStructureElement parentElement, VBCodeStructureProcessingState state);
    private static void ProcessMultiDeclaration(IMultipleVariableDeclaration multiDeclaration, CodeStructureElement parentElement, VBCodeStructureProcessingState state);
    private static void ProcessPreprocessor(IPreprocessorDirective preprocessorDirective, CodeStructureElement parentElement, VBCodeStructureProcessingState state);
    public static void ProcessChildren(ITreeNode element, CodeStructureElement structureElement, VBCodeStructureProcessingState state);
    private static void ProcessDeclaration(IDeclaration declaration, CodeStructureElement parentElement, VBCodeStructureProcessingState state);
    internal static ITreeNode GetLastToken(ITreeNode node);
    private static TreeTextRange JoinRanges(IList`1<IDeclarationsRange> ranges);
    private static IDeclarationsRange MoveDeclarations(IDeclarationsRangeContainer parent, IList`1<IDeclarationsRange> ranges, ITreeNode anchor, bool moveBefore);
    public static bool CanMoveElements(CodeStructureElement anchor, RelativeLocation relativeLocation, IList`1<CodeStructureElement> dropElements);
    public static void MoveElements(CodeStructureElement anchor, RelativeLocation location, IList`1<CodeStructureElement> elements);
    private static object ModeElementsUnderTransaction(IList`1<CodeStructureElement> elements, RelativeLocation location, CodeStructureElement anchor);
    private static IDeclarationsRange MoveItems(ITreeNode parent, ITreeNode anchor, bool moveBefore, IList`1<IDeclarationsRange> ranges);
    private static IList`1<IDeclarationsRange> FindRanges(IList`1<CodeStructureElement> items, CodeStructureElement anchor);
    internal static void RemoveRegion(VBCodeStructureRegion region);
    private static object RemoveRegionUnderTransaction(VBCodeStructureRegion startRegionItem);
    public static ITreeNode EncloseInRegion(IList`1<CodeStructureElement> items);
    private static object EncloseInRegionUnderTransaction(IList`1<CodeStructureElement> items, ITreeNode& resultNode);
    internal static void RenameRegion(VBCodeStructureRegion region, string name);
}
public class JetBrains.ReSharper.Feature.Services.VB.CodeStructure.VBCodeStructureRegion : CodeStructurePreprocessorElement {
    private VBCodeStructureRegion myRegion;
    private bool myExpanded;
    private VBCodeStructureEndRegion myEndRegion;
    public ICodeStructureBlockStart ParentBlock { get; }
    public bool Expanded { get; public set; }
    public VBCodeStructureEndRegion EndRegion { get; public set; }
    public VBCodeStructureRegion(CodeStructureElement parentElement, IPreprocessorDirective preprocessorDirective, VBCodeStructureProcessingState state);
    public virtual override ICodeStructureBlockStart get_ParentBlock();
    public sealed virtual override bool get_Expanded();
    public sealed virtual override void set_Expanded(bool Value);
    public VBCodeStructureEndRegion get_EndRegion();
    public void set_EndRegion(VBCodeStructureEndRegion Value);
    protected virtual string GetText();
    public virtual bool CanMoveElements(RelativeLocation location, IList`1<CodeStructureElement> dropElements);
    public virtual void MoveElements(RelativeLocation location, IList`1<CodeStructureElement> dropElements);
    public virtual bool CanRemove();
    public virtual void Remove();
    public virtual bool CanRename();
    public virtual void Rename(string newName);
    public virtual string InitialName();
}
internal class JetBrains.ReSharper.Feature.Services.VB.CodeStructure.VBCodeStructureRootElement : CodeStructureRootElement {
    public VBCodeStructureRootElement(IVBFile file);
    public virtual PresentationState CreatePresentationState();
    private void CountState(CodeStructureElement element, Int32& namespaceCount, Int32& typeCount);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.Comment.VBLineCommentProvider : SimpleLineCommentActionProvider {
    public string StartLineCommentMarker { get; }
    protected virtual bool IsEndOfLineComment(TokenNodeType tokenType, string tokenText);
    protected virtual SpecialCommentFlags IsSpecialEndOfLineComment(TokenNodeType tokenType, string tokenText);
    protected virtual bool IsNewLine(TokenNodeType tokenType);
    protected virtual bool IsWhitespace(TokenNodeType tokenType);
    public virtual string get_StartLineCommentMarker();
    protected virtual int GetStartCommentLength(ITokenNode tokenNode);
    public virtual bool ShouldInsertAtLineStart(IContextBoundSettingsStore settingsStore);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.CompleteStatement.VBCompleteStatementActionProvider : ElementBasedCompleteStatementActionProvider {
}
public enum JetBrains.ReSharper.Feature.Services.VB.ContextType : Enum {
    public int value__;
    public static ContextType DocCommentBlock;
    public static ContextType ExtendsList;
    public static ContextType Statement;
    public static ContextType TypeMember;
    public static ContextType Namespace;
    public static ContextType File;
}
[SettingsKeyAttribute("JetBrains.ReSharper.Resources.Settings.CodeInspectionSettings", "JetBrains.ReSharper.Feature.Services.VB.Resources.LocalizedStrings", "VBNETCodeInspectionSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.VB.Daemon.VBCodeInspectionsSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.VB.Resources.LocalizedStrings", "UseReSharperAnalysisSettingDescription")]
public bool VBUseReSharperAnalysis;
}
public abstract class JetBrains.ReSharper.Feature.Services.VB.Daemon.VBDaemonStageBase : object {
    public abstract virtual IDaemonStageProcess CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind, IVBFile file);
    public sealed virtual override IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
    protected virtual bool IsSupported(IPsiSourceFile sourceFile, IContextBoundSettingsStore settingsStore);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Debugger.VBDebuggerLocalSymbolProvider : object {
    public sealed virtual override Tuple`2<ITreeNode, IDeclaredElement> FindLocalDeclarationAt(IFile file, DocumentRange range, string name);
    public sealed virtual override ITreeNode FindContainingFunctionDeclarationBody(ITreeNode node);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Debugger.VBExpressionEvaluationProvider : object {
    public sealed virtual override EvaluationExpressionInfo FindExpression(IFile psiFile, DocumentRange range, EvaluationMode evaluationMode, IFile evaluationPointFile, DocumentOffset evaluationPointOffset, bool promoteToInvocation);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Debugger.VBOnDeclarationEvaluationProvider : object {
    public sealed virtual override EvaluationExpressionInfo FindExpression(IFile psiFile, DocumentRange range, EvaluationMode evaluationMode, IFile evaluationPointFile, DocumentOffset evaluationPointOffset, bool promoteToInvocation);
    private static bool IsPropertyOrFieldEval(IVBIdentifier identifier);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.VB.Debugger.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.ExpressionSelection.VBExpressionSelectionProvider : ExpressionSelectionProviderBase`1<IVBExpression> {
    protected virtual bool IsTokenSkipped(ITokenNode token);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Generate.MemberBody.VBMemberBodyOperations : object {
    [NotNullAttribute]
private IBlock CreateMethodBody(IVBFunctionDeclaration declaration, MethodImplementationKind implementationKind);
    public IBlock CreateDefaultMethodBody(IVBFunctionDeclaration declaration);
    private void FormatBody(IBlock body);
    private DocumentRange GetBodyRange(IBlock body);
    private bool IsFiltered(ITreeNode treeNode);
    public sealed virtual override DocumentRange GetBodyRange(IDeclaration declaration);
    private DocumentRange GetBodyRange(IVBTypeMemberDeclaration ownerDeclaration, IBlock body);
    private DocumentRange SetBody(IAccessorOwnerDeclaration accessorOwnerDeclaration, MethodImplementationKind implementationKind);
    public DocumentRange SetBody(IVBFunctionDeclaration declaration, IBlock bodyBlock);
    private DocumentRange SetBody(IVBFunctionDeclaration declaration, MethodImplementationKind implementationKind);
    public sealed virtual override DocumentRange SetBody(IDeclaration declaration, MethodImplementationKind implementationKind);
    public sealed virtual override DocumentRange SetBodyToDefault(IDeclaration declaration);
    public sealed virtual override DocumentRange SetParameterlessMethodCall(IDeclaration declaration, IMethod methodToCall);
    public IBlock CreateBodyBlock(IVBFunctionDeclaration declaration);
    private IBlock CreateReturnStatementBody(IVBFunctionDeclaration declaration);
    public sealed virtual override DocumentRange SetDelegatingCall(ITypeMemberDeclaration declaration, IClrDeclaredElement qualifier, IOverridableMember delegateTo);
    public sealed virtual override void RemoveBody(IDeclaration declaration);
    public IBlock CreateDelegatingBody(IVBFunctionDeclaration declaration, IClrDeclaredElement qualifier, IOverridableMember delegateTo);
    private IBlock CreateDelegatingBody(IVBFunctionDeclaration declaration, object qualifier, IOverridableMember delegateTo, ISubstitution substitution);
    private IBlock CreateEventAccessorBody(IAccessorDeclaration accessorDeclaration, object qualifier, IOverridableMember delegateTo);
    private IBlock CreateMethodBody(IMethodDeclaration declaration, object qualifier, IOverridableMember delegateTo, ISubstitution substitution);
    private static void AddArguments(IParametersOwnerDeclaration parametersOwnerDelcrations, IVBArgumentsOwner argumentsOwner);
    private IBlock CreatePropertyAccessorBody(IAccessorDeclaration accessorDeclaration, object qualifier, IOverridableMember delegateTo);
    private static string GetValueName(IAccessorDeclaration setterDeclaration);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Generate.MemberBody.VBPropertyBodyUtil : object {
    private VBMemberBodyOperations myBodyOperations;
    public VBPropertyBodyUtil(VBMemberBodyOperations bodyOperations);
    public void CreateBackingField(IPropertyDeclaration propertyDeclaration, string backingFieldName);
    public IEnumerable`1<string> GetBackingFieldCandidates(IPropertyDeclaration propertyDeclaration);
    public bool IsBackingFieldAvailable(IPropertyDeclaration propertyDeclaration, string fieldName);
    public DocumentRange SetBackingFieldBody(IAccessorDeclaration declaration, string backingFieldName);
    public DocumentRange SetBackingFieldBody(IAccessorOwnerDeclaration declaration, string backingFieldName);
    public string SuggestBackingFieldName(IPropertyDeclaration property);
    public void SetAutoPropertyBody(IPropertyDeclaration declaration);
    public DocumentRange SetDefaultBody(IAccessorDeclaration declaration);
    public DocumentRange SetDefaultBody(IAccessorOwnerDeclaration declaration);
}
[GeneratorElementProviderAttribute("DisposePattern", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.Generate.VBAutoPropertiesOfDisposableTypeProvider : VBGeneratorProviderBase {
    public double Priority { get; }
    public virtual double get_Priority();
    public virtual void Populate(VBGeneratorContext context);
}
[GeneratorElementProviderAttribute("RelationalMembers", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[GeneratorElementProviderAttribute("RelationalComparer", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.Generate.VBAutoPropertiesOfRelationalTypeProvider : VBGeneratorProviderBase {
    public double Priority { get; }
    public virtual double get_Priority();
    public virtual void Populate(VBGeneratorContext context);
}
[GeneratorElementProviderAttribute("EqualityMembers", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[GeneratorElementProviderAttribute("EqualityComparer", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.Generate.VBAutoPropertiesProvider : VBGeneratorProviderBase {
    public double Priority { get; }
    public virtual double get_Priority();
    public virtual void Populate(VBGeneratorContext context);
}
public class JetBrains.ReSharper.Feature.Services.VB.Generate.VBBuilderOptions : object {
    public static string AccessRights;
    public static string CanBeNull;
    public static string Async;
    public static string ChangeEquals;
    public static string ChangeGetHashCode;
    public static string EqualityOperators;
    public static string ImplementIEquatable;
    public static string ImplementationKind;
    public static string ReadOnly;
    public static string Overridable;
    public static string NotifyPropertyChanges;
    public static string PropertyBody;
    public static string XmlDocumentation;
    public static String[] AccessRightsChoices;
    public static String[] ImplementationKindChoices;
    public static String[] PropertyBodyChoices;
    public static String[] ReadOnlyChoices;
    public static Dictionary`2<AccessorImplementationKind, string> PropertyBodyOptions;
    private static VBBuilderOptions();
    public static AccessRights GetAccessRights(string optionValue);
}
internal abstract class JetBrains.ReSharper.Feature.Services.VB.Generate.VBComparerBuilderBase : GeneratorComparerBuilderBase`1<VBGeneratorContext> {
    [CompilerGeneratedAttribute]
private ILanguageManager _LanguageManager;
    protected ILanguageManager LanguageManager { get; protected set; }
    protected String[] ComparerTypePostfixes { get; }
    protected string GenericComparerTypeFqn { get; }
    protected VBComparerBuilderBase(ILanguageManager languageManager);
    [CompilerGeneratedAttribute]
protected ILanguageManager get_LanguageManager();
    [CompilerGeneratedAttribute]
protected void set_LanguageManager(ILanguageManager AutoPropertyValue);
    protected abstract virtual String[] get_ComparerTypePostfixes();
    protected abstract virtual string get_GenericComparerTypeFqn();
    protected virtual IDeclaredType GetMemberSource(VBGeneratorContext context);
    protected virtual void Process(VBGeneratorContext context);
    private void CreateExposedProperty(VBGeneratorContext context, VBElementFactory factory, string propertyName, IVBTypeMemberDeclaration comparerInnerType, string fieldName);
    protected abstract virtual IVBTypeMemberDeclaration CreateComparerType(VBGeneratorContext context, VBElementFactory factory, string comparerTypeName, IReadOnlyList`1<GeneratorComparisonMemberDescriptor> members);
    protected IDeclaredType GetGenericComparerType(IPsiModule psiModule, IDeclaredType typeArgument);
}
[GeneratorElementProviderAttribute("Constructor", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.Generate.VBConstructorBasesProvider : VBGeneratorProviderBase {
    public double Priority { get; }
    public virtual void Populate(VBGeneratorContext context);
    public virtual double get_Priority();
}
[GeneratorBuilderAttribute("Constructor", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.Generate.VBConstructorBuilder : GeneratorBuilderBase`1<VBGeneratorContext> {
    private static IConstructorDeclaration CreateInstanceCtorDeclaration(VBGeneratorContext context, GeneratorDeclaredElement`1<IConstructor> inputElement, IConstructor constructor);
    private static IVBTypeMemberDeclaration CreateStaticCtorDeclaration(VBGeneratorContext context);
    private static void FilterConflictingMembers(IList`1<GeneratorDeclaredElement`1<IConstructor>> constructors);
    private static string GetDefaultVisibility(ITypeDeclaration declaration);
    protected virtual void BuildOptions(VBGeneratorContext context, ICollection`1<IGeneratorOption> options);
    protected virtual bool HasProcessableElements(VBGeneratorContext context, IEnumerable`1<IGeneratorElement> elements);
    protected virtual void Process(VBGeneratorContext context);
}
[GeneratorBuilderAttribute("Constructor", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.Generate.VBConstructorFieldInitializer : GeneratorBuilderBase`1<VBGeneratorContext> {
    private static string CheckParametersForNullOption;
    public double Priority { get; }
    protected virtual bool HasProcessableElements(VBGeneratorContext context, IEnumerable`1<IGeneratorElement> elements);
    protected virtual void BuildOptions(VBGeneratorContext context, ICollection`1<IGeneratorOption> options);
    protected virtual void Process(VBGeneratorContext context);
    public virtual double get_Priority();
}
[GeneratorElementProviderAttribute("Constructor", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.Generate.VBConstructorFieldProvider : VBGeneratorProviderBase {
    public double Priority { get; }
    public virtual double get_Priority();
    private static bool IsTrivial(IDeclaration declaration);
    public virtual void Populate(VBGeneratorContext context);
}
internal class JetBrains.ReSharper.Feature.Services.VB.Generate.VBConstructorInitializationHelper : object {
    private VBGeneratorContext myContext;
    private IConstructorDeclaration myConstructorDeclaration;
    private IReadOnlyList`1<ITypeOwner> myMembers;
    private bool myCheckParametersForNull;
    private VBElementFactory myFactory;
    private NullnessProvider myNullnessProvider;
    private TreeNodeCollection`1<IRegularParameterDeclaration> myConstructorParameters;
    public VBConstructorInitializationHelper(VBGeneratorContext context, IConstructorDeclaration constructorDeclaration, IReadOnlyList`1<ITypeOwner> members, bool checkParametersForNull);
    public void Generate();
    private IRegularParameterDeclaration GetOrCreateParameterDeclaration(ITypeOwner member);
    private string GetParameterName(ITypeOwner member);
    private bool IsAnnotatedAsCanBeNull(ITypeOwner member);
    private IVBStatement CreateCheckForNullStatement(IRegularParameterDeclaration parameterDeclaration);
}
[GeneratorBuilderAttribute("Delegating", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.Generate.VBDelegatingMembersBuilder : GeneratorBuilderBase`1<VBGeneratorContext> {
    private ILanguageManager myLanguageManager;
    public VBDelegatingMembersBuilder(ILanguageManager languageManager);
    protected virtual void Process(VBGeneratorContext context);
    protected virtual bool HasProcessableElements(VBGeneratorContext context, IEnumerable`1<IGeneratorElement> elements);
    private void GenerateWrapper(VBGeneratorContext context, GeneratorDelegatingElement inputElement, IOverridableMember overridableMember, bool canImplementExplicitly);
    public void SetAccessorsRights(IAccessorOwnerDeclaration accessorOwnerDeclaration, AccessRights accessRights, IOverridableMember member);
}
[GeneratorElementProviderAttribute("Delegating", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.Generate.VBDelegatingMembersProvider : VBGeneratorProviderBase {
    public double Priority { get; }
    public virtual void Populate(VBGeneratorContext context);
    public int CompareWithIndicies(Dictionary`2<OverridableMemberInstance, int> indicies, OverridableMemberInstance x, OverridableMemberInstance y);
    private static bool IsFromObject(OverridableMemberInstance overridableMember);
    public virtual double get_Priority();
}
[GeneratorBuilderAttribute("DisposePattern", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Generate.VBDisposePatternBuilder : GeneratorDisposePatternBuilderBase`1<VBGeneratorContext> {
    protected string FinalizeName { get; }
    protected virtual string get_FinalizeName();
    protected virtual ITypeElement GetContainingType(VBGeneratorContext context);
    protected virtual void Process(VBGeneratorContext context, IProgressIndicator progress);
    protected virtual bool HasFinalize(VBGeneratorContext context);
    private bool IsNeedToCreateFinalize(VBGeneratorContext context);
    private static bool MakeSenseToAddDispose(IClass containingClass);
    private void CreateSimpleDispose(VBGeneratorContext context, VBDisposePatternHelper helper);
    private IMethodDeclaration CreateDisposeWithBoolParameter(VBGeneratorContext context, VBDisposePatternHelper helper);
    private IMethodDeclaration CreateDispose(VBGeneratorContext context, VBDisposePatternHelper helper, bool classHasOnlyUnmanagedResources, Boolean& reimplementDisposable);
    private void CreateFinalize(VBGeneratorContext context, VBDisposePatternHelper helper, bool classHasOnlyUnmanagedResources);
    private void CreateReleaseUnmanagedResources(VBGeneratorContext context, VBDisposePatternHelper helper);
    private IMethodDeclaration GetOrCreateDisposeDeclaration(VBGeneratorContext context, VBDisposePatternHelper helper, bool isBoolParameter);
    private static IMethodDeclaration GetOrCreateFinalizeDeclaration(VBGeneratorContext context, VBDisposePatternHelper helper);
    private static void AddDisposableInterface(VBGeneratorContext context, ITypeElement containingTypeElement, VBDisposePatternHelper helper, bool reimplement);
    private static IVBComment CreateCommentNode(VBElementFactory factory, string comment);
}
internal class JetBrains.ReSharper.Feature.Services.VB.Generate.VBDisposePatternHelper : object {
    private ITreeNode myContext;
    private IPsiModule myModule;
    private IReadOnlyList`1<ITypeOwner> myMembers;
    private bool myCanMembersBeNull;
    private VBElementFactory myFactory;
    private ITypeElement myContainingType;
    public ITypeElement ContainingType { get; }
    public VBElementFactory Factory { get; }
    public IDeclaredType DisposableInterface { get; }
    public VBDisposePatternHelper(ITreeNode context, ITypeElement containingType, IReadOnlyList`1<ITypeOwner> members, bool canMembersBeNull);
    public ITypeElement get_ContainingType();
    public VBElementFactory get_Factory();
    public IDeclaredType get_DisposableInterface();
    public IBlock GenerateMemberDisposingBody();
    private IVBStatement CreateMemberDisposeStatement(ITypeOwner member, bool canBeNull);
}
[GeneratorBuilderAttribute("EqualityComparer", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.Generate.VBEqualityComparerBuilder : VBComparerBuilderBase {
    protected String[] ComparerTypePostfixes { get; }
    protected string GenericComparerTypeFqn { get; }
    public VBEqualityComparerBuilder(ILanguageManager languageManager);
    protected virtual String[] get_ComparerTypePostfixes();
    protected virtual string get_GenericComparerTypeFqn();
    protected virtual void BuildOptions(VBGeneratorContext context, ICollection`1<IGeneratorOption> options);
    protected virtual IVBTypeMemberDeclaration CreateComparerType(VBGeneratorContext context, VBElementFactory factory, string comparerTypeName, IReadOnlyList`1<GeneratorComparisonMemberDescriptor> members);
}
public class JetBrains.ReSharper.Feature.Services.VB.Generate.VbEqualityHelper : object {
    private ITreeNode myContext;
    private ITypeElement myType;
    private VBElementFactory myFactory;
    private IReadOnlyList`1<GeneratorComparisonMemberDescriptor> myMembers;
    private IPsiModule myModule;
    private static string EqualityComparerCLRTypeName;
    private static string StringComparisonCLRTypeName;
    private static string StringComparerCLRTypeName;
    public ITypeElement Type { get; }
    public VBElementFactory Factory { get; }
    public bool HasMembers { get; }
    public IPsiModule PsiModule { get; }
    public VbEqualityHelper(ITreeNode context, ITypeElement type, VBElementFactory factory, IReadOnlyList`1<GeneratorComparisonMemberDescriptor> members);
    public ITypeElement get_Type();
    public VBElementFactory get_Factory();
    public bool get_HasMembers();
    public IPsiModule get_PsiModule();
    private DeclaredElementInstance GetTypeMember(string typeName, string memberName, IType parameterType);
    public IBlock GenerateTypedEqualsBody(object comparand, bool emitBaseCall, bool emitChecks);
    public IBlock GenerateObjectEqualsBody(object comparand, TypeEqualityCheckMode mode);
    public IBlock GenerateComparatorEqualsBody(object lhsComprand, object rhsComparand);
    private string GenerateTypeCheckTemplate(TypeEqualityCheckMode mode, IClass classType);
    private void AppendMembersComparison(StringBuilder builder, List`1<object> args, object baseOperand, string lhsPrefix, string rhsPrefix);
    private static string CreateComparisonExpressionFormat(IType commonType);
    private static bool IsSuitableForEqualityOperator(IType type);
    public static IVBExpression CreateEqualityCheckExpression(VBElementFactory factory, IType commonType, object lhsComparand, object rhsComparand);
    public IBlock GenerateGetHashCodeBody(bool emitBaseCall, bool useSystemHashCode, object operand);
    private IBlock GenerateGetHashCodeBodyWithSystemHashCode(object operand, bool emitBaseCall);
    private IBlock GenerateGetHashCodeBodyWithoutSystemHashCode(object operand, bool emitBaseCall);
    private string GenerateHashCodeAccumulatorVariableName();
    private void AppendHashMember(StringBuilder builder, string operandPrefix, bool isSystemHashCodeArgument, GeneratorComparisonMemberDescriptor member, List`1<object> args);
}
[GeneratorBuilderAttribute("EqualityMembers", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Generate.VBEqualityMembersBuilder : GeneratorEqualityMembersBuilderBase`1<VBGeneratorContext> {
    private ILanguageManager myLanguageManager;
    public VBEqualityMembersBuilder(ILanguageManager languageManager);
    protected virtual IDeclaredType GetMemberSource(VBGeneratorContext context);
    protected virtual void Process(VBGeneratorContext context);
    private void CreateTypedEquals(VBGeneratorContext context, VbEqualityHelper helper);
    private void CreateObjectEquals(VBGeneratorContext context, VbEqualityHelper helper);
    private void CreateGetHashCode(VBGeneratorContext context, VbEqualityHelper helper);
    private void CreateEqualityOperators(VBGeneratorContext context, VBElementFactory factory);
    private static IMethodDeclaration FindExistingDeclaration(VBGeneratorContext context, IOverridableMember replaceMember, string replaceOption, Boolean& emitDeclaration);
    private void SetBodyToDefault(IDeclaration declaration);
}
[GeneratorBuilderAttribute("EventSubscriptions", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Generate.VBEventSubscriptionsBuilder : GenerateEventSubscriptionsBuilderBase`1<VBGeneratorContext> {
    public double Priority { get; }
    public virtual double get_Priority();
    protected virtual void Process(VBGeneratorContext context);
    protected virtual string GetEventName(IGeneratorElement element);
    public void Process(VBGeneratorContext context, bool emitHandles, AccessRights handlerAccessRights);
    protected virtual IDelegate GetMatchingDelegateType(GeneratorEventElement element, ISubstitution& substitution);
}
[GeneratorBuilderAttribute("Formatting", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.Generate.VBFormattingBuilder : GeneratorBuilderBase`1<VBGeneratorContext> {
    private static string ChangeToStringOption;
    private static string UseNameOfOption;
    protected virtual void BuildOptions(VBGeneratorContext context, ICollection`1<IGeneratorOption> options);
    protected virtual bool HasProcessableElements(VBGeneratorContext context, IEnumerable`1<IGeneratorElement> elements);
    protected virtual void Process(VBGeneratorContext context);
    private static IBlock GenerateBody(VBGeneratorContext context, IList`1<ITypeOwner> members, bool isInterpolation, bool useNameOfReferences);
    private static IMethodDeclaration GetOrCreateToString(VBGeneratorContext context, VBElementFactory factory);
    protected static IOverridableMember FindExistingToString(ITypeElement type);
}
public class JetBrains.ReSharper.Feature.Services.VB.Generate.VBGenerateUtil : object {
    private static IVBTypeMemberDeclaration CreateEvent(VBElementFactory factory, IEvent member, ISubstitution substitution, IClassLikeDeclaration classDeclaration, ISubstitution& newSubstitution, bool forDelegation);
    private static ITreeNode GetMemberResolveContext(IClassLikeDeclaration declaration);
    [PureAttribute]
public static bool CanMethodBeAsync(IMethod method);
    public static string CreateFieldPresentation(IDeclaredElement declaredElement);
    public static string CreateFieldName(IDeclaredElement declaredElement, IPsiSourceFile sourceFile);
    public static IVBTypeMemberDeclaration CreateMemberDeclaration(IClassLikeDeclaration classDeclaration, ISubstitution substitution, IOverridableMember member, bool forDelegation, ISubstitution& newSubstitution, bool uniqueName);
    public static IVBTypeMemberDeclaration CreateEventHandlerDeclaration(IClassLikeDeclaration classDeclaration, IDelegate handlerDelegateType, ISubstitution substitution);
    public static void CopyTypeParametersConstraints(ITypeParametersOwner from, IMethodDeclaration toMethod, ISubstitution substitution);
    private static IVBTypeMemberDeclaration CreateMethod(VBElementFactory factory, IMethod method, ISubstitution substitution, IClassLikeDeclaration classDeclaration, ISubstitution& newSubstitution, bool forDelegation, bool uniqueName);
    public static IType MakeSafeType(IType type, ISubstitution substitution, IVBTreeNode context);
    private static string SuggestUniqueName(ITypeMember sourceMember, ITypeElement destinationClass);
    private static string GetNameSafe(IDeclaredElement parameter);
    private static IVBTypeMemberDeclaration CreateProperty(VBElementFactory factory, IProperty property, ISubstitution substitution, IClassLikeDeclaration classDeclaration, ISubstitution& newSubstitution, bool forDelegation);
    public static List`1<IProperty> GetAutoProperties(ITypeElement typeElement, ITreeNode resolveContext);
    public static List`1<IField> GetFieldsFiltered(ITypeElement typeElement, bool allowStatic);
    public static bool IsPartial(ITypeElement type);
}
public class JetBrains.ReSharper.Feature.Services.VB.Generate.VBGeneratorContext : GeneratorContextBase {
    [NotNullAttribute]
private IClassLikeDeclaration myClassDeclaration;
    [NotNullAttribute]
private IPsiServices myPsiServices;
    [CanBeNullAttribute]
private ITreeNode myAnchor;
    private ITreeNodePointer`1<IVBTypeMemberDeclaration> myCaretDeclaration;
    public ITreeNode Anchor { get; public set; }
    public IClassLikeDeclaration ClassDeclaration { get; }
    public PsiLanguageType Language { get; }
    public ISolution Solution { get; }
    public IPsiModule PsiModule { get; }
    public ITreeNode Root { get; }
    private VBGeneratorContext(string kind, IClassLikeDeclaration classDeclaration, ITreeNode anchor);
    public static VBGeneratorContext CreateContext(string kind, IPsiDocumentRangeView psiDocumentRangeView);
    public static VBGeneratorContext CreateContext(string kind, IClassLikeDeclaration classLikeDeclaration, ITreeNode anchor);
    public virtual IGeneratorContextPointer CreatePointer();
    private static ITreeNode GetElementForCaretPosition(IVBTypeMemberDeclaration declaration);
    private static ICollection`1<OverridableMemberInstance> GetInheritanceChain(OverridableMemberInstance member);
    public virtual TreeTextRange GetSelectionTreeRange();
    private IVBTypeMemberDeclaration InsertConstructor(IConstructorDeclaration declaration);
    private IVBTypeMemberDeclaration InsertField(IVariableDeclaration declaration);
    private IVBTypeMemberDeclaration InsertNearOtherFromSameBaseType(IVBTypeMemberDeclaration declaration, IGeneratorElement inputElement);
    private IVBTypeMemberDeclaration InsertProperty(IPropertyDeclaration declaration);
    private IVBTypeMemberDeclaration InsertEventHandler(IMethodDeclaration declaration);
    public TTypeMemberDeclaration PutMemberDeclaration(TTypeMemberDeclaration declaration, IGeneratorElement inputElement, Func`2<TTypeMemberDeclaration, IGeneratorElement> itemCreator);
    private IVBTypeMemberDeclaration PutMemberDeclarationImpl(IVBTypeMemberDeclaration declaration, IGeneratorElement inputElement);
    private bool IsAnchorInClassBody();
    public virtual ITreeNode get_Anchor();
    public virtual void set_Anchor(ITreeNode value);
    public IClassLikeDeclaration get_ClassDeclaration();
    public virtual PsiLanguageType get_Language();
    public virtual ISolution get_Solution();
    public virtual IPsiModule get_PsiModule();
    public virtual ITreeNode get_Root();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Generate.VBGeneratorContextFactory : object {
    public sealed virtual override IGeneratorContext TryCreate(string kind, IPsiDocumentRangeView psiDocumentRangeView);
    public sealed virtual override IGeneratorContext TryCreate(string kind, ITreeNode targetContext, ITreeNode anchor);
    public sealed virtual override IGeneratorContext TryCreate(string kind, IDeclaredElement contextElement);
}
public abstract class JetBrains.ReSharper.Feature.Services.VB.Generate.VBGeneratorProviderBase : object {
    public double Priority { get; }
    public abstract virtual void Populate(VBGeneratorContext context);
    public abstract virtual override double get_Priority();
    public sealed virtual override void Populate(IGeneratorContext context);
}
[GeneratorBuilderAttribute("Overrides", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[GeneratorBuilderAttribute("Implementations", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.Generate.VBImplementingMembersBuilder : GeneratorBuilderBase`1<VBGeneratorContext> {
    public double Priority { get; }
    public virtual double get_Priority();
    protected virtual void BuildOptions(VBGeneratorContext context, ICollection`1<IGeneratorOption> options);
    private static bool HasInterfaceMembers(IGeneratorContext context);
    private static bool HasTaskReturningMethods(IGeneratorContext context);
    protected virtual bool HasProcessableElements(VBGeneratorContext context, IEnumerable`1<IGeneratorElement> elements);
    protected virtual void Process(VBGeneratorContext context);
    private static void GenerateInheritor(VBGeneratorContext context, GeneratorDeclaredElement`1<IOverridableMember> inputElement, IOverridableMember overridableMember);
    private static IVBTypeMemberDeclaration CreateImplementation(VBGeneratorContext context, GeneratorDeclaredElement`1<IOverridableMember> inputElement, IOverridableMember baseMember);
}
[GeneratorBuilderAttribute("Implementations", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[GeneratorBuilderAttribute("Overrides", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.Generate.VBInheritedBodyBuilder : GeneratorBuilderBase`1<VBGeneratorContext> {
    private ILanguageManager myLanguageManager;
    public double Priority { get; }
    public VBInheritedBodyBuilder(ILanguageManager languageManager);
    public virtual double get_Priority();
    protected virtual void BuildOptions(VBGeneratorContext context, ICollection`1<IGeneratorOption> options);
    protected virtual void Process(VBGeneratorContext context);
    private bool BuildDelegationBody(VBGeneratorContext context, GeneratorOverrideDeclarationElement outputElement, IDeclaration declaration);
    private void EnsureBody(IMethodDeclaration declaration, VBGeneratorContext context, GeneratorOverrideDeclarationElement outputElement);
    private void EnsureBody(IAccessorDeclaration declaration, VBGeneratorContext context, GeneratorOverrideDeclarationElement outputElement, string fieldName);
    private static IField GetOrCreateFieldFor(IAccessorDeclaration declaration, GeneratorOverrideDeclarationElement outputElement, VBGeneratorContext context, string fieldName);
}
[GeneratorElementProviderAttribute("DisposePattern", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.Generate.VBInstanceFieldOfDisposableTypeProvider : VBInstanceFieldProviderBase {
    protected virtual bool FieldFilter(IField field, ITreeNode context);
}
[GeneratorElementProviderAttribute("RelationalMembers", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[GeneratorElementProviderAttribute("RelationalComparer", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.Generate.VBInstanceFieldOfRelationalTypeProvider : VBInstanceFieldProviderBase {
    protected virtual bool FieldFilter(IField field, ITreeNode context);
}
[GeneratorElementProviderAttribute("EqualityMembers", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[GeneratorElementProviderAttribute("EqualityComparer", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[GeneratorElementProviderAttribute("Formatting", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.Generate.VBInstanceFieldProvider : VBInstanceFieldProviderBase {
}
internal abstract class JetBrains.ReSharper.Feature.Services.VB.Generate.VBInstanceFieldProviderBase : VBGeneratorProviderBase {
    public double Priority { get; }
    public virtual double get_Priority();
    public virtual void Populate(VBGeneratorContext context);
    protected virtual bool FieldFilter(IField field, ITreeNode context);
}
public class JetBrains.ReSharper.Feature.Services.VB.Generate.VBNotifyPropertyChangedUtil : object {
    public static IVBStatement EmitNotifyCall(IMethod notifyMethod, IPropertyDeclaration notifyContext, IProperty propertyToNotify, IField backingField);
    private static bool IsCallerMemberNameParameter(IParameter parameter);
}
[GeneratorBuilderAttribute("Implementations", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[GeneratorBuilderAttribute("Overrides", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.Generate.VBOverridingMembersBuilder : GeneratorBuilderBase`1<VBGeneratorContext> {
    protected virtual bool HasProcessableElements(VBGeneratorContext context, IEnumerable`1<IGeneratorElement> elements);
    protected virtual void BuildOptions(VBGeneratorContext context, ICollection`1<IGeneratorOption> options);
    protected virtual void Process(VBGeneratorContext context);
    private IVBTypeMemberDeclaration CreateImplementation(VBGeneratorContext context, GeneratorDeclaredElement`1<IOverridableMember> inputElement, IOverridableMember baseMember);
    private static bool HasTaskReturningMethods(IGeneratorContext context);
    private static IList`1<Pair`2<GeneratorDeclaredElement`1<IOverridableMember>, IOverridableMember>> GetMembersToOverride(IGeneratorContext context);
    private static void FilterConflictingMembers(ICollection`1<Pair`2<GeneratorDeclaredElement`1<IOverridableMember>, IOverridableMember>> abstractMembers);
    private void GenerateInheritor(VBGeneratorContext context, GeneratorDeclaredElement`1<IOverridableMember> inputElement, IOverridableMember overridableMember);
    private void SetAccessorsRights(IAccessorOwnerDeclaration accessorOwnerDeclaration, AccessRights accessRights, IOverridableMember member);
}
[GeneratorElementProviderAttribute("PartialMethods", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.Generate.VBPartialMethodProvider : VBGeneratorProviderBase {
    public double Priority { get; }
    public virtual double get_Priority();
    public virtual void Populate(VBGeneratorContext context);
}
[GeneratorBuilderAttribute("PartialMethods", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.Generate.VbPartialMethodsBuilder : GeneratorBuilderBase`1<VBGeneratorContext> {
    private ILanguageManager myLanguageManager;
    public VbPartialMethodsBuilder(ILanguageManager manager);
    protected virtual bool IsAvailable(VBGeneratorContext context);
    protected virtual void Process(VBGeneratorContext context);
}
[GeneratorBuilderAttribute("ReadProperties", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[GeneratorBuilderAttribute("Properties", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.Generate.VBPropertiesBuilder : GeneratorBuilderBase`1<VBGeneratorContext> {
    private static string NotifyChangesOptionTitle;
    private static string NotifyChangesOptionTitleFormat;
    private static VBPropertiesBuilder();
    protected virtual void BuildOptions(VBGeneratorContext context, ICollection`1<IGeneratorOption> options);
    private static IGeneratorOption GetNotifyOption(VBGeneratorContext context, IClass classType);
    protected virtual bool HasProcessableElements(VBGeneratorContext context, IEnumerable`1<IGeneratorElement> elements);
    protected virtual void Process(VBGeneratorContext context);
    private static void EmitNotifyPropertyChange(VBGeneratorContext context, VBElementFactory factory, IAccessorDeclaration setter, IVBStatement assignment, IField field, string notifyOption);
}
[GeneratorElementProviderAttribute("ReadProperties", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[GeneratorElementProviderAttribute("Properties", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.Generate.VBPropertiesFieldProvider : VBGeneratorProviderBase {
    public double Priority { get; }
    public virtual double get_Priority();
    public virtual void Populate(VBGeneratorContext context);
    public IVBTreeNode GetResolveContext(IClassLikeDeclaration declaration);
}
[GeneratorElementProviderAttribute("Formatting", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.Generate.VBReadablePropertiesProvider : VBGeneratorProviderBase {
    public double Priority { get; }
    public virtual double get_Priority();
    public virtual void Populate(VBGeneratorContext context);
}
public class JetBrains.ReSharper.Feature.Services.VB.Generate.VbRelationalCompareHelper : object {
    private ITreeNode myContext;
    private IPsiModule myModule;
    private IReadOnlyList`1<GeneratorComparisonMemberDescriptor> myMembers;
    [CompilerGeneratedAttribute]
private ITypeElement _ContainingType;
    [CompilerGeneratedAttribute]
private VBElementFactory _Factory;
    public ITypeElement ContainingType { get; public set; }
    public VBElementFactory Factory { get; public set; }
    public bool HasMembers { get; }
    public VbRelationalCompareHelper(ITreeNode context, ITypeElement containingType, IReadOnlyList`1<GeneratorComparisonMemberDescriptor> members);
    [CompilerGeneratedAttribute]
public ITypeElement get_ContainingType();
    [CompilerGeneratedAttribute]
public void set_ContainingType(ITypeElement AutoPropertyValue);
    [CompilerGeneratedAttribute]
public VBElementFactory get_Factory();
    [CompilerGeneratedAttribute]
public void set_Factory(VBElementFactory AutoPropertyValue);
    public bool get_HasMembers();
    public IBlock GenerateTypedCompareToBody(IParameter comparand, bool emitBaseCall);
    public IBlock GenerateObjectCompareToBody(IParameter comparand);
    public IBlock GenerateComparatorCompareBody(IParameter left, IParameter right);
    public IBlock GenerateComparisonOperatorBody(IParameter left, IParameter right, string operatorSign);
    private void AppendMembersComparison(StringBuilder builder, List`1<object> arguments, string lhsPrefix, string rhsPrefix);
    private void InsertBaseCall(IClass containingClass, StringBuilder builder, int comparandIndex);
    private void InsertTypeCheck(StringBuilder builder, List`1<object> arguments, int comparandIndex, int typeIndex);
    private string GenerateComparisonVariableName(IDeclaredElement member, Func`2<string, bool> isNameUnique);
    private DeclaredElementInstance GetTypeMember(IClrTypeName typeName, string memberName, IType parameterType);
    private IDeclaredType GetExplicitCompareToImplementationType(IType type);
}
[GeneratorBuilderAttribute("RelationalComparer", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.Generate.VBRelationalComparerBuilder : VBComparerBuilderBase {
    protected String[] ComparerTypePostfixes { get; }
    protected string GenericComparerTypeFqn { get; }
    public VBRelationalComparerBuilder(ILanguageManager languageManager);
    protected virtual String[] get_ComparerTypePostfixes();
    protected virtual string get_GenericComparerTypeFqn();
    protected virtual IVBTypeMemberDeclaration CreateComparerType(VBGeneratorContext context, VBElementFactory factory, string comparerTypeName, IReadOnlyList`1<GeneratorComparisonMemberDescriptor> members);
}
[GeneratorBuilderAttribute("RelationalMembers", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Generate.VBRelationalMembersBuilder : GeneratorRelationalMembersBuilderBase`1<VBGeneratorContext> {
    private ILanguageManager myLanguageManager;
    public VBRelationalMembersBuilder(ILanguageManager languageManager);
    protected virtual IDeclaredType GetMemberSource(VBGeneratorContext context);
    protected virtual void Process(VBGeneratorContext context);
    private void CreateTypedCompareTo(VBGeneratorContext context, VbRelationalCompareHelper helper);
    private void CreateObjectCompareTo(VBGeneratorContext context, VbRelationalCompareHelper helper);
    private void CreateRelationalOperators(VBGeneratorContext context, VbRelationalCompareHelper helper);
    private void CreateRelationalOperator(VBGeneratorContext context, VbRelationalCompareHelper helper, string operatorSign);
    private IMethodDeclaration GetOrCreateCompareToDeclaration(VBGeneratorContext context, VbRelationalCompareHelper helper, bool isTypedParameter);
    private void AddIComparableSuperInterface(VBGeneratorContext context, ITypeElement containingType, bool isGeneric);
    private static bool IsSuperTypeImplementsIComparable(VBGeneratorContext context, bool isTypedParameter);
    private static IMethod GetBaseCompareToObjectMethod(VBGeneratorContext context);
}
[GeneratorBuilderAttribute("Implementations", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[GeneratorBuilderAttribute("Overrides", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[GeneratorBuilderAttribute("EqualityMembers", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[GeneratorBuilderAttribute("RelationalMembers", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[GeneratorBuilderAttribute("Constructor", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[GeneratorBuilderAttribute("Properties", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[GeneratorBuilderAttribute("ReadProperties", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[GeneratorBuilderAttribute("Delegating", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[GeneratorBuilderAttribute("DisposePattern", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[GeneratorBuilderAttribute("Formatting", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.Generate.VBXmlDocumentationInitializer : GeneratorBuilderBase`1<VBGeneratorContext> {
    public double Priority { get; }
    protected virtual bool HasProcessableElements(VBGeneratorContext context, IEnumerable`1<IGeneratorElement> elements);
    protected virtual void Process(VBGeneratorContext context, IProgressIndicator progress);
    public virtual double get_Priority();
    private static void CopyCommentsFor(GeneratorDeclarationElement declarationElement);
    private static bool CopyComments(IDeclaredElement sourceElement, IDeclaration generatedDeclaration);
    private static IDocCommentBlockOwner FindDocCommentOwner(IDeclaration declaration);
    private static void CreateCommentForSignOperator(ISignOperatorDeclaration generatedDeclaration);
    private static string GetXmlCommentFormatForOperator(TokenNodeType operatorTokenType);
}
internal interface JetBrains.ReSharper.Feature.Services.VB.ICandidateFactory {
    public abstract virtual ICandidate CreateCandidate(ISolution solution, IParametersOwner parametersOwner, ISubstitution substitution, bool isExtensionMethod);
    public abstract virtual void FilterCandidates(ParameterInfoContextBase context, IArgumentList argList);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Impl.VBTypeAnchorSerializer : object {
    private static string TYPEARG_PREFIX;
    public sealed virtual override string Serialize(TypeAnchor typeAnchor);
    public sealed virtual override TypeAnchor Deserialize(string sFullyQualifiedName);
}
public class JetBrains.ReSharper.Feature.Services.VB.Intentions.DataProviders.AnonymousFunctionTypeProvider : object {
    private IPsiModule myPsiModule;
    private IDeclaredType myObject;
    public AnonymousFunctionTypeProvider(IPsiModule psiModule);
    private ITypeImage Create(IVBLambdaExpressionType lambdaExpressionType);
    public ITypeImage Create(IVBExpression value);
}
public class JetBrains.ReSharper.Feature.Services.VB.Intentions.DataProviders.DeclaredTypeProvider : object {
    private IPsiModule myPsiModule;
    private IType myObject;
    public DeclaredTypeProvider(IPsiModule psiModule);
    public ITypeImage Create(IVBExpression value);
}
public class JetBrains.ReSharper.Feature.Services.VB.Intentions.DataProviders.EmptyTypeProvider : object {
    private IPsiModule myPsiModule;
    private IType myObject;
    public EmptyTypeProvider(IPsiModule psiModule);
    public ITypeImage Create();
}
public class JetBrains.ReSharper.Feature.Services.VB.Intentions.DataProviders.MethodGroupTypeProvider : object {
    private IPsiModule myPsiModule;
    public MethodGroupTypeProvider(IPsiModule psiModule);
    public ITypeImage Create(IVBExpression expression);
}
public class JetBrains.ReSharper.Feature.Services.VB.Intentions.DataProviders.VBMemberSignatureProvider : MemberSignatureProvider {
    public VBMemberSignatureProvider(IPsiServices psiServices);
    private static IList`1<IExpression> GetInvocations(ICollection`1<IReferenceExpression> referenceExpressions);
    public static ITypeImage CreateTypeImageFromExpression(IVBExpression value);
    private static List`1<ParameterInfoBase> GetParameters(IEnumerable`1<IVBArgument> arguments, IPsiSourceFile sourceFile);
    private static List`1<ParameterInfoBase> GetParameters(IEnumerable`1<IVBArgumentInfo> arguments, IPsiSourceFile sourceFile);
    private static IEnumerable`1<ParameterInfoBase> GetParameters(IEnumerable`1<IVBArgumentInfo> argumentInfos);
    public static MemberSignature CreateFromReferenceExpression(IReferenceExpression referenceExpression, IType defaultType);
    private static SimpleTypeImage GuessReturnType(IVBInvocationInfo invocationInfo, bool checkOnlyResolved, IType defaultType);
    private static SimpleTypeImage GuessReturnType(IReferenceExpression referenceExpression, bool checkOnlyResolved, IType defaultType);
    private static IList`1<IExpression> FilterInvocations(IReadOnlyCollection`1<IReferenceExpression> referenceExpressions);
    public static MemberSignature CreateFromArguments(IList`1<IVBArgument> arguments, IType returnType, IPsiModule psiModule, IPsiSourceFile sourceFile);
    public static MemberSignature CreateFromArguments(IList`1<IVBArgument> arguments, IType[] returnTypes, IPsiModule psiModule, IPsiSourceFile sourceFile);
    public static MemberSignature CreateFromArgumentInfos(IList`1<IVBArgumentInfo> arguments, IType returnType, IPsiModule psiModule, IPsiSourceFile sourceFile);
    public static MemberSignature CreateFromArgumentInfos(IList`1<IVBArgumentInfo> arguments, IType[] returnTypes, IPsiModule psiModule, IPsiSourceFile sourceFile);
    public static ITypeImage CreateTypeForEventInvocation(IIndexExpression indexExpression);
    public static MemberSignature CreateFromInvocation(IVBInvocationInfo invocationInfo, bool checkOnlyResolved, IType defaultType, IPsiModule psiModule);
}
public class JetBrains.ReSharper.Feature.Services.VB.Intentions.Finders.VBClassExtendsFinder : ClassExtendsFinder {
    public VBClassExtendsFinder(ClassLikeDeclarationFinder parent);
    public virtual IEnumerable`1<ITreeNode> Find(IDeclaration obj);
}
public class JetBrains.ReSharper.Feature.Services.VB.Intentions.Finders.VBConstructorInitializerArgumentsFinder : ConstructorInitializerArgumentsFinder {
    public VBConstructorInitializerArgumentsFinder(IConstructorDeclaration constructorDeclaration);
    public virtual IEnumerable`1<ITreeNode> Find(IDeclaration obj);
}
public class JetBrains.ReSharper.Feature.Services.VB.Intentions.Finders.VBFinderFactory : FinderFactory {
    public static FinderFactory Instance;
    private static VBFinderFactory();
    public virtual ParamTypeUsageFinder CreateParamTypeUsageFinder(ParametersOwnerDeclarationFinder parent, int paramIndex);
    public virtual TypeArgumentFinder CreateTypeArgumentFinder(TypeUsageFinder parent, int typeArgIndex);
    public virtual ParamNameFinder CreateParamNameFinder(ParametersOwnerDeclarationFinder parent, int paramIndex);
    public virtual MethodNameFinder CreateMethodNameFinder(ParametersOwnerDeclarationFinder parent);
    public virtual ClassExtendsFinder CreateClassExtendsFinder(ClassLikeDeclarationFinder parent);
    public virtual ReturnTypeFinder CreateReturnTypeFinder(TypeOwnerDeclarationFinder parent);
    public virtual ConstructorInitializerArgumentsFinder CreateConstructorInitializerArgumentsFinder(ITypeMemberDeclaration declaration);
    public virtual TypeKindFinder CreateTypeKindFinders(ClassLikeDeclarationFinder parent);
    public virtual DocumentRange GetInitializerExpressionRange(IDeclaration fieldLikeDeclaration);
}
public class JetBrains.ReSharper.Feature.Services.VB.Intentions.Finders.VBMethodNameFinder : MethodNameFinder {
    public VBMethodNameFinder(NestedFinder parent);
    public virtual IEnumerable`1<ITreeNode> Find(IDeclaration obj);
}
public class JetBrains.ReSharper.Feature.Services.VB.Intentions.Finders.VBParamNameFinder : ParamNameFinder {
    public VBParamNameFinder(ParametersOwnerDeclarationFinder parent, int paramIndex);
    public virtual IEnumerable`1<ITreeNode> Find(IDeclaration obj);
}
public class JetBrains.ReSharper.Feature.Services.VB.Intentions.Finders.VBParamTypeUsageFinder : ParamTypeUsageFinder {
    private int myParamNo;
    public PsiLanguageType Language { get; }
    public VBParamTypeUsageFinder(ParametersOwnerDeclarationFinder parent, int index);
    public virtual IEnumerable`1<ITreeNode> Find(IDeclaration obj);
    public virtual PsiLanguageType get_Language();
}
public class JetBrains.ReSharper.Feature.Services.VB.Intentions.Finders.VBReturnTypeFinder : ReturnTypeFinder {
    public PsiLanguageType Language { get; }
    public VBReturnTypeFinder(NestedFinder parent);
    public virtual IEnumerable`1<ITreeNode> Find(IDeclaration obj);
    public virtual PsiLanguageType get_Language();
}
public class JetBrains.ReSharper.Feature.Services.VB.Intentions.Finders.VBTypeArgumentFinder : TypeArgumentFinder {
    public PsiLanguageType Language { get; }
    public VBTypeArgumentFinder(TypeUsageFinder parent, int typeArgIndex);
    public virtual IEnumerable`1<ITreeNode> Find(IDeclaration obj);
    public virtual PsiLanguageType get_Language();
}
public class JetBrains.ReSharper.Feature.Services.VB.Intentions.Finders.VBTypeKindFinder : TypeKindFinder {
    public VBTypeKindFinder(ClassLikeDeclarationFinder parent);
    public virtual IEnumerable`1<DocumentRange> GetTypeKindRanges(IDeclaration declaration);
    private IEnumerable`1<ITreeNode> FindStartElement(IDeclaration obj);
    private IEnumerable`1<ITreeNode> FindEndElement(IDeclaration obj);
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.VB.Intentions.MemberBody.LockupItems.AutoPropertyLookupItem : PropertyBodyLookupItemBase {
    private VBPropertyBodyUtil myPropertyBodyUtil;
    public RichText DisplayName { get; }
    public AutoPropertyLookupItem(PsiLanguageType languageType, VBPropertyBodyUtil propertyBodyUtil);
    public virtual RichText get_DisplayName();
    protected virtual void SetBody(IPropertyDeclaration propertyDeclaration);
}
internal class JetBrains.ReSharper.Feature.Services.VB.Intentions.MemberBody.LockupItems.BackingFieldLookupItem : PropertyBodyLookupItemBase {
    private string myBackingFieldName;
    private VBPropertyBodyUtil myVBPropertyBodyUtil;
    private bool myCreate;
    public RichText DisplayName { get; }
    public BackingFieldLookupItem(IPropertyDeclaration propertyDeclaration, string backingFieldName, VBPropertyBodyUtil vbPropertyBodyUtil);
    protected virtual void SetBody(IPropertyDeclaration propertyDeclaration);
    public virtual RichText get_DisplayName();
}
public class JetBrains.ReSharper.Feature.Services.VB.Intentions.MemberBody.LockupItems.MethodBodyLookupItem : MemberBodyLookupBase {
    private string myMessage;
    private VBMemberBodyOperations myBodyOperations;
    public RichText DisplayName { get; }
    public MethodBodyLookupItem(string message, PsiLanguageType languageType, VBMemberBodyOperations bodyOperations);
    protected virtual void DoCommand(ITreeNode element);
    public virtual RichText get_DisplayName();
}
public abstract class JetBrains.ReSharper.Feature.Services.VB.Intentions.MemberBody.LockupItems.PropertyBodyLookupItemBase : MemberBodyLookupBase {
    protected PropertyBodyLookupItemBase(PsiLanguageType languageType);
    protected virtual void DoCommand(ITreeNode element);
    protected abstract virtual void SetBody(IPropertyDeclaration propertyDeclaration);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Intentions.MemberBody.VBMemberBodyTemplateItemsProvider : object {
    private VBPropertyBodyUtil myPropertyBodyUtil;
    private VBMemberBodyOperations myBodyOperations;
    public VBMemberBodyTemplateItemsProvider(VBPropertyBodyUtil propertyBodyUtil, VBMemberBodyOperations bodyOperations);
    public sealed virtual override IList`1<ILookupItem> GetLookupItems(IDeclaration declaration);
}
public class JetBrains.ReSharper.Feature.Services.VB.Intentions.Util.VBReferenceCollectingUtil : object {
    public static IReadOnlyList`1<IReferenceExpression> CollectReferenceExpressions(IReferenceExpression referenceExpression, ITreeNode scopeElement);
    public static IReadOnlyList`1<IReferenceName> CollectReferenceNames(IReferenceName referenceExpression, ITreeNode scopeElement);
    public static IReadOnlyList`1<IReferenceExpression> CollectInvocationExpressions(IReferenceExpression indexExpression, ITreeNode scopeElement);
}
public class JetBrains.ReSharper.Feature.Services.VB.Intentions.Util.VBTypeProcessUtil : object {
    public static IList`1<string> GuessTypeParamNames(int count, ITreeNode destinationAnchor, VBElementFactory factory);
    public static IEnumerable`1<IExpressionType> Expand(IEnumerable`1<IExpressionType> types, IType objectType);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Intentions.VBAnnotateWithAttributeIntention : object {
    public sealed virtual override void Annotate(IDeclaration declaration, ITypeElement markBy, AttributeValue[] fixedArguments, Pair`2[] namedArguments);
    public sealed virtual override bool HasAnnotation(IDeclaration declaration, ITypeElement annotationType);
    private static ITypeElement ResolvedTypeElement(IAttribute attribute);
    public sealed virtual override void UpdateAnnotations(IDeclaration markedDeclaration, UpdateArgumentsDelegate provideArguments);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Intentions.VBChangeBaseTypeRequiredIntention : object {
    public sealed virtual override void Execute(IClass classToProcess, IDeclaredType fromType, IDeclaredType toType);
    private static void FixTypeOf(IGetTypeExpression typeOfExpression, ITypeUsage typeUsage, IList`1<IGetTypeExpression> changes);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Intentions.VBChangeSignatureIntention : object {
    public sealed virtual override void ChangeSignature(IParametersOwnerDeclaration signatureToChange, IParametersOwner sourcePattern, ISubstitution sourceSubstitution, SignatureChangeKind changeKind);
    private void FixReturnType(IParametersOwnerDeclaration signatureToChange, IParametersOwner sourcePattern, ISubstitution sourceSubstitution);
    protected static void FixParameters(IVBParametersOwnerDeclaration declaration, InvocableSignature signature, String[] paramNames);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.Intentions.VBCreateNameSpaceIntention : object {
    public sealed virtual override ITypeAndNamespaceHolderDeclaration CreateOrFindNameSpace(IFile file, string nameSpaceName);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.Intentions.VBCreateTypeParameterDeclarationIntention : object {
    public sealed virtual override void ExecuteEx(ITypeParametersOwner destination, string newTypeParamName);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Intentions.VBIntentionLanguageService : IntentionLanguageSpecific {
    private VBPropertyBodyUtil myPropertyBodyUtil;
    public IEqualityComparer`1<string> NamesComparer { get; }
    public FinderFactory FinderFactory { get; }
    public bool IsVoidMethodDeclarationHasTypeUsage { get; }
    public string InterfaceKeyword { get; }
    public string ClassKeyword { get; }
    public string StructKeyword { get; }
    public string EnumKeyword { get; }
    public string RecordKeyword { get; }
    public string RecordStructKeyword { get; }
    public VBIntentionLanguageService(VBPropertyBodyUtil propertyBodyUtil);
    public virtual IDeclaration CreateLocalFunctionDeclaration(IPsiModule psiModule, bool inInterface);
    public virtual ITypeMemberDeclaration CreateConstructorDeclaration(IPsiModule psiModule, bool isPrimary);
    public virtual IEqualityComparer`1<string> get_NamesComparer();
    public virtual ITypeMemberDeclaration CreatePropertyDeclaration(IPsiModule psiModule, bool inInterface);
    public virtual ITypeMemberDeclaration CreateIndexerDeclaration(IPsiModule psiModule, bool inInterface);
    public virtual IFunctionDeclaration AddAccessorDeclaration(ITypeMemberDeclaration ownerDeclaration, AccessorKind kind);
    public virtual void AddTypeConstraints(IDeclaration typeParameterDeclaration, ITypeParameter typeParameter, ISubstitution substitution, string parameterName);
    public virtual void AddBaseConstructorCall(ITypeMemberDeclaration constructorDeclaration);
    public virtual ITypeMemberDeclaration CreateFieldDeclaration(IPsiModule psiModule);
    public virtual ITypeMemberDeclaration CreateConstDeclaration(IPsiModule psiModule);
    public virtual ITypeMemberDeclaration CreateDelegateDeclaration(IPsiModule psiModule);
    public virtual IParameterDeclaration SetParameterScope(IParameterDeclaration declaration, ScopedKind scope, Nullable`1<bool> requiresUnscopedRefAttribute);
    public virtual void SetReturnKind(IDeclaration declaration, ReferenceKind returnKind);
    public virtual ITypeParameter AddTypeParameter(IDeclaration typeParametersOwner, string typeParameterName);
    public virtual ITypeMemberDeclaration CreateEnumMember(IPsiModule psiModule);
    public virtual ITypeMemberDeclaration CreateEventDeclaration(IPsiModule psiModule);
    public virtual ITypeDeclaration CreateRecordDeclaration(IPsiModule module);
    public virtual ITypeMemberDeclaration CreateMethodDeclaration(IPsiModule psiModule, bool inInterface);
    public virtual ITypeDeclaration CreateClassDeclaration(IPsiModule psiModule, bool isStatic);
    public virtual ITypeDeclaration CreateInterfaceDeclaration(IPsiModule module);
    public virtual void SetAsync(IParametersOwnerDeclaration method, bool isAsync);
    public virtual void SetPartial(ITypeDeclaration declaration, bool isPartial);
    public virtual void AddBaseType(ITypeDeclaration typeDeclaration, IDeclaredType inheritsFrom);
    public virtual ITypeMemberDeclaration AddToOwnerDeclaration(ITypeMemberDeclaration declarationToAdd, ITypeDeclaration typeDeclaration, ICreationTarget target);
    public virtual T AddToTarget(T declarationToAdd, ICreationTarget target);
    private bool CheckAddWithoutAnchor(T declarationToAdd);
    public virtual FinderFactory get_FinderFactory();
    public virtual ITypeConversionRule GetTypeConversionRule(ITreeNode context);
    public virtual ITypeConstraintsVerifier GetTypeConstraintsVerifier(ITreeNode context);
    public virtual void SetIsParamArray(IParameterDeclaration parameterDeclaration, bool isSet);
    public virtual void SetAccessorBodies(ITypeMemberDeclaration typeMemberDeclaration, AccessorImplementationKind accessorImplementationKind, List`1<ITemplateFieldHolder> holders);
    public virtual bool TypeSupportsOnlyStaticMembers(ITreeNode targetDeclaration);
    public virtual bool TypeMembersAreStaticImplicitly(IDeclaration targetDeclaration);
    public virtual bool IsInactivePreprocessorBranch(ITreeNode node);
    public virtual void ToExtensionMethod(ITypeMemberDeclaration method);
    public virtual bool CanUseExplicitly(IType type, ITreeNode context);
    public virtual IList`1<string> GuessTypeParamNames(int typeArgumentsCount, ITreeNode context);
    public virtual IList`1<string> GuessTypeParamNames(IList`1<IType> typeArguments, ITreeNode context);
    public virtual void SetAccessorOwnerName(ITypeMemberDeclaration accessorOwnerDeclaration, string name);
    public virtual bool get_IsVoidMethodDeclarationHasTypeUsage();
    public virtual bool IsPurePropertyDeclaration(IDeclaration declaration);
    public virtual string get_InterfaceKeyword();
    public virtual string get_ClassKeyword();
    public virtual string get_StructKeyword();
    public virtual string get_EnumKeyword();
    public virtual string get_RecordKeyword();
    public virtual string get_RecordStructKeyword();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Intentions.VBSetAccessRightsIntention : object {
    public sealed virtual override void SetAccessRights(IAccessRightsOwnerDeclaration declaration, AccessRights accessRights);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.LinqTools.VBLinqToolsLanguageHelper : object {
    private StructuralSearchPatternParams myStructuralSearchPatternParams;
    public IEnumerable`1<Type> TypesToMarkOnCopy { get; }
    public String[] WherePatterns { get; }
    public String[] WhereInversePatterns { get; }
    public String[] SelectOrLetPatterns { get; }
    public String[] TakeWhilePatterns { get; }
    public String[] DistinctPatterns { get; }
    public String[] DistinctPatternsWithContinue { get; }
    public String[] DistinctSetVarDeclPatterns { get; }
    public String[] CastPatterns { get; }
    public String[] OfTypePatterns { get; }
    public String[] OfTypePatternsWithContinue1 { get; }
    public String[] OfTypePatternsWithContinue2 { get; }
    public String[] CountPatterns { get; }
    public String[] MinPatterns { get; }
    public String[] MaxPatterns { get; }
    public String[] SumPatterns { get; }
    public String[] AssignAnyPatterns { get; }
    public String[] ReturnAnyPatterns { get; }
    public String[] IfAnyPatterns { get; }
    public String[] IfAnyPatternsWithBreak { get; }
    public String[] FirstOrDefaultPatternsWithBreak { get; }
    public String[] FirstOrDefaultPatternsWithReturn { get; }
    public String[] YieldReturnPatterns { get; }
    public String[] ForLoopPatterns { get; }
    public String[] ElementAccessPatterns { get; }
    public String[] TypeInstantiationPatterns { get; }
    public String[] TypeInstantiationOneParamPatterns { get; }
    public String[] EqualsPatterns { get; }
    public String[] DeclarationAndReturnPatterns { get; }
    public String[] AssignmentAndReturnPatterns { get; }
    public string FromQueryFormatString { get; }
    public string FromQueryExplicitTypeFormatString { get; }
    public string SelectQueryFormatString { get; }
    public string SelectIntoQueryFormatString { get; }
    public string WhereQueryFormatString { get; }
    public string LetQueryFormatString { get; }
    public bool CanOmitTrivialSelect { get; }
    public bool VariablesInLoopCollectionConflictWithIterator { get; }
    public sealed virtual override IPlaceholder CreateIdentifierPlaceholder(string name);
    public sealed virtual override IPlaceholder CreateExpressionPlaceholder(string name);
    public sealed virtual override IPlaceholder CreateStatementPlaceholder(string name);
    public sealed virtual override IPlaceholder CreateStatementsPlaceholder(string name);
    public sealed virtual override IPlaceholder CreateTypePlaceholder(string name);
    public sealed virtual override IPlaceholder CreateElementPlaceholder(string name, ITreeNode node);
    public sealed virtual override IStructuralSearchPattern CreatePattern(string text, IEnumerable`1<IPlaceholder> placeholders);
    public sealed virtual override bool IsForeachStatement(IStatement statement, IStatementsRange& body, ILocalVariable& iteratorVar, IExpression& collectionExpr, Boolean& isAsync);
    public sealed virtual override bool CanUseGetEnumeratorFromIEnumerable(IStatement statement, Boolean& usesGetEnumeratorFromIEnumerable);
    public sealed virtual override bool IsForStatement(IStatement statement, IStatementsRange& body);
    public sealed virtual override bool IsLabelStatement(IStatement statement);
    public sealed virtual override bool IsLoopBodyBlock(IStatement statement);
    public sealed virtual override bool IsAsyncForeachStatement(IStatement statement);
    public sealed virtual override IStatementsRange StatementToRange(IStatement statement);
    public sealed virtual override IStatementsRange StatementsToRange(IList`1<IStatement> statements);
    public sealed virtual override IStatementsRange ToStatementsRange(ITreeRange treeRange);
    public sealed virtual override IStatementsRange SkipStatements(IList`1<IStatement> statements, int n);
    private static bool IsToSkip(ITreeNode node);
    public sealed virtual override bool IsTheOnlyExecutedStatement(IStatement statement);
    public sealed virtual override bool IsLastExecutedStatement(IStatement statement, bool allowIfs, IExpression& valueReturned, IStatement& returnStatementToRemove);
    public sealed virtual override IReference ReferenceExpressionReference(IExpression expression);
    public sealed virtual override IExpression ReferenceExpressionByReference(IReference reference);
    public sealed virtual override bool IsInvocationQualifier(IExpression qualifier, IExpression& invocation, IMethod& targetMethod, IList`1& args);
    public sealed virtual override IExpression ReferenceExpressionByQualifier(IExpression qualifier);
    public sealed virtual override IExpression ElementAccessByArgument(IExpression argument);
    public sealed virtual override IReference InvocationExpressionReference(IExpression expression);
    public sealed virtual override IReference ElementAccessReference(IExpression expression);
    public sealed virtual override bool IsCastExpressionOperand(IExpression expression, IExpression& castExpr);
    public sealed virtual override ITypeOwnerDeclaration SingleVariableDeclaration(IStatement statement, bool checkIsRegular);
    public sealed virtual override bool IsVariableAssignment(IStatement statement, ITypeOwner& variable, IExpression& valueAssigned);
    [CanBeNullAttribute]
private static IVBExpression AssignmentToResultExpression(IAssignmentStatement assignment);
    public sealed virtual override bool IsVariableAssignmentValue(IExpression expression, IStatement& statement, ITypeOwner& variable);
    public sealed virtual override bool IsInvocation(IStatement statement, IMethod& targetMethod, IExpression& qualifier, IList`1& args);
    public sealed virtual override bool IsInvocation(IExpression expression, IMethod& targetMethod, IExpression& qualifier, IList`1& args);
    public sealed virtual override IEnumerable`1<IStatement> StatementsBefore(IStatement statement);
    public sealed virtual override IEnumerable`1<IStatement> StatementsAfter(IStatement statement);
    public sealed virtual override bool IsVariableUsage(IExpression expression, string name);
    public sealed virtual override bool IsReturnOwner(ITreeNode node, IType& returnType);
    public sealed virtual override bool IsYieldStatement(IStatement statement);
    private static IVBExpression CastIfNeeded(IVBExpression expr, IType requiredType);
    public sealed virtual override bool CheckNoEscapes(IStatement statement, EscapeType escapeTypes, Predicate`1<IStatement> filter);
    private bool CheckNoEscapes(IBlock block, EscapeType escapeTypes, Predicate`1<IStatement> filter);
    public sealed virtual override ILocalVariable DeclareTempVariable(IType type, string name, IStatementsRange& beforeStatementsRange, bool applyCodeFormatter);
    public sealed virtual override void ChangeVariableType(ITypeOwnerDeclaration declaration, IType newType, bool applyCodeFormatter);
    public sealed virtual override void SetTypeOrVar(ITypeOwnerDeclaration localVarDeclaration, IType type);
    public sealed virtual override ITreeNode GetScopeToCopy(IStatement loop);
    public sealed virtual override ConstantValue ConvertConstantValueToTypeImplicit(ConstantValue value, IType type, IFile context);
    public sealed virtual override ITypeConversionRule TypeConversionRule(ITreeNode context);
    public sealed virtual override IExpression InvertCondition(IExpression condition, bool applyCodeFormatter);
    public sealed virtual override IEnumerable`1<Type> get_TypesToMarkOnCopy();
    public sealed virtual override ILocalVariable CreateDummyVariable(IPsiModule module, IType type);
    public sealed virtual override bool IsImplicitlyTyped(ILocalVariable local);
    public sealed virtual override bool IsCastExpression(IExpression expression, IExpression& operand);
    public sealed virtual override bool CanReplaceCastOperator(IType sourceType, IType targetType, ITreeNode context);
    public sealed virtual override IStatement AddStatement(IStatement statement, IStatement& anchor, bool before);
    public sealed virtual override void RemoveStatement(IStatement statement);
    public sealed virtual override String[] get_WherePatterns();
    public sealed virtual override String[] get_WhereInversePatterns();
    public sealed virtual override String[] get_SelectOrLetPatterns();
    public sealed virtual override String[] get_TakeWhilePatterns();
    public sealed virtual override String[] get_DistinctPatterns();
    public sealed virtual override String[] get_DistinctPatternsWithContinue();
    public sealed virtual override String[] get_DistinctSetVarDeclPatterns();
    public sealed virtual override String[] get_CastPatterns();
    public sealed virtual override String[] get_OfTypePatterns();
    public sealed virtual override String[] get_OfTypePatternsWithContinue1();
    public sealed virtual override String[] get_OfTypePatternsWithContinue2();
    public sealed virtual override String[] get_CountPatterns();
    public sealed virtual override String[] get_MinPatterns();
    public sealed virtual override String[] get_MaxPatterns();
    public sealed virtual override String[] get_SumPatterns();
    public sealed virtual override String[] get_AssignAnyPatterns();
    public sealed virtual override String[] get_ReturnAnyPatterns();
    public sealed virtual override String[] get_IfAnyPatterns();
    public sealed virtual override String[] get_IfAnyPatternsWithBreak();
    public sealed virtual override String[] get_FirstOrDefaultPatternsWithBreak();
    public sealed virtual override String[] get_FirstOrDefaultPatternsWithReturn();
    public sealed virtual override String[] get_YieldReturnPatterns();
    public sealed virtual override String[] get_ForLoopPatterns();
    public sealed virtual override String[] get_ElementAccessPatterns();
    public sealed virtual override String[] get_TypeInstantiationPatterns();
    public sealed virtual override String[] get_TypeInstantiationOneParamPatterns();
    public sealed virtual override String[] get_EqualsPatterns();
    public sealed virtual override String[] get_DeclarationAndReturnPatterns();
    public sealed virtual override String[] get_AssignmentAndReturnPatterns();
    public sealed virtual override IExpression CreateVariableUsageExpression(IPsiModule module, ITypeOwner variable, bool applyCodeFormatter);
    public sealed virtual override IExpression CreateVariableUsageExpression(IPsiModule module, string variableName, bool applyCodeFormatter);
    public sealed virtual override IExpression CreateInvocationExpression(IPsiModule module, IMethod targetMethod, IList`1<IType> typeArgs, object qualifier, string methodName, bool wrapWithAwait, Object[] args);
    public sealed virtual override IExpression CreateLambdaExpression(IPsiModule module, bool isAsync, String[] argNames, IExpression body);
    public sealed virtual override IExpression CreateCastExpression(IExpression expression, IType type, bool applyCodeFormatter);
    public sealed virtual override IExpression CreateSumExpression(IPsiModule module, IExpression operand1, IExpression operand2);
    public sealed virtual override IExpression CreateLogicalAndExpression(IPsiModule module, IExpression condition1, IExpression condition2);
    public sealed virtual override IExpression CreateOneElementArrayCreationExpression(IPsiModule module, IType elementType, IExpression element);
    public sealed virtual override IExpression CreateQueryExpression(IPsiModule module, string text, IEnumerable`1<object> args);
    public sealed virtual override IStatement CreateReturnStatement(IPsiModule module, IExpression returnValue);
    public sealed virtual override IStatement CreateInvocationStatement(IPsiModule module, IMethod targetMethod, IList`1<IType> typeArgs, object qualifier, string methodName, bool wrapWithAwait, Object[] args);
    public sealed virtual override IStatement CreateAssignmentStatement(IPsiModule module, ITypeOwner targetVar, IExpression expression);
    public sealed virtual override IStatement CreateAddValueStatement(IPsiModule module, ITypeOwner targetVar, IExpression expression);
    public sealed virtual override IStatement CreateIfStatement(IPsiModule module, IExpression condition, IStatementsRange thenStatements);
    public sealed virtual override IStatement ReplaceWithForeachLoop(IStatement loop, IExpression iteratorExpression, IType elementType, string iteratorName, IExpression enumerableExpr, IStatementsRange body, bool forceUseBlock);
    public sealed virtual override IExpression ReplaceBy(IExpression oldExpr, IExpression newExpr);
    public sealed virtual override IStatement ReplaceBy(IStatement oldStatement, IStatement newStatement);
    public sealed virtual override void SetInitializer(IDeclaration localVarDeclaration, IExpression value);
    public sealed virtual override IExpression GetInitializer(IDeclaration localVarDeclaration);
    public sealed virtual override bool IsSimpleExpression(IExpression expression);
    public sealed virtual override IExpression GenerateFunctionalForm(IExpression queryExpression, ITreeNode context);
    public sealed virtual override void CopyLocal(IExpression refExpression);
    public sealed virtual override string get_FromQueryFormatString();
    public sealed virtual override string get_FromQueryExplicitTypeFormatString();
    public sealed virtual override string get_SelectQueryFormatString();
    public sealed virtual override string get_SelectIntoQueryFormatString();
    public sealed virtual override string get_WhereQueryFormatString();
    public sealed virtual override string get_LetQueryFormatString();
    public sealed virtual override bool get_CanOmitTrivialSelect();
    public sealed virtual override bool get_VariablesInLoopCollectionConflictWithIterator();
    public sealed virtual override void RenameVarRef(IReference reference, IExpression newExpr, IExpression& expr);
    public sealed virtual override bool IsWriteElementAccess(IExpression refExpr);
    public sealed virtual override bool HasAwaitExpressions(IExpression expression);
    public sealed virtual override bool VarCanAggregateMultipleTimes(ILocalVariable workingVar, IStatement setVarDeclStatement);
    public sealed virtual override bool IsIndexerUsed(IExpression indexer);
    public sealed virtual override IEnumerable`1<ILocalVariable> GetDeclaredVariables(IExpression expression);
    public sealed virtual override bool CanUseAsCollectionInForeach(IType collectionType, ITreeNode context);
    public sealed virtual override bool CanMoveToWhereQuery(IExpression whereCondition, ILocalVariable& ofTypeVariable, IExpression& updatedPreCondition, IExpression& updatedPostCondition);
    public sealed virtual override bool CanUseInClosure(IExpression expression);
}
public abstract class JetBrains.ReSharper.Feature.Services.VB.LiveTemplates.BaseTemplateExpression : object {
    private string mySuggestedName;
    protected bool LookupSuggestedNameIfEmpty { get; }
    protected BaseTemplateExpression(string suggestedName);
    protected virtual bool get_LookupSuggestedNameIfEmpty();
    public sealed virtual override string Serialize();
    public sealed virtual override object Clone();
    public virtual override string EvaluateQuickResult(IHotspotContext context);
    public virtual override void HandleExpansion(IHotspotContext context);
    public sealed virtual override HotspotItems GetLookupItems(IHotspotContext context);
    protected abstract virtual IList`1<ILookupItem> GetLookupItemsImpl(IHotspotContext hotspotContext);
}
[StandardModuleAttribute]
public class JetBrains.ReSharper.Feature.Services.VB.LiveTemplates.VBTemplateUtil : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.VB.LiveTemplates.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.MatchingBrace.VBMatchingBraceProvider : object {
    public sealed virtual override bool IsLeftBracket(TokenNodeType tokenType);
    public sealed virtual override bool IsRightBracket(TokenNodeType tokenType);
    public sealed virtual override bool Match(TokenNodeType token1, TokenNodeType token2);
    public sealed virtual override int Compare(TokenNodeType x, TokenNodeType y);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.My.Analyses.CallHierarchy.VBCallHierarchyLanguageSpecific : object {
    public sealed virtual override CallHierarchyFindResult ExtractSubscriber(IReference reference);
    public sealed virtual override IEnumerable`1<CallHierarchyFindResult> ExtractSubscribersFromDeclaration(ITypeMember delegateTypeMember, IProgressIndicator pi);
    public sealed virtual override IEnumerable`1<IExpression> ExtractInitializersFromDeclaration(IInitializerOwnerDeclaration initializerOwner);
    public sealed virtual override IConstructor ExtractImplicitBaseConstructorCall(IConstructor constructor);
    public sealed virtual override IExpression GetClosureExpression(ITreeNode element);
    public sealed virtual override IExpression GetQuery(ITreeNode element);
    public sealed virtual override string GetUnresolvedPresentation(ITreeNode unresolvedElement);
    public sealed virtual override bool IsMethodGroupReference(IReference reference, IClrDeclaredElement declaredElement);
    public sealed virtual override bool IsIncomingSkippedReference(IReference reference);
    public sealed virtual override IEvent ExtractEventReadWrite(IReference reference, Boolean& isSubscription);
    public sealed virtual override ITreeNode GetReferenceElement(IReference reference);
    public sealed virtual override void ProcessReferences(IReference reference, IDeclaredElement declaredElement, List`1<CallHierarchyFindResult> result, DeclaredElementInstance`1<IDeclaredElement> sourceElement, OneToListMap`2<IDeclaredElement, ISubstitution> baseElements);
    public sealed virtual override void GetSuperMembers(IDeclaredElement element, OneToListMap`2<IDeclaredElement, ISubstitution> result, CachingFinder finder, IProgressIndicator progressIndicator);
    public sealed virtual override ICollection`1<CallHierarchyFindResult> FindOutgoing(DeclaredElementInstance`1<IDeclaredElement> declaredElementInstance, IProgressIndicator progressIndicator);
    public sealed virtual override IDeclaration GetParentElementDeclaration(ITreeNode referenceElement);
    public sealed virtual override bool IsLanguageSpecificFunction(IDeclaredElement declaredElement);
    public sealed virtual override bool IsClosureDeclaration(ITreeNode element);
}
[OptionsPageAttribute("VBNamingStyle2", "Naming Style", "JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons/NamingConvention")]
public class JetBrains.ReSharper.Feature.Services.VB.Naming.VBNamingOptionsPage : NamingStylePage`1<VBNamingSettings> {
    public static string PID;
    public VBNamingOptionsPage(Lifetime lifetime, OptionsSettingsSmartContext settings, IThemedIconManager uiIconsComponent, HighlightingSettingsManager manager, IAdvancedNamingSettingsFormFactory advancedNamingSettingsFormFactory, IComponentContainer container);
    private static NamedElementKinds[] GetSupportedElementKinds();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.VB.Naming.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Navigation.VBNavigateToExtendsList : object {
    public sealed virtual override bool Navigate(ITypeElement sourceTypeElement, ITypeElement targetTypeElement);
    [CanBeNullAttribute]
private IEnumerable`1<IDeclaredTypeUsage> GetExtendsList(IDeclaration declaration);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Navigation.VBTypeMemberDeclarationService : object {
    public sealed virtual override IDeclaration FindDeclarationByOffset(DocumentRange documentRange, IFile file);
}
[StandardModuleAttribute]
public class JetBrains.ReSharper.Feature.Services.VB.NumericLiteralUtil : object {
    [PureAttribute]
public static TextRange GetIntegerLiteralDigitsRange(string literalText);
    [PureAttribute]
public static TextRange GetIntegerLiteralDigitsRangeAfterVB15_5(string literalText);
    [PureAttribute]
public static TextRange GetRealLiteralDigitsRange(string literalText);
    [PureAttribute]
private static int GetIntegerDigitsStartOffset(string literalText);
    [PureAttribute]
private static int GetIntegerDigitsStartOffsetWithoutSeparators(string literalText);
    [PureAttribute]
private static int GetIntegerDigitsEndOffset(string literalText);
    [PureAttribute]
private static int GetRealDigitsEndOffset(string literalText);
    [PureAttribute]
public static TextRange GetRealLiteralIntegerDigitsRange(string literalText);
}
[OptionsPageAttribute("VbnetInlayHints", "Visual Basic", "JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons/Vbnet")]
public class JetBrains.ReSharper.Feature.Services.VB.OptionPages.VbnetInlayHintsPage : BeSimpleOptionsPage {
    public static string PID;
    public VbnetInlayHintsPage(Lifetime lifetime, OptionsPageContext optionsPageContext, OptionsSettingsSmartContext optionsSettingsSmartContext);
}
[OptionsPageAttribute("Vbnet", "Visual Basic", "JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons/Vbnet")]
public class JetBrains.ReSharper.Feature.Services.VB.OptionPages.VbnetPage : AEmptyOptionsPage {
    public static string PID;
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.VB.OptionPages.ZoneMarker : object {
}
internal class JetBrains.ReSharper.Feature.Services.VB.ParameterInfoCandidateFactory : object {
    public static ParameterInfoCandidateFactory Instance;
    private static ParameterInfoCandidateFactory();
    public sealed virtual override ICandidate CreateCandidate(ISolution solution, IParametersOwner parametersOwner, ISubstitution substitution, bool isExtensionMethod);
    public sealed virtual override void FilterCandidates(ParameterInfoContextBase context, IArgumentList argList);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.VB.ParameterNameHints.VBNetParameterNameHintsExclusionListPredefinedValues : ManagedLanguageParameterNameHintsExclusionListPredefinedValues`1<VBParameterNameHintsOptions> {
    public string Name { get; }
    public VBNetParameterNameHintsExclusionListPredefinedValues(ISettingsSchema settingsSchema, ILogger logger);
    public virtual string get_Name();
}
[SettingsKeyAttribute("JetBrains.TextControl.DocumentMarkup.IntraTextAdornments.InlayHintsSettings", "JetBrains.ReSharper.Feature.Services.VB.Resources.LocalizedStrings", "VisualBasicNETOtherInlayHintsSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.VB.ParameterNameHints.VBOtherInlayHintsOptions : ManagedLanguageOtherInlayHintsOptionsBase {
}
[MigrateSettingsAttribute]
public class JetBrains.ReSharper.Feature.Services.VB.ParameterNameHints.VBOtherInlayHintsOptionsMigration : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.VB.ParameterNameHints.VBOtherInlayHintsOptionsMigration/VB$StateMachine_1_IMigrateSettings_GetKeysToMigrate")]
public sealed virtual override IEnumerable`1<SettingsKey> IMigrateSettings_GetKeysToMigrate(ISettingsSchema schema);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.VB.ParameterNameHints.VBOtherInlayHintsOptionsMigration/VB$StateMachine_2_IMigrateSettings_GetEntriesToMigrate")]
public sealed virtual override IEnumerable`1<SettingsEntry> IMigrateSettings_GetEntriesToMigrate(ISettingsSchema schema);
    public sealed virtual override void IMigrateSettings_Migrate(IContextBoundSettingsStoreImplementation store);
}
[OptionsPageAttribute("VBOtherInlayHintsOptions", "Other", "JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons/ParameterInfoPage")]
public class JetBrains.ReSharper.Feature.Services.VB.ParameterNameHints.VBOtherInlayHintsOptionsPage : InlayHintsOptionPageBase {
    public static string PID;
    public VBOtherInlayHintsOptionsPage(Lifetime lifetime, OptionsPageContext optionsPageContext, OptionsSettingsSmartContext optionsSettingsSmartContext);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.ParameterNameHints.VBParameterNameHintsBulbActionsProvider : ParameterNameHintBulbActionsProvider`1<VBParameterNameHintsOptions> {
    public virtual string GetOptionsPageId();
}
[SettingsKeyAttribute("JetBrains.TextControl.DocumentMarkup.IntraTextAdornments.InlayHintsSettings", "JetBrains.ReSharper.Feature.Services.VB.Resources.LocalizedStrings", "VisualBasicNETParameterNameHintsSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.VB.ParameterNameHints.VBParameterNameHintsOptions : ManagedLanguageParameterNameHintsOptionsBase {
}
[MigrateSettingsAttribute]
public class JetBrains.ReSharper.Feature.Services.VB.ParameterNameHints.VBParameterNameHintsOptionsAutoFixExclusionListMigration : ParameterNameHintsOptionsAutoFixExclusionListMigration`1<VBParameterNameHintsOptions> {
}
[MigrateSettingsAttribute]
public class JetBrains.ReSharper.Feature.Services.VB.ParameterNameHints.VBParameterNameHintsOptionsMigration : ManagedParameterNameHintsOptionsMigration`1<VBParameterNameHintsOptions> {
}
[OptionsPageAttribute("VBParameterNameHintsOptions", "Parameter Name Hints", "JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons/ParameterInfoPage")]
public class JetBrains.ReSharper.Feature.Services.VB.ParameterNameHints.VBParameterNameHintsOptionsPage : ManagedLanguageParameterNameHintsOptionsPage`1<VBParameterNameHintsOptions> {
    public static string PID;
    public VBParameterNameHintsOptionsPage(Lifetime lifetime, OptionsPageContext optionsPageContext, OptionsSettingsSmartContext optionsSettingsSmartContext, IconHostBase iconHost, LanguageManager languageManager);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.VB.ParameterNameHints.VBParameterNameHintsOptionsRegistrar : object {
    public VBParameterNameHintsOptionsRegistrar(InlayHintsOptionsStore inlayHintsOptionsStore, ISettingsStore settingsStore);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.ParameterNameHints.VBParameterNameHintsOptionsStore : InlayHintsExclusionListStore {
    private Guid _myExclusionListCacheKey;
    public virtual Guid GetExclusionListCacheKey();
    public virtual SettingsIndexedEntry GetIndexedEntry(IContextBoundSettingsStore settingsStore);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.VB.ParameterNameHints.ZoneMarker : object {
}
[UsedImplicitlyAttribute]
public class JetBrains.ReSharper.Feature.Services.VB.PropertiesExtender.VBLanguageLevelTypeConverter : TypeConverterBase`1<ReSharperSettingsVBLanguageLevel> {
    [NotNullAttribute]
private static ReSharperSettingsVBLanguageLevel[] LanguageLevels;
    private static VBLanguageLevelTypeConverter();
    private static ReSharperSettingsVBLanguageLevel XFromString(string value);
    public static string XToString(ReSharperSettingsVBLanguageLevel languageLevel);
    [NotNullAttribute]
public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
[StandardModuleAttribute]
public class JetBrains.ReSharper.Feature.Services.VB.PropertiesExtender.VBLanguageProperty : object {
    public static void SetVBLanguageProperty(IProject project, ReSharperSettingsVBLanguageLevel value);
    public static ReSharperSettingsVBLanguageLevel GetVBLanguageProperty(IProject project);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.VB.PropertiesExtender.VBProjectPropertiesExtenderProvider : ProjectPropertiesExtenderProviderBase {
    public VBProjectPropertiesExtenderProvider(Lifetime lifetime, IShellLocks locks, ISettingsStore settingsStore);
    protected virtual bool IsSuitableProject(IProject project);
    protected virtual IEnumerable`1<PropertyDescriptor> GetProjectPropertyDescriptors(IProject project);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Psi.VBTypeNameService : TypeNameService {
    private String[] myTypeDelimiterLeftChars;
    private String[] myTypeDelimiterRightChars;
    public virtual Range GetRangeOfTypeNamePartAtPosition(string text, int position);
}
public class JetBrains.ReSharper.Feature.Services.VB.Psi.VBUnresolvedTypesChooser : object {
    private ITreeNode myContext;
    public VBUnresolvedTypesChooser(ITreeNode context);
    public sealed virtual override void AddUnresolvedTypes(string typeText, Dictionary`2<string, UnresolvedDeclaredType> result);
    private void AddUnresolvedType(IReferenceName refName, Dictionary`2<string, UnresolvedDeclaredType> result);
    private void QualifyUnresolvedType(IReferenceName refName, Dictionary`2<string, UnresolvedDeclaredType> boundTypes);
    private void QualifyNestedUnresolvedTypes(IReferenceName refName, Dictionary`2<string, UnresolvedDeclaredType> result);
    private void AddNestedUnresolvedTypes(IReferenceName refName, Dictionary`2<string, UnresolvedDeclaredType> result);
    public sealed virtual override IType Apply(string typeText, Dictionary`2<string, UnresolvedDeclaredType> boundTypes, bool allowNotResolved);
    [MustDisposeResourceAttribute]
private IDisposable CreateTypeUsageNodeCookie();
    private ITypeUsage CreateTypeUsageNode(string typeText);
    [CompilerGeneratedAttribute]
private IDisposable _Lambda$__8-0();
    [CompilerGeneratedAttribute]
private IDisposable _Lambda$__8-1();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableAccessorDeclaration : RearrangeableElementSwap`1<IAccessorDeclaration> {
    public RearrangeableAccessorDeclaration(IAccessorDeclaration element);
    protected virtual IEnumerable`1<IAccessorDeclaration> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableAnonymousMemberDeclaration : RearrangeableElementSwap`1<IAnonymousMemberDeclaration> {
    public RearrangeableAnonymousMemberDeclaration(IAnonymousMemberDeclaration element);
    protected virtual IEnumerable`1<IAnonymousMemberDeclaration> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableArgument : RearrangeableElementSwap`1<IVBArgument> {
    public RearrangeableArgument(IVBArgument element);
    protected virtual IEnumerable`1<IVBArgument> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableArrayInitalizer : RearrangeableElementSwap`1<IVBExpression> {
    public RearrangeableArrayInitalizer(IVBExpression element);
    protected virtual IEnumerable`1<IVBExpression> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableAttribute : RearrangeableElementSwap`1<IAttribute> {
    public RearrangeableAttribute(IAttribute element);
    protected virtual IEnumerable`1<IAttribute> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableBaseType : RearrangeableElementSwap`1<IDeclaredTypeUsage> {
    public RearrangeableBaseType(IDeclaredTypeUsage element);
    protected virtual IEnumerable`1<IDeclaredTypeUsage> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableBlockItem : RearrangeableVBLogicalItemBase`1<IBlock> {
    [CompilerGeneratedAttribute]
private StatementsRange _StatementsRange;
    private IVBStatement myFirstStatement;
    private IVBStatement myLastStatement;
    private StatementsRange myActualRange;
    public Direction SupportedDirections { get; }
    public StatementsRange StatementsRange { get; public set; }
    private RearrangeableBlockItem(IReadOnlyList`1<ILogicalItem<IBlock>> selectedItems, IBlock holder, IReadOnlyList`1<ILogicalItem<IBlock>> holderItems);
    public virtual bool CanMove(Direction direction);
    private void SafeRemoveStatements();
    public virtual ValueTuple`2<DocumentRange, ITreeRange> MoveUnderPsiTransaction(Direction dir);
    public virtual Direction get_SupportedDirections();
    [CompilerGeneratedAttribute]
public StatementsRange get_StatementsRange();
    [CompilerGeneratedAttribute]
public void set_StatementsRange(StatementsRange AutoPropertyValue);
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableCaseClause : RearrangeableElementSwap`1<ICaseClause> {
    public RearrangeableCaseClause(ICaseClause element);
    protected virtual IEnumerable`1<ICaseClause> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableCaseStatement : RearrangeableElementSwap`1<ICaseStatement> {
    public RearrangeableCaseStatement(ICaseStatement element);
    protected virtual IEnumerable`1<ICaseStatement> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableClassItem : RearrangeableVBLogicalItemBase`1<IClassBody> {
    private IClassLikeDeclaration myClassLikeDeclaration;
    [CompilerGeneratedAttribute]
private DeclarationsRange _DeclarationsRange;
    public DeclarationsRange DeclarationsRange { get; public set; }
    public Direction SupportedDirections { get; }
    private RearrangeableClassItem(IReadOnlyList`1<ILogicalItem<IClassBody>> selectedItems, IClassBody holder, IReadOnlyList`1<ILogicalItem<IClassBody>> holderItems);
    [CompilerGeneratedAttribute]
public DeclarationsRange get_DeclarationsRange();
    [CompilerGeneratedAttribute]
public void set_DeclarationsRange(DeclarationsRange AutoPropertyValue);
    public virtual Direction get_SupportedDirections();
    public virtual bool CanMove(Direction direction);
    public virtual ValueTuple`2<DocumentRange, ITreeRange> MoveUnderPsiTransaction(Direction direction);
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableCollectionElementInitializer : RearrangeableElementSwap`1<ICollectionElementInitializer> {
    public RearrangeableCollectionElementInitializer(ICollectionElementInitializer element);
    protected virtual IEnumerable`1<ICollectionElementInitializer> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableConstantDeclaration : RearrangeableElementSwap`1<IConstantDeclaration> {
    public RearrangeableConstantDeclaration(IConstantDeclaration element);
    protected virtual IEnumerable`1<IConstantDeclaration> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableEnumItem : RearrangeableVBLogicalItemBase`1<IEnumDeclaration> {
    [CompilerGeneratedAttribute]
private DeclarationsRange _DeclarationsRange;
    public DeclarationsRange DeclarationsRange { get; public set; }
    public Direction SupportedDirections { get; }
    public RearrangeableEnumItem(IReadOnlyList`1<ILogicalItem<IEnumDeclaration>> selectedItems, IEnumDeclaration holder, IReadOnlyList`1<ILogicalItem<IEnumDeclaration>> holderItems);
    [CompilerGeneratedAttribute]
public DeclarationsRange get_DeclarationsRange();
    [CompilerGeneratedAttribute]
public void set_DeclarationsRange(DeclarationsRange AutoPropertyValue);
    public virtual Direction get_SupportedDirections();
    public virtual bool CanMove(Direction direction);
    public virtual ValueTuple`2<DocumentRange, ITreeRange> MoveUnderPsiTransaction(Direction direction);
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableEraseExpression : RearrangeableElementSwap`1<IVBExpression> {
    public RearrangeableEraseExpression(IVBExpression element);
    protected virtual IEnumerable`1<IVBExpression> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableEventSpecifier : RearrangeableElementSwap`1<IEventSpecifier> {
    public RearrangeableEventSpecifier(IEventSpecifier element);
    protected virtual IEnumerable`1<IEventSpecifier> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableImportDirective : RearrangeableElementSwap`1<IImportDirective> {
    public RearrangeableImportDirective(IImportDirective element);
    protected virtual IEnumerable`1<IImportDirective> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableInterfaceInherits : RearrangeableElementSwap`1<IDeclaredTypeUsage> {
    public RearrangeableInterfaceInherits(IDeclaredTypeUsage element);
    protected virtual IEnumerable`1<IDeclaredTypeUsage> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableInterfaceMemberSpecifier : RearrangeableElementSwap`1<IInterfaceMemberSpecifier> {
    public RearrangeableInterfaceMemberSpecifier(IInterfaceMemberSpecifier element);
    protected virtual IEnumerable`1<IInterfaceMemberSpecifier> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableJoinCondition : RearrangeableElementSwap`1<IJoinCondition> {
    public RearrangeableJoinCondition(IJoinCondition element);
    protected virtual IEnumerable`1<IJoinCondition> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableLambdaParameter : RearrangeableElementSwap`1<ILambdaParameterDeclaration> {
    public RearrangeableLambdaParameter(ILambdaParameterDeclaration element);
    protected virtual IEnumerable`1<ILambdaParameterDeclaration> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableLocalDeclarationList : RearrangeableElementSwap`1<ILocalDeclarationList> {
    public RearrangeableLocalDeclarationList(ILocalDeclarationList element);
    protected virtual IEnumerable`1<ILocalDeclarationList> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableLocalVariableDeclaration : RearrangeableElementSwap`1<ILocalVariableDeclaration> {
    public RearrangeableLocalVariableDeclaration(ILocalVariableDeclaration element);
    protected virtual IEnumerable`1<ILocalVariableDeclaration> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableMemberInitializer : RearrangeableElementSwap`1<IMemberInitializer> {
    public RearrangeableMemberInitializer(IMemberInitializer element);
    protected virtual IEnumerable`1<IMemberInitializer> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableOption : RearrangeableElementSwap`1<IOptionStatement> {
    public RearrangeableOption(IOptionStatement element);
    protected virtual IEnumerable`1<IOptionStatement> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableOrderExpression : RearrangeableElementSwap`1<IOrderExpression> {
    public RearrangeableOrderExpression(IOrderExpression element);
    protected virtual IEnumerable`1<IOrderExpression> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableParameter : RearrangeableElementSwap`1<IRegularParameterDeclaration> {
    public RearrangeableParameter(IRegularParameterDeclaration element);
    protected virtual IEnumerable`1<IRegularParameterDeclaration> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeablePropertyAccessor : RearrangeableElementSwap`1<IAccessorDeclaration> {
    public RearrangeablePropertyAccessor(IAccessorDeclaration element);
    protected virtual IEnumerable`1<IAccessorDeclaration> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableQueryOperator : RearrangeableElementSwap`1<IQueryOperator> {
    public RearrangeableQueryOperator(IQueryOperator element);
    protected virtual IEnumerable`1<IQueryOperator> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableRedimClause : RearrangeableElementSwap`1<IRedimClause> {
    public RearrangeableRedimClause(IRedimClause element);
    protected virtual IEnumerable`1<IRedimClause> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableStatementInLineIf : RearrangeableElementSwap`1<IVBStatement> {
    private IList`1<IVBStatement> myStatementNodes;
    private RearrangeableStatementInLineIf(IVBStatement element, IList`1<IVBStatement> statementNodes);
    protected virtual IEnumerable`1<IVBStatement> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableTypeArgument : RearrangeableElementSwap`1<ITypeUsage> {
    public RearrangeableTypeArgument(ITypeUsage element);
    protected virtual IEnumerable`1<ITypeUsage> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableTypeOrNamespaceHolderItem : RearrangeableVBLogicalItemBase`1<IVBTypeAndNamespaceHolderDeclaration> {
    [CompilerGeneratedAttribute]
private DeclarationsRange _DeclarationsRange;
    public DeclarationsRange DeclarationsRange { get; public set; }
    public Direction SupportedDirections { get; }
    public RearrangeableTypeOrNamespaceHolderItem(IReadOnlyList`1<ILogicalItem<IVBTypeAndNamespaceHolderDeclaration>> selectedItems, IVBTypeAndNamespaceHolderDeclaration holder, IReadOnlyList`1<ILogicalItem<IVBTypeAndNamespaceHolderDeclaration>> holderItems);
    [CompilerGeneratedAttribute]
public DeclarationsRange get_DeclarationsRange();
    [CompilerGeneratedAttribute]
public void set_DeclarationsRange(DeclarationsRange AutoPropertyValue);
    public virtual Direction get_SupportedDirections();
    public virtual bool CanMove(Direction direction);
    public virtual ValueTuple`2<DocumentRange, ITreeRange> MoveUnderPsiTransaction(Direction direction);
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableTypeParameterConstraint : RearrangeableElementSwap`1<ITypeParameterConstraint> {
    public RearrangeableTypeParameterConstraint(ITypeParameterConstraint element);
    protected virtual IEnumerable`1<ITypeParameterConstraint> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableTypeParameterOfMethod : RearrangeableElementSwap`1<ITypeParameterOfMethodDeclaration> {
    public RearrangeableTypeParameterOfMethod(ITypeParameterOfMethodDeclaration element);
    protected virtual IEnumerable`1<ITypeParameterOfMethodDeclaration> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableTypeParameterOfType : RearrangeableElementSwap`1<ITypeParameterOfTypeDeclaration> {
    public RearrangeableTypeParameterOfType(ITypeParameterOfTypeDeclaration element);
    protected virtual IEnumerable`1<ITypeParameterOfTypeDeclaration> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableUsingVariableDeclaration : RearrangeableElementSwap`1<IUsingVariableDeclaration> {
    public RearrangeableUsingVariableDeclaration(IUsingVariableDeclaration element);
    protected virtual IEnumerable`1<IUsingVariableDeclaration> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableVariableDeclaration : RearrangeableElementSwap`1<IVariableDeclaration> {
    public RearrangeableVariableDeclaration(IVariableDeclaration element);
    protected virtual IEnumerable`1<IVariableDeclaration> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableVariableDeclarationList : RearrangeableElementSwap`1<IVariableDeclarationList> {
    public RearrangeableVariableDeclarationList(IVariableDeclarationList element);
    protected virtual IEnumerable`1<IVariableDeclarationList> GetSiblings();
}
public abstract class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableVBLogicalItemBase`1 : RearrangeableLogicalItemBase`1<THolder> {
    protected RearrangeableVBLogicalItemBase`1(IReadOnlyList`1<ILogicalItem<THolder>> selectedItems, THolder holder, IReadOnlyList`1<ILogicalItem<THolder>> holderItems);
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableXmlAttribute : RearrangeableElementSwap`1<IVBXmlAttribute> {
    public RearrangeableXmlAttribute(IVBXmlAttribute element);
    protected virtual IEnumerable`1<IVBXmlAttribute> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.VB.RearrangeCode.RearrangeableXmlElement : RearrangeableElement {
    private IVBXmlElement myTag;
    protected ITreeNode Element { get; }
    public Direction SupportedDirections { get; }
    public string Title { get; }
    public RearrangeableXmlElement(IVBXmlElement tag);
    public virtual bool CanMove(Direction direction);
    protected virtual ITreeNode get_Element();
    public virtual Direction get_SupportedDirections();
    public virtual string get_Title();
    protected virtual ITreeNode MoveUnderPsiTransaction(Direction direction);
    private IVBXmlElement Swap(IVBXmlElement child, IVBXmlElement target);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class JetBrains.ReSharper.Feature.Services.VB.Resources.LocalizedStrings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string AfterDotSettingDescription { get; }
    public static string AfternewSettingDescription { get; }
    public static string AfterSettingDescription { get; }
    public static string CompleteOnSpaceSettingDescription { get; }
    public static string EnterActionSettingDescription { get; }
    public static string InDocCommentsSettingDescription { get; }
    public static string InsertEndConstructsEndSubEndIfNextEtcOnEnterSettingDescription { get; }
    public static string LetterAndDigitsSettingDescription { get; }
    public static string NamingStyleOptionPageTitle { get; }
    public static string NonCompletingCharactersSettingDescription { get; }
    public static string OtherOptionPageTitle { get; }
    public static string OverrideVSIntelliSenseForVBNETSettingDescription { get; }
    public static string ParameterNameHintsOptionPageTitle { get; }
    public static string TabActionSettingDescription { get; }
    public static string UseReSharperAnalysisSettingDescription { get; }
    public static string VBNETCodeInspectionSettingsSettingDescription { get; }
    public static string VBNETSettingDescription { get; }
    public static string VBNETVbFilesAndVBNETCodeInSupportedServerPagesSettingDescription { get; }
    public static string VBTypingAssistanceSettingsSettingDescription { get; }
    public static string VisualBasicNETOtherInlayHintsSettingsSettingDescription { get; }
    public static string VisualBasicNETParameterNameHintsSettingsSettingDescription { get; }
    public static string VisualBasicOptionPageTitle { get; }
    public static string WhereValueIsExpectedSettingDescription { get; }
    public static string ReformatCode_Name_Reformat_VB { get; }
    public static string VBPredefinedNamingPolicySettings_Name_VB_NET_Predefined_Naming_Policy { get; }
    public static string VBOtherInlayHintsOptionsPage_New_Code_annotations_for_parameter_declarations { get; }
    public static string CSharpParameterNameHintsExclusionListPredefinedValues_Name_Predefined_VB_NET_Parameter_Name_Hints_Exclusion_List { get; }
    public static string GeneratingXmlDocumentation { get; }
    public static string GenerateOption_CheckParametersForNull_Text { get; }
    public static string GenerateOption_UseSystemHashCodeToImplementGetHashCode_Text { get; }
    public static string GenerateOption_UseNameOf_Text { get; }
    public static string GenerateOption_MakeTaskReturningMethodsAsync_Text { get; }
    public static string GenerateOption_Overridable_Text { get; }
    public static string GenerateOption_NotifyOnPropertyChanges_Text { get; }
    public static string GenerateOption_UseMethod_Text { get; }
    public static string GenerateOption_ImplementAs_Text { get; }
    public static string GenerateOption_PropertiesAs_Text { get; }
    public static string GenerateOption_AccessRights_Text { get; }
    public static string GenerateOption_ReadOnly_Text { get; }
    public static string GenerateOption_Automatic_Text { get; }
    public static string GenerateOption_Yes_Text { get; }
    public static string GenerateOption_No_Text { get; }
    public static string GenerateOption_NonOverridableMember_Text { get; }
    public static string GenerateOption_MustOverrideMember_Text { get; }
    public static string GenerateOption_OverridableMember_Text { get; }
    public static string GenerateOption_DefaultBody_Text { get; }
    public static string GenerateOption_PropertyWithBackingField_Text { get; }
    public static string GenerateOption_AutomaticProperty_Text { get; }
    public static string VbLanguageLevelDisplayName_Text { get; }
    public static string VbLanguageLevelDescription_Text { get; }
    private static LocalizedStrings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_AfterDotSettingDescription();
    public static string get_AfternewSettingDescription();
    public static string get_AfterSettingDescription();
    public static string get_CompleteOnSpaceSettingDescription();
    public static string get_EnterActionSettingDescription();
    public static string get_InDocCommentsSettingDescription();
    public static string get_InsertEndConstructsEndSubEndIfNextEtcOnEnterSettingDescription();
    public static string get_LetterAndDigitsSettingDescription();
    public static string get_NamingStyleOptionPageTitle();
    public static string get_NonCompletingCharactersSettingDescription();
    public static string get_OtherOptionPageTitle();
    public static string get_OverrideVSIntelliSenseForVBNETSettingDescription();
    public static string get_ParameterNameHintsOptionPageTitle();
    public static string get_TabActionSettingDescription();
    public static string get_UseReSharperAnalysisSettingDescription();
    public static string get_VBNETCodeInspectionSettingsSettingDescription();
    public static string get_VBNETSettingDescription();
    public static string get_VBNETVbFilesAndVBNETCodeInSupportedServerPagesSettingDescription();
    public static string get_VBTypingAssistanceSettingsSettingDescription();
    public static string get_VisualBasicNETOtherInlayHintsSettingsSettingDescription();
    public static string get_VisualBasicNETParameterNameHintsSettingsSettingDescription();
    public static string get_VisualBasicOptionPageTitle();
    public static string get_WhereValueIsExpectedSettingDescription();
    public static string get_ReformatCode_Name_Reformat_VB();
    public static string get_VBPredefinedNamingPolicySettings_Name_VB_NET_Predefined_Naming_Policy();
    public static string get_VBOtherInlayHintsOptionsPage_New_Code_annotations_for_parameter_declarations();
    public static string get_CSharpParameterNameHintsExclusionListPredefinedValues_Name_Predefined_VB_NET_Parameter_Name_Hints_Exclusion_List();
    public static string get_GeneratingXmlDocumentation();
    public static string get_GenerateOption_CheckParametersForNull_Text();
    public static string get_GenerateOption_UseSystemHashCodeToImplementGetHashCode_Text();
    public static string get_GenerateOption_UseNameOf_Text();
    public static string get_GenerateOption_MakeTaskReturningMethodsAsync_Text();
    public static string get_GenerateOption_Overridable_Text();
    public static string get_GenerateOption_NotifyOnPropertyChanges_Text();
    public static string get_GenerateOption_UseMethod_Text();
    public static string get_GenerateOption_ImplementAs_Text();
    public static string get_GenerateOption_PropertiesAs_Text();
    public static string get_GenerateOption_AccessRights_Text();
    public static string get_GenerateOption_ReadOnly_Text();
    public static string get_GenerateOption_Automatic_Text();
    public static string get_GenerateOption_Yes_Text();
    public static string get_GenerateOption_No_Text();
    public static string get_GenerateOption_NonOverridableMember_Text();
    public static string get_GenerateOption_MustOverrideMember_Text();
    public static string get_GenerateOption_OverridableMember_Text();
    public static string get_GenerateOption_DefaultBody_Text();
    public static string get_GenerateOption_PropertyWithBackingField_Text();
    public static string get_GenerateOption_AutomaticProperty_Text();
    public static string get_VbLanguageLevelDisplayName_Text();
    public static string get_VbLanguageLevelDescription_Text();
}
public class JetBrains.ReSharper.Feature.Services.VB.SelectEmbracingConstruct.VBDotSelection : DotSelection`1<IVBFile> {
    private TreeOffset myOffset;
    public TreeTextRange TreeRange { get; }
    public VBDotSelection(IVBFile fileNode, TreeOffset offset, bool selectBetterToken, bool useCamelHumps, bool appendInjectedPsi);
    public sealed virtual override TreeTextRange get_TreeRange();
    protected virtual ISelectedRange CreateTokenPartSelection(ITokenNode tokenNode, TreeTextRange treeTextRange);
    private ISelectedRange TryCreateXmlDocSelection(ITokenNode tokenNode);
    protected virtual ISelectedRange CreateTreeNodeSelection(ITokenNode tokenNode);
    protected virtual ISelectedRange GetParentInternal(ITokenNode tokenNode);
    protected virtual bool IsLiteralToken(ITokenNode token);
    protected virtual bool IsNewLineToken(ITokenNode token);
    protected virtual bool IsSpaceToken(ITokenNode token);
    protected virtual bool IsWordToken(ITokenNode token);
    protected virtual bool IsPrevTokenBetter(ITokenNode prevToken, ITokenNode tokenNode);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.SelectEmbracingConstruct.VBSelectEmbracingConstructProvider : object {
    private SettingsStore mySettingsStore;
    public VBSelectEmbracingConstructProvider(SettingsStore settingsStore);
    public sealed virtual override bool IsAvailable(IPsiSourceFile sourceFile);
    public sealed virtual override ISelectedRange GetSelectedRange(IPsiSourceFile sourceFile, DocumentRange documentRange);
    private ISelectedRange GetSelectedRange(IVBFile file, DocumentRange documentRange);
    internal static bool IsComment(ITreeNode node);
    internal static bool IsNewLine(ITreeNode node);
    internal static bool IsWhitespace(ITreeNode node);
    internal static bool IsWhitespaceNotNewLine(ITreeNode node);
    internal static bool IsColon(ITreeNode node);
    internal static bool IsComma(ITreeNode node);
    internal static bool IsStatement(ITreeNode treeNode);
    internal static bool IsLocalVariableDeclaration(ITreeNode treeNode);
    internal static bool IsVariableDeclaration(ITreeNode treeNode);
    internal static bool IsTypeMember(ITreeNode treeNode);
    internal static bool IsTypeMemberOrComment(ITreeNode treeNode);
    internal static ISelectedRange ExtendRangeSelection(IVBFile fileNode, ITreeNode first, ITreeNode last);
    internal static ISelectedRange BuildNodeSelection(IVBFile fileNode, ITreeNode node);
}
public class JetBrains.ReSharper.Feature.Services.VB.SelectEmbracingConstruct.VBTokenPartSelection : TokenPartSelection`1<IVBFile> {
    public ISelectedRange Parent { get; }
    public VBTokenPartSelection(IVBFile fileNode, TreeTextRange range, ITokenNode token);
    public virtual ISelectedRange get_Parent();
}
public class JetBrains.ReSharper.Feature.Services.VB.SelectEmbracingConstruct.VBTreeNodeSelection : TreeNodeSelection`1<IVBFile> {
    public TreeTextRange TreeRange { get; }
    public ISelectedRange Parent { get; }
    public ExtendToTheWholeLinePolicy ExtendToWholeLine { get; }
    public VBTreeNodeSelection(IVBFile fileNode, ITreeNode treeNode);
    public sealed virtual override TreeTextRange get_TreeRange();
    public virtual ISelectedRange get_Parent();
    public virtual ExtendToTheWholeLinePolicy get_ExtendToWholeLine();
}
public class JetBrains.ReSharper.Feature.Services.VB.SelectEmbracingConstruct.VBTreeRangeSelection : TreeRangeSelection`1<IVBFile> {
    public ISelectedRange Parent { get; }
    public VBTreeRangeSelection(IVBFile fileNode, ITreeNode first, ITreeNode last);
    public virtual ISelectedRange get_Parent();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.AggregatedRangeVariableDeclarationMatcher : VBElementMatcher`1<IAggregatedRangeVariableDeclaration> {
    public AggregatedRangeVariableDeclarationMatcher(IAggregatedRangeVariableDeclaration declaration, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.AggregateQueryOperatorMatcher : VBElementMatcher`1<IAggregateQueryOperator> {
    public AggregateQueryOperatorMatcher(IAggregateQueryOperator queryOperator, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.AnonymousMemberDeclarationMatcher : VBElementMatcher`1<IAnonymousMemberDeclaration> {
    public AnonymousMemberDeclarationMatcher(IAnonymousMemberDeclaration declaration, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.AnonymousObjectInitializerMatcher : VBElementMatcher`1<IAnonymousObjectInitializer> {
    public AnonymousObjectInitializerMatcher(IAnonymousObjectInitializer initializer, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.ArrayBoundMatcher : VBElementMatcher`1<IArrayBound> {
    public ArrayBoundMatcher(IArrayBound bound, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.ArrayCreationExpressionMatcher : VBExpressionMatcher`1<IArrayCreationExpression> {
    public ArrayCreationExpressionMatcher(IArrayCreationExpression expression, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.ArrayModifierMatcher : VBElementMatcher`1<IArrayModifier> {
    public ArrayModifierMatcher(IArrayModifier modifier, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.ArrayModifiersListMatcher : VBElementMatcher`1<IArrayModifiersList> {
    public ArrayModifiersListMatcher(IArrayModifiersList modifiersList, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.DistinctQueryOperatorMatcher : VBElementMatcher`1<IDistinctQueryOperator> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static DistinctQueryOperatorMatcher();
    public DistinctQueryOperatorMatcher(IDistinctQueryOperator queryOperator, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.EmptyArgumentMatcher : VBElementMatcher`1<IEmptyArgument> {
    public EmptyArgumentMatcher(IEmptyArgument emptyArgumentParam, PatternMatcherBuilderParams patternMatcherBuilderParams);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.EndStatementMatcher : VBElementMatcher`1<IEndStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static EndStatementMatcher();
    public EndStatementMatcher(IEndStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.ErrorStatementMatcher : VBElementMatcher`1<IErrorStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static ErrorStatementMatcher();
    public ErrorStatementMatcher(IErrorStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.ExpressionRangeVariableDeclarationMatcher : VBElementMatcher`1<IExpressionRangeVariableDeclaration> {
    public ExpressionRangeVariableDeclarationMatcher(IExpressionRangeVariableDeclaration declaration, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.GroupByQueryOperatorMatcher : VBElementMatcher`1<IGroupByQueryOperator> {
    public GroupByQueryOperatorMatcher(IGroupByQueryOperator queryOperator, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.GroupJoinQueryOperatorMatcher : VBElementMatcher`1<IGroupJoinQueryOperator> {
    public GroupJoinQueryOperatorMatcher(IGroupJoinQueryOperator queryOperator, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.IntoOfAggregateQueryOperatorMatcher : VBElementMatcher`1<IIntoOfAggregateQueryOperator> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static IntoOfAggregateQueryOperatorMatcher();
    public IntoOfAggregateQueryOperatorMatcher(IIntoOfAggregateQueryOperator queryOperator, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.IsExpressionMatcher : VBExpressionMatcher`1<IIsExpression> {
    private IElementMatcher myLeftMatcher;
    private IElementMatcher myRightMatcher;
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static IsExpressionMatcher();
    public IsExpressionMatcher(IIsExpression expression, PatternMatcherBuilderParams params);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
    private bool MatchNormal(ITreeNode element, IMatchingContext context);
    private bool MatchReverse(ITreeNode element, IMatchingContext context);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.IsNotExpressionMatcher : VBExpressionMatcher`1<IIsNotExpression> {
    private IElementMatcher myLeftMatcher;
    private IElementMatcher myRightMatcher;
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static IsNotExpressionMatcher();
    public IsNotExpressionMatcher(IIsNotExpression expression, PatternMatcherBuilderParams params);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
    private bool MatchNormal(ITreeNode element, IMatchingContext context);
    private bool MatchReverse(ITreeNode element, IMatchingContext context);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.JoinCollectionRangeVariableDeclarationMatcher : VBElementMatcher`1<IJoinCollectionRangeVariableDeclaration> {
    public JoinCollectionRangeVariableDeclarationMatcher(IJoinCollectionRangeVariableDeclaration declaration, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.JoinConditionMatcher : VBElementMatcher`1<IJoinCondition> {
    public JoinConditionMatcher(IJoinCondition condition, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.JoinQueryOperatorMatcher : VBElementMatcher`1<IJoinQueryOperator> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static JoinQueryOperatorMatcher();
    public JoinQueryOperatorMatcher(IJoinQueryOperator queryOperator, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.LambdaSubExpressionMatcher : VBElementMatcher`1<ILambdaSubExpression> {
    public LambdaSubExpressionMatcher(ILambdaSubExpression expression, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.LetQueryOperatorMatcher : VBElementMatcher`1<ILetQueryOperator> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static LetQueryOperatorMatcher();
    public LetQueryOperatorMatcher(ILetQueryOperator queryOperator, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.AddHandlerStatementMatcher : VBElementMatcher`1<IAddHandlerStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static AddHandlerStatementMatcher();
    public AddHandlerStatementMatcher(IAddHandlerStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.AddressOfExpressionMatcher : VBExpressionMatcher`1<IAddressOfExpression> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static AddressOfExpressionMatcher();
    public AddressOfExpressionMatcher(IAddressOfExpression expression, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.AnonymousArrayCreationExpressionMatcher : VBExpressionMatcher`1<IAnonymousArrayCreationExpression> {
    public AnonymousArrayCreationExpressionMatcher(IAnonymousArrayCreationExpression expression, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.AnonymousObjectCreationExpressionMatcher : VBExpressionMatcher`1<IAnonymousObjectCreationExpression> {
    public AnonymousObjectCreationExpressionMatcher(IAnonymousObjectCreationExpression expression, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.AssignmentStatementMatcher : VBElementMatcher`1<IAssignmentStatement> {
    public AssignmentStatementMatcher(IAssignmentStatement statement, PatternMatcherBuilderParams params);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.AssociativeExpressionMatcher`1 : object {
    private PatternMatcherBuilderParams myParams;
    private TokenNodeType myOperatorSign;
    private List`1<IElementMatcher> myOperandMatchers;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public AssociativeExpressionMatcher`1(T expression, PatternMatcherBuilderParams params);
    public sealed virtual override bool Match(ITreeNode element, IMatchingContext context);
    private static ICollection`1<ITreeNode> GetBinaryExpressionOperands(ITreeNode node);
    public sealed virtual override IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual override IEnumerable`1<string> get_Words();
    private void GetOperands(IVBExpression expression, List`1<ITreeNode> operands);
    public sealed virtual override IStructuralMatchResult MatchExpression(IVBExpression expression, IMatchingContext context, StructuralSearchPatternParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.AwaitExpressionMatcher : VBExpressionMatcher`1<IAwaitExpression> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static AwaitExpressionMatcher();
    public AwaitExpressionMatcher(IAwaitExpression expression, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.AwaitStatementMatcher : VBElementMatcher`1<IAwaitStatement> {
    public AwaitStatementMatcher(IAwaitStatement expression, PatternMatcherBuilderParams context);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.BinaryExpressionMatcher`1 : VBExpressionMatcher`1<T> {
    private IElementMatcher myLeftExprMatcher;
    private IElementMatcher myRightExprMatcher;
    private TokenNodeType mySign;
    private TreatBinaryExpressionsEquivalent myTreatBinaryExpressionsEquivalent;
    public BinaryExpressionMatcher`1(T expression, PatternMatcherBuilderParams params);
    public BinaryExpressionMatcher`1(T expression, TokenNodeType sign, PatternMatcherBuilderParams params);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
    private bool MatchNormal(ITreeNode element, IMatchingContext context);
    private bool MatchReverse(ITreeNode element, IMatchingContext context);
    private static TokenNodeType GetReverseOperatorSign(TokenNodeType sign);
    private static bool CheckExpressionCanBeUsedInSmartComparison(IVBExpression expression);
    private static bool IsFieldCanBeUsedInSmartComparison(ITypeMember field, IVBExpression qualifierExpression);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.BinaryExpressionMatcherUtil : object {
    public static IElementMatcher CreateNegativeMatcher(T expression, PatternMatcherBuilderParams params);
    private static TokenNodeType GetNegativeOperatorSign(TokenNodeType sign);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.BlockIfStatementMatcher : VBElementMatcher`1<IBlockIfStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static BlockIfStatementMatcher();
    public BlockIfStatementMatcher(IBlockIfStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.BlockMatcher : VBElementMatcher`1<IBlock> {
    public BlockMatcher(IBlock block, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.CaseStatementMatcher : VBElementMatcher`1<ICaseStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static CaseStatementMatcher();
    public CaseStatementMatcher(ICaseStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.CastExpressionMatcher : VBExpressionMatcher`1<ICastExpression> {
    public CastExpressionMatcher(ICastExpression expression, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.CatchStatementMatcher : VBElementMatcher`1<ICatchStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static CatchStatementMatcher();
    public CatchStatementMatcher(ICatchStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.ConditionalExpressionMatcher : VBExpressionMatcher`1<IConditionalExpression> {
    private IElementMatcher myThenMatcher;
    private IElementMatcher myElseMatcher;
    private IElementMatcher myNegativeExpressionMatcher;
    public ConditionalExpressionMatcher(IConditionalExpression expression, PatternMatcherBuilderParams params);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
    private bool MatchReverse(ITreeNode element, IMatchingContext context);
    private bool MatchNormal(ITreeNode element, IMatchingContext context);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.ContinueStatementMatcher : object {
    private static String[] ourWords;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    private static ContinueStatementMatcher();
    public ContinueStatementMatcher(IContinueStatement statement, PatternMatcherBuilderParams params);
    public sealed virtual override bool Match(ITreeNode element, IMatchingContext context);
    public sealed virtual override IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual override IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.DictionaryAccessExpressionMatcher : VBExpressionMatcher`1<IDictionaryAccessExpression> {
    public DictionaryAccessExpressionMatcher(IDictionaryAccessExpression expression, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.DoLoopStatementMatcher : VBElementMatcher`1<IDoLoopStatement> {
    private static String[] ourWords;
    private static DoLoopStatementMatcher();
    public DoLoopStatementMatcher(IDoLoopStatement statement, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.ElseIfStatementMatcher : VBElementMatcher`1<IElseIfStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static ElseIfStatementMatcher();
    public ElseIfStatementMatcher(IElseIfStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.ElseStatementMatcher : VBElementMatcher`1<IElseStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static ElseStatementMatcher();
    public ElseStatementMatcher(IElseStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.EraseStatementMatcher : VBElementMatcher`1<IEraseStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static EraseStatementMatcher();
    public EraseStatementMatcher(IEraseStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.ExitStatementMatcher : VBElementMatcher`1<IExitStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static ExitStatementMatcher();
    public ExitStatementMatcher(IExitStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.ExpressionStatementMatcher : VBElementMatcher`1<IExpressionStatement> {
    public ExpressionStatementMatcher(IExpressionStatement statement, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.FinallyStatementMatcher : VBElementMatcher`1<IFinallyStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static FinallyStatementMatcher();
    public FinallyStatementMatcher(IFinallyStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.ForEachStatementMatcher : VBElementMatcher`1<IForEachStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static ForEachStatementMatcher();
    public ForEachStatementMatcher(IForEachStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.ForStatementMatcher : VBElementMatcher`1<IForStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static ForStatementMatcher();
    public ForStatementMatcher(IForStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.GetTypeExpressionMatcher : VBExpressionMatcher`1<IGetTypeExpression> {
    public GetTypeExpressionMatcher(IGetTypeExpression expression, PatternMatcherBuilderParams params);
    private IType GetElementType(IGetTypeExpression e);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.GotoStatementMatcher : VBElementMatcher`1<IGotoStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static GotoStatementMatcher();
    public GotoStatementMatcher(IGotoStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
public interface JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.IExpressionMatcher {
    public abstract virtual IStructuralMatchResult MatchExpression(IVBExpression expression, IMatchingContext context, StructuralSearchPatternParams params);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.IndexExpressionMatcher : VBExpressionMatcher`1<IIndexExpression> {
    public IndexExpressionMatcher(IIndexExpression expression, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.InstanceExpressionMatcher : VBExpressionMatcher`1<IInstanceExpression> {
    public InstanceExpressionMatcher(IInstanceExpression expression, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.InvocationStatementMatcher : VBElementMatcher`1<IInvocationStatement> {
    public InvocationStatementMatcher(IInvocationStatement statement, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.LabelDeclarationMatcher : VBElementMatcher`1<ILabelDeclaration> {
    public LabelDeclarationMatcher(ILabelDeclaration declaration, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.LabelNameMatcher : VBElementMatcher`1<ILabelName> {
    public LabelNameMatcher(ILabelName name, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.LabelStatementMatcher : VBElementMatcher`1<ILabelStatement> {
    public LabelStatementMatcher(ILabelStatement statement, PatternMatcherBuilderParams params);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.LambdaFunctionMatcher : VBElementMatcher`1<ILambdaFunctionExpression> {
    public LambdaFunctionMatcher(ILambdaFunctionExpression expression, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.LambdaParameterDeclarationMatcher : VBElementMatcher`1<ILambdaParameterDeclaration> {
    public LambdaParameterDeclarationMatcher(ILambdaParameterDeclaration declaration, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.LineIfStatementMatcher : VBElementMatcher`1<ILineIfStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static LineIfStatementMatcher();
    public LineIfStatementMatcher(ILineIfStatement lineIfStatementParam, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.LocalDeclarationListMatcher : VBElementMatcher`1<ILocalDeclarationList> {
    public LocalDeclarationListMatcher(ILocalDeclarationList declarationList, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.LocalDeclarationStatementMatcher : VBElementMatcher`1<ILocalDeclarationStatement> {
    public LocalDeclarationStatementMatcher(ILocalDeclarationStatement statement, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.LocalVariableDeclarationMatcher : VBElementMatcher`1<IVBLocalVariableDeclaration> {
    public LocalVariableDeclarationMatcher(IVBLocalVariableDeclaration declaration, PatternMatcherBuilderParams params);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.NextClauseMatcher : VBElementMatcher`1<INextClause> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static NextClauseMatcher();
    public NextClauseMatcher(INextClause clause, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.ObjectCreationExpressionMatcher : VBElementMatcher`1<IObjectCreationExpression> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static ObjectCreationExpressionMatcher();
    public ObjectCreationExpressionMatcher(IObjectCreationExpression expression, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.ObjectCreationInitializerMatcher : VBElementMatcher`1<IObjectCreationInitializer> {
    public ObjectCreationInitializerMatcher(IObjectCreationInitializer initializer, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.OnErrorSpecialLabelMatcher : VBElementMatcher`1<IOnErrorSpecialLabel> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static OnErrorSpecialLabelMatcher();
    public OnErrorSpecialLabelMatcher(IOnErrorSpecialLabel specialLabel, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.OnErrorStatementMatcher : VBElementMatcher`1<IOnErrorStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static OnErrorStatementMatcher();
    public OnErrorStatementMatcher(IOnErrorStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.ParenthesizedExpressionMatcher : VBExpressionMatcher`1<IParenthesizedExpression> {
    private IElementMatcher myMatcher;
    private bool myIgnoreParens;
    public ParenthesizedExpressionMatcher(IParenthesizedExpression expression, PatternMatcherBuilderParams params);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
    [CompilerGeneratedAttribute]
private ITreeNode _Lambda$__2-0(IParenthesizedExpression e);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.PositionalArgumentMatcher : VBElementMatcher`1<IPositionalArgument> {
    public PositionalArgumentMatcher(IPositionalArgument argument, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.RaiseEventStatementMatcher : VBElementMatcher`1<IRaiseEventStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static RaiseEventStatementMatcher();
    public RaiseEventStatementMatcher(IRaiseEventStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.RedimClauseMatcher : VBElementMatcher`1<IRedimClause> {
    public RedimClauseMatcher(IRedimClause clause, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.RedimStatementMatcher : VBElementMatcher`1<IRedimStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static RedimStatementMatcher();
    public RedimStatementMatcher(IRedimStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.ReferenceExpressionMatcher : VBExpressionMatcher`1<IReferenceExpression> {
    public ReferenceExpressionMatcher(IReferenceExpression expression, PatternMatcherBuilderParams params);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.ReferenceExpressionTypeMatcher : object {
    private List`1<ITypeMatcher> myTypeArgumentsMatchers;
    public string ShortName { get; }
    public ReferenceExpressionTypeMatcher(IReferenceExpression expression, PatternMatcherBuilderParams params);
    public sealed virtual override bool MatchType(ITreeNode element, IMatchingContext context);
    public sealed virtual override bool MatchType(ITreeNode element, IType elementType, IMatchingContext context);
    public sealed virtual override string get_ShortName();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.RemoveHandlerStatementMatcher : VBElementMatcher`1<IRemoveHandlerStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static RemoveHandlerStatementMatcher();
    public RemoveHandlerStatementMatcher(IRemoveHandlerStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.ResumeStatementMatcher : VBElementMatcher`1<IResumeStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static ResumeStatementMatcher();
    public ResumeStatementMatcher(IResumeStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.ReturnStatementMatcher : VBElementMatcher`1<IReturnStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static ReturnStatementMatcher();
    public ReturnStatementMatcher(IReturnStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.SelectStatementMatcher : VBElementMatcher`1<ISelectStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static SelectStatementMatcher();
    public SelectStatementMatcher(ISelectStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.SmartIfStatementMatcher : object {
    private IElementMatcher myExpressionMatcher;
    private VBSequenceMatcher`1<IVBStatement> myThenMatcher;
    private VBSequenceMatcher`1<IVBStatement> myElseMatcher;
    private IElementMatcher myNegativeExpressionMatcher;
    private static String[] ourWords;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    private static SmartIfStatementMatcher();
    public SmartIfStatementMatcher(ILineIfStatement lineIf, PatternMatcherBuilderParams params);
    public SmartIfStatementMatcher(IBlockIfStatement blockIf, PatternMatcherBuilderParams params);
    public sealed virtual override bool Match(ITreeNode element, IMatchingContext context);
    private bool MatchLineIf(ITreeNode node, IMatchingContext context);
    private bool MatchLineIfReverse(ITreeNode node, IMatchingContext context);
    private bool CheckElse(ILineIfStatement lineIf, IMatchingContext context);
    private bool MatchBlockIf(ITreeNode node, IMatchingContext context);
    private bool MatchBlockIfReverse(ITreeNode node, IMatchingContext context);
    private bool CheckElse(IBlockIfStatement blockIf, IMatchingContext context);
    public sealed virtual override IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual override IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.StopStatementMatcher : VBElementMatcher`1<IStopStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static StopStatementMatcher();
    public StopStatementMatcher(IStopStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.SyncLockStatementMatcher : VBElementMatcher`1<ISyncLockStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static SyncLockStatementMatcher();
    public SyncLockStatementMatcher(ISyncLockStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.ThrowStatementMatcher : VBElementMatcher`1<IThrowStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static ThrowStatementMatcher();
    public ThrowStatementMatcher(IThrowStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.TryStatementMatcher : VBElementMatcher`1<ITryStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static TryStatementMatcher();
    public TryStatementMatcher(ITryStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.TypeOfIsExpressionMatcher : VBExpressionMatcher`1<ITypeOfIsExpression> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static TypeOfIsExpressionMatcher();
    public TypeOfIsExpressionMatcher(ITypeOfIsExpression expression, PatternMatcherBuilderParams params);
    private static IType CreateType(ITypeOfIsExpression e);
    public virtual IEnumerable`1<string> get_Words();
    [CompilerGeneratedAttribute]
private ITreeNode _Lambda$__2-0(ITypeOfIsExpression e);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.TypeOfIsNotExpressionMatcher : VBExpressionMatcher`1<ITypeOfIsExpression> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static TypeOfIsNotExpressionMatcher();
    public TypeOfIsNotExpressionMatcher(ITypeOfIsExpression expression, PatternMatcherBuilderParams params);
    private static IType CreateType(ITypeOfIsExpression e);
    public virtual IEnumerable`1<string> get_Words();
    [CompilerGeneratedAttribute]
private ITreeNode _Lambda$__2-0(ITypeOfIsExpression e);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.UsingStatementMatcher : VBElementMatcher`1<IUsingStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static UsingStatementMatcher();
    public UsingStatementMatcher(IUsingStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.VBElementMatcher`1 : ElementMatcherBase`1<T> {
    protected IElementMatcher AddMatcher(T expression, Func`2<T, ITreeNode> propertyGetter, PatternMatcherBuilderParams params);
    protected VBSequenceMatcher`1<T2> AddMatcher(T expression, Func`2<T, IList`1<T2>> elementsGetter, PatternMatcherBuilderParams params);
}
public abstract class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.VBExpressionMatcher`1 : VBElementMatcher`1<T> {
    private bool myMatchParentheziedExpressions;
    protected VBExpressionMatcher`1(PatternMatcherBuilderParams params);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
    protected ITreeNode GetExpression(ITreeNode element);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.VBIdentifierMatcher : object {
    private string myName;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    private VBIdentifierMatcher(ITreeNode element);
    private static string GetName(ITreeNode element);
    public sealed virtual override bool Match(ITreeNode element, IMatchingContext context);
    public sealed virtual override IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual override IEnumerable`1<string> get_Words();
    [NotNullAttribute]
public static IElementMatcher Build(ITreeNode element, PatternMatcherBuilderParams params);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.VBLiteralExpressionMatcher : VBExpressionMatcher`1<IVBLiteralExpression> {
    private TokenNodeType myTokenType;
    private string myText;
    public VBLiteralExpressionMatcher(IVBLiteralExpression expression, PatternMatcherBuilderParams params);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.VBUnaryExpressionMatcher`1 : VBExpressionMatcher`1<T> {
    public VBUnaryExpressionMatcher`1(T expression, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.VBXmlAttributeMatcher : VBElementMatcher`1<IVBXmlAttribute> {
    public VBXmlAttributeMatcher(IVBXmlAttribute attribute, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.VBXmlCommentMatcher : VBElementMatcher`1<IVBXmlComment> {
    public VBXmlCommentMatcher(IVBXmlComment comment, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.VBXmlDocumentMatcher : VBElementMatcher`1<IVBXmlDocument> {
    public VBXmlDocumentMatcher(IVBXmlDocument document, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.VBXmlElementFooterMatcher : VBElementMatcher`1<IVBXmlElementFooter> {
    public VBXmlElementFooterMatcher(IVBXmlElementFooter footer, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.VBXmlElementHeaderMatcher : VBElementMatcher`1<IVBXmlElementHeader> {
    public VBXmlElementHeaderMatcher(IVBXmlElementHeader header, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.VBXmlElementMatcher : VBElementMatcher`1<IVBXmlElement> {
    public VBXmlElementMatcher(IVBXmlElement element, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.VBXmlLiteralExpressionMatcher : VBElementMatcher`1<IVBXmlLiteralExpression> {
    public VBXmlLiteralExpressionMatcher(IVBXmlLiteralExpression expression, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.WhileStatementMatcher : VBElementMatcher`1<IWhileStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static WhileStatementMatcher();
    public WhileStatementMatcher(IWhileStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.WhileUntilConditionMatcher : VBElementMatcher`1<IWhileUntilCondition> {
    public WhileUntilConditionMatcher(IWhileUntilCondition condition, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.WithStatementMatcher : VBElementMatcher`1<IWithStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static WithStatementMatcher();
    public WithStatementMatcher(IWithStatement statement, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Matchers.YieldStatementMatcher : VBElementMatcher`1<IYieldStatement> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static YieldStatementMatcher();
    public YieldStatementMatcher(IYieldStatement yieldStatementParam, PatternMatcherBuilderParams context);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.MemberInitializerMatcher : VBElementMatcher`1<IMemberInitializer> {
    public MemberInitializerMatcher(IMemberInitializer initializer, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.NamedArgumentMatcher : VBElementMatcher`1<INamedArgument> {
    public NamedArgumentMatcher(INamedArgument namedArgument, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.OrderByQueryOperatorMatcher : VBElementMatcher`1<IOrderByQueryOperator> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static OrderByQueryOperatorMatcher();
    public OrderByQueryOperatorMatcher(IOrderByQueryOperator queryOperator, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.OrderExpressionMatcher : VBElementMatcher`1<IOrderExpression> {
    public OrderExpressionMatcher(IOrderExpression expression, PatternMatcherBuilderParams params);
    private static Ordering GetOrdering(IOrderExpression expression);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Parsers.VBStructuralSearchExpressionPatternBuilder : object {
    public static VBStructuralSearchExpressionPatternBuilder Instance;
    private bool myGuessPlaceholders;
    private static VBStructuralSearchExpressionPatternBuilder();
    public VBStructuralSearchExpressionPatternBuilder(bool guessPlaceholders);
    public sealed virtual override IStructuralMatcher CreateMatcher(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
    public sealed virtual override IPatternLexerResult ParsePattern(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.PartitionQueryOperatorMatcher : VBElementMatcher`1<IPartitionQueryOperator> {
    public PartitionQueryOperatorMatcher(IPartitionQueryOperator queryOperator, PatternMatcherBuilderParams params);
    private PartitionType GetPartitionType(IPartitionQueryOperator queryOperator);
    [CompilerGeneratedAttribute]
private PartitionType _Lambda$__0-1(IPartitionQueryOperator o);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Placeholders.ArgumentPlaceholder : SequencePlaceholderBase {
    private static String[] ourReplacingText;
    public static string TAG_NAME;
    public String[] ReplacingText { get; }
    protected string TagName { get; }
    protected string EntityName { get; }
    private static ArgumentPlaceholder();
    public ArgumentPlaceholder(string name, int minimalOccurrences, int maximalOccurrences);
    public ArgumentPlaceholder(string name);
    public ArgumentPlaceholder(PlaceholderInfo placeholderInfo);
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
    public virtual String[] get_ReplacingText();
    public virtual IPlaceholder Clone();
    protected virtual string get_TagName();
    protected virtual string get_EntityName();
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Placeholders.ArgumentPlaceholderMatcher : SequencePlaceholderMatcherBase {
    private PatternMatcherBuilderParams myParams;
    public ArgumentPlaceholderMatcher(ISequencePlaceholder placeholder, StructuralSearchPatternParams params);
    public virtual IElementMatcher CreatePlaceholderMatcher(ITreeNode element);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
    public virtual ISequenceMatcher`1<ITreeNode> CreatePlaceholderMatcher(ICollection`1<ITreeNode> enumerable);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Placeholders.DeclaredTypePlaceholderMatcher : PlaceholderTypeMatcherBase {
    private Func`2<ITreeNode, IDeclaredTypeUsage> myFunc;
    public DeclaredTypePlaceholderMatcher(TypePlaceholder placeholder, Func`2<ITreeNode, IDeclaredTypeUsage> func);
    public virtual IType GetElementType(ITreeNode element);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Placeholders.ElementPlaceholder : PlaceholderBase {
    private ITreeNode myElement;
    private static String[] ourReplacingText;
    public string Description { get; }
    public String[] ReplacingText { get; }
    private static ElementPlaceholder();
    public ElementPlaceholder(string name, ITreeNode element);
    public virtual string get_Description();
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
    public virtual String[] get_ReplacingText();
    public virtual IPlaceholder Clone();
    public virtual PlaceholderInfo ToPlaceholderInfo();
    public bool Equals(ElementPlaceholder other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Placeholders.ElementPlaceholderMatcher : object {
    private IElementMatcher myElementMatcher;
    private string myPlaceholderName;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public string PlaceholderName { get; }
    public ElementPlaceholderMatcher(string name, ITreeNode element, PatternMatcherBuilderParams params);
    public sealed virtual override bool Match(ITreeNode element, IMatchingContext context);
    public sealed virtual override IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual override IEnumerable`1<string> get_Words();
    public sealed virtual override string get_PlaceholderName();
    public sealed virtual override IElementMatcher CreatePlaceholderMatcher(ITreeNode element);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Placeholders.ExpressionPlaceholder : PlaceholderBase {
    public static string TAG_NAME;
    private static string EXPRESSION_TYPE_ATTRIBUTE;
    private static string EXACT_TYPE_ATTRIBUTE;
    private string myExpressionType;
    private bool myExactType;
    private static String[] ourReplacingText;
    public string ExpressionType { get; public set; }
    public bool ExactType { get; public set; }
    public string Description { get; }
    public String[] ReplacingText { get; }
    private static ExpressionPlaceholder();
    public ExpressionPlaceholder(string name);
    public ExpressionPlaceholder(string name, string exprType);
    public ExpressionPlaceholder(string name, string exprType, bool exact);
    public ExpressionPlaceholder(PlaceholderInfo placeholderInfo);
    public string get_ExpressionType();
    public void set_ExpressionType(string Value);
    public bool get_ExactType();
    public void set_ExactType(bool Value);
    public virtual string get_Description();
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
    public virtual String[] get_ReplacingText();
    public virtual IPlaceholder Clone();
    public virtual PlaceholderInfo ToPlaceholderInfo();
    public bool Equals(ExpressionPlaceholder other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Placeholders.ExpressionPlaceholderMatcher : PlaceholderMatcherBase {
    private PatternMatcherBuilderParams myParams;
    private ExpressionPlaceholderTypeMatcher myTypeMatcher;
    public ExpressionPlaceholderMatcher(ExpressionPlaceholder placeholder, StructuralSearchPatternParams params);
    public virtual IElementMatcher CreatePlaceholderMatcher(ITreeNode element);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Placeholders.ExpressionPlaceholderTypeMatcher : PlaceholderTypeMatcherBase {
    public ExpressionPlaceholderTypeMatcher(ExpressionPlaceholder placeholder);
    public virtual IType GetElementType(ITreeNode element);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Placeholders.IdentifierPlaceholder : PlaceholderBase {
    private string myType;
    private bool myExactType;
    private Regex myNameRegex;
    private static String[] ourReplacingText;
    public static string TAG_NAME;
    private static string REGEX_ATTRIBUTE;
    private static string CASE_SENSITIVE_ATTRIBUTE;
    private static string TYPE_ATTRIBUTE;
    private static string EXACT_TYPE_ATTRIBUTE;
    public bool ExactType { get; public set; }
    public string Type { get; public set; }
    public Regex NameRegex { get; public set; }
    public string NameRegexText { get; public set; }
    public bool NameRegexIsCaseSensitive { get; public set; }
    public string Description { get; }
    public String[] ReplacingText { get; }
    private static IdentifierPlaceholder();
    public IdentifierPlaceholder(string name);
    public IdentifierPlaceholder(string name, string nameRegex, bool nameRegexCaseSensitive);
    public IdentifierPlaceholder(string name, string nameRegex, bool nameRegexCaseSensitive, string type, bool exactType);
    public IdentifierPlaceholder(PlaceholderInfo placeholderInfo);
    public bool get_ExactType();
    public void set_ExactType(bool Value);
    public string get_Type();
    public void set_Type(string Value);
    public Regex get_NameRegex();
    public void set_NameRegex(Regex Value);
    public string get_NameRegexText();
    public void set_NameRegexText(string Value);
    public bool get_NameRegexIsCaseSensitive();
    public void set_NameRegexIsCaseSensitive(bool Value);
    public virtual string get_Description();
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
    public virtual String[] get_ReplacingText();
    public virtual IPlaceholder Clone();
    public virtual PlaceholderInfo ToPlaceholderInfo();
    public bool Equals(IdentifierPlaceholder other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Placeholders.IdentifierPlaceholderMatcher : PlaceholderMatcherBase {
    private PatternMatcherBuilderParams myParams;
    private Regex myNameRegex;
    private IdentifierPlaceholderTypeMatcher myTypeMatcher;
    public IdentifierPlaceholderMatcher(IdentifierPlaceholder placeholder, StructuralSearchPatternParams params);
    public virtual IElementMatcher CreatePlaceholderMatcher(ITreeNode element);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
    private bool AdditionalCheck(ITreeNode element);
    private static string GetName(ITreeNode element);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Placeholders.IdentifierPlaceholderTypeMatcher : PlaceholderTypeMatcherBase {
    public IdentifierPlaceholderTypeMatcher(IdentifierPlaceholder placeholder);
    public virtual IType GetElementType(ITreeNode element);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Placeholders.MetaPlaceholder : object {
    private string myName;
    private static String[] ourReplacingText;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChangedEvent;
    public string Name { get; }
    public string Description { get; }
    public String[] ReplacingText { get; }
    public ICollection`1<string> Words { get; }
    private static MetaPlaceholder();
    public MetaPlaceholder(string name);
    public sealed virtual override PlaceholderInfo ToPlaceholderInfo();
    public sealed virtual override IPlaceholder ICloneable_Clone();
    public sealed virtual override object Clone();
    public sealed virtual override string get_Name();
    public sealed virtual override string get_Description();
    public sealed virtual override IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
    public sealed virtual override String[] get_ReplacingText();
    public sealed virtual override ICollection`1<string> get_Words();
    public bool Equals(MetaPlaceholder other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual override void add_PropertyChanged(PropertyChangedEventHandler obj);
    [CompilerGeneratedAttribute]
public sealed virtual override void remove_PropertyChanged(PropertyChangedEventHandler obj);
}
public abstract class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Placeholders.PlaceholderTypeMatcherBase : object {
    private string myPlaceholderName;
    private string myType;
    private bool myExactType;
    public string ShortName { get; }
    public string PlaceholderName { get; }
    public bool ExactType { get; }
    public PlaceholderTypeMatcherBase(string placeholderName, string type, bool exactType);
    public sealed virtual override bool MatchType(ITreeNode element, IMatchingContext context);
    public sealed virtual override bool MatchType(ITreeNode element, IType elementType, IMatchingContext context);
    public sealed virtual override string get_ShortName();
    public sealed virtual override string get_PlaceholderName();
    public abstract virtual override IType GetElementType(ITreeNode element);
    public sealed virtual override IType GetPlaceholderType(ITreeNode element);
    public sealed virtual override bool get_ExactType();
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Placeholders.StatementPlaceholder : SequencePlaceholderBase {
    private static String[] ourReplacingText;
    public static string TAG_NAME;
    public String[] ReplacingText { get; }
    protected string TagName { get; }
    protected string EntityName { get; }
    private static StatementPlaceholder();
    public StatementPlaceholder(string name, int minimalOccurrences, int maximalOccurrences);
    public StatementPlaceholder(string name);
    public StatementPlaceholder(PlaceholderInfo placeholderInfo);
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
    public virtual String[] get_ReplacingText();
    public virtual IPlaceholder Clone();
    protected virtual string get_TagName();
    protected virtual string get_EntityName();
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Placeholders.StatementPlaceholderMatcher : SequencePlaceholderMatcherBase {
    private PatternMatcherBuilderParams myParams;
    public StatementPlaceholderMatcher(ISequencePlaceholder placeholder, StructuralSearchPatternParams params);
    public virtual IElementMatcher CreatePlaceholderMatcher(ITreeNode element);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
    public virtual ISequenceMatcher`1<ITreeNode> CreatePlaceholderMatcher(ICollection`1<ITreeNode> enumerable);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Placeholders.TypePlaceholder : PlaceholderBase {
    private string myType;
    private bool myExactType;
    private static String[] ourReplacingText;
    public static string TAG_NAME;
    private static string NAME_ATTRIBUTE;
    private static string TYPE_ATTRIBUTE;
    private static string EXACT_TYPE_ATTRIBUTE;
    public string Description { get; }
    public bool ExactType { get; public set; }
    public string Type { get; public set; }
    public String[] ReplacingText { get; }
    private static TypePlaceholder();
    public TypePlaceholder(string name);
    public TypePlaceholder(string name, string type, bool exactType);
    public TypePlaceholder(PlaceholderInfo placeholderInfo);
    public ITypeMatcher GetTypeMatcher(Func`2<ITreeNode, IType> func);
    public ITypeMatcher GetDeclaredTypeMatcher(Func`2<ITreeNode, IDeclaredTypeUsage> func);
    public virtual string get_Description();
    public bool get_ExactType();
    public void set_ExactType(bool Value);
    public string get_Type();
    public void set_Type(string Value);
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
    public virtual String[] get_ReplacingText();
    public virtual IPlaceholder Clone();
    public virtual PlaceholderInfo ToPlaceholderInfo();
    public bool Equals(TypePlaceholder other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Placeholders.TypePlaceholderElementMatcher : object {
    private TypePlaceholder myPlaceholder;
    public IEnumerable`1<IElementMatcher> IElementMatcher_Children { get; }
    public IEnumerable`1<string> IElementMatcher_Words { get; }
    public string IPlaceholderMatcher_PlaceholderName { get; }
    public TypePlaceholderElementMatcher(TypePlaceholder placeholder);
    public sealed virtual override bool IElementMatcher_Match(ITreeNode element, IMatchingContext context);
    public sealed virtual override IEnumerable`1<IElementMatcher> get_IElementMatcher_Children();
    public sealed virtual override IEnumerable`1<string> get_IElementMatcher_Words();
    public sealed virtual override string get_IPlaceholderMatcher_PlaceholderName();
    public sealed virtual override IElementMatcher IPlaceholderMatcher_CreatePlaceholderMatcher(ITreeNode element);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.Placeholders.TypePlaceholderMatcher : PlaceholderTypeMatcherBase {
    private Func`2<ITreeNode, IType> myGetElementType;
    public TypePlaceholderMatcher(TypePlaceholder placeholder, Func`2<ITreeNode, IType> getElementType);
    public virtual IType GetElementType(ITreeNode element);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.QueryCollectionRangeVariableDeclarationMatcher : VBElementMatcher`1<IQueryCollectionRangeVariableDeclaration> {
    public QueryCollectionRangeVariableDeclarationMatcher(IQueryCollectionRangeVariableDeclaration declaration, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.QueryExpressionMatcher : VBElementMatcher`1<IQueryExpression> {
    public QueryExpressionMatcher(IQueryExpression expression, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.QueryParameterPlatformMatcher : VBElementMatcher`1<IQueryParameterPlatform> {
    public QueryParameterPlatformMatcher(IQueryParameterPlatform param, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.SelectQueryOperatorMatcher : VBElementMatcher`1<ISelectQueryOperator> {
    private static String[] ourWords;
    public IEnumerable`1<string> Words { get; }
    private static SelectQueryOperatorMatcher();
    public SelectQueryOperatorMatcher(ISelectQueryOperator queryOperator, PatternMatcherBuilderParams params);
    public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.TupleComponentMatcher : VBElementMatcher`1<ITupleComponent> {
    public TupleComponentMatcher(ITupleComponent tupleComponent, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.TupleExpressionMatcher : VBElementMatcher`1<ITupleExpression> {
    public TupleExpressionMatcher(ITupleExpression tupleExpression, PatternMatcherBuilderParams params);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.VBCommentPatternLexer : PatternLexer {
    protected LanguageService LanguageService { get; }
    protected bool MetaPlaceholderSupported { get; }
    protected virtual LanguageService get_LanguageService();
    protected virtual bool get_MetaPlaceholderSupported();
    protected virtual IMetaPlaceholder GetMetaPlaceholder(string name);
    public ReplacePatternLexerResult ParsePattern(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.VBDeclaredTypeMatcher`1 : TypeMatcherBase`1<T> {
    private string myTypeName;
    private Func`2<T, IDeclaredTypeUsage> myGetElementType;
    private bool myHasPlaceholdersInside;
    protected string TypeName { get; }
    private VBDeclaredTypeMatcher`1(string typeName, Func`2<T, IDeclaredTypeUsage> declaredTypeUsage, bool hasPlaceholdersInside);
    protected virtual string get_TypeName();
    protected virtual IType GetOriginalType(ITreeNode context);
    protected virtual IType GetElementType(T element);
    protected virtual bool MatchType(ITreeNode element, IType type, IType elementType, IMatchingContext context);
    protected virtual bool CheckSubstitution(ISubstitution subst, ITypeElement elDeclaredTypeElement, ITreeNode element, IMatchingContext context);
    public static ITypeMatcher Build(IDeclaredTypeUsage typeUsageNode, Func`2<T, IDeclaredTypeUsage> func, PatternMatcherBuilderParams params);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.VBElementMatcherBuilder : TreeNodeVisitor`2<PatternMatcherBuilderParams, IElementMatcher> {
    public IElementMatcher Build(IVBTreeNode element, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitNode(ITreeNode node, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitAddHandlerStatement(IAddHandlerStatement addHandlerStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitAssignmentStatement(IAssignmentStatement assignmentStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitBlockIfStatement(IBlockIfStatement blockIfStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitCaseStatement(ICaseStatement caseStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitCatchStatement(ICatchStatement catchStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitCatchVariableDeclaration(ICatchVariableDeclaration catchVariableDeclarationParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitContinueStatement(IContinueStatement continueStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitDoLoopStatement(IDoLoopStatement doLoopStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitElseIfStatement(IElseIfStatement elseIfStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitElseStatement(IElseStatement elseStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitEraseStatement(IEraseStatement eraseStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitErrorStatement(IErrorStatement errorStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitExitStatement(IExitStatement exitStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitEmptyArgument(IEmptyArgument emptyArgumentParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitFinallyStatement(IFinallyStatement finallyStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitForEachStatement(IForEachStatement forEachStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitForStatement(IForStatement forStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitGotoStatement(IGotoStatement gotoStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitInvocationStatement(IInvocationStatement invocationStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitLabelStatement(ILabelStatement labelStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitLabelName(ILabelName labelNameParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitLabelDeclaration(ILabelDeclaration labelDeclarationParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitLambdaParameterDeclaration(ILambdaParameterDeclaration lambdaParameterDeclarationParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitLineIfStatement(ILineIfStatement lineIfStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitLocalDeclarationStatement(ILocalDeclarationStatement localDeclarationStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitLocalDeclarationList(ILocalDeclarationList localDeclarationListParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitLocalVariableDeclaration(ILocalVariableDeclaration localVariableDeclarationParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitRaiseEventStatement(IRaiseEventStatement raiseEventStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitRedimStatement(IRedimStatement redimStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitRedimClause(IRedimClause redimClauseParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitRemoveHandlerStatement(IRemoveHandlerStatement removeHandlerStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitResumeStatement(IResumeStatement resumeStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitReturnStatement(IReturnStatement returnStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitSelectStatement(ISelectStatement selectStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitStopStatement(IStopStatement stopStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitSyncLockStatement(ISyncLockStatement syncLockStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitThrowStatement(IThrowStatement throwStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTryStatement(ITryStatement tryStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitUsingStatement(IUsingStatement usingStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitWhileStatement(IWhileStatement whileStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitWhileUntilCondition(IWhileUntilCondition whileUntilConditionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitWithStatement(IWithStatement withStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitAdditiveExpression(IAdditiveExpression additiveExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitAddressOfExpression(IAddressOfExpression addressOfExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitAnonymousArrayCreationExpression(IAnonymousArrayCreationExpression anonymousArrayCreationExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitAnonymousObjectCreationExpression(IAnonymousObjectCreationExpression anonymousObjectCreationExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitArrayCreationExpression(IArrayCreationExpression arrayCreationExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitArrayModifiersList(IArrayModifiersList arrayModifiersListParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitArrayModifier(IArrayModifier arrayModifierParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitArrayBound(IArrayBound arrayBoundParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitCastExpression(ICastExpression castExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitConcatenationExpression(IConcatenationExpression concatenationExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitConditionalExpression(IConditionalExpression conditionalExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitDictionaryAccessExpression(IDictionaryAccessExpression dictionaryAccessExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitExponentiationExpression(IExponentiationExpression exponentiationExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitExpressionStatement(IExpressionStatement expressionStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitGetTypeExpression(IGetTypeExpression getTypeExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitIndexExpression(IIndexExpression indexExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitInstanceExpression(IInstanceExpression instanceExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitAwaitExpression(IAwaitExpression awaitExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitAwaitStatement(IAwaitStatement awaitStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitYieldStatement(IYieldStatement yieldStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitIntegerDivisionExpression(IIntegerDivisionExpression integerDivisionExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitIsExpression(IIsExpression isExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitIsNotExpression(IIsNotExpression isNotExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitLambdaFunctionExpression(ILambdaFunctionExpression lambdaFunctionExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitLambdaSubExpression(ILambdaSubExpression lambdaSubExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitLikeExpression(ILikeExpression likeExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitLogicalAndExpression(ILogicalAndExpression logicalAndExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitLogicalNotExpression(ILogicalNotExpression logicalNotExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitLogicalOrExpression(ILogicalOrExpression logicalOrExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitLogicalXorExpression(ILogicalXorExpression logicalXorExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitModulusExpression(IModulusExpression modulusExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitMultiplicativeExpression(IMultiplicativeExpression multiplicativeExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitObjectCreationExpression(IObjectCreationExpression objectCreationExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitAnonymousObjectInitializer(IAnonymousObjectInitializer anonymousObjectInitializerParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitObjectCreationInitializer(IObjectCreationInitializer objectCreationInitializerParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitOrderExpression(IOrderExpression orderExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitParenthesizedExpression(IParenthesizedExpression parenthesizedExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitQueryExpression(IQueryExpression queryExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitAggregateQueryOperator(IAggregateQueryOperator aggregateQueryOperatorParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitDistinctQueryOperator(IDistinctQueryOperator distinctQueryOperatorParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitGroupByQueryOperator(IGroupByQueryOperator groupByQueryOperatorParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitGroupJoinQueryOperator(IGroupJoinQueryOperator groupJoinQueryOperatorParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitIntoOfAggregateQueryOperator(IIntoOfAggregateQueryOperator intoOfAggregateQueryOperatorParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitJoinQueryOperator(IJoinQueryOperator joinQueryOperatorParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitLetQueryOperator(ILetQueryOperator letQueryOperatorParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitOrderByQueryOperator(IOrderByQueryOperator orderByQueryOperatorParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitPartitionQueryOperator(IPartitionQueryOperator partitionQueryOperatorParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitJoinCollectionRangeVariableDeclaration(IJoinCollectionRangeVariableDeclaration joinCollectionRangeVariableDeclarationParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitJoinCondition(IJoinCondition joinConditionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitQueryParameterPlatform(IQueryParameterPlatform queryParameterPlatformParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitSelectQueryOperator(ISelectQueryOperator selectQueryOperatorParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitWhereQueryOperator(IWhereQueryOperator whereQueryOperatorParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitAggregatedRangeVariableDeclaration(IAggregatedRangeVariableDeclaration aggregatedRangeVariableDeclarationParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitExpressionRangeVariableDeclaration(IExpressionRangeVariableDeclaration expressionRangeVariableDeclarationParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitQueryCollectionRangeVariableDeclaration(IQueryCollectionRangeVariableDeclaration queryCollectionRangeVariableDeclarationParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitReferenceExpression(IReferenceExpression referenceExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitRelationalExpression(IRelationalExpression relationalExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitShiftExpression(IShiftExpression shiftExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTypeOfIsExpression(ITypeOfIsExpression typeOfIsExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitUnaryNegationExpression(IUnaryNegationExpression unaryNegationExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitVBLiteralExpression(IVBLiteralExpression vBLiteralExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitVBXmlLiteralExpression(IVBXmlLiteralExpression vBXmlLiteralExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitVBXmlDocument(IVBXmlDocument vBXmlDocumentParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitVBXmlElement(IVBXmlElement vBXmlElementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitVBXmlElementHeader(IVBXmlElementHeader vBXmlElementHeaderParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitVBXmlElementFooter(IVBXmlElementFooter vBXmlElementFooterParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitVBXmlAttribute(IVBXmlAttribute vBXmlAttributeParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitVBXmlComment(IVBXmlComment vBXmlCommentParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitPositionalArgument(IPositionalArgument positionalArgumentParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitBlock(IBlock blockParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitNextClause(INextClause nextClauseParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitVBIdentifier(IVBIdentifier vBIdentifierParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitOnErrorSpecialLabel(IOnErrorSpecialLabel onErrorSpecialLabelParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitMemberInitializer(IMemberInitializer memberInitializerParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitAnonymousMemberDeclaration(IAnonymousMemberDeclaration anonymousMemberDeclarationParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitOnErrorStatement(IOnErrorStatement onErrorStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitEndStatement(IEndStatement endStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitNamedArgument(INamedArgument namedArgumentParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTupleExpression(ITupleExpression tupleExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTupleComponent(ITupleComponent tupleComponentParam, PatternMatcherBuilderParams context);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.VBExpressionStructuralMatcher : StructuralMatcher {
    public VBExpressionStructuralMatcher(IElementMatcher elementMatcher, StructuralSearchPatternParams params);
    public virtual IStructuralMatchResult Match(ITreeNode element, IMatchingContext context);
    public virtual IReadOnlyCollection`1<string> GetExtendedWords(ISolution solution);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.VBMatcherBuilder : object {
    [NotNullAttribute]
public static IElementMatcher Build(ITreeNode element, PatternMatcherBuilderParams params);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.VBNullableTypeMatcher`1 : object {
    private Func`2<T, IType> myGetElementType;
    private ITypeMatcher myElementTypeMatcher;
    public string ShortName { get; }
    public VBNullableTypeMatcher`1(ITypeUsage typeUsageNode, Func`2<T, IType> func, PatternMatcherBuilderParams params);
    public sealed virtual override bool MatchType(ITreeNode element, IMatchingContext context);
    public sealed virtual override bool MatchType(ITreeNode element, IType elementType, IMatchingContext context);
    public sealed virtual override string get_ShortName();
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.VBPatternLexer : PatternLexer {
    protected LanguageService LanguageService { get; }
    protected bool MetaPlaceholderSupported { get; }
    protected virtual LanguageService get_LanguageService();
    protected virtual bool get_MetaPlaceholderSupported();
    protected virtual IMetaPlaceholder GetMetaPlaceholder(string name);
    protected virtual IUnknownPlaceholder CreateUnknownPlaceholder(string name);
    protected virtual bool IsErrorElementBeforeOffset(IErrorElement errorElement, TreeOffset offset);
    public virtual IPatternLexerResult TryParsePattern(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params, Func`2<IParser, ITreeNode> createElement, int realShift, bool createUnknownPlaceholders, bool deleteUnusedPlaceholders);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.VBPlaceholderGuesser : object {
    public sealed virtual override IPlaceholder Guess(ITreeNode node, string name);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.VBReplacePatternLexer : ReplacePatternLexer {
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.VBSequenceMatcher`1 : SequenceMatcher`1<T> {
    public VBSequenceMatcher`1(IEnumerable`1<T> elements, PatternMatcherBuilderParams params);
    public VBSequenceMatcher`1(ITreeNode element, Func`2<ITreeNode, IEnumerable`1<T>> elementsGetter, PatternMatcherBuilderParams params);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.VBStatementSequenceMatcher : VBSequenceMatcher`1<IVBStatement> {
    public VBStatementSequenceMatcher(IBlock block, PatternMatcherBuilderParams params);
}
[StructuralSearcherFactoryAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.VBStructuralSearcherFactory : object {
    private VBStructuralSearchPatternFromCodeCreator myPatternFromCodeCreator;
    public bool IsInternal { get; }
    public bool SupportsIgnoreUnmatched { get; }
    public bool SupportsShortenReferences { get; }
    public VBStructuralSearcherFactory(VBStructuralSearchPatternFromCodeCreator patternFromCodeCreator);
    public sealed virtual override bool get_IsInternal();
    public sealed virtual override bool get_SupportsIgnoreUnmatched();
    public sealed virtual override bool get_SupportsShortenReferences();
    public sealed virtual override IStructuralSearchPattern CreatePattern();
    public sealed virtual override IStructuralSearchPattern CreatePattern(string pattern, IPlaceholder[] placeholders);
    public sealed virtual override IStructuralSearchPattern CreatePattern(ISolution solution, DocumentRange selection);
    public sealed virtual override void Replace(IStructuralSearchPattern pattern, IStructuralMatchResult result);
    public sealed virtual override void Replace(IEnumerable`1<IStructuralMatchResult> targets, IStructuralSearchPattern pattern);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.VBStructuralSearchPattern : object {
    private static IStructuralSearchPatternBuilder[] ourPatternBuilders;
    private static IStructuralSearchPatternBuilder[] ourGuessBuilders;
    private string myPattern;
    private string myReplacePattern;
    private string myReplaceComment;
    private string myComment;
    private IDictionary`2<string, IPlaceholder> myPlaceholders;
    private StructuralSearchPatternParams myParams;
    private VBStructuralSearchPatternPresenter myPresenter;
    private bool myFormatAfterReplace;
    private bool myShortenReferences;
    private static StructuralSearchPatternValidator ourStructuralSearchPatternValidator;
    [CompilerGeneratedAttribute]
private string _SuppressionKey;
    public string SearchPattern { get; public set; }
    public StructuralSearchPatternParams Params { get; public set; }
    public IDictionary`2<string, IPlaceholder> Placeholders { get; public set; }
    public string SuppressionKey { get; public set; }
    public string Comment { get; public set; }
    public PsiLanguageType Language { get; }
    public string ReplacePattern { get; public set; }
    public string ReplaceComment { get; public set; }
    public bool FormatAfterReplace { get; public set; }
    public bool ShortenReferences { get; public set; }
    public IStructuralSearchPatternPresenter Presenter { get; }
    private static VBStructuralSearchPattern();
    public VBStructuralSearchPattern(string pattern);
    public VBStructuralSearchPattern(string pattern, IPlaceholder[] placeholders1);
    public VBStructuralSearchPattern(string pattern, StructuralSearchPatternParams params, IEnumerable`1<IPlaceholder> placeholders1);
    public sealed virtual override string get_SearchPattern();
    public sealed virtual override void set_SearchPattern(string Value);
    public sealed virtual override StructuralSearchPatternParams get_Params();
    public sealed virtual override void set_Params(StructuralSearchPatternParams Value);
    public sealed virtual override IDictionary`2<string, IPlaceholder> get_Placeholders();
    public sealed virtual override void set_Placeholders(IDictionary`2<string, IPlaceholder> Value);
    public sealed virtual override void ReadPlaceholders(IEnumerable`1<PlaceholderInfo> placeholderInfos);
    [CompilerGeneratedAttribute]
public sealed virtual override string get_SuppressionKey();
    [CompilerGeneratedAttribute]
public sealed virtual override void set_SuppressionKey(string AutoPropertyValue);
    public sealed virtual override string get_Comment();
    public sealed virtual override void set_Comment(string Value);
    public sealed virtual override IStructuralSearchPattern AddPatternPlaceholder(string name, string pattern, bool isShared);
    public sealed virtual override IStructuralSearchPattern AddOrPatternPlaceholder(string name, bool isShared, String[] patterns);
    public sealed virtual override IStructuralMatcher CreateMatcher();
    public sealed virtual override IStructuralMatcher CreateMatcher(IStructuralSearchPatternBuilder builder);
    public sealed virtual override PsiLanguageType get_Language();
    public sealed virtual override IStructuralSearchPattern ICloneable_Clone();
    public sealed virtual override object Clone();
    public sealed virtual override string get_ReplacePattern();
    public sealed virtual override void set_ReplacePattern(string Value);
    public sealed virtual override string get_ReplaceComment();
    public sealed virtual override void set_ReplaceComment(string Value);
    public sealed virtual override bool get_FormatAfterReplace();
    public sealed virtual override void set_FormatAfterReplace(bool Value);
    public sealed virtual override bool get_ShortenReferences();
    public sealed virtual override void set_ShortenReferences(bool Value);
    public sealed virtual override IStructuralSearchPatternPresenter get_Presenter();
    public sealed virtual override IStructuralSearchPatternValidator GetValidator();
    public sealed virtual override bool GuessPlaceholders();
    public bool Equals(VBStructuralSearchPattern other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.VBStructuralSearchPatternFromCodeCreator : object {
    public sealed virtual override IStructuralSearchPattern CreatePattern(ISolution solution, DocumentRange selection);
    private void AppendTypePlaceholder(StringBuilder patternText, Dictionary`2<string, IPlaceholder> placeholders, IReferenceName node);
    private void AppendIdentifierPlaceholder(StringBuilder patternText, Dictionary`2<string, IPlaceholder> placeholders, string name);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.VBStructuralSearchPatternPresenter : StructuralSearchPatternPresenterBase {
    public VBStructuralSearchPatternPresenter(IStructuralSearchPattern pattern);
    protected virtual string GetListReplacement(IEnumerable enumerable);
    protected virtual ReplacePatternLexerResult ParsePattern(string text, IDictionary`2<string, IPlaceholder> placeholders);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.VBStructuralSearchReplacer : object {
    public static void Replace(IStructuralMatchResult result, string replacePattern, IDictionary`2<string, IPlaceholder> placeholders, bool formatAfterReplace, bool shortenReferences);
    private static ITreeNode DoReplace(ITreeNode elementToReplace, string replacePattern, IDictionary`2<string, IPlaceholder> placeholders, Func`2<string, object> getMatchedElement, IEnumerable`1<ITreeNode> elementsToRemove, bool formatAfterReplace, bool shortenReferences);
    private static string PrepareReplaceText(ISolution solution, string replacePattern, IDictionary`2<string, IPlaceholder> placeholders, List`1& replacements, Func`2<string, object> getMatchedElement);
    private static void RemoveElementsAfterFirst(IEnumerable`1<ITreeNode> elements);
    private static void ShortenReferences(ITreeNode result, int startOffset, int endOffset);
    public static void Replace(IEnumerable`1<IStructuralMatchResult> structuralMatchResults, string replacePattern, IDictionary`2<string, IPlaceholder> placeholders, bool formatAfterReplace, bool shortenReferences);
}
public class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.VBTypeMatcher`1 : TypeMatcherBase`1<T> {
    private string myTypeName;
    private Func`2<T, IType> myGetElementType;
    protected string TypeName { get; }
    private VBTypeMatcher`1(string typeName, Func`2<T, IType> getElementType, List`1<ITypeMatcher> typeArgumentMatchers);
    public static ITypeMatcher Build(ITypeUsage typeUsageNode, Func`2<T, IType> getElementType, PatternMatcherBuilderParams params);
    public static ITypeMatcher Build(IDeclaredTypeUsage typeUsageNode, Func`2<T, IType> func, PatternMatcherBuilderParams params);
    protected virtual string get_TypeName();
    protected virtual IType GetOriginalType(ITreeNode context);
    protected virtual IType GetElementType(T element);
    protected virtual bool CheckEmptySubstitution(ISubstitution substitution);
}
internal class JetBrains.ReSharper.Feature.Services.VB.StructuralSearch.WhereQueryOperatorMatcher : VBElementMatcher`1<IWhereQueryOperator> {
    public WhereQueryOperatorMatcher(IWhereQueryOperator queryOperator, PatternMatcherBuilderParams params);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.TodoItems.VBTodoContentsProvider : DefaultTodoContentsProvider {
    public virtual Nullable`1<TextRange> GetTokenContentsRange(string documentText, TextRange tokenRange, TokenNodeType tokenType);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.TypeSuggestion.VBExpressionTypeSuggestionService : ExpressionTypeSuggestionService {
    public virtual ImplicitTypingOption SuggestImplicitTypingOption(ITreeNode initializerNode);
    public virtual bool IsTargetTyped(ITreeNode initializerNode);
    public virtual IList`1<IType> SuggestPossibleTypes(ITreeNode initializerNode, IReadOnlyList`1<IExpression> expressions, ConstnessOption& constKind);
}
public class JetBrains.ReSharper.Feature.Services.VB.TypingAssist.TypingAssistContext : object {
    public int TypedPosition;
    public TokenNodeType TokenType;
}
public class JetBrains.ReSharper.Feature.Services.VB.TypingAssist.VBBracketMatcher : BracketMatcher {
}
[SolutionComponentAttribute("2")]
public class JetBrains.ReSharper.Feature.Services.VB.TypingAssist.VBTypingAssist : VBTypingAssistBase {
    public VBTypingAssist(Lifetime lifetime, TypingAssistDependencies dependencies);
    protected virtual bool IsSupported(ITextControl textControl);
}
public abstract class JetBrains.ReSharper.Feature.Services.VB.TypingAssist.VBTypingAssistBase : TypingAssistLanguageBase`1<VBLanguage> {
    private Lifetime myLifetime;
    [NotNullAttribute]
private ITypingAssistManager myTypingAssistManager;
    private static NodeTypeSet NestedClassMemberTokenSet;
    private static VBTypingAssistBase();
    protected VBTypingAssistBase(Lifetime lifetime, TypingAssistDependencies dependencies);
    public sealed virtual override void InitOnPrimaryThread();
    protected virtual IndentTypingHelper`1<VBLanguage> GetIndentTypingHelper();
    private bool HandleEnterPressed(IActionContext actionContext);
    private ITreeNode GetTokenAfterCaret(IFile file, TreeOffset currentTreeOffset);
    private bool DoHandleEnterAfterOpenConstruct(ITextControl textControl);
    private Template CreateTemplateForAccessorOwner(IAccessorOwnerDeclaration accOwnerDecl, IAccessorDeclaration accessor, string newLine);
    private void InsertEndConstruct(ITextControl textControl, IFile file, TreeOffset currentTreeOffset, string endConstruct, string newLine, string textToInsert);
    private string GetTextToInsert(IBlock block);
    private bool FindNestedClassMember(ITokenNode token);
    private bool IsTokenSuitableForCloseBracket(TokenNodeType tokenType, CachingLexer lexer);
    private bool HandleLeftParenthTyped(ITypingContext typingContext);
    private bool HandleRightParenthTyped(ITypingContext typingContext);
    private bool NeedSkipCloseBracket(CachingLexer lexer, char charTyped);
    private bool HandleBackspacePressed(IActionContext actionContext);
    private bool DoHandleBackspacePressed(ITextControl textControl);
    private bool HandleDelPressed(IActionContext actionContext);
    private bool DoHandleDelPressed(ITextControl textControl);
    public bool HandleQuoteTyped(ITypingContext typingContext);
    public virtual override bool QuickCheckAvailability(ITextControl textControl, IPsiSourceFile projectFile);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.Options.TypingAssistSettings", "JetBrains.ReSharper.Feature.Services.VB.Resources.LocalizedStrings", "VBTypingAssistanceSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.VB.TypingAssist.VBTypingAssistSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.VB.Resources.LocalizedStrings", "InsertEndConstructsEndSubEndIfNextEtcOnEnterSettingDescription")]
public bool InsertEndConstructsOnEnter;
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.VB.TypingAssist.ZoneMarker : object {
}
public class JetBrains.ReSharper.Feature.Services.VB.Util.ParamArgumentsUtil : object {
    public static IArrayCreationExpression WrapParamsToArray(IVBArgumentsOwner argumentsOwner);
    private static bool IsExpanded(IVBArgumentInfo argumentInfo, IParametersOwner parametersOwner, ISubstitution substitution);
    private static Nullable`1<bool> IsExpanded(IVBArgumentInfo argumentInfo, IList`1<IParameter> parameters, ISubstitution substitution);
    public static void TryExpandArrayToParams(IVBArgumentsOwner argumentsOwner);
    private static void ReplaceCollectionArgumentWithExpandedValues(DisposableMarker`1<IVBArgument> collectionArgumentMarker, IVBArgumentsOwner argumentsOwner, LocalList`1<IVBExpression> expandedValues, VBElementFactory factory);
}
[StandardModuleAttribute]
public class JetBrains.ReSharper.Feature.Services.VB.Util.PsiUtil : object {
    public static IEnumerable`1<IControlFlowEdge> GetExits(IVBControlFlowElement element);
    public static ILoopStatement FindLoop(IContinueStatement continueStatement);
    public static IVBExpression InvertCondition(IVBExpression expression, bool applyCodeFormatter);
    private static IVBExpression InvertWithoutCopy(IVBExpression expression, VBElementFactory factory);
    public static IType CalculateCommonReturnType(IVBTreeNode node);
    public static IVBTreeNode GetExpressionDependencyRoot(IVBTreeNode node);
    public static IVBTreeNode GetStatementDependencyRoot(IVBTreeNode node);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Util.VBAddAccessorIntention : object {
    public sealed virtual override IBulbActionCommand AddAccessor(ITypeMember accessorOwner, AccessorKind accessorKind);
}
public abstract class JetBrains.ReSharper.Feature.Services.VB.Util.VBAutoPropertyUtil : object {
    public static ConversionKind CanConvert(IPropertyDeclaration declaration, IField& backingField, bool relaxedRules, Func`2<IField, IEnumerable`1<ITreeNode>> findUsages);
    private static ConversionKind CheckBackingFieldUsages(IPropertyDeclaration declaration, IEnumerable`1<ITreeNode> fieldUsages, IProperty prop, IAccessor setter, ConversionKind kind);
    private static bool CheckBackingField(IProperty prop, IField backingField, bool relaxedRules);
    private static bool CheckBackingFieldAccessRights(IField backingField);
    [CanBeNullAttribute]
public static IConstructor FindConstructor(ITreeNode element);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Util.VBBaseClassUtil : object {
    public sealed virtual override IEnumerable`1<IReference> GetBaseDeclarationsReferences(ITypeDeclaration declaration);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Util.VbPassFormatStringHelper : PassFormatStringHelperBase {
    public virtual IMethod GetNonFormattingMethod(FormattingFunctionInvocationInfo invocationInfo, ISolution solution, bool withoutCustomFormatProvider, bool allowInterpolatedStringHandlerOnly);
    public virtual bool IsResolvedWithNewMethod(FormattingFunctionInvocationInfo invocationInfo, IMethod suggestedMethod, IReadOnlyList`1<IArgument> removingArguments, bool allowInterpolatedStringHandlerOnly);
    protected virtual void RemoveArgument(IArgument argument);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Util.VBPropertyBodyHelper : object {
    public sealed virtual override IField GetBackingField(IProperty property, bool checkSetter, bool allowSetterOnly);
    [CanBeNullAttribute]
public static IField FindBackingFieldReturn(IAccessor getter);
    [CanBeNullAttribute]
public static IField FindBackingFieldAssignment(IAccessor setter);
    [CanBeNullAttribute]
private static IField ToThisClassField(IVBExpression expression);
}
public class JetBrains.ReSharper.Feature.Services.VB.Util.VbStringInterpolationBuilder : object {
    [NotNullAttribute]
private StringBuilder myTemplate;
    [NotNullAttribute]
private List`1<IVBExpression> myArguments;
    private bool myIsFinalized;
    public bool IsFinalized { get; }
    public sealed virtual override bool get_IsFinalized();
    public sealed virtual override bool TryInitializeVerbatimity(StringVerbatimity verbatimity, ITreeNode context);
    public sealed virtual override void InitializeVerbatimityFrom(IExpression literalOwner);
    public sealed virtual override void AppendLiteral(ITokenNode literal);
    public sealed virtual override void AppendLiteralPart(IExpression formatLiteral, DocumentRange range);
    public sealed virtual override void AppendLiteralText(string text);
    public sealed virtual override void AppendTextNoEscaping(string text);
    public sealed virtual override void BeginArgument();
    public sealed virtual override void EndArgument(IExpression argument);
    public sealed virtual override IExpression CreateExpression(ITreeNode context, bool forceInterpolation, bool produceEmptyLiterals);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Util.VbStringInterpolationHelper : object {
    public sealed virtual override bool CanUseInterpolation(ITreeNode context);
    public sealed virtual override bool CanUseInterpolatedStringHandlers(ITreeNode context);
    public sealed virtual override bool CanReplaceWithInterpolationExpression(IExpression expression);
    public sealed virtual override DocumentRange GetInvocationRange(IArgumentsOwner argumentsOwner);
    public sealed virtual override IStringInterpolationBuilder CreateBuilder();
    public sealed virtual override IExpression ReplaceWithConcatenation(IExpression toReplace, IReadOnlyList`1<IExpression> interpolations);
    public sealed virtual override IExpression UnwrapFromInvocation(IExpression expression);
    public sealed virtual override StringVerbatimity GetStringVerbatimity(IExpression expression);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.Util.VBTypeValidator : object {
    public sealed virtual override bool IsValidExpression(string expr);
    public sealed virtual override bool IsValidName(string name);
    public sealed virtual override bool IsValidReturnType(string type);
    public sealed virtual override bool IsValidParameterType(string type);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.VBAnnotationsBuilder : object {
    public string Start { get; }
    public string End { get; }
    public sealed virtual override string get_Start();
    public sealed virtual override string get_End();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.VbAnonymousObjectsAnalyser : object {
    public sealed virtual override bool IsCreationExpression(ITreeNode element);
    public sealed virtual override IEnumerable`1<Pair`2<string, IManagedExpression>> GetMemberInitializers(ITreeNode element);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.VB.VBClrLanguage : object {
    public PsiLanguageType Language { get; }
    public sealed virtual override PsiLanguageType get_Language();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.VBDefaultValueCreation : DefaultValueCreator {
    protected virtual IExpression CreateNull(ITreeNode context);
    protected virtual IExpression CreateConstantValue(ConstantValue value, ITreeNode context);
    protected virtual IExpression CreateDefaultConstructorCall(IType valueType, ITreeNode context, bool allowOmitTypeSpecification);
    public virtual IExpression CreateArrayConstructorCall(IType type, ITreeNode context);
    protected virtual IExpression CreateTypeDefaultExpression(IType type, ITreeNode context, bool allowOmitTypeSpecification);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.VBFormatInvocationArgumentHelper : FormatInvocationArgumentHelperBase {
    protected virtual IExpression TryGetQualifierExpression(IArgumentsOwner argumentsOwner);
    protected virtual TreeTextRange GetToStringRange(IExpression expression);
    protected virtual bool CanBecomeStringLiteral(IExpression expression);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.VBHtmlAttributesPresenter : HtmlAttributesPresenterBase {
    private IHtmlTypePresenter myTypePresenter;
    public VBHtmlAttributesPresenter(PsiLanguageType language, IHtmlTypePresenter typePresenter, IHtmlEnumPresenter enumPresenter);
    protected virtual IList`1<IAttributeInstance> GetAttributes(IAttributesSet attributesOwner);
    protected virtual string GetNew();
    protected virtual string GetTypeOf();
    protected virtual string GetNull();
    protected virtual string GetAttributePropertyAssignChar();
    protected virtual string GetAttributeOpenChar();
    protected virtual string GetAttributeCloseChar();
    protected virtual IHtmlTypePresenter GetTypePresenter();
    protected virtual string GetNewLine();
    protected virtual string GetArrayBrackets();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.VBHtmlEnumPresenter : HtmlEnumPresenterBase {
    public VBHtmlEnumPresenter(PsiLanguageType language);
    protected virtual string TryGetXmlDocId(ITreeNode child);
    protected virtual ITreeNode ExtractTreeNode(IField element);
    protected virtual RichText PresentEnum(ConstantValue constantValue, bool isFieldDeclaration, TypePresentationStyle typePresentationStyle);
    protected virtual TextStyle SelectTextStyle(ITreeNode node, DeclaredElementPresenterTextStyles styles);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.VBHtmlTypePresenter : object {
    private PsiLanguageType myLanguage;
    public VBHtmlTypePresenter(PsiLanguageType language);
    public sealed virtual override void PresentName(RichText builder, IType type, TypePresentationStyle typePresentationStyle, ElementLinkCollector linkCollector);
    private RichText CreateTypeLink(ITypeElement element);
    private void BuildPresentableName(IType type, RichText builder);
    private void BuildPointerTypeString(IPointerType pointerType, RichText builder);
    private void BuildArrayTypeString(IArrayType arrayType, RichText builder);
    private void BuildDeclaredTypePresentableName(IDeclaredType declaredType, RichText builder);
    private string ShortName(string name);
    private void BuildTypeArgumentList(ITypeElement element, ISubstitution substitution, RichText builder);
}
public class JetBrains.ReSharper.Feature.Services.VB.VBIndexExpressionPartSelection : SelectedRangeBase`1<IVBFile> {
    private IIndexExpression myIndexExpression;
    private IReferenceExpression myReferenceExpression;
    private ITreeNode myFirst;
    private ITreeNode myLast;
    public TreeTextRange TreeRange { get; }
    public ExtendToTheWholeLinePolicy ExtendToWholeLine { get; }
    public ISelectedRange Parent { get; }
    public VBIndexExpressionPartSelection(IVBFile fileNode, ITreeNode first, ITreeNode last, IIndexExpression indexExpression, IReferenceExpression referenceExpression);
    public sealed virtual override TreeTextRange get_TreeRange();
    public virtual ExtendToTheWholeLinePolicy get_ExtendToWholeLine();
    public virtual ISelectedRange get_Parent();
    public static VBIndexExpressionPartSelection TryCreate(IVBFile fileNode, ITreeNode first, ITreeNode last);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.VBLanguageReferenceSelector : object {
    public sealed virtual override IConstructor GetBaseConstructor(IConstructor constructor);
    public sealed virtual override IDeclaredElement TryGetNavigatableCorrespondingElementForImplicitElement(IDeclaredElement declaredElement);
    public sealed virtual override IEnumerable`1<DeclaredElementInstance> GetCandidates(IReference reference, IDataContext dataContext, ReferencePreferenceKind preferenceKind);
    public sealed virtual override IEnumerable`1<DeclaredElementInstance> GetDeclaredElementsCandidates(DeclaredElementInstance instance, IDataContext dataContext, ReferencePreferenceKind preferenceKind);
    private IList`1<DeclaredElementInstance> GetFromAttribute(IAttribute attribute, ReferencePreferenceKind kind);
    private IList`1<DeclaredElementInstance> GetFromObjectCreation(IObjectCreationExpression expression, ReferencePreferenceKind kind);
    private IList`1<DeclaredElementInstance> CalculateCandidates(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.VB.VBLiteralService : LiteralService {
    public virtual bool IsStringLiteral(ITreeNode element);
    public virtual bool IsConstantLiteral(ITreeNode element);
    public virtual TreeTextRange GetValueTextRange(ITreeNode element);
    public virtual string ParseStringLiteral(string literalText, RangeTranslator& translator);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.VBLocalSymbolsServiceProvider : LocalSymbolsServiceProviderBase`2<IBlock, IVBStatement> {
    protected virtual ISymbolTable FilterVisibleVariables(ISymbolTable table, IAccessContext context, ITreeNode element);
    protected virtual List`1<TypedAndNamedEntity> GetAdditionalEntries(ITreeNode element);
}
[ParameterInfoContextFactoryAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.VBObjectInitializerContextFactory : object {
    private static Char[] POPUP_CHARS;
    private static Char[] IMPORTANT_CHARS;
    public PsiLanguageType Language { get; }
    public IEnumerable`1<char> ImportantChars { get; }
    private static VBObjectInitializerContextFactory();
    public sealed virtual override PsiLanguageType get_Language();
    public sealed virtual override bool ShouldPopup(DocumentOffset caretOffset, char c, ISolution solution, IContextBoundSettingsStore settingsStore);
    public sealed virtual override IEnumerable`1<char> get_ImportantChars();
    public sealed virtual override bool IsIntellisenseEnabled(ISolution solution, IContextBoundSettingsStore settingsStore);
    public sealed virtual override IParameterInfoContext CreateContext(ISolution solution, DocumentOffset caretOffset, DocumentOffset expectedLParenthOffset, char invocationChar, IContextBoundSettingsStore settingsStore);
}
internal class JetBrains.ReSharper.Feature.Services.VB.VBParameterInfoCandidate : ParameterInfoCandidate {
    public VBParameterInfoCandidate(ISolution solution, InvocationCandidate invocationCandidate, int i);
    protected virtual TextRange GetThisKeywordRange(TextRange parameterRange, RichText richText);
    protected virtual bool PresentReturnType(IParametersOwner parametersOwner);
}
[ParameterInfoContextFactoryAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.VBParameterInfoContextFactory : object {
    private static Char[] IMPORTANT_CHARS;
    private static Char[] POPUP_CHARS;
    public IEnumerable`1<char> ImportantChars { get; }
    public PsiLanguageType Language { get; }
    private static VBParameterInfoContextFactory();
    public sealed virtual override bool IsIntellisenseEnabled(ISolution solution, IContextBoundSettingsStore settingsStore);
    public sealed virtual override IParameterInfoContext CreateContext(ISolution solution, DocumentOffset caretOffset, DocumentOffset expectedLParenthOffset, char invocationChar, IContextBoundSettingsStore settingsStore);
    public sealed virtual override IEnumerable`1<char> get_ImportantChars();
    public sealed virtual override bool ShouldPopup(DocumentOffset caretOffset, char c, ISolution solution, IContextBoundSettingsStore settingsStore);
    private ParameterInfoContextBase CreateContext(ISolution solution, IVBInvocationInfo invocationInfo, IReference reference, DocumentRange txtRange, int iParam, ICandidateFactory candidateFactory);
    public sealed virtual override PsiLanguageType get_Language();
}
[StandardModuleAttribute]
public class JetBrains.ReSharper.Feature.Services.VB.VBParameterInfoUtil : object {
    public static TreeTextRange GetTreeTextRange(ITreeNode list, ITokenNode lPar, ITokenNode rPar);
    public static int GetParameterPosition(IList`1<ITokenNode> commaList, TreeOffset caretPos);
    public static void FillNamedArguments(IParameterInfoContext context, IArgumentList argList);
}
public class JetBrains.ReSharper.Feature.Services.VB.VBReparseContextEx : ReparseContextBase {
    private LanguageService myService;
    private ContextType myContextType;
    public ContextType Type { get; }
    private int HeadLength { get; }
    private VBReparseContextEx(ITreeNode origin, ContextType contextType, string contextHead, string contextTail);
    public ContextType get_Type();
    public virtual ReparseResult GetReparseResult(string newText);
    private int get_HeadLength();
    [NotNullAttribute]
public ITreeNode Parse(string insertedText);
    [CanBeNullAttribute]
public static VBReparseContextEx FindContext(IFile file, TreeTextRange range);
    private static IEnumerable`1<ITreeNode> GetChildren(ITreeNode node);
    private static void CollapseNodeText(ITreeNode node, TreeTextRange selRange, StringBuilder sbCur, StringBuilder sbTail);
}
public class JetBrains.ReSharper.Feature.Services.VB.VBReparseContextKeywords : ReparseContextShortBase {
    private IVBParser myParser;
    private ContextType myContextType;
    public ContextType Type { get; }
    private VBReparseContextKeywords(ITreeNode parent, ITreeNode child, ContextType contextType);
    private VBReparseContextKeywords(string text, IPsiModule psiModule, ContextType contextType);
    private VBReparseContextKeywords(ITreeNode parent, ITreeNode child1, ITreeNode child2, ContextType contextType);
    private VBReparseContextKeywords(string addText, ITreeNode child1, ITreeNode child2, ContextType contextType);
    public ContextType get_Type();
    private void Prepare(IPsiModule psiModule);
    public ITreeNode Parse(string addedText);
    [CanBeNullAttribute]
public static VBReparseContextKeywords FindContext(ITreeNode origin);
    private static bool BlockBelongsToControlStatement(IBlock block);
    private static bool IncludeStatementInContext(ITreeNode node);
    private static bool IsTypeMemberDeclarationNode(ITreeNode node);
}
public class JetBrains.ReSharper.Feature.Services.VB.VBStringLiteralParser : object {
    [LocalizableAttribute("False")]
public static string Parse(string literalText, RangeTranslator& translator);
    private static string ParseLiteral(string text, RangeTranslator& translator);
}
public class JetBrains.ReSharper.Feature.Services.VB.VBStructuralSearchStatementsPatternBuilder : object {
    public static VBStructuralSearchStatementsPatternBuilder Instance;
    private bool myGuessPlaceholders;
    private static VBStructuralSearchStatementsPatternBuilder();
    public VBStructuralSearchStatementsPatternBuilder(bool guessPlaceholders);
    public sealed virtual override IStructuralMatcher CreateMatcher(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
    public sealed virtual override IPatternLexerResult ParsePattern(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
}
[ParameterInfoContextFactoryAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.VBTypeArgumentsInfoContextFactory : object {
    private static Char[] IMPORTANT_CHARS;
    private static Char[] POPUP_CHARS;
    public IEnumerable`1<char> ImportantChars { get; }
    public PsiLanguageType Language { get; }
    private static VBTypeArgumentsInfoContextFactory();
    public sealed virtual override IEnumerable`1<char> get_ImportantChars();
    public sealed virtual override bool ShouldPopup(DocumentOffset caretOffset, char c, ISolution solution, IContextBoundSettingsStore settingsStore);
    private static IEnumerable`1<IReference> GetReferences(ITypeArgumentList argListNode);
    public sealed virtual override bool IsIntellisenseEnabled(ISolution solution, IContextBoundSettingsStore settingsStore);
    public sealed virtual override IParameterInfoContext CreateContext(ISolution solution, DocumentOffset caretOffset, DocumentOffset expectedLParenthOffset, char invocationChar, IContextBoundSettingsStore settingsStore);
    public sealed virtual override PsiLanguageType get_Language();
}
[GeneratorElementProviderAttribute("EventSubscriptions", "JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.VBWithEventsFieldsProvider : GeneratorEventsProviderBase`1<VBGeneratorContext> {
    public virtual void Populate(VBGeneratorContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.VBXmlDocBaseElementsProvider : ClrXmlDocBaseElementsProviderBase {
    protected virtual IConstructor GetBaseConstructor(IConstructor constructor);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.VBXmlDocHeaderPresenter : CommonXmlDocHeaderPresenter {
    private PsiLanguageType myLanguage;
    private IHtmlTypePresenter myTypePresenter;
    private IHtmlAttributesPresenter myAttributesPresenter;
    private IHtmlEnumPresenter myEnumPresenter;
    public VBXmlDocHeaderPresenter(PsiLanguageType language, IHtmlTypePresenter typePresenter, IHtmlAttributesPresenter attributesPresenter, IHtmlEnumPresenter enumPresenter);
    public virtual void Present(RichText header, DeclaredElementInstance declaredElementInstance, IPsiModule module, CrefManager crefManager, DeclaredElementPresenterTextStyles styles, ElementLinkCollector linkCollector, ITreeNode context);
    private void ProcessConstantValue(RichText header, IDeclaredElement declaredElement, RichText valueText);
    private void PresentSuperInterfaces(ITypeElement typeElement, RichText header, string keyword, TypePresentationStyle typePresentationStyle);
    private void PresentDeclaredType(RichText header, IDeclaredType supertype, TypePresentationStyle typePresentationStyle);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.VBXmlDocLocator : object {
    public sealed virtual override IDocCommentBlock FindCommentNode(IFile file, DocumentRange range);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.VisualElements.VBColorDeclaredElementSearcher : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.VB.VisualElements.VBColorDeclaredElementSearcher/VB$StateMachine_1_GetWords")]
public sealed virtual override IEnumerable`1<string> GetWords(IColorDeclaredElement element);
}
internal class JetBrains.ReSharper.Feature.Services.VB.VisualElements.VBColorReference : object {
    private IColorElement myColorElement;
    private IVBExpression myOwner;
    private DocumentRange myRange;
    private PredefinedColorTypes myPredefinedColorTypes;
    private ITypeElement myQualifierType;
    public ITreeNode Owner { get; }
    public Nullable`1<DocumentRange> ColorConstantRange { get; }
    public IColorElement ColorElement { get; }
    public ColorBindOptions BindOptions { get; }
    public VBColorReference(IColorElement colorElement, ITypeElement qualifierType, IReferenceExpression colorQulifiedMemberExpression);
    public VBColorReference(IColorElement colorElement, ITypeElement qualifierType, IIndexExpression invocation);
    public sealed virtual override ITreeNode get_Owner();
    public sealed virtual override Nullable`1<DocumentRange> get_ColorConstantRange();
    public sealed virtual override IColorElement get_ColorElement();
    public sealed virtual override void Bind(IColorElement colorElement);
    private IVBExpression TryReplaceAsNamed(IColorElement colorElement);
    private ITreeNode ReplaceInvocation(IMethod fromArgb, string replaceAll, bool useHex, Pair`2[] args);
    private static IVBExpression CreateConstantExpression(int value, bool hex, VBElementFactory factory, IPsiModule psiModule);
    private static IVBArgument FinArgument(IIndexExpression invocationExpression, string paramName);
    public sealed virtual override IEnumerable`1<IColorElement> GetColorTable();
    public sealed virtual override ColorBindOptions get_BindOptions();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.VB.VisualElements.VisualElementFactory : object {
    public sealed virtual override IColorReference GetColorReference(ITreeNode element);
    private static IColorReference ReferenceFromProperty(IReferenceExpression qualifier, IReferenceExpression memberExpression);
    private static IColorReference ReferenceFromInvocation(IReferenceExpression qualifier, IReferenceExpression methodReferenceExpression);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.VB.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[DebuggerDisplayAttribute("<generated method>")]
internal class VB$AnonymousDelegate_0`2 : MulticastDelegate {
    public VB$AnonymousDelegate_0`2(object TargetObject, IntPtr TargetMethod);
    public virtual IAsyncResult BeginInvoke(TArg0 name, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual TResult EndInvoke(IAsyncResult DelegateAsyncResult);
    public virtual TResult Invoke(TArg0 name);
}
[CompilerGeneratedAttribute]
[DebuggerDisplayAttribute("<generated method>")]
internal class VB$AnonymousDelegate_1`3 : MulticastDelegate {
    public VB$AnonymousDelegate_1`3(object TargetObject, IntPtr TargetMethod);
    public virtual IAsyncResult BeginInvoke(TArg0 qualifierType, TArg1 color, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual TResult EndInvoke(IAsyncResult DelegateAsyncResult);
    public virtual TResult Invoke(TArg0 qualifierType, TArg1 color);
}
[CompilerGeneratedAttribute]
[DebuggerDisplayAttribute("Attribute={Attribute}, NewArgs={NewArgs}")]
internal class VB$AnonymousType_0`2 : object {
    private T0 $Attribute;
    private T1 $NewArgs;
    public T0 Attribute { get; }
    public T1 NewArgs { get; }
    public VB$AnonymousType_0`2(T0 Attribute, T1 NewArgs);
    public T0 get_Attribute();
    public T1 get_NewArgs();
    public virtual string ToString();
    public virtual int GetHashCode();
    public sealed virtual override bool Equals(VB$AnonymousType_0`2<T0, T1> val);
    public virtual bool Equals(object obj);
}
[CompilerGeneratedAttribute]
[DebuggerDisplayAttribute("Argument={Argument}, Value={Value}")]
internal class VB$AnonymousType_1`2 : object {
    private T0 $Argument;
    private T1 $Value;
    public T0 Argument { get; public set; }
    public T1 Value { get; public set; }
    public VB$AnonymousType_1`2(T0 Argument, T1 Value);
    public T0 get_Argument();
    public void set_Argument(T0 Value);
    public T1 get_Value();
    public void set_Value(T1 Value);
    public virtual string ToString();
}
