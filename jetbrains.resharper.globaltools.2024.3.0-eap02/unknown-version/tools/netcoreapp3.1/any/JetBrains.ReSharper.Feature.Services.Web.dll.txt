[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Asp.AspContextUtil : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IconId GetIcon(IAspTag tag);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<IHtmlTag> GetInnerTagsByType(IHtmlTagContainer tagContainer, IDeclaredType type);
    [ExtensionAttribute]
public static bool TypeMatches(IHtmlTag tag, IDeclaredType type);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IAspFile GetMasterPageFile(IAspFile aspFile);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<IHtmlTag> GetContentPlaceHolders(IAspFile aspFile, IAspDeclaredElementTypes aspCache);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string GetAttributeValue(IAspDirective directive, string attributeName);
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.AspProjectFileType", "16")]
public class JetBrains.ReSharper.Feature.Services.Asp.AspFileTypeSpecificOwnerUtil : DefaultFileTypeSpecificOwnerUtil {
    [NotNullAttribute]
private ILanguageManager myLanguageManager;
    public AspFileTypeSpecificOwnerUtil(ILanguageManager languageManager);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Asp.AspFileTypeSpecificOwnerUtil/<GetRelatedDeclarations>d__2")]
public virtual IEnumerable`1<IDeclaration> GetRelatedDeclarations(ITypeDeclaration typeDeclaration);
    public virtual IEnumerable`1<ITypeDeclaration> GetRelatedAndFilterHidden(ITypeDeclaration declaration);
    public virtual bool IsHidden(ITypeDeclaration declaration);
    public virtual bool IsCodeBehindClass(ITypeDeclaration declaration);
    public virtual bool IsUserTextDeclaration(IDeclaration declaration);
    public virtual bool CanContainSeveralClasses(IPsiSourceFile sourceFile);
    public virtual bool CanImplementInterfaces(ITypeDeclaration typeElement);
    public virtual bool CanHaveConstructors(ITypeDeclaration typeElement);
    public virtual bool SuperClassCanBeChanged(ITypeDeclaration typeElement);
    public virtual bool SuperClassNameMustBeFull(ITypeDeclaration typeElement);
    public virtual string GetNamespaceForElementsMovedToExternalScope(ITypeDeclaration typeDeclaration, ITreeNode referenceNode);
    public virtual VirtualFileSystemPath GetFolderForElementsMovedToExternalScope(IProjectFile projectFile, string namespace, ITreeNode referenceNode);
    public virtual string GetPrettyName(ITypeDeclaration typeDeclaration, bool mustBeIdentifier);
    public virtual bool HasUglyName(ITypeDeclaration declaration);
    public virtual ITypeElement GetContainingTypeForReference(IReference reference);
    public bool IsPageClass(ITypeDeclaration typeDeclaration);
}
public interface JetBrains.ReSharper.Feature.Services.Asp.Caches.IMvcCacheProcessor {
    [CanBeNullAttribute]
public PsiLanguageType Language { get; }
    public abstract virtual void Process(IFile file, MvcCacheContext context);
    public abstract virtual PsiLanguageType get_Language();
}
[PsiComponentAttribute("2")]
public class JetBrains.ReSharper.Feature.Services.Asp.Caches.MvcCache : SimpleICache`1<bool> {
    private IEnumerable`1<IMvcViewResolverEx> myViewResolvers;
    private MvcReferencedAssembliesService myMvcReferencedAssembliesService;
    private ChangeManager myChangeManager;
    private AssemblyAnnotatedEntitiesCache myAssemblyAnnotatedEntitiesCache;
    private SourcesTrigramIndex mySourcesTrigramIndex;
    private IPsiModules myPsiModules;
    private OutputAssemblies myOutputAssemblies;
    private List`1<IMvcCacheProcessor> myCacheProcessors;
    private ISet`1<string> myViewLocationFormatAttributesShortNames;
    private SynchronizedSet`1<IPsiSourceFile> mySuspiciousFiles;
    private ConcurrentDictionary`2<IPsiModule, ISet`1<IProject>> myCache;
    private static Key`1<CachedPsiValue`1<MvcData>> ourCacheKey;
    internal static string DEFAULT_LOCATION;
    private static TargetFrameworkId ourNetCoreApp30;
    public MvcCache(Lifetime lifetime, IPersistentIndexManager persistentIndexManager, IEnumerable`1<IMvcViewResolverEx> viewResolvers, IEnumerable`1<IMvcCacheProcessor> cacheProcessors, MvcReferencedAssembliesService mvcReferencedAssembliesService, ChangeManager changeManager, AssemblyAnnotatedEntitiesCache assemblyAnnotatedEntitiesCache, MvcViewLocationAttributeNames mvcViewLocationAttributeNames, SourcesTrigramIndex sourcesTrigramIndex, IPsiModules psiModules, OutputAssemblies outputAssemblies, IShellLocks locks);
    private static MvcCache();
    private sealed virtual override void JetBrains.Application.Extensibility.IComponentWithAdditionalInitOnPrimaryThread.InitOnPrimaryThread();
    private static bool CanBeProcessed(IPsiSourceFile sourceFile, IList`1<IMvcCacheProcessor> cacheProcessors);
    protected virtual bool IsApplicable(IPsiSourceFile sourceFile);
    public virtual bool UpToDate(IPsiSourceFile sourceFile);
    public virtual object Build(IPsiSourceFile sourceFile, bool isStartup);
    public virtual object Load(IProgressIndicator progress, bool enablePersistence);
    protected virtual void RemoveFromDirty(IPsiSourceFile sf);
    public virtual void Merge(IPsiSourceFile sourceFile, object builtPart);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Asp.Caches.MvcCache/<GetData>d__21")]
private IEnumerable`1<MvcData> GetData(IPsiSourceFile sourceFile, bool full);
    private sealed virtual override void JetBrains.ReSharper.Psi.Caches.IPsiCache.Invalidate(ITreeNode element, PsiChangedElementType elementType);
    private static MvcData DataFactory(IMvcCacheProcessor processor, IFile psiFile, bool full);
    [ContractAnnotationAttribute("null=>false")]
private static bool IsValidPathFormat(string format);
    [ItemNotNullAttribute]
public IEnumerable`1<string> GetLocations(IPsiModule psiModule, MvcViewLocationType viewLocationType, bool expandRoot, bool noUpdate);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Asp.Caches.MvcCache/<GetLocationsInternal>d__27")]
[ItemNotNullAttribute]
private IEnumerable`1<string> GetLocationsInternal(IPsiModule psiModule, MvcViewLocationType viewLocationType, bool noUpdate);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Asp.Caches.MvcCache/<GetDefaultLocations>d__28")]
public IEnumerable`1<string> GetDefaultLocations(IPsiModule psiModule, MvcViewLocationType viewLocationType);
    public IEnumerable`1<string> GetDisplayModes(IPsiModule psiModule);
    public bool GetDefaultSuppressAsyncSuffixInActionNames(IPsiModule psiModule);
    public bool GetSuppressAsyncSuffixInActionNames(IPsiModule psiModule, bool noUpdate);
    public Nullable`1<bool> GetSuppressAsyncSuffixInActionNames(IPsiSourceFile psiSourceFile, bool noUpdate, bool full);
    [CanBeNullAttribute]
private IProject TryGetProjectByPsiModule(IPsiModule psiModule);
    private ISet`1<IProject> GetProjectsReferencedByModuleIncludingTheProjectItself(IPsiModule psiModule);
    private IEnumerable`1<IPsiSourceFile> GetSuspiciousFiles(IPsiModule psiModule);
    public sealed virtual object Execute(IChangeMap changeMap);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_1();
    [CompilerGeneratedAttribute]
private bool <Load>b__17_0();
}
public class JetBrains.ReSharper.Feature.Services.Asp.Caches.MvcCacheContext : ValueType {
    [CompilerGeneratedAttribute]
private MvcData <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FullMode>k__BackingField;
    [CompilerGeneratedAttribute]
private MvcCacheProcessorHelper <ProcessorHelper>k__BackingField;
    [NotNullAttribute]
public MvcData Data { get; }
    public bool FullMode { get; }
    public MvcCacheProcessorHelper ProcessorHelper { get; }
    public MvcCacheContext(bool fullMode, MvcCacheProcessorHelper processorHelper);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public MvcData get_Data();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_FullMode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public MvcCacheProcessorHelper get_ProcessorHelper();
}
public class JetBrains.ReSharper.Feature.Services.Asp.Caches.MvcCacheProcessorHelper : object {
    private StringComparer myStringComparer;
    private IDictionary`2<string, MvcViewLocationType> myViewLocationsPropertiesShortNames;
    private IDictionary`2<string, int> myDisplayModeDetector;
    private static string DisplayModesProperty;
    private static string DisplayModesPropertyShortName;
    private static string SuppressAsyncSuffixInActionProperty;
    private static string SuppressAsyncSuffixInActionNamesShortName;
    private ICollection`1<StringSearcher> myStringSearchers;
    private IDictionary`2<string, MvcViewLocationType> myViewLocationFormatAttributes;
    private static IDictionary`2<string, MvcViewLocationType> A;
    private static IDictionary`2<string, MvcViewLocationType> B;
    public MvcCacheProcessorHelper(ISolution solution, bool caseSensitive);
    private static MvcCacheProcessorHelper();
    public bool SubTreeContainsApplicableText(ITreeNode node);
    public Nullable`1<bool> CheckSuppressAsyncSuffixInActionNames(IReference destReference, IExpression sourceExpression, bool full);
    public MvcViewLocationType CheckViewLocationType(IReference destReference, IExpression sourceExpression, bool full);
    public TObjectCreationExpression CheckDisplayMode(IArgumentsOwner destExpression, IReference destReference, IReference sourceReference, bool full);
}
[PsiSharedComponentAttribute]
public class JetBrains.ReSharper.Feature.Services.Asp.Caches.MvcViewLocationAttributeNames : object {
    public IEnumerable`1<IClrTypeName> AttributeClrNamesToWatch { get; }
    public sealed virtual IEnumerable`1<IClrTypeName> get_AttributeClrNamesToWatch();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Asp.Caches.ZoneMarker : object {
}
[CallHierarchyIncomingDeclaredElementNodePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Asp.CallHierarchy.AspCallHierarchyIncomingDeclaredElementNodePresenter : CallHierarchyIncomingDeclaredElementNodePresenter {
    private IProjectFileTypeServices myProjectFileTypeServices;
    public AspCallHierarchyIncomingDeclaredElementNodePresenter(IProjectFileTypeServices projectFileTypeServices);
    public virtual bool IsApplicable(ICallHierarchyPresentableNode node);
    public virtual void Present(ICallHierarchyPresentableNode node, TreeModelNode structureElement, PresentableItem presentableItem, PresentationState state, ICallHierarchyNodePresenter presenter);
    public virtual DocumentRange GetPreviewableDocumentRange(ICallHierarchyPresentableNode node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CodeCleanupModuleAttribute]
public class JetBrains.ReSharper.Feature.Services.Asp.CodeCleanup.RemoveRedundantTagNamePrefixesModule : object {
    private static CodeCleanupOptionDescriptor`1<bool> DESCRIPTOR;
    [CompilerGeneratedAttribute]
private ICollection`1<CodeCleanupOptionDescriptor> <Descriptors>k__BackingField;
    public string Name { get; }
    public PsiLanguageType LanguageType { get; }
    public ICollection`1<CodeCleanupOptionDescriptor> Descriptors { get; }
    public bool IsAvailableOnSelection { get; }
    private static RemoveRedundantTagNamePrefixesModule();
    public sealed virtual string get_Name();
    public sealed virtual PsiLanguageType get_LanguageType();
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<CodeCleanupOptionDescriptor> get_Descriptors();
    public sealed virtual bool get_IsAvailableOnSelection();
    public sealed virtual void SetDefaultSetting(CodeCleanupProfile profile, DefaultProfileType profileType);
    public sealed virtual bool IsAvailable(IPsiSourceFile sourceFile);
    public sealed virtual bool IsAvailable(CodeCleanupProfile profile);
    public sealed virtual void Process(IPsiSourceFile sourceFile, IRangeMarker rangeMarker, CodeCleanupProfile profile, IProgressIndicator progressIndicator, IUserDataHolder cache);
    public static void Execute(IPsiSourceFile sourceFile, IRangeMarker rangeMarker, IProgressIndicator progressIndicator);
    private static void ExecutePsiTransaction(IAspFile aspFile, IRangeMarker rangeMarker, IProgressIndicator progressIndicator);
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.AspProjectFileType", "16")]
public class JetBrains.ReSharper.Feature.Services.Asp.CodeStructure.AspCodeStructureProvider : HtmlCodeStructureProvider {
    public AspCodeStructureProvider(ILanguageManager languageManager);
    protected virtual IRecursiveElementProcessor CreateElementProcessor(HtmlCodeStructureRootElement root, IHtmlTokenNodeTypes tokenTypes);
}
public class JetBrains.ReSharper.Feature.Services.Asp.CodeStructure.AspDirectiveCodeStructureElement : HtmlCodeStructureElement`1<IAspDirective> {
    public DocumentRange NavigationRange { get; }
    public IDeclaration Declaration { get; }
    public IDeclaredElement DeclaredElement { get; }
    public AspDirectiveCodeStructureElement(IAspDirective directive, IHtmlTokenNodeTypes tokenTypes, CodeStructureElement parent);
    protected virtual Tuple`3<IconId, RichText, RichText> GetPresentation(PresentationState state);
    public virtual IList`1<string> GetQuickSearchTexts();
    private string GetName();
    public virtual DocumentRange get_NavigationRange();
    public sealed virtual IDeclaration get_Declaration();
    public sealed virtual IDeclaredElement get_DeclaredElement();
}
public class JetBrains.ReSharper.Feature.Services.Asp.CodeStructure.AspRenderBlockCodeStructureElement : HtmlCodeStructureElement`1<IAspRenderBlock> {
    private CachedPsiValue`1<TreeTextRange> myTrimmedCodeRange;
    private CachedPsiValue`1<Pair`2<int, int>> myNestedLevel;
    public AspRenderBlockCodeStructureElement(IAspRenderBlock aspRenderBlock, IHtmlTokenNodeTypes tokenTypes, CodeStructureElement parent);
    protected virtual Tuple`3<IconId, RichText, RichText> GetPresentation(PresentationState state);
    public virtual IList`1<string> GetQuickSearchTexts();
    public static Pair`2<int, int> GetNestedLevel(IAspRenderBlock block);
    public Pair`2<int, int> GetNestedLevel();
    private static int GetLevel(ITreeNode element);
}
public class JetBrains.ReSharper.Feature.Services.Asp.CodeStructure.AspSubstitutionCodeStructureElement : HtmlCodeStructureElement`1<IAspSubstitution> {
    public AspSubstitutionCodeStructureElement(IAspSubstitution element, IHtmlTokenNodeTypes tokenTypes, CodeStructureElement parent);
    protected virtual Tuple`3<IconId, RichText, RichText> GetPresentation(PresentationState state);
    public virtual IList`1<string> GetQuickSearchTexts();
}
public class JetBrains.ReSharper.Feature.Services.Asp.CodeStructure.AspTagCodeStructureElement : HtmlTagCodeStructureElement`1<IAspTag> {
    private static TextStyle ourAuxStyle;
    public AspTagCodeStructureElement(IAspTag tag, IHtmlTokenNodeTypes tokenTypes, CodeStructureElement parent);
    private static AspTagCodeStructureElement();
    protected virtual RichText DecorElement(IAspTag tag, RichText text);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Asp.AspLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Asp.Comment.AspBlockCommentActionProvider : HtmlBlockCommentActionProvider {
    private IAspTokenNodeTypes myTokenNodeTypes;
    public string StartBlockCommentMarker { get; }
    public string EndBlockCommentMarker { get; }
    protected TokenNodeType CommentStart { get; }
    protected TokenNodeType CommentBody { get; }
    protected TokenNodeType CommentEnd { get; }
    public AspBlockCommentActionProvider(IAspTokenNodeTypes tokenNodeTypes);
    public virtual string get_StartBlockCommentMarker();
    public virtual string get_EndBlockCommentMarker();
    protected virtual TokenNodeType get_CommentStart();
    protected virtual TokenNodeType get_CommentBody();
    protected virtual TokenNodeType get_CommentEnd();
    public virtual bool IsAvailable(IFile file, DocumentRange range, Boolean& disableAllProviders);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Asp.AspLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Asp.Comment.AspLineCommentActionProvider : HtmlLineCommentActionProvider {
    private IAspTokenNodeTypes myTokenNodeTypes;
    public string StartLineCommentMarker { get; }
    public string EndLineCommentMarker { get; }
    protected TokenNodeType CommentStart { get; }
    protected TokenNodeType CommentEnd { get; }
    public AspLineCommentActionProvider(IAspTokenNodeTypes tokenNodeTypes);
    public virtual string get_StartLineCommentMarker();
    public virtual string get_EndLineCommentMarker();
    protected virtual TokenNodeType get_CommentStart();
    protected virtual TokenNodeType get_CommentEnd();
}
[ContextActionDataBuilderAttribute("JetBrains.ReSharper.Feature.Services.Html.Bulbs.IWebContextActionDataProvider`1<JetBrains.ReSharper.Psi.Asp.Tree.IAspFile>", "16")]
internal class JetBrains.ReSharper.Feature.Services.Asp.ContextActions.AspContextActionDataBuilder : HtmlContextActionDataBuilderBase`2<IAspFile, AspLanguage> {
}
[ContextActionGroupAttribute]
public static class JetBrains.ReSharper.Feature.Services.Asp.ContextActions.AspContextActions : object {
    public static string GroupID;
}
[PsiSharedComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Asp.CSharp.Caches.MvcCSharpCacheProcessor : TreeNodeVisitor`1<MvcCacheContext> {
    private Lifetime myLifetime;
    private DataContexts myDataContexts;
    public PsiLanguageType Language { get; }
    public MvcCSharpCacheProcessor(Lifetime lifetime, DataContexts dataContexts);
    public virtual void VisitPropertyInitializer(IPropertyInitializer propertyInitializerParam, MvcCacheContext context);
    public virtual void VisitAssignmentExpression(IAssignmentExpression assignmentExpressionParam, MvcCacheContext context);
    private void DetectLayoutChanges(IReference reference, IExpression expression, MvcCacheContext context, bool append);
    public virtual void VisitInvocationExpression(IInvocationExpression invocationExpression, MvcCacheContext context);
    public sealed virtual bool InteriorShouldBeProcessed(ITreeNode element, MvcCacheContext context);
    public sealed virtual bool IsProcessingFinished(MvcCacheContext context);
    public sealed virtual void ProcessAfterInterior(ITreeNode element, MvcCacheContext context);
    public sealed virtual void ProcessBeforeInterior(ITreeNode element, MvcCacheContext context);
    public sealed virtual void Process(IFile file, MvcCacheContext context);
    public sealed virtual PsiLanguageType get_Language();
    private static string GetStringValue(IConstantValueOwner constant);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Asp.CSharp.CodeStructure.SkipNodesProvider : object {
    private static JetHashSet`1<TokenNodeType> ourSkipNodes;
    public JetHashSet`1<TokenNodeType> Nodes { get; }
    private static SkipNodesProvider();
    public sealed virtual JetHashSet`1<TokenNodeType> get_Nodes();
}
internal class JetBrains.ReSharper.Feature.Services.Asp.CSharp.CustomReferences.CSharpMvcActionReference : MvcActionReference`1<ICSharpLiteralExpression> {
    public CSharpMvcActionReference(IExpression owner, IArgumentsOwner argumentsExpression, Version version);
}
internal class JetBrains.ReSharper.Feature.Services.Asp.CSharp.CustomReferences.CSharpMvcAreaReference : MvcAreaReference`1<ICSharpLiteralExpression> {
    public CSharpMvcAreaReference(IExpression owner, Version version);
}
internal class JetBrains.ReSharper.Feature.Services.Asp.CSharp.CustomReferences.CSharpMvcControllerReference : MvcControllerReference`1<ICSharpLiteralExpression> {
    public CSharpMvcControllerReference(IExpression owner, IArgumentsOwner argumentsExpression, Version version);
}
[ReferenceProviderFactoryAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Asp.CSharp.CustomReferences.CSharpMvcNonViewsReferenceProviderFactory : CSharpMvcReferenceProviderFactory {
    public CSharpMvcNonViewsReferenceProviderFactory(Lifetime lifetime, ISolution solution, ISettingsStore settingsStore, MvcReferencedAssembliesService mvcReferencedAssembliesService);
}
internal class JetBrains.ReSharper.Feature.Services.Asp.CSharp.CustomReferences.CSharpMvcReferenceProvider : MvcReferenceProvider`3<ICSharpLiteralExpression, ICSharpArgumentsOwner, IMethodDeclaration> {
    private IPsiServices myPsiServices;
    public CSharpMvcReferenceProvider(IPsiServices psiServices, Version version, MvcKind necessaryMvcKinds);
    protected virtual MvcActionReference`1<ICSharpLiteralExpression> GetMvcActionReference(IExpression literal, ICSharpArgumentsOwner argumentsExpression, Version version);
    protected virtual IExpression GetMvcLiteral(ITreeNode element, IReferenceNameContainer names, ICSharpArgumentsOwner& expression, String& anonymousPropertyName);
    protected virtual HybridCollection`1<string> GetImplicitReferenceNames(ICSharpArgumentsOwner argumentsOwner);
    protected virtual MvcControllerReference`1<ICSharpLiteralExpression> GetMvcControllerReference(IExpression literal, ICSharpArgumentsOwner argumentsExpression, Version version);
    protected virtual MvcAreaReference`1<ICSharpLiteralExpression> GetMvcAreaReference(IExpression literal, Version version);
    protected virtual MvcViewReference`2<ICSharpLiteralExpression, IMethodDeclaration> GetMvcViewReference(IExpression literal, IReadOnlyCollection`1<AvailableControllersInfo> names, MvcKind mvcKind, Version version);
    protected virtual MvcViewComponentReference`1<ICSharpLiteralExpression> GetMvcViewComponentReference(IExpression literal, ICSharpArgumentsOwner argumentsExpression, Version version);
    private bool CanBeArgumentMemberWithMvcAnnotation(ICSharpArgument argument);
}
public abstract class JetBrains.ReSharper.Feature.Services.Asp.CSharp.CustomReferences.CSharpMvcReferenceProviderFactory : object {
    private ISolution mySolution;
    private IPsiServices myPsiServices;
    private MvcReferencedAssembliesService myMvcReferencedAssembliesService;
    [CompilerGeneratedAttribute]
private ISignal`1<IReferenceProviderFactory> <Changed>k__BackingField;
    [CompilerGeneratedAttribute]
private MvcKind <SupportedMvcKinds>k__BackingField;
    public IPsiServices PsiServices { get; }
    public ISignal`1<IReferenceProviderFactory> Changed { get; }
    public MvcKind SupportedMvcKinds { get; }
    public PsiLanguageCategories SupportedPsiLanguageCategories { get; }
    public PsiLanguageType SupportedPsiLanguage { get; }
    protected CSharpMvcReferenceProviderFactory(Lifetime lifetime, ISolution solution, MvcReferencedAssembliesService mvcReferencedAssembliesService, MvcKind necessaryMvcKinds);
    public IPsiServices get_PsiServices();
    public sealed virtual IReferenceFactory CreateFactory(IPsiSourceFile sourceFile, IFile file, IWordIndex wordIndexForChecks);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IReferenceProviderFactory> get_Changed();
    [CompilerGeneratedAttribute]
public sealed virtual MvcKind get_SupportedMvcKinds();
    public sealed virtual PsiLanguageCategories get_SupportedPsiLanguageCategories();
    public sealed virtual PsiLanguageType get_SupportedPsiLanguage();
}
internal class JetBrains.ReSharper.Feature.Services.Asp.CSharp.CustomReferences.CSharpMvcViewComponentReference : MvcViewComponentReference`1<ICSharpLiteralExpression> {
    public CSharpMvcViewComponentReference(IExpression owner, IArgumentsOwner argumentsExpression, Version version);
}
internal class JetBrains.ReSharper.Feature.Services.Asp.CSharp.CustomReferences.CSharpMvcViewReference : MvcViewReference`2<ICSharpLiteralExpression, IMethodDeclaration> {
    public CSharpMvcViewReference(IExpression owner, IReadOnlyCollection`1<AvailableControllersInfo> names, MvcKind mvcKind, Version version);
}
[ReferenceProviderFactoryAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Asp.CSharp.CustomReferences.CSharpMvcViewsReferenceProviderFactory : CSharpMvcReferenceProviderFactory {
    public CSharpMvcViewsReferenceProviderFactory(Lifetime lifetime, ISolution solution, ISettingsStore settingsStore, MvcReferencedAssembliesService mvcReferencedAssembliesService);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ReferenceProviderFactoryAttribute("0")]
internal class JetBrains.ReSharper.Feature.Services.Asp.CSharp.CustomReferences.CSharpPathReferenceProviderFactory : object {
    private CodeAnnotationsCache myCodeAnnotationsCache;
    [CompilerGeneratedAttribute]
private ISignal`1<IReferenceProviderFactory> <Changed>k__BackingField;
    public ISignal`1<IReferenceProviderFactory> Changed { get; }
    public CSharpPathReferenceProviderFactory(CodeAnnotationsCache codeAnnotationsCache);
    public sealed virtual IReferenceFactory CreateFactory(IPsiSourceFile sourceFile, IFile file, IWordIndex wordIndexForChecks);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IReferenceProviderFactory> get_Changed();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Asp.CSharp.CustomReferences.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Asp.CSharp.ExpectedTypes.MvcCSharpExpectedTypesProvider : CSharpExpectedTypesProvider {
    public virtual IReadOnlyList`1<ExpectedType> GetExpectedTypes(ICSharpExpression expression, INamingPolicyProvider namingPolicyProvider, ExpectedTypeMode mode);
}
[ScopeCategoryUIProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Asp.CSharp.LiveTemplates.AspCSharpProjectScopeCategoryUIProvider : ScopeCategoryUIProvider {
    public string CategoryCaption { get; }
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Asp.CSharp.LiveTemplates.AspCSharpProjectScopeCategoryUIProvider/<BuildAllPoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> BuildAllPoints();
    public virtual string get_CategoryCaption();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Asp.CSharp.LiveTemplates.AspCSharpProjectScopeProvider : ScopeProvider {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Asp.CSharp.LiveTemplates.AspCSharpProjectScopeProvider/<ProvideScopePoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> ProvideScopePoints(TemplateAcceptanceContext context);
}
public class JetBrains.ReSharper.Feature.Services.Asp.CSharp.LiveTemplates.InAspCSharpProject : InLanguageSpecificWebProject {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    public Guid QuickListUID { get; }
    public string QuickListTitle { get; }
    private static InAspCSharpProject();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
    public sealed virtual Guid get_QuickListUID();
    public sealed virtual string get_QuickListTitle();
}
public class JetBrains.ReSharper.Feature.Services.Asp.CSharp.LiveTemplates.InWebFormsCSharpProject : InAspCSharpProject {
    private static Guid ourDefaultUid;
    public string PresentableShortName { get; }
    private static InWebFormsCSharpProject();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
}
[FileTemplatesAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Asp.CSharp.LiveTemplates.Support.AspCSharpFileTemplatesSupport : AspFileTemplatesSupportBase {
    public IEnumerable`1<ITemplateScopePoint> ScopePoints { get; }
    public string Name { get; }
    protected ProjectLanguage Language { get; }
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Asp.CSharp.LiveTemplates.Support.AspCSharpFileTemplatesSupport/<get_ScopePoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> get_ScopePoints();
    public virtual string get_Name();
    protected virtual ProjectLanguage get_Language();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Asp.CSharp.LiveTemplates.ZoneMarker : object {
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Feature.Services.Asp.CSharp.TypingAssistant.AspCSharpTypingAssist : CSharpTypingAssistBase {
    public AspCSharpTypingAssist(Lifetime lifetime, TypingAssistDependencies dependencies, DocumentTransactionManager documentTransactionManager, IOptional`1<ICodeCompletionSessionManager> codeCompletionSessionManager);
    protected virtual bool IsSupported(ITextControl textControl);
    private bool IsInEmptyCodeBlock(CachingLexer lexer, int caretOffset);
    public virtual int TextControlToLexer(ITextControl textControl, DocOffset offset);
    protected virtual bool AllowCpuIntensiveAssists(ITextControl textControl);
    public virtual bool QuickCheckAvailability(ITextControl textControl, IPsiSourceFile projectFile);
    protected virtual bool IsStopperTokenForStringLiteral(TokenNodeType tokenType);
    protected virtual string GetLineTextBeforeOffset(ITextControl textControl, int lexerOffset);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Asp.CSharp.TypingAssistant.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Asp.CSharp.Util.CSharpAspLanguageSpecificUtil : object {
    public sealed virtual bool IsPageClassDeclaration(ITypeDeclaration typeDeclaration);
    public sealed virtual bool IsUserTextDeclaration(IDeclaration declaration);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Asp.CSharp.ZoneMarker : object {
}
[CodeAnnotationProviderAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.AspMvcSuppressViewErrorAnnotationProvider : object {
    private static int MAX_CACHE_SIZE;
    private static string SuppressViewErrorAttributeShortName;
    private CodeAnnotationsConfiguration myCodeAnnotationsConfiguration;
    private AttributeInstancesProvider myAttributeInstancesProvider;
    private DirectMappedCache`2<IAttributesOwner, bool> myCache;
    public AspMvcSuppressViewErrorAnnotationProvider(CodeAnnotationsConfiguration codeAnnotationsConfiguration, AttributeInstancesProvider attributeInstancesProvider);
    private static AspMvcSuppressViewErrorAnnotationProvider();
    public bool ContainsSuppressViewErrorAttribute(IAttributesOwner attributesOwner);
    private bool ContainsSuppressViewErrorAttribute(ITypeElement typeElement);
    private bool ContainsSuppressViewErrorAttribute(IEnumerable`1<IAttributeInstance> attributeInstances);
    public sealed virtual void Invalidate(PsiChangedElementType changeType);
}
public class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.AvailableControllersInfo : object {
    public string AreaName;
    public string ControllerName;
    public DeterminationKind DeterminationKind;
    [CanBeNullAttribute]
public ICollection`1<ControllerKindInfo> Controllers;
}
public class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.ControllerInfo : object {
    public string AreaName;
    public string ControllerName;
    public IClass Controller;
}
public class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.ControllerKindInfo : object {
    public IClass Controller;
    public MvcKind Kind;
}
public enum JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.DeterminationKind : Enum {
    public int value__;
    public static DeterminationKind Explicit;
    public static DeterminationKind ImplicitByLocation;
    public static DeterminationKind ImplicitByContainingMember;
}
public interface JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.IMvcActionControllerReference {
    [NotNullAttribute]
public IEnumerable`1<ControllerInfo> Controllers { get; }
    public abstract virtual IEnumerable`1<ControllerInfo> get_Controllers();
}
public interface JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.IMvcActionReference {
}
public interface JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.IMvcAreaReference {
}
public interface JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.IMvcControllerReference {
}
public interface JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.IMvcLanguageHelper {
    public abstract virtual IType GetAssigmentType(IExpression expression);
    public abstract virtual bool IsAttribute(IArgumentsOwner node);
    public abstract virtual IEnumerable`1<IDeclaration> GetAttributeDeclarations(IArgumentsOwner node);
}
public interface JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.IMvcReference {
    public Version Version { get; }
    public MvcKind MvcKind { get; }
    public bool IsInternalValid { get; }
    public abstract virtual Version get_Version();
    public abstract virtual MvcKind get_MvcKind();
    public abstract virtual bool get_IsInternalValid();
}
public interface JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.IMvcReferenceFactory {
}
public interface JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.IMvcReferenceProviderFactory {
    public MvcKind SupportedMvcKinds { get; }
    public PsiLanguageCategories SupportedPsiLanguageCategories { get; }
    public PsiLanguageType SupportedPsiLanguage { get; }
    public abstract virtual MvcKind get_SupportedMvcKinds();
    public abstract virtual PsiLanguageCategories get_SupportedPsiLanguageCategories();
    public abstract virtual PsiLanguageType get_SupportedPsiLanguage();
}
public interface JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.IMvcViewReference {
    [ObsoleteAttribute("TODO: [derigel] Get rid of me!")]
[NotNullAttribute]
public abstract virtual IEnumerable`1<KeyValuePair`2<IProjectPsiModule, VirtualFileSystemPath>> GetControllerFolders();
}
[ObsoleteAttribute("Use assembly level annotations attributes: AspMvcAreaMasterLocationFormat, AspMvcAreaPartialViewLocationFormat, AspMvcAreaViewLocationFormat, AspMvcMasterLocationFormat, AspMvcPartialViewLocationFormat, AspMvcViewLocationFormat")]
public interface JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.IMvcViewResolver {
    public IDictionary`2<MvcViewLocationType, ICollection`1<string>> Values { get; }
    public abstract virtual IDictionary`2<MvcViewLocationType, ICollection`1<string>> get_Values();
    public abstract virtual bool IsApplicable(IProject project);
}
public interface JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.IMvcViewResolverEx {
    public abstract virtual ICollection`1<string> GetViewLocationFormats(IPsiModule psiModule, MvcViewLocationType viewLocationType);
}
public abstract class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcActionControllerReference`1 : MvcReference`1<TLiteral> {
    protected IArgumentsOwner myArgumentsExpression;
    public IEnumerable`1<ControllerInfo> Controllers { get; }
    protected MvcActionControllerReference`1(IExpression owner, IArgumentsOwner argumentsExpression, Version version);
    public abstract virtual IEnumerable`1<ControllerInfo> get_Controllers();
    protected virtual ISymbolTableDependencySet GetSymbolTableDependencySet();
}
public class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcActionReference`1 : MvcActionControllerReference`1<TLiteral> {
    private static MvcKind ControllerKind;
    public IEnumerable`1<ControllerInfo> Controllers { get; }
    public MvcKind MvcKind { get; }
    public MvcActionReference`1(IExpression owner, IArgumentsOwner argumentsExpression, Version version);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcActionReference`1/<get_Controllers>d__2")]
public virtual IEnumerable`1<ControllerInfo> get_Controllers();
    public virtual MvcKind get_MvcKind();
    private bool IsAnyRuntimeCalculatedController();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public virtual IReference BindTo(IDeclaredElement element);
    protected virtual string PrepareName(ISymbolInfo symbol);
    private IResolveInfo GetResolveInfo(ResolveResultWithInfo resolveInfo);
}
[DescriptionAttribute("Area")]
public class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcAreaReference`1 : MvcReference`1<TLiteral> {
    public MvcKind MvcKind { get; }
    public MvcAreaReference`1(IExpression owner, Version version);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public sealed virtual VirtualFileSystemPath GetBasePath();
    public sealed virtual ISymbolFilter[] GetPathFilters();
    public virtual ISymbolTable GetCompletionSymbolTable();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public virtual IReference BindTo(IDeclaredElement element);
    public virtual MvcKind get_MvcKind();
}
public abstract class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcBaseReference`1 : TreeReferenceBase`1<TElement> {
    protected Func`2<IDeclaredElement, bool> ResolveFilter;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    public Version Version { get; }
    public MvcKind MvcKind { get; }
    public bool IsInternalValid { get; }
    private bool JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolverQualifiableReference.ShouldResolveInGlobalTable { get; }
    private bool JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReference.IsQualified { get; }
    protected MvcBaseReference`1(TElement owner, Version version);
    [CompilerGeneratedAttribute]
public sealed virtual Version get_Version();
    public abstract virtual MvcKind get_MvcKind();
    public abstract virtual bool get_IsInternalValid();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public virtual IAccessContext GetAccessContext();
    public virtual IReference BindTo(IDeclaredElement element, ISubstitution substitution);
    public sealed virtual Refers RefersToDeclaredElement(IDeclaredElement declaredElement);
    public virtual ISymbolTable GetCompletionSymbolTable();
    protected virtual ISymbolTableDependencySet GetSymbolTableDependencySet();
    private sealed virtual override ResolveResultWithInfo JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolverQualifiableReference.Resolve(ISymbolTable symbolTable, IAccessContext context);
    private sealed virtual override bool JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolverQualifiableReference.get_ShouldResolveInGlobalTable();
    private sealed virtual override bool JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReference.get_IsQualified();
    private sealed virtual override IQualifier JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReference.GetQualifier();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CodeAnnotationProviderAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcBindingCodeAnnotationInfoProvider : CodeAnnotationInfoProvider`2<IAttributesOwner, bool> {
    private static HashSet`1<IClrTypeName> ourAttributeTypeNames;
    private static HashSet`1<string> ourAttributeShortNames;
    public MvcBindingCodeAnnotationInfoProvider(AttributeInstancesProvider attributeInstancesProvider, CodeAnnotationsConfiguration codeAnnotationsConfiguration);
    private static MvcBindingCodeAnnotationInfoProvider();
    protected virtual bool CalculateInfo(IAttributesOwner attributesOwner, IEnumerable`1<IAttributeInstance> attributeInstances);
    protected virtual bool Accepts(IAttributesOwner attributesOwner);
    [NullableContextAttribute("2")]
protected virtual bool GetDefaultInfo(IAttributesOwner attributesOwner);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcCacheEx : object {
    private static string AreaNameStub;
    private static string ControllerNameStub;
    private static string ViewNameStub;
    private static Char[] ourAreaControllerStubs;
    private static Char[] ourAllStubs;
    private static MvcCacheEx();
    private static String[] ParseLocationFormatString(string locationFormat, MvcKind mvcKind, string controller, string area, bool noValidation);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcCacheEx/<GetLocations>d__6")]
[ExtensionAttribute]
public static IEnumerable`1<Tuple`4<string, MvcViewLocationType, VirtualFileSystemPath, String[]>> GetLocations(MvcCache mvcCache, IPsiModule psiModule, MvcKind mvcKind, string area, string controller, bool expandRoot, bool noUpdate, bool noValidation, bool forceArea);
}
public abstract class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcControllerBaseReference`1 : MvcActionControllerReference`1<TLiteral> {
    public IEnumerable`1<ControllerInfo> Controllers { get; }
    protected MvcControllerBaseReference`1(IExpression owner, IArgumentsOwner argumentsExpression, Version version);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public virtual IReference BindTo(IDeclaredElement element);
    public virtual IEnumerable`1<ControllerInfo> get_Controllers();
    protected virtual string PrepareName(ISymbolInfo symbol);
    [CompilerGeneratedAttribute]
private ControllerInfo <get_Controllers>b__5_1(IClass class);
}
public class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcControllerReference`1 : MvcControllerBaseReference`1<TLiteral> {
    public MvcKind MvcKind { get; }
    public MvcControllerReference`1(IExpression owner, IArgumentsOwner argumentsExpression, Version version);
    public virtual MvcKind get_MvcKind();
}
public abstract class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcImplicitActionControllerReference`2 : MvcImplicitReference`2<TElement, TDeclaration> {
    public IEnumerable`1<ControllerInfo> Controllers { get; }
    public DeterminationKind DeterminationKind { get; }
    protected MvcImplicitActionControllerReference`2(TElement owner, Version version, Func`2<TElement, IReadOnlyCollection`1<TDeclaration>> declarationsRetriever, Func`2<TDeclaration, string> namer);
    public sealed virtual IEnumerable`1<ControllerInfo> get_Controllers();
    public virtual string GetName();
    public virtual DeterminationKind get_DeterminationKind();
}
public class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcImplicitActionReference`3 : MvcImplicitActionControllerReference`2<TElement, IMethod> {
    public MvcKind MvcKind { get; }
    public MvcImplicitActionReference`3(TElement owner, Version version);
    private static IReadOnlyCollection`1<IMethod> GetActions(TElement argumentsOwner);
    public virtual MvcKind get_MvcKind();
    public virtual string GetName();
}
public class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcImplicitControllerReference`1 : MvcImplicitActionControllerReference`2<TElement, IClass> {
    public MvcKind MvcKind { get; }
    public MvcImplicitControllerReference`1(TElement owner, Version version);
    private static IReadOnlyCollection`1<IClass> GetControllers(TElement element);
    public virtual MvcKind get_MvcKind();
}
public abstract class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcImplicitReference`2 : MvcBaseReference`1<TElement> {
    private Func`2<TElement, IReadOnlyCollection`1<TDeclaration>> myDeclarationsRetriever;
    private Func`2<TDeclaration, string> myNamer;
    public bool HasMultipleNames { get; }
    public DeterminationKind DeterminationKind { get; }
    public bool IsInternalValid { get; }
    protected MvcImplicitReference`2(TElement owner, Version version, Func`2<TElement, IReadOnlyCollection`1<TDeclaration>> declarationsRetriever, Func`2<TDeclaration, string> namer);
    public virtual bool get_HasMultipleNames();
    public abstract virtual DeterminationKind get_DeterminationKind();
    public virtual HybridCollection`1<string> GetAllNames();
    protected virtual ISymbolTableDependencySet GetSymbolTableDependencySet();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual TreeTextRange GetTreeTextRange();
    public virtual IReference BindTo(IDeclaredElement element);
    private ResolveErrorType RefineResolveResult(ResolveErrorType result);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public virtual bool get_IsInternalValid();
}
public class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcImplicitViewComponentViewReference`1 : MvcImplicitReference`2<TElement, IPathDeclaredElement> {
    public static string DefaultViewComponentViewName;
    public DeterminationKind DeterminationKind { get; }
    public MvcKind MvcKind { get; }
    public MvcImplicitViewComponentViewReference`1(TElement owner, Version version);
    private static IReadOnlyCollection`1<IPathDeclaredElement> GetViews(TElement element, Version version);
    public virtual DeterminationKind get_DeterminationKind();
    protected virtual ISymbolTableDependencySet GetSymbolTableDependencySet();
    public sealed virtual VirtualFileSystemPath GetBasePath();
    public sealed virtual IEnumerable`1<KeyValuePair`2<IProjectPsiModule, VirtualFileSystemPath>> GetControllerFolders();
    public virtual HybridCollection`1<string> GetAllNames();
    public virtual string GetName();
    public virtual ISymbolTable GetCompletionSymbolTable();
    public sealed virtual ISymbolFilter[] GetPathFilters();
    public virtual MvcKind get_MvcKind();
}
public class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcImplicitViewReference`3 : MvcImplicitReference`2<TElement, IPathDeclaredElement> {
    private MvcKind myMvcKind;
    public DeterminationKind DeterminationKind { get; }
    public MvcKind MvcKind { get; }
    public MvcImplicitViewReference`3(TElement owner, MvcKind mvcKind, Version version);
    private static IReadOnlyCollection`1<IPathDeclaredElement> GetViews(TElement element, MvcKind mvcKind, Version version);
    [NotNullAttribute]
private static ISymbolTable GetReferenceSymbolTable(IMethod action, MvcKind mvcKind, Version version);
    public virtual DeterminationKind get_DeterminationKind();
    protected virtual ISymbolTableDependencySet GetSymbolTableDependencySet();
    private IResolveInfo GetResolveInfo(IResolveInfo info);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public sealed virtual VirtualFileSystemPath GetBasePath();
    public sealed virtual IEnumerable`1<KeyValuePair`2<IProjectPsiModule, VirtualFileSystemPath>> GetControllerFolders();
    public virtual string GetName();
    public virtual ISymbolTable GetCompletionSymbolTable();
    public sealed virtual ISymbolFilter[] GetPathFilters();
    public virtual MvcKind get_MvcKind();
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcKind : Enum {
    public int value__;
    public static MvcKind None;
    public static MvcKind Area;
    public static MvcKind Controller;
    public static MvcKind Action;
    public static MvcKind View;
    public static MvcKind PartialView;
    public static MvcKind Master;
    public static MvcKind DisplayTemplate;
    public static MvcKind EditorTemplate;
    public static MvcKind Template;
    public static MvcKind PathReference;
    public static MvcKind ModelType;
    public static MvcKind ViewComponent;
    public static MvcKind ViewComponentView;
    public static MvcKind Views;
    public static MvcKind All;
}
[CodeAnnotationProviderAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcKindCodeAnnotationsProvider : CodeAnnotationInfoProviderBase`2<IAttributesOwner, IReadOnlyCollection`1<MvcKindInfo>> {
    private static Dictionary`2<MvcKind, Func`2<IAttributeInstance, string>> ourMvcKindAnonymousPropertyInitializers;
    private static Dictionary`2<string, MvcKind> ourMvcKinds;
    private static IReadOnlyList`1<string> ourViewsAttributeNames;
    private static IReadOnlyList`1<string> ourNonViewsAttributeNames;
    public MvcKindCodeAnnotationsProvider(AttributeInstancesProvider attributeInstancesProvider, CodeAnnotationsConfiguration codeAnnotationsConfiguration);
    private static MvcKindCodeAnnotationsProvider();
    private static string AnonymousPropertyInitializerRetriever(IAttributeInstance attr);
    public static MvcKind GetMvcKind(Type attributeType);
    public static IReadOnlyList`1<string> GetAttributeShortNames(MvcKind kinds);
    private static IReadOnlyList`1<string> GetAttributeShortNamesCore(MvcKind kinds);
    protected virtual IReadOnlyCollection`1<MvcKindInfo> CalculateInfo(IAttributesOwner attributesOwner, IEnumerable`1<IAttributeInstance> attributeInstances);
    protected virtual IReadOnlyCollection`1<MvcKindInfo> GetDefaultInfo(IAttributesOwner attributesOwner);
    public IReadOnlyCollection`1<MvcKindInfo> GetInfo(IAttributesOwner attributesOwner, MvcKind necessaryMvcKinds);
}
public class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcKindInfo : object {
    public MvcKind Kind;
    public string AnonymousPropertyName;
    public void Deconstruct(MvcKind& kind, String& anonymousPropertyName);
}
public class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcKindSymbolTableDependencySet : object {
    private MvcKind myMvcKind;
    public MvcKindSymbolTableDependencySet(MvcKind mvcKind);
    public sealed virtual void AddDependenciesTo(IDependencyStore store, string accessName);
}
public abstract class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcReference`1 : MvcBaseReference`1<IExpression> {
    public bool IsInternalValid { get; }
    protected MvcReference`1(IExpression owner, Version version);
    public virtual string GetName();
    public virtual bool IsValid();
    public virtual bool get_IsInternalValid();
    private IExpression BindTo(string value);
    protected IExpression InternalBindTo(IDeclaredElement element);
    protected virtual string PrepareName(ISymbolInfo symbol);
    public virtual TreeTextRange GetTreeTextRange();
}
public static class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcReferenceProvider : object {
    internal static Key`1<IReferenceNameContainer> AllMvcNamesKey;
    private static MvcReferenceProvider();
    public static bool CanHaveFilesWithMvcReferences(IPsiSourceFile sourceFile);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcReferenceProvider/<GetPossibleFilesWithMvcReferences>d__2")]
public static IEnumerable`1<IFile> GetPossibleFilesWithMvcReferences(IPsiSourceFile sourceFile);
}
public abstract class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcReferenceProvider`3 : object {
    private Version myVersion;
    [CompilerGeneratedAttribute]
private MvcKind <NecessaryMvcKinds>k__BackingField;
    protected MvcKind NecessaryMvcKinds { get; }
    protected MvcReferenceProvider`3(Version version, MvcKind necessaryMvcKinds);
    [CompilerGeneratedAttribute]
protected MvcKind get_NecessaryMvcKinds();
    public sealed virtual ReferenceCollection GetReferences(ITreeNode element, ReferenceCollection oldReferences);
    [NotNullAttribute]
private static IReferenceNameContainer GetAllMvcNames(TArgumentsOwner expression);
    protected virtual MvcViewReference`2<TLiteral, TMethod> GetMvcViewReference(IExpression literal, IReadOnlyCollection`1<AvailableControllersInfo> names, MvcKind mvcKind, Version version);
    protected virtual MvcAreaReference`1<TLiteral> GetMvcAreaReference(IExpression literal, Version version);
    protected virtual MvcControllerReference`1<TLiteral> GetMvcControllerReference(IExpression literal, TArgumentsOwner argumentsExpression, Version version);
    protected virtual MvcActionReference`1<TLiteral> GetMvcActionReference(IExpression literal, TArgumentsOwner argumentsExpression, Version version);
    protected virtual MvcViewComponentReference`1<TLiteral> GetMvcViewComponentReference(IExpression literal, TArgumentsOwner argumentsExpression, Version version);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcReferenceProvider`3/<GetImplicitReferences>d__12")]
private IEnumerable`1<IReference> GetImplicitReferences(TArgumentsOwner argumentsOwner);
    [CanBeNullAttribute]
protected abstract virtual IExpression GetMvcLiteral(ITreeNode element, IReferenceNameContainer names, TArgumentsOwner& expression, String& anonymousPropertyName);
    protected abstract virtual HybridCollection`1<string> GetImplicitReferenceNames(TArgumentsOwner argumentsOwner);
    private bool HasImplicitReference(TArgumentsOwner argumentsOwner, IReferenceNameContainer names);
    public sealed virtual bool HasReference(ITreeNode element, IReferenceNameContainer names);
    [CompilerGeneratedAttribute]
private IEnumerable`1<MvcKindInfo> <GetImplicitReferences>b__12_2(IMethod method);
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcReferenceProviderValidator : object {
    private Lifetime myLifetime;
    private IShellLocks myShellLocks;
    private IEnumerable`1<IMvcReferenceProviderFactory> myMvcReferenceProviderFactories;
    private bool myProjectModelReady;
    private SynchronizationPoint mySyncPoint;
    private int myOngoingChanges;
    public MvcReferenceProviderValidator(Lifetime lifetime, IShellLocks shellLocks, ChangeManager changeManager, ISolution solution, MvcReferencedAssembliesService mvcReferencedAssembliesService, IEnumerable`1<IMvcReferenceProviderFactory> mvcReferenceProviderFactories, SynchronizationPoints synchronizationPoints);
    public void FireOnChangedSafe(MvcKind mvcKind, string source);
    private void FireOnChanged(MvcKind mvcKind);
}
public class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcResolveErrorType : ResolveErrorTypeWithTooltip {
    public static MvcResolveErrorType MVC_NOT_RESOLVED;
    public static MvcResolveErrorType MVC_CONTROLLER_NOT_RESOLVED;
    public static MvcResolveErrorType MVC_ACTION_NOT_RESOLVED;
    public static MvcResolveErrorType MVC_VIEW_NOT_RESOLVED;
    public static MvcResolveErrorType MVC_PARTIAL_VIEW_NOT_RESOLVED;
    public static MvcResolveErrorType MVC_AREA_NOT_RESOLVED;
    public static MvcResolveErrorType MVC_TEMPLATE_NOT_RESOLVED;
    public static MvcResolveErrorType MVC_MASTERPAGE_NOT_RESOLVED;
    public static MvcResolveErrorType MVC_VIEW_COMPONENT_NOT_RESOLVED;
    public static MvcResolveErrorType MVC_VIEW_COMPONENT_VIEW_NOT_RESOLVED;
    private MvcResolveErrorType(string name, string tooltip);
    private static MvcResolveErrorType();
    public virtual string CreateTooltip(IReference reference);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcUtil : object {
    public static string ControllerClassSuffix;
    public static string ControllersFolder;
    public static string ViewComponentClassSuffix;
    public static string ViewComponentsFolder;
    private static ParameterKind[] ourNotAllowedParameterKinds;
    private static ThreadLocal`1<HashSet`1<IClass>> ourCircularDependencyProtection;
    public static string AsyncActionSuffix;
    public static string AsyncActionSuffixInit;
    public static string AsyncActionSuffixCompleted;
    public static String[] AsyncActionSuffixes;
    private static IClrTypeName ourViewComponentAttributeName;
    private static IClrTypeName ourAreaAttributeName;
    private static IClrTypeName ourNonActionAttributeName;
    private static string ourAspMvcActionNameSelectorAttribute;
    private static Key`1<Tuple`2<Lifetime, ISymbolTable>> ourAreaSymbolTableForPsiModuleKey;
    private static ConcurrentDictionary`2<MvcKind, Key`1<CachedPsiValue`1<IReadOnlyCollection`1<AvailableControllersInfo>>>> ourCachedControllersKeys;
    private static ConcurrentDictionary`2<string, Regex> ourCachedLayoutRegex;
    private static MvcKind[] ourMvcViewKinds;
    private static Key`1<CachedProjectItemValue`2<IProjectFile, string>> ourCachedWebRootRelPath;
    [ThreadStaticAttribute]
private static HashSet`1<ITreeNode> ourCycleProtection;
    private static IDictionary`2<MvcKind, MvcResolveErrorType> ourMvcResolveErrors;
    private static MvcUtil();
    public static OneToListMap`2<string, ControllerKindInfo> GetAvailableControllers(IPsiModule module, ICollection`1<string> areas, bool includingIntermediateControllers, ITypeElement baseClass);
    public static OneToListMap`2<string, ControllerKindInfo> GetAvailableControllers(IPsiModule module, ISet`1<IPsiModule> modulesFilter, bool includingIntermediateControllers, ITypeElement baseClass);
    [NotNullAttribute]
public static IEnumerable`1<IMethod> GetControllerActions(IClass class, IPsiModule module);
    [NotNullAttribute]
private static IEnumerable`1<IMethod> GetControllerActions(IClass class, ITypeElement baseController);
    [ContractAnnotationAttribute("element:null=>false")]
public static bool IsController(MvcElementsCache mvcElementsCache, IDeclaredElement element);
    public static bool IsAction(MvcElementsCache mvcElementsCache, IDeclaredElement element);
    private static bool IsAction(IMethod method);
    [ExtensionAttribute]
public static IReadOnlyCollection`1<MvcKindInfo> GetMvcKinds(IAttributesOwner element, MvcKind necessaryMvcKinds);
    public static string GetActionName(IMethod method);
    [CanBeNullAttribute]
public static string GetControllerArea(ITypeElement controller);
    [CanBeNullAttribute]
public static string GetControllerName(ITypeElement controller, MvcKind controllerKind, string controllerName);
    public static string GetControllerName(string controllerName, MvcKind controllerKind);
    public static IEnumerable`1<KeyValuePair`2<IProjectPsiModule, VirtualFileSystemPath>> GetControllerFolders(IPsiModule psiModule, IClass class, MvcKind controllerKind, MvcKind viewKind, bool noSort);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcUtil/<GetAreasFolders>d__27")]
[ItemNotNullAttribute]
public static IEnumerable`1<IProjectFolder> GetAreasFolders(IPsiModule psiModule, bool noUpdate);
    [ItemNotNullAttribute]
public static IEnumerable`1<VirtualFileSystemPath> GetAreasPaths(IPsiModule psiModule, bool noUpdate);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcUtil/<FindPsiModulesByOutputLocation>d__29")]
public static IEnumerable`1<IPsiModule> FindPsiModulesByOutputLocation(IPsiModule psiModule);
    private static ISymbolTable BuildAreasSymbolTableForPsiModule(IPsiModule psiModule);
    private static ISymbolTable GetAreasSymbolTableForPsiModule(IPsiModule psiModule, JetHashSet`1<string> existingAreas);
    public static ISymbolTable GetAreasSymbolTable(IPathReference pathReference, bool useReferenceName);
    [NotNullAttribute]
public static VirtualFileSystemPath GetAreaFolder(IPsiSourceFile sourceFile);
    [NotNullAttribute]
public static VirtualFileSystemPath GetAreaFolder(IPsiModule psiModule, VirtualFileSystemPath location, bool noUpdate);
    public static IEnumerable`1<KeyValuePair`2<IProjectPsiModule, VirtualFileSystemPath>> GetControllerFolders(IPsiModule psiModule, Func`2<IProjectPsiModule, IEnumerable`1<ValueTuple`4<IProjectPsiModule, string, string, MvcKind>>> provider, bool noSort);
    public static IReadOnlyCollection`1<AvailableControllersInfo> GetControllers(IArgumentsOwner argumentsOwner, MvcKind controllerKind);
    private static Regex ConvertLayoutToRegex(string layout);
    public static IEnumerable`1<ViewNameInfo> GetMvcViewNames(MvcCache mvcCache, IPsiSourceFile sourceFile, bool noUpdate);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcUtil/<GetMvcViewNames>d__45")]
public static IEnumerable`1<ViewNameInfo> GetMvcViewNames(MvcCache mvcCache, IPsiModule psiModule, IProjectFile projectFile, bool noUpdate);
    public static bool IsPossibleViewsFolder(MvcCache mvcCache, IPsiModule psiModule, IProjectFolder projectFolder);
    public static bool IsPossibleViewComponentsFolder(IProjectFolder projectFolder);
    private static IReadOnlyCollection`1<AvailableControllersInfo> GetControllersNonCached(IArgumentsOwner argumentsOwner, MvcKind controllerKind);
    public static IReadOnlyCollection`1<AvailableControllersInfo> GetControllersNonCached(TContext context, MvcKind controllerKind, Func`2<TContext, ICollection`1<string>> getControllers, Func`2<TContext, ICollection`1<string>> getAreas);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcUtil/<DetermineActionParameters>d__51")]
public static IEnumerable`1<AnonymousTypeDescriptor> DetermineActionParameters(ITreeNode node, Version version);
    public static bool IsModelTypeExpression(ITreeNode node, IArgument& argument, OneToListMap`2& modelTypes);
    public static string DetermineViewModelType(ITreeNode node, IType defaultType);
    private static IEnumerable`1<Pair`2<IExpression, IReadOnlyCollection`1<MvcKindInfo>>> RetrieveArgumentExpressions(IArgumentsOwner argumentsOwner, Nullable`1<MvcKind> kind, bool returnAllKinds);
    private static IList`1<string> ProcessArgumentsExpression(IArgumentsOwner argumentsOwner, MvcKind kind);
    public static IList`1<string> GetAreas(IArgumentsOwner argumentsOwner);
    public static IResolveInfo CheckMvcResolveResult(IResolveInfo result, MvcKind mvcKind);
    [ExtensionAttribute]
public static ResolveResultWithInfo ResolveWithoutCache(IMvcReference reference, Func`2<IDeclaredElement, bool> resolveFilter);
    [CanBeNullAttribute]
public static IExpression GetMvcLiteral(IExpression literal, TExpression& expression, String& anonymousPropertyName);
    public static MvcViewLocationType GetViewLocationType(MvcKind mvcKind, string area, bool forceArea);
    [CanBeNullAttribute]
public static string NormalizeViewFormat(string format);
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<bool, bool> <GetControllerFolders>g__CheckPath|36_5(VirtualFileSystemPath path);
    [CompilerGeneratedAttribute]
internal static IType <DetermineViewModelType>g__TypeChecker|53_0(IEnumerable`1<IType> types);
}
public class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcViewComponentReference`1 : MvcControllerBaseReference`1<TLiteral> {
    public MvcKind MvcKind { get; }
    public MvcViewComponentReference`1(IExpression owner, IArgumentsOwner argumentsExpression, Version version);
    public virtual MvcKind get_MvcKind();
}
public enum JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcViewLocationType : Enum {
    public int value__;
    public static MvcViewLocationType Unknown;
    public static MvcViewLocationType AreaMaster;
    public static MvcViewLocationType AreaPartialView;
    public static MvcViewLocationType AreaView;
    public static MvcViewLocationType Master;
    public static MvcViewLocationType PartialView;
    public static MvcViewLocationType View;
}
public static class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcViewReference : object {
    private static IEnumerable`1<IPsiModule> GetSearchableProjects(IPsiServices psiServices, IPsiModule psiModule);
    private static ISymbolTable GetReferenceSymbolTable(IPsiServices psiServices, string area, string controller, string view, MvcKind mvcKind, IPsiModule psiModule, Version version, VirtualFileSystemPath baseLocation);
    private static ISymbolTable FilterPathSymbolTable(ISymbolTable symbolTable, IProject project);
    private static string ProcessAbsoluteView(IPsiServices psiServices, string view, IProject sourceProject, IProject targetProject, ISymbolTable& symbolTableForProject);
    public static ISymbolTable GetReferenceSymbolTable(IPsiServices myPsiServices, MvcCache myCache, ITreeNode myOwner, IEnumerable`1<AvailableControllersInfo> myNames, MvcKind myMvcKind, Version Version, string name, bool useReferenceName);
    [NotNullAttribute]
public static ISymbolTable GetReferenceSymbolTable(IClass class, string name, MvcKind mvcKind, Version version, string area);
    [NotNullAttribute]
private static IEnumerable`1<IClass> FindInheritedClassesIfNecessary(IClass baseClass, IFinder finder, ISearchDomain searchDomain);
    public static string GetViewName(VirtualFileSystemPath path, String[] location);
}
[DescriptionAttribute("View")]
public class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcViewReference`2 : MvcReference`1<TLiteral> {
    private IReadOnlyCollection`1<AvailableControllersInfo> myNames;
    private MvcKind myMvcKind;
    private IPsiServices myPsiServices;
    private MvcCache myCache;
    public MvcKind MvcKind { get; }
    public MvcViewReference`2(IExpression owner, IReadOnlyCollection`1<AvailableControllersInfo> names, MvcKind mvcKind, Version version);
    public sealed virtual IEnumerable`1<KeyValuePair`2<IProjectPsiModule, VirtualFileSystemPath>> GetControllerFolders();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public sealed virtual VirtualFileSystemPath GetBasePath();
    public sealed virtual ISymbolFilter[] GetPathFilters();
    private static ISymbolFilter[] GetPathFilters(IProject project, IEnumerable`1<string> expectedExtensions);
    protected virtual string PrepareName(ISymbolInfo symbol);
    [CanBeNullAttribute]
public static IMethod GetAction(ITreeNode element);
    public static IResolveInfo CheckViewResolveResult(IResolveInfo result, IReference reference);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public virtual IReference BindTo(IDeclaredElement element);
    public virtual MvcKind get_MvcKind();
    [CompilerGeneratedAttribute]
private IEnumerable`1<ValueTuple`4<IProjectPsiModule, string, string, MvcKind>> <GetControllerFolders>b__5_0(IProjectPsiModule module);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcViewResolver : object {
    private IEnumerable`1<IMvcViewResolver> myResolvers;
    public MvcViewResolver(IEnumerable`1<IMvcViewResolver> resolvers);
    public sealed virtual ICollection`1<string> GetViewLocationFormats(IPsiModule psiModule, MvcViewLocationType viewLocationType);
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.IMvcViewResolver")]
[MeansImplicitUseAttribute]
[ObsoleteAttribute("Use assembly level annotations attributes: AspMvcAreaMasterLocationFormat, AspMvcAreaPartialViewLocationFormat, AspMvcAreaViewLocationFormat, AspMvcMasterLocationFormat, AspMvcPartialViewLocationFormat, AspMvcViewLocationFormat")]
public class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcViewResolverAttribute : SolutionComponentAttribute {
    public MvcViewResolverAttribute(Instantiation instantiation);
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcViewResolverEx : object {
    internal static IDictionary`2<IClrTypeName, MvcViewLocationType> ViewLocationFormatAttributes;
    private MvcReferenceProviderValidator myMvcReferenceProviderValidator;
    private IDictionary`2<MvcViewLocationType, Func`2<IPsiModule, OrderedHashSet`1<string>>> myViewLocationRetrievers;
    private IDictionary`2<MvcViewLocationType, IChangeProvider> myViewLocationProviders;
    public MvcViewResolverEx(Lifetime lifetime, ChangeManager changeManager, MvcReferenceProviderValidator mvcReferenceProviderValidator, PsiModuleAttributesCache psiModuleAttributesCache);
    private static MvcViewResolverEx();
    private void OnChange(ChangeEventArgs args);
    public sealed virtual ICollection`1<string> GetViewLocationFormats(IPsiModule psiModule, MvcViewLocationType viewLocationType);
}
public class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcViewSymbolTableDependencySet : object {
    private MvcViewLocationType myMvcViewLocationType;
    public MvcViewSymbolTableDependencySet(MvcViewLocationType mvcViewLocationType);
    public sealed virtual void AddDependenciesTo(IDependencyStore store, string accessName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.PathReferenceProvider`2 : object {
    [CompilerGeneratedAttribute]
private IPsiServices <psiServices>P;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IProject <project>P;
    private PathReferenceAnnotationProvider myPathReferenceAnnotationProvider;
    protected PathReferenceProvider`2(CodeAnnotationsCache codeAnnotationsCache, IPsiServices psiServices, IProject project);
    protected abstract virtual string GetInvokedReferenceName(TArgumentsOwner argumentsOwner);
    public sealed virtual ReferenceCollection GetReferences(ITreeNode element, ReferenceCollection oldReferences);
    private TLiteral TryGetLiteral(ITreeNode element);
    public sealed virtual bool HasReference(ITreeNode element, IReferenceNameContainer names);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.ZoneMarker : object {
}
public static class JetBrains.ReSharper.Feature.Services.Asp.Dependencies.MvcDependencyFactory : object {
    public static Dependency SuppressAsyncSuffixInActionNamesDependency { get; }
    public static Dependency CreateDependency(MvcKind mvcKind, string mvcName);
    public static Dependency CreateDependency(MvcViewLocationType viewLocationType, string viewName);
    public static Dependency get_SuppressAsyncSuffixInActionNamesDependency();
}
public static class JetBrains.ReSharper.Feature.Services.Asp.Dependencies.RazorDependencyFactory : object {
    public static Dependency CreateTagHelperDependency(string tagHelperName);
}
public interface JetBrains.ReSharper.Feature.Services.Asp.ExpectedTypes.IMvcExpectedTypesProvider {
}
public static class JetBrains.ReSharper.Feature.Services.Asp.ExpectedTypes.MvcExpectedTypesUtil : object {
    [NotNullAttribute]
public static IReadOnlyList`1<ExpectedType> ProcessExpectedTypes(IExpression expression, IReadOnlyList`1<ExpectedType> baseExpectedTypes, Func`2<IType, IExpectedTypeConstraint> createTypeConstraint);
}
public static class JetBrains.ReSharper.Feature.Services.Asp.Generate.GeneratorAspKinds : object {
    public static string MasterpageContent;
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Asp.AspLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Asp.HtmlEntities.AspHtmlEntitiesNodeTypeSet : HtmlEntitiesNodeTypeSet {
    public AspHtmlEntitiesNodeTypeSet(IAspTokenNodeTypes tokenTypes);
}
[FileTemplatesAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Asp.LiveTemplates.AspFileTemplatesSupport : AspFileTemplatesSupportBase {
    public string Name { get; }
    protected ProjectLanguage Language { get; }
    public virtual string get_Name();
    protected virtual ProjectLanguage get_Language();
}
public abstract class JetBrains.ReSharper.Feature.Services.Asp.LiveTemplates.AspFileTemplatesSupportBase : object {
    public string Name { get; }
    public IEnumerable`1<ITemplateScopePoint> ScopePoints { get; }
    protected ProjectLanguage Language { get; }
    public abstract virtual string get_Name();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Asp.LiveTemplates.AspFileTemplatesSupportBase/<get_ScopePoints>d__3")]
public virtual IEnumerable`1<ITemplateScopePoint> get_ScopePoints();
    protected abstract virtual ProjectLanguage get_Language();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Asp.LiveTemplates.AspProjectScopeProvider : ScopeProvider {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Asp.LiveTemplates.AspProjectScopeProvider/<ProvideScopePoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> ProvideScopePoints(TemplateAcceptanceContext context);
    [CompilerGeneratedAttribute]
private ITemplateScopePoint <.ctor>b__0_0(string t);
}
[ScopeCategoryUIProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Asp.LiveTemplates.Scope.AspProjectScopeCategoryUIProvider : ScopeCategoryUIProvider {
    public string CategoryCaption { get; }
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Asp.LiveTemplates.Scope.AspProjectScopeCategoryUIProvider/<BuildAllPoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> BuildAllPoints();
    public virtual string get_CategoryCaption();
}
public class JetBrains.ReSharper.Feature.Services.Asp.LiveTemplates.Scope.InAnyWebProject : InAnyProject {
    private static Guid DefaultUID;
    public string DefaultFileName { get; }
    public string PresentableShortName { get; }
    private static InAnyWebProject();
    public virtual Guid GetDefaultUID();
    public virtual string get_DefaultFileName();
    public virtual string get_PresentableShortName();
}
public class JetBrains.ReSharper.Feature.Services.Asp.LiveTemplates.Scope.InAnyWebProjectImpl : MacroImplementationScopeProviderBase {
}
public class JetBrains.ReSharper.Feature.Services.Asp.LiveTemplates.Scope.InLanguageSpecificWebProject : InAnyWebProject {
    private static Guid DefaultUID;
    [CompilerGeneratedAttribute]
private ProjectLanguage <ProjectLanguage>k__BackingField;
    private ProjectLanguage ProjectLanguage { get; }
    public InLanguageSpecificWebProject(ProjectLanguage projectLanguage);
    private static InLanguageSpecificWebProject();
    public virtual Guid GetDefaultUID();
    [CompilerGeneratedAttribute]
private ProjectLanguage get_ProjectLanguage();
    public virtual bool IsSubsetOf(ITemplateScopePoint other);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Asp.LiveTemplates.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Asp.AspLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.Asp.MathingBrace.AspMatchingBraceProvider : HtmlMatchingBraceProvider {
    public AspMatchingBraceProvider(AspLanguage language, IAspTokenNodeTypes tokenNodeTypes);
}
[OptionsPageAttribute("Asp.Naming", "Naming Style", "JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons/NamingConvention")]
public class JetBrains.ReSharper.Feature.Services.Asp.Naming.AspNamingOptionsPage : CustomNamingOptionsPage`1<WebNamingSettingsKey> {
    [PublicAPIAttribute]
public static string PID;
    public AspNamingOptionsPage(Lifetime lifetime, OptionsSettingsSmartContext settings, INamedElementsManager namedElementsManager, IThemedIconManager iconman);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Asp.Naming.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Asp.AspLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Asp.Navigation.Goto.AspReferencedCodeSearchHelper : object {
    public sealed virtual bool RemoveNamespaceImport(ITreeNode importNamespaceNode);
    public sealed virtual ICollection`1<NamespaceImportData> GetNamespaceImportsList(IFile file);
    public sealed virtual ICollection`1<Pair`2<IReference, IDeclaredElement>> GetUpdatedTargets(IReference reference, IDeclaredElement target);
    public sealed virtual IDeclaredElement ProvideDeclaredElementsFromResolve(IReference reference, IResolveResult resolveResult);
}
public class JetBrains.ReSharper.Feature.Services.Asp.Navigation.Goto.GotoSharepointPredefinedPsiSourceFileProvider : object {
    private static Key`1<IDictionary`2<MatchingInfo, VirtualFileSystemPath>> ourRelativePathStringToNavigationPathKey;
    public Func`2<MatcherScore, int> ItemsPriorityFunc { get; }
    private static GotoSharepointPredefinedPsiSourceFileProvider();
    public sealed virtual bool IsApplicable(INavigationScope scope, GotoContext gotoContext, IIdentifierMatcher matcher);
    private static SharepointPredefinedModulesFactory GetSharepointModulesFactory(INavigationScope scope);
    public sealed virtual IEnumerable`1<MatchingInfo> FindMatchingInfos(IIdentifierMatcher matcher, INavigationScope scope, GotoContext gotoContext);
    public sealed virtual IEnumerable`1<IOccurrence> GetOccurrencesByMatchingInfo(MatchingInfo navigationInfo, INavigationScope scope, GotoContext gotoContext);
    public sealed virtual Func`2<MatcherScore, int> get_ItemsPriorityFunc();
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Asp.Navigation.Goto.SharepointOccurrenceInfoProvider : object {
    public sealed virtual IDeclaredElementEnvoy GetTypeMember(IOccurrence occurrence);
    public sealed virtual IDeclaredElementEnvoy GetTypeElement(IOccurrence occurrence);
    public sealed virtual IDeclaredElementEnvoy GetNamespace(IOccurrence occurrence);
    public sealed virtual OccurrenceMergeContext GetMergeContext(IOccurrence occurrence);
    public sealed virtual TextRange GetTextRange(IOccurrence occurrence);
    public sealed virtual ProjectModelElementEnvoy GetProjectModelElementEnvoy(IOccurrence occurrence);
    public sealed virtual SourceFilePtr GetSourceFilePtr(IOccurrence occurrence);
    public sealed virtual bool IsApplicable(IOccurrence occurrence);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Asp.Navigation.Goto.SharepointPredefinedDynamicMasterPageFileNavigator : DefaultDeclaredElementNavigator {
    private SharepointPredefinedModulesFactory mySharepointModulesFactory;
    private IAspDeclaredElementsCache myAspDeclaredElementsCache;
    private FileSystemPathNavigator myNavigator;
    public SharepointPredefinedDynamicMasterPageFileNavigator(ISolution solution, IFeaturePartsContainer shellFeaturePartsContainer, SharepointPredefinedModulesFactory sharepointModulesFactory, IAspDeclaredElementsCache aspDeclaredElementsCache, FileSystemPathNavigator navigator, ISettingsStore settingsStore);
    public virtual bool IsApplicable(IDeclaredElement declaredElement);
    public virtual void Navigate(IDeclaredElement declaredElement, PopupWindowContextSource windowContext, bool transferFocus, SolutionFeaturePartsContainer container, Nullable`1<OccurrencePresentationOptions> options, TabOptions tabOptions);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Asp.Navigation.Goto.SharepointPredefinedPsiSourceFileNavigator : DefaultDeclaredElementNavigator {
    private SharepointPredefinedModulesFactory mySharepointModulesFactory;
    private FileSystemPathNavigator myNavigator;
    public SharepointPredefinedPsiSourceFileNavigator(ISolution solution, IFeaturePartsContainer shellFeaturePartsContainer, SharepointPredefinedModulesFactory sharepointModulesFactory, FileSystemPathNavigator navigator, ISettingsStore settingsStore);
    public virtual bool IsApplicable(IDeclaredElement declaredElement);
    public virtual void Navigate(IDeclaredElement declaredElement, PopupWindowContextSource windowContext, bool transferFocus, SolutionFeaturePartsContainer solutionFeaturePartsContainer, Nullable`1<OccurrencePresentationOptions> options, TabOptions tabOptions);
}
public class JetBrains.ReSharper.Feature.Services.Asp.Navigation.Goto.SharepointPredefinedPsiSourceFileOccurrence : object {
    [CompilerGeneratedAttribute]
private string <RelativePathString>k__BackingField;
    private VirtualFileSystemPath myNavigationPath;
    private ISolution mySolution;
    private OccurrenceMergeContext myMergeContext;
    [CompilerGeneratedAttribute]
private OccurrencePresentationOptions <PresentationOptions>k__BackingField;
    public string RelativePathString { get; }
    public OccurrenceType OccurrenceType { get; }
    public bool IsValid { get; }
    public OccurrencePresentationOptions PresentationOptions { get; public set; }
    public OccurrenceMergeContext MergeContext { get; }
    public SharepointPredefinedPsiSourceFileOccurrence(string relativePathString, VirtualFileSystemPath navigationPath, ISolution solution);
    [CompilerGeneratedAttribute]
public string get_RelativePathString();
    public sealed virtual ISolution GetSolution();
    public TextRange GetTextRange();
    public ProjectModelElementEnvoy GetProjectModelElementEnvoy();
    public DeclaredElementEnvoy`1<ITypeMember> GetTypeMember();
    public DeclaredElementEnvoy`1<ITypeElement> GetTypeElement();
    public DeclaredElementEnvoy`1<INamespace> GetNamespace();
    public sealed virtual OccurrenceType get_OccurrenceType();
    public sealed virtual bool get_IsValid();
    public sealed virtual string DumpToString();
    [CompilerGeneratedAttribute]
public sealed virtual OccurrencePresentationOptions get_PresentationOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PresentationOptions(OccurrencePresentationOptions value);
    public OccurrenceMergeContext get_MergeContext();
    public sealed virtual bool Navigate(ISolution solution, PopupWindowContextSource windowContext, bool transferFocus, TabOptions tabOptions);
    protected bool Equals(SharepointPredefinedPsiSourceFileOccurrence other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Asp.Navigation.Goto.SharepointPredefinedPsiSourceFileOccurrencePresenter : object {
    public sealed virtual bool Present(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions occurrencePresentationOptions);
    public sealed virtual bool IsApplicable(IOccurrence occurrence);
}
[RelatedFilesProviderAttribute("JetBrains.ProjectModel.AspProjectFileType", "16")]
public class JetBrains.ReSharper.Feature.Services.Asp.Navigation.GoToRelated.AspRelatedFilesProvider : DefaultRelatedFilesProvider {
    public virtual IEnumerable`1<RelatedFileOccurence> GetRelatedFiles(IProjectFile projectFile);
}
[RelatedFilesProviderAttribute("JetBrains.ProjectModel.KnownProjectFileType", "16")]
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Asp.Navigation.GoToRelated.MvcRelatedFilesProvider : object {
    private MvcReferencedAssembliesService myMvcReferencedAssembliesService;
    public MvcRelatedFilesProvider(MvcReferencedAssembliesService mvcReferencedAssembliesService);
    public sealed virtual IEnumerable`1<RelatedFileOccurence> GetRelatedFiles(IProjectFile projectFile);
    private static MvcKind MvcKindToShow(MvcKind kind);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Asp.Navigation.ZoneMarker : object {
}
[OptionsPageAttribute("Aspx", "ASP.NET", "JetBrains.ReSharper.Feature.Services.Resources.Web.FeaturesWebOptionsThemedIcons/AspNetOptionPage")]
public class JetBrains.ReSharper.Feature.Services.Asp.OptionPages.AspxPage : AEmptyOptionsPage {
    public static string PID;
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Asp.OptionPages.ZoneMarker : object {
}
public class JetBrains.ReSharper.Feature.Services.Asp.Options.AspTypingAssistOptions : HtmlTypingAssistOptions`1<AspTypingAssistSettings> {
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.Options.TypingAssistSettings", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "ASPNETTypingAssistanceSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.Asp.Options.AspTypingAssistSettings : HtmlTypingAssistSettings {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Asp.Options.PredefinedAspTypingAssistSettings : HaveDefaultSettings`1<AspTypingAssistSettings> {
    public string Name { get; }
    public PredefinedAspTypingAssistSettings(ILogger logger, ISettingsSchema settingsSchema);
    public virtual void InitDefaultSettings(ISettingsStorageMountPoint mountPoint);
    public virtual string get_Name();
}
[RearrangeableElementTypeAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Asp.RearrangeCode.AspDirectiveAttributeRearrangeableElementType : HtmlAttributeRearrangeableElementTypeBase`2<IAspDirectiveAttribute, IAspDirective> {
}
public interface JetBrains.ReSharper.Feature.Services.Asp.Search.IMasterPageSpecialElementFinder {
}
[SpecialElementFinderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Asp.Search.MasterPageBaseSpecialFinder : object {
    private SearchDomainFactory mySearchDomainFactory;
    public ReferencePreferenceKind Kind { get; }
    public PreferLocationStyle LocationStyle { get; }
    public MasterPageBaseSpecialFinder(SearchDomainFactory searchDomainFactory);
    public sealed virtual object GetSearchTarget(IFile file, DocumentRange range, DocumentOffset caretOffset);
    public sealed virtual void FindOccurrences(object target, IFindResultConsumer`1<IOccurrence> consumer, IProgressIndicator progressIndicator, ISearchDomain scopeDomain);
    public sealed virtual string Present(object target);
    public sealed virtual string GetTitle();
    public sealed virtual ReferencePreferenceKind get_Kind();
    public sealed virtual ISearchDomainContext GetSearchDomainContext(object target);
    public sealed virtual IEnumerable`1<DocumentRange> GetTargetRanges(object target, IProjectFile file);
    public sealed virtual PreferLocationStyle get_LocationStyle();
}
[SpecialElementFinderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Asp.Search.MasterPageInheritorsSpecialFinder : object {
    private SearchDomainFactory mySearchDomainFactory;
    public ReferencePreferenceKind Kind { get; }
    public PreferLocationStyle LocationStyle { get; }
    public MasterPageInheritorsSpecialFinder(SearchDomainFactory searchDomainFactory);
    public sealed virtual object GetSearchTarget(IFile file, DocumentRange range, DocumentOffset caretOffset);
    public sealed virtual void FindOccurrences(object target, IFindResultConsumer`1<IOccurrence> consumer, IProgressIndicator progressIndicator, ISearchDomain scopeDomain);
    public sealed virtual string Present(object target);
    public sealed virtual string GetTitle();
    public sealed virtual ReferencePreferenceKind get_Kind();
    public sealed virtual ISearchDomainContext GetSearchDomainContext(object target);
    public sealed virtual IEnumerable`1<DocumentRange> GetTargetRanges(object target, IProjectFile file);
    public sealed virtual PreferLocationStyle get_LocationStyle();
}
[PsiSharedComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Asp.Search.MvcAttributeNames : object {
    internal static IClrTypeName[] MvcControllerAttributeNames;
    internal static IClrTypeName[] MvcActionAttributeNames;
    public static IClrTypeName[] MvcViewAttributeNames;
    internal static IClrTypeName[] AllMvcAttributeNames;
    public IEnumerable`1<IClrTypeName> AttributeClrNamesToWatch { get; }
    private static MvcAttributeNames();
    public sealed virtual IEnumerable`1<IClrTypeName> get_AttributeClrNamesToWatch();
}
internal class JetBrains.ReSharper.Feature.Services.Asp.Search.MvcReferenceSearcher : object {
    private MvcReferencedAssembliesService myMvcReferencedAssembliesService;
    private IDeclaredElementsSet myElements;
    private ReferenceSearcherParameters myReferenceSearcherParameters;
    private bool myFindLateBound;
    private ICollection`1<string> myAllReferenceNames;
    public MvcReferenceSearcher(IDomainSpecificSearcherFactory searchFactory, MvcReferencedAssembliesService mvcReferencedAssembliesService, IDeclaredElementsSet elements, ReferenceSearcherParameters referenceSearcherParameters, bool findLateBound);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Asp.Search.MvcReferenceSearcher/<GetImplicitSearchTargets>d__6")]
private static IEnumerable`1<IProjectItem> GetImplicitSearchTargets(IDeclaredElement element, IProjectPsiModule psiModule);
    public sealed virtual bool ProcessProjectItem(IPsiSourceFile sourceFile, IFindResultConsumer`1<TResult> consumer);
    public sealed virtual bool ProcessElement(ITreeNode element, IFindResultConsumer`1<TResult> consumer);
}
[PsiComponentAttribute("0")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Asp.Search.MvcSearchFactory : DomainSpecificSearcherFactoryBase {
    private SearchDomainFactory mySearchDomainFactory;
    private IPsiModules myPsiModules;
    private ISolution mySolution;
    private MvcCache myMvcCache;
    private MvcElementsCache myMvcElementsCache;
    private MvcReferencedAssembliesService myMvcReferencedAssembliesService;
    public MvcSearchFactory(SearchDomainFactory searchDomainFactory, IPsiModules psiModules, ISolution solution, MvcCache mvcCache, MvcElementsCache mvcElementsCache, MvcReferencedAssembliesService mvcReferencedAssembliesService);
    public bool IsPossibleMvcDeclaredElement(IDeclaredElement element);
    private bool IsApplicablePathElement(IPathDeclaredElement pathDeclaredElement);
    public bool IsMvcApplied(IDeclaredElement element);
    public virtual IEnumerable`1<string> GetAllPossibleWordsInFile(IDeclaredElement element);
    public IEnumerable`1<string> CollectImplicitNames(IClrTypeName[] attributeNames);
    public virtual IClrTypeName[] GetAttributeNamesAndExplicitNames(IDeclaredElement element, List`1& explicitNames);
    public virtual bool IsCompatibleWithLanguage(PsiLanguageType languageType);
    public virtual IDomainSpecificSearcher CreateReferenceSearcher(IDeclaredElementsSet elements, ReferenceSearcherParameters referenceSearcherParameters);
    public virtual IDomainSpecificSearcher CreateLateBoundReferenceSearcher(IDeclaredElementsSet elements, ReferenceSearcherParameters referenceSearcherParameters);
    public virtual ISearchDomain GetDeclaredElementSearchDomain(IDeclaredElement declaredElement);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[PsiComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Asp.Search.MvcSearchFilter : object {
    [CompilerGeneratedAttribute]
private MvcSearchFactory <factory>P;
    public SearchFilterKind Kind { get; }
    public MvcSearchFilter(MvcSearchFactory factory);
    public sealed virtual SearchFilterKind get_Kind();
    public sealed virtual object TryGetKey(IDeclaredElement declaredElement);
    public sealed virtual bool IsAvailable(SearchPattern pattern);
    public sealed virtual bool CanContainReferences(IPsiSourceFile sourceFile, object key);
}
internal class JetBrains.ReSharper.Feature.Services.Asp.SelectEmbracingConstruct.AspDotSelection : HtmlDotSelection`1<IAspFile> {
    public AspDotSelection(ISelectEmbracingConstructProviderWithSecondaryPsi`1<IAspFile> provider, IAspFile file, TreeOffset offset, bool selectBetterToken, bool useCamelHumps, bool appendInjectedPsi);
    protected virtual ISelectedRange GetParentInternal(ITokenNode tokenNode);
    protected virtual ISelectedRange CreateTokenPartSelection(ITokenNode tokenNode, TreeTextRange treeTextRange);
    protected virtual bool IsPrevTokenBetter(ITokenNode prevToken, ITokenNode tokenNode);
}
public class JetBrains.ReSharper.Feature.Services.Asp.SelectEmbracingConstruct.AspElementRange : HtmlElementRange`1<IAspFile> {
    public ExtendToTheWholeLinePolicy ExtendToWholeLine { get; }
    public ISelectedRange Parent { get; }
    public AspElementRange(ISelectEmbracingConstructProviderWithSecondaryPsi`1<IAspFile> provider, ITreeNode element);
    public virtual ExtendToTheWholeLinePolicy get_ExtendToWholeLine();
    public virtual ISelectedRange get_Parent();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Asp.AspLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Asp.SelectEmbracingConstruct.AspSelectEmbracingConstructProvider : HtmlSelectEmbracingConstructProvider {
    public AspSelectEmbracingConstructProvider(ISettingsStore settingsStore);
    public virtual ISelectedRange CreateDotSelectedRange(IHtmlFile htmlFile, TreeOffset treeOffset, bool selectBetterToken, bool appendInjectedPsi);
    public virtual ISelectedRange CreateElementSelectedRange(ITreeNode node);
    public virtual IWrapperRange CreateWrapperRange(IDocument document, IHtmlFile htmlFile, ISelectedRange primaryRange, ISelectedTreeRange codeBehindRange, IFile secondaryFile);
}
internal class JetBrains.ReSharper.Feature.Services.Asp.SelectEmbracingConstruct.AspTokenPartSelection : HtmlTokenPartSelection`1<IAspFile> {
    public ExtendToTheWholeLinePolicy ExtendToWholeLine { get; }
    public ISelectedRange Parent { get; }
    public AspTokenPartSelection(ISelectEmbracingConstructProviderWithSecondaryPsi`1<IAspFile> provider, ITokenNode token, TreeTextRange rangeWithin);
    public virtual ExtendToTheWholeLinePolicy get_ExtendToWholeLine();
    protected virtual Tuple`3<int, int, bool> GetParentCalculationData(TokenNodeType tokenType, string tokenText);
    public virtual ISelectedRange get_Parent();
    protected virtual ISelectedRange BuildTokenPartSelection(ISelectEmbracingConstructProviderWithSecondaryPsi`1<IAspFile> provider, ITokenNode token, TreeTextRange rangeWithin);
}
internal class JetBrains.ReSharper.Feature.Services.Asp.SelectEmbracingConstruct.AspWrapperRange : HtmlWrapperRange`1<IAspFile> {
    private IAspTokenNodeTypes myAspTokenNodeTypes;
    public AspWrapperRange(IDocument document, IAspFile primaryFile, ISelectedTreeRange secondarySelection, ISelectedRange primarySelection, IFile secondaryFile);
    protected virtual bool IsSpecialToken(TokenNodeType tokenNodeType);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Asp.AspLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Asp.StructuralSearch.AspHtmlTagPlaceholderFactory : HtmlTagPlaceholderFactory {
    public string TagName { get; }
    public virtual IPlaceholder CreatePlaceholder(PlaceholderInfo info);
    public virtual string get_TagName();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Asp.AspLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Asp.StructuralSearch.AspPlaceholderGuesser : HtmlPlaceholderGuesser {
    protected virtual IPlaceholder CreateTagPlaceholder(string name);
}
[StructuralSearcherFactoryAttribute("JetBrains.ReSharper.Psi.Asp.AspLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Asp.StructuralSearch.AspStructuralSearcherFactory : HtmlStructuralSearcherFactory {
    public AspStructuralSearcherFactory(AspLanguage language, IComponentContainer container, HtmlStructuralSearchPatternFromCodeCreator creator);
}
public class JetBrains.ReSharper.Feature.Services.Asp.StructuralSearch.AspTagPlaceholder : HtmlTagPlaceholder {
    private string myControlType;
    private bool myExactType;
    private static string CONTROL_TYPE_ATTRIBUTE;
    private static string EXACT_TYPE_ATTRIBUTE;
    public string ControlType { get; public set; }
    public bool ExactType { get; public set; }
    public string Description { get; }
    public AspTagPlaceholder(string name, string cssSelector, string controlType, bool exactType);
    public AspTagPlaceholder(PlaceholderInfo info);
    public string get_ControlType();
    public void set_ControlType(string value);
    public bool get_ExactType();
    public void set_ExactType(bool value);
    public virtual string get_Description();
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
    public virtual IPlaceholder Clone();
    public virtual PlaceholderInfo ToPlaceholderInfo();
    public bool Equals(AspTagPlaceholder other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Asp.AspLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Asp.StructuralSearch.AspTagPlaceholderFactory : PlaceholderFactoryBase`1<HtmlTagPlaceholder> {
    public string TagName { get; }
    public virtual IPlaceholder CreatePlaceholder(PlaceholderInfo info);
    public virtual string get_TagName();
}
public class JetBrains.ReSharper.Feature.Services.Asp.StructuralSearch.AspTagPlaceholderMatcher : HtmlTagPlaceholderMatcher {
    private ITypeMatcher myTypeMatcher;
    public AspTagPlaceholderMatcher(AspTagPlaceholder placeholder, StructuralSearchPatternParams params);
    protected virtual bool CheckMatch(IMatchingContext context, IHtmlTag tag);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
}
public class JetBrains.ReSharper.Feature.Services.Asp.StructuralSearch.AspTagPlaceholderTypeMatcher : object {
    private string myPlaceholderName;
    private string myType;
    private bool myExactType;
    public string PlaceholderName { get; }
    public bool ExactType { get; }
    public string ShortName { get; }
    public AspTagPlaceholderTypeMatcher(AspTagPlaceholder placeholder);
    public sealed virtual string get_PlaceholderName();
    public sealed virtual IType GetPlaceholderType(ITreeNode element);
    public sealed virtual IType GetElementType(ITreeNode element);
    public sealed virtual bool get_ExactType();
    public sealed virtual bool MatchType(ITreeNode element, IMatchingContext context);
    public sealed virtual bool MatchType(ITreeNode element, IType elementType, IMatchingContext context);
    public sealed virtual string get_ShortName();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Asp.AspLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Asp.TodoItems.AspTodoContentsProvider : HtmlTodoContentsProvider {
    private IAspTokenNodeTypes myAspTokenNodeTypes;
    public AspTodoContentsProvider(IAspTokenNodeTypes aspTokenNodeTypes);
    public virtual Nullable`1<TextRange> GetTokenContentsRange(string documentText, TextRange tokenRange, TokenNodeType tokenType);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Asp.TypingAssist.AspChangedTagNameTracker : SpecificChangedTagNameTracker`2<AspTypingAssistSettings, AspProjectFileType> {
    public AspChangedTagNameTracker(ISolution solution, ISettingsStore settingsStore, CachingLexerService cachingLexerService, ICommandProcessor commandProcessor, TextControlTypingHandlers textControlTypingHandlers, Lifetime lifetime, ITextControlManager textControlManager, IShellLocks shellLocks, IActionManager actionManager, IEnsureWritableHandler ensureWritableHandler, DocumentManager documentManager, ILookupWindowManager lookupWindowManager, IPsiFiles psiFiles, ChangeManager changeManager, ITypingAssistManager typingAssistManager);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Asp.TypingAssist.AspTypingAssist : WebTypingAssist`4<AspProjectFileType, AspLanguage, IAspTokenNodeTypes, AspTypingAssistSettings> {
    public AspTypingAssist(Lifetime lifetime, TypingAssistDependencies dependencies, ICodeCompletionSessionManager completionSessionManager, ILanguageManager languageManager, IEnumerable`1<ISpecialTagSmartEnterHandler> smartEnterHandlers, ParameterInfoPopupController parameterInfoPopupController, IEnumerable`1<ISecondaryTypingAssist> secondaryTypingAssists);
    protected virtual bool HandleQuoteAtTokenStart(ITextControl textControl, CachingLexer lexer, IAspTokenNodeTypes tokenTypes);
    protected virtual bool IsTokenEnd(IHtmlTokenNodeType`1<IAspTokenNodeTypes> tokenType);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Asp.TypingAssist.ZoneMarker : object {
}
public class JetBrains.ReSharper.Feature.Services.Asp.Util.AspMethodReferenceHelper`1 : MethodReferenceHelper`1<T> {
    private IType myReturnType;
    private IEnumerable`1<Pair`2<IType, string>> myParameterTypes;
    private IPsiSourceFile mySourceFile;
    public AspMethodReferenceHelper`1(T reference);
    public virtual AccessRights GetAccessRights();
    public virtual string SuggestName(T reference);
    public virtual MemberSignature GetMemberSignature();
}
public class JetBrains.ReSharper.Feature.Services.Asp.Util.EventHandlerReferenceHelper : MethodReferenceHelper`1<IEventHandlerReference> {
    private IDelegate myDelegate;
    private MemberSignature myMemberSignature;
    private AccessRights myAccessRights;
    public IDelegate Delegate { get; }
    public EventHandlerReferenceHelper(IEventHandlerReference reference);
    public IDelegate get_Delegate();
    public virtual AccessRights GetAccessRights();
    private static ITypeElement GetTargetTypeElement(IEventHandlerReference reference);
    public virtual string SuggestName(IEventHandlerReference reference);
    public virtual MemberSignature GetMemberSignature();
}
public interface JetBrains.ReSharper.Feature.Services.Asp.Util.IAspLanguageSpecificUtil {
    public abstract virtual bool IsPageClassDeclaration(ITypeDeclaration typeDeclaration);
    public abstract virtual bool IsUserTextDeclaration(IDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Feature.Services.Asp.Util.MethodReferenceHelper`1 : object {
    [CanBeNullAttribute]
private ITypeDeclaration myTargetTypeDeclaration;
    [CanBeNullAttribute]
public ITypeDeclaration TargetTypeDeclaration { get; }
    protected MethodReferenceHelper`1(ITypeDeclaration targetTypeDeclaration);
    public ITypeDeclaration get_TargetTypeDeclaration();
    [CanBeNullAttribute]
public static ITypeDeclaration GetTargetDeclaration(T reference, ITypeElement typeElement);
    public abstract virtual AccessRights GetAccessRights();
    public static bool IsSuitableTargetDeclaration(IDeclaration typeDeclaration);
    public abstract virtual string SuggestName(T reference);
    public abstract virtual MemberSignature GetMemberSignature();
}
public static class JetBrains.ReSharper.Feature.Services.Asp.Util.TargetTypeDeclarationUtil : object {
    public static ITypeDeclaration GetTargetDeclaration(IReference reference, ITypeElement typeElement, Func`2<IDeclaration, bool> isSuitable);
}
[PsiSharedComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Asp.VB.Caches.MvcVBCacheProcessor : TreeNodeVisitor`1<MvcCacheContext> {
    public PsiLanguageType Language { get; }
    public virtual void VisitMemberInitializer(IMemberInitializer memberInitializerParam, MvcCacheContext context);
    public virtual void VisitAssignmentStatement(IAssignmentStatement assignmentStatementParam, MvcCacheContext context);
    private void DetectLayoutChanges(IReference reference, IVBExpression expression, MvcCacheContext context);
    public virtual void VisitInvocationStatement(IInvocationStatement invocationStatement, MvcCacheContext context);
    public sealed virtual bool InteriorShouldBeProcessed(ITreeNode element, MvcCacheContext context);
    public sealed virtual bool IsProcessingFinished(MvcCacheContext context);
    public sealed virtual void ProcessAfterInterior(ITreeNode element, MvcCacheContext context);
    public sealed virtual void ProcessBeforeInterior(ITreeNode element, MvcCacheContext context);
    public sealed virtual void Process(IFile file, MvcCacheContext context);
    public sealed virtual PsiLanguageType get_Language();
    private static string GetStringValue(IConstantValueOwner constant);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Asp.VB.CodeStructure.SkipNodesProvider : object {
    private static JetHashSet`1<TokenNodeType> ourSkipNodes;
    public JetHashSet`1<TokenNodeType> Nodes { get; }
    private static SkipNodesProvider();
    public sealed virtual JetHashSet`1<TokenNodeType> get_Nodes();
}
internal class JetBrains.ReSharper.Feature.Services.Asp.VB.CustomReferences.VbMvcActionReference : MvcActionReference`1<IVBLiteralExpression> {
    public VbMvcActionReference(IExpression owner, IArgumentsOwner argumentsExpression, Version version);
}
internal class JetBrains.ReSharper.Feature.Services.Asp.VB.CustomReferences.VbMvcAreaReference : MvcAreaReference`1<IVBLiteralExpression> {
    public VbMvcAreaReference(IExpression owner, Version version);
}
internal class JetBrains.ReSharper.Feature.Services.Asp.VB.CustomReferences.VbMvcControllerReference : MvcControllerReference`1<IVBLiteralExpression> {
    public VbMvcControllerReference(IExpression owner, IArgumentsOwner argumentsExpression, Version version);
}
[ReferenceProviderFactoryAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Asp.VB.CustomReferences.VBMvcNonViewsReferenceProviderFactory : VBMvcReferenceProviderFactory {
    public VBMvcNonViewsReferenceProviderFactory(Lifetime lifetime, ISolution solution, ISettingsStore settingsStore, MvcReferencedAssembliesService mvcReferencedAssembliesService);
}
internal class JetBrains.ReSharper.Feature.Services.Asp.VB.CustomReferences.VbMvcReferenceProvider : MvcReferenceProvider`3<IVBLiteralExpression, IVBArgumentsOwner, IMethodDeclaration> {
    public VbMvcReferenceProvider(Version version, MvcKind necessaryMvcKinds);
    protected virtual MvcActionReference`1<IVBLiteralExpression> GetMvcActionReference(IExpression literal, IVBArgumentsOwner argumentsExpression, Version version);
    protected virtual IExpression GetMvcLiteral(ITreeNode element, IReferenceNameContainer names, IVBArgumentsOwner& expression, String& anonymousPropertyName);
    protected virtual HybridCollection`1<string> GetImplicitReferenceNames(IVBArgumentsOwner argumentsOwner);
    protected virtual MvcControllerReference`1<IVBLiteralExpression> GetMvcControllerReference(IExpression literal, IVBArgumentsOwner argumentsExpression, Version version);
    protected virtual MvcViewComponentReference`1<IVBLiteralExpression> GetMvcViewComponentReference(IExpression literal, IVBArgumentsOwner argumentsExpression, Version version);
    protected virtual MvcAreaReference`1<IVBLiteralExpression> GetMvcAreaReference(IExpression literal, Version version);
    protected virtual MvcViewReference`2<IVBLiteralExpression, IMethodDeclaration> GetMvcViewReference(IExpression literal, IReadOnlyCollection`1<AvailableControllersInfo> names, MvcKind mvcKind, Version version);
}
public abstract class JetBrains.ReSharper.Feature.Services.Asp.VB.CustomReferences.VBMvcReferenceProviderFactory : object {
    private MvcReferencedAssembliesService myMvcReferencedAssembliesService;
    [CompilerGeneratedAttribute]
private ISignal`1<IReferenceProviderFactory> <Changed>k__BackingField;
    [CompilerGeneratedAttribute]
private MvcKind <SupportedMvcKinds>k__BackingField;
    public ISignal`1<IReferenceProviderFactory> Changed { get; }
    public MvcKind SupportedMvcKinds { get; }
    public PsiLanguageCategories SupportedPsiLanguageCategories { get; }
    public PsiLanguageType SupportedPsiLanguage { get; }
    protected VBMvcReferenceProviderFactory(Lifetime lifetime, MvcReferencedAssembliesService mvcReferencedAssembliesService, MvcKind necessaryMvcKinds);
    public sealed virtual IReferenceFactory CreateFactory(IPsiSourceFile sourceFile, IFile file, IWordIndex wordIndexForChecks);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IReferenceProviderFactory> get_Changed();
    [CompilerGeneratedAttribute]
public sealed virtual MvcKind get_SupportedMvcKinds();
    public sealed virtual PsiLanguageCategories get_SupportedPsiLanguageCategories();
    public sealed virtual PsiLanguageType get_SupportedPsiLanguage();
}
internal class JetBrains.ReSharper.Feature.Services.Asp.VB.CustomReferences.VbMvcViewComponentReference : MvcViewComponentReference`1<IVBLiteralExpression> {
    public VbMvcViewComponentReference(IExpression owner, IArgumentsOwner argumentsExpression, Version version);
}
internal class JetBrains.ReSharper.Feature.Services.Asp.VB.CustomReferences.VbMvcViewReference : MvcViewReference`2<IVBLiteralExpression, IMethodDeclaration> {
    public VbMvcViewReference(IExpression owner, IReadOnlyCollection`1<AvailableControllersInfo> names, MvcKind mvcKind, Version version);
}
[ReferenceProviderFactoryAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Asp.VB.CustomReferences.VBMvcViewsReferenceProviderFactory : VBMvcReferenceProviderFactory {
    public VBMvcViewsReferenceProviderFactory(Lifetime lifetime, ISolution solution, ISettingsStore settingsStore, MvcReferencedAssembliesService mvcReferencedAssembliesService);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ReferenceProviderFactoryAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Asp.VB.CustomReferences.VbPathReferenceProviderFactory : object {
    private CodeAnnotationsCache myCodeAnnotationsCache;
    [CompilerGeneratedAttribute]
private ISignal`1<IReferenceProviderFactory> <Changed>k__BackingField;
    public ISignal`1<IReferenceProviderFactory> Changed { get; }
    public VbPathReferenceProviderFactory(CodeAnnotationsCache codeAnnotationsCache);
    public sealed virtual IReferenceFactory CreateFactory(IPsiSourceFile sourceFile, IFile file, IWordIndex wordIndexForChecks);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IReferenceProviderFactory> get_Changed();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Asp.VB.CustomReferences.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Asp.VB.ExpectedTypes.MvcVBExpectedTypesProvider : VBExpectedTypesProvider {
    public virtual IReadOnlyList`1<ExpectedType> GetExpectedTypes(IVBExpression expression, ExpectedTypeMode mode);
}
[ShellComponentAttribute("16")]
internal class JetBrains.ReSharper.Feature.Services.Asp.VB.Formater.AspVBCustomIndentHandler : object {
    private static string GetIndent(string fileText, int offset, int tabSize);
    private static string GetNodeIndent(ITreeNode aspNode, int tabSize);
    private static string IndentHandler(ITreeNode node, CustomIndentType indentType, IIndentHelper helper);
    private static string FixIndent(string fileText, int offset, int tabSize, string indent);
    public sealed virtual string Indent(ITreeNode node, CustomIndentType indentType, FmtSettingsClassic`1<VBFormatSettingsKey> settings);
}
[ScopeCategoryUIProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Asp.VB.LiveTemplates.AspVBProjectScopeCategoryUIProvider : ScopeCategoryUIProvider {
    public string CategoryCaption { get; }
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Asp.VB.LiveTemplates.AspVBProjectScopeCategoryUIProvider/<BuildAllPoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> BuildAllPoints();
    public virtual string get_CategoryCaption();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Asp.VB.LiveTemplates.AspVBProjectScopeProvider : ScopeProvider {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Asp.VB.LiveTemplates.AspVBProjectScopeProvider/<ProvideScopePoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> ProvideScopePoints(TemplateAcceptanceContext context);
    [CompilerGeneratedAttribute]
private ITemplateScopePoint <.ctor>b__0_0(string t);
}
public class JetBrains.ReSharper.Feature.Services.Asp.VB.LiveTemplates.InAspVBProject : InLanguageSpecificWebProject {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    public Guid QuickListUID { get; }
    public string QuickListTitle { get; }
    private static InAspVBProject();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
    public sealed virtual Guid get_QuickListUID();
    public sealed virtual string get_QuickListTitle();
}
[FileTemplatesAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Asp.VB.LiveTemplates.Support.AspVbFileTemplatesSupport : AspFileTemplatesSupportBase {
    public string Name { get; }
    protected ProjectLanguage Language { get; }
    public IEnumerable`1<ITemplateScopePoint> ScopePoints { get; }
    public virtual string get_Name();
    protected virtual ProjectLanguage get_Language();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Asp.VB.LiveTemplates.Support.AspVbFileTemplatesSupport/<get_ScopePoints>d__5")]
public virtual IEnumerable`1<ITemplateScopePoint> get_ScopePoints();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Asp.VB.LiveTemplates.ZoneMarker : object {
}
[SolutionComponentAttribute("2")]
public class JetBrains.ReSharper.Feature.Services.Asp.VB.TypingAssist.AspVBTypingAssist : VBTypingAssistBase {
    public AspVBTypingAssist(Lifetime lifetime, TypingAssistDependencies dependencies);
    protected virtual bool IsSupported(ITextControl textControl);
    private bool IsInEmptyCodeBlock(CachingLexer lexer, int caretOffset);
    public virtual int TextControlToLexer(ITextControl textControl, DocOffset offset);
    protected virtual bool AllowCpuIntensiveAssists(ITextControl textControl);
    public virtual bool QuickCheckAvailability(ITextControl textControl, IPsiSourceFile projectFile);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Asp.VB.TypingAssist.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Asp.VB.Util.VBAspLanguageSpecificUtil : object {
    public sealed virtual bool IsPageClassDeclaration(ITypeDeclaration typeDeclaration);
    public sealed virtual bool IsUserTextDeclaration(IDeclaration declaration);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Asp.VB.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Asp.ZoneMarker : object {
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Feature.Services.Asxx.CSharp.TypingAssist.AsxxCSharpTypingAssist : CSharpTypingAssistBase {
    public AsxxCSharpTypingAssist(Lifetime lifetime, TypingAssistDependencies dependencies, DocumentTransactionManager documentTransactionManager, IOptional`1<ICodeCompletionSessionManager> codeCompletionSessionManager);
    protected virtual bool IsSupported(ITextControl textControl);
    public virtual int TextControlToLexer(ITextControl textControl, DocOffset offset);
    public virtual bool QuickCheckAvailability(ITextControl textControl, IPsiSourceFile projectFile);
    protected virtual bool IsStopperTokenForStringLiteral(TokenNodeType tokenType);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Asxx.CSharp.TypingAssist.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Asxx.CSharp.ZoneMarker : object {
}
internal class JetBrains.ReSharper.Feature.Services.Asxx.SelectEmbracingConstruct.AsxxDotSelectedRange : DotSelection`1<IAsxxFile> {
    public AsxxDotSelectedRange(IAsxxFile asxxFileNode, TreeOffset offset, bool selectBetterToken, bool useCamelHumps, bool appendInjectedPsi);
    protected virtual ISelectedRange GetParentInternal(ITokenNode tokenNode);
    protected virtual ISelectedRange CreateTokenPartSelection(ITokenNode tokenNode, TreeTextRange treeTextRange);
    protected virtual ISelectedRange CreateTreeNodeSelection(ITokenNode tokenNode);
    protected virtual bool IsWordToken(ITokenNode token);
    protected virtual bool IsLiteralToken(ITokenNode token);
    protected virtual bool IsSpaceToken(ITokenNode token);
    protected virtual bool IsNewLineToken(ITokenNode token);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Asxx.AsxxLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Asxx.SelectEmbracingConstruct.AsxxSelectEmbracingConstructProvider : SelectEmbracingConstructProviderWithSecondaryPsiWithSecondaryPsiBase`2<IAsxxFile, AsxxLanguage> {
    public AsxxSelectEmbracingConstructProvider(ISettingsStore settingsStore);
    public virtual ISelectedRange CreateDotSelectedRange(IAsxxFile primaryFile, TreeOffset treeOffset, bool selectBetterToken, bool appendInjectedPsi);
    public virtual ISelectedRange CreateElementSelectedRange(ITreeNode node);
    public virtual IWrapperRange CreateWrapperRange(IDocument document, IAsxxFile primaryFile, ISelectedRange primaryRange, ISelectedTreeRange codeBehindRange, IFile secondaryFile);
    internal static ISelectedRange BuildSelection(IAsxxFile fileNode, ITreeNode firstNode, ITreeNode lastNode);
}
internal class JetBrains.ReSharper.Feature.Services.Asxx.SelectEmbracingConstruct.AsxxTokenPartSelection : TokenPartSelection`1<IAsxxFile> {
    public ISelectedRange Parent { get; }
    public AsxxTokenPartSelection(IAsxxFile fileNode, TreeTextRange treeTextRange, ITokenNode token);
    public virtual ISelectedRange get_Parent();
}
internal class JetBrains.ReSharper.Feature.Services.Asxx.SelectEmbracingConstruct.AsxxTreeNodeSelection : TreeNodeSelection`1<IAsxxFile> {
    public ISelectedRange Parent { get; }
    public AsxxTreeNodeSelection(IAsxxFile fileNode, ITreeNode node);
    public virtual ISelectedRange get_Parent();
}
internal class JetBrains.ReSharper.Feature.Services.Asxx.SelectEmbracingConstruct.AsxxTreeRangeSelection : TreeRangeSelection`1<IAsxxFile> {
    public ISelectedRange Parent { get; }
    public AsxxTreeRangeSelection(IAsxxFile fileNode, ITreeNode first, ITreeNode last);
    public virtual ISelectedRange get_Parent();
}
public class JetBrains.ReSharper.Feature.Services.Asxx.SelectEmbracingConstruct.AsxxWrapperRange : WrapperRange`1<IAsxxFile> {
    public AsxxWrapperRange(IDocument document, IAsxxFile primaryFile, ISelectedTreeRange secondarySelection, ISelectedRange primarySelection, IFile secondaryFile);
    protected virtual bool IsSpecialToken(TokenNodeType tokenNodeType);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Asxx.TypingAssist.AsxxTypingAssist : TypingAssistLanguageBase`1<AsxxLanguage> {
    public AsxxTypingAssist(Lifetime lifetime, TypingAssistDependencies dependencies);
    public sealed virtual bool QuickCheckAvailability(ITextControl textControl, IPsiSourceFile projectFile);
    protected virtual bool IsSupported(ITextControl textControl);
    protected bool HandleQuoteTyped(ITypingContext typingContext);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Asxx.TypingAssist.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Asxx.ZoneMarker : object {
}
public class JetBrains.ReSharper.Feature.Services.Css.Bulbs.CssContextActionDataProvider : CachedContextActionDataProviderBase`1<ICssFile> {
    private PsiLanguageType myLanguage;
    public CssElementFactory ElementFactory { get; }
    public CssContextActionDataProvider(ISolution solution, ITextControl textControl, ICssFile file);
    public sealed virtual CssElementFactory get_ElementFactory();
}
public interface JetBrains.ReSharper.Feature.Services.Css.Bulbs.ICssContextActionDataProvider {
    public CssElementFactory ElementFactory { get; }
    public abstract virtual CssElementFactory get_ElementFactory();
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.AutopopupEnabledSettingsKey", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "CSSSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.Css.CodeCompletion.CssAutopopupEnabledSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "OnIdentifiersSettingDescription")]
public AutopopupType OnIdentifiers;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "OnPunctuationSettingDescription")]
public AutopopupType OnPunctuation;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "OnSelectorsSettingDescription")]
public AutopopupType OnSelectors;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "OnHexColorsSettingDescription")]
public AutopopupType OnHexColors;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Css.CodeCompletion.CssCodeCompletionManager : LanguageSpecificCodeCompletionManager {
    public PsiLanguageType PsiLanguage { get; }
    public CssCodeCompletionManager(CodeCompletionSettingsService codeCompletionSettings);
    public virtual SettingsScalarEntry GetSettingsEntry(ISettingsSchema settingsSchema);
    public virtual PsiLanguageType get_PsiLanguage();
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntellisenseEnabledSettingsKey", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "OverrideVSIntelliSenseForCSSSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.Css.CodeCompletion.IntellisenseEnabledCssSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "CSSCssFilesAndEmbeddedCSSSettingDescription")]
public bool IntellisenseEnabled;
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Css.CssLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Css.Colors.CssColorDeclaredElementSearcher : object {
    public sealed virtual IEnumerable`1<string> GetWords(IColorDeclaredElement element);
}
[RegisterHighlighterAttribute("ReSharper CSS value")]
[RegisterHighlighterAttribute("ReSharper CSS keyword")]
[RegisterHighlighterAttribute("ReSharper CSS id selector")]
[RegisterHighlighterAttribute("ReSharper CSS class selector")]
[RegisterHighlighterAttribute("ReSharper CSS identifier")]
[RegisterHighlighterAttribute("ReSharper CSS pseudo selector")]
[RegisterHighlighterAttribute("ReSharper CSS function")]
[RegisterHighlighterAttribute("ReSharper CSS attribute name")]
[RegisterHighlighterAttribute("ReSharper CSS property name")]
public static class JetBrains.ReSharper.Feature.Services.Css.Highlightings.CssHighlightingAttributeIds : object {
    public static string CSS_VALUE;
    public static string CSS_KEYWORD;
    public static string CSS_ID_SELECTOR;
    public static string CSS_CLASS_SELECTOR;
    public static string IDENTIFIER;
    public static string PSEUDO_SELECTOR;
    public static string FUNCTION;
    public static string ATTRIBUTE_NAME;
    public static string PROPERTY_NAME;
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Css.CssLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.Css.MatchingBrace.CssMatchingBraceProvider : object {
    public sealed virtual bool IsLeftBracket(TokenNodeType tokenType);
    public sealed virtual bool IsRightBracket(TokenNodeType tokenType);
    public sealed virtual bool Match(TokenNodeType token1, TokenNodeType token2);
    public sealed virtual int Compare(TokenNodeType x, TokenNodeType y);
}
public class JetBrains.ReSharper.Feature.Services.Css.Naming.CssNamingOptionsPage : CustomNamingOptionsPage`1<CssNamingSettingsKey> {
    [PublicAPIAttribute]
public static string PID;
    public CssNamingOptionsPage(Lifetime lifetime, OptionsSettingsSmartContext settings, PsiLanguageType languageType, INamedElementsManager namedElementsManager, IThemedIconManager uiIconsComponent);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Css.Naming.ZoneMarker : object {
}
[OptionsPageAttribute("CssCodeStyle", "Formatting Style", "JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons/FormattingStyle")]
public class JetBrains.ReSharper.Feature.Services.Css.OptionPages.CssCodeStylePage : AEmptyOptionsPage {
    public static string PID;
}
public abstract class JetBrains.ReSharper.Feature.Services.Css.OptionPages.CssCodeStylePageSchema : CodeStylePageSchema`2<CssFormatterSettingsKey, CssCodeStylePreview> {
    public KnownLanguage Language { get; }
    protected CssCodeStylePageSchema(Lifetime lifetime, IContextBoundSettingsStoreLive smartContext, IValueEditorViewModelFactory itemViewModelFactory, IComponentContainer container, ISettingsToHide settingsToHide);
    public virtual KnownLanguage get_Language();
}
[CodePreviewPreparatorComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Css.OptionPages.CssCodeStylePreview : CodePreviewPreparator {
    private IDocumentMarkupManager myDocumentMarkupManager;
    public KnownLanguage Language { get; }
    public ProjectFileType ProjectFileType { get; }
    public CssCodeStylePreview(IDocumentMarkupManager documentMarkupManager);
    public virtual KnownLanguage get_Language();
    public virtual ProjectFileType get_ProjectFileType();
    protected virtual void ApplyCustomHighlighting(ISolution solution, IDocument document, ITreeNode node);
}
[OptionsPageAttribute("CSS", "CSS", "JetBrains.ReSharper.Feature.Services.Resources.Web.FeaturesWebOptionsThemedIcons/CssOptionPage")]
public class JetBrains.ReSharper.Feature.Services.Css.OptionPages.CssOptionsPage : AEmptyOptionsPage {
    public static string PID;
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Css.OptionPages.ZoneMarker : object {
}
public class JetBrains.ReSharper.Feature.Services.Css.ParameterInfo.CssDefinitionCandidate : object {
    private string mySignature;
    private ICssDefinitionDeclaredElement myDeclaredElement;
    private ICssValueDefinition myValueDefinition;
    private List`1<KeyValuePair`2<TextRange, ICssValueDefinition>> myParameters;
    private static RichTextBlock ourEmptyRichTextBlock;
    [CompilerGeneratedAttribute]
private bool <IsFilteredOut>k__BackingField;
    public ICssDefinition Definition { get; }
    public ICssValueDefinition ValueDefinition { get; }
    public List`1<KeyValuePair`2<TextRange, ICssValueDefinition>> Parameters { get; }
    public bool IsFilteredOut { get; public set; }
    public int PositionalParameterCount { get; }
    public bool IsObsolete { get; }
    public RichTextBlock ObsoleteDescription { get; }
    public CssDefinitionCandidate(ICssDefinitionDeclaredElement declaredElement, ICssValueDefinition valueDefinition, CssValueDefinitionPrinterWithRanges printer);
    private static CssDefinitionCandidate();
    public ICssDefinition get_Definition();
    public ICssValueDefinition get_ValueDefinition();
    public List`1<KeyValuePair`2<TextRange, ICssValueDefinition>> get_Parameters();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsFilteredOut();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsFilteredOut(bool value);
    public sealed virtual int get_PositionalParameterCount();
    public sealed virtual bool get_IsObsolete();
    public sealed virtual RichTextBlock get_ObsoleteDescription();
    public sealed virtual RichText GetSignature(String[] namedArguments, ParameterInfoSettings settings, TextRange[]& parameterRanges, Int32[]& mapToOriginalOrder, ExtensionMethodInfo& extensionMethodInfo);
    public sealed virtual void GetParametersInfo(ParamPresentationInfo[]& paramInfos, Int32& paramsParameterIndex);
    public sealed virtual RichTextBlock GetDescription(ParameterInfoSettings settings);
    public sealed virtual bool Matches(IDeclaredElement signature);
    [CompilerGeneratedAttribute]
private bool <get_IsObsolete>b__19_0(CssLanguageVersion x);
}
[ParameterInfoContextFactoryAttribute("JetBrains.ReSharper.Psi.Css.CssLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Css.ParameterInfo.CssInvocationParameterInfoContextFactory : CssParameterInfoContextFactoryBase`1<ICssInvocationExpression> {
    private static Char[] ourChars;
    private static Char[] ourImportantChars;
    public PsiLanguageType Language { get; }
    public IEnumerable`1<char> ImportantChars { get; }
    private static CssInvocationParameterInfoContextFactory();
    public virtual PsiLanguageType get_Language();
    public virtual IEnumerable`1<char> get_ImportantChars();
    public virtual IParameterInfoContext CreateContext(ISolution solution, DocumentOffset caretOffset, DocumentOffset expectedLParenthOffset, char invocationChar, IContextBoundSettingsStore settingsStore);
    public virtual bool ShouldPopup(DocumentOffset caretOffset, char c, ISolution solution, IContextBoundSettingsStore settingsStore);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Css.ParameterInfo.CssInvocationParameterInfoContextFactory/<GetNodes>d__8")]
protected virtual IEnumerable`1<ICssTreeNode> GetNodes(ICssInvocationExpression expression);
}
public class JetBrains.ReSharper.Feature.Services.Css.ParameterInfo.CssInvocationPrinterWithRanges : CssValueDefinitionPrinterWithRanges {
    protected virtual StringBuilder CreateContext();
    public virtual string Print(ICssValueDefinition definition);
}
[ParameterInfoContextFactoryAttribute("JetBrains.ReSharper.Psi.Css.CssLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Css.ParameterInfo.CssMediaFeatureParameterInfoContextFactory : CssParameterInfoContextFactoryBase`1<IMediaFeature> {
    private static Char[] ourChars;
    private static Char[] ourImportantChars;
    public PsiLanguageType Language { get; }
    public IEnumerable`1<char> ImportantChars { get; }
    private static CssMediaFeatureParameterInfoContextFactory();
    public virtual PsiLanguageType get_Language();
    public virtual IEnumerable`1<char> get_ImportantChars();
    public virtual IParameterInfoContext CreateContext(ISolution solution, DocumentOffset caretOffset, DocumentOffset expectedLParenthOffset, char invocationChar, IContextBoundSettingsStore settingsStore);
    public virtual bool ShouldPopup(DocumentOffset caretOffset, char c, ISolution solution, IContextBoundSettingsStore settingsStore);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Css.ParameterInfo.CssMediaFeatureParameterInfoContextFactory/<GetNodes>d__8")]
protected virtual IEnumerable`1<ICssTreeNode> GetNodes(IMediaFeature expression);
}
public class JetBrains.ReSharper.Feature.Services.Css.ParameterInfo.CssParameterInfoContext : object {
    private static Type ourOurParameterListNodeType;
    private static Type[] ourOurParameterNodeTypes;
    private int myArgument;
    [CompilerGeneratedAttribute]
private ICandidate[] <Candidates>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <Range>k__BackingField;
    public String[] NamedArguments { get; public set; }
    public ICandidate DefaultCandidate { get; }
    public ICandidate[] Candidates { get; }
    public DocumentRange Range { get; }
    public Type ParameterListNodeType { get; }
    public ICollection`1<Type> ParameterNodeTypes { get; }
    public CssParameterInfoContext(int argument, DocumentRange range, ICandidate[] candidates);
    private static CssParameterInfoContext();
    public sealed virtual int GetArgument(ICandidate candidate);
    public sealed virtual String[] get_NamedArguments();
    public sealed virtual void set_NamedArguments(String[] value);
    public sealed virtual ICandidate get_DefaultCandidate();
    [CompilerGeneratedAttribute]
public sealed virtual ICandidate[] get_Candidates();
    [CompilerGeneratedAttribute]
public sealed virtual DocumentRange get_Range();
    public sealed virtual Type get_ParameterListNodeType();
    public sealed virtual ICollection`1<Type> get_ParameterNodeTypes();
}
public abstract class JetBrains.ReSharper.Feature.Services.Css.ParameterInfo.CssParameterInfoContextFactoryBase`1 : object {
    public PsiLanguageType Language { get; }
    public IEnumerable`1<char> ImportantChars { get; }
    public abstract virtual PsiLanguageType get_Language();
    public abstract virtual IEnumerable`1<char> get_ImportantChars();
    public sealed virtual bool IsIntellisenseEnabled(ISolution solution, IContextBoundSettingsStore settingsStore);
    public abstract virtual IParameterInfoContext CreateContext(ISolution solution, DocumentOffset caretOffset, DocumentOffset expectedLParenthOffset, char invocationChar, IContextBoundSettingsStore settingsStore);
    public abstract virtual bool ShouldPopup(DocumentOffset caretOffset, char c, ISolution solution, IContextBoundSettingsStore settingsStore);
    [NotNullAttribute]
protected abstract virtual IEnumerable`1<ICssTreeNode> GetNodes(T expression);
    protected static int GetArgumentIndex(CssDefinitionCandidate candidate, ICssValueDefinition cssValueDefinition);
    [NotNullAttribute]
protected static ICssValueDefinition FindDefinitionUnderCursor(TreeOffset caretOffset, LinkedList`1<ICssTreeNode> nodes, ICssValueDefinition definition, List`1<KeyValuePair`2<TextRange, ICssValueDefinition>> definitions, ISolution solution, CssLanguageVersion cssVersion);
    [NotNullAttribute]
private static ICssValueDefinition FindCommonParent(IEnumerable`1<IValidationResult> results);
    protected static IEnumerable`1<TElement> Resolve(IReference reference);
}
[ParameterInfoContextFactoryAttribute("JetBrains.ReSharper.Psi.Css.CssLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Css.ParameterInfo.CssPropertyValueParameterInfoContextFactory : CssParameterInfoContextFactoryBase`1<ICssProperty> {
    private static Char[] ourChars;
    private static Char[] ourImportantChars;
    public PsiLanguageType Language { get; }
    public IEnumerable`1<char> ImportantChars { get; }
    private static CssPropertyValueParameterInfoContextFactory();
    public virtual PsiLanguageType get_Language();
    public virtual IEnumerable`1<char> get_ImportantChars();
    public virtual IParameterInfoContext CreateContext(ISolution solution, DocumentOffset caretOffset, DocumentOffset expectedLParenthOffset, char invocationChar, IContextBoundSettingsStore settingsStore);
    public virtual bool ShouldPopup(DocumentOffset caretOffset, char c, ISolution solution, IContextBoundSettingsStore settingsStore);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Css.ParameterInfo.CssPropertyValueParameterInfoContextFactory/<GetNodes>d__8")]
protected virtual IEnumerable`1<ICssTreeNode> GetNodes(ICssProperty expression);
}
[ParameterInfoContextFactoryAttribute("JetBrains.ReSharper.Psi.Css.CssLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Css.ParameterInfo.CssPseudoFunctionParameterInfoContextFactory : CssParameterInfoContextFactoryBase`1<IPseudoFunctionSelector> {
    private static Char[] ourChars;
    private static Char[] ourImportantChars;
    public PsiLanguageType Language { get; }
    public IEnumerable`1<char> ImportantChars { get; }
    private static CssPseudoFunctionParameterInfoContextFactory();
    public virtual PsiLanguageType get_Language();
    public virtual IEnumerable`1<char> get_ImportantChars();
    public virtual IParameterInfoContext CreateContext(ISolution solution, DocumentOffset caretOffset, DocumentOffset expectedLParenthOffset, char invocationChar, IContextBoundSettingsStore settingsStore);
    public virtual bool ShouldPopup(DocumentOffset caretOffset, char c, ISolution solution, IContextBoundSettingsStore settingsStore);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Css.ParameterInfo.CssPseudoFunctionParameterInfoContextFactory/<GetNodes>d__8")]
protected virtual IEnumerable`1<ICssTreeNode> GetNodes(IPseudoFunctionSelector expression);
}
public class JetBrains.ReSharper.Feature.Services.Css.ParameterInfo.CssValueDefinitionPrinterWithRanges : CssValueDefinitionPrinter {
    private List`1<KeyValuePair`2<TextRange, ICssValueDefinition>> myDefinitions;
    public List`1<KeyValuePair`2<TextRange, ICssValueDefinition>> Parameters { get; }
    public List`1<KeyValuePair`2<TextRange, ICssValueDefinition>> get_Parameters();
    public virtual string Print(ICssValueDefinition definition);
    public void AddDefinition(TextRange textRange, ICssValueDefinition valueDefinition);
    public virtual void VisitCssValueInlineDefinition(ICssValueInlineDefinition valueInlineDefinition, StringBuilder builder);
    public virtual void VisitCssValuePropertyReferenceDefinition(ICssValuePropertyReferenceDefinition propertyReferenceDefinition, StringBuilder builder);
    public virtual void VisitCssValueInvokeDefinition(ICssValueInvokeDefinition invokeDefinition, StringBuilder builder);
    public virtual void VisitCssValueAngleDefinition(ICssValueAngleDefinition angleDefinition, StringBuilder builder);
    public virtual void VisitCssValueAnyDefinition(ICssValueAnyDefinition anyDefinition, StringBuilder builder);
    public virtual void VisitCssValueColorDefinition(ICssValueColorDefinition colorDefinition, StringBuilder builder);
    public virtual void VisitCssValueExpressionDefinition(ICssValueExpressionDefinition expressionDefinition, StringBuilder builder);
    public virtual void VisitCssValueVariableDefinition(ICssValueDefinition variableDefinition, StringBuilder builder);
    public virtual void VisitCssValueFrequencyDefinition(ICssValueFrequencyDefinition frequencyDefinition, StringBuilder builder);
    public virtual void VisitCssValueIntegerDefinition(ICssValueIntegerDefinition integerDefinition, StringBuilder builder);
    public virtual void VisitCssValueJavaScriptDefinition(ICssValueJavaScriptDefinition javaScriptDefinition, StringBuilder builder);
    public virtual void VisitCssValueLengthDefinition(ICssValueLengthDefinition lengthDefinition, StringBuilder builder);
    public virtual void VisitCssValueNameDefinition(ICssValueNameDefinition nameDefinition, StringBuilder builder);
    public virtual void VisitCssValueNumberDefinition(ICssValueNumberDefinition numberDefinition, StringBuilder builder);
    public virtual void VisitCssValuePercentageDefinition(ICssValuePercentageDefinition percentageDefinition, StringBuilder builder);
    public virtual void VisitCssValuePositionDefinition(ICssValuePositionDefinition positionDefinition, StringBuilder builder);
    public virtual void VisitCssValueResolutionDefinition(ICssValueResolutionDefinition resolutionDefinition, StringBuilder builder);
    public virtual void VisitCssValueSelectorDefinition(ICssValueSelectorDefinition selectorDefinition, StringBuilder builder);
    public virtual void VisitCssValueEmptyDefinition(ICssValueEmptyDefinition emptyDefinition, StringBuilder builder);
    public virtual void VisitCssValueStringDefinition(ICssValueStringDefinition stringDefinition, StringBuilder builder);
    public virtual void VisitCssValueTextDefinition(ICssValueTextDefinition textDefinition, StringBuilder builder);
    public virtual void VisitCssValueTimeDefinition(ICssValueTimeDefinition timeDefinition, StringBuilder builder);
    public virtual void VisitCssValueUrangeDefinition(ICssValueUrangeDefinition urangeDefinition, StringBuilder builder);
    public virtual void VisitCssValueUriDefinition(ICssValueUriDefinition uriDefinition, StringBuilder builder);
    public virtual void VisitCssValueNullDefinition(ICssValueNullDefinition nullDefinition, StringBuilder builder);
    public virtual void VisitCssValueGroupDefinition(ICssValueGroupDefinition groupDefinition, StringBuilder builder);
    public virtual void VisitCssValueDecibelDefinition(ICssValueDecibelDefinition decibelDefinition, StringBuilder builder);
    public virtual void VisitCssValueSemitonesDefinition(ICssValueSemitonesDefinition semitonesDefinition, StringBuilder builder);
}
[DeclaredElementDescriptionProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Css.QuickDoc.CssDeclaredElementDescriptionProvider : object {
    public int Priority { get; }
    public sealed virtual int get_Priority();
    public sealed virtual RichTextBlock GetElementDescription(IDeclaredElement element, DeclaredElementDescriptionStyle style, PsiLanguageType language, IPsiModule module);
    public sealed virtual Nullable`1<bool> IsElementObsolete(IDeclaredElement element, RichTextBlock& obsoleteDescription, DeclaredElementDescriptionStyle style);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Css.CssLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.Css.QuickDoc.CssXmlDocHeaderPresenter : CommonXmlDocHeaderPresenter {
    public CssXmlDocHeaderPresenter(PsiLanguageType language);
    public virtual void Present(RichText header, DeclaredElementInstance declaredElementInstance, IPsiModule module, CrefManager crefManager, DeclaredElementPresenterTextStyles styles, ElementLinkCollector linkCollector, ITreeNode context);
    private static string PresentValue(ICssValueDefinition definition);
}
public class JetBrains.ReSharper.Feature.Services.Css.QuickDoc.CssXmlDocRichTextPresenter : XmlDocRichTextPresenter {
    private static TextStyle ourBoldStyle;
    private static TextStyle ourItalicStyle;
    private static TextStyle ourUnderlineStyle;
    private static TextStyle ourStrikeoutStyle;
    private CssXmlDocRichTextPresenter(XmlNode node, PsiLanguageType languageType, DeclaredElementPresenterTextStyles textStyles, IPsiModule module);
    private static CssXmlDocRichTextPresenter();
    public virtual void VisitUnknownTag(XmlElement element);
    [NotNullAttribute]
public static RichTextBlock Run(XmlNode node, PsiLanguageType languageType, DeclaredElementPresenterTextStyles textStyles, IPsiModule module);
}
public class JetBrains.ReSharper.Feature.Services.Css.QuickDoc.QuickDocCssDefinitionPresenter : object {
    private DeclaredElementEnvoy`1[] myEnvoys;
    private ITheming myTheming;
    private IPsiModule myModule;
    public QuickDocCssDefinitionPresenter(ITheming theming, IEnumerable`1<ICssDefinitionDeclaredElement> elements, IPsiModule module);
    public sealed virtual IQuickDocPresenter Resolve(string id);
    public sealed virtual QuickDocTitleAndText GetHtml(PsiLanguageType presentationLanguage);
    public sealed virtual string GetId();
    public sealed virtual void OpenInEditor(string navigationId);
    public sealed virtual void ReadMore(string navigationId);
    [CompilerGeneratedAttribute]
private void <GetHtml>b__5_0(HTMLBuilder builder, RichText output);
}
[QuickDocProviderAttribute("0")]
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Css.QuickDoc.QuickDocCssDefinitionProvider : object {
    private DocumentManager myDocumentManager;
    private IPsiFiles myPsiFiles;
    private ISolution mySolution;
    private ITheming myTheming;
    public QuickDocCssDefinitionProvider(ISolution solution, ITheming theming, IPsiFiles psiFiles, DocumentManager documentManager);
    public sealed virtual bool CanNavigate(IDataContext context);
    public sealed virtual void Resolve(IDataContext context, Action`2<IQuickDocPresenter, PsiLanguageType> resolved);
    [NotNullAttribute]
private IEnumerable`1<ICssDefinitionDeclaredElement> FindDelcaredElements(IDataContext context);
}
public class JetBrains.ReSharper.Feature.Services.Css.QuickDoc.QuickDocCssValueDefinitionPrinter : CssValueDefinitionPrinter {
    public virtual void VisitCssValuePropertyReferenceDefinition(ICssValuePropertyReferenceDefinition propertyReferenceDefinition, StringBuilder builder);
    public virtual void VisitCssValueInlineDefinition(ICssValueInlineDefinition valueInlineDefinition, StringBuilder builder);
    public virtual void VisitCssValueInvokeDefinition(ICssValueInvokeDefinition invokeDefinition, StringBuilder builder);
    protected virtual StringBuilder AppendFormat(StringBuilder builder, string format, String[] args);
    protected virtual StringBuilder Append(StringBuilder builder, string value);
}
internal class JetBrains.ReSharper.Feature.Services.Css.QuickDoc.QuickDocCssValueTooltipsPrinter : CssValueDefinitionVisitorBase`1<StringBuilder> {
    [NotNullAttribute]
public string Print(ICssValueDefinition definition);
    public virtual void VisitCssValueGroupDefinition(ICssValueGroupDefinition groupDefinition, StringBuilder builder);
    public virtual void VisitCssValueDefinition(ICssValueDefinition valueDefinition, StringBuilder builder);
    [CanBeNullAttribute]
private static string EscapeHtmlString(string html);
}
public static class JetBrains.ReSharper.Feature.Services.Css.QuickDoc.QuickDocUtil : object {
    public static CrefManager CrefManager;
    private static QuickDocUtil();
    [NotNullAttribute]
public static IEnumerable`1<ICssDefinitionDeclaredElement> ResolveDeclaredElement(string id, IPsiModule module);
    internal static string GetObsoleteText(ICssDefinition definition);
    internal static string GetValueTooltips(ICssDefinition definition);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Css.CssLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Css.References.CssPathBinder : object {
    public sealed virtual IReference SetText(PathReferenceBase`2<TOwner, TToken> reference, string newText);
    public sealed virtual ITreeNode SetText(PathReferenceBase`2<TOwner, TToken> reference, TreeTextRange range, string newText);
    public sealed virtual string GetTargetPath(PathReferenceBase`2<TOwner, TToken> reference, IPathDeclaredElement pathDeclaredElement);
}
public class JetBrains.ReSharper.Feature.Services.Css.References.CssStringFileReference : HtmlFileReference`2<ICssStringLiteralExpression, ITokenNode> {
    public WebRootCalculationKind WebRootCalculationKind { get; }
    public CssStringFileReference(ICssStringLiteralExpression owner, IQualifier qualifier, ITokenNode token, TreeTextRange rangeWithin, ProjectFileType expectedFileType, bool noCircular);
    public virtual string GetName();
    public virtual WebRootCalculationKind get_WebRootCalculationKind();
}
public class JetBrains.ReSharper.Feature.Services.Css.References.CssStringFileReferenceFactory : object {
    private static Char[] ourTrimSymbols;
    private static CssStringFileReferenceFactory();
    public sealed virtual ReferenceCollection GetReferences(ITreeNode element, ReferenceCollection oldReferences);
    public sealed virtual bool HasReference(ITreeNode element, IReferenceNameContainer names);
    private bool InImport(ICssStringLiteralExpression expression);
    private static bool InUrlFunction(ICssStringLiteralExpression expression);
    private static TreeTextRange FixRange(RangeTranslator translator, TreeTextRange range);
}
public class JetBrains.ReSharper.Feature.Services.Css.References.CssStringFolderReference : HtmlFolderReference`2<ICssStringLiteralExpression, ITokenNode> {
    public CssStringFolderReference(ICssStringLiteralExpression owner, IQualifier qualifier, ITokenNode token, TreeTextRange rangeWithin);
    public virtual string GetName();
}
public class JetBrains.ReSharper.Feature.Services.Css.References.CssUriFileReference : HtmlFileReference`2<ICssLiteralExpression, ITokenNode> {
    public WebRootCalculationKind WebRootCalculationKind { get; }
    public CssUriFileReference(ICssLiteralExpression owner, IQualifier qualifier, ITokenNode token, TreeTextRange rangeWithin);
    public CssUriFileReference(ICssLiteralExpression owner, IQualifier qualifier, ITokenNode token, TreeTextRange rangeWithin, ProjectFileType expectedFileType, ICollection`1<string> expectedExtensions, bool noCircular, bool allowEmptyName);
    public virtual string GetName();
    public virtual WebRootCalculationKind get_WebRootCalculationKind();
}
public class JetBrains.ReSharper.Feature.Services.Css.References.CssUriFileReferenceFactory : object {
    private static Char[] ourTrimSymbols;
    private static CssUriFileReferenceFactory();
    public sealed virtual ReferenceCollection GetReferences(ITreeNode element, ReferenceCollection oldReferences);
    public sealed virtual bool HasReference(ITreeNode element, IReferenceNameContainer names);
    private static TreeTextRange FixRange(RangeTranslator translator, TreeTextRange range);
}
public class JetBrains.ReSharper.Feature.Services.Css.References.CssUriFolderReference : HtmlFolderReference`2<ICssLiteralExpression, ITokenNode> {
    public CssUriFolderReference(ICssLiteralExpression owner, IQualifier qualifier, ITokenNode token, TreeTextRange rangeWithin);
    public virtual string GetName();
}
public static class JetBrains.ReSharper.Feature.Services.Css.References.CssUriHelper : object {
    public static bool IsSpecialUri(string url);
}
internal class JetBrains.ReSharper.Feature.Services.Css.SelectEmbracingConstruct.CssDotSelection : DotSelection`1<ICssFile> {
    private TreeOffset myOffset;
    private TreeTextRange myTreeTextRange;
    public TreeTextRange TreeRange { get; }
    public CssDotSelection(ICssFile fileNode, TreeOffset offset, bool selectBetterToken, bool useCamelHumps, bool appendInjectedPsi);
    public sealed virtual TreeTextRange get_TreeRange();
    protected virtual ISelectedRange GetParentInternal(ITokenNode tokenNode);
    protected virtual ISelectedRange CreateTokenPartSelection(ITokenNode tokenNode, TreeTextRange treeTextRange);
    protected virtual ISelectedRange CreateTreeNodeSelection(ITokenNode tokenNode);
    protected virtual bool IsWordToken(ITokenNode token);
    protected virtual bool IsLiteralToken(ITokenNode token);
    protected virtual bool IsSpaceToken(ITokenNode token);
    protected virtual bool IsNewLineToken(ITokenNode token);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Css.CssLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.Css.SelectEmbracingConstruct.CssSelectEmbracingConstructProvider : object {
    private ISettingsStore mySettingsStore;
    public CssSelectEmbracingConstructProvider(ISettingsStore settingsStore);
    public sealed virtual bool IsAvailable(IPsiSourceFile sourceFile);
    public sealed virtual ISelectedRange GetSelectedRange(IPsiSourceFile sourceFile, DocumentRange documentRange);
    private ISelectedRange GetSelectedRange(ICssFile file, DocumentRange documentRange);
    public static ISelectedRange GetParentRange(ICssFile fileNode, ITreeNode firstNode, ITreeNode lastNode);
    private static ISelectedRange ExtendRangeSelection(ICssFile fileNode, ITreeNode first, ITreeNode last);
    public static ISelectedRange BuildNodeSelection(ICssFile fileNode, ITreeNode token);
    private static bool IsWhitespace(ITreeNode node);
    private static bool IsNewLine(ITreeNode node);
}
internal class JetBrains.ReSharper.Feature.Services.Css.SelectEmbracingConstruct.CssTokenPartSelection : TokenPartSelection`1<ICssFile> {
    public ExtendToTheWholeLinePolicy ExtendToWholeLine { get; }
    public ISelectedRange Parent { get; }
    public CssTokenPartSelection(ICssFile fileNode, TreeTextRange treeTextRange, ITokenNode token);
    public virtual ExtendToTheWholeLinePolicy get_ExtendToWholeLine();
    public virtual ISelectedRange get_Parent();
}
internal class JetBrains.ReSharper.Feature.Services.Css.SelectEmbracingConstruct.CssTreeNodeSelection : TreeNodeSelection`1<ICssFile> {
    public ISelectedRange Parent { get; }
    public CssTreeNodeSelection(ICssFile fileNode, ITreeNode node);
    public virtual ISelectedRange get_Parent();
}
public class JetBrains.ReSharper.Feature.Services.Css.SelectEmbracingConstruct.CssTreeRangeSelection : TreeRangeSelection`1<ICssFile> {
    public ISelectedRange Parent { get; }
    public CssTreeRangeSelection(ICssFile fileNode, ITreeNode first, ITreeNode last);
    public virtual ISelectedRange get_Parent();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Css.CssLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Css.StructuralNavigation.CssStructuralNavigationManager : object {
    public sealed virtual IStructuralNavigationItem MoveToNext(StructuralNavigationContextBase context);
    public sealed virtual IStructuralNavigationItem MoveToPrev(StructuralNavigationContextBase context);
    [CanBeNullAttribute]
protected virtual IStructuralNavigationItem GetNextSelection(StructuralNavigationContextBase context);
}
internal class JetBrains.ReSharper.Feature.Services.Css.StructuralNavigation.CssStructuralNavigationVisitor : TreeNodeVisitor`2<StructuralNavigationContextBase, StructuralNavigationContextBase> {
    protected static StructuralNavigationContextBase TryAddResult(StructuralNavigationContextBase context, TNode treeNode);
    protected static StructuralNavigationContextBase VisitBlock(StructuralNavigationContextBase context, IEnumerable`1<ICssTreeNode> nodes, IFile file, ITreeNode lBraceToken, ITreeNode rBraceToken);
    public virtual StructuralNavigationContextBase VisitNode(ITreeNode node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitAnimationName(IAnimationName node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitAtruleset(IAtruleset node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitAtrulesetBlock(IAtrulesetBlock node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitAtrulesetValue(IAtrulesetValue node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitAttributeMatch(IAttributeMatch node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitAttributeName(IAttributeName node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitCharset(ICharset node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitColorProfile(IColorProfile node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitColorProfileBlock(IColorProfileBlock node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitCssArgumentList(ICssArgumentList node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitCssTokenExpression(ICssTokenExpression node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitCssExpression(ICssExpression node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitCssFile(ICssFile node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitCssFileSection(ICssFileSection node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitCssJavaScriptExpression(ICssJavaScriptExpression node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitCssNamespace(ICssNamespace node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitCssPageBlock(ICssPageBlock node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitCssProperty(ICssProperty node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitCssPropertyBlock(ICssPropertyBlock node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitCssPropertyStatement(ICssPropertyStatement node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitCssPropertyValue(ICssPropertyValue node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitCssVariableDeclarationName(ICssVariableDeclarationName node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitCssWhitespaceExpression(ICssWhitespaceExpression node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitFontFamily(IFontFamily node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitFontFamilyList(IFontFamilyList node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitFontFeatureType(IFontFeatureType node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitFontFeatureTypeBlock(IFontFeatureTypeBlock node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitFontFeatureTypeProperty(IFontFeatureTypeProperty node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitFontFeatureTypePropertyStatement(IFontFeatureTypePropertyStatement node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitFontFeatureValues(IFontFeatureValues node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitFontFeatureValuesBlock(IFontFeatureValuesBlock node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitImport(IImport node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitImportant(IImportant node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitKeyframes(IKeyframes node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitKeyframesBlock(IKeyframesBlock node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitKeyframesRule(IKeyframesRule node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitKeyframesRuleBlock(IKeyframesRuleBlock node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitKeyframesSelector(IKeyframesSelector node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitKeyframesSelectorList(IKeyframesSelectorList node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitMedia(IMedia node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitMediaBlock(IMediaBlock node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitMediaFeature(IMediaFeature node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitMediaQuery(IMediaQuery node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitMediaQueryList(IMediaQueryList node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitNamespacePrefix(INamespacePrefix node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitPage(IPage node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitPseudoArgumentList(IPseudoArgumentList node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitRuleset(IRuleset node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitRulesetDeclaration(IRulesetDeclaration node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitRulesetDeclarationList(IRulesetDeclarationList node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitSelector(ISelector node, StructuralNavigationContextBase context);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Css.StructuralNavigation.ZoneMarker : object {
}
public class JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.CssAdjacentSiblingMatcher : object {
    private IElementMatcher myNodeMatcher;
    private IElementMatcher mySiblingMatcher;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public CssAdjacentSiblingMatcher(IElementMatcher siblingMatcher, IElementMatcher nodeMatcher, bool isStrict);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    private bool IsAdjacentSibling(ITreeNode node, IMatchingContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.CssAdjacentSiblingMatcher/<get_Children>d__6")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual IEnumerable`1<string> get_Words();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.CssAttributeMatcher : object {
    private string myPrefix;
    private string myName;
    private AttributeMatchOperation myOperation;
    private string myValueText;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public CssAttributeMatcher(string prefix, string name, AttributeMatchOperation operation, string valueText, bool isStrict);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.CssAttributeMatcher/<get_Children>d__7")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.CssAttributeMatcher/<get_Words>d__9")]
public sealed virtual IEnumerable`1<string> get_Words();
    private bool MatchAttribute(ITreeNode element);
    public virtual string ToString();
    private static string PrintOperation(AttributeMatchOperation operation);
    private static string GetName(string prefix, string name);
}
public class JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.CssChildMatcher : object {
    private IElementMatcher myNodeMatcher;
    private IElementMatcher myParentMatcher;
    public IEnumerable`1<string> Words { get; }
    public IEnumerable`1<IElementMatcher> Children { get; }
    public CssChildMatcher(IElementMatcher parentMatcher, IElementMatcher nodeMatcher, bool isStrict);
    public sealed virtual IEnumerable`1<string> get_Words();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.CssChildMatcher/<get_Children>d__6")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.CssDescendantMatcher : object {
    private IElementMatcher myNodeMatcher;
    private IElementMatcher myParentMatcher;
    public IEnumerable`1<string> Words { get; }
    public IEnumerable`1<IElementMatcher> Children { get; }
    public CssDescendantMatcher(IElementMatcher parentMatcher, IElementMatcher nodeMatcher, bool isStrict);
    public sealed virtual IEnumerable`1<string> get_Words();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.CssDescendantMatcher/<get_Children>d__6")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    private bool IsDescendantMatch(ITreeNode node, IMatchingContext context);
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.CssFirstChildMatcher : object {
    private bool myIsStrict;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public CssFirstChildMatcher(bool isStrict);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    private static bool IsFirstChild(ITreeNode node);
    public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual IEnumerable`1<string> get_Words();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.CssGeneralSiblingMatcher : object {
    private IElementMatcher myNodeMatcher;
    private IElementMatcher mySiblingMatcher;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public CssGeneralSiblingMatcher(IElementMatcher siblingMatcher, IElementMatcher nodeMatcher, bool isStrict);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    private bool IsAdjacentSibling(ITreeNode node, IMatchingContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.CssGeneralSiblingMatcher/<get_Children>d__6")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual IEnumerable`1<string> get_Words();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.CssLastChildMatcher : object {
    private bool myIsStrict;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public CssLastChildMatcher(bool isStrict);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    private static bool IsLastChild(ITreeNode node);
    public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual IEnumerable`1<string> get_Words();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.CssNotMatcher : object {
    private IElementMatcher myMatcher;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public CssNotMatcher(IElementMatcher matcher, bool isStrict);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.CssNotMatcher/<get_Children>d__4")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual IEnumerable`1<string> get_Words();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.CssPatternLexer : PatternLexer {
    protected LanguageService LanguageService { get; }
    protected bool MetaPlaceholderSupported { get; }
    protected virtual LanguageService get_LanguageService();
    protected virtual bool get_MetaPlaceholderSupported();
    protected virtual IMetaPlaceholder GetMetaPlaceholder(string name);
}
public class JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.CssRootMatcher : object {
    private bool myIsStrict;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public CssRootMatcher(bool isStrict);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual IEnumerable`1<string> get_Words();
    public virtual string ToString();
}
public static class JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.CssSelectorMatcherBuilder : object {
    public static IElementMatcher Build(ICssTreeNode node, PatternMatcherBuilderParams params);
}
public class JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.CssSelectorStructuralMatcher : StructuralMatcher {
    public static Key`1<ITreeNode> ParentMatchedNode;
    public CssSelectorStructuralMatcher(IElementMatcher elementMatcher, StructuralSearchPatternParams unknown);
    private static CssSelectorStructuralMatcher();
    public virtual IReadOnlyCollection`1<string> GetExtendedWords(ISolution solution);
}
[StructuralSearcherFactoryAttribute("JetBrains.ReSharper.Psi.Css.CssLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.CssStructuralSearcherFactory : object {
    public bool IsInternal { get; }
    public bool SupportsIgnoreUnmatched { get; }
    public bool SupportsShortenReferences { get; }
    public sealed virtual bool get_IsInternal();
    public sealed virtual bool get_SupportsIgnoreUnmatched();
    public sealed virtual bool get_SupportsShortenReferences();
    public sealed virtual IStructuralSearchPattern CreatePattern();
    public sealed virtual IStructuralSearchPattern CreatePattern(string pattern, IPlaceholder[] placeholders);
    public sealed virtual IStructuralSearchPattern CreatePattern(ISolution solution, DocumentRange selection);
    public sealed virtual void Replace(IStructuralSearchPattern pattern, IStructuralMatchResult result);
    public sealed virtual void Replace(IEnumerable`1<IStructuralMatchResult> targets, IStructuralSearchPattern pattern);
}
public class JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.CssStructuralSearchPattern : StructuralSearchPatternBase {
    private CssStructuralSearchPatternPresenter myPresenter;
    private static IStructuralSearchPatternBuilder[] ourBuilders;
    private static StructuralSearchPatternValidator ourPatternValidator;
    public IStructuralSearchPatternPresenter Presenter { get; }
    public PsiLanguageType Language { get; }
    public CssStructuralSearchPattern(string textPattern);
    public CssStructuralSearchPattern(string textPattern, IEnumerable`1<IPlaceholder> placeholders);
    public CssStructuralSearchPattern(string textPattern, IPlaceholder[] placeholders);
    public CssStructuralSearchPattern(string textPattern, StructuralSearchPatternParams params, IPlaceholder[] placeholders);
    public CssStructuralSearchPattern(string textPattern, StructuralSearchPatternParams params, IEnumerable`1<IPlaceholder> placeholders);
    public CssStructuralSearchPattern(string textPattern, StructuralSearchPatternParams params, IDictionary`2<string, IPlaceholder> placeholders);
    private static CssStructuralSearchPattern();
    public virtual IStructuralSearchPatternPresenter get_Presenter();
    public virtual IStructuralSearchPatternValidator GetValidator();
    public virtual bool GuessPlaceholders();
    public virtual IStructuralSearchPattern AddPatternPlaceholder(string name, string pattern, bool isShared);
    public virtual IStructuralSearchPattern AddOrPatternPlaceholder(string name, bool isShared, String[] patterns);
    public virtual IStructuralMatcher CreateMatcher();
    public virtual IStructuralMatcher CreateMatcher(IStructuralSearchPatternBuilder builder);
    public virtual PsiLanguageType get_Language();
    public virtual IStructuralSearchPattern Clone();
    public bool Equals(CssStructuralSearchPattern other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual void ReadPlaceholders(IEnumerable`1<PlaceholderInfo> placeholderInfos);
}
public class JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.CssStructuralSearchPatternBuilder : object {
    public sealed virtual IStructuralMatcher CreateMatcher(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
    public sealed virtual IPatternLexerResult ParsePattern(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
}
public class JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.CssStructuralSearchPatternPresenter : StructuralSearchPatternPresenterBase {
    public CssStructuralSearchPatternPresenter(CssStructuralSearchPattern pattern);
    protected virtual string GetListReplacement(IEnumerable enumerable);
    protected virtual ReplacePatternLexerResult ParsePattern(string text, IDictionary`2<string, IPlaceholder> placeholders);
}
public static class JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.CssStructuralSearchReplacer : object {
    public static ITreeNode Replace(IStructuralMatchResult match, string replacePattern, IDictionary`2<string, IPlaceholder> placeholders, bool formatAfterReplace, bool shortenReferences);
    public static void Replace(IEnumerable`1<IStructuralMatchResult> targets, string replacePattern, IDictionary`2<string, IPlaceholder> placeholders, bool formatAfterReplace, bool shortenReferences);
}
public class JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.CssTagNameMatcher : object {
    private string myTagName;
    private string myTagPrefix;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public CssTagNameMatcher(string tagPrefix, string tagName, bool isStrict);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.CssTagNameMatcher/<get_Children>d__5")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.CssTagNameMatcher/<get_Words>d__7")]
public sealed virtual IEnumerable`1<string> get_Words();
    public virtual string ToString();
}
[PsiSharedComponentAttribute]
public class JetBrains.ReSharper.Feature.Services.Css.StructuralSearch.HtmlStructuralSearchCssSelectorSupport : object {
    private IStructuralSearcherFactory myCssPatternFactory;
    public HtmlStructuralSearchCssSelectorSupport(StructuralSearchEngine structuralSearchEngine);
    public sealed virtual bool Validate(string text);
    public sealed virtual IStructuralMatcher CreateMatcher(string cssSelector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Css.CssLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Css.TodoItems.CssTodoContentsProvider : DefaultTodoContentsProvider {
    public virtual Nullable`1<TextRange> GetTokenContentsRange(string documentText, TextRange tokenRange, TokenNodeType tokenType);
}
internal class JetBrains.ReSharper.Feature.Services.Css.VisualElements.CssColorReference : object {
    [NotNullAttribute]
private ICssProperty myProperty;
    [NotNullAttribute]
private ICssPropertyValueExpression myValueExpression;
    private IColorElement myColorElement;
    private DocumentRange myDocumentRange;
    public ITreeNode Owner { get; }
    public Nullable`1<DocumentRange> ColorConstantRange { get; }
    public IColorElement ColorElement { get; }
    public ColorBindOptions BindOptions { get; }
    public CssColorReference(ICssProperty property, ICssIdentifierExpression identifierExpression, JetRgbaColor value);
    public CssColorReference(ICssProperty property, ICssPropertyValueExpression propertyValueExpression, JetRgbaColor value);
    public CssColorReference(ICssProperty property, ICssInvocationExpression invocationExpression, Nullable`1<JetRgbaColor> color);
    public sealed virtual ITreeNode get_Owner();
    public sealed virtual Nullable`1<DocumentRange> get_ColorConstantRange();
    public sealed virtual IColorElement get_ColorElement();
    public sealed virtual void Bind(IColorElement colorElement);
    private static ICssPropertyValueExpression CreateNewValueExpression(ICssPropertyValueExpression valueExpression, JetRgbaColor rgbColor);
    private static bool IsInMsFilter(ICssPropertyValueExpression valueExpression);
    private static string GetColorMethodName(ICssPropertyValueExpression valueExpression, JetRgbaColor rgbColor);
    public sealed virtual IEnumerable`1<IColorElement> GetColorTable();
    public sealed virtual ColorBindOptions get_BindOptions();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Css.CssLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.Css.VisualElements.VisualElementFactory : object {
    public sealed virtual IColorReference GetColorReference(ITreeNode element);
    private IColorReference ReferenceByString(ICssProperty property, ICssStringLiteralExpression cssStringLiteralExpression);
    private static IColorReference ReferenceByIdentifier(ICssProperty property, ICssIdentifierExpression cssIdentifierExpression);
    private static IColorReference ReferenceByLiteral(ICssProperty property, ICssColorExpression cssColorExpression);
    private static IColorReference ReferenceByInvocation(ICssProperty property, ICssInvocationExpression cssInvocationExpression);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Css.ZoneMarker : object {
}
[ContextActionDataBuilderAttribute("JetBrains.ReSharper.Feature.Services.Html.Bulbs.IWebContextActionDataProvider`1<JetBrains.ReSharper.Psi.Html.Tree.IHtmlFile>", "16")]
internal class JetBrains.ReSharper.Feature.Services.Html.Bulbs.HtmlContextActionDataBuilder : HtmlContextActionDataBuilderBase`2<IHtmlFile, HtmlLanguage> {
}
public abstract class JetBrains.ReSharper.Feature.Services.Html.Bulbs.HtmlContextActionDataBuilderBase`2 : ContextActionDataBuilderBase`2<THtmlLanguage, THtmlFile> {
    public sealed virtual IContextActionDataProvider BuildFromPsi(ISolution solution, ITextControl textControl, THtmlFile psiFile);
}
public interface JetBrains.ReSharper.Feature.Services.Html.Bulbs.IWebContextActionDataProvider`1 {
    [CanBeNullAttribute]
public abstract virtual T FindNodeAtCaret();
    [CanBeNullAttribute]
public abstract virtual T FindNodeAtOffset(int offset);
}
public class JetBrains.ReSharper.Feature.Services.Html.Bulbs.WebContextActionDataProvider`2 : CachedContextActionDataProviderBase`1<TFile> {
    public WebContextActionDataProvider`2(ISolution solution, ITextControl textControl, TFile file);
    [CanBeNullAttribute]
public static IWebContextActionDataProvider`1<TFile> Create(ISolution solution, ITextControl textControl);
    public sealed virtual T FindNodeAtCaret();
    public sealed virtual T FindNodeAtOffset(int offset);
    [CanBeNullAttribute]
public sealed virtual WebContextActionDataProvider`2<TFile, TTypeLanguage> TryTranslateToCurrentFork(IContentModelForkTranslator translator);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Html.HtmlLanguage", "16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Html.Clipboard.HtmlCopyPasteAssist : XmlCopyPasteAssistBase {
    [NotNullAttribute]
private HtmlLanguage myLanguage;
    private HtmlEntitiesService myHtmlEntitiesService;
    public HtmlCopyPasteAssist(HtmlLanguage language, HtmlEntitiesService htmlEntitiesService);
    public virtual CutOrCopySourceInfo GetSourceContext(string rawSourceText, ITreeNode treeNode, DocumentRange copyRange);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Html.Clipboard.HtmlCopyPasteAssist/<GetEscapedRanges>d__4")]
protected virtual IEnumerable`1<DocumentRange> GetEscapedRanges(ITreeNode treeNode);
    protected virtual bool IsEscapingAvailableForNode(ITreeNode treeNode, DocumentRange documentRange, Nullable`1& quotes);
    [CanBeNullAttribute]
private string GetUnescapedHtml(DocumentRange copyRange, ITreeNode treeNode);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Html.Clipboard.HtmlCopyPasteAssist/<GetEntityNodes>d__7")]
private static IEnumerable`1<Tuple`2<IHtmlTreeNode, TreeTextRange>> GetEntityNodes(ITreeNode treeNode);
    private bool IsContextAvailableForToken(IHtmlToken htmlTokenNode, DocumentRange documentRange);
    private static bool IsContextAvailableForTag(IHtmlTag htmlTag, DocumentRange documentRange);
}
[CodeCleanupModuleAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Html.CodeCleanup.HtmlNormalizeTagNamesCleanupModule : object {
    public string Name { get; }
    public PsiLanguageType LanguageType { get; }
    public ICollection`1<CodeCleanupOptionDescriptor> Descriptors { get; }
    public bool IsAvailableOnSelection { get; }
    public sealed virtual string get_Name();
    public sealed virtual PsiLanguageType get_LanguageType();
    public sealed virtual ICollection`1<CodeCleanupOptionDescriptor> get_Descriptors();
    public sealed virtual bool get_IsAvailableOnSelection();
    public sealed virtual void SetDefaultSetting(CodeCleanupProfile profile, DefaultProfileType profileType);
    public sealed virtual bool IsAvailable(IPsiSourceFile sourceFile);
    public sealed virtual bool IsAvailable(CodeCleanupProfile profile);
    public sealed virtual void Process(IPsiSourceFile sourceFile, IRangeMarker rangeMarker, CodeCleanupProfile profile, IProgressIndicator progressIndicator, IUserDataHolder cache);
}
[CodeCleanupModuleAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Html.CodeCleanup.HtmlReformatCodeCleanupModule : object {
    public static CodeCleanupOptionDescriptor`1<bool> HtmlFormatDescriptor;
    public ICollection`1<CodeCleanupOptionDescriptor> Descriptors { get; }
    public string Name { get; }
    public PsiLanguageType LanguageType { get; }
    public bool IsAvailableOnSelection { get; }
    private static HtmlReformatCodeCleanupModule();
    public sealed virtual ICollection`1<CodeCleanupOptionDescriptor> get_Descriptors();
    public sealed virtual void SetDefaultSetting(CodeCleanupProfile profile, DefaultProfileType profileType);
    public sealed virtual string get_Name();
    public sealed virtual PsiLanguageType get_LanguageType();
    public sealed virtual bool get_IsAvailableOnSelection();
    public sealed virtual bool IsAvailable(IPsiSourceFile sourceFile);
    public virtual bool IsAvailable(CodeCleanupProfile profile);
    public sealed virtual void Process(IPsiSourceFile sourceFile, IRangeMarker rangeMarker, CodeCleanupProfile profile, IProgressIndicator progressIndicator, IUserDataHolder cache);
}
public class JetBrains.ReSharper.Feature.Services.Html.CodeCleanup.TagEqualizingContext : object {
    [CompilerGeneratedAttribute]
private ITreeNode <OldToken>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNode <NewToken>k__BackingField;
    [CompilerGeneratedAttribute]
private TagNameContainer <TagNameContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlTag <ParentTag>k__BackingField;
    public ITreeNode OldToken { get; public set; }
    public ITreeNode NewToken { get; public set; }
    public TagNameContainer TagNameContainer { get; public set; }
    public HtmlTag ParentTag { get; public set; }
    public TagEqualizingContext(ITreeNode token, ITreeNode newToken, TagNameContainer tagNameContainer, HtmlTag parentTag);
    [CompilerGeneratedAttribute]
public ITreeNode get_OldToken();
    [CompilerGeneratedAttribute]
public void set_OldToken(ITreeNode value);
    [CompilerGeneratedAttribute]
public ITreeNode get_NewToken();
    [CompilerGeneratedAttribute]
public void set_NewToken(ITreeNode value);
    [CompilerGeneratedAttribute]
public TagNameContainer get_TagNameContainer();
    [CompilerGeneratedAttribute]
public void set_TagNameContainer(TagNameContainer value);
    [CompilerGeneratedAttribute]
public HtmlTag get_ParentTag();
    [CompilerGeneratedAttribute]
public void set_ParentTag(HtmlTag value);
}
internal class JetBrains.ReSharper.Feature.Services.Html.CodeCleanup.TagNameEqualizer : FormattingContextAwareProcessor {
    private TokenNodeType myTokenNodeType;
    private List`1<TagEqualizingContext> myTagEqualizingContexts;
    public TagNameEqualizer(TokenNodeType tokenNodeType);
    public void FixTokens();
    protected virtual void ProcessAfterInteriorCore(ITreeNode element, CodeFormattingContext context);
    private static ITreeNode GetNewToken(string tokenText, ITreeNode element);
    [CompilerGeneratedAttribute]
private void <FixTokens>b__3_0();
    [CompilerGeneratedAttribute]
private bool <ProcessAfterInteriorCore>b__4_0(ITreeNode x);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Html.CodeCompletion.HtmlAutomaticCodeCompletionStategiesUtils : object {
    [ExtensionAttribute]
public static bool MatchHtmlTokenType(IAutomaticCodeCompletionStrategy strategy, IFile file, ITextControl textControl, Func`3<TokenNodeType, IHtmlTokenNodeTypes, bool> matcher);
    [ExtensionAttribute]
public static bool MatchHtmlToken(IAutomaticCodeCompletionStrategy strategy, IFile file, ITextControl textControl, Func`2<IHtmlToken, bool> matcher);
    [ExtensionAttribute]
public static bool CheckClassOrIDAttribute(IHtmlToken token);
    public static bool CheckClassOrIDAttribute(string attributeName);
    [ExtensionAttribute]
public static bool CheckClassOrIDAttribute(ITagAttribute tagAttribute);
    [ExtensionAttribute]
public static bool CheckNotClassOrIDAttribute(IHtmlToken token);
}
public abstract class JetBrains.ReSharper.Feature.Services.Html.CodeCompletion.HtmlAutomaticStrategyOnCharacterBase`1 : object {
    public PsiLanguageType Language { get; }
    public bool ForceHideCompletion { get; }
    public abstract virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public virtual PsiLanguageType get_Language();
    public sealed virtual bool get_ForceHideCompletion();
    public abstract virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore settingsStore);
    public sealed virtual bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public virtual bool AcceptsFile(IFile file, ITextControl textControl);
}
public abstract class JetBrains.ReSharper.Feature.Services.Html.CodeCompletion.HtmlAutomaticStrategyOnWhitespaceBase`1 : HtmlAutomaticStrategyOnCharacterBase`1<TFile> {
    public virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore boundSettingsStore);
    public virtual bool AcceptsFile(IFile file, ITextControl textControl);
    protected abstract virtual bool GetIntellisenseEnabled(IContextBoundSettingsStore toDataContext);
    protected abstract virtual bool ShouldPopup(IHtmlToken tokenNode);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.AutopopupEnabledSettingsKey", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "HTMLSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.Html.CodeCompletion.Settings.HtmlAutopopupEnabledSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "OnSpaceSettingDescription")]
public AutopopupType OnSpace;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "OnPunctuationSettingDescription")]
public AutopopupType OnPunctuation;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "OnIdentifiersSettingDescription")]
public AutopopupType OnIdentifiers;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "OnSettingDescription")]
public AutopopupType OnHash;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "OnClassesAndIDsSettingDescription")]
public AutopopupType OnClassesAndIDs;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Html.CodeCompletion.Settings.HtmlCodeCompletionManager : LanguageSpecificCodeCompletionManager {
    public PsiLanguageType PsiLanguage { get; }
    public HtmlCodeCompletionManager(CodeCompletionSettingsService codeCompletionSettings);
    public virtual SettingsScalarEntry GetSettingsEntry(ISettingsSchema settingsSchema);
    public virtual PsiLanguageType get_PsiLanguage();
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntellisenseEnabledSettingsKey", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "OverrideVSIntelliSenseForHTMLSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.Html.CodeCompletion.Settings.IntellisenseEnabledSettingHtml : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "HTMLHtmlFilesAndServerPagesSettingDescription")]
public bool IntellisenseEnabled;
}
public abstract class JetBrains.ReSharper.Feature.Services.Html.CodeStructure.HtmlCodeStructureElement`1 : CodeStructureElement {
    protected static TextStyle NAME_STYLE;
    private ITreeNodePointer`1<T> myNodePointer;
    protected IHtmlTokenNodeTypes myTokenTypes;
    [CompilerGeneratedAttribute]
private PsiLanguageType <Language>k__BackingField;
    private static Char[] ourLineChars;
    private static Char[] ourWhitespaceChars;
    private IPsiSourceFile mySourceFile;
    public ITreeNode TreeNode { get; }
    [CanBeNullAttribute]
protected T Element { get; }
    public PsiLanguageType Language { get; }
    public DocumentRange NavigationRange { get; }
    public bool InitiallyExpanded { get; }
    protected HtmlCodeStructureElement`1(T element, IHtmlTokenNodeTypes tokenTypes, CodeStructureElement parent);
    private static HtmlCodeStructureElement`1();
    public virtual ITreeNode get_TreeNode();
    protected T get_Element();
    [CompilerGeneratedAttribute]
public virtual PsiLanguageType get_Language();
    public virtual IFileStructureAspect GetFileStructureAspect();
    public virtual IGotoFileMemberAspect GetGotoMemberAspect();
    public virtual IMemberNavigationAspect GetMemberNavigationAspect();
    public virtual DocumentRange GetTextRange();
    protected virtual void DumpSelf(TextWriter builder);
    protected abstract virtual Tuple`3<IconId, RichText, RichText> GetPresentation(PresentationState state);
    public virtual void Present(StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    public virtual DocumentRange get_NavigationRange();
    public sealed virtual bool get_InitiallyExpanded();
    public abstract virtual IList`1<string> GetQuickSearchTexts();
    public sealed virtual IPsiSourceFile GetSourceFile();
    public sealed virtual bool CanMoveElements(RelativeLocation location, IList`1<CodeStructureElement> dropElements);
    public virtual void MoveElements(RelativeLocation location, IList`1<CodeStructureElement> dropElements);
    public sealed virtual bool CanRemove();
    public virtual void Remove();
    public virtual bool CanRename();
    public virtual string InitialName();
    public virtual void Rename(string newName);
    public virtual void Present(IMenuItemDescriptor descriptor, PresentationState state);
    public virtual DocumentRange[] GetNavigationRanges();
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.HtmlProjectFileType", "16")]
public class JetBrains.ReSharper.Feature.Services.Html.CodeStructure.HtmlCodeStructureProvider : object {
    private ILanguageManager myLanguageManager;
    public HtmlCodeStructureProvider(ILanguageManager languageManager);
    public sealed virtual CodeStructureRootElement Build(IPsiSourceFile sourceFile, CodeStructureOptions options);
    protected virtual IRecursiveElementProcessor CreateElementProcessor(HtmlCodeStructureRootElement root, IHtmlTokenNodeTypes tokenTypes);
}
public class JetBrains.ReSharper.Feature.Services.Html.CodeStructure.HtmlCodeStructureRootElement : CodeStructureRootElement {
    public HtmlCodeStructureRootElement(IFile file);
}
public static class JetBrains.ReSharper.Feature.Services.Html.CodeStructure.HtmlCodeStructureUtils : object {
    public static RichText CreateCodeText(TreeTextRange wholeCodeRange, TreeTextRange trimmedCodeRange, IFile file);
    public static TreeTextRange TrimCodeRangeViaGeneratedPsi(DocumentRange originalRange, IPsiSourceFile sourceFile, IFile originalFile);
    public static TreeTextRange TrimRange(IFile file, TreeTextRange sourceTreeRange, ICollection`1<TokenNodeType> skipNodes);
    public static IEnumerable`1<T> GetSiblingsBeforeAndSelf(ITreeNode element, TreeTextRange range);
    public static IEnumerable`1<T> GetSiblingsAfterAndSelf(ITreeNode element, TreeTextRange range);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Html.CodeStructure.HtmlCodeStructureUtils/<GetSiblingsAndSelf>d__5`1")]
public static IEnumerable`1<T> GetSiblingsAndSelf(ITreeNode element, TreeTextRange range, Func`3<ITreeNode, Func`2<ITreeNode, TreeNodeActionType>, ITreeNode> finder);
}
public class JetBrains.ReSharper.Feature.Services.Html.CodeStructure.HtmlConditionalCommentCodeStructureElement : HtmlCodeStructureElement`1<IHtmlConditionalComment> {
    public HtmlConditionalCommentCodeStructureElement(IHtmlConditionalComment element, IHtmlTokenNodeTypes tokenTypes, CodeStructureElement parent);
    protected virtual Tuple`3<IconId, RichText, RichText> GetPresentation(PresentationState state);
    public virtual IList`1<string> GetQuickSearchTexts();
}
public class JetBrains.ReSharper.Feature.Services.Html.CodeStructure.HtmlTagCodeStructureElement`1 : HtmlCodeStructureElement`1<TTag> {
    private static string IdPrefix;
    private static string ClassPrefix;
    private static TextStyle ourIdStyle;
    private static TextStyle ourClassStyle;
    private static TextStyle ourTextStyle;
    private static TextStyle ourInfoStyle;
    protected IDictionary`2<string, AttributeType<TTag>> AttributeTypes;
    private static IDictionary`2<AttributeType<TTag>, TextStyle> ourAttributeStyles;
    private NodeTypeSet myTextTokenNodeTypes;
    public DocumentRange NavigationRange { get; }
    public HtmlTagCodeStructureElement`1(TTag tag, IHtmlTokenNodeTypes tokenTypes, CodeStructureElement parent);
    private static HtmlTagCodeStructureElement`1();
    protected virtual RichText DecorElement(TTag tag, RichText text);
    protected virtual Tuple`3<IconId, RichText, RichText> GetPresentation(PresentationState state);
    public virtual DocumentRange get_NavigationRange();
    private static RichText GetAttributeText(Tuple`3<ITagAttribute, AttributeType<TTag>, TextStyle> tuple);
    private IEnumerable`1<Tuple`3<ITagAttribute, AttributeType<TTag>, TextStyle>> GetAttributes();
    public virtual IList`1<string> GetQuickSearchTexts();
    private IEnumerable`1<string> GetQuickSearchTexts(Tuple`3<ITagAttribute, AttributeType<TTag>, TextStyle> tuple);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Html.CodeStructure.HtmlTagCodeStructureElement`1/<MultipleWithTagNames>d__19")]
private IEnumerable`1<string> MultipleWithTagNames(IEnumerable`1<string> suffixes);
    public virtual DocumentRange[] GetNavigationRanges();
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <GetQuickSearchTexts>b__17_0(Tuple`3<ITagAttribute, AttributeType<TTag>, TextStyle> tuple);
}
public interface JetBrains.ReSharper.Feature.Services.Html.CodeStructure.ISkipNodesProvider {
    public JetHashSet`1<TokenNodeType> Nodes { get; }
    public abstract virtual JetHashSet`1<TokenNodeType> get_Nodes();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Html.HtmlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Html.Comment.HtmlBlockCommentActionProvider : object {
    private IHtmlTokenNodeTypes myTokenNodeTypes;
    protected TokenNodeType CommentStart { get; }
    protected TokenNodeType CommentBody { get; }
    protected TokenNodeType CommentEnd { get; }
    public string StartBlockCommentMarker { get; }
    public string EndBlockCommentMarker { get; }
    public string NestedStartBlockCommentMarker { get; }
    public string NestedEndBlockCommentMarker { get; }
    public HtmlBlockCommentActionProvider(IHtmlTokenNodeTypes tokenNodeTypes);
    protected virtual TokenNodeType get_CommentStart();
    protected virtual TokenNodeType get_CommentBody();
    protected virtual TokenNodeType get_CommentEnd();
    public virtual string get_StartBlockCommentMarker();
    public virtual string get_EndBlockCommentMarker();
    public sealed virtual string get_NestedStartBlockCommentMarker();
    public sealed virtual string get_NestedEndBlockCommentMarker();
    public sealed virtual DocumentRange GetBlockComment(ITokenNode tokenNode);
    public sealed virtual DocumentOffset InsertBlockCommentPosition(ITokenNode tokenNode, DocumentOffset position);
    public virtual bool IsAvailable(IFile file, DocumentRange range, Boolean& disableAllProviders);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Html.HtmlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Html.Comment.HtmlCommentOrDirectiveInserter : CommentOrDirectiveInserterBase {
    public HtmlCommentOrDirectiveInserter(PsiLanguageType languageType, IBlockCommentActionProvider blockCommentActionProvider);
    public virtual bool Insert(TreeTextRange treeRange, IFile file, string actionName, string insertBefore, string insertAfter);
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.Comment.ICommentOrDirectiveInserter.InsertBlockComment(TreeTextRange treeRange, IFile file, string actionName, string insertBefore, string insertAfter);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Html.HtmlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Html.Comment.HtmlLineCommentActionProvider : object {
    private IHtmlTokenNodeTypes myTokenNodeTypes;
    public string StartLineCommentMarker { get; }
    public string EndLineCommentMarker { get; }
    protected TokenNodeType CommentStart { get; }
    protected TokenNodeType CommentEnd { get; }
    public HtmlLineCommentActionProvider(IHtmlTokenNodeTypes tokenNodeTypes);
    public virtual string get_StartLineCommentMarker();
    public virtual string get_EndLineCommentMarker();
    protected virtual TokenNodeType get_CommentStart();
    protected virtual TokenNodeType get_CommentEnd();
    public sealed virtual bool ShouldInsertAtLineStart(IContextBoundSettingsStore settingsStore);
    public sealed virtual bool ShouldInsertSpaceAtCommentStartAndEnd(IContextBoundSettingsStore settingsStore);
    public virtual LineCommentRangeInfo GetLineCommentRange(IFile psiFile, DocumentRange lineRange);
}
public abstract class JetBrains.ReSharper.Feature.Services.Html.Daemon.HtmlDaemonStageBase`2 : object {
    public sealed virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
    protected abstract virtual IDaemonStageProcess CreateProcessInternal(TFile file, IDaemonProcess process, IContextBoundSettingsStore settingsStore);
    protected virtual bool IsSupported(IPsiSourceFile sourceFile);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Html.HtmlContextUtil : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IconId GetIcon(IHtmlTag tag);
    [ExtensionAttribute]
[NotNullAttribute]
public static IconId GetIcon(ITagAttribute attribute);
    [ExtensionAttribute]
public static T GetOuterTag(ITreeNode tagContainer, TreeTextRange range, Func`2<T, bool> predicate);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<T> GetInnerTags(IHtmlTagContainerMarker tagContainer);
    private static void EnumerateTagContent(IHtmlTagContainerMarker parent, List`1<T> list);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<ITagAttribute> GetInnerAttributes(IHtmlFile file, IHtmlTag tag);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Html.HtmlContextUtil/<WalkWhitespaceNodes>d__6")]
[ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<ITokenNode> WalkWhitespaceNodes(ITokenNode token, Func`2<ITokenNode, ITokenNode> walker);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Html.HtmlContextUtil/<PrevSiblings>d__7")]
[ExtensionAttribute]
public static IEnumerable`1<ITreeNode> PrevSiblings(ITreeNode node);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Html.HtmlContextUtil/<NextSiblings>d__8")]
[ExtensionAttribute]
public static IEnumerable`1<ITreeNode> NextSiblings(ITreeNode node);
    [ExtensionAttribute]
public static IEnumerable`1<ITreeNode> Siblings(ITreeNode node);
}
[DeclaredElementDescriptionProviderAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Html.HtmlDescriptionsCache : object {
    [NotNullAttribute]
private IHtmlDeclaredElementsCache myHtmlDeclaredElementTypes;
    private IEnumerable`1<IHtmlDeclaredElementsProvider> myLanguageSpecificAttributesForHtmlTags;
    [NotNullAttribute]
private object myLockObject;
    private bool myIsInitialized;
    private bool myIsDisposed;
    private IEnumerable`1<string> myImportantCommonAttributes;
    [NotNullAttribute]
private Dictionary`2<string, HtmlTagDescription> myTags;
    [NotNullAttribute]
private Dictionary`2<string, AttributeDescription> myCommonAttributesDescription;
    [NotNullAttribute]
private Dictionary`2<string, string> myTypesDescription;
    [NotNullAttribute]
private List`1<string> myErrorLog;
    [NotNullAttribute]
private Dictionary`2<IHtmlAttributeDeclaredElement, AttributeDescription> myAttributeDescriptions;
    public IEnumerable`1<string> ErrorLog { get; }
    public IEnumerable`1<string> ImportantCommonAttributes { get; }
    public int Priority { get; }
    public IEnumerable`1<IHtmlDeclaredElementsProvider> LanguageSpecificAttributesForHtmlTags { get; }
    public HtmlDescriptionsCache(Lifetime lifetime, IPsiServices psiServices, IHtmlDeclaredElementsCache htmlDeclaredElementTypes, IEnumerable`1<IHtmlDeclaredElementsProvider> languageSpecificAttributesForHtmlTags);
    public IEnumerable`1<string> get_ErrorLog();
    public IEnumerable`1<string> get_ImportantCommonAttributes();
    private void InitializeIfNecessary();
    private HtmlTagDescription GetTagDescriptionInternal(IHtmlTagDeclaredElement htmlTagDeclaredElement);
    public sealed virtual IHtmlTagDescription GetTagDescription(IHtmlTagDeclaredElement element);
    public string GetDescriptionForHtmlValueType(IHtmlAttributeValueType attributeValueType);
    [CanBeNullAttribute]
public AttributeDescription GetCommonAttributeDescription(string name);
    private void Clear();
    private sealed virtual override void System.IDisposable.Dispose();
    public sealed virtual RichTextBlock GetElementDescription(IDeclaredElement element, DeclaredElementDescriptionStyle style, PsiLanguageType language, IPsiModule module);
    public sealed virtual Nullable`1<bool> IsElementObsolete(IDeclaredElement element, RichTextBlock& obsoleteDescription, DeclaredElementDescriptionStyle style);
    public sealed virtual int get_Priority();
    public IEnumerable`1<IHtmlDeclaredElementsProvider> get_LanguageSpecificAttributesForHtmlTags();
    [CompilerGeneratedAttribute]
private void <InitializeIfNecessary>b__18_2(ISymbolInfo symbolInfo);
}
public interface JetBrains.ReSharper.Feature.Services.Html.IHtmlDescriptionsCache {
    [NotNullAttribute]
public abstract virtual IHtmlTagDescription GetTagDescription(IHtmlTagDeclaredElement element);
}
public interface JetBrains.ReSharper.Feature.Services.Html.IHtmlTagDescription {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<AttributeInfo> GetAttributesByImportance(IPsiSourceFile sourceFile, int offset);
    public abstract virtual Nullable`1<AttributeInfo> GetAttributeByCode(string name, IPsiSourceFile sourceFile, int offset);
}
[DeclaredElementDescriptionProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Html.Javascript.Angular2.AngularDeclaredElementDescriptionProvider : object {
    private static Regex ourJsDocLinkRegex;
    private static Regex ourJsDocLink2Regex;
    public int Priority { get; }
    private static AngularDeclaredElementDescriptionProvider();
    public sealed virtual RichTextBlock GetElementDescription(IDeclaredElement element, DeclaredElementDescriptionStyle style, PsiLanguageType language, IPsiModule module);
    private static RichText TryFetchInfoFromDecls(TDeclaredElement element, Func`2<TDeclaredElement, ICollection`1<IAngular2DeclarationInfo>> fetch);
    private static RichText TryFetchInfoFromDeclsSync(TDeclaredElement element, Func`2<TDeclaredElement, ICollection`1<IAngular2DeclarationInfo>> fetch);
    private static string AngularAttributeKindToDesc(AngularAttributeKind kind);
    private static RichText DescriptionToRichText(AngularEntityDescription description);
    private static RichTextBlock GetDescriptionForDirective(IAngularHtmlDirectiveDeclaredElement angularDirective);
    private static RichTextBlock CreateAugmentedInfo(RichText desc, string generalInfo);
    private static RichTextBlock GetDescriptionForAttribute(IAngularHtmlAttributeDeclaredElement angularAttribute);
    private static RichTextBlock GetDescriptionForTag(IAngularHtmlTagDeclaredElement angularTag);
    public sealed virtual Nullable`1<bool> IsElementObsolete(IDeclaredElement element, RichTextBlock& obsoleteDescription, DeclaredElementDescriptionStyle style);
    public sealed virtual int get_Priority();
}
public class JetBrains.ReSharper.Feature.Services.Html.Javascript.CustomReferences.FileReferenceFactory : object {
    private bool myRelativeToWebRoot;
    public FileReferenceFactory(bool relativeToWebRoot);
    public sealed virtual ReferenceCollection GetReferences(ITreeNode element, ReferenceCollection oldReferences);
    private static ReferenceCollection CreateTypeScriptPackageReferences(IDocCommentNode ownerCommentToken, IJavaScriptDocCommentBlock docComment, string value, TreeTextRange range);
    private static ReferenceCollection CreateTypeScriptLibReferences(IDocCommentNode ownerCommentToken, IJavaScriptDocCommentBlock docComment, string value, TreeTextRange range);
    private static ReferenceCollection CreateTypeScriptPathReferences(ITreeNode element, IDocCommentNode ownerCommentToken, IJavaScriptDocCommentBlock docComment, string value, int relativeStartOffset);
    private static ReferenceCollection CreatePathReferences(ITreeNode element, IDocCommentNode ownerCommentToken, IJavaScriptDocCommentBlock docComment, string value, int relativeStartOffset, bool relativeToWebRoot);
    public sealed virtual bool HasReference(ITreeNode element, IReferenceNameContainer names);
}
[ReferenceProviderFactoryAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Html.Javascript.CustomReferences.FileReferenceFactoryProvider : object {
    [CompilerGeneratedAttribute]
private ISignal`1<IReferenceProviderFactory> <Changed>k__BackingField;
    public ISignal`1<IReferenceProviderFactory> Changed { get; }
    public FileReferenceFactoryProvider(Lifetime lifetime);
    public sealed virtual IReferenceFactory CreateFactory(IPsiSourceFile sourceFile, IFile file, IWordIndex wordIndexForChecks);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IReferenceProviderFactory> get_Changed();
}
public class JetBrains.ReSharper.Feature.Services.Html.Javascript.CustomReferences.JavaScriptFileReference : HtmlFileReference`2<IJavaScriptDocCommentBlock, IDocCommentNode> {
    private bool myRelativeToWebRoot;
    public bool CanBeMappedOrIgnored { get; }
    public WebRootCalculationKind WebRootCalculationKind { get; }
    public JavaScriptFileReference(IJavaScriptDocCommentBlock owner, IDocCommentNode token, IQualifier qualifier, TreeTextRange rangeWithin, bool relativeToWebRoot);
    public virtual bool get_CanBeMappedOrIgnored();
    public JavaScriptFileReference SetText(string text);
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    public virtual WebRootCalculationKind get_WebRootCalculationKind();
    public JavaScriptFileReference SetText(string text, TreeTextRange range);
    public virtual ISymbolTable GetCompletionSymbolTable();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JavaScriptLikeBaseLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Html.Javascript.CustomReferences.JavaScriptFileReferenceBinder : object {
    public virtual IReference SetText(PathReferenceBase`2<TOwner, TToken> reference, string newText);
    public virtual ITreeNode SetText(PathReferenceBase`2<TOwner, TToken> reference, TreeTextRange range, string newText);
    public virtual string GetTargetPath(PathReferenceBase`2<TOwner, TToken> reference, IPathDeclaredElement pathDeclaredElement);
}
public class JetBrains.ReSharper.Feature.Services.Html.Javascript.CustomReferences.JavaScriptFolderReference : HtmlFolderReference`2<IJavaScriptDocCommentBlock, IDocCommentNode> {
    private bool myRelativeToWebRoot;
    public WebRootCalculationKind WebRootCalculationKind { get; }
    public JavaScriptFolderReference(IJavaScriptDocCommentBlock owner, IDocCommentNode token, IQualifier qualifier, TreeTextRange rangeWithin, bool relativeToWebRoot);
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    public virtual WebRootCalculationKind get_WebRootCalculationKind();
    public virtual ISymbolTable GetCompletionSymbolTable();
}
public static class JetBrains.ReSharper.Feature.Services.Html.Javascript.CustomReferences.JavaScriptPathReferenceUtil : object {
    public static ISymbolTable CreateTable(PathReferenceContext context, ProjectFileType expectedFileType);
}
public class JetBrains.ReSharper.Feature.Services.Html.Javascript.CustomReferences.TypeScriptFileReference : JavaScriptFileReference {
    public WebRootCalculationKind WebRootCalculationKind { get; }
    public bool CanBeMappedOrIgnored { get; }
    public TypeScriptFileReference(IJavaScriptDocCommentBlock owner, IDocCommentNode token, IQualifier qualifier, TreeTextRange rangeWithin);
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    public virtual WebRootCalculationKind get_WebRootCalculationKind();
    public virtual bool get_CanBeMappedOrIgnored();
}
public class JetBrains.ReSharper.Feature.Services.Html.Javascript.CustomReferences.TypeScriptFolderReference : JavaScriptFolderReference {
    public WebRootCalculationKind WebRootCalculationKind { get; }
    public bool CanBeMappedOrIgnored { get; }
    public TypeScriptFolderReference(IJavaScriptDocCommentBlock owner, IDocCommentNode token, IQualifier qualifier, TreeTextRange rangeWithin);
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    public virtual WebRootCalculationKind get_WebRootCalculationKind();
    public virtual bool get_CanBeMappedOrIgnored();
}
public class JetBrains.ReSharper.Feature.Services.Html.Javascript.CustomReferences.TypeScriptLibReference : TypeScriptFileReference {
    private string myLibName;
    public TypeScriptLibReference(string value, IJavaScriptDocCommentBlock owner, IDocCommentNode token, IQualifier qualifier, TreeTextRange rangeWithin);
    public virtual string GetName();
}
public class JetBrains.ReSharper.Feature.Services.Html.Javascript.CustomReferences.TypeScriptPackageReference : TypeScriptFileReference {
    private IFileDependenciesSet myDependenciesSet;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    public WebRootCalculationKind WebRootCalculationKind { get; }
    public bool CanBeMappedOrIgnored { get; }
    public TypeScriptPackageReference(string value, IJavaScriptDocCommentBlock owner, IDocCommentNode token, IQualifier qualifier, TreeTextRange rangeWithin, IFileDependenciesSet dependenciesSet);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Value();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    public virtual WebRootCalculationKind get_WebRootCalculationKind();
    public virtual bool get_CanBeMappedOrIgnored();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Html.Javascript.TypingAssist.JavaScriptHtmlTypingAssist : JavaScriptTypingAssistBase {
    public JavaScriptHtmlTypingAssist(Lifetime lifetime, TypingAssistDependencies dependencies);
    protected virtual bool IsSupported(ITextControl textControl);
    private bool IsProjectFileSupported(ITextControl textControl, ISolution solution);
    public virtual int TextControlToLexer(ITextControl textControl, DocOffset offset);
    protected virtual bool AllowCpuIntensiveAssists(ITextControl textControl);
    protected virtual bool DoHandleEnterAfterTagHeader(ITextControl textControl);
    public virtual bool QuickCheckAvailability(ITextControl textControl, IPsiSourceFile projectFile);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Html.Javascript.TypingAssist.JavaScriptTagSmartEnterHandler : object {
    private IProjectFileTypeServices myProjectFileTypeServices;
    private JavaScriptHtmlTypingAssist myJavaScriptHtmlTypingAssist;
    public JavaScriptTagSmartEnterHandler(IProjectFileTypeServices projectFileTypeServices, JavaScriptHtmlTypingAssist javaScriptHtmlTypingAssist);
    public sealed virtual bool IsTagSupported(IHtmlTag tag, ITextControl textControl);
    public sealed virtual bool FormatOnSmartEnter(ITreeNode header, ITreeNode footer, ITextControl textControl, bool insertAdditionalLineBreak);
    public sealed virtual bool IsInsideSupportedTag(ITreeNode node, ITextControl textControl);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Html.Javascript.TypingAssist.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Html.Javascript.ZoneMarker : object {
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Html.LiveTemplates.HtmlLiveTemplatesUtil : object {
    [ExtensionAttribute]
public static bool AnyHotspotIntersects(IHotspotContext context, IHtmlToken token);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Html.LiveTemplates.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Html.HtmlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Html.MathingBrace.HtmlMatchingBraceProvider : object {
    private IHtmlTokenNodeTypes myTokenNodeTypes;
    private NodeTypeSet myHtmlBracketNodeTypes;
    protected IList`1<Pair`2<TokenNodeType, TokenNodeType>> myLeftRightSimplePairs;
    public HtmlMatchingBraceProvider(HtmlLanguage language, IHtmlTokenNodeTypes tokenNodeTypes);
    public sealed virtual bool IsLeftBracket(TokenNodeType tokenType);
    public sealed virtual bool IsRightBracket(TokenNodeType tokenType);
    public sealed virtual bool Match(TokenNodeType token1, TokenNodeType token2);
    public sealed virtual int Compare(TokenNodeType x, TokenNodeType y);
}
[ZoneMarkerAttribute]
[OptionsPageAttribute("HTML", "HTML", "JetBrains.Application.Resources.IdeThemedIcons/HtmlDocument")]
public class JetBrains.ReSharper.Feature.Services.Html.Options.HtmlPage : AEmptyOptionsPage {
    public static string PID;
}
public class JetBrains.ReSharper.Feature.Services.Html.Options.HtmlTypingAssistOptions : HtmlTypingAssistOptions`1<HtmlTypingAssistSettings> {
}
public class JetBrains.ReSharper.Feature.Services.Html.Options.HtmlTypingAssistOptions`1 : object {
    public static Expression`1<Func`2<TSettings, bool>> FormatOnClosingTagExpression;
    public static Expression`1<Func`2<TSettings, bool>> FormatOnEnterExpression;
    public static Expression`1<Func`2<TSettings, bool>> ChangeTagNameTracking;
    public static Expression`1<Func`2<TSettings, bool>> CloseTags;
    public static Expression`1<Func`2<TSettings, bool>> AllowCpuIntensiveTypingAssists;
    private static HtmlTypingAssistOptions`1();
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.Options.TypingAssistSettings", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "HTMLTypingAssistanceSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.Html.Options.HtmlTypingAssistSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "AutoFormatOnClosingTagSettingDescription")]
public bool FormatOnClosingTag;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "AutoFormatOnEnterSettingDescription")]
public bool FormatOnEnter;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "SynchronousChangingOfMatchingTagSettingDescription")]
public bool ChangedTagNameTracking;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "AutoInsertClosingTagsSettingDescription")]
public bool CloseTags;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "AllowCPUIntensiveTypingAssistsSettingDescription")]
public bool AllowCpuIntensiveTypingAssists;
}
public abstract class JetBrains.ReSharper.Feature.Services.Html.RearrangeCode.HtmlAttributeRearrangeableElementTypeBase`2 : object {
    public sealed virtual IRearrangeable CreateElement(IPsiDocumentRangeView psiDocumentRangeView);
}
[RearrangeableElementTypeAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Html.RearrangeCode.HtmlTagAttributeRearrangeableElementType : HtmlAttributeRearrangeableElementTypeBase`2<ITagAttribute, IHtmlTag> {
}
public class JetBrains.ReSharper.Feature.Services.Html.RearrangeCode.RearrangeableAttribute`2 : RearrangeableElementAppendRemove`2<TAttribute, TContainer> {
    protected TContainer Parent { get; }
    public Direction SupportedDirections { get; }
    public RearrangeableAttribute`2(TAttribute attribute);
    protected virtual TContainer get_Parent();
    public virtual Direction get_SupportedDirections();
    protected virtual IEnumerable`1<TAttribute> GetChildren(TContainer parent);
    protected virtual void RemoveChild(TContainer parent, TAttribute child);
    protected virtual TAttribute AddBefore(TContainer parent, TAttribute child, TAttribute anchor);
    protected virtual TAttribute AddAfter(TContainer parent, TAttribute child, TAttribute anchor);
}
public class JetBrains.ReSharper.Feature.Services.Html.RearrangeCode.RearrangeableTagContainer : RearrangeableElement {
    private IHtmlTagContainer myTagContainer;
    public string Title { get; }
    protected ITreeNode Element { get; }
    public Direction SupportedDirections { get; }
    private RearrangeableTagContainer(IHtmlTagContainer tagContainer);
    public virtual string get_Title();
    protected virtual ITreeNode get_Element();
    public virtual Direction get_SupportedDirections();
    public virtual bool CanMove(Direction direction);
    protected virtual ITreeNode MoveUnderPsiTransaction(Direction direction);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Html.RegExp.HtmlRegExpInjectedPsiProvider : LiteralsInjectionPsiProvider`2<HtmlLanguage, HtmlRegexLanguage> {
    public bool ProvidedLanguageCanHaveNestedInjects { get; }
    public HtmlRegExpInjectedPsiProvider(HtmlRegExpInjectionProvider injectorProvider);
    public virtual bool get_ProvidedLanguageCanHaveNestedInjects();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Html.RegExp.HtmlRegExpInjectionProvider : LanguageInjectorProviderInLiteralsWithRangeMarkersBase`3<IJsRegexFile, IHtmlAttributeValue, HtmlLiteralInjectionTarget> {
    public bool SupportsInjectionComment { get; }
    public bool CanRegenerate { get; }
    public string ProvidedInjectionID { get; }
    public PsiLanguageType SupportedOriginalLanguage { get; }
    public PsiLanguageType ProvidedLanguage { get; }
    public IconId Icon { get; }
    public HtmlRegExpInjectionProvider(Lifetime lifetime, ISolution solution, IPersistentIndexManager persistentIndexManager, InjectionNodeProvidersViewer providersViewer, HtmlLiteralInjectionTarget injectionTarget);
    public virtual ITreeNode UpdateNode(IFile generatedFile, ITreeNode generatedNode, ITreeNode originalNode, Int32& length, string prefix, string suffix);
    public virtual bool get_SupportsInjectionComment();
    public virtual bool get_CanRegenerate();
    public virtual string get_ProvidedInjectionID();
    public virtual PsiLanguageType get_SupportedOriginalLanguage();
    public virtual PsiLanguageType get_ProvidedLanguage();
    public virtual IconId get_Icon();
    public virtual int GetStartOffset(ITreeNode originalNode);
    public virtual int GetEndOffset(ITreeNode originalNode);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Html.RegExp.NodeProviders.HtmlRegexInInputPatternNodeProvider : object {
    private HashSet`1<string> myInputTypes;
    public PsiLanguageType SupportedOriginalLanguage { get; }
    public string ProvidedLanguageID { get; }
    public string Summary { get; }
    public string Description { get; }
    public string Guid { get; }
    public String[] Words { get; }
    public String[] Attributes { get; }
    public sealed virtual bool Check(ITreeNode node, ILiteralsInjectionDataProvider injectedContext, Object& data);
    public sealed virtual string GetPrefix(ITreeNode node, object data);
    public sealed virtual string GetSuffix(ITreeNode node, object data);
    public sealed virtual PsiLanguageType get_SupportedOriginalLanguage();
    public sealed virtual string get_ProvidedLanguageID();
    public sealed virtual string get_Summary();
    public sealed virtual string get_Description();
    public sealed virtual string get_Guid();
    public sealed virtual String[] get_Words();
    public sealed virtual String[] get_Attributes();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Html.RegExp.ZoneMarker : object {
}
public class JetBrains.ReSharper.Feature.Services.Html.SelectEmbracingConstruct.HtmlDotSelection`1 : DotSelection`1<TFile> {
    private ISelectEmbracingConstructProviderWithSecondaryPsi`1<TFile> myProvider;
    private TreeOffset myOffset;
    private NodeTypeSet myAllowedTokens;
    protected TreeOffset Offset { get; }
    protected ISelectEmbracingConstructProviderWithSecondaryPsi`1<TFile> Provider { get; }
    public HtmlDotSelection`1(ISelectEmbracingConstructProviderWithSecondaryPsi`1<TFile> provider, TFile file, TreeOffset offset, bool selectBetterToken, bool useCamelHumps, bool appendInjectedPsi);
    protected TreeOffset get_Offset();
    protected ISelectEmbracingConstructProviderWithSecondaryPsi`1<TFile> get_Provider();
    protected virtual ISelectedRange GetParentInternal(ITokenNode tokenNode);
    protected virtual ISelectedRange CreateTokenPartSelection(ITokenNode tokenNode, TreeTextRange treeTextRange);
    protected virtual ISelectedRange CreateTreeNodeSelection(ITokenNode tokenNode);
    protected virtual bool IsPrevTokenBetter(ITokenNode prevToken, ITokenNode tokenNode);
    protected virtual bool IsWordToken(ITokenNode token);
    protected virtual bool IsLiteralToken(ITokenNode token);
    protected virtual bool IsSpaceToken(ITokenNode token);
    protected virtual bool IsNewLineToken(ITokenNode token);
}
public class JetBrains.ReSharper.Feature.Services.Html.SelectEmbracingConstruct.HtmlElementRange`1 : HtmlSelectedRange`1<TFile> {
    public ExtendToTheWholeLinePolicy ExtendToWholeLine { get; }
    public ISelectedRange Parent { get; }
    public HtmlElementRange`1(ISelectEmbracingConstructProviderWithSecondaryPsi`1<TFile> provider, ITreeNode element);
    private static DocumentRange GetDocumentRange(ITreeNode element);
    public virtual ExtendToTheWholeLinePolicy get_ExtendToWholeLine();
    public virtual ISelectedRange get_Parent();
}
public abstract class JetBrains.ReSharper.Feature.Services.Html.SelectEmbracingConstruct.HtmlSelectedRange`1 : SelectedRangeBase`1<TFile> {
    protected ISelectEmbracingConstructProviderWithSecondaryPsi`1<TFile> myProvider;
    protected ITreeNode myNode;
    protected HtmlSelectedRange`1(ISelectEmbracingConstructProviderWithSecondaryPsi`1<TFile> provider, ITreeNode node, DocumentRange documentRange);
    protected ISelectedRange BuildHtmlNodeSelection(ITreeNode treeNode);
    protected static DocumentRange GetDocumentRange(TFile file, TreeTextRange treeTextRange);
    protected static DocumentRange GetDocumentRange(TFile file, TreeOffset starTreeOffset, TreeOffset endTreeOffset);
    protected virtual ISelectedRange BuildTokenPartSelection(ISelectEmbracingConstructProviderWithSecondaryPsi`1<TFile> provider, ITokenNode token, TreeTextRange rangeWithin);
    public virtual ITreeRange TryGetTreeRange();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Html.HtmlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Html.SelectEmbracingConstruct.HtmlSelectEmbracingConstructProvider : SelectEmbracingConstructProviderWithSecondaryPsiWithSecondaryPsiBase`2<IHtmlFile, HtmlLanguage> {
    public HtmlSelectEmbracingConstructProvider(ISettingsStore settingsStore);
    public virtual ISelectedRange CreateDotSelectedRange(IHtmlFile primaryFile, TreeOffset treeOffset, bool selectBetterToken, bool appendInjectedPsi);
    public virtual ISelectedRange CreateElementSelectedRange(ITreeNode node);
    public virtual IWrapperRange CreateWrapperRange(IDocument document, IHtmlFile primaryFile, ISelectedRange primaryRange, ISelectedTreeRange codeBehindRange, IFile secondaryFile);
}
internal class JetBrains.ReSharper.Feature.Services.Html.SelectEmbracingConstruct.HtmlTagContentRange`1 : HtmlSelectedRange`1<TFile> {
    public ISelectedRange Parent { get; }
    public HtmlTagContentRange`1(ISelectEmbracingConstructProviderWithSecondaryPsi`1<TFile> provider, IHtmlTag tag);
    private static DocumentRange GetDocumentRange(IHtmlTag tag);
    private static bool IsSpace(ITreeNode node);
    public virtual ISelectedRange get_Parent();
}
public class JetBrains.ReSharper.Feature.Services.Html.SelectEmbracingConstruct.HtmlTokenPartSelection`1 : HtmlSelectedRange`1<TFile> {
    protected ITokenNode myToken;
    protected TreeTextRange myRangeWithin;
    public ExtendToTheWholeLinePolicy ExtendToWholeLine { get; }
    public ISelectedRange Parent { get; }
    public HtmlTokenPartSelection`1(ISelectEmbracingConstructProviderWithSecondaryPsi`1<TFile> provider, ITokenNode token, TreeTextRange rangeWithin);
    public virtual ExtendToTheWholeLinePolicy get_ExtendToWholeLine();
    protected virtual Tuple`3<int, int, bool> GetParentCalculationData(TokenNodeType tokenType, string tokenText);
    public virtual ISelectedRange get_Parent();
}
internal class JetBrains.ReSharper.Feature.Services.Html.SelectEmbracingConstruct.HtmlTreeRange`1 : HtmlSelectedRange`1<TFile> {
    private ITreeNode myLast;
    public ExtendToTheWholeLinePolicy ExtendToWholeLine { get; }
    public ISelectedRange Parent { get; }
    public HtmlTreeRange`1(ISelectEmbracingConstructProviderWithSecondaryPsi`1<TFile> provider, ITreeNode first, ITreeNode last);
    private static DocumentRange CalculateDocumentRange(ITreeNode first, ITreeNode last);
    public virtual ExtendToTheWholeLinePolicy get_ExtendToWholeLine();
    public virtual ITreeRange TryGetTreeRange();
    public virtual ISelectedRange get_Parent();
}
public class JetBrains.ReSharper.Feature.Services.Html.SelectEmbracingConstruct.HtmlWrapperRange`1 : WrapperRange`1<TFile> {
    public HtmlWrapperRange`1(IDocument document, TFile primaryFile, ISelectedTreeRange secondarySelection, ISelectedRange primarySelection, IFile secondaryFile);
    protected virtual bool IsSpecialToken(TokenNodeType tokenNodeType);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Html.HtmlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Html.StructuralNavigation.HtmlStructuralNavigationManager : object {
    public sealed virtual IStructuralNavigationItem MoveToNext(StructuralNavigationContextBase context);
    public sealed virtual IStructuralNavigationItem MoveToPrev(StructuralNavigationContextBase context);
    [CanBeNullAttribute]
protected virtual IStructuralNavigationItem GetNextSelection(StructuralNavigationContextBase context);
}
public class JetBrains.ReSharper.Feature.Services.Html.StructuralNavigation.HtmlStructuralNavigationVisitor : HtmlTreeVisitor`2<StructuralNavigationContextBase, StructuralNavigationContextBase> {
    public virtual StructuralNavigationContextBase VisitTokenNode(IHtmlToken node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitTagFooter(IHtmlTagFooter node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitHtmlTag(IHtmlTag node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitTagAttribute(ITagAttribute node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitHtmlAttributeName(IHtmlAttributeName node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitHtmlAttributeValue(IHtmlAttributeValue node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitComment(IWebComment node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitHtmlConditionalStruct(IHtmlConditionalStruct node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitHtmlConditionalExpression(IHtmlConditionalExpression node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitHtmlCData(IHtmlCData node, StructuralNavigationContextBase context);
    protected static void TryAddResult(StructuralNavigationContextBase context, TNode treeNode);
    private static void SelectTagContent(IHtmlToken node, StructuralNavigationContextBase context);
    private static void SelectAllTagContentRange(StructuralNavigationContextBase context, IHtmlToken node, IHtmlTagFooter htmlTagFooter, IFile containingFile);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Html.StructuralNavigation.ZoneMarker : object {
}
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlAttributeMatcher : object {
    private bool myIsStrict;
    private string myPrefix;
    private string myName;
    [CanBeNullAttribute]
private IElementMatcher myValueMatcher;
    private bool mySkipQuotes;
    [CompilerGeneratedAttribute]
private HtmlTagHeaderMatcher <ParentMatcher>k__BackingField;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public HtmlTagHeaderMatcher ParentMatcher { get; public set; }
    public HtmlAttributeMatcher(string prefix, string name, IElementMatcher valueMatcher, bool skipQuotes, bool isStrict);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlAttributeMatcher/<get_Children>d__7")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlAttributeMatcher/<get_Words>d__9")]
public sealed virtual IEnumerable`1<string> get_Words();
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    [CompilerGeneratedAttribute]
public sealed virtual HtmlTagHeaderMatcher get_ParentMatcher();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ParentMatcher(HtmlTagHeaderMatcher value);
}
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlAttributeValueMatcher : object {
    private bool myIsStrict;
    private string myName;
    private string myValueText;
    [CompilerGeneratedAttribute]
private HtmlAttributeMatcher <ParentMatcher>k__BackingField;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public HtmlAttributeMatcher ParentMatcher { get; public set; }
    public HtmlAttributeValueMatcher(string name, string valueText, bool isStrict);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlAttributeValueMatcher/<get_Children>d__5")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual IEnumerable`1<string> get_Words();
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    private static bool EqualsIgnoreWhitespace(string a, string b);
    private static int CompareStringsIgnoreWhitespace(string a, string b);
    [CompilerGeneratedAttribute]
public sealed virtual HtmlAttributeMatcher get_ParentMatcher();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ParentMatcher(HtmlAttributeMatcher value);
}
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlDefaultMatcher : object {
    private string myText;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public HtmlDefaultMatcher(string text);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlDefaultMatcher/<get_Children>d__4")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual IEnumerable`1<string> get_Words();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlEnumerateUtils : object {
    [ExtensionAttribute]
public static IEnumerable`1<IHtmlTreeNode> EnumerateTagContent(IHtmlTagContainerMarker parent, bool recursive);
    [ExtensionAttribute]
private static void EnumerateTagContent(IHtmlTagContainerMarker parent, bool recursive, List`1<IHtmlTreeNode> list);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlEnumerateUtils/<ExpandUnclosedTags>d__2")]
public static IEnumerable`1<IHtmlTreeNode> ExpandUnclosedTags(IHtmlTreeNode node);
}
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlFooterMatcher : object {
    private IElementMatcher myNameMatcher;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public HtmlFooterMatcher(IElementMatcher nameMatcher);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlFooterMatcher/<get_Children>d__3")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlFooterMatcher/<get_Words>d__5")]
public sealed virtual IEnumerable`1<string> get_Words();
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
}
public static class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlMatcherBuilder : object {
    [NotNullAttribute]
public static IElementMatcher Build(ITreeNode element, PatternMatcherBuilderParams params);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlMatcherBuilder/<ExtractWords>d__1")]
public static IEnumerable`1<string> ExtractWords(string text);
    private static bool IsIdentifierFirstLetter(char ch);
    private static bool IsIdentifierSecondLetter(char ch);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Html.HtmlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlMatcherBuilderVisitor : HtmlTreeVisitor`2<PatternMatcherBuilderParams, IElementMatcher> {
    public IElementMatcher Build(IHtmlTreeNode element, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitNode(ITreeNode node, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitHtmlTag(IHtmlTag htmlTag, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTagHeader(IHtmlTagHeader node, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTagFooter(IHtmlTagFooter node, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitHtmlAttributeValue(IHtmlAttributeValue node, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTagAttribute(ITagAttribute tagAttribute, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTokenNode(IHtmlToken element, PatternMatcherBuilderParams context);
    private IElementMatcher CreateTagNameMatcher(IHtmlToken element, PatternMatcherBuilderParams context);
    private IElementMatcher CreateTextMatcher(IHtmlToken element, PatternMatcherBuilderParams context);
}
internal class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlPatternLexer : PatternLexer {
    private HtmlLanguage myLanguage;
    private IDictionary`2<string, IMetaPlaceholder> myMetaplaceholders;
    protected LanguageService LanguageService { get; }
    protected bool MetaPlaceholderSupported { get; }
    public HtmlPatternLexer(HtmlLanguage language, IDictionary`2<string, IMetaPlaceholder> metaplaceholders);
    protected virtual LanguageService get_LanguageService();
    protected virtual bool get_MetaPlaceholderSupported();
    protected virtual IMetaPlaceholder GetMetaPlaceholder(string name);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Html.HtmlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlPlaceholderGuesser : HtmlTreeVisitor`2<PlaceholderUsage, IPlaceholder> {
    public virtual IPlaceholder VisitTokenNode(IHtmlToken element, PlaceholderUsage context);
    protected virtual IPlaceholder CreateTagPlaceholder(string name);
    public virtual IPlaceholder VisitTagAttribute(ITagAttribute node, PlaceholderUsage context);
    public virtual IPlaceholder VisitHtmlAttributeValue(IHtmlAttributeValue node, PlaceholderUsage context);
}
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlSequenceStructuralMatcher : SequenceStructuralMatcher`1<IHtmlTreeNode> {
    public HtmlSequenceStructuralMatcher(HtmlTagContentMatcher matcher, StructuralSearchPatternParams params);
    public virtual IStructuralMatchResult Match(ITreeNode element, IMatchingContext context);
    protected virtual bool IsFilteredNode(ITreeNode element);
}
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlStructuralMatcher : StructuralMatcher {
    public HtmlStructuralMatcher(IElementMatcher elementMatcher, StructuralSearchPatternParams param);
    public virtual IReadOnlyCollection`1<string> GetExtendedWords(ISolution solution);
}
[StructuralSearcherFactoryAttribute("JetBrains.ReSharper.Psi.Html.HtmlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlStructuralSearcherFactory : object {
    private HtmlLanguage myLanguage;
    private IComponentContainer myContainer;
    private HtmlStructuralSearchPatternFromCodeCreator myPatternFromCodeCreator;
    public bool IsInternal { get; }
    public bool SupportsIgnoreUnmatched { get; }
    public bool SupportsShortenReferences { get; }
    public HtmlStructuralSearcherFactory(HtmlLanguage language, IComponentContainer container, HtmlStructuralSearchPatternFromCodeCreator patternFromCodeCreator);
    public sealed virtual bool get_IsInternal();
    public sealed virtual bool get_SupportsIgnoreUnmatched();
    public sealed virtual bool get_SupportsShortenReferences();
    public sealed virtual IStructuralSearchPattern CreatePattern();
    public sealed virtual IStructuralSearchPattern CreatePattern(string pattern, IPlaceholder[] placeholders);
    public sealed virtual IStructuralSearchPattern CreatePattern(ISolution solution, DocumentRange selection);
    public sealed virtual void Replace(IStructuralSearchPattern pattern, IStructuralMatchResult result);
    public sealed virtual void Replace(IEnumerable`1<IStructuralMatchResult> targets, IStructuralSearchPattern pattern);
}
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlStructuralSearchPattern : StructuralSearchPatternBase {
    private HtmlLanguage myLanguage;
    private HtmlStructuralSearchPatternPresenter myPresenter;
    private IStructuralSearchPatternValidator myValidator;
    [CompilerGeneratedAttribute]
private bool <DisableInInjects>k__BackingField;
    public bool DisableInInjects { get; public set; }
    public IStructuralSearchPatternPresenter Presenter { get; }
    public PsiLanguageType Language { get; }
    public HtmlStructuralSearchPattern(HtmlLanguage language, string textPattern, IPlaceholder[] placeholders);
    public HtmlStructuralSearchPattern(HtmlLanguage language, string textPattern, StructuralSearchPatternParams params, IPlaceholder[] placeholders);
    public HtmlStructuralSearchPattern(HtmlLanguage language, string textPattern, IEnumerable`1<IPlaceholder> placeholders, StructuralSearchPatternParams params);
    public HtmlStructuralSearchPattern(HtmlLanguage language, string textPattern, StructuralSearchPatternParams params, IDictionary`2<string, IPlaceholder> placeholders);
    [CompilerGeneratedAttribute]
public bool get_DisableInInjects();
    [CompilerGeneratedAttribute]
public void set_DisableInInjects(bool value);
    public virtual IStructuralSearchPatternPresenter get_Presenter();
    public virtual IStructuralSearchPatternValidator GetValidator();
    public virtual bool GuessPlaceholders();
    public virtual IStructuralSearchPattern AddPatternPlaceholder(string name, string pattern, bool isShared);
    public virtual IStructuralSearchPattern AddOrPatternPlaceholder(string name, bool isShared, String[] patterns);
    public virtual IStructuralMatcher CreateMatcher();
    public virtual IStructuralMatcher CreateMatcher(IStructuralSearchPatternBuilder builder);
    private IStructuralMatcher CreateMatcher(bool forGeneratingPlaceholders, bool deleteUnunsedPlaceholders, Dictionary`2<string, IMetaPlaceholder> metaplaceholders);
    public bool GeneratePlaceholders(bool deleteUnusedPlaceholders, Dictionary`2<string, IMetaPlaceholder> metaplaceholders);
    public virtual PsiLanguageType get_Language();
    public virtual IStructuralSearchPattern Clone();
    public bool Equals(HtmlStructuralSearchPattern other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual void ReadPlaceholders(IEnumerable`1<PlaceholderInfo> placeholderInfos);
}
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlStructuralSearchPatternBuilder : object {
    private HtmlLanguage myLanguage;
    private bool myGeneratePlaceholders;
    private bool myDeleteUnusedPlaceholders;
    private Dictionary`2<string, IMetaPlaceholder> myMetaplaceholders;
    public HtmlStructuralSearchPatternBuilder(HtmlLanguage language, bool generatePlaceholders, bool deleteUnusedPlaceholders, Dictionary`2<string, IMetaPlaceholder> metaplaceholders);
    public sealed virtual IStructuralMatcher CreateMatcher(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
    private IStructuralMatcher DoCreateMatcher(StructuralSearchPatternParams params, IPatternLexerResult result);
    public sealed virtual IPatternLexerResult ParsePattern(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
    private IPatternLexerResult DoParsePattern(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Html.HtmlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlStructuralSearchPatternFromCodeCreator : object {
    private HtmlLanguage myLanguage;
    public HtmlStructuralSearchPatternFromCodeCreator(HtmlLanguage language);
    public sealed virtual IStructuralSearchPattern CreatePattern(ISolution solution, DocumentRange selection);
}
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlStructuralSearchPatternPresenter : StructuralSearchPatternPresenterBase {
    public HtmlStructuralSearchPatternPresenter(HtmlStructuralSearchPattern pattern);
    protected virtual string GetListReplacement(IEnumerable enumerable);
    protected virtual ReplacePatternLexerResult ParsePattern(string text, IDictionary`2<string, IPlaceholder> placeholders);
}
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlStructuralSearchPatternValidator : StructuralSearchPatternValidator {
    public HtmlStructuralSearchPatternValidator(IStructuralSearchPatternBuilder[] builders);
    public virtual IPatternLexerErrorResult Validate(IStructuralSearchPattern pattern);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlStructuralSearchReplacer : object {
    private ILanguageManager myLanguageManager;
    public HtmlStructuralSearchReplacer(ILanguageManager languageManager);
    public void Replace(IStructuralMatchResult match, IStructuralSearchPattern pattern);
    public void Replace(IEnumerable`1<IStructuralMatchResult> matches, IStructuralSearchPattern pattern);
    private static string PrepareReplaceText(string replacePattern, IDictionary`2<string, IPlaceholder> placeholders, Func`2<string, object> getMatchedElement);
    private static void RemoveElementsAfterFirst(ITreeNode[] elements);
    private void DoReplace(IStructuralSearchPattern pattern, ITreeNode elementToReplace, Func`2<string, object> getMatchedElement, ITreeNode[] elementsToRemove);
    private static string PreprocessReplacePattern(IStructuralSearchPattern pattern, ITreeNode elementToReplace);
    private static void UniteAttributes(HtmlElementFactory factory, IHtmlTagHeader header, string attributeName, TokenNodeType quote, string separator);
    private static void FixHtmlAfterReplace(HtmlElementFactory factory, IEnumerable`1<ITreeNode> nodes);
}
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlTagContentMatcher : SequenceMatcher`1<IHtmlTreeNode> {
    public HtmlTagContentMatcher(IEnumerable`1<IElementMatcher> nodeMatchers, bool ignoreUnmatched);
    public virtual bool CountedAsOccurrence(IHtmlTreeNode element);
}
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlTagHeaderMatcher : object {
    private IElementMatcher myNameMatcher;
    private bool myIgnoreUnmatched;
    private UnorderedSetMatcher mySeqAttributeMatcher;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public UnorderedSetMatcher SeqAttributeMatcher { get; }
    public HtmlTagHeaderMatcher(IElementMatcher nameMatcher, IList`1<IElementMatcher> attributeMatchers, bool ignoreUnmatched);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlTagHeaderMatcher/<get_Children>d__5")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlTagHeaderMatcher/<get_Words>d__7")]
public sealed virtual IEnumerable`1<string> get_Words();
    public UnorderedSetMatcher get_SeqAttributeMatcher();
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
}
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlTagHeaderStructuralMatcher : HtmlStructuralMatcher {
    public HtmlTagHeaderStructuralMatcher(IElementMatcher elementMatcher, StructuralSearchPatternParams param);
}
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlTagMatcher : object {
    private IElementMatcher myHeaderMatcher;
    private IElementMatcher myFooterMatcher;
    private bool mySelfClosed;
    private bool myIsStrict;
    private bool myIgnoreUnmatched;
    private HtmlTagContentMatcher mySeqNodeMatcher;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public HtmlTagMatcher(IElementMatcher headerMatcher, IEnumerable`1<IElementMatcher> nodeMatchers, IElementMatcher footerMatcher, bool selfClosed, bool isStrict, bool ignoreUnmatched);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlTagMatcher/<get_Children>d__8")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlTagMatcher/<get_Words>d__10")]
public sealed virtual IEnumerable`1<string> get_Words();
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
}
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlTagNameMatcher : object {
    private string myName;
    private String[] myWords;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public HtmlTagNameMatcher(string name);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlTagNameMatcher/<get_Children>d__5")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlTagStructuralMatcher : HtmlStructuralMatcher {
    public HtmlTagStructuralMatcher(IElementMatcher elementMatcher, StructuralSearchPatternParams param);
}
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlTextMatcher : object {
    private string myText;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public HtmlTextMatcher(string text);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.HtmlTextMatcher/<get_Children>d__4")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual IEnumerable`1<string> get_Words();
}
internal interface JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.IHtmlAttributeMatcher {
    public HtmlTagHeaderMatcher ParentMatcher { get; public set; }
    public abstract virtual HtmlTagHeaderMatcher get_ParentMatcher();
    public abstract virtual void set_ParentMatcher(HtmlTagHeaderMatcher value);
}
public interface JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.IHtmlAttributeValueMatcher {
    public HtmlAttributeMatcher ParentMatcher { get; public set; }
    public abstract virtual HtmlAttributeMatcher get_ParentMatcher();
    public abstract virtual void set_ParentMatcher(HtmlAttributeMatcher value);
}
public interface JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.IPlaceholderFactory {
    public string TagName { get; }
    public abstract virtual string get_TagName();
    public abstract virtual IPlaceholder CreatePlaceholder(PlaceholderInfo info);
}
public abstract class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.PlaceholderFactoryBase`1 : object {
    public string TagName { get; }
    public virtual string get_TagName();
    public abstract virtual IPlaceholder CreatePlaceholder(PlaceholderInfo info);
}
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.Placeholders.HtmlAttributeSequencePlaceholder : SequencePlaceholderBase {
    private static String[] ourReplacingText;
    private string myAllowedNamesRegex;
    private bool myInvertRegex;
    private static string ALLOWED_NAMES_REGEX_ATTIBUTE;
    private static string INVERT_REGEX_ATTIBUTE;
    public string AllowedNamesRegex { get; public set; }
    public bool InvertRegex { get; public set; }
    protected string EntityName { get; }
    public string Description { get; }
    public String[] ReplacingText { get; }
    protected string TagName { get; }
    public HtmlAttributeSequencePlaceholder(string name, string allowedNamesRegexp, bool invertRegex, int minimalOccurrences, int maximalOccurrences);
    public HtmlAttributeSequencePlaceholder(PlaceholderInfo placeholderInfo);
    private static HtmlAttributeSequencePlaceholder();
    public string get_AllowedNamesRegex();
    public void set_AllowedNamesRegex(string value);
    public bool get_InvertRegex();
    public void set_InvertRegex(bool value);
    protected virtual string get_EntityName();
    public virtual string get_Description();
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
    public virtual String[] get_ReplacingText();
    public virtual IPlaceholder Clone();
    public virtual PlaceholderInfo ToPlaceholderInfo();
    protected virtual string get_TagName();
    public bool Equals(HtmlAttributeSequencePlaceholder other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Html.HtmlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.Placeholders.HtmlAttributeSequencePlaceholderFactory : PlaceholderFactoryBase`1<HtmlAttributeSequencePlaceholder> {
    public virtual IPlaceholder CreatePlaceholder(PlaceholderInfo info);
}
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.Placeholders.HtmlAttributeSequencePlaceholderMatcher : SequencePlaceholderMatcherBase {
    private PatternMatcherBuilderParams myParams;
    private string myAllowedNamesRegex;
    private Regex myRegex;
    private bool myInvertRegex;
    [CompilerGeneratedAttribute]
private Key`1<AdditionalAttributeValues> <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlTagHeaderMatcher <ParentMatcher>k__BackingField;
    public Key`1<AdditionalAttributeValues> Key { get; }
    public HtmlTagHeaderMatcher ParentMatcher { get; public set; }
    public HtmlAttributeSequencePlaceholderMatcher(HtmlAttributeSequencePlaceholder placeholder, StructuralSearchPatternParams params);
    [CompilerGeneratedAttribute]
public Key`1<AdditionalAttributeValues> get_Key();
    public virtual IElementMatcher CreatePlaceholderMatcher(ITreeNode element);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
    public virtual ISequenceMatcher`1<ITreeNode> CreatePlaceholderMatcher(ICollection`1<ITreeNode> elements);
    public virtual bool Match(IEnumerable`1<ITreeNode> elements, IMatchingContext context);
    [CompilerGeneratedAttribute]
public sealed virtual HtmlTagHeaderMatcher get_ParentMatcher();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ParentMatcher(HtmlTagHeaderMatcher value);
    [CompilerGeneratedAttribute]
private IElementMatcher <CreatePlaceholderMatcher>b__10_0(ITreeNode e);
    [CompilerGeneratedAttribute]
private bool <Match>b__11_0(ITagAttribute t);
}
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.Placeholders.HtmlAttributeValuePlaceholder : PlaceholderBase {
    private static String[] ourStrings;
    private string myRegex;
    private bool myInvertRegex;
    private static string REGEX_ATTRIBUTE;
    private static string INVERT_REGEX_ATTRIBUTE;
    public string Regex { get; public set; }
    public bool InvertRegex { get; public set; }
    public string Description { get; }
    public String[] ReplacingText { get; }
    public int MaximalOccurrences { get; }
    public int MinimalOccurrences { get; }
    public HtmlAttributeValuePlaceholder(string name, string regex, bool invertRegex);
    public HtmlAttributeValuePlaceholder(PlaceholderInfo placeholderInfo);
    private static HtmlAttributeValuePlaceholder();
    public string get_Regex();
    public void set_Regex(string value);
    public bool get_InvertRegex();
    public void set_InvertRegex(bool value);
    public virtual string get_Description();
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
    public virtual String[] get_ReplacingText();
    public virtual IPlaceholder Clone();
    public virtual PlaceholderInfo ToPlaceholderInfo();
    public bool Equals(HtmlAttributeValuePlaceholder other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual int get_MaximalOccurrences();
    public sealed virtual int get_MinimalOccurrences();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Html.HtmlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.Placeholders.HtmlAttributeValuePlaceholderFactory : PlaceholderFactoryBase`1<HtmlAttributeValuePlaceholder> {
    public virtual IPlaceholder CreatePlaceholder(PlaceholderInfo info);
}
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.Placeholders.HtmlAttributeValuePlaceholderMatcher : PlaceholderMatcherBase {
    private PatternMatcherBuilderParams myParams;
    private Regex myRegex;
    private bool myInvertRegex;
    [CompilerGeneratedAttribute]
private HtmlAttributeMatcher <ParentMatcher>k__BackingField;
    public int MinimalOccurrences { get; }
    public int MaximalOccurrences { get; }
    public HtmlAttributeMatcher ParentMatcher { get; public set; }
    public HtmlAttributeValuePlaceholderMatcher(HtmlAttributeValuePlaceholder placeholder, StructuralSearchPatternParams params);
    public virtual IElementMatcher CreatePlaceholderMatcher(ITreeNode element);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
    public sealed virtual int get_MinimalOccurrences();
    public sealed virtual int get_MaximalOccurrences();
    public sealed virtual ISequenceMatcher`1<ITreeNode> CreatePlaceholderMatcher(ICollection`1<ITreeNode> elements);
    public sealed virtual bool Match(IEnumerable`1<ITreeNode> elements, IMatchingContext context);
    [CompilerGeneratedAttribute]
public sealed virtual HtmlAttributeMatcher get_ParentMatcher();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ParentMatcher(HtmlAttributeMatcher value);
    [CompilerGeneratedAttribute]
private IElementMatcher <CreatePlaceholderMatcher>b__10_0(ITreeNode e);
}
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.Placeholders.HtmlContentSequencePlaceholder : SequencePlaceholderBase {
    private static String[] ourReplacingText;
    private string myRegex;
    private bool myInvertRegex;
    private bool myTagsAllowed;
    private string myCssSelector;
    private CodeAllowedType myCodeAllowed;
    private string myCodeRegex;
    private static string REGEX_ATTRIBUTE;
    private static string INVERT_REGEX_ATTRIBUTE;
    private static string TAGS_ALLOWED_ATTRIBUTE;
    private static string CSS_SELECTOR_ATTRIBUTE;
    private static string CODE_ALLOWED_ATTRIBUTE;
    private static string CODE_REGEX_ATTRIBUTE;
    public string Regex { get; public set; }
    public bool InvertRegex { get; public set; }
    public bool TagsAllowed { get; public set; }
    public string CssSelector { get; public set; }
    public CodeAllowedType CodeAllowed { get; public set; }
    public bool CodeAllowedBoolean { get; public set; }
    public bool CodeAllowedInvert { get; public set; }
    public string CodeRegex { get; public set; }
    protected string TagName { get; }
    protected string EntityName { get; }
    public string Description { get; }
    public String[] ReplacingText { get; }
    public HtmlContentSequencePlaceholder(string name, string regex, bool tagsAllowed, string cssSelector, bool invertRegex, int minimalOccurrences, int maximalOccurrences, CodeAllowedType codeAllowed, string codeRegex);
    public HtmlContentSequencePlaceholder(PlaceholderInfo placeholderInfo);
    private static HtmlContentSequencePlaceholder();
    public string get_Regex();
    public void set_Regex(string value);
    public bool get_InvertRegex();
    public void set_InvertRegex(bool value);
    public bool get_TagsAllowed();
    public void set_TagsAllowed(bool value);
    public string get_CssSelector();
    public void set_CssSelector(string value);
    public CodeAllowedType get_CodeAllowed();
    public void set_CodeAllowed(CodeAllowedType value);
    public bool get_CodeAllowedBoolean();
    public void set_CodeAllowedBoolean(bool value);
    public bool get_CodeAllowedInvert();
    public void set_CodeAllowedInvert(bool value);
    public string get_CodeRegex();
    public void set_CodeRegex(string value);
    protected virtual string get_TagName();
    protected virtual string get_EntityName();
    public virtual string get_Description();
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
    public virtual String[] get_ReplacingText();
    public virtual IPlaceholder Clone();
    public virtual PlaceholderInfo ToPlaceholderInfo();
    public bool Equals(HtmlContentSequencePlaceholder other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Html.HtmlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.Placeholders.HtmlContentSequencePlaceholderFactory : PlaceholderFactoryBase`1<HtmlContentSequencePlaceholder> {
    public virtual IPlaceholder CreatePlaceholder(PlaceholderInfo info);
}
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.Placeholders.HtmlContentSequencePlaceholderMatcher : SequencePlaceholderMatcherBase {
    private static string WhitespaceRegex;
    private PatternMatcherBuilderParams myParams;
    private bool myTagsAllowed;
    private Regex myRegex;
    private bool myInvertRegex;
    private bool myOnlyWhitespace;
    private IStructuralMatcher myCssMatcher;
    private CodeAllowedType myCodeAllowed;
    private Regex myCodeRegex;
    public bool ShouldCheckForMatching { get; }
    public HtmlContentSequencePlaceholderMatcher(HtmlContentSequencePlaceholder placeholder, StructuralSearchPatternParams params);
    public virtual IElementMatcher CreatePlaceholderMatcher(ITreeNode element);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
    public virtual ISequenceMatcher`1<ITreeNode> CreatePlaceholderMatcher(ICollection`1<ITreeNode> elements);
    public virtual bool Match(IEnumerable`1<ITreeNode> elements, IMatchingContext context);
    public sealed virtual bool get_ShouldCheckForMatching();
    public sealed virtual bool VerifyMatchSafely(IList`1<T> elements, IMatchingContext context, int fromElement, int count);
    [CompilerGeneratedAttribute]
private IElementMatcher <CreatePlaceholderMatcher>b__12_0(ITreeNode e);
}
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.Placeholders.HtmlMetaPlaceholder : object {
    private string myName;
    [CompilerGeneratedAttribute]
private string <ComputedReplacingText>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public string Name { get; }
    public string Description { get; }
    public string ComputedReplacingText { get; public set; }
    public String[] ReplacingText { get; }
    public ICollection`1<string> Words { get; }
    public HtmlMetaPlaceholder(string name);
    public sealed virtual string get_Name();
    public sealed virtual string get_Description();
    public sealed virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
    [CompilerGeneratedAttribute]
public string get_ComputedReplacingText();
    [CompilerGeneratedAttribute]
public void set_ComputedReplacingText(string value);
    public sealed virtual String[] get_ReplacingText();
    public sealed virtual ICollection`1<string> get_Words();
    public sealed virtual PlaceholderInfo ToPlaceholderInfo();
    public sealed virtual IPlaceholder Clone();
    private sealed virtual override object System.ICloneable.Clone();
    public bool Equals(HtmlMetaPlaceholder other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.Placeholders.HtmlTagPlaceholder : PlaceholderBase {
    private string myCssSelector;
    private static string CSS_SELECTOR_ATTRIBUTE;
    public string CssSelector { get; public set; }
    public string Description { get; }
    public String[] ReplacingText { get; }
    public HtmlTagPlaceholder(string name, string cssSelector);
    public HtmlTagPlaceholder(PlaceholderInfo info);
    public string get_CssSelector();
    public void set_CssSelector(string value);
    public virtual string get_Description();
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
    public virtual String[] get_ReplacingText();
    public virtual IPlaceholder Clone();
    public virtual PlaceholderInfo ToPlaceholderInfo();
    protected bool Equals(HtmlTagPlaceholder other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Html.HtmlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.Placeholders.HtmlTagPlaceholderFactory : PlaceholderFactoryBase`1<HtmlTagPlaceholder> {
    public virtual IPlaceholder CreatePlaceholder(PlaceholderInfo info);
}
public class JetBrains.ReSharper.Feature.Services.Html.StructuralSearch.Placeholders.HtmlTagPlaceholderMatcher : PlaceholderMatcherBase {
    private PatternMatcherBuilderParams myParams;
    private IStructuralMatcher myCssMatcher;
    public HtmlTagPlaceholderMatcher(HtmlTagPlaceholder htmlTagPlaceholder, StructuralSearchPatternParams params);
    public virtual IElementMatcher CreatePlaceholderMatcher(ITreeNode element);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
    protected virtual bool CheckMatch(IMatchingContext context, IHtmlTag tag);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Html.HtmlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Html.TodoItems.HtmlTodoContentsProvider : DefaultTodoContentsProvider {
    private IHtmlTokenNodeTypes myHtmlTokenNodeTypes;
    public HtmlTodoContentsProvider(IHtmlTokenNodeTypes htmlTokenNodeTypes);
    public virtual Nullable`1<TextRange> GetTokenContentsRange(string documentText, TextRange tokenRange, TokenNodeType tokenType);
}
public abstract class JetBrains.ReSharper.Feature.Services.Html.TypingAssist.ChangedTagNameTracker : object {
    public static Key UseLexerForTestsKey;
    private static Key`1<TagMarkers> ourTagMarkersDataKey;
    private ISolution mySolution;
    private ISettingsStore mySettingsStore;
    private ICommandProcessor myCommandProcessor;
    private CachingLexerService myCachingLexerService;
    private IShellLocks myShellLocks;
    private IActionManager myActionManager;
    private IEnsureWritableHandler myEnsureWritableHandler;
    private DocumentManager myDocumentManager;
    private ILookupWindowManager myLookupWindowManager;
    private IPsiFiles myPsiFiles;
    private SequentialLifetimes myEscapeLifetimes;
    protected ChangedTagNameTracker(ISolution solution, ISettingsStore settingsStore, CachingLexerService cachingLexerService, ICommandProcessor commandProcessor, TextControlTypingHandlers textControlTypingHandlers, Lifetime lifetime, ITextControlManager textControlManager, IShellLocks shellLocks, IActionManager actionManager, IEnsureWritableHandler ensureWritableHandler, DocumentManager documentManager, ILookupWindowManager lookupWindowManager, IPsiFiles psiFiles, ChangeManager changeManager, ITypingAssistManager typingAssistManager);
    private static ChangedTagNameTracker();
    protected TEntry GetTypingAssistOption(ITextControl textControl, Expression`1<Func`2<TSettings, TEntry>> expression);
    [CanBeNullAttribute]
public static TagMarkers GetData(IUserDataHolder dataHolder);
    private void AddRemoveTextControl(AddRemoveEventArgs`1<ITextControl> addRemoveEventArgs);
    private void OnChange(ChangeEventArgs args);
    [CanBeNullAttribute]
private TagMarkers CreateNewMarkers(ITextControl textControl, int caretPosition, TargetFrameworkId targetFrameworkId);
    private TagMarkers CalculateNewMarkersInternal(ITextControl textControl, int caretPosition, IDocument document, TargetFrameworkId targetFrameworkId);
    protected virtual MarkerFindResults FindMarkersViaPsi(IPsiSourceFile sourceFile, ITextControl textControl, int caretPosition);
    protected virtual MarkerFindResults FindMarkersViaLexer(ITextControl textControl, int caretPosition);
    protected CachingLexer GetCachingLexer(ITextControl textControl);
    protected abstract virtual bool IsAvailable(ITextControl textControl, IPsiSourceFile sourceFile);
    protected abstract virtual bool IsApplicableToLanguage(ITextControl textControl, IPsiSourceFile sourceFile);
    [MustUseReturnValueAttribute]
[CanBeNullAttribute]
public Action HandleAction(ITextControl textControl, Func`2<TextRange, TextRange> selRangeConverter, bool shouldReCheckAfterNoMarkers, bool checkAvailability);
    private bool ActionHandler(IActionContext context);
    protected virtual bool IsTagNameChar(char c);
    private void Type(ITypingContext typingContext);
    private void SetMarkers(IDocument document, TagMarkers tagMarkers);
    private void RemoveMarkers(IDocument document);
    public static void ProcessMarkers(ISolution solution, ITextControl textControl, Action action);
    public sealed virtual bool QuickCheckAvailability(ITextControl textControl, IPsiSourceFile projectFile);
    [CompilerGeneratedAttribute]
private void <SetMarkers>b__30_0(Lifetime lifetime);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Html.TypingAssist.HtmlChangedTagNameTracker : SpecificChangedTagNameTracker`2<HtmlTypingAssistSettings, HtmlProjectFileType> {
    public HtmlChangedTagNameTracker(ISolution solution, ISettingsStore settingsStore, CachingLexerService cachingLexerService, ICommandProcessor commandProcessor, TextControlTypingHandlers textControlTypingHandlers, Lifetime lifetime, ITextControlManager textControlManager, IShellLocks shellLocks, IActionManager actionManager, IEnsureWritableHandler ensureWritableHandler, DocumentManager documentManager, ILookupWindowManager lookupWindowManager, IPsiFiles psiFiles, ChangeManager changeManager, ITypingAssistManager typingAssistManager);
    protected virtual bool IsAvailable(ITextControl textControl, IPsiSourceFile sourceFile);
    protected virtual bool IsApplicableToLanguage(ITextControl textControl, IPsiSourceFile sourceFile);
    private bool IsApplicableImpl(ITextControl textControl, IPsiSourceFile sourceFile);
}
public static class JetBrains.ReSharper.Feature.Services.Html.TypingAssist.HtmlLexerUtils : object {
    public static TagNameContainerInfo GetTagNameContainerInfo(CachingLexer lexer, IHtmlTokenNodeTypes htmlTokenNodeTypes);
    public static bool GetHeaderByFooter(CachingLexer lexer, IHtmlTokenNodeTypes htmlTokenNodeTypes, TagNameContainerInfo footer);
    public static bool FindHeader(CachingLexer lexer, IHtmlTokenNodeTypes htmlTokenNodeTypes, int startToken, string tagNameToFind, bool insideTag);
    public static bool GetFooterByHeader(CachingLexer lexer, IHtmlTokenNodeTypes htmlTokenNodeTypes, TagNameContainerInfo header);
    public static bool FindFooter(CachingLexer lexer, IHtmlTokenNodeTypes htmlTokenNodeTypes, int startPos, string tagName, bool insideTag);
    private static bool SkipAnotherLanguageInjects(CachingLexer lexer, IHtmlTokenNodeTypes htmlTokenNodeTypes);
    public static bool InsideTagHeader(CachingLexer lexer, IHtmlTokenNodeTypes htmlTokenNodeTypes);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Html.TypingAssist.HtmlTypingAssist : WebTypingAssist`4<HtmlProjectFileType, HtmlLanguage, IHtmlTokenNodeTypes, HtmlTypingAssistSettings> {
    public HtmlTypingAssist(Lifetime lifetime, TypingAssistDependencies dependencies, ICodeCompletionSessionManager completionSessionManager, ILanguageManager languageManager, IEnumerable`1<ISpecialTagSmartEnterHandler> smartEnterHandlers, ParameterInfoPopupController parameterInfoPopupController, IEnumerable`1<ISecondaryTypingAssist> secondaryTypingAssists);
    public virtual bool QuickCheckAvailability(ITextControl textControl, IPsiSourceFile psiSourceFile);
}
public interface JetBrains.ReSharper.Feature.Services.Html.TypingAssist.ISpecialTagSmartEnterHandler {
    public abstract virtual bool IsTagSupported(IHtmlTag tag, ITextControl textControl);
    public abstract virtual bool FormatOnSmartEnter(ITreeNode header, ITreeNode footer, ITextControl textControl, bool insertAdditionalLineBreak);
    public abstract virtual bool IsInsideSupportedTag(ITreeNode node, ITextControl textControl);
}
public interface JetBrains.ReSharper.Feature.Services.Html.TypingAssist.IWebTypingAssist {
    public abstract virtual bool DoHandleEnterAfterHeaderPressed(ITextControl textControl, int charPos);
}
public abstract class JetBrains.ReSharper.Feature.Services.Html.TypingAssist.SpecificChangedTagNameTracker`2 : ChangedTagNameTracker {
    protected SpecificChangedTagNameTracker`2(ISolution solution, ISettingsStore settingsStore, CachingLexerService cachingLexerService, ICommandProcessor commandProcessor, TextControlTypingHandlers textControlTypingHandlers, Lifetime lifetime, ITextControlManager textControlManager, IShellLocks shellLocks, IActionManager actionManager, IEnsureWritableHandler ensureWritableHandler, DocumentManager documentManager, ILookupWindowManager lookupWindowManager, IPsiFiles psiFiles, ChangeManager changeManager, ITypingAssistManager typingAssistManager);
    protected virtual bool IsAvailable(ITextControl textControl, IPsiSourceFile sourceFile);
    protected virtual bool IsApplicableToLanguage(ITextControl textControl, IPsiSourceFile sourceFile);
    private bool IsApplicableImpl(ITextControl textControl, IPsiSourceFile sourceFile);
}
public enum JetBrains.ReSharper.Feature.Services.Html.TypingAssist.TagNameContainerType : Enum {
    public int value__;
    public static TagNameContainerType Header;
    public static TagNameContainerType Footer;
}
public abstract class JetBrains.ReSharper.Feature.Services.Html.TypingAssist.WebTypingAssist`4 : TypingAssistLanguageBase`1<TLanguage> {
    private ILanguageManager myLanguageManager;
    protected IEnumerable`1<ISpecialTagSmartEnterHandler> mySmartEnterHandlers;
    private ParameterInfoPopupController myParameterInfoPopupController;
    private ICodeCompletionSessionManager myCompletionSessionManager;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ISecondaryTypingAssist> <SecondaryTypingAssists>k__BackingField;
    protected static string SmartAttributeQuotesAction;
    public IEnumerable`1<ISecondaryTypingAssist> SecondaryTypingAssists { get; }
    protected WebTypingAssist`4(Lifetime lifetime, TypingAssistDependencies dependencies, ICodeCompletionSessionManager completionSessionManager, ILanguageManager languageManager, IEnumerable`1<ISpecialTagSmartEnterHandler> smartEnterHandlers, ParameterInfoPopupController parameterInfoPopupController, IEnumerable`1<ISecondaryTypingAssist> secondaryTypingAssists);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ISecondaryTypingAssist> get_SecondaryTypingAssists();
    protected virtual bool IsSupported(ITextControl textControl);
    private bool HandleClosingBracket(ITypingContext typingContext);
    private bool InsertClosingTag(ITextControl textControl);
    protected bool HandleSlash(ITypingContext typingContext);
    protected bool HandleEq(ITypingContext typingContext);
    private void InsertPairOfQuotes(CachingLexer lexer, IHtmlTokenNodeTypes tokenTypes, ITextControl textControl, ITypingContext typingContext, int positionForSecondQuote, Func`1<bool> insertFirst, Func`1<bool> insertLast);
    private string FindAttributeName(CachingLexer lexer, IHtmlTokenNodeTypes tokenTypes);
    protected bool HandleQuoteTyped(ITypingContext typingContext);
    protected virtual bool HandleBackspacePressed(IActionContext context);
    private bool IsNewLineToken(CachingLexer lexer);
    protected bool HandleDelPressed(IActionContext context);
    protected virtual IndentTypingHelper`1<TLanguage> GetIndentTypingHelper();
    protected bool HandleEnterPressed(IActionContext context);
    private bool FormatAfterEnter(ITextControl textControl);
    protected bool DoHandleEnterAfterHeaderPressed(ITextControl textControl);
    public virtual bool DoHandleEnterAfterHeaderPressed(ITextControl textControl, int charPos);
    protected bool FormatTag(ITextControl textControl, IFile file, IHtmlTreeNode headerNode, IHtmlTreeNode footerNode, TTokenTypes tokenTypes, IHtmlTreeNode parentTag);
    protected HtmlElementFactory GetElementFactory(ITextControl textControl);
    protected virtual bool IsTokenEnd(IHtmlTokenNodeType`1<TTokenTypes> tokenType);
    protected virtual bool HandleQuoteAtTokenStart(ITextControl textControl, CachingLexer lexer, TTokenTypes tokenTypes);
    private static bool IsAfterEq(CachingLexer lexer, DocumentOffset caretPos, IHtmlTokenNodeTypes tokenTypes);
    public virtual bool QuickCheckAvailability(ITextControl textControl, IPsiSourceFile psiSourceFile);
    protected virtual bool AllowCpuIntensiveAssists(ITextControl textControl);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Html.TypingAssist.ZoneMarker : object {
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Html.Utils : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<char> ToEnumerable(IBuffer buffer);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<char> ToEnumerable(IBuffer buffer, int start);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<char> ToEnumerable(IBuffer buffer, int start, int length);
    [ExtensionAttribute]
public static Func`2<T, bool> Inverse(Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static bool IsAny(T obj, Predicate`1[] predicates);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Html.Utils/<GetParentsAndSelf>d__5")]
[ExtensionAttribute]
public static IEnumerable`1<CodeStructureElement> GetParentsAndSelf(CodeStructureElement baseElement);
    [ExtensionAttribute]
public static string GetText(IRangeMarker rangeMarker);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Html.ZoneMarker : object {
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.Bulbs.IInjectedJavaScriptContextActionDataProvider {
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.Bulbs.IJavaScriptContextActionDataProvider {
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.Bulbs.IJavaScriptContextActionDataProviderBase`1 {
    [NotNullAttribute]
public JavaScriptElementFactory ElementFactory { get; }
    [NotNullAttribute]
public JavaScriptServices Services { get; }
    public IJsConstantValueService ConstantValueService { get; }
    public abstract virtual JavaScriptElementFactory get_ElementFactory();
    public abstract virtual JavaScriptServices get_Services();
    [CanBeNullAttribute]
public abstract virtual IJsControlFlowGraph GetControlFlowGraph();
    public abstract virtual IJsConstantValueService get_ConstantValueService();
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.Bulbs.IJsonContextActionDataProvider {
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.Bulbs.InjectedJavaScriptContextActionDataProvider : JavaScriptContextActionDataProvider {
    public InjectedJavaScriptContextActionDataProvider(ISolution solution, ITextControl textControl, IJavaScriptFile file, JavaScriptServices services);
    [CanBeNullAttribute]
public sealed virtual InjectedJavaScriptContextActionDataProvider TryTranslateToCurrentFork(IContentModelForkTranslator translator);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.Bulbs.JavaScriptContextActionDataProvider : CachedContextActionDataProviderBase`1<IJavaScriptFile> {
    [NotNullAttribute]
private JavaScriptElementFactory myElementFactory;
    private bool myIsControlFlowGraphCached;
    [CanBeNullAttribute]
private IJsControlFlowGraph myControlFlowGraph;
    private IJsConstantValueService myConstantValueService;
    [CompilerGeneratedAttribute]
private JavaScriptServices <Services>k__BackingField;
    public IJsConstantValueService ConstantValueService { get; }
    public JavaScriptServices Services { get; }
    public JavaScriptElementFactory ElementFactory { get; }
    public JavaScriptContextActionDataProvider(ISolution solution, ITextControl textControl, IJavaScriptFile file, JavaScriptServices services);
    public sealed virtual IJsConstantValueService get_ConstantValueService();
    [CompilerGeneratedAttribute]
public sealed virtual JavaScriptServices get_Services();
    public virtual JavaScriptElementFactory get_ElementFactory();
    public sealed virtual IJsControlFlowGraph GetControlFlowGraph();
    [CanBeNullAttribute]
public sealed virtual JavaScriptContextActionDataProvider TryTranslateToCurrentFork(IContentModelForkTranslator translator);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.Bulbs.JsonContextActionDataProvider : CachedContextActionDataProviderBase`1<IJavaScriptFile> {
    public JsonContextActionDataProvider(ISolution solution, ITextControl textControl, IJavaScriptFile psiFile);
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.Bulbs.TypeScript.ITypeScriptContextActionDataProvider {
    public TsElementFactory ElementFactory { get; }
    public abstract virtual TsElementFactory get_ElementFactory();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.Bulbs.TypeScript.TsContextActionDataProvider : JavaScriptContextActionDataProvider {
    private TsElementFactory JetBrains.ReSharper.Feature.Services.JavaScript.Bulbs.TypeScript.ITypeScriptContextActionDataProvider.ElementFactory { get; }
    public JavaScriptElementFactory ElementFactory { get; }
    public ITsFile PsiFile { get; }
    public TsContextActionDataProvider(ISolution solution, ITextControl textControl, ITsFile file, JavaScriptServices services);
    private sealed virtual override TsElementFactory JetBrains.ReSharper.Feature.Services.JavaScript.Bulbs.TypeScript.ITypeScriptContextActionDataProvider.get_ElementFactory();
    public virtual JavaScriptElementFactory get_ElementFactory();
    public sealed virtual ITsFile get_PsiFile();
    [CanBeNullAttribute]
public sealed virtual TsContextActionDataProvider TryTranslateToCurrentFork(IContentModelForkTranslator translator);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JavaScriptLanguage", "16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.Clipboard.JavaScriptCopyPasteAssist : object {
    [NotNullAttribute]
private JavaScriptLanguage myLanguage;
    public JavaScriptCopyPasteAssist(JavaScriptLanguage language);
    public sealed virtual bool EscapePastedRegion(CutOrCopySourceInfo context, string pastedText, ITreeNode pasteTargetNode, DocumentRange pasteRange, String& suggestedEscapeText);
    public sealed virtual CutOrCopySourceInfo GetSourceContext(string rawSourceText, ITreeNode treeNode, DocumentRange copyRange);
    [NotNullAttribute]
private string GetEscapedText(CutOrCopySourceInfo context, string pastedText, ITreeNode treeNode, DocumentRange documentRange);
    private string GetUnescapedSource(ITreeNode node, string rawSourceText, char quotes);
    [CanBeNullAttribute]
private JavaScriptCutOrCopyInfo GetCutOrCopyInfo(string rawSourceText, ITreeNode treeNode, DocumentRange copyRange);
    [CanBeNullAttribute]
private static IJavaScriptLiteralExpression TryGetStringLiteralExpression(ITreeNode treeNode);
    private bool IsOffsetValid(ITreeNode treeNode, DocumentRange range);
    private static int GetStartBorderLength(ITreeNode node);
    private static int GetEndBorderLength(ITreeNode node);
    private bool IsLiteralOffsetValid(ITreeNode node, int literalOffset);
}
[CodeCleanupModuleAttribute]
public class JetBrains.ReSharper.Feature.Services.JavaScript.CodeCleanup.JavaScriptDecoration : object {
    private static CodeCleanupOptionDescriptor`1<bool> ourDescriptor;
    public ICollection`1<CodeCleanupOptionDescriptor> Descriptors { get; }
    public string Name { get; }
    public PsiLanguageType LanguageType { get; }
    public bool IsAvailableOnSelection { get; }
    private static JavaScriptDecoration();
    public sealed virtual ICollection`1<CodeCleanupOptionDescriptor> get_Descriptors();
    public sealed virtual void SetDefaultSetting(CodeCleanupProfile profile, DefaultProfileType profileType);
    public sealed virtual string get_Name();
    public sealed virtual PsiLanguageType get_LanguageType();
    public sealed virtual bool get_IsAvailableOnSelection();
    public sealed virtual bool IsAvailable(IPsiSourceFile sourceFile);
    public sealed virtual bool IsAvailable(CodeCleanupProfile profile);
    public sealed virtual void Process(IPsiSourceFile sourceFile, IRangeMarker rangeMarker, CodeCleanupProfile profile, IProgressIndicator progressIndicator, IUserDataHolder cache);
}
[CodeCleanupModuleAttribute]
public class JetBrains.ReSharper.Feature.Services.JavaScript.CodeCleanup.JavaScriptReformatCode : JavaScriptReformatCodeBase`1<JavaScriptLanguage> {
    public PsiLanguageType LanguageType { get; }
    public virtual PsiLanguageType get_LanguageType();
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.CodeCleanup.JavaScriptReformatCodeBase : object {
    protected static CodeCleanupOptionDescriptor`1<bool> Descriptor;
    protected static CodeCleanupOptionDescriptor`1<bool> CommentsDescriptor;
    private static JavaScriptReformatCodeBase();
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.CodeCleanup.JavaScriptReformatCodeBase`1 : JavaScriptReformatCodeBase {
    public ICollection`1<CodeCleanupOptionDescriptor> Descriptors { get; }
    public string Name { get; }
    public PsiLanguageType LanguageType { get; }
    public bool IsAvailableOnSelection { get; }
    public virtual ICollection`1<CodeCleanupOptionDescriptor> get_Descriptors();
    public sealed virtual void SetDefaultSetting(CodeCleanupProfile profile, DefaultProfileType profileType);
    public sealed virtual string get_Name();
    public abstract virtual PsiLanguageType get_LanguageType();
    public sealed virtual bool get_IsAvailableOnSelection();
    public sealed virtual bool IsAvailable(IPsiSourceFile sourceFile);
    public sealed virtual bool IsAvailable(CodeCleanupProfile profile);
    public sealed virtual void Process(IPsiSourceFile sourceFile, IRangeMarker rangeMarker, CodeCleanupProfile profile, IProgressIndicator progressIndicator, IUserDataHolder cache);
}
[CodeCleanupModuleAttribute]
public class JetBrains.ReSharper.Feature.Services.JavaScript.CodeCleanup.JsonScriptReformatCode : JavaScriptReformatCodeBase`1<JsonLanguage> {
    public PsiLanguageType LanguageType { get; }
    public ICollection`1<CodeCleanupOptionDescriptor> Descriptors { get; }
    public virtual PsiLanguageType get_LanguageType();
    public virtual ICollection`1<CodeCleanupOptionDescriptor> get_Descriptors();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.CodeCleanup.SemicolonInserter : object {
    [NotNullAttribute]
private IJavaScriptTreeNode myRoot;
    private TerminationStyle myTerminationStyle;
    public SemicolonInserter(IJavaScriptTreeNode root, TerminationStyle terminationStyle);
    public void Run(IProgressIndicator pi);
    private void Handle(ITreeNode statement);
    public void Handle(ITerminationSemicolonOwner owner);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.CodeCompletion.JsKeywordGenerator : object {
    public virtual bool CanBeExpression(ITokenNode token);
    public virtual bool CanBeExpression(ITokenNode token, JsKeywordGeneratorFlags& flags);
    [CanBeNullAttribute]
public virtual ITokenNode GetAnchorToken(ITokenNode token);
    public bool IsCorrect(IJavaScriptStatement ownerStatement);
    protected bool IsCorrect(IJavaScriptExpression owner);
    public bool CanBeStatement(ITokenNode token);
    private bool CanBeClassBodyAfterToken(ITokenNode node);
    public virtual bool CanBeStatement(ITokenNode token, JsKeywordGeneratorFlags& flags);
    private bool CanBeCase(IJavaScriptStatement statement);
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Feature.Services.JavaScript.CodeCompletion.JsKeywordGeneratorFlags : Enum {
    public ulong value__;
    public static JsKeywordGeneratorFlags None;
    public static JsKeywordGeneratorFlags CanBeElse;
    public static JsKeywordGeneratorFlags CanBeTry;
    public static JsKeywordGeneratorFlags CanBeStatement;
    public static JsKeywordGeneratorFlags CanBeBreak;
    public static JsKeywordGeneratorFlags CanBeContinue;
    public static JsKeywordGeneratorFlags CanBeCase;
    public static JsKeywordGeneratorFlags CanBeExpression;
    public static JsKeywordGeneratorFlags CanBeVarLetConst;
    public static JsKeywordGeneratorFlags CanBeAccessor;
    public static JsKeywordGeneratorFlags CanBeTypeDeclaration;
    public static JsKeywordGeneratorFlags CanBeOnlyClassDeclaration;
    public static JsKeywordGeneratorFlags CanBeModule;
    public static JsKeywordGeneratorFlags CanBeExtends;
    public static JsKeywordGeneratorFlags CanBeImplements;
    public static JsKeywordGeneratorFlags CanBeVisibilityModifier;
    public static JsKeywordGeneratorFlags CanBeConstructor;
    public static JsKeywordGeneratorFlags CanBeStatic;
    public static JsKeywordGeneratorFlags CanBeNew;
    public static JsKeywordGeneratorFlags CanBeSuper;
    public static JsKeywordGeneratorFlags CanBeImport;
    public static JsKeywordGeneratorFlags CanBeExport;
    public static JsKeywordGeneratorFlags CanBeTypeAlias;
    public static JsKeywordGeneratorFlags CanBeFunction;
    public static JsKeywordGeneratorFlags CanBeRequire;
    public static JsKeywordGeneratorFlags CanBeDefault;
    public static JsKeywordGeneratorFlags CanBeStar;
    public static JsKeywordGeneratorFlags CanBeAs;
    public static JsKeywordGeneratorFlags CanBeInfixOperator;
    public static JsKeywordGeneratorFlags CanBeThis;
    public static JsKeywordGeneratorFlags CanBeReturn;
    public static JsKeywordGeneratorFlags CanBeInOrOf;
    public static JsKeywordGeneratorFlags CanBeDeclare;
    public static JsKeywordGeneratorFlags CanBeFrom;
    public static JsKeywordGeneratorFlags CanBeAbstract;
    public static JsKeywordGeneratorFlags CanBeReadonly;
    public static JsKeywordGeneratorFlags CanBeConstructorAfterNonPublicKeyword;
    public static JsKeywordGeneratorFlags CanBeTypeUsage;
    public static JsKeywordGeneratorFlags CanBeInterface;
    public static JsKeywordGeneratorFlags IsDeclarationMoreExpected;
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.AutopopupEnabledSettingsKey", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "InjectedJavaScriptSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.CodeCompletion.Settings.InjectedJavaScriptAutopopupEnabledSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "OnLettersAndDigitsSettingDescription")]
public AutopopupType OnIdent;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "AfterDotSettingDescription")]
public AutopopupType AfterDot;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "WhereValueIsExpectedSettingDescription")]
public AutopopupType WhereValueIsExpected;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "InsideStringSettingDescription")]
public AutopopupType InsideString;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.CodeCompletion.Settings.InjectedJavaScriptCodeCompletionManager : JavaScriptLikeLanguageCodeCompletionManager {
    public InjectedJavaScriptCodeCompletionManager(LanguageManager manager, CodeCompletionSettingsService codeCompletionSettings);
    public virtual SettingsScalarEntry GetSettingsEntry(ISettingsSchema settingsSchema);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntellisenseEnabledSettingsKey", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "OverrideVSIntelliSenseForInjectedJavaScriptSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.CodeCompletion.Settings.IntellisenseEnabledSettingInjectedJavaScript : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "JavaScriptInStringLiteralsInjectedSettingDescription")]
public bool IntellisenseEnabled;
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntellisenseEnabledSettingsKey", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "OverrideVSIntelliSenseForJavaScriptSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.CodeCompletion.Settings.IntellisenseEnabledSettingJavaScript : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "JavaScriptJsFilesAndEmbeddedJavaScriptSettingDescription")]
public bool IntellisenseEnabled;
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntellisenseEnabledSettingsKey", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "OverrideVSIntelliSenseForJSONSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.CodeCompletion.Settings.IntellisenseEnabledSettingJson : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "JSONSettingDescription")]
public bool IntellisenseEnabled;
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntellisenseEnabledSettingsKey", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "OverrideVSIntelliSenseForJSXJavaScriptSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.CodeCompletion.Settings.IntellisenseEnabledSettingJsx : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "JavaScriptInJSXJsxFilesOnlySettingDescription")]
public bool IntellisenseEnabled;
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.AutopopupEnabledSettingsKey", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "JavaScriptSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.CodeCompletion.Settings.JavaScriptAutopopupEnabledSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "OnLettersAndDigitsSettingDescription")]
public AutopopupType OnIdent;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "AfterDotSettingDescription")]
public AutopopupType AfterDot;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "WhereValueIsExpectedSettingDescription")]
public AutopopupType WhereValueIsExpected;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "InsideStringSettingDescription")]
public AutopopupType InsideString;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.CodeCompletion.Settings.JavaScriptCodeCompletionManager : JavaScriptLikeLanguageCodeCompletionManager {
    public JavaScriptCodeCompletionManager(LanguageManager manager, CodeCompletionSettingsService codeCompletionSettings);
    public virtual SettingsScalarEntry GetSettingsEntry(ISettingsSchema settingsSchema);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.CodeCompletion.Settings.JavaScriptLikeLanguageCodeCompletionManager : LanguageSpecificCodeCompletionManager {
    [NullableAttribute("2")]
private JavaScriptLikeBaseLanguage myLanguageInstance;
    public PsiLanguageType PsiLanguage { get; }
    protected JavaScriptLikeLanguageCodeCompletionManager(JavaScriptLikeBaseLanguage languageInstance, LanguageManager manager, CodeCompletionSettingsService codeCompletionSettings);
    public virtual PsiLanguageType get_PsiLanguage();
    protected virtual bool GetIntellisenseEnabledSpecific(IContextBoundSettingsStore settingsStore);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.CodeCompletion.Settings.JsonCodeCompletionManager : JavaScriptLikeLanguageCodeCompletionManager {
    public JsonCodeCompletionManager(LanguageManager manager, CodeCompletionSettingsService codeCompletionSettings);
    public virtual SettingsScalarEntry GetSettingsEntry(ISettingsSchema settingsSchema);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.AutopopupEnabledSettingsKey", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "TypeScriptSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.CodeCompletion.Settings.TypeScriptAutopopupEnabledSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "OnLettersAndDigitsSettingDescription")]
public AutopopupType OnIdent;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "AfterDotSettingDescription")]
public AutopopupType AfterDot;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "WhereValueIsExpectedSettingDescription")]
public AutopopupType WhereValueIsExpected;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "InsideStringSettingDescription")]
public AutopopupType InsideString;
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.CodeCompletion.TsKeywordGenerator : JsKeywordGenerator {
    public bool CanBeTypeMember(ITokenNode token, Boolean& isClassMember);
    public bool CanBeModuleMember(ITokenNode token);
    public virtual bool CanBeExpression(ITokenNode token, JsKeywordGeneratorFlags& flags);
    public virtual bool CanBeStatement(ITokenNode token, JsKeywordGeneratorFlags& flags);
    public bool ModuleIdentifierCanTransformToKeyword(ITokenNode previousMeaningfulToken);
    public virtual ITokenNode GetAnchorToken(ITokenNode node);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.CodeStructure.JavaScriptCodeStructureAspect : object {
    private DocumentRange myNavigationRange;
    [NotNullAttribute]
private IList`1<string> mySearchTexts;
    [NotNullAttribute]
private JavaScriptCodeStructureElementBase myCodeStructureElement;
    public bool InitiallyExpanded { get; }
    private DocumentRange JetBrains.ReSharper.Feature.Services.CodeStructure.IFileStructureAspect.NavigationRange { get; }
    private DocumentRange JetBrains.ReSharper.Feature.Services.CodeStructure.IGotoFileMemberAspect.NavigationRange { get; }
    public JavaScriptCodeStructureAspect(DocumentRange navigationRange, IList`1<string> searchTexts, JavaScriptCodeStructureElementBase codeStructureElement);
    public sealed virtual bool get_InitiallyExpanded();
    private sealed virtual override DocumentRange JetBrains.ReSharper.Feature.Services.CodeStructure.IFileStructureAspect.get_NavigationRange();
    private sealed virtual override IList`1<string> JetBrains.ReSharper.Feature.Services.CodeStructure.IFileStructureAspect.GetQuickSearchTexts();
    public sealed virtual IPsiSourceFile GetSourceFile();
    public sealed virtual string InitialName();
    public sealed virtual bool CanRemove();
    public sealed virtual bool CanRename();
    public sealed virtual void Remove();
    public sealed virtual void Rename(string newName);
    public sealed virtual bool CanMoveElements(RelativeLocation location, IList`1<CodeStructureElement> dropElements);
    public sealed virtual void MoveElements(RelativeLocation location, IList`1<CodeStructureElement> dropElements);
    public DocumentRange[] GetNavigationRanges();
    private sealed virtual override DocumentRange[] JetBrains.ReSharper.Feature.Services.CodeStructure.IMemberNavigationAspect.GetNavigationRanges();
    public sealed virtual void Present(IMenuItemDescriptor descriptor, PresentationState state);
    public sealed virtual void Present(StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    private sealed virtual override DocumentRange JetBrains.ReSharper.Feature.Services.CodeStructure.IGotoFileMemberAspect.get_NavigationRange();
    private sealed virtual override IList`1<string> JetBrains.ReSharper.Feature.Services.CodeStructure.IGotoFileMemberAspect.GetQuickSearchTexts();
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.CodeStructure.JavaScriptCodeStructureBlockVariableDeclaration : JavaScriptCodeStructurePropertyDeclaration {
    private bool myIsConst;
    public JavaScriptCodeStructureBlockVariableDeclaration(CodeStructureElement parent, IVariableDeclaration declaration, bool isConst);
    protected virtual void DumpSelf(TextWriter builder);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.CodeStructure.JavaScriptCodeStructureCollapsibleDeclaration : CodeStructureElement {
    [NotNullAttribute]
private CodeStructureElement myParent;
    public ITreeNode TreeNode { get; }
    public PsiLanguageType Language { get; }
    public JavaScriptCodeStructureCollapsibleDeclaration(CodeStructureElement parent);
    public void Finish(JavaScriptCodeStructureElementBase element, bool collapseIfEmpty);
    public void Finish(JavaScriptCodeStructureElementBase element, Predicate`1<IList`1<CodeStructureElement>> collapseCondition, bool collapseOne);
    public virtual ITreeNode get_TreeNode();
    public virtual PsiLanguageType get_Language();
    public virtual IFileStructureAspect GetFileStructureAspect();
    public virtual IGotoFileMemberAspect GetGotoMemberAspect();
    public virtual IMemberNavigationAspect GetMemberNavigationAspect();
    public virtual DocumentRange GetTextRange();
    protected virtual void DumpSelf(TextWriter builder);
}
internal abstract class JetBrains.ReSharper.Feature.Services.JavaScript.CodeStructure.JavaScriptCodeStructureDeclaration : JavaScriptCodeStructureElementBase {
    [NotNullAttribute]
private string myName;
    [NotNullAttribute]
private IconId myIcon;
    private bool myLocalScope;
    [NotNullAttribute]
public string Name { get; }
    protected JavaScriptCodeStructureDeclaration(CodeStructureElement parent, ITreeNode element, string name, IconId icon, bool localScope, ITreeNode navigationElement);
    public string get_Name();
    [NotNullAttribute]
private IconId GetIcon();
    public virtual void Present(StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    public virtual void Present(IMenuItemDescriptor descriptor, PresentationState state);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.CodeStructure.JavaScriptCodeStructureDocCommentSignature : JavaScriptCodeStructureElementBase {
    [NotNullAttribute]
private string myName;
    [NotNullAttribute]
private List`1<string> myParameters;
    [NotNullAttribute]
private List`1<string> myParameterTypes;
    [CanBeNullAttribute]
private string myReturnType;
    public JavaScriptCodeStructureDocCommentSignature(CodeStructureElement parent, IJsFunctionLike functionLike, IDocSignature signature, string name);
    public virtual void Present(StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    public virtual void Present(IMenuItemDescriptor descriptor, PresentationState state);
    protected virtual void DumpSelf(TextWriter builder);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.CodeStructure.JavaScriptCodeStructureElementBase : CodeStructureElement {
    [NotNullAttribute]
private ITreeNodePointer`1<ITreeNode> myElement;
    [NotNullAttribute]
private JavaScriptCodeStructureAspect myCodeStructureAspect;
    [CanBeNullAttribute]
private CodeStructureElement myCustomParent;
    private DocumentRange myDocumentRange;
    public static TextStyle DefaultTextStyle;
    public static TextStyle TypeTextStyle;
    [CompilerGeneratedAttribute]
private PsiLanguageType <Language>k__BackingField;
    public CodeStructureElement Parent { get; }
    public ITreeNode TreeNode { get; }
    [NotNullAttribute]
public PsiLanguageType Language { get; }
    public JavaScriptCodeStructureElementBase(CodeStructureElement parent, ITreeNode element, string name, ITreeNode navigationElement);
    public JavaScriptCodeStructureElementBase(CodeStructureElement parent, ITreeNode element, IList`1<string> names, ITreeNode navigationElement);
    private static JavaScriptCodeStructureElementBase();
    public virtual CodeStructureElement get_Parent();
    public void SetParent(CodeStructureElement parentElement);
    public virtual ITreeNode get_TreeNode();
    [CompilerGeneratedAttribute]
public virtual PsiLanguageType get_Language();
    public virtual IFileStructureAspect GetFileStructureAspect();
    public virtual IGotoFileMemberAspect GetGotoMemberAspect();
    public virtual IMemberNavigationAspect GetMemberNavigationAspect();
    public virtual DocumentRange GetTextRange();
    protected virtual void DumpSelf(TextWriter builder);
    public virtual void Present(StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    public virtual void Present(IMenuItemDescriptor descriptor, PresentationState state);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.CodeStructure.JavaScriptCodeStructureFunctionDeclaration : JavaScriptCodeStructureDeclaration {
    [NotNullAttribute]
private string myFunctionSignature;
    public JavaScriptCodeStructureFunctionDeclaration(CodeStructureElement parent, IJsFunctionLike element, string name, bool localScope);
    public JavaScriptCodeStructureFunctionDeclaration(CodeStructureElement parent, IJsFunctionLike functionLike, string presentation, string nameMarker);
    private static IconId GetIcon(ITreeNode element);
    private static string BuildFunctionSignature(IJsFunctionLike functionLike, bool doNotPresentEmptyArguments);
    public virtual void Present(StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    public virtual void Present(IMenuItemDescriptor descriptor, PresentationState state);
    protected virtual void DumpSelf(TextWriter builder);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.CodeStructure.JavaScriptCodeStructureMemberField : JavaScriptCodeStructurePropertyDeclaration {
    public JavaScriptCodeStructureMemberField(CodeStructureElement parent, IAssignmentExpression fieldAssignment, string name, bool localScope);
    protected virtual void DumpSelf(TextWriter builder);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.CodeStructure.JavaScriptCodeStructureModuleElement : JavaScriptCodeStructureElementBase {
    [CanBeNullAttribute]
private string myName;
    [NotNullAttribute]
public string DisplayName { get; }
    public JavaScriptCodeStructureModuleElement(CodeStructureElement parent, IFunctionExpression element, string name);
    public string get_DisplayName();
    public virtual void Present(StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    public virtual void Present(IMenuItemDescriptor descriptor, PresentationState state);
    protected virtual void DumpSelf(TextWriter builder);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.CodeStructure.JavaScriptCodeStructureObjectLiteralDeclaration : JavaScriptCodeStructurePropertyDeclaration {
    public JavaScriptCodeStructureObjectLiteralDeclaration(CodeStructureElement parent, IObjectLiteral objectLiteral, string name, bool localScope);
    protected virtual void DumpSelf(TextWriter builder);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.CodeStructure.JavaScriptCodeStructurePropertyDeclaration : JavaScriptCodeStructureDeclaration {
    public JavaScriptCodeStructurePropertyDeclaration(CodeStructureElement parent, ITreeNode element, string name, bool localScope, ITreeNode navigationElement, IconId iconId);
    protected JavaScriptCodeStructurePropertyDeclaration(CodeStructureElement parent, ITreeNode element, string name, IconId icon, bool localScope, ITreeNode navigationElement);
    public virtual void Present(StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    public virtual void Present(IMenuItemDescriptor descriptor, PresentationState state);
    protected virtual void DumpSelf(TextWriter builder);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JavaScriptLikeBaseLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.CodeStructure.JavaScriptCodeStructureProvider : object {
    protected IJsConstantValueService ConstantValueService;
    private static string LambdaSymbol;
    public JavaScriptCodeStructureProvider(IJsConstantValueService constantValueService);
    public virtual CodeStructureRootElement Build(IFile file, CodeStructureOptions options);
    private void ProcessClassMember(IClassElement member, CodeStructureElement parentElement);
    protected virtual void ProcessStatement(IJavaScriptStatement statement, CodeStructureElement parentElement);
    protected virtual void ProcessVariableStatement(IVariableStatement variableStatement, CodeStructureElement parentElement);
    protected virtual void ProcessLexicalDeclaration(ILexicalDeclaration lexicalStatement, CodeStructureElement parentElement);
    [NotNullAttribute]
internal virtual JavaScriptCodeStructureElementBase ProcessBlockVariableDeclaration(IVariableDeclaration declaration, CodeStructureElement parentElement, bool isConst);
    [NotNullAttribute]
internal virtual JavaScriptCodeStructureElementBase ProcessVariableDeclaration(IVariableDeclaration declaration, CodeStructureElement parentElement);
    protected virtual void ProcessCompound(ICompoundExpression expression, CodeStructureElement parentElement);
    protected virtual void ProcessExpression(IExpressionOrSpread expression, CodeStructureElement parentElement);
    protected void ProcessObjectLiteral(IObjectLiteral objectLiteral, CodeStructureElement parentElement);
    private void ProcessFunctionLike(IJsFunctionLike functionLike, CodeStructureElement parentElement);
    private void ProcessAssignmentExpression(IAssignmentExpression assignmentExpression, CodeStructureElement parentElement);
    [CanBeNullAttribute]
private static CodeStructureElement ProcessDocComments(IJsFunctionLike functionLike, CodeStructureElement parentElement, string name);
    protected virtual bool IsLocalScope(ITreeNode declaration);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.CodeStructure.JavaScriptCodeStructureRootElement : CodeStructureRootElement {
    public JavaScriptCodeStructureRootElement(IJavaScriptFile file);
    public virtual PresentationState CreatePresentationState();
}
internal static class JetBrains.ReSharper.Feature.Services.JavaScript.CodeStructure.JavaScriptCodeStructureUtil : object {
    public static bool IsModule(IFunctionExpression functionExpression, String& moduleName);
    [CanBeNullAttribute]
public static IJavaScriptExpression FindImmediateFunction(IFunctionExpression functionExpression);
    [CanBeNullAttribute]
[PureAttribute]
public static string GetExpressionName(IJavaScriptExpression expression, Boolean& localName);
    [CanBeNullAttribute]
public static string GetComplexPresentation(IJavaScriptExpression expression, string targetPresentation, IJsConstantValueService service);
    private static void PresentExpressionsList(IJavaScriptExpression expression, string targetPresentation, StringBuilder buffer, IEnumerable`1<IExpressionOrSpread> expressions, IJsConstantValueService service);
    [CanBeNullAttribute]
public static string PresentStaticallyReferencedProperty(IJavaScriptExpression expression);
    [ContractAnnotationAttribute("missing:null => canbenull; missing:notnull => notnull")]
public static string PresentStaticallyReferencedProperty(IJavaScriptExpression expression, Boolean& isThisMember, string missing, bool cutOff);
    [CanBeNullAttribute]
public static ITreeNode GetNavigationNode(IJsFunctionLike functionLike);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.CodeStructure.JavaScriptCodeStructureVariableDeclaration : JavaScriptCodeStructurePropertyDeclaration {
    public JavaScriptCodeStructureVariableDeclaration(CodeStructureElement parent, IVariableDeclaration declaration, bool localScope);
    protected virtual void DumpSelf(TextWriter builder);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JSon.JsonLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.CodeStructure.Json.JsonCodeStructureProvider : JavaScriptCodeStructureProvider {
    private IJsonSchemaManager myManager;
    public JsonCodeStructureProvider(IJsonSchemaManager manager, IJsConstantValueService constantValueService);
    public virtual CodeStructureRootElement Build(IFile file, CodeStructureOptions options);
    private bool ProcessJsonExpression(IExpressionOrSpread literal, CodeStructureElement parent, IJsonSchema schema, IPsiSourceFile sourceFile);
    private void ProcessJsonObjectLiteral(IObjectLiteral literal, CodeStructureElement parent, IJsonSchema schema, IPsiSourceFile sourceFile);
    private IconId GetIconForValueType(JsonValueType valueType);
    private void ProcessJsonArrayLiteral(IArrayLiteral literal, CodeStructureElement parent, IJsonSchema schema, IPsiSourceFile sourceFile);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.CodeStructure.Json.JsonCodeStructureRootElement : CodeStructureRootElement {
    public JsonCodeStructureRootElement(IJavaScriptFile file);
    public virtual PresentationState CreatePresentationState();
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.CodeStructure.TypeScript.TypeScriptCodeStructureDeclaration : JavaScriptCodeStructureElementBase {
    [NotNullAttribute]
private IconId myIcon;
    [NotNullAttribute]
private string myName;
    private JavaScriptDeclaredElementType myElementType;
    [CanBeNullAttribute]
private string myTypeAnnotation;
    [CanBeNullAttribute]
private IList`1<string> myParameters;
    [CanBeNullAttribute]
private IList`1<string> myParameterTypes;
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public IconId Icon { get; }
    public TypeScriptCodeStructureDeclaration(CodeStructureElement parent, ITreeNode declaration, string name, JavaScriptDeclaredElementType elementType, ITreeNode navigationElement);
    public TypeScriptCodeStructureDeclaration(CodeStructureElement parent, IDeclaration declaration, JavaScriptDeclaredElementType elementType, ITreeNode navigationElement);
    private static string PresentDeclaredName(string declaredName);
    [CanBeNullAttribute]
private static IList`1<string> CollectParameters(ITreeNode declaration, IList`1& parameterTypes);
    private static ITreeNode GetPresentationNode(ITreeNode declaration);
    private static string CollectTypeAnnotation(ITreeNode declaration);
    [CanBeNullAttribute]
private static string PresentTypeAnnotation(ITsTypeAnnotation typeAnnotation);
    public string get_Name();
    public IconId get_Icon();
    [NotNullAttribute]
private static IconId GetIcon(ITreeNode declaration, JavaScriptDeclaredElementType elementType);
    private static bool IsModuleMember(ITreeNode declaration);
    private void PresentParameters(RichText text);
    public virtual void Present(StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    public virtual void Present(IMenuItemDescriptor descriptor, PresentationState state);
    protected virtual void DumpSelf(TextWriter builder);
    [NotNullAttribute]
private static string DumpNodeType(ITreeNode node);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.TypeScript.TypeScriptLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.CodeStructure.TypeScript.TypeScriptCodeStructureProvider : JavaScriptCodeStructureProvider {
    public TypeScriptCodeStructureProvider(IJsConstantValueService constantValueService);
    public virtual CodeStructureRootElement Build(IFile file, CodeStructureOptions options);
    protected virtual void ProcessStatement(IJavaScriptStatement statement, CodeStructureElement parentElement);
    internal virtual JavaScriptCodeStructureElementBase ProcessVariableDeclaration(IVariableDeclaration declaration, CodeStructureElement parentElement);
    protected virtual bool IsLocalScope(ITreeNode declaration);
    private void ProcessClassMember(ITsClassMemberDeclaration member, CodeStructureElement parentElement);
    private static void ProcessInterfaceMember(ITsTypeMemberDeclaration memberDeclaration, CodeStructureElement parentElement);
    protected virtual void ProcessExpression(IExpressionOrSpread expression, CodeStructureElement parentElement);
    private static string GetNameOptional(string declaredName, ITokenNode question);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.CodeStructure.TypeScript.TypeScriptCodeStructureRootElement : CodeStructureRootElement {
    public TypeScriptCodeStructureRootElement(ITsFile file);
    public virtual PresentationState CreatePresentationState();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JavaScriptLikeBaseLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.JavaScript.Comment.JavascriptBlockCommentActionProvider : object {
    public string NestedStartBlockCommentMarker { get; }
    public string NestedEndBlockCommentMarker { get; }
    public string StartBlockCommentMarker { get; }
    public string EndBlockCommentMarker { get; }
    public sealed virtual string get_NestedStartBlockCommentMarker();
    public sealed virtual string get_NestedEndBlockCommentMarker();
    public sealed virtual DocumentOffset InsertBlockCommentPosition(ITokenNode tokenNode, DocumentOffset position);
    public sealed virtual bool IsAvailable(IFile file, DocumentRange range, Boolean& disableAllProviders);
    public sealed virtual DocumentRange GetBlockComment(ITokenNode tokenNode);
    public sealed virtual string get_StartBlockCommentMarker();
    public sealed virtual string get_EndBlockCommentMarker();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JavaScriptLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.JavaScript.Comment.JavascriptLineCommentActionProvider : SimpleLineCommentActionProvider {
    protected virtual bool IsNewLine(TokenNodeType tokenType);
    protected virtual bool IsEndOfLineComment(TokenNodeType tokenType, string tokenText);
    protected virtual bool IsWhitespace(TokenNodeType tokenType);
    public virtual bool ShouldInsertAtLineStart(IContextBoundSettingsStore settingsStore);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.ContextSearch.JsImplementationContextSearch : ImplementationContextSearch {
    protected virtual bool IsAvailableInternal(IDataContext dataContext);
    public virtual bool IsContextApplicable(IDataContext dataContext);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.EditorConfig.JsClangFormatConverter : ClangFormatConverterBase`1<JavaScriptCodeFormattingSettingsKey> {
    public JsClangFormatConverter(Lifetime lifetime, SettingsSchema schema);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JavaScriptLikeBaseLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.ExpressionSelection.JavaScriptExpressionSelectionProvider : ExpressionSelectionProviderBase`1<IJavaScriptExpression> {
    protected virtual bool IsTokenSkipped(ITokenNode token);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.Generate.TypeScript.GeneratorTsElement : GeneratorElementBase {
    [CompilerGeneratedAttribute]
private IDeclaredElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private ITsSubstitution <Substitution>k__BackingField;
    public IDeclaredElement Element { get; }
    public ITsSubstitution Substitution { get; }
    public string TestDescriptor { get; }
    public GeneratorTsElement(IDeclaredElement element);
    public GeneratorTsElement(IDeclaredElement element, ITsSubstitution substitution);
    [CompilerGeneratedAttribute]
public IDeclaredElement get_Element();
    [CompilerGeneratedAttribute]
public ITsSubstitution get_Substitution();
    public sealed virtual void InitGeneratorPresenter(StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter);
    private void PresentTsConstructorSignature(ITsConstructorSignature value, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    [NotNullAttribute]
private string DescribeConstructorSignature(ITsConstructorSignature value, JsInitialResolveContext resolveContext);
    private void PresentTsConstructor(ITsConstructor value, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    private void PresentTsIndexer(JsElementInstance`1<ITsIndexer> value, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    public virtual object GetPresentationObject();
    public virtual object GetGroupingObject();
    public virtual bool Matches(string searchText, IdentifierMatcher matcher);
    public virtual string get_TestDescriptor();
}
public static class JetBrains.ReSharper.Feature.Services.JavaScript.Generate.TypeScript.TsBuilderOptions : object {
    public static string IsAbstract;
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.Generate.TypeScript.TypeScriptGeneratorContext : GeneratorContextBase {
    [CanBeNullAttribute]
private ITsTypeLikeDeclaration myTypeDeclaration;
    [CanBeNullAttribute]
private ITsObjectLiteral myObjectLiteral;
    private JsResolveContext myJsResolveContext;
    private TsElementFactory myFactory;
    private ITsTypeElement myDeclaredElement;
    private ITreeNode myAnchor;
    [CompilerGeneratedAttribute]
private IJsResolvedType <RootResolvedType>k__BackingField;
    public TsElementFactory ElementFactory { get; }
    public JsResolveContext ResolveContext { get; }
    public IJsResolvedType RootResolvedType { get; }
    public PsiLanguageType Language { get; }
    public ITreeNode Root { get; }
    [CanBeNullAttribute]
public ITsTypeLikeDeclaration TypeDeclaration { get; }
    [CanBeNullAttribute]
public ITsObjectLiteral ObjectLiteral { get; }
    public ITreeNode Anchor { get; public set; }
    public ISolution Solution { get; }
    public IPsiModule PsiModule { get; }
    public ITsTypeElement DeclaredElement { get; }
    public TypeScriptGeneratorContext(string kind, ITreeNode anchor, ITsTypeLikeDeclaration typeDeclaration, ITsObjectLiteral objectLiteral);
    public TsElementFactory get_ElementFactory();
    public JsResolveContext get_ResolveContext();
    [CompilerGeneratedAttribute]
public IJsResolvedType get_RootResolvedType();
    public virtual PsiLanguageType get_Language();
    public virtual ITreeNode get_Root();
    public ITsTypeLikeDeclaration get_TypeDeclaration();
    public ITsObjectLiteral get_ObjectLiteral();
    public virtual ITreeNode get_Anchor();
    public virtual void set_Anchor(ITreeNode value);
    public virtual ISolution get_Solution();
    private TreeTextRange GetEndRange(TreeTextRange range);
    public virtual TreeTextRange GetSelectionTreeRange();
    public virtual IPsiModule get_PsiModule();
    public ITsTypeElement get_DeclaredElement();
    public virtual IGeneratorContextPointer CreatePointer();
    [CanBeNullAttribute]
[PureAttribute]
public static IGeneratorContext CreateContext(string kind, IPsiDocumentRangeView psiDocumentRangeView);
    [CanBeNullAttribute]
[PureAttribute]
public static IGeneratorContext CreateContext(string kind, ITsTypeLikeDeclaration typeDeclaration, ITsObjectLiteral objectLiteral, ITreeNode anchor);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.TypeScript.TypeScriptLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.Generate.TypeScript.TypeScriptGeneratorContextFactory : object {
    public sealed virtual IGeneratorContext TryCreate(string kind, IPsiDocumentRangeView psiDocumentRangeView);
    public sealed virtual IGeneratorContext TryCreate(string kind, ITreeNode targetContext, ITreeNode anchor);
    public sealed virtual IGeneratorContext TryCreate(string kind, IDeclaredElement contextElement);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.GoToDeclaration.JavaScriptBasesSearch : BaseContextSearch {
    private JavaScriptContextSearchImpl mySearch;
    protected virtual IEnumerable`1<IDeclaredElement> GetElementCandidates(IDataContext context, ReferencePreferenceKind kind, bool updateOnly);
    public virtual bool IsContextApplicable(IDataContext dataContext);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.GoToDeclaration.JavaScriptContextSearchImpl : object {
    public IList`1<IDeclaredElement> GetCandidates(IDataContext context);
    public bool IsContextApplicable(IDataContext dataContext);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.GoToDeclaration.JavaScriptDeclarationSearch : DefaultDeclarationSearch {
    private OccurrenceFactory myFactory;
    public JavaScriptDeclarationSearch(OccurrenceFactory factory);
    protected virtual SearchDeclarationsRequest CreateSearchRequest(IDataContext dataContext, DeclaredElementTypeUsageInfo element, DeclaredElementTypeUsageInfo initialTarget);
    protected virtual JavaScriptSearchDeclarationsRequest CreateSearchRequest(DeclaredElementTypeUsageInfo elementInfo, JavaScriptServices javaScriptServices, OccurrenceFactory occurrenceFactory, IDocument document, IReference reference, Func`1<bool> checkCancelled);
    public virtual bool IsGotoDeclarationApplicable(IDeclaredElement declaredElement);
    protected virtual SearchDeclarationsRequest GetDeclarationSearchRequest(DeclaredElementTypeUsageInfo elementInfo, Func`1<bool> checkCancelled);
    public virtual bool IsContextApplicable(IDataContext dataContext);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.GoToDeclaration.JavaScriptImplementationsSearch : ImplementationContextSearch {
    private JavaScriptContextSearchImpl mySearch;
    protected virtual IEnumerable`1<DeclaredElementTypeUsageInfo> GetElementCandidates(IDataContext context, ReferencePreferenceKind kind, bool updateOnly);
    public virtual bool IsContextApplicable(IDataContext dataContext);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JavaScriptLikeBaseLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.JavaScript.GoToDeclaration.JavaScriptLanguageReferenceSelector : object {
    public sealed virtual IConstructor GetBaseConstructor(IConstructor constructor);
    public sealed virtual IDeclaredElement TryGetNavigatableCorrespondingElementForImplicitElement(IDeclaredElement declaredElement);
    public sealed virtual IEnumerable`1<DeclaredElementInstance> GetCandidates(IReference reference, IDataContext dataContext, ReferencePreferenceKind preferenceKind);
    public sealed virtual IEnumerable`1<DeclaredElementInstance> GetDeclaredElementsCandidates(DeclaredElementInstance instance, IDataContext dataContext, ReferencePreferenceKind preferenceKind);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.GoToDeclaration.JavaScriptSearchDeclarationsRequest : SearchDeclarationsRequest {
    [CanBeNullAttribute]
private IPsiSourceFile mySourceFile;
    private OccurrenceFactory myFactory;
    private IReference myReference;
    private JavaScriptServices myServices;
    private static SymbolComparer ourSymbolComparer;
    private IJavaScriptSourceFilesVisibilityFilter myFilter;
    public JavaScriptSearchDeclarationsRequest(DeclaredElementTypeUsageInfo declaredElementInfo, JavaScriptServices services, OccurrenceFactory factory, IDocument document, IReference reference, Func`1<bool> checkCancelled);
    private static JavaScriptSearchDeclarationsRequest();
    public virtual ICollection`1<IOccurrence> Search(IProgressIndicator pi);
    private void BuildResultForReference(IReferenceWithFullType rer, HashSet`1<IJavaScriptSymbol> smartSymbols, List`1<IOccurrence> ret, List`1<IDeclaredElement> elementsToSearch);
    private List`1<IJavaScriptSymbol> GetSymbolsFromElements(List`1<IDeclaredElement> elements);
    public virtual int CompareOccurrences(IOccurrence o1, IOccurrence o2);
    protected List`1<IJavaScriptSymbol> FilterSymbols(List`1<IJavaScriptSymbol> javaScriptSymbols);
    [CompilerGeneratedAttribute]
private bool <FilterSymbols>b__11_0(IJavaScriptSymbol symbol);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.GoToDeclaration.JavaScriptTypeDeclarationSearch : TypeDeclarationContextSearch {
    private JavaScriptContextSearchImpl mySearch;
    public virtual bool IsContextApplicable(IDataContext dataContext);
    protected virtual ICollection`1<DeclaredElementInstance> DoGetCandidateInstances(IDataContext context, ReferencePreferenceKind kind, bool availableOnly);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.GoToDeclaration.Json.JsonPathDeclarationSearch : DefaultDeclarationSearch {
    public virtual bool IsGotoDeclarationApplicable(IDeclaredElement declaredElement);
    public virtual bool IsContextApplicable(IDataContext dataContext);
    protected virtual SearchDeclarationsRequest CreateSearchRequest(IDataContext dataContext, DeclaredElementTypeUsageInfo element, DeclaredElementTypeUsageInfo initialTarget);
    protected virtual SearchDeclarationsRequest GetDeclarationSearchRequest(DeclaredElementTypeUsageInfo elementInfo, Func`1<bool> checkCancelled);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.GoToDeclaration.Json.JsonPathSearchDeclarationsRequest : SearchDeclarationsRequest {
    public JsonPathSearchDeclarationsRequest(DeclaredElementTypeUsageInfo declaredElementInfo, Func`1<bool> checkCancelled);
    public virtual ICollection`1<IOccurrence> Search(IProgressIndicator progressIndicator);
    private IOccurrence TryCreateOccurrence(IPsiSourceFile psiSourceFile, string jsonPath);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.JavaScript.GoToDeclaration.Json.ZoneMarker : object {
}
internal static class JetBrains.ReSharper.Feature.Services.JavaScript.GoToDeclaration.TypeScript.HierarchySearchUtil : object {
    internal static int CompareTypeElements(IDeclaredElement element1, IDeclaredElement element2);
    public static IList`1<IDeclaredElement> GetDeclaredElements(IDataContext context);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.GoToDeclaration.TypeScript.TsBaseTypeMembersContextSearch : BaseContextSearch {
    protected virtual IEnumerable`1<IDeclaredElement> GetElementCandidates(IDataContext context, ReferencePreferenceKind kind, bool updateOnly);
    public virtual bool IsContextApplicable(IDataContext dataContext);
    protected virtual bool IsAvailableInternal(IDataContext context);
    protected virtual SearchRequest CreateSearchRequest(IDataContext dataContext, IDeclaredElement declaredElement, IDeclaredElement initialTarget);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.GoToDeclaration.TypeScript.TsBaseTypeMembersSearchRequest : TsHierarchySearchRequest`1<ITsTypeMember> {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public string Title { get; }
    public TsBaseTypeMembersSearchRequest(ITsTypeMember element);
    [CompilerGeneratedAttribute]
public virtual string get_Title();
    protected virtual ICollection`1<IOccurrence> DoSearch(ITsTypeMember element, JsResolveContext context);
    protected virtual int CompareDeclaredElements(IDeclaredElement element1, IDeclaredElement element2);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.GoToDeclaration.TypeScript.TsBaseTypesContextSearch : BaseContextSearch {
    protected virtual IEnumerable`1<IDeclaredElement> GetElementCandidates(IDataContext context, ReferencePreferenceKind kind, bool updateOnly);
    public virtual bool IsContextApplicable(IDataContext dataContext);
    protected virtual bool IsAvailableInternal(IDataContext context);
    protected virtual SearchRequest CreateSearchRequest(IDataContext dataContext, IDeclaredElement declaredElement, IDeclaredElement initialTarget);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.GoToDeclaration.TypeScript.TsBaseTypesSearchRequest : TsHierarchySearchRequest`1<ITsExtendableTypeElement> {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public string Title { get; }
    public TsBaseTypesSearchRequest(ITsExtendableTypeElement extendableType);
    [CompilerGeneratedAttribute]
public virtual string get_Title();
    protected virtual int CompareDeclaredElements(IDeclaredElement element1, IDeclaredElement element2);
    protected virtual ICollection`1<IOccurrence> DoSearch(ITsExtendableTypeElement extendableTypeElement, JsResolveContext context);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.GoToDeclaration.TypeScript.TsDeclarationSearch : JavaScriptDeclarationSearch {
    public TsDeclarationSearch(OccurrenceFactory factory);
    protected virtual JavaScriptSearchDeclarationsRequest CreateSearchRequest(DeclaredElementTypeUsageInfo elementInfo, JavaScriptServices javaScriptServices, OccurrenceFactory occurrenceFactory, IDocument document, IReference reference, Func`1<bool> checkCancelled);
    protected virtual bool IsAvailableInternal(IDataContext context);
    public virtual bool IsContextApplicable(IDataContext dataContext);
    private static bool IsDeclaredElementTypeAllowed(IDeclaredElement declaredElement);
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.GoToDeclaration.TypeScript.TsHierarchySearchRequest`1 : SearchRequest {
    private DeclaredElementEnvoy`1<TElement> myTarget;
    private ISolution mySolution;
    public ISolution Solution { get; }
    public ICollection SearchTargets { get; }
    protected TsHierarchySearchRequest`1(TElement element);
    public virtual ISolution get_Solution();
    public virtual ICollection get_SearchTargets();
    public virtual ICollection`1<IOccurrence> Search(IProgressIndicator progressIndicator);
    protected abstract virtual ICollection`1<IOccurrence> DoSearch(TElement element, JsResolveContext context);
    public virtual int CompareOccurrences(IOccurrence o1, IOccurrence o2);
    protected abstract virtual int CompareDeclaredElements(IDeclaredElement element1, IDeclaredElement element2);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.GoToDeclaration.TypeScript.TsImplementationsSearch : ImplementationContextSearch {
    protected virtual IEnumerable`1<DeclaredElementTypeUsageInfo> GetElementCandidates(IDataContext context, ReferencePreferenceKind kind, bool updateOnly);
    public virtual bool IsContextApplicable(IDataContext dataContext);
    protected virtual bool IsAvailableInternal(IDataContext context);
    protected virtual SearchImplementationsRequest CreateSearchRequest(IDataContext dataContext, DeclaredElementTypeUsageInfo element, DeclaredElementTypeUsageInfo initialTarget);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.GoToDeclaration.TypeScript.TsImplementationsSearchRequest : SearchImplementationsRequest {
    private ITsTypeMember myMemberElement;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public string Title { get; }
    public TsImplementationsSearchRequest(ITsTypeMember memberElement);
    [CompilerGeneratedAttribute]
public virtual string get_Title();
    public virtual ICollection`1<IOccurrence> Search(IProgressIndicator progressIndicator);
    public virtual int CompareOccurrences(IOccurrence x, IOccurrence y);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.GoToDeclaration.TypeScript.TsInheritedTypeMembersContextSearch : InheritorsContextSearch {
    protected virtual IEnumerable`1<DeclaredElementInstance> GetElementCandidates(IDataContext context, ReferencePreferenceKind kind, bool updateOnly);
    public virtual bool IsContextApplicable(IDataContext dataContext);
    protected virtual bool IsAvailableInternal(IDataContext context);
    protected virtual SearchRequest CreateSearchRequest(IDataContext dataContext, DeclaredElementInstance element, DeclaredElementInstance initialTarget);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.GoToDeclaration.TypeScript.TsInheritedTypeMembersSearchRequest : TsHierarchySearchRequest`1<ITsTypeMember> {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public string Title { get; }
    public TsInheritedTypeMembersSearchRequest(ITsTypeMember element);
    [CompilerGeneratedAttribute]
public virtual string get_Title();
    protected virtual ICollection`1<IOccurrence> DoSearch(ITsTypeMember element, JsResolveContext context);
    protected virtual int CompareDeclaredElements(IDeclaredElement element1, IDeclaredElement element2);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.GoToDeclaration.TypeScript.TsInheritedTypesContextSearch : InheritorsContextSearch {
    protected virtual SearchRequest CreateSearchRequest(IDataContext dataContext, DeclaredElementInstance element, DeclaredElementInstance initialTarget);
    protected virtual IEnumerable`1<DeclaredElementInstance> GetElementCandidates(IDataContext context, ReferencePreferenceKind kind, bool updateOnly);
    protected virtual bool IsAvailableInternal(IDataContext context);
    public virtual bool IsContextApplicable(IDataContext dataContext);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.GoToDeclaration.TypeScript.TsInheritedTypesSearchRequest : TsHierarchySearchRequest`1<ITsExtendableTypeElement> {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public string Title { get; }
    public TsInheritedTypesSearchRequest(ITsExtendableTypeElement element);
    [CompilerGeneratedAttribute]
public virtual string get_Title();
    protected virtual ICollection`1<IOccurrence> DoSearch(ITsExtendableTypeElement element, JsResolveContext context);
    protected virtual int CompareDeclaredElements(IDeclaredElement element1, IDeclaredElement element2);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.GoToDeclaration.TypeScript.TsSearchDeclarationRequest : JavaScriptSearchDeclarationsRequest {
    private JavaScriptServices myServices;
    private IReference myReference;
    public TsSearchDeclarationRequest(DeclaredElementTypeUsageInfo declaredElementInfo, JavaScriptServices services, OccurrenceFactory factory, IDocument document, IReference reference);
    public virtual ICollection`1<IOccurrence> Search(IProgressIndicator pi);
    private void SearchRecursively(IJsCachedElement element, HashSet`1<IJsCachedElement> res);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.GoToDeclaration.TypeScript.TsTypeDeclarationSearch : DeclaredElementContextSearchBase`1<SearchDeclarationsRequest> {
    public virtual bool IsContextApplicable(IDataContext dataContext);
    private static bool ExcludeForTypeDeclaration(IDataContext dataContext);
    private static JsInitialResolveContext CreateResolveContextForDataContext(IDataContext dataContext);
    private static bool IsApplicableForDeclaredElement(IDeclaredElement declaredElement, JsInitialResolveContext context);
    protected virtual SearchDeclarationsRequest CreateSearchRequest(IDataContext context, IDeclaredElement element, IDeclaredElement initialTarget);
    protected virtual IEnumerable`1<IDeclaredElement> GetElementCandidates(IDataContext dataContext, ReferencePreferenceKind kind, bool updateOnly);
    [NotNullAttribute]
private static ICollection`1<IDeclaredElement> GetCandidatesForElement(IDeclaredElement declaredElement, ITreeNode contextNode, IDataContext dataContext);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.JavaScript.GoToDeclaration.ZoneMarker : object {
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.AggregateTransformerBase`2 : CompositeTranformerBase`2<TChild, TReplacement> {
    protected AggregateTransformerBase`2(IEnumerable`1<TChild> childrenTransformers, IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    public virtual ITransformerMatchResult IsApplicable(ITreeNode node, TransformerMatchContext parentContext);
    public virtual ITreeNode TransformTree(ITransformerMatchResult matchResult, LocalTransformerDataContext parentLocalCache);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.ChildTransformersOwner`1 : object {
    private List`1<ITransformer> myChildTransformers;
    public ICollection`1<string> Words { get; }
    public ChildTransformersOwner`1(IEnumerable`1<TChild> childTransformers);
    public sealed virtual ICollection`1<string> get_Words();
    public sealed virtual ICollection`1<string> GetExtendedWords(ISolution solution);
    public sealed virtual void ApplyRecursivelyTo(ITreeNode root, TransformerMatchContext parentContext, LocalTransformerDataContext localCache);
    public sealed virtual void ApplyToAll(IList`1<ITreeNode> elements, TransformerMatchContext parentContext, LocalTransformerDataContext localCache);
    public sealed virtual void ApplyTo(IList`1<ITreeNode> elements, TransformerMatchContext parentContext, LocalTransformerDataContext localCache);
    public sealed virtual void ApplyTo(ITreeNode& element, TransformerMatchContext parentContext, LocalTransformerDataContext localCache);
    public sealed virtual bool CheckAllElementsAreMatched(IEnumerable`1<ITreeNode> elements, TransformerMatchContext parentContext);
    public sealed virtual bool CheckAnyElementIsMatched(IEnumerable`1<ITreeNode> elements, TransformerMatchContext parentContext, ITransformerMatchResult& matchResult);
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.CompositeDecoratorTransformerBase`2 : CompositeTranformerBase`2<TPartTransfromer, INoopReplacement> {
    protected TDecoratedTransformer DecoratedTransformer;
    public IReadOnlyCollection`1<string> Words { get; }
    protected CompositeDecoratorTransformerBase`2(IEnumerable`1<TPartTransfromer> childrenTransformers, TDecoratedTransformer decoratedTransformer, IShellLocks shellLocks);
    public virtual IReadOnlyCollection`1<string> get_Words();
    protected virtual IStructuralSearchPattern CreatePattern();
    protected virtual bool CheckPostCondition(ITransformerMatchResult matchResult);
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
    public virtual IReadOnlyCollection`1<string> GetExtendedWords(ISolution solution);
    public virtual ITransformerMatchResult IsApplicable(ITreeNode node, TransformerMatchContext parentContext);
    public virtual ITreeNode TransformTree(ITransformerMatchResult matchResult, LocalTransformerDataContext parentLocalCache);
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.CompositeProducerBase`2 : LeafProducer`1<TReplacement> {
    private IChildTransformersOwner myChildrenOwner;
    protected IStructuralSearchPattern Pattern { get; }
    protected CompositeProducerBase`2(IEnumerable`1<TChild> childrenTransformers, IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern get_Pattern();
    protected void TransformChildrenRecursively(ITreeNode root, TransformerMatchContext parentContext, LocalTransformerDataContext localCache);
    protected bool IsApplicableChildren(IEnumerable`1<TTreeNode> elements, TransformerMatchContext parentContext);
    protected void TransformChildren(IEnumerable`1<TTreeNode> elements, TransformerMatchContext parentContext, LocalTransformerDataContext localCache);
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.CompositeTranformerBase`2 : LeafTransformer`1<TReplacement> {
    private IChildTransformersOwner myChildrenOwner;
    protected IStructuralSearchPattern Pattern { get; }
    protected CompositeTranformerBase`2(IEnumerable`1<TChild> childrenTransformers, IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern get_Pattern();
    protected void TransformChildrenRecursively(ITreeNode root, TransformerMatchContext parentContext, LocalTransformerDataContext localCache);
    protected void TransformTree(ITreeNode& node, TransformerMatchContext parentContext, LocalTransformerDataContext localCache);
    protected bool IsApplicableAnyChildren(IEnumerable`1<TTreeNode> elements, TransformerMatchContext parentContext, ITransformerMatchResult& matchResult);
    protected bool IsApplicableAnyChildren(IEnumerable`1<TTreeNode> elements, TransformerMatchContext parentContext);
    protected bool IsApplicableChildren(IEnumerable`1<TTreeNode> elements, TransformerMatchContext parentContext);
    protected void TransformAllChildren(IEnumerable`1<TTreeNode> elements, TransformerMatchContext parentContext, LocalTransformerDataContext localCache);
    protected void TransformChildren(IEnumerable`1<TTreeNode> elements, TransformerMatchContext parentContext, LocalTransformerDataContext localCache);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.FunctionLikeType : object {
    public static FunctionLikeType Instance;
    private static FunctionLikeType();
    public sealed virtual bool GetDefinitionBy(ITreeNode& value, ITsFunctionLike& definition);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.GlobalTransformerDataContext : TransformerDataContext {
}
internal interface JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.IChildTransformersOwner {
    public ICollection`1<string> Words { get; }
    public abstract virtual ICollection`1<string> get_Words();
    public abstract virtual ICollection`1<string> GetExtendedWords(ISolution solution);
    public abstract virtual void ApplyRecursivelyTo(ITreeNode root, TransformerMatchContext parentContext, LocalTransformerDataContext localCache);
    public abstract virtual void ApplyTo(IList`1<ITreeNode> elements, TransformerMatchContext parentContext, LocalTransformerDataContext localCache);
    public abstract virtual void ApplyToAll(IList`1<ITreeNode> elements, TransformerMatchContext parentContext, LocalTransformerDataContext localCache);
    public abstract virtual void ApplyTo(ITreeNode& elements, TransformerMatchContext parentContext, LocalTransformerDataContext localCache);
    public abstract virtual bool CheckAllElementsAreMatched(IEnumerable`1<ITreeNode> elements, TransformerMatchContext parentContext);
    public abstract virtual bool CheckAnyElementIsMatched(IEnumerable`1<ITreeNode> elements, TransformerMatchContext parentContext, ITransformerMatchResult& matchResult);
}
internal interface JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.IDefinitionType`1 {
    public abstract virtual bool GetDefinitionBy(ITreeNode& value, TType& definition);
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.INoopReplacement {
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.ITransformer {
    public TransformerPassKind PassKind { get; }
    public UInt32 Cost { get; }
    public IReadOnlyCollection`1<string> Words { get; }
    [NotNullAttribute]
public abstract virtual ITransformerMatchResult IsApplicable(ITreeNode node, TransformerMatchContext parentContext);
    [NotNullAttribute]
public abstract virtual ITreeNode TransformTree(ITransformerMatchResult matchResult, LocalTransformerDataContext parentLocalCache);
    public abstract virtual TransformerPassKind get_PassKind();
    public abstract virtual UInt32 get_Cost();
    public abstract virtual IReadOnlyCollection`1<string> get_Words();
    public abstract virtual IReadOnlyCollection`1<string> GetExtendedWords(ISolution solution);
    public abstract virtual bool InteriorShouldBeProcessed(ITreeNode element);
    public abstract virtual bool IsApplicableTo(ITreeNode element, TransformerMatchContext parentContext);
    [NotNullAttribute]
public abstract virtual ITreeNode TransformElement(ITreeNode element, TransformerMatchContext parentContext, LocalTransformerDataContext parentLocalCache);
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.ITransformerDataKey`1 {
    [NotNullAttribute]
public string TypeKey { get; }
    public abstract virtual string get_TypeKey();
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.ITransformerMatchResult {
    public TransformerMatchContext TransformationContext { get; }
    public JavaScriptServices JsServices { get; }
    public abstract virtual TransformerMatchContext get_TransformationContext();
    public abstract virtual JavaScriptServices get_JsServices();
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.ITransformerReplacement {
    public abstract virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    [NotNullAttribute]
public abstract virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
internal static class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.LastDefinitionFinder : object {
    private static int MaxLengthChainOfDefinitions;
    private static string LastDefinitionFinderKeyType;
    private static string LastDefinitionFinderCopyKeyType;
    [CanBeNullAttribute]
public static TType FindLastDefintionAndCopyFor(IReferenceExpressionReferenceOwner referenceOwner, IDefinitionType`1<TType> defenitionType, TransformerDataContext cache);
    [CanBeNullAttribute]
public static TType FindLastDefintionFor(IReferenceExpressionReferenceOwner referenceOwner, IDefinitionType`1<TType> defenitionType, TransformerDataContext cache);
    public static bool HasLastStrictDefintionFor(IReferenceExpressionReferenceOwner referenceOwner, IDefinitionType`1<TType> definitionType, TransformerDataContext cache);
    private static bool FindLastStrictDefinitionFor(IReferenceExpressionReferenceOwner referenceOwner, ITreeNode& lastDefinition);
    private static TType DoFindLastSpecificDefintionFor(IReferenceExpressionReferenceOwner referenceOwner, IDefinitionType`1<TType> definitionType);
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.LeafProducer`1 : TransformerBase`1<TReplacement> {
    protected LeafProducer`1(IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    public virtual ITreeNode TransformElement(ITreeNode element, TransformerMatchContext parentContext, LocalTransformerDataContext parentLocalCache);
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.LeafTransformer`1 : TransformerBase`1<TReplacement> {
    protected LeafTransformer`1(IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    public virtual ITreeNode TransformElement(ITreeNode element, TransformerMatchContext parentContext, LocalTransformerDataContext parentLocalCache);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.LocalTransformerDataContext : TransformerDataContext {
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.NoopReplacement : object {
    public static ITransformerReplacement Instance;
    private static NoopReplacement();
    public sealed virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public sealed virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.ObjectLiteralType : object {
    public static ObjectLiteralType Instance;
    private static ObjectLiteralType();
    public sealed virtual bool GetDefinitionBy(ITreeNode& value, ITsObjectLiteral& definition);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.OrderTransformerDomainVisitor : SearchDomainVisitor {
    private TransformerProcessor myProcessor;
    private ISearchDomain myDomain;
    private IJavaScriptDependencyManager myDependencyManager;
    private IProgressIndicator myProgressIndicator;
    private bool myProcessingIsFinished;
    public bool ProcessingIsFinished { get; }
    public OrderTransformerDomainVisitor(TransformerProcessor processor, ISearchDomain searchDomain, IJavaScriptDependencyManager dependencyManager, IProgressIndicator pi);
    public void Run();
    public virtual bool get_ProcessingIsFinished();
    public virtual void VisitPsiSourceFile(IPsiSourceFile sourceFile);
    public virtual void VisitRootSearchDomainNode(RootSearchDomainNode rootNode);
    private IEnumerable`1<IPsiSourceFile> GetTopoOrder(ICollection`1<IPsiSourceFile> sourceFiles);
    private bool ProcessProjectFile(IPsiSourceFile sourceFile);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformationRequest : object {
    private ISolution mySolution;
    private DocumentManager myDocumentManager;
    private SearchDomainFactory mySearchDomainFactory;
    private ISearchDomain mySearchDomain;
    private TransformerManager myTransformerManager;
    private IJavaScriptDependencyManager myDependencyManager;
    public TransformationRequest(ISolution solution, ISearchDomain searchDomain, TransformerManager transformerManager);
    public void Transform(IProgressIndicator progressIndicator);
    public virtual void Transform();
    private ITaskExecutor CreateTaskExecutor();
    private static ISearchDomain NarrowSearchDomain(ICollection`1<IReadOnlyCollection`1<string>> wordSets, ICollection`1<IReadOnlyCollection`1<string>> extendedWordSets, ISearchDomain domain, ISolution solution, SearchDomainFactory factory);
    [CompilerGeneratedAttribute]
private bool <Transform>b__8_0();
    [CompilerGeneratedAttribute]
private void <Transform>b__8_1(IProgressIndicator pi);
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformerBase`1 : object {
    protected IShellLocks ShellLocks;
    private SolutionFeaturePartsContainer myReplacementsContainer;
    private IStructuralSearchPattern mySearchPattern;
    private IStructuralMatcher myMatcher;
    private IStructuralMatcher SearchPatternMatcher { get; }
    protected IStructuralSearchPattern Pattern { get; }
    public TransformerPassKind PassKind { get; }
    public UInt32 Cost { get; }
    public IReadOnlyCollection`1<string> Words { get; }
    protected TransformerBase`1(IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    private IStructuralMatcher get_SearchPatternMatcher();
    protected virtual IStructuralSearchPattern get_Pattern();
    protected abstract virtual IStructuralSearchPattern CreatePattern();
    public virtual TransformerPassKind get_PassKind();
    public sealed virtual UInt32 get_Cost();
    public sealed virtual int CompareTo(ITransformer other);
    public abstract virtual ITreeNode TransformElement(ITreeNode element, TransformerMatchContext parentContext, LocalTransformerDataContext parentLocalCache);
    public virtual IReadOnlyCollection`1<string> get_Words();
    public virtual IReadOnlyCollection`1<string> GetExtendedWords(ISolution solution);
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
    protected virtual bool CheckPostCondition(ITransformerMatchResult matchResult);
    public virtual ITransformerMatchResult IsApplicable(ITreeNode node, TransformerMatchContext parentContext);
    public virtual ITreeNode TransformTree(ITransformerMatchResult matchResult, LocalTransformerDataContext parentLocalCache);
    protected ITransformerReplacement GetAvailableReplacement(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public sealed virtual bool InteriorShouldBeProcessed(ITreeNode element);
    public sealed virtual bool IsApplicableTo(ITreeNode element, TransformerMatchContext parentContext);
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformerDataContext : object {
    private IDictionary`2<object, object> myHolder;
    public TValueType Get(ITransformerDataKey`1<TValueType> key);
    public void Put(ITransformerDataKey`1<TValueType> key, TValueType newValue);
    public TValueType GetOrCreate(ITransformerDataKey`1<TValueType> key, Func`1<TValueType> build);
    public TValueType GetOrCreate(ITransformerDataKey`1<TValueType> key, T0 t0, Func`2<T0, TValueType> build);
    public TValueType GetOrCreate(ITransformerDataKey`1<TValueType> key, T0 t0, T1 t1, Func`3<T0, T1, TValueType> build);
    public TValueType GetOrCreate(ITransformerDataKey`1<TValueType> key, T0 t0, T1 t1, T2 t2, Func`4<T0, T1, T2, TValueType> build);
    public bool TryGetValue(ITransformerDataKey`1<TValueType> key, TValueType& value);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformerDataKey`1 : object {
    private string myTypeKey;
    public string TypeKey { get; }
    public TransformerDataKey`1(string typeKey);
    public sealed virtual string get_TypeKey();
    public bool Equals(TransformerDataKey`1<TValueType> obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformerDataKey`2 : TransformerDataKey`1<TValueType> {
    private TKey myKey;
    public TransformerDataKey`2(TKey key, string typeKey);
    public bool Equals(TransformerDataKey`2<TValueType, TKey> obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformerDomainVisitor : SearchDomainVisitor {
    private TransformerProcessor myProcessor;
    private ISearchDomain myDomain;
    private IProgressIndicator myProgressIndicator;
    private bool myProcessingIsFinished;
    public bool ProcessingIsFinished { get; }
    public TransformerDomainVisitor(TransformerProcessor processor, ISearchDomain searchDomain, IProgressIndicator pi);
    public void Run();
    public virtual void VisitPsiSourceFile(IPsiSourceFile sourceFile);
    public virtual void VisitAssembly(IPsiAssembly assembly);
    public virtual void VisitElement(ITreeNode element);
    public virtual bool get_ProcessingIsFinished();
    private bool ProcessProjectFile(IPsiSourceFile sourceFile);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformerExtensions : object {
    [ExtensionAttribute]
public static void Apply(IEnumerable`1<ITransformer> transformers, ITreeNode& rootNode, TransformerMatchContext context);
    [ExtensionAttribute]
public static void Apply(IEnumerable`1<ITransformer> transformers, ITreeNode& rootNode, TransformerMatchContext context, LocalTransformerDataContext localCache);
    [ExtensionAttribute]
public static void Apply(ITransformer transformer, ITreeNode& treeNode);
    [ExtensionAttribute]
internal static void Apply(ITransformer transformer, ITreeNode& rootNode, TransformerMatchContext context, LocalTransformerDataContext localCache);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformerManager : object {
    private List`1<ITransformer> myTransformerPasses;
    private List`1<ITransformer> myErrorTransformersView;
    private List`1<ITransformer> myVisibleUserTransformersView;
    private List`1<List`1<ITransformer>> myInterFileGroupsView;
    private List`1<List`1<ITransformer>> myIntraFileGroupsView;
    public IList`1<ITransformer> TransformersForError { get; }
    public TransformerManager(IEnumerable`1<ITransformer> transformerPasses);
    public IList`1<ITransformer> get_TransformersForError();
    public ICollection`1<IReadOnlyCollection`1<string>> GetWordSets(bool isIntra);
    public ICollection`1<IReadOnlyCollection`1<string>> GetExtendedWordSets(bool isIntra, ISolution solution);
    public IEnumerable`1<ITransformer> GetAllTransformerPasses();
    public void MakeIntraFilesTransformations(ITypeScriptTreeNode root, TransformerMatchContext context);
    public void MakeInterFileTransformations(ITypeScriptTreeNode root, TransformerMatchContext context);
    public bool TryGetFirstTranformerForHighlighting(ITypeScriptTreeNode node, TransformerMatchContext context, ITransformer& applicableTransformer, ITransformerMatchResult& matchResult);
    private static bool CanBeError(ITransformer it);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformerManagerException : Exception {
    public TransformerManagerException(string message);
    public TransformerManagerException(string message, Exception innerException);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformerMatchContext : object {
    public static TransformerMatchContext NOT_MATCHED_CONTEXT;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, IPlaceholder> <Placeholders>k__BackingField;
    [CompilerGeneratedAttribute]
private GlobalTransformerDataContext <DataContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IMatchingContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private JavaScriptServices <JsServices>k__BackingField;
    public IDictionary`2<string, IPlaceholder> Placeholders { get; }
    public GlobalTransformerDataContext DataContext { get; }
    public IMatchingContext Context { get; }
    public JavaScriptServices JsServices { get; }
    internal TransformerMatchContext(IMatchingContext context, IDictionary`2<string, IPlaceholder> placeholders, GlobalTransformerDataContext dataContext, JavaScriptServices jsServices);
    private static TransformerMatchContext();
    public static TransformerMatchContext CreateInitialContext(ITreeNode contextNode);
    public static TransformerMatchContext CreateInitialContext(JavaScriptServices services);
    internal static TransformerMatchContext CreateContextFrom(ITreeNode contextNode, IMatchingContext variant);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, IPlaceholder> get_Placeholders();
    [CompilerGeneratedAttribute]
public GlobalTransformerDataContext get_DataContext();
    [CompilerGeneratedAttribute]
public IMatchingContext get_Context();
    [CompilerGeneratedAttribute]
public JavaScriptServices get_JsServices();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformerMatchResult : object {
    public static ITransformerMatchResult NOT_MATCHED;
    private IStructuralMatchResult myStructuralMatchResult;
    [CompilerGeneratedAttribute]
private TransformerMatchContext <TransformationContext>k__BackingField;
    public bool Matched { get; }
    public ITreeNode MatchedElement { get; }
    public IMatchingContext Context { get; }
    public StructuralSearchPatternParams Params { get; }
    public TransformerMatchContext TransformationContext { get; }
    public JavaScriptServices JsServices { get; }
    private TransformerMatchResult(IStructuralMatchResult structuralMatchResult, TransformerMatchContext transformerContext);
    private static TransformerMatchResult();
    public static IStructuralMatchResult GetSequenceContext(SequenceMatchingContext`1<T> context, DocumentRange range, StructuralSearchPatternParams params);
    internal static TransformerMatchResult CreateFakeMatchResultFrom(ITreeNode node, TransformerMatchContext oldParentContext, DocumentRange documentRange, StructuralSearchPatternParams params);
    internal static TransformerMatchResult CreateFakeMatchResultFrom(ITransformerMatchResult sourceMatchResult, TransformerMatchContext oldParentContext);
    internal static TransformerMatchResult CreateFrom(IStructuralMatchResult matchResult, IStructuralSearchPattern pattern, TransformerMatchContext parentContext);
    private static TransformerMatchResult CreateTransformerMatchResult(IStructuralMatchResult structuralMatchResult, IDictionary`2<string, IPlaceholder> placeholders, TransformerMatchContext context);
    public sealed virtual bool get_Matched();
    public sealed virtual ITreeNode GetMatchedElement(string placeholderName);
    public sealed virtual ITreeRange GetMatchedTreeRange(string placeholderName);
    public sealed virtual T GetMatchedElement(string placeholderName);
    public sealed virtual IEnumerable GetMatchedElementList(string placeholderName);
    public sealed virtual IType GetMatchedType(string placeholderName);
    public sealed virtual IList`1<T> GetAllMatchedElements(string placeholderName);
    public sealed virtual object GetMatch(string placeholderName);
    public sealed virtual DocumentRange GetDocumentRange();
    public sealed virtual ITreeNode get_MatchedElement();
    public sealed virtual IMatchingContext get_Context();
    public sealed virtual StructuralSearchPatternParams get_Params();
    public sealed virtual bool IsMatchedImplicitly(ITreeNode treeNode);
    [CompilerGeneratedAttribute]
public sealed virtual TransformerMatchContext get_TransformationContext();
    public sealed virtual JavaScriptServices get_JsServices();
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformerPassKind : Enum {
    public UInt32 value__;
    public static TransformerPassKind AmbientDeclarationInferring;
    public static TransformerPassKind RedundantBlock;
    public static TransformerPassKind InternalModule;
    public static TransformerPassKind AmdModule;
    public static TransformerPassKind CommonJsModule;
    public static TransformerPassKind Class;
    public static TransformerPassKind Method;
    public static TransformerPassKind SuperCall;
    public static TransformerPassKind Lambda;
    public static TransformerPassKind OverloadSignatureInferring;
    public static TransformerPassKind MethodSafeThis;
    public static TransformerPassKind Default;
    public static TransformerPassKind IntraFileTrmrs;
    public static TransformerPassKind InterFileTrmrs;
    public static TransformerPassKind AllTrmrs;
    public static TransformerPassKind TrmrsAreVisibleUser;
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformerProcessor : object {
    private Action`2<ITypeScriptTreeNode, TransformerMatchContext> myMakeTransformations;
    private JavaScriptServices myServices;
    private DocumentManager myDocumentManager;
    private PsiLanguageType myLanguage;
    public PsiLanguageType Language { get; }
    public TransformerProcessor(JavaScriptServices services, DocumentManager documentManager, Action`2<ITypeScriptTreeNode, TransformerMatchContext> makeTransformations);
    public sealed virtual PsiLanguageType get_Language();
    public sealed virtual bool ProcessProjectItem(IPsiSourceFile sourceFile, IFindResultConsumer`1<TResult> consumer);
    public sealed virtual bool ProcessElement(ITreeNode element, IFindResultConsumer`1<TResult> consumer);
    [CompilerGeneratedAttribute]
private bool <ProcessProjectItem>b__7_0(PsiLanguageType languageType);
    [CompilerGeneratedAttribute]
private bool <ProcessElement>b__8_0(PsiLanguageType languageType);
}
internal static class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformerReplacementUtil : object {
    public static ITreeNode Replace(ITransformerMatchResult match, string replacePattern, bool formatAfterReplace);
    public static TTreeNode Replace(ITransformerMatchResult match, string replacePattern, bool formatAfterReplace);
    public static void ReplacePlaceholderOccurrences(string placeholderForReplace, ITransformerMatchResult match, string replacePattern, bool formatAfterReplace);
    public static TTreeNode CreateReplacementTreeNode(ITransformerMatchResult match, string replacePattern, bool formatAfterReplace);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.AmbientDeclarationInferring.AmbientDeclarationInferringReplacement : object {
    private static string AmbientDeclarationPattern;
    public sealed virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public sealed virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    private static void ProcessElement(ITsReferenceExpression referenceExpression);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.AmbientDeclarationInferring.AmbientDeclarationInferringTransformer : LeafTransformer`1<AmbientDeclarationInferringReplacement> {
    public TransformerPassKind PassKind { get; }
    public AmbientDeclarationInferringTransformer(IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern CreatePattern();
    public virtual TransformerPassKind get_PassKind();
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
    protected virtual bool CheckPostCondition(ITransformerMatchResult matchResult);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.AmdModule.AmdModuleTransformer : CompositeTranformerBase`2<ICommonJsTransformer, IAmdModuleReplacement> {
    public TransformerPassKind PassKind { get; }
    public AmdModuleTransformer(IEnumerable`1<ICommonJsTransformer> childrenTransformers, IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern CreatePattern();
    public virtual TransformerPassKind get_PassKind();
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
    protected virtual bool CheckPostCondition(ITransformerMatchResult matchResult);
    public virtual ITreeNode TransformTree(ITransformerMatchResult matchResult, LocalTransformerDataContext parentLocalCache);
}
internal static class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.AmdModule.AmdModuleUtil : object {
    private static string EXPORTS;
    private static string REQUIRE;
    private static string MODULE;
    private static String[] ourDefaultDependencies;
    private static string HelperVariableDeclarationPattern;
    private static string AmdImportToCommonJsPattern;
    private static AmdModuleUtil();
    public static bool IsReservedDependency(string name);
    public static void ProcessArrayDependencies(ITransformerMatchResult matchResult, ITsFunctionLike functionExpressionFactory);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.AmdModule.FunctionExpressionFactoryReplacement : NotFunctionFactoryReplacement {
    private static string REPLACE_PATTERN;
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.AmdModule.FunctionExpressionFactoryWithReturnValueReplacement : FunctionExpressionFactoryReplacement {
    private static string PatternReplacement;
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.AmdModule.IAmdModuleReplacement {
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.AmdModule.IndirectFunctionFactoryReplacement : object {
    private static string PatternReplacement;
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.AmdModule.IndirectFunctionFactoryWithReturnValueReplacement : IndirectFunctionFactoryReplacement {
    private static string PatternReplacement;
    private ITsFunctionLike myCachedFunctionDefinition;
    private void Prolog(ITransformerMatchResult matchResult);
    private void Epilog();
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.AmdModule.NotFunctionFactoryReplacement : object {
    private static string PatternReplacement;
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.AnonymousInternalModuleReplacement : object {
    private static string ReplacePattern;
    private static string NameForAnonModule;
    public sealed virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public sealed virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.AnonymousInternalModuleTransformer : LeafTransformer`1<AnonymousInternalModuleReplacement> {
    public TransformerPassKind PassKind { get; }
    public AnonymousInternalModuleTransformer(IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern CreatePattern();
    public virtual TransformerPassKind get_PassKind();
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
    protected virtual bool CheckPostCondition(ITransformerMatchResult matchResult);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.CommonJsModule.AliasedExternalExportReplacement : ConflictedExternalExportReplacement {
    private static string ExportViaImportPattern;
    private static string ExportViaVarPattern;
    private string myExportName;
    private ITsVariableDeclaration myDeclaration;
    private IDeclaredElement myDeclaredElement;
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.CommonJsModule.CommonJsTransformer : AggregateTransformerBase`2<ICommonJsTransformer, INoopReplacement> {
    public TransformerPassKind PassKind { get; }
    public CommonJsTransformer(IEnumerable`1<ICommonJsTransformer> childrenTransformers, IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern CreatePattern();
    public virtual TransformerPassKind get_PassKind();
}
public static class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.CommonJsModule.CommonJsUtil : object {
    public static ITsExportAssignment TryGetExportAssignmentNode(ITsFile file);
    public static string TryGetExistedExternalImportAlias(string moduleId, ITsFile file);
    public static bool IsResolvedReference(ITsReferenceExpression referenceExpression);
    public static bool CanBeImportedAsAlias(IDeclaredElement memberElement, bool isQualified);
    public static bool IsAvailableAtTopLevel(ITsMemberElement memberElement, ITreeNode contextNode, JsInitialResolveContext context, String& qualifier, String& newName);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.CommonJsModule.ConflictedExternalExportReplacement : ExportedUpToTopLevelExternalExportReplacement {
    private string myExportName;
    private ITsReferenceExpression myReferenceExpression;
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.CommonJsModule.ExportAssignmentUsageReplacement : object {
    public sealed virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public sealed virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.CommonJsModule.ExportAssignmentUsageTransformer : LeafTransformer`1<ExportAssignmentUsageReplacement> {
    internal static TransformerDataKey`1<ITsExportAssignment> ExportAssignmentNode;
    public ExportAssignmentUsageTransformer(IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    private static ExportAssignmentUsageTransformer();
    protected virtual IStructuralSearchPattern CreatePattern();
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
    protected virtual bool CheckPostCondition(ITransformerMatchResult matchResult);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.CommonJsModule.ExportAssingmentTransformer : LeafTransformer`1<IExportAssignmentReplacement> {
    public static string ExportAssignmentPattern;
    public ExportAssingmentTransformer(IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern CreatePattern();
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
    protected virtual bool CheckPostCondition(ITransformerMatchResult matchResult);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.CommonJsModule.ExportedUpToTopLevelExportAssignmentReplacement : object {
    private static string AliasViaImportPattern;
    private static string AliasViaVarPattern;
    private string myQualifier;
    private string myNewName;
    private ITsMemberElement myMemberElement;
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.CommonJsModule.ExportedUpToTopLevelExternalExportReplacement : ExternalExportReplacement {
    private static string ExportViaImportPattern;
    private static string ExportViaVarPattern;
    private ITsMemberElement myMemberElement;
    private string myQualifier;
    private string myNewName;
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.CommonJsModule.ExternalExportReplacement : object {
    private static string ExportDeclarationPattern;
    private static string ExportDefinitionPattern;
    private static string ReplacePattern;
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    private ITreeNode DoViaDeclarationReplaceNode(ITransformerMatchResult matchResult);
    private ITreeNode DoInlineReplaceNode(ITransformerMatchResult matchResult);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.CommonJsModule.ExternalExportTransformer : LeafTransformer`1<IExternalExportReplacement> {
    public ExternalExportTransformer(IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern CreatePattern();
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
    protected virtual bool CheckPostCondition(ITransformerMatchResult matchResult);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.CommonJsModule.ExternalExportUsageReplacement : object {
    private static string ReplacePattern;
    public sealed virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public sealed virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    private static void ResolutionOnlyLocalConflicts(IList`1<IDeclaredElement> conflictedElements);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.CommonJsModule.ExternalExportUsageTransformer : LeafTransformer`1<ExternalExportUsageReplacement> {
    public ExternalExportUsageTransformer(IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern CreatePattern();
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
    protected virtual bool CheckPostCondition(ITransformerMatchResult matchResult);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.CommonJsModule.ExternalImportReplacement : object {
    private static string ExternalImportAliasNameKeyType;
    protected static string ExternalImportPattern;
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    protected static TransformerDataKey`2<string, string> CreateKeyFor(string moduleIdText);
    private static string CreateExternalImportDeclaration(ITsLiteralExpression moduleId, ITransformerMatchResult matchResult);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.CommonJsModule.ExternalImportTransformer : LeafTransformer`1<ExternalImportReplacement> {
    public ExternalImportTransformer(IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern CreatePattern();
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
    protected virtual bool CheckPostCondition(ITransformerMatchResult matchResult);
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.CommonJsModule.ICommonJsTransformer {
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.CommonJsModule.IExportAssignmentReplacement {
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.CommonJsModule.IExternalExportReplacement {
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.CommonJsModule.InlinedExternalImportReplacement : ExternalImportReplacement {
    private ITsVariableDeclaration myVariableDeclaration;
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.CommonJsModule.OthersCasesExportAssignmentReplacement : object {
    private static string ReplacePattern;
    private static string AliasVarAnyPattern;
    public sealed virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public sealed virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.InternalModule.ExportPropertyDeclarationTransformer : LeafTransformer`1<PropertyReplacement> {
    public ExportPropertyDeclarationTransformer(IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern CreatePattern();
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.InternalModule.ExportPropertyUsageTransformer : LeafTransformer`1<PropertyUsageReplacement> {
    public ExportPropertyUsageTransformer(IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern CreatePattern();
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
    protected virtual bool CheckPostCondition(ITransformerMatchResult matchResult);
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.InternalModule.IInternalModulePropertyTransformer {
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.InternalModule.InternalModuleReplacement : object {
    private static string ReplacePattern;
    private JsModifiers myModifiers;
    private JsModifiers ModuleModifiers { get; private set; }
    private JsModifiers get_ModuleModifiers();
    private void set_ModuleModifiers(JsModifiers value);
    public sealed virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    private void RemoveModuleVariableDeclaration(ITsReferenceExpression moduleVariable);
    public sealed virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.InternalModule.InternalModuleTransformer : CompositeTranformerBase`2<IInternalModulePropertyTransformer, InternalModuleReplacement> {
    public TransformerPassKind PassKind { get; }
    public InternalModuleTransformer(IEnumerable`1<IInternalModulePropertyTransformer> childrenTransformers, IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern CreatePattern();
    public virtual TransformerPassKind get_PassKind();
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
    protected virtual bool CheckPostCondition(ITransformerMatchResult matchResult);
    public virtual ITreeNode TransformTree(ITransformerMatchResult matchResult, LocalTransformerDataContext parentLocalCache);
}
internal static class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.InternalModule.InternalModuleUtil : object {
    public static string HelperGlobalsObjectPrefix;
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.InternalModule.ModuleParameterUsageReplacement : object {
    private static string ReplacePattern;
    public sealed virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public sealed virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.InternalModule.ModuleParameterUsageTransformer : LeafTransformer`1<ModuleParameterUsageReplacement> {
    public ModuleParameterUsageTransformer(IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern CreatePattern();
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
    protected virtual bool CheckPostCondition(ITransformerMatchResult matchResult);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.InternalModule.PropertyInlineReplacement : PropertyWithLocalConflictReplacement {
    private ITypeScriptModifiersOwner myDelcaration;
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.InternalModule.PropertyReplacement : object {
    private static string ExportDeclaration;
    private static string Qualifier;
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.InternalModule.PropertyUsageAliasReplacement : PropertyUsageReplacement {
    private ITsVariableDeclaration myDeclaration;
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.InternalModule.PropertyUsageReplacement : object {
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.InternalModule.PropertyWithGlobalConflictReplacement : PropertyReplacement {
    private static string InternalModuleHelperDeclarationTypeKey;
    private static string HelperDeclarationPattern;
    private static string TypeMemberPattern;
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    private static ITsVariableDeclaration CreateHelperDeclaration(ITransformerMatchResult matchResult, TsElementFactory factory);
    private static ITsVariableDeclaration GetCachedHelperDeclaration(ITransformerMatchResult matchResult, TsElementFactory factory);
    private static void AddPropertyInHelperDeclarationTypeUsage(ITsReferenceExpression rProperty, ITsVariableDeclaration helperDeclaration, ITransformerMatchResult matchResult, TsElementFactory factory);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.InternalModule.PropertyWithLocalConflictReplacement : PropertyReplacement {
    [CompilerGeneratedAttribute]
private IJavaScriptLocalElement <RDeclaredElement>k__BackingField;
    protected IJavaScriptLocalElement RDeclaredElement { get; private set; }
    [CompilerGeneratedAttribute]
protected IJavaScriptLocalElement get_RDeclaredElement();
    [CompilerGeneratedAttribute]
private void set_RDeclaredElement(IJavaScriptLocalElement value);
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.LabmdaTransformerReplacement : object {
    public sealed virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public sealed virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    private static void ProcessThisAliases(ITransformerMatchResult matchResult);
    private static ITreeNode DoReplaceNode(ITransformerMatchResult matchResult);
    private static bool IsSingleParameter(IList`1<ITsParameterDeclaration> parameters, ITsTypeAnnotation typeAnnotation, ITsTypeParameters typeParameters);
    private static DecorationKind ShouldDecorate(ITsBlock block, IList`1<ITsReturnStatement> returnStmts);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.LambdaTransformer : LeafTransformer`1<LabmdaTransformerReplacement> {
    public TransformerPassKind PassKind { get; }
    public LambdaTransformer(IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern CreatePattern();
    public virtual TransformerPassKind get_PassKind();
    private static bool HasArgumentsUsage(ITsFunctionExpression expression);
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
    protected virtual bool CheckPostCondition(ITransformerMatchResult matchResult);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.ClassDeclarationBuilder : object {
    [CompilerGeneratedAttribute]
private JsResolveContext <GeneralContext>k__BackingField;
    private TsElementFactory myFactory;
    private TypeScriptLanguageService myTsLanguageService;
    private ICollection`1<IDeclaredElementPointer`1<IDeclaredElement>> myParentElementPtrs;
    private OneToListMap`2<string, ITsClassMemberDeclaration> myInstancePropertyNamesToDeclarations;
    private OneToListMap`2<string, ITsClassMemberDeclaration> myStaticPropertyNamesToDeclarations;
    private ICollection`1<string> myInstanceDeclaredNames;
    private ICollection`1<string> myStaticDeclaredNames;
    private ICollection`1<string> myInstanceImplicitPublicPropertyNames;
    private ICollection`1<string> myStaticImplicitPublicPropertyNames;
    private IDictionary`2<ITsAssignmentExpression, ICollection`1<IReferenceExpressionReference>> myInstanceMethodToOuterRefs;
    private IDictionary`2<ITsAssignmentExpression, ICollection`1<IReferenceExpressionReference>> myStaticMethodToOuterRefs;
    private FrugalLocalList`1<IDeclaredElementPointer`1<IJavaScriptLocalElement>> myCandidatePrivateProperties;
    private IDictionary`2<ITreeNode, ITreeNode> myNodeForRemovingToReplacements;
    private IDictionary`2<ITsClassMemberDeclaration, ITreeNode> myDelcarationToRedundantNodes;
    private OneToListMap`2<ITreeNode, ITsClassMemberDeclaration> myRedundantNodeToDeclarations;
    private ITsConstructorDeclaration myConstructorDeclaration;
    private IDeclaredElementPointer`1<IDeclaredElement> myCtorDeclaredElementPtr;
    private string myClassName;
    private ITreeNode myContextNode;
    private bool myHasClosure;
    private JsModifiers myModifiers;
    private ITsClassDeclaration myClassDeclaration;
    public JsResolveContext GeneralContext { get; }
    public ClassDeclarationBuilder(IJavaScriptScope ctorOwnerScope, JavaScriptServices jsServices);
    [CompilerGeneratedAttribute]
public JsResolveContext get_GeneralContext();
    public void AddParentClassFor(IJavaScriptTypeOwner ctorElement);
    public void AddCandidateParentClass(IJavaScriptTypeOwner parent);
    private void InferAllPossibleParents(IJavaScriptTypeOwner ctorDeclaredElement);
    public void AddCandidateClassMember(ITsClassMemberDeclaration classMember, ITreeNode redundantNode, ITreeNode replaceNode);
    public void AddCandidateClassMember(string name, bool isStatic);
    public void AddCandidateClassMember(ITsClassMemberDeclaration classMember);
    public void AddCandidateClassMembersFrom(ITsObjectLiteral objectLiteral, ITreeNode redundantNode, ITreeNode replaceNode, bool isStatic);
    private IList`1<ITsClassMemberDeclaration> GetPreparedClassMemberFrom(ITsObjectLiteral objectLiteral, bool isStatic);
    public void AddCandidateClassMembersFrom(IJsResolvedType compositeType, bool isStatic, bool isImplicit);
    public void AddImplicitPropertiesFromMethod(IJavaScriptLiteralNode method, bool isStatic);
    public void AddImplicitPropertiesFromMethodExpr(IJavaScriptTypedExpression method, bool isStatic);
    private void AddImplicitProperty(string name, bool isStatic);
    private void AddPropertiesFromMethodImpl(IJsUnresolvedType methodType, bool isStatic, bool isImplicit);
    public void AddCandidateMethod(string name, ITsFunctionExpression method, IDeclaredElement ctorDeclaredElement, IJavaScriptScope ctorOwnerScope, bool isStatic);
    private void CollectOuterRefsForMethod(ITsFunctionExpression method, IDeclaredElement ctorDeclaredElement, IJavaScriptScope ctorOwnerScope, bool isStatic);
    private void FindCandidatePrivatePropertiesFrom(ITsFunctionLike function, IJavaScriptScope rootScope, IDeclaredElement ctorDeclaredElement);
    public void AddRedundantNode(ITreeNode redundantNode, ITreeNode replaceNode);
    public void AddCtorInfo(ITsConstructorDeclaration constructor, IDeclaredElement ctorDeclaredElement, string closureCtorName, ITsFunctionLike ctorValue, JsModifiers modifiers);
    public ITsClassDeclaration BuildClassDeclaration();
    private ITsClassDeclaration BuildClassDeclarationImpl();
    private IEnumerable`1<ITsClassMemberDeclaration> ResolveMembersNameConflicts();
    private void DoResolvePublicMembersNameConflicts(OneToListMap`2<string, ITsClassMemberDeclaration> propertyNamesToDeclarations, IList`1<ITsClassMemberDeclaration> result, bool isStatic);
    private void CancelRemove(ITsClassMemberDeclaration member, ICollection`1<ITsClassMemberDeclaration> canceledFieldDefinition);
    private void BuildExtendsClause();
    private void BuildImplicitProperties();
    private void DoBuildImplicitProperties(IEnumerable`1<string> candidateImplicitProperties, OneToListMap`2<string, ITsClassMemberDeclaration> results, bool isStatic);
    private void BuildMethods();
    private void DoBuildMethods(IDictionary`2<ITsAssignmentExpression, ICollection`1<IReferenceExpressionReference>> methodToOuterRefs, bool isStatic);
    private void BuildAndRemovePrivateProperties();
    private bool IsPrivatePropertyCandidate(LocalList`1& methodCandidateReferences, JsModifiers& modifier);
    private string SuggestNameForPrivateProperty(string conflictedName, bool isStatic);
    private void RemoveRedundantNodes();
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.ConstantInstancePropertiesReplacement : InstancePropertiesReplacement {
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.ConstantPropertiesViaAnnotationReplacement : PropertiesViaAnnotationReplacement {
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.ConstantPropertyReplacement : PropertyReplacement {
    private static string MEMBER_PATTERN;
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
internal enum JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.ContextVisit : Enum {
    public byte value__;
    public static ContextVisit In;
    public static ContextVisit Out;
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.ElementsInConditionalBranchCollector : TsTreeNodeVisitor`1<ContextVisit> {
    private int myBranchingCounter;
    public ICollection`1<ITreeNode> Result;
    private bool ElementInConditionalBranch { get; }
    public bool ProcessingIsFinished { get; }
    private bool get_ElementInConditionalBranch();
    private void PushBranching();
    private void PopBranching();
    private void ProcessBranchingPoint(ContextVisit context);
    public static ICollection`1<ITreeNode> Build(IJavaScriptScope node);
    public sealed virtual bool InteriorShouldBeProcessed(ITreeNode element);
    public sealed virtual bool get_ProcessingIsFinished();
    public sealed virtual void ProcessBeforeInterior(ITreeNode element);
    public sealed virtual void ProcessAfterInterior(ITreeNode element);
    public virtual void VisitTsStatement(ITsStatement tsStatementParam, ContextVisit context);
    public virtual void VisitTsExpression(ITsExpression tsExpressionParam, ContextVisit context);
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.IMethodTransformer {
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.INativeClassPropertyTransformer {
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.INativeClassReplacement {
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.IndirectMethodReplacement : ConstantPropertyReplacement {
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.InstancePropertiesProducer : LeafProducer`1<InstancePropertiesReplacement> {
    public InstancePropertiesProducer(IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern CreatePattern();
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.InstancePropertiesReplacement : object {
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.Method.IMethodReplacement {
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.Method.MemberFunctionReplacement : object {
    private static string MEMBER_PATTERN;
    public sealed virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public sealed virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    private static void FixRecursiveCall(ITsFunctionExpression functionExpression, ITsMemberVariableDeclaration memberVariable);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.Method.MethodSafeForThisUsageTransformer : MethodTransformerBase {
    public TransformerPassKind PassKind { get; }
    public MethodSafeForThisUsageTransformer(IEnumerable`1<SuperCallTransformer> childrenTransformers, IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    public virtual TransformerPassKind get_PassKind();
    protected virtual bool CheckPostCondition(ITransformerMatchResult matchResult);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.Method.MethodTransformer : MethodTransformerBase {
    public TransformerPassKind PassKind { get; }
    public MethodTransformer(IEnumerable`1<SuperCallTransformer> childrenTransformers, IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    public virtual TransformerPassKind get_PassKind();
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.Method.MethodTransformerBase : CompositeTranformerBase`2<SuperCallTransformer, IMethodReplacement> {
    public TransformerPassKind PassKind { get; }
    protected MethodTransformerBase(IEnumerable`1<SuperCallTransformer> childrenTransformers, IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern CreatePattern();
    public abstract virtual TransformerPassKind get_PassKind();
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
    public virtual ITreeNode TransformTree(ITransformerMatchResult matchResult, LocalTransformerDataContext parentLocalCache);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.Method.PropertyFunctionReplacement : object {
    private static string PROPERTY_PATTERN;
    public sealed virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public sealed virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    private static void FixRecursiveCall(ITsFunctionExpression functionExpression, string propertyName);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.Method.SupeCtorCallReplacement : object {
    private static string REPLACE_PATTERN;
    public sealed virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public sealed virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.Method.SupeCtorCallTransformer : LeafTransformer`1<SupeCtorCallReplacement> {
    public TransformerPassKind PassKind { get; }
    public SupeCtorCallTransformer(IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern CreatePattern();
    public virtual TransformerPassKind get_PassKind();
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
    protected virtual bool CheckPostCondition(ITransformerMatchResult matchResult);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.Method.SuperCallReplacement : object {
    private static string REPLACE_PATTERN;
    public sealed virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public sealed virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.Method.SuperCallStandaloneTransformer : SuperCallTransformerBase {
    public TransformerPassKind PassKind { get; }
    public SuperCallStandaloneTransformer(IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    public virtual TransformerPassKind get_PassKind();
    protected virtual bool CheckScope(IJavaScriptScope scope);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.Method.SuperCallTransformer : SuperCallTransformerBase {
    public SuperCallTransformer(IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual bool CheckScope(IJavaScriptScope scope);
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.Method.SuperCallTransformerBase : LeafTransformer`1<SuperCallReplacement> {
    protected SuperCallTransformerBase(IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern CreatePattern();
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
    protected abstract virtual bool CheckScope(IJavaScriptScope scope);
    protected virtual bool CheckPostCondition(ITransformerMatchResult matchResult);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.MethodReplacement : IndirectMethodReplacement {
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.NativeClassInitializerReplacement : object {
    private static string MEMBER_PATTERN;
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    protected void AddCtorInfo(ITransformerMatchResult matchResult, ClassDeclarationBuilder builder);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.NativeClassInitializerWithClosureReplacement : NativeClassInitializerReplacement {
    private static string STATIC_CTOR_PATTERN;
    private static string STATIC_CTOR_CALL_PATTERN;
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    private static void AddStaticCtorMember(ITransformerMatchResult matchResult, ITsClassDeclaration classDeclaration, String& staticCtorName);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.NativeClassTransformer : CompositeDecoratorTransformerBase`2<NativeClassTransformerImpl, IMethodTransformer> {
    public TransformerPassKind PassKind { get; }
    public NativeClassTransformer(IEnumerable`1<IMethodTransformer> childrenTransformers, NativeClassTransformerImpl decoratedTransformer, IShellLocks shellLocks);
    public virtual TransformerPassKind get_PassKind();
    public virtual ITreeNode TransformTree(ITransformerMatchResult matchResult, LocalTransformerDataContext parentLocalCache);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.NativeClassTransformerImpl : CompositeTranformerBase`2<INativeClassPropertyTransformer, INativeClassReplacement> {
    internal static TransformerDataKey`1<ICollection`1<ITreeNode>> ElementsInConditionalBranch;
    internal static TransformerDataKey`1<ClassDeclarationBuilder> ClassBuilder;
    internal static TransformerDataKey`1<JetHashSet`1<ITreeNode>> ClassUsages;
    private static InterruptibleLazy`1<IJavaScriptStructuralMatcher> ourInstantiationWithoutNewPatternMatcher;
    private static InterruptibleLazy`1<IJavaScriptStructuralMatcher> ourJQueryCtorPatternMatcher;
    public NativeClassTransformerImpl(IEnumerable`1<INativeClassPropertyTransformer> childrenTransformers, IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    private static NativeClassTransformerImpl();
    protected virtual IStructuralSearchPattern CreatePattern();
    private static bool IsPatternInstantiationWithoutNew(IJavaScriptExpression it, ITransformerMatchResult matchResult);
    private static bool IsJqPatternInstantiationWithoutNew(IJavaScriptExpression it, ITransformerMatchResult matchResult);
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
    protected virtual bool CheckPostCondition(ITransformerMatchResult matchResult);
    public virtual ITreeNode TransformTree(ITransformerMatchResult matchResult, LocalTransformerDataContext parentLocalCache);
}
internal static class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.NativeClassUtil : object {
    public static string PROTOTYPE_PROPERTY_NAME_JQUERY;
    public static string JS_DEFINE_PROP;
    public static string JS_DEFINE_PROPS;
    public static bool IsDefineProperty(IReferenceExpression expression);
    public static bool IsPrototypeProperty(string name);
    public static bool InConditionalBranchOrInFunction(ITreeNode node, IJavaScriptScope scope, TransformerDataContext localCache);
    public static bool CanBeMoved(ITsExpressionOrSpread expression, IJavaScriptScope scopeForMoving, JsResolveContext context);
    public static ITsType GetTsTypeForParent(ITsClassDeclaration classDeclaration, JsResolveContext context);
    public static ITsType GetTsTypeForExpression(ITsExpression parent, JsResolveContext context);
    public static ICollection`1<Pair`2<IReferenceExpressionReference, IDeclaredElement>> FindNonMovingRefsIn(ITreeNode expression, IJavaScriptScope scopeForMoving, JsResolveContext context);
    public static bool IsUserClassInstanceOrStaticType(IJsResolvedType type, IJavaScriptTypeCache typeCache, bool isStatic, IJavaScriptTypeOwner& parent);
    private static bool IsUserClassInstanceType(IJsResolvedType type, IJavaScriptTypeCache typeCache, IJavaScriptTypeOwner& parent);
    private static bool IsUserClassStaticType(IJsResolvedType type, IJavaScriptTypeOwner& parent);
    public static bool CheckThisUsagesFor(ITsFunctionLike functionLike);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.PropertiesViaAnnotationProducer : LeafProducer`1<PropertiesViaAnnotationReplacement> {
    internal static TransformerDataKey`1<AnnotationRuleInfo[]> AssocAnnotationes;
    internal static TransformerDataKey`1<AnnotationRuleInfo[]> PropAnnotationes;
    public PropertiesViaAnnotationProducer(IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    private static PropertiesViaAnnotationProducer();
    protected virtual IStructuralSearchPattern CreatePattern();
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
    protected virtual bool CheckPostCondition(ITransformerMatchResult matchResult);
    private static bool TryCacheRules(ITransformerDataKey`1<AnnotationRuleInfo[]> key, LocalList`1<AnnotationRuleInfo> rules, TransformerDataContext globalCache);
    private static IJsUnresolvedType GetCtorPrimitive(IJsUnresolvedType jsUnresolvedType, bool isStaticClassType);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.PropertiesViaAnnotationReplacement : object {
    protected bool IsStaticClassType;
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    protected void Init(ITransformerMatchResult matchResult);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    private void ProcessPropRules(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    private void ProcessAssocRules(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.PropertyProducer : LeafProducer`1<PropertyReplacement> {
    public PropertyProducer(IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern CreatePattern();
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
    protected virtual bool CheckPostCondition(ITransformerMatchResult matchResult);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.NativeImplClass.PropertyReplacement : object {
    private static string MEMBER_PATTERN;
    protected bool IsStaticClassType;
    protected bool IsExplicitPublic;
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    protected void Init(ITransformerMatchResult matchResult);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.OverloadSignaturesInferring.Inspector.ComplexityOverflowException : Exception {
}
internal static class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.OverloadSignaturesInferring.Inspector.ConverterSignatureTypeUtil : object {
    private static string DEFAULT_NAME;
    public static JsParameterInfo[] CreateParameterInfos(ISignatureType signature, Dictionary`2<int, string> indexToName, IJsResolveContext resolveContext);
    private static string FindDefaultName(Int32& currIdx, ICollection`1<string> names);
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.OverloadSignaturesInferring.Inspector.IOverloadInferringResults {
    public int MinimumCountRequiredParams { get; }
    public IList`1<IJsFunctionSignature> OverloadFunctionSignatures { get; }
    public abstract virtual int get_MinimumCountRequiredParams();
    public abstract virtual IList`1<IJsFunctionSignature> get_OverloadFunctionSignatures();
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.OverloadSignaturesInferring.Inspector.ISignatureType {
    public bool IsLastParamShifted { get; public set; }
    public abstract virtual bool get_IsLastParamShifted();
    public abstract virtual void set_IsLastParamShifted(bool value);
    public abstract virtual ISignatureType Clone();
    public abstract virtual void ClearState(bool resetOverwriteFlags);
    public abstract virtual bool GetOverwrittenFlagAt(int index);
    public abstract virtual void SetOverwrittenFlagAt(int index, bool value);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.OverloadSignaturesInferring.Inspector.OverloadAnalyzer : TreeNodeVisitor {
    private static InterruptibleLazy`1<IStructuralMatcher> ourTypeofConstraintMatcher;
    private static InterruptibleLazy`1<IStructuralMatcher> ourEqualityConstraintMatcher;
    private static InterruptibleLazy`1<IStructuralMatcher> ourParameterCountConstraintMatcher;
    private static InterruptibleLazy`1<IStructuralMatcher> ourNotZeroConstraintMatcher;
    private static InterruptibleLazy`1<IStructuralMatcher> ourOptinalConstraintMatcher;
    private static InterruptibleLazy`1<IStructuralMatcher> ourShiftParamsMatcher;
    private OverloadInferringContextFactory myContextFactory;
    private JsResolveContext myResolveContext;
    private OverloadInferringContext myTrueContext;
    private OverloadInferringContext myFalseContext;
    private ISignatureType TrueState { get; }
    private ISignatureType FalseState { get; }
    internal OverloadAnalyzer(OverloadInferringContextFactory contextFactory, JsResolveContext resolveContext);
    private static OverloadAnalyzer();
    private ISignatureType get_TrueState();
    private ISignatureType get_FalseState();
    public void AnalyzeAndUpdateStates(IJavaScriptTreeNode node, OverloadInferringContext trueContext, OverloadInferringContext falseContext);
    private bool TryProcessParameter(IJavaScriptExpression expression, Int32& parameterIndex);
    private bool TryProcessTypeofConstraint(IBinaryExpression binaryExpression);
    private bool TryProcessEqualityConstraint(IBinaryExpression binaryExpression);
    private bool TryProcessCountConstraint(IBinaryExpression binaryExpression);
    private bool TryProcessNotZeroConstraint(IReferenceExpression referenceExpression);
    private bool TryProcessLogicAndOrLogicOr(IBinaryExpression binaryExpression);
    private bool TryShiftParams(IBinaryExpression binaryExpression);
    private bool IsForked();
    private bool TryProcessOptinalConstraint(IBinaryExpression binaryExpression);
    private bool TryProcessOverwriteParam(IAssignmentExpression assignmentExpression);
    public virtual void VisitBinaryExpression(IBinaryExpression binaryExpressionParam);
    public virtual void VisitAssignmentExpression(IAssignmentExpression assignmentExpressionParam);
    public virtual void VisitReferenceExpression(IReferenceExpression referenceExpressionParam);
    public virtual void VisitPrefixExpression(IPrefixExpression prefixExpressionParam);
    private static bool IsInIfCondition(IJavaScriptExpression expression);
    private static bool IsLastIfCondition(IJavaScriptExpression expression);
    private void UpdateSignatures();
    private static void IncreaseState(ISignatureType state, int newCount, WideParameterType value);
    private static void DecreaseStat(ISignatureType state, int startIndex, WideParameterType value);
    private static void SetParamIn(ISignatureType state, int parameterIndex, WideParameterType newState);
    private static void SetParamFlagIn(ISignatureType state, int parameterIndex, bool value);
    [CompilerGeneratedAttribute]
private void <UpdateSignatures>b__32_0(ISignatureType sig);
    [CompilerGeneratedAttribute]
private void <UpdateSignatures>b__32_1(ISignatureType sig);
    [CompilerGeneratedAttribute]
private void <UpdateSignatures>b__32_2(ISignatureType sig);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.OverloadSignaturesInferring.Inspector.OverloadInferringContext : object {
    [CompilerGeneratedAttribute]
private ISignatureType <CurrentSignatureType>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ISignatureType> <SignatureVariants>k__BackingField;
    public ISignatureType CurrentSignatureType { get; }
    public List`1<ISignatureType> SignatureVariants { get; private set; }
    public OverloadInferringContext(int parameterCount);
    private OverloadInferringContext(List`1<ISignatureType> signatureVariants, ISignatureType currentSignatureType);
    [CompilerGeneratedAttribute]
public ISignatureType get_CurrentSignatureType();
    [CompilerGeneratedAttribute]
public List`1<ISignatureType> get_SignatureVariants();
    [CompilerGeneratedAttribute]
private void set_SignatureVariants(List`1<ISignatureType> value);
    public OverloadInferringContext Clone();
    public static OverloadInferringContext Merge(IList`1<OverloadInferringContext> others);
    protected bool Equals(OverloadInferringContext other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void Distinct();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.OverloadSignaturesInferring.Inspector.OverloadInferringContextFactory : object {
    private OverloadInferringContext myInitialContext;
    [CompilerGeneratedAttribute]
private int <ParameterCount>k__BackingField;
    public int ParameterCount { get; public set; }
    public OverloadInferringContext InitialContext { get; }
    [CompilerGeneratedAttribute]
public int get_ParameterCount();
    [CompilerGeneratedAttribute]
public void set_ParameterCount(int value);
    public sealed virtual OverloadInferringContext get_InitialContext();
    private OverloadInferringContext BuildInitialContext();
    public sealed virtual OverloadInferringContext CloneContext(OverloadInferringContext context);
    public sealed virtual OverloadInferringContext Merge(IList`1<OverloadInferringContext> contexts);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.OverloadSignaturesInferring.Inspector.OverloadInferringInspector : ControlFlowGraphInspector`1<OverloadInferringContext> {
    private static int CONTROL_FLOW_ELEMENTS_THRESHOLD;
    private static int PARAMETERS_THRESHOLD;
    private static int SIGNATURE_VARIANTS_THRESHOLD;
    private OverloadAnalyzer myAnalyzer;
    private JsResolveContext myResolveContext;
    private IJsFunctionLike myFunctionLike;
    [CompilerGeneratedAttribute]
private bool <IsFinished>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinimumCountRequiredParams>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IJsFunctionSignature> <OverloadFunctionSignatures>k__BackingField;
    public bool IsFinished { get; private set; }
    public int MinimumCountRequiredParams { get; private set; }
    public IList`1<IJsFunctionSignature> OverloadFunctionSignatures { get; private set; }
    public OverloadInferringInspector(ControlFlowGraph controlFlowGraph, JsResolveContext resolveContext);
    [CompilerGeneratedAttribute]
public bool get_IsFinished();
    [CompilerGeneratedAttribute]
private void set_IsFinished(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MinimumCountRequiredParams();
    [CompilerGeneratedAttribute]
private void set_MinimumCountRequiredParams(int value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IJsFunctionSignature> get_OverloadFunctionSignatures();
    [CompilerGeneratedAttribute]
private void set_OverloadFunctionSignatures(IList`1<IJsFunctionSignature> value);
    public virtual void Inspect();
    private void PostProcess();
    private void PostProcessSignature(ISignatureType signature, List`1<ISignatureType> result, int paramCount);
    protected virtual void InspectLeafElementAndSetContextToExits(IControlFlowElement element, OverloadInferringContext context);
    private void SetContextForAllExits(IControlFlowElement element, OverloadInferringContext context);
    private void SetContextForAllExitsForked(IControlFlowElement element, OverloadInferringContext trueContext, OverloadInferringContext falseContext);
    [CompilerGeneratedAttribute]
private IJsFunctionSignature <PostProcess>b__20_0(ISignatureType it);
}
public static class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.OverloadSignaturesInferring.Inspector.OverloadInferringUtil : object {
    public static string DumpSignaturesAsOverloads(ITsFunctionStatement function, IJsFunctionSignature signature, JsResolveContext ctx, bool returnTypeErasure);
}
[FlagsAttribute]
internal enum JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.OverloadSignaturesInferring.Inspector.ParameterType : Enum {
    public byte value__;
    public static ParameterType WrongType;
    public static ParameterType AnyType;
    public static ParameterType BoolType;
    public static ParameterType NumberType;
    public static ParameterType StringType;
    public static ParameterType ObjectType;
    public static ParameterType FunctionType;
    public static ParameterType UndefinedType;
    public static ParameterType OptionalType;
    public static ParameterType AnyOptType;
    public static ParameterType BoolOptType;
    public static ParameterType NumberOptType;
    public static ParameterType StringOptType;
    public static ParameterType ObjectOptType;
    public static ParameterType FunctionOptType;
    public static ParameterType IsNonOptType;
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.OverloadSignaturesInferring.Inspector.ParameterTypeEx : object {
    public static ParameterType Merge(ParameterType p1, ParameterType p2);
    [ExtensionAttribute]
public static string ToFriendlyString(ParameterType parameterType);
}
[DebuggerDisplayAttribute("{ToString()}")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.OverloadSignaturesInferring.Inspector.ProxyJsFunctionSignature : JsFunctionSignatureBase {
    private ISignatureType mySignatureType;
    private Dictionary`2<int, string> myIndexToNameInImplFunc;
    private JsResolveContext myResolveContext;
    [CompilerGeneratedAttribute]
private JsSignatureKind <Kind>k__BackingField;
    public IBasicDocSignature DocSignature { get; }
    public JsSignatureKind Kind { get; }
    public ITsSubstitution Substitution { get; }
    public bool ThisParameterOwner { get; }
    public bool HasTypeParams { get; }
    public IJsResolvedType ThisType { get; }
    public IPsiSourceFile SourceFile { get; }
    private ProxyJsFunctionSignature(JsSignatureKind kind, ISignatureType signatureType, Dictionary`2<int, string> indexToNameInImplFunc, JsResolveContext resolveContext);
    public static IJsFunctionSignature BuildFrom(ISignatureType signatureType, IJsSignatureNode signatureNode, JsResolveContext resolveContext);
    public sealed virtual JsPrimitive GetJsPrimitive();
    public sealed virtual IPsiServices GetPsiServices();
    public sealed virtual JsParameterInfo[] GetPositionalParameterInfos(JsResolveContext context);
    public sealed virtual int GetParameterCount();
    public sealed virtual IBasicDocSignature get_DocSignature();
    [CompilerGeneratedAttribute]
public sealed virtual JsSignatureKind get_Kind();
    public sealed virtual ITsSubstitution get_Substitution();
    public sealed virtual bool get_ThisParameterOwner();
    public sealed virtual JsTypeResolveResult GetResultType(JsResolveContext context, bool onlyExplicit, StrongTypeMode strongTypeMode);
    public sealed virtual JsTypeResolveResult GetTypePredicate(JsResolveContext context, int paramNumber, StrongTypeMode strongTyped);
    public sealed virtual bool get_HasTypeParams();
    public sealed virtual TsTypeParameterInfoEx[] GetTypeParameterInfos();
    public sealed virtual TsTypeParametersDomain GetTypeParametersDomain(JsResolveContext context);
    public sealed virtual IJsResolvedType get_ThisType();
    private bool EqualsImpl(ProxyJsFunctionSignature other);
    public sealed virtual bool EqualsWithComparer(IComparableWithTypeComparer obj, IJsTypeComparer`1<IJsType> comparer);
    public sealed virtual bool Equals(IJsFunctionSignature obj, IJsTypeComparer`1<IJsType> comparer);
    public sealed virtual int GetHashCodeWithComparer(IJsTypeComparer`1<IJsType> comparer);
    public virtual string ToString();
    public sealed virtual IPsiSourceFile get_SourceFile();
    public sealed virtual IList`1<ITsTypeParameter> GetTypeParameters(JavaScriptServices services);
    public sealed virtual IJsFunctionSignature SubstituteThisType(JsResolveContext context, IJsResolvedType thisType);
    public sealed virtual IJsFunctionSignature SubstituteTypeParams(JsResolveContext context, ITsSubstitution substitution, IJsTypeResolveInfoMerger merger);
    public sealed virtual string GetResultTypeDescriptionQuick();
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("{ToString()}")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.OverloadSignaturesInferring.Inspector.SignatureType : object {
    [NotNullAttribute]
private IList`1<WideParameterType> myStorage;
    private IList`1<bool> myOverwriteFlags;
    [CompilerGeneratedAttribute]
private bool <IsLastParamShifted>k__BackingField;
    public bool IsLastParamShifted { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public WideParameterType Item { get; public set; }
    private SignatureType(IList`1<WideParameterType> storage, IList`1<bool> overwriteFlags);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsLastParamShifted();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsLastParamShifted(bool value);
    public static SignatureType BuildInitialTuple(int countParams);
    public sealed virtual ISignatureType Clone();
    private sealed virtual override IEnumerator`1<WideParameterType> System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.OverloadSignaturesInferring.Inspector.WideParameterType>.GetEnumerator();
    public sealed virtual void Add(WideParameterType item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(WideParameterType item);
    public sealed virtual void CopyTo(WideParameterType[] array, int arrayIndex);
    public sealed virtual bool Remove(WideParameterType item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int IndexOf(WideParameterType item);
    public sealed virtual void Insert(int index, WideParameterType item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual WideParameterType get_Item(int index);
    public sealed virtual void set_Item(int index, WideParameterType value);
    public sealed virtual bool GetOverwrittenFlagAt(int index);
    public sealed virtual void SetOverwrittenFlagAt(int index, bool value);
    public sealed virtual void ClearState(bool resetOverwriteFlags);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(SignatureType other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(SignatureType left, SignatureType right);
    public static bool op_Inequality(SignatureType left, SignatureType right);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.OverloadSignaturesInferring.Inspector.SignatureTypeEx : object {
    [ExtensionAttribute]
public static void Merge(ISignatureType this, ISignatureType other);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.OverloadSignaturesInferring.Inspector.WideParameterType : object {
    private ParameterType myParameterType;
    [CanBeNullAttribute]
private string myValueAnnot;
    public static WideParameterType WrongType;
    public static WideParameterType AnyType;
    public static WideParameterType BoolType;
    public static WideParameterType NumberType;
    public static WideParameterType StringType;
    public static WideParameterType ObjectType;
    public static WideParameterType FunctionType;
    public static WideParameterType UndefinedType;
    public static WideParameterType AnyOptType;
    public static WideParameterType BoolOptType;
    public static WideParameterType NumberOptType;
    public static WideParameterType StringOptType;
    public static WideParameterType ObjectOptType;
    public static WideParameterType FunctionOptType;
    public bool IsOptional { get; }
    private WideParameterType(ParameterType parameterType);
    internal WideParameterType(ParameterType parameterType, string valueAnnot);
    private static WideParameterType();
    public bool get_IsOptional();
    public WideParameterType Merge(WideParameterType other);
    private bool Equals(WideParameterType other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(WideParameterType left, WideParameterType right);
    public static bool op_Inequality(WideParameterType left, WideParameterType right);
    public virtual int GetHashCode();
    [CanBeNullAttribute]
public string GetValueAnnotationInTsSyntax();
    [CanBeNullAttribute]
public string GetTypeUsageInTsSyntax();
    private WideParameterType ToWideParameterType(ParameterType parameterType);
    public IJsResolvedType ResolvedTypeBy(IJsResolveContext resolveContext);
}
public static class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.OverloadSignaturesInferring.Inspector.WideParameterTypeEx : object {
    public static WideParameterType GetParameterTypeByStringValue(string value);
    public static WideParameterType ParameterTypeFromLiteralExpression(IJavaScriptLiteralExpression literal);
    public static WideParameterType OptinalParameterTypeFromStrongTsType(JsResolveContext resolveContext, ITsType resolvedType);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.OverloadSignaturesInferring.OverloadInferringPass : LeafTransformer`1<OverloadInferringViaBodyReplacement> {
    public TransformerPassKind PassKind { get; }
    public OverloadInferringPass(IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern CreatePattern();
    public virtual TransformerPassKind get_PassKind();
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
    protected virtual bool CheckPostCondition(ITransformerMatchResult matchResult);
    private static bool IsJsStyleFunctionStatement(ITsFunctionStatement function);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.OverloadSignaturesInferring.OverloadInferringViaBodyReplacement : object {
    protected ITsFunctionStatement FunctionStmt;
    protected JsResolveContext ResolveContext;
    private void Init(ITransformerMatchResult matchResult);
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public sealed virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    protected virtual IList`1<IJsFunctionSignature> InferrOverloads();
    private static IList`1<IJsFunctionSignature> InferOverloadsFromBody(ITsFunctionStatement function, JsResolveContext context);
    private bool IsNotMeaningfulSignature(IList`1<ITsFunctionStatementSignature> overloadNodes, IList`1<IJsFunctionSignature> overloads);
    private static IList`1<ITsFunctionStatementSignature> GenerateOverloads(IList`1<IJsFunctionSignature> jsSignatures, ITsFunctionStatement functionStmt, JsResolveContext resolveContext, TsElementFactory factory);
    private static IEnumerable`1<IJsFunctionSignature> FilterOrMergeDuplicateSignatures(IEnumerable`1<IJsFunctionSignature> signatures, HashSet`1<IJsFunctionSignature> mergeOverloadsWithAnyReturnType, JsResolveContext context);
    [CompilerGeneratedAttribute]
private bool <IsNotMeaningfulSignature>b__7_0(JsParameterInfo it);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.OverloadSignaturesInferring.OverloadInferringViaDocCommentsReplacement : OverloadInferringViaBodyReplacement {
    private IJsResolvedType myResolvedType;
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    protected virtual IList`1<IJsFunctionSignature> InferrOverloads();
    private static IList`1<IJsFunctionSignature> GenerateOverloadsFromVsDoc(IJsResolvedType jsResolvedType, ITsFunctionStatement function, JsResolveContext resolveContext);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.PrototypeClass.BaseMethodInvocationReplacement : object {
    private static string ReplacePattern;
    public sealed virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public sealed virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.PrototypeClass.BaseMethodInvocationTransformer : LeafTransformer`1<BaseMethodInvocationReplacement> {
    public BaseMethodInvocationTransformer(IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern CreatePattern();
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.PrototypeClass.IPrototypeClassTransformer {
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.PrototypeClass.ISubClassChildTransformer {
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.PrototypeClass.ISubClassReplacement {
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.PrototypeClass.ISuperClassReplacement {
}
internal static class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.PrototypeClass.PrototypeClassUtil : object {
    public static TransformerDataKey`1<IList`1<ITsClassMemberDeclaration>> PrototypeClassMembers;
    public static string SuperKeyword;
    public static string ConstructorKeyword;
    private static PrototypeClassUtil();
    public static bool IsInternalProperty(ITsReferenceExpression property);
    public static bool IsSuperkeyword(string name);
    public static bool IsConstructorProperty(string name);
    public static IEnumerable`1<ITsObjectPropertyDeclaration> ProcessMethodNameOverlap(IEnumerable`1<ITsObjectPropertyDeclaration> allProperties);
    public static IList`1<ITsObjectLiteral> ProcessMethodsObjectLiterals(IEnumerable`1<object> args, TransformerDataContext cache);
    public static IEnumerable`1<ITsClassMemberDeclaration> GenerateMemberVariableDeclarationsFrom(IList`1<ITsObjectLiteral> objectLiterals, TsElementFactory factory, JavaScriptServices jsServices);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.PrototypeClass.SubClassConstructorPropertyReplacement : object {
    private static string ReplacePattern;
    public sealed virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public sealed virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.PrototypeClass.SubClassConstructorPropertyTransformer : LeafProducer`1<SubClassConstructorPropertyReplacement> {
    public SubClassConstructorPropertyTransformer(IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern CreatePattern();
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.PrototypeClass.SubClassFunctionPropertyReplacement : object {
    private static string ReplacePattern;
    public sealed virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public sealed virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.PrototypeClass.SubClassFunctionPropertyTransformer : CompositeProducerBase`2<BaseMethodInvocationTransformer, SubClassFunctionPropertyReplacement> {
    public SubClassFunctionPropertyTransformer(IEnumerable`1<BaseMethodInvocationTransformer> childrenTransformers, IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern CreatePattern();
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
    protected virtual bool CheckPostCondition(ITransformerMatchResult matchResult);
    public virtual ITreeNode TransformTree(ITransformerMatchResult matchResult, LocalTransformerDataContext parentLocalCache);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.PrototypeClass.SubClassInInitializerReplacement : object {
    private ITsVariableDeclaration myVariableDeclaration;
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    protected static ITsClassDeclaration CreateClassDeclaration(IList`1<ITsClassMemberDeclaration> childrenResults, IEnumerable`1<object> args, string className, ITsReferenceExpression parentClass, TsElementFactory factory, ITransformerMatchResult matchResult, JsModifiers modifiers);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.PrototypeClass.SubClassInOtherCasesReplacement : SubClassInInitializerReplacement {
    private ITsAssignmentExpression myAssignmentExpression;
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.PrototypeClass.SubClassTransformer : CompositeTranformerBase`2<ISubClassChildTransformer, ISubClassReplacement> {
    public TransformerPassKind PassKind { get; }
    public SubClassTransformer(IEnumerable`1<ISubClassChildTransformer> childrenTransformers, IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern CreatePattern();
    public virtual TransformerPassKind get_PassKind();
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
    protected virtual bool CheckPostCondition(ITransformerMatchResult matchResult);
    public virtual ITreeNode TransformTree(ITransformerMatchResult matchResult, LocalTransformerDataContext parentLocalCache);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.PrototypeClass.SuperClassFunctionPropertyReplacement : object {
    private static string ReplacePattern;
    public sealed virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public sealed virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.PrototypeClass.SuperClassFunctionPropertyTransformer : LeafProducer`1<SuperClassFunctionPropertyReplacement> {
    public SuperClassFunctionPropertyTransformer(IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern CreatePattern();
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
    protected virtual bool CheckPostCondition(ITransformerMatchResult matchResult);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.PrototypeClass.SuperClassInInitializerReplacement : object {
    private ITsVariableDeclaration myVariableDeclaration;
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    protected static ITsClassDeclaration CreateClassDeclaration(IList`1<ITsClassMemberDeclaration> childrenResults, IEnumerable`1<object> args, string className, TsElementFactory factory, ITransformerMatchResult matchResult, JsModifiers modifiers);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.PrototypeClass.SuperClassInOtherCasesReplacement : SuperClassInInitializerReplacement {
    private ITsAssignmentExpression myAssignmentExpression;
    public virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.PrototypeClass.SuperClassTransformer : CompositeTranformerBase`2<SuperClassFunctionPropertyTransformer, ISuperClassReplacement> {
    public TransformerPassKind PassKind { get; }
    public SuperClassTransformer(IEnumerable`1<SuperClassFunctionPropertyTransformer> childrenTransformers, IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern CreatePattern();
    public virtual TransformerPassKind get_PassKind();
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
    protected virtual bool CheckPostCondition(ITransformerMatchResult matchResult);
    public virtual ITreeNode TransformTree(ITransformerMatchResult matchResult, LocalTransformerDataContext parentLocalCache);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.RedundantBlockReplacement : object {
    private static string ReplacePattern;
    public sealed virtual bool CheckLexicalContext(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
    public sealed virtual ITreeNode ReplaceNode(ITransformerMatchResult matchResult, LocalTransformerDataContext localCache);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformersImpl.RedundantBlockTransformer : LeafTransformer`1<RedundantBlockReplacement> {
    public TransformerPassKind PassKind { get; }
    public RedundantBlockTransformer(IShellLocks shellLocks, SolutionFeaturePartsContainer replacementsContainer);
    protected virtual IStructuralSearchPattern CreatePattern();
    protected virtual bool CheckPreCondition(ITreeNode candidate, TransformerMatchContext parentTransformerContext);
    public virtual TransformerPassKind get_PassKind();
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.Feature.Services.JavaScript.js2tsTools.TransformerUtil : object {
    private static string DefaultName;
    public static void DoLocalRename(IJavaScriptLocalElement declaredElement, string newName);
    public static string DoLocalRename(IJavaScriptDeclaredElement declaredElement);
    private static string DoRenameImpl2(IDeclaredElement element, Func`4<ITreeNode, IDeclaredElement, string, string> suggestNewName);
    public static string SuggestNameForLocalRename(ITreeNode contextNode, IDeclaredElement element, string oldName);
    public static string SuggestNewName(ITreeNode contextNode, string rootName, IElementKind elementKind, ScopeKind scopeKind);
    public static string SuggestNewName(ITreeNode rootNode, ITreeNode contextNode, IElementKind elementKind, ScopeKind scopeKind);
    public static ITsStatementsOwner GetTopLevelStmtsOwner(ITreeNode node);
    public static bool IsNodeAtScope(ITreeNode contextNode, IJavaScriptScope baseScope);
    public static bool IsNodeAtTopLevelScope(ITreeNode node);
    public static bool IsNodeAtTopLevel(ITreeNode node);
    public static bool IsNodeAtInternalModule(ITreeNode node);
    public static bool IsNodeAtTopLevelOrModule(ITreeNode candidate);
    public static IJavaScriptExpression RemoveOrReplace(TSource expression, TReplacement rpl);
    [ExtensionAttribute]
public static bool IsLazyBooleanOp(IBinaryExpression binaryExpression);
    public static bool IsNodeInStatementOwner(ITreeNode node, ITsStatementsOwner owner);
    public static bool IsRecursive(ITsFunctionExpression functionLiteral, bool onlyCheckInvocations);
    [ExtensionAttribute]
public static ITsStatement AddVariableDeclarationStatementBefore(ITsStatement variableDeclarationStatement, ITsStatement anchor);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JavaScriptLikeBaseLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.JavaScript.MatchingBrace.JavaScriptMatchingBraceProvider : object {
    public sealed virtual bool IsLeftBracket(TokenNodeType tokenType);
    public sealed virtual bool IsRightBracket(TokenNodeType tokenType);
    public sealed virtual bool Match(TokenNodeType token1, TokenNodeType token2);
    public sealed virtual int Compare(TokenNodeType x, TokenNodeType y);
}
[OptionsPageAttribute("JavaScript.Naming", "Naming Style", "JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons/NamingConvention")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.Naming.JavaScriptNamingOptionsPage : CustomNamingOptionsPage`1<JavaScriptNamingSettingsKey> {
    [PublicAPIAttribute]
public static string PID;
    public JavaScriptNamingOptionsPage(Lifetime lifetime, OptionsSettingsSmartContext settings, INamedElementsManager namedElementsManager, IThemedIconManager iconman);
}
[OptionsPageAttribute("TypeScript.Naming", "Naming Style", "JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons/NamingConvention")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.Naming.TsNamingOptionsPage : CustomNamingOptionsPage`1<JavaScriptNamingSettingsKey> {
    [PublicAPIAttribute]
public static string PID;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <HighlightNamingIssuesInDeclarationFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <SmartInterfaceMemberNaming>k__BackingField;
    public IProperty`1<bool> HighlightNamingIssuesInDeclarationFiles { get; public set; }
    public IProperty`1<bool> SmartInterfaceMemberNaming { get; public set; }
    public TsNamingOptionsPage(Lifetime lifetime, OptionsSettingsSmartContext settings, INamedElementsManager namedElementsManager, IThemedIconManager uiIconsComponent);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_HighlightNamingIssuesInDeclarationFiles();
    [CompilerGeneratedAttribute]
public void set_HighlightNamingIssuesInDeclarationFiles(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_SmartInterfaceMemberNaming();
    [CompilerGeneratedAttribute]
public void set_SmartInterfaceMemberNaming(IProperty`1<bool> value);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.JavaScript.Naming.ZoneMarker : object {
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.Navigation.JavaScriptGotoFileMemberProvider : object {
    public sealed virtual IEnumerable`1<MatchingInfo> FindMatchingInfos(IIdentifierMatcher matcher, INavigationScope scope, GotoContext gotoContext);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.Navigation.JavaScriptGotoFileMemberProvider/<GetFileSymbols>d__1")]
protected virtual IEnumerable`1<IJavaScriptSymbol> GetFileSymbols(IEnumerable`1<IPsiSourceFile> allFiles, JavaScriptServices services);
    public sealed virtual IEnumerable`1<IOccurrence> GetOccurrencesByMatchingInfo(MatchingInfo navigationInfo, INavigationScope scope, GotoContext gotoContext);
    public virtual bool IsApplicable(INavigationScope scope, GotoContext gotoContext, IIdentifierMatcher matcher);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.Navigation.JavaScriptGotoFileMemberProvider/<FindOccurrences>d__4")]
public IEnumerable`1<Pair`2<IOccurrence, MatchingInfo>> FindOccurrences(IIdentifierMatcher matcher, INavigationScope scope, LibrariesFlag includeLibraries, Func`1<bool> checkCancelled);
    [CanBeNullAttribute]
private static IOccurrence GetOccurrenceFromSymbol(IJavaScriptSymbol symbol, bool isPrimary);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.Navigation.JavaScriptGotoLowPrioritySymbolProvider : JavaScriptGotoSymbolProviderBase {
    public Func`2<MatcherScore, int> ItemsPriorityFunc { get; }
    public JavaScriptGotoLowPrioritySymbolProvider(IShellLocks locks);
    protected virtual IEnumerable`1<string> GetNames(JavaScriptServices services, INavigationScope scope, GotoContext context);
    public virtual IEnumerable`1<IOccurrence> GetOccurrencesByMatchingInfo(MatchingInfo navigationInfo, INavigationScope scope, GotoContext gotoContext);
    public virtual Func`2<MatcherScore, int> get_ItemsPriorityFunc();
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.Navigation.JavaScriptGotoSymbolProviderBase : CachedGotoSymbolBase`1<JavaScriptServices> {
    protected static Key`1<AllNames> ourAllNamesKey;
    public Func`2<MatcherScore, int> ItemsPriorityFunc { get; }
    protected JavaScriptGotoSymbolProviderBase(IShellLocks locks);
    private static JavaScriptGotoSymbolProviderBase();
    private static bool SkipElementFast(IJsCachedElement element);
    private static bool SkipElementSlow(IJsCachedElement element);
    private static bool IsLowPriorityElement(IDeclaredElement it);
    public sealed virtual void PrecalculateCaches(INavigationScope scope, ISolution solution, GotoContext context);
    protected virtual JavaScriptServices GetCache(INavigationScope scope, ISolution solution, GotoContext gotoContext);
    public virtual IEnumerable`1<IOccurrence> GetOccurrencesByMatchingInfo(MatchingInfo navigationInfo, INavigationScope scope, GotoContext gotoContext);
    protected IEnumerable`1<IOccurrence> GetOccurrencesByMatchingInfoImpl(bool lowPriority, MatchingInfo navigationInfo, INavigationScope scope, GotoContext gotoContext);
    public virtual bool IsApplicable(INavigationScope scope, GotoContext gotoContext, IIdentifierMatcher matcher);
    public abstract virtual Func`2<MatcherScore, int> get_ItemsPriorityFunc();
}
[RelatedFilesProviderAttribute("JetBrains.ProjectModel.KnownProjectFileType", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.Navigation.JavaScriptRelatedFilesProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.Navigation.JavaScriptRelatedFilesProvider/<GetRelatedFiles>d__0")]
public sealed virtual IEnumerable`1<RelatedFileOccurence> GetRelatedFiles(IProjectFile projectFile);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.Navigation.JavaScriptSymbolProvider : JavaScriptGotoSymbolProviderBase {
    public Func`2<MatcherScore, int> ItemsPriorityFunc { get; }
    public JavaScriptSymbolProvider(IShellLocks locks);
    protected virtual IEnumerable`1<string> GetNames(JavaScriptServices services, INavigationScope scope, GotoContext context);
    public virtual IEnumerable`1<IOccurrence> GetOccurrencesByMatchingInfo(MatchingInfo navigationInfo, INavigationScope scope, GotoContext gotoContext);
    public virtual Func`2<MatcherScore, int> get_ItemsPriorityFunc();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.Navigation.TypeScript.TsAllMembersSearcher : object {
    private JsResolveContext myContext;
    private IPsiSourceFile myPsiSourceFile;
    private IJavaScriptTypeCache myJavaScriptTypeCache;
    private List`1<ITsMemberElement> myConsumer;
    public TsAllMembersSearcher(JsResolveContext context, IPsiSourceFile psiSourceFile);
    public IEnumerable`1<ITsMemberElement> Run();
    public sealed virtual bool Consume(IJsRule rule, IJavaScriptTypeFileCache fileCache);
    protected virtual void ConsumeDeclaredElement(ITsMemberElement memberElement);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.Navigation.TypeScript.TsChainedCodeModelOccurrence : ChainedCodeModelOccurrence {
    public TsChainedCodeModelOccurrence(IDeclaredElement element, MatchingInfo matchingInfo, OccurrencePresentationOptions options);
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.Navigation.TypeScript.TsChainedOccurrencePresenter : ChainedCodeModelOccurrencePresenter {
    public virtual bool IsApplicable(IOccurrence occurrence);
    protected virtual string GetElementName(IDeclaredElement elementToProcess);
    protected virtual IDeclaredElement GetContainingElement(IDeclaredElement declaredElement);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.Navigation.TypeScript.TypeNavigationScope : object {
    [CompilerGeneratedAttribute]
private ITsTypeElement <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private LibrariesFlag <ExtendedSearchFlag>k__BackingField;
    [CompilerGeneratedAttribute]
private JsResolveContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private INavigationProviderFilter <Filter>k__BackingField;
    public ITsTypeElement Type { get; }
    public LibrariesFlag ExtendedSearchFlag { get; public set; }
    public JsResolveContext Context { get; public set; }
    public INavigationProviderFilter Filter { get; }
    public TypeNavigationScope(ITsTypeElement type, LibrariesFlag extendedSearchFlag, JsResolveContext context, INavigationProviderFilter filter);
    [CompilerGeneratedAttribute]
public ITsTypeElement get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual LibrariesFlag get_ExtendedSearchFlag();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExtendedSearchFlag(LibrariesFlag value);
    [CompilerGeneratedAttribute]
public JsResolveContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(JsResolveContext value);
    public sealed virtual ISolution GetSolution();
    [CompilerGeneratedAttribute]
public sealed virtual INavigationProviderFilter get_Filter();
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.Navigation.TypeScript.TypeScriptChainedGotoSymbolProvider : CachedGotoSymbolBase`1<JavaScriptServices> {
    public Func`2<MatcherScore, int> ItemsPriorityFunc { get; }
    public TypeScriptChainedGotoSymbolProvider(IShellLocks locks);
    protected virtual JavaScriptServices GetCache(INavigationScope scope, ISolution solution, GotoContext gotoContext);
    protected virtual IEnumerable`1<string> GetNames(JavaScriptServices cache, INavigationScope scope, GotoContext context);
    public virtual IEnumerable`1<IOccurrence> GetOccurrencesByMatchingInfo(MatchingInfo navigationInfo, INavigationScope scope, GotoContext gotoContext);
    public sealed virtual IEnumerable`1<ChainedNavigationItemData> GetNextChainedScopes(GotoContext gotoContext, IIdentifierMatcher matcher, INavigationScope containingScope);
    private static HashSet`1<ITsMemberElement> GetNestedMembers(ITsTypeElement typeElement, JsResolveContext context);
    private static IEnumerable`1<ITsMemberElement> GetAllNestedMembers(ITsTypeElement typeElement, JsResolveContext context, IdentifierMatcher matcher);
    private static IEnumerable`1<ChainedNavigationItemData> CreateNavigationItems(IIdentifierMatcher matcher, INavigationScope containingScope, IEnumerable`1<ITsTypeElement> matchedTypeElements, JsResolveContext context);
    public virtual bool IsApplicable(INavigationScope scope, GotoContext gotoContext, IIdentifierMatcher matcher);
    public sealed virtual Func`2<MatcherScore, int> get_ItemsPriorityFunc();
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.Navigation.TypeScript.TypeScriptGotoFileMemberProvider : JavaScriptGotoFileMemberProvider {
    public virtual bool IsApplicable(INavigationScope scope, GotoContext gotoContext, IIdentifierMatcher matcher);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.Navigation.TypeScript.TypeScriptGotoFileMemberProvider/<GetFileSymbols>d__1")]
protected virtual IEnumerable`1<IJavaScriptSymbol> GetFileSymbols(IEnumerable`1<IPsiSourceFile> allFiles, JavaScriptServices services);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.JavaScript.Navigation.ZoneMarker : object {
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.Occurrences.JavaScriptDeclaredElementOccurrencePresenter : DeclaredElementOccurrencePresenter {
    protected virtual void DisplayLocationAndGlyph(IMenuItemDescriptor descriptor, OccurrencePresentationOptions options, IDeclaredElement element, DeclaredElementOccurrence declaredElementOccurrence, bool specifyVersion, Nullable`1<DocumentCoords> coords);
    protected virtual void DisplayCustomContainerText(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions options, IDeclaredElement declaredElement);
    public virtual bool IsApplicable(IOccurrence occurrence);
    private static IPsiSourceFile AppendInformationText(RichText displayName, IJavaScriptProperty property, JavaScriptServices javaScriptServices);
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.Occurrences.JavaScriptOccurrencePresenter : WebSymbolOccurrencePresenter {
    public virtual bool Present(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions options);
    public virtual bool IsApplicable(IOccurrence occurrence);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.Occurrences.JavaScriptReferenceOccurrence : ReferenceOccurrence {
    [CompilerGeneratedAttribute]
private ReferenceType <ReferenceType>k__BackingField;
    public ReferenceType ReferenceType { get; }
    public JavaScriptReferenceOccurrence(IReference reference, IDeclaredElement target, OccurrenceType occurrenceType, ReferenceType referenceType);
    [CompilerGeneratedAttribute]
public ReferenceType get_ReferenceType();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.Occurrences.JavaScriptSymbolOccurrence : RangeOccurrence {
    [CompilerGeneratedAttribute]
private bool <Important>k__BackingField;
    public bool Important { get; }
    protected bool ShouldBindContainingElementEnvoys { get; }
    public JavaScriptSymbolOccurrence(IPsiSourceFile psiSourceFile, DocumentRange documentRange, OccurrencePresentationOptions options, bool important);
    [CompilerGeneratedAttribute]
public bool get_Important();
    protected virtual bool get_ShouldBindContainingElementEnvoys();
    public virtual string DumpToString();
}
[OccurrenceProviderAttribute]
public class JetBrains.ReSharper.Feature.Services.JavaScript.Occurrences.JavaScriptSymbolOccurrenceProvider : object {
    public sealed virtual IOccurrence MakeOccurrence(FindResult findResult);
    public static IOccurrence MakeOccurrence(IJavaScriptSymbol symbol, bool important);
    public static IOccurrence MakeOccurrence(IJavaScriptSymbol symbol, OccurrencePresentationOptions occurrencePresentationOptions, bool important);
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.Occurrences.JSon.JsonOccurrencePresenter : WebSymbolOccurrencePresenter {
    public virtual bool IsApplicable(IOccurrence occurrence);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.Occurrences.TypeScript.TsDeclaredElementOccurrence : DeclaredElementOccurrence {
    private IDeclaredElementEnvoy myDisplayElement;
    public IDeclaredElementEnvoy DisplayElement { get; }
    public TsDeclaredElementOccurrence(ITsDeclaredElement element, OccurrenceType occurrenceKind);
    public TsDeclaredElementOccurrence(ITsDeclaredElement element, OccurrencePresentationOptions options, OccurrenceType occurrenceKind);
    public virtual IDeclaredElementEnvoy get_DisplayElement();
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.Occurrences.TypeScript.TypeScriptDeclaredElementOccurrencePresenter : DeclaredElementOccurrencePresenter {
    protected virtual void DisplayLocationAndGlyph(IMenuItemDescriptor descriptor, OccurrencePresentationOptions options, IDeclaredElement element, DeclaredElementOccurrence declaredElementOccurrence, bool specifyVersion, Nullable`1<DocumentCoords> coords);
    protected virtual void DisplayCustomContainerText(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions options, IDeclaredElement declaredElement);
    public virtual bool IsApplicable(IOccurrence occurrence);
}
[OptionsPageAttribute("JavaScript", "JavaScript", "JetBrains.ReSharper.Feature.Services.Resources.Web.FeaturesWebOptionsThemedIcons/JsOptionPage")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.OptionPages.JavaScriptPage : AEmptyOptionsPage {
    public static string PID;
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.OptionPages.JsonCatalogSelector.CatalogInfo : object {
    public string Source;
    public bool IsEnabled;
    public int Priority;
    public CatalogInfo(string src, bool enabled, int order);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.OptionPages.JsonCatalogSelector.CatalogItemViewModel : ObservableObject {
    [CompilerGeneratedAttribute]
private CatalogInfo <CatalogInfo>k__BackingField;
    public CatalogInfo CatalogInfo { get; }
    public string Source { get; }
    public bool IsChecked { get; public set; }
    public CatalogItemViewModel(CatalogInfo source);
    [CompilerGeneratedAttribute]
public CatalogInfo get_CatalogInfo();
    public string get_Source();
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.OptionPages.JsonCatalogSelector.JsonCatalogSelectorOptionsViewModel : ObservableObject {
    [CompilerGeneratedAttribute]
private OptionsSettingsSmartContext <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingsOptimization <SettingsOptimization>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IJsonSchemaManager <SchemaManager>k__BackingField;
    [CompilerGeneratedAttribute]
private HelpSystem <HelpSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private IShellLocks <Locks>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private IUIApplication <Environment>k__BackingField;
    public OptionsSettingsSmartContext Settings { get; public set; }
    public ISettingsOptimization SettingsOptimization { get; public set; }
    public ILogger Logger { get; public set; }
    public IJsonSchemaManager SchemaManager { get; public set; }
    public HelpSystem HelpSystem { get; public set; }
    public IShellLocks Locks { get; public set; }
    public Lifetime Lifetime { get; public set; }
    public IUIApplication Environment { get; public set; }
    public JsonCatalogSelectorOptionsViewModel(OptionsSettingsSmartContext settings, ISettingsOptimization settingsOptimization, ILogger logger, IJsonSchemaManager schemaManager, HelpSystem helpSystem, IShellLocks locks, Lifetime lifetime, IUIApplication environment);
    [CompilerGeneratedAttribute]
public OptionsSettingsSmartContext get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(OptionsSettingsSmartContext value);
    [CompilerGeneratedAttribute]
public ISettingsOptimization get_SettingsOptimization();
    [CompilerGeneratedAttribute]
public void set_SettingsOptimization(ISettingsOptimization value);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public IJsonSchemaManager get_SchemaManager();
    [CompilerGeneratedAttribute]
public void set_SchemaManager(IJsonSchemaManager value);
    [CompilerGeneratedAttribute]
public HelpSystem get_HelpSystem();
    [CompilerGeneratedAttribute]
public void set_HelpSystem(HelpSystem value);
    [CompilerGeneratedAttribute]
public IShellLocks get_Locks();
    [CompilerGeneratedAttribute]
public void set_Locks(IShellLocks value);
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public void set_Lifetime(Lifetime value);
    [CompilerGeneratedAttribute]
public IUIApplication get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(IUIApplication value);
}
[OptionsPageAttribute("JSONTypingAssist", "Typing assistance", "JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons/StringFormat")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.OptionPages.JsonEditor.JsonEditorOptionsPage : SimpleOptionsPage {
    public static string PID;
    public JsonEditorOptionsPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.JavaScript.OptionPages.JsonEditor.ZoneMarker : object {
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.OptionPages.JsonFeatureSelector.FeatureInfo : ObservableObject {
    private static string NoneFeatureId;
    private static FeatureListItem ourNoneItem;
    private static List`1<FeatureListItem> ourKnownItems;
    private List`1<SchemaListItem> myKnownSchemas;
    private string myId;
    private bool myIsEnabled;
    private string myFileMask;
    private string mySchema;
    private string myPathMask;
    private string myFeatureId;
    public List`1<FeatureListItem> Items { get; }
    public FeatureListItem SelectedItem { get; public set; }
    public List`1<SchemaListItem> KnownSchemas { get; }
    public SchemaListItem SelectedSchema { get; public set; }
    public string Id { get; public set; }
    public bool IsEnabled { get; public set; }
    public string FileMask { get; public set; }
    public string Schema { get; public set; }
    public string PathMask { get; public set; }
    public string FeatureId { get; public set; }
    public FeatureInfo(string id, bool enabled, string fileMask, string schema, string pathMask, string featureId, List`1<SchemaListItem> knownSchemas);
    private static FeatureInfo();
    public List`1<FeatureListItem> get_Items();
    public FeatureListItem get_SelectedItem();
    public void set_SelectedItem(FeatureListItem value);
    public List`1<SchemaListItem> get_KnownSchemas();
    public SchemaListItem get_SelectedSchema();
    public void set_SelectedSchema(SchemaListItem value);
    public string get_Id();
    public void set_Id(string value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public string get_FileMask();
    public void set_FileMask(string value);
    public string get_Schema();
    public void set_Schema(string value);
    public string get_PathMask();
    public void set_PathMask(string value);
    public string get_FeatureId();
    public void set_FeatureId(string value);
    [CompilerGeneratedAttribute]
private bool <get_SelectedItem>b__15_0(FeatureListItem i);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.OptionPages.JsonFeatureSelector.JsonFeatureSelectorOptionsViewModel : ObservableObject {
    [CompilerGeneratedAttribute]
private OptionsSettingsSmartContext <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingsOptimization <SettingsOptimization>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IJsonSchemaManager <SchemaManager>k__BackingField;
    public OptionsSettingsSmartContext Settings { get; public set; }
    public ISettingsOptimization SettingsOptimization { get; public set; }
    public ILogger Logger { get; public set; }
    public IJsonSchemaManager SchemaManager { get; public set; }
    public JsonFeatureSelectorOptionsViewModel(OptionsSettingsSmartContext settings, ISettingsOptimization settingsOptimization, ILogger logger, IJsonSchemaManager schemaManager);
    [CompilerGeneratedAttribute]
public OptionsSettingsSmartContext get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(OptionsSettingsSmartContext value);
    [CompilerGeneratedAttribute]
public ISettingsOptimization get_SettingsOptimization();
    [CompilerGeneratedAttribute]
public void set_SettingsOptimization(ISettingsOptimization value);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public IJsonSchemaManager get_SchemaManager();
    [CompilerGeneratedAttribute]
public void set_SchemaManager(IJsonSchemaManager value);
}
[OptionsPageAttribute("JSONInspections", "Inspections", "JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons/CodeInspections")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.OptionPages.JsonInspectionsOptionsPage : SimpleOptionsPage {
    public static string PID;
    public JsonInspectionsOptionsPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext);
}
[OptionsPageAttribute("JSON", "JSON", "JetBrains.ReSharper.Feature.Services.Resources.Web.FeaturesWebOptionsThemedIcons/JsonOptionPage")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.OptionPages.JsonPage : AEmptyOptionsPage {
    public static string PID;
}
[OptionsPageAttribute("JSONSchemaCatalogs", "JSON Schema Catalogs", "JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons/Library")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.OptionPages.JsonSchemaCatalogsOptionsPage : CustomSimpleOptionsPage {
    public static string PID;
    public JsonSchemaCatalogsOptionsPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, ISettingsOptimization settingsOptimization, ILogger logger, IJsonSchemaManager schemaManager, HelpSystem helpSystem, IShellLocks locks, IUIApplication environment);
}
[OptionsPageAttribute("JSONSchemaFeatures", "JSON Value Helpers", "JetBrains.ReSharper.Psi.RegExp.Resources.PsiRegExpThemedIcons/RegExp")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.OptionPages.JsonSchemaFeaturesOptionsPage : CustomSimpleOptionsPage {
    public static string PID;
    public JsonSchemaFeaturesOptionsPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, ISettingsOptimization settingsOptimization, ILogger logger, IJsonSchemaManager schemaManager);
}
[OptionsPageAttribute("TypeScript", "TypeScript", "JetBrains.ReSharper.Feature.Services.Resources.Web.FeaturesWebOptionsThemedIcons/TsOptionPage")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.OptionPages.TypeScriptPage : AEmptyOptionsPage {
    public static string PID;
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.JavaScript.OptionPages.ZoneMarker : object {
}
[ParameterInfoContextFactoryAttribute("JetBrains.ReSharper.Psi.JavaScript.Injected.InjectedJavaScriptLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.ParameterInfo.InjectedJavaScriptParameterInfoContextFactory : JavaScriptParameterInfoContextFactoryBase`2<InjectedJavaScriptLanguage, InjectedJavaScriptCodeCompletionManager> {
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.ParameterInfo.JavaScriptParameterInfoCandidate : object {
    private IJsFunctionSignature mySignature;
    private JavaScriptServices myServices;
    private JsResolveContext myContext;
    private JsParameterInfo[] myParameters;
    private TextRange[] myParameterRanges;
    private string mySignatureText;
    private IBasicDocSignature myDocSignature;
    private IJsDocInfo myJsDoc;
    [CompilerGeneratedAttribute]
private bool <IsFilteredOut>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PositionalParameterCount>k__BackingField;
    public bool IsFilteredOut { get; public set; }
    public int PositionalParameterCount { get; }
    public bool IsObsolete { get; }
    public RichTextBlock ObsoleteDescription { get; }
    public JavaScriptParameterInfoCandidate(IJsFunctionSignature signature, JavaScriptServices services, JsResolveContext context);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsFilteredOut();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsFilteredOut(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_PositionalParameterCount();
    public bool Equals(JavaScriptParameterInfoCandidate other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual RichText GetSignature(String[] namedArguments, ParameterInfoSettings settings, TextRange[]& parameterRanges, Int32[]& mapToOriginalOrder, ExtensionMethodInfo& extensionMethodInfo);
    public sealed virtual void GetParametersInfo(ParamPresentationInfo[]& paramInfos, Int32& paramsParameterIndex);
    public sealed virtual RichTextBlock GetDescription(ParameterInfoSettings settings);
    public sealed virtual bool Matches(IDeclaredElement signature);
    public sealed virtual bool get_IsObsolete();
    public sealed virtual RichTextBlock get_ObsoleteDescription();
}
public static class JetBrains.ReSharper.Feature.Services.JavaScript.ParameterInfo.JavaScriptParameterInfoCandidateUtil : object {
    public static ICandidate[] GetCandidates(IJsResolvedType type, JsResolveContext context, ITsInvocationLikeExpression invocationExpression);
    private static ICandidate CreateCandidate(IJsFunctionSignature signature, ITsSubstitution instantiation, JsResolveContext javaScriptResolveContext);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.ParameterInfo.JavaScriptParameterInfoContext : object {
    private int myArgument;
    [CompilerGeneratedAttribute]
private String[] <NamedArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private ICandidate[] <Candidates>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <Range>k__BackingField;
    public String[] NamedArguments { get; public set; }
    public ICandidate DefaultCandidate { get; }
    public ICandidate[] Candidates { get; }
    public DocumentRange Range { get; }
    public Type ParameterListNodeType { get; }
    public ICollection`1<Type> ParameterNodeTypes { get; }
    public JavaScriptParameterInfoContext(IInvocationLikeExpression invocationExpression, int argumentIndex, IJsResolvedType type, JsResolveContext context);
    public sealed virtual int GetArgument(ICandidate candidate);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_NamedArguments();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NamedArguments(String[] value);
    public sealed virtual ICandidate get_DefaultCandidate();
    [CompilerGeneratedAttribute]
public sealed virtual ICandidate[] get_Candidates();
    [CompilerGeneratedAttribute]
public sealed virtual DocumentRange get_Range();
    public sealed virtual Type get_ParameterListNodeType();
    public sealed virtual ICollection`1<Type> get_ParameterNodeTypes();
}
[ParameterInfoContextFactoryAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JavaScriptLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.ParameterInfo.JavaScriptParameterInfoContextFactory : JavaScriptParameterInfoContextFactoryBase`2<JavaScriptLanguage, JavaScriptCodeCompletionManager> {
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.ParameterInfo.JavaScriptParameterInfoContextFactoryBase`2 : object {
    private static Char[] ourChars;
    private static Char[] ourImportantChars;
    public IEnumerable`1<char> ImportantChars { get; }
    public PsiLanguageType Language { get; }
    private static JavaScriptParameterInfoContextFactoryBase`2();
    public sealed virtual bool IsIntellisenseEnabled(ISolution solution, IContextBoundSettingsStore settingsStore);
    public sealed virtual IParameterInfoContext CreateContext(ISolution solution, DocumentOffset caretOffset, DocumentOffset expectedLParenthOffset, char invocationChar, IContextBoundSettingsStore settingsStore);
    private IParameterInfoContext CreateContextFromTsIndexer(ITsIndexExpression ownerTsIndexer, JavaScriptServices javaScriptServices);
    private IParameterInfoContext CreateContextFromTypeArgumentList(DocumentOffset caretOffset, ITsTypeArgumentList ownerTypeArgumentList, JavaScriptServices javaScriptServices);
    private static IParameterInfoContext CreateContextFromInvocation(DocumentOffset caretOffset, IInvocationLikeExpression ownerInvocation, JavaScriptServices javaScriptServices);
    public sealed virtual IEnumerable`1<char> get_ImportantChars();
    public sealed virtual PsiLanguageType get_Language();
    public sealed virtual bool ShouldPopup(DocumentOffset caretOffset, char c, ISolution solution, IContextBoundSettingsStore settingsStore);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.ParameterInfo.TypeScriptGenericArgumentsParameterInfoCandidate : object {
    private JsResolveContext myContext;
    private ITsTypeArgumentList myTypeArgumentList;
    private IList`1<ITsTypeParameterType> myParameters;
    private TextRange[] myParameterRanges;
    private string mySignature;
    [CompilerGeneratedAttribute]
private bool <IsFilteredOut>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PositionalParameterCount>k__BackingField;
    public bool IsFilteredOut { get; public set; }
    public int PositionalParameterCount { get; }
    public bool IsObsolete { get; }
    public RichTextBlock ObsoleteDescription { get; }
    public TypeScriptGenericArgumentsParameterInfoCandidate(IList`1<ITsTypeParameterType> signature, JsResolveContext context, ITsTypeArgumentList typeArgumentList, IJsResolvedType type);
    private string GetParameterDesc(ITsTypeParameterType parameter);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsFilteredOut();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsFilteredOut(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_PositionalParameterCount();
    public sealed virtual RichText GetSignature(String[] namedArguments, ParameterInfoSettings settings, TextRange[]& parameterRanges, Int32[]& mapToOriginalOrder, ExtensionMethodInfo& extensionMethodInfo);
    public sealed virtual void GetParametersInfo(ParamPresentationInfo[]& paramInfos, Int32& paramsParameterIndex);
    public sealed virtual RichTextBlock GetDescription(ParameterInfoSettings settings);
    public sealed virtual bool Matches(IDeclaredElement signature);
    public sealed virtual bool get_IsObsolete();
    public sealed virtual RichTextBlock get_ObsoleteDescription();
    public virtual int GetHashCode();
    public bool Equals(TypeScriptGenericArgumentsParameterInfoCandidate other);
    public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
private ParamPresentationInfo <GetParametersInfo>b__15_0(ITsTypeParameterType p);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.ParameterInfo.TypeScriptGenericArgumentsParameterInfoContext : object {
    private ICandidate[] myCandidates;
    private DocumentRange myTextRange;
    private ITsTypeArgumentList myTypeArgumentList;
    private JsResolveContext myContext;
    private int myArgument;
    [CompilerGeneratedAttribute]
private String[] <NamedArguments>k__BackingField;
    public String[] NamedArguments { get; public set; }
    public ICandidate DefaultCandidate { get; }
    public ICandidate[] Candidates { get; }
    public DocumentRange Range { get; }
    public Type ParameterListNodeType { get; }
    public ICollection`1<Type> ParameterNodeTypes { get; }
    public TypeScriptGenericArgumentsParameterInfoContext(ITsTypeArgumentList typeArgumentList, int argumentIndex, IJsResolvedType type, JsResolveContext context);
    private ICandidate[] GetCandidates(IJsResolvedType type, JsResolveContext context);
    public sealed virtual int GetArgument(ICandidate candidate);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_NamedArguments();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NamedArguments(String[] value);
    public sealed virtual ICandidate get_DefaultCandidate();
    public sealed virtual ICandidate[] get_Candidates();
    public sealed virtual DocumentRange get_Range();
    public sealed virtual Type get_ParameterListNodeType();
    public sealed virtual ICollection`1<Type> get_ParameterNodeTypes();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.ParameterInfo.TypeScriptIndexerParameterInfoCandidate : object {
    private string mySignature;
    private TextRange[] myParameterRanges;
    [CompilerGeneratedAttribute]
private bool <IsFilteredOut>k__BackingField;
    public bool IsFilteredOut { get; public set; }
    public int PositionalParameterCount { get; }
    public bool IsObsolete { get; }
    public RichTextBlock ObsoleteDescription { get; }
    public TypeScriptIndexerParameterInfoCandidate(string kind, IJsResolvedType resolvedType, JsResolveContext context);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsFilteredOut();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsFilteredOut(bool value);
    public sealed virtual int get_PositionalParameterCount();
    public sealed virtual RichText GetSignature(String[] namedArguments, ParameterInfoSettings settings, TextRange[]& parameterRanges, Int32[]& mapToOriginalOrder, ExtensionMethodInfo& extensionMethodInfo);
    public sealed virtual void GetParametersInfo(ParamPresentationInfo[]& paramInfos, Int32& paramsParameterIndex);
    public sealed virtual RichTextBlock GetDescription(ParameterInfoSettings settings);
    public sealed virtual bool Matches(IDeclaredElement signature);
    public sealed virtual bool get_IsObsolete();
    public sealed virtual RichTextBlock get_ObsoleteDescription();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.ParameterInfo.TypeScriptIndexerParameterInfoContext : object {
    private JsTypeResolveResult myNumericIndexerType;
    private JsTypeResolveResult myStringIndexerType;
    [CompilerGeneratedAttribute]
private ICandidate[] <Candidates>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <Range>k__BackingField;
    public String[] NamedArguments { get; public set; }
    public ICandidate DefaultCandidate { get; }
    public ICandidate[] Candidates { get; }
    public DocumentRange Range { get; }
    public Type ParameterListNodeType { get; }
    public ICollection`1<Type> ParameterNodeTypes { get; }
    public TypeScriptIndexerParameterInfoContext(JsTypeResolveResult numericIndexerType, JsTypeResolveResult stringIndexerType, JsResolveContext context, ITsIndexExpression ownerTsIndexer);
    public sealed virtual int GetArgument(ICandidate candidate);
    public sealed virtual String[] get_NamedArguments();
    public sealed virtual void set_NamedArguments(String[] value);
    public sealed virtual ICandidate get_DefaultCandidate();
    [CompilerGeneratedAttribute]
public sealed virtual ICandidate[] get_Candidates();
    [CompilerGeneratedAttribute]
public sealed virtual DocumentRange get_Range();
    public sealed virtual Type get_ParameterListNodeType();
    public sealed virtual ICollection`1<Type> get_ParameterNodeTypes();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.ParameterInfo.TypeScriptIndexerParameterInfoContext/<GetCandidates>d__19")]
private IEnumerable`1<ICandidate> GetCandidates(JsResolveContext context);
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Behaviors.JavaScriptExpressionPostfixTemplateBehavior`1 : PostfixTemplateBehavior {
    protected JavaScriptExpressionPostfixTemplateBehavior`1(PostfixTemplateInfo info);
    protected virtual ITreeNode ExpandPostfix(PostfixExpressionContext context);
    [NotNullAttribute]
protected abstract virtual TExpression CreateExpression(JavaScriptElementFactory factory, IJavaScriptExpression expression);
    [NotNullAttribute]
protected virtual TExpression DecorateExpression(JavaScriptElementFactory factory, TExpression expression);
    protected sealed virtual void AfterComplete(ITextControl textControl, ITreeNode node, Suffix suffix);
    protected virtual void AfterComplete(ITextControl textControl, TExpression expression, Suffix suffix);
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Behaviors.JavaScriptStatementPostfixTemplateBehavior`1 : PostfixTemplateBehavior {
    private bool myUseBraces;
    private static string CaretTemplate;
    [NotNullAttribute]
protected string EmbeddedStatementBracesTemplate { get; }
    protected string RequiredBracesTemplate { get; }
    protected JavaScriptStatementPostfixTemplateBehavior`1(PostfixTemplateInfo info);
    protected string get_EmbeddedStatementBracesTemplate();
    protected string get_RequiredBracesTemplate();
    protected virtual ITreeNode ExpandPostfix(PostfixExpressionContext context);
    [NotNullAttribute]
protected abstract virtual TStatement CreateStatement(JavaScriptElementFactory factory, IJavaScriptExpression expression);
    [NotNullAttribute]
protected virtual TStatement DecorateStatement(JavaScriptElementFactory factory, TStatement statement);
    [ContractAnnotationAttribute("null => null")]
[CanBeNullAttribute]
private static IJavaScriptStatement UnwrapFromBraces(ITreeNode statement);
    protected sealed virtual void AfterComplete(ITextControl textControl, ITreeNode node, Suffix suffix);
    protected virtual void AfterComplete(ITextControl textControl, TStatement statement, Suffix suffix);
    [CanBeNullAttribute]
protected TStatement PutStatementCaret(ITextControl textControl, TStatement statement);
    protected void FormatStatementOnSemicolon(TStatement statement);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Contexts.JavaScriptBrokenStatementPostfixTemplateContext : JavaScriptPostfixTemplateContext {
    private static string FixCommandName;
    public JavaScriptBrokenStatementPostfixTemplateContext(ITreeNode reference, IJavaScriptExpression expression, PostfixTemplateExecutionContext executionContext);
    private static JavaScriptBrokenStatementPostfixTemplateContext();
    public virtual JavaScriptPostfixExpressionContext FixExpression(JavaScriptPostfixExpressionContext context);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Contexts.JavaScriptPostfixExpressionContext : PostfixExpressionContext {
    [CompilerGeneratedAttribute]
private IJsResolvedType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanBecameStatement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTopLevelExpressionStatement>k__BackingField;
    [NotNullAttribute]
public IJavaScriptExpression Expression { get; }
    [CanBeNullAttribute]
public IReferenceExpression ExpressionWithReference { get; }
    [NotNullAttribute]
public JavaScriptPostfixTemplateContext PostfixContext { get; }
    [NotNullAttribute]
public IJsResolvedType Type { get; }
    public bool CanBecameStatement { get; }
    public bool IsTopLevelExpressionStatement { get; }
    public JavaScriptPostfixExpressionContext(JavaScriptPostfixTemplateContext postfixContext, IJavaScriptExpression expression);
    public IJavaScriptExpression get_Expression();
    public IReferenceExpression get_ExpressionWithReference();
    public JavaScriptPostfixTemplateContext get_PostfixContext();
    [CompilerGeneratedAttribute]
public IJsResolvedType get_Type();
    [CompilerGeneratedAttribute]
public bool get_CanBecameStatement();
    [CompilerGeneratedAttribute]
public bool get_IsTopLevelExpressionStatement();
    private static bool IsBrokenAsExpressionCase(IJavaScriptExpression expression, ITreeNode reference);
    [CanBeNullAttribute]
private IJsResolvedType GetTypeFromExpression();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Contexts.JavaScriptPostfixTemplateContext : PostfixTemplateContext {
    [NotNullAttribute]
private IJavaScriptExpression myInnerExpression;
    [NotNullAttribute]
private JavaScriptPostfixTemplatesFileTypeHelper myProjectFileTypeHelper;
    [NotNullAttribute]
private IList`1<JavaScriptPostfixExpressionContext> myExpressions;
    [CanBeNullAttribute]
private JavaScriptPostfixExpressionContext myTypeExpression;
    private JsResolveContext myResolveContext;
    public JsResolveContext ResolveContext { get; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public IList`1<JavaScriptPostfixExpressionContext> Expressions { get; }
    [CanBeNullAttribute]
public JavaScriptPostfixExpressionContext TypeExpression { get; }
    [CanBeNullAttribute]
public JavaScriptPostfixExpressionContext InnerExpression { get; }
    [CanBeNullAttribute]
public JavaScriptPostfixExpressionContext OuterExpression { get; }
    [CanBeNullAttribute]
public JavaScriptPostfixExpressionContext OuterStatementExpression { get; }
    public PsiLanguageType Language { get; }
    public bool IsTypeScript { get; }
    public bool IsJavaScript { get; }
    public JavaScriptPostfixTemplatesFileTypeHelper ProjectFileTypeHelper { get; }
    public JavaScriptPostfixTemplateContext(ITreeNode reference, IJavaScriptExpression expression, PostfixTemplateExecutionContext executionContext);
    public JsResolveContext get_ResolveContext();
    public IList`1<JavaScriptPostfixExpressionContext> get_Expressions();
    public JavaScriptPostfixExpressionContext get_TypeExpression();
    public JavaScriptPostfixExpressionContext get_InnerExpression();
    public JavaScriptPostfixExpressionContext get_OuterExpression();
    public JavaScriptPostfixExpressionContext get_OuterStatementExpression();
    public virtual PsiLanguageType get_Language();
    public bool get_IsTypeScript();
    public bool get_IsJavaScript();
    public JavaScriptPostfixTemplatesFileTypeHelper get_ProjectFileTypeHelper();
    [NotNullAttribute]
private IList`1<JavaScriptPostfixExpressionContext> BuildExpressions(ITreeNode reference, JavaScriptPostfixExpressionContext& typeContext);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Contexts.JavaScriptPostfixTemplateContext/<GetAllExpressionContexts>d__27")]
protected virtual IEnumerable`1<PostfixExpressionContext> GetAllExpressionContexts();
    public virtual bool IsSemanticallyMakeSense();
    public virtual PostfixExpressionContext FixExpression(PostfixExpressionContext context);
    public virtual string FixMatchingText(string templateName);
    [NotNullAttribute]
public virtual JavaScriptPostfixExpressionContext FixExpression(JavaScriptPostfixExpressionContext context);
    [NotNullAttribute]
public virtual IJavaScriptExpression GetOuterExpression(IJavaScriptExpression expression);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JavaScriptLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Contexts.JavaScriptPostfixTemplateContextFactory : object {
    public sealed virtual String[] GetReparseStrings();
    public sealed virtual PostfixTemplateContext TryCreate(ITreeNode position, PostfixTemplateExecutionContext executionContext);
    [CanBeNullAttribute]
private static PostfixTemplateContext TryCreateFromReferenceExpression(PostfixTemplateExecutionContext executionContext, IJavaScriptExpression qualifierExpression, IReferenceExpression referenceExpression);
    [CanBeNullAttribute]
private static IJavaScriptStatement FindBrokenStatement(ITreeNode node);
    [CanBeNullAttribute]
private static IJavaScriptExpression FindExpressionBrokenByKeyword(IExpressionStatement statement);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Contexts.JavaScriptReferenceExpressionPostfixTemplateContext : JavaScriptPostfixTemplateContext {
    private static string FixCommandName;
    public JavaScriptReferenceExpressionPostfixTemplateContext(IReferenceExpression reference, IJavaScriptExpression expression, PostfixTemplateExecutionContext executionContext);
    private static JavaScriptReferenceExpressionPostfixTemplateContext();
    public virtual JavaScriptPostfixExpressionContext FixExpression(JavaScriptPostfixExpressionContext context);
    public virtual IJavaScriptExpression GetOuterExpression(IJavaScriptExpression expression);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Contexts.JavaScriptReferenceNamePostfixTemplateContext : JavaScriptPostfixTemplateContext {
    private static string FixCommandName;
    public JavaScriptReferenceNamePostfixTemplateContext(ITsReferenceName reference, IJavaScriptExpression expression, PostfixTemplateExecutionContext executionContext);
    private static JavaScriptReferenceNamePostfixTemplateContext();
    public virtual JavaScriptPostfixExpressionContext FixExpression(JavaScriptPostfixExpressionContext context);
    [CompilerGeneratedAttribute]
private void <FixExpression>b__2_0();
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.JavaScriptPostfixTemplate : object {
    public PsiLanguageType Language { get; }
    public virtual PsiLanguageType get_Language();
    public abstract virtual PostfixTemplateBehavior CreateBehavior(PostfixTemplateInfo info);
    public sealed virtual PostfixTemplateInfo TryCreateInfo(PostfixTemplateContext context);
    [CanBeNullAttribute]
public abstract virtual PostfixTemplateInfo TryCreateInfo(JavaScriptPostfixTemplateContext context);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.JavaScriptPostfixTemplatesFileTypeHelper : object {
    [NotNullAttribute]
public static JavaScriptPostfixTemplatesFileTypeHelper DummyInstance;
    private static JavaScriptPostfixTemplatesFileTypeHelper();
    [NotNullAttribute]
public static JavaScriptPostfixTemplatesFileTypeHelper Get(ITreeNode context);
    public virtual bool IsTopLevelExpressionStatement(IJavaScriptExpression expression);
    public virtual bool CanBecameStatement(IJavaScriptExpression expression);
    [NotNullAttribute]
public virtual IJavaScriptStatement EnsureStatement(IJavaScriptExpression expression);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.JavaScriptPostfixUtils : object {
    public static bool IsAssignmentLike(JavaScriptPostfixExpressionContext expressionContext);
    [NotNullAttribute]
public static JavaScriptPostfixExpressionContext[] FindExpressionWithValuesContexts(JavaScriptPostfixTemplateContext context, Predicate`1<IJavaScriptExpression> predicate);
    public static bool CanTypeBecameExpression(IJavaScriptExpression expression);
    public static bool IsReferenceExpressionsChain(IJavaScriptExpression expression);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetParenthesesTemplate(ParenthesesInsertType parenthesesType, bool atStatementEnd);
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Templates.BooleanExpressionTemplateBase : JavaScriptPostfixTemplate {
    public virtual PostfixTemplateInfo TryCreateInfo(JavaScriptPostfixTemplateContext context);
    public abstract virtual PostfixTemplateBehavior CreateBehavior(PostfixTemplateInfo info);
    [CanBeNullAttribute]
protected abstract virtual PostfixTemplateInfo TryCreateBooleanInfo(JavaScriptPostfixExpressionContext expression, bool inPreciseMode);
    [CanBeNullAttribute]
protected virtual PostfixTemplateInfo TryCreateBooleanInfo(JavaScriptPostfixExpressionContext[] expressions, bool inPreciseMode);
    private static bool IsBooleanExpressionEx(IJavaScriptExpression expression);
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Templates.CheckForTemplateBase : JavaScriptPostfixTemplate {
    public sealed virtual PostfixTemplateInfo TryCreateInfo(JavaScriptPostfixTemplateContext context);
    [CanBeNullAttribute]
protected abstract virtual CheckForPostfixTemplateInfo TryCreateCheckInfo(JavaScriptPostfixTemplateContext context);
    public virtual PostfixTemplateBehavior CreateBehavior(PostfixTemplateInfo info);
    [ContractAnnotationAttribute("null => false")]
protected static bool IsNullable(JavaScriptPostfixExpressionContext expressionContext);
    protected static bool MakeSenseToCheckInPreciseMode(JavaScriptPostfixExpressionContext expressionContext);
    protected static string GetTemplate(CheckMode checkMode);
}
[PostfixTemplateAttribute("instanceof", "Checks instance of expression", "if (x instanceof Class)")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Templates.CheckInstanceofTemplate : CheckForTemplateBase {
    public static string TemplateName;
    public PsiLanguageType Language { get; }
    public virtual PsiLanguageType get_Language();
    protected virtual CheckForPostfixTemplateInfo TryCreateCheckInfo(JavaScriptPostfixTemplateContext context);
}
[PostfixTemplateAttribute("null", "Checks expression to be null", "if (expr === null)")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Templates.CheckIsNullTemplate : CheckIsNullTemplateBase {
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Templates.CheckIsNullTemplateBase : CheckForTemplateBase {
    public static string TemplateName;
    protected virtual CheckForPostfixTemplateInfo TryCreateCheckInfo(JavaScriptPostfixTemplateContext context);
}
[PostfixTemplateAttribute("undefined", "Checks expression to be undefined", "if (expr === undefined)")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Templates.CheckIsUndefinedTemplate : CheckIsUndefinedTemplateBase {
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Templates.CheckIsUndefinedTemplateBase : CheckForTemplateBase {
    public static string TemplateName;
    protected virtual CheckForPostfixTemplateInfo TryCreateCheckInfo(JavaScriptPostfixTemplateContext context);
}
public enum JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Templates.CheckMode : Enum {
    public int value__;
    public static CheckMode Null;
    public static CheckMode NotNull;
    public static CheckMode Undefined;
    public static CheckMode NotUndefined;
    public static CheckMode Typeof;
    public static CheckMode Instanceof;
}
[PostfixTemplateAttribute("notnull", "Checks expression to be not-null", "if (expr !== null)")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Templates.CheckNotNullTemplate : CheckNotNullTemplateBase {
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Templates.CheckNotNullTemplateBase : CheckForTemplateBase {
    public static string TemplateName;
    protected virtual CheckForPostfixTemplateInfo TryCreateCheckInfo(JavaScriptPostfixTemplateContext context);
}
[PostfixTemplateAttribute("notundefined", "Checks expression to be not-undefined", "if (expr !== undefined)")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Templates.CheckNotUndefinedTemplate : CheckNotUndefinedTemplateBase {
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Templates.CheckNotUndefinedTemplateBase : CheckForTemplateBase {
    public static string TemplateName;
    protected virtual CheckForPostfixTemplateInfo TryCreateCheckInfo(JavaScriptPostfixTemplateContext context);
}
[PostfixTemplateAttribute("typeof", "Checks type of expression", "if (typeof x === 'string')")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Templates.CheckTypeofTemplate : CheckForTemplateBase {
    public static string TemplateName;
    public PsiLanguageType Language { get; }
    public virtual PsiLanguageType get_Language();
    protected virtual CheckForPostfixTemplateInfo TryCreateCheckInfo(JavaScriptPostfixTemplateContext context);
}
[PostfixTemplateAttribute("else", "Checks boolean expression to be 'false'", "if (!expr)")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Templates.ElseStatementTemplate : ElseStatementTemplateBase {
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Templates.ElseStatementTemplateBase : BooleanExpressionTemplateBase {
    public static string TemplateName;
    protected virtual PostfixTemplateInfo TryCreateBooleanInfo(JavaScriptPostfixExpressionContext expression, bool inPreciseMode);
    public virtual PostfixTemplateBehavior CreateBehavior(PostfixTemplateInfo info);
}
[PostfixTemplateAttribute("forof", "Iterates over an iterable object", "for (let x of expr)")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Templates.ForOfStatementTemplate : ForOfStatementTemplateBase {
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Templates.ForOfStatementTemplateBase : JavaScriptPostfixTemplate {
    public static string TemplateName;
    public virtual PostfixTemplateInfo TryCreateInfo(JavaScriptPostfixTemplateContext context);
    private static bool IsEnumerable(JavaScriptPostfixExpressionContext context);
    public virtual PostfixTemplateBehavior CreateBehavior(PostfixTemplateInfo info);
    private static void ApplyRenameHotspots(LiveTemplatesManager liveTemplatesManager, ITextControl textControl, IForeachStatement statement, IReadOnlyCollection`1<string> namesCollection, IReferenceExpression extraReference);
}
[PostfixTemplateAttribute("if", "Checks boolean expression to be 'true'", "if (expr)")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Templates.IfStatementTemplate : IfStatementTemplateBase {
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Templates.IfStatementTemplateBase : BooleanExpressionTemplateBase {
    public static string TemplateName;
    protected virtual PostfixTemplateInfo TryCreateBooleanInfo(JavaScriptPostfixExpressionContext expression, bool inPreciseMode);
    public virtual PostfixTemplateBehavior CreateBehavior(PostfixTemplateInfo info);
}
[PostfixTemplateAttribute("return", "Returns expression from current function", "return expr;")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Templates.ReturnStatementTemplate : ReturnStatementTemplateBase {
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.Templates.ReturnStatementTemplateBase : JavaScriptPostfixTemplate {
    public static string TemplateName;
    public virtual PostfixTemplateInfo TryCreateInfo(JavaScriptPostfixTemplateContext context);
    private static bool IsAvailableInPreciseMode(JavaScriptPostfixExpressionContext expressionContext);
    public virtual PostfixTemplateBehavior CreateBehavior(PostfixTemplateInfo info);
}
[PostfixTemplateAttribute("null", "Checks expression to be null", "if (expr === null)")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.TypeScript.Templates.CheckIsNullTemplate : CheckIsNullTemplateBase {
    public PsiLanguageType Language { get; }
    public virtual PsiLanguageType get_Language();
}
[PostfixTemplateAttribute("undefined", "Checks expression to be undefined", "if (expr === undefined)")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.TypeScript.Templates.CheckIsUndefinedTemplate : CheckIsUndefinedTemplateBase {
    public PsiLanguageType Language { get; }
    public virtual PsiLanguageType get_Language();
}
[PostfixTemplateAttribute("notnull", "Checks expression to be not-null", "if (expr !== null)")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.TypeScript.Templates.CheckNotNullTemplate : CheckNotNullTemplateBase {
    public PsiLanguageType Language { get; }
    public virtual PsiLanguageType get_Language();
}
[PostfixTemplateAttribute("notundefined", "Checks expression to be not-undefined", "if (expr !== undefined)")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.TypeScript.Templates.CheckNotUndefinedTemplate : CheckNotUndefinedTemplateBase {
    public PsiLanguageType Language { get; }
    public virtual PsiLanguageType get_Language();
}
[PostfixTemplateAttribute("else", "Checks boolean expression to be 'false'", "if (!expr)")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.TypeScript.Templates.ElseStatementTemplate : ElseStatementTemplateBase {
    public PsiLanguageType Language { get; }
    public virtual PsiLanguageType get_Language();
}
[PostfixTemplateAttribute("forof", "Iterates over an iterable object", "for (let x of expr)")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.TypeScript.Templates.ForOfStatementTemplate : ForOfStatementTemplateBase {
    public PsiLanguageType Language { get; }
    public virtual PsiLanguageType get_Language();
}
[PostfixTemplateAttribute("if", "Checks boolean expression to be 'true'", "if (expr)")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.TypeScript.Templates.IfStatementTemplate : IfStatementTemplateBase {
    public PsiLanguageType Language { get; }
    public virtual PsiLanguageType get_Language();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.TypeScript.Templates.IntroduceFieldTemplate : IntroduceMemberTemplateBase`1<ITsMemberVariableDeclaration> {
    public string TemplateName { get; }
    public virtual string get_TemplateName();
    protected virtual PostfixTemplateBehavior CreateBehavior(IntroduceMemberPostfixTemplateInfo<ITsMemberVariableDeclaration> info);
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.TypeScript.Templates.IntroduceMemberTemplateBase`1 : JavaScriptPostfixTemplate {
    [NotNullAttribute]
public string TemplateName { get; }
    public virtual PostfixTemplateInfo TryCreateInfo(JavaScriptPostfixTemplateContext context);
    public abstract virtual string get_TemplateName();
    public sealed virtual PostfixTemplateBehavior CreateBehavior(PostfixTemplateInfo info);
    [NotNullAttribute]
protected abstract virtual PostfixTemplateBehavior CreateBehavior(IntroduceMemberPostfixTemplateInfo<T> info);
}
[PostfixTemplateAttribute("return", "Returns expression from current function", "return expr;")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.PostfixTemplates.TypeScript.Templates.ReturnStatementTemplate : ReturnStatementTemplateBase {
    public PsiLanguageType Language { get; }
    public virtual PsiLanguageType get_Language();
}
[DeclaredElementDescriptionProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.Presenter.DeclaredElementJsDocDescriptionProvider : DeclaredElementXmlDescriptionProviderBase {
    public int Priority { get; }
    public DeclaredElementJsDocDescriptionProvider(Lifetime lifetime, ISettingsCache settingsCache, ISettingsSchema settingsSchema, ISettingsOptimization settingsOptimization);
    public virtual Nullable`1<bool> IsElementObsolete(IDeclaredElement element, RichTextBlock& obsoleteDescription, DeclaredElementDescriptionStyle style);
    public virtual int get_Priority();
    protected virtual IPsiModule TryToGetPsiModule(IDeclaredElement element);
    protected virtual XmlNode GetXmlSummary(IDeclaredElement element);
    protected virtual XmlNode GetXmlDoc(IDeclaredElement element);
    private static IJsDocInfo GetJsDoc(IDeclaredElement element);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.QuickDoc.JavaScriptQuickDocPresenter : object {
    private IShellLocks myShellLocks;
    [NotNullAttribute]
private IList`1<DeclaredElementEnvoy`1<IJavaScriptTypeOwner>> myEnvoy;
    private ITheming myTheming;
    public JavaScriptQuickDocPresenter(ITheming theming, IEnumerable`1<IJavaScriptTypeOwner> elements, IShellLocks shellLocks);
    public sealed virtual IQuickDocPresenter Resolve(string id);
    public sealed virtual QuickDocTitleAndText GetHtml(PsiLanguageType presentationLanguage);
    private Tuple`2<IJavaScriptTypeOwner, XmlNode> GetElementAndDocs();
    private static XmlNode CreateRootNode();
    public sealed virtual string GetId();
    public sealed virtual void OpenInEditor(string navigationId);
    public sealed virtual void ReadMore(string navigationId);
    [CompilerGeneratedAttribute]
private Tuple`2<IJavaScriptTypeOwner, XmlNode> <GetHtml>b__5_1(object _);
}
[QuickDocProviderAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.QuickDoc.JavaScriptQuickDocProvider : object {
    private JavaScriptServices myServices;
    private IShellLocks myShellLocks;
    private ITheming myTheming;
    public JavaScriptQuickDocProvider(ITheming theming, JavaScriptServices services, IShellLocks shellLocks);
    public sealed virtual bool CanNavigate(IDataContext context);
    public sealed virtual void Resolve(IDataContext context, Action`2<IQuickDocPresenter, PsiLanguageType> resolved);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JavaScriptLikeBaseLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.QuickDoc.JavaScriptXmlDocHeaderPresenter : CommonXmlDocHeaderPresenter {
    public JavaScriptXmlDocHeaderPresenter(PsiLanguageType language);
    public virtual void Present(RichText header, DeclaredElementInstance declaredElementInstance, IPsiModule module, CrefManager crefManager, DeclaredElementPresenterTextStyles styles, ElementLinkCollector linkCollector, ITreeNode context);
    public virtual void Present(StringBuilder header, IDeclaredElement declaredElement, IPsiModule module, CrefManager crefManager);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JavaScriptLikeBaseLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.QuickDoc.JavaScriptXmlDocLocator : object {
    public virtual IDocCommentBlock FindCommentNode(IFile file, DocumentRange range);
}
public static class JetBrains.ReSharper.Feature.Services.JavaScript.QuickDoc.JsDocPresenterUtil : object {
    [NotNullAttribute]
public static DeclaredElementPresenterStyle MemberPresentationStyle;
    private static JsDocPresenterUtil();
}
[QuickDocProviderAttribute("-1", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.QuickDoc.JsonQuickDocProvider : object {
    private JsonSchemaManager mySchemaManager;
    private ITheming myTheming;
    private IXmlDocHtmlRenderer myHtmlRenderer;
    private IEnumerable`1<IJsonTooltipExtenderProvider> myTooltipExtenders;
    public JsonQuickDocProvider(JsonSchemaManager schemaManager, IEnumerable`1<IJsonTooltipExtenderProvider> jsonTooltipExtenders, Lifetime lifetime, ITheming theming, IXmlDocHtmlRenderer htmlRenderer);
    public sealed virtual bool CanNavigate(IDataContext context);
    public sealed virtual void Resolve(IDataContext context, Action`2<IQuickDocPresenter, PsiLanguageType> resolved);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JSon.JsonLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.QuickDoc.JsonXmlDocLocator : JavaScriptXmlDocLocator {
    public virtual IDocCommentBlock FindCommentNode(IFile file, DocumentRange range);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.FunctionLogicalItem : LogicalItemBase<IStatementsOwner> {
    public FunctionLogicalItem(TreeRange treeRange);
}
[RearrangeableElementTypeAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.RearrangeableArgumentType : SimpleSwapType`1<IExpressionOrSpread, IInvocationExpression> {
}
[RearrangeableElementTypeAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.RearrangeableArrayElementType : SimpleSwapType`1<IExpressionOrSpread, IArrayLiteral> {
}
[RearrangeableElementTypeAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.RearrangeableArrayElementTypeInJson : SimpleSwapType`1<IExpressionOrSpread, IArrayLiteral> {
}
[RearrangeableElementTypeAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.RearrangeableAssignmentExpressionOperandType : SimpleSwapType`1<IJavaScriptExpression, IAssignmentExpression> {
}
[RearrangeableElementTypeAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.RearrangeableBinaryExpressionOperandType : SimpleSwapType`1<IJavaScriptExpression, IBinaryExpression> {
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.RearrangeableBlockBase : RearrangeableJavaScriptLogicalItemBase`1<IStatementsOwner> {
    protected RearrangeableBlockBase(IReadOnlyList`1<ILogicalItem<IStatementsOwner>> selectedItems, IStatementsOwner holder, IReadOnlyList`1<ILogicalItem<IStatementsOwner>> holderItems);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.RearrangeableBlockBrace : RearrangeableBlockBase {
    [NotNullAttribute]
private IBlock myInnerBlock;
    private NestedBlock myTarget;
    [NotNullAttribute]
private IReadOnlyList`1<ILogicalItem<IStatementsOwner>> myInnerItems;
    [NotNullAttribute]
private IReadOnlyList`1<ILogicalItem<IStatementsOwner>> myOuterItems;
    public Direction SupportedDirections { get; }
    private RearrangeableBlockBrace(IReadOnlyList`1<ILogicalItem<IStatementsOwner>> selectedItems, IBlock innerBlock, NestedBlock target, IReadOnlyList`1<ILogicalItem<IStatementsOwner>> innerItems, IReadOnlyList`1<ILogicalItem<IStatementsOwner>> outerItems);
    public virtual Direction get_SupportedDirections();
    public virtual bool CanMove(Direction direction);
    public virtual ValueTuple`2<DocumentRange, ITreeRange> MoveUnderPsiTransaction(Direction direction);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.RearrangeableBlockItem : RearrangeableBlockBase {
    [CanBeNullAttribute]
private IJavaScriptStatement myFirstStatement;
    [CanBeNullAttribute]
private IJavaScriptStatement myLastStatement;
    private StatementsRange myActualRange;
    [CompilerGeneratedAttribute]
private IJavaScriptStatementsRange <StatementsRange>k__BackingField;
    public Direction SupportedDirections { get; }
    private IJavaScriptStatementsRange StatementsRange { get; }
    private RearrangeableBlockItem(IReadOnlyList`1<ILogicalItem<IStatementsOwner>> selectedItems, IStatementsOwner block, IReadOnlyList`1<ILogicalItem<IStatementsOwner>> blockItems);
    public virtual Direction get_SupportedDirections();
    [CompilerGeneratedAttribute]
private IJavaScriptStatementsRange get_StatementsRange();
    public virtual bool CanMove(Direction direction);
    private void SafeRemoveStatements();
    public virtual ValueTuple`2<DocumentRange, ITreeRange> MoveUnderPsiTransaction(Direction direction);
}
[RearrangeableElementTypeAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.RearrangeableCaseClause : SimpleSwapType`1<ICaseClause, ICaseClausesList> {
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.RearrangeableClassTailItem : RearrangeableJavaScriptLogicalItemBase`1<IClassTail> {
    [CompilerGeneratedAttribute]
private IDeclarationsRange <DeclarationsRange>k__BackingField;
    private IDeclarationsRange DeclarationsRange { get; }
    public Direction SupportedDirections { get; }
    private RearrangeableClassTailItem(IReadOnlyList`1<ILogicalItem<IClassTail>> selectedItems, IClassTail holder, IReadOnlyList`1<ILogicalItem<IClassTail>> holderItems);
    [CompilerGeneratedAttribute]
private IDeclarationsRange get_DeclarationsRange();
    public virtual Direction get_SupportedDirections();
    public virtual bool CanMove(Direction direction);
    public virtual ValueTuple`2<DocumentRange, ITreeRange> MoveUnderPsiTransaction(Direction direction);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.RearrangeableElseIfBranch : RearrangeableElementSwap`1<IIfStatement> {
    public DocumentRange Range { get; }
    private RearrangeableElseIfBranch(IIfStatement element);
    public virtual DocumentRange get_Range();
    protected virtual IIfStatement Swap(IIfStatement child, IIfStatement target);
    private static IIfStatement SwapBranch(IIfStatement child, IIfStatement parent);
    protected virtual IEnumerable`1<IIfStatement> GetSiblings();
}
[RearrangeableElementTypeAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.RearrangeableExpressionInCompoundType : SimpleSwapType`1<IJavaScriptExpression, ICompoundExpression> {
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.RearrangeableIfCondition : RearrangeableElementSwap`1<ICompoundExpression> {
    private RearrangeableIfCondition(ICompoundExpression element);
    protected virtual IEnumerable`1<ICompoundExpression> GetSiblings();
    [NotNullAttribute]
private static IReadOnlyList`1<ICompoundExpression> BuildConditionsList(IIfStatement ifStatement);
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.RearrangeableJavaScriptLogicalItemBase`1 : RearrangeableLogicalItemBase`1<THolder> {
    protected RearrangeableJavaScriptLogicalItemBase`1(IReadOnlyList`1<ILogicalItem<THolder>> selectedItems, THolder holder, IReadOnlyList`1<ILogicalItem<THolder>> holderItems);
}
[RearrangeableElementTypeAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.RearrangeableLiteralObjectPropertyType : SimpleSwapType`1<IObjectPropertyDeclaration, IObjectLiteral> {
}
[RearrangeableElementTypeAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.RearrangeableLiteralObjectPropertyTypeInJson : SimpleSwapType`1<IObjectPropertyDeclaration, IObjectLiteral> {
}
[RearrangeableElementTypeAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.RearrangeableNamedExportsList : SimpleSwapType`1<IExportSpecifier, IExportClause> {
}
[RearrangeableElementTypeAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.RearrangeableNamedImportsList : SimpleSwapType`1<IImportSpecifier, INamedImportsList> {
}
[RearrangeableElementTypeAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.RearrangeableParameterType : SimpleSwapType`1<IJavaScriptParameterDeclaration, IFunctionExpressionSignature> {
}
[RearrangeableElementTypeAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.RearrangeableTemplateArgumentType : SimpleSwapType`1<IJavaScriptExpression, ITemplateWithSubstitution> {
}
[RearrangeableElementTypeAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.RearrangeableVariableDeclaration : SimpleSwapType`1<IVariableDeclaration, IVariableDeclarationList> {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.RearrangeJavaScriptSpecialCare : object {
    public virtual bool IsFunctionalLogicalItem(ITreeNode cursor);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JavaScriptLikeBaseLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.StatementsOwnerUtil : object {
    private IStatementOwner[] myStatementOwners;
    public Nullable`1<NestedBlock> GetFirstNestedBlock(IJavaScriptStatement statement);
    protected virtual IEnumerable`1<IStatementOwner> EnumerateStatementOwners();
    public Nullable`1<NestedBlock> GetPreviousNestedBlock(IJavaScriptStatement statement);
    public Nullable`1<NestedBlock> GetNextNestedBlock(IJavaScriptStatement statement);
    public Nullable`1<NestedBlock> GetContainingNestedBlock(IJavaScriptStatement statement);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.StatementsOwnerUtil/<GetExpressionsInStatement>d__8")]
protected static IEnumerable`1<IJavaScriptExpression> GetExpressionsInStatement(IJavaScriptStatement statement);
}
[RearrangeableElementTypeAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.TypeScript.RearrangeableConstructorOverloadType : SimpleSwapType`1<ITsConstructorOverloadDeclaration, ITsConstructorDeclaration> {
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.TypeScript.RearrangeableEnumItem : RearrangeableJavaScriptLogicalItemBase`1<ITsEnumDeclaration> {
    [CompilerGeneratedAttribute]
private DeclarationsRange <DeclarationsRange>k__BackingField;
    private DeclarationsRange DeclarationsRange { get; }
    public Direction SupportedDirections { get; }
    private RearrangeableEnumItem(IReadOnlyList`1<ILogicalItem<ITsEnumDeclaration>> selectedItems, ITsEnumDeclaration holder, IReadOnlyList`1<ILogicalItem<ITsEnumDeclaration>> holderItems);
    [CompilerGeneratedAttribute]
private DeclarationsRange get_DeclarationsRange();
    public virtual Direction get_SupportedDirections();
    public virtual bool CanMove(Direction direction);
    public virtual ValueTuple`2<DocumentRange, ITreeRange> MoveUnderPsiTransaction(Direction direction);
}
[RearrangeableElementTypeAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.TypeScript.RearrangeableImplementsType : SimpleSwapType`1<ITsTypeUsage, ITsHeritageTypeList> {
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.TypeScript.RearrangeableInterfaceItem : RearrangeableJavaScriptLogicalItemBase`1<ITsTypeMemberDeclarationOwner> {
    [CompilerGeneratedAttribute]
private IDeclarationsRange <DeclarationsRange>k__BackingField;
    private IDeclarationsRange DeclarationsRange { get; }
    public Direction SupportedDirections { get; }
    private RearrangeableInterfaceItem(IReadOnlyList`1<ILogicalItem<ITsTypeMemberDeclarationOwner>> selectedItems, ITsTypeMemberDeclarationOwner holder, IReadOnlyList`1<ILogicalItem<ITsTypeMemberDeclarationOwner>> holderItems);
    [CompilerGeneratedAttribute]
private IDeclarationsRange get_DeclarationsRange();
    public virtual Direction get_SupportedDirections();
    public virtual bool CanMove(Direction direction);
    public virtual ValueTuple`2<DocumentRange, ITreeRange> MoveUnderPsiTransaction(Direction direction);
}
[RearrangeableElementTypeAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.TypeScript.RearrangeableIntersectionTypeMember : SimpleSwapType`1<ITsTypeUsage, ITsIntersectionTypeUsage> {
}
[RearrangeableElementTypeAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.TypeScript.RearrangeableMemberOverloadType : SimpleSwapType`1<ITsMemberFunctionOverloadDeclaration, ITsMemberFunctionDeclaration> {
}
[RearrangeableElementTypeAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.TypeScript.RearrangeableNamedExportsList : SimpleSwapType`1<ITsExportSpecifier, ITsExportClause> {
}
[RearrangeableElementTypeAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.TypeScript.RearrangeableNamedImportsList : SimpleSwapType`1<ITsImportSpecifier, ITsNamedImportsList> {
}
[RearrangeableElementTypeAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.TypeScript.RearrangeableParameterType : SimpleSwapType`1<ITsParameterDeclaration, ITsParametersList> {
}
[RearrangeableElementTypeAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.TypeScript.RearrangeableTypeArgument : SimpleSwapType`1<ITsTypeUsage, ITsTypeArgumentList> {
}
[RearrangeableElementTypeAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.TypeScript.RearrangeableTypeParameter : SimpleSwapType`1<ITsTypeParameterDeclaration, ITsTypeParameters> {
}
[RearrangeableElementTypeAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.TypeScript.RearrangeableUnionTypeMember : SimpleSwapType`1<ITsTypeUsage, ITsUnionTypeUsage> {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.TypeScript.RearrangeTypeScriptSpecialCare : RearrangeJavaScriptSpecialCare {
    public virtual bool IsFunctionalLogicalItem(ITreeNode cursor);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.TypeScript.TypeScriptLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.TypeScript.TsStatementsOwnerUtil : StatementsOwnerUtil {
    private IStatementOwner[] myStatementOwners;
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.RearrangeCode.TypeScript.TsStatementsOwnerUtil/<EnumerateStatementOwners>d__0")]
protected virtual IEnumerable`1<IStatementOwner> EnumerateStatementOwners();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<IStatementOwner> <>n__0();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RegExp.JsonRegExpInjectedPsiProvider : LiteralsInjectionPsiProvider`2<JsonLanguage, JsRegexLanguage> {
    public bool ProvidedLanguageCanHaveNestedInjects { get; }
    public JsonRegExpInjectedPsiProvider(JsonRegExpInjectionProvider injectorProvider);
    public virtual bool get_ProvidedLanguageCanHaveNestedInjects();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RegExp.JsonRegExpInjectionProvider : JsRegExpInjectionProviderBase`1<IJavaScriptTreeNodeWithStringLiteral> {
    public PsiLanguageType SupportedOriginalLanguage { get; }
    public bool SupportsInjectionIntention { get; }
    public JsonRegExpInjectionProvider(Lifetime lifetime, ISolution solution, IPersistentIndexManager persistentIndexManager, InjectionNodeProvidersViewer providersViewer, JavaScriptLiteralInjectionTarget injectionTarget);
    public virtual bool IsSupportedLiteralForInjection(ITreeNode originalNode);
    public virtual PsiLanguageType get_SupportedOriginalLanguage();
    public virtual bool get_SupportsInjectionIntention();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RegExp.JsRegExpInjectedPsiProvider : LiteralsInjectionPsiProvider`2<JavaScriptLanguage, JsRegexLanguage> {
    public bool ProvidedLanguageCanHaveNestedInjects { get; }
    public JsRegExpInjectedPsiProvider(JsRegExpInjectionProvider injectorProvider);
    public virtual bool get_ProvidedLanguageCanHaveNestedInjects();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RegExp.JsRegExpInjectionProvider : JsRegExpInjectionProviderBase`1<IJavaScriptLiteralExpression> {
    public JsRegExpInjectionProvider(Lifetime lifetime, ISolution solution, IPersistentIndexManager persistentIndexManager, InjectionNodeProvidersViewer providersViewer, JavaScriptLiteralInjectionTarget injectionTarget);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.RegExp.JsRegExpInjectionProviderBase`1 : LanguageInjectorProviderInLiteralsWithRangeMarkersBase`3<IJsRegexFile, TNode, JavaScriptLiteralInjectionTarget> {
    public bool CanRegenerate { get; }
    public string ProvidedInjectionID { get; }
    public PsiLanguageType SupportedOriginalLanguage { get; }
    public PsiLanguageType ProvidedLanguage { get; }
    public IconId Icon { get; }
    public JsRegExpInjectionProviderBase`1(Lifetime lifetime, ISolution solution, IPersistentIndexManager persistentIndexManager, InjectionNodeProvidersViewer providersViewer, JavaScriptLiteralInjectionTarget injectionTarget);
    public virtual bool IsSupportedLiteralForInjection(ITreeNode originalNode);
    public virtual ITreeNode UpdateNode(IFile generatedFile, ITreeNode generatedNode, ITreeNode originalNode, Int32& length, string prefix, string suffix);
    public virtual bool get_CanRegenerate();
    public virtual string get_ProvidedInjectionID();
    public virtual PsiLanguageType get_SupportedOriginalLanguage();
    public virtual PsiLanguageType get_ProvidedLanguage();
    public virtual IconId get_Icon();
    public virtual int GetStartOffset(ITreeNode originalNode);
    public virtual int GetEndOffset(ITreeNode originalNode);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RegExp.NodeProviders.JsonRegExpBySchemaNodeProvider : object {
    [CompilerGeneratedAttribute]
private IJsonSchemaManager <schemaManager>P;
    public PsiLanguageType SupportedOriginalLanguage { get; }
    public string ProvidedLanguageID { get; }
    public string Summary { get; }
    public string Description { get; }
    public string Guid { get; }
    public String[] Words { get; }
    public String[] Attributes { get; }
    public JsonRegExpBySchemaNodeProvider(IJsonSchemaManager schemaManager);
    public sealed virtual bool Check(ITreeNode node, ILiteralsInjectionDataProvider injectedContext, Object& data);
    public sealed virtual string GetPrefix(ITreeNode node, object data);
    public sealed virtual string GetSuffix(ITreeNode node, object data);
    public sealed virtual PsiLanguageType get_SupportedOriginalLanguage();
    public sealed virtual string get_ProvidedLanguageID();
    public sealed virtual string get_Summary();
    public sealed virtual string get_Description();
    public sealed virtual string get_Guid();
    public sealed virtual String[] get_Words();
    public sealed virtual String[] get_Attributes();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RegExp.NodeProviders.JsRegExpInRegexLiteralNodeProvider : object {
    public PsiLanguageType SupportedOriginalLanguage { get; }
    public string ProvidedLanguageID { get; }
    public string Summary { get; }
    public string Description { get; }
    public string Guid { get; }
    public String[] Words { get; }
    public String[] Attributes { get; }
    public sealed virtual bool Check(ITreeNode node, ILiteralsInjectionDataProvider injectedContext, Object& data);
    public sealed virtual string GetPrefix(ITreeNode node, object data);
    public sealed virtual string GetSuffix(ITreeNode node, object data);
    public sealed virtual PsiLanguageType get_SupportedOriginalLanguage();
    public sealed virtual string get_ProvidedLanguageID();
    public sealed virtual string get_Summary();
    public sealed virtual string get_Description();
    public sealed virtual string get_Guid();
    public sealed virtual String[] get_Words();
    public sealed virtual String[] get_Attributes();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RegExp.NodeProviders.JsRegExpMethodsNodeProvider : object {
    public PsiLanguageType SupportedOriginalLanguage { get; }
    public string ProvidedLanguageID { get; }
    public string Summary { get; }
    public string Description { get; }
    public string Guid { get; }
    public String[] Words { get; }
    public String[] Attributes { get; }
    public static bool IsRegexPattern(IJavaScriptLiteralExpression jsLiteral);
    public sealed virtual bool Check(ITreeNode node, ILiteralsInjectionDataProvider injectedContext, Object& data);
    public sealed virtual string GetPrefix(ITreeNode node, object data);
    public sealed virtual string GetSuffix(ITreeNode node, object data);
    public sealed virtual PsiLanguageType get_SupportedOriginalLanguage();
    public sealed virtual string get_ProvidedLanguageID();
    public sealed virtual string get_Summary();
    public sealed virtual string get_Description();
    public sealed virtual string get_Guid();
    public sealed virtual String[] get_Words();
    public sealed virtual String[] get_Attributes();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.JavaScript.RegExp.ZoneMarker : object {
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.ReparseContextService.JavaScriptReparseContext : object {
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.ReparseContextService.KeywordCompletionReparseContext : JavaScriptReparseContext {
    public KeywordCompletionReparseContext Create(IJavaScriptFile file);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.Search.JavaScriptFindUsagesSectionProvider : SearchDescriptorSectionProvider {
    public virtual bool IsApplicable(IOccurrenceBrowserDescriptor descriptor);
    private static IList`1<IJavaScriptDeclaredElement> GetSearchElements(IOccurrenceBrowserDescriptor descriptor);
    public virtual ICollection`1<GroupingSectionId> GetGroupSectionId(IOccurrence occurrence, IOccurrenceBrowserDescriptor descriptor);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.JavaScript.Search.ZoneMarker : object {
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.SelectEmbracingConstruct.JavaScriptDotSelection : DotSelection`1<IJavaScriptFile> {
    private TreeOffset myOffset;
    public TreeTextRange TreeRange { get; }
    public JavaScriptDotSelection(IJavaScriptFile fileNode, TreeOffset offset, bool selectBetterToken, bool useCamelHumps, bool appendInjectedPsi);
    protected virtual ISelectedRange GetParentInternal(ITokenNode tokenNode);
    private ISelectedRange TryCreateXmlDocSelection(ITokenNode tokenNode);
    protected virtual ISelectedRange CreateTokenPartSelection(ITokenNode tokenNode, TreeTextRange treeTextRange);
    protected virtual ISelectedRange CreateTreeNodeSelection(ITokenNode tokenNode);
    protected virtual bool IsWordToken(ITokenNode token);
    protected virtual bool IsLiteralToken(ITokenNode token);
    protected virtual bool IsSpaceToken(ITokenNode token);
    protected virtual bool IsNewLineToken(ITokenNode token);
    public sealed virtual TreeTextRange get_TreeRange();
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.SelectEmbracingConstruct.JavaScriptElseBlockSelection : JavaScriptIfSelectionBase {
    public ISelectedRange Parent { get; }
    internal JavaScriptElseBlockSelection(IIfStatement ifStatement);
    public virtual ISelectedRange get_Parent();
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.SelectEmbracingConstruct.JavaScriptElseIfBlockSelection : JavaScriptIfSelectionBase {
    public ISelectedRange Parent { get; }
    internal JavaScriptElseIfBlockSelection(IIfStatement outerIfStatement, IIfStatement innerIfStatement);
    public virtual ISelectedRange get_Parent();
}
internal abstract class JetBrains.ReSharper.Feature.Services.JavaScript.SelectEmbracingConstruct.JavaScriptIfSelectionBase : SelectedRangeBase`1<IJavaScriptFile> {
    private ITreeNode myFirstNode;
    private IIfStatement myIfStatement;
    private ITreeNode myLastNode;
    protected IIfStatement IfNode { get; }
    public ITreeNode FirstNode { get; }
    public ITreeNode LastNode { get; }
    public ExtendToTheWholeLinePolicy ExtendToWholeLine { get; }
    public TreeTextRange TreeRange { get; }
    protected JavaScriptIfSelectionBase(IIfStatement ifStatement, ITreeNode first, ITreeNode last);
    protected IIfStatement get_IfNode();
    public ITreeNode get_FirstNode();
    public ITreeNode get_LastNode();
    public virtual ExtendToTheWholeLinePolicy get_ExtendToWholeLine();
    public sealed virtual TreeTextRange get_TreeRange();
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.SelectEmbracingConstruct.JavaScriptIfThenBlockSelection : JavaScriptIfSelectionBase {
    public ISelectedRange Parent { get; }
    public JavaScriptIfThenBlockSelection(IIfStatement ifStatement);
    public virtual ISelectedRange get_Parent();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JavaScriptLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.SelectEmbracingConstruct.JavaScriptSelectEmbracingConstructProvider : JavaScriptSelectEmbracingConstructProviderBase {
    public JavaScriptSelectEmbracingConstructProvider(ISettingsStore settingsStore);
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.SelectEmbracingConstruct.JavaScriptSelectEmbracingConstructProviderBase : object {
    private ISettingsStore mySettingsStore;
    public JavaScriptSelectEmbracingConstructProviderBase(ISettingsStore settingsStore);
    public sealed virtual bool IsAvailable(IPsiSourceFile sourceFile);
    public virtual ISelectedRange GetSelectedRange(IPsiSourceFile sourceFile, DocumentRange documentRange);
    protected ISelectedRange GetSelectedRange(IJavaScriptFile file, DocumentRange documentRange);
    public static ISelectedRange GetParentRange(IJavaScriptFile fileNode, ITreeNode firstNode, ITreeNode lastNode);
    public static ISelectedRange BuildNodeSelection(IJavaScriptFile fileNode, ITreeNode treeNode);
    private static ISelectedRange ExtendRangeSelection(IJavaScriptFile fileNode, ITreeNode first, ITreeNode last);
    private static bool IsNewLine(ITreeNode node);
    private static bool IsWhitespace(ITreeNode node);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.SelectEmbracingConstruct.JavaScriptTokenPartSelection : TokenPartSelection`1<IJavaScriptFile> {
    public ISelectedRange Parent { get; }
    public JavaScriptTokenPartSelection(IJavaScriptFile fileNode, TreeTextRange treeTextRange, ITokenNode token);
    public virtual ISelectedRange get_Parent();
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.SelectEmbracingConstruct.JavaScriptTreeNodeSelection : TreeNodeSelection`1<IJavaScriptFile> {
    public ISelectedRange Parent { get; }
    public ExtendToTheWholeLinePolicy ExtendToWholeLine { get; }
    public JavaScriptTreeNodeSelection(IJavaScriptFile fileNode, ITreeNode node);
    public virtual ISelectedRange get_Parent();
    public virtual ExtendToTheWholeLinePolicy get_ExtendToWholeLine();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.SelectEmbracingConstruct.JavaScriptTreeRangeSelection : TreeRangeSelection`1<IJavaScriptFile> {
    public ISelectedRange Parent { get; }
    public JavaScriptTreeRangeSelection(IJavaScriptFile fileNode, ITreeNode first, ITreeNode last);
    public virtual ISelectedRange get_Parent();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JSon.JsonLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.SelectEmbracingConstruct.JsonSelectEmbracingConstructProvider : JavaScriptSelectEmbracingConstructProviderBase {
    public JsonSelectEmbracingConstructProvider(ISettingsStore settingsStore);
    public virtual ISelectedRange GetSelectedRange(IPsiSourceFile sourceFile, DocumentRange documentRange);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralNavigation.JavaScriptBackwardStructuralNavigationVisitor : JavaScriptStructuralNavigationVisitorBase {
    public virtual void VisitIdentifierExpression(IIdentifierExpression identifierExpression, StructuralNavigationContextBase context);
    public virtual void VisitJavaScriptStatement(IJavaScriptStatement statement, StructuralNavigationContextBase context);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralNavigation.JavaScriptStructuralNavigationItemValidator : TokenTypeBasedStructuralNavigationItemValidator {
    public JavaScriptStructuralNavigationItemValidator(IFile file, DocumentRange currentSelection, bool acceptCurrentSelection);
    protected virtual bool IsItemAccepted(DocumentRange range);
    protected virtual bool CanBeTrimmed(ITokenNode tokenNode);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JavaScriptLikeBaseLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralNavigation.JavaScriptStructuralNavigationItemValidatorProvider : object {
    public sealed virtual IStructuralNavigationItemValidator GetValidator(IFile file, DocumentRange currentSelection, bool acceptCurrentSelection);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JavaScriptLikeBaseLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralNavigation.JavaScriptStructuralNavigationManager : object {
    public sealed virtual IStructuralNavigationItem MoveToNext(StructuralNavigationContextBase context);
    public sealed virtual IStructuralNavigationItem MoveToPrev(StructuralNavigationContextBase context);
    [CanBeNullAttribute]
private static IStructuralNavigationItem GetNextSelection(JavaScriptStructuralNavigationVisitorBase visitor, StructuralNavigationContextBase context);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralNavigation.JavaScriptStructuralNavigationStringTokenDisabler : JavaScriptStructuralNavigationStringTokenDisablerBase {
    protected virtual bool IsApplicable(ProjectFileType projectFileType);
}
internal abstract class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralNavigation.JavaScriptStructuralNavigationStringTokenDisablerBase : CLikeLanguageStructuralNavigationStringTokenDisablerBase {
    public virtual bool IsKnownToken(TokenNodeType tokenNodeType, ProjectFileType projectFileType);
    protected virtual bool IsStringLiteralToken(TokenNodeType tokenNodeType);
    protected virtual bool IsEndOfLineComment(TokenNodeType tokenNodeType);
    protected virtual bool IsBlockComment(TokenNodeType tokenNodeType);
    protected virtual string GetStringLiteralStartBorder(TokenNodeType tokenNodeType, CachingLexer lexer);
    protected virtual string GetStringLiteralEndBorder(TokenNodeType tokenNodeType, CachingLexer lexer);
    protected abstract virtual bool IsApplicable(ProjectFileType projectFileType);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralNavigation.JavaScriptStructuralNavigationVisitor : JavaScriptStructuralNavigationVisitorBase {
    public virtual void VisitIdentifierExpression(IIdentifierExpression identifierExpression, StructuralNavigationContextBase context);
    public virtual void VisitJavaScriptStatement(IJavaScriptStatement statement, StructuralNavigationContextBase context);
}
internal abstract class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralNavigation.JavaScriptStructuralNavigationVisitorBase : TreeNodeVisitor`1<StructuralNavigationContextBase> {
    private static NodeTypeSet ourNavigateableTokens;
    private static JavaScriptStructuralNavigationVisitorBase();
    public virtual void VisitNode(ITreeNode node, StructuralNavigationContextBase context);
    public virtual void VisitJavaScriptExpression(IJavaScriptExpression javaScriptExpressionParam, StructuralNavigationContextBase context);
    public virtual void VisitReferenceExpression(IReferenceExpression referenceExpressionParam, StructuralNavigationContextBase context);
    public virtual void VisitExpressionOrSpread(IExpressionOrSpread expressionOrSpreadParam, StructuralNavigationContextBase context);
    public virtual void VisitJavaScriptStatement(IJavaScriptStatement javaScriptStatementParam, StructuralNavigationContextBase context);
    public virtual void VisitBlock(IBlock blockParam, StructuralNavigationContextBase context);
    public virtual void VisitCatchBlock(ICatchBlock catchBlockParam, StructuralNavigationContextBase context);
    public virtual void VisitDoStatement(IDoStatement doStatementParam, StructuralNavigationContextBase context);
    public virtual void VisitWhileStatement(IWhileStatement whileStatementParam, StructuralNavigationContextBase context);
    public virtual void VisitIfStatement(IIfStatement ifStatementParam, StructuralNavigationContextBase context);
    public virtual void VisitForInitializer(IForInitializer forInitializerParam, StructuralNavigationContextBase context);
    public virtual void VisitForeachInitializer(IForeachInitializer foreachInitializerParam, StructuralNavigationContextBase context);
    public virtual void VisitThisExpression(IThisExpression thisExpressionParam, StructuralNavigationContextBase context);
    public virtual void VisitNoSubstitutionTemplate(INoSubstitutionTemplate noSubstitutionTemplateParam, StructuralNavigationContextBase context);
    public virtual void VisitTaggedTemplateExpression(ITaggedTemplateExpression taggedTemplateExpressionParam, StructuralNavigationContextBase context);
    public virtual void VisitTemplateWithSubstitution(ITemplateWithSubstitution templateWithSubstitutionParam, StructuralNavigationContextBase context);
    public virtual void VisitCompoundExpression(ICompoundExpression compoundExpressionParam, StructuralNavigationContextBase context);
    public virtual void VisitBinaryExpression(IBinaryExpression binaryExpression, StructuralNavigationContextBase context);
    public virtual void VisitPrefixExpression(IPrefixExpression prefixExpressionParam, StructuralNavigationContextBase context);
    public virtual void VisitLambdaExpression(ILambdaExpression lambdaExpressionParam, StructuralNavigationContextBase context);
    public virtual void VisitFunctionExpression(IFunctionExpression functionExpressionParam, StructuralNavigationContextBase context);
    public virtual void VisitNewExpression(INewExpression newExpressionParam, StructuralNavigationContextBase context);
    public virtual void VisitNamedImportsList(INamedImportsList namedImportsListParam, StructuralNavigationContextBase context);
    public virtual void VisitNamespaceImportClause(INamespaceImportClause namespaceImportClauseParam, StructuralNavigationContextBase context);
    public virtual void VisitImportSpecifier(IImportSpecifier importSpecifierParam, StructuralNavigationContextBase context);
    public virtual void VisitExportClause(IExportClause exportClauseParam, StructuralNavigationContextBase context);
    public virtual void VisitExportSpecifier(IExportSpecifier exportSpecifierParam, StructuralNavigationContextBase context);
    public virtual void VisitExportAllSpecification(IExportAllSpecification exportAllSpecificationParam, StructuralNavigationContextBase context);
    public virtual void VisitClassElement(IClassElement classElementParam, StructuralNavigationContextBase context);
    public virtual void VisitAwaitExpression(IAwaitExpression awaitExpressionParam, StructuralNavigationContextBase context);
    public virtual void VisitClassDeclaration(IClassDeclaration classDeclarationParam, StructuralNavigationContextBase context);
    public virtual void VisitBaseTypeClause(IBaseTypeClause baseTypeClauseParam, StructuralNavigationContextBase context);
    public virtual void VisitDecorator(IDecorator decoratorParam, StructuralNavigationContextBase context);
    public virtual void VisitDecoratorList(IDecoratorList decoratorListParam, StructuralNavigationContextBase context);
    public virtual void VisitIndexExpression(IIndexExpression indexExpressionParam, StructuralNavigationContextBase context);
    public virtual void VisitBindingPattern(IBindingPattern bindingPatternParam, StructuralNavigationContextBase context);
    public virtual void VisitObjectLiteralBindingPropertyDeclaration(IObjectLiteralBindingPropertyDeclaration objectLiteralBindingPropertyDeclarationParam, StructuralNavigationContextBase context);
    public virtual void VisitObjectLiteralBindingPropertyRestDeclaration(IObjectLiteralBindingPropertyRestDeclaration objectLiteralBindingPropertyRestDeclarationParam, StructuralNavigationContextBase context);
    public virtual void VisitArrayLiteralAssignmentPattern(IArrayLiteralAssignmentPattern arrayLiteralAssignmentPatternParam, StructuralNavigationContextBase context);
    public virtual void VisitObjectLiteralAssignmentPattern(IObjectLiteralAssignmentPattern objectLiteralAssignmentPatternParam, StructuralNavigationContextBase context);
    public virtual void VisitObjectLiteralAssignmentPatternPropertyDeclaration(IObjectLiteralAssignmentPatternPropertyDeclaration objectLiteralAssignmentPatternPropertyDeclarationParam, StructuralNavigationContextBase context);
    public virtual void VisitObjectPropertyDeclaration(IObjectPropertyDeclaration objectPropertyDeclarationParam, StructuralNavigationContextBase context);
    public virtual void VisitVariableStatement(IVariableStatement variableStatementParam, StructuralNavigationContextBase context);
    public virtual void VisitLexicalDeclaration(ILexicalDeclaration lexicalDeclarationParam, StructuralNavigationContextBase context);
    public virtual void VisitBreakStatement(IBreakStatement breakStatementParam, StructuralNavigationContextBase context);
    public virtual void VisitContinueStatement(IContinueStatement continueStatementParam, StructuralNavigationContextBase context);
    public virtual void VisitCaseClause(ICaseClause caseClauseParam, StructuralNavigationContextBase context);
    public virtual void VisitJavaScriptParameterDeclaration(IJavaScriptParameterDeclaration javaScriptParameterDeclarationParam, StructuralNavigationContextBase context);
    private void HandleIdentifier(StructuralNavigationContextBase context, ITokenNode tokenNode);
    private void HandleJsParametersOwnerLParenth(StructuralNavigationContextBase context, IJsParametersOwner jsParametersOwner);
    private void HandleObjectLiteralLBrace(StructuralNavigationContextBase context, IObjectLiteral objectLiteral);
    protected internal void HandleLBrace(StructuralNavigationContextBase context, ITokenNode lBrace, ITokenNode rBrace);
    protected internal void HandleLBracket(StructuralNavigationContextBase context, ITokenNode lBracket, ITokenNode rBracket);
    private void HandleInvocationLParenth(StructuralNavigationContextBase context, IInvocationExpression invocationExpression);
    private void HandleForStatement(StructuralNavigationContextBase context, IForStatement forStatement, ITreeNode node, ITokenNode tokenNode);
    private static void HandleCommentNode(IJavaScriptCommentNode commentNode, StructuralNavigationContextBase context);
    private void HandleTemplateWithSubsctitution(StructuralNavigationContextBase context, ITokenNode tokenNode);
    public bool HandleExportDefaultFunction(StructuralNavigationContextBase context, ITokenNode exportNode, IExportSpecification exportSpecification);
    protected virtual void HandleExportStatement(StructuralNavigationContextBase context, ITokenNode exportNode);
    protected virtual void HandleString(StructuralNavigationContextBase context, ITreeNode node);
    private void HandleComma(StructuralNavigationContextBase context, ITokenNode tokenNode);
    protected virtual bool IsNodeCommaSeparatedList(ITreeNode node, Boolean& selectItemWithComma);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.StructuralNavigation.JavaScriptStructuralNavigationVisitorBase/<GetTupleLBorderOuterRanges>d__63")]
protected internal IEnumerable`1<IStructuralNavigationItem> GetTupleLBorderOuterRanges(ITokenNode leftBorder, ITokenNode rightBorder, TokenNodeType rightBorderType, bool selectItemWithComma, Func`1<ITreeNode> getNext);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.StructuralNavigation.JavaScriptStructuralNavigationVisitorBase/<GetTupleLBorderInnerRanges>d__64")]
private IEnumerable`1<IStructuralNavigationItem> GetTupleLBorderInnerRanges(ITreeNode leftBorder, TokenNodeType rightBorderType, bool selectItemWithComma, Func`1<ITreeNode> getNext);
    [CanBeNullAttribute]
protected internal IStructuralNavigationItem GetEmptyBordersInnerCaretPosition(ITreeNode leftBorder, ITreeNode rightBorderOrComma, Nullable`1<TreeOffset> preferedRangeStart);
    [CanBeNullAttribute]
private static IStructuralNavigationItem GetAllBlockStatementsItem(IBlock blockParam);
    [CanBeNullAttribute]
private static IStructuralNavigationItem GetCaretPositionBetweenTwoNodesIfMultiLine(ITreeNode firstNode, ITreeNode secondNode);
    [CanBeNullAttribute]
protected static IStructuralNavigationItem GetElseWithBlockItem(IJavaScriptStatement statement);
    [CanBeNullAttribute]
private static IStructuralNavigationItem GetFinallyWithBlockItem(IBlock blockParam);
    [CanBeNullAttribute]
protected internal static ITreeNode GetLastNotSemiChild(ITreeNode node);
    protected internal static ITreeNode GetNextSiblingSemiOrSelf(ITreeNode node);
    protected internal static ITreeNode GetNextSiblingByTypeOrSelf(ITreeNode node, TokenNodeType type);
    [CanBeNullAttribute]
private static IStructuralNavigationItem GetAdjacentLineComments(IJavaScriptCommentNode node);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.StructuralNavigation.JavaScriptStructuralNavigationVisitorBase/<GetCommentSiblings>d__74")]
private static IEnumerable`1<IJavaScriptCommentNode> GetCommentSiblings(int indentingLength, IEnumerable`1<ITreeNode> siblings);
    private static int GetIndentingLength(ITreeNode node);
    protected IStructuralNavigationItem GetRangeWithoutBorder(ITreeNode node, int borderWidth);
    protected static void TryAddInvocationRange(StructuralNavigationContextBase context, IIdentifierExpression identifierExpression);
    protected internal void TryAddResult(StructuralNavigationContextBase context, TNode treeNode);
    protected void TryAddWithEmptyPosition(StructuralNavigationContextBase context, TNode node, ITreeNode condition, ITreeNode lPar);
    protected internal void TryAddTreeRangeAndNodeAndRest(StructuralNavigationContextBase context, ITokenNode node, ITreeNode rangeEnd);
    protected internal void TryAddTreeRangeFromNodeTillEnd(StructuralNavigationContextBase context, ITokenNode node, ITreeNode rangeEnd);
    protected internal void TryAddTreeRangeAfterNodeTillEnd(StructuralNavigationContextBase context, ITokenNode node);
    protected static bool IsStatementMainNode(ICompoundExpression treeNode);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JsDoc.JsDocLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralNavigation.JsDoc.JsDocStructuralNavigationManager : object {
    public sealed virtual IStructuralNavigationItem MoveToNext(StructuralNavigationContextBase context);
    public sealed virtual IStructuralNavigationItem MoveToPrev(StructuralNavigationContextBase context);
    [CanBeNullAttribute]
private static IStructuralNavigationItem GetNextSelection(JsDocStructuralNavigationVisitor visitor, StructuralNavigationContextBase context);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralNavigation.JsDoc.JsDocStructuralNavigationVisitor : JsDocTreeNodeVisitor`1<StructuralNavigationContextBase> {
    public virtual void VisitJsDocDescription(IJsDocDescription jsDocDescriptionParam, StructuralNavigationContextBase context);
    public virtual void VisitJsDocTag(IJsDocTag jsDocTagParam, StructuralNavigationContextBase context);
    public virtual void VisitPropertyName(IPropertyName propertyNameParam, StructuralNavigationContextBase context);
    protected void TryAddResult(StructuralNavigationContextBase context, TNode treeNode);
    protected void TryAddWithPrevAndWithoutTrailingAsterisks(StructuralNavigationContextBase context, TNode treeNode);
    protected void TryAddWithoutTrailingAsterisks(StructuralNavigationContextBase context, TNode treeNode);
    [CanBeNullAttribute]
private ITreeNode GetPrevAsterisks(ITreeNode treeNode);
    [CanBeNullAttribute]
private ITreeNode GetLastChildAsterisks(ITreeNode treeNode);
    [NotNullAttribute]
private ITreeNode GetLastChildNotAsterisks(ITreeNode treeNode);
    private ITreeNode GetPreviousMeaningfulNode(ITreeNode treeNode, bool includeThisNode);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralNavigation.JsDoc.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JSon.JsonLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralNavigation.JSon.JSonStructuralNavigationManager : object {
    public sealed virtual IStructuralNavigationItem MoveToNext(StructuralNavigationContextBase context);
    public sealed virtual IStructuralNavigationItem MoveToPrev(StructuralNavigationContextBase context);
    [CanBeNullAttribute]
private static IStructuralNavigationItem GetNextSelection(JSonStructuralNavigationVisitor visitor, StructuralNavigationContextBase context);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralNavigation.JSon.JsonStructuralNavigationStringTokenDisabler : JavaScriptStructuralNavigationStringTokenDisablerBase {
    public virtual bool IsWithinStringLiteralContent(CachingLexer lexer, TextRange selectedRange);
    protected virtual bool IsApplicable(ProjectFileType projectFileType);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralNavigation.JSon.JSonStructuralNavigationVisitor : JavaScriptStructuralNavigationVisitorBase {
    protected virtual void HandleString(StructuralNavigationContextBase context, ITreeNode node);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralNavigation.JSon.ZoneMarker : object {
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralNavigation.TypeScript.TypeScriptBackwardStructuralNavigationVisitor : TypeScriptStructuralNavigationVisitorBase {
    public virtual void VisitTsIdentifierExpression(ITsIdentifierExpression identifierExpression, StructuralNavigationContextBase context);
    public virtual void VisitTsStatement(ITsStatement statement, StructuralNavigationContextBase context);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralNavigation.TypeScript.TypeScriptJavaScriptBackwardStructuralNavigationVisitor : JavaScriptBackwardStructuralNavigationVisitor {
    public virtual void VisitNode(ITreeNode node, StructuralNavigationContextBase context);
    public virtual void VisitEmptyStatement(IEmptyStatement emptyStatementParam, StructuralNavigationContextBase context);
    protected virtual bool IsNodeCommaSeparatedList(ITreeNode node, Boolean& selectItemWithComma);
    protected virtual void HandleExportStatement(StructuralNavigationContextBase context, ITokenNode exportNode);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralNavigation.TypeScript.TypeScriptJavaScriptStructuralNavigationVisitor : JavaScriptStructuralNavigationVisitor {
    public virtual void VisitNode(ITreeNode node, StructuralNavigationContextBase context);
    public virtual void VisitEmptyStatement(IEmptyStatement emptyStatementParam, StructuralNavigationContextBase context);
    protected virtual bool IsNodeCommaSeparatedList(ITreeNode node, Boolean& selectItemWithComma);
    protected virtual void HandleExportStatement(StructuralNavigationContextBase context, ITokenNode exportNode);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralNavigation.TypeScript.TypeScriptJavaScriptStructuralNavigationVisitorHelper : object {
    private static NodeTypeSet ourNavigateableTokens;
    private static TypeScriptJavaScriptStructuralNavigationVisitorHelper();
    [ExtensionAttribute]
public static bool TryHandleNode(JavaScriptStructuralNavigationVisitorBase javaScriptVisitor, StructuralNavigationContextBase context, ITreeNode node);
    [ExtensionAttribute]
public static bool TryHandleExportFunctionStatement(JavaScriptStructuralNavigationVisitorBase javaScriptStructuralNavigationVisitor, StructuralNavigationContextBase context, ITokenNode exportNode);
    [ExtensionAttribute]
public static bool TryHandleEmptyStatement(JavaScriptStructuralNavigationVisitorBase javaScriptStructuralNavigationVisitor, IEmptyStatement emptyStatementParam, StructuralNavigationContextBase context);
    [ExtensionAttribute]
public static bool IsNodeCommaSeparatedList(ITreeNode node, Boolean& selectItemWithComma);
    private static void HandleLt(JavaScriptStructuralNavigationVisitorBase javaScriptVisitor, StructuralNavigationContextBase context, ITokenNode lt, ITokenNode gt, bool selectItemWithComma);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.TypeScript.TypeScriptLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralNavigation.TypeScript.TypeScriptStructuralNavigationManager : object {
    public sealed virtual IStructuralNavigationItem MoveToNext(StructuralNavigationContextBase context);
    public sealed virtual IStructuralNavigationItem MoveToPrev(StructuralNavigationContextBase context);
    [CanBeNullAttribute]
private static IStructuralNavigationItem GetNextSelection(TypeScriptStructuralNavigationVisitorBase typeScriptVisitor, JavaScriptStructuralNavigationVisitorBase javaScriptVisitor, StructuralNavigationContextBase context);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralNavigation.TypeScript.TypeScriptStructuralNavigationVisitor : TypeScriptStructuralNavigationVisitorBase {
    public virtual void VisitTsIdentifierExpression(ITsIdentifierExpression identifierExpression, StructuralNavigationContextBase context);
    public virtual void VisitTsStatement(ITsStatement statement, StructuralNavigationContextBase context);
}
internal abstract class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralNavigation.TypeScript.TypeScriptStructuralNavigationVisitorBase : TsTreeNodeVisitor`1<StructuralNavigationContextBase> {
    public virtual void VisitTsExportSpecifier(ITsExportSpecifier tsExportSpecifierParam, StructuralNavigationContextBase context);
    public virtual void VisitTsNamedImportsList(ITsNamedImportsList namedImportsListParam, StructuralNavigationContextBase context);
    public virtual void VisitTsExternalModuleReferenceName(ITsExternalModuleReferenceName tsExternalModuleReferenceNameParam, StructuralNavigationContextBase context);
    public virtual void VisitTsEnumMemberDeclaration(ITsEnumMemberDeclaration tsEnumMemberDeclarationParam, StructuralNavigationContextBase context);
    public virtual void VisitTsTypeParameterDeclaration(ITsTypeParameterDeclaration tsTypeParameterDeclarationParam, StructuralNavigationContextBase context);
    public virtual void VisitTsTypeParameters(ITsTypeParameters tsTypeParametersParam, StructuralNavigationContextBase context);
    public virtual void VisitTsTypeArgumentList(ITsTypeArgumentList tsTypeArgumentListParam, StructuralNavigationContextBase context);
    public virtual void VisitTsClassDeclaration(ITsClassDeclaration tsClassDeclarationParam, StructuralNavigationContextBase context);
    public virtual void VisitTsDecorator(ITsDecorator tsDecoratorParam, StructuralNavigationContextBase context);
    public virtual void VisitTsDecoratorList(ITsDecoratorList tsDecoratorListParam, StructuralNavigationContextBase context);
    public virtual void VisitTsPropertyNameIdentifier(ITsPropertyNameIdentifier tsPropertyNameIdentifierParam, StructuralNavigationContextBase context);
    public virtual void VisitTsConstructorDeclaration(ITsConstructorDeclaration tsConstructorDeclarationParam, StructuralNavigationContextBase context);
    public virtual void VisitTsTypeMemberDeclaration(ITsTypeMemberDeclaration tsTypeMemberDeclarationParam, StructuralNavigationContextBase context);
    public virtual void VisitTsCallSignatureDeclaration(ITsCallSignatureDeclaration tsCallSignatureDeclarationParam, StructuralNavigationContextBase context);
    public virtual void VisitTsMemberVariableDeclaration(ITsMemberVariableDeclaration tsMemberVariableDeclarationParam, StructuralNavigationContextBase context);
    public virtual void VisitTsIndexSignatureDeclaration(ITsIndexSignatureDeclaration tsIndexSignatureDeclarationParam, StructuralNavigationContextBase context);
    public virtual void VisitTsPropertySignatureDeclaration(ITsPropertySignatureDeclaration tsPropertySignatureDeclarationParam, StructuralNavigationContextBase context);
    public virtual void VisitTsMemberFunctionDeclaration(ITsMemberFunctionDeclaration tsMemberFunctionDeclarationParam, StructuralNavigationContextBase context);
    public virtual void VisitTsFunctionSignatureDeclaration(ITsFunctionSignatureDeclaration tsFunctionSignatureDeclarationParam, StructuralNavigationContextBase context);
    public virtual void VisitTsConstructorOverloadDeclaration(ITsConstructorOverloadDeclaration tsConstructorOverloadDeclarationParam, StructuralNavigationContextBase context);
    public virtual void VisitTsMemberFunctionOverloadDeclaration(ITsMemberFunctionOverloadDeclaration tsMemberFunctionOverloadDeclarationParam, StructuralNavigationContextBase context);
    public virtual void VisitTsFunctionStatementSignature(ITsFunctionStatementSignature tsFunctionStatementSignatureParam, StructuralNavigationContextBase context);
    public virtual void VisitTsFunctionExpressionSignature(ITsFunctionExpressionSignature tsFunctionExpressionSignatureParam, StructuralNavigationContextBase context);
    public virtual void VisitTsBindingPattern(ITsBindingPattern tsBindingPatternParam, StructuralNavigationContextBase context);
    public virtual void VisitTsTypeAnnotation(ITsTypeAnnotation tsTypeAnnotationParam, StructuralNavigationContextBase context);
    public virtual void VisitTsTypeUsage(ITsTypeUsage tsTypeUsageParam, StructuralNavigationContextBase context);
    public virtual void VisitTsTupleTypeUsage(ITsTupleTypeUsage tsTupleTypeUsageParam, StructuralNavigationContextBase context);
    public virtual void VisitTsFunctionTypeUsage(ITsFunctionTypeUsage tsFunctionTypeUsageParam, StructuralNavigationContextBase context);
    public virtual void VisitTsUnionTypeUsage(ITsUnionTypeUsage tsUnionTypeUsageParam, StructuralNavigationContextBase context);
    public virtual void VisitTsMappedTypeUsage(ITsMappedTypeUsage tsMappedTypeUsageParam, StructuralNavigationContextBase context);
    public virtual void VisitTsBaseTypeClause(ITsBaseTypeClause tsBaseTypeClauseParam, StructuralNavigationContextBase context);
    public virtual void VisitTsEmptyStatement(ITsEmptyStatement tsEmptyStatementParam, StructuralNavigationContextBase context);
    public virtual void VisitTsStatement(ITsStatement tsStatementParam, StructuralNavigationContextBase context);
    public virtual void VisitTsBlock(ITsBlock tsBlockParam, StructuralNavigationContextBase context);
    private void HandleMemberDeclaration(StructuralNavigationContextBase context, ITypeScriptTreeNode memberDeclaration);
    protected static void TryAddResult(StructuralNavigationContextBase context, TNode treeNode);
    protected static void TryAddInvocationRange(StructuralNavigationContextBase context, ITsIdentifierExpression identifierExpression);
    [CanBeNullAttribute]
protected static IStructuralNavigationItem GetElseWithBlockItem(ITsStatement statement);
    protected static bool IsStatementMainNode(ICompoundExpression treeNode);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralNavigation.TypeScript.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralNavigation.ZoneMarker : object {
}
internal interface JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.IExpressionMatcher {
    public abstract virtual IStructuralMatchResult MatchExpression(IBinaryExpression expression, IMatchingContext context, StructuralSearchPatternParams params);
    public abstract virtual IStructuralMatchResult MatchExpressionWithParentContext(IBinaryExpression expression, IMatchingContext contextVariant, StructuralSearchPatternParams params);
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.IJavaScriptMatcherBuilder {
    public abstract virtual IElementMatcher Build(ITreeNode element, PatternMatcherBuilderParams params);
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.IJavaScriptStructuralSearchPatternBuilder {
    public abstract virtual IElementMatcher CreateElementMatcher(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.JavaScriptCommentPatternLexer : PatternLexer {
    protected LanguageService LanguageService { get; }
    protected bool MetaPlaceholderSupported { get; }
    protected virtual LanguageService get_LanguageService();
    protected virtual bool get_MetaPlaceholderSupported();
    protected virtual IMetaPlaceholder GetMetaPlaceholder(string name);
    public ReplacePatternLexerResult ParsePattern(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.JavaScriptMatcherBuilder : TreeNodeVisitor`2<PatternMatcherBuilderParams, IElementMatcher> {
    public static JavaScriptMatcherBuilder Instance;
    private static Dictionary`2<Type, ChildInfo[]> ourChildren;
    private static JavaScriptMatcherBuilder();
    public sealed virtual IElementMatcher Build(ITreeNode element, PatternMatcherBuilderParams params);
    private IElementMatcher Build(IJavaScriptTreeNode element, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitNode(ITreeNode param, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitSingleNameBinding(ISingleNameBinding singleNameBindingParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitObjectPropertyFunction(IObjectPropertyFunction objectPropertyFunctionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitObjectPropertyFunctionBody(IObjectPropertyFunctionBody objectPropertyFunctionBodyParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitObjectPropertySignature(IObjectPropertySignature objectPropertySignatureParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitAccessorBody(IAccessorBody accessorBodyParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitAccessorSignature(IAccessorSignature accessorSignatureParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitArrayLiteral(IArrayLiteral arrayLiteralParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitBinaryExpression(IBinaryExpression binaryExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitSimpleAssignmentExpression(ISimpleAssignmentExpression assignmentExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitStructuredAssignmentExpression(IStructuredAssignmentExpression assignmentExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitBlock(IBlock blockParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitBreakStatement(IBreakStatement breakStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitCaseCaseClause(ICaseCaseClause caseCaseClauseParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitCaseClausesList(ICaseClausesList caseClausesListParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitCatchBlock(ICatchBlock catchBlockParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitCompoundExpression(ICompoundExpression compoundExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitConditionalTernaryExpression(IConditionalTernaryExpression conditionalTernaryExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitContinueStatement(IContinueStatement continueStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitDebugStatement(IDebugStatement debugStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitDefaultClause(IDefaultClause defaultClauseParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitDoStatement(IDoStatement doStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitEmptyStatement(IEmptyStatement emptyStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitExpressionStatement(IExpressionStatement expressionStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitFinallyBlock(IFinallyBlock finallyBlockParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitForDeclarationInitializer(IForDeclarationInitializer forDeclarationInitializerParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitForExpressionInitializer(IForExpressionInitializer forExpressionInitializerParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitForStatement(IForStatement forStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitForeachStatement(IForeachStatement foreachStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitFunctionExpression(IFunctionExpression functionExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitFunctionExpressionSignature(IFunctionExpressionSignature functionExpressionSignatureParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitFunctionStatement(IFunctionStatement functionStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitIdentifierExpression(IIdentifierExpression identifierExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitIfStatement(IIfStatement ifStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitIndexExpression(IIndexExpression indexExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTaggedTemplateExpression(ITaggedTemplateExpression taggedTemplateExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitInvocationExpression(IInvocationExpression invocationExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitJavaScriptFile(IJavaScriptFile javaScriptFileParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitJavaScriptFileSection(IJavaScriptFileSection javaScriptFileSectionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitJavaScriptLiteralExpression(IJavaScriptLiteralExpression javaScriptLiteralExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitJavaScriptParameterDeclaration(IJavaScriptParameterDeclaration javaScriptParameterDeclarationParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitJavaScriptParameterList(IJavaScriptParameterList javaScriptParameterListParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitLabelledStatement(ILabelledStatement labelledStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitNewExpression(INewExpression newExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitObjectLiteral(IObjectLiteral objectLiteralParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitObjectPropertiesList(IObjectPropertiesList objectPropertiesListParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitObjectPropertyAccessor(IObjectPropertyAccessor objectPropertyAccessorParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitObjectPropertyInitializer(IObjectPropertyInitializer objectPropertyInitializerParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitParenthesizedExpression(IParenthesizedExpression parenthesizedExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitPostfixExpression(IPostfixExpression postfixExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitPrefixExpression(IPrefixExpression prefixExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitPropertyNameIdentifier(IPropertyNameIdentifier propertyNameIdentifierParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitPropertyNameNumericLiteral(IPropertyNameNumericLiteral propertyNameNumericLiteralParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitPropertyNameStringLiteral(IPropertyNameStringLiteral propertyNameStringLiteralParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitReferenceExpression(IReferenceExpression referenceExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitReturnStatement(IReturnStatement returnStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitSwitchStatement(ISwitchStatement switchStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitThisExpression(IThisExpression thisExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitThrowStatement(IThrowStatement throwStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTryStatement(ITryStatement tryStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitVariableDeclaration(IVariableDeclaration variableDeclarationParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitLexicalDeclaration(ILexicalDeclaration lexicalDeclarationParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitVariableDeclarationList(IVariableDeclarationList variableDeclarationListParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitVariableStatement(IVariableStatement variableStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitWhileStatement(IWhileStatement whileStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitWithStatement(IWithStatement withStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTemplateWithSubstitution(ITemplateWithSubstitution templateWithSubstitutionParam, PatternMatcherBuilderParams context);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.JavaScriptPatternLexer : PatternLexer {
    protected LanguageService LanguageService { get; }
    protected bool MetaPlaceholderSupported { get; }
    public virtual IPatternLexerResult TryParsePattern(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params, Func`2<IParser, ITreeNode> createElement, int realShift, bool createUnknownPlaceholders, bool deleteUnusedPlaceholders);
    protected virtual LanguageService get_LanguageService();
    protected virtual bool get_MetaPlaceholderSupported();
    protected virtual IMetaPlaceholder GetMetaPlaceholder(string name);
    protected virtual IUnknownPlaceholder CreateUnknownPlaceholder(string name);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JavaScriptLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.JavaScriptPlaceholderGuesser : object {
    public virtual IPlaceholder Guess(ITreeNode node, PlaceholderUsage usage);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.JavaScriptReplacePatternLexer : ReplacePatternLexer {
}
[StructuralSearcherFactoryAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JavaScriptLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.JavaScriptStructuralSearcherFactory : object {
    private JavaScriptStructuralSearchPatternFromCodeCreator myPatternFromCodeCreator;
    public bool IsInternal { get; }
    public bool SupportsIgnoreUnmatched { get; }
    public bool SupportsShortenReferences { get; }
    public JavaScriptStructuralSearcherFactory(JavaScriptStructuralSearchPatternFromCodeCreator patternFromCodeCreator);
    public virtual bool get_IsInternal();
    public virtual bool get_SupportsIgnoreUnmatched();
    public virtual bool get_SupportsShortenReferences();
    public virtual IStructuralSearchPattern CreatePattern();
    public virtual IStructuralSearchPattern CreatePattern(string pattern, IPlaceholder[] placeholders);
    public virtual void Replace(IStructuralSearchPattern pattern, IStructuralMatchResult result);
    public virtual void Replace(IEnumerable`1<IStructuralMatchResult> targets, IStructuralSearchPattern pattern);
    public virtual IStructuralSearchPattern CreatePattern(ISolution solution, DocumentRange selection);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.JavaScriptStructuralSearchPattern : StructuralSearchPatternBase {
    private JavaScriptStructuralSearchPatternPresenter myPresenter;
    private static IStructuralSearchPatternBuilder[] ourBuilders;
    private static IStructuralSearchPatternBuilder[] ourGuessBuilders;
    private static StructuralSearchPatternValidator ourPatternValidator;
    protected IStructuralSearchPatternBuilder[] Builders { get; }
    protected IStructuralSearchPatternBuilder[] GuessBuilders { get; }
    public IStructuralSearchPatternPresenter Presenter { get; }
    public PsiLanguageType Language { get; }
    public JavaScriptStructuralSearchPattern(string textPattern);
    public JavaScriptStructuralSearchPattern(string textPattern, IEnumerable`1<IPlaceholder> placeholders);
    public JavaScriptStructuralSearchPattern(string textPattern, IPlaceholder[] placeholders);
    public JavaScriptStructuralSearchPattern(string textPattern, StructuralSearchPatternParams params, IPlaceholder[] placeholders);
    public JavaScriptStructuralSearchPattern(string textPattern, StructuralSearchPatternParams params, IEnumerable`1<IPlaceholder> placeholders);
    public JavaScriptStructuralSearchPattern(string textPattern, StructuralSearchPatternParams params, IDictionary`2<string, IPlaceholder> placeholders);
    private static JavaScriptStructuralSearchPattern();
    protected virtual IStructuralSearchPatternBuilder[] get_Builders();
    protected virtual IStructuralSearchPatternBuilder[] get_GuessBuilders();
    public virtual IStructuralSearchPatternPresenter get_Presenter();
    public IStructuralSearchPattern SetAsShared();
    public virtual IStructuralSearchPattern AddPatternPlaceholder(string name, string pattern, bool isShared);
    public virtual IStructuralSearchPattern AddOrPatternPlaceholder(string name, bool isShared, String[] patterns);
    public virtual IStructuralSearchPatternValidator GetValidator();
    public virtual bool GuessPlaceholders();
    public virtual IStructuralMatcher CreateMatcher();
    public virtual IStructuralMatcher CreateMatcher(IStructuralSearchPatternBuilder builder);
    public virtual PsiLanguageType get_Language();
    public virtual IStructuralSearchPattern Clone();
    public bool Equals(JavaScriptStructuralSearchPattern other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual void ReadPlaceholders(IEnumerable`1<PlaceholderInfo> placeholderInfos);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JavaScriptLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.JavaScriptStructuralSearchPatternFromCodeCreator : object {
    public virtual IStructuralSearchPattern CreatePattern(ISolution solution, DocumentRange selection);
    private static void AppendIdentifierPlaceholder(StringBuilder patternText, IDictionary`2<string, IPlaceholder> placeholders, string name);
    private static bool IsLocalReferenceExpression(IReferenceExpression referenceExpr);
    private static bool IsLocalDeclaration(IDeclaration declaration);
    private static bool IsLocalSymbol(IDeclaredElement declaredElement);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.JavaScriptStructuralSearchPatternPresenter : StructuralSearchPatternPresenterBase {
    public JavaScriptStructuralSearchPatternPresenter(JavaScriptStructuralSearchPattern pattern);
    protected virtual string GetListReplacement(IEnumerable enumerable);
    protected virtual ReplacePatternLexerResult ParsePattern(string text, IDictionary`2<string, IPlaceholder> placeholders);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.JavaScriptStructuralSearchReplacer : object {
    public static void Replace(IEnumerable`1<IStructuralMatchResult> matches, string replacePattern, IDictionary`2<string, IPlaceholder> placeholders, bool formatAfterReplace);
    public static ITreeNode Replace(IStructuralMatchResult match, string replacePattern, IDictionary`2<string, IPlaceholder> placeholders, bool formatAfterReplace);
    private static void RemoveElementsAfterFirst(IEnumerable`1<ITreeNode> elements);
    private static IJavaScriptCommentNode[] CollectPrecedingComments(ITreeNode item);
    private static IJavaScriptCommentNode[] CollectFollowingComments(ITreeNode item);
    private static string PrepareReplaceText(string replacePattern, IDictionary`2<string, IPlaceholder> placeholders, List`1& replacements, Func`2<string, object> getMatchedElement, IJavaScriptCommentNode[]& tailCommentNodes);
    private static ITreeNode DoReplace(ITreeNode elementToReplace, string replacePattern, IDictionary`2<string, IPlaceholder> placeholders, Func`2<string, object> getMatchedElement, IEnumerable`1<ITreeNode> elementsToRemove, bool formatAfterReplace);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.AssignmentExpressionMatcher : JavaScriptElementMatcher`1<IAssignmentExpression> {
    public AssignmentExpressionMatcher(IAssignmentExpression assignmentExpression, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.AssociativeExpressionMatcher : object {
    private PatternMatcherBuilderParams myParams;
    private List`1<IElementMatcher> myOperandMatchers;
    private TokenNodeType myOperatorSign;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public AssociativeExpressionMatcher(IBinaryExpression expression, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual IEnumerable`1<string> get_Words();
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    private static ICollection`1<ITreeNode> GetBinaryExpressionOperands(ITreeNode node);
    private void GetOperands(ITreeNode expression, List`1<ITreeNode> operands);
    public IStructuralMatchResult Match(IBinaryExpression expression, IMatchingContext context, StructuralSearchPatternParams params);
    public IStructuralMatchResult MatchWithParentContext(IBinaryExpression expression, IMatchingContext context, StructuralSearchPatternParams params);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.BinaryExpressionMatcher : JavaScriptElementMatcher`1<IBinaryExpression> {
    [NotNullAttribute]
private IElementMatcher myLeftOperandMatcher;
    [NotNullAttribute]
private IElementMatcher myRightOperandMatcher;
    [NotNullAttribute]
private TokenNodeType myOperatorSign;
    private TreatBinaryExpressionsEquivalent myTreatReversedBinaryExpressionsEquivalent;
    public BinaryExpressionMatcher(IBinaryExpression expression, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public BinaryExpressionMatcher(IBinaryExpression binaryExpression, TokenNodeType operatorSign, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
    private bool MatchNormal(ITreeNode element, IMatchingContext context);
    private bool MatchReverse(ITreeNode element, IMatchingContext context);
    private bool CheckBinaryExpressionCanBeUsedInSmartComparison(IBinaryExpression expression);
    private static bool CheckExpressionCanBeUsedInSmartComparison(IJavaScriptExpression expression);
    private static TokenNodeType GetReverseOperatorSign(TokenNodeType sign);
}
public static class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.BinaryExpressionMatcherUtil : object {
    private static NodeTypeSet ourSignsWithoutSideEffect;
    private static BinaryExpressionMatcherUtil();
    private static bool CheckHasOperatorSideEffect(TokenNodeType sign);
    private static bool CheckExpressionHasSideEffect(IJavaScriptExpression expression);
    public static bool IsAssociativeOperator(TokenNodeType sign);
    public static bool CheckCanBeRearrangeOperands(IBinaryExpression expression);
    [CanBeNullAttribute]
public static IElementMatcher CreateNegativeMatcher(IBinaryExpression expression, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    private static TokenNodeType GetNegativeOperatorSign(TokenNodeType sign);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.BinaryExpressionOrAssociativeExpressionMatcher : object {
    [NotNullAttribute]
private IElementMatcher myBinaryExprMatcher;
    [CanBeNullAttribute]
private AssociativeExpressionMatcher myAssociativeExprMatcher;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public BinaryExpressionOrAssociativeExpressionMatcher(IBinaryExpression expression, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual IEnumerable`1<string> get_Words();
    public sealed virtual IStructuralMatchResult MatchExpression(IBinaryExpression expression, IMatchingContext context, StructuralSearchPatternParams params);
    public sealed virtual IStructuralMatchResult MatchExpressionWithParentContext(IBinaryExpression expression, IMatchingContext contextVariant, StructuralSearchPatternParams params);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.ChildInfo : object {
    [CompilerGeneratedAttribute]
private short <Role>k__BackingField;
    [CompilerGeneratedAttribute]
private MatchingOrder <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSingle>k__BackingField;
    public short Role { get; }
    public MatchingOrder Order { get; }
    public bool IsSingle { get; }
    public ChildInfo(short role, bool isSingle, MatchingOrder order);
    [CompilerGeneratedAttribute]
public short get_Role();
    [CompilerGeneratedAttribute]
public MatchingOrder get_Order();
    [CompilerGeneratedAttribute]
public bool get_IsSingle();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.CompoundExpressionMatcher : object {
    private IElementMatcher myMatcher;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public CompoundExpressionMatcher(ICompoundExpression expression, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.CompoundExpressionMatcher/<get_Children>d__4")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.CompoundExpressionMatcher/<get_Words>d__6")]
public sealed virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.CompoundOrSimpleExpressionMatcher : object {
    private IElementMatcher myMatcher;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public CompoundOrSimpleExpressionMatcher(IElementMatcher matcher);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.CompoundOrSimpleExpressionMatcher/<get_Children>d__4")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.CompoundOrSimpleExpressionMatcher/<get_Words>d__6")]
public sealed virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.ConditionalTernaryExpressionMatcher : JavaScriptElementMatcher`1<IConditionalTernaryExpression> {
    private IElementMatcher myThenMatcher;
    private IElementMatcher myElseMatcher;
    private IElementMatcher myNegativeExpressionMatcher;
    public ConditionalTernaryExpressionMatcher(IConditionalTernaryExpression expression, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
    private bool MatchNormal(ITreeNode element, IMatchingContext context);
    private bool MatchReverse(ITreeNode element, IMatchingContext context);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.EmptyStatementMatcher : SequencePlaceholderMatcherBase {
    public virtual IElementMatcher CreatePlaceholderMatcher(ITreeNode element);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
    public virtual bool Match(IEnumerable`1<ITreeNode> elements, IMatchingContext context);
    public virtual ISequenceMatcher`1<ITreeNode> CreatePlaceholderMatcher(ICollection`1<ITreeNode> enumerable);
    [NotNullAttribute]
public static IElementMatcher Build(IEmptyStatement element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.GeneralCompositeElementMatcher`1 : JavaScriptElementMatcher`1<T> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public GeneralCompositeElementMatcher`1(T element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder, ChildInfo[] meaningfulChildren);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.IfStatementMatcher : JavaScriptElementMatcher`1<IIfStatement> {
    private IElementMatcher myThenMatcher;
    private IElementMatcher myElseMatcher;
    private IElementMatcher myNegativeExpressionMatcher;
    private bool myIgnoreParanthesisInExpressions;
    public IEnumerable`1<string> Words { get; }
    public IfStatementMatcher(IIfStatement statement, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    [CanBeNullAttribute]
private IBinaryExpression GetBinaryExpression(ICompoundExpression condition);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
    private bool MatchNormal(ITreeNode element, IMatchingContext context);
    private bool MatchReverse(ITreeNode element, IMatchingContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.IfStatementMatcher/<get_Words>d__10")]
public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.JavaScriptDeclaredElementMatcher : object {
    private IElementMatcher myChildMatcher;
    private IDeclaredElement myDeclaredElement;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public JavaScriptDeclaredElementMatcher(ITreeNode node, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.JavaScriptDeclaredElementMatcher/<get_Children>d__5")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual IEnumerable`1<string> get_Words();
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.JavaScriptElementMatcher`1 : ElementMatcherBase`1<T> {
    protected IElementMatcher AddMatcher(T expression, Func`2<T, ITreeNode> propertyGetter, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    protected SequenceMatcher`1<T2> AddMatcher(T expression, Func`2<T, IEnumerable`1<T2>> elementsGetter, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    protected IElementMatcher AddMatcherAnyOrder(T element, Func`2<T, IEnumerable`1<T2>> elementsGetter, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    protected IElementMatcher AddMatcherUnOrder(T element, Func`2<T, IEnumerable`1<T2>> elementsGetter, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.JavaScriptIdentifierMatcher : TokenNodeMatcher {
    private string myName;
    public IEnumerable`1<string> Words { get; }
    public JavaScriptIdentifierMatcher(IJavaScriptIdentifierNode element, PatternMatcherBuilderParams params);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.JavaScriptIdentifierMatcher/<get_Words>d__3")]
public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.JavaScriptLiteralExpressionMatcher : TokenNodeMatcher {
    public JavaScriptLiteralExpressionMatcher(IJavaScriptLiteralExpression expression, PatternMatcherBuilderParams params);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.JavaScriptSequenceMatcher`1 : SequenceMatcher`1<T> {
    public JavaScriptSequenceMatcher`1(IEnumerable`1<T> elements, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public JavaScriptSequenceMatcher`1(ITreeNode element, Func`2<ITreeNode, IEnumerable`1<T>> elementsGetter, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.JavaScriptStatementSequenceMatcher : JavaScriptSequenceMatcher`1<IJavaScriptStatement> {
    private bool mySkipEmptyStatements;
    public JavaScriptStatementSequenceMatcher(IEnumerable`1<IJavaScriptStatement> statements, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public JavaScriptStatementSequenceMatcher(IBlock block, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    protected virtual bool MoveToNextElement(IEnumerator`1<IJavaScriptStatement> elementsEnumerator, IJavaScriptStatement& currentElement);
}
public enum JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.MatchingOrder : Enum {
    public int value__;
    public static MatchingOrder Ordered;
    public static MatchingOrder AnyOrdered;
    public static MatchingOrder UnOrdered;
}
public static class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.NameWithResolvePlaceholderUtils : object {
    public static IDeclaredElement GetDeclaredElement(ITreeNode node);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.ObjectPropertyFunctionBodyMatcher : JavaScriptElementMatcher`1<IObjectPropertyFunctionBody> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public ObjectPropertyFunctionBodyMatcher(IObjectPropertyFunctionBody element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.ObjectPropertyFunctionMatcher : JavaScriptElementMatcher`1<IObjectPropertyFunction> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public ObjectPropertyFunctionMatcher(IObjectPropertyFunction element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.ObjectPropertySignatureMatcher : JavaScriptElementMatcher`1<IObjectPropertySignature> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public ObjectPropertySignatureMatcher(IObjectPropertySignature element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.ParenthesizedExpressionMatcher : object {
    private bool myIgnoreParanthesisInExpressions;
    private IElementMatcher myMatcher;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public ParenthesizedExpressionMatcher(IParenthesizedExpression expression, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    private ICompoundExpression GetCompoundExpression(IParenthesizedExpression expression);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.ParenthesizedExpressionMatcher/<get_Children>d__6")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.ParenthesizedExpressionMatcher/<get_Words>d__8")]
public sealed virtual IEnumerable`1<string> get_Words();
}
public static class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.ParenthesizedExpressionMatcherUtil : object {
    public static ITreeNode GetExpression(IParenthesizedExpression expression, bool ignoreParanthesisInExpressions);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.PostfixExpressionMatcher : object {
    private bool myMatchPrefixExpression;
    private IElementMatcher myOperandMatcher;
    private TokenNodeType myOperatorType;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public PostfixExpressionMatcher(IPostfixExpression expression, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    public static bool CompareOperators(TokenNodeType prefix, TokenNodeType postfix);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.PostfixExpressionMatcher/<get_Children>d__7")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.PostfixExpressionMatcher/<get_Words>d__9")]
public sealed virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.PrefixExpressionMatcher : object {
    private bool myMatchPostfixExpression;
    private IElementMatcher myOperandMatcher;
    private TokenNodeType myOperatorType;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public PrefixExpressionMatcher(IPrefixExpression expression, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.PrefixExpressionMatcher/<get_Children>d__6")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.PrefixExpressionMatcher/<get_Words>d__8")]
public sealed virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.SingleNameBindingMatcher : JavaScriptElementMatcher`1<ISingleNameBinding> {
    public SingleNameBindingMatcher(ISingleNameBinding singleNameBinding, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.StatementOrBlockMatcher : object {
    private IElementMatcher myMatcher;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public StatementOrBlockMatcher(IElementMatcher matcher);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.StatementOrBlockMatcher/<get_Children>d__4")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.StatementOrBlockMatcher/<get_Words>d__6")]
public sealed virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.TokenNodeMatcher : object {
    private TokenNodeType myTokenType;
    private string myText;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public TokenNodeMatcher(ITokenNode node, PatternMatcherBuilderParams params);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.TokenNodeMatcher/<get_Children>d__5")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.TokenNodeMatcher/<get_Words>d__7")]
public virtual IEnumerable`1<string> get_Words();
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Matchers.UnorderedSequenceMatcher`1 : object {
    private Func`2<ITreeNode, IEnumerable`1<T>> myElementsGetter;
    private IEnumerable`1<IElementMatcher> myMatchers;
    [CompilerGeneratedAttribute]
private bool <AllowUnmatched>k__BackingField;
    public bool AllowUnmatched { get; public set; }
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public UnorderedSequenceMatcher`1(IEnumerable`1<IElementMatcher> matchers, Func`2<ITreeNode, IEnumerable`1<T>> elementsGetter);
    [CompilerGeneratedAttribute]
public bool get_AllowUnmatched();
    [CompilerGeneratedAttribute]
public void set_AllowUnmatched(bool value);
    public sealed virtual bool Match(IEnumerable`1<T> elements, IMatchingContext context);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Parsers.JavaScriptStructuralSearchExpressionPatternBuilder : object {
    public static JavaScriptStructuralSearchExpressionPatternBuilder Instance;
    private bool myGuessPlaceholders;
    public JavaScriptStructuralSearchExpressionPatternBuilder(bool guessPlaceholders);
    private static JavaScriptStructuralSearchExpressionPatternBuilder();
    public sealed virtual IStructuralMatcher CreateMatcher(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
    public sealed virtual IElementMatcher CreateElementMatcher(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
    public sealed virtual IPatternLexerResult ParsePattern(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Parsers.JavaScriptStructuralSearchPropertyPatternBuilder : object {
    public static JavaScriptStructuralSearchPropertyPatternBuilder Instance;
    private bool myGuessPlaceholders;
    public JavaScriptStructuralSearchPropertyPatternBuilder(bool guessPlaceholders);
    private static JavaScriptStructuralSearchPropertyPatternBuilder();
    public sealed virtual IStructuralMatcher CreateMatcher(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
    public sealed virtual IElementMatcher CreateElementMatcher(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
    public sealed virtual IPatternLexerResult ParsePattern(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Parsers.JavaScriptStructuralSearchStatementsPatternBuilder : object {
    public static JavaScriptStructuralSearchStatementsPatternBuilder Instance;
    private bool myGuessPlaceholders;
    public JavaScriptStructuralSearchStatementsPatternBuilder(bool guessPlaceholders);
    private static JavaScriptStructuralSearchStatementsPatternBuilder();
    public sealed virtual IStructuralMatcher CreateMatcher(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
    public sealed virtual IElementMatcher CreateElementMatcher(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
    public sealed virtual IPatternLexerResult ParsePattern(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Placeholders.IJsPlaceholder {
    public bool IsShared { get; public set; }
    public abstract virtual bool get_IsShared();
    public abstract virtual void set_IsShared(bool value);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Placeholders.Internal.JavaScriptLiteralPlaceholder : JsPlaceholderBase {
    private static String[] ourReplacingText;
    public static string TAG_NAME;
    [CompilerGeneratedAttribute]
private ConstantValueTypes <ConstantValueType>k__BackingField;
    public ConstantValueTypes ConstantValueType { get; public set; }
    public String[] ReplacingText { get; }
    public string Description { get; }
    public JavaScriptLiteralPlaceholder(string name, ConstantValueTypes constantValueType, bool isShared);
    public JavaScriptLiteralPlaceholder(PlaceholderInfo placeholderInfo, bool isShared);
    private static JavaScriptLiteralPlaceholder();
    [CompilerGeneratedAttribute]
public ConstantValueTypes get_ConstantValueType();
    [CompilerGeneratedAttribute]
public void set_ConstantValueType(ConstantValueTypes value);
    public virtual String[] get_ReplacingText();
    public virtual PlaceholderInfo ToPlaceholderInfo();
    public virtual IPlaceholder Clone();
    public virtual string get_Description();
    public bool Equals(JavaScriptLiteralPlaceholder other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Placeholders.Internal.JavaScriptLiteralPlaceholderMatcher : PlaceholderMatcherBase {
    private PatternMatcherBuilderParams myParams;
    private ConstantValueTypes myConstantValueType;
    protected IJavaScriptMatcherBuilder MatcherBuilder { get; }
    public JavaScriptLiteralPlaceholderMatcher(JavaScriptLiteralPlaceholder placeholder, StructuralSearchPatternParams params);
    protected virtual IJavaScriptMatcherBuilder get_MatcherBuilder();
    public virtual IElementMatcher CreatePlaceholderMatcher(ITreeNode element);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
    [CompilerGeneratedAttribute]
private bool <Match>b__6_0(ITreeNode e);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Placeholders.Internal.JavaScriptNameWithResolvePlaceholder : JsPlaceholderBase {
    private static String[] ourReplacingText;
    public static string TAG_NAME;
    private static string REGEX_ATTRIBUTE;
    private static string CASE_SENSITIVE_ATTRIBUTE;
    [CompilerGeneratedAttribute]
private Regex <NameRegex>k__BackingField;
    public Regex NameRegex { get; public set; }
    public string NameRegexText { get; public set; }
    public bool NameRegexIsCaseSensitive { get; public set; }
    public String[] ReplacingText { get; }
    public string Description { get; }
    public JavaScriptNameWithResolvePlaceholder(string name, string nameRegex, bool nameRegexCaseSensitive, bool isShared);
    public JavaScriptNameWithResolvePlaceholder(PlaceholderInfo placeholderInfo, bool isShared);
    private static JavaScriptNameWithResolvePlaceholder();
    [CompilerGeneratedAttribute]
public Regex get_NameRegex();
    [CompilerGeneratedAttribute]
public void set_NameRegex(Regex value);
    public string get_NameRegexText();
    public void set_NameRegexText(string value);
    public bool get_NameRegexIsCaseSensitive();
    public void set_NameRegexIsCaseSensitive(bool value);
    public virtual String[] get_ReplacingText();
    public virtual PlaceholderInfo ToPlaceholderInfo();
    public virtual IPlaceholder Clone();
    public virtual string get_Description();
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
    public bool Equals(JavaScriptNameWithResolvePlaceholder other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Placeholders.Internal.JavaScriptNameWithResolvePlaceholderMatcher : PlaceholderMatcherBase {
    private PatternMatcherBuilderParams myParams;
    private Regex myNameRegex;
    protected IJavaScriptMatcherBuilder MatcherBuilder { get; }
    public JavaScriptNameWithResolvePlaceholderMatcher(JavaScriptNameWithResolvePlaceholder placeholder, StructuralSearchPatternParams params);
    protected virtual IJavaScriptMatcherBuilder get_MatcherBuilder();
    public virtual IElementMatcher CreatePlaceholderMatcher(ITreeNode element);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
    private static string GetName(ITokenNode element);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Placeholders.Internal.JavaScriptParameterPlaceholder : JsSequencePlaceholderBase {
    private static String[] ourReplacingText;
    public static string TAG_NAME;
    public String[] ReplacingText { get; }
    protected string TagName { get; }
    protected string EntityName { get; }
    public JavaScriptParameterPlaceholder(string name, int minimalOccurrences, int maximalOccurrences, bool isShared);
    public JavaScriptParameterPlaceholder(string name, bool isShared);
    public JavaScriptParameterPlaceholder(PlaceholderInfo placeholderInfo, bool isShared);
    private static JavaScriptParameterPlaceholder();
    public virtual String[] get_ReplacingText();
    public virtual IPlaceholder Clone();
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
    protected virtual string get_TagName();
    protected virtual string get_EntityName();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Placeholders.Internal.JavaScriptParameterPlaceholderMatcher : SequencePlaceholderMatcherBase {
    private PatternMatcherBuilderParams myParams;
    protected IJavaScriptMatcherBuilder MatcherBuilder { get; }
    public JavaScriptParameterPlaceholderMatcher(JavaScriptParameterPlaceholder placeholder, StructuralSearchPatternParams params);
    protected virtual IJavaScriptMatcherBuilder get_MatcherBuilder();
    public virtual IElementMatcher CreatePlaceholderMatcher(ITreeNode element);
    public virtual ISequenceMatcher`1<ITreeNode> CreatePlaceholderMatcher(ICollection`1<ITreeNode> elements);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Placeholders.Internal.JavaScriptPatternPlaceholder : JsPlaceholderBase {
    private JavaScriptPatternPlaceholderMatcher myPatternPlaceholderMatcher;
    private string myPattern;
    private static String[] ourReplacingText;
    public string Description { get; }
    public String[] ReplacingText { get; }
    public JavaScriptPatternPlaceholder(string name, IElementMatcher elementMatcher, string pattern, bool isShared);
    private JavaScriptPatternPlaceholder(string name, JavaScriptPatternPlaceholderMatcher patternPlaceholderMatcher, string pattern, bool isShared);
    private static JavaScriptPatternPlaceholder();
    public virtual string get_Description();
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
    public virtual String[] get_ReplacingText();
    public virtual PlaceholderInfo ToPlaceholderInfo();
    public virtual IPlaceholder Clone();
    public bool Equals(JavaScriptPatternPlaceholder other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Placeholders.Internal.JavaScriptPatternPlaceholderMatcher : object {
    private string myName;
    private IElementMatcher myElementMatcher;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public string PlaceholderName { get; }
    public JavaScriptPatternPlaceholderMatcher(string name, IElementMatcher elementMatcher);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Placeholders.Internal.JavaScriptPatternPlaceholderMatcher/<get_Children>d__5")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual IEnumerable`1<string> get_Words();
    public sealed virtual string get_PlaceholderName();
    public sealed virtual IElementMatcher CreatePlaceholderMatcher(ITreeNode element);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Placeholders.JavaScriptArgumentPlaceholder : JsSequencePlaceholderBase {
    private static String[] ourReplacingText;
    public static string TAG_NAME;
    public String[] ReplacingText { get; }
    protected string TagName { get; }
    protected string EntityName { get; }
    public JavaScriptArgumentPlaceholder(string name, int minimalOccurrences, int maximalOccurrences, bool isShared);
    public JavaScriptArgumentPlaceholder(string name, bool isShared);
    public JavaScriptArgumentPlaceholder(PlaceholderInfo placeholderInfo, bool isShared);
    private static JavaScriptArgumentPlaceholder();
    public virtual String[] get_ReplacingText();
    public virtual IPlaceholder Clone();
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
    protected virtual string get_TagName();
    protected virtual string get_EntityName();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Placeholders.JavaScriptArgumentPlaceholderMatcher : SequencePlaceholderMatcherBase {
    private PatternMatcherBuilderParams myParams;
    protected IJavaScriptMatcherBuilder MatcherBuilder { get; }
    public JavaScriptArgumentPlaceholderMatcher(JavaScriptArgumentPlaceholder placeholder, StructuralSearchPatternParams params);
    protected virtual IJavaScriptMatcherBuilder get_MatcherBuilder();
    public virtual IElementMatcher CreatePlaceholderMatcher(ITreeNode element);
    public virtual ISequenceMatcher`1<ITreeNode> CreatePlaceholderMatcher(ICollection`1<ITreeNode> elements);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Placeholders.JavaScriptExpressionPlaceholder : JsPlaceholderBase {
    private static String[] ourReplacingText;
    public static string TAG_NAME;
    public String[] ReplacingText { get; }
    public string Description { get; }
    public JavaScriptExpressionPlaceholder(string name, bool isShared);
    public JavaScriptExpressionPlaceholder(PlaceholderInfo placeholderInfo, bool isShared);
    private static JavaScriptExpressionPlaceholder();
    public virtual String[] get_ReplacingText();
    public virtual PlaceholderInfo ToPlaceholderInfo();
    public virtual IPlaceholder Clone();
    public virtual string get_Description();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Placeholders.JavaScriptExpressionPlaceholderMatcher : PlaceholderMatcherBase {
    private PatternMatcherBuilderParams myParams;
    protected IJavaScriptMatcherBuilder MatcherBuilder { get; }
    public JavaScriptExpressionPlaceholderMatcher(JavaScriptExpressionPlaceholder placeholder, StructuralSearchPatternParams params);
    protected virtual IJavaScriptMatcherBuilder get_MatcherBuilder();
    public virtual IElementMatcher CreatePlaceholderMatcher(ITreeNode element);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Placeholders.JavaScriptMetaPlaceholder : object {
    private string myName;
    private static String[] ourReplacingText;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public string Name { get; }
    public string Description { get; }
    public String[] ReplacingText { get; }
    public ICollection`1<string> Words { get; }
    public JavaScriptMetaPlaceholder(string name);
    private static JavaScriptMetaPlaceholder();
    public sealed virtual string get_Name();
    public sealed virtual string get_Description();
    public sealed virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
    public sealed virtual String[] get_ReplacingText();
    public sealed virtual ICollection`1<string> get_Words();
    public sealed virtual PlaceholderInfo ToPlaceholderInfo();
    public sealed virtual IPlaceholder Clone();
    private sealed virtual override object System.ICloneable.Clone();
    public bool Equals(JavaScriptMetaPlaceholder other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Placeholders.JavaScriptNamePlaceholder : JsPlaceholderBase {
    private static String[] ourReplacingText;
    public static string TAG_NAME;
    private static string REGEX_ATTRIBUTE;
    private static string CASE_SENSITIVE_ATTRIBUTE;
    [CompilerGeneratedAttribute]
private Regex <NameRegex>k__BackingField;
    public Regex NameRegex { get; public set; }
    public string NameRegexText { get; public set; }
    public bool NameRegexIsCaseSensitive { get; public set; }
    public String[] ReplacingText { get; }
    public string Description { get; }
    public JavaScriptNamePlaceholder(string name, string nameRegex, bool nameRegexCaseSensitive, bool isShared);
    public JavaScriptNamePlaceholder(PlaceholderInfo placeholderInfo, bool isShared);
    private static JavaScriptNamePlaceholder();
    [CompilerGeneratedAttribute]
public Regex get_NameRegex();
    [CompilerGeneratedAttribute]
public void set_NameRegex(Regex value);
    public string get_NameRegexText();
    public void set_NameRegexText(string value);
    public bool get_NameRegexIsCaseSensitive();
    public void set_NameRegexIsCaseSensitive(bool value);
    public virtual String[] get_ReplacingText();
    public virtual PlaceholderInfo ToPlaceholderInfo();
    public virtual IPlaceholder Clone();
    public virtual string get_Description();
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
    public bool Equals(JavaScriptNamePlaceholder other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Placeholders.JavaScriptNamePlaceholderMatcher : PlaceholderMatcherBase {
    private PatternMatcherBuilderParams myParams;
    private Regex myNameRegex;
    protected IJavaScriptMatcherBuilder MatcherBuilder { get; }
    public JavaScriptNamePlaceholderMatcher(JavaScriptNamePlaceholder placeholder, StructuralSearchPatternParams params);
    protected virtual IJavaScriptMatcherBuilder get_MatcherBuilder();
    public virtual IElementMatcher CreatePlaceholderMatcher(ITreeNode element);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
}
public static class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Placeholders.JavaScriptNamePlaceholderUtil : object {
    public static string GetName(ITokenNode element);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Placeholders.JavaScriptStatementPlaceholder : JsSequencePlaceholderBase {
    private static String[] ourReplacingText;
    public static string TAG_NAME;
    public String[] ReplacingText { get; }
    protected string TagName { get; }
    protected string EntityName { get; }
    public JavaScriptStatementPlaceholder(string name, int minimalOccurrences, int maximalOccurrences, bool isShared);
    public JavaScriptStatementPlaceholder(string name, bool isShared);
    public JavaScriptStatementPlaceholder(PlaceholderInfo placeholderInfo, bool isShared);
    private static JavaScriptStatementPlaceholder();
    public virtual String[] get_ReplacingText();
    public virtual IPlaceholder Clone();
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
    protected virtual string get_TagName();
    protected virtual string get_EntityName();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Placeholders.JavaScriptStatementPlaceholderMatcher : SequencePlaceholderMatcherBase {
    private PatternMatcherBuilderParams myParams;
    protected IJavaScriptMatcherBuilder MatcherBuilder { get; }
    public JavaScriptStatementPlaceholderMatcher(JavaScriptStatementPlaceholder placeholder, StructuralSearchPatternParams params);
    protected virtual IJavaScriptMatcherBuilder get_MatcherBuilder();
    public virtual IElementMatcher CreatePlaceholderMatcher(ITreeNode element);
    public virtual ISequenceMatcher`1<ITreeNode> CreatePlaceholderMatcher(ICollection`1<ITreeNode> elements);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
}
internal class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Placeholders.JavaScriptUnknownPlaceholder : UnknownPlaceholder {
    private static String[] ourReplacingText;
    public String[] ReplacingText { get; }
    public JavaScriptUnknownPlaceholder(string name);
    private static JavaScriptUnknownPlaceholder();
    public virtual String[] get_ReplacingText();
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Placeholders.JsPlaceholderBase : PlaceholderBase {
    [CompilerGeneratedAttribute]
private bool <IsShared>k__BackingField;
    public bool IsShared { get; public set; }
    protected JsPlaceholderBase(string name, bool isShared);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsShared();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsShared(bool value);
    public bool Equals(JsPlaceholderBase other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.Placeholders.JsSequencePlaceholderBase : SequencePlaceholderBase {
    [CompilerGeneratedAttribute]
private bool <IsShared>k__BackingField;
    public bool IsShared { get; public set; }
    protected JsSequencePlaceholderBase(string name, int minimalOccurrences, int maximalOccurrences, bool isShared);
    protected JsSequencePlaceholderBase(PlaceholderInfo placeholderInfo, bool isShared);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsShared();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsShared(bool value);
    public bool Equals(JsSequencePlaceholderBase other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.StructuralMatchers.IJavaScriptSequenceStructuralMatcher {
    [NotNullAttribute]
public abstract virtual IStructuralMatchResult MatchWithParentContext(IList`1<TTreeNode> elements, IMatchingContext contextVariant);
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.StructuralMatchers.IJavaScriptSequenceStructuralMatcher`1 {
    [NotNullAttribute]
public abstract virtual IStructuralMatchResult MatchWithParentContext(IList`1<T> elements, IMatchingContext contextVariant);
}
public interface JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.StructuralMatchers.IJavaScriptStructuralMatcher {
    public abstract virtual IStructuralMatchResult MatchWithParentContext(ITreeNode element, IMatchingContext contextVariant);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.StructuralMatchers.JavaScriptExpressionStructuralMatcher : JavaScriptStructuralMatcherBase {
    public JavaScriptExpressionStructuralMatcher(IElementMatcher matcher, StructuralSearchPatternParams params);
    public virtual IStructuralMatchResult Match(ITreeNode element, IMatchingContext context);
    public virtual IStructuralMatchResult MatchWithParentContext(ITreeNode element, IMatchingContext contextVariant);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.StructuralMatchers.JavaScriptPlaceholderStructuralMatcher : JavaScriptStructuralMatcherBase {
    public JavaScriptPlaceholderStructuralMatcher(IElementMatcher matcher, StructuralSearchPatternParams params);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.StructuralMatchers.JavaScriptPropertyStructuralMatcher : JavaScriptStructuralMatcherBase {
    public JavaScriptPropertyStructuralMatcher(IElementMatcher matcher, StructuralSearchPatternParams unknown);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.StructuralMatchers.JavaScriptSequenceStructuralMatcher`1 : SequenceStructuralMatcher`1<T> {
    public JavaScriptSequenceStructuralMatcher`1(SequenceMatcher`1<T> matcher, StructuralSearchPatternParams params);
    public virtual IStructuralMatchResult Match(ITreeNode element, IMatchingContext context);
    public sealed virtual IStructuralMatchResult MatchWithParentContext(IList`1<T> elements, IMatchingContext contextVariant);
    private bool MatchFirstWithParentContext(ITreeNode element, IMatchingContext context);
    public sealed virtual IStructuralMatchResult MatchWithParentContext(ITreeNode element, IMatchingContext contextVariant);
    public sealed virtual IStructuralMatchResult MatchWithParentContext(IList`1<TTreeNode> elements, IMatchingContext contextVariant);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.StructuralMatchers.JavaScriptStructuralMatcherBase : StructuralMatcher {
    public JavaScriptStructuralMatcherBase(IElementMatcher matcher, StructuralSearchPatternParams param);
    public virtual IReadOnlyCollection`1<string> GetExtendedWords(ISolution solution);
    public virtual IStructuralMatchResult MatchWithParentContext(ITreeNode element, IMatchingContext contextVariant);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsAccessorBodyMatcher : JavaScriptElementMatcher`1<ITsAccessorBody> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsAccessorBodyMatcher(ITsAccessorBody element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsAccessorSignatureMatcher : JavaScriptElementMatcher`1<ITsAccessorSignature> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsAccessorSignatureMatcher(ITsAccessorSignature element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsAmbientModuleNameMatcher : JavaScriptElementMatcher`1<ITsAmbientModuleName> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsAmbientModuleNameMatcher(ITsAmbientModuleName element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsAmbientModuleReferenceNameMatcher : JavaScriptElementMatcher`1<ITsAmbientModuleReferenceName> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsAmbientModuleReferenceNameMatcher(ITsAmbientModuleReferenceName element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsArrayLiteralMatcher : JavaScriptElementMatcher`1<ITsArrayLiteral> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsArrayLiteralMatcher(ITsArrayLiteral element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsArrayTypeUsageMatcher : JavaScriptElementMatcher`1<ITsArrayTypeUsage> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsArrayTypeUsageMatcher(ITsArrayTypeUsage element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsAsExpressionMatcher : JavaScriptElementMatcher`1<ITsAsExpression> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsAsExpressionMatcher(ITsAsExpression element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsBaseTypeClauseMatcher : JavaScriptElementMatcher`1<ITsBaseTypeClause> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsBaseTypeClauseMatcher(ITsBaseTypeClause element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsBlockLambdaExpressionMatcher : JavaScriptElementMatcher`1<ITsBlockLambdaExpression> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsBlockLambdaExpressionMatcher(ITsBlockLambdaExpression element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsBlockMatcher : JavaScriptElementMatcher`1<ITsBlock> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsBlockMatcher(ITsBlock element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsBreakStatementMatcher : JavaScriptElementMatcher`1<ITsBreakStatement> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsBreakStatementMatcher(ITsBreakStatement element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsCallSignatureDeclarationMatcher : JavaScriptElementMatcher`1<ITsCallSignatureDeclaration> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsCallSignatureDeclarationMatcher(ITsCallSignatureDeclaration element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsCaseCaseClauseMatcher : JavaScriptElementMatcher`1<ITsCaseCaseClause> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsCaseCaseClauseMatcher(ITsCaseCaseClause element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsCaseClausesListMatcher : JavaScriptElementMatcher`1<ITsCaseClausesList> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsCaseClausesListMatcher(ITsCaseClausesList element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsCastExpressionMatcher : JavaScriptElementMatcher`1<ITsCastExpression> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsCastExpressionMatcher(ITsCastExpression element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsCatchBlockMatcher : JavaScriptElementMatcher`1<ITsCatchBlock> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsCatchBlockMatcher(ITsCatchBlock element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsClassDeclarationMatcher : JavaScriptElementMatcher`1<ITsClassLikeDeclaration> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsClassDeclarationMatcher(ITsClassLikeDeclaration element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsConstructorDeclarationMatcher : JavaScriptElementMatcher`1<ITsConstructorDeclaration> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsConstructorDeclarationMatcher(ITsConstructorDeclaration element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsContinueStatementMatcher : JavaScriptElementMatcher`1<ITsContinueStatement> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsContinueStatementMatcher(ITsContinueStatement element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsDebugStatementMatcher : JavaScriptElementMatcher`1<ITsDebugStatement> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsDebugStatementMatcher(ITsDebugStatement element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsDeclaredTypeUsageMatcher : JavaScriptElementMatcher`1<ITsDeclaredTypeUsage> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsDeclaredTypeUsageMatcher(ITsDeclaredTypeUsage element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsDefaultClauseMatcher : JavaScriptElementMatcher`1<ITsDefaultClause> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsDefaultClauseMatcher(ITsDefaultClause element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsDoStatementMatcher : JavaScriptElementMatcher`1<ITsDoStatement> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsDoStatementMatcher(ITsDoStatement element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsEnumDeclarationMatcher : JavaScriptElementMatcher`1<ITsEnumDeclaration> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsEnumDeclarationMatcher(ITsEnumDeclaration element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsEnumMemberDeclarationMatcher : JavaScriptElementMatcher`1<ITsEnumMemberDeclaration> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsEnumMemberDeclarationMatcher(ITsEnumMemberDeclaration element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsExportAssignmentMatcher : JavaScriptElementMatcher`1<ITsExportAssignment> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsExportAssignmentMatcher(ITsExportAssignment element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsExpressionLambdaExpressionMatcher : JavaScriptElementMatcher`1<ITsExpressionLambdaExpression> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsExpressionLambdaExpressionMatcher(ITsExpressionLambdaExpression element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsExpressionStatementMatcher : JavaScriptElementMatcher`1<ITsExpressionStatement> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsExpressionStatementMatcher(ITsExpressionStatement element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsExternalModuleReferenceNameMatcher : JavaScriptElementMatcher`1<ITsExternalModuleReferenceName> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsExternalModuleReferenceNameMatcher(ITsExternalModuleReferenceName element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsFileMatcher : JavaScriptElementMatcher`1<ITsFile> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsFileMatcher(ITsFile element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsFileSectionMatcher : JavaScriptElementMatcher`1<ITsFileSection> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsFileSectionMatcher(ITsFileSection element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsFinallyBlockMatcher : JavaScriptElementMatcher`1<ITsFinallyBlock> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsFinallyBlockMatcher(ITsFinallyBlock element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsForDeclarationInitializerMatcher : JavaScriptElementMatcher`1<ITsForDeclarationInitializer> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsForDeclarationInitializerMatcher(ITsForDeclarationInitializer element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsForeachStatementMatcher : JavaScriptElementMatcher`1<ITsForeachStatement> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsForeachStatementMatcher(ITsForeachStatement element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsForExpressionInitializerMatcher : JavaScriptElementMatcher`1<ITsForExpressionInitializer> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsForExpressionInitializerMatcher(ITsForExpressionInitializer element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsForStatementMatcher : JavaScriptElementMatcher`1<ITsForStatement> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsForStatementMatcher(ITsForStatement element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsFunctionExpressionMatcher : JavaScriptElementMatcher`1<ITsFunctionExpression> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsFunctionExpressionMatcher(ITsFunctionExpression element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsFunctionExpressionSignatureMatcher : JavaScriptElementMatcher`1<ITsFunctionExpressionSignature> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsFunctionExpressionSignatureMatcher(ITsFunctionExpressionSignature element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsFunctionSignatureDeclarationMatcher : JavaScriptElementMatcher`1<ITsFunctionSignatureDeclaration> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsFunctionSignatureDeclarationMatcher(ITsFunctionSignatureDeclaration element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsFunctionStatementMatcher : JavaScriptElementMatcher`1<ITsFunctionStatement> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsFunctionStatementMatcher(ITsFunctionStatement element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsFunctionTypeUsageMatcher : JavaScriptElementMatcher`1<ITsFunctionTypeUsage> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsFunctionTypeUsageMatcher(ITsFunctionTypeUsage element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsHeritageExpressionMatcher : JavaScriptElementMatcher`1<ITsHeritageExpression> {
    public TsHeritageExpressionMatcher(ITsHeritageExpression element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsHeritageTypeListMatcher : JavaScriptElementMatcher`1<ITsHeritageTypeList> {
    public TsHeritageTypeListMatcher(ITsHeritageTypeList element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsIdentifierExpressionMatcher : JavaScriptElementMatcher`1<ITsIdentifierExpression> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsIdentifierExpressionMatcher(ITsIdentifierExpression element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsImportDeclarationMatcher : JavaScriptElementMatcher`1<ITsImportDeclaration> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsImportDeclarationMatcher(ITsImportDeclaration element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsImportedNameMatcher : JavaScriptElementMatcher`1<ITsImportedName> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsImportedNameMatcher(ITsImportedName element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsIndexExpressionMatcher : JavaScriptElementMatcher`1<ITsIndexExpression> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsIndexExpressionMatcher(ITsIndexExpression element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsIndexSignatureDeclarationMatcher : JavaScriptElementMatcher`1<ITsIndexSignatureDeclaration> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsIndexSignatureDeclarationMatcher(ITsIndexSignatureDeclaration element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsIndexSignatureForClassMatcher : JavaScriptElementMatcher`1<ITsIndexSignatureForClass> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsIndexSignatureForClassMatcher(ITsIndexSignatureForClass element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsInterfaceDeclarationMatcher : JavaScriptElementMatcher`1<ITsInterfaceDeclaration> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsInterfaceDeclarationMatcher(ITsInterfaceDeclaration element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsIntersectionTypeUsageMatcher : JavaScriptElementMatcher`1<ITsIntersectionTypeUsage> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsIntersectionTypeUsageMatcher(ITsIntersectionTypeUsage element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsInvocationExpressionMatcher : JavaScriptElementMatcher`1<ITsInvocationExpression> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsInvocationExpressionMatcher(ITsInvocationExpression element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsLabelledStatementMatcher : JavaScriptElementMatcher`1<ITsLabelledStatement> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsLabelledStatementMatcher(ITsLabelledStatement element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsLambdaExpressionFullSignatureMatcher : JavaScriptElementMatcher`1<ITsLambdaExpressionFullSignature> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsLambdaExpressionFullSignatureMatcher(ITsLambdaExpressionFullSignature element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsLambdaExpressionSimpleSignatureMatcher : JavaScriptElementMatcher`1<ITsLambdaExpressionSimpleSignature> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsLambdaExpressionSimpleSignatureMatcher(ITsLambdaExpressionSimpleSignature element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsLiteralExpressionMatcher : JavaScriptElementMatcher`1<ITsLiteralExpression> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsLiteralExpressionMatcher(ITsLiteralExpression element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsLiteralTypeUsageMatcher : JavaScriptElementMatcher`1<ITsLiteralTypeUsage> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsLiteralTypeUsageMatcher(ITsLiteralTypeUsage element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsMatcherBuilder : TsTreeNodeVisitor`2<PatternMatcherBuilderParams, IElementMatcher> {
    public static TsMatcherBuilder Instance;
    private static TsMatcherBuilder();
    public virtual IElementMatcher VisitNode(ITreeNode param, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTsAccessorBody(ITsAccessorBody tsAccessorBodyParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsAccessorSignature(ITsAccessorSignature tsAccessorSignatureParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsAmbientModuleName(ITsAmbientModuleName tsAmbientModuleNameParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsAmbientModuleReferenceName(ITsAmbientModuleReferenceName tsAmbientModuleReferenceNameParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsArrayLiteral(ITsArrayLiteral tsArrayLiteralParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsArrayTypeUsage(ITsArrayTypeUsage tsArrayTypeUsageParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsBlock(ITsBlock tsBlockParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsBlockLambdaExpression(ITsBlockLambdaExpression tsBlockLambdaExpressionParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsBreakStatement(ITsBreakStatement tsBreakStatementParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsCallSignatureDeclaration(ITsCallSignatureDeclaration tsCallSignatureDeclarationParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsCaseCaseClause(ITsCaseCaseClause tsCaseCaseClauseParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsCaseClausesList(ITsCaseClausesList tsCaseClausesListParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsCastExpression(ITsCastExpression tsCastExpressionParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsAsExpression(ITsAsExpression tsCastExpressionParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsCatchBlock(ITsCatchBlock tsCatchBlockParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsClassDeclaration(ITsClassDeclaration tsClassDeclarationParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsConstructorDeclaration(ITsConstructorDeclaration tsConstructorDeclarationParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsContinueStatement(ITsContinueStatement tsContinueStatementParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsDebugStatement(ITsDebugStatement tsDebugStatementParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsDeclaredTypeUsage(ITsDeclaredTypeUsage tsDeclaredTypeUsageParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsDefaultClause(ITsDefaultClause tsDefaultClauseParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsDoStatement(ITsDoStatement tsDoStatementParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsEnumDeclaration(ITsEnumDeclaration tsEnumDeclarationParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsEnumMemberDeclaration(ITsEnumMemberDeclaration tsEnumMemberDeclarationParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsExportAssignment(ITsExportAssignment tsExportAssignmentParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsExpressionLambdaExpression(ITsExpressionLambdaExpression tsExpressionLambdaExpressionParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsExpressionStatement(ITsExpressionStatement tsExpressionStatementParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsExternalModuleReferenceName(ITsExternalModuleReferenceName tsExternalModuleReferenceNameParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsFile(ITsFile tsFileParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsFileSection(ITsFileSection tsFileSectionParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsFinallyBlock(ITsFinallyBlock tsFinallyBlockParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsForDeclarationInitializer(ITsForDeclarationInitializer tsForDeclarationInitializerParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsForExpressionInitializer(ITsForExpressionInitializer tsForExpressionInitializerParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsForStatement(ITsForStatement tsForStatementParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsForeachStatement(ITsForeachStatement tsForeachStatementParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsFunctionExpression(ITsFunctionExpression tsFunctionExpressionParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsFunctionExpressionSignature(ITsFunctionExpressionSignature tsFunctionExpressionSignatureParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsFunctionSignatureDeclaration(ITsFunctionSignatureDeclaration tsFunctionSignatureDeclarationParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsFunctionStatement(ITsFunctionStatement tsFunctionStatementParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsFunctionTypeUsage(ITsFunctionTypeUsage tsFunctionTypeUsageParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsIdentifierExpression(ITsIdentifierExpression tsIdentifierExpressionParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsImportDeclaration(ITsImportDeclaration tsImportDeclarationParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsImportedName(ITsImportedName tsImportedNameParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsIndexExpression(ITsIndexExpression tsIndexExpressionParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsIndexSignatureDeclaration(ITsIndexSignatureDeclaration tsIndexSignatureDeclarationParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsIndexSignatureForClass(ITsIndexSignatureForClass tsIndexSignatureForClassParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsInterfaceDeclaration(ITsInterfaceDeclaration tsInterfaceDeclarationParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsInvocationExpression(ITsInvocationExpression tsInvocationExpressionParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsLabelledStatement(ITsLabelledStatement tsLabelledStatementParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsLambdaExpressionFullSignature(ITsLambdaExpressionFullSignature tsLambdaExpressionFullSignatureParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsLambdaExpressionSimpleSignature(ITsLambdaExpressionSimpleSignature tsLambdaExpressionSimpleSignatureParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsLiteralExpression(ITsLiteralExpression tsLiteralExpressionParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsMemberAccessorSignature(ITsMemberAccessorSignature tsMemberAccessorSignatureParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsMemberFunctionDeclaration(ITsMemberFunctionDeclaration tsMemberFunctionDeclarationParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsModuleDeclaration(ITsModuleDeclaration tsModuleDeclarationParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsModuleDeclarationName(ITsModuleDeclarationName tsModuleDeclarationNameParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsModuleQualifiedName(ITsModuleQualifiedName tsModuleQualifiedNameParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsNewExpression(ITsNewExpression tsNewExpressionParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsObjectLiteral(ITsObjectLiteral tsObjectLiteralParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsObjectPropertiesList(ITsObjectPropertiesList tsObjectPropertiesListParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsObjectPropertyAccessor(ITsObjectPropertyAccessor tsObjectPropertyAccessorParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsObjectPropertyFunction(ITsObjectPropertyFunction tsObjectPropertyFunctionParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsObjectPropertyFunctionBody(ITsObjectPropertyFunctionBody tsObjectPropertyFunctionBodyParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsObjectPropertyInitializer(ITsObjectPropertyInitializer tsObjectPropertyInitializerParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsObjectPropertySignature(ITsObjectPropertySignature tsObjectPropertySignatureParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsObjectTypeUsage(ITsObjectTypeUsage tsObjectTypeUsageParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsParameterDeclaration(ITsParameterDeclaration tsParameterDeclarationParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsParametersList(ITsParametersList tsParametersListParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsPropertyNameIdentifier(ITsPropertyNameIdentifier tsPropertyNameIdentifierParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsPropertyNameNumericLiteral(ITsPropertyNameNumericLiteral tsPropertyNameNumericLiteralParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsPropertyNameStringLiteral(ITsPropertyNameStringLiteral tsPropertyNameStringLiteralParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsPropertySignatureDeclaration(ITsPropertySignatureDeclaration tsPropertySignatureDeclarationParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsReferenceExpression(ITsReferenceExpression tsReferenceExpressionParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsReferenceName(ITsReferenceName tsReferenceNameParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsReturnStatement(ITsReturnStatement tsReturnStatementParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsSuperExpression(ITsSuperExpression tsSuperExpressionParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsSwitchStatement(ITsSwitchStatement tsSwitchStatementParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsThisExpression(ITsThisExpression tsThisExpressionParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsThrowStatement(ITsThrowStatement tsThrowStatementParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsTryStatement(ITsTryStatement tsTryStatementParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsTypeAnnotation(ITsTypeAnnotation tsTypeAnnotationParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsTypeArgumentList(ITsTypeArgumentList tsTypeArgumentListParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsTypeParameterDeclaration(ITsTypeParameterDeclaration tsTypeParameterDeclarationParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsTypeParameters(ITsTypeParameters tsTypeParametersParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsTypeQueryTypeUsage(ITsTypeQueryTypeUsage tsTypeQueryTypeUsageParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsVariableDeclaration(ITsVariableDeclaration tsVariableDeclarationParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsVariableDeclarationsList(ITsVariableDeclarationsList tsVariableDeclarationsListParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsWhileStatement(ITsWhileStatement tsWhileStatementParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsWithStatement(ITsWithStatement tsWithStatementParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsLiteralTypeUsage(ITsLiteralTypeUsage tsStringTypeUsageParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTsUnionTypeUsage(ITsUnionTypeUsage tsUnionTypeUsageParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTsIntersectionTypeUsage(ITsIntersectionTypeUsage tsIntersectionTypeUsageParam, PatternMatcherBuilderParams context);
    public sealed virtual IElementMatcher Build(ITreeNode element, PatternMatcherBuilderParams params);
    private IElementMatcher Build(ITypeScriptTreeNode element, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsSingleNameBinding(ITsSingleNameBinding tsSingleNameBindingParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTsAssignmentExpression(ITsAssignmentExpression tsAssignmentExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTsBinaryExpression(ITsBinaryExpression tsBinaryExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTsCompoundExpression(ITsCompoundExpression tsCompoundExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTsConditionalTernaryExpression(ITsConditionalTernaryExpression tsConditionalTernaryExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTsIfStatement(ITsIfStatement tsIfStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTsEmptyStatement(ITsEmptyStatement tsEmptyStatementParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTsParenthesizedExpression(ITsParenthesizedExpression tsParenthesizedExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTsPostfixExpression(ITsPostfixExpression tsPostfixExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTsPrefixExpression(ITsPrefixExpression tsPrefixExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTsConstructorOverloadDeclaration(ITsConstructorOverloadDeclaration tsConstructorOverloadDeclarationParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTsMemberVariableDeclaration(ITsMemberVariableDeclaration tsMemberVariableDeclarationParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTsMemberFunctionOverloadDeclaration(ITsMemberFunctionOverloadDeclaration tsMemberFunctionOverloadDeclarationParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTsMemberAccessorDeclaration(ITsMemberAccessorDeclaration tsMemberAccessorDeclarationParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTsFunctionStatementSignature(ITsFunctionStatementSignature tsFunctionStatementSignatureParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsVariableDeclarationStatement(ITsVariableDeclarationStatement tsVariableDeclarationStatementParam, PatternMatcherBuilderParams params);
    public virtual IElementMatcher VisitTsLexicalDeclaration(ITsLexicalDeclaration tsLexicalDeclarationParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTsClassExpression(ITsClassExpression tsClassExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTsBaseTypeClause(ITsBaseTypeClause tsBaseTypeClauseParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTsHeritageExpression(ITsHeritageExpression tsHeritageExpressionParam, PatternMatcherBuilderParams context);
    public virtual IElementMatcher VisitTsHeritageTypeList(ITsHeritageTypeList tsHeritageTypeListParam, PatternMatcherBuilderParams context);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsMemberAccessorSignatureMatcher : JavaScriptElementMatcher`1<ITsMemberAccessorSignature> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsMemberAccessorSignatureMatcher(ITsMemberAccessorSignature element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsMemberFunctionDeclarationMatcher : JavaScriptElementMatcher`1<ITsMemberFunctionDeclaration> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsMemberFunctionDeclarationMatcher(ITsMemberFunctionDeclaration element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsModuleDeclarationMatcher : JavaScriptElementMatcher`1<ITsModuleDeclaration> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsModuleDeclarationMatcher(ITsModuleDeclaration element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsModuleDeclarationNameMatcher : JavaScriptElementMatcher`1<ITsModuleDeclarationName> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsModuleDeclarationNameMatcher(ITsModuleDeclarationName element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsModuleQualifiedNameMatcher : JavaScriptElementMatcher`1<ITsModuleQualifiedName> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsModuleQualifiedNameMatcher(ITsModuleQualifiedName element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsNewExpressionMatcher : JavaScriptElementMatcher`1<ITsNewExpression> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsNewExpressionMatcher(ITsNewExpression element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsObjectLiteralMatcher : JavaScriptElementMatcher`1<ITsObjectLiteral> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsObjectLiteralMatcher(ITsObjectLiteral element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsObjectPropertiesListMatcher : JavaScriptElementMatcher`1<ITsObjectPropertiesList> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsObjectPropertiesListMatcher(ITsObjectPropertiesList element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsObjectPropertyAccessorMatcher : JavaScriptElementMatcher`1<ITsObjectPropertyAccessor> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsObjectPropertyAccessorMatcher(ITsObjectPropertyAccessor element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsObjectPropertyFunctionBodyMatcher : JavaScriptElementMatcher`1<ITsObjectPropertyFunctionBody> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsObjectPropertyFunctionBodyMatcher(ITsObjectPropertyFunctionBody element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsObjectPropertyFunctionMatcher : JavaScriptElementMatcher`1<ITsObjectPropertyFunction> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsObjectPropertyFunctionMatcher(ITsObjectPropertyFunction element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsObjectPropertyInitializerMatcher : JavaScriptElementMatcher`1<ITsObjectPropertyInitializer> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsObjectPropertyInitializerMatcher(ITsObjectPropertyInitializer element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsObjectPropertySignatureMatcher : JavaScriptElementMatcher`1<ITsObjectPropertySignature> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsObjectPropertySignatureMatcher(ITsObjectPropertySignature element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsObjectTypeUsageMatcher : JavaScriptElementMatcher`1<ITsObjectTypeUsage> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsObjectTypeUsageMatcher(ITsObjectTypeUsage element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsParameterDeclarationMatcher : JavaScriptElementMatcher`1<ITsParameterDeclaration> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsParameterDeclarationMatcher(ITsParameterDeclaration element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsParametersListMatcher : JavaScriptElementMatcher`1<ITsParametersList> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsParametersListMatcher(ITsParametersList element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsPropertyNameIdentifierMatcher : JavaScriptElementMatcher`1<ITsPropertyNameIdentifier> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsPropertyNameIdentifierMatcher(ITsPropertyNameIdentifier element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsPropertyNameNumericLiteralMatcher : JavaScriptElementMatcher`1<ITsPropertyNameNumericLiteral> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsPropertyNameNumericLiteralMatcher(ITsPropertyNameNumericLiteral element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsPropertyNameStringLiteralMatcher : JavaScriptElementMatcher`1<ITsPropertyNameStringLiteral> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsPropertyNameStringLiteralMatcher(ITsPropertyNameStringLiteral element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsPropertySignatureDeclarationMatcher : JavaScriptElementMatcher`1<ITsPropertySignatureDeclaration> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsPropertySignatureDeclarationMatcher(ITsPropertySignatureDeclaration element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsReferenceExpressionMatcher : JavaScriptElementMatcher`1<ITsReferenceExpression> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsReferenceExpressionMatcher(ITsReferenceExpression element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsReferenceNameMatcher : JavaScriptElementMatcher`1<ITsReferenceName> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsReferenceNameMatcher(ITsReferenceName element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsReturnStatementMatcher : JavaScriptElementMatcher`1<ITsReturnStatement> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsReturnStatementMatcher(ITsReturnStatement element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsSuperExpressionMatcher : JavaScriptElementMatcher`1<ITsSuperExpression> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsSuperExpressionMatcher(ITsSuperExpression element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsSwitchStatementMatcher : JavaScriptElementMatcher`1<ITsSwitchStatement> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsSwitchStatementMatcher(ITsSwitchStatement element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsThisExpressionMatcher : JavaScriptElementMatcher`1<ITsThisExpression> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsThisExpressionMatcher(ITsThisExpression element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsThrowStatementMatcher : JavaScriptElementMatcher`1<ITsThrowStatement> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsThrowStatementMatcher(ITsThrowStatement element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsTryStatementMatcher : JavaScriptElementMatcher`1<ITsTryStatement> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsTryStatementMatcher(ITsTryStatement element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsTypeAnnotationMatcher : JavaScriptElementMatcher`1<ITsTypeAnnotation> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsTypeAnnotationMatcher(ITsTypeAnnotation element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsTypeArgumentListMatcher : JavaScriptElementMatcher`1<ITsTypeArgumentList> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsTypeArgumentListMatcher(ITsTypeArgumentList element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsTypeParameterDeclarationMatcher : JavaScriptElementMatcher`1<ITsTypeParameterDeclaration> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsTypeParameterDeclarationMatcher(ITsTypeParameterDeclaration element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsTypeParametersMatcher : JavaScriptElementMatcher`1<ITsTypeParameters> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsTypeParametersMatcher(ITsTypeParameters element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsTypeQueryTypeUsageMatcher : JavaScriptElementMatcher`1<ITsTypeQueryTypeUsage> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsTypeQueryTypeUsageMatcher(ITsTypeQueryTypeUsage element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsUnionTypeUsageMatcher : JavaScriptElementMatcher`1<ITsUnionTypeUsage> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsUnionTypeUsageMatcher(ITsUnionTypeUsage element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsVariableDeclarationMatcher : JavaScriptElementMatcher`1<ITsVariableDeclaration> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsVariableDeclarationMatcher(ITsVariableDeclaration element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsVariableDeclarationsListMatcher : JavaScriptElementMatcher`1<ITsVariableDeclarationsList> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsVariableDeclarationsListMatcher(ITsVariableDeclarationsList element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsWhileStatementMatcher : JavaScriptElementMatcher`1<ITsWhileStatement> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsWhileStatementMatcher(ITsWhileStatement element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Matchers.TsWithStatementMatcher : JavaScriptElementMatcher`1<ITsWithStatement> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public TsWithStatementMatcher(ITsWithStatement element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.NonTrivialMatchers.ConstructorOverloadDeclarationMatcher : JavaScriptElementMatcher`1<ITsConstructorOverloadDeclaration> {
    private String[] myWords;
    public IEnumerable`1<string> Words { get; }
    public ConstructorOverloadDeclarationMatcher(ITsConstructorOverloadDeclaration element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.NonTrivialMatchers.FunctionStatementSignatureMatcher : JavaScriptElementMatcher`1<ITsFunctionStatementSignature> {
    private IElementMatcher myModifierMatcher;
    public FunctionStatementSignatureMatcher(ITsFunctionStatementSignature element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.NonTrivialMatchers.LexicalDeclarationStatementMatcher : JavaScriptElementMatcher`1<ITsLexicalDeclaration> {
    private String[] myWords;
    private IElementMatcher myModifierMatcher;
    public IEnumerable`1<string> Words { get; }
    public LexicalDeclarationStatementMatcher(ITsLexicalDeclaration element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.NonTrivialMatchers.MemberAccessorDeclarationMatcher : JavaScriptElementMatcher`1<ITsMemberAccessorDeclaration> {
    private IElementMatcher myModifierMatcher;
    public MemberAccessorDeclarationMatcher(ITsMemberAccessorDeclaration element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.NonTrivialMatchers.MemberFunctionOverloadDeclarationMatcher : JavaScriptElementMatcher`1<ITsMemberFunctionOverloadDeclaration> {
    private ModifierMatcher myModifierMatcher;
    public MemberFunctionOverloadDeclarationMatcher(ITsMemberFunctionOverloadDeclaration element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.NonTrivialMatchers.MemberVariableDeclarationMatcher : JavaScriptElementMatcher`1<ITsMemberVariableDeclaration> {
    private IElementMatcher myModifierMatcher;
    public MemberVariableDeclarationMatcher(ITsMemberVariableDeclaration element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.NonTrivialMatchers.ModifierMatcher : object {
    private bool myIsStatic;
    private bool myIsPrivate;
    private bool myIsExport;
    private bool myIsDeclare;
    private bool mySkipModifiers;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public ModifierMatcher(ITypeScriptModifiersOwner modifiersOwner, PatternMatcherBuilderParams params);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.NonTrivialMatchers.VariableDeclarationStatementMatcher : JavaScriptElementMatcher`1<ITsVariableDeclarationStatement> {
    private String[] myWords;
    private IElementMatcher myModifierMatcher;
    public IEnumerable`1<string> Words { get; }
    public VariableDeclarationStatementMatcher(ITsVariableDeclarationStatement element, PatternMatcherBuilderParams params, IJavaScriptMatcherBuilder builder);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
    public virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Parsers.TsStructuralClassMemberPatternBuilder : object {
    public static TsStructuralClassMemberPatternBuilder Instance;
    private bool myGuessPlaceholders;
    public TsStructuralClassMemberPatternBuilder(bool guessPlaceholders);
    private static TsStructuralClassMemberPatternBuilder();
    public sealed virtual IStructuralMatcher CreateMatcher(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
    public sealed virtual IElementMatcher CreateElementMatcher(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
    public sealed virtual IPatternLexerResult ParsePattern(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Parsers.TsStructuralSearchExpressionPatternBuilder : object {
    public static TsStructuralSearchExpressionPatternBuilder Instance;
    private bool myGuessPlaceholders;
    public TsStructuralSearchExpressionPatternBuilder(bool guessPlaceholders);
    private static TsStructuralSearchExpressionPatternBuilder();
    public sealed virtual IStructuralMatcher CreateMatcher(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
    public sealed virtual IElementMatcher CreateElementMatcher(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
    public sealed virtual IPatternLexerResult ParsePattern(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Parsers.TsStructuralSearchPropertyPatternBuilder : object {
    public static TsStructuralSearchPropertyPatternBuilder Instance;
    private bool myGuessPlaceholders;
    public TsStructuralSearchPropertyPatternBuilder(bool guessPlaceholders);
    private static TsStructuralSearchPropertyPatternBuilder();
    public sealed virtual IStructuralMatcher CreateMatcher(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
    public sealed virtual IElementMatcher CreateElementMatcher(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
    public sealed virtual IPatternLexerResult ParsePattern(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Parsers.TsStructuralSearchStatementsPatternBuilder : object {
    public static TsStructuralSearchStatementsPatternBuilder Instance;
    private bool myGuessPlaceholders;
    public TsStructuralSearchStatementsPatternBuilder(bool guessPlaceholders);
    private static TsStructuralSearchStatementsPatternBuilder();
    public sealed virtual IStructuralMatcher CreateMatcher(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
    public sealed virtual IElementMatcher CreateElementMatcher(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
    public sealed virtual IPatternLexerResult ParsePattern(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Placeholders.Internal.TsLiteralPlaceholder : JavaScriptLiteralPlaceholder {
    public TsLiteralPlaceholder(string name, ConstantValueTypes constantValueType, bool isShared);
    public TsLiteralPlaceholder(PlaceholderInfo placeholderInfo, bool isShared);
    public virtual IPlaceholder Clone();
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Placeholders.Internal.TsLiteralPlaceholderMatcher : JavaScriptLiteralPlaceholderMatcher {
    protected IJavaScriptMatcherBuilder MatcherBuilder { get; }
    public TsLiteralPlaceholderMatcher(JavaScriptLiteralPlaceholder placeholder, StructuralSearchPatternParams params);
    protected virtual IJavaScriptMatcherBuilder get_MatcherBuilder();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Placeholders.Internal.TsNameWithResolvePlaceholder : JavaScriptNameWithResolvePlaceholder {
    public TsNameWithResolvePlaceholder(string name, string nameRegex, bool nameRegexCaseSensitive, bool isShared);
    public TsNameWithResolvePlaceholder(PlaceholderInfo placeholderInfo, bool isShared);
    public virtual IPlaceholder Clone();
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Placeholders.Internal.TsNameWithResolvePlaceholderMatcher : JavaScriptNameWithResolvePlaceholderMatcher {
    protected IJavaScriptMatcherBuilder MatcherBuilder { get; }
    public TsNameWithResolvePlaceholderMatcher(JavaScriptNameWithResolvePlaceholder placeholder, StructuralSearchPatternParams params);
    protected virtual IJavaScriptMatcherBuilder get_MatcherBuilder();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Placeholders.Internal.TsParamaterPlaceholderMatcher : JavaScriptParameterPlaceholderMatcher {
    protected IJavaScriptMatcherBuilder MatcherBuilder { get; }
    public TsParamaterPlaceholderMatcher(JavaScriptParameterPlaceholder placeholder, StructuralSearchPatternParams params);
    protected virtual IJavaScriptMatcherBuilder get_MatcherBuilder();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Placeholders.Internal.TsParameterPlaceholder : JavaScriptParameterPlaceholder {
    public TsParameterPlaceholder(string name, int minimalOccurrences, int maximalOccurrences, bool isShared);
    public TsParameterPlaceholder(string name, bool isShared);
    public TsParameterPlaceholder(PlaceholderInfo placeholderInfo, bool isShared);
    public virtual IPlaceholder Clone();
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Placeholders.Internal.TsTypeAnnotationPlaceholder : JsPlaceholderBase {
    private static String[] ourReplacingText;
    public static string TAG_NAME;
    public String[] ReplacingText { get; }
    public string Description { get; }
    public TsTypeAnnotationPlaceholder(string name, bool isShared);
    public TsTypeAnnotationPlaceholder(PlaceholderInfo placeholderInfo, bool isShared);
    private static TsTypeAnnotationPlaceholder();
    public virtual String[] get_ReplacingText();
    public virtual PlaceholderInfo ToPlaceholderInfo();
    public virtual IPlaceholder Clone();
    public virtual string get_Description();
    public bool Equals(TsTypeAnnotationPlaceholder other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Placeholders.Internal.TsTypeAnnotationPlaceholderMatcher : PlaceholderMatcherBase {
    private PatternMatcherBuilderParams myParams;
    protected IJavaScriptMatcherBuilder MatcherBuilder { get; }
    public TsTypeAnnotationPlaceholderMatcher(TsTypeAnnotationPlaceholder placeholder, StructuralSearchPatternParams params);
    protected virtual IJavaScriptMatcherBuilder get_MatcherBuilder();
    public virtual IElementMatcher CreatePlaceholderMatcher(ITreeNode element);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Placeholders.Internal.TsTypeParametersPlaceholder : JsPlaceholderBase {
    private static String[] ourReplacingText;
    public static string TAG_NAME;
    public String[] ReplacingText { get; }
    public string Description { get; }
    public TsTypeParametersPlaceholder(string name, bool isShared);
    public TsTypeParametersPlaceholder(PlaceholderInfo placeholderInfo, bool isShared);
    private static TsTypeParametersPlaceholder();
    public virtual String[] get_ReplacingText();
    public virtual PlaceholderInfo ToPlaceholderInfo();
    public virtual IPlaceholder Clone();
    public virtual string get_Description();
    public bool Equals(TsTypeParametersPlaceholder other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Placeholders.Internal.TsTypeParametersPlaceholderMatcher : PlaceholderMatcherBase {
    private PatternMatcherBuilderParams myParams;
    protected IJavaScriptMatcherBuilder MatcherBuilder { get; }
    public TsTypeParametersPlaceholderMatcher(TsTypeParametersPlaceholder placeholder, StructuralSearchPatternParams params);
    protected virtual IJavaScriptMatcherBuilder get_MatcherBuilder();
    public virtual IElementMatcher CreatePlaceholderMatcher(ITreeNode element);
    public virtual bool Match(ITreeNode element, IMatchingContext context);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Placeholders.TsArgumentPlaceholder : JavaScriptArgumentPlaceholder {
    public TsArgumentPlaceholder(string name, int minimalOccurrences, int maximalOccurrences, bool isShared);
    public TsArgumentPlaceholder(string name, bool isShared);
    public TsArgumentPlaceholder(PlaceholderInfo placeholderInfo, bool isShared);
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
    public virtual IPlaceholder Clone();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Placeholders.TsArgumentPlaceholderMatcher : JavaScriptArgumentPlaceholderMatcher {
    protected IJavaScriptMatcherBuilder MatcherBuilder { get; }
    public TsArgumentPlaceholderMatcher(JavaScriptArgumentPlaceholder placeholder, StructuralSearchPatternParams params);
    protected virtual IJavaScriptMatcherBuilder get_MatcherBuilder();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Placeholders.TsExpressionPlaceholder : JavaScriptExpressionPlaceholder {
    public TsExpressionPlaceholder(string name, bool isShared);
    public TsExpressionPlaceholder(PlaceholderInfo placeholderInfo, bool isShared);
    public virtual IPlaceholder Clone();
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Placeholders.TsExpressionPlaceholderMatcher : JavaScriptExpressionPlaceholderMatcher {
    protected IJavaScriptMatcherBuilder MatcherBuilder { get; }
    public TsExpressionPlaceholderMatcher(JavaScriptExpressionPlaceholder placeholder, StructuralSearchPatternParams params);
    protected virtual IJavaScriptMatcherBuilder get_MatcherBuilder();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Placeholders.TsMetaPlaceholder : object {
    private string myName;
    private static String[] ourReplacingText;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public string Name { get; }
    public string Description { get; }
    public String[] ReplacingText { get; }
    public ICollection`1<string> Words { get; }
    public TsMetaPlaceholder(string name);
    private static TsMetaPlaceholder();
    public sealed virtual string get_Name();
    public sealed virtual string get_Description();
    public sealed virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
    public sealed virtual String[] get_ReplacingText();
    public sealed virtual ICollection`1<string> get_Words();
    public sealed virtual PlaceholderInfo ToPlaceholderInfo();
    public sealed virtual IPlaceholder Clone();
    private sealed virtual override object System.ICloneable.Clone();
    public bool Equals(TsMetaPlaceholder other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Placeholders.TsNamePlaceholder : JavaScriptNamePlaceholder {
    public TsNamePlaceholder(string name, string nameRegex, bool nameRegexCaseSensitive, bool isShared);
    public TsNamePlaceholder(PlaceholderInfo placeholderInfo, bool isShared);
    public virtual IPlaceholder Clone();
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Placeholders.TsNamePlaceholderMatcher : JavaScriptNamePlaceholderMatcher {
    protected IJavaScriptMatcherBuilder MatcherBuilder { get; }
    public TsNamePlaceholderMatcher(JavaScriptNamePlaceholder placeholder, StructuralSearchPatternParams params);
    protected virtual IJavaScriptMatcherBuilder get_MatcherBuilder();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Placeholders.TsStatementPlaceholder : JavaScriptStatementPlaceholder {
    public TsStatementPlaceholder(string name, int minimalOccurrences, int maximalOccurrences, bool isShared);
    public TsStatementPlaceholder(string name, bool isShared);
    public TsStatementPlaceholder(PlaceholderInfo placeholderInfo, bool isShared);
    public virtual IPlaceholder Clone();
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.Placeholders.TsStatementPlaceholderMatcher : JavaScriptStatementPlaceholderMatcher {
    protected IJavaScriptMatcherBuilder MatcherBuilder { get; }
    public TsStatementPlaceholderMatcher(JavaScriptStatementPlaceholder placeholder, StructuralSearchPatternParams params);
    protected virtual IJavaScriptMatcherBuilder get_MatcherBuilder();
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.StructuralMatchers.TsClassMemberStructuralMatcher : JavaScriptStructuralMatcherBase {
    public TsClassMemberStructuralMatcher(IElementMatcher matcher, StructuralSearchPatternParams params);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.TsPatternLexer : PatternLexer {
    protected LanguageService LanguageService { get; }
    protected bool MetaPlaceholderSupported { get; }
    public virtual IPatternLexerResult TryParsePattern(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params, Func`2<IParser, ITreeNode> createElement, int realShift, bool createUnknownPlaceholders, bool deleteUnusedPlaceholders);
    protected virtual LanguageService get_LanguageService();
    protected virtual bool get_MetaPlaceholderSupported();
    protected virtual IMetaPlaceholder GetMetaPlaceholder(string name);
    protected virtual IUnknownPlaceholder CreateUnknownPlaceholder(string name);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.TypeScript.TypeScriptLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.TsPlaceholderGuesser : JavaScriptPlaceholderGuesser {
    public virtual IPlaceholder Guess(ITreeNode node, PlaceholderUsage usage);
}
[StructuralSearcherFactoryAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.TypeScript.TypeScriptLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.TsStructuralSearchFactory : JavaScriptStructuralSearcherFactory {
    public bool IsInternal { get; }
    public TsStructuralSearchFactory(TsStructuralSearchPatternFromCodeCreator patternFromCodeCreator);
    public virtual bool get_IsInternal();
    public virtual IStructuralSearchPattern CreatePattern();
    public virtual IStructuralSearchPattern CreatePattern(string pattern, IPlaceholder[] placeholders);
    public virtual void Replace(IStructuralSearchPattern pattern, IStructuralMatchResult result);
    public virtual void Replace(IEnumerable`1<IStructuralMatchResult> targets, IStructuralSearchPattern pattern);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.TsStructuralSearchPattern : JavaScriptStructuralSearchPattern {
    private static IStructuralSearchPatternBuilder[] ourBuilders;
    private static IStructuralSearchPatternBuilder[] ourGuessBuilders;
    protected IStructuralSearchPatternBuilder[] Builders { get; }
    protected IStructuralSearchPatternBuilder[] GuessBuilders { get; }
    public PsiLanguageType Language { get; }
    public TsStructuralSearchPattern(string textPattern);
    public TsStructuralSearchPattern(string textPattern, IEnumerable`1<IPlaceholder> placeholders);
    public TsStructuralSearchPattern(string textPattern, IPlaceholder[] placeholders);
    public TsStructuralSearchPattern(string textPattern, StructuralSearchPatternParams params, IPlaceholder[] placeholders);
    public TsStructuralSearchPattern(string textPattern, StructuralSearchPatternParams params, IEnumerable`1<IPlaceholder> placeholders);
    public TsStructuralSearchPattern(string textPattern, StructuralSearchPatternParams params, IDictionary`2<string, IPlaceholder> placeholders);
    private static TsStructuralSearchPattern();
    protected virtual IStructuralSearchPatternBuilder[] get_Builders();
    protected virtual IStructuralSearchPatternBuilder[] get_GuessBuilders();
    public virtual PsiLanguageType get_Language();
    public bool Equals(TsStructuralSearchPattern other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual void ReadPlaceholders(IEnumerable`1<PlaceholderInfo> placeholderInfos);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.TypeScript.TypeScriptLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.TsStructuralSearchPatternFromCodeCreator : JavaScriptStructuralSearchPatternFromCodeCreator {
    public virtual IStructuralSearchPattern CreatePattern(ISolution solution, DocumentRange selection);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.StructuralSearch.TypeScript.TsStructuralSearchReplacer : object {
    public static void Replace(IEnumerable`1<IStructuralMatchResult> matches, string replacePattern, IDictionary`2<string, IPlaceholder> placeholders, bool formatAfterReplace);
    public static ITreeNode Replace(IStructuralMatchResult match, string replacePattern, IDictionary`2<string, IPlaceholder> placeholders, bool formatAfterReplace);
    public static void ReplacePlaceholderOccurrences(string placeholderForReplace, IStructuralMatchResult match, string replacePattern, IDictionary`2<string, IPlaceholder> placeholders, bool formatAfterReplace);
    public static TTreeNode CreateReplacementTreeNode(IStructuralMatchResult match, string replacePattern, IDictionary`2<string, IPlaceholder> placeholders, bool formatAfterReplace);
    private static void RemoveElementsAfterFirst(IEnumerable`1<ITreeNode> elements);
    private static string PrepareReplaceText(string replacePattern, IDictionary`2<string, IPlaceholder> placeholders, List`1& replacements, Func`2<string, object> getMatchedElement);
    private static ITreeNode DoReplace(ITreeNode elementToReplace, string replacePattern, IDictionary`2<string, IPlaceholder> placeholders, Func`2<string, object> getMatchedElement, IEnumerable`1<ITreeNode> elementsToRemove, bool formatAfterReplace);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JavaScriptLikeBaseLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.TodoItems.JavaScriptTodoContentsProvider : DefaultTodoContentsProvider {
    public virtual Nullable`1<TextRange> GetTokenContentsRange(string documentText, TextRange tokenRange, TokenNodeType tokenType);
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.TypingAssist.JavaScriptBraceMatcher : BracketMatcher {
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.TypingAssist.JavaScriptBracketMatcher : BracketMatcher {
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.TypingAssist.JavaScriptTypingAssist : JavaScriptTypingAssistBase {
    public JavaScriptTypingAssist(Lifetime lifetime, TypingAssistDependencies dependencies);
    protected virtual bool IsSupported(ITextControl textControl);
}
public abstract class JetBrains.ReSharper.Feature.Services.JavaScript.TypingAssist.JavaScriptTypingAssistBase : TypingAssistForCLikeLanguage`1<JavaScriptLikeBaseLanguage> {
    [CompilerGeneratedAttribute]
private NodeTypeSet <STRING_LITERALS>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeTypeSet <ACCESS_CHAIN_TOKENS>k__BackingField;
    protected TokenNodeType LBRACKET { get; }
    protected TokenNodeType RBRACKET { get; }
    protected TokenNodeType LPARENTH { get; }
    protected TokenNodeType LBRACE { get; }
    protected TokenNodeType RBRACE { get; }
    protected TokenNodeType SEMICOLON { get; }
    protected TokenNodeType DOT { get; }
    protected TokenNodeType RPARENTH { get; }
    protected TokenNodeType WHITE_SPACE { get; }
    protected TokenNodeType NEW_LINE { get; }
    protected TokenNodeType PLUS { get; }
    protected NodeTypeSet STRING_LITERALS { get; }
    protected NodeTypeSet ACCESS_CHAIN_TOKENS { get; }
    protected TokenNodeType END_OF_LINE_COMMENT { get; }
    protected TokenNodeType C_STYLE_COMMENT { get; }
    protected JavaScriptTypingAssistBase(Lifetime lifetime, TypingAssistDependencies dependencies);
    protected virtual bool GetAutoInsertDataForRBrace(ITextControl textControl, ITokenNode rBraceToken, TreeTextRange treeLBraceRange, DocumentOffset lBracePos, int position, IDocument document, DocumentOffset& positionForRBrace, String& rBraceText, IFile& file);
    protected virtual TokenNodeType get_LBRACKET();
    protected virtual TokenNodeType get_RBRACKET();
    protected virtual TokenNodeType get_LPARENTH();
    protected virtual TokenNodeType get_LBRACE();
    protected virtual TokenNodeType get_RBRACE();
    protected virtual TokenNodeType get_SEMICOLON();
    protected virtual TokenNodeType get_DOT();
    protected virtual TokenNodeType get_RPARENTH();
    protected virtual TokenNodeType get_WHITE_SPACE();
    protected virtual TokenNodeType get_NEW_LINE();
    protected virtual TokenNodeType get_PLUS();
    [CompilerGeneratedAttribute]
protected virtual NodeTypeSet get_STRING_LITERALS();
    [CompilerGeneratedAttribute]
protected virtual NodeTypeSet get_ACCESS_CHAIN_TOKENS();
    protected virtual TokenNodeType get_END_OF_LINE_COMMENT();
    protected virtual TokenNodeType get_C_STYLE_COMMENT();
    protected virtual bool IsTokenSuitableForCloseBracket(TokenNodeType nextTokenType);
    private bool HandleRightBraceTyped2(ITypingContext typingContext);
    public virtual Pair`2<ITreeRange, ITreeRangePointer> GetRangeToFormatAfterRBrace(ITextControl textControl);
    protected virtual Pair`2<ITreeRange, ITreeRangePointer> DoGetRangeToFormatAfterRBrace(ITokenNode tokenNode);
    protected virtual bool IsNextCharDoesNotStartNewLiteral(ITypingContext typingContext, CachingLexer lexer, int charPos, IBuffer buffer);
    protected virtual bool AllowOneCharacterStringLiteralToBeSkipped(CachingLexer lexer);
    protected virtual bool CheckThatCLikeLineEndsInOpenStringLiteral(ITextControl textControl, CachingLexer lexer, int lineEndPos, char c, NodeTypeSet correspondingTokenType, bool isStringWithAt, Int32& charPos, bool defaultReturnValue);
    protected virtual bool IsStopperTokenForStringLiteral(TokenNodeType tokenType);
    protected virtual ITreeNode GetParentForFormatOnSemicolon(ITreeNode node);
    protected virtual bool IsNodeSuitableAsSemicolonFormatParent(ITreeNode node);
    protected virtual IndentTypingHelper`1<JavaScriptLikeBaseLanguage> GetIndentTypingHelper();
    protected bool HandleEnterPressed(IActionContext context);
    protected virtual bool DoHandleEnterAfterTagHeader(ITextControl textControl);
    protected virtual Nullable`1<StringVerbatimity> TryGetStringVerbatimity(CachingLexer lexer);
    private void AdvanceToEndOfEscapeSequence(ITextControl textControl);
    private bool IsBehindMultilineBackslash(ITextControl textControl);
    protected virtual bool DoReformatForSmartEnter(ITextControl textControl, TreeOffset lBraceTreePos, TreeOffset rBraceTreePos, int charPos, ITokenNode lBraceNode, ITokenNode rBraceNode, bool afterLBrace, IFile file, bool oneLine);
    private string GetDummyTextForSmartEnterFormat(ITokenNode lBraceNode, ITokenNode rBraceNode, IFile file, TreeTextRange reparseTreeOffset);
    private static bool IsFiltered(ITokenNode dummyNode);
    public bool ReformatForSmartEnter(string dummyText, ITextControl textControl, IFile file, TreeTextRange reparseTreeOffset, TreeOffset lBraceTreePos, TreeOffset rBraceTreePos, bool insertEnterAfter, bool oneLine, bool reformatBeforeLBrace);
    protected virtual bool GetPreferWrapBeforeOpSignSetting(IContextBoundSettingsStore settingsStore);
    protected bool HandleBackspacePressed(IActionContext context);
    protected virtual bool HandleAccessChainTypoCorrection(ITypingContext typingContext, char accessKind, Nullable`1<char> prevCharToSkip);
    protected virtual BracketMatcher CreateBracketMatcher();
    protected virtual BracketMatcher CreateBraceMatcher();
    protected bool HandleDelPressed(IActionContext context);
    public virtual bool QuickCheckAvailability(ITextControl textControl, IPsiSourceFile projectFile);
    protected virtual bool IsLBrace(ITextControl textControl, ITreeNode node);
    protected virtual bool IsLBrace(ITextControl textControl, CachingLexer lexer);
    protected virtual bool IsRBrace(ITextControl textControl, CachingLexer lexer);
    protected virtual bool IsRBrace(ITextControl textControl, ITreeNode node);
    protected virtual bool IsSemicolon(ITextControl textControl, ITreeNode node);
}
public static class JetBrains.ReSharper.Feature.Services.JavaScript.TypingAssist.JsDoc.JsDocGenerateUtil : object {
    public static string JsDocCommentEnd;
    public static string JsDocCommentStart;
    public static string GenerateJsDocCommentBody(IJsSignatureNode functionExpression, string originalIndent);
    public static string GenerateJsDocBody(IJsDocCommentNodeOwner commentNodeOwner, string originalIndent);
    public static bool IsWellFormedJsDocLine(string line);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.TypingAssist.JsDoc.JsDocTypingHandler : object {
    private ISolution mySolution;
    private IPsiFiles myPsiFiles;
    private DocumentTransactionManager myTransactionManager;
    public JsDocTypingHandler(ITypingAssistManager typingAssistManager, Lifetime lifetime, ISolution solution, IPsiFiles psiFiles, DocumentTransactionManager transactionManager);
    private static string GetOriginalIndent(IDocument document, DocumentCoords commentStart);
    private bool HandleAsterisk(ITypingContext typingContext);
    public sealed virtual bool QuickCheckAvailability(ITextControl textControl, IPsiSourceFile projectFile);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.TypingAssist.Json.JsonTypingAssist : JavaScriptTypingAssistBase {
    public JsonTypingAssist(Lifetime lifetime, TypingAssistDependencies dependencies);
    private bool IsTypingSmartColonEnabled(ITypingContext context);
    private bool IsTypingSmartCommaEnabled(ITypingContext context);
    private bool HandleCommaTyped(ITypingContext typingContext);
    private bool HandleColonTyped(ITypingContext typingContext);
    protected virtual bool IsSupported(ITextControl textControl);
    public virtual bool QuickCheckAvailability(ITextControl textControl, IPsiSourceFile projectFile);
}
public static class JetBrains.ReSharper.Feature.Services.JavaScript.TypingAssist.Json.JsonTypingAssistOptions : object {
    public static Expression`1<Func`2<JsonTypingAssistSettings, bool>> SmartCommaEnabledExpression;
    public static Expression`1<Func`2<JsonTypingAssistSettings, bool>> SmartColonEnabledExpression;
    private static JsonTypingAssistOptions();
}
[SettingsKeyAttribute("JetBrains.ReSharper.Resources.Settings.CodeEditingSettings", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "TypingAssistanceSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.TypingAssist.Json.JsonTypingAssistSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "AutoFixCommaToGoOutsideQuotesOfJSONValueSettingDescription")]
public bool SmartCommaEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "AutoFixColonToGoOutsideQuotesOfJSONKeySettingDescription")]
public bool SmartColonEnabled;
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.JavaScript.TypingAssist.Json.ZoneMarker : object {
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.TypingAssist.TypeScript.TypeScriptAngleBracketMatcher : BracketMatcher {
}
public class JetBrains.ReSharper.Feature.Services.JavaScript.TypingAssist.TypeScript.TypeScriptBracketMatcher : JavaScriptBracketMatcher {
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.JavaScript.TypingAssist.TypeScript.TypeScriptTypingAssist : JavaScriptTypingAssistBase {
    private static NodeTypeSet TypeParamTokens;
    public TypeScriptTypingAssist(Lifetime lifetime, TypingAssistDependencies dependencies);
    private static TypeScriptTypingAssist();
    protected virtual bool IsSupported(ITextControl textControl);
    protected virtual bool GetAutoInsertDataForRBrace(ITextControl textControl, ITokenNode rBraceToken, TreeTextRange treeLBraceRange, DocumentOffset lBracePos, int position, IDocument document, DocumentOffset& positionForRBrace, String& rBraceText, IFile& file);
    protected virtual bool NeedSkipCloseBracket(ITextControl textControl, CachingLexer lexer, char charTyped);
    protected virtual Pair`2<ITreeRange, ITreeRangePointer> DoGetRangeToFormatAfterRBrace(ITokenNode tokenNode);
    [CompilerGeneratedAttribute]
private BracketMatcher <NeedSkipCloseBracket>b__4_1(TokenNodeType leftBracket);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.JavaScript.TypingAssist.TypeScript.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.JavaScript.TypingAssist.ZoneMarker : object {
}
public static class JetBrains.ReSharper.Feature.Services.JavaScript.Util.ForeachLoopUtil : object {
    [NotNullAttribute]
public static INamesSuggestion SuggestIteratorVariableNames(IForeachStatement statement);
    public static HotspotInfo[] CreateHotspotInfoForIterator(IForeachStatement statement, IReadOnlyCollection`1<string> namesCollection, IList`1<IReferenceExpression> iteratorReferences);
}
public static class JetBrains.ReSharper.Feature.Services.JavaScript.Util.TsInlineTypeAliasUtil : object {
    public static Tuple`2<ITsTypeAliasDeclaration, ITsTypeUsage> FindAliasDeclarationWithType(TreeOffset caretOffset, IJavaScriptFile jsFile);
    public static void InlineAlias(IProgressIndicator progress, ITsTypeAliasDeclaration typeAliasDeclaration, ITsTypeUsage typeUsage);
}
public static class JetBrains.ReSharper.Feature.Services.JavaScript.Util.TsIntroduceTypeAliasUtil : object {
    public static ITsTypeUsage GetSelectedTypeUsage(IJavaScriptFile jsFile, DocumentRange selection);
    public static void ExecuteSuggestionHotspotOverRanges(ISolution solution, string name, IReadOnlyList`1<DocumentRange> ranges, ITextControl textControl);
    public static IReadOnlyList`1<DocumentRange> ReplaceOccurencesAndGetUpdatedRanges(ITsTypeAliasDeclaration alias, IEnumerable`1<DocumentRange> allOccurrenceRanges, string name);
    public static IEnumerable`1<DocumentRange> GetOccurrenceDocumentRanges(IFinder finder, ITsTypeUsage expression, ITypeScriptModuleScope scope, ITsTypeAliasDeclaration alias);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.JavaScript.Util.TsIntroduceTypeAliasUtil/<ExtractOrderedTypeUsages>d__4")]
private static IEnumerable`1<ITsTypeUsage> ExtractOrderedTypeUsages(TreeNodeEnumerable`1<ITsTypeUsage> usages, bool isIntersection);
    private static IList`1<DocumentRange> FindImplicitOccurrences(IFinder finder, ITypeScriptModuleScope scope, IEnumerable`1<ITsTypeUsage> typeUsages, IList`1<ITsTypeUsage> directOccurrences, bool isIntersection);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.JavaScript.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Json.ZoneMarker : object {
}
[ContextActionDataBuilderAttribute("JetBrains.ReSharper.Feature.Services.Html.Bulbs.IWebContextActionDataProvider`1<JetBrains.ReSharper.Psi.Razor.Tree.IRazorFile>", "16")]
internal class JetBrains.ReSharper.Feature.Services.Razor.Bulbs.RazorContextActionDataBuilder : HtmlContextActionDataBuilderBase`2<IRazorFile, RazorLanguage> {
}
[CallHierarchyFindResultSubdividerAttribute("16")]
internal class JetBrains.ReSharper.Feature.Services.Razor.CallHierarchy.RazorCallHierarchyFindResultSubdivider : object {
    private IProjectFileTypeServices myProjectFileTypeServices;
    public RazorCallHierarchyFindResultSubdivider(IProjectFileTypeServices projectFileTypeServices);
    public sealed virtual bool IsApplicable(CallHierarchyFindResult result);
    public sealed virtual object GetSubdivider(CallHierarchyFindResult result);
}
[CallHierarchyIncomingDeclaredElementNodePresenterAttribute("16")]
internal class JetBrains.ReSharper.Feature.Services.Razor.CallHierarchy.RazorCallHierarchyIncomingDeclaredElementNodePresenter : CallHierarchyIncomingDeclaredElementNodePresenter {
    private IProjectFileTypeServices myProjectFileTypeServices;
    public RazorCallHierarchyIncomingDeclaredElementNodePresenter(IProjectFileTypeServices projectFileTypeServices);
    public virtual bool IsApplicable(ICallHierarchyPresentableNode node);
    public virtual void Present(ICallHierarchyPresentableNode node, TreeModelNode structureElement, PresentableItem presentableItem, PresentationState state, ICallHierarchyNodePresenter presenter);
    public virtual DocumentRange GetPreviewableDocumentRange(ICallHierarchyPresentableNode node);
}
public class JetBrains.ReSharper.Feature.Services.Razor.CodeStructure.RazorCodeBlockStructureElement : HtmlCodeStructureElement`1<IRazorCode> {
    private CachedPsiValue`1<TreeTextRange> myTrimmedCodeRange;
    public RazorCodeBlockStructureElement(IRazorCode element, IHtmlTokenNodeTypes tokenTypes, CodeStructureElement parent);
    protected virtual Tuple`3<IconId, RichText, RichText> GetPresentation(PresentationState state);
    public virtual IList`1<string> GetQuickSearchTexts();
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.RazorProjectFileType", "16")]
public class JetBrains.ReSharper.Feature.Services.Razor.CodeStructure.RazorCodeStructureProvider : HtmlCodeStructureProvider {
    public RazorCodeStructureProvider(ILanguageManager languageManager);
    protected virtual IRecursiveElementProcessor CreateElementProcessor(HtmlCodeStructureRootElement root, IHtmlTokenNodeTypes tokenTypes);
}
public class JetBrains.ReSharper.Feature.Services.Razor.CodeStructure.RazorDirectiveCodeStructureElement : HtmlCodeStructureElement`1<IRazorCode> {
    private IconId myIconName;
    public DocumentRange NavigationRange { get; }
    public RazorDirectiveCodeStructureElement(IRazorCode element, IHtmlTokenNodeTypes tokenTypes, CodeStructureElement parent, IconId iconName);
    private string GetName();
    protected virtual Tuple`3<IconId, RichText, RichText> GetPresentation(PresentationState state);
    public virtual IList`1<string> GetQuickSearchTexts();
    public virtual DocumentRange get_NavigationRange();
}
public class JetBrains.ReSharper.Feature.Services.Razor.CodeStructure.RazorHelperCodeStructureElement : HtmlCodeStructureElement`1<IRazorHelper> {
    private IDeclaration myDeclaration;
    private static DeclaredElementPresenterStyle MEMBER_PRESENTER;
    public IDeclaration Declaration { get; }
    public IDeclaredElement DeclaredElement { get; }
    public RazorHelperCodeStructureElement(IRazorHelper element, IHtmlTokenNodeTypes tokenTypes, CodeStructureElement parent);
    private static RazorHelperCodeStructureElement();
    protected virtual Tuple`3<IconId, RichText, RichText> GetPresentation(PresentationState state);
    public virtual IList`1<string> GetQuickSearchTexts();
    public sealed virtual IDeclaration get_Declaration();
    public sealed virtual IDeclaredElement get_DeclaredElement();
}
public class JetBrains.ReSharper.Feature.Services.Razor.CodeStructure.RazorHtmlMarkupCodeStructureElement : HtmlCodeStructureElement`1<IRazorHtmlMarkup> {
    private CachedPsiValue`1<TreeTextRange> myTrimmedCodeRange;
    public RazorHtmlMarkupCodeStructureElement(IRazorHtmlMarkup element, IHtmlTokenNodeTypes tokenTypes, CodeStructureElement parent);
    protected virtual Tuple`3<IconId, RichText, RichText> GetPresentation(PresentationState state);
    public virtual IList`1<string> GetQuickSearchTexts();
}
public class JetBrains.ReSharper.Feature.Services.Razor.CodeStructure.RazorSectionCodeStructureElement : HtmlCodeStructureElement`1<IRazorSection> {
    public DocumentRange NavigationRange { get; }
    public RazorSectionCodeStructureElement(IRazorSection element, IHtmlTokenNodeTypes tokenTypes, CodeStructureElement parent);
    private string GetName();
    protected virtual Tuple`3<IconId, RichText, RichText> GetPresentation(PresentationState state);
    public virtual IList`1<string> GetQuickSearchTexts();
    public virtual DocumentRange get_NavigationRange();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Razor.RazorLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Razor.Comment.RazorBlockCommentActionProvider : HtmlBlockCommentActionProvider {
    private IRazorTokenNodeTypes myTokenNodeTypes;
    public string StartBlockCommentMarker { get; }
    public string EndBlockCommentMarker { get; }
    protected TokenNodeType CommentStart { get; }
    protected TokenNodeType CommentBody { get; }
    protected TokenNodeType CommentEnd { get; }
    public RazorBlockCommentActionProvider(IRazorTokenNodeTypes tokenNodeTypes);
    public virtual string get_StartBlockCommentMarker();
    public virtual string get_EndBlockCommentMarker();
    protected virtual TokenNodeType get_CommentStart();
    protected virtual TokenNodeType get_CommentBody();
    protected virtual TokenNodeType get_CommentEnd();
    public virtual bool IsAvailable(IFile file, DocumentRange range, Boolean& disableAllProviders);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Razor.RazorLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Razor.Comment.RazorLineCommentActionProvider : HtmlLineCommentActionProvider {
    private IRazorTokenNodeTypes myTokenNodeTypes;
    public string StartLineCommentMarker { get; }
    public string EndLineCommentMarker { get; }
    protected TokenNodeType CommentStart { get; }
    protected TokenNodeType CommentEnd { get; }
    public RazorLineCommentActionProvider(IRazorTokenNodeTypes tokenNodeTypes);
    public virtual string get_StartLineCommentMarker();
    public virtual string get_EndLineCommentMarker();
    protected virtual TokenNodeType get_CommentStart();
    protected virtual TokenNodeType get_CommentEnd();
    private void CalculateIndentLength(Token token, IDocument document, DocumentRange lineRange, LineCommentRangeInfo& result, string tokenText);
    public virtual LineCommentRangeInfo GetLineCommentRange(IFile psiFile, DocumentRange lineRange);
    [CompilerGeneratedAttribute]
internal static DocumentOffset <GetLineCommentRange>g__GetStartOffset|11_0(Token token, <>c__DisplayClass11_0& );
    [CompilerGeneratedAttribute]
internal static DocumentOffset <GetLineCommentRange>g__GetEndOffset|11_1(Token token, <>c__DisplayClass11_0& );
}
[PsiComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.Caches.RazorTagHelperCacheDependency : object {
    public RazorTagHelperCacheDependency(RazorTagHelperCache razorTagHelperCache, WebInheritanceCache webInheritanceCache);
}
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.LiveTemplates.InBlazorCSharpProject : InRazorCSharpProject {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    private static InBlazorCSharpProject();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
}
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.LiveTemplates.InRazorCSharpComponentsFolder : InRazorCSharpProject {
    private static Guid ourDefaultUid;
    public string PresentableShortName { get; }
    private static InRazorCSharpComponentsFolder();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
}
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.LiveTemplates.InRazorCSharpCoreProject : InRazorCSharpProject {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    private static InRazorCSharpCoreProject();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
}
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.LiveTemplates.InRazorCSharpFWProject : InRazorCSharpProject {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    private static InRazorCSharpFWProject();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
}
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.LiveTemplates.InRazorCSharpProject : InRazorSpecificProject {
    private static Guid DefaultUID;
    public PsiLanguageType RelatedLanguage { get; }
    public string PresentableShortName { get; }
    public Guid QuickListUID { get; }
    public string QuickListTitle { get; }
    private static InRazorCSharpProject();
    public virtual Guid GetDefaultUID();
    public virtual PsiLanguageType get_RelatedLanguage();
    public virtual string get_PresentableShortName();
    public sealed virtual Guid get_QuickListUID();
    public sealed virtual string get_QuickListTitle();
}
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.LiveTemplates.InRazorCSharpSharedViewsFolder : InRazorCSharpProject {
    private static Guid ourDefaultUid;
    public string PresentableShortName { get; }
    private static InRazorCSharpSharedViewsFolder();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
}
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.LiveTemplates.InRazorCSharpViewsFolder : InRazorCSharpProject {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    private static InRazorCSharpViewsFolder();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
}
[ScopeCategoryUIProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.LiveTemplates.RazorCSharpProjectScopeCategoryUIProvider : ScopeCategoryUIProvider {
    public string CategoryCaption { get; }
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Razor.CSharp.LiveTemplates.RazorCSharpProjectScopeCategoryUIProvider/<BuildAllPoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> BuildAllPoints();
    public virtual string get_CategoryCaption();
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.LiveTemplates.RazorCSharpProjectScopeProvider : ScopeProvider {
    private RazorReferencedAssembliesService myRazorReferencedAssembliesService;
    private MvcReferencedAssembliesService myMvcReferencedAssembliesService;
    public RazorCSharpProjectScopeProvider(RazorReferencedAssembliesService razorReferencedAssembliesService, MvcReferencedAssembliesService mvcReferencedAssembliesService);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Razor.CSharp.LiveTemplates.RazorCSharpProjectScopeProvider/<ProvideScopePoints>d__3")]
public virtual IEnumerable`1<ITemplateScopePoint> ProvideScopePoints(TemplateAcceptanceContext context);
    [CompilerGeneratedAttribute]
private ITemplateScopePoint <.ctor>b__2_0(string t);
    [CompilerGeneratedAttribute]
private ITemplateScopePoint <.ctor>b__2_1(string t);
    [CompilerGeneratedAttribute]
private ITemplateScopePoint <.ctor>b__2_2(string t);
    [CompilerGeneratedAttribute]
private ITemplateScopePoint <.ctor>b__2_3(string t);
    [CompilerGeneratedAttribute]
private ITemplateScopePoint <.ctor>b__2_4(string t);
    [CompilerGeneratedAttribute]
private ITemplateScopePoint <.ctor>b__2_5(string t);
    [CompilerGeneratedAttribute]
private ITemplateScopePoint <.ctor>b__2_6(string t);
}
[FileTemplatesAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.LiveTemplates.Support.RazorCSharpFileTemplatesSupport : RazorFileTemplatesSupportBase {
    public IEnumerable`1<ITemplateScopePoint> ScopePoints { get; }
    public string Name { get; }
    protected ProjectLanguage Language { get; }
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Razor.CSharp.LiveTemplates.Support.RazorCSharpFileTemplatesSupport/<get_ScopePoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> get_ScopePoints();
    public virtual string get_Name();
    protected virtual ProjectLanguage get_Language();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.LiveTemplates.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.Mvc.ExpectedTypes.RazorTagHelperExpectedTypesProvider : MvcCSharpExpectedTypesProvider {
    public virtual IReadOnlyList`1<ExpectedType> GetExpectedTypes(ICSharpExpression expression, INamingPolicyProvider namingPolicyProvider, ExpectedTypeMode mode);
}
[PsiComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.Mvc.RazorComponentTagHelperProvider : object {
    private MvcReferencedAssembliesService myMvcReferencedAssembliesService;
    private PsiProjectFileTypeCoordinator myProjectFileTypeCoordinator;
    private IEnumerable`1<IRazorTagHelperAttributeInfoProvider> myAttributeInfoProviders;
    public static IClrTypeName ParameterAttributeName;
    public static IClrTypeName CascadingParameterAttribute;
    private static IClrTypeName RenderFragmentName;
    private static IClrTypeName GenericRenderFragmentName;
    private static IClrTypeName CascadingTypeParameterAttributeName;
    private static Key`1<CachedPsiValue`1<IsApplicableData>> ourIsApplicableDataKey;
    public RazorComponentTagHelperProvider(MvcReferencedAssembliesService mvcReferencedAssembliesService, PsiProjectFileTypeCoordinator projectFileTypeCoordinator, IEnumerable`1<IRazorTagHelperAttributeInfoProvider> attributeInfoProviders);
    private static RazorComponentTagHelperProvider();
    public sealed virtual ITypeElement GetTagHelperBaseTypeElement(IPsiModule psiModule);
    public sealed virtual IReadOnlyCollection`1<RazorTagHelperInfo> GetTagHelperInfos(IPsiModule psiModule);
    public sealed virtual IReadOnlyCollection`1<RazorTagHelperInfo> GetTagHelperInfos(IDeclaredElement declaredElement);
    private void AddTagHelperInfos(LocalList`1& list, IXmlDocIdOwner declaredElement, bool fillAttributes, ITypeElement renderFragmentType, ITypeElement genericRenderFragmentType);
    public sealed virtual OneToSetMap`2<DeclaredElementInstance`1<IClrDeclaredElement>, TagHelperHtmlAttributeName> GetHtmlAttributeNames(DeclaredElementInstance declaredElementInstance, bool includingSynthetic);
    public sealed virtual TUserDataHolder Marshal(TUserDataHolder info, UnsafeWriter writer, InternedStringsWriterContext context);
    public sealed virtual TUserDataHolder Unmarshal(TUserDataHolder info, UnsafeReader reader, InternedStringsReaderContext context);
    public sealed virtual OneToSetMap`2<IUserDataHolder, TagHelperHtmlAttributeName> GetHtmlAttributes(IClrDeclaredElement declaredElement);
    [CanBeNullAttribute]
private OneToSetMap`2<DeclaredElementInstance`1<IClrDeclaredElement>, TagHelperHtmlAttributeName> GetHtmlAttributeNamesNoCheck(DeclaredElementInstance declaredElementInstance, bool doNotIncludeRenderFragments);
    public sealed virtual bool IsApplicable(RazorTagHelperDataCache razorTagHelperDataCache, IRazorFile razorFile, IPsiModule psiModule);
    [NotNullAttribute]
private IsApplicableData GetIsApplicableData(IRazorFile razorFile);
    [NotNullAttribute]
private IsApplicableData CalculateIsApplicableData(IRazorFile razorFile);
    [NotNullAttribute]
private IReadOnlySet`1<string> CalculatePreImportedNamespaces(IRazorFile razorFile);
    public sealed virtual bool IsApplicable(RazorTagHelperDataCache razorTagHelperDataCache, ITreeNode context, RazorTagHelperInfo razorTagHelperInfo);
    [CompilerGeneratedAttribute]
internal static void <CalculatePreImportedNamespaces>g__AddNamespaceChain|23_1(string namespace, <>c__DisplayClass23_0& );
    [CompilerGeneratedAttribute]
private bool <IsApplicable>g__IsApplicableLocal|24_0(RazorTagHelperInfo info, <>c__DisplayClass24_0& );
}
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.Mvc.RazorCSharpMvcCodeBehindReferenceProvider : RazorCSharpCodeBehindReferenceProvider {
    [CompilerGeneratedAttribute]
private MvcCache <mvcCache>P;
    private Version myMvcVersion;
    public RazorCSharpMvcCodeBehindReferenceProvider(ISolution solution, MvcCache mvcCache, IRazorServices razorServices, Func`2<IAssignmentExpression, Pair`2<IExpression, IExpression>> assignmentChecker, Version mvcVersion);
    public virtual ReferenceCollection GetReferences(ITreeNode element, ReferenceCollection oldReferences);
}
[ReferenceProviderFactoryAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.Mvc.RazorCSharpMvcReferenceProviderFactory : RazorCSharpReferenceProviderFactory {
    private MvcReferencedAssembliesService myMvcReferencedAssembliesService;
    [CompilerGeneratedAttribute]
private MvcKind <SupportedMvcKinds>k__BackingField;
    public MvcKind SupportedMvcKinds { get; }
    public PsiLanguageCategories SupportedPsiLanguageCategories { get; }
    public PsiLanguageType SupportedPsiLanguage { get; }
    public RazorCSharpMvcReferenceProviderFactory(ISolution solution, IRazorServices razorServices, MvcReferencedAssembliesService mvcReferencedAssembliesService);
    public virtual IReferenceFactory CreateFactory(IPsiSourceFile sourceFile, IFile file, IWordIndex wordIndexForChecks);
    [CompilerGeneratedAttribute]
public sealed virtual MvcKind get_SupportedMvcKinds();
    public sealed virtual PsiLanguageCategories get_SupportedPsiLanguageCategories();
    public sealed virtual PsiLanguageType get_SupportedPsiLanguage();
}
[PsiComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.Mvc.RazorTagHelperImportCandidatesProvider : object {
    [NotNullAttribute]
private IRazorTagHelperCache myRazorTagHelperCache;
    public RazorTagHelperImportCandidatesProvider(IRazorTagHelperCache razorTagHelperCache);
    [NotNullAttribute]
public String[] GetImportCandidates(IHtmlTagReference reference);
}
[PsiComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.Mvc.RazorTagHelperMvcSearchFactory : MvcSearchFactory {
    [CompilerGeneratedAttribute]
private IRazorTagHelperCache <razorTagHelperCache>P;
    public RazorTagHelperMvcSearchFactory(IRazorTagHelperCache razorTagHelperCache, SearchDomainFactory searchDomainFactory, IPsiModules psiModules, ISolution solution, MvcCache mvcCache, MvcElementsCache mvcElementsCache, MvcReferencedAssembliesService mvcReferencedAssembliesService);
    public virtual IClrTypeName[] GetAttributeNamesAndExplicitNames(IDeclaredElement element, List`1& explicitNames);
}
[PsiComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.Mvc.ViewComponentsRazorTagHelperProvider : RazorTagHelperProviderBase {
    private IEnumerable`1<IRazorTagHelperAttributeInfoProvider> myAttributeInfoProviders;
    private static ISet`1<string> ourViewComponentMemberNamesCaseSensitive;
    private static ISet`1<string> ourViewComponentMemberNamesCaseInsensitive;
    public ViewComponentsRazorTagHelperProvider(IEnumerable`1<IRazorTagHelperAttributeInfoProvider> attributeInfoProviders);
    private static ViewComponentsRazorTagHelperProvider();
    public virtual ITypeElement GetTagHelperBaseTypeElement(IPsiModule psiModule);
    public virtual IReadOnlyCollection`1<RazorTagHelperInfo> GetTagHelperInfos(IPsiModule psiModule);
    private void AddRazorTagHelperInfos(LocalList`1& result, IClass viewComponent, bool includeAttributes);
    public virtual TUserDataHolder Marshal(TUserDataHolder info, UnsafeWriter writer, InternedStringsWriterContext context);
    public virtual TUserDataHolder Unmarshal(TUserDataHolder info, UnsafeReader reader, InternedStringsReaderContext context);
    public virtual IReadOnlyCollection`1<RazorTagHelperInfo> GetTagHelperInfos(IDeclaredElement declaredElement);
    public virtual OneToSetMap`2<DeclaredElementInstance`1<IClrDeclaredElement>, TagHelperHtmlAttributeName> GetHtmlAttributeNames(DeclaredElementInstance declaredElementInstance, bool includingSynthetic);
    public virtual OneToSetMap`2<IUserDataHolder, TagHelperHtmlAttributeName> GetHtmlAttributes(IClrDeclaredElement declaredElement);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.Mvc.ZoneMarker : object {
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.RazorCSharpProjectFileType", "16")]
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.PostfixTemplates.RazorPostfixTemplatesFileTypeHelper : CSharpPostfixTemplatesFileTypeHelper {
    [NotNullAttribute]
private RazorCSharpPsiServices myRazorServices;
    public RazorPostfixTemplatesFileTypeHelper(RazorCSharpPsiServices razorServices);
    public virtual bool IsTopLevelExpressionStatement(ICSharpExpression expression);
    public virtual bool CanBecameStatement(ICSharpExpression expression);
    public virtual ICSharpStatement EnsureStatement(ICSharpExpression expression);
    [CanBeNullAttribute]
private IExpressionStatement FindImplicitExpressionCodebehindStatement(ICSharpExpression expression);
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.RazorCSharpProjectFileType", "16")]
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.RazorCSharpFileTypeSpecificOwnerUtil : RazorFileTypeSpecificOwnerUtil {
    [CompilerGeneratedAttribute]
private Lazy`1<IRazorCodeGeneratorInternal> <razorCodeGeneratorInternal>P;
    public RazorCSharpFileTypeSpecificOwnerUtil(Lazy`1<IRazorPsiServices> razorPsiServices, Lazy`1<IRazorCodeGeneratorInternal> razorCodeGeneratorInternal);
    public virtual IEnumerable`1<ITypeDeclaration> GetRelatedAndFilterHidden(ITypeDeclaration declaration);
}
[PsiComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.RazorTagHelperCustomCodeAnnotationProvider : object {
    public sealed virtual Nullable`1<CodeAnnotationNullableValue> GetNullableAttribute(IDeclaredElement element);
    public sealed virtual Nullable`1<CodeAnnotationNullableValue> GetContainerElementNullableAttribute(IDeclaredElement element);
    public sealed virtual ICollection`1<IAttributeInstance> GetSpecialAttributeInstances(IClrDeclaredElement element, AttributeInstanceCollection attributeInstanceCollection);
}
[PsiComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.RegularRazorTagHelperProvider : RazorTagHelperProviderBase {
    private IEnumerable`1<IRazorTagHelperAttributeInfoProvider> myAttributeInfoProviders;
    private static ClrTypeName ourHtmlAttributeNotBoundAttribute;
    private static IClrTypeName ourTagHelperInterface;
    public RegularRazorTagHelperProvider(IEnumerable`1<IRazorTagHelperAttributeInfoProvider> attributeInfoProviders);
    private static RegularRazorTagHelperProvider();
    public virtual ITypeElement GetTagHelperBaseTypeElement(IPsiModule psiModule);
    public virtual IReadOnlyCollection`1<RazorTagHelperInfo> GetTagHelperInfos(IDeclaredElement declaredElement);
    public virtual OneToSetMap`2<DeclaredElementInstance`1<IClrDeclaredElement>, TagHelperHtmlAttributeName> GetHtmlAttributeNames(DeclaredElementInstance declaredElementInstance, bool includingSynthetic);
    private OneToSetMap`2<DeclaredElementInstance`1<IClrDeclaredElement>, TagHelperHtmlAttributeName> GetHtmlAttributeNamesNoCheck(ITypeElement typeElement, ISubstitution typeElementSubstitution, bool includingSynthetic);
    public virtual OneToSetMap`2<IUserDataHolder, TagHelperHtmlAttributeName> GetHtmlAttributes(IClrDeclaredElement declaredElement);
    public bool IsApplicable(IPsiSourceFile context, IPsiModule psiModule);
    private void AddRazorTagHelperInfos(LocalList`1& result, IClass typeElement, bool includeAttributes);
    public virtual TUserDataHolder Marshal(TUserDataHolder info, UnsafeWriter writer, InternedStringsWriterContext context);
    public virtual TUserDataHolder Unmarshal(TUserDataHolder info, UnsafeReader reader, InternedStringsReaderContext context);
    public virtual IReadOnlyCollection`1<RazorTagHelperInfo> GetTagHelperInfos(IPsiModule psiModule);
}
public enum JetBrains.ReSharper.Feature.Services.Razor.CSharp.TypingAssist.BracketType : Enum {
    public int value__;
    public static BracketType Brace;
    public static BracketType Parenthesis;
    public static BracketType Bracket;
    public static BracketType AllBrackets;
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.TypingAssist.CpuIntensiveRazorTypingAssistDisableSuggester : object {
    private static int RecordCountToAnalyze;
    [NotNullAttribute]
private IPerformanceTracker myTracker;
    [NotNullAttribute]
private ApplicationWideContextBoundSettingStore mySettingStore;
    [NotNullAttribute]
private IThreading myThreading;
    [NotNullAttribute]
private IFeatureSuggestionNotificationProvider myNotificationProvider;
    [CompilerGeneratedAttribute]
private IFeatureSuggestionAspect[] <Aspects>k__BackingField;
    public IFeatureSuggestionAspect[] Aspects { get; }
    public CpuIntensiveRazorTypingAssistDisableSuggester(IPerformanceTracker tracker, ApplicationWideContextBoundSettingStore settingStore, IThreading threading, IFeatureSuggestionNotificationProvider notificationProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IFeatureSuggestionAspect[] get_Aspects();
    public sealed virtual IProperty`1<IFeatureSuggestion> Subscribe(Lifetime lifetime, FeatureSuggestionMode mode);
}
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.TypingAssist.RazorBraceMatcher : object {
    private IRazorTokenNodeTypes myRazorTokenNodeTypes;
    private NodeTypeSet myLeftBraceNodeTypes;
    private NodeTypeSet myRightBraceNodeTypes;
    private BracketType myBracketType;
    private Stack`1<Tuple`2<BracketType, int>> myStack;
    private IEnumerable`1<ISimpleMatchingBraceProvider> myProviders;
    private static Tuple`2<BracketType, int> LBRACE;
    private static Tuple`2<BracketType, int> RBRACE;
    private static Tuple`2<BracketType, int> LPAR;
    private static Tuple`2<BracketType, int> RPAR;
    private static Tuple`2<BracketType, int> LBRACKET;
    private static Tuple`2<BracketType, int> RBRACKET;
    public RazorBraceMatcher(IRazorTokenNodeTypes razorTokenNodeTypes, IEnumerable`1<ISimpleMatchingBraceProvider> providers, BracketType bracketType);
    private static RazorBraceMatcher();
    public int Direction(CachingLexer lexer);
    public Tuple`2<BracketType, int> GetBracketType(CachingLexer lexer);
    private bool IsOtherLanguageBracket(string brace, bool isLeft, string text, TokenNodeType tokenNodeType);
    public bool ProceedStack(CachingLexer lexer);
    public bool HasOpenBraces();
    public bool IsStackEmpty();
    public bool FindMatchingBracket(CachingLexer cachingLexer, Int32& pos);
    public bool FindMatchingBracket(CachingLexer cachingLexer);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.TypingAssist.RazorCSharpHtmlTypingAssist : WebTypingAssist`4<RazorCSharpProjectFileType, RazorCSharpLanguage, IRazorTokenNodeTypes, RazorTypingAssistSettings> {
    public RazorCSharpHtmlTypingAssist(Lifetime lifetime, TypingAssistDependencies dependencies, ICodeCompletionSessionManager completionSessionManager, ILanguageManager languageManager, IEnumerable`1<ISpecialTagSmartEnterHandler> smartEnterHandlers, ParameterInfoPopupController parameterInfoPopupController, IEnumerable`1<ISecondaryTypingAssist> secondaryTypingAssists);
    public virtual bool DoHandleEnterAfterHeaderPressed(ITextControl textControl, int charPos);
    protected virtual bool HandleQuoteAtTokenStart(ITextControl textControl, CachingLexer lexer, IRazorTokenNodeTypes tokenTypes);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Feature.Services.Razor.CSharp.TypingAssist.RazorCSharpTypingAssist : CSharpTypingAssistBase {
    private ILanguageManager myLanguageManager;
    private IProjectFileTypeServices myProjectFileTypeServices;
    private RazorCSharpHtmlTypingAssist myHtmlTypingAssist;
    private Lazy`1<IEnumerable`1<ISimpleMatchingBraceProvider>> myBraceProviders;
    private IEnumerable`1<ISimpleMatchingBraceProvider> BraceProviders { get; }
    public RazorCSharpTypingAssist(Lifetime lifetime, TypingAssistDependencies dependencies, ILanguageManager languageManager, IProjectFileTypeServices projectFileTypeServices, RazorCSharpHtmlTypingAssist htmlTypingAssist, DocumentTransactionManager documentTransactionManager, IOptional`1<ICodeCompletionSessionManager> codeCompletionSessionManager);
    private IEnumerable`1<ISimpleMatchingBraceProvider> get_BraceProviders();
    protected virtual bool IsEnterHandlerAvailable(IActionContext context);
    protected virtual bool IsLeftParHandlerAvailable(ITypingContext context);
    protected virtual bool IsRightBraceHandlerAvailable(ITypingContext context);
    protected virtual bool IsLeftBraceHandlerAvailable(ITypingContext context);
    protected virtual bool IsSupported(ITextControl textControl);
    private bool IsInEmptyCodeBlock(ITextControl textControl);
    protected virtual IFile CommitPsi(ITextControl textControl);
    protected virtual IFile CommitPsiOnly(ITextControl textControl);
    public virtual T CommitPsiOnlyAndProceedWithDirtyCaches(ITextControl textControl, Func`2<IFile, T> action);
    public static void Format(ICodeFormatter codeFormatter, IFile file, TreeTextRange treeTextRange, CodeFormatProfile profile);
    protected virtual void FormatNonCLikeRBrace(ITextControl textControl, IFile file, int offset, CodeFormatProfile profile);
    protected virtual void FormatCustomRBrace(ITextControl textControl, ITokenNode node, CodeFormatProfile profile);
    protected virtual bool IsLBrace(ITextControl textControl, CachingLexer lexer);
    protected virtual bool IsRBrace(ITextControl textControl, CachingLexer lexer);
    protected virtual bool ShouldSkipToken(CachingLexer lexer);
    protected virtual bool NeedSkipCloseBracket(ITextControl textControl, CachingLexer lexer, char charTyped);
    protected virtual bool CheckThatCLikeLineEndsInOpenStringLiteral(ITextControl textControl, CachingLexer lexer, int lineEndPos, char c, NodeTypeSet correspondingTokenType, bool isStringWithAt, Int32& charPos, bool defaultReturnValue);
    protected virtual bool IsNewLineToken(CachingLexer lexer);
    public virtual bool QuickCheckAvailability(ITextControl textControl, IPsiSourceFile projectFile);
    protected virtual TreeOffset ReparseAndFormatOnEnter(ITextControl textControl, TreeOffset lBraceTreePos, TreeOffset rBraceTreePos, int charPos, ITokenNode lBraceNode, ITokenNode rBraceNode, bool afterLBrace, IFile& file, bool oneLine);
    protected virtual bool TryReparseAndFormatOnEnterAfterNonCLBrace(ITextControl textControl, IFile file, int lBracePos, int rBracePos);
    protected virtual bool FindNodesForBraces(ITextControl textControl, IFile file, int lBracePos, int rBracePos, ITokenNode& lBraceNode, ITokenNode& rBraceNode, TreeOffset& lBraceTreePos, TreeOffset& rBraceTreePos);
    private static IFile GetOriginalFile(IFile file);
    protected virtual bool IsLBrace(ITextControl textControl, ITreeNode node);
    protected virtual bool IsRBrace(ITextControl textControl, ITreeNode node);
    protected virtual bool FindMatchingBrace(ITextControl textControl, CachingLexer lexer, Int32& rBracePos);
    protected virtual bool AllowCpuIntensiveAssists(ITextControl textControl);
    protected virtual string GetLineTextBeforeOffset(ITextControl textControl, int lexerOffset);
    private bool IsSupportedInHtml(ITextControl textControl);
    private IRazorTokenNodeTypes GetRazorTokenNodeTypes(ITextControl textControl);
    private RazorElementFactory GetRazorElementFactory(ITextControl textControl);
    private IRazorPsiServices GetRazorPsiServices(ITextControl textControl);
    private RazorCodeGenerator GetRazorCodeGenerator(ITextControl textControl);
    protected virtual bool IsCustomTokenSuitableForCloseParenth(TokenNodeType nextTokenType, ITextControl textControl, CachingLexer lexer);
    protected virtual bool IsCustomLParenth(ITextControl textControl, CachingLexer lexer);
    protected virtual bool NeedAutoInsertCloseBracket(ITextControl textControl, CachingLexer lexer, Func`1<BracketMatcher> createBracketMatcher);
    [CompilerGeneratedAttribute]
private IEnumerable`1<ISimpleMatchingBraceProvider> <.ctor>b__6_0();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.TypingAssist.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Razor.CSharp.ZoneMarker : object {
}
[FileTemplatesAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Razor.LiveTemplates.RazorFileTemplatesSupport : RazorFileTemplatesSupportBase {
    public string Name { get; }
    protected ProjectLanguage Language { get; }
    public virtual string get_Name();
    protected virtual ProjectLanguage get_Language();
}
public abstract class JetBrains.ReSharper.Feature.Services.Razor.LiveTemplates.RazorFileTemplatesSupportBase : object {
    public string Name { get; }
    public IEnumerable`1<ITemplateScopePoint> ScopePoints { get; }
    protected ProjectLanguage Language { get; }
    public abstract virtual string get_Name();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Razor.LiveTemplates.RazorFileTemplatesSupportBase/<get_ScopePoints>d__3")]
public virtual IEnumerable`1<ITemplateScopePoint> get_ScopePoints();
    protected abstract virtual ProjectLanguage get_Language();
}
[ScopeCategoryUIProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Razor.LiveTemplates.RazorProjectScopeCategoryUIProvider : ScopeCategoryUIProvider {
    public string CategoryCaption { get; }
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Razor.LiveTemplates.RazorProjectScopeCategoryUIProvider/<BuildAllPoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> BuildAllPoints();
    public virtual string get_CategoryCaption();
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Razor.LiveTemplates.RazorProjectScopeProvider : ScopeProvider {
    private RazorReferencedAssembliesService myRazorReferencedAssembliesService;
    public RazorProjectScopeProvider(RazorReferencedAssembliesService razorReferencedAssembliesService);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Razor.LiveTemplates.RazorProjectScopeProvider/<ProvideScopePoints>d__2")]
public virtual IEnumerable`1<ITemplateScopePoint> ProvideScopePoints(TemplateAcceptanceContext context);
}
public class JetBrains.ReSharper.Feature.Services.Razor.LiveTemplates.Scope.InAnyRazorProject : InAnyProject {
    private static Guid DefaultUID;
    public string DefaultFileName { get; }
    public PsiLanguageType RelatedLanguage { get; }
    public string PresentableShortName { get; }
    private static InAnyRazorProject();
    public virtual Guid GetDefaultUID();
    public virtual string get_DefaultFileName();
    public virtual PsiLanguageType get_RelatedLanguage();
    public virtual string get_PresentableShortName();
}
public class JetBrains.ReSharper.Feature.Services.Razor.LiveTemplates.Scope.InRazorSpecificProject : InAnyRazorProject {
    private static Guid DefaultUID;
    [CompilerGeneratedAttribute]
private ProjectLanguage <ProjectLanguage>k__BackingField;
    private ProjectLanguage ProjectLanguage { get; }
    public InRazorSpecificProject(ProjectLanguage projectLanguage);
    private static InRazorSpecificProject();
    public virtual Guid GetDefaultUID();
    [CompilerGeneratedAttribute]
private ProjectLanguage get_ProjectLanguage();
    public virtual bool IsSubsetOf(ITemplateScopePoint other);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Razor.LiveTemplates.ZoneMarker : object {
}
public class JetBrains.ReSharper.Feature.Services.Razor.Mvc.Razor4LayoutReference`2 : MvcViewReference`2<TLiteral, TMethod> {
    public Razor4LayoutReference`2(IExpression owner, IReadOnlyCollection`1<AvailableControllersInfo> names, Version version);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public virtual string GetName();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Razor.Mvc.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Razor.RazorLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Razor.Navigation.GoTo.RazorReferencedCodeSearchHelper : object {
    public sealed virtual bool RemoveNamespaceImport(ITreeNode importNamespaceNode);
    public sealed virtual ICollection`1<NamespaceImportData> GetNamespaceImportsList(IFile file);
    public sealed virtual ICollection`1<Pair`2<IReference, IDeclaredElement>> GetUpdatedTargets(IReference reference, IDeclaredElement target);
    public sealed virtual IDeclaredElement ProvideDeclaredElementsFromResolve(IReference reference, IResolveResult resolveResult);
}
[RelatedFilesProviderAttribute("JetBrains.ProjectModel.RazorProjectFileType", "16")]
public class JetBrains.ReSharper.Feature.Services.Razor.Navigation.GoToRelated.RazorRelatedFilesProvider : DefaultRelatedFilesProvider {
    public virtual IEnumerable`1<RelatedFileOccurence> GetRelatedFiles(IProjectFile projectFile);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Razor.Navigation.RazorFileMemberProvider : NonCachedFileMemberProvider`1<RazorLanguage> {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Razor.Navigation.ZoneMarker : object {
}
[OptionsPageAttribute("Razor", "Razor", "JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons/Razor")]
public class JetBrains.ReSharper.Feature.Services.Razor.Options.RazorPage : AEmptyOptionsPage {
    public static string PID;
}
public class JetBrains.ReSharper.Feature.Services.Razor.Options.RazorTypingAssistOptions : HtmlTypingAssistOptions`1<RazorTypingAssistSettings> {
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.Options.TypingAssistSettings", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "RazorTypingAssistanceSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.Razor.Options.RazorTypingAssistSettings : HtmlTypingAssistSettings {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Razor.Options.ZoneMarker : object {
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Razor.RazorCustomCodeAnnotationProvider : object {
    [CompilerGeneratedAttribute]
private ExternalAnnotationsModuleFactory <externalAnnotationsModuleFactory>P;
    [CompilerGeneratedAttribute]
private IProjectFileTypeServices <projectFileTypeServices>P;
    private static IClrTypeName ourMustUseReturnValueAttributeFullName;
    private static ICollection`1<IClrTypeName> ourCheckReturnValueTypeNames;
    public RazorCustomCodeAnnotationProvider(ExternalAnnotationsModuleFactory externalAnnotationsModuleFactory, IProjectFileTypeServices projectFileTypeServices);
    private static RazorCustomCodeAnnotationProvider();
    public sealed virtual Nullable`1<CodeAnnotationNullableValue> GetNullableAttribute(IDeclaredElement element);
    public sealed virtual Nullable`1<CodeAnnotationNullableValue> GetContainerElementNullableAttribute(IDeclaredElement element);
    public sealed virtual ICollection`1<IAttributeInstance> GetSpecialAttributeInstances(IClrDeclaredElement element, AttributeInstanceCollection attributeInstanceCollection);
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.RazorProjectFileType", "16")]
public class JetBrains.ReSharper.Feature.Services.Razor.RazorFileTypeSpecificOwnerUtil : DefaultFileTypeSpecificOwnerUtil {
    [CompilerGeneratedAttribute]
private Lazy`1<IRazorPsiServices> <psiServices>P;
    public RazorFileTypeSpecificOwnerUtil(Lazy`1<IRazorPsiServices> psiServices);
    public virtual bool IsCodeBehindClass(ITypeDeclaration declaration);
    public virtual bool CanContainSeveralClasses(IPsiSourceFile sourceFile);
    public virtual bool CanImplementInterfaces(ITypeDeclaration typeElement);
    public virtual bool CanHaveConstructors(ITypeDeclaration typeElement);
    public virtual string GetNamespaceForElementsMovedToExternalScope(ITypeDeclaration typeDeclaration, ITreeNode referenceNode);
    private static bool IsModelReference(ITreeNode referenceNode);
    [CanBeNullAttribute]
private static IProjectFolder GetModelFolder(IProjectFile file);
    public virtual VirtualFileSystemPath GetFolderForElementsMovedToExternalScope(IProjectFile file, string namespace, ITreeNode referenceNode);
    public virtual string GetPrettyName(ITypeDeclaration typeDeclaration, bool mustBeIdentifier);
    public virtual bool IsOperationPossibleOnUnmappedRange(ITreeNode node);
    public virtual DocumentRange GetDocumentRangeForPartiallyUnmappedNode(ITreeNode node);
    public virtual bool IsOperationPossibleOnUnmappedRange(ITreeRange range);
    public virtual bool CanDeclarationBeOverloaded(IDeclaration declaration);
    public virtual bool HasUglyName(ITypeDeclaration declaration);
    private static bool IsPageClass(ITypeDeclaration typeDeclaration);
}
public static class JetBrains.ReSharper.Feature.Services.Razor.RazorImages : object {
    public static IconId GetSectionImage();
}
public interface JetBrains.ReSharper.Feature.Services.Razor.References.TagHelpers.IRazorTagHelperAttributeReference {
    public IHtmlAttributeName AttributeName { get; }
    public abstract virtual IHtmlAttributeName get_AttributeName();
}
public interface JetBrains.ReSharper.Feature.Services.Razor.References.TagHelpers.IRazorTagHelperReference {
    public bool CaseSensitive { get; }
    public abstract virtual bool get_CaseSensitive();
    public abstract virtual ISymbolTable GetCompletionSymbolTableForTagAttributes(bool includeSyntheticSelf);
}
public class JetBrains.ReSharper.Feature.Services.Razor.References.TagHelpers.Mvc.RazorTagHelperMvcAttributeReference : RazorTagHelperAttributeReference {
    private static TreeNodeMarker ourProcessingMarker;
    public RazorTagHelperMvcAttributeReference(ReferenceCollection`1<IRazorTagHelperReference> tagHelperReferences, IHtmlAttributeName attributeName, IHtmlToken nameToken);
    private static RazorTagHelperMvcAttributeReference();
    protected virtual ISymbolTable GetSymbolTable(bool useReferenceName, IHtmlTag htmlTag, OneToSetMap`2<DeclaredElementInstance`1<IClrDeclaredElement>, TagHelperHtmlAttributeName> membersToNames);
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
}
public class JetBrains.ReSharper.Feature.Services.Razor.References.TagHelpers.Mvc.RazorTagHelperMvcReferenceProvider : RazorTagHelperReferenceProvider {
    public RazorTagHelperMvcReferenceProvider(RazorTagHelperService razorTagHelperService);
    protected virtual RazorTagHelperAttributeReference CreateAttributeNameReference(ReferenceCollection`1<IRazorTagHelperReference> tagHelperReferences, IHtmlTag htmlTag, IHtmlAttributeName attributeName, IHtmlToken nameToken);
    protected virtual bool ShouldProcessAttributeValue(IHtmlAttributeValue attributeValue, IReferenceNameContainer names);
    protected virtual void CreateAttributeValueReference(ICollection`1<IReference> references, IHtmlAttributeValue attributeValue, IList`1<DeclaredElementInstance`1<IClrDeclaredElement>> declaredElements);
}
[ReferenceProviderFactoryAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Razor.References.TagHelpers.Mvc.RazorTagHelperMvcReferenceProviderFactory : RazorTagHelperReferenceProviderFactory {
    private MvcReferencedAssembliesService myMvcReferencedAssembliesService;
    [CompilerGeneratedAttribute]
private MvcKind <SupportedMvcKinds>k__BackingField;
    public MvcKind SupportedMvcKinds { get; }
    public PsiLanguageCategories SupportedPsiLanguageCategories { get; }
    public PsiLanguageType SupportedPsiLanguage { get; }
    public RazorTagHelperMvcReferenceProviderFactory(MvcReferencedAssembliesService mvcReferencedAssembliesService, RazorReferencedAssembliesService razorReferencedAssembliesService);
    public virtual IReferenceFactory CreateFactory(IPsiSourceFile sourceFile, IFile file, IWordIndex wordIndexForChecks);
    [CompilerGeneratedAttribute]
public sealed virtual MvcKind get_SupportedMvcKinds();
    public sealed virtual PsiLanguageCategories get_SupportedPsiLanguageCategories();
    public sealed virtual PsiLanguageType get_SupportedPsiLanguage();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Razor.References.TagHelpers.Mvc.ZoneMarker : object {
}
public class JetBrains.ReSharper.Feature.Services.Razor.References.TagHelpers.RazorTagHelperAttributeReference : QualifiableReferenceWithinElement`2<IHtmlAttributeName, IHtmlToken> {
    private ReferenceCollection`1<IRazorTagHelperReference> myTagHelperReferences;
    private ISymbolFilter[] myTagHelperAttributesFilters;
    private IRazorTagHelperCache myRazorTagHelperCache;
    public bool CaseSensitive { get; }
    public bool HasMultipleNames { get; }
    public IHtmlAttributeName AttributeName { get; }
    public RazorTagHelperAttributeReference(ReferenceCollection`1<IRazorTagHelperReference> tagHelperReferences, IHtmlAttributeName attributeName, IHtmlToken nameToken);
    public virtual bool get_CaseSensitive();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    [MustUseReturnValueAttribute]
protected virtual ISymbolTable GetSymbolTable(bool useReferenceName, IHtmlTag htmlTag, OneToSetMap`2<DeclaredElementInstance`1<IClrDeclaredElement>, TagHelperHtmlAttributeName> membersToNames);
    public virtual ResolveResultWithInfo GetResolveResult(ISymbolTable symbolTable, string referenceName);
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
    public virtual bool get_HasMultipleNames();
    public virtual HybridCollection`1<string> GetAllNames();
    public virtual bool IsValid();
    public virtual Staticness GetStaticness();
    public virtual ITypeElement GetQualifierTypeElement();
    public sealed virtual Refers RefersToDeclaredElement(IDeclaredElement declaredElement);
    public sealed virtual IHtmlAttributeName get_AttributeName();
}
internal class JetBrains.ReSharper.Feature.Services.Razor.References.TagHelpers.RazorTagHelperEnumMemberReference : ReferenceWithinElementBase`2<IHtmlAttributeValue, IHtmlToken> {
    private IEnum myEnumType;
    private ISubstitution mySubstitution;
    public RazorTagHelperEnumMemberReference(IHtmlAttributeValue owner, IEnum enumType, ISubstitution substitution);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
    protected virtual ISymbolFilter[] GetCompletionFilters();
    protected virtual ISymbolFilter[] GetSmartSymbolFilters(Boolean& applyAllFilters);
}
internal class JetBrains.ReSharper.Feature.Services.Razor.References.TagHelpers.RazorTagHelperReference : ReferenceWithinElementBase`2<IHtmlTag, IHtmlToken> {
    private OneToListMap`2<string, RazorTagHelperInfo> myTagHelpers;
    private string myTagHelperPrefix;
    private HybridCollection`1<string> myNames;
    public bool HasMultipleNames { get; }
    public RazorTagHelperReference(OneToListMap`2<string, RazorTagHelperInfo> tagHelpers, string tagHelperPrefix, IHtmlTag tag, IHtmlToken nameToken, TreeTextRange nameRange);
    public virtual ResolveResultWithInfo GetResolveResult(ISymbolTable symbolTable, string referenceName);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public sealed virtual ISymbolTable GetCompletionSymbolTableForTagAttributes(bool includeSyntheticSelf);
    public sealed virtual Refers RefersToDeclaredElement(IDeclaredElement declaredElement);
    protected virtual ISymbolFilter[] GetCompletionFilters();
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
    public virtual bool get_HasMultipleNames();
    public virtual HybridCollection`1<string> GetAllNames();
}
public class JetBrains.ReSharper.Feature.Services.Razor.References.TagHelpers.RazorTagHelperReferenceProvider : object {
    private RazorTagHelperService myRazorTagHelperService;
    public RazorTagHelperReferenceProvider(RazorTagHelperService razorTagHelperService);
    public sealed virtual ReferenceCollection GetReferences(ITreeNode element, ReferenceCollection oldReferences);
    protected virtual RazorTagHelperAttributeReference CreateAttributeNameReference(ReferenceCollection`1<IRazorTagHelperReference> tagHelperReferences, IHtmlTag htmlTag, IHtmlAttributeName attributeName, IHtmlToken nameToken);
    [PureAttribute]
protected virtual bool ShouldProcessAttributeValue(IHtmlAttributeValue attributeValue, IReferenceNameContainer names);
    protected virtual void CreateAttributeValueReference(ICollection`1<IReference> references, IHtmlAttributeValue attributeValue, IList`1<DeclaredElementInstance`1<IClrDeclaredElement>> declaredElements);
    public sealed virtual bool HasReference(ITreeNode element, IReferenceNameContainer names);
    private bool HasReferenceWithOptionalNameCheck(ITreeNode element, IReferenceNameContainer names);
    [CompilerGeneratedAttribute]
private bool <HasReferenceWithOptionalNameCheck>g__HasApplicableTagHelpers|7_0(ITreeNode node);
}
[ReferenceProviderFactoryAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Razor.References.TagHelpers.RazorTagHelperReferenceProviderFactory : object {
    private RazorReferencedAssembliesService myRazorReferencedAssembliesService;
    [CompilerGeneratedAttribute]
private ISignal`1<IReferenceProviderFactory> <Changed>k__BackingField;
    public ISignal`1<IReferenceProviderFactory> Changed { get; }
    public RazorTagHelperReferenceProviderFactory(RazorReferencedAssembliesService razorReferencedAssembliesService);
    public virtual IReferenceFactory CreateFactory(IPsiSourceFile sourceFile, IFile file, IWordIndex wordIndexForChecks);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IReferenceProviderFactory> get_Changed();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Razor.RazorLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Razor.StructuralNavigation.RazorStructuralNavigationManager : HtmlStructuralNavigationManager {
    protected virtual IStructuralNavigationItem GetNextSelection(StructuralNavigationContextBase context);
}
public class JetBrains.ReSharper.Feature.Services.Razor.StructuralNavigation.RazorStructuralNavigationVisitor : RazorTreeVisitor`2<StructuralNavigationContextBase, StructuralNavigationContextBase> {
    public StructuralNavigationContextBase VisitRazorToken(IRazorToken node, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitRazorCode(IRazorCode node, StructuralNavigationContextBase context);
    protected static void TryAddResult(StructuralNavigationContextBase context, TNode treeNode);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Razor.StructuralNavigation.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Razor.RazorLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Razor.TodoItems.RazorTodoContentsProvider : HtmlTodoContentsProvider {
    private IRazorTokenNodeTypes myRazorTokenNodeTypes;
    public RazorTodoContentsProvider(IRazorTokenNodeTypes razorTokenNodeTypes);
    public virtual Nullable`1<TextRange> GetTokenContentsRange(string documentText, TextRange tokenRange, TokenNodeType tokenType);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Razor.TypingAssist.RazorChangedTagNameTracker : SpecificChangedTagNameTracker`2<RazorTypingAssistSettings, RazorProjectFileType> {
    public RazorChangedTagNameTracker(ISolution solution, ISettingsStore settingsStore, CachingLexerService cachingLexerService, ICommandProcessor commandProcessor, TextControlTypingHandlers textControlTypingHandlers, Lifetime lifetime, ITextControlManager textControlManager, IShellLocks shellLocks, IActionManager actionManager, IEnsureWritableHandler ensureWritableHandler, DocumentManager documentManager, ILookupWindowManager lookupWindowManager, IPsiFiles psiFiles, ChangeManager changeManager, ITypingAssistManager typingAssistManager);
    protected virtual MarkerFindResults FindMarkersViaPsi(IPsiSourceFile sourceFile, ITextControl textControl, int caretPosition);
    protected virtual MarkerFindResults FindMarkersViaLexer(ITextControl textControl, int caretPosition);
    public static bool GetPairMarkup(CachingLexer lexer, IRazorTokenNodeTypes tokenNodeTypes, int direction, Boolean& hasNewLineInside);
    protected virtual bool IsTagNameChar(char c);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Razor.TypingAssist.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Razor.ZoneMarker : object {
}
public class JetBrains.ReSharper.Feature.Services.Resources.Asp.ServicesAspThemedIcons : object {
}
public class JetBrains.ReSharper.Feature.Services.Resources.AspCSharp.ServicesAspCSharpThemedIcons : object {
}
public class JetBrains.ReSharper.Feature.Services.Resources.AspVB.ServicesAspVBThemedIcons : object {
}
public class JetBrains.ReSharper.Feature.Services.Resources.Html.ServicesHtmlThemedIcons : object {
}
public class JetBrains.ReSharper.Feature.Services.Resources.Razor.ServicesRazorThemedIcons : object {
}
public class JetBrains.ReSharper.Feature.Services.Resources.RazorCSharp.ServicesRazorCSharpThemedIcons : object {
}
public class JetBrains.ReSharper.Feature.Services.Resources.Web.FeaturesWebOptionsThemedIcons : object {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Web.Asp.AI.AspTechnologyChatContextProvider : object {
    public sealed virtual string GetLanguageOrTechnologyPresentation(IPsiModule module);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.ApplicationUrls.ApplicationUrls : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <Urls>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <Schemes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <Authorities>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public IReadOnlyCollection`1<string> Urls { get; public set; }
    public IReadOnlyCollection`1<string> Schemes { get; public set; }
    public IReadOnlyCollection`1<string> Authorities { get; public set; }
    public ApplicationUrls(IReadOnlyCollection`1<string> Urls, IReadOnlyCollection`1<string> Schemes, IReadOnlyCollection`1<string> Authorities);
    [CompilerGeneratedAttribute]
protected ApplicationUrls(ApplicationUrls original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_Urls();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Urls(IReadOnlyCollection`1<string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_Schemes();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Schemes(IReadOnlyCollection`1<string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_Authorities();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Authorities(IReadOnlyCollection`1<string> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ApplicationUrls left, ApplicationUrls right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ApplicationUrls left, ApplicationUrls right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ApplicationUrls other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual ApplicationUrls <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(IReadOnlyCollection`1& Urls, IReadOnlyCollection`1& Schemes, IReadOnlyCollection`1& Authorities);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.ApplicationUrls.ApplicationUrlsChange : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IProject> <Projects>k__BackingField;
    public IReadOnlyCollection`1<IProject> Projects { get; }
    public ApplicationUrlsChange(IReadOnlyCollection`1<IProject> projects);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<IProject> get_Projects();
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.ApplicationUrls.IApplicationUrlsProvider {
    public abstract virtual ApplicationUrls GetApplicationUrls(IProject project);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.ApplicationUrls.LaunchSettingsJsonApplicationUrlsProvider : object {
    private Lifetime myLifetime;
    private ISolution mySolution;
    private ChangeManager myChangeManager;
    private DotNetCoreLaunchSettingsJsonProfileProvider myLaunchSettingsJsonProvider;
    private IPsiServices myPsiServices;
    private ConcurrentDictionary`2<IProject, ApplicationUrls> myUrls;
    private ILogger myLogger;
    public LaunchSettingsJsonApplicationUrlsProvider(Lifetime lifetime, ISolution solution, ChangeManager changeManager, DotNetCoreLaunchSettingsJsonProfileProvider launchSettingsJsonProvider, IPsiServices psiServices, ISolutionLoadTasksScheduler solutionLoadTasksScheduler);
    private void InvalidateAll();
    public sealed virtual object Execute(IChangeMap changeMap);
    public sealed virtual ApplicationUrls GetApplicationUrls(IProject project);
    private ValueTuple`2<IReadOnlyCollection`1<string>, IReadOnlyCollection`1<string>> GetHttpRoots(IReadOnlyCollection`1<string> roots);
    private ApplicationUrls BuildRoots(IProject project);
    private void AddIisUrls(List`1<string> applicationUrls, IisBindingContent iisBinding);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_1();
    [CompilerGeneratedAttribute]
private void <InvalidateAll>b__8_0();
    [CompilerGeneratedAttribute]
private void <InvalidateAll>b__8_1();
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.AutopopupEnabledSettingsKey", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "RouteTemplatesSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CodeCompletion.AutomaticStrategies.RouteTemplateAutopopupEnabledSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "RouteTemplates_AfterBrackets")]
public AutopopupType OnBrackets;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "RouteTemplates_AfterColon")]
public AutopopupType OnColon;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "RouteTemplates_AfterEquality")]
public AutopopupType OnEquality;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "RouteTemplates_OnIdentifier")]
public AutopopupType OnIdentifier;
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CodeCompletion.AutomaticStrategies.RouteTemplateOnColonAutopopupStrategy : object {
    private SettingsScalarEntry mySettingsScalarEntry;
    public PsiLanguageType Language { get; }
    public bool ForceHideCompletion { get; }
    public RouteTemplateOnColonAutopopupStrategy(ISettingsStore settingsStore);
    public sealed virtual PsiLanguageType get_Language();
    public sealed virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public sealed virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore settingsStore);
    public sealed virtual bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public sealed virtual bool AcceptsFile(IFile file, ITextControl textControl);
    public sealed virtual bool get_ForceHideCompletion();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CodeCompletion.AutomaticStrategies.RouteTemplateOnEqualityAutopopupStrategy : object {
    private SettingsScalarEntry mySettingsScalarEntry;
    public PsiLanguageType Language { get; }
    public bool ForceHideCompletion { get; }
    public RouteTemplateOnEqualityAutopopupStrategy(ISettingsStore settingsStore);
    public sealed virtual PsiLanguageType get_Language();
    public sealed virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public sealed virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore settingsStore);
    public sealed virtual bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public sealed virtual bool AcceptsFile(IFile file, ITextControl textControl);
    public sealed virtual bool get_ForceHideCompletion();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CodeCompletion.AutomaticStrategies.RouteTemplateOnIdentifierAutopopupStrategy : object {
    private SettingsScalarEntry mySettingsScalarEntry;
    public PsiLanguageType Language { get; }
    public bool ForceHideCompletion { get; }
    public RouteTemplateOnIdentifierAutopopupStrategy(ISettingsStore settingsStore);
    public sealed virtual PsiLanguageType get_Language();
    public sealed virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public sealed virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore settingsStore);
    public sealed virtual bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public sealed virtual bool AcceptsFile(IFile file, ITextControl textControl);
    public sealed virtual bool get_ForceHideCompletion();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CodeCompletion.AutomaticStrategies.RouteTemplateOnRouteParameterAutopopupStrategy : object {
    private SettingsScalarEntry mySettingsScalarEntry;
    public PsiLanguageType Language { get; }
    public bool ForceHideCompletion { get; }
    public RouteTemplateOnRouteParameterAutopopupStrategy(ISettingsStore settingsStore);
    public sealed virtual PsiLanguageType get_Language();
    public sealed virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public sealed virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore settingsStore);
    public sealed virtual bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public sealed virtual bool AcceptsFile(IFile file, ITextControl textControl);
    public sealed virtual bool get_ForceHideCompletion();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CodeCompletion.AutomaticStrategies.RouteTemplateOnRouteTokenAutopopupStrategy : object {
    private SettingsScalarEntry mySettingsScalarEntry;
    public PsiLanguageType Language { get; }
    public bool ForceHideCompletion { get; }
    public RouteTemplateOnRouteTokenAutopopupStrategy(ISettingsStore settingsStore);
    public sealed virtual PsiLanguageType get_Language();
    public sealed virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public sealed virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore settingsStore);
    public sealed virtual bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public sealed virtual bool AcceptsFile(IFile file, ITextControl textControl);
    public sealed virtual bool get_ForceHideCompletion();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CodeCompletion.MethodParameterNamesFromRouteTemplatesProvider : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    private List`1<IAspNetHttpEndpoint> GetMatchingEndpoints(IPsiModule psiModule, IParametersOwner parametersOwner);
    [CanBeNullAttribute]
private IParametersOwnerDeclaration GetParametersOwnerFromBasicContext(CSharpCodeCompletionContext context);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CodeCompletion.RouteTemplateCodeCompletionContext : SpecificCodeCompletionContext {
    [CompilerGeneratedAttribute]
private RouteTemplateReparsedCodeCompletionContext <ReparsedCodeCompletionContext>k__BackingField;
    public RouteTemplateReparsedCodeCompletionContext ReparsedCodeCompletionContext { get; }
    public string ContextId { get; }
    public RouteTemplateCodeCompletionContext(CodeCompletionContext context, RouteTemplateReparsedCodeCompletionContext routeTemplateReparsedCodeCompletionContext);
    [CompilerGeneratedAttribute]
public RouteTemplateReparsedCodeCompletionContext get_ReparsedCodeCompletionContext();
    public virtual string get_ContextId();
}
[IntellisensePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CodeCompletion.RouteTemplateCodeCompletionContextProvider : CodeCompletionContextProviderBase {
    public virtual bool IsApplicable(CodeCompletionContext context);
    public virtual ISpecificCodeCompletionContext GetCompletionContext(CodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.AspRouteTemplates.RouteTemplateLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CodeCompletion.RouteTemplateItemsProviderBase : ItemsProviderOfSpecificContext`1<RouteTemplateCodeCompletionContext> {
    protected virtual bool AddLookupItems(RouteTemplateCodeCompletionContext context, IItemsCollector collector);
    [NotNullAttribute]
protected virtual TextLookupRanges GetDefaultRanges(RouteTemplateCodeCompletionContext context);
    [CanBeNullAttribute]
private static string TryGetSuffix(ICompletableReference reference);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CodeCompletion.RouteTemplateLookupItem : TextLookupItemBase {
    [CompilerGeneratedAttribute]
private IconId <Image>k__BackingField;
    public IconId Image { get; }
    public RouteTemplateLookupItem(string text, IconId iconId, string suffix);
    [CompilerGeneratedAttribute]
public virtual IconId get_Image();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CodeCompletion.RouteTemplateReparseContext : object {
    private IRouteTemplateFile myRouteTemplateFile;
    private TreeTextRange myRange;
    public RouteTemplateReparseContext(IRouteTemplateFile routeTemplateFile, TreeTextRange range);
    public sealed virtual ReparseResult GetReparseResult(string newText);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CodeCompletion.RouteTemplateReparsedCodeCompletionContext : ReparsedCodeCompletionContext {
    public RouteTemplateReparsedCodeCompletionContext(IFile file, TreeTextRange range, string newText);
    protected virtual IReparseContext GetReparseContext(IFile file, TreeTextRange range);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CodeCompletion.ZoneMarker : object {
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CustomReferences.IRouteParameterNameReference {
    public IRouteParameterNameTreeNode ParameterName { get; }
    public abstract virtual IRouteParameterNameTreeNode get_ParameterName();
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CustomReferences.IRouteTemplateDefaultActionReference {
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CustomReferences.IRouteTemplateDefaultControllerReference {
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CustomReferences.IRouteTemplateRouteValueReference {
    public IRouteTokenTreeNode Owner { get; }
    public abstract virtual IRouteTokenTreeNode get_Owner();
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CustomReferences.IRouteTemplateSegmentReference {
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CustomReferences.RouteParameterDefaultValueReferenceFactory : object {
    public sealed virtual ReferenceCollection GetReferences(ITreeNode element, ReferenceCollection oldReferences);
    public sealed virtual bool HasReference(ITreeNode element, IReferenceNameContainer names);
}
[ReferenceProviderFactoryAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CustomReferences.RouteParameterDefaultValueReferenceProviderFactory : object {
    [CompilerGeneratedAttribute]
private ISignal`1<IReferenceProviderFactory> <Changed>k__BackingField;
    public ISignal`1<IReferenceProviderFactory> Changed { get; }
    public sealed virtual IReferenceFactory CreateFactory(IPsiSourceFile sourceFile, IFile file, IWordIndex wordIndexForChecks);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IReferenceProviderFactory> get_Changed();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CustomReferences.RouteParameterNameReference : ReferenceWithinElementBase`2<IRouteParameterNameTreeNode, IRouteTemplateToken> {
    public bool CaseSensitive { get; }
    public IRouteParameterNameTreeNode ParameterName { get; }
    public RouteParameterNameReference(IRouteParameterNameTreeNode owner);
    public virtual bool get_CaseSensitive();
    public virtual string GetName();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual ISymbolTable GetCompletionSymbolTable();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
    public sealed virtual IRouteParameterNameTreeNode get_ParameterName();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CustomReferences.RouteParameterReferenceFactory : object {
    public sealed virtual ReferenceCollection GetReferences(ITreeNode element, ReferenceCollection oldReferences);
    public sealed virtual bool HasReference(ITreeNode element, IReferenceNameContainer names);
}
[ReferenceProviderFactoryAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CustomReferences.RouteParameterReferenceProviderFactory : object {
    [CompilerGeneratedAttribute]
private ISignal`1<IReferenceProviderFactory> <Changed>k__BackingField;
    public ISignal`1<IReferenceProviderFactory> Changed { get; }
    public sealed virtual IReferenceFactory CreateFactory(IPsiSourceFile sourceFile, IFile file, IWordIndex wordIndexForChecks);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IReferenceProviderFactory> get_Changed();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CustomReferences.RouteTemplateControllersUtil : object {
    [ExtensionAttribute]
public static IReadOnlyCollection`1<ValueTuple`2<string, IClass>> GetAvailableControllers(IRouteTemplateTreeNode node);
    [ExtensionAttribute]
public static IReadOnlyCollection`1<IMethod> GetAvailableActions(IRouteTemplateTreeNode node);
    [ExtensionAttribute]
[CanBeNullAttribute]
private static ITypeElement TryGetExactController(IRouteTemplateTreeNode node);
    [ExtensionAttribute]
[CanBeNullAttribute]
private static IMethod TryGetExactAction(IRouteTemplateTreeNode node);
    [ExtensionAttribute]
public static IClass GetDefaultController(IRouteTemplateTreeNode node);
    [ExtensionAttribute]
public static IList`1<IMethod> GetAvailableDefaultActions(IRouteTemplateTreeNode node);
    [ExtensionAttribute]
[CanBeNullAttribute]
private static IClass GetDefaultControllerFromTemplate(IRouteTemplateFile routeTemplateFile);
    private static List`1<TReference> CollectReferences(ITreeNode node);
    [ExtensionAttribute]
private static bool IsResolvedTo(IReference reference, TDeclaredElement& declaredElement);
}
internal class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CustomReferences.RouteTemplateDefaultActionReference : ReferenceWithinElementBase`2<IRouteParameterTreeNode, IRouteParameterDefaultValueTreeNode> {
    public bool CaseSensitive { get; }
    public RouteTemplateDefaultActionReference(IRouteParameterTreeNode parameter, IRouteParameterDefaultValueTreeNode token);
    public virtual bool get_CaseSensitive();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
}
internal class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CustomReferences.RouteTemplateDefaultControllerReference : ReferenceWithinElementBase`2<IRouteParameterTreeNode, IRouteParameterDefaultValueTreeNode> {
    public bool CaseSensitive { get; }
    public RouteTemplateDefaultControllerReference(IRouteParameterTreeNode parameter, IRouteParameterDefaultValueTreeNode token);
    public virtual bool get_CaseSensitive();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
}
internal class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CustomReferences.RouteTemplateRouteValueReference : ReferenceWithinElementBase`2<IRouteTokenTreeNode, IRouteTokenKeyTreeNode> {
    public IRouteTokenTreeNode Owner { get; }
    public RouteTemplateRouteValueReference(IRouteTokenTreeNode owner);
    public virtual string GetName();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
    public sealed virtual IRouteTokenTreeNode get_Owner();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CustomReferences.RouteTemplateRouteValueReferenceFactory : object {
    public sealed virtual ReferenceCollection GetReferences(ITreeNode element, ReferenceCollection oldReferences);
    public sealed virtual bool HasReference(ITreeNode element, IReferenceNameContainer names);
}
[ReferenceProviderFactoryAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CustomReferences.RouteTemplateRouteValueReferenceProviderFactory : object {
    [CompilerGeneratedAttribute]
private ISignal`1<IReferenceProviderFactory> <Changed>k__BackingField;
    public ISignal`1<IReferenceProviderFactory> Changed { get; }
    public sealed virtual IReferenceFactory CreateFactory(IPsiSourceFile sourceFile, IFile file, IWordIndex wordIndexForChecks);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IReferenceProviderFactory> get_Changed();
}
internal class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CustomReferences.RouteTemplateSegmentReference : ReferenceWithinElementBase`2<IRouteSegmentTreeNode, IRouteSegmentTreeNode> {
    public RouteTemplateSegmentReference(IRouteSegmentTreeNode owner);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual ResolveResultWithInfo Resolve();
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CustomReferences.RouteTemplateSegmentsReferenceFactory : object {
    public sealed virtual ReferenceCollection GetReferences(ITreeNode element, ReferenceCollection oldReferences);
    public sealed virtual bool HasReference(ITreeNode element, IReferenceNameContainer names);
}
[ReferenceProviderFactoryAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.CustomReferences.RouteTemplatesSegmentsReferenceProviderFactory : object {
    [CompilerGeneratedAttribute]
private ISignal`1<IReferenceProviderFactory> <Changed>k__BackingField;
    public ISignal`1<IReferenceProviderFactory> Changed { get; }
    public sealed virtual IReferenceFactory CreateFactory(IPsiSourceFile sourceFile, IFile file, IWordIndex wordIndexForChecks);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IReferenceProviderFactory> get_Changed();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetControllerHttpEndpointHelper : object {
    public sealed virtual UrlPath BuildUrlPath(IEndpoint endpoint);
    public sealed virtual IReadOnlyCollection`1<IEndpointQueryParameter> GetQueryParameters(IEndpoint endpoint);
    public sealed virtual IReadOnlyCollection`1<HttpVerb> GetVerbs(IEndpoint endpoint);
    public sealed virtual IReadOnlyCollection`1<IParametersOwner> GetEndpointHandlersByRouteProvider(IRouteTemplateProvider routeTemplateProvider);
    public sealed virtual IReadOnlyCollection`1<IParametersOwner> GetEndpointHandlersByRouteProviderStrongConsistency(IRouteTemplateTreeNode treeNode);
    public sealed virtual IReadOnlyCollection`1<IHttpEndpoint> GetEndpointsByRouteProvider(IRouteTemplateProvider routeTemplateProvider);
    public sealed virtual IReadOnlyCollection`1<IHttpEndpoint> GetEndpointsByHandler(IParametersOwner handler);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.ApiVersioningSettings.ApiVersioningSettingsChange : object {
    [CompilerGeneratedAttribute]
private ICollection`1<IPsiModule> <AffectedModules>k__BackingField;
    public ICollection`1<IPsiModule> AffectedModules { get; }
    public ApiVersioningSettingsChange(ICollection`1<IPsiModule> affectedModules);
    [CompilerGeneratedAttribute]
public ICollection`1<IPsiModule> get_AffectedModules();
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.ApiVersioningSettings.ApiVersioningSettingsProvider : object {
    private AspNetCoreStartupConfigurationProvider myStartupConfigurationProvider;
    private ConcurrentDictionary`2<IPsiModule, AspNetCoreApiVersioningSettings> myAspNetCoreApiVersioningSettingsMap;
    public ApiVersioningSettingsProvider(Lifetime lifetime, ChangeManager changeManager, AspNetCoreStartupConfigurationProvider startupConfigurationProvider);
    public static ApiVersioningSettingsProvider GetInstance(IPsiModule psiModule);
    public sealed virtual object Execute(IChangeMap changeMap);
    public AspNetCoreApiVersioningSettings GetSettings(IPsiModule psiModule);
    private AspNetCoreApiVersioningSettings CollectSettings(IPsiModule psiModule);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AspNetHttpAttributeRoutingEndpointsSource : object {
    private IPsiModule myPsiModule;
    private IClass myController;
    private IMethod myAction;
    private IReadOnlyCollection`1<IRouteTemplateProvider> myControllerRouteTemplateProviders;
    private IRouteTemplateProvider myActionTemplateProvider;
    private IReadOnlyCollection`1<HttpVerb> myVerbs;
    public AspNetHttpAttributeRoutingEndpointsSource(IPsiModule psiModule, IClass controller, IMethod action, IReadOnlyCollection`1<IRouteTemplateProvider> controllerRouteTemplateProviders, IRouteTemplateProvider actionTemplateProvider, IReadOnlyCollection`1<HttpVerb> verbs);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AspNetHttpAttributeRoutingEndpointsSource/<GetEndpoints>d__7")]
[ItemNotNullAttribute]
public sealed virtual IEnumerable`1<AspNetHttpEndpoint> GetEndpoints();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AspNetHttpAttributeRoutingEndpointsSource/<Create>d__8")]
[ItemCanBeNullAttribute]
private IEnumerable`1<AspNetHttpEndpoint> Create(HttpVerb verb, IReadOnlyCollection`1<IRouteTemplateProvider> controllerTemplateProviders, RouteSubstitutionData[] substitutions);
    [CanBeNullAttribute]
private AspNetHttpEndpoint TryCreateEndpoint(HttpVerb verb, RouteSubstitutionData substitutionData, IRouteTemplateProvider[] routeTemplateProviders);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AspNetHttpConventionBasedEndpointsSource : object {
    private IPsiModule myPsiModule;
    private IClass myController;
    private IMethod myAction;
    private RoutingConvention myRoutingConvention;
    private HttpVerb[] myHttpVerbs;
    public AspNetHttpConventionBasedEndpointsSource(IPsiModule psiModule, IClass controller, IMethod action, RoutingConvention routingConvention, HttpVerb[] httpVerbs);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AspNetHttpConventionBasedEndpointsSource/<GetEndpoints>d__6")]
public sealed virtual IEnumerable`1<AspNetHttpEndpoint> GetEndpoints();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AspNetHttpEndpoint : object {
    private RouteSubstitutionData myRouteSubstitutionData;
    private IDeclaredElementPointer`1<IMethod> myMethod;
    private IDeclaredElementPointer`1<IClass> myController;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<AspNetHttpRouteSegment> <RouteSegments>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IRouteTemplateProvider> <TemplateProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiModule <PsiModule>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpVerb <Verb>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IEndpointQueryParameter> <QueryParameters>k__BackingField;
    public IReadOnlyList`1<AspNetHttpRouteSegment> RouteSegments { get; }
    public IReadOnlyCollection`1<IRouteTemplateProvider> TemplateProviders { get; }
    public IPsiModule PsiModule { get; }
    public HttpVerb Verb { get; }
    public IClass Controller { get; }
    public IMethod ActionMethod { get; }
    public IReadOnlyList`1<IEndpointQueryParameter> QueryParameters { get; }
    private IReadOnlyList`1<IRouteSegment> JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IEndpoint.RouteSegments { get; }
    public AspNetHttpEndpoint(IPsiModule psiModule, IClass controller, IMethod method, HttpVerb verb, IRouteTemplateProvider[] routeTemplateProviders, RouteSubstitutionData routeSubstitutionData);
    private IReadOnlyList`1<IEndpointQueryParameter> ExtractQueryParameters(ITypeMember typeMember);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<AspNetHttpRouteSegment> get_RouteSegments();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IRouteTemplateProvider> get_TemplateProviders();
    [CompilerGeneratedAttribute]
public sealed virtual IPsiModule get_PsiModule();
    [CompilerGeneratedAttribute]
public sealed virtual HttpVerb get_Verb();
    public IClass get_Controller();
    public IMethod get_ActionMethod();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<IEndpointQueryParameter> get_QueryParameters();
    public virtual string ToString();
    public sealed virtual int CompareTo(IAspNetHttpEndpoint b);
    private int GetApiVersionSourcePriority(ApiVersionData apiVersion);
    private int CompareRouteSegments(IReadOnlyList`1<AspNetHttpRouteSegment> other);
    private int GetPriorityByVerb(HttpVerb verb);
    private sealed virtual override IReadOnlyList`1<IRouteSegment> JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IEndpoint.get_RouteSegments();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AspNetHttpEndpointRoutePart : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<AspNetHttpRouteSegment> <Segments>k__BackingField;
    [CompilerGeneratedAttribute]
private IRouteTemplateProvider <TemplateProvider>k__BackingField;
    [NotNullAttribute]
public IReadOnlyList`1<AspNetHttpRouteSegment> Segments { get; }
    [NotNullAttribute]
public IRouteTemplateProvider TemplateProvider { get; }
    public AspNetHttpEndpointRoutePart(IReadOnlyList`1<AspNetHttpRouteSegment> segments, IRouteTemplateProvider routeTemplateProvider);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<AspNetHttpRouteSegment> get_Segments();
    [CompilerGeneratedAttribute]
public IRouteTemplateProvider get_TemplateProvider();
}
[PsiComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AspNetHttpEndpointsCollector : object {
    private MvcElementsCache myMvcElementsCache;
    private RoutingAttributesProvider myRoutingAttributesProvider;
    private RoutingConventionsProvider myRoutingConventionsProvider;
    public AspNetHttpEndpointsCollector(MvcElementsCache mvcElementsCache, RoutingAttributesProvider routingAttributesProvider, RoutingConventionsProvider routingConventionsProvider);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AspNetHttpEndpointsCollector/<CollectEndpoints>d__4")]
public IEnumerable`1<AspNetHttpEndpoint> CollectEndpoints(IClass controller);
    private IReadOnlyCollection`1<IAspNetHttpEndpointsSource> GetEndpointsSources(IPsiModule psiModule, IClass controller, IMethod action);
    [NotNullAttribute]
private IReadOnlyCollection`1<IAspNetHttpEndpointsSource> TryGetConventionBasedSources(IPsiModule psiModule, IClass controller, IMethod action);
    [CanBeNullAttribute]
private IReadOnlyCollection`1<IAspNetHttpEndpointsSource> TryGetAttributeRoutingSources(IPsiModule psiModule, IClass controller, IMethod action);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AspNetHttpEndpointsProvider : object {
    private Lifetime myLifetime;
    private ChangeManager myChangeManager;
    private MvcControllersProvider myMvcControllersProvider;
    private AspNetHttpEndpointsCollector myAspNetHttpEndpointsCollector;
    private IPsiServices myPsiServices;
    private AsyncItemsProcessor`1<InvalidationScope> myAsyncItemsProcessor;
    private ILogger myLogger;
    private ConcurrentDictionary`2<IPsiModule, AspNetHttpEndpointsRepository> myEndpointsPerModuleRepositories;
    private SynchronizationPoint myDispatchSyncPoint;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsUpToDate>k__BackingField;
    public string Name { get; }
    public IProperty`1<bool> IsUpToDate { get; }
    public AspNetHttpEndpointsProvider(Lifetime lifetime, ISolution solution, ChangeManager changeManager, MvcControllersProvider mvcControllersProvider, SourceRoutingAttributesProvider sourceRoutingAttributesProvider, RoutingConventionsProvider routingConventionsProvider, AspNetHttpEndpointsCollector aspNetHttpEndpointsCollector, ExternalRouteAttributesProvider externalRouteAttributesProvider, IPsiServices psiServices, SynchronizationPoints synchronizationPoints, AsyncCommitService asyncCommitService, IPsiModules psiModules, SuspendHardOperationsManager suspendHardOperationsManager);
    private void InvalidateScope(InvalidationScope controller);
    private void ProcessScope(InvalidationScope scope);
    private IReadOnlyCollection`1<IClass> WithInheritors(InvalidationScope invalidationScope);
    public static AspNetHttpEndpointsProvider GetInstance(IPsiModule context);
    public sealed virtual object Execute(IChangeMap changeMap);
    private AspNetHttpEndpointsRepository GetOrCreateEndpointsPerModuleRepository(IPsiModule psiModule);
    public sealed virtual string get_Name();
    private sealed virtual override IEndpointsTreeNode JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IEndpointsProvider.GetEndpointsTreeRoot(IPsiModule psiModule);
    private sealed virtual override IReadOnlyCollection`1<IHttpEndpointsTreeNode> JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IHttpEndpointsProvider.GetEndpointsTreeRoots();
    public AspNetHttpEndpointsTreeNode GetEndpointsTreeRoot(IPsiModule psiModule);
    private sealed virtual override IHttpEndpointsTreeNode JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IHttpEndpointsProvider.GetEndpointsTreeRoot(IPsiModule psiModule);
    public IEndpointsTreeNode FindTreeNode(IPsiModule psiModule, IEndpoint endpoint);
    public sealed virtual IReadOnlyCollection`1<IEndpointsTreeNode> GetEndpointsTreeRoots();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsUpToDate();
    public IReadOnlyCollection`1<AspNetHttpEndpoint> FindEndpoints(IPsiModule psiModule, ITypeElement typeElement);
    public IReadOnlyCollection`1<AspNetHttpEndpoint> FindEndpoints(IPsiModule psiModule, IMethod method);
    public AspNetHttpEndpoint[] FindEndpoints(IPsiModule psiModule, IRouteTemplateProvider routeTemplateProvider);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_2();
    [CompilerGeneratedAttribute]
private AspNetHttpEndpointsRepository <GetOrCreateEndpointsPerModuleRepository>b__15_0(IPsiModule x);
    [CompilerGeneratedAttribute]
private AspNetHttpEndpointsRepository <GetEndpointsTreeRoots>b__23_1(IProjectPsiModule x);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AspNetHttpEndpointsRepository : object {
    private AspNetHttpEndpointsTreeNode myEndpointsTreeRoot;
    private OneToSetMap`2<ITypeElement, AspNetHttpEndpoint> myTypeElementToEndpoints;
    private OneToSetMap`2<ITypeMember, AspNetHttpEndpoint> myTypeMemberToEndpoints;
    private OneToSetMap`2<ITypeElement, ITypeMember> myTypeElementToTypeMembers;
    private OneToSetMap`2<IRouteTemplateProvider, AspNetHttpEndpoint> myProviderToEndpoints;
    private object myLock;
    public AspNetHttpEndpointsRepository(Lifetime lifetime, IPsiModule psiModule);
    public void AddEndpoint(AspNetHttpEndpoint endpoint);
    public void RemoveEndpoints(ITypeElement typeElement);
    public IReadOnlyCollection`1<AspNetHttpEndpoint> FindEndpoints(ITypeElement typeElement);
    public IReadOnlyCollection`1<AspNetHttpEndpoint> FindEndpoints(ITypeMember typeMember);
    public AspNetHttpEndpointsTreeNode FindTreeNode(AspNetHttpEndpoint endpoint);
    public AspNetHttpEndpointsTreeNode GetEndpointsTreeRoot();
    public AspNetHttpEndpoint[] FindEndpoints(IRouteTemplateProvider routeTemplateProvider);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AspNetHttpEndpointsTreeNode : object {
    private Dictionary`2<AspNetHttpRouteSegment, AspNetHttpEndpointsTreeNode> myChildren;
    private HashSet`1<IAspNetHttpEndpoint> myEndpoints;
    [CompilerGeneratedAttribute]
private IPsiModule <PsiModule>k__BackingField;
    [CompilerGeneratedAttribute]
private AspNetHttpEndpointsTreeNode <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private AspNetHttpRouteSegment <LastSegment>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Depth>k__BackingField;
    public IPsiModule PsiModule { get; }
    public AspNetHttpEndpointsTreeNode Parent { get; }
    private IEndpointsTreeNode JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IEndpointsTreeNode.Parent { get; }
    private IHttpEndpointsTreeNode JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IHttpEndpointsTreeNode.Parent { get; }
    public IReadOnlyCollection`1<AspNetHttpEndpointsTreeNode> Children { get; }
    private IReadOnlyCollection`1<IEndpointsTreeNode> JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IEndpointsTreeNode.Children { get; }
    private IReadOnlyCollection`1<IHttpEndpointsTreeNode> JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IHttpEndpointsTreeNode.Children { get; }
    public IReadOnlyCollection`1<IAspNetHttpEndpoint> Endpoints { get; }
    private IReadOnlyCollection`1<IEndpoint> JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IEndpointsTreeNode.Endpoints { get; }
    private IReadOnlyCollection`1<IHttpEndpoint> JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IHttpEndpointsTreeNode.Endpoints { get; }
    public AspNetHttpRouteSegment LastSegment { get; }
    private IRouteSegment JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IEndpointsTreeNode.LastSegment { get; }
    public int Depth { get; }
    public AspNetHttpEndpointsTreeNode(IPsiModule psiModule, AspNetHttpEndpointsTreeNode parent, AspNetHttpRouteSegment lastSegment, int depth);
    [CompilerGeneratedAttribute]
public sealed virtual IPsiModule get_PsiModule();
    [CompilerGeneratedAttribute]
public AspNetHttpEndpointsTreeNode get_Parent();
    private sealed virtual override IEndpointsTreeNode JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IEndpointsTreeNode.get_Parent();
    private sealed virtual override IHttpEndpointsTreeNode JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IHttpEndpointsTreeNode.get_Parent();
    public IReadOnlyCollection`1<AspNetHttpEndpointsTreeNode> get_Children();
    private sealed virtual override IReadOnlyCollection`1<IEndpointsTreeNode> JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IEndpointsTreeNode.get_Children();
    private sealed virtual override IReadOnlyCollection`1<IHttpEndpointsTreeNode> JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IHttpEndpointsTreeNode.get_Children();
    public IReadOnlyCollection`1<IAspNetHttpEndpoint> get_Endpoints();
    private sealed virtual override IReadOnlyCollection`1<IEndpoint> JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IEndpointsTreeNode.get_Endpoints();
    private sealed virtual override IReadOnlyCollection`1<IHttpEndpoint> JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IHttpEndpointsTreeNode.get_Endpoints();
    [CompilerGeneratedAttribute]
public AspNetHttpRouteSegment get_LastSegment();
    private sealed virtual override IRouteSegment JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IEndpointsTreeNode.get_LastSegment();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Depth();
    private AspNetHttpEndpointsTreeNode GetOrCreateChild(AspNetHttpRouteSegment endpointRouteSegment);
    public AspNetHttpEndpointsTreeNode FindNode(IReadOnlyList`1<AspNetHttpRouteSegment> routeSegments);
    public sealed virtual IEndpointsTreeNode FindNode(IReadOnlyList`1<IRouteSegment> routeSegments);
    private void RemoveChild(AspNetHttpEndpointsTreeNode child);
    public void AddEndpoint(IAspNetHttpEndpoint endpoint);
    public void RemoveEndpoint(IAspNetHttpEndpoint endpoint);
    private void CleanUp();
    public OneToSetMap`2<HttpVerb, IAspNetHttpEndpoint> GetEndpointsPerVerbs();
    [CompilerGeneratedAttribute]
private AspNetHttpEndpointsTreeNode <GetOrCreateChild>b__33_0(AspNetHttpRouteSegment x);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AspNetHttpEndpointUtil : object {
    [ExtensionAttribute]
public static IReadOnlyCollection`1<ValueTuple`2<IRouteTemplateProvider, RouteParameterSegmentPart>> GetParameters(IAspNetHttpEndpoint endpoint);
    [ExtensionAttribute]
public static IReadOnlyCollection`1<ValueTuple`2<IRouteTemplateProvider, RouteParameterSegmentPart>> GetParametersWithName(IAspNetHttpEndpoint endpoint, string parameterName);
}
public static class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AspNetHttpRouteHelper : object {
    private static RecursiveElementProcessor`2<IRouteTemplateTreeNode, MyRoutePartBuilderContext> ourCreateRouteTemplateSegmentsCollector;
    private static AspNetHttpRouteHelper();
    public static AspNetHttpEndpointRoutePart BuildRoutePart(IRouteTemplateProvider routeTemplateProvider, IRouteTemplateAccessor routeTemplateAccessor, Nullable`1<DocumentOffset> stopAfter);
    [CanBeNullAttribute]
public static AspNetHttpEndpointRoutePart BuildRoutePart(IRouteTemplateProvider routeTemplateProvider);
    public static IRestRoutingAttribute[] GetActionRouteAttributes(IClass controller, IMethod action, MvcElementsCache mvcElementsCache, RoutingAttributesProvider routingAttributesProvider);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AspNetHttpRouteHelper/<GetMethodAndOverriden>d__3")]
private static IEnumerable`1<IMethod> GetMethodAndOverriden(IClass type, IMethod method, MvcElementsCache mvcElementsCache);
    public static IRouteTemplateProvider[] GetControllerRouteTemplateProviders(MvcElementsCache mvcElementsCache, RoutingAttributesProvider routingAttributesProvider, IClass controller);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.<CSharpRouteAttributesSearcher>F769062F4F49731AF7E5E3465EE1D320716558BCFD792AAB044CC4DB7AAD98ADB__AttributeSearchVisitor : SearchDomainVisitorParallel {
    [CompilerGeneratedAttribute]
private Dictionary`2<IDeclaredElement, AttributeRoutingSource> <attributeClassToRoutingSourceMap>P;
    private HashSet`1<string> myPossibleNames;
    private List`1<SourceRoutingAttribute> myResult;
    public <CSharpRouteAttributesSearcher>F769062F4F49731AF7E5E3465EE1D320716558BCFD792AAB044CC4DB7AAD98ADB__AttributeSearchVisitor(Dictionary`2<IDeclaredElement, AttributeRoutingSource> attributeClassToRoutingSourceMap, ISearchDomain searchDomain);
    public SourceRoutingAttribute[] GetResult();
    protected virtual bool ProcessProjectFile(IPsiSourceFile sourceFile);
    protected virtual bool ProcessAssembly(IPsiAssembly assembly);
    protected virtual bool ProcessElement(ITreeNode element);
    private static HashSet`1<string> GetPossibleNames(Dictionary`2<IDeclaredElement, AttributeRoutingSource> attributeClasses);
    private void ProcessScope(ICSharpTypeAndNamespaceHolderDeclaration holderDeclaration);
    [CompilerGeneratedAttribute]
private void <ProcessScope>g__ProcessAttribute|9_0(IAttribute attribute);
}
[PsiSharedComponentAttribute]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.AspAttributeRoutingAttributeWatcher : object {
    public static IClrTypeName AspAttributeRoutingAttributeClrTypeName;
    private static IClrTypeName[] ourNamesToWatch;
    public IEnumerable`1<IClrTypeName> AttributeClrNamesToWatch { get; }
    private static AspAttributeRoutingAttributeWatcher();
    public sealed virtual IEnumerable`1<IClrTypeName> get_AttributeClrNamesToWatch();
}
[CodeAnnotationProviderAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.AspAttributeRoutingSourceAnnotationProvider : CodeAnnotationInfoProvider`2<IClass, IReadOnlyCollection`1<AttributeRoutingAnnotationInfo>> {
    public static string AspAttributeRoutingAttributeShortName;
    public AspAttributeRoutingSourceAnnotationProvider(AttributeInstancesProvider attributeInstancesProvider, CodeAnnotationsConfiguration codeAnnotationsConfiguration);
    private static AspAttributeRoutingSourceAnnotationProvider();
    protected virtual IReadOnlyCollection`1<AttributeRoutingAnnotationInfo> CalculateInfo(IClass attributesOwner, IEnumerable`1<IAttributeInstance> attributeInstances);
    protected virtual IReadOnlyCollection`1<AttributeRoutingAnnotationInfo> GetDefaultInfo(IClass attributesOwner);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.AttributeRoutingAnnotationInfo : object {
    [CompilerGeneratedAttribute]
private string <ExactVerb>k__BackingField;
    public string ExactVerb { get; }
    public AttributeRoutingAnnotationInfo(string exactVerb);
    [CompilerGeneratedAttribute]
public string get_ExactVerb();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.AttributeRoutingAttributesChange : object {
    [CompilerGeneratedAttribute]
private IPsiModule <PsiModule>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<SourceRoutingAttribute> <Added>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<SourceRoutingAttribute> <Removed>k__BackingField;
    public IPsiModule PsiModule { get; }
    public IReadOnlyCollection`1<SourceRoutingAttribute> Added { get; }
    public IReadOnlyCollection`1<SourceRoutingAttribute> Removed { get; }
    public AttributeRoutingAttributesChange(IPsiModule psiModule, IReadOnlyCollection`1<SourceRoutingAttribute> added, IReadOnlyCollection`1<SourceRoutingAttribute> removed);
    [CompilerGeneratedAttribute]
public IPsiModule get_PsiModule();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<SourceRoutingAttribute> get_Added();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<SourceRoutingAttribute> get_Removed();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.AttributeRoutingSource : AttributeRoutingSourceBase {
    private string myExactVerb;
    private HttpVerb[] myPredefinedVerbs;
    public AttributeRoutingSource(IClass attributeClass, string exactVerb, bool isRouteTemplateProvider, bool isHttpMethodProvider);
    public HttpVerb[] GetHttpVerbs(IAttributeInstance attributeInstance);
    private static HttpVerb[] ParseVerbs(AttributeValue[] verbs);
    public int GetOrder(IAttributeInstance attributeInstance);
    protected bool Equals(AttributeRoutingSource other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.AttributeRoutingSourceBase : object {
    [CompilerGeneratedAttribute]
private IClass <AttributeClass>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRouteTemplateProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHttpMethodProvider>k__BackingField;
    public IClass AttributeClass { get; }
    public bool IsRouteTemplateProvider { get; }
    public bool IsHttpMethodProvider { get; }
    protected AttributeRoutingSourceBase(IClass attributeClass, bool isRouteTemplateProvider, bool isHttpMethodProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IClass get_AttributeClass();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsRouteTemplateProvider();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsHttpMethodProvider();
    [CanBeNullAttribute]
public sealed virtual ICSharpExpression GetTemplateNode(IAttribute attribute);
    [CanBeNullAttribute]
public sealed virtual ICSharpExpression SetTemplateNode(IAttribute attribute, ICSharpExpression expression);
    [CanBeNullAttribute]
public sealed virtual string GetTemplate(IAttributeInstance attributeInstance);
    [CanBeNullAttribute]
private ICSharpExpression GetExpressionFromAnnotatedMember(IAttribute attribute);
    [CanBeNullAttribute]
private ICSharpExpression SetExpressionToAnnotatedMember(IAttribute attribute, ICSharpExpression expression);
    [CanBeNullAttribute]
protected AttributeValue GetAnnotatedValue(IAttributeInstance attributeInstance);
    [PureAttribute]
protected static bool CheckAnnotation(IAttributesOwner attributesOwner);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.AttributeRoutingSourcesChange : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IPsiModule> <ChangedModules>k__BackingField;
    public IReadOnlyCollection`1<IPsiModule> ChangedModules { get; }
    public AttributeRoutingSourcesChange(IReadOnlyCollection`1<IPsiModule> changedModules);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<IPsiModule> get_ChangedModules();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.AttributeRoutingSourcesChangesDispatcher : DebouncingChangeDispatcherBase`2<AttributeRoutingSourcesChange, IPsiModule> {
    public string Name { get; }
    public AttributeRoutingSourcesChangesDispatcher(Lifetime lifetime, IChangeProvider changeProvider, ChangeManager changeManager, IShellLocks shellLocks, SynchronizationPoints synchronizationPoints);
    protected virtual AttributeRoutingSourcesChange BuildChange(IReadOnlyCollection`1<IPsiModule> changeDatas);
    public virtual string get_Name();
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.AttributeRoutingSourcesProvider : SourceAndModulesChangeConsumer {
    private ISymbolCache mySymbolCache;
    private CodeAnnotationsCache myCodeAnnotationsCache;
    private ConcurrentDictionary`2<IPsiModule, HashSet`1<AttributeRoutingSource>> myAttributeRoutingSources;
    private ILogger myLogger;
    private AsyncItemsProcessor`1<IInvalidationScope> myAsyncItemsProcessor;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsUpToDate>k__BackingField;
    public IProperty`1<bool> IsUpToDate { get; }
    public string Name { get; }
    protected int FilesPerModuleCountThreshold { get; }
    public AttributeRoutingSourcesProvider(ISolution solution, ISymbolCache symbolCache, ChangeManager changeManager, IPsiModules psiModules, IPsiServices psiServices, IShellLocks shellLocks, SolutionDocumentChangeProvider solutionDocumentChangeProvider, CodeAnnotationsCache codeAnnotationsCache, SuspendHardOperationsManager suspendHardOperationsManager, SynchronizationPoints synchronizationPoints);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsUpToDate();
    public sealed virtual string get_Name();
    public static AttributeRoutingSourcesProvider GetInstance(IPsiModule context);
    [NotNullAttribute]
[ItemNotNullAttribute]
public IReadOnlyCollection`1<AttributeRoutingSource> GetAttributeRoutingSources(IPsiModule psiModule);
    [NotNullAttribute]
[ItemNotNullAttribute]
public IReadOnlyCollection`1<AttributeRoutingSource> GetAllAttributeRoutingSources();
    [NotNullAttribute]
[ItemNotNullAttribute]
private HashSet`1<AttributeRoutingSource> BuildAttributeRoutingSources(IPsiModule psiModule, IReadOnlyCollection`1<string> annotatedTypes);
    protected virtual HashSet`1<IPsiModule> GetCalculatedModules();
    protected virtual void InvalidateScopes(IEnumerable`1<IInvalidationScope> scopes);
    protected virtual void ProcessRemovedModules(HashSet`1<IPsiModule> removedModules);
    protected virtual int get_FilesPerModuleCountThreshold();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.AttributeRoutingUtil : object {
    [CanBeNullAttribute]
public static IRestRoutingAttribute TryGetRouteAttribute(IRouteTemplateTreeNode node);
    [ExtensionAttribute]
[ItemCanBeNullAttribute]
public static List`1<SourceRoutingAttribute> GetRoutingAttributesWithStrongConsistency(IAttributesOwnerDeclaration attributesOwner);
    [CanBeNullAttribute]
public static IComponentRoutingAttribute TryGetComponentRouteAttribute(IRouteTemplateTreeNode node);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.ComponentRouting.ComponentAttributeRoutingSource : AttributeRoutingSourceBase {
    public ComponentAttributeRoutingSource(IClass attributeClass);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.ComponentRouting.ComponentSourceRoutingAttribute : RoutingAttributeBase`1<ComponentAttributeRoutingSource> {
    [CompilerGeneratedAttribute]
private IPsiSourceFile <PsiSourceFile>k__BackingField;
    [NotNullAttribute]
public IPsiSourceFile PsiSourceFile { get; }
    protected ComponentSourceRoutingAttribute(IAttributesOwner owner, ComponentAttributeRoutingSource routingSource, string template, IPsiSourceFile sourceFile);
    public static ComponentSourceRoutingAttribute Create(IAttribute attribute, ComponentAttributeRoutingSource source);
    [CompilerGeneratedAttribute]
public IPsiSourceFile get_PsiSourceFile();
    public IEnumerable`1<IAttribute> FindEqualSourceAttributesIncludingSelf();
    [CompilerGeneratedAttribute]
private bool <FindEqualSourceAttributesIncludingSelf>b__5_0(IAttribute attribute);
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.ComponentRouting.IComponentRoutingAttribute {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.CSharpRouteAttributesSearcher : object {
    [NullableContextAttribute("1")]
public sealed virtual SourceRoutingAttribute[] FindAttributes(IReadOnlyCollection`1<AttributeRoutingSource> sources, IPsiSourceFile[] sourceFiles);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.ExternalRouteAttributesChange : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IAssemblyPsiModule> <ChangedModules>k__BackingField;
    public IReadOnlyCollection`1<IAssemblyPsiModule> ChangedModules { get; }
    public ExternalRouteAttributesChange(IReadOnlyCollection`1<IAssemblyPsiModule> changedModules);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<IAssemblyPsiModule> get_ChangedModules();
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.ExternalRouteAttributesProvider : object {
    private AttributeRoutingSourcesProvider myAttributeRoutingSourcesProvider;
    private ConcurrentDictionary`2<IAttributesOwner, IReadOnlyCollection`1<ExternalRoutingAttribute>> myAttributes;
    public ExternalRouteAttributesProvider(Lifetime lifetime, ChangeManager changeManager, IPsiModules psiModules, AttributeRoutingSourcesProvider attributeRoutingSourcesProvider);
    public sealed virtual object Execute(IChangeMap changeMap);
    [NotNullAttribute]
[ItemNotNullAttribute]
private IReadOnlyCollection`1<ExternalRoutingAttribute> GetRoutingAttributesImpl(IAttributesOwner attributesOwner);
    [NotNullAttribute]
[ItemNotNullAttribute]
public IReadOnlyCollection`1<ExternalRoutingAttribute> GetRoutingAttributes(IAttributesOwner attributesOwner);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.ExternalRoutingAttribute : RestRoutingAttributeBase {
    public ExternalRoutingAttribute(IAttributesOwner owner, IAttributeInstance attributeInstance, AttributeRoutingSource attributeRoutingSource);
    protected virtual IEnumerable`1<IAttribute> GetSameTypeSourceAttributes();
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.IAttributeRoutingSource {
    public IClass AttributeClass { get; }
    public bool IsRouteTemplateProvider { get; }
    public bool IsHttpMethodProvider { get; }
    public abstract virtual IClass get_AttributeClass();
    public abstract virtual bool get_IsRouteTemplateProvider();
    public abstract virtual bool get_IsHttpMethodProvider();
    public abstract virtual ICSharpExpression GetTemplateNode(IAttribute attribute);
    public abstract virtual ICSharpExpression SetTemplateNode(IAttribute attribute, ICSharpExpression expression);
    public abstract virtual string GetTemplate(IAttributeInstance attributeInstance);
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.IRestRoutingAttribute {
    public HttpVerb[] Verbs { get; }
    public int Order { get; }
    public abstract virtual HttpVerb[] get_Verbs();
    public abstract virtual int get_Order();
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.IRouteAttributesSearcher {
    public abstract virtual SourceRoutingAttribute[] FindAttributes(IReadOnlyCollection`1<AttributeRoutingSource> sources, IPsiSourceFile[] sourceFiles);
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.IRoutingAttribute {
    [CanBeNullAttribute]
public string Template { get; }
    [NotNullAttribute]
public IAttributesOwner Owner { get; }
    [NotNullAttribute]
public IClass TargetClass { get; }
    [NotNullAttribute]
public IAttributeRoutingSource RoutingSource { get; }
    public abstract virtual string get_Template();
    public abstract virtual IAttributesOwner get_Owner();
    public abstract virtual IClass get_TargetClass();
    public abstract virtual IAttributeRoutingSource get_RoutingSource();
}
public abstract class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.RestRoutingAttributeBase : RoutingAttributeBase`1<AttributeRoutingSource> {
    [CompilerGeneratedAttribute]
private HttpVerb[] <Verbs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public HttpVerb[] Verbs { get; }
    public int Order { get; }
    protected RestRoutingAttributeBase(IAttributesOwner owner, IAttributeInstance attributeInstance, AttributeRoutingSource attributeRoutingSource, string template);
    [CompilerGeneratedAttribute]
public sealed virtual HttpVerb[] get_Verbs();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.RoutingAttributeBase`1 : object {
    protected TRoutingSource RoutingSourceImpl;
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private IAttributesOwner <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private IClass <TargetClass>k__BackingField;
    public string Template { get; }
    public IAttributesOwner Owner { get; }
    public IClass TargetClass { get; }
    public IAttributeRoutingSource RoutingSource { get; }
    protected RoutingAttributeBase`1(IAttributesOwner owner, TRoutingSource routingSource, string template);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Template();
    [CompilerGeneratedAttribute]
public sealed virtual IAttributesOwner get_Owner();
    [CompilerGeneratedAttribute]
public sealed virtual IClass get_TargetClass();
    public sealed virtual IAttributeRoutingSource get_RoutingSource();
    [ContractAnnotationAttribute("false <= null")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CanBeNullAttribute]
protected static IAttribute GetAttribute(IAttributeInstance attributeInstance);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.RoutingAttributeBase`1/<GetSameTypeSourceAttributes>d__16")]
[ItemNotNullAttribute]
protected virtual IEnumerable`1<IAttribute> GetSameTypeSourceAttributes();
}
[PsiComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.RoutingAttributesProvider : object {
    private SourceRoutingAttributesProvider myInternalRouteSourcesProvider;
    private ExternalRouteAttributesProvider myExternalRouteAttributesProvider;
    public RoutingAttributesProvider(SourceRoutingAttributesProvider internalRouteSourcesProvider, ExternalRouteAttributesProvider externalRouteAttributesProvider);
    public IReadOnlyCollection`1<IRestRoutingAttribute> GetRoutingAttributes(IAttributesOwner attributesOwner);
    public static RoutingAttributesProvider GetInstance(IPsiModule context);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.SourceRoutingAttribute : RestRoutingAttributeBase {
    [CompilerGeneratedAttribute]
private IPsiSourceFile <PsiSourceFile>k__BackingField;
    [NotNullAttribute]
public IPsiSourceFile PsiSourceFile { get; }
    private SourceRoutingAttribute(IAttributesOwner owner, IAttribute attribute, AttributeRoutingSource attributeRoutingSource, string template);
    [CanBeNullAttribute]
public static SourceRoutingAttribute Create(IAttribute attribute, AttributeRoutingSource attributeRoutingSource);
    [CompilerGeneratedAttribute]
public IPsiSourceFile get_PsiSourceFile();
    public IEnumerable`1<IAttribute> FindEqualSourceAttributesIncludingSelf();
    [CompilerGeneratedAttribute]
private bool <FindEqualSourceAttributesIncludingSelf>b__5_0(IAttribute attribute);
}
internal class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.SourceRoutingAttributesPerModuleRepository : object {
    private IPsiModule myPsiModule;
    private OneToSetMap`2<IPsiSourceFile, SourceRoutingAttribute> myAttributesPerFile;
    private OneToSetMap`2<IAttributesOwner, SourceRoutingAttribute> myAttributesPerDeclaredElement;
    private ILogger myLogger;
    public SourceRoutingAttributesPerModuleRepository(Lifetime lifetime, IPsiModule psiModule);
    public ICollection`1<SourceRoutingAttribute> GetAttributes();
    public ICollection`1<SourceRoutingAttribute> GetAttributes(IPsiSourceFile file);
    private void RemoveAttribute(SourceRoutingAttribute sourceRoutingAttribute);
    private void AddAttribute(SourceRoutingAttribute sourceRoutingAttribute);
    public void ApplyChange(AttributeRoutingAttributesChange change);
    public IReadOnlyCollection`1<SourceRoutingAttribute> GetAttributes(IAttributesOwner owner);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0();
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.AttributeRouting.SourceRoutingAttributesProvider : SourceAndModulesChangeConsumer {
    private Lifetime myLifetime;
    private ISolution mySolution;
    private ChangeManager myChangeManager;
    private IShellLocks myShellLocks;
    private AttributeRoutingSourcesProvider myAttributeRoutingSourcesProvider;
    private ILanguageManager myLanguageManager;
    private ConcurrentDictionary`2<IPsiModule, SourceRoutingAttributesPerModuleRepository> myAttributes;
    private ILogger myLogger;
    private AsyncItemsProcessor`1<IInvalidationScope> myAsyncItemsProcessor;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsUpToDate>k__BackingField;
    private HashSet`1<IModule> myModulesToInspect;
    public IProperty`1<bool> IsUpToDate { get; }
    public string Name { get; }
    protected int FilesPerModuleCountThreshold { get; }
    public SourceRoutingAttributesProvider(ISolution solution, IPsiServices psiServices, ChangeManager changeManager, SolutionDocumentChangeProvider solutionDocumentChangeProvider, IPsiModules psiModules, IShellLocks shellLocks, AttributeRoutingSourcesProvider attributeRoutingSourcesProvider, AspNetCoreRoutingAssembliesPresenceChecker routingAssembliesPresenceChecker, AsyncCommitService asyncCommitService, SynchronizationPoints synchronizationPoints, SuspendHardOperationsManager suspendHardOperationsManager, EndpointsSolutionLoadBarrier endpointsSolutionLoadBarrier, ILanguageManager languageManager);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsUpToDate();
    public sealed virtual string get_Name();
    private void ProcessScope(IInvalidationScope invalidationScope);
    private AttributeRoutingAttributesChange BuildChange(IPsiModule psiModule, IInvalidationScope invalidationScope, IReadOnlyCollection`1<AttributeRoutingSource> sources, SourceRoutingAttributesPerModuleRepository repository);
    private AttributeRoutingAttributesChange BuildChange(IPsiModule psiModule, ICollection`1<SourceRoutingAttribute> oldAttributes, ICollection`1<SourceRoutingAttribute> newAttributes);
    private IList`1<SourceRoutingAttribute> CollectAttributes(IReadOnlyCollection`1<AttributeRoutingSource> attributeRoutingSources, Dictionary`2<PsiLanguageType, IPsiSourceFile[]> filesPerLanguage);
    public static SourceRoutingAttributesProvider GetInstance(IPsiModule context);
    protected virtual HashSet`1<IPsiModule> GetCalculatedModules();
    protected virtual void InvalidateScopes(IEnumerable`1<IInvalidationScope> scopes);
    protected virtual void ProcessRemovedModules(HashSet`1<IPsiModule> removedModules);
    protected virtual int get_FilesPerModuleCountThreshold();
    private SourceRoutingAttributesPerModuleRepository GetOrCreateAttributesPerModuleRepository(IPsiModule psiModule);
    protected virtual void ProcessCustomChanges(IChangeMap changeMap, HashSet`1& changedModules, HashSet`1& removedModules, HashSet`1& modifiedFiles, HashSet`1& removedFiles);
    public IReadOnlyCollection`1<SourceRoutingAttribute> GetRoutingAttributes(IAttributesOwner owner);
    private void InvalidateScope(IInvalidationScope invalidationScope);
    [CompilerGeneratedAttribute]
private void <.ctor>b__15_1();
    [CompilerGeneratedAttribute]
private SourceRoutingAttributesPerModuleRepository <GetOrCreateAttributesPerModuleRepository>b__26_0(IPsiModule m);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.ControllersProvider.MvcControllersChange : object {
    [CompilerGeneratedAttribute]
private IPsiModule <PsiModule>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IClass> <Added>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IClass> <Removed>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IClass> <Changed>k__BackingField;
    public IPsiModule PsiModule { get; public set; }
    public IReadOnlyCollection`1<IClass> Added { get; public set; }
    public IReadOnlyCollection`1<IClass> Removed { get; public set; }
    public IReadOnlyCollection`1<IClass> Changed { get; }
    public MvcControllersChange(IPsiModule psiModule, IReadOnlyCollection`1<IClass> addedControllers, IReadOnlyCollection`1<IClass> removedControllers, IReadOnlyCollection`1<IClass> changedControllers);
    [CompilerGeneratedAttribute]
public IPsiModule get_PsiModule();
    [CompilerGeneratedAttribute]
public void set_PsiModule(IPsiModule value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<IClass> get_Added();
    [CompilerGeneratedAttribute]
public void set_Added(IReadOnlyCollection`1<IClass> value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<IClass> get_Removed();
    [CompilerGeneratedAttribute]
public void set_Removed(IReadOnlyCollection`1<IClass> value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<IClass> get_Changed();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.ControllersProvider.MvcControllersPerModuleProvider : object {
    private Lifetime myLifetime;
    private ISolution mySolution;
    private IPsiModule myPsiModule;
    private ChangeManager myChangeManager;
    private MvcControllersProvider myMvcControllersProvider;
    private IShellLocks myShellLocks;
    private SynchronizationPoint myDispatchSyncPoint;
    private OneToSetMap`2<IClass, IMethod> myActionsPerController;
    private ILogger myLogger;
    public MvcControllersPerModuleProvider(Lifetime lifetime, ISolution solution, IPsiModule psiModule, ChangeManager changeManager, MvcControllersProvider mvcControllersProvider, IShellLocks shellLocks, SynchronizationPoint dispatchSyncPoint);
    public void UpdateControllers();
    public void Clean(SynchronizationPoint dispatchSyncPoint);
    public IReadOnlyCollection`1<IClass> GetControllers();
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_0();
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.ControllersProvider.MvcControllersProvider : SourceAndModulesChangeConsumer {
    private Lifetime myLifetime;
    private ISolution mySolution;
    private ChangeManager myChangeManager;
    private IShellLocks myShellLocks;
    private ConcurrentDictionary`2<IPsiModule, MvcControllersPerModuleProvider> myProvidersPerModule;
    private AsyncItemsProcessor`1<IInvalidationScope> myAsyncItemsProcessor;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsUpToDate>k__BackingField;
    private HashSet`1<IModule> myModulesToInspect;
    private SynchronizationPoint myDispatchSyncPoint;
    public IProperty`1<bool> IsUpToDate { get; }
    public string Name { get; }
    protected int FilesPerModuleCountThreshold { get; }
    public MvcControllersProvider(ISolution solution, IPsiServices psiServices, ChangeManager changeManager, SolutionDocumentChangeProvider solutionDocumentChangeProvider, AspNetCoreRoutingAssembliesPresenceChecker routingAssembliesPresenceChecker, IPsiModules psiModules, IShellLocks shellLocks, AsyncCommitService asyncCommitService, SynchronizationPoints synchronizationPoints, EndpointsSolutionLoadBarrier endpointsSolutionLoadBarrier, SuspendHardOperationsManager suspendHardOperationsManager);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsUpToDate();
    public sealed virtual string get_Name();
    protected virtual void InvalidateScopes(IEnumerable`1<IInvalidationScope> scopes);
    protected virtual void ProcessRemovedModules(HashSet`1<IPsiModule> removedModules);
    private void Invalidate(IInvalidationScope invalidationScope);
    public static MvcControllersProvider GetInstance(IPsiModule context);
    public IReadOnlyCollection`1<IClass> GetControllers(IPsiModule psiModule);
    protected virtual HashSet`1<IPsiModule> GetCalculatedModules();
    private MvcControllersPerModuleProvider GetOrCreatePerModuleProvider(IPsiModule psiModule);
    protected virtual void ProcessCustomChanges(IChangeMap changeMap, HashSet`1& changedModules, HashSet`1& removedModules, HashSet`1& modifiedFiles, HashSet`1& removedFiles);
    protected virtual int get_FilesPerModuleCountThreshold();
    [CompilerGeneratedAttribute]
private void <.ctor>b__13_1();
    [CompilerGeneratedAttribute]
private MvcControllersPerModuleProvider <GetOrCreatePerModuleProvider>b__20_0(IPsiModule m);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.ConventionBasedRouting.AspRouteConventionAnnotationInfo : object {
    [CompilerGeneratedAttribute]
private string <PredefinedPattern>k__BackingField;
    public string PredefinedPattern { get; }
    public AspRouteConventionAnnotationInfo(string predefinedPattern);
    [CompilerGeneratedAttribute]
public string get_PredefinedPattern();
}
[CodeAnnotationProviderAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.ConventionBasedRouting.AspRouteConventionSourceAnnotationProvider : CodeAnnotationInfoProvider`2<IMethod, IReadOnlyCollection`1<AspRouteConventionAnnotationInfo>> {
    public static string AspRouteConventionAttributeShortName;
    public AspRouteConventionSourceAnnotationProvider(AttributeInstancesProvider attributeInstancesProvider, CodeAnnotationsConfiguration codeAnnotationsConfiguration);
    private static AspRouteConventionSourceAnnotationProvider();
    protected virtual IReadOnlyCollection`1<AspRouteConventionAnnotationInfo> CalculateInfo(IMethod attributesOwner, IEnumerable`1<IAttributeInstance> attributeInstances);
    protected virtual IReadOnlyCollection`1<AspRouteConventionAnnotationInfo> GetDefaultInfo(IMethod attributesOwner);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.ConventionBasedRouting.CSharpRoutingConventionsSearcher : object {
    private SearchDomainFactory mySearchDomainFactory;
    public CSharpRoutingConventionsSearcher(SearchDomainFactory searchDomainFactory);
    public sealed virtual RoutingConvention[] FindConventions(IReadOnlyCollection`1<RouteConventionSource> sources, IPsiSourceFile[] sourceFiles);
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.ConventionBasedRouting.IRoutingConventionsSearcher {
    public abstract virtual RoutingConvention[] FindConventions(IReadOnlyCollection`1<RouteConventionSource> sources, IPsiSourceFile[] sourceFiles);
}
[PsiSharedComponentAttribute]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.ConventionBasedRouting.RouteConventionAttributeWatcher : object {
    public static IClrTypeName AspRouteConventionAttributeClrTypeName;
    private static IClrTypeName[] ourNamesToWatch;
    public IEnumerable`1<IClrTypeName> AttributeClrNamesToWatch { get; }
    private static RouteConventionAttributeWatcher();
    public sealed virtual IEnumerable`1<IClrTypeName> get_AttributeClrNamesToWatch();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.ConventionBasedRouting.RouteConventionSource : object {
    [CompilerGeneratedAttribute]
private IMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PredefinedPattern>k__BackingField;
    public IMethod Method { get; }
    public string PredefinedPattern { get; }
    public RouteConventionSource(IMethod method, string predefinedPattern);
    [CompilerGeneratedAttribute]
public IMethod get_Method();
    [CompilerGeneratedAttribute]
public string get_PredefinedPattern();
    protected bool Equals(RouteConventionSource other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.ConventionBasedRouting.RoutingConvention : object {
    [CompilerGeneratedAttribute]
private RoutingConventionKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private RoutingConventionEntry[] <Entries>k__BackingField;
    public RoutingConventionKey Key { get; }
    public RoutingConventionEntry[] Entries { get; }
    public string Pattern { get; }
    public string AreaConstraintName { get; }
    public string ControllerConstraintName { get; }
    public string ActionConstraintName { get; }
    public string DefaultAreaName { get; }
    public string DefaultControllerName { get; }
    public string DefaultActionName { get; }
    public IPsiSourceFile PsiSourceFile { get; }
    public RoutingConvention(RoutingConventionKey key, RoutingConventionEntry[] entries);
    [CompilerGeneratedAttribute]
public RoutingConventionKey get_Key();
    [CompilerGeneratedAttribute]
public RoutingConventionEntry[] get_Entries();
    public string get_Pattern();
    public string get_AreaConstraintName();
    public string get_ControllerConstraintName();
    public string get_ActionConstraintName();
    public string get_DefaultAreaName();
    public string get_DefaultControllerName();
    public string get_DefaultActionName();
    public IPsiSourceFile get_PsiSourceFile();
    protected bool Equals(RoutingConvention other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.ConventionBasedRouting.RoutingConventionChange : object {
    [CompilerGeneratedAttribute]
private IPsiModule <PsiModule>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<RoutingConvention> <Removed>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<RoutingConvention> <Added>k__BackingField;
    public IPsiModule PsiModule { get; }
    public IReadOnlyCollection`1<RoutingConvention> Removed { get; }
    public IReadOnlyCollection`1<RoutingConvention> Added { get; }
    public RoutingConventionChange(IPsiModule psiModule, IReadOnlyCollection`1<RoutingConvention> removed, IReadOnlyCollection`1<RoutingConvention> added);
    [CompilerGeneratedAttribute]
public IPsiModule get_PsiModule();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<RoutingConvention> get_Removed();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<RoutingConvention> get_Added();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.ConventionBasedRouting.RoutingConventionEntry : object {
    [CompilerGeneratedAttribute]
private PartiallyKnownString <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiSourceFile <PsiSourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteConventionSource <ConventionSource>k__BackingField;
    private ITreeNodePointer`1<IInvocationExpression> myConventionDeclarationPointer;
    private IReferencePointer myAreaConstraintReference;
    private IReferencePointer myControllerConstraintReference;
    private IReferencePointer myActionConstraintReference;
    private IReferencePointer myDefaultAreaReference;
    private IReferencePointer myDefaultControllerReference;
    private IReferencePointer myDefaultActionReference;
    [NotNullAttribute]
public PartiallyKnownString Pattern { get; }
    [NotNullAttribute]
public IPsiSourceFile PsiSourceFile { get; }
    [NotNullAttribute]
public RouteConventionSource ConventionSource { get; }
    [CanBeNullAttribute]
public IMvcAreaReference AreaConstraintReference { get; }
    [CanBeNullAttribute]
public IMvcControllerReference ControllerConstraintReference { get; }
    [CanBeNullAttribute]
public IMvcActionReference ActionConstraintReference { get; }
    [CanBeNullAttribute]
public IMvcAreaReference DefaultAreaReference { get; }
    [CanBeNullAttribute]
public IMvcControllerReference DefaultControllerReference { get; }
    [CanBeNullAttribute]
public IMvcActionReference DefaultActionReference { get; }
    [CanBeNullAttribute]
public IInvocationExpression ConventionDeclaration { get; }
    private RoutingConventionEntry(IInvocationExpression conventionDeclaration, RouteConventionSource conventionSource);
    [CanBeNullAttribute]
public static RoutingConventionEntry Create(IInvocationExpression conventionDeclaration, RouteConventionSource conventionSource);
    [CompilerGeneratedAttribute]
public PartiallyKnownString get_Pattern();
    [CompilerGeneratedAttribute]
public IPsiSourceFile get_PsiSourceFile();
    [CompilerGeneratedAttribute]
public RouteConventionSource get_ConventionSource();
    public IMvcAreaReference get_AreaConstraintReference();
    public IMvcControllerReference get_ControllerConstraintReference();
    public IMvcActionReference get_ActionConstraintReference();
    public IMvcAreaReference get_DefaultAreaReference();
    public IMvcControllerReference get_DefaultControllerReference();
    public IMvcActionReference get_DefaultActionReference();
    public IInvocationExpression get_ConventionDeclaration();
    private static IList`1<TReference> CollectReferences(IEnumerable`1<ITreeNode> nodes);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.ConventionBasedRouting.RoutingConventionExtensions : object {
    [ExtensionAttribute]
public static bool ProvidesFullyKnownTemplate(RoutingConventionEntry routingConventionEntry);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.ConventionBasedRouting.RoutingConventionKey : object {
    [CompilerGeneratedAttribute]
private RouteConventionSource <ConventionSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiSourceFile <PsiSourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AreaConstraintName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ControllerConstraintName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActionConstraintName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultAreaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultControllerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultActionName>k__BackingField;
    public RouteConventionSource ConventionSource { get; }
    public IPsiSourceFile PsiSourceFile { get; }
    public string Pattern { get; }
    public string AreaConstraintName { get; }
    public string ControllerConstraintName { get; }
    public string ActionConstraintName { get; }
    public string DefaultAreaName { get; }
    public string DefaultControllerName { get; }
    public string DefaultActionName { get; }
    public RoutingConventionKey(RoutingConventionEntry entry);
    [CompilerGeneratedAttribute]
public RouteConventionSource get_ConventionSource();
    [CompilerGeneratedAttribute]
public IPsiSourceFile get_PsiSourceFile();
    [CompilerGeneratedAttribute]
public string get_Pattern();
    [CompilerGeneratedAttribute]
public string get_AreaConstraintName();
    [CompilerGeneratedAttribute]
public string get_ControllerConstraintName();
    [CompilerGeneratedAttribute]
public string get_ActionConstraintName();
    [CompilerGeneratedAttribute]
public string get_DefaultAreaName();
    [CompilerGeneratedAttribute]
public string get_DefaultControllerName();
    [CompilerGeneratedAttribute]
public string get_DefaultActionName();
    protected bool Equals(RoutingConventionKey other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.ConventionBasedRouting.RoutingConventionSourcesChangesDispatcher : DebouncingChangeDispatcherBase`2<RoutingConventionsSourcesChange, IPsiModule> {
    public string Name { get; }
    public RoutingConventionSourcesChangesDispatcher(Lifetime lifetime, IChangeProvider changeProvider, ChangeManager changeManager, IShellLocks shellLocks, SynchronizationPoints synchronizationPoints);
    protected virtual RoutingConventionsSourcesChange BuildChange(IReadOnlyCollection`1<IPsiModule> changeDatas);
    public virtual string get_Name();
}
internal class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.ConventionBasedRouting.RoutingConventionsPerModuleRepository : object {
    private OneToSetMap`2<IPsiSourceFile, RoutingConvention> myConventionsPerFile;
    private Dictionary`2<RoutingConventionKey, RoutingConvention> myConventionsByKey;
    public RoutingConventionsPerModuleRepository(Lifetime lifetime);
    public void ApplyChange(RoutingConventionChange change);
    public IReadOnlyCollection`1<RoutingConvention> GetConventions(IPsiSourceFile file);
    [CanBeNullAttribute]
public RoutingConvention TryGetConvention(RoutingConventionEntry conventionEntry);
    public IReadOnlyCollection`1<RoutingConvention> GetConventions();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0();
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.ConventionBasedRouting.RoutingConventionsProvider : SourceAndModulesChangeConsumer {
    private Lifetime myLifetime;
    private ISolution mySolution;
    private IPsiServices myPsiServices;
    private ChangeManager myChangeManager;
    private IShellLocks myShellLocks;
    private RoutingConventionsSourcesProvider myRoutingConventionsSourcesProvider;
    private ILanguageManager myLanguageManager;
    private ConcurrentDictionary`2<IPsiModule, RoutingConventionsPerModuleRepository> myConventions;
    private AsyncItemsProcessor`1<IInvalidationScope> myAsyncItemsProcessor;
    private HashSet`1<IModule> myModulesToInspect;
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsUpToDate>k__BackingField;
    public IProperty`1<bool> IsUpToDate { get; }
    public string Name { get; }
    protected int FilesPerModuleCountThreshold { get; }
    public RoutingConventionsProvider(ISolution solution, IPsiServices psiServices, ChangeManager changeManager, SolutionDocumentChangeProvider solutionDocumentChangeProvider, IPsiModules psiModules, IShellLocks shellLocks, RoutingConventionsSourcesProvider routingConventionsSourcesProvider, AspNetCoreRoutingAssembliesPresenceChecker routingAssembliesPresenceChecker, AsyncCommitService asyncCommitService, SynchronizationPoints synchronizationPoints, SuspendHardOperationsManager suspendHardOperationsManager, ILanguageManager languageManager);
    private void InvalidateScope(IInvalidationScope invalidationScope);
    private void ProcessScope(IInvalidationScope invalidationScope);
    private RoutingConventionChange BuildChange(IPsiModule psiModule, RoutingConventionsPerModuleRepository repository, IInvalidationScope invalidationScope, IReadOnlyCollection`1<RouteConventionSource> routeConventionSources);
    private RoutingConventionChange BuildChange(IPsiModule psiModule, IReadOnlyCollection`1<RoutingConvention> oldConventions, IReadOnlyCollection`1<RoutingConvention> newConventions);
    private IReadOnlyCollection`1<RoutingConvention> CollectConventions(IReadOnlyCollection`1<RouteConventionSource> conventionsSources, Dictionary`2<PsiLanguageType, IPsiSourceFile[]> filesPerLanguage);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsUpToDate();
    public sealed virtual string get_Name();
    public static RoutingConventionsProvider GetInstance(ITreeNode context);
    protected virtual HashSet`1<IPsiModule> GetCalculatedModules();
    protected virtual void InvalidateScopes(IEnumerable`1<IInvalidationScope> scopes);
    protected virtual void ProcessRemovedModules(HashSet`1<IPsiModule> removedModules);
    private RoutingConventionsPerModuleRepository GetOrCreateConventionsPerModuleRepository(IPsiModule psiModule);
    protected virtual void ProcessCustomChanges(IChangeMap changeMap, HashSet`1& changedModules, HashSet`1& removedModules, HashSet`1& modifiedFiles, HashSet`1& removedFiles);
    protected virtual int get_FilesPerModuleCountThreshold();
    public IReadOnlyCollection`1<RoutingConvention> GetConventions(IPsiModule psiModule);
    [CanBeNullAttribute]
public RoutingConvention TryGetConvention(IPsiModule psiModule, RoutingConventionEntry conventionEntry);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_2();
    [CompilerGeneratedAttribute]
private RoutingConventionsPerModuleRepository <GetOrCreateConventionsPerModuleRepository>b__26_0(IPsiModule _);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.ConventionBasedRouting.RoutingConventionsSourcesChange : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IPsiModule> <ChangedModules>k__BackingField;
    public IReadOnlyCollection`1<IPsiModule> ChangedModules { get; }
    public RoutingConventionsSourcesChange(IReadOnlyCollection`1<IPsiModule> changedModules);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<IPsiModule> get_ChangedModules();
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.ConventionBasedRouting.RoutingConventionsSourcesProvider : SourceAndModulesChangeConsumer {
    private ISolution mySolution;
    private ISymbolCache mySymbolCache;
    private CodeAnnotationsCache myCodeAnnotationsCache;
    private RoutingConventionSourcesChangesDispatcher myChangesDispatcher;
    private ConcurrentDictionary`2<IPsiModule, HashSet`1<RouteConventionSource>> myConventionsSources;
    private AsyncItemsProcessor`1<IInvalidationScope> myAsyncItemsProcessor;
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsUpToDate>k__BackingField;
    public IProperty`1<bool> IsUpToDate { get; }
    public string Name { get; }
    protected int FilesPerModuleCountThreshold { get; }
    public RoutingConventionsSourcesProvider(Lifetime lifetime, ISolution solution, ISymbolCache symbolCache, ChangeManager changeManager, IPsiModules psiModules, IShellLocks shellLocks, SolutionDocumentChangeProvider solutionDocumentChangeProvider, IPsiServices psiServices, CodeAnnotationsCache codeAnnotationsCache, SuspendHardOperationsManager suspendHardOperationsManager, EndpointsSolutionLoadBarrier endpointsSolutionLoadBarrier, SynchronizationPoints synchronizationPoints);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsUpToDate();
    public sealed virtual string get_Name();
    private void ProcessScope(IInvalidationScope invalidationScope);
    public IReadOnlyCollection`1<RouteConventionSource> GetConventionsSources(IPsiModule psiModule);
    private HashSet`1<RouteConventionSource> BuildConventionSources(IPsiModule psiModule, IReadOnlyCollection`1<FullTypeMemberName> fullTypeMemberNames);
    protected virtual HashSet`1<IPsiModule> GetCalculatedModules();
    protected virtual void InvalidateScopes(IEnumerable`1<IInvalidationScope> scopes);
    protected virtual void ProcessRemovedModules(HashSet`1<IPsiModule> removedModules);
    protected virtual int get_FilesPerModuleCountThreshold();
    private void InvalidateScope(IInvalidationScope scope);
    [CompilerGeneratedAttribute]
private void <.ctor>b__12_1();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.ConventionBasedRouting.RoutingConventionUtil : object {
    [ExtensionAttribute]
public static bool BelongsToConventionBasedRoute(IRouteTemplateTreeNode routeTemplateTreeNode);
    [PureAttribute]
[CanBeNullAttribute]
public static RoutingConvention TryGetConvention(IRouteTemplateTreeNode templateNode);
    [PureAttribute]
[CanBeNullAttribute]
public static RoutingConventionEntry TryGetConventionEntry(IRouteTemplateTreeNode templateNode);
    [ExtensionAttribute]
public static bool Matches(RoutingConvention routingConvention, IClass controller, IMethod action);
    [ExtensionAttribute]
public static bool Matches(RoutingConventionEntry routingConvention, IClass controller, IMethod action);
    private static bool Matches(RoutingConventionKey routingConvention, IClass controller, IMethod action);
    [ExtensionAttribute]
public static IClass TryGetControllerFromConstraint(RoutingConventionEntry convention);
    [ExtensionAttribute]
public static IMethod TryGetActionFromConstraint(RoutingConventionEntry convention);
    [ExtensionAttribute]
private static bool IsResolvedTo(IReference reference, TDeclaredElement& declaredElement);
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.IAspNetHttpEndpoint {
    public IReadOnlyList`1<AspNetHttpRouteSegment> RouteSegments { get; }
    public abstract virtual IReadOnlyList`1<AspNetHttpRouteSegment> get_RouteSegments();
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.IAspNetHttpEndpointsSource {
    public abstract virtual IEnumerable`1<AspNetHttpEndpoint> GetEndpoints();
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.IHttpEndpoint {
    public HttpVerb Verb { get; }
    public IReadOnlyList`1<IEndpointQueryParameter> QueryParameters { get; }
    public IReadOnlyCollection`1<IRouteTemplateProvider> TemplateProviders { get; }
    public abstract virtual HttpVerb get_Verb();
    public abstract virtual IReadOnlyList`1<IEndpointQueryParameter> get_QueryParameters();
    public abstract virtual IReadOnlyCollection`1<IRouteTemplateProvider> get_TemplateProviders();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSegments.AspNetHttpEndpointExtensions : object {
    [ExtensionAttribute]
public static IReadOnlyCollection`1<DocumentRange> GetSegmentDeclarationRanges(IAspNetHttpEndpoint endpoint, int segmentIndex);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSegments.AspNetHttpRouteSegment : object {
    [CompilerGeneratedAttribute]
private IRouteTemplateSegmentPart[] <Parts>k__BackingField;
    [CompilerGeneratedAttribute]
private IRouteTemplateProvider <TemplateProvider>k__BackingField;
    [NotNullAttribute]
public IRouteTemplateSegmentPart[] Parts { get; }
    public IRouteTemplateProvider TemplateProvider { get; }
    public AspNetHttpRouteSegment(IRouteTemplateSegmentPart[] parts, IRouteTemplateProvider routeTemplateProvider);
    private IRouteTemplateSegmentPart[] MergeNeighbors(IRouteTemplateSegmentPart[] parts);
    [CompilerGeneratedAttribute]
public IRouteTemplateSegmentPart[] get_Parts();
    [CompilerGeneratedAttribute]
public IRouteTemplateProvider get_TemplateProvider();
    public AspNetHttpRouteSegment Substitute(RouteSubstitutionData routeValues);
    public virtual string ToString();
    protected bool Equals(AspNetHttpRouteSegment other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(AspNetHttpRouteSegment other);
    public sealed virtual int CompareTo(object obj);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSegments.AspNetHttpRouteSegmentUtil : object {
    [ExtensionAttribute]
public static bool IsParameter(AspNetHttpRouteSegment segment);
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSegments.IRouteTemplateSegment {
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSegments.IRouteTemplateSegmentPart {
    public abstract virtual IRouteTemplateSegmentPart Substitute(RouteSubstitutionData routeValues);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSegments.RouteParameterSegmentPart : object {
    private RouteParameterInstance myRouteParameterInstance;
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public RouteParameterConstraintInstance[] Constraints { get; }
    public bool IsCatchAll { get; }
    public bool IsOptional { get; }
    [CanBeNullAttribute]
public string DefaultValue { get; }
    public RouteParameterSegmentPart(RouteParameterInstance routeParameterInstance);
    public string get_Name();
    public RouteParameterConstraintInstance[] get_Constraints();
    public bool get_IsCatchAll();
    public bool get_IsOptional();
    public string get_DefaultValue();
    public sealed virtual IRouteTemplateSegmentPart Substitute(RouteSubstitutionData routeValues);
    [CanBeNullAttribute]
private IRouteTemplateSegmentPart TrySubstitute(string name, RouteSubstitutionData routeValues);
    public virtual string ToString();
    protected bool Equals(RouteParameterSegmentPart other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSegments.RouteTemplateDelimiter : object {
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSegments.RouteTemplatePathSegment : object {
    [CompilerGeneratedAttribute]
private IRouteTemplateSegmentPart[] <Parts>k__BackingField;
    public IRouteTemplateSegmentPart[] Parts { get; }
    public RouteTemplatePathSegment(IRouteTemplateSegmentPart[] parts);
    [CompilerGeneratedAttribute]
public IRouteTemplateSegmentPart[] get_Parts();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSegments.RouteValueSubstitutionSegmentPart : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [NotNullAttribute]
public string Key { get; }
    public RouteValueSubstitutionSegmentPart(string key);
    [CompilerGeneratedAttribute]
public string get_Key();
    public sealed virtual IRouteTemplateSegmentPart Substitute(RouteSubstitutionData routeValues);
    public virtual string ToString();
    protected bool Equals(RouteValueSubstitutionSegmentPart other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSegments.StaticTextSegmentPart : object {
    private string myText;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [NotNullAttribute]
public string Text { get; }
    public StaticTextSegmentPart(string text);
    public StaticTextSegmentPart(IStaticTextRoutePartTreeNode staticTextRoutePartTreeNode);
    [CompilerGeneratedAttribute]
public string get_Text();
    public sealed virtual IRouteTemplateSegmentPart Substitute(RouteSubstitutionData routeValues);
    public virtual string ToString();
    protected bool Equals(StaticTextSegmentPart other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.ApiVersionData : object {
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiVersionSource <Source>k__BackingField;
    public string Version { get; }
    public ApiVersionSource Source { get; }
    public ApiVersionData(string version, ApiVersionSource source);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public ApiVersionSource get_Source();
}
public enum JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.ApiVersionSource : Enum {
    public int value__;
    public static ApiVersionSource Controller;
    public static ApiVersionSource Action;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.AspNetRouteSourcesProvider : object {
    [ExtensionAttribute]
public static IRouteTemplateProvider[] GetRouteTemplateProviders(IAttributesOwner attributesOwner, RoutingAttributesProvider routingAttributesProvider);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.AvailableRouteValues : object {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <RouteTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ApiVersionData> <ApiVersions>k__BackingField;
    [NotNullAttribute]
public IReadOnlyDictionary`2<string, string> RouteTokens { get; }
    [NotNullAttribute]
public IReadOnlyList`1<ApiVersionData> ApiVersions { get; }
    public AvailableRouteValues(IReadOnlyDictionary`2<string, string> routeTokens, IReadOnlyList`1<ApiVersionData> apiVersions);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.AvailableRouteValues/<CreateAllPossibleSubstitutionDatum>d__1")]
public IEnumerable`1<RouteSubstitutionData> CreateAllPossibleSubstitutionDatum();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_RouteTokens();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ApiVersionData> get_ApiVersions();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.ConstantRouteTemplatePart : object {
    [CanBeNullAttribute]
private ITreeNodePointer`1<ITreeNode> myOriginalNodePointer;
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    public string Template { get; }
    public ConstantRouteTemplatePart(string template, ITreeNode originalNode);
    public sealed virtual ITreeNode GetOriginalNode();
    public sealed virtual IRouteTemplateFile GetRouteTemplateFile();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Template();
    public sealed virtual IReadOnlyCollection`1<IRouteParameterConstraintTreeNode> AddConstraint(string parameterName, RouteParameterConstraint constraint);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.ConventionBasedRouteTemplateProvider : object {
    private RoutingConvention myRoutingConvention;
    public string Template { get; }
    public IPsiModule PsiModule { get; }
    public RouteTemplateSource TemplateSource { get; }
    public IEnumerable`1<IRouteTemplateAccessor> Accessors { get; }
    private ConventionBasedRouteTemplateProvider(RoutingConvention routingConvention);
    [CanBeNullAttribute]
public static ConventionBasedRouteTemplateProvider TryCreate(RoutingConvention routingConvention);
    public sealed virtual int CompareTo(IRouteTemplateProvider other);
    public sealed virtual string get_Template();
    public sealed virtual IPsiModule get_PsiModule();
    public sealed virtual RouteTemplateSource get_TemplateSource();
    public sealed virtual IEnumerable`1<IRouteTemplateAccessor> get_Accessors();
    public sealed virtual IReadOnlyCollection`1<DocumentRange> AppendSegmentToTemplate(string segment);
    public sealed virtual void RemoveSegmentsFromPrefix(int segmentsCount);
    public sealed virtual IReadOnlyCollection`1<IRouteParameterConstraintTreeNode> AddConstraintToParameter(string parameterName, RouteParameterConstraint constraint);
    protected bool Equals(ConventionBasedRouteTemplateProvider other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.ConventionBasedTemplateAccessor : RouteTemplateAccessorBase {
    private RoutingConventionEntry myConvention;
    protected PartiallyKnownString Template { get; }
    public ConventionBasedTemplateAccessor(RoutingConventionEntry convention);
    protected virtual PartiallyKnownString get_Template();
    protected virtual DocumentRange SetTemplateValue(ICSharpExpression expression);
    protected virtual ICSharpExpression GetTemplateNode();
    protected virtual CSharpElementFactory GetElementFactory();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.EditableComponentRouteTemplateProvider : EditableRouteTemplateProviderBase {
    private ComponentSourceRoutingAttribute myRoutingAttribute;
    public string Template { get; }
    public IPsiModule PsiModule { get; }
    public RouteTemplateSource TemplateSource { get; }
    public IDeclaredElement Target { get; }
    public IAttributeRoutingSource AttributeRoutingSource { get; }
    public int Order { get; }
    public IEnumerable`1<IRouteTemplateAccessor> Accessors { get; }
    public EditableComponentRouteTemplateProvider(ComponentSourceRoutingAttribute routingAttribute);
    public virtual string get_Template();
    public virtual IPsiModule get_PsiModule();
    public virtual RouteTemplateSource get_TemplateSource();
    public sealed virtual IDeclaredElement get_Target();
    public sealed virtual IAttributeRoutingSource get_AttributeRoutingSource();
    public sealed virtual int get_Order();
    public virtual IEnumerable`1<IRouteTemplateAccessor> get_Accessors();
    protected bool Equals(EditableComponentRouteTemplateProvider other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public int CompareTo(IAttributeRouteTemplateProvider other);
    public virtual int CompareTo(IRouteTemplateProvider provider);
    [CompilerGeneratedAttribute]
private RouteAttributeTemplateAccessor <get_Accessors>b__15_0(IAttribute x);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.EditableRouteAttributeTemplateProvider : EditableRouteTemplateProviderBase {
    private SourceRoutingAttribute myRouteSourceRoutingAttribute;
    public IDeclaredElement DeclaringMember { get; }
    public RouteTemplateSource TemplateSource { get; }
    public string Template { get; }
    public IPsiModule PsiModule { get; }
    public int Order { get; }
    public IDeclaredElement Target { get; }
    public IAttributeRoutingSource AttributeRoutingSource { get; }
    public IEnumerable`1<IRouteTemplateAccessor> Accessors { get; }
    public EditableRouteAttributeTemplateProvider(SourceRoutingAttribute routeSourceRoutingAttribute);
    public IDeclaredElement get_DeclaringMember();
    public virtual RouteTemplateSource get_TemplateSource();
    public virtual string get_Template();
    public virtual IPsiModule get_PsiModule();
    public sealed virtual int get_Order();
    public sealed virtual IDeclaredElement get_Target();
    public sealed virtual IAttributeRoutingSource get_AttributeRoutingSource();
    public virtual IEnumerable`1<IRouteTemplateAccessor> get_Accessors();
    protected bool Equals(EditableRouteAttributeTemplateProvider other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public int CompareTo(IAttributeRouteTemplateProvider other);
    public virtual int CompareTo(IRouteTemplateProvider provider);
    [CompilerGeneratedAttribute]
private RouteAttributeTemplateAccessor <get_Accessors>b__17_0(IAttribute x);
}
public abstract class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.EditableRouteTemplateProviderBase : object {
    public IEnumerable`1<IRouteTemplateAccessor> Accessors { get; }
    public string Template { get; }
    public IPsiModule PsiModule { get; }
    public RouteTemplateSource TemplateSource { get; }
    public abstract virtual IEnumerable`1<IRouteTemplateAccessor> get_Accessors();
    public sealed virtual IReadOnlyCollection`1<DocumentRange> AppendSegmentToTemplate(string segment);
    public sealed virtual void RemoveSegmentsFromPrefix(int segmentsCount);
    public sealed virtual IReadOnlyCollection`1<IRouteParameterConstraintTreeNode> AddConstraintToParameter(string parameterName, RouteParameterConstraint constraint);
    public abstract virtual int CompareTo(IRouteTemplateProvider provider);
    public abstract virtual string get_Template();
    public abstract virtual IPsiModule get_PsiModule();
    public abstract virtual RouteTemplateSource get_TemplateSource();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.ExternalRouteAttributeTemplateProvider : object {
    private ExternalRoutingAttribute myRoutingAttribute;
    public IDeclaredElement DeclaringMember { get; }
    public string Template { get; }
    public IPsiModule PsiModule { get; }
    public int Order { get; }
    public IDeclaredElement Target { get; }
    public IAttributeRoutingSource AttributeRoutingSource { get; }
    public RouteTemplateSource TemplateSource { get; }
    public ExternalRouteAttributeTemplateProvider(ExternalRoutingAttribute routingAttribute);
    public IDeclaredElement get_DeclaringMember();
    public sealed virtual string get_Template();
    public sealed virtual IPsiModule get_PsiModule();
    public sealed virtual int get_Order();
    public sealed virtual IDeclaredElement get_Target();
    public sealed virtual IAttributeRoutingSource get_AttributeRoutingSource();
    public int CompareTo(IAttributeRouteTemplateProvider other);
    public sealed virtual int CompareTo(IRouteTemplateProvider obj);
    public sealed virtual RouteTemplateSource get_TemplateSource();
}
public abstract class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.HttpVerb : object {
    public static HttpVerb Any();
    public static HttpVerb Exact(string verb);
    public abstract virtual bool Matches(HttpVerb verb);
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.IAttributeRouteTemplateProvider {
    public IDeclaredElement Target { get; }
    public IAttributeRoutingSource AttributeRoutingSource { get; }
    public int Order { get; }
    public abstract virtual IDeclaredElement get_Target();
    public abstract virtual IAttributeRoutingSource get_AttributeRoutingSource();
    public abstract virtual int get_Order();
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.IConventionBasedRouteTemplateProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.IEditableRouteTemplateProvider {
    public IEnumerable`1<IRouteTemplateAccessor> Accessors { get; }
    public abstract virtual IEnumerable`1<IRouteTemplateAccessor> get_Accessors();
    public abstract virtual IReadOnlyCollection`1<DocumentRange> AppendSegmentToTemplate(string segment);
    public abstract virtual void RemoveSegmentsFromPrefix(int segmentsCount);
    public abstract virtual IReadOnlyCollection`1<IRouteParameterConstraintTreeNode> AddConstraintToParameter(string parameterName, RouteParameterConstraint constraint);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.InjectedRouteTemplatePart : object {
    private ITreeNodePointer`1<IRouteTemplateFile> myRouteTemplateFile;
    private ITreeNodePointer`1<ITreeNode> myOriginalNodePointer;
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    public string Template { get; }
    public InjectedRouteTemplatePart(ITreeNode originalNode, IRouteTemplateFile routeTemplateFile, string template);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Template();
    public sealed virtual IRouteTemplateFile GetRouteTemplateFile();
    public sealed virtual ITreeNode GetOriginalNode();
    public sealed virtual IReadOnlyCollection`1<IRouteParameterConstraintTreeNode> AddConstraint(string parameterName, RouteParameterConstraint constraint);
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.IRouteTemplateAccessor {
    [ItemCanBeNullAttribute]
public abstract virtual IReadOnlyCollection`1<IRouteTemplatePart> GetRouteTemplateParts();
    public abstract virtual void RemoveSegmentsFromPrefix(int segmentsCount);
    public abstract virtual DocumentRange AppendSegmentToTemplate(string segment);
    public abstract virtual IReadOnlyCollection`1<IRouteParameterConstraintTreeNode> AddConstraintToParameter(string parameterName, RouteParameterConstraint constraint);
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.IRouteTemplatePart {
    public string Template { get; }
    [CanBeNullAttribute]
public abstract virtual IRouteTemplateFile GetRouteTemplateFile();
    public abstract virtual string get_Template();
    [CanBeNullAttribute]
public abstract virtual ITreeNode GetOriginalNode();
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IReadOnlyCollection`1<IRouteParameterConstraintTreeNode> AddConstraint(string parameterName, RouteParameterConstraint constraint);
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.IRouteTemplateProvider {
    public string Template { get; }
    public IPsiModule PsiModule { get; }
    public RouteTemplateSource TemplateSource { get; }
    public abstract virtual string get_Template();
    public abstract virtual IPsiModule get_PsiModule();
    public abstract virtual RouteTemplateSource get_TemplateSource();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.RouteAttributeTemplateAccessor : RouteTemplateAccessorBase {
    private IAttribute myAttribute;
    private IAttributeRoutingSource myAttributeRoutingSource;
    protected PartiallyKnownString Template { get; }
    public RouteAttributeTemplateAccessor(IAttribute attribute, IAttributeRoutingSource attributeRoutingSource);
    protected virtual PartiallyKnownString get_Template();
    protected virtual CSharpElementFactory GetElementFactory();
    protected virtual DocumentRange SetTemplateValue(ICSharpExpression expression);
    protected virtual ICSharpExpression GetTemplateNode();
}
public static class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.RouteParameterConstraintsUtil : object {
    public static RouteParameterConstraint[] GetConstraints(IRouteParameterTreeNode routeParameter);
    [CanBeNullAttribute]
public static IType CalculateProposedType(IPsiModule psiModule, ICollection`1<RouteParameterConstraintInstance> constraints, RouteParameterConstraint& dominantConstraint);
    [CanBeNullAttribute]
public static IType CalculateProposedType(IPsiModule psiModule, IReadOnlyCollection`1<RouteParameterConstraint> constraints, RouteParameterConstraint& dominantConstraint);
    public static List`1<RouteSourceWithParameters> CollectRouteParameters(IRouteTemplateProvider[] routeTemplateProviders);
    public static List`1<RouteSourceWithParameters> CollectRouteParameters(MinimalApiDeclarationBase declaration);
    public static List`1<RouteSourceWithParameters> CollectRouteParameters(IAttributesOwner attributesOwner, IAspNetRoutingTypeCache routingTypeCache, MvcElementsCache mvcElementsCache, RoutingAttributesProvider routingAttributesProvider);
    public static OneToSetMap`2<string, RouteParameterConstraintInstance> CollectParametersConstraints(List`1<RouteSourceWithParameters> routeSegments);
    public static OneToSetMap`2<string, RouteParameterConstraintInstance> CollectParametersConstraints(IList`1<RouteSourceWithParameters> controllerRoutesSegments, IList`1<RouteSourceWithParameters> methodRoutesSegments);
    private static IType CalculateProposedParameterType(PredefinedType predefinedType, ICollection`1<RouteParameterConstraint> constraints);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.RouteParameterWithPosition : object {
    [CompilerGeneratedAttribute]
private IRouteTemplatePart <Part>k__BackingField;
    [CompilerGeneratedAttribute]
private IRouteParameterTreeNode <Parameter>k__BackingField;
    public IRouteTemplatePart Part { get; }
    public IRouteParameterTreeNode Parameter { get; }
    public RouteParameterWithPosition(IRouteParameterTreeNode parameter, IRouteTemplatePart part);
    [CompilerGeneratedAttribute]
public IRouteTemplatePart get_Part();
    [CompilerGeneratedAttribute]
public IRouteParameterTreeNode get_Parameter();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.RouteSourceWithParameters : object {
    [CompilerGeneratedAttribute]
private IRouteTemplateProvider <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<RouteParameterWithPosition> <Parameters>k__BackingField;
    public IRouteTemplateProvider Source { get; }
    public IReadOnlyCollection`1<RouteParameterWithPosition> Parameters { get; }
    public RouteSourceWithParameters(IRouteTemplateProvider source, IReadOnlyCollection`1<RouteParameterWithPosition> parameters);
    [CompilerGeneratedAttribute]
public IRouteTemplateProvider get_Source();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<RouteParameterWithPosition> get_Parameters();
    public void Deconstruct(IRouteTemplateProvider& source, IReadOnlyCollection`1& parameters);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.RouteSubstitutionData : object {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <RouteTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiVersionData <ApiVersion>k__BackingField;
    [NotNullAttribute]
public IReadOnlyDictionary`2<string, string> RouteTokens { get; }
    [CanBeNullAttribute]
public ApiVersionData ApiVersion { get; }
    public RouteSubstitutionData(IReadOnlyDictionary`2<string, string> routeTokens, ApiVersionData apiVersion);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_RouteTokens();
    [CompilerGeneratedAttribute]
public ApiVersionData get_ApiVersion();
}
public abstract class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.RouteTemplateAccessorBase : object {
    protected PartiallyKnownString Template { get; }
    protected abstract virtual PartiallyKnownString get_Template();
    protected abstract virtual DocumentRange SetTemplateValue(ICSharpExpression expression);
    protected abstract virtual ICSharpExpression GetTemplateNode();
    protected abstract virtual CSharpElementFactory GetElementFactory();
    public sealed virtual IReadOnlyCollection`1<IRouteTemplatePart> GetRouteTemplateParts();
    private static IRouteTemplatePart BuildRouteTemplateHolder(IExpression expression, ITokenNode literal, string text);
    public sealed virtual DocumentRange AppendSegmentToTemplate(string segment);
    public sealed virtual void RemoveSegmentsFromPrefix(int segmentsCount);
    public sealed virtual IReadOnlyCollection`1<IRouteParameterConstraintTreeNode> AddConstraintToParameter(string parameterName, RouteParameterConstraint constraint);
}
public static class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.RouteTemplateProviderBuilder : object {
    [CanBeNullAttribute]
public static IRouteTemplateProvider TryCreateRouteTemplateProvider(IRestRoutingAttribute routingAttribute);
    [CanBeNullAttribute]
public static IRouteTemplateProvider TryCreateRouteTemplateProvider(IComponentRoutingAttribute routingAttribute);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.RouteTemplateProviderHelper : object {
    private static RecursiveElementProcessor`2<IRouteTemplateTreeNode, MySegmentByIndexSearcherContext> ourRouteTemplateSegmentsCollector;
    private static RouteTemplateProviderHelper();
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IRouteTemplateProvider TryGetRouteTemplateProvider(IRouteTemplateTreeNode node);
    [ExtensionAttribute]
public static RouteParameterInstance[] GetDeclaredParameters(IRouteTemplateProvider routeTemplateProvider);
    [ExtensionAttribute]
public static bool IsControllerRouteAttribute(IRouteTemplateProvider routeTemplateProvider);
    [ExtensionAttribute]
public static bool ResetsPrefix(IRouteTemplateProvider routeTemplateProvider);
    [ExtensionAttribute]
public static IReadOnlyCollection`1<DocumentRange> GetSegmentDeclarationRange(IRouteTemplateProvider routeTemplateProvider, int segmentIndex);
}
public enum JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.RouteTemplateSource : Enum {
    public int value__;
    public static RouteTemplateSource ControllerAttribute;
    public static RouteTemplateSource ActionAttribute;
    public static RouteTemplateSource RoutingConvention;
    public static RouteTemplateSource MinimalApiDeclaration;
    public static RouteTemplateSource ComponentPageDeclaration;
}
public static class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.RouteSources.RouteValuesUtil : object {
    public static AvailableRouteValues GetAvailableRouteValues(IPsiModule psiModule, ITypeElement typeElement, ITypeMember method);
    private static IReadOnlyList`1<ApiVersionData> GetAvailableApiVersions(IPsiModule psiModule, ITypeElement typeElement, ITypeMember method);
    private static IReadOnlyList`1<ApiVersionData> GetAvailableApiVersions(IAttributesOwner attributesOwner, ApiVersionSource apiVersionSource);
    private static Dictionary`2<string, string> GetAvailableRouteTokens(ITypeElement typeElement, ITypeMember method);
    [CanBeNullAttribute]
private static string TryGetAreaFromAttribute(IAttributesOwner attributesOwner);
    private static string GetMethodSubstitutionName(ITypeMember method);
    private static string GetControllerSubstitutionName(ITypeElement controller);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.ZoneMarker : object {
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpointUtil : object {
    [ExtensionAttribute]
public static UrlPath BuildUrlPath(IAspNetHttpEndpoint endpoint);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApiHttpEndpointHelper : object {
    public sealed virtual UrlPath BuildUrlPath(IEndpoint endpoint);
    public sealed virtual IReadOnlyCollection`1<IEndpointQueryParameter> GetQueryParameters(IEndpoint endpoint);
    public sealed virtual IReadOnlyCollection`1<HttpVerb> GetVerbs(IEndpoint endpoint);
    public sealed virtual IReadOnlyCollection`1<IParametersOwner> GetEndpointHandlersByRouteProvider(IRouteTemplateProvider routeTemplateProvider);
    public sealed virtual IReadOnlyCollection`1<IParametersOwner> GetEndpointHandlersByRouteProviderStrongConsistency(IRouteTemplateTreeNode treeNode);
    public sealed virtual IReadOnlyCollection`1<IHttpEndpoint> GetEndpointsByRouteProvider(IRouteTemplateProvider routeTemplateProvider);
    public sealed virtual IReadOnlyCollection`1<IHttpEndpoint> GetEndpointsByHandler(IParametersOwner handler);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.AspNetMinimalApiEndpoint : object {
    private MinimalApiDeclaration myDeclaration;
    [CompilerGeneratedAttribute]
private IPsiModule <PsiModule>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpVerb <Verb>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<AspNetHttpRouteSegment> <RouteSegments>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IEndpointQueryParameter> <QueryParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IRouteTemplateProvider> <TemplateProviders>k__BackingField;
    public IParametersOwner Handler { get; }
    public IPsiModule PsiModule { get; }
    public IMinimalApiDeclaration Declaration { get; }
    private IReadOnlyList`1<AspNetHttpRouteSegment> JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.IAspNetHttpEndpoint.RouteSegments { get; }
    public HttpVerb Verb { get; }
    public IReadOnlyList`1<AspNetHttpRouteSegment> RouteSegments { get; }
    private IReadOnlyList`1<IRouteSegment> JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IEndpoint.RouteSegments { get; }
    public IReadOnlyList`1<IEndpointQueryParameter> QueryParameters { get; }
    public IReadOnlyCollection`1<IRouteTemplateProvider> TemplateProviders { get; }
    public AspNetMinimalApiEndpoint(IPsiModule psiModule, IReadOnlyCollection`1<MinimalApiGroupDeclaration> groups, MinimalApiDeclaration declaration, HttpVerb verb);
    private IReadOnlyList`1<IEndpointQueryParameter> ExtractQueryParameters(MinimalApiDeclaration declaration);
    public sealed virtual IParametersOwner get_Handler();
    [CompilerGeneratedAttribute]
public sealed virtual IPsiModule get_PsiModule();
    public sealed virtual IMinimalApiDeclaration get_Declaration();
    private sealed virtual override IReadOnlyList`1<AspNetHttpRouteSegment> JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetHttpEndpoints.IAspNetHttpEndpoint.get_RouteSegments();
    [CompilerGeneratedAttribute]
public sealed virtual HttpVerb get_Verb();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<AspNetHttpRouteSegment> get_RouteSegments();
    private sealed virtual override IReadOnlyList`1<IRouteSegment> JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IEndpoint.get_RouteSegments();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<IEndpointQueryParameter> get_QueryParameters();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IRouteTemplateProvider> get_TemplateProviders();
    public sealed virtual int CompareTo(IAspNetHttpEndpoint other);
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.AspNetMinimalApiImplicitEndpoint : object {
    [CompilerGeneratedAttribute]
private IPsiModule <PsiModule>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<AspNetHttpRouteSegment> <RouteSegments>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpVerb <Verb>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IEndpointQueryParameter> <QueryParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IRouteTemplateProvider> <TemplateProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private IMinimalApiDeclaration <Declaration>k__BackingField;
    public IPsiModule PsiModule { get; }
    public IReadOnlyList`1<AspNetHttpRouteSegment> RouteSegments { get; }
    private IReadOnlyList`1<IRouteSegment> JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IEndpoint.RouteSegments { get; }
    public HttpVerb Verb { get; }
    public IReadOnlyList`1<IEndpointQueryParameter> QueryParameters { get; }
    public IReadOnlyCollection`1<IRouteTemplateProvider> TemplateProviders { get; }
    public IMinimalApiDeclaration Declaration { get; }
    public IParametersOwner Handler { get; }
    public AspNetMinimalApiImplicitEndpoint(IPsiModule psiModule, IReadOnlyCollection`1<MinimalApiGroupDeclaration> groups, MinimalApiImplicitDeclaration declaration, MinimalApiImplicitEndpointDescription description);
    [CompilerGeneratedAttribute]
public sealed virtual IPsiModule get_PsiModule();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<AspNetHttpRouteSegment> get_RouteSegments();
    private sealed virtual override IReadOnlyList`1<IRouteSegment> JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IEndpoint.get_RouteSegments();
    [CompilerGeneratedAttribute]
public sealed virtual HttpVerb get_Verb();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<IEndpointQueryParameter> get_QueryParameters();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IRouteTemplateProvider> get_TemplateProviders();
    public sealed virtual int CompareTo(IAspNetHttpEndpoint other);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual IMinimalApiDeclaration get_Declaration();
    public sealed virtual IParametersOwner get_Handler();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.Declarations.CSharpMinimalApiDeclarationsSearcher : object {
    private SearchDomainFactory mySearchDomainFactory;
    public CSharpMinimalApiDeclarationsSearcher(SearchDomainFactory searchDomainFactory);
    public sealed virtual MinimalApiDeclaration[] FindDeclarations(IReadOnlyCollection`1<MinimalApiSource> sources, IPsiSourceFile[] sourceFiles);
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.Declarations.IMinimalApiDeclarationsSearcher {
    public abstract virtual MinimalApiDeclaration[] FindDeclarations(IReadOnlyCollection`1<MinimalApiSource> sources, IPsiSourceFile[] sourceFiles);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.Declarations.MinimalApiDeclaration : MinimalApiDeclarationBase {
    [CanBeNullAttribute]
private ITreeNodePointer`1<ICSharpArgument> myHandlerArgument;
    [CompilerGeneratedAttribute]
private MinimalApiSource <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpVerb[] <Verbs>k__BackingField;
    [NotNullAttribute]
public MinimalApiSource Source { get; }
    [CanBeNullAttribute]
public IExpression Handler { get; }
    [NotNullAttribute]
public HttpVerb[] Verbs { get; }
    private MinimalApiDeclaration(IInvocationExpression declaration, MinimalApiSource source);
    public static MinimalApiDeclaration Create(IInvocationExpression declaration, MinimalApiSource source);
    private HttpVerb[] GetVerbs(IInvocationExpression invocationExpression);
    [CompilerGeneratedAttribute]
public MinimalApiSource get_Source();
    public IExpression get_Handler();
    [CompilerGeneratedAttribute]
public HttpVerb[] get_Verbs();
}
public abstract class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.Declarations.MinimalApiDeclarationBase : object {
    [CanBeNullAttribute]
protected ITreeNodePointer`1<ICSharpArgument> PatternArgument;
    [CanBeNullAttribute]
protected ITreeNodePointer`1<IInvocationExpression> DeclarationPointer;
    [CompilerGeneratedAttribute]
private IPsiSourceFile <PsiSourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private PartiallyKnownString <Pattern>k__BackingField;
    [NotNullAttribute]
public IPsiSourceFile PsiSourceFile { get; }
    [CanBeNullAttribute]
public ICSharpExpression PatternNode { get; }
    [NotNullAttribute]
public PartiallyKnownString Pattern { get; }
    public IInvocationExpression DeclarationNode { get; }
    protected MinimalApiDeclarationBase(IInvocationExpression declaration);
    [CompilerGeneratedAttribute]
public sealed virtual IPsiSourceFile get_PsiSourceFile();
    public ICSharpExpression get_PatternNode();
    [CompilerGeneratedAttribute]
public PartiallyKnownString get_Pattern();
    public sealed virtual IInvocationExpression get_DeclarationNode();
    public ICSharpExpression SetTemplate(ICSharpExpression template);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.Declarations.MinimalApiDeclarationsChange : object {
    [CompilerGeneratedAttribute]
private IPsiModule <PsiModule>k__BackingField;
    [CompilerGeneratedAttribute]
private OneToSetMap`2<IPsiSourceFile, MinimalApiDeclaration> <Declarations>k__BackingField;
    public IPsiModule PsiModule { get; }
    public OneToSetMap`2<IPsiSourceFile, MinimalApiDeclaration> Declarations { get; }
    public MinimalApiDeclarationsChange(IPsiModule psiModule, OneToSetMap`2<IPsiSourceFile, MinimalApiDeclaration> declarations);
    [CompilerGeneratedAttribute]
public IPsiModule get_PsiModule();
    [CompilerGeneratedAttribute]
public OneToSetMap`2<IPsiSourceFile, MinimalApiDeclaration> get_Declarations();
}
internal class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.Declarations.MinimalApiDeclarationsPerModuleRepository : object {
    private OneToSetMap`2<IPsiSourceFile, MinimalApiDeclaration> myDeclarationsPerFile;
    public void ApplyChange(MinimalApiDeclarationsChange change);
    public ICollection`1<MinimalApiDeclaration> GetDeclarations(IPsiSourceFile file);
    public ICollection`1<MinimalApiDeclaration> GetDeclarations();
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.Declarations.MinimalApiDeclarationsProvider : SourceAndModulesChangeConsumer {
    private Lifetime myLifetime;
    private ISolution mySolution;
    private IPsiServices myPsiServices;
    private ChangeManager myChangeManager;
    private IShellLocks myShellLocks;
    private MinimalApisSourcesProvider myMinimalApisSourcesProvider;
    private ILanguageManager myLanguageManager;
    private ConcurrentDictionary`2<IPsiModule, MinimalApiDeclarationsPerModuleRepository> myDeclarations;
    private AsyncItemsProcessor`1<IInvalidationScope> myAsyncItemsProcessor;
    private ILogger myLogger;
    private HashSet`1<IModule> myModulesToInspect;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsUpToDate>k__BackingField;
    public IProperty`1<bool> IsUpToDate { get; }
    public string Name { get; }
    protected int FilesPerModuleCountThreshold { get; }
    public MinimalApiDeclarationsProvider(ISolution solution, IPsiServices psiServices, ChangeManager changeManager, SolutionDocumentChangeProvider solutionDocumentChangeProvider, IPsiModules psiModules, IShellLocks shellLocks, MinimalApisSourcesProvider minimalApisSourcesProvider, AspNetCoreRoutingAssembliesPresenceChecker routingAssembliesPresenceChecker, AsyncCommitService asyncCommitService, SynchronizationPoints synchronizationPoints, SuspendHardOperationsManager suspendHardOperationsManager, EndpointsSolutionLoadBarrier endpointsSolutionLoadBarrier, ILanguageManager languageManager);
    public static MinimalApiDeclarationsProvider GetInstance(IPsiModule context);
    private void InvalidateScope(IInvalidationScope invalidationScope);
    private void ProcessScope(IInvalidationScope invalidationScope);
    private MinimalApiDeclarationsChange BuildChange(IPsiModule psiModule, MinimalApiDeclarationsPerModuleRepository repository, IInvalidationScope invalidationScope, IReadOnlyCollection`1<MinimalApiSource> sources);
    private MinimalApiDeclarationsChange BuildChange(IPsiModule psiModule, ICollection`1<MinimalApiDeclaration> oldDeclarations, ICollection`1<MinimalApiDeclaration> newDeclarations);
    private IList`1<MinimalApiDeclaration> CollectDeclarations(IReadOnlyCollection`1<MinimalApiSource> sources, Dictionary`2<PsiLanguageType, IPsiSourceFile[]> filesPerLanguage);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsUpToDate();
    public sealed virtual string get_Name();
    public static MinimalApiDeclarationsProvider GetInstance(ITreeNode context);
    protected virtual HashSet`1<IPsiModule> GetCalculatedModules();
    protected virtual void InvalidateScopes(IEnumerable`1<IInvalidationScope> scopes);
    protected virtual void ProcessRemovedModules(HashSet`1<IPsiModule> removedModules);
    private MinimalApiDeclarationsPerModuleRepository GetOrCreateDeclarationsPerModuleRepository(IPsiModule psiModule);
    protected virtual void ProcessCustomChanges(IChangeMap changeMap, HashSet`1& changedModules, HashSet`1& removedModules, HashSet`1& modifiedFiles, HashSet`1& removedFiles);
    protected virtual int get_FilesPerModuleCountThreshold();
    public IReadOnlyCollection`1<MinimalApiDeclaration> GetAllDeclarations();
    public IReadOnlyCollection`1<MinimalApiDeclaration> GetDeclarations(IPsiModule psiModule);
    public IReadOnlyCollection`1<MinimalApiDeclaration> GetDeclarations(IPsiModule psiModule, IPsiSourceFile psiSourceFile);
    public IReadOnlyCollection`1<MinimalApiDeclaration> GetDeclarations(IPsiSourceFile psiSourceFile);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_0();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.Declarations.MinimalApiDeclarationUtil : object {
    [PureAttribute]
[CanBeNullAttribute]
public static MinimalApiDeclaration TryGetDeclaration(IRouteTemplateTreeNode templateNode);
    [ExtensionAttribute]
public static IParametersOwner UnwrapHandler(MinimalApiDeclaration minimalApiDeclaration);
}
public static class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.Declarations.MinimalApiGroupDeclarationUtil : object {
    [PureAttribute]
[CanBeNullAttribute]
public static MinimalApiGroupDeclaration TryGetDeclaration(IRouteTemplateTreeNode templateNode);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.GroupsDeclarations.CSharpMinimalApiGroupDeclarationsSearcher : object {
    private SearchDomainFactory mySearchDomainFactory;
    public CSharpMinimalApiGroupDeclarationsSearcher(SearchDomainFactory searchDomainFactory);
    public sealed virtual MinimalApiGroupDeclaration[] FindDeclarations(IReadOnlyCollection`1<MinimalApiGroupSource> sources, IPsiSourceFile[] sourceFiles);
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.GroupsDeclarations.IMinimalApiGroupDeclarationsSearcher {
    public abstract virtual MinimalApiGroupDeclaration[] FindDeclarations(IReadOnlyCollection`1<MinimalApiGroupSource> sources, IPsiSourceFile[] sourceFiles);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.GroupsDeclarations.MinimalApiGroupDeclaration : MinimalApiDeclarationBase {
    private MinimalApiGroupDeclaration(IInvocationExpression declaration);
    public static MinimalApiGroupDeclaration Create(IInvocationExpression declaration);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.GroupsDeclarations.MinimalApiGroupDeclarationsChange : object {
    [CompilerGeneratedAttribute]
private IPsiModule <PsiModule>k__BackingField;
    [CompilerGeneratedAttribute]
private OneToSetMap`2<IPsiSourceFile, MinimalApiGroupDeclaration> <Declarations>k__BackingField;
    public IPsiModule PsiModule { get; }
    public OneToSetMap`2<IPsiSourceFile, MinimalApiGroupDeclaration> Declarations { get; }
    public MinimalApiGroupDeclarationsChange(IPsiModule psiModule, OneToSetMap`2<IPsiSourceFile, MinimalApiGroupDeclaration> declarations);
    [CompilerGeneratedAttribute]
public IPsiModule get_PsiModule();
    [CompilerGeneratedAttribute]
public OneToSetMap`2<IPsiSourceFile, MinimalApiGroupDeclaration> get_Declarations();
}
internal class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.GroupsDeclarations.MinimalApiGroupDeclarationsPerModuleRepository : object {
    private OneToSetMap`2<IPsiSourceFile, MinimalApiGroupDeclaration> myDeclarationsPerFile;
    public void ApplyChange(MinimalApiGroupDeclarationsChange change);
    public ICollection`1<MinimalApiGroupDeclaration> GetDeclarations(IPsiSourceFile file);
    public ICollection`1<MinimalApiGroupDeclaration> GetDeclarations();
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.GroupsDeclarations.MinimalApiGroupDeclarationsProvider : SourceAndModulesChangeConsumer {
    private Lifetime myLifetime;
    private ISolution mySolution;
    private IPsiServices myPsiServices;
    private ChangeManager myChangeManager;
    private IShellLocks myShellLocks;
    private MinimalApiGroupsSourcesProvider myMinimalApiGroupsSourcesProvider;
    private ILanguageManager myLanguageManager;
    private ConcurrentDictionary`2<IPsiModule, MinimalApiGroupDeclarationsPerModuleRepository> myDeclarations;
    private AsyncItemsProcessor`1<IInvalidationScope> myAsyncItemsProcessor;
    private ILogger myLogger;
    private HashSet`1<IModule> myModulesToInspect;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsUpToDate>k__BackingField;
    public IProperty`1<bool> IsUpToDate { get; }
    public string Name { get; }
    protected int FilesPerModuleCountThreshold { get; }
    public MinimalApiGroupDeclarationsProvider(ISolution solution, IPsiServices psiServices, ChangeManager changeManager, SolutionDocumentChangeProvider solutionDocumentChangeProvider, IPsiModules psiModules, IShellLocks shellLocks, MinimalApiGroupsSourcesProvider minimalApiGroupsSourcesProvider, AspNetCoreRoutingAssembliesPresenceChecker routingAssembliesPresenceChecker, AsyncCommitService asyncCommitService, SynchronizationPoints synchronizationPoints, SuspendHardOperationsManager suspendHardOperationsManager, EndpointsSolutionLoadBarrier endpointsSolutionLoadBarrier, ILanguageManager languageManager);
    public static MinimalApiGroupDeclarationsProvider GetInstance(IPsiModule context);
    private void InvalidateScope(IInvalidationScope invalidationScope);
    private void ProcessScope(IInvalidationScope invalidationScope);
    private MinimalApiGroupDeclarationsChange BuildChange(IPsiModule psiModule, MinimalApiGroupDeclarationsPerModuleRepository repository, IInvalidationScope invalidationScope, IReadOnlyCollection`1<MinimalApiGroupSource> sources);
    private MinimalApiGroupDeclarationsChange BuildChange(IPsiModule psiModule, ICollection`1<MinimalApiGroupDeclaration> oldDeclarations, ICollection`1<MinimalApiGroupDeclaration> newDeclarations);
    private IList`1<MinimalApiGroupDeclaration> CollectDeclarations(IReadOnlyCollection`1<MinimalApiGroupSource> sources, Dictionary`2<PsiLanguageType, IPsiSourceFile[]> filesPerLanguage);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsUpToDate();
    public sealed virtual string get_Name();
    public static MinimalApiGroupDeclarationsProvider GetInstance(ITreeNode context);
    protected virtual HashSet`1<IPsiModule> GetCalculatedModules();
    protected virtual void InvalidateScopes(IEnumerable`1<IInvalidationScope> scopes);
    protected virtual void ProcessRemovedModules(HashSet`1<IPsiModule> removedModules);
    private MinimalApiGroupDeclarationsPerModuleRepository GetOrCreateDeclarationsPerModuleRepository(IPsiModule psiModule);
    protected virtual void ProcessCustomChanges(IChangeMap changeMap, HashSet`1& changedModules, HashSet`1& removedModules, HashSet`1& modifiedFiles, HashSet`1& removedFiles);
    protected virtual int get_FilesPerModuleCountThreshold();
    public IReadOnlyCollection`1<MinimalApiGroupDeclaration> GetDeclarations(IPsiModule psiModule);
    public IReadOnlyCollection`1<MinimalApiGroupDeclaration> GetDeclarations(IPsiModule psiModule, IPsiSourceFile psiSourceFile);
    public IReadOnlyCollection`1<MinimalApiGroupDeclaration> GetDeclarations(IPsiSourceFile psiSourceFile);
    public IReadOnlyCollection`1<MinimalApiGroupDeclaration> FindParentGroups(IMinimalApiDeclaration declaration);
    private void CalcGroups(ICSharpExpression expression, List`1<MinimalApiGroupDeclaration> groups, IType groupBuilderType, IPsiSourceFile psiSourceFile);
    public MinimalApiGroupDeclaration FindDeclaration(IPsiSourceFile psiSourceFile, IVariableDeclaration variableDeclaration);
    public MinimalApiGroupDeclaration FindDeclaration(IPsiSourceFile psiSourceFile, DocumentRange range);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_0();
}
[CodeAnnotationProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.GroupsSources.AspMinimalApiGroupAnnotationProvider : SimpleCodeAnnotationProvider {
}
[PsiSharedComponentAttribute]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.GroupsSources.MinimalApiGroupDeclarationAttributeWatcher : object {
    public static IClrTypeName MinimalApiGroupDeclarationAttributeClrTypeName;
    private static IClrTypeName[] ourNamesToWatch;
    public IEnumerable`1<IClrTypeName> AttributeClrNamesToWatch { get; }
    private static MinimalApiGroupDeclarationAttributeWatcher();
    public sealed virtual IEnumerable`1<IClrTypeName> get_AttributeClrNamesToWatch();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.GroupsSources.MinimalApiGroupSource : object {
    [CompilerGeneratedAttribute]
private IMethod <Method>k__BackingField;
    public IMethod Method { get; }
    public MinimalApiGroupSource(IMethod method);
    [CompilerGeneratedAttribute]
public IMethod get_Method();
    protected bool Equals(MinimalApiGroupSource other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.GroupsSources.MinimalApiGroupsSourcesChange : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IPsiModule> <ChangedModules>k__BackingField;
    public IReadOnlyCollection`1<IPsiModule> ChangedModules { get; }
    public MinimalApiGroupsSourcesChange(IReadOnlyCollection`1<IPsiModule> changedModules);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<IPsiModule> get_ChangedModules();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.GroupsSources.MinimalApiGroupsSourcesChangesDispatcher : DebouncingChangeDispatcherBase`2<MinimalApiGroupsSourcesChange, IPsiModule> {
    public string Name { get; }
    public MinimalApiGroupsSourcesChangesDispatcher(Lifetime lifetime, IChangeProvider changeProvider, ChangeManager changeManager, IShellLocks shellLocks, SynchronizationPoints synchronizationPoints);
    protected virtual MinimalApiGroupsSourcesChange BuildChange(IReadOnlyCollection`1<IPsiModule> changeDatas);
    public virtual string get_Name();
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.GroupsSources.MinimalApiGroupsSourcesProvider : object {
    private ISolution mySolution;
    private ISymbolCache mySymbolCache;
    private ChangeManager myChangeManager;
    private ConcurrentDictionary`2<IPsiModule, HashSet`1<MinimalApiGroupSource>> mySources;
    private AsyncItemsProcessor`1<IPsiModule> myAsyncItemsProcessor;
    private AspMinimalApiGroupAnnotationProvider myAnnotationProvider;
    private ILogger myLogger;
    private MinimalApiGroupsSourcesChangesDispatcher myChangesDispatcher;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsUpToDate>k__BackingField;
    public IProperty`1<bool> IsUpToDate { get; }
    public string Name { get; }
    public MinimalApiGroupsSourcesProvider(ISolution solution, ISymbolCache symbolCache, ChangeManager changeManager, IPsiModules psiModules, IShellLocks shellLocks, CodeAnnotationsCache codeAnnotationsCache, SolutionDocumentChangeProvider solutionDocumentChangeProvider, IPsiServices psiServices, SuspendHardOperationsManager suspendHardOperationsManager, SynchronizationPoints synchronizationPoints);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsUpToDate();
    public sealed virtual string get_Name();
    private void ProcessModule(IPsiModule module);
    public IReadOnlyCollection`1<MinimalApiGroupSource> GetSources(IPsiModule psiModule);
    private HashSet`1<MinimalApiGroupSource> BuildSources(IPsiModule psiModule, IReadOnlyCollection`1<FullTypeMemberName> fullTypeMemberNames);
    public sealed virtual object Execute(IChangeMap changeMap);
    private void InvalidateModules(IReadOnlyCollection`1<IPsiModule> modules);
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.IAspNetMinimalApiEndpoint {
    [NotNullAttribute]
public IMinimalApiDeclaration Declaration { get; }
    [CanBeNullAttribute]
public IParametersOwner Handler { get; }
    public abstract virtual IMinimalApiDeclaration get_Declaration();
    public abstract virtual IParametersOwner get_Handler();
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.IMinimalApiDeclaration {
    [NotNullAttribute]
public IPsiSourceFile PsiSourceFile { get; }
    [CanBeNullAttribute]
public IInvocationExpression DeclarationNode { get; }
    public abstract virtual IPsiSourceFile get_PsiSourceFile();
    public abstract virtual IInvocationExpression get_DeclarationNode();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.ImplicitDeclarations.CSharpMinimalApiImplicitDeclarationsSearcher : object {
    private SearchDomainFactory mySearchDomainFactory;
    public CSharpMinimalApiImplicitDeclarationsSearcher(SearchDomainFactory searchDomainFactory);
    public sealed virtual MinimalApiImplicitDeclaration[] FindDeclarations(IReadOnlyCollection`1<MinimalApiImplicitDeclarationSource> sources, IPsiSourceFile[] sourceFiles);
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.ImplicitDeclarations.IMinimalApiImplicitDeclarationsSearcher {
    public abstract virtual MinimalApiImplicitDeclaration[] FindDeclarations(IReadOnlyCollection`1<MinimalApiImplicitDeclarationSource> sources, IPsiSourceFile[] sourceFiles);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.ImplicitDeclarations.ImplicitEndpointQueryParameter : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaredElement <DeclaredElement>k__BackingField;
    public string Name { get; }
    public IDeclaredElement DeclaredElement { get; }
    public Nullable`1<DocumentRange> NavigationRange { get; }
    public ImplicitEndpointQueryParameter(string name, IDeclaredElement declaredElement);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public IDeclaredElement get_DeclaredElement();
    public sealed virtual Nullable`1<DocumentRange> get_NavigationRange();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.ImplicitDeclarations.MinimalApiImplicitDeclaration : object {
    private ITreeNodePointer`1<IInvocationExpression> myTreeElementPointer;
    [CompilerGeneratedAttribute]
private IPsiSourceFile <PsiSourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private IMethod <DeclaringMethod>k__BackingField;
    public IPsiSourceFile PsiSourceFile { get; public set; }
    public IInvocationExpression DeclarationNode { get; }
    public IMethod DeclaringMethod { get; public set; }
    public MinimalApiImplicitDeclaration(IInvocationExpression invocationExpression);
    [CompilerGeneratedAttribute]
public sealed virtual IPsiSourceFile get_PsiSourceFile();
    [CompilerGeneratedAttribute]
public void set_PsiSourceFile(IPsiSourceFile value);
    public sealed virtual IInvocationExpression get_DeclarationNode();
    [CompilerGeneratedAttribute]
public IMethod get_DeclaringMethod();
    [CompilerGeneratedAttribute]
public void set_DeclaringMethod(IMethod value);
    public static MinimalApiImplicitDeclaration Create(IInvocationExpression invocationExpression);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.ImplicitDeclarations.MinimalApiImplicitDeclarationsChange : object {
    [CompilerGeneratedAttribute]
private IPsiModule <PsiModule>k__BackingField;
    [CompilerGeneratedAttribute]
private OneToSetMap`2<IPsiSourceFile, MinimalApiImplicitDeclaration> <Declarations>k__BackingField;
    public IPsiModule PsiModule { get; }
    public OneToSetMap`2<IPsiSourceFile, MinimalApiImplicitDeclaration> Declarations { get; }
    public MinimalApiImplicitDeclarationsChange(IPsiModule psiModule, OneToSetMap`2<IPsiSourceFile, MinimalApiImplicitDeclaration> declarations);
    [CompilerGeneratedAttribute]
public IPsiModule get_PsiModule();
    [CompilerGeneratedAttribute]
public OneToSetMap`2<IPsiSourceFile, MinimalApiImplicitDeclaration> get_Declarations();
}
internal class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.ImplicitDeclarations.MinimalApiImplicitDeclarationsPerModuleRepository : object {
    private OneToSetMap`2<IPsiSourceFile, MinimalApiImplicitDeclaration> myDeclarationsPerFile;
    public void ApplyChange(MinimalApiImplicitDeclarationsChange change);
    public ICollection`1<MinimalApiImplicitDeclaration> GetDeclarations(IPsiSourceFile file);
    public ICollection`1<MinimalApiImplicitDeclaration> GetDeclarations();
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.ImplicitDeclarations.MinimalApiImplicitDeclarationsProvider : SourceAndModulesChangeConsumer {
    private Lifetime myLifetime;
    private ISolution mySolution;
    private IPsiServices myPsiServices;
    private ChangeManager myChangeManager;
    private IShellLocks myShellLocks;
    private MinimalApiImplicitDeclarationSourcesProvider myMinimalApiImplicitDeclarationSourcesProvider;
    private ILanguageManager myLanguageManager;
    private ConcurrentDictionary`2<IPsiModule, MinimalApiImplicitDeclarationsPerModuleRepository> myDeclarations;
    private AsyncItemsProcessor`1<IInvalidationScope> myAsyncItemsProcessor;
    private ILogger myLogger;
    private HashSet`1<IModule> myModulesToInspect;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsUpToDate>k__BackingField;
    public IProperty`1<bool> IsUpToDate { get; }
    public string Name { get; }
    protected int FilesPerModuleCountThreshold { get; }
    public MinimalApiImplicitDeclarationsProvider(Lifetime lifetime, ISolution solution, IPsiServices psiServices, ChangeManager changeManager, SolutionDocumentChangeProvider solutionDocumentChangeProvider, IPsiModules psiModules, IShellLocks shellLocks, MinimalApiImplicitDeclarationSourcesProvider minimalApiImplicitDeclarationSourcesProvider, AspNetCoreRoutingAssembliesPresenceChecker routingAssembliesPresenceChecker, AsyncCommitService asyncCommitService, SynchronizationPoints synchronizationPoints, SuspendHardOperationsManager suspendHardOperationsManager, EndpointsSolutionLoadBarrier endpointsSolutionLoadBarrier, ILanguageManager languageManager);
    public static MinimalApiImplicitDeclarationsProvider GetInstance(IPsiModule context);
    private void InvalidateScope(IInvalidationScope invalidationScope);
    private void ProcessScope(IInvalidationScope invalidationScope);
    private MinimalApiImplicitDeclarationsChange BuildChange(IPsiModule psiModule, MinimalApiImplicitDeclarationsPerModuleRepository repository, IInvalidationScope invalidationScope, IReadOnlyCollection`1<MinimalApiImplicitDeclarationSource> sources);
    private MinimalApiImplicitDeclarationsChange BuildChange(IPsiModule psiModule, ICollection`1<MinimalApiImplicitDeclaration> oldDeclarations, ICollection`1<MinimalApiImplicitDeclaration> newDeclarations);
    private IList`1<MinimalApiImplicitDeclaration> CollectDeclarations(IReadOnlyCollection`1<MinimalApiImplicitDeclarationSource> sources, Dictionary`2<PsiLanguageType, IPsiSourceFile[]> filesPerLanguage);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsUpToDate();
    public sealed virtual string get_Name();
    public static MinimalApiImplicitDeclarationsProvider GetInstance(ITreeNode context);
    protected virtual HashSet`1<IPsiModule> GetCalculatedModules();
    protected virtual void InvalidateScopes(IEnumerable`1<IInvalidationScope> scopes);
    protected virtual void ProcessRemovedModules(HashSet`1<IPsiModule> removedModules);
    private MinimalApiImplicitDeclarationsPerModuleRepository GetOrCreateDeclarationsPerModuleRepository(IPsiModule psiModule);
    protected virtual void ProcessCustomChanges(IChangeMap changeMap, HashSet`1& changedModules, HashSet`1& removedModules, HashSet`1& modifiedFiles, HashSet`1& removedFiles);
    protected virtual int get_FilesPerModuleCountThreshold();
    public IReadOnlyCollection`1<MinimalApiImplicitDeclaration> GetAllDeclarations();
    public IReadOnlyCollection`1<MinimalApiImplicitDeclaration> GetDeclarations(IPsiModule psiModule);
    public IReadOnlyCollection`1<MinimalApiImplicitDeclaration> GetDeclarations(IPsiModule psiModule, IPsiSourceFile psiSourceFile);
    public IReadOnlyCollection`1<MinimalApiImplicitDeclaration> GetDeclarations(IPsiSourceFile psiSourceFile);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_0();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.ImplicitDeclarations.MinimalApiImplicitEndpointDescription : object {
    [CompilerGeneratedAttribute]
private HttpVerb <HttpVerb>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RouteTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitEndpointQueryParameter[] <QueryParameters>k__BackingField;
    [NotNullAttribute]
public HttpVerb HttpVerb { get; }
    [NotNullAttribute]
public string RouteTemplate { get; }
    [NotNullAttribute]
public ImplicitEndpointQueryParameter[] QueryParameters { get; }
    public MinimalApiImplicitEndpointDescription(IAttributeInstance attributeInstance, IDeclaredElement declaredElement);
    [CompilerGeneratedAttribute]
public HttpVerb get_HttpVerb();
    [CompilerGeneratedAttribute]
public string get_RouteTemplate();
    [CompilerGeneratedAttribute]
public ImplicitEndpointQueryParameter[] get_QueryParameters();
}
[CodeAnnotationProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.ImplicitDeclarations.Sources.AspMinimalApiImplicitDeclarationAnnotationProvider : SimpleCodeAnnotationProvider {
}
[PsiSharedComponentAttribute]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.ImplicitDeclarations.Sources.MinimalApiImplicitDeclarationAttributeWatcher : object {
    public static IClrTypeName MinimalApiImplicitDeclarationAttributeClrTypeName;
    private static IClrTypeName[] ourNamesToWatch;
    public IEnumerable`1<IClrTypeName> AttributeClrNamesToWatch { get; }
    private static MinimalApiImplicitDeclarationAttributeWatcher();
    public sealed virtual IEnumerable`1<IClrTypeName> get_AttributeClrNamesToWatch();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.ImplicitDeclarations.Sources.MinimalApiImplicitDeclarationSource : object {
    [CompilerGeneratedAttribute]
private IMethod <Method>k__BackingField;
    public IMethod Method { get; }
    public MinimalApiImplicitDeclarationSource(IMethod method);
    [CompilerGeneratedAttribute]
public IMethod get_Method();
    protected bool Equals(MinimalApiImplicitDeclarationSource other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.ImplicitDeclarations.Sources.MinimalApiImplicitDeclarationSourcesChange : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IPsiModule> <ChangedModules>k__BackingField;
    public IReadOnlyCollection`1<IPsiModule> ChangedModules { get; }
    public MinimalApiImplicitDeclarationSourcesChange(IReadOnlyCollection`1<IPsiModule> changedModules);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<IPsiModule> get_ChangedModules();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.ImplicitDeclarations.Sources.MinimalApiImplicitDeclarationSourcesChangesDispatcher : DebouncingChangeDispatcherBase`2<MinimalApiImplicitDeclarationSourcesChange, IPsiModule> {
    public string Name { get; }
    public MinimalApiImplicitDeclarationSourcesChangesDispatcher(Lifetime lifetime, IChangeProvider changeProvider, ChangeManager changeManager, IShellLocks shellLocks, SynchronizationPoints synchronizationPoints);
    protected virtual MinimalApiImplicitDeclarationSourcesChange BuildChange(IReadOnlyCollection`1<IPsiModule> changeDatas);
    public virtual string get_Name();
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.ImplicitDeclarations.Sources.MinimalApiImplicitDeclarationSourcesProvider : object {
    private ISolution mySolution;
    private ISymbolCache mySymbolCache;
    private ChangeManager myChangeManager;
    private ConcurrentDictionary`2<IPsiModule, HashSet`1<MinimalApiImplicitDeclarationSource>> mySources;
    private AsyncItemsProcessor`1<IPsiModule> myAsyncItemsProcessor;
    private AspMinimalApiImplicitDeclarationAnnotationProvider myAnnotationProvider;
    private ILogger myLogger;
    private MinimalApiImplicitDeclarationSourcesChangesDispatcher myChangesDispatcher;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsUpToDate>k__BackingField;
    public IProperty`1<bool> IsUpToDate { get; }
    public string Name { get; }
    public MinimalApiImplicitDeclarationSourcesProvider(Lifetime lifetime, ISolution solution, ISymbolCache symbolCache, ChangeManager changeManager, IPsiModules psiModules, IShellLocks shellLocks, CodeAnnotationsCache codeAnnotationsCache, SolutionDocumentChangeProvider solutionDocumentChangeProvider, IPsiServices psiServices, SuspendHardOperationsManager suspendHardOperationsManager, SynchronizationPoints synchronizationPoints);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsUpToDate();
    public sealed virtual string get_Name();
    private void ProcessModule(IPsiModule module);
    public IReadOnlyCollection`1<MinimalApiImplicitDeclarationSource> GetSources(IPsiModule psiModule);
    private HashSet`1<MinimalApiImplicitDeclarationSource> BuildSources(IPsiModule psiModule, IReadOnlyCollection`1<FullTypeMemberName> fullTypeMemberNames);
    public sealed virtual object Execute(IChangeMap changeMap);
    private void InvalidateModules(IReadOnlyCollection`1<IPsiModule> modules);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.MinimalApiEndpointsRepository : object {
    private AspNetHttpEndpointsTreeNode myEndpointsTreeRoot;
    private OneToSetMap`2<IRouteTemplateProvider, IAspNetMinimalApiEndpoint> myProviderToEndpoints;
    private OneToSetMap`2<IPsiSourceFile, IAspNetMinimalApiEndpoint> myFileToEndpoints;
    public MinimalApiEndpointsRepository(IPsiModule psiModule);
    public void AddEndpoint(IAspNetMinimalApiEndpoint endpoint);
    public AspNetHttpEndpointsTreeNode FindTreeNode(IAspNetMinimalApiEndpoint endpoint);
    public void RemoveEndpoints(IPsiSourceFile psiSourceFile);
    public AspNetHttpEndpointsTreeNode GetEndpointsTreeRoot();
    public IAspNetMinimalApiEndpoint[] FindEndpoints(IRouteTemplateProvider routeTemplateProvider);
    public IReadOnlyCollection`1<IAspNetMinimalApiEndpoint> FindEndpoints(IParametersOwner parametersOwner);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.MinimalApiImplicitEndpointRouteTemplateProvider : object {
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiModule <PsiModule>k__BackingField;
    [CompilerGeneratedAttribute]
private IMethod <DeclaringMethod>k__BackingField;
    public string Template { get; }
    public IPsiModule PsiModule { get; }
    public IMethod DeclaringMethod { get; }
    public RouteTemplateSource TemplateSource { get; }
    public MinimalApiImplicitEndpointRouteTemplateProvider(IPsiModule psiModule, IMethod declaringMethod, string template);
    public sealed virtual int CompareTo(IRouteTemplateProvider other);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Template();
    [CompilerGeneratedAttribute]
public sealed virtual IPsiModule get_PsiModule();
    [CompilerGeneratedAttribute]
public IMethod get_DeclaringMethod();
    public sealed virtual RouteTemplateSource get_TemplateSource();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.MinimalApiRouteTemplateProvider : object {
    private MinimalApiDeclarationBase myDeclaration;
    public string Template { get; }
    public IPsiModule PsiModule { get; }
    public RouteTemplateSource TemplateSource { get; }
    public IEnumerable`1<IRouteTemplateAccessor> Accessors { get; }
    public MinimalApiRouteTemplateProvider(MinimalApiDeclarationBase declaration);
    public sealed virtual int CompareTo(IRouteTemplateProvider other);
    public sealed virtual string get_Template();
    public sealed virtual IPsiModule get_PsiModule();
    public sealed virtual RouteTemplateSource get_TemplateSource();
    public sealed virtual IEnumerable`1<IRouteTemplateAccessor> get_Accessors();
    public sealed virtual IReadOnlyCollection`1<DocumentRange> AppendSegmentToTemplate(string segment);
    public sealed virtual void RemoveSegmentsFromPrefix(int segmentsCount);
    public sealed virtual IReadOnlyCollection`1<IRouteParameterConstraintTreeNode> AddConstraintToParameter(string parameterName, RouteParameterConstraint constraint);
    protected bool Equals(MinimalApiRouteTemplateProvider other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.MinimalApisEndpointsProvider : object {
    private Lifetime myLifetime;
    private MinimalApiDeclarationsProvider myMinimalApiDeclarationsProvider;
    private MinimalApiGroupDeclarationsProvider myMinimalApiGroupDeclarationsProvider;
    private MinimalApiImplicitDeclarationsProvider myMinimalApiImplicitDeclarationsProvider;
    private ChangeManager myChangeManager;
    private IPsiServices myPsiServices;
    private ILogger myLogger;
    private AsyncItemsProcessor`1<InvalidationScope> myAsyncItemsProcessor;
    private ConcurrentDictionary`2<IPsiModule, MinimalApiEndpointsRepository> myEndpointsPerModuleRepositories;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsUpToDate>k__BackingField;
    public string Name { get; }
    public IProperty`1<bool> IsUpToDate { get; }
    public MinimalApisEndpointsProvider(ISolution solution, Lifetime lifetime, MinimalApiDeclarationsProvider minimalApiDeclarationsProvider, MinimalApiGroupDeclarationsProvider minimalApiGroupDeclarationsProvider, MinimalApiImplicitDeclarationsProvider minimalApiImplicitDeclarationsProvider, ChangeManager changeManager, AsyncCommitService asyncCommitService, SynchronizationPoints synchronizationPoints, IPsiServices psiServices, SuspendHardOperationsManager suspendHardOperationsManager);
    public static MinimalApisEndpointsProvider GetInstance(IPsiModule context);
    private void ProcessScope(InvalidationScope scope);
    private void InvalidateScope(InvalidationScope scope);
    public sealed virtual object Execute(IChangeMap changeMap);
    private MinimalApiEndpointsRepository GetOrCreateEndpointsPerModuleRepository(IPsiModule psiModule);
    public sealed virtual string get_Name();
    public sealed virtual IEndpointsTreeNode GetEndpointsTreeRoot(IPsiModule psiModule);
    private sealed virtual override IReadOnlyCollection`1<IHttpEndpointsTreeNode> JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IHttpEndpointsProvider.GetEndpointsTreeRoots();
    private sealed virtual override IHttpEndpointsTreeNode JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IHttpEndpointsProvider.GetEndpointsTreeRoot(IPsiModule psiModule);
    public sealed virtual IReadOnlyCollection`1<IEndpointsTreeNode> GetEndpointsTreeRoots();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsUpToDate();
    public void Dump();
    public IReadOnlyCollection`1<IAspNetMinimalApiEndpoint> FindEndpoints(IPsiModule psiModule, IParametersOwner parametersOwner);
    public IReadOnlyCollection`1<IAspNetMinimalApiEndpoint> FindEndpoints(IPsiModule psiModule, IRouteTemplateProvider routeTemplateProvider);
    [CompilerGeneratedAttribute]
private void <ProcessScope>b__11_0();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.MinimalApiTemplateAccessor : RouteTemplateAccessorBase {
    private MinimalApiDeclarationBase myDeclaration;
    protected PartiallyKnownString Template { get; }
    public MinimalApiTemplateAccessor(MinimalApiDeclarationBase declaration);
    protected virtual PartiallyKnownString get_Template();
    protected virtual DocumentRange SetTemplateValue(ICSharpExpression expression);
    protected virtual ICSharpExpression GetTemplateNode();
    protected virtual CSharpElementFactory GetElementFactory();
}
[CodeAnnotationProviderAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.Sources.AspMinimalApiDeclarationAnnotationProvider : CodeAnnotationInfoProvider`2<IMethod, IReadOnlyCollection`1<MinimalApiDeclarationAnnotationInfo>> {
    public static string AspMinimalApiDeclarationAttributeShortName;
    public AspMinimalApiDeclarationAnnotationProvider(AttributeInstancesProvider attributeInstancesProvider, CodeAnnotationsConfiguration codeAnnotationsConfiguration);
    private static AspMinimalApiDeclarationAnnotationProvider();
    protected virtual IReadOnlyCollection`1<MinimalApiDeclarationAnnotationInfo> CalculateInfo(IMethod attributesOwner, IEnumerable`1<IAttributeInstance> attributeInstances);
    protected virtual IReadOnlyCollection`1<MinimalApiDeclarationAnnotationInfo> GetDefaultInfo(IMethod attributesOwner);
}
[CodeAnnotationProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.Sources.AspMinimalApiHandlerAnnotationProvider : SimpleCodeAnnotationProvider {
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.Sources.MinimalApiDeclarationAnnotationInfo : object {
    [CompilerGeneratedAttribute]
private HttpVerb <ExactVerb>k__BackingField;
    public HttpVerb ExactVerb { get; }
    public MinimalApiDeclarationAnnotationInfo(string exactVerb);
    [CompilerGeneratedAttribute]
public HttpVerb get_ExactVerb();
}
[PsiSharedComponentAttribute]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.Sources.MinimalApiDeclarationAttributeWatcher : object {
    public static IClrTypeName MinimalApiDeclarationAttributeClrTypeName;
    private static IClrTypeName[] ourNamesToWatch;
    public IEnumerable`1<IClrTypeName> AttributeClrNamesToWatch { get; }
    private static MinimalApiDeclarationAttributeWatcher();
    public sealed virtual IEnumerable`1<IClrTypeName> get_AttributeClrNamesToWatch();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.Sources.MinimalApiSource : object {
    [CompilerGeneratedAttribute]
private IMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpVerb <HttpVerb>k__BackingField;
    public IMethod Method { get; }
    public HttpVerb HttpVerb { get; }
    public MinimalApiSource(IMethod method, HttpVerb httpVerb);
    [CompilerGeneratedAttribute]
public IMethod get_Method();
    [CompilerGeneratedAttribute]
public HttpVerb get_HttpVerb();
    protected bool Equals(MinimalApiSource other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.Sources.MinimalApisSourcesChange : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IPsiModule> <ChangedModules>k__BackingField;
    public IReadOnlyCollection`1<IPsiModule> ChangedModules { get; }
    public MinimalApisSourcesChange(IReadOnlyCollection`1<IPsiModule> changedModules);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<IPsiModule> get_ChangedModules();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.Sources.MinimalApisSourcesChangesDispatcher : DebouncingChangeDispatcherBase`2<MinimalApisSourcesChange, IPsiModule> {
    public string Name { get; }
    public MinimalApisSourcesChangesDispatcher(Lifetime lifetime, IChangeProvider changeProvider, ChangeManager changeManager, IShellLocks shellLocks, SynchronizationPoints synchronizationPoints);
    protected virtual MinimalApisSourcesChange BuildChange(IReadOnlyCollection`1<IPsiModule> changeDatas);
    public virtual string get_Name();
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.AspNetMinimalApis.Sources.MinimalApisSourcesProvider : object {
    private ISolution mySolution;
    private ISymbolCache mySymbolCache;
    private ChangeManager myChangeManager;
    private ConcurrentDictionary`2<IPsiModule, HashSet`1<MinimalApiSource>> mySources;
    private AsyncItemsProcessor`1<IPsiModule> myAsyncItemsProcessor;
    private AspMinimalApiDeclarationAnnotationProvider myAnnotationProvider;
    private ILogger myLogger;
    private MinimalApisSourcesChangesDispatcher myChangesDispatcher;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsUpToDate>k__BackingField;
    public IProperty`1<bool> IsUpToDate { get; }
    public string Name { get; }
    public MinimalApisSourcesProvider(Lifetime lifetime, ISolution solution, ISymbolCache symbolCache, ChangeManager changeManager, IPsiModules psiModules, IShellLocks shellLocks, CodeAnnotationsCache codeAnnotationsCache, SolutionDocumentChangeProvider solutionDocumentChangeProvider, IPsiServices psiServices, SuspendHardOperationsManager suspendHardOperationsManager, SynchronizationPoints synchronizationPoints);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsUpToDate();
    public sealed virtual string get_Name();
    private void ProcessModule(IPsiModule module);
    public IReadOnlyCollection`1<MinimalApiSource> GetSources(IPsiModule psiModule);
    private HashSet`1<MinimalApiSource> BuildSources(IPsiModule psiModule, IReadOnlyCollection`1<FullTypeMemberName> fullTypeMemberNames);
    public sealed virtual object Execute(IChangeMap changeMap);
    private void InvalidateModules(IReadOnlyCollection`1<IPsiModule> modules);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.EndpointsProviderExtensions : object {
    [ExtensionAttribute]
public static IReadOnlyCollection`1<IEndpointsTreeNode> FindMatchedNodes(IEndpointsProvider endpointsProvider, UrlPath urlPath, UrlPathMatchingMode matchingMode);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.EndpointsSolutionLoadBarrier : object {
    [CompilerGeneratedAttribute]
private Property`1<bool> <CanStart>k__BackingField;
    public Property`1<bool> CanStart { get; public set; }
    public EndpointsSolutionLoadBarrier(ISolutionLoadTasksScheduler solutionLoadTasksScheduler);
    [CompilerGeneratedAttribute]
public Property`1<bool> get_CanStart();
    [CompilerGeneratedAttribute]
public void set_CanStart(Property`1<bool> value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.EndpointsTreeChange : object {
    [CompilerGeneratedAttribute]
private string <ProviderName>k__BackingField;
    public string ProviderName { get; }
    public EndpointsTreeChange(string providerName);
    [CompilerGeneratedAttribute]
public string get_ProviderName();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.EndpointsTreeNodeExtensions : object {
    [ExtensionAttribute]
public static string GetFullPath(IEndpointsTreeNode node);
    [ExtensionAttribute]
public static List`1<IEndpoint> GetAllEndpoints(IEndpointsTreeNode endpointsTreeNode);
    private static void CollectEndpoints(IEndpointsTreeNode endpointsTreeNode, List`1<IEndpoint> result);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.ExplicitEndpointQueryParameter : object {
    private IDeclaredElementPointer`1<IParameter> myParameterPointer;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public Nullable`1<DocumentRange> NavigationRange { get; }
    public IParameter Parameter { get; }
    public ExplicitEndpointQueryParameter(string name, IDeclaredElementPointer`1<IParameter> parameterPointer);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual Nullable`1<DocumentRange> get_NavigationRange();
    public IParameter get_Parameter();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.HttpEndpointHelpersUtil : object {
    [ExtensionAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public static IReadOnlyCollection`1<IEndpointQueryParameter> GetQueryParameters(IEndpoint endpoint);
    [ExtensionAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public static IReadOnlyCollection`1<HttpVerb> GetVerbs(IEndpoint endpoint);
    [ExtensionAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public static IReadOnlyCollection`1<IParametersOwner> GetMatchingHandlers(IRouteTemplateProvider routeTemplateProvider);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProperty GetMatchingProperty(IRouteTemplateProvider routeTemplateProvider, string name);
    [ExtensionAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public static IReadOnlyCollection`1<IParametersOwner> GetMatchingHandlersStrongConsistency(IRouteTemplateTreeNode routeTemplateProvider);
    [ExtensionAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public static IReadOnlyCollection`1<IHttpEndpoint> GetEndpointsByHandler(IParametersOwner handler);
    [ExtensionAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public static IReadOnlyCollection`1<IHttpEndpoint> GetEndpointsByRouteProvider(IRouteTemplateProvider routeProvider);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static UrlPath BuildUrlPath(IEndpoint endpoint);
    private static IEnumerable`1<IHttpEndpointHelper> GetAllHelpers(IPsiModule psiModule);
    [CompilerGeneratedAttribute]
internal static int <GetMatchingProperty>g__InheritanceLevelComparator|4_0(ISymbolInfo x, ISymbolInfo y);
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IEndpoint {
    public IPsiModule PsiModule { get; }
    [NotNullAttribute]
public IReadOnlyList`1<IRouteSegment> RouteSegments { get; }
    public abstract virtual IPsiModule get_PsiModule();
    public abstract virtual IReadOnlyList`1<IRouteSegment> get_RouteSegments();
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IEndpointQueryParameter {
    public string Name { get; }
    public Nullable`1<DocumentRange> NavigationRange { get; }
    public abstract virtual string get_Name();
    public abstract virtual Nullable`1<DocumentRange> get_NavigationRange();
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IEndpointsConveyorPart {
    public IProperty`1<bool> IsUpToDate { get; }
    public string Name { get; }
    public abstract virtual IProperty`1<bool> get_IsUpToDate();
    public abstract virtual string get_Name();
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IEndpointsProvider {
    public string Name { get; }
    public IProperty`1<bool> IsUpToDate { get; }
    public abstract virtual string get_Name();
    public abstract virtual IEndpointsTreeNode GetEndpointsTreeRoot(IPsiModule psiModule);
    public abstract virtual IReadOnlyCollection`1<IEndpointsTreeNode> GetEndpointsTreeRoots();
    public abstract virtual IProperty`1<bool> get_IsUpToDate();
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IEndpointsTreeNode {
    [CanBeNullAttribute]
public IRouteSegment LastSegment { get; }
    public IPsiModule PsiModule { get; }
    [CanBeNullAttribute]
public IEndpointsTreeNode Parent { get; }
    public IReadOnlyCollection`1<IEndpointsTreeNode> Children { get; }
    public IReadOnlyCollection`1<IEndpoint> Endpoints { get; }
    public int Depth { get; }
    public abstract virtual IRouteSegment get_LastSegment();
    public abstract virtual IPsiModule get_PsiModule();
    public abstract virtual IEndpointsTreeNode get_Parent();
    public abstract virtual IReadOnlyCollection`1<IEndpointsTreeNode> get_Children();
    public abstract virtual IReadOnlyCollection`1<IEndpoint> get_Endpoints();
    public abstract virtual IEndpointsTreeNode FindNode(IReadOnlyList`1<IRouteSegment> routeSegments);
    public abstract virtual int get_Depth();
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IHttpEndpointHelper {
    [CanBeNullAttribute]
public abstract virtual UrlPath BuildUrlPath(IEndpoint endpoint);
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IReadOnlyCollection`1<IEndpointQueryParameter> GetQueryParameters(IEndpoint endpoint);
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IReadOnlyCollection`1<HttpVerb> GetVerbs(IEndpoint endpoint);
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IReadOnlyCollection`1<IParametersOwner> GetEndpointHandlersByRouteProvider(IRouteTemplateProvider routeTemplateProvider);
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IReadOnlyCollection`1<IParametersOwner> GetEndpointHandlersByRouteProviderStrongConsistency(IRouteTemplateTreeNode treeNode);
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IReadOnlyCollection`1<IHttpEndpoint> GetEndpointsByRouteProvider(IRouteTemplateProvider routeTemplateProvider);
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IReadOnlyCollection`1<IHttpEndpoint> GetEndpointsByHandler(IParametersOwner handler);
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IHttpEndpointsProvider {
    public abstract virtual IHttpEndpointsTreeNode GetEndpointsTreeRoot(IPsiModule psiModule);
    public abstract virtual IReadOnlyCollection`1<IHttpEndpointsTreeNode> GetEndpointsTreeRoots();
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IHttpEndpointsTreeNode {
    [CanBeNullAttribute]
public IHttpEndpointsTreeNode Parent { get; }
    public IReadOnlyCollection`1<IHttpEndpointsTreeNode> Children { get; }
    public IReadOnlyCollection`1<IHttpEndpoint> Endpoints { get; }
    public abstract virtual IHttpEndpointsTreeNode get_Parent();
    public abstract virtual IReadOnlyCollection`1<IHttpEndpointsTreeNode> get_Children();
    public abstract virtual IReadOnlyCollection`1<IHttpEndpoint> get_Endpoints();
}
public interface JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.IRouteSegment {
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.Statistics.EndpointsCollector : SolutionUsagesCollector {
    private MinimalApisEndpointsProvider myMinimalApisEndpointsProvider;
    private MinimalApiDeclarationsProvider myMinimalApiDeclarationsProvider;
    private AspNetHttpEndpointsProvider myAspNetHttpEndpointsProvider;
    private EventLogGroup myGroup;
    private HashSet`1<string> myMinimalApiSourceNames;
    private EventId2`2<string, int> myMinimalApiSourcesEvent;
    private EventId2`2<string, int> myEndpointsCountEvent;
    public EndpointsCollector(FeatureUsageLogger featureUsageLogger, MinimalApisEndpointsProvider minimalApisEndpointsProvider, MinimalApiDeclarationsProvider minimalApiDeclarationsProvider, AspNetHttpEndpointsProvider aspNetHttpEndpointsProvider);
    public virtual EventLogGroup GetGroup();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.Statistics.EndpointsCollector/<GetMetricsAsync>d__9")]
public virtual Task`1<ISet`1<MetricEvent>> GetMetricsAsync(Lifetime lifetime);
    private void ContributeMinimalApiSourcesUsages(HashSet`1<MetricEvent> result);
    private void ContributeEndpointsCount(HashSet`1<MetricEvent> result, IEndpointsProvider endpointsProvider);
    private Task WhenTrueAsync(Lifetime lifetime, IProperty`1<bool> property);
    [CompilerGeneratedAttribute]
private bool <ContributeMinimalApiSourcesUsages>b__10_1(IGrouping`2<string, MinimalApiDeclaration> x);
    [CompilerGeneratedAttribute]
private MetricEvent <ContributeMinimalApiSourcesUsages>b__10_2(IGrouping`2<string, MinimalApiDeclaration> x);
}
public static class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.UrlPathsByRouteTemplateNodeProvider : object {
    public static IReadOnlyCollection`1<UrlPath> GetPathsWithNode(IRouteSegmentTreeNode node);
    [CanBeNullAttribute]
private static UrlPath TryGetMinimalApiRoutePart(IRouteSegmentTreeNode node);
    private static ValueTuple`2<RoutingConvention, AspNetHttpEndpointRoutePart> FindConventionPartEndingAtNode(IRouteSegmentTreeNode node);
    [CanBeNullAttribute]
private static AspNetHttpEndpointRoutePart FindTemplateEndingAtNode(IAttributesOwner attributesOwner, IRouteSegmentTreeNode node);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.Util.AspNetCoreRoutingAssembliesPresenceChecker : RequiredAssembliesWatcher`1<AspNetCoreRoutingPresenceChange> {
    public static HashSet`1<string> RequiredAssemblies;
    public AspNetCoreRoutingAssembliesPresenceChecker(Lifetime lifetime, ISolution solution, IShellLocks shellLocks, ChangeManager changeManager);
    private static AspNetCoreRoutingAssembliesPresenceChecker();
    public virtual AspNetCoreRoutingPresenceChange BuildChange(List`1<IModule> appeared, List`1<IModule> disappeared);
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.Util.AspNetCoreRoutingPresenceChange : ValueType {
    [CompilerGeneratedAttribute]
private IList`1<IModule> <Appeared>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IModule> <Disappeared>k__BackingField;
    public IList`1<IModule> Appeared { get; }
    public IList`1<IModule> Disappeared { get; }
    public AspNetCoreRoutingPresenceChange(List`1<IModule> appeared, List`1<IModule> disappeared);
    [CompilerGeneratedAttribute]
public IList`1<IModule> get_Appeared();
    [CompilerGeneratedAttribute]
public IList`1<IModule> get_Disappeared();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.Util.AsyncItemsProcessorExtensions : object {
    [ExtensionAttribute]
public static AsyncItemsProcessor`1<T> PauseWhenCachesAreNotReady(AsyncItemsProcessor`1<T> processor, Lifetime lifetime, IPsiServices psiServices);
    [ExtensionAttribute]
public static AsyncItemsProcessor`1<T> PauseOnSuspendHardOperations(AsyncItemsProcessor`1<T> processor, SuspendHardOperationsManager suspendHardOperationsManager);
    [ExtensionAttribute]
public static AsyncItemsProcessor`1<T> PauseWhenNotUpToDate(AsyncItemsProcessor`1<T> processor, Lifetime lifetime, IEndpointsConveyorPart conveyorPart);
    [ExtensionAttribute]
public static AsyncItemsProcessor`1<T> PauseUntilSolutionLoaded(AsyncItemsProcessor`1<T> processor, Lifetime lifetime, EndpointsSolutionLoadBarrier endpointsSolutionLoadBarrier);
}
public static class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.Util.AsyncItemsProcessorUtil : object {
    public static AsyncItemsProcessor`1<T> CreateWithProcessingOnCommittedPsi(string name, Lifetime lifetime, ILogger logger, IPsiServices psiServices, AsyncCommitService asyncCommitService, SynchronizationPoints synchronizationPoints, Action`1<T> processItem, Action`1<T> rescheduleItem);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.Util.CommitPsiAndScheduleNextScheduler : object {
    private Lifetime myLifetime;
    private string myName;
    private IAsyncScheduler myNextScheduler;
    private IPsiServices myPsiServices;
    private AsyncCommitService myAsyncCommitService;
    private ILogger myLogger;
    public CommitPsiAndScheduleNextScheduler(Lifetime lifetime, string name, IAsyncScheduler nextScheduler, IPsiServices psiServices, AsyncCommitService asyncCommitService, ILogger logger);
    public sealed virtual void Schedule(Lifetime lifetime, Action action);
    public sealed virtual AsyncSchedulerOnInterruptedBehavior OnInterrupted(int interruptedCount);
}
public abstract class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.Util.DebouncingChangeDispatcherBase`2 : object {
    private Lifetime myLifetime;
    private IChangeProvider myChangeProvider;
    private ChangeManager myChangeManager;
    private IShellLocks myShellLocks;
    private HashSet`1<TChangeData> myBuffer;
    private GroupingEvent myDispatchEvent;
    private object myLockObject;
    private SynchronizationPoint myExecutionSyncPoint;
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Flushed>k__BackingField;
    public IProperty`1<bool> Flushed { get; }
    public IProperty`1<bool> IsUpToDate { get; }
    public string Name { get; }
    protected DebouncingChangeDispatcherBase`2(Lifetime lifetime, IChangeProvider changeProvider, ChangeManager changeManager, IShellLocks shellLocks, SynchronizationPoints synchronizationPoints, int delayMs);
    private void DoDispatch();
    public void ScheduleChangeDispatching(TChangeData[] changeData);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_Flushed();
    protected abstract virtual TChange BuildChange(IReadOnlyCollection`1<TChangeData> changeData);
    public sealed virtual IProperty`1<bool> get_IsUpToDate();
    public abstract virtual string get_Name();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.Util.ReasonsUtil : object {
    [ExtensionAttribute]
public static Reasons`1<T> AddWhenFalse(Reasons`1<T> reasons, Lifetime lifetime, IProperty`1<bool> property, Func`1<T> reason);
    [ExtensionAttribute]
public static Reasons`1<string> AddWhenNotUpToDate(Reasons`1<string> reasons, Lifetime lifetime, IEndpointsConveyorPart conveyorPart);
}
public abstract class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.Util.RequiredAssembliesWatcher`1 : object {
    private IShellLocks myShellLocks;
    private HashSet`1<string> myRequiredAssemblies;
    private Dictionary`2<IModule, int> myReferenceCounters;
    protected RequiredAssembliesWatcher`1(Lifetime lifetime, ISolution solution, IShellLocks shellLocks, ChangeManager changeManager, HashSet`1<string> requiredAssemblies);
    [CanBeNullAttribute]
public abstract virtual TChange BuildChange(List`1<IModule> appeared, List`1<IModule> disappeared);
    public sealed virtual object Execute(IChangeMap changeMap);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.Util.RoutePartDeclarationUtil : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ICSharpArgument GetPatternArgument(IInvocationExpression invocationExpression);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ICSharpArgument GetMinimalApiHandlerArgument(IInvocationExpression invocationExpression);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ICSharpArgument GetVerbsArgument(IInvocationExpression invocationExpression);
    [ExtensionAttribute]
public static IList`1<ICSharpArgument> GetConstraintsArguments(IInvocationExpression invocationExpression);
    [ExtensionAttribute]
public static IList`1<ICSharpArgument> GetDefaultsArguments(IInvocationExpression invocationExpression);
    [ExtensionAttribute]
[CanBeNullAttribute]
private static ICSharpArgument GetArgument(IInvocationExpression invocationExpression);
    private static IList`1<ICSharpArgument> GetArguments(IInvocationExpression invocationExpression);
    [PureAttribute]
private static bool CheckAnnotation(IParameter attributesOwner);
}
public abstract class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.EndpointsProvider.Util.SourceAndModulesChangeConsumer : object {
    private IPsiServices myPsiServices;
    private ChangeManager myChangeManager;
    private IShellLocks myLocks;
    private HashSet`1<ProjectFileType> myAllowedFileTypes;
    private AsyncItemsProcessor`1<IChangeMap> myProcessor;
    private Lifetime myLifetime;
    protected int FilesPerModuleCountThreshold { get; }
    protected SourceAndModulesChangeConsumer(IPsiServices psiServices, ChangeManager changeManager, SolutionDocumentChangeProvider solutionDocumentChangeProvider, IPsiModules psiModules, IShellLocks shellLocks, ProjectFileType[] allowedFileTypes);
    private void ProcessChange(IChangeMap changeMap);
    protected abstract virtual HashSet`1<IPsiModule> GetCalculatedModules();
    protected abstract virtual void InvalidateScopes(IEnumerable`1<IInvalidationScope> scopes);
    protected abstract virtual void ProcessRemovedModules(HashSet`1<IPsiModule> removedModules);
    protected virtual void ProcessCustomChanges(IChangeMap changeMap, HashSet`1& changedModules, HashSet`1& removedModules, HashSet`1& modifiedFiles, HashSet`1& removedFiles);
    private void RecalculateAll();
    public sealed virtual object Execute(IChangeMap changeMap);
    protected abstract virtual int get_FilesPerModuleCountThreshold();
    private IList`1<IInvalidationScope> BuildScopes(HashSet`1<IPsiModule> modulesToRemove, HashSet`1<IPsiModule> modulesToInvalidate, HashSet`1<IPsiSourceFile> modifiedFiles, HashSet`1<IPsiSourceFile> removedFiles);
    private void Add(HashSet`1& set, T item);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.AspRouteTemplates.RouteTemplateLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.MatchingBraces.RouteTemplateMatchingBracesProvider : object {
    public sealed virtual bool IsLeftBracket(TokenNodeType tokenType);
    public sealed virtual bool IsRightBracket(TokenNodeType tokenType);
    public sealed virtual bool Match(TokenNodeType token1, TokenNodeType token2);
    public sealed virtual int Compare(TokenNodeType x, TokenNodeType y);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.RearrangeCode.RearrangeableParameterConstraint : RearrangeableElementSwap`1<IRouteParameterConstraintTreeNode> {
    [NotNullAttribute]
private IRouteParameterConstraintTreeNode myElement;
    public RearrangeableParameterConstraint(IRouteParameterConstraintTreeNode element);
    protected virtual IEnumerable`1<IRouteParameterConstraintTreeNode> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.RearrangeCode.RearrangeableRouteSegment : RearrangeableElementSwap`1<IRouteSegmentTreeNode> {
    [NotNullAttribute]
private IRouteSegmentTreeNode myElement;
    public RearrangeableRouteSegment(IRouteSegmentTreeNode element);
    protected virtual IEnumerable`1<IRouteSegmentTreeNode> GetSiblings();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.SelectEmbracingConstruct.RouteTemplateDotSelection : DotSelection`1<IRouteTemplateFile> {
    public RouteTemplateDotSelection(IRouteTemplateFile fileNode, TreeOffset offset, bool selectBetterToken, bool useCamelHumps);
    protected virtual ISelectedRange GetParentInternal(ITokenNode tokenNode);
    protected virtual ISelectedRange CreateTokenPartSelection(ITokenNode tokenNode, TreeTextRange treeTextRange);
    protected virtual ISelectedRange CreateTreeNodeSelection(ITokenNode tokenNode);
    protected virtual bool IsWordToken(ITokenNode token);
    protected virtual bool IsLiteralToken(ITokenNode token);
    protected virtual bool IsSpaceToken(ITokenNode token);
    protected virtual bool IsNewLineToken(ITokenNode token);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.AspRouteTemplates.RouteTemplateLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.SelectEmbracingConstruct.RouteTemplateSelectEmbracingConstructProvider : object {
    private ISettingsStore mySettingsStore;
    public RouteTemplateSelectEmbracingConstructProvider(ISettingsStore settingsStore);
    public sealed virtual bool IsAvailable(IPsiSourceFile sourceFile);
    public sealed virtual ISelectedRange GetSelectedRange(IPsiSourceFile sourceFile, DocumentRange documentRange);
    public static ISelectedRange ExtendSelection(IRouteTemplateFile file, ITreeNode firstNode, ITreeNode lastNode);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.SelectEmbracingConstruct.RouteTemplateTokenPartSelection : TokenPartSelection`1<IRouteTemplateFile> {
    public ISelectedRange Parent { get; }
    public RouteTemplateTokenPartSelection(IRouteTemplateFile fileNode, TreeTextRange treeTextRange, ITokenNode token);
    public virtual ISelectedRange get_Parent();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.SelectEmbracingConstruct.RouteTemplateTreeNodeSelection : TreeNodeSelection`1<IRouteTemplateFile> {
    public ISelectedRange Parent { get; }
    public RouteTemplateTreeNodeSelection(IRouteTemplateFile fileNode, ITreeNode node);
    public virtual ISelectedRange get_Parent();
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.SelectEmbracingConstruct.RouteTemplateTreeRangeSelection : TreeRangeSelection`1<IRouteTemplateFile> {
    public ISelectedRange Parent { get; }
    public RouteTemplateTreeRangeSelection(IRouteTemplateFile fileNode, ITreeNode first, ITreeNode last);
    public virtual ISelectedRange get_Parent();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.AspRouteTemplates.RouteTemplateLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.StructuralNavigation.RouteTemplateStructuralNavigationManager : object {
    public sealed virtual IStructuralNavigationItem MoveToNext(StructuralNavigationContextBase context);
    public sealed virtual IStructuralNavigationItem MoveToPrev(StructuralNavigationContextBase context);
    private IStructuralNavigationItem GetNextSelection(StructuralNavigationContextBase context);
}
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.StructuralNavigation.RouteTemplateStructuralNavigationVisitor : object {
    private StructuralNavigationContextBase AddStructuralNavigationTreeNode(T node, StructuralNavigationContextBase context);
    public sealed virtual StructuralNavigationContextBase Visit(IRouteSegmentTreeNode segment, StructuralNavigationContextBase context);
    public sealed virtual StructuralNavigationContextBase Visit(IRouteTokenTreeNode substitution, StructuralNavigationContextBase context);
    public sealed virtual StructuralNavigationContextBase Visit(IRouteParameterTreeNode parameter, StructuralNavigationContextBase context);
    public sealed virtual StructuralNavigationContextBase Visit(IRouteParameterNameTreeNode parameterName, StructuralNavigationContextBase context);
    public sealed virtual StructuralNavigationContextBase Visit(IRouteParameterConstraintNameTreeNode parameterConstraintName, StructuralNavigationContextBase context);
    public sealed virtual StructuralNavigationContextBase Visit(IRouteParameterConstraintArgumentTreeNode constraintArgument, StructuralNavigationContextBase context);
    public sealed virtual StructuralNavigationContextBase Visit(IRouteParameterConstraintArgumentsListTreeNode constraintArgumentsList, StructuralNavigationContextBase context);
    public sealed virtual StructuralNavigationContextBase Visit(IRouteParameterDefaultValueContentTreeNode parameterDefaultValueContent, StructuralNavigationContextBase context);
    public sealed virtual StructuralNavigationContextBase Visit(ICatchAllMarkerTreeNode catchAllMarker, StructuralNavigationContextBase context);
    public sealed virtual StructuralNavigationContextBase Visit(IOptionalParameterMarkerTreeNode optionalParameterMarker, StructuralNavigationContextBase context);
    public sealed virtual StructuralNavigationContextBase Visit(IRouteParameterConstraintTreeNode parameterConstraintName, StructuralNavigationContextBase context);
    public sealed virtual StructuralNavigationContextBase Visit(IRouteTokenKeyTreeNode parameterDefaultValueContent, StructuralNavigationContextBase context);
    public sealed virtual StructuralNavigationContextBase Visit(IRouteDelimiterTreeNode delimiter, StructuralNavigationContextBase context);
    public sealed virtual StructuralNavigationContextBase Visit(IRouteTemplateFile file, StructuralNavigationContextBase context);
    public sealed virtual StructuralNavigationContextBase Visit(IStaticTextRoutePartTreeNode staticText, StructuralNavigationContextBase context);
    public sealed virtual StructuralNavigationContextBase Visit(IRouteParameterDefaultValueTreeNode parameterDefaultValue, StructuralNavigationContextBase context);
    public sealed virtual StructuralNavigationContextBase Visit(IRouteTemplateSyntaxErrorElementTreeNode syntaxError, StructuralNavigationContextBase context);
    public sealed virtual StructuralNavigationContextBase VisitToken(RouteTemplateTokenBase token, StructuralNavigationContextBase context);
    public sealed virtual StructuralNavigationContextBase Visit(IRouteParameterConstraintsListTreeNode constraintsList, StructuralNavigationContextBase context);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.StructuralNavigation.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Web.AspRouteTemplates.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Asxx.AsxxLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Web.Asxx.Debugger.AsxxBreakpointsVariantsProvider : object {
    public sealed virtual IReadOnlyList`1<IBreakpoint> GetBreakpointVariants(IProjectFile file, int line, ISolution solution);
    public sealed virtual IEnumerable`1<string> GetSupportedFileExtensions();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Web.Asxx.Debugger.ZoneMarker : object {
}
public class JetBrains.ReSharper.Feature.Services.Web.Caches.CachedInheritors : object {
    private DependencyStore myDependencyStore;
    private ILogger myLogger;
    private IPsiServices myPsiServices;
    [CompilerGeneratedAttribute]
private ITypeElement <BaseTypeElement>k__BackingField;
    private bool myAreInheritorsReady;
    private OneToSetMap`2<string, TypeElementEnvoy> myInheritors;
    private JetHashSet`1<TypeElementEnvoy> myChangedTypeElements;
    [NotNullAttribute]
private DependencySet myDependencySet;
    public ITypeElement BaseTypeElement { get; }
    public CachedInheritors(ITypeElement baseTypeElement, DependencyStore dependencyStore, ILogger logger);
    [CompilerGeneratedAttribute]
public ITypeElement get_BaseTypeElement();
    public void Clear();
    private bool HasInheritor(TypeElementEnvoy typeElementEnvoy);
    private bool AddInheritor(TypeElementEnvoy inheritor);
    private void RemoveInheritor(TypeElementEnvoy inheritor);
    [NotNullAttribute]
private ISet`1<TypeElementEnvoy> GetInheritorsIn(IPsiModule psiModule);
    private bool TryApplyChangedTypeElement(TypeElementEnvoy changedTypeElementEnvoy);
    private int AddInheritors(ITypeElement typeElement);
    private bool TryApplyChangedTypeElements();
    private void GetReady();
    private void EnvoysToClasses(IList`1<IClass> result, IEnumerable`1<TypeElementEnvoy> envoys);
    public void AddChangedTypeElement(ITypeElement typeElement);
    [NotNullAttribute]
public IList`1<IClass> GetAllInheritors();
    [NotNullAttribute]
public IList`1<IClass> GetAllInheritors(IPsiModule psiModule);
    public bool Validate();
    public void DumpRaw(StreamWriter writer);
    public void DumpMaterialized(StreamWriter writer);
    [CompilerGeneratedAttribute]
private ITypeElement <DumpMaterialized>b__26_2(TypeElementEnvoy envoy);
}
public class JetBrains.ReSharper.Feature.Services.Web.Caches.TypeElementEnvoy : object {
    [CompilerGeneratedAttribute]
private string <PsiModulePersistentId>k__BackingField;
    [CompilerGeneratedAttribute]
private IClrTypeName <ClrTypeName>k__BackingField;
    public string PsiModulePersistentId { get; }
    public IClrTypeName ClrTypeName { get; }
    public TypeElementEnvoy(string psiModulePersistentId, IClrTypeName clrTypeName);
    public TypeElementEnvoy(ITypeElement typeElement);
    [CompilerGeneratedAttribute]
public string get_PsiModulePersistentId();
    [CompilerGeneratedAttribute]
public IClrTypeName get_ClrTypeName();
    [CanBeNullAttribute]
public ITypeElement TryGetTypeElement(IPsiModules psiModules, ISymbolCache symbolCache);
    protected bool Equals(TypeElementEnvoy other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.Caches.WebInheritanceCache : object {
    private IShellLocks myShellLocks;
    private DependencyStore myDependencyStore;
    private ILogger myLogger;
    private Dictionary`2<ITypeElement, CachedInheritors> myNewCachedInheritors;
    public WebInheritanceCache(Lifetime lifetime, ChangeManager changeManager, IPsiModules psiModules, SymbolCache symbolCache, IShellLocks shellLocks, DependencyStore dependencyStore, ILogger logger);
    private void SymbolCacheOnOnAfterTypePartsChanged(TypePart obj);
    private sealed virtual override object JetBrains.Application.changes.IChangeProvider.Execute(IChangeMap changeMap);
    private void Clear();
    private CachedInheritors GetOrCreateCachedInheritors(ITypeElement typeElement);
    public IReadOnlyCollection`1<IClass> FindInheritors(ITypeElement typeElement);
    public IReadOnlyCollection`1<IClass> FindInheritors(ITypeElement typeElement, IPsiModule psiModule);
    public bool Validate();
    public void Dump();
    [CompilerGeneratedAttribute]
private CachedInheritors <GetOrCreateCachedInheritors>b__8_0(ITypeElement el);
    [CompilerGeneratedAttribute]
private void <Dump>b__12_0(StreamWriter writer);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Feature.Services.Web.Endpoints.Matching.AspNet.AspNetHttpEndpointsTreeNodeMatcher : object {
    public sealed virtual IReadOnlyCollection`1<EndpointsTreeNodeChildrenMatchResult> GetMatchingChildren(IEndpointsTreeNode node, IIdentifierMatcher identifierMatcher);
    public sealed virtual IReadOnlyCollection`1<EndpointsMatchResult> GetMatchingEndpoints(IEndpointsTreeNode node, IIdentifierMatcher identifierMatcher);
    private EndpointPathPartMatchKind MatchRouteAndUriSegment(AspNetHttpRouteSegment routeSegment, IIdentifierMatcher identifierMatcher);
}
public enum JetBrains.ReSharper.Feature.Services.Web.Endpoints.Matching.EndpointPathPartMatchKind : Enum {
    public int value__;
    public static EndpointPathPartMatchKind None;
    public static EndpointPathPartMatchKind Strict;
    public static EndpointPathPartMatchKind Wildcard;
}
public class JetBrains.ReSharper.Feature.Services.Web.Endpoints.Matching.EndpointsMatchResult : object {
    [CompilerGeneratedAttribute]
private IEndpointsTreeNode <EndpointsTreeNode>k__BackingField;
    [CompilerGeneratedAttribute]
private IEndpoint <Endpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private EndpointPathPartMatchKind <MatchKind>k__BackingField;
    [CompilerGeneratedAttribute]
private MatchingInfo <MatchingInfo>k__BackingField;
    public IEndpointsTreeNode EndpointsTreeNode { get; }
    public IEndpoint Endpoint { get; }
    public EndpointPathPartMatchKind MatchKind { get; }
    public MatchingInfo MatchingInfo { get; }
    public EndpointsMatchResult(IEndpointsTreeNode node, IEndpoint endpoint, EndpointPathPartMatchKind matchKind, IIdentifierMatcher identifierMatcher);
    [CompilerGeneratedAttribute]
public IEndpointsTreeNode get_EndpointsTreeNode();
    [CompilerGeneratedAttribute]
public IEndpoint get_Endpoint();
    [CompilerGeneratedAttribute]
public EndpointPathPartMatchKind get_MatchKind();
    [CompilerGeneratedAttribute]
public MatchingInfo get_MatchingInfo();
    public void Deconstruct(IEndpointsTreeNode& node, IEndpoint& endpoint, EndpointPathPartMatchKind& matchKind, MatchingInfo& matchingInfo);
}
public class JetBrains.ReSharper.Feature.Services.Web.Endpoints.Matching.EndpointsTreeNodeChildrenMatchResult : object {
    [CompilerGeneratedAttribute]
private IEndpointsTreeNode <EndpointsTreeNode>k__BackingField;
    [CompilerGeneratedAttribute]
private EndpointPathPartMatchKind <MatchKind>k__BackingField;
    [CompilerGeneratedAttribute]
private MatchingInfo <MatchingInfo>k__BackingField;
    public IEndpointsTreeNode EndpointsTreeNode { get; }
    public EndpointPathPartMatchKind MatchKind { get; }
    public MatchingInfo MatchingInfo { get; }
    public EndpointsTreeNodeChildrenMatchResult(IEndpointsTreeNode node, EndpointPathPartMatchKind matchKind, IIdentifierMatcher identifierMatcher);
    [CompilerGeneratedAttribute]
public IEndpointsTreeNode get_EndpointsTreeNode();
    [CompilerGeneratedAttribute]
public EndpointPathPartMatchKind get_MatchKind();
    [CompilerGeneratedAttribute]
public MatchingInfo get_MatchingInfo();
    public void Deconstruct(IEndpointsTreeNode& node, EndpointPathPartMatchKind& matchKind, MatchingInfo& matchingInfo);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Web.Endpoints.Matching.EndpointsTreeNodeMatcherHelper : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IReadOnlyCollection`1<EndpointsTreeNodeChildrenMatchResult> GetMatchingChildren(IEndpointsTreeNode node, IIdentifierMatcher identifierMatcher);
    [ExtensionAttribute]
[NotNullAttribute]
public static IReadOnlyCollection`1<EndpointsMatchResult> GetMatchingEndpoints(IEndpointsTreeNode node, IIdentifierMatcher identifierMatcher);
    private static IEnumerable`1<IEndpointsTreeNodeMatcher> GetAllMatchers(IPsiModule psiModule);
}
public interface JetBrains.ReSharper.Feature.Services.Web.Endpoints.Matching.IEndpointsTreeNodeMatcher {
    [CanBeNullAttribute]
public abstract virtual IReadOnlyCollection`1<EndpointsTreeNodeChildrenMatchResult> GetMatchingChildren(IEndpointsTreeNode node, IIdentifierMatcher identifierMatcher);
    [CanBeNullAttribute]
public abstract virtual IReadOnlyCollection`1<EndpointsMatchResult> GetMatchingEndpoints(IEndpointsTreeNode node, IIdentifierMatcher identifierMatcher);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Web.Endpoints.Occurrences.AspNet.AspNetHttpEndpointChainedOccurrenceHelper : object {
    [ExtensionAttribute]
public static RichText BuildText(IAspNetEndpointChainedOccurrence occurrence);
    private static bool MatchedSegmentIsParameter(EndpointMatchingInfoData matchingContextData, Int32& segmentLength);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Web.Endpoints.Occurrences.AspNet.AspNetHttpEndpointSegmentOccurrenceHelper : object {
    [ExtensionAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public static IReadOnlyCollection`1<IOccurrence> BuildSegmentDeclarationOccurrences(IAspNetHttpEndpoint endpoint, int targetSegmentDepth);
}
public class JetBrains.ReSharper.Feature.Services.Web.Endpoints.Occurrences.AspNet.Controllers.AspNetControllerHttpEndpointChainedOccurrence : DeclaredElementOccurrence {
    [CompilerGeneratedAttribute]
private MatchingInfo <MatchingInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IAspNetHttpEndpoint <Endpoint>k__BackingField;
    public MatchingInfo MatchingInfo { get; }
    private IEndpoint JetBrains.ReSharper.Feature.Services.Web.Endpoints.Occurrences.IEndpointChainedOccurrence.Endpoint { get; }
    public IAspNetHttpEndpoint Endpoint { get; }
    public AspNetControllerHttpEndpointChainedOccurrence(IParametersOwner action, MatchingInfo matchingInfo, IAspNetHttpEndpoint endpoint);
    public sealed virtual RichText BuildText();
    [CompilerGeneratedAttribute]
public sealed virtual MatchingInfo get_MatchingInfo();
    private sealed virtual override IEndpoint JetBrains.ReSharper.Feature.Services.Web.Endpoints.Occurrences.IEndpointChainedOccurrence.get_Endpoint();
    [CompilerGeneratedAttribute]
public sealed virtual IAspNetHttpEndpoint get_Endpoint();
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Web.Endpoints.Occurrences.AspNet.Controllers.AspNetControllerHttpEndpointChainedOccurrencePresenter : DeclaredElementOccurrencePresenter {
    protected virtual void DisplayMainText(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions options, IDeclaredElement declaredElement);
    public virtual bool IsApplicable(IOccurrence occurrence);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Web.Endpoints.Occurrences.AspNet.Controllers.AspNetControllerHttpEndpointOccurrencesHelper : object {
    public sealed virtual IconId GetIcon(IEndpoint endpoint);
    public sealed virtual IReadOnlyCollection`1<IOccurrence> BuildSegmentDeclarationOccurrences(IEndpoint endpoint, int targetSegmentDepth);
    public sealed virtual IEndpointChainedOccurrence CreateChainedOccurrence(IEndpoint endpoint, MatchingInfo matchingInfo);
    public sealed virtual string GetSourceText(IEndpoint endpoint);
}
public interface JetBrains.ReSharper.Feature.Services.Web.Endpoints.Occurrences.AspNet.IAspNetEndpointChainedOccurrence {
    public IAspNetHttpEndpoint Endpoint { get; }
    public abstract virtual IAspNetHttpEndpoint get_Endpoint();
}
public class JetBrains.ReSharper.Feature.Services.Web.Endpoints.Occurrences.AspNet.MinimalApi.AspNetMinimalApiHttpEndpointChainedOccurrence : RangeOccurrence {
    [CompilerGeneratedAttribute]
private MatchingInfo <MatchingInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IAspNetMinimalApiEndpoint <Endpoint>k__BackingField;
    public MatchingInfo MatchingInfo { get; }
    private IEndpoint JetBrains.ReSharper.Feature.Services.Web.Endpoints.Occurrences.IEndpointChainedOccurrence.Endpoint { get; }
    private IAspNetHttpEndpoint JetBrains.ReSharper.Feature.Services.Web.Endpoints.Occurrences.AspNet.IAspNetEndpointChainedOccurrence.Endpoint { get; }
    public IAspNetMinimalApiEndpoint Endpoint { get; }
    public AspNetMinimalApiHttpEndpointChainedOccurrence(IInvocationExpression declaration, MatchingInfo matchingInfo, IAspNetMinimalApiEndpoint endpoint);
    public sealed virtual RichText BuildText();
    [CompilerGeneratedAttribute]
public sealed virtual MatchingInfo get_MatchingInfo();
    private sealed virtual override IEndpoint JetBrains.ReSharper.Feature.Services.Web.Endpoints.Occurrences.IEndpointChainedOccurrence.get_Endpoint();
    private sealed virtual override IAspNetHttpEndpoint JetBrains.ReSharper.Feature.Services.Web.Endpoints.Occurrences.AspNet.IAspNetEndpointChainedOccurrence.get_Endpoint();
    [CompilerGeneratedAttribute]
public IAspNetMinimalApiEndpoint get_Endpoint();
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Web.Endpoints.Occurrences.AspNet.MinimalApi.AspNetMinimalApiHttpEndpointChainedOccurrencePresenter : RangeOccurrencePresenter {
    protected virtual RichText GetDisplayText(OccurrencePresentationOptions options, RangeOccurrence rangeOccurrence);
    protected virtual void PresentReferenceOccurrenceInternal(OccurrencePresentationOptions options, RangeOccurrence occurrence, IMenuItemDescriptor descriptor);
    public virtual bool IsApplicable(IOccurrence occurrence);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Web.Endpoints.Occurrences.AspNet.MinimalApi.AspNetMinimalApiHttpEndpointOccurrencesHelper : object {
    public sealed virtual IconId GetIcon(IEndpoint endpoint);
    public sealed virtual IReadOnlyCollection`1<IOccurrence> BuildSegmentDeclarationOccurrences(IEndpoint endpoint, int targetSegmentDepth);
    public sealed virtual IEndpointChainedOccurrence CreateChainedOccurrence(IEndpoint endpoint, MatchingInfo matchingInfo);
    public sealed virtual string GetSourceText(IEndpoint endpoint);
}
public class JetBrains.ReSharper.Feature.Services.Web.Endpoints.Occurrences.EndpointMatchingInfoData : object {
    [CompilerGeneratedAttribute]
private IEndpoint <Endpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IEndpointsTreeNode <EndpointsTreeNode>k__BackingField;
    [CanBeNullAttribute]
public IEndpoint Endpoint { get; public set; }
    [NotNullAttribute]
public IEndpointsTreeNode EndpointsTreeNode { get; public set; }
    [CompilerGeneratedAttribute]
public IEndpoint get_Endpoint();
    [CompilerGeneratedAttribute]
public void set_Endpoint(IEndpoint value);
    [CompilerGeneratedAttribute]
public IEndpointsTreeNode get_EndpointsTreeNode();
    [CompilerGeneratedAttribute]
public void set_EndpointsTreeNode(IEndpointsTreeNode value);
}
public class JetBrains.ReSharper.Feature.Services.Web.Endpoints.Occurrences.EndpointOccurrence : RangeOccurrence {
    public EndpointOccurrence(IPsiSourceFile psiSourceFile, DocumentRange documentRange);
    public virtual bool Navigate(ISolution solution, PopupWindowContextSource windowContext, bool transferFocus, TabOptions tabOptions);
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Web.Endpoints.Occurrences.EndpointOccurrencePresenter : RangeOccurrencePresenter {
    public virtual bool IsApplicable(IOccurrence occurrence);
    public virtual bool Present(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions options);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Web.Endpoints.Occurrences.EndpointOccurrencesUtil : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IconId GetIcon(IEndpoint endpoint);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IEndpointChainedOccurrence CreateChainedOccurrence(IEndpoint endpoint, MatchingInfo matchingInfo);
    [ExtensionAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public static IReadOnlyCollection`1<IOccurrence> BuildSegmentDeclarationOccurrences(IEndpoint endpoint, int targetSegmentDepth);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetSourceText(IEndpoint endpoint);
    private static IEnumerable`1<IEndpointOccurrencesHelper> GetAllHelpers(IPsiModule psiModule);
}
public class JetBrains.ReSharper.Feature.Services.Web.Endpoints.Occurrences.ExternalEndpointOccurrence : DeclaredElementOccurrence {
    [CompilerGeneratedAttribute]
private ExternalRouteAttributeTemplateProvider <RouteTemplateProvider>k__BackingField;
    public ExternalRouteAttributeTemplateProvider RouteTemplateProvider { get; }
    public ExternalEndpointOccurrence(ExternalRouteAttributeTemplateProvider routeTemplateProvider, OccurrenceType occurrenceKind);
    [CompilerGeneratedAttribute]
public ExternalRouteAttributeTemplateProvider get_RouteTemplateProvider();
    public virtual bool Navigate(ISolution solution, PopupWindowContextSource windowContext, bool transferFocus, TabOptions tabOptions);
}
public class JetBrains.ReSharper.Feature.Services.Web.Endpoints.Occurrences.ExternalEndpointOccurrenceNavigationFilter : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Web.Endpoints.Occurrences.ExternalEndpointOccurrenceNavigationFilter/<FilterOut>d__0")]
public sealed virtual IEnumerable`1<IOccurrence> FilterOut(IEnumerable`1<IOccurrence> occurrences, NavigationContext context);
    public sealed virtual bool FilterOut(ICollection`1<IOccurrence> previousResults, IOccurrence itemToFilter);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Web.Endpoints.Occurrences.ExternalEndpointOccurrenceNavigationFilterFactory : object {
    public sealed virtual bool IsApplicable(CallingFeatureContext context);
    public sealed virtual INavigationFilter CreateFilter(NavigationContext context);
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Web.Endpoints.Occurrences.ExternalEndpointOccurrencePresenter : DeclaredElementOccurrencePresenter {
    public virtual bool IsApplicable(IOccurrence occurrence);
    protected virtual void DisplayCustomContainerText(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions options, IDeclaredElement element, ISubstitution substitution);
    public string GetTemplateString(ExternalEndpointOccurrence externalEndpointOccurrence);
}
public interface JetBrains.ReSharper.Feature.Services.Web.Endpoints.Occurrences.IEndpointChainedOccurrence {
    public MatchingInfo MatchingInfo { get; }
    public IEndpoint Endpoint { get; }
    public abstract virtual MatchingInfo get_MatchingInfo();
    public abstract virtual IEndpoint get_Endpoint();
    public abstract virtual RichText BuildText();
}
public interface JetBrains.ReSharper.Feature.Services.Web.Endpoints.Occurrences.IEndpointOccurrencesHelper {
    [CanBeNullAttribute]
public abstract virtual IconId GetIcon(IEndpoint endpoint);
    [CanBeNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IReadOnlyCollection`1<IOccurrence> BuildSegmentDeclarationOccurrences(IEndpoint endpoint, int targetSegmentDepth);
    [CanBeNullAttribute]
public abstract virtual IEndpointChainedOccurrence CreateChainedOccurrence(IEndpoint endpoint, MatchingInfo matchingInfo);
    [CanBeNullAttribute]
public abstract virtual string GetSourceText(IEndpoint endpoint);
}
public class JetBrains.ReSharper.Feature.Services.Web.Endpoints.Occurrences.MinimalApiImplicitEndpointOccurrence : DeclaredElementOccurrence {
    public MinimalApiImplicitEndpointOccurrence(MinimalApiImplicitEndpointRouteTemplateProvider provider, OccurrenceType occurrenceType);
    public virtual bool Navigate(ISolution solution, PopupWindowContextSource windowContext, bool transferFocus, TabOptions tabOptions);
}
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Web.Endpoints.Statistics.EndpointsUsages : CounterUsagesCollector {
    private EventLogGroup myGroup;
    private EventId myNavigateToPathSegmentDeclaration;
    private EventId myNavigateToQueryParameterDeclaration;
    private EventId myCompletePathSegment;
    private EventId myCompleteQueryParameter;
    public EndpointsUsages(FeatureUsageLogger featureUsageLogger);
    public virtual EventLogGroup GetGroup();
    public void LogNavigateToPathSegmentDeclaration(ISolution solution);
    public void LogNavigateToQueryParameterDeclaration(ISolution solution);
    public void LogCompletePathSegment(ISolution solution);
    public void LogCompleteQueryParameter(ISolution solution);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Web.Endpoints.ZoneMarker : object {
}
public interface JetBrains.ReSharper.Feature.Services.Web.JavaScript.NodeJs.INodePathProvider {
    [NotNullAttribute]
public ISimpleSignal NodePathChanged { get; }
    public abstract virtual VirtualFileSystemPath TrySearchForNodePath();
    public abstract virtual bool IsValidNodePath(VirtualFileSystemPath path);
    public abstract virtual VirtualFileSystemPath GetNodePath(IContextBoundSettingsStore settingsStore);
    public abstract virtual ISimpleSignal get_NodePathChanged();
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.JavaScript.NodeJs.ModulesFileDependencyCandidatesTracker : object {
    private JetHashSet`1<IFileDependency> myDependencies;
    private OneToSetMap`2<IFileDependency, VirtualFileSystemPath> myDependency2NodeModulesPathMap;
    private OneToSetMap`2<VirtualFileSystemPath, IFileDependency> myNodeModulesPath2DependencyMap;
    private JetHashSet`1<VirtualFileSystemPath> mySourceDirectories;
    private JetHashSet`1<VirtualFileSystemPath> myNodeModulesPath;
    public IListEvents`1<VirtualFileSystemPath> NodeModulesPaths;
    public ModulesFileDependencyCandidatesTracker(Lifetime lifetime);
    public sealed virtual void Register(IFileDependency dependency);
    public sealed virtual void Unregister(IFileDependency dependency);
    public sealed virtual void AddDependencyCandidate(IFileDependency dependency, VirtualFileSystemPath candidatePath);
    private void ProcessCandidatePath(IFileDependency dependency, VirtualFileSystemPath candidatePath);
    public sealed virtual void ClearDependencyCandidates(IFileDependency dependency);
    public sealed virtual void ClearDependencyCaches(IFileDependency fileDependency);
    private void AddNodeModulesPath(VirtualFileSystemPath fileSystemPath);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.JavaScript.NodeJs.ModulesFilesCache : object {
    private static RelativePath ourTypesPath;
    private ConcurrentDictionary`2<VirtualFileSystemPath, ISet`1<string>> myTypes;
    private ConcurrentDictionary`2<VirtualFileSystemPath, IList`1<string>> myTypesLocal;
    private ConcurrentDictionary`2<VirtualFileSystemPath, VirtualFileSystemPath> myJsPackageMainFiles;
    private ConcurrentDictionary`2<VirtualFileSystemPath, VirtualFileSystemPath> myTsPackageMainFiles;
    private ConcurrentDictionary`2<string, ConcurrentDictionary`2<VirtualFileSystemPath, object>> myCaches;
    public ModulesFilesCache(Lifetime lifetime, ModulesFilesTracker modulesFilesTracker);
    private static ModulesFilesCache();
    public sealed virtual object GetCachedValue(string cacheName, VirtualFileSystemPath path, Func`2<VirtualFileSystemPath, object> valueFactory);
    public VirtualFileSystemPath GetPackageMainFile(VirtualFileSystemPath path, bool typeScript, VirtualFileSystemPath& packageDirectory);
    private static bool IsNodeModulesPackagePath(VirtualFileSystemPath path);
    public sealed virtual IEnumerable`1<string> GetTypes(VirtualFileSystemPath currentDirectory);
    private ISet`1<string> GetTypesInternal(VirtualFileSystemPath currentDirectory);
    private static IList`1<string> GetTypesLocal(VirtualFileSystemPath currentDirectory);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0(Task`1<ModulesFilesChange> t);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_1(Task`1<ModulesFilesChange> _);
}
public enum JetBrains.ReSharper.Feature.Services.Web.JavaScript.NodeJs.ModulesFilesChange : Enum {
    public int value__;
    public static ModulesFilesChange None;
    public static ModulesFilesChange Modules;
    public static ModulesFilesChange Types;
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.JavaScript.NodeJs.ModulesFilesTracker : object {
    private ISignal`1<Task`1<ModulesFilesChange>> myNodeModulesFilesChanging;
    private Lifetime myLifetime;
    private ILogger myLogger;
    private JavaScriptDependentFilesModuleFactory myDependentFilesModuleFactory;
    private IShellLocks myLocks;
    private IFileSystemTracker myFileSystemTracker;
    private HashSet`1<VirtualFileSystemPath> myChangedSubtree;
    private OneToSetMap`2<VirtualFileSystemPath, VirtualFileSystemPath> myNodeModulesChildren;
    private Dictionary`2<VirtualFileSystemPath, Pair`2<ChangeSubscription, ISet`1<VirtualFileSystemPath>>> myChangeSubscriptions3;
    private GroupingEvent myNodeModulesFilesChangedEvent;
    private TimeSpan myDelay;
    private DateTime myChangesProcessingUtcTime;
    private DateTime myLastChangesUtcTime;
    private TaskCompletionSource`1<ModulesFilesChange> myUpdatingTaskCompletionSource;
    private ModulesFilesChange myChanges;
    private bool myWasChangingShouldBeFired;
    private bool myWasChangingFired;
    private ModulesFilesChange ChangesType { get; }
    public ModulesFilesTracker(Lifetime lifetime, ILogger logger, JavaScriptDependentFilesModuleFactory dependentFilesModuleFactory, ChangeManager changeManager, IShellLocks locks, IFileSystemTracker fileSystemTracker, ModulesFileDependencyCandidatesTracker modulesFileDependencyCandidatesTracker);
    public void Advise(Lifetime lifetime, Action`1<Task`1<ModulesFilesChange>> handler);
    private ModulesFilesChange get_ChangesType();
    private ModulesFilesChange TryIncreaseChangesType(ModulesFilesChange changesType);
    private void FireNodeModulesFilesChanged(bool publish);
    private void OnChangeManagerChanged(ChangeEventArgs changeEventArgs);
    private void OnNodeModulesPathAdded(Lifetime lifetime, VirtualFileSystemPath nodeModulesPath);
    private void OnNodeModulesPathRemoved(VirtualFileSystemPath nodeModulesPath);
    private void OnNodeModulesFileSystemChanged(FileSystemChangeDelta fileSystemChangeDelta);
    private static bool HasTypesChanges(FileSystemChangeDelta delta);
    private void OnNodeModulesFilesChanged(bool increaseDelay);
    private void OnAfterOnNodeModulesFilesChangedDelayFinished();
    private void ProcessChanges();
    protected virtual void AdviseDirectoryChanges(VirtualFileSystemPath path, VirtualFileSystemPath parent, bool exists);
    protected virtual void UnadviseDirectoryChanges(VirtualFileSystemPath path, VirtualFileSystemPath parent);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Web.JavaScript.NodeJs.ModulesFilesTracker/<GetTrackableNodeModulesEntriesPaths>d__33")]
public IEnumerable`1<VirtualFileSystemPath> GetTrackableNodeModulesEntriesPaths(VirtualFileSystemPath nodeModulesPath);
    [CompilerGeneratedAttribute]
private void <.ctor>b__17_0();
    [CompilerGeneratedAttribute]
private IEnumerable`1<VirtualFileSystemPath> <ProcessChanges>b__30_0(VirtualFileSystemPath path);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.JavaScript.NodeJs.NodePathProvider : object {
    private static string NodeExecutableName;
    private static string NodeFolderName;
    private IContextBoundSettingsStore mySettingsStore;
    private object myNodePathLock;
    private VirtualFileSystemPath myActualNodePath;
    [CompilerGeneratedAttribute]
private ISimpleSignal <NodePathChanged>k__BackingField;
    public ISimpleSignal NodePathChanged { get; }
    public NodePathProvider(Lifetime lifetime, ISettingsStore settingsStore);
    public sealed virtual VirtualFileSystemPath TrySearchForNodePath();
    public sealed virtual bool IsValidNodePath(VirtualFileSystemPath path);
    public sealed virtual VirtualFileSystemPath GetNodePath(IContextBoundSettingsStore settingsStore);
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_NodePathChanged();
    private static VirtualFileSystemPath TryGetDefaultNodePath();
    private static VirtualFileSystemPath TryGetInstalledNodePath();
}
public class JetBrains.ReSharper.Feature.Services.Web.JavaScript.NodeJs.Options.Icon : MessageElement {
    [CompilerGeneratedAttribute]
private IconId <IconId>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Size>k__BackingField;
    public IconId IconId { get; }
    public Size Size { get; }
    public Icon(IconId value);
    public Icon(IconId iconId, Size iconSize);
    [CompilerGeneratedAttribute]
public IconId get_IconId();
    [CompilerGeneratedAttribute]
public Size get_Size();
}
public class JetBrains.ReSharper.Feature.Services.Web.JavaScript.NodeJs.Options.Link : MessageElement {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <Action>k__BackingField;
    public string Text { get; }
    public string Url { get; }
    public Action Action { get; }
    public Link(string text, string url);
    public Link(string text, Action action);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public Action get_Action();
}
public class JetBrains.ReSharper.Feature.Services.Web.JavaScript.NodeJs.Options.LinkElement : MessageElement {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <ClickCommand>k__BackingField;
    public string Text { get; }
    public DelegateCommand ClickCommand { get; }
    internal LinkElement(Link link);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public DelegateCommand get_ClickCommand();
}
public abstract class JetBrains.ReSharper.Feature.Services.Web.JavaScript.NodeJs.Options.MessageElement : object {
    public static MessageElement op_Implicit(string value);
    public static MessageElement op_Implicit(IconId value);
}
public class JetBrains.ReSharper.Feature.Services.Web.JavaScript.NodeJs.Options.MessageViewModel : OptionEntityPrimitive {
    [CompilerGeneratedAttribute]
private ObservableCollection`1<MessageElement> <Elements>k__BackingField;
    public ObservableCollection`1<MessageElement> Elements { get; }
    public MessageViewModel(Lifetime lifetime, MessageElement[] elements);
    [CompilerGeneratedAttribute]
public ObservableCollection`1<MessageElement> get_Elements();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Web.JavaScript.NodeJs.Options.MessageViewModel/<GetKeywords>d__4")]
public virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
}
[OptionsPageAttribute("NodeJsPage", "Node.js", "JetBrains.ReSharper.Psi.Resources.JavaScriptThemedIcons/NodeJS")]
public class JetBrains.ReSharper.Feature.Services.Web.JavaScript.NodeJs.Options.NodeJsPage : CustomSimpleOptionsPage {
    public static string PID;
    [NotNullAttribute]
private PathChooserViewModel myNodePath;
    public NodeJsPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, ICommonFileDialogs commonFileDialogs, INodePathProvider nodePathProvider);
    private IOptionEntity AddMessage(MessageElement[] elements);
    [NotNullAttribute]
private PathChooserViewModel AddNodePathChooserOption(IProperty`1<FileSystemPath> setting, string toolTipText, FileSystemPath initialValue, ICommonFileDialogs commonFileDialogs, INodePathProvider nodePathProvider, FileSystemPath defaultValue, bool canBeEmpty);
    public virtual bool OnOk();
}
public class JetBrains.ReSharper.Feature.Services.Web.JavaScript.NodeJs.Options.NodePathChooserViewModel : FileChooserViewModel {
    private INodePathProvider myNodePathProvider;
    public NodePathChooserViewModel(Lifetime lifetime, IProperty`1<FileSystemPath> pathSetting, string goodCaseTooltip, FileSystemPath initialValue, ICommonFileDialogs commonFileDialogs, INodePathProvider nodePathProvider, FileSystemPath defaultValue, bool canBeEmpty);
    protected virtual string AdditionalTryGetError(FileSystemPath path);
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "NodeJsSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.Web.JavaScript.NodeJs.Options.NodePathSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "NodeJsPathSearchModeSettingDescription")]
public PathSearchMode NodeJsPathSearchMode;
    [CanBeNullAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Web.Resources.Strings", "NodeJsSourcePathSettingDescription")]
public VirtualFileSystemPath NodeJsSourcePath;
}
public enum JetBrains.ReSharper.Feature.Services.Web.JavaScript.NodeJs.Options.PathSearchMode : Enum {
    public int value__;
    public static PathSearchMode Automatically;
    public static PathSearchMode Explicitly;
}
public class JetBrains.ReSharper.Feature.Services.Web.JavaScript.NodeJs.Options.Text : MessageElement {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    public Text(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Web.JavaScript.NodeJs.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.RegExp.JsRegex.LanguageImpl.JsRegexLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Web.JsRegex.JsRegExSelectEmbracingConstructProvider : RegExpSelectEmbracingConstructProvider {
    public JsRegExSelectEmbracingConstructProvider(ISettingsStore settingsStore);
    public virtual ISelectedRange GetSelectedRange(IPsiSourceFile sourceFile, DocumentRange documentRange);
    public virtual ISelectedRange ExtendRangeSelection(IRegexContainer fileNode, ITreeNode first, ITreeNode last);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Web.JsRegex.ZoneMarker : object {
}
public class JetBrains.ReSharper.Feature.Services.Web.Navigation.WebGotoFileMemberCachedBase : object {
    public sealed virtual IEnumerable`1<MatchingInfo> FindMatchingInfos(IIdentifierMatcher matcher, INavigationScope scope, GotoContext gotoContext);
    public sealed virtual IEnumerable`1<IOccurrence> GetOccurrencesByMatchingInfo(MatchingInfo navigationInfo, INavigationScope scope, GotoContext gotoContext);
    public sealed virtual bool IsApplicable(INavigationScope scope, GotoContext gotoContext, IIdentifierMatcher matcher);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Web.Navigation.WebGotoFileMemberCachedBase/<FindOccurrences>d__3")]
public IEnumerable`1<Pair`2<IOccurrence, MatchingInfo>> FindOccurrences(IIdentifierMatcher matcher, INavigationScope scope, LibrariesFlag includeLibraries, Func`1<bool> checkCancelled);
}
[OccurrenceProviderAttribute]
public class JetBrains.ReSharper.Feature.Services.Web.Navigation.WebOccurrenceProvider : object {
    public sealed virtual IOccurrence MakeOccurrence(FindResult findResult);
}
public class JetBrains.ReSharper.Feature.Services.Web.Navigation.WebSymbolOccurrence : RangeOccurrence {
    private IWebSymbol myWebSymbol;
    public IWebSymbol WebSymbol { get; }
    public WebSymbolOccurrence(IWebSymbol webSymbol, OccurrencePresentationOptions options);
    public virtual string GetDisplayNameText();
    public IWebSymbol get_WebSymbol();
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Web.Navigation.WebSymbolOccurrencePresenter : RangeOccurrencePresenter {
    protected virtual RichText GetDisplayText(OccurrencePresentationOptions options, RangeOccurrence rangeOccurrence);
    public virtual bool IsApplicable(IOccurrence occurrence);
}
[ShellComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Web.Razor.AI.RazorTechnologyChatContextProvider : object {
    private RazorReferencedAssembliesService myRazorReferencedAssembliesService;
    private MvcReferencedAssembliesService myMvcReferencedAssembliesService;
    public RazorTechnologyChatContextProvider(RazorReferencedAssembliesService razorReferencedAssembliesService, MvcReferencedAssembliesService mvcReferencedAssembliesService);
    public sealed virtual string GetLanguageOrTechnologyPresentation(IPsiModule module);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class JetBrains.ReSharper.Feature.Services.Web.resources.Html.HtmlResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static UnmanagedMemoryStream HtmlDescriptions { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static UnmanagedMemoryStream get_HtmlDescriptions();
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Feature.Services.Web.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string AfterDotSettingDescription { get; }
    public static string AllowCPUIntensiveTypingAssistsSettingDescription { get; }
    public static string ASPNETOptionPageTitle { get; }
    public static string ASPNETTypingAssistanceSettingsSettingDescription { get; }
    public static string AutoFixColonToGoOutsideQuotesOfJSONKeySettingDescription { get; }
    public static string AutoFixCommaToGoOutsideQuotesOfJSONValueSettingDescription { get; }
    public static string AutoFormatOnClosingTagSettingDescription { get; }
    public static string AutoFormatOnEnterSettingDescription { get; }
    public static string AutoInsertClosingTagsSettingDescription { get; }
    public static string CodeCleanupTask_AspOptimizeRegisterDirectives { get; }
    public static string CodeCleanupTask_HtmlReformatCode { get; }
    public static string CodeCleanupTask_JsFormatDocComments { get; }
    public static string CodeCleanupTask_JsInsertSemicolon { get; }
    public static string CodeCleanupTask_JsReformatCode { get; }
    public static string CSSCssFilesAndEmbeddedCSSSettingDescription { get; }
    public static string CSSNamingStyleOptionPageTitle { get; }
    public static string CSSOptionPageTitle { get; }
    public static string CSSSettingDescription { get; }
    public static string FormattingStyleOptionPageTitle { get; }
    public static string HTMLHtmlFilesAndServerPagesSettingDescription { get; }
    public static string HTMLOptionPageTitle { get; }
    public static string HTMLSettingDescription { get; }
    public static string HTMLTypingAssistanceSettingsSettingDescription { get; }
    public static string InjectedJavaScriptSettingDescription { get; }
    public static string InsideStringSettingDescription { get; }
    public static string InspectionsOptionPageTitle { get; }
    public static string JavaScriptDecoration_Name_JavaScript_decoration { get; }
    public static string JavaScriptInJSXJsxFilesOnlySettingDescription { get; }
    public static string JavaScriptInStringLiteralsInjectedSettingDescription { get; }
    public static string JavaScriptJsFilesAndEmbeddedJavaScriptSettingDescription { get; }
    public static string JavaScriptOptionPageTitle { get; }
    public static string JavaScriptReformatCodeBase_Name_Reformat_JavaScript { get; }
    public static string JavaScriptSettingDescription { get; }
    public static string JSONOptionPageTitle { get; }
    public static string JSONSchemaCatalogsOptionPageTitle { get; }
    public static string JSONSettingDescription { get; }
    public static string JSONValueHelpersOptionPageTitle { get; }
    public static string NamingStyleOptionPageTitle { get; }
    public static string NodeJsOptionPageTitle { get; }
    public static string NodeJsPathSearchModeSettingDescription { get; }
    public static string NodeJsSettingsSettingDescription { get; }
    public static string NodeJsSourcePathSettingDescription { get; }
    public static string NormalizeTagNames_HTML { get; }
    public static string OnClassesAndIDsSettingDescription { get; }
    public static string OnHexColorsSettingDescription { get; }
    public static string OnIdentifiersSettingDescription { get; }
    public static string OnLettersAndDigitsSettingDescription { get; }
    public static string OnPunctuationSettingDescription { get; }
    public static string OnSelectorsSettingDescription { get; }
    public static string OnSettingDescription { get; }
    public static string OnSpaceSettingDescription { get; }
    public static string OverrideVSIntelliSenseForCSSSettingDescription { get; }
    public static string OverrideVSIntelliSenseForHTMLSettingDescription { get; }
    public static string OverrideVSIntelliSenseForInjectedJavaScriptSettingDescription { get; }
    public static string OverrideVSIntelliSenseForJavaScriptSettingDescription { get; }
    public static string OverrideVSIntelliSenseForJSONSettingDescription { get; }
    public static string OverrideVSIntelliSenseForJSXJavaScriptSettingDescription { get; }
    public static string RazorOptionPageTitle { get; }
    public static string RazorTypingAssistanceSettingsSettingDescription { get; }
    public static string ReformatCode_Name_Reformat_HTML { get; }
    public static string RemoveRedundantTagNamePrefixesModule_Name_Optimize__Register_directives { get; }
    public static string SynchronousChangingOfMatchingTagSettingDescription { get; }
    public static string TypeScriptOptionPageTitle { get; }
    public static string TypeScriptSettingDescription { get; }
    public static string TypingAssistanceOptionPageTitle { get; }
    public static string TypingAssistanceSettingsSettingDescription { get; }
    public static string WhereValueIsExpectedSettingDescription { get; }
    public static string NodeJs_Header_Text { get; }
    public static string PathToNodeJsInterpreter_Text_Text { get; }
    public static string FindAutomaticallyWhenRequired_SingleRadioOption_Text { get; }
    public static string UseSpecificLocation_SingleRadioOption_Text { get; }
    public static string SpecifyPathToTheNodeJsExecutable_NodePathChooserOption_ToolTip { get; }
    public static string ItSNotPathToNodeJsExecutable__Text { get; }
    public static string AutoFixColonToGoOutsideQuotesOfJSON_BoolOption_Text { get; }
    public static string AutoFixCommaToGoOutsideQuotesOfJSON_BoolOption_Text { get; }
    public static string AllowTemplatesInFormOfText_BoolOption_Text { get; }
    public static string AllowTemplatesInFormOfText_BoolOption_Text2 { get; }
    public static string WhatIsASchemaCatalog_Header_Text { get; }
    public static string JSONSchemaCatalogIsAJSONFileThatAllows_Text_Text { get; }
    public static string ToGetMoreInformationAboutJSONCatalog_Text_Text { get; }
    public static string AvailableCatalogs_Header_Text { get; }
    public static string AboutValueHelpers_Header_Text { get; }
    public static string JSONValueHelpersAreHintsForReSharper_Text_Text { get; }
    public static string SettingAValueTypeForSpecificJSONProperties_Text_Text { get; }
    public static string AvailableHelpers_Header_Text { get; }
    public static string ASPNETProjects_Text { get; }
    public static string RazorProjects_Text { get; }
    public static string ASPNETCProjects_Text { get; }
    public static string ASPNETVBProjects_Text { get; }
    public static string RazorCProjects_Text { get; }
    public static string RazorCViewsFolder_Text { get; }
    public static string RazorCSharedViewsFolder_Text { get; }
    public static string RazorCViewComponentsFolder_Text { get; }
    public static string RazorASPNETFrameworkProjects_Text { get; }
    public static string RazorASPNETCoreProjects_Text { get; }
    public static string BlazorCProjects_Text { get; }
    public static string ASPNETWebFormsCProjects_Text { get; }
    public static string CannotResolveController__ToolTip { get; }
    public static string CannotResolveAction__ToolTip { get; }
    public static string CannotResolveView__ToolTip { get; }
    public static string CannotResolvePartialView__ToolTip { get; }
    public static string CannotResolveArea__ToolTip { get; }
    public static string CannotResolveTemplate__ToolTip { get; }
    public static string CannotResolveMasterpage__ToolTip { get; }
    public static string CannotResolveViewComponent__ToolTip { get; }
    public static string CannotResolveViewComponentView__ToolTip { get; }
    public static string PredefinedASPNETEditorSettings_Text { get; }
    public static string BaseOf_FindUsagesTitle_Text { get; }
    public static string InheritorsOf_FindUsagesTitle_Text { get; }
    public static string PredefinedHtmlEditorSettings_Text { get; }
    public static string Base_Of__Text { get; }
    public static string BaseTypesOf__Text { get; }
    public static string Implementing_Of__Text { get; }
    public static string Overriding_Of__Text { get; }
    public static string DerivedTypesOf__Text { get; }
    public static string ScanningFile__Text { get; }
    public static string TransformationJsToTs_Text { get; }
    public static string TranslatingJsToTs_Text { get; }
    public static string PredefinedRazorEditorSettings_Text { get; }
    public static string CurrentProject_Text { get; }
    public static string TransformationJsToTsPreparingCaches_Text { get; }
    public static string WeNoticedThatYouReExperiencingLagsOn_Text { get; }
    public static string YouMayWantToDisableCPUIntensiveTyping_Text { get; }
    public static string Disable_Text { get; }
    public static string MinimalApiOccurrencePositionFormat { get; }
    public static string ASPNETVBNETProjects_Text { get; }
    public static string RouteTemplatesSettingDescription { get; }
    public static string RouteTemplates_AfterBrackets { get; }
    public static string RouteTemplates_AfterColon { get; }
    public static string RouteTemplates_AfterEquality { get; }
    public static string RouteTemplates_OnIdentifier { get; }
    public static string RezorImportNamespaceQuickFix_TextFormat { get; }
    public static string RazorUnresolvedComponentWarningHighlighting_TooltipTextFormat { get; }
    public static string RazorUnresolvedComponentWarningHighlighting_Settings_TooltipTextFormat { get; }
    public static string RazorCreateComponentQuickFix_TextFormat { get; }
    public static string RazorNullConditionalOperatorHighlighting_TooltipTextFormat { get; }
    public static string RazorNullConditionalOperatorHighlighting_Settings_TooltipTextFormat { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_AfterDotSettingDescription();
    public static string get_AllowCPUIntensiveTypingAssistsSettingDescription();
    public static string get_ASPNETOptionPageTitle();
    public static string get_ASPNETTypingAssistanceSettingsSettingDescription();
    public static string get_AutoFixColonToGoOutsideQuotesOfJSONKeySettingDescription();
    public static string get_AutoFixCommaToGoOutsideQuotesOfJSONValueSettingDescription();
    public static string get_AutoFormatOnClosingTagSettingDescription();
    public static string get_AutoFormatOnEnterSettingDescription();
    public static string get_AutoInsertClosingTagsSettingDescription();
    public static string get_CodeCleanupTask_AspOptimizeRegisterDirectives();
    public static string get_CodeCleanupTask_HtmlReformatCode();
    public static string get_CodeCleanupTask_JsFormatDocComments();
    public static string get_CodeCleanupTask_JsInsertSemicolon();
    public static string get_CodeCleanupTask_JsReformatCode();
    public static string get_CSSCssFilesAndEmbeddedCSSSettingDescription();
    public static string get_CSSNamingStyleOptionPageTitle();
    public static string get_CSSOptionPageTitle();
    public static string get_CSSSettingDescription();
    public static string get_FormattingStyleOptionPageTitle();
    public static string get_HTMLHtmlFilesAndServerPagesSettingDescription();
    public static string get_HTMLOptionPageTitle();
    public static string get_HTMLSettingDescription();
    public static string get_HTMLTypingAssistanceSettingsSettingDescription();
    public static string get_InjectedJavaScriptSettingDescription();
    public static string get_InsideStringSettingDescription();
    public static string get_InspectionsOptionPageTitle();
    public static string get_JavaScriptDecoration_Name_JavaScript_decoration();
    public static string get_JavaScriptInJSXJsxFilesOnlySettingDescription();
    public static string get_JavaScriptInStringLiteralsInjectedSettingDescription();
    public static string get_JavaScriptJsFilesAndEmbeddedJavaScriptSettingDescription();
    public static string get_JavaScriptOptionPageTitle();
    public static string get_JavaScriptReformatCodeBase_Name_Reformat_JavaScript();
    public static string get_JavaScriptSettingDescription();
    public static string get_JSONOptionPageTitle();
    public static string get_JSONSchemaCatalogsOptionPageTitle();
    public static string get_JSONSettingDescription();
    public static string get_JSONValueHelpersOptionPageTitle();
    public static string get_NamingStyleOptionPageTitle();
    public static string get_NodeJsOptionPageTitle();
    public static string get_NodeJsPathSearchModeSettingDescription();
    public static string get_NodeJsSettingsSettingDescription();
    public static string get_NodeJsSourcePathSettingDescription();
    public static string get_NormalizeTagNames_HTML();
    public static string get_OnClassesAndIDsSettingDescription();
    public static string get_OnHexColorsSettingDescription();
    public static string get_OnIdentifiersSettingDescription();
    public static string get_OnLettersAndDigitsSettingDescription();
    public static string get_OnPunctuationSettingDescription();
    public static string get_OnSelectorsSettingDescription();
    public static string get_OnSettingDescription();
    public static string get_OnSpaceSettingDescription();
    public static string get_OverrideVSIntelliSenseForCSSSettingDescription();
    public static string get_OverrideVSIntelliSenseForHTMLSettingDescription();
    public static string get_OverrideVSIntelliSenseForInjectedJavaScriptSettingDescription();
    public static string get_OverrideVSIntelliSenseForJavaScriptSettingDescription();
    public static string get_OverrideVSIntelliSenseForJSONSettingDescription();
    public static string get_OverrideVSIntelliSenseForJSXJavaScriptSettingDescription();
    public static string get_RazorOptionPageTitle();
    public static string get_RazorTypingAssistanceSettingsSettingDescription();
    public static string get_ReformatCode_Name_Reformat_HTML();
    public static string get_RemoveRedundantTagNamePrefixesModule_Name_Optimize__Register_directives();
    public static string get_SynchronousChangingOfMatchingTagSettingDescription();
    public static string get_TypeScriptOptionPageTitle();
    public static string get_TypeScriptSettingDescription();
    public static string get_TypingAssistanceOptionPageTitle();
    public static string get_TypingAssistanceSettingsSettingDescription();
    public static string get_WhereValueIsExpectedSettingDescription();
    public static string get_NodeJs_Header_Text();
    public static string get_PathToNodeJsInterpreter_Text_Text();
    public static string get_FindAutomaticallyWhenRequired_SingleRadioOption_Text();
    public static string get_UseSpecificLocation_SingleRadioOption_Text();
    public static string get_SpecifyPathToTheNodeJsExecutable_NodePathChooserOption_ToolTip();
    public static string get_ItSNotPathToNodeJsExecutable__Text();
    public static string get_AutoFixColonToGoOutsideQuotesOfJSON_BoolOption_Text();
    public static string get_AutoFixCommaToGoOutsideQuotesOfJSON_BoolOption_Text();
    public static string get_AllowTemplatesInFormOfText_BoolOption_Text();
    public static string get_AllowTemplatesInFormOfText_BoolOption_Text2();
    public static string get_WhatIsASchemaCatalog_Header_Text();
    public static string get_JSONSchemaCatalogIsAJSONFileThatAllows_Text_Text();
    public static string get_ToGetMoreInformationAboutJSONCatalog_Text_Text();
    public static string get_AvailableCatalogs_Header_Text();
    public static string get_AboutValueHelpers_Header_Text();
    public static string get_JSONValueHelpersAreHintsForReSharper_Text_Text();
    public static string get_SettingAValueTypeForSpecificJSONProperties_Text_Text();
    public static string get_AvailableHelpers_Header_Text();
    public static string get_ASPNETProjects_Text();
    public static string get_RazorProjects_Text();
    public static string get_ASPNETCProjects_Text();
    public static string get_ASPNETVBProjects_Text();
    public static string get_RazorCProjects_Text();
    public static string get_RazorCViewsFolder_Text();
    public static string get_RazorCSharedViewsFolder_Text();
    public static string get_RazorCViewComponentsFolder_Text();
    public static string get_RazorASPNETFrameworkProjects_Text();
    public static string get_RazorASPNETCoreProjects_Text();
    public static string get_BlazorCProjects_Text();
    public static string get_ASPNETWebFormsCProjects_Text();
    public static string get_CannotResolveController__ToolTip();
    public static string get_CannotResolveAction__ToolTip();
    public static string get_CannotResolveView__ToolTip();
    public static string get_CannotResolvePartialView__ToolTip();
    public static string get_CannotResolveArea__ToolTip();
    public static string get_CannotResolveTemplate__ToolTip();
    public static string get_CannotResolveMasterpage__ToolTip();
    public static string get_CannotResolveViewComponent__ToolTip();
    public static string get_CannotResolveViewComponentView__ToolTip();
    public static string get_PredefinedASPNETEditorSettings_Text();
    public static string get_BaseOf_FindUsagesTitle_Text();
    public static string get_InheritorsOf_FindUsagesTitle_Text();
    public static string get_PredefinedHtmlEditorSettings_Text();
    public static string get_Base_Of__Text();
    public static string get_BaseTypesOf__Text();
    public static string get_Implementing_Of__Text();
    public static string get_Overriding_Of__Text();
    public static string get_DerivedTypesOf__Text();
    public static string get_ScanningFile__Text();
    public static string get_TransformationJsToTs_Text();
    public static string get_TranslatingJsToTs_Text();
    public static string get_PredefinedRazorEditorSettings_Text();
    public static string get_CurrentProject_Text();
    public static string get_TransformationJsToTsPreparingCaches_Text();
    public static string get_WeNoticedThatYouReExperiencingLagsOn_Text();
    public static string get_YouMayWantToDisableCPUIntensiveTyping_Text();
    public static string get_Disable_Text();
    public static string get_MinimalApiOccurrencePositionFormat();
    public static string get_ASPNETVBNETProjects_Text();
    public static string get_RouteTemplatesSettingDescription();
    public static string get_RouteTemplates_AfterBrackets();
    public static string get_RouteTemplates_AfterColon();
    public static string get_RouteTemplates_AfterEquality();
    public static string get_RouteTemplates_OnIdentifier();
    public static string get_RezorImportNamespaceQuickFix_TextFormat();
    public static string get_RazorUnresolvedComponentWarningHighlighting_TooltipTextFormat();
    public static string get_RazorUnresolvedComponentWarningHighlighting_Settings_TooltipTextFormat();
    public static string get_RazorCreateComponentQuickFix_TextFormat();
    public static string get_RazorNullConditionalOperatorHighlighting_TooltipTextFormat();
    public static string get_RazorNullConditionalOperatorHighlighting_Settings_TooltipTextFormat();
}
public interface JetBrains.ReSharper.Feature.Services.Web.StructuralSearch.IHtmlStructuralSearchCssSelectorSupport {
    public abstract virtual bool Validate(string text);
    public abstract virtual IStructuralMatcher CreateMatcher(string cssSelector);
}
public static class JetBrains.ReSharper.Feature.Services.Web.TypingAssist.WebTypingAssistUtil : object {
    public static bool FindTokenAt(CachingLexer lexer, int offset);
    public static bool FindTokenAt(CachingLexer lexer, int offset);
    public static bool IsProjectFileSupported(ITextControl textControl, ISolution solution);
    public static bool IsSupported(CachingLexer lexer, ITextControl textControl, bool checkSelection);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.CodeCompletion.AspNetHttpEndpointCompletionHelper : object {
    public sealed virtual bool TryBuildLookupItemPart(IRouteSegment routeSegment, IList`1& result);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Web.UriStrings.CodeCompletion.EndpointCompletionUtil : object {
    [ExtensionAttribute]
public static bool TryBuildLookupItemParts(IRouteSegment routeSegment, IPsiModule psiModule, IList`1& result);
    private static IEnumerable`1<IEndpointCompletionHelper> GetAllHelpers(IPsiModule psiModule);
}
public interface JetBrains.ReSharper.Feature.Services.Web.UriStrings.CodeCompletion.IEndpointCompletionHelper {
    public abstract virtual bool TryBuildLookupItemPart(IRouteSegment routeSegment, IList`1& result);
}
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.CodeCompletion.LookupItem.EndpointLookupItemBehavior : TextualBehavior`1<EndpointLookupItemInfo> {
    private ISolution mySolution;
    private ShellLocks myShellLocks;
    private IRangeMarker myFullLiteralRangeMarker;
    public EndpointLookupItemBehavior(ISolution solution, ShellLocks shellLocks, EndpointLookupItemInfo info, IRangeMarker fullLiteralRangeMarker);
    protected virtual void OnAfterComplete(ITextControl textControl, LookupItemInsertType insertType, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker, Boolean& keepCaretStill);
    private void OnAfterCompleteImpl(ITextControl textControl, DocumentRange range);
}
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.CodeCompletion.LookupItem.EndpointLookupItemInfo : TextualInfo {
    [CompilerGeneratedAttribute]
private List`1<EndpointLookupItemPart> <UriSegments>k__BackingField;
    [CompilerGeneratedAttribute]
private ITokenNode <LiteralToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <Icon>k__BackingField;
    public List`1<EndpointLookupItemPart> UriSegments { get; }
    public ITokenNode LiteralToken { get; }
    public TokenNodeType LiteralTokenNodeType { get; }
    public string Source { get; }
    public IconId Icon { get; }
    public EndpointLookupItemInfo(List`1<EndpointLookupItemPart> uriSegments, ITokenNode literalToken, string source, IconId icon);
    [CompilerGeneratedAttribute]
public List`1<EndpointLookupItemPart> get_UriSegments();
    [CompilerGeneratedAttribute]
public ITokenNode get_LiteralToken();
    public TokenNodeType get_LiteralTokenNodeType();
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public IconId get_Icon();
}
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.CodeCompletion.LookupItem.EndpointLookupItemPart : object {
    [CompilerGeneratedAttribute]
private string <UnescapedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private EndpointLookupItemPartType <Type>k__BackingField;
    public string UnescapedValue { get; }
    public EndpointLookupItemPartType Type { get; }
    public EndpointLookupItemPart(string unescapedValue, EndpointLookupItemPartType type);
    [CompilerGeneratedAttribute]
public string get_UnescapedValue();
    [CompilerGeneratedAttribute]
public EndpointLookupItemPartType get_Type();
    public string EscapedValue(CSharpLiteralType literalType, CSharpLanguageLevel languageLevel);
}
public enum JetBrains.ReSharper.Feature.Services.Web.UriStrings.CodeCompletion.LookupItem.EndpointLookupItemPartType : Enum {
    public int value__;
    public static EndpointLookupItemPartType Text;
    public static EndpointLookupItemPartType Parameter;
}
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.CodeCompletion.LookupItem.EndpointLookupItemPresentation : LookupItemAspect`1<EndpointLookupItemInfo> {
    private IRangeMarker myVisualReplaceRangeMarker;
    [CompilerGeneratedAttribute]
private IconId <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <DisplayTypeName>k__BackingField;
    private TextStyle myBoldTextStyle;
    private RichText myDisplayName;
    public IconId Image { get; }
    public RichText DisplayName { get; }
    public RichText DisplayTypeName { get; public set; }
    public bool CanShrink { get; }
    public EndpointLookupItemPresentation(EndpointLookupItemInfo info, IRangeMarker visualReplaceRangeMarker);
    [CompilerGeneratedAttribute]
public sealed virtual IconId get_Image();
    public sealed virtual RichText get_DisplayName();
    [CompilerGeneratedAttribute]
public sealed virtual RichText get_DisplayTypeName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisplayTypeName(RichText value);
    private RichText GetDisplayName();
    public sealed virtual DocumentRange GetVisualReplaceRange();
    public sealed virtual bool get_CanShrink();
    public sealed virtual bool Shrink();
    public sealed virtual void Unshrink();
}
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.CodeCompletion.Providers.QueryParameterLookupItem : TextLookupItemBase {
    private ISolution mySolution;
    public IconId Image { get; }
    public QueryParameterLookupItem(ISolution solution, string text, string suffix);
    protected virtual void OnAfterComplete(ITextControl textControl, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker);
    public virtual IconId get_Image();
}
public abstract class JetBrains.ReSharper.Feature.Services.Web.UriStrings.CodeCompletion.Providers.UrlQueryParameterItemsProviderBase`1 : ItemsProviderOfSpecificContext`1<UrlQueryParameterCodeCompletionContext> {
    protected virtual bool AddLookupItems(UrlQueryParameterCodeCompletionContext completionContext, IItemsCollector collector);
    protected abstract virtual TSingleExecutionContext CreateSingleExecutionContext(UrlQueryParameterCodeCompletionContext context);
    protected abstract virtual IReadOnlyList`1<string> GetAvailableQueryParameters(UrlPath urlPath, TSingleExecutionContext context);
}
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.CodeCompletion.Providers.UrlQueryParameterItemsProviderExecutionContext : object {
    [CompilerGeneratedAttribute]
private IEndpointsProvider[] <EndpointsProviders>k__BackingField;
    public IEndpointsProvider[] EndpointsProviders { get; }
    public UrlQueryParameterItemsProviderExecutionContext(IEndpointsProvider[] endpointsProviders);
    [CompilerGeneratedAttribute]
public IEndpointsProvider[] get_EndpointsProviders();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.CodeCompletion.Providers.UrlQueryParametersItemsProvider : UrlQueryParameterItemsProviderBase`1<UrlQueryParameterItemsProviderExecutionContext> {
    protected virtual UrlQueryParameterItemsProviderExecutionContext CreateSingleExecutionContext(UrlQueryParameterCodeCompletionContext context);
    protected virtual IReadOnlyList`1<string> GetAvailableQueryParameters(UrlPath urlPath, UrlQueryParameterItemsProviderExecutionContext context);
}
[IntellisensePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.CodeCompletion.Providers.UrlSegmentCodeCompletionContextProvider : CodeCompletionContextProviderBase {
    public virtual ISpecificCodeCompletionContext GetCompletionContext(CodeCompletionContext context);
    public virtual bool IsApplicable(CodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.CodeCompletion.Providers.UrlSegmentItemsProvider : UrlSegmentItemsProviderBase`1<UrlSegmentItemsProviderExecutionContext> {
    public UrlSegmentItemsProvider(ShellLocks shellLocks);
    protected virtual UrlSegmentItemsProviderExecutionContext CreateSingleExecutionContext(UrlSegmentCodeCompletionContext completionContext);
    protected virtual IReadOnlyList`1<EndpointLookupItemInfo> GetItemInfos(UrlPath urlPath, UrlSegmentItemsProviderExecutionContext singleExecutionContext, UrlSegmentCodeCompletionContext completionContext);
    private void CreateLookupItems(IHttpEndpointsTreeNode root, IHttpEndpointsTreeNode node, UrlSegmentCodeCompletionContext context, List`1<EndpointLookupItemInfo> items, Stack`1<EndpointLookupItemPart> currentParts);
    private bool VerbsMatched(IHttpEndpoint endpoint, IReadOnlyList`1<HttpVerb> expectedVerbs);
}
public abstract class JetBrains.ReSharper.Feature.Services.Web.UriStrings.CodeCompletion.Providers.UrlSegmentItemsProviderBase`1 : ItemsProviderOfSpecificContext`1<UrlSegmentCodeCompletionContext> {
    private ShellLocks myShellLocks;
    protected UrlSegmentItemsProviderBase`1(ShellLocks shellLocks);
    protected virtual bool AddLookupItems(UrlSegmentCodeCompletionContext completionContext, IItemsCollector collector);
    protected abstract virtual TSingleExecutionContext CreateSingleExecutionContext(UrlSegmentCodeCompletionContext completionContext);
    protected abstract virtual IReadOnlyList`1<EndpointLookupItemInfo> GetItemInfos(UrlPath urlPath, TSingleExecutionContext singleExecutionContext, UrlSegmentCodeCompletionContext completionContext);
}
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.CodeCompletion.Providers.UrlSegmentItemsProviderExecutionContext : object {
    [CompilerGeneratedAttribute]
private IHttpEndpointsProvider[] <EndpointsProviders>k__BackingField;
    public IHttpEndpointsProvider[] EndpointsProviders { get; }
    public UrlSegmentItemsProviderExecutionContext(IHttpEndpointsProvider[] endpointsProviders);
    [CompilerGeneratedAttribute]
public IHttpEndpointsProvider[] get_EndpointsProviders();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.CodeCompletion.Providers.UrlStringAutomaticCodeCompletionStrategy : object {
    private SettingsScalarEntry mySettingsEntry;
    public PsiLanguageType Language { get; }
    public bool ForceHideCompletion { get; }
    public UrlStringAutomaticCodeCompletionStrategy(ISettingsStore settingsStore);
    public sealed virtual PsiLanguageType get_Language();
    public sealed virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public sealed virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore settingsStore);
    public sealed virtual bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public sealed virtual bool AcceptsFile(IFile file, ITextControl textControl);
    public sealed virtual bool get_ForceHideCompletion();
}
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.CodeCompletion.UrlQueryParameterCodeCompletionContext : SpecificCodeCompletionContext {
    [CompilerGeneratedAttribute]
private UrlPath <UrlPath>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ValueTuple`2<PartiallyKnownString, PartiallyKnownString> <CurrentQueryParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <CurrentSegmentPartRange>k__BackingField;
    [CompilerGeneratedAttribute]
private PartiallyKnownStringPartStringLiteralSource <CurrentSegmentPartSource>k__BackingField;
    public UrlPath UrlPath { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ValueTuple`2<PartiallyKnownString, PartiallyKnownString> CurrentQueryParameter { get; }
    public DocumentRange CurrentSegmentPartRange { get; }
    public PartiallyKnownStringPartStringLiteralSource CurrentSegmentPartSource { get; }
    public string ContextId { get; }
    public UrlQueryParameterCodeCompletionContext(CodeCompletionContext context, UrlPath urlPath, ValueTuple`2<PartiallyKnownString, PartiallyKnownString> currentQueryParameter, DocumentRange currentSegmentPartRange, PartiallyKnownStringPartStringLiteralSource currentSegmentPartSource);
    [CompilerGeneratedAttribute]
public UrlPath get_UrlPath();
    [CompilerGeneratedAttribute]
public ValueTuple`2<PartiallyKnownString, PartiallyKnownString> get_CurrentQueryParameter();
    [CompilerGeneratedAttribute]
public DocumentRange get_CurrentSegmentPartRange();
    [CompilerGeneratedAttribute]
public PartiallyKnownStringPartStringLiteralSource get_CurrentSegmentPartSource();
    public virtual string get_ContextId();
}
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.CodeCompletion.UrlSegmentCodeCompletionContext : SpecificCodeCompletionContext {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<HttpVerb> <ExpectedVerbs>k__BackingField;
    [CompilerGeneratedAttribute]
private UrlPath <UrlPath>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <CurrentSegmentPartRange>k__BackingField;
    [CompilerGeneratedAttribute]
private PartiallyKnownStringPartStringLiteralSource <CurrentSegmentPartSource>k__BackingField;
    public IReadOnlyList`1<HttpVerb> ExpectedVerbs { get; }
    public UrlPath UrlPath { get; }
    public DocumentRange CurrentSegmentPartRange { get; }
    public PartiallyKnownStringPartStringLiteralSource CurrentSegmentPartSource { get; }
    public string ContextId { get; }
    public UrlSegmentCodeCompletionContext(CodeCompletionContext context, IReadOnlyList`1<HttpVerb> expectedVerbs, UrlPath urlPath, DocumentRange currentSegmentPartRange, PartiallyKnownStringPartStringLiteralSource currentSegmentPartSource);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<HttpVerb> get_ExpectedVerbs();
    [CompilerGeneratedAttribute]
public UrlPath get_UrlPath();
    [CompilerGeneratedAttribute]
public DocumentRange get_CurrentSegmentPartRange();
    [CompilerGeneratedAttribute]
public PartiallyKnownStringPartStringLiteralSource get_CurrentSegmentPartSource();
    public virtual string get_ContextId();
}
public interface JetBrains.ReSharper.Feature.Services.Web.UriStrings.DeclaredElements.IUrlQueryParameterDeclaredElement {
    public UrlPath Path { get; }
    public abstract virtual UrlPath get_Path();
}
public interface JetBrains.ReSharper.Feature.Services.Web.UriStrings.DeclaredElements.IUrlSegmentDeclaredElement {
    public UrlPath Path { get; }
    public abstract virtual UrlPath get_Path();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Web.UriStrings.DeclaredElements.UrlPathDeclaredElementsExtensions : object {
    [ExtensionAttribute]
[PureAttribute]
public static IUrlSegmentDeclaredElement ReplaceLastSegment(IUrlSegmentDeclaredElement declaredElement, string value);
    [ExtensionAttribute]
public static IReadOnlyList`1<IEndpointsTreeNode> FindMatchedNodes(IUrlSegmentDeclaredElement declaredElement);
    [ExtensionAttribute]
public static IReadOnlyList`1<IEndpointsTreeNode> FindMatchedNodes(IUrlQueryParameterDeclaredElement declaredElement);
    [ExtensionAttribute]
public static IReadOnlyList`1<UrlPath> GetPathsWithQueryParameter(IParameter parameter);
    [ExtensionAttribute]
public static ICollection`1<IEndpointQueryParameter> FindMatchingParameters(IUrlQueryParameterDeclaredElement declaredElement);
    [ExtensionAttribute]
public static IReadOnlyList`1<IEndpointsTreeNode> FindMatchedNodes(UrlPath urlPath, ISolution solution, UrlPathMatchingMode matchingMode);
}
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.DeclaredElements.UrlQueryParameterDeclaredElement : object {
    private IPsiServices myPsiServices;
    [CompilerGeneratedAttribute]
private UrlPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    public UrlPath Path { get; }
    public string ShortName { get; }
    public bool CaseSensitiveName { get; }
    public PsiLanguageType PresentationLanguage { get; }
    public UrlQueryParameterDeclaredElement(IPsiServices psiServices, UrlPath path, string parameterName);
    [CompilerGeneratedAttribute]
public sealed virtual UrlPath get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ShortName();
    public sealed virtual bool get_CaseSensitiveName();
    public sealed virtual PsiLanguageType get_PresentationLanguage();
    public sealed virtual DeclaredElementType GetElementType();
    public sealed virtual bool IsValid();
    public sealed virtual bool IsSynthetic();
    public sealed virtual IList`1<IDeclaration> GetDeclarations();
    public sealed virtual IList`1<IDeclaration> GetDeclarationsIn(IPsiSourceFile sourceFile);
    public sealed virtual HybridCollection`1<IPsiSourceFile> GetSourceFiles();
    public sealed virtual bool HasDeclarationsIn(IPsiSourceFile sourceFile);
    public sealed virtual IPsiServices GetPsiServices();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public sealed virtual XmlNode GetXMLDescriptionSummary(bool inherit);
    protected bool Equals(UrlQueryParameterDeclaredElement other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Web.UriStrings.DeclaredElements.UrlQueryParameterUtil : object {
    [ExtensionAttribute]
public static bool IsFromQuery(IParameter parameter);
}
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.DeclaredElements.UrlSegmentDeclaredElement : object {
    private IPsiServices myPsiServices;
    [CompilerGeneratedAttribute]
private UrlPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    public UrlPath Path { get; }
    public string ShortName { get; }
    public bool CaseSensitiveName { get; }
    public PsiLanguageType PresentationLanguage { get; }
    public UrlSegmentDeclaredElement(IPsiServices psiServices, UrlPath path);
    [CompilerGeneratedAttribute]
public sealed virtual UrlPath get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ShortName();
    public sealed virtual bool get_CaseSensitiveName();
    public sealed virtual PsiLanguageType get_PresentationLanguage();
    public sealed virtual DeclaredElementType GetElementType();
    public sealed virtual bool IsValid();
    public sealed virtual bool IsSynthetic();
    public sealed virtual IList`1<IDeclaration> GetDeclarations();
    public sealed virtual IList`1<IDeclaration> GetDeclarationsIn(IPsiSourceFile sourceFile);
    public sealed virtual HybridCollection`1<IPsiSourceFile> GetSourceFiles();
    public sealed virtual bool HasDeclarationsIn(IPsiSourceFile sourceFile);
    public sealed virtual IPsiServices GetPsiServices();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public sealed virtual XmlNode GetXMLDescriptionSummary(bool inherit);
    protected bool Equals(UrlSegmentDeclaredElement other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CodeAnnotationProviderAttribute("0")]
internal class JetBrains.ReSharper.Feature.Services.Web.UriStrings.JetBrainsUriStringAnnotationProvider : CodeAnnotationInfoProvider`2<IAttributesOwner, IReadOnlyList`1<HttpVerb>> {
    private static string AttributeShortName;
    public static IReadOnlyList`1<HttpVerb> AnyHttpVerb;
    public JetBrainsUriStringAnnotationProvider(AttributeInstancesProvider attributeInstancesProvider, CodeAnnotationsConfiguration codeAnnotationsConfiguration);
    private static JetBrainsUriStringAnnotationProvider();
    protected virtual IReadOnlyList`1<HttpVerb> CalculateInfo(IAttributesOwner attributesOwner, IEnumerable`1<IAttributeInstance> attributeInstances);
    [NullableContextAttribute("2")]
protected virtual IReadOnlyList`1<HttpVerb> GetDefaultInfo(IAttributesOwner attributesOwner);
}
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.ParsedUrlString : object {
    [CompilerGeneratedAttribute]
private PartiallyKnownString <Scheme>k__BackingField;
    [CompilerGeneratedAttribute]
private PartiallyKnownString <Authority>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PartiallyKnownString> <Path>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<ValueTuple`2<PartiallyKnownString, PartiallyKnownString>> <QueryParameters>k__BackingField;
    private static string SchemeSeparator;
    private static string QuerySeparator;
    private static string PathSeparator;
    [CanBeNullAttribute]
public PartiallyKnownString Scheme { get; }
    [CanBeNullAttribute]
public PartiallyKnownString Authority { get; }
    public IReadOnlyList`1<PartiallyKnownString> Path { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<ValueTuple`2<PartiallyKnownString, PartiallyKnownString>> QueryParameters { get; }
    public ParsedUrlString(PartiallyKnownString scheme, PartiallyKnownString authority, IReadOnlyList`1<PartiallyKnownString> path, IReadOnlyList`1<ValueTuple`2<PartiallyKnownString, PartiallyKnownString>> queryParameters);
    [CompilerGeneratedAttribute]
public PartiallyKnownString get_Scheme();
    [CompilerGeneratedAttribute]
public PartiallyKnownString get_Authority();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<PartiallyKnownString> get_Path();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ValueTuple`2<PartiallyKnownString, PartiallyKnownString>> get_QueryParameters();
    [ContractAnnotationAttribute("null => null")]
public static ParsedUrlString FromExpression(IExpression expression);
    private static IReadOnlyList`1<ValueTuple`2<PartiallyKnownString, PartiallyKnownString>> SplitQueryParameters(PartiallyKnownString queryParametersString);
    private static bool TrySplitUrl(PartiallyKnownString url, PartiallyKnownString& scheme, PartiallyKnownString& path, PartiallyKnownString& query);
    private static bool TrySplitQuery(PartiallyKnownString url, PartiallyKnownString& path, PartiallyKnownString& query);
    private static bool TrySplitScheme(PartiallyKnownString url, PartiallyKnownString& scheme, PartiallyKnownString& path);
}
[ReferenceProviderFactoryAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.References.CSharpUrlPartsReferenceProviderFactory : object {
    [CompilerGeneratedAttribute]
private ISignal`1<IReferenceProviderFactory> <Changed>k__BackingField;
    public ISignal`1<IReferenceProviderFactory> Changed { get; }
    public sealed virtual IReferenceFactory CreateFactory(IPsiSourceFile sourceFile, IFile file, IWordIndex wordIndexForChecks);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IReferenceProviderFactory> get_Changed();
}
public interface JetBrains.ReSharper.Feature.Services.Web.UriStrings.References.IUrlPartReference {
}
public interface JetBrains.ReSharper.Feature.Services.Web.UriStrings.References.IUrlQueryParameterReference {
}
public interface JetBrains.ReSharper.Feature.Services.Web.UriStrings.References.IUrlSegmentReference {
}
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.References.UrlPartsReferenceFactory : object {
    private static Key`1<IReferenceNameContainer> ourMethodsWithUriStringNames;
    private static UrlPartsReferenceFactory();
    public sealed virtual ReferenceCollection GetReferences(ITreeNode element, ReferenceCollection oldReferences);
    protected void TryAddReference(IArgument argument, List`1<IUrlPartReference> references, PartiallyKnownString currentSegment, UrlPath urlPath, Func`5<IArgument, UrlPath, ITokenNode, TreeTextRange, IUrlPartReference> createReference);
    public sealed virtual bool HasReference(ITreeNode element, IReferenceNameContainer names);
    private bool CanContainUriStringReference(IArgument argument);
    private IReferenceNameContainer GetAllPossibleMethodNames(ITreeNode treeNode);
}
internal class JetBrains.ReSharper.Feature.Services.Web.UriStrings.References.UrlQueryParameterReference : ReferenceWithinElementBase`2<IArgument, ITokenNode> {
    private UrlPath myPath;
    public UrlQueryParameterReference(IArgument argument, UrlPath path, ITokenNode sourceLiteral, TreeTextRange range);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
}
internal class JetBrains.ReSharper.Feature.Services.Web.UriStrings.References.UrlSegmentReference : ReferenceWithinElementBase`2<IArgument, ITokenNode> {
    private UrlPath myPath;
    public UrlSegmentReference(IArgument argument, UrlPath path, ITokenNode sourceLiteral, TreeTextRange range);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public virtual string GetName();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.UriStringAnnotationProvider : object {
    private JetBrainsUriStringAnnotationProvider myJetBrainsUriStringAnnotationProvider;
    private StringSyntaxAnnotationProvider myStringSyntaxAnnotationProvider;
    public UriStringAnnotationProvider(IPsiServices psiServices);
    public static UriStringAnnotationProvider GetInstance(ITreeNode context);
    public IReadOnlyList`1<HttpVerb> GetHttpVerbs(IAttributesOwner attributesOwner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PsiSharedComponentAttribute]
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.UriStringAnnotationWatcher : object {
    public static IClrTypeName UriStringAttribute;
    private static IClrTypeName[] ourAttributesToWatch;
    public IEnumerable`1<IClrTypeName> AttributeClrNamesToWatch { get; }
    private static UriStringAnnotationWatcher();
    public sealed virtual IEnumerable`1<IClrTypeName> get_AttributeClrNamesToWatch();
}
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.UrlPaths.CompositeUrlPathSegment : UrlPathSegment {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<UrlPathSegment> <Segments>k__BackingField;
    public IReadOnlyList`1<UrlPathSegment> Segments { get; }
    public CompositeUrlPathSegment(IReadOnlyList`1<UrlPathSegment> segments);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<UrlPathSegment> get_Segments();
    protected bool Equals(CompositeUrlPathSegment other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.UrlPaths.EmptyUrlPathSegment : UrlPathSegment {
    public static EmptyUrlPathSegment Instance;
    private static EmptyUrlPathSegment();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.UrlPaths.ExactUrlPathSegment : UrlPathSegment {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    public ExactUrlPathSegment(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    public virtual string ToString();
    protected bool Equals(ExactUrlPathSegment other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.UrlPaths.UnknownUrlPathSegment : UrlPathSegment {
    public static UnknownUrlPathSegment Instance;
    private static UnknownUrlPathSegment();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.UrlPaths.UrlPath : object {
    [CompilerGeneratedAttribute]
private string <Scheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Authority>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<UrlPathSegment> <PathSegments>k__BackingField;
    public string Scheme { get; }
    public string Authority { get; }
    public IReadOnlyList`1<UrlPathSegment> PathSegments { get; }
    private UrlPath(string scheme, string authority, IReadOnlyList`1<UrlPathSegment> pathSegments);
    public UrlPath WithScheme(string scheme);
    public UrlPath WithScheme(PartiallyKnownString scheme);
    public UrlPath WithAuthority(string authority);
    public UrlPath WithAuthority(PartiallyKnownString authority);
    public UrlPath WithoutLastSegment();
    public UrlPath AddSegment(UrlPathSegment segment);
    public UrlPath AddSegment(PartiallyKnownString segment);
    public UrlPath WithSegments(IEnumerable`1<UrlPathSegment> segments);
    public UrlPath WithSegments(IEnumerable`1<PartiallyKnownString> segments);
    protected bool Equals(UrlPath other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public string get_Scheme();
    [CompilerGeneratedAttribute]
public string get_Authority();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<UrlPathSegment> get_PathSegments();
    public bool HasPrefix(UrlPath pattern);
    public bool Matches(UrlPath pattern);
}
public static class JetBrains.ReSharper.Feature.Services.Web.UriStrings.UrlPaths.UrlPathBuilderUtil : object {
    public static IReadOnlyCollection`1<UrlPath> BuildUrlPaths(IPsiModule psiModule, IClass controller, AspNetHttpEndpointRoutePart[] parts);
    public static IReadOnlyCollection`1<UrlPath> BuildUrlPaths(IPsiModule psiModule, IClass controller, IMethod action, AspNetHttpEndpointRoutePart[] parts);
    public static UrlPathSegment BuildSegment(AspNetHttpRouteSegment aspNetHttpRouteSegment);
    private static UrlPathSegment BuildSegmentPart(IRouteTemplateSegmentPart arg);
    public static UrlPath BuildUrlPath(IEnumerable`1<AspNetHttpEndpointRoutePart> routeParts);
    public static UrlPath BuildUrlPath(AspNetHttpEndpointRoutePart routePart);
}
public abstract class JetBrains.ReSharper.Feature.Services.Web.UriStrings.UrlPaths.UrlPathSegment : object {
    public static UrlPathSegment FromPartiallyKnownString(PartiallyKnownString segment);
    public static UrlPathSegment FromSegments(List`1<UrlPathSegment> segments);
    private static UrlPathSegment BuildUrlSegmentPart(IPartiallyKnownStringPart segmentPart);
    public bool Matches(UrlPathSegment patternPathSegment);
}
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.UrlPaths.VariableUrlPathSegment : UrlPathSegment {
    [CompilerGeneratedAttribute]
private string <VariableName>k__BackingField;
    public string VariableName { get; }
    public VariableUrlPathSegment(string variableName);
    [CompilerGeneratedAttribute]
public string get_VariableName();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.Util.AspNetHttpUrlSegmentMatcher : object {
    public sealed virtual RouteSegmentMatchResult Match(IRouteSegment routeSegment, UrlPathSegment urlSegment);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Web.UriStrings.Util.EndpointsTreeNodeMatcherUtil : object {
    [ExtensionAttribute]
public static IReadOnlyList`1<IHttpEndpointsTreeNode> FindMatchedNodes(IHttpEndpointsTreeNode root, UrlPath urlPath, UrlPathMatchingMode matchingMode);
    [ExtensionAttribute]
public static IReadOnlyList`1<IEndpointsTreeNode> FindMatchedNodes(IEndpointsTreeNode root, UrlPath urlPath, UrlPathMatchingMode matchingMode);
    private static void Match(IEndpointsTreeNode treeNode, EndpointsToUriMatcherContext context);
}
public interface JetBrains.ReSharper.Feature.Services.Web.UriStrings.Util.IUrlSegmentMatcher {
    public abstract virtual RouteSegmentMatchResult Match(IRouteSegment routeSegment, UrlPathSegment urlSegment);
}
public enum JetBrains.ReSharper.Feature.Services.Web.UriStrings.Util.RouteSegmentMatchResult : Enum {
    public int value__;
    public static RouteSegmentMatchResult NoMatch;
    public static RouteSegmentMatchResult Strict;
    public static RouteSegmentMatchResult Wildcard;
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Feature.Services.Web.UriStrings.Util.UrlPathMatchingMode : Enum {
    public int value__;
    public static UrlPathMatchingMode Any;
    public static UrlPathMatchingMode StrictLastSegment;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Web.UriStrings.Util.UrlSegmentMatchingUtil : object {
    [ExtensionAttribute]
public static RouteSegmentMatchResult Match(IRouteSegment routeSegment, UrlPathSegment urlSegment, ISolution solution);
    private static IEnumerable`1<IUrlSegmentMatcher> GetAllHelpers(ISolution solution);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Web.UriStrings.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.WinRT.LanguageImpl.JavaScriptWinRTLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Web.WinRT.CustomReferences.JavaScriptWinRTFileReferenceBinder : JavaScriptFileReferenceBinder {
    public virtual string GetTargetPath(PathReferenceBase`2<TOwner, TToken> reference, IPathDeclaredElement pathDeclaredElement);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.WinRT.LanguageImpl.JavaScriptWinRTLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Web.WinRT.ReferencedCode.WinRTReferencedCodeSearchHelper : object {
    public sealed virtual bool RemoveNamespaceImport(ITreeNode importNamespaceNode);
    public sealed virtual ICollection`1<NamespaceImportData> GetNamespaceImportsList(IFile file);
    public sealed virtual ICollection`1<Pair`2<IReference, IDeclaredElement>> GetUpdatedTargets(IReference reference, IDeclaredElement target);
    public sealed virtual IDeclaredElement ProvideDeclaredElementsFromResolve(IReference reference, IResolveResult resolveResult);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Web.WinRT.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Web.ZoneMarker : object {
}
internal class JetBrains.ReSharper.Feature.Services.WebConfig.CodeStructure.GrouppedPropertyCodeStructureElement : CodeStructureDeclarationElement {
    public GrouppedPropertyCodeStructureElement(ProfileCodeStructureElement element, IGroupNameAttribute attribute);
}
internal class JetBrains.ReSharper.Feature.Services.WebConfig.CodeStructure.ProfileCodeStructureElement : CodeStructureDeclarationElement {
    public ProfileCodeStructureElement(CodeStructureElement parent, IProfileTag profile);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Web.WebConfig.WebConfigLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.WebConfig.CodeStructure.WebConfigCodeStructureProvider : XmlCodeStructureProvider {
    protected virtual void CreateElement(CodeStructureElement parent, IXmlTag xmlTag);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Web.WebConfig.WebConfigLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.WebConfig.ReferencedCode.WebConfigReferencedCodeSearchHelper : object {
    public sealed virtual bool RemoveNamespaceImport(ITreeNode importNamespaceNode);
    public sealed virtual ICollection`1<NamespaceImportData> GetNamespaceImportsList(IFile file);
    public sealed virtual ICollection`1<Pair`2<IReference, IDeclaredElement>> GetUpdatedTargets(IReference reference, IDeclaredElement target);
    public sealed virtual IDeclaredElement ProvideDeclaredElementsFromResolve(IReference reference, IResolveResult resolveResult);
}
public static class JetBrains.ReSharper.Feature.Services.WebConfig.SelectEmbracingConstruct.SelectEmbracingConstructUtil : object {
    public static TreeTextRange FindParentLocalRangeByTypeInfo(ParsedTypeInfo typeInfo, TreeTextRange locRange);
}
internal class JetBrains.ReSharper.Feature.Services.WebConfig.SelectEmbracingConstruct.WebConfigDotSelection : XmlDotSelection {
    private WebConfigSelectEmbracingConstructProvider myProvider;
    public WebConfigDotSelection(WebConfigSelectEmbracingConstructProvider provider, IWebConfigFile fileNode, TreeOffset offset, bool selectBetterToken, bool useCamelHumps, bool appendInjectedPsi);
    protected virtual ISelectedRange CreateTokenPartSelection(ITokenNode tokenNode, TreeTextRange treeTextRange);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Web.WebConfig.WebConfigLanguage", "16")]
internal class JetBrains.ReSharper.Feature.Services.WebConfig.SelectEmbracingConstruct.WebConfigSelectEmbracingConstructProvider : XmlSelectEmbracingConstructProvider {
    public WebConfigSelectEmbracingConstructProvider(ISettingsStore settingsStore);
    protected virtual ISelectedRange CreateDotSelection(IXmlFile fileNode, TreeOffset treeOffset, bool selectBetterToken, bool doUseCamelHumps, bool appendInjectedPsi);
}
internal class JetBrains.ReSharper.Feature.Services.WebConfig.SelectEmbracingConstruct.WebConfigTokenPartSelection : XmlTokenPartSelection {
    private WebConfigSelectEmbracingConstructProvider myProvider;
    public ISelectedRange Parent { get; }
    public WebConfigTokenPartSelection(WebConfigSelectEmbracingConstructProvider provider, IXmlFile fileNode, TreeTextRange range, ITokenNode token);
    public virtual ISelectedRange get_Parent();
    protected virtual ISelectedRange CreateTokenPartSelection(IXmlFile fileNode, TreeTextRange range, ITokenNode token);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.WebConfig.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
