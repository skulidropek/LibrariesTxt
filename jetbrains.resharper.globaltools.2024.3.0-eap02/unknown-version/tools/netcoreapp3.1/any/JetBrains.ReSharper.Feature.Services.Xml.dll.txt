public class JetBrains.ReSharper.Feature.Services.Xml.AssemblyReferenceClass_PsiFeaturesFeatureServicesXml : AssemblyReferenceClass_PlatformIde {
}
public interface JetBrains.ReSharper.Feature.Services.Xml.Bulbs.IXmlContextActionProvider {
    public abstract virtual TreeTextRange[] GetTagNameRanges(IXmlTag tagToReplace);
    public abstract virtual DocumentRange[] GetTagNameDocumentRanges(IXmlTag tagToReplace);
    public abstract virtual ICollection`1<string> GetSuggestedNames(IXmlTag tagToReplace);
}
[ContextActionDataBuilderAttribute("JetBrains.ReSharper.Feature.Services.Xml.Bulbs.XmlContextActionDataProvider", "16")]
internal class JetBrains.ReSharper.Feature.Services.Xml.Bulbs.XmlContextActionDataBuilder : ContextActionDataBuilderBase`2<XmlLanguage, IXmlFile> {
    public virtual IContextActionDataProvider BuildFromPsi(ISolution solution, ITextControl textControl, IXmlFile psiFile);
}
public class JetBrains.ReSharper.Feature.Services.Xml.Bulbs.XmlContextActionDataProvider : CachedContextActionDataProviderBase`1<IXmlFile> {
    [NotNullAttribute]
public IXmlContextActionProvider ContextActionProvider;
    [NotNullAttribute]
public XmlTokenTypes XmlTokenTypes;
    public XmlContextActionDataProvider(ISolution solution, ITextControl textControl, IXmlFile xmlFile, IXmlContextActionProvider contextActionProvider);
    [CanBeNullAttribute]
public TTreeNode FindNodeAtCaret();
    [CanBeNullAttribute]
public TReference FindReferenceAtCaret();
    public bool IsInRealProject();
    [CanBeNullAttribute]
public virtual XmlContextActionDataProvider TryTranslateToCurrentFork(IContentModelForkTranslator translator);
    [CompilerGeneratedAttribute]
private bool <FindReferenceAtCaret>b__4_0(TReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xml.Bulbs.XmlContextActionProvider : object {
    public virtual TreeTextRange[] GetTagNameRanges(IXmlTag tagToReplace);
    public sealed virtual DocumentRange[] GetTagNameDocumentRanges(IXmlTag tagToReplace);
    public virtual ICollection`1<string> GetSuggestedNames(IXmlTag tagToReplace);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Xml.Clipboard.XmlCopyPasteAssist : XmlCopyPasteAssistBase {
    [NotNullAttribute]
private PsiLanguageType myLanguage;
    public XmlCopyPasteAssist(XmlLanguage xmlLanguage);
    public virtual CutOrCopySourceInfo GetSourceContext(string rawSourceText, ITreeNode treeNode, DocumentRange copyRange);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Xml.Clipboard.XmlCopyPasteAssist/<GetEscapedRanges>d__3")]
protected virtual IEnumerable`1<DocumentRange> GetEscapedRanges(ITreeNode treeNode);
    protected virtual bool IsEscapingAvailableForNode(ITreeNode treeNode, DocumentRange documentRange, Nullable`1& quotes);
    protected virtual bool IsAssistAvailableForAttributeValue(IXmlAttribute attributeNode, ITreeNode treeNode, DocumentRange documentRange, Nullable`1& quotes);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Xml.Clipboard.XmlCopyPasteAssist/<GetEntityNodes>d__6")]
private static IEnumerable`1<Tuple`2<IXmlTreeNode, TreeTextRange>> GetEntityNodes(ITreeNode treeNode);
    private static bool IsAssistAvailableForTextNode(IXmlFloatingTextTokenNode floatingTextNode);
    private static bool ContainsNonWhitespaceText(IEnumerable`1<ITreeNode> siblings);
    private static bool IsAssistAvailableForXmlTagEndToken(IXmlTagEndTokenNode tagEndNode, DocumentRange documentRange);
    private static bool IsAssistAvailableForEntityToken(IXmlEntityTokenNode xmlEntityToken, DocumentRange documentRange);
    private bool IsAssistAvailableForXmlTag(IXmlTag xmlTag, DocumentRange documentRange);
}
public abstract class JetBrains.ReSharper.Feature.Services.Xml.Clipboard.XmlCopyPasteAssistBase : object {
    [NotNullAttribute]
private PsiLanguageType myLanguage;
    protected XmlCopyPasteAssistBase(PsiLanguageType language);
    public sealed virtual bool EscapePastedRegion(CutOrCopySourceInfo context, string pastedText, ITreeNode pasteTargetNode, DocumentRange pasteRange, String& suggestedEscapeText);
    [NotNullAttribute]
private string GetEscapedText(CutOrCopySourceInfo context, string pastedText, ITreeNode treeNode, DocumentRange documentRange);
    public abstract virtual CutOrCopySourceInfo GetSourceContext(string rawSourceText, ITreeNode treeNode, DocumentRange copyRange);
    [NotNullAttribute]
protected string EscapePastedText(CutOrCopySourceInfo context, string pastedText, Nullable`1<char> quotes);
    protected bool DoesRangeIntersectWithEscapedSequence(ITreeNode treeNode, DocumentRange documentRange);
    protected abstract virtual IEnumerable`1<DocumentRange> GetEscapedRanges(ITreeNode treeNode);
    protected abstract virtual bool IsEscapingAvailableForNode(ITreeNode treeNode, DocumentRange documentRange, Nullable`1& quotes);
}
[CodeCleanupModuleAttribute]
public class JetBrains.ReSharper.Feature.Services.Xml.CodeCleanup.XmlReformatCleanupModule : object {
    public static CodeCleanupOptionDescriptor`1<bool> Descriptor;
    public string Name { get; }
    public PsiLanguageType LanguageType { get; }
    public ICollection`1<CodeCleanupOptionDescriptor> Descriptors { get; }
    public bool IsAvailableOnSelection { get; }
    private static XmlReformatCleanupModule();
    public sealed virtual string get_Name();
    public sealed virtual PsiLanguageType get_LanguageType();
    public sealed virtual ICollection`1<CodeCleanupOptionDescriptor> get_Descriptors();
    public sealed virtual bool get_IsAvailableOnSelection();
    public sealed virtual void SetDefaultSetting(CodeCleanupProfile profile, DefaultProfileType profileType);
    private static IXmlFile GetXmlFile(IPsiSourceFile sourceFile);
    public sealed virtual bool IsAvailable(IPsiSourceFile sourceFile);
    public sealed virtual bool IsAvailable(CodeCleanupProfile profile);
    public sealed virtual void Process(IPsiSourceFile sourceFile, IRangeMarker rangeMarker, CodeCleanupProfile profile, IProgressIndicator progressIndicator, IUserDataHolder cache);
}
public class JetBrains.ReSharper.Feature.Services.Xml.CodeStructure.XmlCodeStructureElement`1 : CodeStructureElement {
    [NotNullAttribute]
private ITreeNodePointer`1<TXmlTag> myTagPointer;
    [NotNullAttribute]
private XmlTagAspects`1<TXmlTag> myAspect;
    private DocumentRange myDocumentRange;
    [CompilerGeneratedAttribute]
private IconId <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private PsiLanguageType <Language>k__BackingField;
    public TXmlTag Tag { get; }
    [CanBeNullAttribute]
public IconId Image { get; }
    public ITreeNode TreeNode { get; }
    public PsiLanguageType Language { get; }
    public XmlCodeStructureElement`1(CodeStructureElement parent, TXmlTag tag, IconId image, bool showFirstAttributeAsKey);
    public TXmlTag get_Tag();
    [CompilerGeneratedAttribute]
public IconId get_Image();
    public virtual ITreeNode get_TreeNode();
    [CompilerGeneratedAttribute]
public virtual PsiLanguageType get_Language();
    public virtual IFileStructureAspect GetFileStructureAspect();
    public virtual IGotoFileMemberAspect GetGotoMemberAspect();
    public virtual IMemberNavigationAspect GetMemberNavigationAspect();
    public virtual DocumentRange GetTextRange();
    protected virtual void DumpSelf(TextWriter builder);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xml.CodeStructure.XmlCodeStructureProvider : object {
    public virtual CodeStructureRootElement Build(IFile file, CodeStructureOptions options);
    protected virtual void ProcessTagContainer(CodeStructureElement parent, IXmlTagContainer tagContainer);
    protected virtual CodeStructureRootElement CreateRootElement(IXmlFile file);
    protected virtual void CreateElement(CodeStructureElement parent, IXmlTag xmlTag);
}
public class JetBrains.ReSharper.Feature.Services.Xml.CodeStructure.XmlCodeStructureRootElement : CodeStructureRootElement {
    public IXmlFile File { get; }
    public XmlCodeStructureRootElement(IXmlFile file);
    public IXmlFile get_File();
}
public static class JetBrains.ReSharper.Feature.Services.Xml.CodeStructure.XmlCodeStructureUtil : object {
    public static String[] KEY_ATTRIBUTES;
    private static XmlCodeStructureUtil();
    public static IList`1<DocumentRange> GetTagNavigationRanges(IXmlTag tag);
    public static RichText GetXmlTagPresentationText(TTag tag, IXmlAttribute keyAttribute);
}
public class JetBrains.ReSharper.Feature.Services.Xml.CodeStructure.XmlDeclarationTagCodeStructureElement`1 : XmlCodeStructureElement`1<T> {
    [CanBeNullAttribute]
private CodeStructureDeclarationAspects myAspect;
    public XmlDeclarationTagCodeStructureElement`1(CodeStructureElement parent, T tag);
    public virtual IFileStructureAspect GetFileStructureAspect();
    public virtual IGotoFileMemberAspect GetGotoMemberAspect();
    public virtual IMemberNavigationAspect GetMemberNavigationAspect();
}
public class JetBrains.ReSharper.Feature.Services.Xml.CodeStructure.XmlTagAspects`1 : object {
    public static String[] KEY_ATTRIBUTES;
    [NotNullAttribute]
private TXmlTag myTag;
    [CanBeNullAttribute]
private IconId myImage;
    private bool myShowFirstAttributeAsKey;
    [NotNullAttribute]
private IList`1<string> myQuickSearch;
    public TXmlTag Tag { get; }
    public bool InitiallyExpanded { get; }
    public DocumentRange NavigationRange { get; }
    public XmlTagAspects`1(TXmlTag tag, IconId image, bool showFirstAttributeAsKey);
    private static XmlTagAspects`1();
    public TXmlTag get_Tag();
    protected virtual DocumentRange GetNameDocumentRange();
    public virtual void Present(StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    public sealed virtual bool get_InitiallyExpanded();
    public sealed virtual bool CanMoveElements(RelativeLocation location, IList`1<CodeStructureElement> dropElements);
    public sealed virtual void MoveElements(RelativeLocation location, IList`1<CodeStructureElement> dropElements);
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.CodeStructure.IFileStructureAspect.CanRemove();
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.CodeStructure.IFileStructureAspect.Remove();
    public sealed virtual bool CanRename();
    public sealed virtual string InitialName();
    public sealed virtual void Rename(string newName);
    public virtual void Present(IMenuItemDescriptor descriptor, PresentationState state);
    public sealed virtual DocumentRange get_NavigationRange();
    public sealed virtual IList`1<string> GetQuickSearchTexts();
    public sealed virtual IPsiSourceFile GetSourceFile();
    [PureAttribute]
public virtual IList`1<string> CalculateQuickSearchTexts();
    public virtual DocumentRange[] GetNavigationRanges();
    [CanBeNullAttribute]
protected virtual IXmlAttribute GetKeyAttribute();
    [NotNullAttribute]
public virtual RichText GetXmlTagPresentationText(TXmlTag tag, IXmlAttribute keyAttribute);
    public virtual IList`1<DocumentRange> GetTagNavigationRanges(TXmlTag tag);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xml.Comment.XmlBlockCommentActionProvider : object {
    private XmlTokenTypes myXmlTokenTypes;
    public string NestedStartBlockCommentMarker { get; }
    public string NestedEndBlockCommentMarker { get; }
    public string StartBlockCommentMarker { get; }
    public string EndBlockCommentMarker { get; }
    public XmlBlockCommentActionProvider(XmlTokenTypes xmlTokenTypes);
    public sealed virtual string get_NestedStartBlockCommentMarker();
    public sealed virtual string get_NestedEndBlockCommentMarker();
    public sealed virtual string get_StartBlockCommentMarker();
    public sealed virtual string get_EndBlockCommentMarker();
    public sealed virtual DocumentOffset InsertBlockCommentPosition(ITokenNode tokenNode, DocumentOffset position);
    public sealed virtual bool IsAvailable(IFile file, DocumentRange range, Boolean& disableAllProviders);
    public sealed virtual DocumentRange GetBlockComment(ITokenNode tokenNode);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xml.Comment.XmlCommentOrDirectiveInserter : CommentOrDirectiveInserterBase {
    public XmlCommentOrDirectiveInserter(PsiLanguageType languageType, IBlockCommentActionProvider blockCommentActionProvider);
    public virtual bool Insert(TreeTextRange treeRange, IFile file, string actionName, string insertBefore, string insertAfter);
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.Comment.ICommentOrDirectiveInserter.InsertBlockComment(TreeTextRange treeRange, IFile file, string actionName, string insertBefore, string insertAfter);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xml.Comment.XmlLineCommentActionProvider : object {
    private XmlTokenTypes myTokenTypes;
    public string StartLineCommentMarker { get; }
    public string EndLineCommentMarker { get; }
    public XmlLineCommentActionProvider(XmlTokenTypes tokenTypes);
    public sealed virtual string get_StartLineCommentMarker();
    public sealed virtual string get_EndLineCommentMarker();
    public sealed virtual bool ShouldInsertAtLineStart(IContextBoundSettingsStore settingsStore);
    public sealed virtual bool ShouldInsertSpaceAtCommentStartAndEnd(IContextBoundSettingsStore settingsStore);
    public sealed virtual LineCommentRangeInfo GetLineCommentRange(IFile psiFile, DocumentRange lineRange);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Xml.DataConstants.XmlDataRules : object {
    public XmlDataRules(Lifetime lifetime, IActionManager actionman);
    private static ICollection`1<IDeclaredElement> GetDeclaredElements(IDataContext context);
    private static ICollection`1<IDeclaredElement> GetTypes(string fullTypeName, IPsiModule module, bool caseSensitive);
    private static ICollection`1<IDeclaredElement> GetNamespace(string namespaceName, IPsiModule module, bool caseSensitive);
}
[OptionsPageAttribute("Xml", "XML", "JetBrains.Application.Resources.IdeThemedIcons/XmlDocument")]
public class JetBrains.ReSharper.Feature.Services.Xml.Options.XmlPage : AEmptyOptionsPage {
    public static string PID;
}
public static class JetBrains.ReSharper.Feature.Services.Xml.Options.XmlTypingAssistOptions`1 : object {
    public static Expression`1<Func`2<TSettings, bool>> ChangeTagNameTracking;
    private static XmlTypingAssistOptions`1();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Xml.Options.ZoneMarker : object {
}
public class JetBrains.ReSharper.Feature.Services.Xml.RearrangeCode.RearrangeableAttribute : RearrangeableElementAppendRemove`2<IXmlAttribute, IXmlTag> {
    protected IXmlTag Parent { get; }
    public Direction SupportedDirections { get; }
    public RearrangeableAttribute(IXmlAttribute attribute);
    protected virtual IXmlTag get_Parent();
    public virtual Direction get_SupportedDirections();
    protected virtual IEnumerable`1<IXmlAttribute> GetChildren(IXmlTag parent);
    protected virtual void RemoveChild(IXmlTag parent, IXmlAttribute child);
    protected virtual IXmlAttribute AddBefore(IXmlTag parent, IXmlAttribute child, IXmlAttribute anchor);
    protected virtual IXmlAttribute AddAfter(IXmlTag parent, IXmlAttribute child, IXmlAttribute anchor);
}
public class JetBrains.ReSharper.Feature.Services.Xml.RearrangeCode.RearrangeableTag : RearrangeableElement {
    [CompilerGeneratedAttribute]
private IXmlTag <XmlTag>k__BackingField;
    [NotNullAttribute]
protected IXmlTag XmlTag { get; }
    public string Title { get; }
    protected ITreeNode Element { get; }
    public Direction SupportedDirections { get; }
    public RearrangeableTag(IXmlTag tag);
    [CompilerGeneratedAttribute]
protected IXmlTag get_XmlTag();
    public virtual string get_Title();
    protected virtual ITreeNode get_Element();
    public virtual Direction get_SupportedDirections();
    public virtual bool CanMove(Direction direction);
    protected virtual ITreeNode MoveUnderPsiTransaction(Direction direction);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Feature.Services.Xml.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string CodeCleanupTask_XMLReformatCode { get; }
    public static string SynchronousChangingOfMatchingTagSettingDescription { get; }
    public static string XMLOptionPageTitle { get; }
    public static string XmlReformatCleanupModule_Name_Reformat_XML { get; }
    public static string XMLTypingAssistanceSettingsSettingDescription { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_CodeCleanupTask_XMLReformatCode();
    public static string get_SynchronousChangingOfMatchingTagSettingDescription();
    public static string get_XMLOptionPageTitle();
    public static string get_XmlReformatCleanupModule_Name_Reformat_XML();
    public static string get_XMLTypingAssistanceSettingsSettingDescription();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.DtdLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xml.SelectEmbracingConstruct.DtdSelectEmbracingConstructProvider : XmlSelectEmbracingConstructProvider {
    public DtdSelectEmbracingConstructProvider(ISettingsStore settingsStore);
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Feature.Services.Xml.SelectEmbracingConstruct.NodePart : ValueType {
    public ITreeNode Node;
    public TreeTextRange Range;
    public NodePart(ITreeNode node);
    public NodePart(ITreeNode node, TreeTextRange range);
}
public class JetBrains.ReSharper.Feature.Services.Xml.SelectEmbracingConstruct.XmlDotSelection : DotSelection`1<IXmlFile> {
    private XmlSelectEmbracingConstructProvider myProvider;
    [CompilerGeneratedAttribute]
private XmlTokenTypes <XmlTokenType>k__BackingField;
    protected XmlTokenTypes XmlTokenType { get; }
    public XmlDotSelection(XmlSelectEmbracingConstructProvider provider, IXmlFile fileNode, TreeOffset offset, bool selectBetterToken, bool useCamelHumps, bool appendInjectedPsi);
    [CompilerGeneratedAttribute]
protected XmlTokenTypes get_XmlTokenType();
    protected virtual ISelectedRange GetParentInternal(ITokenNode tokenNode);
    protected virtual ISelectedRange CreateTokenPartSelection(ITokenNode tokenNode, TreeTextRange treeTextRange);
    protected virtual ISelectedRange CreateTreeNodeSelection(ITokenNode tokenNode);
    protected virtual bool IsWordToken(ITokenNode token);
    protected virtual bool IsLiteralToken(ITokenNode token);
    protected virtual bool IsSpaceToken(ITokenNode token);
    protected virtual bool IsNewLineToken(ITokenNode token);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xml.SelectEmbracingConstruct.XmlSelectEmbracingConstructProvider : object {
    private ISettingsStore mySettingsStore;
    public XmlSelectEmbracingConstructProvider(ISettingsStore settingsStore);
    public virtual bool IsAvailable(IPsiSourceFile sourceFile);
    public virtual ISelectedRange GetSelectedRange(IPsiSourceFile sourceFile, DocumentRange documentRange);
    protected virtual ISelectedRange CreateDotSelection(IXmlFile fileNode, TreeOffset treeOffset, bool selectBetterToken, bool doUseCamelHumps, bool appendInjectedPsi);
    protected bool DoUseCamelHumps(ITreeNode fileNode);
    public virtual ISelectedRange BuildCommentSelection(IXmlFile fileNode, ITreeNode node);
    public virtual ISelectedRange ExtendSelectionRange(IXmlFile fileNode, ITreeNode first, ITreeNode last);
    private static bool IsNewLine(XmlTokenTypes xmlTypes, ITreeNode node);
    private static bool IsWhitespace(ITreeNode node);
    public virtual ISelectedRange BuildTreeNodeSelection(IXmlFile fileNode, ITreeNode node);
}
public class JetBrains.ReSharper.Feature.Services.Xml.SelectEmbracingConstruct.XmlTokenPartSelection : TokenPartSelection`1<IXmlFile> {
    private XmlSelectEmbracingConstructProvider myProvider;
    protected XmlTokenTypes myXmlTokenType;
    public ISelectedRange Parent { get; }
    public XmlTokenPartSelection(XmlSelectEmbracingConstructProvider provider, IXmlFile fileNode, TreeTextRange range, ITokenNode token);
    public virtual ISelectedRange get_Parent();
    protected virtual ISelectedRange CreateTokenPartSelection(IXmlFile fileNode, TreeTextRange range, ITokenNode token);
    protected static bool BufferEndsWith(IBuffer buffer, string s);
}
public class JetBrains.ReSharper.Feature.Services.Xml.SelectEmbracingConstruct.XmlTreeNodeSelection : TreeNodeSelection`1<IXmlFile> {
    private XmlSelectEmbracingConstructProvider myProvider;
    public ISelectedRange Parent { get; }
    public XmlTreeNodeSelection(XmlSelectEmbracingConstructProvider provider, IXmlFile fileNode, ITreeNode node);
    public virtual ISelectedRange get_Parent();
}
public class JetBrains.ReSharper.Feature.Services.Xml.SelectEmbracingConstruct.XmlTreeRangeSelection : TreeRangeSelection`1<IXmlFile> {
    private XmlSelectEmbracingConstructProvider myProvider;
    public ISelectedRange Parent { get; }
    public XmlTreeRangeSelection(XmlSelectEmbracingConstructProvider provider, IXmlFile fileNode, ITreeNode first, ITreeNode last);
    public virtual ISelectedRange get_Parent();
}
public class JetBrains.ReSharper.Feature.Services.Xml.SelectEmbracingConstruct.XmlTreeRangeWithPartsSelection : SelectedRangeBase`1<IXmlFile> {
    private XmlSelectEmbracingConstructProvider myProvider;
    private NodePart myFirst;
    private NodePart myLast;
    public ExtendToTheWholeLinePolicy ExtendToWholeLine { get; }
    public ISelectedRange Parent { get; }
    public XmlTreeRangeWithPartsSelection(XmlSelectEmbracingConstructProvider provider, IXmlFile fileNode, NodePart first, NodePart last);
    public virtual ExtendToTheWholeLinePolicy get_ExtendToWholeLine();
    public virtual ITreeRange TryGetTreeRange();
    public virtual ISelectedRange get_Parent();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xml.StructuralNavigation.XmlStructuralNavigationManager : object {
    public sealed virtual IStructuralNavigationItem MoveToNext(StructuralNavigationContextBase context);
    public sealed virtual IStructuralNavigationItem MoveToPrev(StructuralNavigationContextBase context);
    [CanBeNullAttribute]
protected virtual IStructuralNavigationItem GetNextSelection(StructuralNavigationContextBase context);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Feature.Services.Xml.StructuralNavigation.XmlStructuralNavigationStringTokenDisabler : object {
    public sealed virtual bool IsKnownToken(TokenNodeType tokenNodeType, ProjectFileType projectFileType);
    public sealed virtual bool IsWithinStringLiteralContent(CachingLexer lexer, TextRange selectedRange);
    public sealed virtual bool IsWithinCommentBody(ILexer lexer, TextRange selectedRange);
    private static bool SelectionBordersWithinToken(ILexer lexer, TextRange selectedRange);
}
public class JetBrains.ReSharper.Feature.Services.Xml.StructuralNavigation.XmlStructuralNavigationVisitor : XmlTreeVisitor`2<StructuralNavigationContextBase, StructuralNavigationContextBase> {
    public virtual StructuralNavigationContextBase Visit(IXmlAttribute attribute, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase Visit(IXmlIdentifier token, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase Visit(IXmlTagFooter footer, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase Visit(IXmlAttributeValue attribute, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase Visit(IXmlCData cData, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase Visit(IXmlCommentNode comment, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase Visit(IProcessingInstruction instruction, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase Visit(IXmlTag tag, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase Visit(IXmlTagEndTokenNode token, StructuralNavigationContextBase context);
    public virtual StructuralNavigationContextBase VisitTokenNode(IXmlToken token, StructuralNavigationContextBase context);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Xml.StructuralNavigation.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xml.TodoItems.XmlTodoContentsProvider : DefaultTodoContentsProvider {
    private XmlTokenTypes myXmlTokenTypes;
    public XmlTodoContentsProvider(XmlTokenTypes xmlTokenTypes);
    public virtual Nullable`1<TextRange> GetTokenContentsRange(string documentText, TextRange tokenRange, TokenNodeType tokenType);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Xml.TypingAssist.ChangedTagNameTracker : object {
    public static Key UseLexerForTestsKey;
    private static Key`1<TagMarkers> ourTagMarkersDataKey;
    private ISolution mySolution;
    private ISettingsStore mySettingsStore;
    private ICommandProcessor myCommandProcessor;
    private CachingLexerService myCachingLexerService;
    private IShellLocks myShellLocks;
    private IActionManager myActionManager;
    private IEnsureWritableHandler myEnsureWritableHandler;
    private DocumentManager myDocumentManager;
    private ILookupWindowManager myLookupWindowManager;
    private IPsiFiles myPsiFiles;
    private LanguageManager myLanguageManager;
    private SequentialLifetimes myEscapeLifetimes;
    public ChangedTagNameTracker(ISolution solution, ISettingsStore settingsStore, CachingLexerService cachingLexerService, ICommandProcessor commandProcessor, TextControlTypingHandlers textControlTypingHandlers, Lifetime lifetime, ITextControlManager textControlManager, IShellLocks shellLocks, IActionManager actionManager, IEnsureWritableHandler ensureWritableHandler, DocumentManager documentManager, ILookupWindowManager lookupWindowManager, IPsiFiles psiFiles, LanguageManager languageManager, ChangeManager changeManager, ITypingAssistManager typingAssistManager);
    private static ChangedTagNameTracker();
    private void AddRemoveTextControl(AddRemoveEventArgs`1<ITextControl> addRemoveEventArgs);
    private void OnChange(ChangeEventArgs args);
    [CanBeNullAttribute]
private TagMarkers CreateNewMarkers(ITextControl textControl, int caretPosition);
    private TagMarkers CalculateNewMarkersInternal(ITextControl textControl, int caretPosition, IDocument document);
    protected virtual MarkerFindResults FindMarkersViaPsi(IPsiSourceFile sourceFile, ITextControl textControl, int caretPosition);
    protected virtual MarkerFindResults FindMarkersViaLexer(ITextControl textControl, int caretPosition);
    protected CachingLexer GetCachingLexer(ITextControl textControl);
    protected bool IsAvailable(ITextControl textControl, IPsiSourceFile sourceFile);
    [MustUseReturnValueAttribute]
[CanBeNullAttribute]
private Action HandleAction(ITextControl textControl, Func`2<TextRange, TextRange> selRangeConverter, bool shouldReCheckAfterNoMarkers);
    private bool ActionHandler(IActionContext context);
    private static bool IsTagNameChar(char c);
    private void Type(ITypingContext typingContext);
    private void SetMarkers(IDocument document, TagMarkers tagMarkers);
    private void RemoveMarkers(IDocument document);
    public static void ProcessMarkers(ISolution solution, ITextControl textControl, Action action);
    public sealed virtual bool QuickCheckAvailability(ITextControl textControl, IPsiSourceFile projectFile);
    [CompilerGeneratedAttribute]
private void <SetMarkers>b__28_0(Lifetime lifetime);
}
public interface JetBrains.ReSharper.Feature.Services.Xml.TypingAssist.IXmlChangedTagNameTrackerSettingsProvider {
    public abstract virtual bool IsAvailable(ITextControl textControl, IPsiSourceFile sourceFile, ISettingsStore settingsStore);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xml.TypingAssist.XmlChangedTagNameTrackerSettingsProvider : object {
    public virtual bool IsAvailable(ITextControl textControl, IPsiSourceFile sourceFile, ISettingsStore settingsStore);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Xml.TypingAssist.XmlTypingAssist : TypingAssistLanguageBase`1<XmlLanguage> {
    public XmlTypingAssist(Lifetime lifetime, TypingAssistDependencies dependencies);
    protected virtual bool IsSupported(ITextControl textControl);
    public sealed virtual bool QuickCheckAvailability(ITextControl textControl, IPsiSourceFile projectFile);
    private bool HandleDelPressed(IActionContext context);
    private bool HandleBackspacePressed(IActionContext context);
    protected virtual IndentTypingHelper`1<XmlLanguage> GetIndentTypingHelper();
    private bool HandleEnterPressed(IActionContext context);
    private bool ConvertAttributeToTag(IActionContext context);
    private bool HandleQuoteTyped(ITypingContext typingContext);
    protected bool HandleSlash(ITypingContext typingContext);
    private bool HandleClosingBracket(ITypingContext typingContext);
    protected bool DoHandleEnterAfterHeaderPressed(ITextControl textControl);
    protected bool FormatTag(ITextControl textControl, IFile file, IXmlTreeNode headerNode, IXmlTreeNode footerNode, XmlTokenTypes tokenTypes, IXmlTag parentTag, bool afterHeader);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Xml.TypingAssist.ZoneMarker : object {
}
public class JetBrains.ReSharper.Feature.Services.Xml.Util.TypingAssistUtil : object {
    public static TagNameContainerInfo GetTagNameContainerInfo(CachingLexer lexer, XmlTokenTypes xmlTokens);
    public static bool GetHeaderByFooter(CachingLexer lexer, XmlTokenTypes xmlTokens, TagNameContainerInfo footer);
    public static bool GetFooterByHeader(CachingLexer lexer, XmlTokenTypes xmlTokens, TagNameContainerInfo header);
    public static bool IsRealTagHeader(CachingLexer lexer, XmlTokenTypes xmlTokens);
    public static bool InsideTagHeader(CachingLexer lexer, XmlTokenTypes xmlTokens, ITextControl textControl);
}
public static class JetBrains.ReSharper.Feature.Services.Xml.Util.XmlContextUtil : object {
    private static void GetTagNames(IXmlTagContainer tagContainer, JetHashSet`1<string> tagNames);
    private static void GetAttributeNames(IXmlTagContainer tagContainer, string tagName, JetHashSet`1<string> attributeNames);
    public static ICollection`1<string> GetTagNames(IXmlFile file);
    public static ICollection`1<string> GetAttributeNames(IXmlFile file, string tagName);
}
public class JetBrains.ReSharper.Feature.Services.Xml.Util.XmlParserUtil : object {
    public static XmlFile ParseXmlFile(string stringData, ISolution solution);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xml.XmlEntities.XmlEntitiesNodeTypeSet : object {
    [CompilerGeneratedAttribute]
private NodeTypeSet <AllowedTokens>k__BackingField;
    public NodeTypeSet AllowedTokens { get; protected set; }
    public XmlEntitiesNodeTypeSet(XmlTokenTypes tokenTypes);
    [CompilerGeneratedAttribute]
public NodeTypeSet get_AllowedTokens();
    [CompilerGeneratedAttribute]
protected void set_AllowedTokens(NodeTypeSet value);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Xml.XmlEntities.XmlEntitiesWalker : object {
    private NodeTypeSet myPossibleEntitityTokens;
    private XmlTokenTypes myTokenTypes;
    private NodeTypeSet myEntityTypes;
    public XmlEntitiesWalker(XmlTokenTypes tokenTypes, XmlEntitiesNodeTypeSet htmlEntitiesNodeTypeSet);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Xml.XmlEntities.XmlEntitiesWalker/<GetXmlEntitiesData>d__4")]
public IEnumerable`1<Tuple`2<IXmlTreeNode, TreeTextRange>> GetXmlEntitiesData(IXmlToken node);
}
public class JetBrains.ReSharper.Feature.Services.Xml.XmlEntities.XmlEntity : object {
    [CompilerGeneratedAttribute]
private string <NamedEntity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Symbol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNumeric>k__BackingField;
    private static BidirectionalMapOnCompactMap`2<string, string> ourNamedEntityValueMap;
    private static Char[] ourHexadecimalMarker;
    public string NamedEntity { get; }
    [CanBeNullAttribute]
public string Symbol { get; }
    public string EntityName { get; }
    public bool IsNumeric { get; }
    public string NumericEntity { get; }
    public string HexNumericEntity { get; }
    public XmlEntity(IXmlTreeNode entity);
    private static XmlEntity();
    [CompilerGeneratedAttribute]
public string get_NamedEntity();
    [CompilerGeneratedAttribute]
public string get_Symbol();
    [CompilerGeneratedAttribute]
public string get_EntityName();
    [CompilerGeneratedAttribute]
public bool get_IsNumeric();
    public string get_NumericEntity();
    public string get_HexNumericEntity();
    private static string ParseNumericEntity(IXmlTreeNode[] entities);
    private static Nullable`1<char> ParseSingleNumericEntity(IXmlTreeNode numericEntity);
    public sealed virtual bool Equals(XmlEntity other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.Options.TypingAssistSettings", "JetBrains.ReSharper.Feature.Services.Xml.Resources.Strings", "XMLTypingAssistanceSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.Xml.XmlTypingAssistSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Xml.Resources.Strings", "SynchronousChangingOfMatchingTagSettingDescription")]
public bool ChangedTagNameTracking;
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Xml.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
