[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class InspectionToolWindowEmptyContent : ToolWindowEmptyContentWithActionHint {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
private InspectionToolWindowEmptyContent(InspectionToolWindowEmptyContent original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(InspectionToolWindowEmptyContent left, InspectionToolWindowEmptyContent right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(InspectionToolWindowEmptyContent left, InspectionToolWindowEmptyContent right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ToolWindowEmptyContentWithActionHint other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(InspectionToolWindowEmptyContent other);
    [CompilerGeneratedAttribute]
public virtual AAutomationRecord <Clone>$();
}
public class JetBrains.FeatureSuggestion.FeatureSuggestionThemedIcons : object {
}
[SettingsKeyAttribute("JetBrains.ReSharper.Resources.Settings.CodeInspectionSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "CqrsSettingsKeyDescription")]
public class JetBrains.ReSharper.Daemon.Cqrs.CqrsCustomSuffixOptions : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "CustomCqrsSuffixSettingsDescription")]
public bool EnableCustomSuffix;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "CqrsCommandSuffixDescription")]
public string CqrsCommandSuffix;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "CqrsQuerySuffixDescription")]
public string CqrsQuerySuffix;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "CqrsCommandHandlerSuffixDescription")]
public string CqrsCommandHandlerSuffix;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "CqrsQueryHandlerSuffixDescription")]
public string CqrsQueryHandlerSuffix;
}
[SettingsKeyAttribute("JetBrains.ReSharper.Resources.Settings.CodeInspectionSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "CqrsSettingsKeyDescription")]
public class JetBrains.ReSharper.Daemon.Cqrs.CqrsGeneralOptions : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "EnableCqrsDescription")]
public bool EnableCqrsValidation;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WheaterToCheckCompiledCode")]
public bool EnabledAnalyzeUsageOfCompiledCode;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToSearchCqrsByNameDescription")]
public bool WhetherToSearchCqrsByName;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "EnabledCqrsNamingRecommendationDescription")]
public bool EnabledCqrsNamingRecommendation;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "EnableDebugMarksHighlightingDescription")]
public bool EnableDebugMarksHighlighting;
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.Cqrs.CqrsGeneralOptionsRegistrar : object {
    public CqrsGeneralOptionsRegistrar(CqrsOptionsStore optionsStore, ISettingsStore settingsStore);
}
[OptionsPageAttribute("CqrsValidationSettings", "CQRS Validation", "JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/Cqrs")]
public class JetBrains.ReSharper.Daemon.Cqrs.CqrsOptionsPage : BeSimpleOptionsPage {
    public static string PID;
    private List`1<BeTextBox> mySuffixTextBoxes;
    public CqrsOptionsPage(Lifetime lifetime, OptionsPageContext optionsPageContext, OptionsSettingsSmartContext optionsSettingsSmartContext, IconHostBase iconHostBase, IShellLocks shellLocks, IUIApplication environment, bool wrapInScrollablePanel);
    private void AddSuffixWithValidation(Lifetime lifetime, Expression`1<Func`2<TKeyClass, string>> lambdaExpression, string text, IProperty`1<bool> enableCustomSuffix);
    [CompilerGeneratedAttribute]
internal static bool <AddSuffixWithValidation>g__ValidateSuffix|3_3(string str);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Daemon.Cqrs.CqrsOptionsStore : object {
    private JetHashSet`1<SettingsKey> mySettingsKeysToRehighlight;
    public CqrsOptionsStore(Lifetime lifetime, ISettingsStore settingsStore, HighlightingSettingsManager highlightingSettingsManager);
    public bool IsCqrsOptionsChanged(SettingsStoreChangeArgs args);
    public void RegisterSettingsKeyToRehighlightVisibleDocumentOnItsChange(SettingsKey settingsKey);
}
public static class JetBrains.ReSharper.Daemon.Cqrs.CqrsSettingsAccessor : object {
    public static Expression`1<Func`2<CqrsGeneralOptions, bool>> Enabled;
    public static Expression`1<Func`2<CqrsGeneralOptions, bool>> EnabledAnalyzeUsageOfCompiledCode;
    public static Expression`1<Func`2<CqrsGeneralOptions, bool>> EnabledCqrsNamingRecommendation;
    public static Expression`1<Func`2<CqrsGeneralOptions, bool>> EnabledSearchByName;
    public static Expression`1<Func`2<CqrsCustomSuffixOptions, bool>> EnableCustomSuffix;
    public static Expression`1<Func`2<CqrsCustomSuffixOptions, string>> CqrsCommandSuffix;
    public static Expression`1<Func`2<CqrsCustomSuffixOptions, string>> CqrsQuerySuffix;
    public static Expression`1<Func`2<CqrsCustomSuffixOptions, string>> CqrsCommandHandlerSuffix;
    public static Expression`1<Func`2<CqrsCustomSuffixOptions, string>> CqrsQueryHandlerSuffix;
    public static Expression`1<Func`2<CqrsGeneralOptions, bool>> EnabledDebugMarks;
    private static CqrsSettingsAccessor();
}
[OptionsPageAttribute("InternalCqrsOptionsPage", "InternalCqrsOptionsPage", "JetBrains.Application.Resources.IdeThemedIcons/InternalPage")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Daemon.Cqrs.InternalCqrsOptionsPage : BeSimpleOptionsPage {
    public static string PID;
    public InternalCqrsOptionsPage(Lifetime lifetime, OptionsPageContext optionsPageContext, OptionsSettingsSmartContext optionsSettingsSmartContext, bool wrapInScrollablePanel);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Daemon.Cqrs.ZoneMarker : object {
}
public class JetBrains.ReSharper.Daemon.DaemonTooltipProviderAttribute : Attribute {
    private Type myType;
    public Type Type { get; }
    public DaemonTooltipProviderAttribute(Type type);
    public Type get_Type();
}
internal class JetBrains.ReSharper.Daemon.IAmHere : object {
}
public static class JetBrains.ReSharper.Feature.Services.Actions.ActionWithFallbackHelper : object {
    [MustUseReturnValueAttribute]
public static bool HasReSharperPsi(IDataContext context, IPsiSourceFile sourceFile);
    [MustUseReturnValueAttribute]
public static bool HasNoReSharperPsi(IDataContext context);
    [MustUseReturnValueAttribute]
public static bool HasReSharperPsi(IDataContext context);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Actions.AddReferenceNavigationHandler : AddReferenceNavigationHandlerDefault {
    public virtual void OnReferenceAdded(IProjectToModuleReference reference);
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.ReSharper.Feature.Services.Actions.CodeStructureContextMenuActionGroup : object {
    public CodeStructureContextMenuActionGroup(CodeEntityFeaturesActionGroup codeEntityFeatures);
}
public class JetBrains.ReSharper.Feature.Services.Actions.CurrentPsiFileRequirement : CurrentPsiFileRequirementBase {
    protected IProperty`1<bool> CachesReadyAbstract { get; }
    private CurrentPsiFileRequirement(IPsiServices psiServices, SynchronizationPoints synchronizationPoints, InputData inputData);
    public CurrentPsiFileRequirement(IPsiServices psiServices, SynchronizationPoints synchronizationPoints, IPsiSourceFile[] files);
    public CurrentPsiFileRequirement(IPsiServices psiServices, SynchronizationPoints synchronizationPoints, IPsiSourceFile file);
    public CurrentPsiFileRequirement(IPsiServices psiServices, SynchronizationPoints synchronizationPoints, IPsiSourceFile file, DocumentOffset caretOffset);
    [NotNullAttribute]
public static IActionRequirement FromDataContext(IDataContext dataContext);
    protected virtual IProperty`1<bool> get_CachesReadyAbstract();
}
public abstract class JetBrains.ReSharper.Feature.Services.Actions.CurrentPsiFileRequirementBase : object {
    protected IPsiServices myPsiServices;
    private Signal`1<RequirementState> myDoneSignal;
    private ILogger myLogger;
    private static long ourLogCounter;
    private long myLogCounter;
    protected InputData myInput;
    private SynchronizationPoint mySynchronizationPoint;
    private int myHashCode;
    protected IProperty`1<bool> CachesReadyAbstract { get; }
    protected bool PsiIsReady { get; }
    public bool IsReady { get; }
    public ISignal`1<RequirementState> Done { get; }
    public string Description { get; }
    protected CurrentPsiFileRequirementBase(IPsiServices psiServices, SynchronizationPoints synchronizationPoints, InputData input);
    protected abstract virtual IProperty`1<bool> get_CachesReadyAbstract();
    protected bool get_PsiIsReady();
    public sealed virtual bool get_IsReady();
    protected virtual bool IsReadyWhenPsiComplete();
    protected virtual void GetReadyWhenPsiComplete();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private int CalculateHashCode();
    public sealed virtual void GetReady();
    protected virtual void TestGetReady();
    private void OpenChameleon(IPsiSourceFile sourceFile, IReadOnlyCollection`1<IFile> psiFiles);
    public sealed virtual ISignal`1<RequirementState> get_Done();
    public virtual string get_Description();
    protected static InputData GetInputDataFromDataContext(IDataContext dataContext, ISolution solution);
    [CompilerGeneratedAttribute]
private void <GetReady>b__22_0(LifetimeDefinition asyncLifetimeDefinition);
    [CompilerGeneratedAttribute]
private void <GetReady>b__22_6();
    [CompilerGeneratedAttribute]
private void <GetReady>b__22_7();
    [CompilerGeneratedAttribute]
private void <GetReady>b__22_8();
    [CompilerGeneratedAttribute]
private void <GetReady>b__22_1();
}
public class JetBrains.ReSharper.Feature.Services.Actions.CurrentPsiFileRequirementNoCaches : CurrentPsiFileRequirementBase {
    private Property`1<bool> myCachesReadyAbstract;
    protected IProperty`1<bool> CachesReadyAbstract { get; }
    protected CurrentPsiFileRequirementNoCaches(IPsiServices psiServices, SynchronizationPoints synchronizationPoints, InputData inputData);
    public CurrentPsiFileRequirementNoCaches(IPsiServices psiServices, SynchronizationPoints synchronizationPoints, IPsiSourceFile file, DocumentOffset offset);
    [NotNullAttribute]
public static IActionRequirement FromDataContext(IDataContext dataContext);
    protected virtual IProperty`1<bool> get_CachesReadyAbstract();
}
public class JetBrains.ReSharper.Feature.Services.Actions.HideVsMenuWhenHasReSharperPsiActionBase : object {
    public sealed virtual bool ShouldFallBack(IDataContext context);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public interface JetBrains.ReSharper.Feature.Services.Actions.ILanguageSpecificPsiAvailabilityHelper {
    public abstract virtual bool IsPsiAvailable(IDataContext context, IPsiSourceFile sourceFile);
}
[ActionGroupAttribute("2", "10")]
public class JetBrains.ReSharper.Feature.Services.Actions.IntoSolutionItemGroup : object {
    public IntoSolutionItemGroup(IntoSolutionItemGroup_Editor editor, Separator sep0, IntoSolutionItemGroup_Find find, Separator sep1, IntoSolutionItemGroup_Hierarchies hierarchies, Separator sep2, IntoSolutionItemGroup_Modify modify, Separator sep3, IntoSolutionItemGroup_Test test, Separator sep4, IntoSolutionItemGroup_Misc misc);
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Actions.IntoSolutionItemGroup_Editor : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Actions.IntoSolutionItemGroup_Find : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Actions.IntoSolutionItemGroup_Hierarchies : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Actions.IntoSolutionItemGroup_Hierarchies_Project : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Actions.IntoSolutionItemGroup_Misc : object {
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.ReSharper.Feature.Services.Actions.IntoSolutionItemGroup_Modify : object {
    public IntoSolutionItemGroup_Modify(RefactorFilesActionGroup refactorFiles, EditProjectItemPropertiesAction editProjectItemProperties);
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Actions.IntoSolutionItemGroup_Modify_Project : object {
}
[ActionGroupAttribute("2", "10")]
public class JetBrains.ReSharper.Feature.Services.Actions.IntoSolutionItemGroup_Project : object {
    public IntoSolutionItemGroup_Project(IntoSolutionItemGroup_Editor editor, Separator sep0, IntoSolutionItemGroup_Find find, Separator sep1, IntoSolutionItemGroup_Hierarchies hierarchies, IntoSolutionItemGroup_Hierarchies_Project hierarchies1, Separator sep2, IntoSolutionItemGroup_Modify modify, IntoSolutionItemGroup_Modify_Project modify1, Separator sep3, IntoSolutionItemGroup_Test test, Separator sep4, IntoSolutionItemGroup_Misc misc);
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Actions.IntoSolutionItemGroup_Test : object {
}
[ActionGroupAttribute("2", "10")]
public class JetBrains.ReSharper.Feature.Services.Actions.IntoWorkspaceExplorerContextMenuGroup : object {
    public IntoWorkspaceExplorerContextMenuGroup(IntoSolutionItemGroup_Editor editor, Separator sep0, IntoSolutionItemGroup_Find find, Separator sep1, IntoSolutionItemGroup_Hierarchies hierarchies, IntoSolutionItemGroup_Hierarchies_Project hierarchies1, Separator sep2, IntoSolutionItemGroup_Modify modify, IntoSolutionItemGroup_Modify_Project modify1, Separator sep3, IntoSolutionItemGroup_Test test, Separator sep4, IntoSolutionItemGroup_Misc misc);
}
[ActionGroupAttribute("1", "16")]
public class JetBrains.ReSharper.Feature.Services.Actions.RefactorFilesActionGroup : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IPresentableAction.Update(IDataContext context, ActionPresentation actionPresentation);
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Actions.RefactorMemberActionGroup : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Actions.RefactorTypeActionGroup : object {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Actions.ServicesActionEvaluator : ExecutableActionEvaluator {
    public ServicesActionEvaluator(Lifetime lifetime, RequirementsManager requirementsManager, IShellLocks locks);
    public virtual void Evaluate(IAction handler, EvaluatedAction result, IDataContext context);
}
public class JetBrains.ReSharper.Feature.Services.Actions.ToggleBooleanSettingActionBase`1 : object {
    private string myText;
    private Expression`1<Func`2<TSettings, bool>> myOption;
    public ToggleBooleanSettingActionBase`1(string text, Expression`1<Func`2<TSettings, bool>> option);
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public abstract class JetBrains.ReSharper.Feature.Services.ActionsMenu.ExtensibleAction`3 : object {
    protected RichText Caption { get; }
    protected bool AssertsMenuItemsMnemonics { get; }
    protected bool ShowMenuWithOneItem { get; }
    protected abstract virtual IconId GetGroupIcon(IDataContext context);
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    [NotNullAttribute]
protected IModuleReferenceResolveContext GetResolveContext(IDataContext context, ISolution solution);
    public virtual void Execute(IDataContext dataContext, DelegateExecute nextExecute);
    protected abstract virtual ICollection`1<TWorkflowProvider> GetWorkflowProviders();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.ActionsMenu.ExtensibleAction`3/<GetWorkflowListToExecute>d__5")]
[NotNullAttribute]
protected IEnumerable`1<ValueTuple`2<TWorkflow, TWorkflowProvider>> GetWorkflowListToExecute(IDataContext dataContext);
    protected virtual int CompareWorkflowItems(ValueTuple`2<TWorkflow, TWorkflowProvider> item1, ValueTuple`2<TWorkflow, TWorkflowProvider> item2);
    private void ExecuteGroup(IDataContext context, IEnumerable`1<ValueTuple`2<TWorkflow, TWorkflowProvider>> workflows);
    protected virtual void ShowModal(IDataContext context, JetPopupMenu jetPopupMenu, LifetimeDefinition defMenu);
    protected abstract virtual RichText get_Caption();
    protected abstract virtual void Execute(IDataContext context, TWorkflow workflow);
    protected abstract virtual bool IsAvailable(IDataContext context, TWorkflow workflow);
    protected abstract virtual bool IsEnabled(IDataContext context, TWorkflow workflow);
    private RichText BuildRichText(string text);
    protected virtual bool get_AssertsMenuItemsMnemonics();
    protected virtual bool get_ShowMenuWithOneItem();
    public virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
public class JetBrains.ReSharper.Feature.Services.ActionsMenu.ExtensibleActionGroup : EnumPattern {
    [CompilerGeneratedAttribute]
private float <Order>k__BackingField;
    public float Order { get; }
    protected ExtensibleActionGroup(string name, float order);
    [CompilerGeneratedAttribute]
public float get_Order();
}
public interface JetBrains.ReSharper.Feature.Services.ActionsMenu.IOverridingWorkflowProvider {
    public abstract virtual bool HideOtherActions(IDataContext context);
}
public interface JetBrains.ReSharper.Feature.Services.ActionsMenu.IWorkflow`1 {
    [NotNullAttribute]
public string Title { get; }
    [CanBeNullAttribute]
public IconId Icon { get; }
    [CanBeNullAttribute]
public string ActionId { get; }
    public TActionGroup ActionGroup { get; }
    public abstract virtual string get_Title();
    public abstract virtual IconId get_Icon();
    public abstract virtual string get_ActionId();
    public abstract virtual TActionGroup get_ActionGroup();
}
public interface JetBrains.ReSharper.Feature.Services.ActionsMenu.IWorkflowFilter {
    public abstract virtual IEnumerable`1<TWorkflowProvider> Filter(IEnumerable`1<TWorkflowProvider> providers);
}
public interface JetBrains.ReSharper.Feature.Services.ActionsMenu.IWorkflowProvider`2 {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<TWorkflow> CreateWorkflow(IDataContext dataContext);
}
[ProtocolHandlerAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.ActiveText.ActionProtocolHandler : ProtocolHandler {
    protected virtual void NavigateNakedLink(string link, object host);
}
[ProtocolHandlerAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.ActiveText.DefaultProtocolHandler : object {
    private IUIApplicationSimple myUIApplication;
    public DefaultProtocolHandler(IUIApplicationSimple uiApplication);
    public sealed virtual void Navigate(string link, object host);
}
[ProtocolHandlerAttribute("16")]
[ProtocolHandlerAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.ActiveText.FileProtocolHandler : object {
    public sealed virtual void Navigate(string link, object host);
}
public interface JetBrains.ReSharper.Feature.Services.ActiveText.ILinkAction {
    public abstract virtual void Execute(string link);
}
public interface JetBrains.ReSharper.Feature.Services.ActiveText.IProtocolHandler {
    public abstract virtual void Navigate(string link, object host);
}
public abstract class JetBrains.ReSharper.Feature.Services.ActiveText.ProtocolHandler : object {
    private string mySchemeDelimiter;
    protected abstract virtual void NavigateNakedLink(string link, object host);
    public sealed virtual void Navigate(string link, object host);
    private string GetNakedLink(string link);
    protected static object GetProperty(string link, object host);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.ActiveText.IProtocolHandler")]
public class JetBrains.ReSharper.Feature.Services.ActiveText.ProtocolHandlerAttribute : ShellComponentAttribute {
    [CompilerGeneratedAttribute]
private string <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemeDelimiter>k__BackingField;
    public string Protocol { get; public set; }
    public string SchemeDelimiter { get; public set; }
    public ProtocolHandlerAttribute(Instantiation instantiation);
    [CompilerGeneratedAttribute]
public string get_Protocol();
    [CompilerGeneratedAttribute]
public void set_Protocol(string value);
    [CompilerGeneratedAttribute]
public string get_SchemeDelimiter();
    [CompilerGeneratedAttribute]
public void set_SchemeDelimiter(string value);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.ActiveText.ProtocolSpecific : object {
    public static string Default;
    private IDictionary`2<string, IProtocolHandler> myHandlers;
    public ProtocolSpecific(IEnumerable`1<IProtocolHandler> protocolHandlers);
    [CanBeNullAttribute]
public IProtocolHandler GetHandler(string protocol);
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.ReSharper.Feature.Services.AssemblyExplorer.AssemblyExplorerContextMenuActionGroup : object {
    public AssemblyExplorerContextMenuActionGroup(AssemblyExplorerContextMenuNavigationActionGroup navigation, AssemblyExplorerContextMenuUsagesActionGroup usages, AssemblyExplorerContextMenuNodeActionGroup node, AssemblyExplorerContextMenuInspectionActionGroup inspection, AssemblyExplorerContextMenuGenerationActionGroup generation, AssemblyExplorerContextMenuInfoActionGroup property);
}
[ActionGroupAttribute("2", "16")]
public class JetBrains.ReSharper.Feature.Services.AssemblyExplorer.AssemblyExplorerContextMenuGenerationActionGroup : object {
}
[ActionGroupAttribute("2", "10")]
public class JetBrains.ReSharper.Feature.Services.AssemblyExplorer.AssemblyExplorerContextMenuInfoActionGroup : object {
    public AssemblyExplorerContextMenuInfoActionGroup(ShowPropertiesWindowAction showPropertiesWindow);
}
[ActionGroupAttribute("2", "16")]
public class JetBrains.ReSharper.Feature.Services.AssemblyExplorer.AssemblyExplorerContextMenuInspectionActionGroup : object {
}
[ActionGroupAttribute("2", "16")]
public class JetBrains.ReSharper.Feature.Services.AssemblyExplorer.AssemblyExplorerContextMenuNavigationActionGroup : object {
}
[ActionGroupAttribute("2", "16")]
public class JetBrains.ReSharper.Feature.Services.AssemblyExplorer.AssemblyExplorerContextMenuNodeActionGroup : object {
}
[ActionGroupAttribute("2", "16")]
public class JetBrains.ReSharper.Feature.Services.AssemblyExplorer.AssemblyExplorerContextMenuUsagesActionGroup : object {
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "AssemblyExplorerSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.AssemblyExplorer.AssemblyExplorerSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "XmlDocumentRepresentingAssemblyExplorerStateSettingDescription")]
public string XmlDocument;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "UseAssemblyExplorerInsteadOfObjectBrowserByDefaultSettingDescription")]
public bool UseAssemblyExplorerByDefault;
}
public interface JetBrains.ReSharper.Feature.Services.AssemblyExplorer.INodeData {
    [NotNullAttribute]
public VirtualFileSystemPath Path { get; }
    public abstract virtual VirtualFileSystemPath get_Path();
}
public class JetBrains.ReSharper.Feature.Services.AssemblyReferenceClass_PsiFeatures_FeatureServices : object {
}
[ShellComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.AutoDetection.AutoDetectedValuesSettingsMountPoint : object {
    private IListEvents`1<ISettingsStorageMountPoint> myMountPoints;
    private ICollectionEvents`1<ISettingsStorage> myStores;
    private ICollectionEvents`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.ISettingsStorageMountPoint>.Items { get; }
    private ICollectionEvents`1<ISettingsStorage> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.Storage.ISettingsStorage>.Items { get; }
    public AutoDetectedValuesSettingsMountPoint(Lifetime lifetime);
    public void AddStorageWithMountPoint(Lifetime lifetime, ISettingsStorage storage, ISettingsStorageMountPoint mountPoint);
    public IListEvents`1<ISettingsStorageMountPoint> GetMountPoints();
    private sealed virtual override ICollectionEvents`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.ISettingsStorageMountPoint>.get_Items();
    private sealed virtual override ICollectionEvents`1<ISettingsStorage> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.Storage.ISettingsStorage>.get_Items();
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.AutoDetection.AutoDetectedValuesSettingsProvider : object {
    [CompilerGeneratedAttribute]
private IContextBoundSettingsStore <ContextBoundSettingsStore>k__BackingField;
    [CompilerGeneratedAttribute]
private OptimizedPersistentSortedMap`2<string, string> <AutoDetectedValuesVersion>k__BackingField;
    private static string myVersionDbName;
    private Action myAnyThreadInit;
    public IContextBoundSettingsStore ContextBoundSettingsStore { get; private set; }
    public OptimizedPersistentSortedMap`2<string, string> AutoDetectedValuesVersion { get; private set; }
    public AutoDetectedValuesSettingsProvider(Lifetime lifetime, AutoDetectedValuesSettingsMountPoint autoDetectedValuesSettingsMountPoint, ISolutionCaches solutionCaches, ISettingsStore settingsStore, InternKeyPathComponent interned, ILogger logger);
    private static AutoDetectedValuesSettingsProvider();
    [CompilerGeneratedAttribute]
public IContextBoundSettingsStore get_ContextBoundSettingsStore();
    [CompilerGeneratedAttribute]
private void set_ContextBoundSettingsStore(IContextBoundSettingsStore value);
    [CompilerGeneratedAttribute]
public OptimizedPersistentSortedMap`2<string, string> get_AutoDetectedValuesVersion();
    [CompilerGeneratedAttribute]
private void set_AutoDetectedValuesVersion(OptimizedPersistentSortedMap`2<string, string> value);
    public sealed virtual void InitOnAnyThread();
}
public interface JetBrains.ReSharper.Feature.Services.AutoDetection.IAutoNamingValuesProvider {
    public abstract virtual void InitializeSettings(IContextBoundSettingsStore settingsStore);
    public abstract virtual void ResetSettings(IContextBoundSettingsStore settingsStore, bool clearCache);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Bookmarks.BookmarkPersister : object {
    private IBookmarkManager myBookmarkManager;
    private ProjectModelElementPointerManager myElementPointerManager;
    private ISettingsStore mySettingsStore;
    private IContextBoundSettingsStoreLive myBoundToSolutionStorage;
    private IShellLocks myLocks;
    private Lifetime myLifetime;
    private ISolution mySolution;
    public BookmarkPersister(IShellLocks locks, Lifetime lifetime, ISolution solution, ISettingsStore settingsStore, IBookmarkManager bookmarkManager, ProjectModelElementPointerManager elementPointerManager, ISolutionLoadTasksScheduler scheduler);
    private void BookmarkMoved(MoveBookmarkEventArgs`2<IBookmarkManager, BookmarkData> args);
    private void RewriteAllBookmarks();
    private void BookmarksChanged(AddRemoveBookmarkEventArgs`2<IBookmarkManager, BookmarkData> args);
    private void SettingsChanged();
    private void SettingsChangedImpl();
    [CanBeNullAttribute]
private BookmarkData ToBookmark(NumberedBookmarksSettingsKey keyData, string bookmarkId);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Bookmarks.BookmarksHelper : object {
    private static int ourPathLimit;
    private static int ourCodeSampleRadius;
    private static DeclaredElementPresenterStyle ourElementPresenter;
    private static BookmarksHelper();
    [ExtensionAttribute]
public static IBookmarkManager GetBookmarkManager(ISolution solution);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectFile GetProjectFile(BookmarkPlacement placement, ISolution solution);
    [ExtensionAttribute]
public static IProjectFile GetProjectFile(BookmarkData data, ISolution solution);
    [ExtensionAttribute]
public static DocumentRange GetBookmarkCoordsOffset(IDocument document, DocumentCoords coords);
    [PureAttribute]
private static DocumentCoords GetInDocumentCoords(IDocument document, DocumentCoords coords);
    private static IDisposable AdviceAddRemoveBookmark(IBookmarkManager manager, string owner, Action`1<AddRemoveBookmarkEventArgs`2<IBookmarkManager, BookmarkData>> handler, AddRemove action);
    [ExtensionAttribute]
public static IDisposable AdviseAddBookmark(IBookmarkManager manager, string owner, Action`1<AddRemoveBookmarkEventArgs`2<IBookmarkManager, BookmarkData>> handler);
    [ExtensionAttribute]
public static IDisposable AdviseRemoveBookmark(IBookmarkManager manager, string owner, Action`1<AddRemoveBookmarkEventArgs`2<IBookmarkManager, BookmarkData>> handler);
    [ExtensionAttribute]
public static IDisposable AdviseMoveBookmark(IBookmarkManager manager, string owner, Action`1<MoveBookmarkEventArgs`2<IBookmarkManager, BookmarkData>> handler);
    [ExtensionAttribute]
public static void AdviseAddSpecificBookmark(TManager manager, Lifetime lifetime, Action`1<AddRemoveBookmarkEventArgs`2<TManager, TData>> handler);
    [ExtensionAttribute]
public static void AdviseRemoveSpecificBookmark(TManager manager, Lifetime lifetime, Action`1<AddRemoveBookmarkEventArgs`2<TManager, TData>> handler);
    [ExtensionAttribute]
public static IEnumerable`1<BookmarkData> GetBookmarks(IBookmarkManager manager, IProjectModelElementPointer file, Int32`1<DocLine> line);
    [ExtensionAttribute]
public static IEnumerable`1<BookmarkData> GetBookmarks(IBookmarkManager manager, IProjectFile file, Int32`1<DocLine> line);
    [ExtensionAttribute]
public static IEnumerable`1<BookmarkData> GetBookmarksForDocument(IBookmarkManager manager, string owner, IProjectModelElementPointer file);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static BookmarkData FindBookmark(IBookmarkManager manager, string id);
    [ExtensionAttribute]
public static OperationResult GoToBookmark(BookmarkDataBase`1<TKey> data, ISolution solution, PopupWindowContextSource windowContext);
    private static string TrimPath(string path, int limit);
    [ExtensionAttribute]
public static RichText FormatPlace(BookmarkPlacement placement, IProjectItem bookmarkFile, IProjectFile localFile);
    [ExtensionAttribute]
public static RichText FormatPlace(BookmarkPlacement placement, IProjectItem bookmarkFile);
    public static RichText FormatPlace(BookmarkDataBase`1<TKey> data, IProjectItem bookmarkFile, IProjectFile localFile);
    public static RichText FormatPlace(BookmarkDataBase`1<TKey> data, IProjectItem bookmarkFile);
    [ExtensionAttribute]
public static string GetDisplayName(BookmarkPlacement placement, ISolution solution);
    [ExtensionAttribute]
public static void ClearAllBookmarks(ISpecificBookmarkManager`3<TManager, TKey, TData> manager);
    [ExtensionAttribute]
public static void ClearBookmarksInDocument(ISpecificBookmarkManager`3<TManager, TKey, TData> manager, IProjectFile projectFile);
    [ExtensionAttribute]
public static void ClearBookmarksInLine(ISpecificBookmarkManager`3<TManager, TKey, TData> manager, IProjectFile projectFile, Int32`1<DocLine> line);
    [ExtensionAttribute]
public static void ClearBookmarksInLine(ISpecificBookmarkManager`3<TManager, TKey, TData> manager, IProjectModelElementPointer file, Int32`1<DocLine> line);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "BookmarksSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.Bookmarks.BookmarksSettingsKey : object {
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Feature.Services.Bookmarks.Manager.BookmarkManager : object {
    private ISolution mySolution;
    private DocumentManager myDocumentManager;
    private BookmarkCollection myBookmarks;
    private Signal`1<AddRemoveBookmarkEventArgs`2<IBookmarkManager, BookmarkData>> myAddRemoveSignal;
    private Signal`1<MoveBookmarkEventArgs`2<IBookmarkManager, BookmarkData>> myMoveSignal;
    private IDictionary`2<string, IPlacementProvider> myPlacementProviders;
    public ISignal`1<AddRemoveBookmarkEventArgs`2<IBookmarkManager, BookmarkData>> AddRemoveSignal { get; }
    public ISignal`1<MoveBookmarkEventArgs`2<IBookmarkManager, BookmarkData>> MoveSignal { get; }
    public BookmarkManager(Lifetime lifetime, ISolution solution, DocumentManager documentManager, IEnumerable`1<IPlacementProvider> placements, ChangeManager changeManager, DocumentChangeManager documentChangeManager, IShellLocks locks);
    private void AdjustBookmarks();
    public sealed virtual ISignal`1<AddRemoveBookmarkEventArgs`2<IBookmarkManager, BookmarkData>> get_AddRemoveSignal();
    public sealed virtual ISignal`1<MoveBookmarkEventArgs`2<IBookmarkManager, BookmarkData>> get_MoveSignal();
    public sealed virtual bool HasBookmarks(string owner);
    public sealed virtual bool HasBookmarks(string owner, IProjectModelElementPointer file);
    public sealed virtual bool HasBookmark(string id);
    public sealed virtual BookmarkData GetBookmark(string id);
    public sealed virtual IEnumerable`1<BookmarkData> GetBookmarksForDocument(IProjectModelElementPointer file);
    public sealed virtual IEnumerable`1<BookmarkData> GetBookmarksForOwner(string owner);
    public sealed virtual IEnumerable`1<BookmarkData> GetBookmarks();
    public sealed virtual bool IsBookmarkValid(string id);
    private IDictionary`2<string, object> GetPlacementDic(BookmarkData data);
    public sealed virtual void AddBookmark(BookmarkData data);
    public sealed virtual void MoveBookmark(string id, DocumentCoords newCoords);
    public sealed virtual void RemoveBookmark(string id);
}
public abstract class JetBrains.ReSharper.Feature.Services.Bookmarks.Manager.PlacementProviderBase`1 : object {
    protected abstract virtual TData GetPlacementData(BookmarkData markData);
    protected abstract virtual Nullable`1<DocumentCoords> FindCoords(TData placementData, IDocument document);
    protected abstract virtual string SerializeData(TData data);
    protected abstract virtual TData DeserializeData(string serialized);
    private sealed virtual override object JetBrains.ReSharper.Feature.Services.Bookmarks.Model.IPlacementProvider.GetPlacementData(BookmarkData markData);
    private sealed virtual override Nullable`1<DocumentCoords> JetBrains.ReSharper.Feature.Services.Bookmarks.Model.IPlacementProvider.FindCoords(object placementData, IDocument document);
    private sealed virtual override string JetBrains.ReSharper.Feature.Services.Bookmarks.Model.IPlacementProvider.SerializeData(object placementData);
    private sealed virtual override object JetBrains.ReSharper.Feature.Services.Bookmarks.Model.IPlacementProvider.DeserializeData(string serialized);
}
public class JetBrains.ReSharper.Feature.Services.Bookmarks.Model.AddRemoveBookmarkEventArgs`2 : BookmarkEventArgs`2<TMgr, TData> {
    private AddRemove myAction;
    public AddRemove Action { get; }
    public AddRemoveBookmarkEventArgs`2(TMgr manager, TData data, AddRemove action);
    public AddRemove get_Action();
}
public class JetBrains.ReSharper.Feature.Services.Bookmarks.Model.BookmarkData : BookmarkDataBase`1<string> {
    private string myOwner;
    private BookmarkPersistence myPersistence;
    public string Owner { get; }
    public BookmarkPersistence Persistence { get; }
    public BookmarkData(ISolution solution, BookmarkData data, DocumentCoords newCoords);
    public BookmarkData(ISolution solution, string owner, string id, IProjectModelElementPointer file, BookmarkPersistence persistence, DocumentCoords coords);
    public string get_Owner();
    public BookmarkPersistence get_Persistence();
}
public abstract class JetBrains.ReSharper.Feature.Services.Bookmarks.Model.BookmarkDataBase`1 : object {
    private TKey myBookmarkId;
    private BookmarkPlacement myPlacement;
    private IRangeMarker myRangeMarker;
    public TKey BookmarkId { get; }
    public BookmarkPlacement Placement { get; }
    [NotNullAttribute]
public IRangeMarker RangeMarker { get; }
    protected BookmarkDataBase`1(ISolution solution, TKey bookmarkId, BookmarkPlacement placement, IRangeMarker rangeMarker);
    protected BookmarkDataBase`1(ISolution solution, TKey bookmarkId, IProjectModelElementPointer file, DocumentCoords coords);
    public TKey get_BookmarkId();
    public BookmarkPlacement get_Placement();
    public IRangeMarker get_RangeMarker();
    public DocumentCoords GetLiveCoords();
}
public abstract class JetBrains.ReSharper.Feature.Services.Bookmarks.Model.BookmarkEventArgs`2 : object {
    private TMgr myManager;
    private TData myData;
    public TMgr Manager { get; }
    public TData Data { get; }
    protected BookmarkEventArgs`2(TMgr manager, TData data);
    public TMgr get_Manager();
    public TData get_Data();
}
public enum JetBrains.ReSharper.Feature.Services.Bookmarks.Model.BookmarkPersistence : Enum {
    public int value__;
    public static BookmarkPersistence NonPersistable;
    public static BookmarkPersistence Local;
    public static BookmarkPersistence Shared;
}
public class JetBrains.ReSharper.Feature.Services.Bookmarks.Model.BookmarkPlacement : object {
    private IProjectModelElementPointer myFile;
    private DocumentCoords myDocCoords;
    public IProjectModelElementPointer File { get; }
    public DocumentCoords DocCoords { get; }
    public BookmarkPlacement(IProjectModelElementPointer file, DocumentCoords docCoords);
    public IProjectModelElementPointer get_File();
    public DocumentCoords get_DocCoords();
    public sealed virtual bool Equals(BookmarkPlacement other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(BookmarkPlacement left, BookmarkPlacement right);
    public static bool op_Inequality(BookmarkPlacement left, BookmarkPlacement right);
}
public interface JetBrains.ReSharper.Feature.Services.Bookmarks.Model.IBookmarkManager {
    [NotNullAttribute]
public ISignal`1<AddRemoveBookmarkEventArgs`2<IBookmarkManager, BookmarkData>> AddRemoveSignal { get; }
    [NotNullAttribute]
public ISignal`1<MoveBookmarkEventArgs`2<IBookmarkManager, BookmarkData>> MoveSignal { get; }
    public abstract virtual ISignal`1<AddRemoveBookmarkEventArgs`2<IBookmarkManager, BookmarkData>> get_AddRemoveSignal();
    public abstract virtual ISignal`1<MoveBookmarkEventArgs`2<IBookmarkManager, BookmarkData>> get_MoveSignal();
    public abstract virtual bool HasBookmarks(string owner);
    public abstract virtual bool HasBookmarks(string owner, IProjectModelElementPointer file);
    public abstract virtual bool HasBookmark(string id);
    [NotNullAttribute]
public abstract virtual BookmarkData GetBookmark(string id);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<BookmarkData> GetBookmarksForDocument(IProjectModelElementPointer file);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<BookmarkData> GetBookmarksForOwner(string owner);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<BookmarkData> GetBookmarks();
    public abstract virtual bool IsBookmarkValid(string id);
    public abstract virtual void AddBookmark(BookmarkData data);
    public abstract virtual void MoveBookmark(string id, DocumentCoords newCoords);
    public abstract virtual void RemoveBookmark(string id);
}
public interface JetBrains.ReSharper.Feature.Services.Bookmarks.Model.IPlacementProvider {
    public abstract virtual object GetPlacementData(BookmarkData markData);
    public abstract virtual Nullable`1<DocumentCoords> FindCoords(object placementData, IDocument document);
    public abstract virtual string SerializeData(object placementData);
    public abstract virtual object DeserializeData(string serialized);
}
public interface JetBrains.ReSharper.Feature.Services.Bookmarks.Model.ISpecificBookmarkManager`3 {
    [NotNullAttribute]
public ISignal`1<AddRemoveBookmarkEventArgs`2<TManager, TData>> AddRemoveSignal { get; }
    [NotNullAttribute]
public ISignal`1<MoveBookmarkEventArgs`2<TManager, TData>> MoveSignal { get; }
    public abstract virtual ISignal`1<AddRemoveBookmarkEventArgs`2<TManager, TData>> get_AddRemoveSignal();
    public abstract virtual ISignal`1<MoveBookmarkEventArgs`2<TManager, TData>> get_MoveSignal();
    [NotNullAttribute]
public abstract virtual TData[] GetBookmarks();
    [NotNullAttribute]
public abstract virtual TData[] GetBookmarksForDocument(IProjectFile file);
    [NotNullAttribute]
public abstract virtual TData GetBookmark(TKey key);
    public abstract virtual bool RemoveBookmark(TKey key);
    public abstract virtual void MoveBookmark(TKey bookmarkKey, DocumentCoords newCoords);
}
public class JetBrains.ReSharper.Feature.Services.Bookmarks.Model.MoveBookmarkEventArgs`2 : BookmarkEventArgs`2<TManager, TData> {
    private DocumentCoords myOldCoords;
    public DocumentCoords OldCoords { get; }
    public MoveBookmarkEventArgs`2(TManager manager, TData data, DocumentCoords oldCoords);
    public DocumentCoords get_OldCoords();
}
public class JetBrains.ReSharper.Feature.Services.Bookmarks.Model.PlacementData : object {
}
public class JetBrains.ReSharper.Feature.Services.Bookmarks.Model.PlacementProviderAttribute : SolutionComponentAttribute {
    private string myProviderName;
    public string ProviderName { get; }
    public PlacementProviderAttribute(string providerName, Instantiation instantiation);
    public string get_ProviderName();
}
[SettingsIndexedKeyAttribute("JetBrains.ReSharper.Feature.Services.Bookmarks.BookmarksSettingsKey", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "BookmarksSettingsSettingDescription", "System.String")]
public class JetBrains.ReSharper.Feature.Services.Bookmarks.NumberedBookmarksSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "BookmarkOwnerSettingDescription")]
public string Owner;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "BookmarkFileIdSettingDescription")]
public string FileId;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "BookmarkCoordsInAFileSettingDescription")]
public string Coords;
}
public abstract class JetBrains.ReSharper.Feature.Services.Bookmarks.SpecificBookmarkManagerBase`3 : object {
    private ISolution mySolution;
    private string myOwnerId;
    private Signal`1<AddRemoveBookmarkEventArgs`2<TManager, TData>> myAddRemoveSignal;
    private Signal`1<MoveBookmarkEventArgs`2<TManager, TData>> myMoveSignal;
    [CompilerGeneratedAttribute]
private IBookmarkManager <BookmarkManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectModelElementPointerManager <ElementPointerManager>k__BackingField;
    protected ISolution Solution { get; }
    protected string OwnerId { get; }
    protected IBookmarkManager BookmarkManager { get; }
    protected ProjectModelElementPointerManager ElementPointerManager { get; }
    public ISignal`1<AddRemoveBookmarkEventArgs`2<TManager, TData>> AddRemoveSignal { get; }
    public ISignal`1<MoveBookmarkEventArgs`2<TManager, TData>> MoveSignal { get; }
    protected SpecificBookmarkManagerBase`3(Lifetime lifetime, ISolution solution, string ownerId, ProjectModelElementPointerManager elementPointerManager);
    protected ISolution get_Solution();
    protected string get_OwnerId();
    [CompilerGeneratedAttribute]
protected IBookmarkManager get_BookmarkManager();
    [CompilerGeneratedAttribute]
protected ProjectModelElementPointerManager get_ElementPointerManager();
    protected abstract virtual string ConvertSpecificKey(TKey specificKey);
    protected abstract virtual TData ConvertData(BookmarkData data);
    protected IEnumerable`1<TData> ConvertData(IEnumerable`1<BookmarkData> bookmarks);
    public sealed virtual ISignal`1<AddRemoveBookmarkEventArgs`2<TManager, TData>> get_AddRemoveSignal();
    public sealed virtual ISignal`1<MoveBookmarkEventArgs`2<TManager, TData>> get_MoveSignal();
    protected virtual void BookmarkRemoved(AddRemoveBookmarkEventArgs`2<IBookmarkManager, BookmarkData> args);
    protected virtual void BookmarkAdded(AddRemoveBookmarkEventArgs`2<IBookmarkManager, BookmarkData> args);
    protected virtual void BookmarkMoved(MoveBookmarkEventArgs`2<IBookmarkManager, BookmarkData> args);
    public bool HasAnyBookmark();
    public bool HasBookmarks(IProjectFile file);
    public bool HasBookmark(TKey bookmarkKey);
    public sealed virtual TData[] GetBookmarks();
    public sealed virtual TData[] GetBookmarksForDocument(IProjectFile file);
    public sealed virtual TData GetBookmark(TKey numberedBookmarkId);
    public bool IsBookmarkValid(TKey bookmarkKey);
    protected TData AddBookmark(string bookmarkKey, IProjectModelElement file, DocumentCoords coords);
    protected void AddBookmark(TKey specificBookmarkKey, IProjectModelElement file, DocumentCoords coords);
    public sealed virtual bool RemoveBookmark(TKey numberedBookmarkId);
    public sealed virtual void MoveBookmark(TKey bookmarkKey, DocumentCoords newCoords);
    [CompilerGeneratedAttribute]
private TData <ConvertData>b__17_0(BookmarkData data);
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.KnownProjectFileType", "16")]
public class JetBrains.ReSharper.Feature.Services.Breadcrumbs.BreadcrumbsHelperBase : object {
    public virtual bool IsApplicable(IDeclaration declaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Breadcrumbs.BreadcrumbsProvider : object {
    private IProjectFileTypeServices myProjectFileTypeServices;
    private ILanguageManager myLanguageManager;
    private PsiIconManager myPsiIconManager;
    private IIconHost myIconHost;
    private DeclaredElementPresenterStyle myMemberPresentationStyle;
    public BreadcrumbsProvider(IProjectFileTypeServices projectFileTypeServices, ILanguageManager languageManager, PsiIconManager psiIconManager, IconHostBase iconHost);
    public void CollectBreadcrumbs(IPsiSourceFile sourceFile, DocumentOffset documentOffset, List`1<CrumbModel> result);
    private void ProcessRecursive(IDeclaration declaration, IPsiSourceFile sourceFile, List`1<CrumbModel> result, BreadcrumbsHelperBase helper);
    private static Unit HandleNavigationRequest(IPsiSourceFile sourceFile, IDeclaration declaration, IDeclaredElement targetElement);
    private static bool ShouldPerformRangeNavigation(IPsiSourceFile sourceFile, IDeclaredElement declaredElement);
    private IDeclaration GetContainingDeclaration(ITreeNode declaration);
}
[ZoneDefinitionAttribute]
public interface JetBrains.ReSharper.Feature.Services.Breadcrumbs.IBreadcrumbsZone {
}
public interface JetBrains.ReSharper.Feature.Services.Breadcrumbs.ILanguageSpecificBreadcrumbsProvider {
    public abstract virtual IEnumerable`1<CrumbModel> CollectBreadcrumbs(IFile psiFile, DocumentOffset documentOffset);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Breadcrumbs.ZoneMarker : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.BulbActions.BulbActionCommands : object {
    [NullableContextAttribute("2")]
[PureAttribute]
public static IBulbActionCommand ShowCustomHighlighting(IReadOnlyList`1<CustomHighlightingEntry> entriesToHighlight, AutomaticHighlightingHidingPolicy hidingPolicy, IBulbActionCommand nextBulbActionCommand);
    [PureAttribute]
public static IBulbActionCommand DocumentChange(Action`1<ITextControl> action);
    [PureAttribute]
public static IBulbActionCommand DocumentChange(Func`4<ISolution, ITextControl, IProgressIndicator, IBulbActionCommand> action);
    [PureAttribute]
public static IBulbActionCommand ProjectModelChange(Func`3<ISolution, IProjectModelTransactionCookie, IBulbActionCommand> action);
    [PureAttribute]
public static IBulbActionCommand ShowHotspotSession(HotspotsRegistry hotspotsRegistry, DocumentOffset endCaretPosition);
    [PureAttribute]
public static IBulbActionCommand ShowHotspotSession(HotspotsRegistry hotspotsRegistry, DocumentRange endSelectionRange);
    [PureAttribute]
public static IBulbActionCommand ShowHotspotSession(IReadOnlyList`1<HotspotInfo> hotspotInfos, DocumentOffset endCaretPosition);
    [PureAttribute]
public static IBulbActionCommand ShowHotspotSession(IReadOnlyList`1<HotspotInfo> hotspotInfos, DocumentRange endSelectionRange);
    [PureAttribute]
public static IBulbActionCommand ShowHotspotSessionAndLeaveCaretWhereItWas(IReadOnlyList`1<HotspotInfo> hotspotInfos);
    [PureAttribute]
public static IBulbActionCommand ShowHotspotSession(Template template);
    [PureAttribute]
public static IBulbActionCommand ShowCombinedHotspotSession(IReadOnlyList`1<IBulbActionCommand> showHotspotCommands);
    [PureAttribute]
public static IBulbActionCommand OpenTextControlInBackground(IPsiSourceFile sourceFileToOpen, IBulbActionCommand nextBulbActionCommand);
    [PureAttribute]
public static IBulbActionCommand OpenTextControlAndActivate(IPsiSourceFile sourceFileToOpen, IBulbActionCommand nextBulbActionCommand);
    [NullableContextAttribute("2")]
[PureAttribute]
public static IBulbActionCommand ShowParameterInfoAfter(ITreeNode leftParNode);
    public static IBulbActionCommand WaitForProjectModelUpdate(IBulbActionCommand nextBulbActionCommand);
    [PureAttribute]
[ObsoleteAttribute("Shim overload, will be removed")]
public static IBulbActionCommand SeparateUndoShim(string commandName, Func`3<ISolution, IProgressIndicator, Action`1<ITextControl>> executePsiTransaction);
    [PureAttribute]
public static IBulbActionCommand SeparateUndo(string commandName, Func`3<ISolution, IProgressIndicator, IBulbActionCommand> executePsiTransaction);
    [PureAttribute]
public static IBulbActionCommand StartNewCommand(string commandName);
    [PureAttribute]
public static IBulbActionCommand ExecuteTwoAlternativePsiTransactions(TTreeNode treeNode, Action`3<TTreeNode, ISolution, IProgressIndicator> executePsiTransaction1, string alternativeCommandName, Func`4<TTreeNode, ISolution, IProgressIndicator, IBulbActionCommand> executePsiTransaction2);
    [NullableContextAttribute("2")]
[PureAttribute]
public static IBulbActionCommand SetCaretBefore(ITreeNode nodeToSetCaretBefore);
    [NullableContextAttribute("2")]
[PureAttribute]
public static IBulbActionCommand SetCaretAfter(ITreeNode nodeToSetCaretAfter);
    [NullableContextAttribute("2")]
[PureAttribute]
public static IBulbActionCommand SetCaret(DocumentOffset documentOffset);
    [NullableContextAttribute("2")]
[PureAttribute]
public static IBulbActionCommand SetSelection(ITreeNode nodeToSelect);
    [NullableContextAttribute("2")]
[PureAttribute]
public static IBulbActionCommand SetSelection(DocumentRange documentRange);
    [PureAttribute]
public static IBulbActionCommand OpenTextControlAndSetSelection(DocumentRange documentRange, ISolution solution);
    [PureAttribute]
public static IBulbActionCommand OpenTextControlAndSetSelection(DocumentRange documentRange, IPsiSourceFile sourceFile);
    [NullableContextAttribute("2")]
[PureAttribute]
public static IBulbActionCommand ShowMenu(IReadOnlyList`1<BulbActionCommandMenuItem`1<TData>> menuItems, Func`4<ISolution, ITextControl, TData, IBulbActionCommand> onItemSelected, Func`3<ISolution, ITextControl, IBulbActionCommand> onMenuDismissed, RichText menuCaption, IconId menuIcon, BulbActionCommandMenuPlacement placement);
    [PureAttribute]
public static IBulbActionCommand ShowDeclarationPartSelector(IReadOnlyList`1<TDeclaration> declarations, Func`4<ISolution, ITextControl, TDeclaration, IBulbActionCommand> onItemSelected, Func`3<ISolution, ITextControl, IBulbActionCommand> onMenuDismissed, RichText menuCaption);
    [PureAttribute]
public static IBulbActionCommand ShowTooltip(string message);
    [PureAttribute]
public static IBulbActionCommand ShowTooltip(RichText message);
    [PureAttribute]
public static IBulbActionCommand ShowTooltip(RichText message, HideFlags hideFlags, TimeSpan timeSpan);
    [PureAttribute]
public static IBulbActionCommand ShowActionWasInterruptedTooltip();
    [MustUseReturnValueAttribute]
internal static TBulbActionCommand TryExtractFromDelegate(Action`1& postActionDelegate, Func`2<TBulbActionCommand, bool> predicate);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[PureAttribute]
public static Action`1<ITextControl> ToLegacyActionOfTextControl(IBulbActionCommand bulbActionCommand);
    internal static void ExecutePartOfPsiTransactionBulbActionCommandsInScopedMode(IBulbActionCommand bulbActionCommand, ISolution solution);
    [PureAttribute]
public static IBulbActionCommand ExecutePsiTransaction(Func`3<ISolution, IProgressIndicator, IBulbActionCommand> executePsiTransaction);
    [PureAttribute]
public static IBulbActionCommand RollbackAndStop();
    [ExtensionAttribute]
public static void RunAndForget(IBulbActionCommand command, ISolution solution, ITextControl initialTextControl, string commandName);
    [DoesNotReturnAttribute]
internal static void DoNotInvoke();
    [CompilerGeneratedAttribute]
internal static BulbActionCommandMenuItem`1<ITreeNodePointer`1<TDeclaration>> <ShowDeclarationPartSelector>g__BulbActionCommandMenuItemFactory|28_0(TDeclaration declaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Count: {Sequence.Length}")]
public class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.BulbActionCommandSequence : object {
    [NullableAttribute("2")]
[DebuggerBrowsableAttribute("0")]
private IBulbActionCommand myHead;
    [NullableAttribute("2")]
[DebuggerBrowsableAttribute("0")]
private BulbActionCommandSequence myTail;
    [DebuggerBrowsableAttribute("0")]
public static BulbActionCommandSequence Empty;
    [DebuggerBrowsableAttribute("3")]
public IBulbActionCommand[] Sequence { get; }
    [NullableContextAttribute("2")]
private BulbActionCommandSequence(IBulbActionCommand postAction, BulbActionCommandSequence tailSequence);
    private static BulbActionCommandSequence();
    public IBulbActionCommand[] get_Sequence();
    [PureAttribute]
public static BulbActionCommandSequence From(IBulbActionCommand bulbActionCommand);
    [PureAttribute]
public static BulbActionCommandSequence From(IBulbActionCommand[] bulbActionCommands);
    public void AssertNextBulbAction(Func`2<IBulbActionCommand, bool> condition);
    public void AssertIsEmpty();
    public void Deconstruct(IBulbActionCommand& nextCommand, BulbActionCommandSequence& restSequence);
    [PureAttribute]
public static BulbActionCommandSequence Cons(IBulbActionCommand firstCommand, BulbActionCommandSequence restSequence);
    [PureAttribute]
public static BulbActionCommandSequence Concat(LocalList`1& firstCommands, BulbActionCommandSequence restSequence);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
public class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.BulbActionExecutor : object {
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextControl <InitialTextControl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActionName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OptimizeDocumentChangesOnTransactionCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowShimCommands>k__BackingField;
    [NullableAttribute("2")]
private ITextControl myCurrentTextControl;
    [NullableAttribute("2")]
private BulbActionCommandSequence myCommandSequence;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private LocalList`1<IAfterDocumentTransactionBulbActionCommand> myDelayedAfterTransactionActions;
    [NullableAttribute("2")]
private IProgressIndicator myCurrentProgress;
    [NullableAttribute("2")]
private IProjectModelTransactionCookie myDocumentTransactionCookie;
    private bool myDocumentTransactionBodyWasSuccessful;
    private bool myInitialDocumentFakeChangeWasAdded;
    [NullableAttribute("2")]
private IModuleReferenceResolveContext myInitialResolveContext;
    [RequiredMemberAttribute]
public ISolution Solution { get; public set; }
    [RequiredMemberAttribute]
public ITextControl InitialTextControl { get; public set; }
    public string ActionName { get; public set; }
    public bool OptimizeDocumentChangesOnTransactionCommit { get; public set; }
    public bool AllowShimCommands { get; public set; }
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Solution(ISolution value);
    [CompilerGeneratedAttribute]
public ITextControl get_InitialTextControl();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_InitialTextControl(ITextControl value);
    [CompilerGeneratedAttribute]
public string get_ActionName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ActionName(string value);
    [CompilerGeneratedAttribute]
public bool get_OptimizeDocumentChangesOnTransactionCommit();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OptimizeDocumentChangesOnTransactionCommit(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowShimCommands();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AllowShimCommands(bool value);
    public void RunAndForget(BulbActionCommandSequence sequenceToExecute);
    [NullableContextAttribute("2")]
private void RunEntryPoint(IDisposable externalCommandLifetime);
    private void AppendFakeNoopChangeToEnableUndoIfInitialDocumentsWasNotModified();
    private void RunExecutorTaskBodyUnderDocumentTransaction(IProgressIndicator progress);
    private void RunPsiTransaction();
    private void VerifyBulbActionCommandToExecute(IBulbActionCommand bulbActionCommand);
    private void DocumentTransactionFailed(ITextControl textControl, TransactionCommitResult commitResult);
    private void PsiTransactionFailed(ITextControl textControl, TransactionResult result);
    private void ShowTooltip(ITextControl textControl, string message);
    private void FailedToModifyDocument(ITextControl textControl);
    private void ActionCancelled(ITextControl textControl);
    private void ShowTransactionFailedException(ITextControl textControl);
}
public interface JetBrains.ReSharper.Feature.Services.BulbActions.Commands.IAfterDocumentTransactionBulbActionCommand {
    public bool IncludeIntoCommand { get; }
    public abstract virtual bool get_IncludeIntoCommand();
    [NullableContextAttribute("1")]
[MustUseReturnValueAttribute]
public abstract virtual IBulbActionCommand ExecuteAfterDocumentTransaction(ISolution solution, ITextControl textControl);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.BulbActions.Commands.IAsyncAfterDocumentTransactionBulbActionCommand {
    public bool ProlongateCommandOnAsync { get; }
    public abstract virtual bool get_ProlongateCommandOnAsync();
    [MustUseReturnValueAttribute]
public abstract virtual bool TryExecuteSync(ISolution solution, ITextControl currentTextControl, IBulbActionCommand& nextBulbActionCommand, ITextControl& nextTextControl);
    public abstract virtual void ExecuteAsync(ISolution solution, ITextControl currentTextControl, LifetimeDefinition asyncLifetimeDefinition, Action`2<ITextControl, IBulbActionCommand> afterAsyncCommandCompleted);
}
public interface JetBrains.ReSharper.Feature.Services.BulbActions.Commands.IBeforeProgressAndTransactionBulbActionCommand {
    [NullableContextAttribute("1")]
[MustUseReturnValueAttribute]
public abstract virtual IBulbActionCommand ExecuteBeforeProgressAndTransaction(ISolution solution);
}
public interface JetBrains.ReSharper.Feature.Services.BulbActions.Commands.IBulbActionCommandWithStartingEditorSelectionRange {
    [PureAttribute]
public abstract virtual DocumentRange TryGetStartingSelectionRange();
}
internal class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.Impl.ExecuteDocumentTransactionBulbActionCommand : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`4<ISolution, ITextControl, IProgressIndicator, IBulbActionCommand> <executeDocumentTransaction>P;
    public ExecuteDocumentTransactionBulbActionCommand(Func`4<ISolution, ITextControl, IProgressIndicator, IBulbActionCommand> executeDocumentTransaction);
    [NullableContextAttribute("1")]
public sealed virtual void DelegateEntryPoint(ITextControl textControl);
    [NullableContextAttribute("1")]
public sealed virtual IBulbActionCommand ExecuteDocumentTransaction(ISolution solution, ITextControl textControl, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
}
internal class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.Impl.ExecuteProjectModelTransactionBulbActionCommand : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<ISolution, IProjectModelTransactionCookie, IBulbActionCommand> <executeProjectModelTransaction>P;
    public ExecuteProjectModelTransactionBulbActionCommand(Func`3<ISolution, IProjectModelTransactionCookie, IBulbActionCommand> executeProjectModelTransaction);
    [NullableContextAttribute("1")]
public sealed virtual void DelegateEntryPoint(ITextControl textControl);
    [NullableContextAttribute("1")]
public sealed virtual IBulbActionCommand ExecuteDocumentTransaction(ISolution solution, ITextControl textControl, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
}
internal class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.Impl.ExecutePsiTransactionBulbActionCommand : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<ISolution, IProgressIndicator, IBulbActionCommand> <executePsiTransaction>P;
    public ExecutePsiTransactionBulbActionCommand(Func`3<ISolution, IProgressIndicator, IBulbActionCommand> executePsiTransaction);
    [NullableContextAttribute("1")]
private sealed virtual override void JetBrains.ReSharper.Feature.Services.BulbActions.IBulbActionCommand.DelegateEntryPoint(ITextControl textControl);
    [NullableContextAttribute("1")]
public sealed virtual IBulbActionCommand ExecuteInPsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.Impl.OpenTextControlBulbActionCommand : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IBulbActionCommand <followingBulbActionCommand>P;
    [CompilerGeneratedAttribute]
private bool <ActivateAndFocus>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiSourceFile <File>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectFile <FileToOpen>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkToOpen>k__BackingField;
    public bool ActivateAndFocus { get; public set; }
    public IPsiSourceFile File { get; public set; }
    public IProjectFile FileToOpen { get; }
    public TargetFrameworkId TargetFrameworkToOpen { get; }
    public bool ProlongateCommandOnAsync { get; }
    public OpenTextControlBulbActionCommand(IPsiSourceFile sourceFile, IBulbActionCommand followingBulbActionCommand);
    [CompilerGeneratedAttribute]
public bool get_ActivateAndFocus();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ActivateAndFocus(bool value);
    [CompilerGeneratedAttribute]
public IPsiSourceFile get_File();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_File(IPsiSourceFile value);
    [CompilerGeneratedAttribute]
public IProjectFile get_FileToOpen();
    [CompilerGeneratedAttribute]
public TargetFrameworkId get_TargetFrameworkToOpen();
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.BulbActions.IBulbActionCommand.DelegateEntryPoint(ITextControl textControl);
    public sealed virtual bool get_ProlongateCommandOnAsync();
    public sealed virtual bool TryExecuteSync(ISolution solution, ITextControl currentTextControl, IBulbActionCommand& nextBulbActionCommand, ITextControl& nextTextControl);
    public sealed virtual void ExecuteAsync(ISolution solution, ITextControl currentTextControl, LifetimeDefinition asyncLifetimeDefinition, Action`2<ITextControl, IBulbActionCommand> afterAsyncCommandCompleted);
    private Task`1<ITextControl> OpenTextControlAsync(ISolution solution, ITextControl currentTextControl);
    [NullableContextAttribute("0")]
private Nullable`1<ValueTuple`2<ImmutableArray`1<DocOffsetAndVirtualRange>, ModificationStamp>> TryGetSelectionAndCaretFromNextCommand(ITextControl textControl);
}
public class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.Impl.RollbackAndStopBulbActionCommand : object {
    [CompilerGeneratedAttribute]
private static IBulbActionCommand <Instance>k__BackingField;
    public static IBulbActionCommand Instance { get; }
    private static RollbackAndStopBulbActionCommand();
    [CompilerGeneratedAttribute]
public static IBulbActionCommand get_Instance();
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.BulbActions.IBulbActionCommand.DelegateEntryPoint(ITextControl textControl);
}
internal class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.Impl.SetCaretBulbActionCommand : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IBulbActionCommand <nextBulbActionCommand>P;
    [NullableAttribute("1")]
private IRangeMarker myRangeMarker;
    public DocumentOffset CaretOffset { get; }
    public bool IncludeIntoCommand { get; }
    [NullableContextAttribute("2")]
public SetCaretBulbActionCommand(DocumentOffset documentOffset, IBulbActionCommand nextBulbActionCommand);
    public DocumentOffset get_CaretOffset();
    [NullableContextAttribute("1")]
private sealed virtual override void JetBrains.ReSharper.Feature.Services.BulbActions.IBulbActionCommand.DelegateEntryPoint(ITextControl textControl);
    public sealed virtual DocumentRange TryGetStartingSelectionRange();
    public sealed virtual bool get_IncludeIntoCommand();
    [NullableContextAttribute("1")]
public sealed virtual IBulbActionCommand ExecuteAfterDocumentTransaction(ISolution solution, ITextControl textControl);
}
internal class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.Impl.SetSelectionBulbActionCommand : object {
    [NullableAttribute("1")]
private IRangeMarker myRangeMarker;
    public DocumentRange SelectionRange { get; }
    public bool IncludeIntoCommand { get; }
    public SetSelectionBulbActionCommand(DocumentRange documentRange);
    public DocumentRange get_SelectionRange();
    [NullableContextAttribute("1")]
private sealed virtual override void JetBrains.ReSharper.Feature.Services.BulbActions.IBulbActionCommand.DelegateEntryPoint(ITextControl textControl);
    public sealed virtual DocumentRange TryGetStartingSelectionRange();
    public sealed virtual bool get_IncludeIntoCommand();
    [NullableContextAttribute("1")]
public sealed virtual IBulbActionCommand ExecuteAfterDocumentTransaction(ISolution solution, ITextControl textControl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.Impl.ShowCustomHighlightingBulbActionCommand : object {
    [CompilerGeneratedAttribute]
private AutomaticHighlightingHidingPolicy <hidingPolicy>P;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IBulbActionCommand <nextBulbActionCommand>P;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CustomHighlightingEntry> <EntriesToHighlight>k__BackingField;
    public IReadOnlyList`1<CustomHighlightingEntry> EntriesToHighlight { get; }
    public bool IncludeIntoCommand { get; }
    public ShowCustomHighlightingBulbActionCommand(IReadOnlyList`1<CustomHighlightingEntry> entriesToHighlight, AutomaticHighlightingHidingPolicy hidingPolicy, IBulbActionCommand nextBulbActionCommand);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CustomHighlightingEntry> get_EntriesToHighlight();
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.BulbActions.IBulbActionCommand.DelegateEntryPoint(ITextControl textControl);
    public sealed virtual bool get_IncludeIntoCommand();
    public sealed virtual IBulbActionCommand ExecuteAfterDocumentTransaction(ISolution solution, ITextControl textControl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.Impl.ShowHotspotInfosSessionBulbActionCommand : ShowHotspotsSessionBulbActionCommandBase {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<HotspotInfo> <HotspotInfos>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <EndSelectionRange>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetEndCaretOffsetToWhereItWasBeforeSession>k__BackingField;
    public IReadOnlyList`1<HotspotInfo> HotspotInfos { get; }
    public DocumentRange EndSelectionRange { get; }
    public bool SetEndCaretOffsetToWhereItWasBeforeSession { get; public set; }
    public ShowHotspotInfosSessionBulbActionCommand(IReadOnlyList`1<HotspotInfo> hotspotInfos, DocumentRange endSelectionRange);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<HotspotInfo> get_HotspotInfos();
    [CompilerGeneratedAttribute]
public DocumentRange get_EndSelectionRange();
    [CompilerGeneratedAttribute]
public bool get_SetEndCaretOffsetToWhereItWasBeforeSession();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SetEndCaretOffsetToWhereItWasBeforeSession(bool value);
    private sealed virtual override DocumentRange JetBrains.ReSharper.Feature.Services.BulbActions.Commands.IBulbActionCommandWithStartingEditorSelectionRange.TryGetStartingSelectionRange();
    public virtual IBulbActionCommand ExecuteAfterDocumentTransaction(ISolution solution, ITextControl textControl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.Impl.ShowHotspotRegistrySessionBulbActionCommand : ShowHotspotsSessionBulbActionCommandBase {
    [CompilerGeneratedAttribute]
private HotspotsRegistry <Registry>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <EndSelectionRange>k__BackingField;
    public HotspotsRegistry Registry { get; }
    public DocumentRange EndSelectionRange { get; }
    public EscapeAction EscapeAction { get; }
    public ShowHotspotRegistrySessionBulbActionCommand(HotspotsRegistry hotspotsRegistry, DocumentRange endSelectionRange);
    [CompilerGeneratedAttribute]
public HotspotsRegistry get_Registry();
    [CompilerGeneratedAttribute]
public DocumentRange get_EndSelectionRange();
    public EscapeAction get_EscapeAction();
    private sealed virtual override DocumentRange JetBrains.ReSharper.Feature.Services.BulbActions.Commands.IBulbActionCommandWithStartingEditorSelectionRange.TryGetStartingSelectionRange();
    public virtual IBulbActionCommand ExecuteAfterDocumentTransaction(ISolution solution, ITextControl textControl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.Impl.ShowHotspotsSessionBulbActionCommandBase : object {
    [CompilerGeneratedAttribute]
private bool <IncludeIntoCommand>k__BackingField;
    public static Key`1<Stack`1<string>> HotspotTextsToFillInTestKey;
    public bool IncludeIntoCommand { get; public set; }
    private static ShowHotspotsSessionBulbActionCommandBase();
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.BulbActions.IBulbActionCommand.DelegateEntryPoint(ITextControl textControl);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeIntoCommand();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IncludeIntoCommand(bool value);
    public abstract virtual IBulbActionCommand ExecuteAfterDocumentTransaction(ISolution solution, ITextControl textControl);
    protected DocumentRange TryGetStartingSelectionRange(IReadOnlyList`1<HotspotInfo> hotspotInfos, DocumentRange endSelectionRange);
    protected void ExecuteSessionIfInSyncTest(HotspotSession hotspotSession, ISolution solution, ITextControl textControl);
}
internal class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.Impl.ShowHotspotTemplateSessionBulbActionCommand : ShowHotspotsSessionBulbActionCommandBase {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Template <template>P;
    [NullableContextAttribute("1")]
public ShowHotspotTemplateSessionBulbActionCommand(Template template);
    [NullableContextAttribute("1")]
public virtual IBulbActionCommand ExecuteAfterDocumentTransaction(ISolution solution, ITextControl textControl);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.Impl.ShowMenuBulbActionCommand`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`4<ISolution, ITextControl, TData, IBulbActionCommand> <onMenuItemSelected>P;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<ISolution, ITextControl, IBulbActionCommand> <onMenuDismissed>P;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<BulbActionCommandMenuItem`1<TData>> <MenuItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoExecuteSingleItem>k__BackingField;
    [CompilerGeneratedAttribute]
private BulbActionCommandMenuPlacement <MenuPlacement>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <MenuCaption>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <MenuIcon>k__BackingField;
    [NullableAttribute("1")]
public IReadOnlyList`1<BulbActionCommandMenuItem`1<TData>> MenuItems { get; }
    public bool AutoExecuteSingleItem { get; public set; }
    public BulbActionCommandMenuPlacement MenuPlacement { get; public set; }
    public RichText MenuCaption { get; public set; }
    public IconId MenuIcon { get; public set; }
    public bool ProlongateCommandOnAsync { get; }
    [NullableContextAttribute("1")]
public ShowMenuBulbActionCommand`1(IReadOnlyList`1<BulbActionCommandMenuItem`1<TData>> menuItems, Func`4<ISolution, ITextControl, TData, IBulbActionCommand> onMenuItemSelected, Func`3<ISolution, ITextControl, IBulbActionCommand> onMenuDismissed);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IReadOnlyList`1<BulbActionCommandMenuItem`1<TData>> get_MenuItems();
    [CompilerGeneratedAttribute]
public bool get_AutoExecuteSingleItem();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AutoExecuteSingleItem(bool value);
    [CompilerGeneratedAttribute]
public BulbActionCommandMenuPlacement get_MenuPlacement();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MenuPlacement(BulbActionCommandMenuPlacement value);
    [CompilerGeneratedAttribute]
public RichText get_MenuCaption();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MenuCaption(RichText value);
    [CompilerGeneratedAttribute]
public IconId get_MenuIcon();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MenuIcon(IconId value);
    [NullableContextAttribute("1")]
private sealed virtual override void JetBrains.ReSharper.Feature.Services.BulbActions.IBulbActionCommand.DelegateEntryPoint(ITextControl textControl);
    public sealed virtual bool get_ProlongateCommandOnAsync();
    [NullableContextAttribute("1")]
public sealed virtual bool TryExecuteSync(ISolution solution, ITextControl currentTextControl, IBulbActionCommand& nextBulbActionCommand, ITextControl& nextTextControl);
    [NullableContextAttribute("1")]
public sealed virtual void ExecuteAsync(ISolution solution, ITextControl currentTextControl, LifetimeDefinition asyncLifetimeDefinition, Action`2<ITextControl, IBulbActionCommand> afterAsyncCommandCompleted);
    [NullableContextAttribute("1")]
private IBulbActionCommand ExecuteSelectionInTests(ISolution solution, ITextControl textControl);
    [NullableContextAttribute("1")]
private void SetupMenuPresentation(JetPopupMenu menu, ITextControl textControl, Lifetime menuLifetime);
}
internal class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.Impl.ShowParameterInfoBulbActionCommand : object {
    [CompilerGeneratedAttribute]
private DocumentOffset <leftParDocumentOffset>P;
    public bool IncludeIntoCommand { get; }
    public ShowParameterInfoBulbActionCommand(DocumentOffset leftParDocumentOffset);
    [NullableContextAttribute("1")]
private sealed virtual override void JetBrains.ReSharper.Feature.Services.BulbActions.IBulbActionCommand.DelegateEntryPoint(ITextControl textControl);
    public sealed virtual bool get_IncludeIntoCommand();
    [NullableContextAttribute("1")]
public sealed virtual IBulbActionCommand ExecuteAfterDocumentTransaction(ISolution solution, ITextControl textControl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.Impl.ShowTooltipBulbActionCommand : object {
    [CompilerGeneratedAttribute]
private RichText <message>P;
    [CompilerGeneratedAttribute]
private Nullable`1<HideFlags> <hideFlags>P;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <timeSpan>P;
    public bool IncludeIntoCommand { get; }
    public ShowTooltipBulbActionCommand(RichText message, Nullable`1<HideFlags> hideFlags, Nullable`1<TimeSpan> timeSpan);
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.BulbActions.IBulbActionCommand.DelegateEntryPoint(ITextControl textControl);
    public sealed virtual bool get_IncludeIntoCommand();
    public sealed virtual IBulbActionCommand ExecuteAfterDocumentTransaction(ISolution solution, ITextControl textControl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.Impl.StartNewCommandBulbActionCommand : object {
    [CompilerGeneratedAttribute]
private string <newCommandName>P;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IBulbActionCommand <nextCommandToExecute>P;
    [CompilerGeneratedAttribute]
private bool <AreCommandsMergedInScopedExecutionMode>k__BackingField;
    public string NewCommandName { get; }
    public bool AreCommandsMergedInScopedExecutionMode { get; public set; }
    public StartNewCommandBulbActionCommand(string newCommandName, IBulbActionCommand nextCommandToExecute);
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.BulbActions.IBulbActionCommand.DelegateEntryPoint(ITextControl textControl);
    public sealed virtual string get_NewCommandName();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AreCommandsMergedInScopedExecutionMode();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AreCommandsMergedInScopedExecutionMode(bool value);
    public sealed virtual IBulbActionCommand Execute(ISolution solution);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.Impl.WaitForProjectModelUpdateBulbActionCommand : object {
    [CompilerGeneratedAttribute]
private IBulbActionCommand <followingBulbActionCommand>P;
    public bool ProlongateCommandOnAsync { get; }
    public WaitForProjectModelUpdateBulbActionCommand(IBulbActionCommand followingBulbActionCommand);
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.BulbActions.IBulbActionCommand.DelegateEntryPoint(ITextControl textControl);
    public sealed virtual bool get_ProlongateCommandOnAsync();
    public sealed virtual bool TryExecuteSync(ISolution solution, ITextControl currentTextControl, IBulbActionCommand& nextBulbActionCommand, ITextControl& nextTextControl);
    public sealed virtual void ExecuteAsync(ISolution solution, ITextControl currentTextControl, LifetimeDefinition asyncLifetimeDefinition, Action`2<ITextControl, IBulbActionCommand> afterAsyncCommandCompleted);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.Impl.YieldToEscapeFromCurrentCommandBulbActionCommand : object {
    [CompilerGeneratedAttribute]
private static IBulbActionCommand <Instance>k__BackingField;
    public static IBulbActionCommand Instance { get; }
    public bool ProlongateCommandOnAsync { get; }
    private static YieldToEscapeFromCurrentCommandBulbActionCommand();
    [CompilerGeneratedAttribute]
public static IBulbActionCommand get_Instance();
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.BulbActions.IBulbActionCommand.DelegateEntryPoint(ITextControl textControl);
    public sealed virtual bool get_ProlongateCommandOnAsync();
    public sealed virtual bool TryExecuteSync(ISolution solution, ITextControl currentTextControl, IBulbActionCommand& nextBulbActionCommand, ITextControl& nextTextControl);
    public sealed virtual void ExecuteAsync(ISolution solution, ITextControl currentTextControl, LifetimeDefinition asyncLifetimeDefinition, Action`2<ITextControl, IBulbActionCommand> afterAsyncCommandCompleted);
}
public interface JetBrains.ReSharper.Feature.Services.BulbActions.Commands.IPartOfDocumentTransactionBulbActionCommand {
    [NullableContextAttribute("1")]
[MustUseReturnValueAttribute]
public abstract virtual IBulbActionCommand ExecuteDocumentTransaction(ISolution solution, ITextControl textControl, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
}
public interface JetBrains.ReSharper.Feature.Services.BulbActions.Commands.IPartOfPsiTransactionBulbActionCommand {
    [NullableContextAttribute("1")]
[MustUseReturnValueAttribute]
public abstract virtual IBulbActionCommand ExecuteInPsiTransaction(ISolution solution, IProgressIndicator progress);
}
public interface JetBrains.ReSharper.Feature.Services.BulbActions.Commands.IRollbackAndStopBulbActionCommand {
}
public interface JetBrains.ReSharper.Feature.Services.BulbActions.Commands.IShimBulbActionCommand {
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.BulbActions.Commands.ISwitchCommandBulbActionCommand {
    public string NewCommandName { get; }
    public bool AreCommandsMergedInScopedExecutionMode { get; }
    public abstract virtual string get_NewCommandName();
    public abstract virtual bool get_AreCommandsMergedInScopedExecutionMode();
    [MustUseReturnValueAttribute]
public abstract virtual IBulbActionCommand Execute(ISolution solution);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.Menu.BulbActionCommandMenuItem : object {
    [CompilerGeneratedAttribute]
private IconId <Icon>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private RichText <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <ShortcutText>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Tooltip>k__BackingField;
    [NullableAttribute("1")]
public static Key`1<Stack`1<int>> ItemIndexesToSelectInTestKey;
    public IconId Icon { get; public set; }
    [NullableAttribute("1")]
public RichText Text { get; public set; }
    public RichText ShortcutText { get; public set; }
    public RichText Tooltip { get; public set; }
    private static BulbActionCommandMenuItem();
    [CompilerGeneratedAttribute]
public IconId get_Icon();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Icon(IconId value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public RichText get_Text();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Text(RichText value);
    [CompilerGeneratedAttribute]
public RichText get_ShortcutText();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ShortcutText(RichText value);
    [CompilerGeneratedAttribute]
public RichText get_Tooltip();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Tooltip(RichText value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
public class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.Menu.BulbActionCommandMenuItem`1 : BulbActionCommandMenuItem {
    [CompilerGeneratedAttribute]
private TData <Data>k__BackingField;
    [RequiredMemberAttribute]
public TData Data { get; public set; }
    [CompilerGeneratedAttribute]
public TData get_Data();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Data(TData value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.Menu.BulbActionCommandMenuPlacement : object {
    [CompilerGeneratedAttribute]
private static BulbActionCommandMenuPlacement <NearCaret>k__BackingField;
    [CompilerGeneratedAttribute]
private static BulbActionCommandMenuPlacement <BeginningOfTheLine>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public static BulbActionCommandMenuPlacement NearCaret { get; }
    public static BulbActionCommandMenuPlacement BeginningOfTheLine { get; }
    [CompilerGeneratedAttribute]
protected BulbActionCommandMenuPlacement(BulbActionCommandMenuPlacement original);
    private static BulbActionCommandMenuPlacement();
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public static BulbActionCommandMenuPlacement get_NearCaret();
    [CompilerGeneratedAttribute]
public static BulbActionCommandMenuPlacement get_BeginningOfTheLine();
    [PureAttribute]
public static BulbActionCommandMenuPlacement FromDocumentRange(DocumentRange documentRange);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(BulbActionCommandMenuPlacement left, BulbActionCommandMenuPlacement right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(BulbActionCommandMenuPlacement left, BulbActionCommandMenuPlacement right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(BulbActionCommandMenuPlacement other);
    [CompilerGeneratedAttribute]
public abstract virtual BulbActionCommandMenuPlacement <Clone>$();
}
internal class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.Shim.ActionOfTextControlDelegateAfterTransactionBulbActionCommand : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Action`1<ITextControl> <delegateInstance>P;
    public bool IncludeIntoCommand { get; }
    [NullableContextAttribute("1")]
public ActionOfTextControlDelegateAfterTransactionBulbActionCommand(Action`1<ITextControl> delegateInstance);
    [NullableContextAttribute("1")]
private sealed virtual override void JetBrains.ReSharper.Feature.Services.BulbActions.IBulbActionCommand.DelegateEntryPoint(ITextControl textControl);
    public sealed virtual bool get_IncludeIntoCommand();
    [NullableContextAttribute("1")]
public sealed virtual IBulbActionCommand ExecuteAfterDocumentTransaction(ISolution solution, ITextControl textControl);
}
internal class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.Shim.ExecuteAfterPsiTransactionMethodBulbActionCommand : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`4<ISolution, IProjectModelTransactionCookie, IProgressIndicator, Action`1<ITextControl>> <method>P;
    public ExecuteAfterPsiTransactionMethodBulbActionCommand(Func`4<ISolution, IProjectModelTransactionCookie, IProgressIndicator, Action`1<ITextControl>> method);
    [NullableContextAttribute("1")]
private sealed virtual override void JetBrains.ReSharper.Feature.Services.BulbActions.IBulbActionCommand.DelegateEntryPoint(ITextControl textControl);
    [NullableContextAttribute("1")]
public sealed virtual IBulbActionCommand ExecuteDocumentTransaction(ISolution solution, ITextControl textControl, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
}
internal class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.Shim.ExecuteBeforeProgressAndTransactionBulbActionCommand : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Action`1<ISolution> <method>P;
    [NullableContextAttribute("1")]
public ExecuteBeforeProgressAndTransactionBulbActionCommand(Action`1<ISolution> method);
    [NullableContextAttribute("1")]
private sealed virtual override void JetBrains.ReSharper.Feature.Services.BulbActions.IBulbActionCommand.DelegateEntryPoint(ITextControl textControl);
    [NullableContextAttribute("1")]
public sealed virtual IBulbActionCommand ExecuteBeforeProgressAndTransaction(ISolution solution);
}
internal class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.Shim.ExecuteBeforePsiTransactionMethodBulbActionCommand : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Action`3<ISolution, IProjectModelTransactionCookie, IProgressIndicator> <method>P;
    [NullableContextAttribute("1")]
public ExecuteBeforePsiTransactionMethodBulbActionCommand(Action`3<ISolution, IProjectModelTransactionCookie, IProgressIndicator> method);
    [NullableContextAttribute("1")]
private sealed virtual override void JetBrains.ReSharper.Feature.Services.BulbActions.IBulbActionCommand.DelegateEntryPoint(ITextControl textControl);
    [NullableContextAttribute("1")]
public sealed virtual IBulbActionCommand ExecuteDocumentTransaction(ISolution solution, ITextControl textControl, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
}
internal class JetBrains.ReSharper.Feature.Services.BulbActions.Commands.Shim.ExecutePsiTransactionMethodBulbActionCommand : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<ISolution, IProgressIndicator, Action`1<ITextControl>> <executePsiTransaction>P;
    public ExecutePsiTransactionMethodBulbActionCommand(Func`3<ISolution, IProgressIndicator, Action`1<ITextControl>> executePsiTransaction);
    [NullableContextAttribute("1")]
private sealed virtual override void JetBrains.ReSharper.Feature.Services.BulbActions.IBulbActionCommand.DelegateEntryPoint(ITextControl textControl);
    [NullableContextAttribute("1")]
public sealed virtual IBulbActionCommand ExecuteInPsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.BulbActions.IBulbActionCommand {
    public abstract virtual void DelegateEntryPoint(ITextControl textControl);
}
public interface JetBrains.ReSharper.Feature.Services.BulbActions.IModernBulbAction {
    [NullableContextAttribute("1")]
[PureAttribute]
public abstract virtual BulbActionCommandSequence GetCommandSequence();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.BulbActions.ModernBulbActionBase : object {
    public string Text { get; }
    public abstract virtual string get_Text();
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.Bulbs.IBulbAction.Execute(ISolution solution, ITextControl textControl);
    private sealed virtual override BulbActionCommandSequence JetBrains.ReSharper.Feature.Services.BulbActions.IModernBulbAction.GetCommandSequence();
    protected virtual BulbActionCommandSequence GetCommandSequence();
    protected abstract virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.BulbActions.ModernScopedBulbAction : object {
    [ThreadStaticAttribute]
private static bool ourScopedExecutionInProgress;
    public string Text { get; }
    public string ScopedText { get; }
    protected bool IsScopedExecuteInProgress { get; private protected set; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public abstract virtual string get_Text();
    public virtual string get_ScopedText();
    protected bool get_IsScopedExecuteInProgress();
    private protected void set_IsScopedExecuteInProgress(bool value);
    public virtual FileCollectorInfo get_FileCollectorInfo();
    private sealed virtual override BulbActionCommandSequence JetBrains.ReSharper.Feature.Services.BulbActions.IModernBulbAction.GetCommandSequence();
    private BulbActionCommandSequence GetCommandSequence();
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.Bulbs.IBulbAction.Execute(ISolution solution, ITextControl textControl);
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.Intentions.Scoped.BulbActions.ISimpleScopedBulbAction.ExecutePsiTransactionInScopedExecution(ISolution solution);
    protected abstract virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Bulbs.ActivityTrackingExtensions : object {
    [ExtensionAttribute]
public static void TrackBulbAction(UsageStatistics activityTracking, IBulbAction action);
}
public abstract class JetBrains.ReSharper.Feature.Services.Bulbs.BulbActionBase : object {
    protected bool OptimizeChangesOnCommit { get; }
    public string Text { get; }
    protected virtual bool get_OptimizeChangesOnCommit();
    public abstract virtual string get_Text();
    public virtual void Execute(ISolution solution, ITextControl textControl);
    protected virtual void ExecuteBeforeProgressAndTransaction(ISolution solution);
    protected virtual void ExecuteBeforePsiTransaction(ISolution solution, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
    [CanBeNullAttribute]
protected abstract virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CanBeNullAttribute]
protected virtual Action`1<ITextControl> ExecuteAfterPsiTransaction(ISolution solution, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
    [ObsoleteAttribute("Will be removed")]
protected virtual bool ExecuteTask(ITaskExecutor taskExecutor, string name, TaskCancelable cancelable, Action`1<IProgressIndicator> task);
    protected static void ShowTooltip(ITextControl textControl, string message);
    protected static void ShowTransactionFailedException(ITextControl textControl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Bulbs.BulbActionExtensions : object {
    [ExtensionAttribute]
[PureAttribute]
public static IntentionAction ToContextActionIntention(IBulbAction bulbAction);
    [ExtensionAttribute]
[PureAttribute]
public static IntentionAction ToContextActionIntention(IBulbAction bulbAction, IAnchor customAnchor);
    [ExtensionAttribute]
[PureAttribute]
public static IntentionAction ToContextActionIntention(IBulbAction bulbAction, IAnchor customAnchor, IconId customIcon, bool doNotShowGutterMark);
    [ExtensionAttribute]
[PureAttribute]
public static IList`1<IntentionAction> ToContextActionIntentions(IBulbAction bulbAction, IAnchor customAnchor, IconId customIcon);
    [ExtensionAttribute]
[PureAttribute]
public static IList`1<IntentionAction> ToContextActionIntentions(IEnumerable`1<IBulbAction> actions, IAnchor customAnchor);
    [ExtensionAttribute]
[PureAttribute]
public static IntentionAction ToQuickFixIntention(IBulbAction action, IAnchor customAnchor, IconId customIcon);
    [ExtensionAttribute]
[PureAttribute]
public static IList`1<IntentionAction> ToQuickFixIntentions(IBulbAction action, IAnchor customAnchor, IconId customIcon);
    [ExtensionAttribute]
[PureAttribute]
public static IList`1<IntentionAction> ToQuickFixIntentions(IEnumerable`1<IBulbAction> actions, IAnchor customAnchor);
    [ExtensionAttribute]
[PureAttribute]
public static IntentionAction ToAnnotateActionIntention(IBulbAction action, IAnchor customAnchor);
    [ExtensionAttribute]
[PureAttribute]
public static IList`1<IntentionAction> ToAnnotateActionIntentions(IBulbAction action, IAnchor customAnchor);
    [ExtensionAttribute]
[PureAttribute]
public static IntentionAction ToConfigureActionIntention(IBulbAction action, IAnchor configureAnchor);
    [ExtensionAttribute]
[PureAttribute]
public static IList`1<IntentionAction> ToConfigureActionIntentions(IBulbAction action, IAnchor customAnchor);
}
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Bulbs.BulbActionsUsagesCollector : CounterUsagesCollector {
    private EventLogGroup myGroup;
    private EventId3`3<Type, ScopeKind, string> myStartedEvent;
    private EventId1`1<long> myTimedOutEvent;
    private String[] myKnownVSNamespaces;
    private VarargEventId myActionTimedOut;
    private EventId3`3<int, int, long> myActionsRetrieved;
    private StringEventField myNamespaceField;
    private AnonymizedIdField myHashField;
    private LongEventField myActionTimeoutField;
    private IntEventField myChildCountField;
    public BulbActionsUsagesCollector(FeatureUsageLogger featureUsageLogger, EventLogConfiguration eventLogConfiguration);
    public virtual EventLogGroup GetGroup();
    public void LogBulbActionStart(ISolution solution, IBulbAction action, ITextControl textControl);
    public void LogVsSuggestedActionsRetrievalTimeout(ISolution solution, ITextControl textControl, TimeSpan timeout);
    public void LogVsSuggestedActionsRetrieval(ISolution solution, ITextControl textControl, TimeSpan totalTime, int topLevelCount, ICollection`1<VsSuggestedActionInfo> actions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Bulbs.BulbActionUtils : object {
    private static Action`1<ITextControl> ourEmptyAction;
    private static BulbActionUtils();
    [PureAttribute]
public static Action`1<ITextControl> SetCaretBefore(ITreeNode nodeToSetCaretBefore);
    [PureAttribute]
public static Action`1<ITextControl> SetCaretAfter(ITreeNode nodeToSetCaretAfter);
    [PureAttribute]
public static Action`1<ITextControl> SetCaret(DocumentOffset documentOffset);
    [PureAttribute]
public static Action`1<ITextControl> SetSelection(ITreeNode nodeToSelect);
    [PureAttribute]
public static Action`1<ITextControl> SetSelection(DocumentRange documentRange);
    [PureAttribute]
[ObsoleteAttribute("Use BulbActionCommands instead")]
public static Action`1<ITextControl> DoSeparateUndoPsiPostAction(string secondCommandName, Func`3<ISolution, IProgressIndicator, Action`1<ITextControl>> secondaryPsiTransaction);
    [PureAttribute]
public static Action`1<ITextControl> TriggerDocumentReparse(DocumentOffset documentOffset);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[PureAttribute]
[ContractAnnotationAttribute("null => null; notnull => notnull")]
public static Action`1<ITextControl> ToTextControlAction(Action action);
    public static void ShowTooltip(string message, ITextControl textControl);
    [PureAttribute]
public static Action`1<ITextControl> ShowTooltip(string message);
    [PureAttribute]
public static Action`1<ITextControl> ShowTooltip(RichText message);
    [PureAttribute]
public static Action`1<ITextControl> ShowTooltip(RichText message, HideFlags hideFlags, TimeSpan timeSpan);
    [PureAttribute]
public static Action`1<ITextControl> ExecuteHotspotSession(HotspotsRegistry hotspotsRegistry, DocumentOffset endCaretPosition, EscapeAction escapeAction);
    [PureAttribute]
public static Action`1<ITextControl> ExecuteHotspotSession(HotspotsRegistry hotspotsRegistry, DocumentRange endSelectionRange, EscapeAction escapeAction);
    public static void Format(ITreeNode treeNode, bool strict);
}
public interface JetBrains.ReSharper.Feature.Services.Bulbs.IActionWithId {
    public string ID { get; }
    public abstract virtual string get_ID();
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.Bulbs.IBulbAction {
    public string Text { get; }
    public abstract virtual string get_Text();
    public abstract virtual void Execute(ISolution solution, ITextControl textControl);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.Bulbs.IPopupBulbAction {
    public string PopupMenuCaption { get; }
    [NullableAttribute("2")]
public string PopupKey { get; }
    public Anchoring2D[] PopupAnchorings { get; }
    public abstract virtual string get_PopupMenuCaption();
    public abstract virtual void FillMenuItemDescriptor(IBulbAction key, IMenuItemDescriptor descriptor);
    [NullableContextAttribute("2")]
public abstract virtual string get_PopupKey();
    public abstract virtual Anchoring2D[] get_PopupAnchorings();
    public abstract virtual IEnumerable`1<IBulbAction> CreateBulbActions();
    public abstract virtual bool IsAvailable(IUserDataHolder cache);
    public abstract virtual void OnPopupShown(Lifetime showingLifetime);
}
public interface JetBrains.ReSharper.Feature.Services.Bulbs.IPopupBulbActionHandlesSuppression {
    public abstract virtual void SuppressAction();
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.Bulbs.IPopupBulbActionWithText {
    public string Text { get; }
    public abstract virtual string get_Text();
}
public interface JetBrains.ReSharper.Feature.Services.Bulbs.IReadOnlyBulbAction {
    public bool IsReadOnly { get; }
    public abstract virtual bool get_IsReadOnly();
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.Bulbs.IRichTextBulbAction {
    public RichText RichText { get; }
    public abstract virtual RichText get_RichText();
}
public class JetBrains.ReSharper.Feature.Services.CallHierarchy.CallHierarchyFinder : object {
    private CachingFinder myFinder;
    public CallHierarchyFinder(CachingFinder finder);
    [NotNullAttribute]
public static CallHierarchyFinder GetInstance(CachingFinder finder);
    public ICollection`1<CallHierarchyFindResult> FindIncoming(DeclaredElementInstance`1<IDeclaredElement> declaredElementInstance, IProgressIndicator progressIndicator);
    public ICollection`1<CallHierarchyFindResult> FindIncoming(IInitializerOwnerDeclaration initializerOwnerDeclaration, IProgressIndicator progressIndicator);
    public ICollection`1<CallHierarchyFindResult> FindImplementingConstructors(ITypeParameter typeParameter, IProgressIndicator progressIndicator);
    public ICollection`1<CallHierarchyFindResult> FindImplementors(PsiLanguageType language, ITypeConversionRule conversionRule, DeclaredElementInstance`1<IClrDeclaredElement> overridableMember, IProgressIndicator progressIndicator);
    public ICollection`1<CallHierarchyFindResult> FindOutgoing(DeclaredElementInstance`1<IDeclaredElement> declaredElementInstance, IProgressIndicator progressIndicator);
    public ICollection`1<CallHierarchyFindResult> FindOutgoing(IExpression expression, IProgressIndicator progressIndicator);
}
public abstract class JetBrains.ReSharper.Feature.Services.CallHierarchy.FindResults.CallHierarchyFindResult : object {
    private ITreeNode myReferenceElement;
    [CanBeNullAttribute]
public ITreeNode ReferenceElement { get; }
    protected CallHierarchyFindResult(ITreeNode referenceElement);
    public ITreeNode get_ReferenceElement();
    public abstract virtual TReturn Accept(ICallHierarchyFindResultVisitor`2<TData, TReturn> visitor, TData data);
    public abstract virtual bool GroupingEquals(object obj);
    public abstract virtual int GetGroupingHashCode();
}
public class JetBrains.ReSharper.Feature.Services.CallHierarchy.FindResults.CallHierarchyFindResultIncomingDeclaredElement : CallHierarchyFindResult {
    private bool mySubstitutionIsOk;
    private DeclaredElementInstance`1<IDeclaredElement> myDeclaredElementInstance;
    public DeclaredElementInstance`1<IDeclaredElement> DeclaredElementInstance { get; }
    public bool SubstitutionIsOk { get; }
    public CallHierarchyFindResultIncomingDeclaredElement(DeclaredElementInstance`1<IDeclaredElement> declaredElementInstance, bool subsitutionIsOk, ITreeNode reference);
    public DeclaredElementInstance`1<IDeclaredElement> get_DeclaredElementInstance();
    public bool get_SubstitutionIsOk();
    public virtual TReturn Accept(ICallHierarchyFindResultVisitor`2<TData, TReturn> visitor, TData data);
    public virtual bool GroupingEquals(object obj);
    public virtual int GetGroupingHashCode();
}
public class JetBrains.ReSharper.Feature.Services.CallHierarchy.FindResults.CallHierarchyFindResultIncomingEventSubscription : CallHierarchyFindResult {
    private bool mySubstitutionIsOk;
    private DeclaredElementInstance`1<IEvent> myEventInstance;
    private IClrDeclaredElement myContainingElement;
    public DeclaredElementInstance`1<IEvent> EventInstance { get; }
    public IClrDeclaredElement ContainingElement { get; }
    public bool SubstitutionIsOk { get; }
    public CallHierarchyFindResultIncomingEventSubscription(DeclaredElementInstance`1<IEvent> eventInstance, IClrDeclaredElement containingElement, bool subsitutionIsOk, ITreeNode reference);
    public DeclaredElementInstance`1<IEvent> get_EventInstance();
    public IClrDeclaredElement get_ContainingElement();
    public bool get_SubstitutionIsOk();
    public virtual TReturn Accept(ICallHierarchyFindResultVisitor`2<TData, TReturn> visitor, TData data);
    public virtual bool GroupingEquals(object obj);
    public virtual int GetGroupingHashCode();
}
public class JetBrains.ReSharper.Feature.Services.CallHierarchy.FindResults.CallHierarchyFindResultIncomingInitializerOwner : CallHierarchyFindResult {
    public IInitializerOwnerDeclaration InitializerOwnerDeclaration { get; }
    public CallHierarchyFindResultIncomingInitializerOwner(IInitializerOwnerDeclaration initializerOwnerDeclaration);
    public IInitializerOwnerDeclaration get_InitializerOwnerDeclaration();
    public virtual TReturn Accept(ICallHierarchyFindResultVisitor`2<TData, TReturn> visitor, TData data);
    public virtual bool GroupingEquals(object obj);
    public virtual int GetGroupingHashCode();
}
public class JetBrains.ReSharper.Feature.Services.CallHierarchy.FindResults.CallHierarchyFindResultOutgoingClosure : CallHierarchyFindResultOutgoingExpression {
    public CallHierarchyFindResultOutgoingClosure(IExpression expression);
    public virtual TReturn Accept(ICallHierarchyFindResultVisitor`2<TData, TReturn> visitor, TData data);
}
public class JetBrains.ReSharper.Feature.Services.CallHierarchy.FindResults.CallHierarchyFindResultOutgoingDeclaredElement : CallHierarchyFindResult {
    private bool mySubstitutionIsOk;
    private DeclaredElementInstance`1<IDeclaredElement> myDeclaredElementInstance;
    public DeclaredElementInstance`1<IDeclaredElement> DeclaredElementInstance { get; }
    public bool SubstitutionIsOk { get; }
    public CallHierarchyFindResultOutgoingDeclaredElement(DeclaredElementInstance`1<IDeclaredElement> declaredElementInstance, ITreeNode referenceElement, bool subsitutionIsOk);
    public DeclaredElementInstance`1<IDeclaredElement> get_DeclaredElementInstance();
    public bool get_SubstitutionIsOk();
    public virtual TReturn Accept(ICallHierarchyFindResultVisitor`2<TData, TReturn> visitor, TData data);
    public virtual bool GroupingEquals(object obj);
    public virtual int GetGroupingHashCode();
}
public class JetBrains.ReSharper.Feature.Services.CallHierarchy.FindResults.CallHierarchyFindResultOutgoingExpression : CallHierarchyFindResult {
    public IExpression Expression { get; }
    protected CallHierarchyFindResultOutgoingExpression(IExpression expression);
    public IExpression get_Expression();
    public virtual TReturn Accept(ICallHierarchyFindResultVisitor`2<TData, TReturn> visitor, TData data);
    public virtual bool GroupingEquals(object obj);
    public virtual int GetGroupingHashCode();
}
public class JetBrains.ReSharper.Feature.Services.CallHierarchy.FindResults.CallHierarchyFindResultOutgoingImplementorMember : CallHierarchyFindResult {
    private bool myIsQuasiImpelementation;
    private bool mySubstitutionIsOk;
    private DeclaredElementInstance`1<IClrDeclaredElement> myDeclaredElementInstance;
    public DeclaredElementInstance`1<IClrDeclaredElement> DeclaredElementInstance { get; }
    public bool SubstitutionIsOk { get; }
    public bool IsQuasiImplementaion { get; }
    public CallHierarchyFindResultOutgoingImplementorMember(DeclaredElementInstance`1<IClrDeclaredElement> declaredElementInstance, bool subsitutionIsOk, bool isQuasiImpelementation);
    public DeclaredElementInstance`1<IClrDeclaredElement> get_DeclaredElementInstance();
    public bool get_SubstitutionIsOk();
    public bool get_IsQuasiImplementaion();
    public virtual TReturn Accept(ICallHierarchyFindResultVisitor`2<TData, TReturn> visitor, TData data);
    public virtual bool GroupingEquals(object obj);
    public virtual int GetGroupingHashCode();
}
public class JetBrains.ReSharper.Feature.Services.CallHierarchy.FindResults.CallHierarchyFindResultOutgoingImplicitConstructor : CallHierarchyFindResult {
    private bool mySubstitutionIsOk;
    private DeclaredElementInstance`1<IClrDeclaredElement> myDeclaredElementInstance;
    public DeclaredElementInstance`1<IClrDeclaredElement> DeclaredElementInstance { get; }
    public bool SubstitutionIsOk { get; }
    public CallHierarchyFindResultOutgoingImplicitConstructor(DeclaredElementInstance`1<IClrDeclaredElement> declaredElementInstance, bool subsitutionIsOk);
    public DeclaredElementInstance`1<IClrDeclaredElement> get_DeclaredElementInstance();
    public bool get_SubstitutionIsOk();
    public virtual TReturn Accept(ICallHierarchyFindResultVisitor`2<TData, TReturn> visitor, TData data);
    public virtual bool GroupingEquals(object obj);
    public virtual int GetGroupingHashCode();
}
public class JetBrains.ReSharper.Feature.Services.CallHierarchy.FindResults.CallHierarchyFindResultOutgoingInitializer : CallHierarchyFindResultOutgoingExpression {
    public CallHierarchyFindResultOutgoingInitializer(IExpression expression);
    public virtual TReturn Accept(ICallHierarchyFindResultVisitor`2<TData, TReturn> visitor, TData data);
}
public class JetBrains.ReSharper.Feature.Services.CallHierarchy.FindResults.CallHierarchyFindResultOutgoingOverridableMember : CallHierarchyFindResult {
    private int myEstimatedInheritors;
    private DeclaredElementInstance`1<IClrDeclaredElement> myOverridableMemberInstance;
    private bool mySubstitutionIsOk;
    public DeclaredElementInstance`1<IClrDeclaredElement> OverridableMemberInstance { get; }
    public int EstimatedInheritors { get; }
    public bool SubstitutionIsOk { get; }
    public CallHierarchyFindResultOutgoingOverridableMember(DeclaredElementInstance`1<IClrDeclaredElement> overridableMemberInstance, ITreeNode referenceElement, bool substitutionIsOk);
    public DeclaredElementInstance`1<IClrDeclaredElement> get_OverridableMemberInstance();
    public int get_EstimatedInheritors();
    public bool get_SubstitutionIsOk();
    public virtual TReturn Accept(ICallHierarchyFindResultVisitor`2<TData, TReturn> visitor, TData data);
    public virtual bool GroupingEquals(object obj);
    public virtual int GetGroupingHashCode();
}
public class JetBrains.ReSharper.Feature.Services.CallHierarchy.FindResults.CallHierarchyFindResultOutgoingQuery : CallHierarchyFindResultOutgoingExpression {
    public CallHierarchyFindResultOutgoingQuery(IExpression expression);
    public virtual TReturn Accept(ICallHierarchyFindResultVisitor`2<TData, TReturn> visitor, TData data);
}
public class JetBrains.ReSharper.Feature.Services.CallHierarchy.FindResults.CallHierarchyFindResultOutgoingTypeParameterConstructor : CallHierarchyFindResult {
    private int myEstimatedInheritors;
    private ITypeParameter myTypeParameter;
    public ITypeParameter TypeParameter { get; }
    public int EstimatedInheritors { get; }
    public CallHierarchyFindResultOutgoingTypeParameterConstructor(ITypeParameter typeParameter, ITreeNode referenceElement);
    public ITypeParameter get_TypeParameter();
    public int get_EstimatedInheritors();
    public virtual TReturn Accept(ICallHierarchyFindResultVisitor`2<TData, TReturn> visitor, TData data);
    public virtual bool GroupingEquals(object obj);
    public virtual int GetGroupingHashCode();
}
public class JetBrains.ReSharper.Feature.Services.CallHierarchy.FindResults.CallHierarchyFindResultOutgoingUnresolved : CallHierarchyFindResult {
    public CallHierarchyFindResultOutgoingUnresolved(ITreeNode referenceElement);
    public virtual TReturn Accept(ICallHierarchyFindResultVisitor`2<TData, TReturn> visitor, TData data);
    public virtual bool GroupingEquals(object obj);
    public virtual int GetGroupingHashCode();
}
public interface JetBrains.ReSharper.Feature.Services.CallHierarchy.ICallHierarchyFindResultVisitor`2 {
    public abstract virtual TReturn VisitOutgoingUnresolved(CallHierarchyFindResultOutgoingUnresolved unresolved, TData data);
    public abstract virtual TReturn VisitOutgoingExpression(CallHierarchyFindResultOutgoingExpression expression, TData data);
    public abstract virtual TReturn VisitOutgoingClosure(CallHierarchyFindResultOutgoingClosure closure, TData data);
    public abstract virtual TReturn VisitOutgoingQuery(CallHierarchyFindResultOutgoingQuery query, TData data);
    public abstract virtual TReturn VisitOutgoingOverridableMember(CallHierarchyFindResultOutgoingOverridableMember member, TData data);
    public abstract virtual TReturn VisitOutgoingDeclaredElement(CallHierarchyFindResultOutgoingDeclaredElement member, TData data);
    public abstract virtual TReturn VisitOutgoingInitializer(CallHierarchyFindResultOutgoingInitializer initalizer, TData data);
    public abstract virtual TReturn VisitOutgoingImplicitConstructor(CallHierarchyFindResultOutgoingImplicitConstructor implicitConstructor, TData data);
    public abstract virtual TReturn VisitOutgoingTypeParameterConstructor(CallHierarchyFindResultOutgoingTypeParameterConstructor constructor, TData data);
    public abstract virtual TReturn VisitOutgoingImplementorMember(CallHierarchyFindResultOutgoingImplementorMember member, TData data);
    public abstract virtual TReturn VisitIncomingDeclaredElement(CallHierarchyFindResultIncomingDeclaredElement member, TData data);
    public abstract virtual TReturn VisitIncomingInitializerOwner(CallHierarchyFindResultIncomingInitializerOwner owner, TData data);
    public abstract virtual TReturn VisitIncomingEventSubscription(CallHierarchyFindResultIncomingEventSubscription event, TData data);
}
public class JetBrains.ReSharper.Feature.Services.CallHierarchy.Impl.CallHierarchyImplementorsSearchHelper : object {
    private CachingFinder myFinder;
    public CallHierarchyImplementorsSearchHelper(CachingFinder finder);
    [NotNullAttribute]
public ICollection`1<CallHierarchyFindResult> FindImplementors(PsiLanguageType language, ITypeConversionRule conversionRule, DeclaredElementInstance`1<IClrDeclaredElement> sourceMemberInstance, IProgressIndicator progressIndicator);
    private ISubstitution ProduceSubstitution(IOverridableMember member, ISubstitution substitution, ISubstitution substitutionOfBaseElement);
    private ISubstitution ExtentdByOverridableMember(ISubstitution substitution, DeclaredElementInstance`1<IClrDeclaredElement> instance);
    private bool Match(PsiLanguageType language, ITypeConversionRule conversionRule, DeclaredElementInstance`1<IClrDeclaredElement> parentMember, OverrideInfo ancestorMember);
    public ICollection`1<CallHierarchyFindResult> FindImplementingConstructors(ITypeParameter typeParameter, IProgressIndicator progressIndicator);
}
public class JetBrains.ReSharper.Feature.Services.CallHierarchy.Impl.CallHierarchyIncomingSearchHelper : object {
    private CachingFinder myFinder;
    public CallHierarchyIncomingSearchHelper(CachingFinder finder);
    public ICollection`1<CallHierarchyFindResult> FindCalledBy(DeclaredElementInstance`1<IDeclaredElement> sourceTypeMember, IProgressIndicator progressIndicator);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.CallHierarchy.Impl.CallHierarchyIncomingSearchHelper/<ProcessOperators>d__3")]
private IEnumerable`1<CallHierarchyFindResult> ProcessOperators(IReadOnlyCollection`1<FindResultExpression> castOperators, IProgressIndicator progress);
    private IEnumerable`1<FindResultExpression> FindOperators(DeclaredElementInstance`1<IDeclaredElement> elementInstance, IProgressIndicator progress);
    private ICollection`1<CallHierarchyFindResult> ProcessReferences(DeclaredElementInstance`1<IDeclaredElement> sourceElement, OneToListMap`2<IDeclaredElement, ISubstitution> baseElements, ICollection`1<IFindResultReference> references, IProgressIndicator progress);
    private OneToListMap`2<IDeclaredElement, ISubstitution> GetBaseElements(DeclaredElementInstance`1<IDeclaredElement> elementInstance, IProgressIndicator progressIndicator);
    private List`1<IFindResultReference> FindReferences(OneToListMap`2<IDeclaredElement, ISubstitution> elements, DeclaredElementInstance`1<IDeclaredElement> sourceTypeMember, Func`2<IReference, bool> referenceFilter, IProgressIndicator progressIndicator);
    private static bool Match(PsiLanguageType language, ITypeConversionRule conversionRule, DeclaredElementInstance`1<IDeclaredElement> formal, DeclaredElementInstance`1<IDeclaredElement> actual, ISubstitution& formalSubstitution);
}
public static class JetBrains.ReSharper.Feature.Services.CallHierarchy.Impl.CallHierarchyOutgoingSearchHelper : object {
    public static ICollection`1<CallHierarchyFindResult> FindOutgoing(DeclaredElementInstance`1<IDeclaredElement> declaredElementInstance, IProgressIndicator progressIndicator);
    public static ICollection`1<CallHierarchyFindResult> FindSourceElementsOutgoing(ICollection`1<ITreeNode> declarations, ISubstitution sourceSubstitution, IProgressIndicator progressIndicator);
    private static IEnumerable`1<ValueTuple`2<IConversionOperator, ITreeNode>> CollectOperators(ICollection`1<ITreeNode> declarations);
    private static void ProcessResolvedReference(IReference reference, ISubstitution sourceSubstitution, Action`1<CallHierarchyFindResult> continuation);
    private static bool IsMethodGroupReference(IReference reference, IClrDeclaredElement declaredElement);
    private static bool IsLanguageSpecificFunction(IReference reference, IClrDeclaredElement declaredElement);
    private static bool IsBaseCallReference(IReference reference);
    private static CallHierarchyFindResult CreateNode(IClrDeclaredElement function, ISubstitution substitution, ISubstitution sourceSubstitution, ITreeNode referenceElement, bool createOverridable);
    private static CallHierarchyFindResult CreateNode(DeclaredElementInstance`1<IClrDeclaredElement> function, ITreeNode referenceElement, bool createOverridable);
    private static void ProcessUnresolvedReference(IReference reference, ICollection`1<IReference> unresolvedReferences);
    internal static ICollection`1<CallHierarchyFindResult> FindCalledByConstructorInvocation(DeclaredElementInstance`1<IClrDeclaredElement> constructor, IProgressIndicator progressIndicator);
    [NotNullAttribute]
private static ICollection`1<CallHierarchyFindResult> FindFieldInitializers(IClrDeclaredElement constructor);
    [NotNullAttribute]
private static ISubstitution ExtendElementSubstitution(DeclaredElementInstance instance, ISubstitution substitution);
    internal static ICollection`1<CallHierarchyFindResult> FindCalledByDelegateInvocation(ITypeMember delegateTypeMember, IProgressIndicator progressIndicator);
    [NotNullAttribute]
private static DeclaredElementInstance`1<IClrDeclaredElement> GetBaseConstructorInstance(DeclaredElementInstance`1<IClrDeclaredElement> constructor, IConstructor baseConstructor);
    [NotNullAttribute]
[ItemNotNullAttribute]
public static JetHashSet`1<IType> UnfoldTypeConstraints(ITypeParameter typeParameter);
}
internal static class JetBrains.ReSharper.Feature.Services.CallHierarchy.Impl.CallHierarchyUtil : object {
    public static int EstimateInheritors(ITypeElement parentTypeElement);
    [NotNullAttribute]
public static ISubstitution GetAncestorSubstitution(ITypeParametersOwner parentMethod, ITypeParametersOwner ancestorMethod);
    [NotNullAttribute]
public static ISubstitution ReverseSubstitution(ISubstitution substitution);
}
public static class JetBrains.ReSharper.Feature.Services.CallHierarchy.Impl.ClrCallHierarchyLanguageSpecific : object {
    public static void ProcessReferences(IReference reference, IDeclaredElement declaredElement, ICallHierarchyLanguageSpecific languageSpecific, List`1<CallHierarchyFindResult> result, DeclaredElementInstance`1<IDeclaredElement> sourceElement, OneToListMap`2<IDeclaredElement, ISubstitution> baseElements);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.CallHierarchy.Impl.ClrCallHierarchyLanguageSpecific/<ProcessSimpleReference>d__1")]
public static IEnumerable`1<CallHierarchyFindResult> ProcessSimpleReference(Context context);
    private static bool Match(PsiLanguageType language, ITypeConversionRule conversionRule, DeclaredElementInstance`1<IDeclaredElement> formal, DeclaredElementInstance`1<IDeclaredElement> actual, ISubstitution& formalSubstitution);
    public static void GetSuperMembers(IDeclaredElement element, OneToListMap`2<IDeclaredElement, ISubstitution> result, CachingFinder finder, IProgressIndicator progressIndicator);
    public static ICollection`1<CallHierarchyFindResult> FindOutgoing(DeclaredElementInstance`1<IDeclaredElement> declaredElementInstance, IProgressIndicator progressIndicator);
}
public interface JetBrains.ReSharper.Feature.Services.CallHierarchy.Impl.ICallHierarchyLanguageSpecific {
    public abstract virtual bool IsLanguageSpecificFunction(IDeclaredElement declaredElement);
    [CanBeNullAttribute]
public abstract virtual IDeclaration GetParentElementDeclaration(ITreeNode referenceElement);
    [CanBeNullAttribute]
public abstract virtual CallHierarchyFindResult ExtractSubscriber(IReference reference);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<CallHierarchyFindResult> ExtractSubscribersFromDeclaration(ITypeMember delegateTypeMember, IProgressIndicator pi);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IExpression> ExtractInitializersFromDeclaration(IInitializerOwnerDeclaration initializerOwner);
    [CanBeNullAttribute]
public abstract virtual IConstructor ExtractImplicitBaseConstructorCall(IConstructor constructor);
    public abstract virtual bool IsClosureDeclaration(ITreeNode element);
    [CanBeNullAttribute]
public abstract virtual IExpression GetClosureExpression(ITreeNode element);
    [CanBeNullAttribute]
public abstract virtual IExpression GetQuery(ITreeNode element);
    public abstract virtual string GetUnresolvedPresentation(ITreeNode unresolvedElement);
    public abstract virtual bool IsMethodGroupReference(IReference reference, IClrDeclaredElement declaredElement);
    public abstract virtual bool IsIncomingSkippedReference(IReference reference);
    [CanBeNullAttribute]
public abstract virtual IEvent ExtractEventReadWrite(IReference reference, Boolean& isSubscription);
    [NotNullAttribute]
public abstract virtual ITreeNode GetReferenceElement(IReference reference);
    public abstract virtual void ProcessReferences(IReference reference, IDeclaredElement declaredElement, List`1<CallHierarchyFindResult> result, DeclaredElementInstance`1<IDeclaredElement> sourceElement, OneToListMap`2<IDeclaredElement, ISubstitution> baseElements);
    public abstract virtual void GetSuperMembers(IDeclaredElement element, OneToListMap`2<IDeclaredElement, ISubstitution> result, CachingFinder finder, IProgressIndicator progressIndicator);
    public abstract virtual ICollection`1<CallHierarchyFindResult> FindOutgoing(DeclaredElementInstance`1<IDeclaredElement> declaredElementInstance, IProgressIndicator progressIndicator);
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.CallHierarchy.Strategy.ICallHierarchyFindResultSubdivider")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.Feature.Services.CallHierarchy.Strategy.CallHierarchyFindResultSubdividerAttribute : ShellFeaturePartAttribute {
    public CallHierarchyFindResultSubdividerAttribute(Instantiation instantiation);
}
public interface JetBrains.ReSharper.Feature.Services.CallHierarchy.Strategy.ICallHierarchyFindResultSubdivider {
    public abstract virtual bool IsApplicable(CallHierarchyFindResult result);
    public abstract virtual object GetSubdivider(CallHierarchyFindResult result);
}
[CallHierarchyIncomingDeclaredElementNodePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.CallHierarchy.View.CallHierarchyIncomingDeclaredElementNodePresenter : object {
    public virtual bool IsApplicable(ICallHierarchyPresentableNode nodeToPresent);
    public virtual void Present(ICallHierarchyPresentableNode node, TreeModelNode structureElement, PresentableItem presentableItem, PresentationState state, ICallHierarchyNodePresenter presenter);
    public virtual DocumentRange GetPreviewableDocumentRange(ICallHierarchyPresentableNode node);
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.CallHierarchy.View.ICallHierarchyIncomingDeclaredElementNodePresenter")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.Feature.Services.CallHierarchy.View.CallHierarchyIncomingDeclaredElementNodePresenterAttribute : ShellFeaturePartAttribute {
    public CallHierarchyIncomingDeclaredElementNodePresenterAttribute(Instantiation instantiation);
}
public interface JetBrains.ReSharper.Feature.Services.CallHierarchy.View.ICallHierarchyIncomingDeclaredElementNodePresenter {
    public abstract virtual bool IsApplicable(ICallHierarchyPresentableNode nodeToPresent);
    public abstract virtual void Present(ICallHierarchyPresentableNode node, TreeModelNode structureElement, PresentableItem presentableItem, PresentationState state, ICallHierarchyNodePresenter presenter);
    public abstract virtual DocumentRange GetPreviewableDocumentRange(ICallHierarchyPresentableNode node);
}
public interface JetBrains.ReSharper.Feature.Services.CallHierarchy.View.ICallHierarchyNodePresenter {
    public abstract virtual void UpdateItem(object value, TreeModelNode structureElement, IPresentableItem item, PresentationState state);
}
public interface JetBrains.ReSharper.Feature.Services.CallHierarchy.View.ICallHierarchyPresentableNode {
    public IElementInstancePointer`1<IDeclaredElement> ElementInstancePointer { get; }
    public OccurrenceKind Kind { get; }
    public int InvocationCount { get; }
    public abstract virtual IElementInstancePointer`1<IDeclaredElement> get_ElementInstancePointer();
    public abstract virtual OccurrenceKind get_Kind();
    public abstract virtual int get_InvocationCount();
    public abstract virtual ICollection`1<ITreeNode> GetInvocations();
}
public abstract class JetBrains.ReSharper.Feature.Services.ChatContexts.ChatContextPartBase`1 : object {
    public int Priority { get; }
    public abstract virtual int get_Priority();
    public abstract virtual void AppendTo(StringBuilder stringBuilder);
    public sealed virtual bool Equals(IChatContextPart other);
}
public static class JetBrains.ReSharper.Feature.Services.ChatContexts.ChatContextPartPriorities : object {
    public static int ENVIRONMENT;
    public static int SOLUTION;
    public static int PROJECT;
    public static int TEXT_CONTROL;
    public static int GUARDS;
    public static int LAST;
}
public class JetBrains.ReSharper.Feature.Services.ChatContexts.ChatContextPartSet : HashSet`1<IChatContextPart> {
    public T Get();
    public bool Contains();
    public T Remove();
    public T Replace(IChatContextPart newChatContextPart);
}
public class JetBrains.ReSharper.Feature.Services.ChatContexts.FixedLineChatContextPart : object {
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public int Priority { get; }
    public string Text { get; }
    public FixedLineChatContextPart(int priority, string text);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Priority();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    public sealed virtual bool Equals(IChatContextPart other);
    public sealed virtual void AppendTo(StringBuilder stringBuilder);
}
public interface JetBrains.ReSharper.Feature.Services.ChatContexts.IChatContextPart {
    public int Priority { get; }
    public abstract virtual int get_Priority();
    public abstract virtual void AppendTo(StringBuilder stringBuilder);
}
public interface JetBrains.ReSharper.Feature.Services.ChatContexts.IChatContextPartProvider {
    public int Priority { get; }
    public abstract virtual int get_Priority();
    public abstract virtual bool IsApplicable(IDataContext dataContext);
    public abstract virtual void ContributeTo(IDataContext dataContext, ChatContextPartSet parts);
}
public interface JetBrains.ReSharper.Feature.Services.ChatContexts.ILanguageDefinitionContextPart {
}
public interface JetBrains.ReSharper.Feature.Services.ChatContexts.ILanguageOrTechnologyChatContextProvider {
    [CanBeNullAttribute]
public abstract virtual string GetLanguageOrTechnologyPresentation(IPsiModule module);
}
public interface JetBrains.ReSharper.Feature.Services.ChatContexts.ISimpleChatContextPart {
    public string Text { get; }
    public abstract virtual string get_Text();
}
public class JetBrains.ReSharper.Feature.Services.ChatContexts.LegacyChatContextPart : ChatContextPartBase`1<LegacyChatContextPart> {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public int Priority { get; }
    public LegacyChatContextPart(string text);
    [CompilerGeneratedAttribute]
public string get_Text();
    public virtual int get_Priority();
    public virtual void AppendTo(StringBuilder stringBuilder);
}
public abstract class JetBrains.ReSharper.Feature.Services.ChatContexts.SimpleChatContextPart`1 : ChatContextPartBase`1<T> {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    protected SimpleChatContextPart`1(string text);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    public sealed virtual void AppendTo(StringBuilder stringBuilder);
}
public interface JetBrains.ReSharper.Feature.Services.ChatContexts.Usages.IOccurrenceToSymbolUsageAdapter {
    [CanBeNullAttribute]
public abstract virtual SymbolUsageOccurrence Transform(string clrName, IDeclaredElement declaredElement, IOccurrence occurrence);
}
public interface JetBrains.ReSharper.Feature.Services.ChatContexts.Usages.ISymbolUsageOccurrenceWithCustomPresentation {
    public abstract virtual string PresentToModel();
}
public class JetBrains.ReSharper.Feature.Services.ChatContexts.Usages.SymbolUsageOccurrence : object {
    [CompilerGeneratedAttribute]
private string <AbsoluteFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CLRName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Line>k__BackingField;
    public string AbsoluteFilePath { get; }
    public string CLRName { get; }
    public string DisplayName { get; }
    public string Line { get; }
    public SymbolUsageOccurrence(string absoluteFilePath, string clrName, string displayName, string line);
    [CompilerGeneratedAttribute]
public string get_AbsoluteFilePath();
    [CompilerGeneratedAttribute]
public string get_CLRName();
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public string get_Line();
}
public static class JetBrains.ReSharper.Feature.Services.Clipboard.AllowSmartCopyPasteChecker : object {
    public static bool AllowSmartCopyPaste(IPsiSourceFile sourceFile);
}
internal abstract class JetBrains.ReSharper.Feature.Services.Clipboard.ClipboardActionHandler : OverridingActionHandler {
    private IList`1<IClipboardHandler> myHandlers;
    private ClipboardEntriesImpl myClipboardManager;
    protected ClipboardActionHandler(string baseActionId, IList`1<IClipboardHandler> handlers, ClipboardEntriesImpl clipboardManager);
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private void Execute(int handlerIndex, IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.ReSharper.Feature.Services.Clipboard.ClipboardHandler : object {
    private Action`2<IDataContext, DelegateExecute> myAction;
    [CompilerGeneratedAttribute]
private double <Priority>k__BackingField;
    public double Priority { get; }
    public ClipboardHandler(Action`2<IDataContext, DelegateExecute> action, double priority);
    public static IClipboardHandler Of(Action`2<IDataContext, DelegateExecute> action, ClipboardHandlerPriority priority);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Priority();
    public sealed virtual void HandleAction(IDataContext context, DelegateExecute nextExecute);
}
public enum JetBrains.ReSharper.Feature.Services.Clipboard.ClipboardHandlerPriority : Enum {
    public int value__;
    public static ClipboardHandlerPriority TheFirst;
    public static ClipboardHandlerPriority Normal;
    public static ClipboardHandlerPriority TheLast;
}
public abstract class JetBrains.ReSharper.Feature.Services.Clipboard.ClipboardManager : object {
    public abstract virtual void RegisterCopyHandler(Lifetime lifetime, IClipboardHandler handler);
    public abstract virtual void RegisterCutHandler(Lifetime lifetime, IClipboardHandler handler);
    public abstract virtual void RegisterPasteHandler(Lifetime lifetime, IClipboardHandler handler);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Clipboard.ClipboardManagerImpl : ClipboardManager {
    private Lifetime myLifetime;
    private List`1<IClipboardHandler> myCopyHandlers;
    private List`1<IClipboardHandler> myCutHandlers;
    private List`1<IClipboardHandler> myPasteHandlers;
    private static Func`2<IClipboardHandler, double> ourFGetHandlerPriority;
    public ClipboardManagerImpl(Lifetime lifetime, IActionManager actionManager, ClipboardEntriesImpl entries);
    private static ClipboardManagerImpl();
    public virtual void RegisterCopyHandler(Lifetime lifetime, IClipboardHandler handler);
    public virtual void RegisterCutHandler(Lifetime lifetime, IClipboardHandler handler);
    public virtual void RegisterPasteHandler(Lifetime lifetime, IClipboardHandler handler);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Clipboard.CopyPasteAssistManager : object {
    private static int TextSizeLimit;
    [NotNullAttribute]
private IPsiFiles myPsiFiles;
    [NotNullAttribute]
private DocumentManager myDocumentManager;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private Clipboard myClipboard;
    [NotNullAttribute]
private static PsiLanguageCategories[] ourPsiLanguageCategoriesCheckOrder;
    [CanBeNullAttribute]
private CutOrCopySourceInfo myCutOrCopySourceInfo;
    private bool myLineWithoutSelectionCopySource;
    [CompilerGeneratedAttribute]
private SmartPasteInfo <SmartPasteInfo>k__BackingField;
    [CanBeNullAttribute]
public SmartPasteInfo SmartPasteInfo { get; private set; }
    public CopyPasteAssistManager(Lifetime lifetime, ISolution solution, ClipboardManager clipboardManager, Clipboard clipboard, DocumentManager documentManager, IPsiFiles psiFiles, ContextManager contextManager, ITextControlManager textControlManager);
    private static CopyPasteAssistManager();
    [CompilerGeneratedAttribute]
public SmartPasteInfo get_SmartPasteInfo();
    [CompilerGeneratedAttribute]
private void set_SmartPasteInfo(SmartPasteInfo value);
    public void RemoveSmartPasteSuggestion();
    private void DoCopyOrCut(IDataContext context, DelegateExecute nextExecute);
    private void DoPaste(IDataContext context, DelegateExecute nextExecute);
    private void DoReformatOnPaste(IDataContext context, DelegateExecute nextExecute);
    [CanBeNullAttribute]
private IPsiSourceFile GetSourceFile(ITextControl textControl);
    private void SetAssistSourceContext(IPsiServices psiServices, IPsiSourceFile sourceFile, IRangeMarker documentRangeMarker, string text);
    private static Pair`2<ICopyPasteAssist, ITreeNode> GetCopyPasteAssistWithContext(IPsiServices psiServices, IPsiSourceFile sourceFile, DocumentRange documentRange);
    private static DocumentRange GetDocumentCopyRange(ITextControl textControl);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Clipboard.CopyPasteAssistManager/<GetTreeNodesAt>d__21")]
[ItemNotNullAttribute]
private static IEnumerable`1<ITreeNode> GetTreeNodesAt(IPsiServices psiServices, IPsiSourceFile sourceFile, DocumentRange documentRange);
    private void ShowEscapeSuggestionPopup(ITextControl textControl, IDocument document, DocumentOffset pasteOffset, Boolean& isNextExecuted, DelegateExecute nextExecute, string pastedText, string escapedText);
    private static DocumentRange CoerceRangeAfterPaste(string pastedText, DocumentRange documentRange);
}
public class JetBrains.ReSharper.Feature.Services.Clipboard.CutOrCopySourceInfo : object {
    [CompilerGeneratedAttribute]
private string <UnescapedSourceText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawSourceText>k__BackingField;
    [CompilerGeneratedAttribute]
private PsiLanguageType <SourceLanguage>k__BackingField;
    [NotNullAttribute]
public string UnescapedSourceText { get; }
    [NotNullAttribute]
public string RawSourceText { get; }
    [NotNullAttribute]
public PsiLanguageType SourceLanguage { get; }
    public CutOrCopySourceInfo(string unescapedSourceText, string rawSourceText, PsiLanguageType sourceLanguage);
    [CompilerGeneratedAttribute]
public string get_UnescapedSourceText();
    [CompilerGeneratedAttribute]
public string get_RawSourceText();
    [CompilerGeneratedAttribute]
public PsiLanguageType get_SourceLanguage();
}
public interface JetBrains.ReSharper.Feature.Services.Clipboard.IClipboardHandler {
    public double Priority { get; }
    public abstract virtual double get_Priority();
    public abstract virtual void HandleAction(IDataContext context, DelegateExecute nextExecute);
}
public interface JetBrains.ReSharper.Feature.Services.Clipboard.ICopyPasteAssist {
    public abstract virtual bool EscapePastedRegion(CutOrCopySourceInfo context, string pastedText, ITreeNode pasteTargetNode, DocumentRange pasteRange, String& suggestedEscapeText);
    [CanBeNullAttribute]
public abstract virtual CutOrCopySourceInfo GetSourceContext(string rawSourceText, ITreeNode treeNode, DocumentRange copyRange);
}
public interface JetBrains.ReSharper.Feature.Services.Clipboard.ILanguageSpecificCopyPasteBehavior {
    public abstract virtual bool AllowSmartCopyPaste(IPsiSourceFile sourceFile);
}
[RegisterHighlighterAttribute("ReSharper Smart Paste")]
public class JetBrains.ReSharper.Feature.Services.Clipboard.PasteAssistHighlighting : object {
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Clipboard.PasteAssistHighlightingManager : object {
    public static string ENTITY_EDITED_ATTRIBUTE_ID;
    private static string ENTITY_EDITED_HIGHLIGHTER_KEY;
    private Lifetime myLifetime;
    [NotNullAttribute]
private IThreading myThreading;
    [NotNullAttribute]
private IDocumentMarkupManager myMarkupManager;
    [CanBeNullAttribute]
private IDocument myDocumentWithHighlighter;
    private DocumentRange myDocumentRange;
    public PasteAssistHighlightingManager(Lifetime lifetime, IThreading threading, IDocumentMarkupManager markupManager);
    public void SetHighlighter(DocumentRange documentRange);
    public void ClearHighlighter();
    private void UpdateHighlighter();
    private void SynchronizeHighlighter(IDocument document, string highlighterKey, string attributeId, Nullable`1<HighlighterLayer> layer, TextRange range);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Feature.Services.Clipboard.PasteAssistPopupContextAction : object {
    [NotNullAttribute]
private LanguageIndependentContextActionDataProvider myDataProvider;
    private static string CaptionText;
    public string PopupMenuCaption { get; }
    public string PopupKey { get; }
    public Anchoring2D[] PopupAnchorings { get; }
    public PasteAssistPopupContextAction(LanguageIndependentContextActionDataProvider provider);
    private static PasteAssistPopupContextAction();
    public sealed virtual string get_PopupMenuCaption();
    public sealed virtual void FillMenuItemDescriptor(IBulbAction key, IMenuItemDescriptor descriptor);
    public sealed virtual string get_PopupKey();
    public sealed virtual Anchoring2D[] get_PopupAnchorings();
    public sealed virtual IEnumerable`1<IBulbAction> CreateBulbActions();
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.Bulbs.IPopupBulbAction.IsAvailable(IUserDataHolder cache);
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.Bulbs.IPopupBulbAction.OnPopupShown(Lifetime showingLifetime);
    public sealed virtual void SuppressAction();
    [CanBeNullAttribute]
private SmartPasteInfo GetEscapingInfo();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Feature.Services.Clipboard.SmartPasteInfo : object {
    [CompilerGeneratedAttribute]
private string <EscapedText>k__BackingField;
    [CompilerGeneratedAttribute]
private IRangeMarker <PasteRangeMarker>k__BackingField;
    [NotNullAttribute]
public string EscapedText { get; }
    [NotNullAttribute]
public IRangeMarker PasteRangeMarker { get; }
    public SmartPasteInfo(IRangeMarker pasteRangeMarker, string escapedText);
    [CompilerGeneratedAttribute]
public string get_EscapedText();
    [CompilerGeneratedAttribute]
public IRangeMarker get_PasteRangeMarker();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Clipboard.ZoneMarker : object {
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.ClipboardRead.ClipboardEntriesImpl : object {
    private static int EntriesLimit;
    private Lifetime myLifetime;
    private IThreading myThreading;
    private Clipboard myClipboard;
    private List`1<IDataObject> myEntries;
    public IEnumerable`1<IDataObject> ClipboardEntries { get; }
    public ClipboardEntriesImpl(Lifetime lifetime, IThreading threading, Clipboard clipboard);
    public sealed virtual IEnumerable`1<IDataObject> get_ClipboardEntries();
    public sealed virtual void AddClipboardEntry(IDataObject dataObject);
    public void AddClipboardEntry();
    public void ClearClipboardEntries();
    public sealed virtual void RemoveClipboardEntry(IDataObject dataObject);
    public virtual void QueueAddClipboardEntry();
}
public interface JetBrains.ReSharper.Feature.Services.ClipboardRead.IClipboardEntries {
    public IEnumerable`1<IDataObject> ClipboardEntries { get; }
    public abstract virtual IEnumerable`1<IDataObject> get_ClipboardEntries();
    public abstract virtual void AddClipboardEntry(IDataObject dataObject);
    public abstract virtual void RemoveClipboardEntry(IDataObject dataObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.ClrLanguages.ClrLanguagesKnown : object {
    private HashSet`1<PsiLanguageType> myLanguages;
    private PsiProjectFileTypeCoordinator myProjectFileTypeCoordinator;
    public IEnumerable`1<PsiLanguageType> AllLanguages { get; }
    public ClrLanguagesKnown(Lifetime lifetime, IEnumerable`1<IClrLanguagesKnown> languages, PsiProjectFileTypeCoordinator projectFileTypeCoordinator, IProjectHasPsiService projectHasPsiService);
    public IEnumerable`1<PsiLanguageType> get_AllLanguages();
    [PureAttribute]
public bool IsClrLanguahe(PsiLanguageType languageType);
    public bool HasCSharp();
    public bool HasVB();
    public bool HasCpp();
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.ClrLanguages.IClrLanguagesKnown {
    public PsiLanguageType Language { get; }
    public abstract virtual PsiLanguageType get_Language();
}
public class JetBrains.ReSharper.Feature.Services.Code.ReferenceSorterLanguageService : object {
    [NotNullAttribute]
public static ReferenceSorterLanguageService Instance;
    private static ReferenceSorterLanguageService();
    [NotNullAttribute]
public virtual ReferenceComparatorDelegate GetReferenceComparator();
    protected static int CompareReferences(IReference referenceX, IReference referenceY, OneToListMap`2<ITreeNode, IReference> references);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Code.ReferenceSorterService : object {
    [NotNullAttribute]
private LanguageManager myLanguageManager;
    [NotNullAttribute]
public static ReferenceSorterService Instance { get; }
    public ReferenceSorterService(LanguageManager languageManager);
    public static ReferenceSorterService get_Instance();
    [NotNullAttribute]
[PureAttribute]
public ReferenceSorterLanguageService GetSorter(PsiLanguageType language);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.CodeAnnotationHints.CodeAnnotationHintAdornmentProvider : object {
    private ISettingsStore mySettingsStore;
    public CodeAnnotationHintAdornmentProvider(ISettingsStore settingsStore);
    public sealed virtual bool IsValid(IHighlighter highlighter);
    public sealed virtual IAdornmentDataModel CreateDataModel(IHighlighter highlighter);
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IntraTextAdornments")]
[DaemonTooltipProviderAttribute("")]
[InlayHintContextActionStyleAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "CodeAnnotationHints_Text", "True")]
public class JetBrains.ReSharper.Feature.Services.CodeAnnotationHints.CodeAnnotationHintContextActionHighlighting : object {
    [CompilerGeneratedAttribute]
private IInlayHintBulbActionsProvider <BulbActionsProvider>k__BackingField;
    private DocumentRange myRange;
    public IInlayHintBulbActionsProvider BulbActionsProvider { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public string TestOutput { get; }
    public CodeAnnotationHintContextActionHighlighting(DocumentRange range, IInlayHintBulbActionsProvider bulbActionsProvider);
    [CompilerGeneratedAttribute]
public IInlayHintBulbActionsProvider get_BulbActionsProvider();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual string get_TestOutput();
}
[InlayHintContextActionProviderAttribute("JetBrains.ProjectModel.KnownProjectFileType", "16")]
public class JetBrains.ReSharper.Feature.Services.CodeAnnotationHints.CodeAnnotationHintContextActionsProvider : InlayHintContextActionsProvider`1<CodeAnnotationHintContextActionHighlighting> {
    private ISettingsStore mySettingsStore;
    public CodeAnnotationHintContextActionsProvider(ISettingsStore settingsStore);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.CodeAnnotationHints.CodeAnnotationHintContextActionsProvider/<GetPerHighlightingActions>d__2")]
public virtual IEnumerable`1<IntentionAction> GetPerHighlightingActions(IEnumerable`1<IInlayHintContextActionHighlighting> highlightings, IAnchor configureAnchor, IAnchor configureParentAnchor);
    public virtual IEnumerable`1<IntentionAction> GetCommonActions(IEnumerable`1<IInlayHintContextActionHighlighting> highlightings, IAnchor configureAnchor);
    public virtual string GetOptionsPageId(IEnumerable`1<IInlayHintContextActionHighlighting> highlightings);
}
public class JetBrains.ReSharper.Feature.Services.CodeAnnotationHints.CodeAnnotationHintDataModel : object {
    private ISettingsStore mySettingsStore;
    private CodeAnnotationHintHighlighting myHighlighting;
    private IInlayHintBulbActionsProvider myBulbActionsProvider;
    private List`1<BulbMenuItem> myContextMenuItems;
    [CompilerGeneratedAttribute]
private AdornmentData <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private IPresentableItem <ContextMenuTitle>k__BackingField;
    public AdornmentData Data { get; }
    public IPresentableItem ContextMenuTitle { get; }
    public IEnumerable`1<BulbMenuItem> ContextMenuItems { get; }
    public Nullable`1<TextRange> SelectionRange { get; }
    public CodeAnnotationHintDataModel(ISettingsStore settingsStore, CodeAnnotationHintHighlighting highlighting, IInlayHintBulbActionsProvider bulbActionsProvider);
    [CompilerGeneratedAttribute]
public sealed virtual AdornmentData get_Data();
    [CompilerGeneratedAttribute]
public sealed virtual IPresentableItem get_ContextMenuTitle();
    public sealed virtual IEnumerable`1<BulbMenuItem> get_ContextMenuItems();
    public sealed virtual void ExecuteNavigation(PopupWindowContextSource popupWindowContextSource);
    public sealed virtual Nullable`1<TextRange> get_SelectionRange();
}
[DaemonAdornmentProviderAttribute("JetBrains.ReSharper.Feature.Services.CodeAnnotationHints.CodeAnnotationHintAdornmentProvider")]
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IntraTextAdornments")]
public class JetBrains.ReSharper.Feature.Services.CodeAnnotationHints.CodeAnnotationHintHighlighting : object {
    private DocumentRange myRange;
    [CompilerGeneratedAttribute]
private TextRange <SelectionRange>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaredElementPointer`1<IDeclaredElement> <MatchingParameterPointer>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private PushToHintMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private IInlayHintBulbActionsProvider <BulbActionsProvider>k__BackingField;
    public TextRange SelectionRange { get; }
    [CanBeNullAttribute]
public IDeclaredElementPointer`1<IDeclaredElement> MatchingParameterPointer { get; }
    public RichText Text { get; }
    public string ToolTip { get; }
    public int Order { get; }
    public PushToHintMode Mode { get; }
    public IInlayHintBulbActionsProvider BulbActionsProvider { get; }
    public string ErrorStripeToolTip { get; }
    public string TestOutput { get; }
    public CodeAnnotationHintHighlighting(DocumentRange range, TextRange selectionRange, IParameter matchingParameter, string text, string tooltip, int order, PushToHintMode mode, IInlayHintBulbActionsProvider bulbActionsProvider);
    [CompilerGeneratedAttribute]
public TextRange get_SelectionRange();
    [CompilerGeneratedAttribute]
public IDeclaredElementPointer`1<IDeclaredElement> get_MatchingParameterPointer();
    [CompilerGeneratedAttribute]
public RichText get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public PushToHintMode get_Mode();
    [CompilerGeneratedAttribute]
public IInlayHintBulbActionsProvider get_BulbActionsProvider();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual string get_TestOutput();
}
[SolutionComponentAttribute("0")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Feature.Services.CodeAnnotationHints.CodeAnnotationHintHighlightingProvider : object {
    [NotNullAttribute]
private CodeAnnotationsCache myCodeAnnotationsCache;
    public CodeAnnotationHintHighlightingProvider(CodeAnnotationsCache codeAnnotationsCache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.CodeAnnotationHints.CodeAnnotationHintHighlightingProvider/<GetHighlightings>d__2")]
[NotNullAttribute]
public IEnumerable`1<IHighlighting> GetHighlightings(int parameterIndex, IParameter parameter, DocumentRange highlightingRange, ICodeAnnotationHintFormatter formatter, IInlayHintBulbActionsProvider bulbActionsProvider, PushToHintMode mode);
}
public interface JetBrains.ReSharper.Feature.Services.CodeAnnotationHints.ICodeAnnotationHintFormatter {
    public abstract virtual IEnumerable`1<ValueTuple`2<string, string>> Format(String[] descriptions);
}
public class JetBrains.ReSharper.Feature.Services.CodeAnnotationHints.JoinCodeAnnotationHintFormatter : object {
    private string myLeftBrace;
    private string myRightBrace;
    public JoinCodeAnnotationHintFormatter(string leftBrace, string rightBrace);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.CodeAnnotationHints.JoinCodeAnnotationHintFormatter/<Format>d__3")]
public sealed virtual IEnumerable`1<ValueTuple`2<string, string>> Format(String[] descriptions);
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeAnnotationHints.ManagedLanguageCodeAnnotationHintBulbActionsProvider`1 : object {
    public sealed virtual IEnumerable`1<IntentionAction> CreateChangeVisibilityActions(ISettingsStore settingsStore, IHighlighting highlighting, IAnchor anchor);
    public sealed virtual IEnumerable`1<BulbMenuItem> CreateChangeVisibilityBulbMenuItems(ISettingsStore settingsStore, IHighlighting highlighting);
    public abstract virtual string GetOptionsPageId();
}
public class JetBrains.ReSharper.Feature.Services.CodeAnnotationHints.SeparateCodeAnnotationHintFormatter : object {
    private string myLeftBrace;
    private string myRightBrace;
    public SeparateCodeAnnotationHintFormatter(string leftBrace, string rightBrace);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.CodeAnnotationHints.SeparateCodeAnnotationHintFormatter/<Format>d__3")]
public sealed virtual IEnumerable`1<ValueTuple`2<string, string>> Format(String[] descriptions);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.CodeAnnotationHints.ZoneMarker : object {
}
public enum JetBrains.ReSharper.Feature.Services.CodeCleanup.ActionScope : Enum {
    public int value__;
    public static ActionScope None;
    public static ActionScope Selection;
    public static ActionScope File;
    public static ActionScope MultipleFiles;
    public static ActionScope MultipleFilesAndRanges;
    public static ActionScope Directory;
    public static ActionScope Solution;
}
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.CleanupModulesCollector : CounterUsagesCollector {
    private EventLogGroup myGroup;
    private EventId1`1<Type> myModuleInvokedEvent;
    public CleanupModulesCollector(FeatureUsageLogger featureUsageLogger);
    public virtual EventLogGroup GetGroup();
    public void RegisterEvent(ISolution solution, Type type);
}
[PublicAPIAttribute]
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupBoolOptionDescriptor : CodeCleanupOptionDescriptor`1<bool> {
    private static Dictionary`2<string, CodeCleanupLanguage> Languages;
    public CodeCleanupBoolOptionDescriptor(string id);
    private static CodeCleanupBoolOptionDescriptor();
}
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupCounterCollector : CounterUsagesCollector {
    private EnumEventField`1<ProfileType> myProfileField;
    private EnumEventField`1<ScopeType> myScopeTypeField;
    private EnumEventField`1<CleanupInvocationType> myCleanupInvocationTypeField;
    private StringListEventField myExtensionsField;
    [CompilerGeneratedAttribute]
private CodeCleanupSettingsComponent <CodeCleanupSettingsComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private VarargEventId <Invocation>k__BackingField;
    [CompilerGeneratedAttribute]
private EventLogGroup <Group>k__BackingField;
    private CodeCleanupSettingsComponent CodeCleanupSettingsComponent { get; }
    private VarargEventId Invocation { get; }
    private EventLogGroup Group { get; }
    public CodeCleanupCounterCollector(FeatureUsageLogger featureUsageLogger, CodeCleanupSettingsComponent codeCleanupSettingsComponent);
    [CompilerGeneratedAttribute]
private CodeCleanupSettingsComponent get_CodeCleanupSettingsComponent();
    public virtual EventLogGroup GetGroup();
    [CompilerGeneratedAttribute]
private VarargEventId get_Invocation();
    [CompilerGeneratedAttribute]
private EventLogGroup get_Group();
    public void RegisterInvocation(ISolution solution, CodeCleanupProfile profile, ScopeType scopeType, CleanupInvocationType invocationType, SortedSet`1<string> extensions);
    public static SortedSet`1<string> GetExtensionSet(IProjectFile[] selectedFilesArray);
}
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupFilesCollector : CodeCleanupFilesCollectorBase {
    [CanBeNullAttribute]
private IProjectModelElement[] myProjectElements;
    [CanBeNullAttribute]
private ITextControl myTextControl;
    [CanBeNullAttribute]
private Func`2<IProjectFile, TextRange[]> myGetRanges;
    private ActionScope myActionScope;
    private DocumentRange[] myDefaultRanges;
    [CompilerGeneratedAttribute]
private IProjectFile <CurrentFile>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectFolder <CurrentDirectory>k__BackingField;
    [CanBeNullAttribute]
public ITextControl TextControl { get; }
    [CanBeNullAttribute]
public IProjectItem ProjectItem { get; }
    [CanBeNullAttribute]
public IProjectFile CurrentFile { get; private set; }
    [CanBeNullAttribute]
public IProjectFolder CurrentDirectory { get; private set; }
    private CodeCleanupFilesCollector(ISolution solution, IProjectModelElement[] projectElements, ITextControl textControl, CodeCleanupService codeCleanup, Func`2<IProjectFile, TextRange[]> getRanges);
    public ITextControl get_TextControl();
    public virtual IProjectItem get_ProjectItem();
    [CompilerGeneratedAttribute]
public IProjectFile get_CurrentFile();
    [CompilerGeneratedAttribute]
private void set_CurrentFile(IProjectFile value);
    [CompilerGeneratedAttribute]
public IProjectFolder get_CurrentDirectory();
    [CompilerGeneratedAttribute]
private void set_CurrentDirectory(IProjectFolder value);
    public ActionScope GetActionScope();
    private ActionScope DetermineActionScope();
    public Func`3<Lifetime, DataContexts, IDataContext> GetContext();
    public virtual IReadOnlyList`1<IPsiSourceFile> GetFiles();
    public virtual DocumentRange[] GetRangesForFile(IPsiSourceFile file);
    [CanBeNullAttribute]
public static CodeCleanupFilesCollector TryCreate(IDataContext context);
    [NotNullAttribute]
public static CodeCleanupFilesCollector Create(ISolution solution, IReadOnlyCollection`1<IProjectModelElement> projectElements, Func`2<IProjectFile, TextRange[]> getRanges);
    public SortedSet`1<string> GetExtensionSet();
    [CompilerGeneratedAttribute]
private bool <DetermineActionScope>b__19_0(IProjectModelElement element);
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupFilesCollectorBase : object {
    [NotNullAttribute]
private CodeCleanupService myCodeCleanupService;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    public ISolution Solution { get; }
    public IProjectItem ProjectItem { get; }
    protected CodeCleanupFilesCollectorBase(ISolution solution, CodeCleanupService codeCleanup);
    [CompilerGeneratedAttribute]
public sealed virtual ISolution get_Solution();
    public abstract virtual IProjectItem get_ProjectItem();
    public abstract virtual IReadOnlyList`1<IPsiSourceFile> GetFiles();
    public virtual DocumentRange[] GetRangesForFile(IPsiSourceFile file);
    public sealed virtual bool IsSuitableProjectElement(IProjectModelElement element);
    public sealed virtual bool IsSuitableFile(IProjectFile file);
}
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupGroup : EnumPattern {
    public static string CodeCleanupGroupPrefix;
    [CompilerGeneratedAttribute]
private int <OrderNum>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResourceType>k__BackingField;
    public int OrderNum { get; }
    public Type ResourceType { get; }
    public string DisplayName { get; }
    public CodeCleanupGroup(string name, int orderNum, Type resourceType);
    [CompilerGeneratedAttribute]
public int get_OrderNum();
    [CompilerGeneratedAttribute]
public Type get_ResourceType();
    public string get_DisplayName();
}
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupLanguage : EnumPattern {
    public static string CodeCleanupCategoryPrefix;
    [CompilerGeneratedAttribute]
private int <OrderNum>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResourceType>k__BackingField;
    public int OrderNum { get; }
    public Type ResourceType { get; }
    public string DisplayName { get; }
    public CodeCleanupLanguage(string name, int orderNum, Type resourceType);
    [CompilerGeneratedAttribute]
public int get_OrderNum();
    [CompilerGeneratedAttribute]
public Type get_ResourceType();
    public string get_DisplayName();
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupModule")]
[ComponentInstantiationAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupModuleAttribute : ShellComponentAttribute {
    public static Instantiation CodeCleanupDefaultInstantiation;
    [CompilerGeneratedAttribute]
private Type[] <ModulesBefore>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <ModulesAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrderID>k__BackingField;
    public Type[] ModulesBefore { get; public set; }
    public Type[] ModulesAfter { get; public set; }
    public string OrderID { get; public set; }
    public CodeCleanupModuleAttribute(Instantiation instantiation);
    [CompilerGeneratedAttribute]
public Type[] get_ModulesBefore();
    [CompilerGeneratedAttribute]
public void set_ModulesBefore(Type[] value);
    [CompilerGeneratedAttribute]
public Type[] get_ModulesAfter();
    [CompilerGeneratedAttribute]
public void set_ModulesAfter(Type[] value);
    [CompilerGeneratedAttribute]
public string get_OrderID();
    [CompilerGeneratedAttribute]
public void set_OrderID(string value);
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupOptionDescriptor : object {
    public static CodeCleanupLanguage CSharpCategory;
    public static CodeCleanupLanguage CppCategory;
    public static CodeCleanupLanguage VBasicCategory;
    public static CodeCleanupLanguage XmlCategory;
    public static CodeCleanupLanguage XamlCategory;
    public static CodeCleanupLanguage HtmlCategory;
    public static CodeCleanupLanguage CssCategory;
    public static CodeCleanupLanguage JavaScriptCategory;
    public static CodeCleanupLanguage TypeScriptCategory;
    public static CodeCleanupLanguage AspCategory;
    public static CodeCleanupLanguage HiddenCategory;
    public static string CodeCleanupTaskPrefix;
    public static CodeCleanupGroup ReformatGroup;
    public static CodeCleanupGroup SyntaxStyleGroup;
    public static CodeCleanupGroup OptimizeImportsGroup;
    public static CodeCleanupGroup RearrangeGroup;
    public static CodeCleanupGroup RedundanciesOptimizationsGroup;
    public static CodeCleanupGroup CopyrightGroup;
    public static CodeCleanupGroup ExternalToolsGroup;
    public static CodeCleanupGroup HiddenGroup;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeCleanupLanguage <LanguageCategory>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeCleanupGroup <CleanupGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [NotNullAttribute]
public string Id { get; }
    [CanBeNullAttribute]
public Type ResourceType { get; }
    [NotNullAttribute]
public CodeCleanupLanguage LanguageCategory { get; protected set; }
    [NotNullAttribute]
public CodeCleanupGroup CleanupGroup { get; protected set; }
    [CanBeNullAttribute]
protected string DisplayName { get; protected set; }
    protected CodeCleanupOptionDescriptor(string id, CodeCleanupLanguage languageCategory, CodeCleanupGroup cleanupGroup, Type resourceType, string displayName);
    private static CodeCleanupOptionDescriptor();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public Type get_ResourceType();
    [CompilerGeneratedAttribute]
public CodeCleanupLanguage get_LanguageCategory();
    [CompilerGeneratedAttribute]
protected void set_LanguageCategory(CodeCleanupLanguage value);
    [CompilerGeneratedAttribute]
public CodeCleanupGroup get_CleanupGroup();
    [CompilerGeneratedAttribute]
protected void set_CleanupGroup(CodeCleanupGroup value);
    [CompilerGeneratedAttribute]
protected string get_DisplayName();
    [CompilerGeneratedAttribute]
protected void set_DisplayName(string value);
    public string GetDisplayName();
}
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupOptionDescriptor`1 : CodeCleanupSingleOptionDescriptor {
    [CompilerGeneratedAttribute]
private T <DefaultValue>k__BackingField;
    public object DefaultValueObject { get; }
    public T DefaultValue { get; protected set; }
    public CodeCleanupOptionDescriptor`1(string id, CodeCleanupLanguage languageCategory, CodeCleanupGroup cleanupGroup, Type resourceType, string simpleXPath, string displayName, T defaultValue);
    public virtual string ValueToString(T value);
    public virtual T StringToValue(string s);
    public virtual object get_DefaultValueObject();
    [CompilerGeneratedAttribute]
public T get_DefaultValue();
    [CompilerGeneratedAttribute]
protected void set_DefaultValue(T value);
}
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupOptionGroupDescriptor : CodeCleanupOptionDescriptor {
    [CompilerGeneratedAttribute]
private CodeCleanupOptionDescriptor[] <Children>k__BackingField;
    [NotNullAttribute]
public CodeCleanupOptionDescriptor[] Children { get; }
    public CodeCleanupOptionGroupDescriptor(string id, CodeCleanupLanguage languageCategory, CodeCleanupGroup cleanupGroup, Type resourceType, string displayName, CodeCleanupOptionDescriptor[] children);
    [CompilerGeneratedAttribute]
public CodeCleanupOptionDescriptor[] get_Children();
}
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupProfile : object {
    private XmlElement mySettings;
    private Dictionary`2<CodeCleanupOptionDescriptor, object> myCachedSettings;
    [CompilerGeneratedAttribute]
private Nullable`1<DefaultProfileType> <DefaultProfileType>k__BackingField;
    public string Id { get; }
    public string ShortName { get; public set; }
    public string FullName { get; }
    public Nullable`1<DefaultProfileType> DefaultProfileType { get; }
    public bool IsDefault { get; }
    public string ProfileContents { get; }
    public CodeCleanupProfile(Nullable`1<DefaultProfileType> defaultProfileType, string profileContents);
    public string get_Id();
    public static string GetDefaultProfileId(DefaultProfileType defaultProfileType);
    public string get_ShortName();
    public void set_ShortName(string value);
    public string get_FullName();
    [CompilerGeneratedAttribute]
public Nullable`1<DefaultProfileType> get_DefaultProfileType();
    public bool get_IsDefault();
    public string get_ProfileContents();
    public object GetSetting(CodeCleanupSingleOptionDescriptor key);
    public void SetSetting(CodeCleanupSingleOptionDescriptor key, object value);
    public bool IsAnySettingsOn(IReadOnlyCollection`1<CodeCleanupOptionDescriptor`1<bool>> descriptors);
    public void SetAll(IReadOnlyCollection`1<CodeCleanupOptionDescriptor`1<T>> descriptors, T value);
    public T GetSetting(CodeCleanupOptionDescriptor`1<T> key);
    public void SetSetting(CodeCleanupOptionDescriptor`1<T> key, T value);
    public CodeCleanupProfile Clone();
    [CompilerGeneratedAttribute]
private bool <IsAnySettingsOn>b__20_0(CodeCleanupOptionDescriptor`1<bool> descriptor);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupProgressIndicator : object {
    [ExtensionAttribute]
[PureAttribute]
[ContractAnnotationAttribute("progressParent:null => null; => notnull")]
public static ICodeCleanupProgressIndicator CreateSubProgress(ICodeCleanupProgressIndicator progressParent);
    [ExtensionAttribute]
[PureAttribute]
[ContractAnnotationAttribute("progressParent:null => null; => notnull")]
public static ICodeCleanupProgressIndicator CreateSubProgress(ICodeCleanupProgressIndicator progressParent, double fUnitsInParentIndicator);
    [ExtensionAttribute]
[PureAttribute]
[ContractAnnotationAttribute("progressIndicator:null => null; => notnull")]
public static ICodeCleanupProgressIndicator CreateCodeCleanupProgressIndicator(IProgressIndicator progressIndicator, ISolution solution);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupService : object {
    public static ILogger Logger;
    public static string CodeCleanupTitle;
    private DocumentManager myDocumentManager;
    private SpecialFilesManager mySpecialFilesManager;
    private IEnumerable`1<IIsFileOpenedProvider> myIsFileOpenedProviders;
    [CompilerGeneratedAttribute]
private ISignal`1<CodeCleanupInvocationArgs> <WholeFileCleanupCompleted>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<CodeCleanupInvocationArgs> <WholeFileCleanupCompletedAfterSave>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<CodeCleanupInvocationArgs> <CodeCleanupFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<DiffCodeCleanupInvocationArgs> <DiffFileCleanupCompleted>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeCleanupCounterCollector <Collector>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeCleanupSettingsComponent <Settings>k__BackingField;
    public ISignal`1<CodeCleanupInvocationArgs> WholeFileCleanupCompleted { get; }
    public ISignal`1<CodeCleanupInvocationArgs> WholeFileCleanupCompletedAfterSave { get; }
    public ISignal`1<CodeCleanupInvocationArgs> CodeCleanupFailed { get; }
    public ISignal`1<DiffCodeCleanupInvocationArgs> DiffFileCleanupCompleted { get; }
    public CodeCleanupCounterCollector Collector { get; }
    public CodeCleanupSettingsComponent Settings { get; }
    public CodeCleanupService(CodeCleanupSettingsComponent settings, DocumentManager documentManager, SpecialFilesManager specialFilesManager, IEnumerable`1<IIsFileOpenedProvider> isFileOpenedProviders, CodeCleanupCounterCollector collector);
    private static CodeCleanupService();
    public void CleanupSingleFile(IPsiSourceFile sourceFile, DocumentRange range, CodeCleanupProfile profile, ICodeCleanupProgressIndicator progress);
    public void CleanupMultipleFiles(IReadOnlyList`1<IPsiSourceFile> files, CodeCleanupProfile profile, ICodeCleanupProgressIndicator progress);
    public void CleanupMultipleFiles(IReadOnlyList`1<IPsiSourceFile> files, CodeCleanupProfile profile, Func`2<IPsiSourceFile, DocumentRange[]> getRanges, bool forceRunWholeFilesModules, bool forceSaveFiles, ICodeCleanupProgressIndicator progress);
    public void CleanupDiff(IReadOnlyList`1<IPsiSourceFile> files, CodeCleanupProfile profile, Func`2<VirtualFileSystemPath, string> getOldFileText, bool doFullCleanupIfPartialImpossible, ICodeCleanupProgressIndicator progress);
    public void TestCleanupSingleFileWithoutSelectionTracking(IPsiSourceFile sourceFile, DocumentRange range, CodeCleanupProfile profile, ICodeCleanupProgressIndicator progress);
    [CompilerGeneratedAttribute]
public ISignal`1<CodeCleanupInvocationArgs> get_WholeFileCleanupCompleted();
    [CompilerGeneratedAttribute]
public ISignal`1<CodeCleanupInvocationArgs> get_WholeFileCleanupCompletedAfterSave();
    [CompilerGeneratedAttribute]
public ISignal`1<CodeCleanupInvocationArgs> get_CodeCleanupFailed();
    [CompilerGeneratedAttribute]
public ISignal`1<DiffCodeCleanupInvocationArgs> get_DiffFileCleanupCompleted();
    [CompilerGeneratedAttribute]
public CodeCleanupCounterCollector get_Collector();
    [CompilerGeneratedAttribute]
public CodeCleanupSettingsComponent get_Settings();
    public static CodeCleanupService GetInstance(ISolution solution);
    public bool RequiresDaemon(IPsiSourceFile sourceFile, CodeCleanupProfile profile);
    public bool IsAvailable(IPsiSourceFile sourceFile, DocumentRange range);
    public bool IsSuitableFile(IProjectFile projectFile);
    public void RegisterInvocation(ISolution solution, CodeCleanupProfile profile, ScopeType scopeType, CleanupInvocationType silentAction, SortedSet`1<string> extensions);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Resources.Settings.CodeStyleSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "CodeCleanupSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupSettings : object {
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "CustomProfilesCollectionSettingDescription")]
public IIndexedEntry`2<string, string> Profiles;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "ProfileSubstitutionSettingDescription")]
public IIndexedEntry`2<string, string> ProfileSubstitution;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "RecentlyUsedProfileSettingDescription")]
public string RecentlyUsedProfile;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ProfileToUseForSilentCleanupSettingDescription")]
public string SilentCleanupProfile;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "RunCleanupWhenSavingFileSettingDescription")]
public bool CleanupOnSave;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "CleanupOnSaveFileMaskSettingDescription")]
public string CleanupOnSaveFileMask;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "OnlyRunCleanupOnChangedPartsOfFileSettingDescription")]
public bool PartCleanupOnSave;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "PerformFullCleanupIfPartialImpossible")]
public bool PerformFullCleanupIfPartialImpossible;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "AllowCleanupOnSaveForSharedFilesSettingDescription")]
public bool CleanupOnSaveForSharedFiles;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "CleanupAllConfigurationsTargetFrameworksOnSaveSettingDescription")]
public bool CleanupAllConfigurationsOnSave;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "SaveAfterCleanupIfCleaningUpTheWholeFileSettingDescription")]
public bool SaveAfterCleanup;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "PeriodToTrackRecentlyModifiedFilesSettingDescription")]
public int RecentlyModifiedPeriod;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "OnlyRunCleanupOnChangedPartsOfRecentlyModifiedFileSettingDescription")]
public bool PartCleanupOnRecentlyModifiedFiles;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "AllowNewGroupingOfCleanupContextActionsSettingDescription")]
public bool UseNewAltEnterGrouping;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Hide code cleanup features")]
public bool HideCodeCleanupFeatures;
}
[PsiSharedComponentAttribute]
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupSettingsComponent : object {
    private IEnumerable`1<ICodeCleanupProfileUpgrader> myUpgraders;
    private IEnumerable`1<IHiddenCodeCleanupDescriptorsProvider> myHiddenCodeCleanupDescriptorsProviders;
    private static string CodeCleanupBuiltInProfilePrefix;
    private IImmutableList`1<IAdditionalCodeCleanupProfileDataProvider> myAdditionalDataProviders;
    internal static Dictionary`2<DefaultProfileType, string> ourBuiltInProfileIds;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ICodeCleanupModule> <Modules>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<CodeCleanupSingleOptionDescriptor> <AdditionalData>k__BackingField;
    public IReadOnlyCollection`1<ICodeCleanupModule> Modules { get; }
    public IEnumerable`1<CodeCleanupSingleOptionDescriptor> AdditionalData { get; }
    public CodeCleanupSettingsComponent(Lifetime lifetime, IEnumerable`1<ICodeCleanupModule> modules, IImmutableList`1<IAdditionalCodeCleanupProfileDataProvider> additionalDataProviders, IEnumerable`1<ICodeCleanupProfileUpgrader> upgraders, IEnumerable`1<IHiddenCodeCleanupDescriptorsProvider> hiddenCodeCleanupDescriptorsProviders);
    private static CodeCleanupSettingsComponent();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<ICodeCleanupModule> get_Modules();
    [CompilerGeneratedAttribute]
public IEnumerable`1<CodeCleanupSingleOptionDescriptor> get_AdditionalData();
    private CodeCleanupProfile RunUpgraders(CodeCleanupProfile profile);
    public bool ShouldHide(CodeCleanupOptionDescriptor descriptor);
    public ICollection`1<CodeCleanupProfile> GetProfiles(IContextBoundSettingsStore store);
    public Nullable`1<DefaultProfileType> GetProfileType(CodeCleanupProfile profile);
    public void SetProfiles(IEnumerable`1<CodeCleanupProfile> profiles, IContextBoundSettingsStore store);
    [CanBeNullAttribute]
public CodeCleanupProfile FindProfile(string id, IContextBoundSettingsStore store);
    private CodeCleanupProfile TryFindDefaultProfile(string id);
    [CanBeNullAttribute]
public CodeCleanupProfile GetSilentCleanupProfile(IContextBoundSettingsStore store);
    public void SetSilentCleanupProfileId(IContextBoundSettingsStore store, string id);
    public CodeCleanupProfile GetRecentlyUsedProfile(IContextBoundSettingsStore store);
    public void SetRecentlyUsedProfileId(IContextBoundSettingsStore store, string id);
    [NotNullAttribute]
[PureAttribute]
public CodeCleanupProfile GetDefaultProfile(DefaultProfileType profileType);
    [NotNullAttribute]
[PureAttribute]
private static CodeCleanupProfile CreateEmptyProfile(string name, Nullable`1<DefaultProfileType> defaultProfileType);
    internal static string CreateEmptyProfileContents(string name);
    [NotNullAttribute]
[PureAttribute]
public static CodeCleanupProfile CreateEmptyProfile(string name);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<Type> <.ctor>g__GetInterfacesAndSelf|5_6(Type type);
    [CompilerGeneratedAttribute]
private CodeCleanupProfile <GetProfiles>b__14_2(string profileContents);
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupSettingsUpgrader : object {
    private sealed virtual override void JetBrains.Application.Configuration.Upgrade.IGlobalSettingsUpgrader.Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupSingleOptionDescriptor : CodeCleanupOptionDescriptor {
    [CompilerGeneratedAttribute]
private String[] <SimpleXPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ValueType>k__BackingField;
    [NotNullAttribute]
public String[] SimpleXPath { get; }
    [NotNullAttribute]
public Type ValueType { get; }
    public object DefaultValueObject { get; }
    protected CodeCleanupSingleOptionDescriptor(string id, CodeCleanupLanguage languageCategory, CodeCleanupGroup cleanupGroup, string simpleXPath, Type valueType, Type resourceType, string displayName);
    [CompilerGeneratedAttribute]
public String[] get_SimpleXPath();
    [CompilerGeneratedAttribute]
public Type get_ValueType();
    public virtual string ValueObjectToString(object value);
    public virtual object StringToValueObject(string s);
    public abstract virtual object get_DefaultValueObject();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.DetectSettingsInBackground : object {
    private SemaphoreSlim mySemaphoreSlim;
    public void Execute(ISolution solution, CodeCleanupFilesCollector collector);
    private void ProcessFiles(LifetimeDefinition ld, IShellLocks threading, IProgressIndicator progressIndicator, SourceFilePtr[] filesToDetect, ISolution solution, IShowDetectionResults showDetectionResults);
    private void DetectOnSelection(ISolution solution, CodeCleanupFilesCollector collector, IShowDetectionResults showDetectionResults);
}
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.DocumentRangeTracker : object {
    private bool myIsPoint;
    private IRangeMarker myRangeMarker;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Queue`1<ValueTuple`2<ITreeNodePointer`1<ITreeNode>, bool>> myStartTreeElementPointers;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Queue`1<ValueTuple`2<ITreeNodePointer`1<ITreeNode>, bool>> myEndTreeElementPointers;
    public DocumentRangeTracker(DocumentRange range, ISolution solution, DocumentManager documentManager);
    private static void CreateTreeElementPointers(ITokenNode startToken, Queue`1<ValueTuple`2<ITreeNodePointer`1<ITreeNode>, bool>> treeElementPointers, DocumentOffset offset);
    private static bool IsFiltered(ITreeNode node, ICodeFormatter formatter);
    private static ITokenNode FindNearestNonFilteredToken(ISolution solution, DocumentOffset offset);
    [PureAttribute]
public DocumentRange RestoreDocumentRange();
    private static ValueTuple`2<DocumentRange, bool> FindValidTreeElementRange(Queue`1<ValueTuple`2<ITreeNodePointer`1<ITreeNode>, bool>> treeElementPointers);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.EditorConfigCleanupProfileSubstitutionConverter : object {
    private static string PrefixStr;
    private static int Priority;
    private CollectionEvents`1<IEditorConfigConverter> myItems;
    private SettingsIndexedEntry mySettingsEntry;
    public ICollectionEvents`1<IEditorConfigConverter> Items { get; }
    public string Category { get; }
    public EditorConfigCleanupProfileSubstitutionConverter(SettingsSchema schema);
    public sealed virtual ICollectionEvents`1<IEditorConfigConverter> get_Items();
    public sealed virtual bool Convert(SettingsConvertContext`1<TValue> context);
    private bool RunString(SettingsConvertContext`1<string> context, SettingsConvertAndTraceContext`1<string> traceContext);
    public sealed virtual bool ConvertAndCheck(SettingsConvertAndTraceContext`1<TValue> context);
    public sealed virtual bool ReverseConvert(SettingsReverseConvertContext`1<TValue> context);
    public sealed virtual bool IsPropertySupported(string property);
    public sealed virtual string get_Category();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.EditorSelectionTrackers : object {
    private ISolution mySolution;
    private DocumentManager myDocumentManager;
    private IDocumentTransactionManager myDocumentTransactionManager;
    public EditorSelectionTrackers(ISolution solution, DocumentManager documentManager, IDocumentTransactionManager documentTransactionManager);
    public SelectionTrackerCookie CreateSelectionTracker();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.FileHeader.CompatFileHeaderTemplater : object {
    private IFileHeaderInjections myCompatFileHeaderInjections;
    public CompatFileHeaderTemplater(IFileHeaderInjections compatFileHeaderInjections);
    private Template DoCreateHeaderTemplate(Template prevTemplate, IContextBoundSettingsStore boundSettingsStore);
    public sealed virtual Template CreateHeaderTemplate(IPsiSourceFile sourceFile, string oldText, IContextBoundSettingsStore liftedConfigsSettingsStore, IContextBoundSettingsStore vanillaSettingsStore);
    public sealed virtual Template CreateHeaderTemplateFromTemplateString(IPsiSourceFile sourceFile, string oldText, Template prevTemplate, IContextBoundSettingsStore liftedConfigsSettingsStore, IContextBoundSettingsStore vanillaSettingsStore);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.CodeCleanup.FileHeader.FileHeaderEx : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IFileHeaderTemplater TryGetHeaderTemplater(IPsiSourceFile sourceFile);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.FileHeader.FileHeaderInjections : object {
    private CreatedDateTimeMacroDef myCreatedDateTimeMacro;
    private CurrentDateTimeMacroDef myCurrentDateTimeMacro;
    private CurrentDateMacroDef myCurrentDateMacro;
    public FileHeaderInjections(CreatedDateTimeMacroDef createdDateTimeMacro, CurrentDateTimeMacroDef currentDateTimeMacro, CurrentDateMacroDef currentDateMacro);
    public sealed virtual IEnumerable`1<IEnumerable`1<TemplateField>> EnumerateFieldGroups();
    private TemplateField SimpleParamField(string fieldName, IMacroDefinition macro, string parameter);
}
[MigrateSettingsAttribute]
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.FileHeader.FileHeaderSettingsMigrate : object {
    private static string Open;
    private static string Close;
    private static Dictionary`2<string, string> ourSubstitutions;
    private static Regex ourGroupCapturingRegex;
    private static FileHeaderSettingsMigrate();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.CodeCleanup.FileHeader.FileHeaderSettingsMigrate/<GetEntriesToMigrate>d__4")]
public sealed virtual IEnumerable`1<SettingsEntry> GetEntriesToMigrate(ISettingsSchema schema);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.CodeCleanup.FileHeader.FileHeaderSettingsMigrate/<GetKeysToMigrate>d__5")]
public sealed virtual IEnumerable`1<SettingsKey> GetKeysToMigrate(ISettingsSchema schema);
    public sealed virtual void Migrate(IContextBoundSettingsStoreImplementation store);
}
[ShellServiceAttribute("144")]
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.FileHeader.FileHeaderUtils : object {
    public bool IsHeaderEmpty(IPsiSourceFile psiSourceFile);
    public bool InsertHeader(ISolution solution, IPsiSourceFile psiSourceFile, DocumentOffset startOffset);
    public void UpdateFileHeader(IPsiSourceFile sourceFile);
    public DocumentRange GetExistingFileHeaderRange(IPsiSourceFile sourceFile);
    [CanBeNullAttribute]
public static ILanguageFileHeaderUtils TryGetLanguageService(PsiLanguageType language);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCleanup.FileHeader.IFileHeaderInjections {
    public abstract virtual IEnumerable`1<IEnumerable`1<TemplateField>> EnumerateFieldGroups();
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.CodeCleanup.FileHeader.IFileHeaderTemplater {
    public abstract virtual Template CreateHeaderTemplate(IPsiSourceFile sourceFile, string oldText, IContextBoundSettingsStore liftedConfigsSettingsStore, IContextBoundSettingsStore vanillaSettingsStore);
    public abstract virtual Template CreateHeaderTemplateFromTemplateString(IPsiSourceFile sourceFile, string oldText, Template prevTemplate, IContextBoundSettingsStore liftedConfigsSettingsStore, IContextBoundSettingsStore vanillaSettingsStore);
}
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.FileHeader.InjectedObjects.VelocityDateInfo : object {
    [NotNullAttribute]
private Calendar myCalendar;
    private DateTime myCurrentDateTime;
    public static string YearField;
    public static string MonthField;
    public static string DayField;
    public static string HourField;
    public static string MinuteField;
    public static string SecondField;
    public string Year { get; }
    public string Month { get; }
    public string Day { get; }
    public string Hour { get; }
    public string Minute { get; }
    public string Second { get; }
    public VelocityDateInfo(Calendar calendar, DateTime currentDateTime);
    public string get_Year();
    public string get_Month();
    public string get_Day();
    public string get_Hour();
    public string get_Minute();
    public string get_Second();
}
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.FileHeader.InjectedObjects.VelocityFileInfo : object {
    [NotNullAttribute]
private Calendar myCalendar;
    [NotNullAttribute]
private IPsiSourceFile myFile;
    private DateTime myCreatedDateTime;
    public static string FullPathField;
    public static string FileNameField;
    public static string SolutionNameField;
    public static string ProjectNameField;
    public static string CreatedYearField;
    public static string CreatedMonthField;
    public static string CreatedDayField;
    public static string CreatedHourField;
    public static string CreatedMinuteField;
    public static string CreatedSecondField;
    public string FullPath { get; }
    public string FileName { get; }
    public string SolutionName { get; }
    public string ProjectName { get; }
    public string CreatedYear { get; }
    public string CreatedMonth { get; }
    public string CreatedDay { get; }
    public string CreatedHour { get; }
    public string CreatedMinute { get; }
    public string CreatedSecond { get; }
    public VelocityFileInfo(Calendar calendar, IPsiSourceFile file);
    public string get_FullPath();
    public string get_FileName();
    public string get_SolutionName();
    public string get_ProjectName();
    public string get_CreatedYear();
    public string get_CreatedMonth();
    public string get_CreatedDay();
    public string get_CreatedHour();
    public string get_CreatedMinute();
    public string get_CreatedSecond();
}
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.FileHeader.InjectedObjects.VelocityOldHeaderInfo : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [NotNullAttribute]
public string Text { get; public set; }
    public VelocityOldHeaderInfo(string text);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Text(string value);
    public string MatchAndKeep(string pattern, int groupIndex);
}
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.FileHeader.InjectedObjects.VelocityUserInfo : object {
    public static string NameField;
    public static string FullNameField;
    public string Name { get; }
    public string FullName { get; }
    public string get_Name();
    public string get_FullName();
}
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.FileHeader.InjectedObjects.VelocityVariablesInfo : object {
    private Dictionary`2<string, string> myVariables;
    public VelocityVariablesInfo(IDictionary`2<string, string> variables);
    public string Named(string variableName);
}
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.FileHeader.JetVelocityContext : VelocityContext {
    public static string OldHeaderKey;
    public static string FileKey;
    public static string CurrentDateKey;
    public static string UserKey;
    private static IEnumerable`1<ValueTuple`2<string, IEnumerable`1<string>>> ourRequiredSubstitutions;
    public VelocityOldHeaderInfo OldHeader { get; }
    public VelocityFileInfo File { get; }
    public VelocityDateInfo CurrentDate { get; }
    public VelocityUserInfo User { get; }
    private static JetVelocityContext();
    internal static IEnumerable`1<ValueTuple`2<string, IEnumerable`1<string>>> FlatEnumerateRequiredSubstitutions();
    public VelocityOldHeaderInfo get_OldHeader();
    public VelocityFileInfo get_File();
    public VelocityDateInfo get_CurrentDate();
    public VelocityUserInfo get_User();
}
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.FileHeader.JetVelocityLogSystem : object {
    [NotNullAttribute]
private ILogger myLogger;
    public JetVelocityLogSystem(ILogger logger);
    public sealed virtual void Init(IRuntimeServices rs);
    public sealed virtual void LogVelocityMessage(LogLevel level, string message);
}
public static class JetBrains.ReSharper.Feature.Services.CodeCleanup.FileHeader.LanguageAgnosticFileHeaderContext : object {
    private static Calendar ourCalendar;
    private static LanguageAgnosticFileHeaderContext();
    public static IReadOnlyCollection`1<ValueTuple`2<string, object>> Collect(DateTime currentDateTime);
}
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.FileHeader.SequentialFileHeaderTemplater : object {
    private IFileHeaderTemplater[] myTemplaters;
    public SequentialFileHeaderTemplater(IFileHeaderTemplater[] templaters);
    public Template DoCreateFileHeaderTemplate(IPsiSourceFile psiSourceFile, string oldHeaderText, Template prevTemplate, IContextBoundSettingsStore liftedConfigsSettingsStore, IContextBoundSettingsStore vanillaSettingsStore);
    public sealed virtual Template CreateHeaderTemplate(IPsiSourceFile sourceFile, string oldHeaderText, IContextBoundSettingsStore liftedConfigsSettingsStore, IContextBoundSettingsStore vanillaSettingsStore);
    public sealed virtual Template CreateHeaderTemplateFromTemplateString(IPsiSourceFile sourceFile, string oldHeaderText, Template prevTemplate, IContextBoundSettingsStore liftedConfigsSettingsStore, IContextBoundSettingsStore vanillaSettingsStore);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.FileHeader.StyleCopFileHeaderTemplater : object {
    public static string CompanyName;
    private static string CopyrightTextKey;
    private static string XmlHeaderStartWithFile;
    private static string XmlHeaderMiddleWithCompany;
    private static string XmlHeaderEnd;
    private static string XmlCellar;
    private static string InvalidReference;
    private static string CircularReference;
    private static string SubstitutionGroup;
    private static string ourRegexSubstitutionFinder;
    private static StyleCopFileHeaderTemplater();
    private void BuildCopyrightTo(StringBuilder builder, string headerTemplateString, IContextBoundSettingsStore boundSettingsStore);
    private static void BuildXmlHeaderTo(StringBuilder builder, IContextBoundSettingsStore boundSettingsStore);
    private static void BuildXmlCellarTo(StringBuilder builder);
    public void BuildStyleCopTemplatedTextTo(StringBuilder globalBuilder, string headerTemplateString, IContextBoundSettingsStore boundSettingsStore);
    public Template DoCreateHeaderTemplate(IPsiSourceFile sourceFile, string oldHeaderText, Template prevTemplate, IContextBoundSettingsStore liftedConfigsSettingsStore, IContextBoundSettingsStore vanillaSettingsStore);
    public sealed virtual Template CreateHeaderTemplate(IPsiSourceFile sourceFile, string oldHeaderText, IContextBoundSettingsStore liftedConfigsSettingsStore, IContextBoundSettingsStore vanillaSettingsStore);
    public sealed virtual Template CreateHeaderTemplateFromTemplateString(IPsiSourceFile sourceFile, string oldHeaderText, Template prevTemplate, IContextBoundSettingsStore liftedConfigsSettingsStore, IContextBoundSettingsStore vanillaSettingsStore);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.FileHeader.VelocityFileHeaderTemplater : object {
    [NotNullAttribute]
private VelocityEngine myEngine;
    [NotNullAttribute]
private ILogger myLogger;
    public VelocityFileHeaderTemplater(ILogger logger);
    private static void AddStringProperty(ExtendedProperties p, string key, string value);
    public Template DoCreateHeaderTemplate(IPsiSourceFile sourceFile, string oldText, Template prevTemplate, IContextBoundSettingsStore liftedConfigsSettingsStore, IContextBoundSettingsStore vanillaSettingsStore);
    private static JetVelocityContext CollectFullVelocityContext(IDocument document, string oldText, IContextBoundSettingsStore vanillaSettingsStore);
    public static IEnumerable`1<ValueTuple`2<string, IEnumerable`1<string>>> EnumerateFieldGroups();
    public sealed virtual Template CreateHeaderTemplate(IPsiSourceFile sourceFile, string oldText, IContextBoundSettingsStore liftedConfigsSettingsStore, IContextBoundSettingsStore vanillaSettingsStore);
    public sealed virtual Template CreateHeaderTemplateFromTemplateString(IPsiSourceFile sourceFile, string oldText, Template prevTemplate, IContextBoundSettingsStore liftedConfigsSettingsStore, IContextBoundSettingsStore vanillaSettingsStore);
}
public enum JetBrains.ReSharper.Feature.Services.CodeCleanup.HighlightingModule.HighlightingCleanupExecutionMode : Enum {
    public int value__;
    public static HighlightingCleanupExecutionMode SeparateIncrementalAndNonIncrementalFixes;
    public static HighlightingCleanupExecutionMode MergeIncrementalAndNonIncrementalFixes;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.HighlightingModule.HighlightingCleanupExecutor : object {
    private static Key`1<FilesPreprocessor> ourPreprocessorKey;
    private static Key`1<Dictionary`2<HighlightingCleanupModules, HighlightingCleanupExecutor>> ourExecutorsMapKey;
    private ISolution mySolution;
    private IReadOnlyCollection`1<string> mySeveritiesToEnforce;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<IContextBoundSettingsStore> myConfigureSettingsAction;
    private PsiLanguageType myCommonModulesLanguage;
    private Nullable`1<HighlightingCleanupExecutionMode> myExecutionMode;
    [NullableAttribute("2")]
private FilesPreprocessor myPreprocessor;
    [NullableAttribute("2")]
private IScopedFixingStrategy myIncrementalFixingStrategy;
    [NullableAttribute("2")]
private IScopedFixingStrategy myNonIncrementalFixingStrategy;
    [NullableAttribute("2")]
private ScopedQuickFixExecutor myDefaultIncrementalExecutor;
    [NullableAttribute("2")]
private ScopedNonIncrementalQuickFixExecutor myDefaultNonIncrementalExecutor;
    [NullableAttribute("2")]
private ScopedNonIncrementalQuickFixExecutor myNonIncrementalExecutorForCombinedStrategy;
    [NullableAttribute("2")]
private OptimizingQuickFixExecutorWithoutPreprocessor myOptimizingQuickFixExecutorWithoutPreprocessor;
    [CompilerGeneratedAttribute]
private string <TaskName>k__BackingField;
    public string TaskName { get; }
    private HighlightingCleanupExecutor(ISolution solution, string taskName, List`1<string> severitiesToEnforce, Action`1<IContextBoundSettingsStore> configureSettingsAction, IScopedFixingStrategy incrementalFixingStrategy, IScopedFixingStrategy nonIncrementalFixingStrategy, PsiLanguageType commonModulesLanguage, Nullable`1<HighlightingCleanupExecutionMode> executionMode, FilesPreprocessor preprocessor);
    private static HighlightingCleanupExecutor();
    public static HighlightingCleanupExecutor GetOrCreate(IUserDataHolder cache, ISolution solution, HighlightingCleanupModules modules, CodeCleanupProfile profile);
    [CompilerGeneratedAttribute]
public string get_TaskName();
    public HighlightingCleanupSettingsOverrider CreateSettingsOverrider(IPsiSourceFile sourceFile, bool overrideSolutionSettingsCache);
    public void Execute(IPsiSourceFile sourceFile, IRangeMarker rangeMarker, IContextBoundSettingsStore settingsStore, IProgressIndicator progressIndicator);
    private static void ExecuteIncrementalPhase(IPsiSourceFile sourceFile, IRangeMarker rangeMarker, PsiLanguageType languageType, IContextBoundSettingsStore settingsStore, ScopedQuickFixExecutor incrementalQuickFixExecutor, IProgressIndicator incrementalFixSubProgress);
    private IScopedFixingStrategy GetIncrementalFixingStrategy(IPsiSourceFile sourceFile);
    private IScopedFixingStrategy GetNonIncrementalFixingStrategy(IPsiSourceFile sourceFile);
    private ScopedQuickFixExecutor GetIncrementalExecutor(IScopedFixingStrategy fixingStrategy);
    private ScopedNonIncrementalQuickFixExecutor GetNonIncrementalExecutor(IScopedFixingStrategy fixingStrategy);
    [PureAttribute]
private static HighlightingCleanupExecutor Create(ISolution solution, HighlightingCleanupModules modules, CodeCleanupProfile profile, FilesPreprocessor preprocessor);
    public static bool PreprocessFiles(IReadOnlyList`1<IPsiSourceFile> files, CodeCleanupProfile profile, IUserDataHolder cache, IProgressIndicator progress);
    public static void PreExecuteForFile(IPsiSourceFile sourceFile, IUserDataHolder cache, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
internal static void <Create>g__FillSelectedTaskDescriptors|26_0(IEnumerable`1<CodeCleanupOptionDescriptor> descriptors, <>c__DisplayClass26_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("18")]
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.HighlightingModule.HighlightingCleanupItems : object {
    private Dictionary`2<CodeCleanupOptionDescriptor`1<bool>, TaskData> myTaskDataMap;
    private HashSet`1<Type> myHighlightingsWithPreprocessing;
    private HashSet`1<Type> myQuickFixesWithPreprocessing;
    public HighlightingCleanupItems(IEnumerable`1<IHighlightingCleanupItemsProvider> providers);
    public bool IsQuickFixRegisteredForTask(IQuickFix quickFix, CodeCleanupOptionDescriptor`1<bool> taskDescriptor);
    public HighlightingCleanupTasksData GetAggregatedCleanupTasksData(IReadOnlyList`1<CodeCleanupOptionDescriptor`1<bool>> taskDescriptors);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.CodeCleanup.HighlightingModule.HighlightingCleanupModule : object {
    protected HighlightingCleanupModules ThisModule;
    public ICollection`1<CodeCleanupOptionDescriptor> Descriptors { get; }
    public string Name { get; }
    public PsiLanguageType LanguageType { get; }
    public bool IsAvailableOnSelection { get; }
    public bool IsGroupable { get; }
    protected bool HasCustomProcessing { get; }
    public HighlightingCleanupExecutionMode ExecutionMode { get; }
    public bool SupportsPreprocessing { get; }
    public abstract virtual ICollection`1<CodeCleanupOptionDescriptor> get_Descriptors();
    public abstract virtual string get_Name();
    public abstract virtual PsiLanguageType get_LanguageType();
    public virtual bool get_IsAvailableOnSelection();
    public bool get_IsGroupable();
    protected virtual bool get_HasCustomProcessing();
    public virtual HighlightingCleanupExecutionMode get_ExecutionMode();
    public virtual bool get_SupportsPreprocessing();
    public abstract virtual bool IsAvailable(CodeCleanupProfile profile);
    public abstract virtual void SetDefaultSetting(CodeCleanupProfile profile, DefaultProfileType profileType);
    public virtual IReadOnlyCollection`1<string> GetAdditionalSeveritiesToEnforce(CodeCleanupProfile profile);
    public virtual Action`1<IContextBoundSettingsStore> GetCustomConfigureSettingsAction(ISolution solution, CodeCleanupProfile profile);
    public virtual bool IsAvailable(IPsiSourceFile sourceFile);
    public virtual void Process(IPsiSourceFile sourceFile, IRangeMarker rangeMarker, CodeCleanupProfile profile, IProgressIndicator progressIndicator, IUserDataHolder cache);
    public static void ProcessMultipleModules(IEnumerable`1<HighlightingCleanupModule> modules, IPsiSourceFile sourceFile, IRangeMarker rangeMarker, CodeCleanupProfile profile, IProgressIndicator progressIndicator, IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.HighlightingModule.HighlightingCleanupModules : ValueType {
    private static IEqualityComparer`1<HashSet`1<HighlightingCleanupModule>> ourEqualityComparer;
    private HashSet`1<HighlightingCleanupModule> myModules;
    public HighlightingCleanupModules(HashSet`1<HighlightingCleanupModule> modules);
    private static HighlightingCleanupModules();
    public Enumerator<HighlightingCleanupModule> GetEnumerator();
    public sealed virtual bool Equals(HighlightingCleanupModules other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.HighlightingModule.HighlightingCleanupSettingsOverrider : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<IContextBoundSettingsStore> <customConfigureAction>P;
    [CompilerGeneratedAttribute]
private bool <overrideSolutionSettingsCache>P;
    [NullableAttribute("2")]
private LifetimeDefinition myLifetimeDefinition;
    [NullableAttribute("2")]
private ISettingsStoreInTransaction mySettingsStoreInTransaction;
    [CompilerGeneratedAttribute]
private IPsiSourceFile <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <SeveritiesToEnforce>k__BackingField;
    public IPsiSourceFile SourceFile { get; }
    public IReadOnlyCollection`1<string> SeveritiesToEnforce { get; }
    public HighlightingCleanupSettingsOverrider(IPsiSourceFile sourceFile, IReadOnlyCollection`1<string> severitiesToEnforce, Action`1<IContextBoundSettingsStore> customConfigureAction, bool overrideSolutionSettingsCache);
    [CompilerGeneratedAttribute]
public IPsiSourceFile get_SourceFile();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_SeveritiesToEnforce();
    public IContextBoundSettingsStore GetSettingsStore();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[RequiredMemberAttribute]
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.HighlightingModule.HighlightingCleanupTasksData : ValueType {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <SeveritiesToEnforce>k__BackingField;
    [CompilerGeneratedAttribute]
private IScopedFixingStrategy <IncrementalFixingStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private IScopedFixingStrategy <NonIncrementalFixingStrategy>k__BackingField;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public IReadOnlyCollection`1<string> SeveritiesToEnforce { get; public set; }
    [RequiredMemberAttribute]
public IScopedFixingStrategy IncrementalFixingStrategy { get; public set; }
    [RequiredMemberAttribute]
public IScopedFixingStrategy NonIncrementalFixingStrategy { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_SeveritiesToEnforce();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SeveritiesToEnforce(IReadOnlyCollection`1<string> value);
    [CompilerGeneratedAttribute]
public IScopedFixingStrategy get_IncrementalFixingStrategy();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IncrementalFixingStrategy(IScopedFixingStrategy value);
    [CompilerGeneratedAttribute]
public IScopedFixingStrategy get_NonIncrementalFixingStrategy();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NonIncrementalFixingStrategy(IScopedFixingStrategy value);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.CodeCleanup.HighlightingModule.IHighlightingCleanupItemsProvider {
    public abstract virtual void Register(IHighlightingCleanupItemsRegistrar registrar);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.CodeCleanup.HighlightingModule.IHighlightingCleanupItemsRegistrar {
    public abstract virtual void RegisterQuickFix(CodeCleanupOptionDescriptor`1<bool> taskDescriptor, bool enforceCleanup);
    public abstract virtual void MarkForPreprocessing();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCleanup.IAdditionalCodeCleanupProfileDataProvider {
    public IEnumerable`1<CodeCleanupSingleOptionDescriptor> Descriptors { get; }
    public abstract virtual IEnumerable`1<CodeCleanupSingleOptionDescriptor> get_Descriptors();
    public abstract virtual void SetDefaultSetting(CodeCleanupProfile profile, DefaultProfileType profileType);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupFilesProvider {
    public ISolution Solution { get; }
    public IProjectItem ProjectItem { get; }
    public abstract virtual ISolution get_Solution();
    public abstract virtual IProjectItem get_ProjectItem();
    public abstract virtual IReadOnlyList`1<IPsiSourceFile> GetFiles();
    public abstract virtual DocumentRange[] GetRangesForFile(IPsiSourceFile file);
    public abstract virtual bool IsSuitableProjectElement(IProjectModelElement element);
    public abstract virtual bool IsSuitableFile(IProjectFile file);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupModule {
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public PsiLanguageType LanguageType { get; }
    public ICollection`1<CodeCleanupOptionDescriptor> Descriptors { get; }
    public bool IsAvailableOnSelection { get; }
    public abstract virtual string get_Name();
    public abstract virtual PsiLanguageType get_LanguageType();
    public abstract virtual ICollection`1<CodeCleanupOptionDescriptor> get_Descriptors();
    public abstract virtual bool get_IsAvailableOnSelection();
    public abstract virtual void SetDefaultSetting(CodeCleanupProfile profile, DefaultProfileType profileType);
    public abstract virtual bool IsAvailable(IPsiSourceFile sourceFile);
    public abstract virtual bool IsAvailable(CodeCleanupProfile profile);
    public abstract virtual void Process(IPsiSourceFile sourceFile, IRangeMarker rangeMarker, CodeCleanupProfile profile, IProgressIndicator progressIndicator, IUserDataHolder cache);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupProfileUpgrader {
    public abstract virtual void Upgrade(CodeCleanupProfile profile);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupProgressIndicator {
}
public interface JetBrains.ReSharper.Feature.Services.CodeCleanup.IHiddenCodeCleanupDescriptorsProvider {
    public abstract virtual bool ShouldHide(CodeCleanupOptionDescriptor descriptor);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCleanup.ILanguageFileHeaderUtils {
    public abstract virtual bool IsHeaderEmpty(IPsiSourceFile sourceFile);
    public abstract virtual bool InsertHeader(IPsiSourceFile sourceFile, DocumentOffset startOffset);
    public abstract virtual void UpdateFileHeader(IPsiSourceFile sourceFile);
    public abstract virtual DocumentRange GetExistingFileHeaderRange(IPsiSourceFile sourceFile);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCleanup.IModuleCollectingStatistics {
    public abstract virtual void RegisterInvocation(ISolution solution, CodeCleanupProfile profile, ScopeType scopeType, CleanupInvocationType silentAction, SortedSet`1<string> extensions);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCleanup.IReformatCodeCleanupModule {
}
public interface JetBrains.ReSharper.Feature.Services.CodeCleanup.IReformatInactiveBranchesModule {
}
public interface JetBrains.ReSharper.Feature.Services.CodeCleanup.IRepeatSyntaxStylesInspectorsCollector {
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IReadOnlyList`1<ICodeStyleInspector> CollectInspectors();
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IReadOnlyList`1<ICodeStyleInspector> CollectAndFilterInspectors(CodeCleanupProfile profile);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCleanup.IShowDetectionResults {
    public abstract virtual void ShowDetectionResults(FormatterSettingValues values, IEnumerable`1<PsiLanguageType> languages);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCleanup.IWholeFileCleanupOnSaveModule {
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.ModifiedFilesCacheForCleanup : ModifiedFilesCacheBase {
    [NotNullAttribute]
private ApplicationWideContextBoundSettingStore myStore;
    [NotNullAttribute]
private CodeCleanupService myCodeCleanupService;
    [NotNullAttribute]
private ICommandProcessor myCommandProcessor;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <RecentlyModifiedPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <TrackDiffs>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsActive>k__BackingField;
    protected IProperty`1<int> RecentlyModifiedPeriod { get; }
    protected IProperty`1<bool> TrackDiffs { get; }
    protected internal IProperty`1<bool> IsActive { get; }
    public ModifiedFilesCacheForCleanup(ISolution solution, Lifetime lifetime, IPersistentIndexManager manager, ApplicationWideContextBoundSettingStore store, CodeCleanupService codeCleanup, ICommandProcessor commandProcessor);
    [CompilerGeneratedAttribute]
protected virtual IProperty`1<int> get_RecentlyModifiedPeriod();
    [CompilerGeneratedAttribute]
protected virtual IProperty`1<bool> get_TrackDiffs();
    [CompilerGeneratedAttribute]
protected internal virtual IProperty`1<bool> get_IsActive();
    public virtual void MarkModifiedInMemory(IProjectFile projectFile, Func`3<IProjectFile, DateTime, bool> isUserChange);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__3_3(CodeCleanupInvocationArgs args);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__3_4(DiffCodeCleanupInvocationArgs args);
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCleanup.ObservableObject : object {
    [CompilerGeneratedAttribute]
private PropertyChangingEventHandler PropertyChanging;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    protected virtual void OnPropertyChanging(string propertyName);
    protected virtual void OnPropertyChanged(string propertyName);
    protected void RaisePropertyChanging(string propertyName);
    [NotifyPropertyChangedInvocatorAttribute]
protected void RaisePropertyChanged(string propertyName);
    [NotifyPropertyChangedInvocatorAttribute]
protected void SetField(T& field, T value, string propertyName);
    public void InvalidateProperty(string propertyName);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanging(PropertyChangingEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanging(PropertyChangingEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public static class JetBrains.ReSharper.Feature.Services.CodeCleanup.ReformatOptions : object {
    public static CodeCleanupOptionDescriptor`1<CodeFormatProfile> CODE_FORMATER_PROFILE_DESCRIPTOR;
    private static ReformatOptions();
}
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.SelectionTrackerCookie : ValueType {
    private List`1<EditorSelectionTracker> myTrackers;
    private ISolution mySolution;
    private DocumentManager myDocumentManager;
    private IDocumentTransactionManager myDocumentTransactionManager;
    public SelectionTrackerCookie(ISolution solution, DocumentManager documentManager, IDocumentTransactionManager documentTransactionManager);
    public void StartTracking(ITextControl textControl);
    public sealed virtual void Dispose();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.CodeCleanup.ZoneMarker : object {
}
public enum JetBrains.ReSharper.Feature.Services.CodeCompletion.AutocompletionBehaviour : Enum {
    public int value__;
    public static AutocompletionBehaviour NoRecommendation;
    public static AutocompletionBehaviour DoNotAutocomplete;
    public static AutocompletionBehaviour AutocompleteWithInsert;
    public static AutocompletionBehaviour AutocompleteWithReplace;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.CodeCompletion.AutomaticCodeCompletionStrategyEx : object {
    public static int OffsetShift;
    [PureAttribute]
[CanBeNullAttribute]
private static string GetActualTextOneCharacterBeforeCaret(ITextControl textControl, int length, bool ignoreTailSpaces);
    [ExtensionAttribute]
[PureAttribute]
public static bool MatchText(IAutomaticCodeCompletionStrategy strategy, ITextControl textControl, int length, Func`2<string, bool> matcher, bool ignoreTailSpaces);
    [ExtensionAttribute]
[PureAttribute]
public static bool MatchTextOneCharBeforeCaret(IAutomaticCodeCompletionStrategy strategy, ITextControl textControl, string text, bool ignoreTailSpaces);
    [ExtensionAttribute]
[PureAttribute]
public static bool MatchTextOneCharBeforeCaret(IAutomaticCodeCompletionStrategy strategy, ITextControl textControl, String[] texts);
    [ExtensionAttribute]
[PureAttribute]
public static bool MatchTokenType(IAutomaticCodeCompletionStrategy strategy, IFile file, ITextControl textControl, Func`2<TokenNodeType, bool> matcher);
    [ExtensionAttribute]
[PureAttribute]
public static bool MatchToken(IAutomaticCodeCompletionStrategy strategy, IFile file, ITextControl textControl, Func`2<TToken, bool> matcher);
    [ExtensionAttribute]
[PureAttribute]
public static bool MatchToken(IAutomaticCodeCompletionStrategy strategy, IFile file, ITextControl textControl, Func`2<ITokenNode, bool> matcher);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.BaseRules.BaseDynamicRule : object {
    public static Key`1<string> PrefixKey;
    private static BaseDynamicRule();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.BaseRules.BaseRelevanceRule : ItemsProviderOfSpecificContext`1<ISpecificCodeCompletionContext> {
    public EvaluationMode SupportedEvaluationMode { get; }
    public CompletionMode SupportedCompletionMode { get; }
    protected virtual bool IsAvailable(ISpecificCodeCompletionContext context);
    public virtual EvaluationMode get_SupportedEvaluationMode();
    public virtual CompletionMode get_SupportedCompletionMode();
    protected virtual void DecorateItems(ISpecificCodeCompletionContext context, IReadOnlyCollection`1<ILookupItem> items);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.BaseRules.EscItem : object {
    [CompilerGeneratedAttribute]
private IDeclaredElement[] <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<EscSymbol> <Symbols>k__BackingField;
    public IDeclaredElement[] Prefix { get; public set; }
    public List`1<EscSymbol> Symbols { get; public set; }
    [CompilerGeneratedAttribute]
public IDeclaredElement[] get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(IDeclaredElement[] value);
    [CompilerGeneratedAttribute]
public List`1<EscSymbol> get_Symbols();
    [CompilerGeneratedAttribute]
public void set_Symbols(List`1<EscSymbol> value);
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.BaseRules.EscResult : object {
    [CompilerGeneratedAttribute]
private List`1<EscItem> <Items>k__BackingField;
    public List`1<EscItem> Items { get; }
    [CompilerGeneratedAttribute]
public List`1<EscItem> get_Items();
    public void Sort(IComparer`1<EscItem> resultComparer);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.BaseRules.EscSymbol : object {
    [CompilerGeneratedAttribute]
private ISymbolInfo <SymbolInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <WithTypeInference>k__BackingField;
    public ISymbolInfo SymbolInfo { get; public set; }
    public Nullable`1<bool> WithTypeInference { get; public set; }
    public EscSymbol(ISymbolInfo symbolInfo, Nullable`1<bool> withTypeInference);
    [CompilerGeneratedAttribute]
public ISymbolInfo get_SymbolInfo();
    [CompilerGeneratedAttribute]
public void set_SymbolInfo(ISymbolInfo value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_WithTypeInference();
    [CompilerGeneratedAttribute]
public void set_WithTypeInference(Nullable`1<bool> value);
}
public static class JetBrains.ReSharper.Feature.Services.CodeCompletion.BaseRules.ExpandBasicCompletionHelper : object {
    public static bool IsAvailableEx(CodeCompletionType[] codeCompletionTypes);
    public static ISymbolTable GetSymbolTable(IItemsCollector collector, ICompletableReference reference, List`1<ISymbolFilter> filters, bool isQualified, CodeCompletionContext basicContext, ImportCompletionCache cache, Boolean& showContainer);
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.BaseRules.ExpandImportCompletionProviderBase`1 : ItemsProviderOfSpecificContext`1<TContext> {
    protected ModuleReferencerService myModuleReferencerService;
    protected IShellLocks myShellLocks;
    public CompletionMode SupportedCompletionMode { get; }
    protected ExpandImportCompletionProviderBase`1(ModuleReferencerService moduleReferencerService);
    protected virtual bool IsAvailable(TContext context);
    public virtual CompletionMode get_SupportedCompletionMode();
    protected virtual bool AddLookupItems(TContext context, IItemsCollector collector);
    protected abstract virtual bool IsQualifiedContext(TContext context);
    protected abstract virtual TextLookupRanges GetRanges(TContext context);
    [CanBeNullAttribute]
protected abstract virtual ITreeNode GetTreeNode(TContext context);
    protected abstract virtual ILookupItem CreateLookupItem(TContext context, IGrouping`2<string, ITypeElement> typeElements);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.BaseRules.ExpandSmartCompletionEventsFilter : SimpleSymbolFilter {
    public ResolveErrorType ErrorType { get; }
    public virtual bool Accepts(IDeclaredElement declaredElement, ISubstitution substitution);
    public virtual ResolveErrorType get_ErrorType();
}
public static class JetBrains.ReSharper.Feature.Services.CodeCompletion.BaseRules.ExpandSmartCompletionHelper : object {
    [PureAttribute]
public static bool CheckAvailability(CodeCompletionContext context, ExpectedTypeCompletionContextBase expectedTypeContext);
    public static void AddLookupItems(IItemsCollector collector, IEnumerable`1<ILookupItem> lookupItems, TextLookupRanges ranges, CodeCompletionContext context, IReadOnlyList`1<ILookupItem> initialLookupItems, int priority, Nullable`1<bool> withTypeInference, Action`1<CombinedLookupItem> itemAction);
    [PureAttribute]
public static bool IsMultipleSmartCompletions(CodeCompletionType[] codeCompletionTypes);
    public static EscResult GetTablesSorted(IItemsCollector collector, ISymbolTable initialTable, int depth, ExpectedTypeCompletionContextBase expectedTypeContext, CodeCompletionContext context, IAccessContext accessContext, Func`3<ExpectedIType, ISymbolTable, List`1<EscSymbol>> expectedTypeFilters, ISymbolFilter[] filters, int maxSymbols, bool enumerateExpectedTypes);
    private static void ProcessWorkingSet(IItemsCollector collector, IEnumerable`1<Pair`2<ICollection`1<IDeclaredElement>, ISymbolTable>> workingSet, Dictionary`2<IType, ISymbolTable> symbolTablesCache, Action`4<ICollection`1<IDeclaredElement>, IDeclaredElement, IType, ISymbolTable> action, ICollection`1<ISymbolFilter> filters);
    private static void ProcessInfo(IItemsCollector collector, ISymbolInfo info, Dictionary`2<IType, ISymbolTable> symbolTablesCache, Action`4<ICollection`1<IDeclaredElement>, IDeclaredElement, IType, ISymbolTable> action, IEnumerable`1<ISymbolFilter> filters, Dictionary`2<string, HashSet`1<IDeclaredElement>> overloads, ICollection`1<IDeclaredElement> entryElements);
    public static bool CheckOverload(IDeclaredElement declaredElement, Dictionary`2<string, HashSet`1<IDeclaredElement>> overloadCache);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.BaseRules.ExpandSmartCompletionPublicFilter : SimpleSymbolFilter {
    public ResolveErrorType ErrorType { get; }
    public virtual bool Accepts(IDeclaredElement declaredElement, ISubstitution substitution);
    public virtual ResolveErrorType get_ErrorType();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.BaseRules.ExpandSmartCompletionStaticFilter : SimpleSymbolFilter {
    private bool myOnlyForClasses;
    public ResolveErrorType ErrorType { get; }
    public ExpandSmartCompletionStaticFilter(bool onlyForClasses);
    public virtual bool Accepts(IDeclaredElement declaredElement, ISubstitution substitution);
    public virtual ResolveErrorType get_ErrorType();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.BaseRules.ExtensionMethodsProvider : object {
    [NotNullAttribute]
private Dictionary`2<IType, List`1<IMethod>> myCache;
    [NotNullAttribute]
private IExtensionMethodRegistry myExtensionMethodRegistry;
    [NotNullAttribute]
private ITypeConversionRule myTypeConversionRule;
    [NotNullAttribute]
private ITypeConstraintsVerifier myTypeConstraintsVerifier;
    [CanBeNullAttribute]
private IExtensionMethodsQuery myAllExtensionMethods;
    public ExtensionMethodsProvider(IExtensionMethodRegistry extensionMethodRegistry, ITypeConversionRule typeConversionRule, ITypeConstraintsVerifier typeConstraintsVerifier);
    public List`1<IMethod> CandidatesApplicableForType(IType type, PsiLanguageType languageType);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.BaseRules.IGenerateCompletionProvider {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<OverridableMemberInstance> GetMissingMembers(ITypeDeclaration declaration);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<OverridableMemberInstance> GetOverridableMembers(ITypeDeclaration declaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.CodeCompletion.BlessingItemSupport : object {
    private static Key ourIsBlessedItemKey;
    private static BlessingItemSupport();
    [ExtensionAttribute]
public static bool IsBlessedItem(LookupItem lookupItem);
    [ExtensionAttribute]
public static void MarkAsBlessed(LookupItem lookupItem);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.CodeCompletionModifierProvider : object {
    public virtual CodeCompletionParameters GetModifier(List`1<CodeCompletionType> codeCompletionTypes, CodeCompletionType codeCompletionType, bool isAutomatic, IContextBoundSettingsStore settingsStore);
    public CodeCompletionParameters GetModifier(List`1<CodeCompletionType> codeCompletionTypes, bool isAutomatic, IContextBoundSettingsStore settingsStore);
    public static CodeCompletionParameters GetModifierBasic(IContextBoundSettingsStore settingsStore, List`1<CodeCompletionType> types, CodeCompletionType codeCompletionType, bool isAutomatic, bool ignoreSmartCompletionAfterAutomatic, bool ignoreBasicCompletionAfterAutomatic, bool ignoreBasicAfterSmart);
    public static CodeCompletionParameters GetModifierBasic(List`1<CodeCompletionType> codeCompletionTypes, CodeCompletionType codeCompletionType, bool isAutomatic, bool importItemsInBasic, bool ignoreSmartCompletionAfterAutomaticAndBasic, bool ignoreBasicCompletionAfterAutomatic, bool ignoreBasicAfterSmart, bool ignoreImportAfterBasic, bool ignoreImportAfterAuto);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.CodeCompletionParameters : EnumPattern {
    [CompilerGeneratedAttribute]
private int <Multiplier>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeCompletionType[] <CodeCompletionTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeCompletionType <LastCodeCompletionType>k__BackingField;
    [CompilerGeneratedAttribute]
private AutocompletionBehaviour <InitialAutocompletionBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private LookupFocusBehaviour <InitialLookupFocusBehaviour>k__BackingField;
    [CompilerGeneratedAttribute]
private EvaluationMode <EvaluationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SingleCompletionMode>k__BackingField;
    [CompilerGeneratedAttribute]
private IContextBoundSettingsStore <SettingsStore>k__BackingField;
    [CompilerGeneratedAttribute]
private ICodeCompletionResult <PreviousResult>k__BackingField;
    private bool myIsAutomaticCompletion;
    [CompilerGeneratedAttribute]
private bool <IsInitiallyAutomatic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSelectionDisjoint>k__BackingField;
    [NotNullAttribute]
public static CodeCompletionParameters None;
    public int Multiplier { get; private set; }
    public CodeCompletionType[] CodeCompletionTypes { get; private set; }
    public CodeCompletionType LastCodeCompletionType { get; private set; }
    public AutocompletionBehaviour InitialAutocompletionBehavior { get; public set; }
    public LookupFocusBehaviour InitialLookupFocusBehaviour { get; public set; }
    public EvaluationMode EvaluationMode { get; public set; }
    public bool SingleCompletionMode { get; public set; }
    [CanBeNullAttribute]
public IContextBoundSettingsStore SettingsStore { get; public set; }
    [CanBeNullAttribute]
public ICodeCompletionResult PreviousResult { get; public set; }
    public bool IsAutomaticCompletion { get; public set; }
    public bool IsInitiallyAutomatic { get; public set; }
    public bool IsSelectionDisjoint { get; public set; }
    public CodeCompletionParameters(string name, int multiplier);
    public CodeCompletionParameters(string name, int multiplier, CodeCompletionType[] codeCompletionTypes, CodeCompletionType lastCodeCompletionType, AutocompletionBehaviour initialAutocompletionBehaviour, LookupFocusBehaviour initialLookupFocusBehaviour, EvaluationMode evaluationMode);
    private static CodeCompletionParameters();
    [CompilerGeneratedAttribute]
public int get_Multiplier();
    [CompilerGeneratedAttribute]
private void set_Multiplier(int value);
    [CompilerGeneratedAttribute]
public CodeCompletionType[] get_CodeCompletionTypes();
    [CompilerGeneratedAttribute]
private void set_CodeCompletionTypes(CodeCompletionType[] value);
    [CompilerGeneratedAttribute]
public CodeCompletionType get_LastCodeCompletionType();
    [CompilerGeneratedAttribute]
private void set_LastCodeCompletionType(CodeCompletionType value);
    [CompilerGeneratedAttribute]
public AutocompletionBehaviour get_InitialAutocompletionBehavior();
    [CompilerGeneratedAttribute]
public void set_InitialAutocompletionBehavior(AutocompletionBehaviour value);
    [CompilerGeneratedAttribute]
public LookupFocusBehaviour get_InitialLookupFocusBehaviour();
    [CompilerGeneratedAttribute]
public void set_InitialLookupFocusBehaviour(LookupFocusBehaviour value);
    [CompilerGeneratedAttribute]
public EvaluationMode get_EvaluationMode();
    [CompilerGeneratedAttribute]
public void set_EvaluationMode(EvaluationMode value);
    [CompilerGeneratedAttribute]
public bool get_SingleCompletionMode();
    [CompilerGeneratedAttribute]
public void set_SingleCompletionMode(bool value);
    [CompilerGeneratedAttribute]
public IContextBoundSettingsStore get_SettingsStore();
    [CompilerGeneratedAttribute]
public void set_SettingsStore(IContextBoundSettingsStore value);
    [CompilerGeneratedAttribute]
public ICodeCompletionResult get_PreviousResult();
    [CompilerGeneratedAttribute]
public void set_PreviousResult(ICodeCompletionResult value);
    public bool get_IsAutomaticCompletion();
    public void set_IsAutomaticCompletion(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsInitiallyAutomatic();
    [CompilerGeneratedAttribute]
public void set_IsInitiallyAutomatic(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSelectionDisjoint();
    [CompilerGeneratedAttribute]
public void set_IsSelectionDisjoint(bool value);
    public RichTextBlock[] RenderCodeCompletionType();
    public void Clear();
    [NotNullAttribute]
public static CodeCompletionParameters CreateSingle(CodeCompletionType codeCompletionType, bool isAutomatic);
    [NotNullAttribute]
public static CodeCompletionParameters CreateSingle(CodeCompletionType[] codeCompletionTypes, CodeCompletionType lastCodeCompletionType, bool isAutomatic);
    [NotNullAttribute]
public static CodeCompletionParameters CreateDouble(CodeCompletionType[] codeCompletionTypes, CodeCompletionType lastCodeCompletionType);
    [NotNullAttribute]
public static CodeCompletionParameters CreateMultiple(int multiplier, CodeCompletionType[] codeCompleTypes, CodeCompletionType lastCodeCompletionType);
    public virtual string ToString();
}
public enum JetBrains.ReSharper.Feature.Services.CodeCompletion.CodeCompletionPopupType : Enum {
    public int value__;
    public static CodeCompletionPopupType AutomaticAfterDot;
    public static CodeCompletionPopupType AutomaticIdentifier;
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.CodeCompletionPopupWindowFilter : object {
    public sealed virtual bool IsCodeCompletionPopupWindow(object rawControl);
}
public enum JetBrains.ReSharper.Feature.Services.CodeCompletion.CodeCompletionSessionState : Enum {
    public int value__;
    public static CodeCompletionSessionState EvaluationTerminated;
    public static CodeCompletionSessionState LookupClosed;
    public static CodeCompletionSessionState ItemCompleted;
    public static CodeCompletionSessionState BeforeItemCompleted;
    public static CodeCompletionSessionState SessionReScheduled;
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.CodeCompletionType : EnumPattern {
    [NotNullAttribute]
public static CodeCompletionType BasicCompletion;
    [NotNullAttribute]
public static CodeCompletionType SmartCompletion;
    [NotNullAttribute]
public static CodeCompletionType ImportCompletion;
    private CodeCompletionType(string name);
    private static CodeCompletionType();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.CodeCompletion.CodeCompletionUtil : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.CodeCompletionUtil/<IterateStaticMembers>d__0")]
public static IEnumerable`1<DeclaredElementInstance`1<ITypeMember>> IterateStaticMembers(CodeCompletionContext basicContext, IDeclaredType declaredType, ITypeElement typeElement, ISubstitution substitution, ITreeNode accessElement, IReadOnlyList`1<ExpectedType> expectedTypes, Func`2<ITypeMember, bool> memberFilter);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.CodeCompletionUtil/<AddMembers>d__1")]
private static IEnumerable`1<ITypeMember> AddMembers(ITypeElement typeElement);
    [NotNullAttribute]
public static IEnumerable`1<Pair`2<IType, TailType>> GetExpectedTypes(IReadOnlyList`1<ExpectedType> types, IAccessContext accessContext, Func`2<IType, bool> predicate);
    public static bool CanBeInstantiated(IDeclaredType type);
    public static IType GetTypeToInstantiate(IDeclaredType expectedType);
    public static IEnumerable`1<ITypeElement> GetSeeAlsoTypes(IPsiModule module, ITypeElement typeElement);
    private static IEnumerable`1<ITypeElement> TryWithName(ITypeElement typeElement, string pluralName, IPsiModule module);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static TReference GetReference(IFile file, TreeTextRange range);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static TReference GetReference(IFile file, TreeTextRange range, Predicate`1<TReference> acceptPredicate);
    [ExtensionAttribute]
public static Nullable`1<SmartBehaviorType> GetSmartBehaviorType(CodeCompletionContext basicContext);
    [ExtensionAttribute]
public static bool ShowImportItemsInBasicCompletion(CodeCompletionContext basicContext);
    public static void InvokeCodeCompletionAfterComplete(ISolution solution, ITextControl textControl, bool useSmart);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.CombinedLookupItem : TextLookupItemBase {
    private ILookupItem[] myLookupItems;
    private ILookupItem mySampleMatchItem;
    private string myCachedText;
    private RichText myCachedDisplayName;
    private bool myAutocomplete;
    private bool myExactMatch;
    private IconId myCustomImage;
    private bool myIgnoreSoftOnSpace;
    public ILookupItem[] LookupItems { get; }
    public bool IgnoreSoftOnSpace { get; }
    public IconId Image { get; }
    public string Text { get; public set; }
    public CombinedLookupItem(ILookupItem[] lookupItems, IconId customImage);
    public CombinedLookupItem(ILookupItem[] lookupItems, ILookupItem sampleMatchItem, bool autocomplete, bool exactMatch);
    public CombinedLookupItem(ILookupItem[] lookupItems, IEnumerable`1<ILookupItem> displayItems, ILookupItem sampleMatchItem, bool autocomplete, bool exactMatch, IconId customImage, bool ignoreSoftOnSpace);
    public ILookupItem[] get_LookupItems();
    public virtual bool get_IgnoreSoftOnSpace();
    internal IList`1<DiffFragment> GetInsertionData();
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    public static int CalculateScore(string filter, string name, IEnumerable`1<IdentifierMatch> matches, bool lowerHumpsAcc, bool ignoreTypos);
    private void BuildDisplayName(IEnumerable`1<ILookupItem> items);
    public virtual bool AcceptIfOnlyMatched(LookupItemAcceptanceContext itemAcceptanceContext);
    public virtual IconId get_Image();
    protected virtual RichText GetDisplayName();
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    private void CompleteItems(List`1<ILookupItem> items, IPsiServices psiServices, ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill, IDisposable batchTextChange);
    private void InvokeCompleteItems(List`1<ILookupItem> items, IPsiServices psiServices, ITextControl textControl, DocumentRange nameRange, LookupItemInsertType lookupItemInsertType, Suffix suffix, ISolution solution, bool keepCaretStill, IDisposable batchTextChange);
    protected virtual void UpdateRanges(ISolution solution, ITextControl textControl, ILookupItem item, DocumentRange completionRange, DocumentRange& nameRange, int decorationLength, TailType tailType, int itemSubstitutionShift);
    private int GetSubstitutionShift(ILookupItem lookupItem);
    public sealed virtual RichTextBlock GetDescription();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.CompletionEvaluationScheme : object {
    [CompilerGeneratedAttribute]
private CompletionEvaluationStep <PrimaryStep>k__BackingField;
    [CompilerGeneratedAttribute]
private CompletionEvaluationStep[] <AdditionalSteps>k__BackingField;
    [NotNullAttribute]
public CompletionEvaluationStep PrimaryStep { get; }
    [NotNullAttribute]
public CompletionEvaluationStep[] AdditionalSteps { get; }
    public CompletionEvaluationScheme(CompletionEvaluationStep primaryStep, CompletionEvaluationStep[] additionalSteps);
    [CompilerGeneratedAttribute]
public CompletionEvaluationStep get_PrimaryStep();
    [CompilerGeneratedAttribute]
public CompletionEvaluationStep[] get_AdditionalSteps();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.CompletionEvaluationStep : object {
    [CompilerGeneratedAttribute]
private EvaluationMode <EvaluationMode>k__BackingField;
    public EvaluationMode EvaluationMode { get; }
    public CompletionEvaluationStep(EvaluationMode evaluationMode);
    [CompilerGeneratedAttribute]
public EvaluationMode get_EvaluationMode();
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.CompletionInDocComments.CodeCompletionContextProviderInDocCommentBase : CodeCompletionContextProviderBase {
    public virtual ISpecificCodeCompletionContext GetCompletionContext(CodeCompletionContext context);
    [CanBeNullAttribute]
protected abstract virtual ITokenNode GetTokenNode(CodeCompletionContext context);
}
internal class JetBrains.ReSharper.Feature.Services.CodeCompletion.CompletionInDocComments.ComplexTagLookupItem : TextLookupItemBase {
    private string myTagName;
    private string myAttributeName;
    public IconId Image { get; }
    public ComplexTagLookupItem(string tagName, string attributeName, bool shortForm);
    protected virtual RichText GetDisplayName();
    public virtual IconId get_Image();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.CompletionInDocComments.ContextInDocComment : SpecificCodeCompletionContext {
    [CompilerGeneratedAttribute]
private TextLookupRanges <TextLookupRanges>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <CompletionRange>k__BackingField;
    public TextLookupRanges TextLookupRanges { get; }
    public DocumentRange CompletionRange { get; }
    public string ContextId { get; }
    public ContextInDocComment(CodeCompletionContext context, DocumentRange completionRange, TextLookupRanges textLookupRanges);
    [CompilerGeneratedAttribute]
public TextLookupRanges get_TextLookupRanges();
    [CompilerGeneratedAttribute]
public DocumentRange get_CompletionRange();
    public virtual string get_ContextId();
}
internal class JetBrains.ReSharper.Feature.Services.CodeCompletion.CompletionInDocComments.CustomTagLookupItem : TextLookupItemBase {
    private RichText myPresentationText;
    public IconId Image { get; }
    public CustomTagLookupItem(string text, RichText presentationText, int caretOffset);
    protected virtual RichText GetDisplayName();
    public virtual IconId get_Image();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.CompletionInDocComments.DocCommentElementsItemsProvider : ItemsProviderOfSpecificContext`1<ContextInDocComment> {
    private static String[] OurSimpleTags;
    private static String[][] OurClosedTags;
    private static String[][] OurComplexTags;
    private static DocCommentElementsItemsProvider();
    protected virtual bool IsAvailable(ContextInDocComment context);
    protected virtual TextLookupRanges GetDefaultRanges(ContextInDocComment context);
    protected virtual bool AddLookupItems(ContextInDocComment context, IItemsCollector collector);
    protected virtual void AddExtraItems(ContextInDocComment context, IItemsCollector collector);
    protected virtual String[] GetSimpleTags();
    protected virtual String[][] GetComplexTags();
    protected virtual String[][] GetClosedTags();
    protected virtual AutocompletionBehaviour GetAutocompletionBehaviour(ContextInDocComment specificContext);
}
internal class JetBrains.ReSharper.Feature.Services.CodeCompletion.CompletionInDocComments.SimpleTagLookupItem : TextLookupItemBase {
    private string myText;
    public IconId Image { get; }
    public SimpleTagLookupItem(string text);
    protected virtual RichText GetDisplayName();
    public virtual IconId get_Image();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.CompletionResult : UserDataHolder {
    public IdentifierMatchingStyle IdentifierMatchingStyle;
    [CompilerGeneratedAttribute]
private string <InitialPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private PrefixTextRule <PrefixTextRule>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<EvaluatedLookupItem> <LookupItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ICompletionListFilter> <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private ISpecificCompletionSorter <Sorter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<char, CompletionAction> <CharsThatContinueCompletion>k__BackingField;
    [CompilerGeneratedAttribute]
private LookupItemInsertType <EnterInsertType>k__BackingField;
    [CompilerGeneratedAttribute]
private LookupItemInsertType <TabInsertType>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentOffset <InitialCaretOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ActiveContextIds>k__BackingField;
    [CompilerGeneratedAttribute]
private LookupFocusBehaviour <LookupFocusBehaviour>k__BackingField;
    [CompilerGeneratedAttribute]
private AutocompletionBehaviour <AutocompletionBehaviour>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <ReplaceRange>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReplaceRangeIsEmpty>k__BackingField;
    [CompilerGeneratedAttribute]
private ILookupItemSelectionStrategy <SelectionStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDynamic>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Multiplier>k__BackingField;
    [CompilerGeneratedAttribute]
private EvaluationMode <EvaluationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SingleCompletionMode>k__BackingField;
    [CompilerGeneratedAttribute]
private ILookupResolveContext <CompletionResolveContext>k__BackingField;
    public string InitialPrefix { get; }
    public PrefixTextRule PrefixTextRule { get; }
    public IReadOnlyList`1<EvaluatedLookupItem> LookupItems { get; }
    public IReadOnlyList`1<ICompletionListFilter> Filters { get; }
    public ISpecificCompletionSorter Sorter { get; }
    public Func`2<char, CompletionAction> CharsThatContinueCompletion { get; }
    public LookupItemInsertType EnterInsertType { get; }
    public LookupItemInsertType TabInsertType { get; }
    public DocumentOffset InitialCaretOffset { get; }
    public IList`1<string> ActiveContextIds { get; }
    public LookupFocusBehaviour LookupFocusBehaviour { get; public set; }
    public AutocompletionBehaviour AutocompletionBehaviour { get; }
    public DocumentRange ReplaceRange { get; }
    public bool ReplaceRangeIsEmpty { get; }
    public ILookupItemSelectionStrategy SelectionStrategy { get; }
    public bool IsDynamic { get; }
    public int Multiplier { get; }
    public EvaluationMode EvaluationMode { get; }
    public bool SingleCompletionMode { get; }
    public ILookupResolveContext CompletionResolveContext { get; }
    public CompletionResult(string initialPrefix, PrefixTextRule prefixTextRule, IReadOnlyList`1<EvaluatedLookupItem> lookupItems, IReadOnlyList`1<ICompletionListFilter> filters, ISpecificCompletionSorter sorter, LookupFocusBehaviour lookupFocusBehaviour, AutocompletionBehaviour autocompletionBehaviour, DocumentRange lookupWindowRange, bool replaceRangeIsEmpty, ILookupItemSelectionStrategy selectionStrategy, IList`1<string> activeContextIds, DocumentOffset initialCaretOffset, Func`2<char, CompletionAction> charsThatContinueCompletion, LookupItemInsertType enterInsertType, LookupItemInsertType tabInsertType, bool isDynamic, int multiplier, EvaluationMode evaluationMode, bool singleCompletionMode, IdentifierMatchingStyle identifierMatchingStyle, ILookupResolveContext completionResolveContext);
    [CompilerGeneratedAttribute]
public sealed virtual string get_InitialPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual PrefixTextRule get_PrefixTextRule();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<EvaluatedLookupItem> get_LookupItems();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<ICompletionListFilter> get_Filters();
    [CompilerGeneratedAttribute]
public sealed virtual ISpecificCompletionSorter get_Sorter();
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<char, CompletionAction> get_CharsThatContinueCompletion();
    [CompilerGeneratedAttribute]
public sealed virtual LookupItemInsertType get_EnterInsertType();
    [CompilerGeneratedAttribute]
public sealed virtual LookupItemInsertType get_TabInsertType();
    [CompilerGeneratedAttribute]
public sealed virtual DocumentOffset get_InitialCaretOffset();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<string> get_ActiveContextIds();
    [CompilerGeneratedAttribute]
public sealed virtual LookupFocusBehaviour get_LookupFocusBehaviour();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LookupFocusBehaviour(LookupFocusBehaviour value);
    [CompilerGeneratedAttribute]
public sealed virtual AutocompletionBehaviour get_AutocompletionBehaviour();
    [CompilerGeneratedAttribute]
public sealed virtual DocumentRange get_ReplaceRange();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReplaceRangeIsEmpty();
    [CompilerGeneratedAttribute]
public sealed virtual ILookupItemSelectionStrategy get_SelectionStrategy();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDynamic();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Multiplier();
    [CompilerGeneratedAttribute]
public sealed virtual EvaluationMode get_EvaluationMode();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SingleCompletionMode();
    public sealed virtual ILookupItem GetFirstFilteredItem(Boolean& thereAreMoreItems);
    [CompilerGeneratedAttribute]
public sealed virtual ILookupResolveContext get_CompletionResolveContext();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.CompletionTaskCookie : ValueType {
    [ThreadStaticAttribute]
private static bool ourInProcess;
    public static bool InProcess { get; }
    private CompletionTaskCookie(int dummy);
    public static bool get_InProcess();
    [MustDisposeResourceAttribute]
internal static CompletionTaskCookie Create();
    public sealed virtual void Dispose();
}
public static class JetBrains.ReSharper.Feature.Services.CodeCompletion.DoubleCodeCompletionUtil : object {
    public static bool IsDoubleBasic(CodeCompletionType[] codeCompletionTypes);
    public static bool IsTripleBasic(CodeCompletionType[] codeCompletionTypes);
    public static bool IsDoubleImport(CodeCompletionType[] codeCompletionTypes);
    public static bool IsAutoPlusBasic(CodeCompletionType[] codeCompletionTypes, bool isAutoInitially);
    public static bool IsAutoPlusImport(CodeCompletionType[] codeCompletionTypes, bool isAutoInitially);
    public static bool IsAutoPlusDoubleBasic(CodeCompletionType[] codeCompletionTypes, bool isAutoInitially);
    public static bool IsAutoPlusDoubleImport(CodeCompletionType[] codeCompletionTypes, bool isAutoInitially);
    public static bool IsAutoPlusBasicPlusImport(CodeCompletionType[] codeCompletionTypes, bool isAutoInitially);
    public static bool IsBasicPlusImport(CodeCompletionType[] codeCompletionTypes);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.DummyCodeCompletionSessionManager : object {
    [CompilerGeneratedAttribute]
private Action`1<CodeCompletionSessionState> SessionStateChanged;
    public sealed virtual void ExecuteAutoCompletion(ITextControl textControl, ISolution solution, Expression`1<Func`2<TKeyClass, AutopopupType>> lambdaexpression);
    public sealed virtual bool ExecuteManualCompletion(CodeCompletionType codeCompletionType, ITextControl textControl, ISolution solution, Action onItemCompleted, EvaluationMode evaluationMode, AutocompletionBehaviour autocompletionBehaviourInitial, LookupReplaceBehaviour replaceBehaviour, LookupFocusBehaviour lookupFocusBehaviour, bool forceDoNotAutocomplete, bool forceSingleCompletion, ICodeCompletionResult previousResult, bool rescheduleOnInterrupt, bool calculateContexts, bool forceAutomatic, bool isExecutingAdditionalCompletionSteps);
    public sealed virtual bool ManualCompletionCanBeAttachedToCurrentSession(CodeCompletionType codeCompletionType, bool isExecutingAdditionalCompletionSteps);
    public sealed virtual void SpawnAutomaticCompletion(ITextControl control, PsiLanguageType language);
    public sealed virtual void FireSessionStateChanged(CodeCompletionSessionState state);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SessionStateChanged(Action`1<CodeCompletionSessionState> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SessionStateChanged(Action`1<CodeCompletionSessionState> value);
    public sealed virtual EvaluationMode GetPrimaryEvaluationMode(CodeCompletionType codeCompletionType);
    public sealed virtual void ReRunSession(ITextControl textControl, ISolution solution, LookupFocusBehaviour focusBehaviour);
    public sealed virtual void TryStartAutomaticCompletion(ITextControl textControl, char c);
    public sealed virtual bool IsAutomaticCompletionAvailable(ITextControl textControl);
    public sealed virtual void ExecuteAutomaticCompletionAsync(ITextControl textControl, PsiLanguageType language, AutopopupType autopopupType);
    public sealed virtual bool HasActiveLookup();
    public sealed virtual void HideLookup();
}
public enum JetBrains.ReSharper.Feature.Services.CodeCompletion.EditorBrowsableProcessingType : Enum {
    public int value__;
    public static EditorBrowsableProcessingType All;
    public static EditorBrowsableProcessingType Normal;
    public static EditorBrowsableProcessingType Advanced;
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Feature.Services.CodeCompletion.EvaluationMode : Enum {
    public byte value__;
    public static EvaluationMode Full;
    public static EvaluationMode Light;
    public static EvaluationMode OnlyDynamicRules;
    public static EvaluationMode LightAndFull;
    public static EvaluationMode All;
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.GlobalCompletionSettings : object {
    [CompilerGeneratedAttribute]
private bool <CompleteOnSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompleteOnChar>k__BackingField;
    public bool CompleteOnSpace { get; }
    public string CompleteOnChar { get; }
    public GlobalCompletionSettings(bool completeOnSpace, string completeOnChar);
    [CompilerGeneratedAttribute]
public bool get_CompleteOnSpace();
    [CompilerGeneratedAttribute]
public string get_CompleteOnChar();
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.GlobalCompletionSettingsService : object {
    public virtual GlobalCompletionSettings GetSettingsForLanguage(PsiLanguageType language);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.IAnnotationsBuilder {
    [NotNullAttribute]
public string Start { get; }
    [NotNullAttribute]
public string End { get; }
    public abstract virtual string get_Start();
    public abstract virtual string get_End();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.IAutomaticCodeCompletionStrategy {
    [NotNullAttribute]
public PsiLanguageType Language { get; }
    public bool ForceHideCompletion { get; }
    public abstract virtual PsiLanguageType get_Language();
    public abstract virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public abstract virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore settingsStore);
    public abstract virtual bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public abstract virtual bool AcceptsFile(IFile file, ITextControl textControl);
    public abstract virtual bool get_ForceHideCompletion();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.IAutomaticCompletionIsDisabled {
    public IProperty`1<bool> IsDisabled { get; }
    public abstract virtual IProperty`1<bool> get_IsDisabled();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.ICodeCompletionResult {
    [NotNullAttribute]
public string InitialPrefix { get; }
    [NotNullAttribute]
public PrefixTextRule PrefixTextRule { get; }
    [NotNullAttribute]
public IReadOnlyList`1<EvaluatedLookupItem> LookupItems { get; }
    [NotNullAttribute]
public IReadOnlyList`1<ICompletionListFilter> Filters { get; }
    [CanBeNullAttribute]
public ISpecificCompletionSorter Sorter { get; }
    public LookupFocusBehaviour LookupFocusBehaviour { get; public set; }
    public AutocompletionBehaviour AutocompletionBehaviour { get; }
    public DocumentRange ReplaceRange { get; }
    public bool ReplaceRangeIsEmpty { get; }
    public ILookupItemSelectionStrategy SelectionStrategy { get; }
    [NotNullAttribute]
public IList`1<string> ActiveContextIds { get; }
    public DocumentOffset InitialCaretOffset { get; }
    public Func`2<char, CompletionAction> CharsThatContinueCompletion { get; }
    public LookupItemInsertType EnterInsertType { get; }
    public LookupItemInsertType TabInsertType { get; }
    public bool IsDynamic { get; }
    public bool SingleCompletionMode { get; }
    public int Multiplier { get; }
    public EvaluationMode EvaluationMode { get; }
    [NotNullAttribute]
public ILookupResolveContext CompletionResolveContext { get; }
    public abstract virtual string get_InitialPrefix();
    public abstract virtual PrefixTextRule get_PrefixTextRule();
    public abstract virtual IReadOnlyList`1<EvaluatedLookupItem> get_LookupItems();
    public abstract virtual IReadOnlyList`1<ICompletionListFilter> get_Filters();
    public abstract virtual ISpecificCompletionSorter get_Sorter();
    public abstract virtual LookupFocusBehaviour get_LookupFocusBehaviour();
    public abstract virtual void set_LookupFocusBehaviour(LookupFocusBehaviour value);
    public abstract virtual AutocompletionBehaviour get_AutocompletionBehaviour();
    public abstract virtual DocumentRange get_ReplaceRange();
    public abstract virtual bool get_ReplaceRangeIsEmpty();
    public abstract virtual ILookupItemSelectionStrategy get_SelectionStrategy();
    public abstract virtual IList`1<string> get_ActiveContextIds();
    public abstract virtual DocumentOffset get_InitialCaretOffset();
    public abstract virtual Func`2<char, CompletionAction> get_CharsThatContinueCompletion();
    public abstract virtual LookupItemInsertType get_EnterInsertType();
    public abstract virtual LookupItemInsertType get_TabInsertType();
    public abstract virtual bool get_IsDynamic();
    public abstract virtual bool get_SingleCompletionMode();
    public abstract virtual int get_Multiplier();
    public abstract virtual EvaluationMode get_EvaluationMode();
    [CanBeNullAttribute]
public abstract virtual ILookupItem GetFirstFilteredItem(Boolean& thereAreMoreItems);
    public abstract virtual ILookupResolveContext get_CompletionResolveContext();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.ICodeCompletionSession {
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.ICodeCompletionSessionManager {
    public abstract virtual void ExecuteAutoCompletion(ITextControl textControl, ISolution solution, Expression`1<Func`2<TKeyClass, AutopopupType>> lambdaexpression);
    public abstract virtual bool ExecuteManualCompletion(CodeCompletionType codeCompletionType, ITextControl textControl, ISolution solution, Action onItemCompleted, EvaluationMode evaluationMode, AutocompletionBehaviour autocompletionBehaviourInitial, LookupReplaceBehaviour replaceBehaviour, LookupFocusBehaviour lookupFocusBehaviour, bool forceDoNotAutocomplete, bool forceSingleCompletion, ICodeCompletionResult previousResult, bool rescheduleOnInterrupt, bool calculateContexts, bool forceAutomatic, bool isExecutingAdditionalCompletionSteps);
    public abstract virtual bool ManualCompletionCanBeAttachedToCurrentSession(CodeCompletionType codeCompletionType, bool isExecutingAdditionalCompletionSteps);
    public abstract virtual void SpawnAutomaticCompletion(ITextControl control, PsiLanguageType language);
    public abstract virtual EvaluationMode GetPrimaryEvaluationMode(CodeCompletionType codeCompletionType);
    public abstract virtual void ReRunSession(ITextControl textControl, ISolution solution, LookupFocusBehaviour focusBehaviour);
    public abstract virtual void TryStartAutomaticCompletion(ITextControl textControl, char c);
    public abstract virtual void ExecuteAutomaticCompletionAsync(ITextControl textControl, PsiLanguageType language, AutopopupType autopopupType);
    public abstract virtual bool HasActiveLookup();
    public abstract virtual void HideLookup();
    public abstract virtual void FireSessionStateChanged(CodeCompletionSessionState state);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SessionStateChanged(Action`1<CodeCompletionSessionState> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SessionStateChanged(Action`1<CodeCompletionSessionState> value);
    public abstract virtual bool IsAutomaticCompletionAvailable(ITextControl textControl);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.IExternalIntellisenseHost {
    public abstract virtual void CloseHostCodeCompletion(RunningTextControlId textControlId);
    public abstract virtual void CloseHostParameterInfo(RunningTextControlId textControlId);
    public abstract virtual bool IsHostCodeCompletionActive(RunningTextControlId textControlId);
    public abstract virtual bool IsManualHostCodeCompletionActive(RunningTextControlId textControlId);
    public abstract virtual bool IsHostQuickInfoActive(RunningTextControlId textControlId);
    public abstract virtual bool IsInteractiveHostQuickInfoActive(RunningTextControlId textControlId);
    public abstract virtual void BeforeExecuteRefactoring(IDataContext context);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.IGlobalCompletionSettingsService {
    [CanBeNullAttribute]
public abstract virtual GlobalCompletionSettings GetSettingsForLanguage(PsiLanguageType language);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.IIntellisenseAvailabilityService {
    public abstract virtual bool IsIntellisenseSupported(ITextControl textControl);
    public abstract virtual bool IsIntellisenseSupported(ITextControl textControl, IContextBoundSettingsStore settingsStore);
    public abstract virtual bool IsManualCompletionAvailable(ITextControl textControl);
    public abstract virtual bool IsAutomaticCompletionAvailable(ITextControl textControl);
    public abstract virtual bool IsParameterInfoAvailable(ITextControl textControl);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.IIntellisenseSupportedDetector {
    [CanBeNullAttribute]
public abstract virtual IIntellisenseSupportedResult IsIntellisenseSupported(IFile psiFile);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.IIntellisenseSupportedResult {
    public IntellisenseSupportedVerdict Verdict { get; }
    public abstract virtual IntellisenseSupportedVerdict get_Verdict();
    public abstract virtual IReadOnlyList`1<IRangeMarker> GetNotSupportedRanges();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.IManualCompletionIsDisabled {
    public IProperty`1<bool> IsDisabled { get; }
    public abstract virtual IProperty`1<bool> get_IsDisabled();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.IMLSortingAwareItem {
    public abstract virtual bool UseMLSort();
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Impl.CodeCompletionContextProviderBase : object {
    public abstract virtual bool IsApplicable(CodeCompletionContext context);
    public abstract virtual ISpecificCodeCompletionContext GetCompletionContext(CodeCompletionContext context);
    [NotNullAttribute]
[PureAttribute]
protected TextLookupRanges CalculateDefaultRanges(CodeCompletionContext context);
    [NotNullAttribute]
[PureAttribute]
public static TextLookupRanges GetTextLookupRanges(CodeCompletionContext context, DocumentRange completedElementRange);
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Impl.FileReferenceItemsProvider`1 : ItemsProviderWithSymbolTable`3<TContext, IFileReference, IFile> {
    protected virtual ISymbolTable GetCompletionSymbolTable(IFileReference reference, TContext context);
    protected virtual ILookupItem CreateLookupItem(string name, DeclaredElementInstance`1<IDeclaredElement> declaredElementInstance, TContext context, TextLookupRanges ranges, TailType tailType);
}
public static class JetBrains.ReSharper.Feature.Services.CodeCompletion.Impl.ImportCompletionUtil : object {
    public static ISymbolTable GetCompletionSymbolTableForImportCompletion(IReference reference, ICollection`1<string> namespacesNamesToSearch, bool namespacesCaseSensitive);
    [NotNullAttribute]
public static ISymbolTable GetFilesCompletionSymbolTableForImportCompletion(VirtualFileSystemPath basePath, IProjectFile projectFile, ProjectFileType expectedFileType, ICollection`1<string> expectedExtensions);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Impl.ItemsProviderWithSymbolTable`3 : ItemsProviderOfSpecificContext`1<TContext> {
    protected virtual bool AddLookupItems(TContext context, IItemsCollector collector);
    protected abstract virtual TextLookupRanges EvaluateRanges(TContext context);
    protected abstract virtual TReference GetReference(TContext context);
    protected virtual void AddLookupItemsForDeclaredElement(TContext context, IItemsCollector collector, TextLookupRanges ranges, DeclaredElementInstance`1<IDeclaredElement> instance, string name);
    protected virtual void AddLookupItemsForDeclaredElement(TContext context, IItemsCollector collector, TextLookupRanges ranges, DeclaredElementInstance`1<IDeclaredElement> instance, TReference reference, string name);
    protected virtual bool EvaluateLookupItems(TReference reference, TContext context, IItemsCollector collector, TextLookupRanges ranges);
    protected void EvaluateSymbolTable(TReference reference, TContext context, IItemsCollector collector, TextLookupRanges ranges, ISymbolTable table);
    protected virtual bool IsIncluded(IDeclaredElement declaredElement, ISubstitution substitution, TContext context);
    protected abstract virtual ISymbolTable GetCompletionSymbolTable(TReference reference, TContext context);
    protected virtual ILookupItem CreateLookupItem(string name, DeclaredElementInstance`1<IDeclaredElement> instance, TContext context, TextLookupRanges ranges, TailType tailType);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.ImportCompletionCache : object {
    private static Char[] ourMangledNameChars;
    private static ImportCompletionCache();
    private static bool TypeFilter(ITypeElement typeElement, ElementAccessContext accessContext, CodeCompletionContext basicContext);
    [NotNullAttribute]
public static ImportCompletionCache GetInstance(ISolution solution);
    [NotNullAttribute]
public IEnumerable`1<ITypeElement> GetResult(CodeCompletionContext context, IItemsCollector collector, ElementAccessContext accessContext, IdentifierMatcher prefixMatcher, bool filterByAccess, Func`2<ITypeElement, bool> customFilter);
}
[ShellComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.IncludeTemplatesRule : ItemsProviderOfSpecificContext`1<ISpecificCodeCompletionContext> {
    [NotNullAttribute]
private static Key`1<OneToListMap`2<string, TemplateLookupItem>> ourTemplateNamesKey;
    public bool IsFinal { get; }
    private static IncludeTemplatesRule();
    protected virtual bool IsAvailable(ISpecificCodeCompletionContext context);
    public virtual bool get_IsFinal();
    protected virtual bool AddLookupItems(ISpecificCodeCompletionContext context, IItemsCollector collector);
    protected virtual void TransformItems(ISpecificCodeCompletionContext context, IItemsCollector collector);
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AbbreviatedItemsProviderOfSymbolTableBase`1 : ItemsProviderOfSymbolTableBase`1<TContext> {
    public bool IsDynamic { get; }
    public CompletionMode SupportedCompletionMode { get; }
    public EvaluationMode SupportedEvaluationMode { get; }
    public virtual bool get_IsDynamic();
    public virtual CompletionMode get_SupportedCompletionMode();
    public virtual EvaluationMode get_SupportedEvaluationMode();
    protected virtual bool AddLookupItems(TContext context, IItemsCollector collector);
    [CanBeNullAttribute]
protected abstract virtual string GetPrefix(TContext context);
    protected virtual void CollectElements(IEnumerable`1<ISymbolInfo> elements, TContext context, IItemsCollector collector);
    [NotNullAttribute]
[ItemNotNullAttribute]
protected abstract virtual String[] GetAbbreviations(TContext context);
    [CanBeNullAttribute]
protected abstract virtual ILookupItem GetAbbreviationElement(string abbreviation, IList`1<ISymbolInfo> elements, TContext context);
    protected static void Collect(ILookupItem item, IItemsCollector collector);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AlphabeticalSorter : object {
    [CompilerGeneratedAttribute]
private static ISpecificCompletionSorter <Instance>k__BackingField;
    [NotNullAttribute]
public static ISpecificCompletionSorter Instance { get; }
    private static AlphabeticalSorter();
    [CompilerGeneratedAttribute]
public static ISpecificCompletionSorter get_Instance();
    public sealed virtual IEnumerable`1<MatchedLookupItem> SortInplace(List`1<MatchedLookupItem> matchedItems, ICompletionStatisticsManager statisticsManager);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.BehaviorUtil : object {
    [ExtensionAttribute]
public static void SubscribePreviewCompletion(LookupItem`1<TInfo> item, CompletionConfigurationProcessor previewCompletion);
    [ExtensionAttribute]
public static void SubscribeAfterCompletion(LookupItem`1<TInfo> item, AfterCompletionHandler handler);
    [ExtensionAttribute]
public static void UpdateBehavior(LookupItem`1<TInfo> item, Func`2<TBehavior, TBehavior> fUpdateBehavior);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.CompletionKeys : object {
    [NotNullAttribute]
public static Key IsKeywordKey;
    [NotNullAttribute]
public static Key IsConstructorKey;
    [NotNullAttribute]
public static Key IsOverridableMemberKey;
    [NotNullAttribute]
public static Key IsPartialMemberKey;
    [NotNullAttribute]
public static Key IsTypeOrNamespaceKey;
    [NotNullAttribute]
public static Key IsWithReferenceKey;
    [NotNullAttribute]
public static Key IsComboReturnKey;
    [NotNullAttribute]
public static Key IsGeneratePropertyKey;
    [NotNullAttribute]
public static Key RequiresStaticCall;
    [NotNullAttribute]
public static Key IsNamedArgumentKey;
    [NotNullAttribute]
public static Key ContextQualifierKind;
    private static CompletionKeys();
    [ExtensionAttribute]
[PureAttribute]
public static bool IsNamedArgument(ILookupItem lookupItem);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsGenerateProperty(ILookupItem lookupItem);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsGenerateMember(ILookupItem lookupItem);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsComboReturn(ILookupItem lookupItem);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsDeclaredElementLookupItem(ILookupItem lookupItem);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsPartialMemberLookupItem(ILookupItem lookupItem);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsOverridableMemberLookupItem(ILookupItem lookupItem);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsKeyword(ILookupItem lookupItem);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsConstructor(ILookupItem lookupItem);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsTypeElementLookupItem(ILookupItem lookupItem);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsTypeOrNamespaceLookupItem(ILookupItem lookupItem);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsWithReferenceLookupItem(ILookupItem lookupItem);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsMethodsLookupItem(ILookupItem lookupItem);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsExtensionMethodsLookupItem(ILookupItem lookupItem);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.IAspectLookupItem`1 {
    public TInfo Info { get; }
    public abstract virtual void UpdateBehavior(Func`2<TBehavior, TBehavior> fUpdateBehavior);
    public abstract virtual void UpdatePresentation(Func`2<TPresentation, TPresentation> fUpdatePresentation);
    public abstract virtual void UpdatePresentationOfType(Func`2<TPresentation, TPresentation> fUpdatePresentation);
    public abstract virtual TInfo get_Info();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.IAspectLookupItemBase {
    public ILookupItemBehavior Behavior { get; }
    public ILookupItemPresentation Presentation { get; }
    public ILookupItemMatcher Matcher { get; }
    public abstract virtual ILookupItemBehavior get_Behavior();
    public abstract virtual ILookupItemPresentation get_Presentation();
    public abstract virtual ILookupItemMatcher get_Matcher();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemBase {
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemBehavior {
    public bool CanBeAcceptedWithoutCommit { get; }
    public abstract virtual bool AcceptIfOnlyMatched(LookupItemAcceptanceContext itemAcceptanceContext);
    public abstract virtual bool get_CanBeAcceptedWithoutCommit();
    public abstract virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemInfo {
    public bool IsDynamic { get; }
    public int Identity { get; }
    public string Text { get; }
    public LookupItemPlacement Placement { get; }
    public bool IsRiderAsync { get; }
    public abstract virtual bool get_IsDynamic();
    public abstract virtual int get_Identity();
    public abstract virtual string get_Text();
    public abstract virtual LookupItemPlacement get_Placement();
    public abstract virtual bool get_IsRiderAsync();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemInfoWithDelayedOrderString {
    [NotNullAttribute]
public string DelayedOrderString { get; }
    public abstract virtual string get_DelayedOrderString();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemMatcher {
    public bool IgnoreSoftOnSpace { get; }
    [NotNullAttribute]
public string TextToMatch { get; }
    [CanBeNullAttribute]
public abstract virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    public abstract virtual bool get_IgnoreSoftOnSpace();
    public abstract virtual string get_TextToMatch();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemPresentation {
    [CanBeNullAttribute]
public IconId Image { get; }
    [NotNullAttribute]
public RichText DisplayName { get; }
    public RichText DisplayTypeName { get; public set; }
    public bool CanShrink { get; }
    public abstract virtual IconId get_Image();
    public abstract virtual RichText get_DisplayName();
    public abstract virtual RichText get_DisplayTypeName();
    public abstract virtual void set_DisplayTypeName(RichText value);
    [PureAttribute]
public abstract virtual DocumentRange GetVisualReplaceRange();
    public abstract virtual bool get_CanShrink();
    public abstract virtual bool Shrink();
    public abstract virtual void Unshrink();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.LookupItem`1 : LookupItem {
    internal Func`2<LookupItem`1<TInfo>, ILookupItemBehavior> FGetBehavior;
    [CanBeNullAttribute]
private ILookupItemBehavior myBehavior;
    internal Func`2<LookupItem`1<TInfo>, ILookupItemPresentation> FGetPresentation;
    [CanBeNullAttribute]
private ILookupItemPresentation myPresentation;
    internal Func`2<LookupItem`1<TInfo>, ILookupItemMatcher> FGetMatcher;
    [CanBeNullAttribute]
private ILookupItemMatcher myMatcher;
    [CompilerGeneratedAttribute]
private TInfo <Info>k__BackingField;
    public ILookupItemBehavior Behavior { get; }
    public ILookupItemPresentation Presentation { get; }
    public ILookupItemMatcher Matcher { get; }
    [NotNullAttribute]
public TInfo Info { get; }
    public ILookupItemInfo ItemInfo { get; }
    public LookupItemPlacement Placement { get; }
    public IconId Image { get; }
    public RichText DisplayName { get; }
    public RichText DisplayTypeName { get; }
    public bool CanShrink { get; }
    public bool IsDynamic { get; }
    public bool IgnoreSoftOnSpace { get; }
    public int Identity { get; }
    internal LookupItem`1(TInfo info);
    [ObsoleteAttribute("You should never need it")]
internal void Reset();
    public virtual ILookupItemBehavior get_Behavior();
    public virtual ILookupItemPresentation get_Presentation();
    public virtual ILookupItemMatcher get_Matcher();
    [CompilerGeneratedAttribute]
public sealed virtual TInfo get_Info();
    public virtual ILookupItemInfo get_ItemInfo();
    public sealed virtual LookupItemPlacement get_Placement();
    public sealed virtual void UpdateBehavior(Func`2<TBehavior, TBehavior> fUpdateBehavior);
    public sealed virtual void UpdatePresentation(Func`2<TPresentation, TPresentation> fUpdatePresentation);
    public sealed virtual void UpdatePresentationOfType(Func`2<TPresentation, TPresentation> fUpdatePresentation);
    public sealed virtual bool AcceptIfOnlyMatched(LookupItemAcceptanceContext itemAcceptanceContext);
    public sealed virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    public sealed virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    public sealed virtual IconId get_Image();
    public sealed virtual RichText get_DisplayName();
    public sealed virtual RichText get_DisplayTypeName();
    public sealed virtual DocumentRange GetVisualReplaceRange(DocumentRange nameRange);
    public sealed virtual bool get_CanShrink();
    public sealed virtual bool Shrink();
    public sealed virtual void Unshrink();
    public sealed virtual bool get_IsDynamic();
    public sealed virtual bool get_IgnoreSoftOnSpace();
    public sealed virtual int get_Identity();
    public virtual string ToString();
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.LookupItemAspect`1 : object {
    public TInfo Info;
    protected LookupItemAspect`1(TInfo info);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.LookupItemFactory : object {
    [NotNullAttribute]
public static LookupItem`1<TInfo> CreateLookupItem(TInfo info);
    [ExtensionAttribute]
[NotNullAttribute]
public static LookupItem`1<TInfo> WithBehavior(LookupItem`1<TInfo> item, Func`2<LookupItem`1<TInfo>, ILookupItemBehavior> fGetBehavior);
    [ExtensionAttribute]
[NotNullAttribute]
public static LookupItem`1<TInfo> WithPresentation(LookupItem`1<TInfo> item, Func`2<LookupItem`1<TInfo>, ILookupItemPresentation> fGetPresentation);
    [ExtensionAttribute]
[NotNullAttribute]
public static LookupItem`1<TInfo> WithMatcher(LookupItem`1<TInfo> item, Func`2<LookupItem`1<TInfo>, ILookupItemMatcher> fGetMatcher);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.PresentationUtil : object {
    [ExtensionAttribute]
public static void AdjustVisualReplaceMarker(LookupItem`1<TInfo> item, IRangeMarker rangeMarker);
    [ExtensionAttribute]
public static void UpdatePresentation(LookupItem`1<TInfo> item, Func`2<TPresentation, TPresentation> fUpdatePresentation);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Behaviors.AttributeBehavior`1 : TextualBehavior`1<TInfo> {
    public AttributeBehavior`1(TInfo info);
    protected virtual void OnAfterComplete(ITextControl textControl, LookupItemInsertType insertType, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker, Boolean& keepCaretStill);
    protected virtual void InsertTailType(ITextControl textControl, ISolution solution, DocumentOffset offset, TailType tailType, LookupItemInsertType lookupItemInsertType);
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Behaviors.CreateLocalVariableBehaviorBase : TextualBehavior`1<TypeInfo> {
    [CompilerGeneratedAttribute]
private INamesSuggestion <namesSuggestion>P;
    protected string ArgumentModifier { get; }
    protected CreateLocalVariableBehaviorBase(INamesSuggestion namesSuggestion, TypeInfo info);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    protected abstract virtual string get_ArgumentModifier();
    protected abstract virtual IDeclaration CreateLocalVariableDeclaration(ITreeNode& nameElement, string safeName);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Behaviors.DeclaredElementBehavior`1 : TextualBehavior`1<TInfo> {
    public ISolution Solution { get; }
    protected DeclaredElementBehavior`1(TInfo info);
    public ISolution get_Solution();
    protected virtual void OnAfterComplete(ITextControl textControl, LookupItemInsertType insertType, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker, Boolean& keepCaretStill);
    protected virtual void InsertTailType(ITextControl textControl, ISolution solution, DocumentOffset offset, TailType tailType, LookupItemInsertType lookupItemInsertType);
    protected virtual void OnApplyCodeStyle(ITextControl textControl, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Behaviors.DeclaredElementWithReferenceBehavior`1 : TextualBehavior`1<DeclaredElementWithReferenceInfo> {
    private TWrappedBehavior myWrappedBehavior;
    private ModuleReferencerService myModuleReferencerService;
    private IPsiModule myPsiModule;
    public DeclaredElementWithReferenceBehavior`1(DeclaredElementWithReferenceInfo info, ModuleReferencerService moduleReferencerService, IPsiModule psiModule, TWrappedBehavior wrappedBehavior);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    private void AcceptInternal(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType lookupItemInsertType, Suffix suffix, ISolution solution, bool keepCaretStill, Shell shell);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Behaviors.IPostCompleteBehavior {
    public abstract virtual DocumentRange OnCompletedItemTextInserted(DocumentRange itemTextRange, Suffix& suffix);
    public abstract virtual void OnAfterItemCompleted(ITextControl textControl, DocumentRange completedDecorationRange);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Behaviors.ITextualBehavior {
    public bool DisableFormatter { get; public set; }
    public bool RemovesTypeQualifier { get; }
    [NotNullAttribute]
public TextLookupRanges Ranges { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_BeforeComplete(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BeforeComplete(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PreviewCompletion(CompletionConfigurationProcessor value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PreviewCompletion(CompletionConfigurationProcessor value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_AfterComplete(AfterCompletionHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AfterComplete(AfterCompletionHandler value);
    public abstract virtual bool get_DisableFormatter();
    public abstract virtual void set_DisableFormatter(bool value);
    public abstract virtual bool get_RemovesTypeQualifier();
    public abstract virtual TextLookupRanges get_Ranges();
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Behaviors.MissingMemberBehaviorBase : DeclaredElementBehavior`1<DeclaredElementInfo> {
    protected bool myIsExplicitImplementation;
    protected MissingMemberBehaviorBase(bool isExplicitImplementation, DeclaredElementInfo info);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    protected abstract virtual void RemoveIdentifier(ITextControl textControl, ISolution solution);
    protected abstract virtual void SetOptions(IGeneratorContext context);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Behaviors.PostCompleteBehavior : object {
    [NotNullAttribute]
private static Key`1<IPostCompleteBehavior> Key;
    private static PostCompleteBehavior();
    [ExtensionAttribute]
public static void PutPostCompleteBehavior(ILookupItem item, IPostCompleteBehavior behavior);
    [ExtensionAttribute]
[PureAttribute]
[CanBeNullAttribute]
public static IPostCompleteBehavior GetPostCompleteBehavior(ILookupItem item);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Behaviors.TextualBehavior`1 : LookupItemAspect`1<TInfo> {
    [CompilerGeneratedAttribute]
private EventHandler BeforeComplete;
    [CompilerGeneratedAttribute]
private CompletionConfigurationProcessor PreviewCompletion;
    [CompilerGeneratedAttribute]
private AfterCompletionHandler AfterComplete;
    [CompilerGeneratedAttribute]
private bool <DisableFormatter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SaneDecoration>k__BackingField;
    public TextLookupRanges Ranges { get; }
    public bool CanBeAcceptedWithoutCommit { get; }
    public bool DisableFormatter { get; public set; }
    public bool SaneDecoration { get; public set; }
    public bool RemovesTypeQualifier { get; }
    protected Casing Casing { get; }
    public TextualBehavior`1(TInfo info);
    public sealed virtual TextLookupRanges get_Ranges();
    public virtual bool get_CanBeAcceptedWithoutCommit();
    public virtual bool AcceptIfOnlyMatched(LookupItemAcceptanceContext itemAcceptanceContext);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    [CompilerGeneratedAttribute]
public sealed virtual void add_BeforeComplete(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_BeforeComplete(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PreviewCompletion(CompletionConfigurationProcessor value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PreviewCompletion(CompletionConfigurationProcessor value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_AfterComplete(AfterCompletionHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AfterComplete(AfterCompletionHandler value);
    [CompilerGeneratedAttribute]
public virtual bool get_DisableFormatter();
    [CompilerGeneratedAttribute]
public virtual void set_DisableFormatter(bool value);
    [CompilerGeneratedAttribute]
public bool get_SaneDecoration();
    [CompilerGeneratedAttribute]
public void set_SaneDecoration(bool value);
    public virtual bool get_RemovesTypeQualifier();
    protected virtual Casing get_Casing();
    protected virtual void InsertTailType(ITextControl textControl, ISolution solution, DocumentOffset offset, TailType tailType, LookupItemInsertType lookupItemInsertType);
    protected virtual void OnAfterComplete(ITextControl textControl, LookupItemInsertType insertType, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker, Boolean& keepCaretStill);
    protected void InvokeOnAfterComplete(ITextControl textControl, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker);
    protected virtual void OnAfterSuffixPlayback(ITextControl textControl, DocumentRange completedDecorationRange);
    protected virtual DocumentRange DoReplaceText(ITextControl textControl, DocumentRange replaceRange, string typeInName, Suffix& suffix);
    protected virtual void PlaybackSuffix(ITextControl textControl, Suffix suffix);
    private void ForceBeforeComplete();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Behaviors.TypeBehavior`1 : TextualBehavior`1<TInfo> {
    public TypeBehavior`1(TInfo info);
    protected virtual void InsertTailType(ITextControl textControl, ISolution solution, DocumentOffset offset, TailType tailType, LookupItemInsertType lookupItemInsertType);
    protected virtual void OnAfterComplete(ITextControl textControl, LookupItemInsertType insertType, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker, Boolean& keepCaretStill);
    protected virtual ITypePointer GetTypePointerForBinding();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Behaviors.WithReferenceBehaviorWrapper`2 : DeclaredElementBehavior`1<TInfo> {
    private ModuleReferencerService myModuleReferencerService;
    private IPsiModule myPsiModule;
    private bool myConfirmReferenceAdd;
    private TBehavior myWrappedBehavior;
    public WithReferenceBehaviorWrapper`2(TInfo info, ModuleReferencerService moduleReferencerService, IPsiModule module, CodeCompletionContext context, TBehavior wrappedBehavior);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    private void AcceptInternal(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill, Shell shell);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Info.BasicInfo : object {
    [CompilerGeneratedAttribute]
private bool <IsDynamic>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private LookupItemPlacement <Placement>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public bool IsDynamic { get; public set; }
    public int Identity { get; private set; }
    public LookupItemPlacement Placement { get; }
    [NotNullAttribute]
public string Text { get; internal set; }
    public bool IsRiderAsync { get; }
    public BasicInfo(string text, string identity);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDynamic();
    [CompilerGeneratedAttribute]
public void set_IsDynamic(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Identity();
    [CompilerGeneratedAttribute]
private void set_Identity(int value);
    public void AppendToIdentity(int offset);
    [CompilerGeneratedAttribute]
public sealed virtual LookupItemPlacement get_Placement();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [CompilerGeneratedAttribute]
internal void set_Text(string value);
    public virtual bool get_IsRiderAsync();
    public virtual string ToString();
    [NotNullAttribute]
public virtual string MakeSafe(string text);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Info.ConstructorInfo : TypeInfo {
    private string myInsertSuffix;
    [CompilerGeneratedAttribute]
private bool <IsArrayConstructor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowNew>k__BackingField;
    public bool IsRiderAsync { get; }
    public string ConstructorInsertSuffix { get; }
    public bool IsArrayConstructor { get; }
    public bool ShowContainer { get; public set; }
    public bool ShowNew { get; }
    public ConstructorInfo(string name, IType type, string argumentContextString, PsiLanguageType languageType, ILookupItemsOwner owner, bool showNew);
    public virtual bool get_IsRiderAsync();
    public string get_ConstructorInsertSuffix();
    [CompilerGeneratedAttribute]
public bool get_IsArrayConstructor();
    [CompilerGeneratedAttribute]
public bool get_ShowContainer();
    [CompilerGeneratedAttribute]
public void set_ShowContainer(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowNew();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Info.CreateDelegateInfo : DelegateInfo {
    private string myOriginalExpectedName;
    private IEnumerable`1<NameRoot> myExpectedRoots;
    private NamingManager myNamingManager;
    private NamedElementKinds myElementKind;
    private PsiLanguageType myLanguageType;
    private IPsiSourceFile myPsiSourceFile;
    [CanBeNullAttribute]
private string myExpectedName;
    public string ExpectedName { get; }
    public CreateDelegateInfo(IDelegate delegate, ISubstitution substitution, string expectedName, IEnumerable`1<NameRoot> expectedRoots, NamingManager namingManager, NamedElementKinds elementKind, PsiLanguageType languageType, string text, string identity, CodeCompletionContext context);
    public string get_ExpectedName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Info.CreateLocalVariableInfo : TypeInfo {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private INamesSuggestion <NameSuggestion>k__BackingField;
    [NullableAttribute("2")]
public string TypeName { get; public set; }
    [RequiredMemberAttribute]
public INamesSuggestion NameSuggestion { get; public set; }
    [ObsoleteAttribute("Constructors of types with required members are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RequiredMembers")]
public CreateLocalVariableInfo(string text, IType type, PsiLanguageType language, ILookupItemsOwner owner);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_TypeName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TypeName(string value);
    public static CreateLocalVariableInfo CreateWithNameSuggestion(ClrSpecificCodeCompletionContext context, IType expectedType, string textFormat, IEnumerable`1<NameRoot> nameRoots);
    [CompilerGeneratedAttribute]
public INamesSuggestion get_NameSuggestion();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NameSuggestion(INamesSuggestion value);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Info.DeclaredElementInfo : TextualInfo {
    private string myQualifier;
    private QualifierKind myQualifierKind;
    private DeclaredElementsOrPointers myElementsOrPointers;
    [CompilerGeneratedAttribute]
private ILookupItemsOwner <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private PsiLanguageType <LanguageType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Bind>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InsertAngleBrackets>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveInsertTailType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BasicImportItem>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExtensionMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWithReference>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTypeElement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HighlightSameType>k__BackingField;
    [CompilerGeneratedAttribute]
private AnnotationsDisplayKind <AnnotationsDisplayKind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    public bool IsRiderAsync { get; }
    [NotNullAttribute]
public IElementInstancePointer`1<IDeclaredElement> Pointer { get; }
    [NotNullAttribute]
public ILookupItemsOwner Owner { get; }
    [NotNullAttribute]
public PsiLanguageType LanguageType { get; }
    public bool Bind { get; public set; }
    public bool InsertAngleBrackets { get; public set; }
    public bool RemoveInsertTailType { get; public set; }
    public bool BasicImportItem { get; public set; }
    public bool IsMethods { get; public set; }
    public bool IsExtensionMethods { get; public set; }
    public bool IsWithReference { get; public set; }
    public bool IsTypeElement { get; public set; }
    public bool HighlightSameType { get; public set; }
    public AnnotationsDisplayKind AnnotationsDisplayKind { get; public set; }
    public bool ShowContainer { get; }
    [CanBeNullAttribute]
public DeclaredElementInstance PreferredDeclaredElement { get; }
    [NotNullAttribute]
public IReadOnlyList`1<IElementInstancePointer`1<IDeclaredElement>> DeclaredElementPointers { get; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public IReadOnlyList`1<DeclaredElementInstance> AllDeclaredElements { get; }
    [NotNullAttribute]
public string ShortName { get; }
    public string Qualifier { get; }
    public QualifierKind QualifierKind { get; public set; }
    public bool HasCandidates { get; }
    [ItemNotNullAttribute]
public IEnumerable`1<InvocationCandidate> Candidates { get; }
    public DeclaredElementInfo(string shortName, IDeclaredElement element, PsiLanguageType languageType, ILookupItemsOwner owner, IElementPointerFactory elementPointerFactory);
    public DeclaredElementInfo(string shortName, IEnumerable`1<IDeclaredElement> elements, PsiLanguageType languageType, ILookupItemsOwner owner, IElementPointerFactory elementPointerFactory);
    public DeclaredElementInfo(string shortName, IEnumerable`1<DeclaredElementInstance> elements, PsiLanguageType languageType, ILookupItemsOwner owner, IElementPointerFactory elementPointerFactory);
    public DeclaredElementInfo(string shortName, DeclaredElementInstance instance, PsiLanguageType languageType, ILookupItemsOwner owner, IElementPointerFactory elementPointerFactory);
    protected DeclaredElementInfo(string name, PsiLanguageType languageType, ILookupItemsOwner owner);
    public virtual bool get_IsRiderAsync();
    public IElementInstancePointer`1<IDeclaredElement> get_Pointer();
    [CompilerGeneratedAttribute]
public ILookupItemsOwner get_Owner();
    [CompilerGeneratedAttribute]
public PsiLanguageType get_LanguageType();
    [CompilerGeneratedAttribute]
public bool get_Bind();
    [CompilerGeneratedAttribute]
public void set_Bind(bool value);
    [CompilerGeneratedAttribute]
public bool get_InsertAngleBrackets();
    [CompilerGeneratedAttribute]
public void set_InsertAngleBrackets(bool value);
    [CompilerGeneratedAttribute]
public bool get_RemoveInsertTailType();
    [CompilerGeneratedAttribute]
public void set_RemoveInsertTailType(bool value);
    [CompilerGeneratedAttribute]
public bool get_BasicImportItem();
    [CompilerGeneratedAttribute]
public void set_BasicImportItem(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsMethods();
    [CompilerGeneratedAttribute]
public void set_IsMethods(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsExtensionMethods();
    [CompilerGeneratedAttribute]
public void set_IsExtensionMethods(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsWithReference();
    [CompilerGeneratedAttribute]
public void set_IsWithReference(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsTypeElement();
    [CompilerGeneratedAttribute]
public void set_IsTypeElement(bool value);
    [CompilerGeneratedAttribute]
public bool get_HighlightSameType();
    [CompilerGeneratedAttribute]
public void set_HighlightSameType(bool value);
    [CompilerGeneratedAttribute]
public AnnotationsDisplayKind get_AnnotationsDisplayKind();
    [CompilerGeneratedAttribute]
public void set_AnnotationsDisplayKind(AnnotationsDisplayKind value);
    public virtual bool get_ShowContainer();
    public virtual DeclaredElementInstance get_PreferredDeclaredElement();
    public virtual IReadOnlyList`1<IElementInstancePointer`1<IDeclaredElement>> get_DeclaredElementPointers();
    [NotNullAttribute]
[PureAttribute]
public virtual IReadOnlyList`1<TDeclaredElement> GetDeclaredElements();
    [CanBeNullAttribute]
[PureAttribute]
public virtual TDeclaredElement GetDeclaredElement();
    public virtual IReadOnlyList`1<DeclaredElementInstance> get_AllDeclaredElements();
    [CompilerGeneratedAttribute]
public string get_ShortName();
    public string get_Qualifier();
    public QualifierKind get_QualifierKind();
    public void set_QualifierKind(QualifierKind value);
    [CanBeNullAttribute]
public DeclaredElementInstance CommitAndResolveDeclaredElementInstance();
    public virtual bool get_HasCandidates();
    public virtual IEnumerable`1<ICandidate> CreateCandidates(ISolution solution);
    public virtual IEnumerable`1<InvocationCandidate> get_Candidates();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Info.DeclaredElementWithReferenceInfo : DeclaredElementInfo {
    [CompilerGeneratedAttribute]
private ITypeElement <Element>k__BackingField;
    [NotNullAttribute]
public IPsiModule ReferencedModule { get; }
    [NotNullAttribute]
public ITypeElement Element { get; }
    public DeclaredElementWithReferenceInfo(string shortName, ITypeElement typeElement, PsiLanguageType languageType, ILookupItemsOwner owner, IElementPointerFactory elementPointerFactory);
    public DeclaredElementWithReferenceInfo(string shortName, ITypeElement typeElement, IEnumerable`1<IDeclaredElement> elements, PsiLanguageType languageType, ILookupItemsOwner owner, IElementPointerFactory elementPointerFactory);
    public IPsiModule get_ReferencedModule();
    [CompilerGeneratedAttribute]
public ITypeElement get_Element();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Info.DelegateInfo : TextualInfo {
    [CompilerGeneratedAttribute]
private IDelegate <Delegate>k__BackingField;
    [CompilerGeneratedAttribute]
private ISubstitution <Substitution>k__BackingField;
    public bool IsRiderAsync { get; }
    public IDelegate Delegate { get; }
    public ISubstitution Substitution { get; }
    public DelegateInfo(IDelegate delegate, ISubstitution substitution, string text, string identity);
    public virtual bool get_IsRiderAsync();
    [CompilerGeneratedAttribute]
public IDelegate get_Delegate();
    [CompilerGeneratedAttribute]
public ISubstitution get_Substitution();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Info.ExtensionMethodWithReferenceInfo : DeclaredElementWithReferenceInfo {
    public ExtensionMethodWithReferenceInfo(string shortName, ICollection`1<IMethod> methods, PsiLanguageType languageType, ILookupItemsOwner owner, IElementPointerFactory elementPointerFactory);
}
public enum JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Info.GenerateMemberImplementationKind : Enum {
    public int value__;
    public static GenerateMemberImplementationKind Override;
    public static GenerateMemberImplementationKind Implementation;
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Info.GenerateMemberInfo : DeclaredElementInfo {
    [CompilerGeneratedAttribute]
private string <ModifiersPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private TextLookupRanges <MemberRanges>k__BackingField;
    [CompilerGeneratedAttribute]
private GenerateMemberImplementationKind <ImplementationKind>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasSealedKeyword>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Emphasize>k__BackingField;
    [NotNullAttribute]
public string ModifiersPrefix { get; }
    [NotNullAttribute]
public string TextWithPrefix { get; }
    [NotNullAttribute]
public TextLookupRanges MemberRanges { get; }
    public GenerateMemberImplementationKind ImplementationKind { get; }
    public bool HasSealedKeyword { get; }
    public bool Emphasize { get; public set; }
    [NotNullAttribute]
public string TextToMatch { get; }
    public GenerateMemberInfo(DeclaredElementInstance instance, PsiLanguageType languageType, ILookupItemsOwner owner, IElementPointerFactory elementPointerFactory, string modifiersPrefix, TextLookupRanges memberRanges, GenerateMemberImplementationKind implementationKind, bool hasSealedKeyword);
    [CompilerGeneratedAttribute]
public string get_ModifiersPrefix();
    public string get_TextWithPrefix();
    [CompilerGeneratedAttribute]
public TextLookupRanges get_MemberRanges();
    [CompilerGeneratedAttribute]
public GenerateMemberImplementationKind get_ImplementationKind();
    [CompilerGeneratedAttribute]
public bool get_HasSealedKeyword();
    [CompilerGeneratedAttribute]
public bool get_Emphasize();
    [CompilerGeneratedAttribute]
public void set_Emphasize(bool value);
    public string get_TextToMatch();
    [NotNullAttribute]
[PureAttribute]
private static string GetShortName(IDeclaredElement declaredElement);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Info.MethodsInfo : DeclaredElementInfo {
    [CompilerGeneratedAttribute]
private bool <SkipGenericArguments>k__BackingField;
    public bool SkipGenericArguments { get; public set; }
    [NotNullAttribute]
public IEnumerable`1<InvocationCandidate> Candidates { get; }
    public MethodsInfo(string shortName, IEnumerable`1<DeclaredElementInstance> elements, PsiLanguageType languageType, ILookupItemsOwner owner, IElementPointerFactory elementPointerFactory);
    [CompilerGeneratedAttribute]
public bool get_SkipGenericArguments();
    [CompilerGeneratedAttribute]
public void set_SkipGenericArguments(bool value);
    public virtual IEnumerable`1<InvocationCandidate> get_Candidates();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Info.TextualInfo : BasicInfo {
    private HeadType myHeadType;
    private TailType myTailType;
    private string myInsertText;
    private string myReplaceText;
    private int myReplaceCaretOffset;
    private int myInsertCaretOffset;
    private bool myInsertTextIsErased;
    private bool myReplaceTextIsErased;
    private bool myTailTypeErased;
    [CompilerGeneratedAttribute]
private TextLookupRanges <Ranges>k__BackingField;
    public TextLookupRanges Ranges { get; public set; }
    public HeadType HeadType { get; public set; }
    public TailType TailType { get; public set; }
    public string ReplaceText { get; public set; }
    public string InsertText { get; public set; }
    public int ReplaceCaretOffset { get; public set; }
    public int InsertCaretOffset { get; public set; }
    public bool IsRiderAsync { get; }
    public TextualInfo(string text, string identity);
    [CompilerGeneratedAttribute]
public TextLookupRanges get_Ranges();
    [CompilerGeneratedAttribute]
public void set_Ranges(TextLookupRanges value);
    public HeadType get_HeadType();
    public void set_HeadType(HeadType value);
    public TailType get_TailType();
    public void set_TailType(TailType value);
    public string get_ReplaceText();
    public void set_ReplaceText(string value);
    public string get_InsertText();
    public void set_InsertText(string value);
    public void EraseTailType();
    public void EraseInsertText();
    public void EraseReplaceText();
    public int get_ReplaceCaretOffset();
    public void set_ReplaceCaretOffset(int value);
    public int get_InsertCaretOffset();
    public void set_InsertCaretOffset(int value);
    public virtual string ToString();
    public virtual bool get_IsRiderAsync();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Info.TypeInfo : DeclaredElementInfo {
    [CompilerGeneratedAttribute]
private ITypePointer <TypePointer>k__BackingField;
    public bool IsRiderAsync { get; }
    [NotNullAttribute]
public ITypePointer TypePointer { get; }
    [CanBeNullAttribute]
public ITypeElement DeclaredElement { get; }
    [ItemNotNullAttribute]
[NotNullAttribute]
public IDeclaredElement[] Candidates { get; }
    public DeclaredElementInstance PreferredDeclaredElement { get; }
    public IReadOnlyList`1<DeclaredElementInstance> AllDeclaredElements { get; }
    public IReadOnlyList`1<IElementInstancePointer`1<IDeclaredElement>> DeclaredElementPointers { get; }
    public TypeInfo(IType type, PsiLanguageType languageType, ILookupItemsOwner owner);
    public TypeInfo(string name, IType type, PsiLanguageType languageType, ILookupItemsOwner owner);
    public virtual bool get_IsRiderAsync();
    [CompilerGeneratedAttribute]
public ITypePointer get_TypePointer();
    public ITypeElement get_DeclaredElement();
    public IDeclaredElement[] get_Candidates();
    [CanBeNullAttribute]
private IDeclaredType GetDeclaredType();
    public virtual DeclaredElementInstance get_PreferredDeclaredElement();
    public virtual IReadOnlyList`1<TDeclaredElement> GetDeclaredElements();
    public virtual TDeclaredElement GetDeclaredElement();
    public virtual IReadOnlyList`1<DeclaredElementInstance> get_AllDeclaredElements();
    public virtual IReadOnlyList`1<IElementInstancePointer`1<IDeclaredElement>> get_DeclaredElementPointers();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Matchers.AttributeMatcher : TextualMatcher`1<DeclaredElementInfo> {
    public AttributeMatcher(DeclaredElementInfo info);
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Matchers.CustomizableMatcher`1 : TextualMatcher`1<TInfo> {
    [CanBeNullAttribute]
private Func`2<string, MatchingResult> myFMatch;
    public CustomizableMatcher`1(TInfo info, Func`2<string, MatchingResult> fMatch);
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Matchers.DeclaredElementMatcher : TextualMatcher`1<DeclaredElementInfo> {
    [CanBeNullAttribute]
private string myEscapingPrefix;
    public DeclaredElementMatcher(DeclaredElementInfo info, string escapingPrefix);
    public DeclaredElementMatcher(string customText, DeclaredElementInfo info, string escapingPrefix);
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Matchers.DelegateMatcher : CustomizableMatcher`1<DelegateInfo> {
    public DelegateMatcher(DelegateInfo info);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Matchers.EnumMemberMatcher : DeclaredElementMatcher {
    public EnumMemberMatcher(DeclaredElementInfo info, string escapingPrefix);
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Matchers.TextualMatcher`1 : LookupItemAspect`1<TInfo> {
    [CanBeNullAttribute]
private string myCustomText;
    public string TextToMatch { get; }
    public bool IgnoreSoftOnSpace { get; }
    public TextualMatcher`1(TInfo info);
    public TextualMatcher`1(string customText, TInfo info);
    public sealed virtual string get_TextToMatch();
    public virtual bool get_IgnoreSoftOnSpace();
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Presentations.CreateLocalVariablePresentation : TextualPresentation`1<TypeInfo> {
    private bool myShowType;
    public bool ShowType { get; public set; }
    public CreateLocalVariablePresentation(CreateLocalVariableInfo info, string typeFormat);
    public bool get_ShowType();
    public void set_ShowType(bool value);
    protected virtual RichText GetDisplayName();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Presentations.DeclaredElementPresentation`1 : TextualPresentation`1<TInfo> {
    [NullableAttribute("2")]
private string myAnnotationsText;
    [NullableAttribute("2")]
private string myContainer;
    [NullableAttribute("2")]
private DeclaredElementPresenterMarking myMarking;
    [NullableAttribute("2")]
private string myPresentedName;
    [NullableAttribute("2")]
protected DeclaredElementPresenterStyle myPresenterStyle;
    [NullableAttribute("2")]
private string myTypeName;
    [NullableAttribute("2")]
private string myTypeParametersString;
    [CompilerGeneratedAttribute]
private bool <IsObsolete>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public bool IsObsolete { get; public set; }
    public DeclaredElementPresenterStyle PresenterStyle { get; }
    public string PresentedName { get; public set; }
    [NullableAttribute("2")]
public string Text { get; public set; }
    [NullableAttribute("2")]
public string TypeParametersString { get; }
    public DeclaredElementPresentation`1(RichText customDisplayName, TInfo info, IconId image);
    public DeclaredElementPresentation`1(TInfo info, DeclaredElementPresenterStyle presenterStyle, string typeParametersString, IconId image);
    [CompilerGeneratedAttribute]
public bool get_IsObsolete();
    [CompilerGeneratedAttribute]
public void set_IsObsolete(bool value);
    public virtual DeclaredElementPresenterStyle get_PresenterStyle();
    public string get_PresentedName();
    public void set_PresentedName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Text(string value);
    [NullableContextAttribute("2")]
public string get_TypeParametersString();
    private void Init(DeclaredElementPresenterStyle presenterStyle, string typeParametersString);
    protected void BuildDecoration();
    private static string PresentTypeName(TInfo info, DeclaredElementInstance instance);
    protected void UpdatePresentation();
    protected virtual string GetPresentedName(DeclaredElementInstance instance, DeclaredElementPresenterMarking& marking);
    protected string Replace(string str, TextRange range, string replace);
    protected virtual RichText GetDisplayName();
    [PureAttribute]
private TextRange ParametersInnerRange();
    [NullableContextAttribute("2")]
private string CreateDisplayTypeString();
    protected virtual string BuildDisplayNameText(TextRange& nameRange);
    private void BuildAnnotationsText();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Presentations.DeclaredElementWithReferencePresentation : DeclaredElementPresentation`1<DeclaredElementWithReferenceInfo> {
    public DeclaredElementWithReferencePresentation(DeclaredElementWithReferenceInfo info, DeclaredElementPresenterStyle presenterStyle);
    protected virtual RichText GetDisplayName();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Presentations.ExtensionMethodWithReferencePresentation : MethodsPresentation`1<ExtensionMethodWithReferenceInfo> {
    protected bool AddInformationText { get; }
    public ExtensionMethodWithReferencePresentation(string name, ExtensionMethodWithReferenceInfo info, DeclaredElementPresenterStyle presenterStyle, bool showSignatures, string typeParametersString);
    protected virtual RichText GetDisplayName();
    protected virtual bool get_AddInformationText();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Presentations.IDeclaredElementPresentation {
    [CanBeNullAttribute]
public string Text { get; public set; }
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Presentations.ITextualPresentation {
    public IRangeMarker VisualReplaceRangeMarker { get; public set; }
    public JetRgbaColor TextColor { get; public set; }
    public abstract virtual IRangeMarker get_VisualReplaceRangeMarker();
    public abstract virtual void set_VisualReplaceRangeMarker(IRangeMarker value);
    public abstract virtual JetRgbaColor get_TextColor();
    public abstract virtual void set_TextColor(JetRgbaColor value);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Presentations.MethodsPresentation`1 : DeclaredElementPresentation`1<TInfo> {
    private bool myShowSignatures;
    private string myNamespaceName;
    private IDeclaredElement myDeclaredElement;
    protected bool AddInformationText { get; }
    public MethodsPresentation`1(string name, TInfo info, DeclaredElementPresenterStyle presenterStyle, bool showSignatures, bool extensionMethod, string typeParametersString);
    protected virtual string GetPresentedName(DeclaredElementInstance instance, DeclaredElementPresenterMarking& marking);
    protected virtual RichText GetDisplayName();
    protected virtual bool get_AddInformationText();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Presentations.MissingMemberPresentationBase : DeclaredElementPresentation`1<DeclaredElementInfo> {
    protected string myInterfaceName;
    protected bool myIsExplicitImplementation;
    public MissingMemberPresentationBase(OverridableMemberInstance instance, IDeclaredElement element, bool isExplicitImplementation, DeclaredElementInfo info, DeclaredElementPresenterStyle presenterStyle);
}
public static class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Presentations.PresenterStyles : object {
    [NotNullAttribute]
public static DeclaredElementPresenterStyle DefaultPresenterStyle;
    [NotNullAttribute]
public static DeclaredElementPresenterStyle TypeElementPresenterStyle;
    [NotNullAttribute]
public static DeclaredElementPresenterStyle TypeShortNamePresenterStyle;
    [NotNullAttribute]
public static DeclaredElementPresenterStyle DefaultNoParametersPresenter;
    private static PresenterStyles();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Presentations.TextPresentation`1 : TextualPresentation`1<TInfo> {
    private bool myEmphasize;
    public TextPresentation`1(TInfo info);
    public TextPresentation`1(TInfo info, string typeText, IconId image);
    public TextPresentation`1(TInfo info, IconId image, bool emphasize);
    public TextPresentation`1(RichText customDisplayName, IconId image, TInfo info);
    public TextPresentation`1(TInfo info, string typeText, bool emphasize, IconId image);
    protected virtual RichText GetDisplayName();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Presentations.TextualPresentation`1 : LookupItemAspect`1<TInfo> {
    [CanBeNullAttribute]
protected RichText myDisplayName;
    [CanBeNullAttribute]
protected IconId myImage;
    [CompilerGeneratedAttribute]
private RichText <DisplayTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private JetRgbaColor <TextColor>k__BackingField;
    [CompilerGeneratedAttribute]
private IRangeMarker <VisualReplaceRangeMarker>k__BackingField;
    public IconId Image { get; }
    public RichText DisplayName { get; }
    public RichText DisplayTypeName { get; public set; }
    public bool CanShrink { get; }
    public JetRgbaColor TextColor { get; public set; }
    public IRangeMarker VisualReplaceRangeMarker { get; public set; }
    public TextualPresentation`1(TInfo info, IconId image);
    public TextualPresentation`1(RichText customDisplayName, TInfo info, IconId image);
    public virtual IconId get_Image();
    public sealed virtual RichText get_DisplayName();
    [CompilerGeneratedAttribute]
public sealed virtual RichText get_DisplayTypeName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisplayTypeName(RichText value);
    public virtual DocumentRange GetVisualReplaceRange();
    public sealed virtual bool get_CanShrink();
    public sealed virtual bool Shrink();
    public sealed virtual void Unshrink();
    [CompilerGeneratedAttribute]
public sealed virtual JetRgbaColor get_TextColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TextColor(JetRgbaColor value);
    [CompilerGeneratedAttribute]
public sealed virtual IRangeMarker get_VisualReplaceRangeMarker();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VisualReplaceRangeMarker(IRangeMarker value);
    [NotNullAttribute]
protected virtual RichText GetDisplayName();
    protected void Invalidate();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Presentations.TypePresentation : TextualPresentation`1<TypeInfo> {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public IconId Image { get; }
    public string Text { get; public set; }
    public TypePresentation(TypeInfo info);
    public virtual IconId get_Image();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Text(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.Presentations.TypeUnificationRewriter : TypeRewriterBase`1<IType> {
    [CompilerGeneratedAttribute]
private static TypeUnificationRewriter <Instance>k__BackingField;
    public static TypeUnificationRewriter Instance { get; }
    private static TypeUnificationRewriter();
    [CompilerGeneratedAttribute]
public static TypeUnificationRewriter get_Instance();
    public virtual IType VisitDeclaredType(IDeclaredType leftDeclaredType, IType rightType);
    public virtual IType VisitArrayType(IArrayType leftArrayType, IType rightType);
    public virtual IType VisitPointerType(IPointerType leftPointerType, IType rightType);
    public virtual IType VisitMultitype(IMultitype leftMultitype, IType rightType);
    [PureAttribute]
private static TypeDecorationSet UnifyDecorations(TypeDecorationSet leftSet, TypeDecorationSet rightSet);
    [PureAttribute]
private static TupleTypeDecoration UnifyTupleTypeDecoration(TupleTypeDecoration leftTupleTypeDecoration, TupleTypeDecoration rightTupleTypeDecoration);
    [CompilerGeneratedAttribute]
internal static IDeclaredType <VisitDeclaredType>g__TryUnifyNonGenericAndGeneric|4_0(IDeclaredType nonGenericType, IDeclaredType genericType);
    [CompilerGeneratedAttribute]
internal static IDeclaredType <VisitDeclaredType>g__TryUnifyDifferentTupleTypes|4_1(IDeclaredType leftDeclaredType, IDeclaredType rightDeclaredType);
    [CompilerGeneratedAttribute]
internal static IDeclaredType <VisitDeclaredType>g__TryUnifyDifferentTypeArgumentCount|4_2(IDeclaredType lessDeclaredType, IDeclaredType moreDeclaredType);
    [CompilerGeneratedAttribute]
internal static IDeclaredType <VisitDeclaredType>g__TryUnifyNullableAndUnlifted|4_3(IDeclaredType nullableDeclaredType, IDeclaredType notNullableDeclaredType);
    [CompilerGeneratedAttribute]
internal static ISubstitution <VisitDeclaredType>g__UnifySubstitutions|4_4(IDeclaredType leftDeclaredType, IDeclaredType rightDeclaredType);
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ClrSpecificCodeCompletionContext : SpecificCodeCompletionContext {
    [CompilerGeneratedAttribute]
private IPsiModule <PsiModule>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNode <NodeInFile>k__BackingField;
    public IPsiModule PsiModule { get; }
    [NotNullAttribute]
public ITreeNode NodeInFile { get; }
    protected ClrSpecificCodeCompletionContext(CodeCompletionContext context, IPsiModule psiModule, ITreeNode nodeInFile);
    [CompilerGeneratedAttribute]
public sealed virtual IPsiModule get_PsiModule();
    [CompilerGeneratedAttribute]
public sealed virtual ITreeNode get_NodeInFile();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.CodeCompletionContext : UserDataHolder {
    [CompilerGeneratedAttribute]
private IContextBoundSettingsStore <ContextBoundSettingsStore>k__BackingField;
    [CompilerGeneratedAttribute]
private ILookupItemsOwner <LookupItemsOwner>k__BackingField;
    [CompilerGeneratedAttribute]
private ILanguageManager <LanguageManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IntellisenseManager <IntellisenseManager>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeCompletionType <CodeCompletionType>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeCompletionParameters <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiServices <PsiServices>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextControl <TextControl>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiSourceFile <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private IFile <File>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentifierMatchingStyle <IdentifierMatchingStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentOffset <CaretDocumentOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentOffset <EffectiveCaretDocumentOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeOffset <CaretTreeOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeTextRange <SelectedTreeRange>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <SelectedRange>k__BackingField;
    [CompilerGeneratedAttribute]
private EditorBrowsableProcessingType <EditorBrowsableProcessing>k__BackingField;
    [CompilerGeneratedAttribute]
private ParenthesesInsertType <ParenthesesInsertType>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaredElementDescriptionPresenter <DeclaredElementDescriptionPresenter>k__BackingField;
    [CompilerGeneratedAttribute]
private PsiIconManager <PsiIconManager>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowSignatures>k__BackingField;
    [CompilerGeneratedAttribute]
private LookupListSorting <LookupListSorting>k__BackingField;
    [CanBeNullAttribute]
private INamingPolicyProvider myNamingPolicyProvider;
    [CompilerGeneratedAttribute]
private IDeclaredElementPresenter <DeclaredElementPresenter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSelectionDisjoint>k__BackingField;
    [NotNullAttribute]
public IContextBoundSettingsStore ContextBoundSettingsStore { get; }
    public ILookupItemsOwner LookupItemsOwner { get; }
    public ILanguageManager LanguageManager { get; }
    public IntellisenseManager IntellisenseManager { get; }
    public CodeCompletionType CodeCompletionType { get; }
    [NotNullAttribute]
public CodeCompletionParameters Parameters { get; }
    [NotNullAttribute]
public ISolution Solution { get; }
    [NotNullAttribute]
public IPsiServices PsiServices { get; }
    [NotNullAttribute]
public ITextControl TextControl { get; }
    public IPsiSourceFile SourceFile { get; }
    [NotNullAttribute]
public IFile File { get; }
    public IdentifierMatchingStyle IdentifierMatchingStyle { get; }
    public DocumentOffset CaretDocumentOffset { get; }
    public DocumentOffset EffectiveCaretDocumentOffset { get; }
    public TreeOffset CaretTreeOffset { get; }
    public TreeTextRange SelectedTreeRange { get; }
    public DocumentRange SelectedRange { get; }
    public EditorBrowsableProcessingType EditorBrowsableProcessing { get; }
    public ParenthesesInsertType ParenthesesInsertType { get; }
    [NotNullAttribute]
public IDocument Document { get; }
    public IDeclaredElementDescriptionPresenter DeclaredElementDescriptionPresenter { get; }
    public PsiIconManager PsiIconManager { get; }
    [NotNullAttribute]
public PsiLanguageType Language { get; }
    public bool ShowSignatures { get; }
    public LookupListSorting LookupListSorting { get; }
    public IDeclaredElementPresenter DeclaredElementPresenter { get; }
    public bool IsSelectionDisjoint { get; }
    [NotNullAttribute]
public INamingPolicyProvider NamingPolicyProvider { get; }
    public CodeCompletionContext(IntellisenseManager intellisenseManager, CodeCompletionParameters parameters, ITextControl textControl, IPsiSourceFile sourceFile, IFile file, DocumentOffset caretDocumentOffset, TreeOffset caretTreeRange, TreeTextRange selectedTreeRange, DocumentRange selectedRange, ILanguageManager languageManager, LookupItemsOwnerFactory lookupItemsOwnerFactory);
    [CompilerGeneratedAttribute]
public IContextBoundSettingsStore get_ContextBoundSettingsStore();
    [CompilerGeneratedAttribute]
public ILookupItemsOwner get_LookupItemsOwner();
    [CompilerGeneratedAttribute]
public ILanguageManager get_LanguageManager();
    [CompilerGeneratedAttribute]
public IntellisenseManager get_IntellisenseManager();
    [CompilerGeneratedAttribute]
public CodeCompletionType get_CodeCompletionType();
    [CompilerGeneratedAttribute]
public CodeCompletionParameters get_Parameters();
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    [CompilerGeneratedAttribute]
public IPsiServices get_PsiServices();
    [CompilerGeneratedAttribute]
public ITextControl get_TextControl();
    [CompilerGeneratedAttribute]
public IPsiSourceFile get_SourceFile();
    [CompilerGeneratedAttribute]
public IFile get_File();
    [CompilerGeneratedAttribute]
public IdentifierMatchingStyle get_IdentifierMatchingStyle();
    [CompilerGeneratedAttribute]
public DocumentOffset get_CaretDocumentOffset();
    [CompilerGeneratedAttribute]
public DocumentOffset get_EffectiveCaretDocumentOffset();
    [CompilerGeneratedAttribute]
public TreeOffset get_CaretTreeOffset();
    [CompilerGeneratedAttribute]
public TreeTextRange get_SelectedTreeRange();
    [CompilerGeneratedAttribute]
public DocumentRange get_SelectedRange();
    [CompilerGeneratedAttribute]
public EditorBrowsableProcessingType get_EditorBrowsableProcessing();
    [CompilerGeneratedAttribute]
public ParenthesesInsertType get_ParenthesesInsertType();
    public IDocument get_Document();
    [CompilerGeneratedAttribute]
public IDeclaredElementDescriptionPresenter get_DeclaredElementDescriptionPresenter();
    [CompilerGeneratedAttribute]
public PsiIconManager get_PsiIconManager();
    public PsiLanguageType get_Language();
    [CompilerGeneratedAttribute]
public bool get_ShowSignatures();
    [CompilerGeneratedAttribute]
public LookupListSorting get_LookupListSorting();
    [CompilerGeneratedAttribute]
public IDeclaredElementPresenter get_DeclaredElementPresenter();
    [CompilerGeneratedAttribute]
public bool get_IsSelectionDisjoint();
    public INamingPolicyProvider get_NamingPolicyProvider();
    [NotNullAttribute]
[PureAttribute]
public IItemsCollector CreateCollector();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.CompletingCharsProviderBase`1 : object {
    private sealed virtual override CompletionAction JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ICompletingCharsProvider.IsCharacterAcceptable(char c, ISpecificCodeCompletionContext context, IContextBoundSettingsStore settingsStore);
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ICompletingCharsProvider.IsApplicable(ISpecificCodeCompletionContext context);
    protected virtual CompletionAction IsCharacterAcceptable(char c, TContext context, IContextBoundSettingsStore settingsStore);
    protected virtual LookupItemInsertType GetEnterAction(TContext context, IContextBoundSettingsStore settingsStore);
    protected virtual LookupItemInsertType GetTabAction(TContext context, IContextBoundSettingsStore settingsStore);
    protected abstract virtual bool IsApplicable(TContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.CompletingCharsProviderWithSetting`2 : CompletingCharsProviderBase`1<TContext> {
    protected virtual CompletionAction IsCharacterAcceptable(char c, TContext context, IContextBoundSettingsStore settingsStore);
    protected abstract virtual Expression`1<Func`2<TSettingKey, bool>> GetCompleteOnSpaceSettingKey();
    protected abstract virtual Expression`1<Func`2<TSettingKey, string>> GetNonCompletingCharactersSettingKey();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.CompletingCharsProviderWithSettingOther`1 : CompletingCharsProviderWithSetting`2<TContext, IntelliSenseCompletingCharactersSettingsKey> {
    protected virtual Expression`1<Func`2<IntelliSenseCompletingCharactersSettingsKey, bool>> GetCompleteOnSpaceSettingKey();
    protected virtual Expression`1<Func`2<IntelliSenseCompletingCharactersSettingsKey, string>> GetNonCompletingCharactersSettingKey();
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.CompletionMode : Enum {
    public byte value__;
    public static CompletionMode Single;
    public static CompletionMode Multiple;
    public static CompletionMode All;
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.DeclaredElementsOrPointers : ValueType {
    [CanBeNullAttribute]
private object myData;
    public static DeclaredElementsOrPointers Empty;
    public bool IsEmpty { get; }
    public DeclaredElementsOrPointers(IDeclaredElement declaredElement);
    public DeclaredElementsOrPointers(DeclaredElementInstance instance);
    public DeclaredElementsOrPointers(IElementInstancePointer`1<IDeclaredElement> pointer);
    private DeclaredElementsOrPointers(IManyElements manyElements);
    private static DeclaredElementsOrPointers();
    public bool get_IsEmpty();
    [CanBeNullAttribute]
public TDeclaredElement GetPreferredDeclaredElement(IPsiSourceFile sourceFile);
    [CanBeNullAttribute]
public DeclaredElementInstance GetPreferredDeclaredElementInstance(IPsiSourceFile sourceFile);
    [NotNullAttribute]
[PureAttribute]
public IReadOnlyList`1<TDeclaredElement> GetPreferredDeclaredElements(IPsiSourceFile sourceFile);
    [NotNullAttribute]
[PureAttribute]
public IReadOnlyList`1<DeclaredElementInstance> GetPreferredDeclaredElementInstances(IPsiSourceFile sourceFile);
    [NotNullAttribute]
[PureAttribute]
private IElementInstancePointer`1<IDeclaredElement> ToPointer();
    [NotNullAttribute]
[PureAttribute]
public IReadOnlyList`1<IElementInstancePointer`1<IDeclaredElement>> ToPointers();
    [PureAttribute]
public static DeclaredElementsOrPointers Create(IElementPointerFactory pointerFactory, IReadOnlyList`1<IDeclaredElement> declaredElements);
    [PureAttribute]
public static DeclaredElementsOrPointers Create(IElementPointerFactory pointerFactory, IReadOnlyList`1<DeclaredElementInstance> instances);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.DefaultElementPointerFactory : object {
    [NotNullAttribute]
public static IElementPointerFactory Instance;
    private static DefaultElementPointerFactory();
    public sealed virtual IElementInstancePointer`1<IDeclaredElement> CreateElementPointer(DeclaredElementInstance`1<IDeclaredElement> instance);
    public sealed virtual DeclaredElementsOrPointers CreatePointer(IDeclaredElement declaredElement);
    public sealed virtual DeclaredElementsOrPointers CreatePointer(DeclaredElementInstance instance);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ExpectedTypeCompletionContextBase : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ExpectedType> <ExpectedTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ExpectedIType> <ExpectedITypes>k__BackingField;
    public IReadOnlyList`1<ExpectedType> ExpectedTypes { get; }
    public IReadOnlyList`1<ExpectedIType> ExpectedITypes { get; }
    public ExpectedTypeCompletionContextBase(IReadOnlyList`1<ExpectedType> expectedTypes, CodeCompletionContext context);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ExpectedType> get_ExpectedTypes();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ExpectedIType> get_ExpectedITypes();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CLRFilters.AccessRightsCompletionListFilter`1 : CompletionListFilterBase`2<TContext, ILookupItem> {
    protected AccessRights AccessRights { get; }
    protected AccessRightsCompletionListFilter`1(ISettingsStore store);
    protected abstract virtual AccessRights get_AccessRights();
    protected virtual bool IsAvailable(TContext specificContext, IItemsCollector collector, CompletionListFilterAvailabilityCache cache);
    protected virtual bool Accepts(ILookupItem specificItem);
    public virtual IconId GetImage(ISolution solution);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CLRFilters.ClassFilter`1 : CompletionListDeclaredElementTypeFilter`2<TContext, IClass> {
    public string ActionId { get; }
    public string Text { get; }
    public double Order { get; }
    protected ClassFilter`1(ISettingsStore store);
    public virtual string get_ActionId();
    public virtual string get_Text();
    public virtual IconId GetImage(ISolution solution);
    public virtual double get_Order();
}
public static class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CLRFilters.CLRFiltersOrder : object {
    public static double Namespace;
    public static double Class;
    public static double Interface;
    public static double Struct;
    public static double Enum;
    public static double Delegate;
    public static double Field;
    public static double Property;
    public static double Method;
    public static double ExtensionMethod;
    public static double Event;
    public static double LocalVariable;
    public static double Parameter;
    public static double PublicSymbols;
    public static double InternalSymbols;
    public static double ProtectedSymbols;
    public static double PrivateSymbols;
    public static double Keywords;
    public static double Templates;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CLRFilters.DelegateFilter`1 : CompletionListDeclaredElementTypeFilter`2<TContext, IDelegate> {
    public string ActionId { get; }
    public string Text { get; }
    public double Order { get; }
    protected DelegateFilter`1(ISettingsStore store);
    public virtual string get_ActionId();
    public virtual string get_Text();
    public virtual IconId GetImage(ISolution solution);
    public virtual double get_Order();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CLRFilters.EnumFilter`1 : CompletionListDeclaredElementTypeFilter`2<TContext, IEnum> {
    public string ActionId { get; }
    public string Text { get; }
    public double Order { get; }
    protected EnumFilter`1(ISettingsStore store);
    public virtual string get_ActionId();
    public virtual string get_Text();
    public virtual IconId GetImage(ISolution solution);
    public virtual double get_Order();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CLRFilters.EventsFilter`1 : CompletionListDeclaredElementTypeFilter`2<TContext, IEvent> {
    public string Text { get; }
    public string ActionId { get; }
    public double Order { get; }
    protected EventsFilter`1(ISettingsStore store);
    public virtual string get_Text();
    public virtual string get_ActionId();
    public virtual IconId GetImage(ISolution solution);
    public virtual double get_Order();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CLRFilters.FieldsFilter`1 : CompletionListDeclaredElementTypeFilter`2<TContext, IField> {
    public string Text { get; }
    public string ActionId { get; }
    public double Order { get; }
    protected FieldsFilter`1(ISettingsStore store);
    public virtual string get_Text();
    public virtual string get_ActionId();
    public virtual IconId GetImage(ISolution solution);
    public virtual double get_Order();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CLRFilters.InterfaceFilter`1 : CompletionListDeclaredElementTypeFilter`2<TContext, IInterface> {
    public string ActionId { get; }
    public string Text { get; }
    public double Order { get; }
    protected InterfaceFilter`1(ISettingsStore store);
    public virtual string get_ActionId();
    public virtual string get_Text();
    public virtual IconId GetImage(ISolution solution);
    public virtual double get_Order();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CLRFilters.InternalFilter`1 : AccessRightsCompletionListFilter`1<TContext> {
    public string ActionId { get; }
    public string Text { get; }
    protected AccessRights AccessRights { get; }
    public double Order { get; }
    protected InternalFilter`1(ISettingsStore store);
    public virtual string get_ActionId();
    public virtual string get_Text();
    protected virtual AccessRights get_AccessRights();
    public virtual double get_Order();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CLRFilters.LocalVariablesFilter`1 : CompletionListDeclaredElementTypeFilter`2<TContext, ILocalVariable> {
    public string ActionId { get; }
    public string Text { get; }
    public double Order { get; }
    protected LocalVariablesFilter`1(ISettingsStore store);
    public virtual string get_ActionId();
    public virtual string get_Text();
    public virtual IconId GetImage(ISolution solution);
    public virtual double get_Order();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CLRFilters.MethodsFilter`1 : CompletionListDeclaredElementTypeFilter`2<TContext, IMethod> {
    public string Text { get; }
    public string ActionId { get; }
    public double Order { get; }
    protected MethodsFilter`1(ISettingsStore store);
    public virtual string get_Text();
    public virtual string get_ActionId();
    public virtual IconId GetImage(ISolution solution);
    public virtual double get_Order();
    protected virtual bool Accepts(ILookupItem specificItem);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CLRFilters.NamespaceFilter`1 : CompletionListDeclaredElementTypeFilter`2<TContext, INamespace> {
    public string ActionId { get; }
    public string Text { get; }
    public double Order { get; }
    protected NamespaceFilter`1(ISettingsStore store);
    public virtual string get_ActionId();
    public virtual string get_Text();
    public virtual IconId GetImage(ISolution solution);
    public virtual double get_Order();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CLRFilters.ParameterFilter`1 : CompletionListDeclaredElementTypeFilter`2<TContext, IParameter> {
    public string ActionId { get; }
    public string Text { get; }
    public double Order { get; }
    protected ParameterFilter`1(ISettingsStore store);
    public virtual string get_ActionId();
    public virtual string get_Text();
    public virtual IconId GetImage(ISolution solution);
    public virtual double get_Order();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CLRFilters.PrivateFilter`1 : AccessRightsCompletionListFilter`1<TContext> {
    public string ActionId { get; }
    public string Text { get; }
    protected AccessRights AccessRights { get; }
    public double Order { get; }
    protected PrivateFilter`1(ISettingsStore store);
    public virtual string get_ActionId();
    public virtual string get_Text();
    protected virtual AccessRights get_AccessRights();
    public virtual double get_Order();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CLRFilters.PropertyFilter`1 : CompletionListDeclaredElementTypeFilter`2<TContext, IProperty> {
    public string Text { get; }
    public string ActionId { get; }
    public double Order { get; }
    protected PropertyFilter`1(ISettingsStore store);
    public virtual string get_Text();
    public virtual string get_ActionId();
    public virtual IconId GetImage(ISolution solution);
    public virtual double get_Order();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CLRFilters.ProtectedFilter`1 : AccessRightsCompletionListFilter`1<TContext> {
    public string ActionId { get; }
    public string Text { get; }
    protected AccessRights AccessRights { get; }
    public double Order { get; }
    protected ProtectedFilter`1(ISettingsStore store);
    public virtual string get_ActionId();
    public virtual string get_Text();
    protected virtual AccessRights get_AccessRights();
    public virtual double get_Order();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CLRFilters.PublicFilter`1 : AccessRightsCompletionListFilter`1<TContext> {
    public string ActionId { get; }
    public string Text { get; }
    protected AccessRights AccessRights { get; }
    public double Order { get; }
    protected PublicFilter`1(ISettingsStore store);
    public virtual string get_ActionId();
    public virtual string get_Text();
    protected virtual AccessRights get_AccessRights();
    public virtual double get_Order();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CLRFilters.StructFilter`1 : CompletionListDeclaredElementTypeFilter`2<TContext, IStruct> {
    public string ActionId { get; }
    public string Text { get; }
    public double Order { get; }
    protected StructFilter`1(ISettingsStore store);
    public virtual string get_ActionId();
    public virtual string get_Text();
    public virtual IconId GetImage(ISolution solution);
    public virtual double get_Order();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CompletionListDeclaredElementTypeFilter`2 : CompletionListFilterBase`2<TContext, ILookupItem> {
    protected CompletionListDeclaredElementTypeFilter`2(ISettingsStore store);
    protected virtual bool IsAvailable(TContext specificContext, IItemsCollector collector, CompletionListFilterAvailabilityCache cache);
    protected virtual bool Accepts(ILookupItem specificItem);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CompletionListFilterAvailabilityCache : object {
    [NotNullAttribute]
public static Key AppendImportKinds;
    [CompilerGeneratedAttribute]
private HashSet`1<Type> <DeclaredElementTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<AccessRights> <AccessRightsTypes>k__BackingField;
    public HashSet`1<Type> DeclaredElementTypes { get; }
    public HashSet`1<AccessRights> AccessRightsTypes { get; }
    public CompletionListFilterAvailabilityCache(IItemsCollector collector, CodeCompletionContext basicContext);
    private static CompletionListFilterAvailabilityCache();
    [CompilerGeneratedAttribute]
public HashSet`1<Type> get_DeclaredElementTypes();
    [CompilerGeneratedAttribute]
public HashSet`1<AccessRights> get_AccessRightsTypes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CompletionListFilterBase`2 : object {
    [CompilerGeneratedAttribute]
private ISettingsStore <store>P;
    [NullableAttribute("2")]
private SettingsScalarEntry mySettingsEntry;
    private Nullable`1<CompletionListFilterState> myState;
    protected CompletionListFilterState DefaultState { get; }
    public string Text { get; }
    public CompletionListFilterState State { get; public set; }
    public string ActionId { get; }
    public double Order { get; }
    protected CompletionListFilterBase`2(ISettingsStore store);
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.ICompletionListFilter.IsAvailable(ISpecificCodeCompletionContext context, IItemsCollector collector, CompletionListFilterAvailabilityCache cache);
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.ICompletionListFilter.Accepts(ILookupItem item);
    protected virtual CompletionListFilterState get_DefaultState();
    public virtual string get_Text();
    public sealed virtual CompletionListFilterState get_State();
    public sealed virtual void set_State(CompletionListFilterState value);
    public sealed virtual CompletionListFilterState GetState(IContextBoundSettingsStore settingsStore);
    public sealed virtual void RefreshState();
    [ObsoleteAttribute]
private IContextBoundSettingsStore GetBoundSettingsStore();
    public void StoreState(IContextBoundSettingsStore settingsStore);
    protected abstract virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
    private SettingsScalarEntry GetSettingsEntry(ISettingsStore settingsStore);
    public abstract virtual string get_ActionId();
    public virtual double get_Order();
    public virtual IconId GetImage(ISolution solution);
    protected virtual bool IsAvailable(TContext specificContext, IItemsCollector collector, CompletionListFilterAvailabilityCache cache);
    protected virtual bool Accepts(TLookupItem specificItem);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
}
public enum JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CompletionListFilterState : Enum {
    public int value__;
    public static CompletionListFilterState Off;
    public static CompletionListFilterState Include;
    public static CompletionListFilterState Exclude;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CompletionListKeywordFilter`1 : CompletionListFilterBase`2<TContext, ILookupItem> {
    public string ActionId { get; }
    public string Text { get; }
    public double Order { get; }
    protected CompletionListKeywordFilter`1(ISettingsStore store);
    public virtual string get_ActionId();
    public virtual string get_Text();
    public virtual IconId GetImage(ISolution solution);
    public virtual double get_Order();
    protected virtual bool IsAvailable(TContext specificContext, IItemsCollector collector, CompletionListFilterAvailabilityCache cache);
    protected virtual bool Accepts(ILookupItem item);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CustomFilters.AggregateCompletionListFilter : CompletionListFilterBase`2<ISpecificCodeCompletionContext, ILookupItem> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyList`1<ICustomCompletionFilter> myFilters;
    public string ActionId { get; }
    protected CompletionListFilterState DefaultState { get; }
    public AggregateCompletionListFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
    public virtual string get_ActionId();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private IReadOnlyList`1<ICustomCompletionFilter> GetCustomCompletionFilters();
    protected virtual bool IsAvailable(ISpecificCodeCompletionContext specificContext, IItemsCollector collector, CompletionListFilterAvailabilityCache cache);
    protected virtual bool Accepts(ILookupItem specificItem);
    protected virtual CompletionListFilterState get_DefaultState();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <GetCustomCompletionFilters>b__7_0(AddRemoveEventArgs`1<ICustomCompletionFilter> _);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntellisenseSettingsKey", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "AggregateFilterStateSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CustomFilters.AggregateFilterStateKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "CustomFilterStateSettingDescription")]
public CompletionListFilterState AggregateFilterState;
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CustomFilters.CustomFilterConfigurationPage : UserControl {
    private bool myIsOkButtonEnabled;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public ICustomCompletionFilter Filter { get; }
    public bool IsOkButtonEnabled { get; public set; }
    public virtual ICustomCompletionFilter get_Filter();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
    public bool get_IsOkButtonEnabled();
    public void set_IsOkButtonEnabled(bool value);
    public virtual bool Validate();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CustomFilters.ICustomCompletionFilter {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual bool Matches(IDeclaredElement declaredElement);
    public abstract virtual void PersistToXml(XmlDocument doc, XmlElement element);
    public abstract virtual void RestoreFromXml(XmlElement element);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.CustomFilters.ICustomFilterFactory {
    public string Name { get; }
    public ICollectionEvents`1<ICustomCompletionFilter> Filters { get; }
    public abstract virtual string get_Name();
    public abstract virtual ICustomCompletionFilter CreateNewFilter();
    public abstract virtual ICollectionEvents`1<ICustomCompletionFilter> get_Filters();
    public abstract virtual CustomFilterConfigurationPage CreateConfigurationPage(ICustomCompletionFilter filter);
    public abstract virtual ICollectionEvents`1<ICustomCompletionFilter> GetFiltersFromSettingsStore(Lifetime lifetime, IContextBoundSettingsStoreLive settingsStore, IThreading threading);
    public abstract virtual Control CreateDisplayControl(ICustomCompletionFilter filter);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.ExcludeFilter : object {
    private HashSet`1<IDeclaredElement> myElements;
    public ResolveErrorType ErrorType { get; }
    public FilterRunType RunType { get; }
    public ExcludeFilter(ISymbolTable completionSymbolTable);
    public sealed virtual bool TryFilterToDestination(List`1<ISymbolInfo> source, List`1<ISymbolInfo> destination);
    public sealed virtual ResolveErrorType get_ErrorType();
    public sealed virtual FilterRunType get_RunType();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.FilterIds : object {
    public static string Fields;
    public static string FieldsInvert;
    public static string Events;
    public static string EventsInvert;
    public static string Properties;
    public static string PropertiesInvert;
    public static string Methods;
    public static string MethodsInvert;
    public static string ExtensionMethods;
    public static string ExtensionMethodsInvert;
    public static string Structs;
    public static string StructsInvert;
    public static string Classes;
    public static string ClassesInvert;
    public static string Enums;
    public static string EnumsInvert;
    public static string Interfaces;
    public static string InterfacesInvert;
    public static string Namespaces;
    public static string NamespacesInvert;
    public static string Delegates;
    public static string DelegatesInvert;
    public static string LocalVariables;
    public static string LocalVariablesInvert;
    public static string Parameters;
    public static string ParametersInvert;
    public static string Public;
    public static string PublicInvert;
    public static string Internal;
    public static string InternalInvert;
    public static string Protected;
    public static string ProtectedInvert;
    public static string Private;
    public static string PrivateInvert;
    public static string Keyword;
    public static string KeywordInvert;
    public static string Aggregate;
    public static string AggregateInvert;
    public static string Templates;
    public static string TemplatesInvert;
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CodeCompletionSettingsKey", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterStateSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.FilterStateSettingsKey : object {
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.IAggregateCompletionListFilter {
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.ICompletionListFilter {
    public string Text { get; }
    [ObsoleteAttribute]
public CompletionListFilterState State { get; public set; }
    public string ActionId { get; }
    public double Order { get; }
    public abstract virtual bool IsAvailable(ISpecificCodeCompletionContext context, IItemsCollector collector, CompletionListFilterAvailabilityCache cache);
    public abstract virtual bool Accepts(ILookupItem item);
    public abstract virtual void RefreshState();
    public abstract virtual string get_Text();
    public abstract virtual CompletionListFilterState get_State();
    public abstract virtual void set_State(CompletionListFilterState value);
    [PureAttribute]
public abstract virtual CompletionListFilterState GetState(IContextBoundSettingsStore settingsStore);
    public abstract virtual IconId GetImage(ISolution solution);
    public abstract virtual string get_ActionId();
    public abstract virtual double get_Order();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.IClrSpecificCodeCompletionContext {
    public IPsiModule PsiModule { get; }
    public ITreeNode NodeInFile { get; }
    public abstract virtual IPsiModule get_PsiModule();
    public abstract virtual ITreeNode get_NodeInFile();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ICodeCompletionContextProvider {
    public abstract virtual bool IsApplicable(CodeCompletionContext context);
    [CanBeNullAttribute]
public abstract virtual ISpecificCodeCompletionContext GetCompletionContext(CodeCompletionContext createCodeCompletionContext);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ICodeCompletionItemsProvider {
    public bool IsDynamic { get; }
    public bool IsFinal { get; }
    public CompletionMode SupportedCompletionMode { get; }
    public EvaluationMode SupportedEvaluationMode { get; }
    [CanBeNullAttribute]
public abstract virtual object IsAvailable(ISpecificCodeCompletionContext context);
    [CanBeNullAttribute]
public abstract virtual TextLookupRanges GetDefaultRanges(ISpecificCodeCompletionContext context);
    public abstract virtual bool AddLookupItems(ISpecificCodeCompletionContext context, IItemsCollector collector, object data);
    public abstract virtual void TransformItems(ISpecificCodeCompletionContext context, IItemsCollector collector, object data);
    public abstract virtual void DecorateItems(ISpecificCodeCompletionContext context, IReadOnlyCollection`1<ILookupItem> items, object data);
    public abstract virtual LookupFocusBehaviour GetLookupFocusBehaviour(ISpecificCodeCompletionContext context, object data);
    public abstract virtual AutocompletionBehaviour GetAutocompletionBehaviour(ISpecificCodeCompletionContext context, object data);
    public abstract virtual bool get_IsDynamic();
    public abstract virtual bool get_IsFinal();
    public abstract virtual CompletionMode get_SupportedCompletionMode();
    public abstract virtual EvaluationMode get_SupportedEvaluationMode();
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ICompletingCharsProvider {
    [PureAttribute]
public abstract virtual bool IsApplicable(ISpecificCodeCompletionContext context);
    [PureAttribute]
public abstract virtual CompletionAction IsCharacterAcceptable(char c, ISpecificCodeCompletionContext context, IContextBoundSettingsStore settingsStore);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ICompletionRangesProvider {
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.IElementPointerFactory {
    [NotNullAttribute]
[PureAttribute]
public abstract virtual IElementInstancePointer`1<IDeclaredElement> CreateElementPointer(DeclaredElementInstance`1<IDeclaredElement> instance);
    [PureAttribute]
public abstract virtual DeclaredElementsOrPointers CreatePointer(IDeclaredElement declaredElement);
    [PureAttribute]
public abstract virtual DeclaredElementsOrPointers CreatePointer(DeclaredElementInstance instance);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ILookupItemPresenter {
    public abstract virtual RichTextBlock TryGetAdditionalDescription(ILookupItem lookupItem);
    [PureAttribute]
public abstract virtual RichTextBlock TryPresentSummary(IDeclaredElement declaredElement, ISubstitution substitution, ILookupItem lookupItem, ISolution solution, IContextBoundSettingsStore settingsStore, DeclaredElementDescriptionStyle descriptionStyle);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
[ComponentInstantiationAttribute("-32758")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.IntellisensePartAttribute : ComponentAttribute {
    public IntellisensePartAttribute(Instantiation instantiation);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.IntellisensePartsContainer : object {
    private IComponentContainer myContainer;
    public IntellisensePartsContainer(NestedComponentContainerAllByPartAttribute`2<IntellisensePartAttribute, ShellPartCatalogSet> nestedComponentContainer);
    public IEnumerable`1<T> GetParts();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.IQualifiableCodeCompletionContext {
    public bool IsQualified { get; }
    public abstract virtual bool get_IsQualified();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ISpecificCodeCompletionContext {
    [NotNullAttribute]
public CodeCompletionContext BasicContext { get; }
    public string ContextId { get; }
    public PsiLanguageType Language { get; }
    public abstract virtual CodeCompletionContext get_BasicContext();
    public abstract virtual string get_ContextId();
    public abstract virtual PsiLanguageType get_Language();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ISpecificCompletionSorter {
    [NotNullAttribute]
[PureAttribute]
public abstract virtual IEnumerable`1<MatchedLookupItem> SortInplace(List`1<MatchedLookupItem> matchedItems, ICompletionStatisticsManager statisticsManager);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ItemsProviderOfSpecificContext`1 : object {
    public bool IsDynamic { get; }
    public bool IsFinal { get; }
    public CompletionMode SupportedCompletionMode { get; }
    public EvaluationMode SupportedEvaluationMode { get; }
    [DebuggerStepThroughAttribute]
private sealed virtual override TextLookupRanges JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ICodeCompletionItemsProvider.GetDefaultRanges(ISpecificCodeCompletionContext context);
    [DebuggerStepThroughAttribute]
private sealed virtual override object JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ICodeCompletionItemsProvider.IsAvailable(ISpecificCodeCompletionContext context);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ICodeCompletionItemsProvider.AddLookupItems(ISpecificCodeCompletionContext context, IItemsCollector collector, object data);
    [DebuggerStepThroughAttribute]
private sealed virtual override void JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ICodeCompletionItemsProvider.TransformItems(ISpecificCodeCompletionContext context, IItemsCollector collector, object data);
    [DebuggerStepThroughAttribute]
private sealed virtual override void JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ICodeCompletionItemsProvider.DecorateItems(ISpecificCodeCompletionContext context, IReadOnlyCollection`1<ILookupItem> items, object data);
    [DebuggerStepThroughAttribute]
private sealed virtual override LookupFocusBehaviour JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ICodeCompletionItemsProvider.GetLookupFocusBehaviour(ISpecificCodeCompletionContext context, object data);
    [DebuggerStepThroughAttribute]
private sealed virtual override AutocompletionBehaviour JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ICodeCompletionItemsProvider.GetAutocompletionBehaviour(ISpecificCodeCompletionContext context, object data);
    protected virtual AutocompletionBehaviour GetAutocompletionBehaviour(TContext specificContext);
    public virtual bool get_IsDynamic();
    public virtual bool get_IsFinal();
    public virtual CompletionMode get_SupportedCompletionMode();
    public virtual EvaluationMode get_SupportedEvaluationMode();
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(TContext context);
    protected virtual bool IsAvailable(TContext context);
    protected virtual void TransformItems(TContext context, IItemsCollector collector);
    protected virtual bool AddLookupItems(TContext context, IItemsCollector collector);
    protected virtual void DecorateItems(TContext context, IReadOnlyCollection`1<ILookupItem> items);
    [CanBeNullAttribute]
protected virtual TextLookupRanges GetDefaultRanges(TContext context);
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ItemsProviderOfSpecificContextWithSharedData`2 : object {
    public bool IsDynamic { get; }
    public bool IsFinal { get; }
    public CompletionMode SupportedCompletionMode { get; }
    public EvaluationMode SupportedEvaluationMode { get; }
    [DebuggerStepThroughAttribute]
private sealed virtual override object JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ICodeCompletionItemsProvider.IsAvailable(ISpecificCodeCompletionContext context);
    [DebuggerStepThroughAttribute]
private sealed virtual override TextLookupRanges JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ICodeCompletionItemsProvider.GetDefaultRanges(ISpecificCodeCompletionContext context);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ICodeCompletionItemsProvider.AddLookupItems(ISpecificCodeCompletionContext context, IItemsCollector collector, object data);
    [DebuggerStepThroughAttribute]
private sealed virtual override void JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ICodeCompletionItemsProvider.TransformItems(ISpecificCodeCompletionContext context, IItemsCollector collector, object data);
    [DebuggerStepThroughAttribute]
private sealed virtual override void JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ICodeCompletionItemsProvider.DecorateItems(ISpecificCodeCompletionContext context, IReadOnlyCollection`1<ILookupItem> items, object data);
    [DebuggerStepThroughAttribute]
private sealed virtual override LookupFocusBehaviour JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ICodeCompletionItemsProvider.GetLookupFocusBehaviour(ISpecificCodeCompletionContext context, object data);
    [DebuggerStepThroughAttribute]
private sealed virtual override AutocompletionBehaviour JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ICodeCompletionItemsProvider.GetAutocompletionBehaviour(ISpecificCodeCompletionContext context, object data);
    public virtual bool get_IsDynamic();
    public virtual bool get_IsFinal();
    public virtual CompletionMode get_SupportedCompletionMode();
    public virtual EvaluationMode get_SupportedEvaluationMode();
    public virtual bool IsCharacterAcceptable(TContext context, char c, TData data);
    protected virtual AutocompletionBehaviour GetAutocompletionBehaviour(TContext context, TData data);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(TContext context, TData data);
    protected virtual void AddItemsGroups(TContext context, IItemsCollector collector, IntellisenseManager completionManager, TData data);
    protected virtual void TransformItems(TContext context, IItemsCollector collector, TData data);
    [CanBeNullAttribute]
protected virtual TextLookupRanges GetDefaultRanges(TContext context);
    protected virtual bool AddLookupItems(TContext context, IItemsCollector collector, TData data);
    protected virtual void DecorateItems(TContext context, IReadOnlyCollection`1<ILookupItem> items, TData data);
    protected abstract virtual TData IsAvailable(TContext context);
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ItemsProviderOfSymbolTableBase`1 : ItemsProviderOfSpecificContext`1<TContext> {
    protected virtual bool IsAvailable(TContext context);
    protected virtual bool AddLookupItems(TContext context, IItemsCollector collector);
    private void GetLookupItemsFromSymbolTable(ISymbolTable symbolTable, IItemsCollector collector, TContext context);
    [CanBeNullAttribute]
protected abstract virtual ILookupItem GetElement(ISymbolInfo symbolInfo, TContext context);
    [CanBeNullAttribute]
protected abstract virtual ISymbolTable GetSymbolTable(TContext context);
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItemFactoryBase : object {
    [NotNullAttribute]
[PureAttribute]
public LookupItem`1<TextualInfo> CreateTextLookupItem(TextLookupRanges ranges, string text, bool isDynamic);
    [NotNullAttribute]
[PureAttribute]
protected LookupItem`1<TextualInfo> CreateTextLookupItem(TextLookupRanges ranges, string text, string type, bool isDynamic);
    [NotNullAttribute]
[PureAttribute]
public LookupItem`1<TextualInfo> CreateTextLookupItem(TextLookupRanges ranges, string text, string type, bool emphasize, bool isDynamic);
    [NotNullAttribute]
public CombinedLookupItem CombineLookupItems(CodeCompletionContext context, TextLookupRanges ranges, ILookupItem[] items, ILookupItem sampleMatchItem, bool autocomplete, bool exactMatch, IconId customImage, bool ignoreSoftOnSpace);
    [NotNullAttribute]
public CombinedLookupItem CombineLookupItems(CodeCompletionContext context, TextLookupRanges ranges, ILookupItem[] items, IEnumerable`1<ILookupItem> displayItems, ILookupItem sampleMatchItem, bool autocomplete, bool exactMatch, IconId customImage, bool ignoreSoftOnSpace);
    [NotNullAttribute]
protected virtual CombinedLookupItem CreateCombinedLookupItem(ILookupItem[] items, IEnumerable`1<ILookupItem> displayItems, ILookupItem sampleMatchItem, bool autocomplete, bool exactMatch, IconId customImage, bool ignoreSoftOnSpace);
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.CLRLookupItemRelevance : Enum {
    public ulong value__;
    public static CLRLookupItemRelevance ExpectedTypeMatch;
    public static CLRLookupItemRelevance ExpectedTypeMatchLambda;
    public static CLRLookupItemRelevance ExpectedTypeMatchStaticMember;
    public static CLRLookupItemRelevance ExpectedTypeMatchInitializer;
    public static CLRLookupItemRelevance ExpectedTypeMatchKeyword;
    public static CLRLookupItemRelevance EnumMembers;
    public static CLRLookupItemRelevance Initializer;
    public static CLRLookupItemRelevance LocalVariablesAndParameters;
    public static CLRLookupItemRelevance FieldsAndProperties;
    public static CLRLookupItemRelevance Methods;
    public static CLRLookupItemRelevance Events;
    public static CLRLookupItemRelevance ExtensionMethods;
    public static CLRLookupItemRelevance NamedArguments;
    public static CLRLookupItemRelevance Attributes;
    public static CLRLookupItemRelevance Keywords;
    public static CLRLookupItemRelevance GenerateItems;
    public static CLRLookupItemRelevance TypesAndNamespaces;
    public static CLRLookupItemRelevance LiveTemplates;
    public static CLRLookupItemRelevance MemberOfCurrentType;
    public static CLRLookupItemRelevance MemberOfBaseType;
    public static CLRLookupItemRelevance MemberOfObject;
    public static CLRLookupItemRelevance ImportedType;
    public static CLRLookupItemRelevance NotImportedType;
    public static CLRLookupItemRelevance NonStatic;
    public static CLRLookupItemRelevance StaticAndQualified;
    public static CLRLookupItemRelevance NotObsolete;
    public static CLRLookupItemRelevance Obsolete;
    public static CLRLookupItemRelevance Lambda;
}
public static class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.CodeCompletionSortingUtil : object {
    public static ulong AboveStatisticalMask;
    [PureAttribute]
public static int CompareAlphabetical(ILookupItem xItem, ILookupItem yItem);
    [PureAttribute]
public static int CompareByRelevance(ILookupItem xItem, ILookupItem yItem);
    [PureAttribute]
private static int CompareDelayedOrderStrings(ILookupItem xItem, ILookupItem yItem);
    [NotNullAttribute]
[PureAttribute]
private static Func`3<ILookupItem, ILookupItem, int> GetComparer(LookupListSorting sorting);
    [NotNullAttribute]
[PureAttribute]
private static Func`3<MatchedLookupItem, MatchedLookupItem, int> GetMatchedItemComparer(LookupListSorting sorting);
    [NotNullAttribute]
public static T[] QuickSort(IEnumerable`1<T> items, Func`2<T, ILookupItem> lookupItemSelector, LookupListSorting sorting);
    [NotNullAttribute]
public static IEnumerable`1<MatchedLookupItem> LazySort(IList`1<MatchedLookupItem> items, LookupListSorting sorting);
    [NotNullAttribute]
public static IEnumerable`1<MatchedLookupItem> LazySortByRelevanceAboveStatisticalValueOnly(IList`1<MatchedLookupItem> items);
    private static void QuickSort(T[] items, int start, int end, Func`3<ILookupItem, ILookupItem, int> comparison, Func`2<T, ILookupItem> fGetItem);
    private static int Partition(T[] items, int start, int end, Func`3<ILookupItem, ILookupItem, int> comparison, Func`2<T, ILookupItem> fGetItem);
    [CompilerGeneratedAttribute]
internal static int <GetMatchedItemComparer>g__CompareMatchedAlphabetical|4_0(MatchedLookupItem x, MatchedLookupItem y);
    [CompilerGeneratedAttribute]
internal static int <GetMatchedItemComparer>g__CompareMatchedByRelevance|4_1(MatchedLookupItem x, MatchedLookupItem y);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.IDeclaredElementLookupItem {
    public PsiLanguageType LanguageType { get; }
    public DeclaredElementInstance PreferredDeclaredElement { get; }
    [NotNullAttribute]
public IReadOnlyList`1<DeclaredElementInstance> AllDeclaredElements { get; }
    [NotNullAttribute]
public IReadOnlyList`1<IElementInstancePointer`1<IDeclaredElement>> DeclaredElementPointers { get; }
    public abstract virtual PsiLanguageType get_LanguageType();
    public abstract virtual DeclaredElementInstance get_PreferredDeclaredElement();
    public abstract virtual IReadOnlyList`1<DeclaredElementInstance> get_AllDeclaredElements();
    public abstract virtual IReadOnlyList`1<IElementInstancePointer`1<IDeclaredElement>> get_DeclaredElementPointers();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.IDescriptionProvidingLookupItem {
    [CanBeNullAttribute]
public abstract virtual RichTextBlock GetDescription();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.IItemsCollector {
    [NotNullAttribute]
public IReadOnlyList`1<ILookupItem> Items { get; }
    [ObsoleteAttribute("[To be removed] Lookup items should all define their TextLookupRanges individually")]
[CanBeNullAttribute]
public TextLookupRanges Ranges { get; }
    public abstract virtual IReadOnlyList`1<ILookupItem> get_Items();
    public abstract virtual void Add(ILookupItem item);
    public abstract virtual void Remove(ILookupItem item);
    public abstract virtual void RemoveWhere(Predicate`1<ILookupItem> predicate);
    public abstract virtual void Clear();
    public abstract virtual TextLookupRanges get_Ranges();
    [ObsoleteAttribute("[To be removed] Lookup items should all define their TextLookupRanges individually")]
public abstract virtual void AddRanges(TextLookupRanges ranges);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem {
    [NotNullAttribute]
public LookupItemPlacement Placement { get; }
    public IconId Image { get; }
    public RichText DisplayName { get; }
    [CanBeNullAttribute]
public RichText DisplayTypeName { get; }
    public bool CanShrink { get; }
    public bool IsDynamic { get; }
    public bool IgnoreSoftOnSpace { get; }
    public int Identity { get; }
    public abstract virtual LookupItemPlacement get_Placement();
    public abstract virtual bool AcceptIfOnlyMatched(LookupItemAcceptanceContext itemAcceptanceContext);
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    public abstract virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    public abstract virtual IconId get_Image();
    public abstract virtual RichText get_DisplayName();
    public abstract virtual RichText get_DisplayTypeName();
    public abstract virtual DocumentRange GetVisualReplaceRange(DocumentRange nameRange);
    public abstract virtual bool get_CanShrink();
    public abstract virtual bool Shrink();
    public abstract virtual void Unshrink();
    public abstract virtual bool get_IsDynamic();
    public abstract virtual bool get_IgnoreSoftOnSpace();
    public abstract virtual int get_Identity();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem2 {
    public bool CanBeAcceptedWithoutCommit { get; }
    public bool IsRiderAsync { get; }
    public abstract virtual bool get_CanBeAcceptedWithoutCommit();
    public abstract virtual bool get_IsRiderAsync();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItemsList {
    public IEnumerable`1<ILookupItem> Items { get; }
    public abstract virtual void Add(ILookupItem item);
    public abstract virtual void Remove(ILookupItem item);
    public abstract virtual void Clear();
    public abstract virtual IEnumerable`1<ILookupItem> get_Items();
    public abstract virtual IEnumerable`1<ILookupItem> GetSortedItems(LookupListSorting sorting);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.AbbreviatedTextLookupItem : TextLookupItem {
    private string myAbbreviation;
    private IList`1<ISymbolInfo> myElements;
    private ISpecificCodeCompletionContext myContext;
    private PrefixMatcher myPrefixMatcher;
    public AbbreviatedTextLookupItem(string abbreviation, IList`1<ISymbolInfo> elements, ISpecificCodeCompletionContext context);
    protected virtual RichText GetDisplayName();
    protected virtual void OnAfterComplete(ITextControl textControl, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker);
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    private string GetText();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.AfterCompletionHandler : MulticastDelegate {
    public AfterCompletionHandler(object object, IntPtr method);
    public virtual void Invoke(ITextControl textControl, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker);
    public virtual IAsyncResult BeginInvoke(ITextControl textControl, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker, AsyncCallback callback, object object);
    public virtual void EndInvoke(DocumentRange& nameRange, DocumentRange& decorationRange, Suffix& suffix, IRangeMarker& caretPositionRangeMarker, IAsyncResult result);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.AttributeLookupItem : TextLookupItemBase {
    private PsiLanguageType myLanguageType;
    private IElementInstancePointer`1<IDeclaredElement> myDeclaredElementInstancePtr;
    private CodeCompletionContext myBasicContext;
    private bool myShowContainer;
    public PsiLanguageType LanguageType { get; }
    public IconId Image { get; }
    public DeclaredElementInstance PreferredDeclaredElement { get; }
    public IReadOnlyList`1<DeclaredElementInstance> AllDeclaredElements { get; }
    public IReadOnlyList`1<IElementInstancePointer`1<IDeclaredElement>> DeclaredElementPointers { get; }
    public AttributeLookupItem(IDeclaredElement declaredElement, IElementPointerFactory elementPointerFactory, PsiLanguageType languageType, bool showContainer, CodeCompletionContext basicContext);
    public sealed virtual PsiLanguageType get_LanguageType();
    protected virtual RichText GetDisplayName();
    public virtual IconId get_Image();
    protected virtual void OnAfterComplete(ITextControl textControl, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker);
    public sealed virtual DeclaredElementInstance get_PreferredDeclaredElement();
    public sealed virtual IReadOnlyList`1<DeclaredElementInstance> get_AllDeclaredElements();
    public sealed virtual IReadOnlyList`1<IElementInstancePointer`1<IDeclaredElement>> get_DeclaredElementPointers();
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.CompletionConfiguration : ValueType {
    [CompilerGeneratedAttribute]
private string <DecorationText>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CaretRelativeOffset>k__BackingField;
    public string DecorationText { get; }
    public int CaretRelativeOffset { get; }
    public CompletionConfiguration(string decorationText, int caretRelativeOffset);
    [CompilerGeneratedAttribute]
public string get_DecorationText();
    [CompilerGeneratedAttribute]
public int get_CaretRelativeOffset();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.CompletionConfigurationProcessor : MulticastDelegate {
    public CompletionConfigurationProcessor(object object, IntPtr method);
    public virtual void Invoke(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, CompletionConfiguration& configuration);
    public virtual IAsyncResult BeginInvoke(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, CompletionConfiguration& configuration, AsyncCallback callback, object object);
    public virtual void EndInvoke(CompletionConfiguration& configuration, IAsyncResult result);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.CreateNewEventHandlerLookupItem`1 : CreateNewMethodLookupItem`1<TMethodReference> {
    protected CreateNewEventHandlerLookupItem`1(TMethodReference reference, IDeclaredType eventType, IDelegate delegate, ITypeDeclaration targetTypeDeclaration, Func`2<TMethodReference, string> suggestNameFunc);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.CreateNewMethodLookupItem`1 : TextLookupItemBase {
    private ITreeNodePointer`1<ITypeDeclaration> myTypeDeclarationPointer;
    private IDeclaredElementPointer`1<ITypeElement> myTypeElementPointer;
    private PsiLanguageType myTargetLanguage;
    private IPsiServices myPsiServices;
    private PsiLanguageType myCurrentLanguage;
    private string mySuggestedName;
    private Func`2<TMethodReference, string> mySuggestNameFunc;
    private AccessRights myAccessRights;
    private MemberSignature myMemberSignature;
    public IconId Image { get; }
    public CreateNewMethodLookupItem`1(TMethodReference methodReference, ITypeDeclaration targetTypeDeclaration, Func`2<TMethodReference, string> suggestNameFunc, MemberSignature signature, AccessRights accessRights);
    public virtual IconId get_Image();
    protected virtual RichText GetDisplayName();
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    private string GetTypeString(ITypeImage typeImage);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    [CanBeNullAttribute]
private ITypeDeclaration RestoreTargetTypeDeclaration();
    private void DoCreateMethod(ISolution solution, ITextControl textControl, TMethodReference newReference, ITypeDeclaration typeDeclaration);
    [CompilerGeneratedAttribute]
private StringBuilder <GetTypeString>b__14_0(StringBuilder builder, IType type);
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.DeclaredElementLookupItem : TextLookupItemBase {
    [NotNullAttribute]
public static DeclaredElementPresenterStyle DefaultPresenterStyle;
    private bool myCanShrink;
    protected IElementInstancePointer`1<IDeclaredElement> myPointer;
    private bool myHighlight;
    private DeclaredElementPresenterMarking myMarking;
    private bool myTextIsBuilt;
    private bool myTextOverridden;
    private QualifierKind myQualifierKind;
    private HeadType myHeadType;
    private IconId myImage;
    protected string myShortName;
    private string myQualifier;
    private string myPresentedName;
    private int myIdentity;
    [CompilerGeneratedAttribute]
private ILookupItemsOwner <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    private PsiLanguageType myLanguageType;
    [CompilerGeneratedAttribute]
private bool <IsObsolete>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Bind>k__BackingField;
    public ILookupItemsOwner Owner { get; }
    protected string TypeName { get; protected set; }
    public bool IsObsolete { get; public set; }
    public string ShortName { get; }
    public HeadType HeadType { get; public set; }
    unknown string PresentedName {private set; }
    public string Qualifier { get; }
    public QualifierKind QualifierKind { get; public set; }
    public bool Bind { get; public set; }
    public string Text { get; public set; }
    public bool Highlight { get; public set; }
    public PsiLanguageType LanguageType { get; }
    public ISolution Solution { get; }
    public bool CanShrink { get; }
    public IconId Image { get; }
    [CanBeNullAttribute]
public DeclaredElementInstance PreferredDeclaredElement { get; }
    public IReadOnlyList`1<DeclaredElementInstance> AllDeclaredElements { get; }
    public IReadOnlyList`1<IElementInstancePointer`1<IDeclaredElement>> DeclaredElementPointers { get; }
    public bool HasCandidates { get; }
    [ItemNotNullAttribute]
public IEnumerable`1<InvocationCandidate> Candidates { get; }
    public int Identity { get; }
    public DeclaredElementPresenterStyle PresenterStyle { get; }
    protected DeclaredElementLookupItem(string name, DeclaredElementInstance instance, IElementPointerFactory elementPointerFactory, PsiLanguageType languageType, ILookupItemsOwner owner);
    private static DeclaredElementLookupItem();
    [CompilerGeneratedAttribute]
public ILookupItemsOwner get_Owner();
    [CompilerGeneratedAttribute]
protected string get_TypeName();
    [CompilerGeneratedAttribute]
protected void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsObsolete();
    [CompilerGeneratedAttribute]
public void set_IsObsolete(bool value);
    public string get_ShortName();
    public HeadType get_HeadType();
    public void set_HeadType(HeadType value);
    private void set_PresentedName(string value);
    public string get_Qualifier();
    public QualifierKind get_QualifierKind();
    public void set_QualifierKind(QualifierKind value);
    protected void UpdatePresentation();
    [NotNullAttribute]
protected string Replace(string str, TextRange range, string replace);
    protected virtual string GetPresentedName(DeclaredElementInstance instance, DeclaredElementPresenterMarking& marking);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Bind();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Bind(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    private void SetText();
    public bool get_Highlight();
    public void set_Highlight(bool value);
    public sealed virtual PsiLanguageType get_LanguageType();
    public ISolution get_Solution();
    public virtual bool get_CanShrink();
    public virtual IconId get_Image();
    public virtual DeclaredElementInstance get_PreferredDeclaredElement();
    public virtual IReadOnlyList`1<DeclaredElementInstance> get_AllDeclaredElements();
    public virtual IReadOnlyList`1<IElementInstancePointer`1<IDeclaredElement>> get_DeclaredElementPointers();
    public virtual bool Shrink();
    public virtual void Unshrink();
    public virtual bool get_HasCandidates();
    public virtual IEnumerable`1<ICandidate> CreateCandidates(ISolution solution);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.DeclaredElementLookupItem/<get_Candidates>d__73")]
public virtual IEnumerable`1<InvocationCandidate> get_Candidates();
    protected virtual string GetText();
    protected virtual string MakeSafe(string shortName);
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    [CanBeNullAttribute]
protected DeclaredElementInstance`1<IDeclaredElement> SafeResolveElementPointer();
    protected virtual RichText GetDisplayName();
    protected virtual string BuildDisplayNameText(TextRange& nameRange);
    protected virtual void OnAfterComplete(ITextControl textControl, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker);
    public virtual int get_Identity();
    public virtual DeclaredElementPresenterStyle get_PresenterStyle();
    protected void AddContainerToName(RichText displayName);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.DeclaredElementLookupItem`2 : DeclaredElementLookupItem {
    [CompilerGeneratedAttribute]
private DocumentOffset <CustomCaretOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private Suffix <Suffix>k__BackingField;
    private string myDisplayName;
    protected ISpecificCodeCompletionContext Context;
    private PsiLanguageType myPresenterLanguage;
    protected DocumentOffset CustomCaretOffset { get; protected set; }
    protected Suffix Suffix { get; private set; }
    public DeclaredElementLookupItem`2(DeclaredElementInstance declaredElementInstanceInstance, string name, string displayName, ISpecificCodeCompletionContext context, PsiLanguageType languageType, TextLookupRanges ranges, PsiLanguageType presentationLanguageType);
    [CompilerGeneratedAttribute]
protected DocumentOffset get_CustomCaretOffset();
    [CompilerGeneratedAttribute]
protected void set_CustomCaretOffset(DocumentOffset value);
    [CompilerGeneratedAttribute]
protected Suffix get_Suffix();
    [CompilerGeneratedAttribute]
private void set_Suffix(Suffix value);
    protected sealed virtual RichText GetDisplayName();
    protected virtual void DecorateDisplayName(RichText displayName, DeclaredElementInstance preferredDeclaredElement);
    protected string GetContainerFullPath(IPathDeclaredElement pathDeclaredElement);
    protected virtual string GetPresentedName(DeclaredElementInstance instance, DeclaredElementPresenterMarking& marking);
    protected virtual string GetText();
    protected virtual void InsertTailType(ITextControl textControl, ISolution solution, DocumentOffset offset, TailType tailType);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    protected virtual void OnAfterComplete(ITextControl textControl, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker);
    protected virtual IReference BindReferenceAfterComplete(ITextControl textControl, DocumentRange nameRange, Action`1<IReference> withOldReferenceBeforeComplete);
    protected virtual bool IsReferenceValid(DocumentRange nameRange, T reference);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.DeclaredElementLookupItemImpl : DeclaredElementLookupItem {
    public DeclaredElementLookupItemImpl(DeclaredElementInstance instance, IElementPointerFactory elementPointerFactory, PsiLanguageType languageType, ILookupItemsOwner owner);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.FilteredLookupItems : object {
    private IdentifierMatchingStyle myMatchingStyle;
    [NotNullAttribute]
private string myPrefix;
    [NotNullAttribute]
private IShellLocks myShellLocks;
    [NotNullAttribute]
private IItemsByLocation`1<EvaluatedLookupItem> myEvaluatedItemsByLocation;
    [CanBeNullAttribute]
private ISpecificCompletionSorter mySorter;
    [NotNullAttribute]
private ICompletionStatisticsManager myStatisticsManager;
    [NotNullAttribute]
private ParallelMatcher`1<MatchedLookupItem> myParallelMatcher;
    [NotNullAttribute]
private PrefixMatcher myPrefixMatcher;
    [NotNullAttribute]
private List`1<ICompletionListFilter> myIncludedFilters;
    [NotNullAttribute]
private List`1<ICompletionListFilter> myExcludedFilters;
    [NotNullAttribute]
private CachedEnumerable`1<MatchedLookupItem> mySortedItems;
    [NotNullAttribute]
public string Prefix { get; }
    [NotNullAttribute]
public ICompletionStatisticsManager StatisticsManager { get; }
    [NotNullAttribute]
public IReadOnlyList`1<MatchedLookupItem> MatchedAndSortedItems { get; }
    public FilteredLookupItems(string prefix, IShellLocks locks, IItemsByLocation`1<EvaluatedLookupItem> evaluatedItemsByLocation, IdentifierMatchingStyle matchingStyle, ISpecificCompletionSorter sorter, IReadOnlyList`1<ICompletionListFilter> filters, ICompletionStatisticsManager statisticsManager);
    public string get_Prefix();
    public ICompletionStatisticsManager get_StatisticsManager();
    public IReadOnlyList`1<MatchedLookupItem> get_MatchedAndSortedItems();
    private void PerformMatching();
    [NotNullAttribute]
private IEnumerable`1<MatchedLookupItem> PerformMatchingAndSorting(IReadOnlyList`1<EvaluatedLookupItem> lookupItems, ItemsLocation location, Int32& count);
    private void MatchEvaluatedItem(EvaluatedLookupItem evaluatedItem, PrefixMatcher prefixMatcher, int itemIndex, ICollection`1<MatchedLookupItem> consumer);
    private void ProcessFixedItems(List`1<MatchedLookupItem> result);
    [PureAttribute]
private static bool AnyFilterAccepts(List`1<ICompletionListFilter> filters, ILookupItem lookupItem);
    [CanBeNullAttribute]
public ILookupItem GetClosestItem();
    [PureAttribute]
public bool HasContinuation(char c);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.FilteredLookupItems/<GetContinuation>d__25")]
[ItemNotNullAttribute]
[NotNullAttribute]
public IEnumerable`1<ILookupItem> GetContinuation(char c);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.TextLookupItem : TextLookupItemBase {
    private IconId myImage;
    private bool myEmphasize;
    public IconId Image { get; }
    public TextLookupItem(string text, bool isDynamic);
    public TextLookupItem(string text, string typeText, bool isDynamic);
    public TextLookupItem(string text, IconId image, bool isDynamic);
    public TextLookupItem(string text, string typeText, bool emphasize, bool isDynamic);
    public virtual void Unshrink();
    protected virtual RichText GetDisplayName();
    public virtual IconId get_Image();
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.TextLookupItemBase : UserDataHolder {
    private LookupItemPlacement myPlacement;
    private string myText;
    [CompilerGeneratedAttribute]
private TailType <TailType>k__BackingField;
    private RichText myDisplayName;
    [CompilerGeneratedAttribute]
private TextLookupRanges <Ranges>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplaceText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InsertText>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReplaceCaretOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InsertCaretOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private JetRgbaColor <TextColor>k__BackingField;
    [CompilerGeneratedAttribute]
private IRangeMarker <VisualReplaceRangeMarker>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableFormatter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDynamic>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <DisplayTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private AfterCompletionHandler AfterComplete;
    public TailType TailType { get; public set; }
    public LookupItemPlacement Placement { get; protected set; }
    public bool IgnoreSoftOnSpace { get; }
    public TextLookupRanges Ranges { get; public set; }
    public RichText DisplayName { get; }
    public string ReplaceText { get; public set; }
    public string InsertText { get; public set; }
    public int ReplaceCaretOffset { get; public set; }
    public int InsertCaretOffset { get; public set; }
    public JetRgbaColor TextColor { get; public set; }
    public IRangeMarker VisualReplaceRangeMarker { get; public set; }
    public string Text { get; public set; }
    public IconId Image { get; }
    public bool DisableFormatter { get; public set; }
    public bool RemovesTypeQualifier { get; }
    public bool IsDynamic { get; }
    public int Identity { get; }
    public RichText DisplayTypeName { get; public set; }
    public bool CanShrink { get; }
    protected Casing Casing { get; }
    protected TextLookupItemBase(bool isDynamic);
    [CompilerGeneratedAttribute]
public sealed virtual TailType get_TailType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TailType(TailType value);
    public sealed virtual LookupItemPlacement get_Placement();
    protected void set_Placement(LookupItemPlacement value);
    public virtual bool get_IgnoreSoftOnSpace();
    [CompilerGeneratedAttribute]
public sealed virtual TextLookupRanges get_Ranges();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Ranges(TextLookupRanges value);
    public sealed virtual RichText get_DisplayName();
    protected virtual RichText GetDisplayName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ReplaceText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReplaceText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_InsertText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InsertText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ReplaceCaretOffset();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReplaceCaretOffset(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_InsertCaretOffset();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InsertCaretOffset(int value);
    [CompilerGeneratedAttribute]
public JetRgbaColor get_TextColor();
    [CompilerGeneratedAttribute]
public void set_TextColor(JetRgbaColor value);
    [CompilerGeneratedAttribute]
public sealed virtual IRangeMarker get_VisualReplaceRangeMarker();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VisualReplaceRangeMarker(IRangeMarker value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public abstract virtual IconId get_Image();
    [CompilerGeneratedAttribute]
public virtual bool get_DisableFormatter();
    [CompilerGeneratedAttribute]
public virtual void set_DisableFormatter(bool value);
    public virtual bool get_RemovesTypeQualifier();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDynamic();
    public virtual int get_Identity();
    [CompilerGeneratedAttribute]
public virtual RichText get_DisplayTypeName();
    [CompilerGeneratedAttribute]
public virtual void set_DisplayTypeName(RichText value);
    public virtual bool get_CanShrink();
    public virtual bool AcceptIfOnlyMatched(LookupItemAcceptanceContext itemAcceptanceContext);
    public virtual bool Shrink();
    public virtual void Unshrink();
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    public sealed virtual DocumentRange GetVisualReplaceRange(DocumentRange nameRange);
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    protected virtual void InsertTailType(ITextControl textControl, ISolution solution, DocumentOffset offset, TailType tailType);
    protected virtual void PlaybackSuffix(ITextControl textControl, Suffix suffix);
    protected virtual Casing get_Casing();
    protected virtual DocumentRange DoReplaceText(ITextControl textControl, DocumentRange replaceRange, string typeInName);
    protected virtual void OnAfterComplete(ITextControl textControl, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker);
    protected void InvokeOnAfterComplete(ITextControl textControl, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker);
    [CompilerGeneratedAttribute]
public sealed virtual void add_AfterComplete(AfterCompletionHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AfterComplete(AfterCompletionHandler value);
    public sealed virtual void InitializeRanges(TextLookupRanges ranges, CodeCompletionContext basicContext);
    public virtual string ToString();
    protected void Invalidate();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.TypeLookupItem : TextLookupItemBase {
    protected ITypePointer myTypePointer;
    private PsiLanguageType myLanguageType;
    private string myTypePresentedName;
    [CompilerGeneratedAttribute]
private ILookupItemsOwner <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Bind>k__BackingField;
    public ILookupItemsOwner Owner { get; }
    [CanBeNullAttribute]
protected IDeclaredElement DeclaredElement { get; }
    protected IDeclaredElement[] Candidates { get; }
    public IconId Image { get; }
    public PsiLanguageType LanguageType { get; }
    public bool Bind { get; public set; }
    public DeclaredElementInstance PreferredDeclaredElement { get; }
    public IReadOnlyList`1<DeclaredElementInstance> AllDeclaredElements { get; }
    public IReadOnlyList`1<IElementInstancePointer`1<IDeclaredElement>> DeclaredElementPointers { get; }
    private TypeLookupItem(ITypePointer typePointer, IType type, PsiLanguageType languageType, ILookupItemsOwner owner);
    public TypeLookupItem(ITypePointer typePointer, PsiLanguageType languageType, ILookupItemsOwner owner);
    public TypeLookupItem(IType type, PsiLanguageType languageType, ILookupItemsOwner owner);
    [CompilerGeneratedAttribute]
public ILookupItemsOwner get_Owner();
    protected virtual RichText GetDisplayName();
    protected IDeclaredElement get_DeclaredElement();
    protected IDeclaredElement[] get_Candidates();
    private IDeclaredType GetDeclaredType();
    public virtual IconId get_Image();
    public sealed virtual PsiLanguageType get_LanguageType();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Bind();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Bind(bool value);
    protected virtual void OnAfterComplete(ITextControl textControl, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker);
    protected virtual ITypePointer GetTypePointerForBinding();
    public sealed virtual DeclaredElementInstance get_PreferredDeclaredElement();
    public sealed virtual IReadOnlyList`1<DeclaredElementInstance> get_AllDeclaredElements();
    public sealed virtual IReadOnlyList`1<IElementInstancePointer`1<IDeclaredElement>> get_DeclaredElementPointers();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.TypeNameCodeCompletionLookupItem : DeclaredElementLookupItem {
    protected TypeNameCodeCompletionLookupItem(IDeclaredElement declaredElement, IElementPointerFactory elementPointerFactory, PsiLanguageType languageType, ILookupItemsOwner owner);
    protected virtual RichText GetDisplayName();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.UnitTestCategoryLookupItem : TextLookupItem {
    [NotNullAttribute]
private RichText myDisplayText;
    public UnitTestCategoryLookupItem(string text, IconId image);
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    [NotNullAttribute]
protected virtual RichText GetDisplayName();
    protected virtual void PlaybackSuffix(ITextControl textControl, Suffix suffix);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.IParameterInfoCandidatesProvider {
    public bool HasCandidates { get; }
    public abstract virtual bool get_HasCandidates();
    public abstract virtual IEnumerable`1<ICandidate> CreateCandidates(ISolution solution);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ItemsCollector : object {
    [NotNullAttribute]
private List`1<ILookupItem> myItems;
    [CompilerGeneratedAttribute]
private TextLookupRanges <Ranges>k__BackingField;
    public IReadOnlyList`1<ILookupItem> Items { get; }
    public TextLookupRanges Ranges { get; private set; }
    public sealed virtual IReadOnlyList`1<ILookupItem> get_Items();
    public sealed virtual void Add(ILookupItem item);
    public sealed virtual void Remove(ILookupItem item);
    public sealed virtual void Clear();
    public sealed virtual void RemoveWhere(Predicate`1<ILookupItem> predicate);
    [CompilerGeneratedAttribute]
public sealed virtual TextLookupRanges get_Ranges();
    [CompilerGeneratedAttribute]
private void set_Ranges(TextLookupRanges value);
    public sealed virtual void AddRanges(TextLookupRanges ranges);
    [NotNullAttribute]
[PureAttribute]
public InnerItemsCollector CreateSubCollector();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ITextualDeclaredElementLookupItem {
    public bool Bind { get; public set; }
    public abstract virtual bool get_Bind();
    public abstract virtual void set_Bind(bool value);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ITextualLookupItem {
    public TailType TailType { get; public set; }
    [CanBeNullAttribute]
public TextLookupRanges Ranges { get; public set; }
    public int ReplaceCaretOffset { get; public set; }
    public int InsertCaretOffset { get; public set; }
    public string ReplaceText { get; public set; }
    public string InsertText { get; public set; }
    public IRangeMarker VisualReplaceRangeMarker { get; public set; }
    public abstract virtual TailType get_TailType();
    public abstract virtual void set_TailType(TailType value);
    public abstract virtual TextLookupRanges get_Ranges();
    public abstract virtual void set_Ranges(TextLookupRanges value);
    public abstract virtual int get_ReplaceCaretOffset();
    public abstract virtual void set_ReplaceCaretOffset(int value);
    public abstract virtual int get_InsertCaretOffset();
    public abstract virtual void set_InsertCaretOffset(int value);
    public abstract virtual string get_ReplaceText();
    public abstract virtual void set_ReplaceText(string value);
    public abstract virtual string get_InsertText();
    public abstract virtual void set_InsertText(string value);
    public abstract virtual IRangeMarker get_VisualReplaceRangeMarker();
    public abstract virtual void set_VisualReplaceRangeMarker(IRangeMarker value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_AfterComplete(AfterCompletionHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AfterComplete(AfterCompletionHandler value);
    public abstract virtual void InitializeRanges(TextLookupRanges ranges, CodeCompletionContext basicContext);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.IWrappedLookupItem {
    public ILookupItem Item { get; }
    public abstract virtual ILookupItem get_Item();
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.LookupItemAcceptanceContext : ValueType {
    private DocumentOffset myAbsoluteOffset;
    [NotNullAttribute]
private PrefixTextRule myPrefixTextRule;
    [CompilerGeneratedAttribute]
private DocumentRange <TextRange>k__BackingField;
    public DocumentRange TextRange { get; }
    public DocumentRange PrefixRange { get; }
    public DocumentRange SuffixRange { get; }
    [NotNullAttribute]
public string Prefix { get; }
    [NotNullAttribute]
public string Suffix { get; }
    public LookupItemAcceptanceContext(DocumentRange textRange, DocumentOffset absoluteOffset, PrefixTextRule prefixTextRule);
    [CompilerGeneratedAttribute]
public DocumentRange get_TextRange();
    public DocumentRange get_PrefixRange();
    public DocumentRange get_SuffixRange();
    public string get_Prefix();
    public string get_Suffix();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.LookupItemCompletor : object {
    private ITextControl myTextControl;
    private ISolution mySolution;
    [CompilerGeneratedAttribute]
private CompletionHandler BeforeCompleted;
    [CompilerGeneratedAttribute]
private CompletionHandler Completed;
    [CompilerGeneratedAttribute]
private ILookupItem <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private LookupItemInsertType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <Range>k__BackingField;
    [CompilerGeneratedAttribute]
private Suffix <Suffix>k__BackingField;
    public ILookupItem Item { get; }
    public LookupItemInsertType Type { get; }
    public DocumentRange Range { get; }
    public Suffix Suffix { get; }
    public LookupItemCompletor(ITextControl textControl, IPsiFiles psiFiles, ILookupItem item, LookupItemInsertType type, DocumentRange range, Suffix suffix, ISolution solution);
    [CompilerGeneratedAttribute]
public void add_BeforeCompleted(CompletionHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeforeCompleted(CompletionHandler value);
    [CompilerGeneratedAttribute]
public void add_Completed(CompletionHandler value);
    [CompilerGeneratedAttribute]
public void remove_Completed(CompletionHandler value);
    [CompilerGeneratedAttribute]
public ILookupItem get_Item();
    [CompilerGeneratedAttribute]
public LookupItemInsertType get_Type();
    [CompilerGeneratedAttribute]
public DocumentRange get_Range();
    [CompilerGeneratedAttribute]
public Suffix get_Suffix();
    public void CompleteItem();
    public void ScheduleCompletion();
    private void CompleteItemss(Action smthAction);
    private void CompleteItem(Action executeInsideCommandScope);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.LookupItemPlacement : object {
    public PlacementLocation Location;
    public byte Rank;
    public ulong Relevance;
    public string OrderString;
    [NotNullAttribute]
private string RelevanceBits { get; }
    [NotNullAttribute]
private String[] RelevanceFlags { get; }
    public LookupItemPlacement(string orderString, PlacementLocation placementLocation);
    public LookupItemPlacement(string orderString, byte rank, PlacementLocation placementLocation);
    private string get_RelevanceBits();
    private String[] get_RelevanceFlags();
    [NotNullAttribute]
public static List`1<string> GetDebugRelevanceFlags(ulong relevance);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.LookupItemPlacement/<GetBits>d__11")]
[NotNullAttribute]
private static IEnumerable`1<byte> GetBits(ulong relevance);
    public virtual string ToString();
    public void SetSelectionPriority(SelectionPriority selectionPriority);
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.LookupItemRelevance : Enum {
    public ulong value__;
    public static LookupItemRelevance FromDoubleCompletion;
    public static LookupItemRelevance FromSingleCompletion;
    public static LookupItemRelevance ExactMatch;
    public static LookupItemRelevance FromLightAndDynamicEvaluation;
    public static LookupItemRelevance ExactNoCaseMatch;
    public static LookupItemRelevance PrefixMatch;
    public static LookupItemRelevance CamelHumpsCaseMatch;
    public static LookupItemRelevance PrefixNoCaseMatch;
    public static LookupItemRelevance CamelHumpsNoCaseMatch;
    public static LookupItemRelevance HighSelectionPriority;
    public static LookupItemRelevance NormalSelectionPriority;
    public static LookupItemRelevance NameCorrelation;
    public static LookupItemRelevance ClosestLocalVar;
    public static LookupItemRelevance Statistical;
    public static LookupItemRelevance LastChoice;
    public static LookupItemRelevance Contextual;
    public static LookupItemRelevance FromFullEvaluation;
    public static LookupItemRelevance Other;
    public static LookupItemRelevance None;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.LookupItemUtil : object {
    [CanBeNullAttribute]
public static ICodeCompletionResult EmulateFullCompletionResult(ITextControl textControl, IntellisenseManager intellisenseManager, CodeCompletionParameters parameters, EvaluationMode evaluationMode, LookupListSorting lookupListSorting, ICodeCompletionResult previousResult, ItemsByLocation`1<EvaluatedLookupItem> itemsByLocation, bool joinWithPreviousResult);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static TextLookupRanges GetRanges(ILookupItem lookupItem, Boolean& unknownItem);
    [ExtensionAttribute]
public static void SetRanges(ILookupItem lookupItem, TextLookupRanges ranges);
    [ExtensionAttribute]
[ObsoleteAttribute("MUST AVOID")]
public static void SetText(ILookupItem lookupItem, string text);
    [ExtensionAttribute]
public static IParameterInfoCandidatesProvider AsParameterInfoCandidatesProvider(ILookupItem item);
    [ExtensionAttribute]
public static void SetDisplayTypeName(ILookupItem lookupItem, RichText text);
    [ExtensionAttribute]
public static void SetDisableFormatter(ILookupItem lookupItem, bool disableFormatter);
    [ExtensionAttribute]
public static bool GetBind(ILookupItem lookupItem);
    [ExtensionAttribute]
public static IList`1<DiffFragment> GetInsertionData(ILookupItem lookupItem);
    [ExtensionAttribute]
[PureAttribute]
[CanBeNullAttribute]
public static DeclaredElementInstance GetPreferredDeclaredElement(ILookupItem lookupItem);
    [ExtensionAttribute]
[PureAttribute]
[CanBeNullAttribute]
public static TDeclaredElement GetPreferredDeclaredElement(ILookupItem lookupItem);
    [ExtensionAttribute]
[PureAttribute]
[NotNullAttribute]
public static IReadOnlyList`1<DeclaredElementInstance> GetAllDeclaredElements(ILookupItem lookupItem);
    [ExtensionAttribute]
[PureAttribute]
[NotNullAttribute]
public static IReadOnlyList`1<TDeclaredElement> GetAllDeclaredElements(ILookupItem lookupItem);
    [ExtensionAttribute]
public static HeadType GetHeadType(ILookupItem lookupItem);
    [ExtensionAttribute]
public static void SetHeadType(ILookupItem lookupItem, HeadType headType);
    [ExtensionAttribute]
public static TailType GetTailType(ILookupItem lookupItem);
    [ExtensionAttribute]
public static void SetTailType(ILookupItem lookupItem, TailType tailType);
    [ExtensionAttribute]
public static void SetBind(ILookupItem lookupItem, bool bind);
    [ExtensionAttribute]
public static void WithInitializedRanges(ILookupItem lookupItem, TextLookupRanges ranges, CodeCompletionContext context);
    [ExtensionAttribute]
public static bool HasQualifiedContext(ILookupItem lookupItem);
    [ExtensionAttribute]
public static QualifierKind GetQualifierKind(ILookupItem lookupItem);
    [ExtensionAttribute]
public static string GetQualifier(ILookupItem lookupItem);
    [ExtensionAttribute]
public static void SetQualifierKind(ILookupItem lookupItem, QualifierKind qualifierKind);
    [ExtensionAttribute]
public static PsiLanguageType GetLanguageType(ILookupItem lookupItem);
    [ExtensionAttribute]
public static string GetInsertText(ILookupItem lookupItem);
    [ExtensionAttribute]
public static string GetReplaceText(ILookupItem lookupItem);
    [ExtensionAttribute]
public static void EraseTailType(ILookupItem lookupItem);
    [ExtensionAttribute]
public static void EraseInsertText(ILookupItem lookupItem);
    [ExtensionAttribute]
public static void EraseReplaceText(ILookupItem lookupItem);
    [ExtensionAttribute]
public static void SetInsertText(ILookupItem lookupItem, string insertText);
    [ExtensionAttribute]
public static void SetReplaceText(ILookupItem lookupItem, string replaceText);
    [ExtensionAttribute]
public static void SetInsertCaretOffset(ILookupItem lookupItem, int insertCaretOffset);
    [ExtensionAttribute]
public static void SetReplaceCaretOffset(ILookupItem lookupItem, int replaceCaretOffset);
    [ExtensionAttribute]
[NotNullAttribute]
public static ILookupItem WithHighSelectionPriority(ILookupItem item);
    [ExtensionAttribute]
[NotNullAttribute]
public static ILookupItem WithLowSelectionPriority(ILookupItem item);
    [ExtensionAttribute]
[PureAttribute]
public static string GetText(ILookupItem lookupItem);
    [ExtensionAttribute]
public static void SetVisualReplaceRange(ILookupItem lookupItem, IRangeMarker visualReplaceMarker);
    [ExtensionAttribute]
public static void SubscribeAfterComplete(ILookupItem lookupItem, AfterCompletionHandler handler);
    [ExtensionAttribute]
public static bool GetRemovesTypeQualifier(ILookupItem lookupItem);
    [ExtensionAttribute]
public static void AdjustTextColor(ILookupItem lookupItem, JetRgbaColor textColor);
    [ExtensionAttribute]
public static void AdjustDisplayTypeName(ILookupItem lookupItem, RichText newTypeName);
    [ExtensionAttribute]
public static void SetHighlight(ILookupItem lookupItem, bool highlight);
    [ExtensionAttribute]
public static void PutData(ILookupItem lookupItem, Key`1<T> key, T data);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static T GetData(ILookupItem lookupItem, Key`1<T> key);
    [ExtensionAttribute]
public static bool HasKey(ILookupItem lookupItem, Key`1<T> key);
    [ExtensionAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
[PureAttribute]
public static IEnumerable`1<DeclaredElementInstance`1<IMethod>> GetMethods(ILookupItem lookupItem);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IPsiModule GetReferencedModule(ILookupItem lookupItem);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsBasicImportItem(ILookupItem lookupItem);
}
public enum JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.LookupListSorting : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("Alphabetically")]
public static LookupListSorting Alphabetically;
    [LocalizedDescriptionAttribute("By Relevance")]
public static LookupListSorting ByRelevance;
}
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.LookupUsagesCollector : CounterUsagesCollector {
    private EventLogGroup myGroup;
    private EventId1`1<Type> myAcceptedEvent;
    public LookupUsagesCollector(FeatureUsageLogger featureUsageLogger);
    public virtual EventLogGroup GetGroup();
    public void LogAccepted(ISolution solution, Type type);
}
public enum JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.PlacementLocation : Enum {
    public byte value__;
    public static PlacementLocation Top;
    public static PlacementLocation Bottom;
    public static PlacementLocation Generic;
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.PrefixMatcher : object {
    [NotNullAttribute]
private IdentifierMatcher myIdentifierMatcher;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [NotNullAttribute]
public string Prefix { get; }
    public IdentifierMatchingStyle IdentifierMatchingStyle { get; }
    public PrefixMatcher(string prefix, IdentifierMatchingStyle identifierMatchingStyle);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    public IdentifierMatchingStyle get_IdentifierMatchingStyle();
    [CanBeNullAttribute]
[PureAttribute]
public MatchingResult Match(string text);
    [NotNullAttribute]
[PureAttribute]
public PrefixMatcher WithPrefix(string newPrefix);
    public sealed virtual PrefixMatcher Clone();
    private sealed virtual override object System.ICloneable.Clone();
}
public enum JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.SelectionPriority : Enum {
    public byte value__;
    public static SelectionPriority High;
    public static SelectionPriority Normal;
    public static SelectionPriority Low;
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{DebugView,nq}")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Match.IndicesArray : ValueType {
    private ulong myBits;
    [CanBeNullAttribute]
private Int32[] myArray;
    public int Count { get; }
    [NotNullAttribute]
private Int32[] DebugView { get; }
    public IndicesArray(ulong bits);
    public IndicesArray(Int32[] array);
    public int get_Count();
    private Int32[] get_DebugView();
    [PureAttribute]
public static IndicesArray FromPrefixLength(int length);
    [PureAttribute]
public static IndicesArray FromArray(Int32[] matchingIndices);
    [PureAttribute]
public Enumerator GetEnumerator();
    [PureAttribute]
public RangesEnumerator GetRangesEnumerator();
    [PureAttribute]
public IndicesArray Shift(int shift);
    [PureAttribute]
private IndicesArray ShiftBits(int shift);
    [PureAttribute]
private IndicesArray ShiftToArray(int shift);
    [PureAttribute]
public IndicesArray Trim(int offset);
    [PureAttribute]
public IndicesArray Union(IndicesArray& other);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Match.MatchingResult : object {
    public IndicesArray MatchedIndices;
    public MatcherScore OriginalScore;
    public int AdjustedScore;
    public static MatchingResult Empty;
    public MatchingResult(IndicesArray& indices, int score, MatcherScore originalScore);
    public MatchingResult(int prefixLength, int score, MatcherScore originalScore);
    private static MatchingResult();
    [NotNullAttribute]
[PureAttribute]
public MatchingResult WithIndices(IndicesArray& indices);
    [NotNullAttribute]
[PureAttribute]
public MatchingResult Shift(int offset);
    [NotNullAttribute]
[PureAttribute]
public MatchingResult Trim(int offset);
    [PureAttribute]
public bool BetterThan(MatchingResult otherMatch);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.RelevanceSorter : object {
    [CompilerGeneratedAttribute]
private static ISpecificCompletionSorter <Instance>k__BackingField;
    private static LookupItemRelevance MatchSensitiveFlags;
    [NotNullAttribute]
public static ISpecificCompletionSorter Instance { get; }
    private static RelevanceSorter();
    [CompilerGeneratedAttribute]
public static ISpecificCompletionSorter get_Instance();
    public sealed virtual IEnumerable`1<MatchedLookupItem> SortInplace(List`1<MatchedLookupItem> matchedItems, ICompletionStatisticsManager statisticsManager);
    private static void SetStatisticalRelevance(ICompletionStatisticsManager statisticsManager, List`1<MatchedLookupItem> matchedItems);
    [NotNullAttribute]
private static object DebugRelevance(List`1<MatchedLookupItem> matchedItems);
    [PureAttribute]
private static Typos LookForTypos(IReadOnlyList`1<MatchedLookupItem> items);
    [CompilerGeneratedAttribute]
internal static void <DebugRelevance>g__FlushGroup|8_0(ulong nextRelevance, <>c__DisplayClass8_0& );
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.ReparsedCodeCompletionContext : object {
    [NotNullAttribute]
private string myNewText;
    [CompilerGeneratedAttribute]
private ITreeNode <TreeNode>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNode <RootNode>k__BackingField;
    [CompilerGeneratedAttribute]
private IReference <Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartOffsetInNewNode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NewRangeLength>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeTextRange <Range>k__BackingField;
    [CompilerGeneratedAttribute]
private IFile <OriginalFile>k__BackingField;
    [CanBeNullAttribute]
public ITreeNode TreeNode { get; private set; }
    public ITreeNode RootNode { get; private set; }
    [CanBeNullAttribute]
public IReference Reference { get; private set; }
    public int StartOffsetInNewNode { get; private set; }
    protected int NewRangeLength { get; }
    public TreeTextRange Range { get; }
    [NotNullAttribute]
protected IFile OriginalFile { get; }
    protected ReparsedCodeCompletionContext(IFile file, TreeTextRange range, string newText);
    [CompilerGeneratedAttribute]
public ITreeNode get_TreeNode();
    [CompilerGeneratedAttribute]
private void set_TreeNode(ITreeNode value);
    [CompilerGeneratedAttribute]
public ITreeNode get_RootNode();
    [CompilerGeneratedAttribute]
private void set_RootNode(ITreeNode value);
    [CompilerGeneratedAttribute]
public IReference get_Reference();
    [CompilerGeneratedAttribute]
private void set_Reference(IReference value);
    [CompilerGeneratedAttribute]
public int get_StartOffsetInNewNode();
    [CompilerGeneratedAttribute]
private void set_StartOffsetInNewNode(int value);
    [CompilerGeneratedAttribute]
protected int get_NewRangeLength();
    [CompilerGeneratedAttribute]
public TreeTextRange get_Range();
    [CompilerGeneratedAttribute]
protected IFile get_OriginalFile();
    protected abstract virtual IReparseContext GetReparseContext(IFile file, TreeTextRange range);
    protected virtual TreeTextRange GetRangeOfReference(int startOffsetInNewNode);
    protected virtual IReference FindReference(TreeTextRange referenceRange, ITreeNode treeNode);
    public void Init();
    [PureAttribute]
public virtual DocumentRange ToDocumentRange(TreeTextRange treeRange);
    [PureAttribute]
public TreeTextRange ToOriginalTreeRange(TreeTextRange treeRange);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.SimpleCompletingCharsProvider : object {
    public static SimpleCompletingCharsProvider Instance;
    private static SimpleCompletingCharsProvider();
    public sealed virtual CompletionAction IsCharacterAcceptable(char c, ISpecificCodeCompletionContext context, IContextBoundSettingsStore settingsStore);
    public LookupItemInsertType GetEnterAction(ISpecificCodeCompletionContext context, IContextBoundSettingsStore settingsStore);
    public LookupItemInsertType GetTabAction(ISpecificCodeCompletionContext context, IContextBoundSettingsStore settingsStore);
    public sealed virtual bool IsApplicable(ISpecificCodeCompletionContext context);
    public static CompletionAction IsCharacterAcceptableBasic(char c);
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.SpecificCodeCompletionContext : UserDataHolder {
    [CompilerGeneratedAttribute]
private CodeCompletionContext <BasicContext>k__BackingField;
    public string ContextId { get; }
    public PsiLanguageType Language { get; }
    public CodeCompletionContext BasicContext { get; }
    protected SpecificCodeCompletionContext(CodeCompletionContext context);
    public abstract virtual string get_ContextId();
    public virtual PsiLanguageType get_Language();
    [CompilerGeneratedAttribute]
public sealed virtual CodeCompletionContext get_BasicContext();
    public virtual IElementInstancePointer`1<IDeclaredElement> CreateElementPointer(DeclaredElementInstance`1<IDeclaredElement> instance);
    public virtual DeclaredElementsOrPointers CreatePointer(IDeclaredElement declaredElement);
    public virtual DeclaredElementsOrPointers CreatePointer(DeclaredElementInstance instance);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.SpecificCodeCompletionContextKey : Key`1<ISpecificCodeCompletionContext> {
    public static SpecificCodeCompletionContextKey Instance;
    private static SpecificCodeCompletionContextKey();
}
[NotNullAttribute]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.SyntaxToSemanticPrefixConverter : MulticastDelegate {
    public SyntaxToSemanticPrefixConverter(object object, IntPtr method);
    public virtual string Invoke(DocumentRange prefixRange);
    public virtual IAsyncResult BeginInvoke(DocumentRange prefixRange, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.TextLookupRanges : object {
    [NotNullAttribute]
private IRangeMarker myInsertRangeMarker;
    [NotNullAttribute]
private IRangeMarker myReplaceRangeMarker;
    [CompilerGeneratedAttribute]
private DocumentRange <ReplaceRange>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <InsertRange>k__BackingField;
    [CompilerGeneratedAttribute]
private PrefixTextRule <CustomPrefixRule>k__BackingField;
    public DocumentRange ReplaceRange { get; }
    public DocumentRange InsertRange { get; }
    [CanBeNullAttribute]
public PrefixTextRule CustomPrefixRule { get; }
    public TextLookupRanges(DocumentRange insertRange, DocumentRange replaceRange, PrefixTextRule customPrefixRule, bool isGreedyToLeft);
    [NotNullAttribute]
[PureAttribute]
public IRangeMarker CreateVisualReplaceRangeMarker();
    [CompilerGeneratedAttribute]
public DocumentRange get_ReplaceRange();
    [CompilerGeneratedAttribute]
public DocumentRange get_InsertRange();
    [CompilerGeneratedAttribute]
public PrefixTextRule get_CustomPrefixRule();
    [NotNullAttribute]
[PureAttribute]
public TextLookupRanges WithInsertRange(DocumentRange insertRange);
    [NotNullAttribute]
[PureAttribute]
public TextLookupRanges WithReplaceRange(DocumentRange replaceRange);
    [NotNullAttribute]
[PureAttribute]
public TextLookupRanges ExtendReplaceRangeRight(DocumentRange replaceRange);
    [NotNullAttribute]
[PureAttribute]
public TextLookupRanges WithCustomPrefixRule(PrefixTextRule customPrefixRule);
    [NotNullAttribute]
[PureAttribute]
public PrefixTextRule GetPrefixTextRule();
    [NotNullAttribute]
[PureAttribute]
public string GetInitialPrefixText(DocumentOffset effectiveCaretOffset);
    [PureAttribute]
[ObsoleteAttribute("Use 'InsertRange' instead please")]
public DocumentRange GetPrefixRange(CodeCompletionContext context);
    [PureAttribute]
public DocumentRange GetAcceptRange(DocumentRange enteredPrefixRange, LookupItemInsertType insertType);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.IntellisenseAvailabilityService : object {
    private ISettingsStore mySettingsStore;
    private CodeCompletionSettingsService myCodeCompletionSettings;
    private IntellisenseSupportedMonitor myIntellisenseSupportedMonitor;
    private ILogger myLogger;
    private ICollection`1<IManualCompletionIsDisabled> myCodeCompletionDisablers;
    private ICollection`1<IAutomaticCompletionIsDisabled> myAutoCompletionDisablers;
    private ICollection`1<IParameterInfoIsDisabled> myParameterInfoDisablers;
    public IntellisenseAvailabilityService(ISettingsStore settingsStore, CodeCompletionSettingsService codeCompletionSettings, IntellisenseSupportedMonitor intellisenseSupportedMonitor, IEnumerable`1<IManualCompletionIsDisabled> codeCompletionDisablers, IEnumerable`1<IAutomaticCompletionIsDisabled> autoCompletionDisablers, IEnumerable`1<IParameterInfoIsDisabled> parameterInfoDisablers, ILogger logger);
    public sealed virtual bool IsIntellisenseSupported(ITextControl textControl);
    public virtual bool IsIntellisenseSupported(ITextControl textControl, IContextBoundSettingsStore boundStore);
    public sealed virtual bool IsManualCompletionAvailable(ITextControl textControl);
    public sealed virtual bool IsAutomaticCompletionAvailable(ITextControl textControl);
    public sealed virtual bool IsParameterInfoAvailable(ITextControl textControl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.IntellisenseManager : object {
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiServices <PsiServices>k__BackingField;
    [CompilerGeneratedAttribute]
private IShellLocks <Locks>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeCompletionSettingsService <CompletionSettings>k__BackingField;
    private ILanguageManager myLanguageManager;
    private IntellisensePartsContainer myIntellisenseParts;
    private LookupItemsOwnerFactory myLookupItemsOwnerFactory;
    protected IEnumerable`1<IAutomaticCodeCompletionStrategy> AutomaticAutomaticCodeCompletionStrategies;
    [CompilerGeneratedAttribute]
private ILogger <CodeCompletionLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingsStore <SettingsStore>k__BackingField;
    public ISolution Solution { get; }
    public IPsiServices PsiServices { get; }
    public IShellLocks Locks { get; }
    public CodeCompletionSettingsService CompletionSettings { get; }
    public ILogger CodeCompletionLogger { get; }
    [ObsoleteAttribute("Pass context bound settings store instead")]
public ISettingsStore SettingsStore { get; }
    public IntellisenseManager(ISolution solution, IPsiServices psiServices, IShellLocks locks, ISettingsStore settingsStore, ILanguageManager languageManager, IntellisensePartsContainer intellisenseParts, IEnumerable`1<IAutomaticCodeCompletionStrategy> automaticCodeCompletionStrategies, LookupItemsOwnerFactory lookupItemsOwnerFactory, CodeCompletionSettingsService completionSettings, ILogger logger);
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    [CompilerGeneratedAttribute]
public IPsiServices get_PsiServices();
    [CompilerGeneratedAttribute]
public IShellLocks get_Locks();
    [CompilerGeneratedAttribute]
public CodeCompletionSettingsService get_CompletionSettings();
    [CompilerGeneratedAttribute]
public ILogger get_CodeCompletionLogger();
    [CompilerGeneratedAttribute]
public ISettingsStore get_SettingsStore();
    public ICodeCompletionResult GetCompletionResult(CodeCompletionParameters parameters, ITextControl textControl);
    private static bool ContextFilter(ContextAndFactory x, ContextAndFactory y);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.IntellisenseManager/<GetStrategies>d__26")]
public virtual IEnumerable`1<ValueTuple`2<IAutomaticCodeCompletionStrategy, bool>> GetStrategies(ITextControl textControl, char c);
    private CodeCompletionContext CreateCodeCompletionContext(IntellisenseManager completionManager, IFile psiFile, IPsiDocumentRangeView psiDocumentRangeView, CodeCompletionParameters parameters, ITextControl textControl);
    public ICodeCompletionResult GetCompletionResult(CodeCompletionParameters parameters, ITextControl textControl, IReadOnlyList`1<ISpecificCodeCompletionContext> contexts, ISpecificCompletionSorter sorter);
    private IReadOnlyList`1<ICompletionListFilter> GetFilters(IReadOnlyList`1<ISpecificCodeCompletionContext> contexts, IContextBoundSettingsStore settingsStore, ICodeCompletionResult previousCompletionResult, ItemsCollector collector);
    public ISpecificCompletionSorter GetSpecificCodeCompletionSorter(IContextBoundSettingsStore settingsStore);
    public List`1<ISpecificCodeCompletionContext> SpecificCodeCompletionContexts(CodeCompletionParameters parameters, ITextControl textControl);
    public ILookupItemSelectionStrategy GetSelectionStrategy(IContextBoundSettingsStore settingsStore);
    private static CompletionAction GetCharBehavior(char c, IContextBoundSettingsStore boundSettingsStore, IReadOnlyList`1<ProviderWithContext`1<ICompletingCharsProvider>> providerWithContexts);
    private static AutocompletionBehaviour MergeAutomaticBehaviourWith(AutocompletionBehaviour initial, AutocompletionBehaviour provided);
    private static LookupFocusBehaviour MergeFocusBehaviourWith(LookupFocusBehaviour initial, LookupFocusBehaviour provided);
    [CompilerGeneratedAttribute]
internal static bool <ContextFilter>g__IsPossibleCodeBehind|25_0(IFile file);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.CodeCompletion.IntellisenseSupportedEx : object {
    [ExtensionAttribute]
public static IIntellisenseSupportedResult WithExtraRanges(IIntellisenseSupportedResult intellisenseSupported, ICollection`1<DocumentRange> documentRanges);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.IntellisenseSupportedMonitor : object {
    private ILogger myLogger;
    private IPsiServices myPsiServices;
    private ICollection`1<LanguageSpecificCodeCompletionManager> myCodeCompletionManagers;
    private Dictionary`2<ITextControl, IIntellisenseSupportedResult> myIntellisenseSupportedPerTextControl;
    private Dictionary`2<ITextControl, LifetimeDefinition> myUpdateTextControlRequests;
    private HashSet`1<PsiLanguageType> myDisabledIntellisenseLanguages;
    private Reasons`1<string> mySuppressReasons;
    public ISignal`1<ITextControl> ForceReanalyzeDocument;
    public IntellisenseSupportedMonitor(IPsiServices psiServices, ITextControlManager textControlManager, ISettingsStore settingsStore, CodeCompletionSettingsService codeCompletionSettingsService, IEnumerable`1<LanguageSpecificCodeCompletionManager> languageSpecificCodeCompletionManagers, ISolutionLoadTasksScheduler solutionLoadTasksScheduler, ChangeManager changeManager, DocumentChangeManager documentChangeManager, ILogger logger);
    public void Disable(Lifetime lifetime, string reason);
    [NotNullAttribute]
public IIntellisenseSupportedResult GetIntellisenseSupported(ITextControl textControl);
    public bool IsIntellisenseSupportedAtCursorPosition(ITextControl textControl);
    private void UpdateIntellisenseLanguageOptions(Lifetime monitorLifetime, IntellisenseEnabledType intellisenseEnabled, IContextBoundSettingsStore settingsStore);
    private void ScheduleAllActiveTextControlsUpdate(Lifetime lifetime, string reason);
    private void ScheduleTextControlsUpdate(Lifetime lifetime, ITextControl[] textControls);
    private void OnPsiFilesCommitted();
    private static string GetReadableName(ITextControl textControl);
    [CompilerGeneratedAttribute]
private void <ScheduleTextControlsUpdate>b__14_0();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.IntellisenseSupportedResult : object {
    public static IIntellisenseSupportedResult Unknown;
    public static IIntellisenseSupportedResult No;
    public static IIntellisenseSupportedResult Everywhere;
    private IReadOnlyList`1<IRangeMarker> myRangeMarkers;
    [CompilerGeneratedAttribute]
private IntellisenseSupportedVerdict <Verdict>k__BackingField;
    public IntellisenseSupportedVerdict Verdict { get; }
    public IntellisenseSupportedResult(IntellisenseSupportedVerdict verdict, IEnumerable`1<DocumentRange> ranges);
    public IntellisenseSupportedResult(IntellisenseSupportedVerdict verdict, IReadOnlyList`1<IRangeMarker> rangeMarkers);
    private static IntellisenseSupportedResult();
    [CompilerGeneratedAttribute]
public sealed virtual IntellisenseSupportedVerdict get_Verdict();
    public sealed virtual IReadOnlyList`1<IRangeMarker> GetNotSupportedRanges();
    public virtual string ToString();
}
public enum JetBrains.ReSharper.Feature.Services.CodeCompletion.IntellisenseSupportedVerdict : Enum {
    public int value__;
    public static IntellisenseSupportedVerdict UNKNOWN;
    public static IntellisenseSupportedVerdict NO;
    public static IntellisenseSupportedVerdict YES;
    public static IntellisenseSupportedVerdict PARTIALLY;
}
[RegisterHighlighterAttribute("ReSharper Internal Intellisense Supported Unknown")]
[RegisterHighlighterAttribute("ReSharper Internal Intellisense Supported")]
[RegisterHighlighterAttribute("ReSharper Internal Intellisense Not Supported")]
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Feature.Services.CodeCompletion.Internal.HighlightIntellisenseSupportedRangesInternal : object {
    private static string UnknownHighlighterId;
    private static string YesHighlighterId;
    private static string NoHighlighterId;
    private static string Key;
    private ISolution mySolution;
    private IntellisenseSupportedMonitor myIntellisenseSupportedMonitor;
    private IDocumentMarkupManager myDocumentMarkupManager;
    public Property`1<bool> IsOn;
    public HighlightIntellisenseSupportedRangesInternal(ISolution solution, IntellisenseSupportedMonitor intellisenseSupportedMonitor, ITextControlManager textControlManager, IDocumentMarkupManager documentMarkupManager);
    private void ClearRanges(IDocument document);
    private void HighlightRanges(ITextControl textControl);
}
[ActionAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "ToggleIntellisenseSupportedRangesHighlightingAction_Text")]
internal class JetBrains.ReSharper.Feature.Services.CodeCompletion.Internal.ToggleHighlightIntellisenseSupportedRangesAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Internal.ZoneMarker : object {
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.IReparseContext {
    public abstract virtual ReparseResult GetReparseResult(string newText);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.ISmartCompletionSymbolFilter {
    public abstract virtual ISymbolInfo IsSymbolSuitable(ISymbolInfo symbolInfo, Nullable`1& withTypeInference);
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.ActionWithLookup : object {
    [CanBeNullAttribute]
[PureAttribute]
protected ILookup GetCurrentLookup(ISolution solution);
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public abstract virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.AsyncLookupParameterInfoHandler : object {
    private Lifetime myLifetime;
    private bool myIsAutomatic;
    private ISolution mySolution;
    private EscapeHandler myEscapeHandler;
    private LookupBase myLookup;
    [NotNullAttribute]
private IProperty`1<IParameterInfoContext> myContext;
    private IWindowsHookManager myWindowsHookManager;
    private LifetimeDefinition myLifetimeDefinition;
    [CompilerGeneratedAttribute]
private ITextControl <TextControl>k__BackingField;
    public IProperty`1<IParameterInfoContext> Context { get; }
    public HideFlags HideFlags { get; }
    public ITextControl TextControl { get; }
    private AsyncLookupParameterInfoHandler(Lifetime lifetime, LookupBase lookup, bool automatic);
    public static void DoWithHandler(Lifetime lifetime, LookupBase lookup, bool automatic, Action`1<AsyncLookupParameterInfoHandler> afterCreated);
    private void EscapePressed();
    private void EvaluateContext(Action`1<AsyncLookupParameterInfoHandler> afterCreated);
    private void WindowClosed(object sender, EventArgs e);
    private void CurrentItemChanged(object sender, EventArgs e);
    public sealed virtual void Dispose();
    public sealed virtual IProperty`1<IParameterInfoContext> get_Context();
    public sealed virtual HideFlags get_HideFlags();
    public sealed virtual PopupWindowContextSource CreatePopupWindowContext();
    [CompilerGeneratedAttribute]
public sealed virtual ITextControl get_TextControl();
}
[ActionAttribute("IntelliSense_ClearFilters", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ClearFiltersActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.ClearFiltersAction : ActionWithLookup {
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterActionBase : ActionWithLookup {
    [NotNullAttribute]
public string FilterId { get; }
    public bool Reverse { get; }
    public abstract virtual string get_FilterId();
    public virtual bool get_Reverse();
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    [CompilerGeneratedAttribute]
private bool <Update>b__4_0(ICompletionListFilter f);
    [CompilerGeneratedAttribute]
private bool <Execute>b__5_0(ICompletionListFilter f);
}
[ActionAttribute("IntelliSense_FilterAggregate", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterCustomActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterAggregateAction : FilterActionBase {
    public string FilterId { get; }
    public virtual string get_FilterId();
}
[ActionAttribute("IntelliSense_FilterAggregate_Invert", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterCustomInvertActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterAggregateInvertAction : FilterActionBase {
    public string FilterId { get; }
    public bool Reverse { get; }
    public virtual string get_FilterId();
    public virtual bool get_Reverse();
}
[ActionAttribute("IntelliSense_FilterClasses", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterClassesActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterClassesAction : FilterActionBase {
    public string FilterId { get; }
    public virtual string get_FilterId();
}
[ActionAttribute("IntelliSense_FilterClasses_Invert", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterClassesInvertActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterClassesInvertAction : FilterActionBase {
    public string FilterId { get; }
    public bool Reverse { get; }
    public virtual string get_FilterId();
    public virtual bool get_Reverse();
}
[ActionAttribute("IntelliSense_FilterDelegates", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterDelegatesActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterDelegatesAction : FilterActionBase {
    public string FilterId { get; }
    public virtual string get_FilterId();
}
[ActionAttribute("IntelliSense_FilterDelegates_Invert", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterDelegatesInvertActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterDelegatesInvertAction : FilterActionBase {
    public string FilterId { get; }
    public bool Reverse { get; }
    public virtual string get_FilterId();
    public virtual bool get_Reverse();
}
[ActionAttribute("IntelliSense_FilterEnums", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterEnumsActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterEnumsAction : FilterActionBase {
    public string FilterId { get; }
    public virtual string get_FilterId();
}
[ActionAttribute("IntelliSense_FilterEnums_Invert", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterEnumsInvertActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterEnumsInvertAction : FilterActionBase {
    public string FilterId { get; }
    public bool Reverse { get; }
    public virtual string get_FilterId();
    public virtual bool get_Reverse();
}
[ActionAttribute("IntelliSense_FilterEvents", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterEventActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterEventsAction : FilterActionBase {
    public string FilterId { get; }
    public virtual string get_FilterId();
}
[ActionAttribute("IntelliSense_FilterEvents_Invert", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterEventInvertActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterEventsInvertAction : FilterActionBase {
    public string FilterId { get; }
    public bool Reverse { get; }
    public virtual string get_FilterId();
    public virtual bool get_Reverse();
}
[ActionAttribute("IntelliSense_FilterExtensionMethods", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterExtensionMethodsActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterExtensionMethodsAction : FilterActionBase {
    public string FilterId { get; }
    public virtual string get_FilterId();
}
[ActionAttribute("IntelliSense_FilterExtensionMethods_Invert", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterExtensionMethodsInvertActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterExtensionMethodsInvertAction : FilterActionBase {
    public string FilterId { get; }
    public bool Reverse { get; }
    public virtual string get_FilterId();
    public virtual bool get_Reverse();
}
[ActionAttribute("IntelliSense_FilterFields", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterFieldsActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterFieldsAction : FilterActionBase {
    public string FilterId { get; }
    public virtual string get_FilterId();
}
[ActionAttribute("IntelliSense_FilterFields_Invert", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterFieldsInvertActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterFieldsInvertAction : FilterActionBase {
    public string FilterId { get; }
    public bool Reverse { get; }
    public virtual string get_FilterId();
    public virtual bool get_Reverse();
}
[ActionAttribute("IntelliSense_FilterInterfaces", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterInterfacesActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterInterfacesAction : FilterActionBase {
    public string FilterId { get; }
    public virtual string get_FilterId();
}
[ActionAttribute("IntelliSense_FilterInterfaces_Invert", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterInterfacesInvertActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterInterfacesInvertAction : FilterActionBase {
    public string FilterId { get; }
    public bool Reverse { get; }
    public virtual string get_FilterId();
    public virtual bool get_Reverse();
}
[ActionAttribute("IntelliSense_FilterInternal", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterInternalSymbolsActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterInternalAction : FilterActionBase {
    public string FilterId { get; }
    public virtual string get_FilterId();
}
[ActionAttribute("IntelliSense_FilterInternal_Invert", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterInternalSymbolsInvertActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterInternalInvertAction : FilterActionBase {
    public string FilterId { get; }
    public bool Reverse { get; }
    public virtual string get_FilterId();
    public virtual bool get_Reverse();
}
[ActionAttribute("IntelliSense_FilterKeyword", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterKeywordsActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterKeywordAction : FilterActionBase {
    public string FilterId { get; }
    public virtual string get_FilterId();
}
[ActionAttribute("IntelliSense_FilterKeyword_Invert", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterKeywordsInvertActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterKeywordInvertAction : FilterActionBase {
    public string FilterId { get; }
    public bool Reverse { get; }
    public virtual string get_FilterId();
    public virtual bool get_Reverse();
}
[ActionAttribute("IntelliSense_FilterLocalVariables", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterLocalVariablesActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterLocalVariablesAction : FilterActionBase {
    public string FilterId { get; }
    public virtual string get_FilterId();
}
[ActionAttribute("IntelliSense_FilterLocalVariables_Invert", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterLocalVariablesInvertActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterLocalVariablesInvertAction : FilterActionBase {
    public string FilterId { get; }
    public bool Reverse { get; }
    public virtual string get_FilterId();
    public virtual bool get_Reverse();
}
[ActionAttribute("IntelliSense_FilterMethods", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterMethodsActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterMethodsAction : FilterActionBase {
    public string FilterId { get; }
    public virtual string get_FilterId();
}
[ActionAttribute("IntelliSense_FilterMethods_Invert", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterMethodsInvertActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterMethodsInvertAction : FilterActionBase {
    public string FilterId { get; }
    public bool Reverse { get; }
    public virtual string get_FilterId();
    public virtual bool get_Reverse();
}
[ActionAttribute("IntelliSense_FilterNamespaces", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterNamespacesActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterNamespacesAction : FilterActionBase {
    public string FilterId { get; }
    public virtual string get_FilterId();
}
[ActionAttribute("IntelliSense_FilterNamespaces_Invert", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterNamespacesInvertActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterNamespacesInvertAction : FilterActionBase {
    public string FilterId { get; }
    public bool Reverse { get; }
    public virtual string get_FilterId();
    public virtual bool get_Reverse();
}
[ActionAttribute("IntelliSense_FilterParameters", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterParametersActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterParametersAction : FilterActionBase {
    public string FilterId { get; }
    public virtual string get_FilterId();
}
[ActionAttribute("IntelliSense_FilterParameters_Invert", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterParametersInvertActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterParametersInvertAction : FilterActionBase {
    public string FilterId { get; }
    public bool Reverse { get; }
    public virtual string get_FilterId();
    public virtual bool get_Reverse();
}
[ActionAttribute("IntelliSense_FilterPrivate", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterPrivateSymbolsActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterPrivateAction : FilterActionBase {
    public string FilterId { get; }
    public virtual string get_FilterId();
}
[ActionAttribute("IntelliSense_FilterPrivate_Invert", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterPrivateSymbolsInvertActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterPrivateInvertAction : FilterActionBase {
    public string FilterId { get; }
    public bool Reverse { get; }
    public virtual string get_FilterId();
    public virtual bool get_Reverse();
}
[ActionAttribute("IntelliSense_FilterProperties", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterPropertiesActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterPropertiesAction : FilterActionBase {
    public string FilterId { get; }
    public virtual string get_FilterId();
}
[ActionAttribute("IntelliSense_FilterProperties_Invert", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterPropertiesInvertActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterPropertiesInvertAction : FilterActionBase {
    public string FilterId { get; }
    public bool Reverse { get; }
    public virtual string get_FilterId();
    public virtual bool get_Reverse();
}
[ActionAttribute("IntelliSense_FilterProtected", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterProtectedSymbolsActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterProtectedAction : FilterActionBase {
    public string FilterId { get; }
    public virtual string get_FilterId();
}
[ActionAttribute("IntelliSense_FilterProtected_Invert", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterProtectedSymbolsInvertActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterProtectedInvertAction : FilterActionBase {
    public string FilterId { get; }
    public bool Reverse { get; }
    public virtual string get_FilterId();
    public virtual bool get_Reverse();
}
[ActionAttribute("IntelliSense_FilterPublic", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterPublicSymbolsActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterPublicAction : FilterActionBase {
    public string FilterId { get; }
    public virtual string get_FilterId();
}
[ActionAttribute("IntelliSense_FilterPublic_Invert", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterPublicSymbolsInvertActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterPublicInvertAction : FilterActionBase {
    public string FilterId { get; }
    public bool Reverse { get; }
    public virtual string get_FilterId();
    public virtual bool get_Reverse();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FiltersChangedHandler : MulticastDelegate {
    public FiltersChangedHandler(object object, IntPtr method);
    public virtual void Invoke(List`1<ICompletionListFilter> activeFilters);
    public virtual IAsyncResult BeginInvoke(List`1<ICompletionListFilter> activeFilters, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ActionAttribute("IntelliSense_FilterStructs", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterStructsActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterStructsAction : FilterActionBase {
    public string FilterId { get; }
    public virtual string get_FilterId();
}
[ActionAttribute("IntelliSense_FilterStructs_Invert", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterStructsInvertActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterStructsInvertAction : FilterActionBase {
    public string FilterId { get; }
    public bool Reverse { get; }
    public virtual string get_FilterId();
    public virtual bool get_Reverse();
}
[ActionAttribute("IntelliSense_FilterTemplate", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterLivePostfixTemplatesActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterTemplatesAction : FilterActionBase {
    public string FilterId { get; }
    public virtual string get_FilterId();
}
[ActionAttribute("IntelliSense_FilterTemplate_Invert", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterLivePostfixTemplatesInvertActionText")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.FilterTemplatesInvertAction : FilterActionBase {
    public string FilterId { get; }
    public bool Reverse { get; }
    public virtual string get_FilterId();
    public virtual bool get_Reverse();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.ILookupSummaryTrackerManager {
    public abstract virtual void TrackWindow(LookupBase lookup);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.ILookupWindow {
    public JetPhysicalRect CurrentItemBounds { get; }
    public Rectangle Bounds { get; }
    public ILookup Lookup { get; }
    public abstract virtual JetPhysicalRect get_CurrentItemBounds();
    public abstract virtual Rectangle get_Bounds();
    public abstract virtual ILookup get_Lookup();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ShowBefore(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ShowBefore(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ShowAfter(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ShowAfter(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WindowClose(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WindowClose(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WindowHidden(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WindowHidden(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Scrolled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Scrolled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WindowResized(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WindowResized(EventHandler value);
    public abstract virtual void MoveSelectionPageUp();
    public abstract virtual void MoveSelectionPageDown();
    public abstract virtual void MoveSelectionDown();
    public abstract virtual void MoveSelectionUp();
    public abstract virtual void ShowProgressAnimation(bool delayed);
    public abstract virtual void HideProgressAnimation();
    public abstract virtual void ShowFeatureSuggestion(ICodeCompletionFeatureSuggestion featureSuggestion);
    public abstract virtual void HandleActiveFiltersChanged(IEnumerable`1<ICompletionListFilter> activeFilters);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupActions : object {
    [NotNullAttribute]
private IActionManager myActionManager;
    [NotNullAttribute]
private TextControlTypingHandlers myTypingHandlers;
    [NotNullAttribute]
private LookupBase myLookup;
    public LookupActions(IActionManager actionManager, TextControlTypingHandlers typingHandlers, LookupBase lookup);
    public void AddActionHandlers(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private void <AddActionHandlers>b__4_1(IDataContext _);
    [CompilerGeneratedAttribute]
private void <AddActionHandlers>b__4_3(IDataContext _);
    [CompilerGeneratedAttribute]
private void <AddActionHandlers>b__4_5(IDataContext _);
    [CompilerGeneratedAttribute]
private void <AddActionHandlers>b__4_7(IDataContext _);
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupBase : ConcurrentUserDataHolder {
    [NotNullAttribute]
protected ITextControl myTextControl;
    protected ISolution mySolution;
    protected ISpecificCompletionSorter mySorter;
    [NotNullAttribute]
protected LookupWindowOptions myOptions;
    [CanBeNullAttribute]
protected ItemsByLocation`1<EvaluatedLookupItem> myItemsByLocation;
    [CanBeNullAttribute]
protected FilteredLookupItems myCurrentItems;
    [CanBeNullAttribute]
protected ContextTracker myPrefixTracker;
    [NotNullAttribute]
protected Property`1<bool> myInterruptCurrentItemsEvaluation;
    [NotNullAttribute]
private IShellLocks myShellLocks;
    [CompilerGeneratedAttribute]
private ILookupResolveContext <LookupResolveContext>k__BackingField;
    [CompilerGeneratedAttribute]
private CompletionHandler ItemCompleted;
    public ISimpleSignal SelectionChangedWithKeys;
    [NotNullAttribute]
public ILookupResolveContext LookupResolveContext { get; protected set; }
    public ITextControl TextControl { get; }
    public IEnumerable`1<ILookupItem> Items { get; }
    public IEnumerable`1<ILookupItem> FilteredItems { get; }
    [NotNullAttribute]
public LookupWindowOptions Options { get; public set; }
    public bool IsClosed { get; }
    public ILookupWindow Window { get; }
    public Nullable`1<LookupItemAcceptanceContext> LookupItemAcceptanceContext { get; }
    public string Prefix { get; }
    public ISolution Solution { get; }
    public bool InterruptCurrentItemsEvaluation { get; public set; }
    public List`1<ICompletionListFilter> ActiveFilters { get; public set; }
    protected LookupBase(ITextControl textControl, ISolution solution, LookupWindowOptions options, ISpecificCompletionSorter sorter);
    [CompilerGeneratedAttribute]
public ILookupResolveContext get_LookupResolveContext();
    [CompilerGeneratedAttribute]
protected void set_LookupResolveContext(ILookupResolveContext value);
    public abstract virtual void Dispose();
    public sealed virtual ITextControl get_TextControl();
    protected abstract virtual void SetSelection(LookupSelection value, bool doNotScrollIfPossible);
    public abstract virtual LookupSelection GetSelection();
    public sealed virtual IEnumerable`1<ILookupItem> get_Items();
    public sealed virtual IEnumerable`1<ILookupItem> get_FilteredItems();
    public LookupWindowOptions get_Options();
    public void set_Options(LookupWindowOptions value);
    public abstract virtual bool get_IsClosed();
    public abstract virtual ILookupWindow get_Window();
    public sealed virtual void OnActiveFiltersChanged(IEnumerable`1<ICompletionListFilter> activeFilters);
    public Nullable`1<LookupItemAcceptanceContext> get_LookupItemAcceptanceContext();
    public sealed virtual string get_Prefix();
    public sealed virtual ISolution get_Solution();
    public bool get_InterruptCurrentItemsEvaluation();
    public void set_InterruptCurrentItemsEvaluation(bool value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_BeforeShownItemsUpdated(ItemsHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BeforeShownItemsUpdated(ItemsHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CurrentItemChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CurrentItemChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ActiveFiltersChanged(FiltersChangedHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ActiveFiltersChanged(FiltersChangedHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Typing(EventHandler`1<EventArgs`1<char>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Typing(EventHandler`1<EventArgs`1<char>> value);
    public abstract virtual bool Complete(Suffix suffix, LookupItemInsertType lookupItemInsertType);
    public abstract virtual void ShowLookup(Action continuation);
    public abstract virtual void Close();
    public abstract virtual void NotifyTyping(char c);
    public virtual void NotifyAfterTyping(char c);
    public abstract virtual List`1<ICompletionListFilter> get_ActiveFilters();
    public abstract virtual void set_ActiveFilters(List`1<ICompletionListFilter> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ItemCompleted(CompletionHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ItemCompleted(CompletionHandler value);
    [CanBeNullAttribute]
protected FilteredLookupItems EvaluateCurrentItems(string prefix, IdentifierMatchingStyle identifierMatchingStyle, IReadOnlyList`1<ICompletionListFilter> filters);
    [CanBeNullAttribute]
public sealed virtual LookupItemCompletor CreateCompletor(Suffix suffix, LookupItemInsertType lookupItemInsertType);
    public bool ItemCompletedSubscribed();
    public sealed virtual CompletionAction IsCharacterAcceptable(char c);
    public sealed virtual bool HasContinuationInCurrentItemsList(char c);
    public sealed virtual IEnumerable`1<ILookupItem> GetContinuation(char c);
    public bool HasCurrentItems();
    public sealed virtual bool ApplyItemOnTyping(char c);
    public virtual void MarkManualSelectionChange();
    public abstract virtual void WaitForCurrentItems();
    [CompilerGeneratedAttribute]
private void <CreateCompletor>b__67_0(object <p0>, ILookupItem <p1>, Suffix <p2>, LookupItemInsertType <p3>);
    [CompilerGeneratedAttribute]
private void <CreateCompletor>b__67_1(object sender, ILookupItem lookupItem, Suffix s, LookupItemInsertType insertType);
}
internal class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupItemAnchoringRect : AnchoringRect {
    [CompilerGeneratedAttribute]
private LookupBase <Lookup>k__BackingField;
    [NotNullAttribute]
public LookupBase Lookup { get; }
    public LookupItemAnchoringRect(Lifetime lifetime, LookupBase lookup);
    private void UpdateAnchor(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
public LookupBase get_Lookup();
    protected void UpdateAnchor();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupPopupWindowContext : PopupWindowContext {
    [NotNullAttribute]
private LookupBase myLookup;
    private IWindowsHookManager myWindowsHookManager;
    private LookupAndParameterInfoLayoutersManager myLookupAndParameterInfoLayoutersManager;
    public LookupPopupWindowContext(Lifetime lifetime, LookupBase lookup, IActionManager actionManager, IWindowsHookManager windowsHookManager, LookupAndParameterInfoLayoutersManager lookupAndParameterInfoLayoutersManager);
    private void BeforeWindowClosed(object sender, EventArgs e);
    private void CurrentItemChanged(object sender, EventArgs e);
    private void Scrolled(object sender, EventArgs e);
    public virtual IPopupLayouter CreateLayouter(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_1();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_2();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_3();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_4();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_5();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_6();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_7();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupShimPopupWindowContext : object {
    private IPopupWindowContext myPopupWindowContext;
    [CompilerGeneratedAttribute]
private EventHandler AnyOtherAction;
    [CompilerGeneratedAttribute]
private EventHandler Deactivated;
    [CompilerGeneratedAttribute]
private EventHandler EscapePressed;
    [CompilerGeneratedAttribute]
private EventHandler Scroll;
    [CompilerGeneratedAttribute]
private EventHandler SelectionChanged;
    public IPopupWindowContext PopupWindowContext { get; public set; }
    public IPopupWindowContext get_PopupWindowContext();
    public void set_PopupWindowContext(IPopupWindowContext value);
    private void OnAnyOtherAction(object sender, EventArgs args);
    private void OnDeactivated(object sender, EventArgs args);
    private void OnEscapePressed(object sender, EventArgs args);
    private void OnScroll(object sender, EventArgs args);
    private void OnSelectionChanged(object sender, EventArgs args);
    public sealed virtual IPopupLayouter CreateLayouter(Lifetime lifetime);
    public sealed virtual void FireAnyOtherAction();
    public sealed virtual void FireDeactivated();
    public sealed virtual void FireScroll();
    public sealed virtual void FireSelectionChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void add_AnyOtherAction(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AnyOtherAction(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Deactivated(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Deactivated(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_EscapePressed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_EscapePressed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Scroll(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Scroll(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SelectionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SelectionChanged(EventHandler value);
    public void Dispose();
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupSummaryTrackerManagerBase : object {
    public virtual void TrackWindow(LookupBase lookup);
}
public static class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupSummaryUtils : object {
    [CanBeNullAttribute]
public static RichTextBlock GetTooltipText(ILookupItem lookupItem, ITextControl textControl, ISolution solution);
}
[ActionAttribute("IntelliSense_NextFilter", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "NextFilterActionText")]
[VsOverrideActionAttribute("({1496a755-94de-11d0-8c3f-00c04fc2aae2}:118)")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.NextFilterAction : ActionWithLookup {
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("IntelliSense_PreviousFilter", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "PreviousFilterActionText")]
[VsOverrideActionAttribute("({1496a755-94de-11d0-8c3f-00c04fc2aae2}:117)")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.PrevFilterAction : ActionWithLookup {
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.LookupItems.Behavior.KeywordBehavior : TextualBehavior {
    [NotNullAttribute]
protected KeywordInfo Info { get; }
    public KeywordBehavior(KeywordInfo keywordInfo);
    protected KeywordInfo get_Info();
    protected virtual void AfterAccept(TextualCompletionResult textualCompletionResult, LookupItemAcceptContext acceptContext);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.LookupItems.Behavior.LookupItemAcceptContext : object {
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextControl <TextControl>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <EnteredPrefixRange>k__BackingField;
    [CompilerGeneratedAttribute]
private LookupItemInsertType <InsertionType>k__BackingField;
    [CompilerGeneratedAttribute]
private Suffix <Suffix>k__BackingField;
    [NotNullAttribute]
public ISolution Solution { get; }
    [NotNullAttribute]
public ITextControl TextControl { get; }
    [NotNullAttribute]
public IDocument Document { get; }
    public DocumentRange EnteredPrefixRange { get; }
    public LookupItemInsertType InsertionType { get; }
    [NotNullAttribute]
public Suffix Suffix { get; }
    public LookupItemAcceptContext(ISolution solution, ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertionType, Suffix suffix);
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    [CompilerGeneratedAttribute]
public ITextControl get_TextControl();
    public IDocument get_Document();
    [CompilerGeneratedAttribute]
public DocumentRange get_EnteredPrefixRange();
    [CompilerGeneratedAttribute]
public LookupItemInsertType get_InsertionType();
    [CompilerGeneratedAttribute]
public Suffix get_Suffix();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.LookupItems.Behavior.TextualBehavior : object {
    [CompilerGeneratedAttribute]
private TextualInfo <Info>k__BackingField;
    public Casing Casing { get; }
    public bool CanBeAcceptedWithoutCommit { get; }
    [NotNullAttribute]
protected TextualInfo Info { get; }
    public TextualBehavior(TextualInfo textualInfo);
    public virtual Casing get_Casing();
    public sealed virtual bool get_CanBeAcceptedWithoutCommit();
    [CompilerGeneratedAttribute]
protected TextualInfo get_Info();
    public sealed virtual bool AcceptIfOnlyMatched(LookupItemAcceptanceContext itemAcceptanceContext);
    public sealed virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    protected virtual void AfterAccept(TextualCompletionResult textualCompletionResult, LookupItemAcceptContext acceptContext);
    [NotNullAttribute]
protected virtual TextualCompletionResult Accept(LookupItemAcceptContext acceptContext);
    [PureAttribute]
private DocumentRange OptimizeAcceptRange(DocumentRange acceptRange, String& optimizedTextToInsert);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.LookupItems.Behavior.TextualCompletionResult : object {
    [CompilerGeneratedAttribute]
private DocumentRange <ResultRange>k__BackingField;
    public DocumentRange ResultRange { get; }
    public TextualCompletionResult(DocumentRange resultRange);
    [CompilerGeneratedAttribute]
public DocumentRange get_ResultRange();
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.LookupItems.EvaluatedLookupItem : ValueType {
    [NotNullAttribute]
public ILookupItem LookupItem;
    public byte Multiplier;
    public EvaluatedLookupItem(ILookupItem lookupItem, byte multiplier);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(EvaluatedLookupItem other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.LookupItems.Info.KeywordInfo : TextualInfo {
    [CompilerGeneratedAttribute]
private TailType <TailType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InvokeCompletionAfterTail>k__BackingField;
    public bool IsRiderAsync { get; }
    [CanBeNullAttribute]
public TailType TailType { get; }
    public bool InvokeCompletionAfterTail { get; }
    public KeywordInfo(string keywordText, TextLookupRanges textLookupRanges, TailType tailType, bool invokeCompletionAfterTail);
    public virtual bool get_IsRiderAsync();
    [CompilerGeneratedAttribute]
public TailType get_TailType();
    [CompilerGeneratedAttribute]
public bool get_InvokeCompletionAfterTail();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.LookupItems.Info.TextualInfo : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private LookupItemPlacement <Placement>k__BackingField;
    [CompilerGeneratedAttribute]
private TextLookupRanges <TextLookupRanges>k__BackingField;
    public bool IsDynamic { get; }
    public int Identity { get; }
    [NotNullAttribute]
public string Text { get; }
    [NotNullAttribute]
public LookupItemPlacement Placement { get; }
    [NotNullAttribute]
public TextLookupRanges TextLookupRanges { get; }
    public bool IsRiderAsync { get; }
    public TextualInfo(string text, TextLookupRanges textLookupRanges);
    public sealed virtual bool get_IsDynamic();
    public sealed virtual int get_Identity();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual LookupItemPlacement get_Placement();
    [CompilerGeneratedAttribute]
public TextLookupRanges get_TextLookupRanges();
    public virtual bool get_IsRiderAsync();
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.LookupItems.LookupItem : UserDataHolder {
    [NotNullAttribute]
public ILookupItemInfo ItemInfo { get; }
    [NotNullAttribute]
public ILookupItemPresentation Presentation { get; }
    [NotNullAttribute]
public ILookupItemBehavior Behavior { get; }
    [NotNullAttribute]
public ILookupItemMatcher Matcher { get; }
    public abstract virtual ILookupItemInfo get_ItemInfo();
    public abstract virtual ILookupItemPresentation get_Presentation();
    public abstract virtual ILookupItemBehavior get_Behavior();
    public abstract virtual ILookupItemMatcher get_Matcher();
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.LookupItems.MatchedLookupItem : ValueType {
    [NotNullAttribute]
public ILookupItem LookupItem;
    public byte Multiplier;
    [CanBeNullAttribute]
public MatchingResult Match;
    public int OriginalIndex;
    [NotNullAttribute]
public LookupItemPlacement Placement { get; }
    public MatchedLookupItem(EvaluatedLookupItem evaluatedItem, MatchingResult match, int originalIndex);
    public LookupItemPlacement get_Placement();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MatchedLookupItem other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.LookupItems.Matcher.SimpleMatcher : object {
    [CompilerGeneratedAttribute]
private string <TextToMatch>k__BackingField;
    [NotNullAttribute]
public string TextToMatch { get; }
    public bool IgnoreSoftOnSpace { get; }
    public SimpleMatcher(string textToMatch);
    public sealed virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TextToMatch();
    public sealed virtual bool get_IgnoreSoftOnSpace();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.LookupItems.Presentation.SimplePresentation : object {
    [NotNullAttribute]
private RichText myDisplayName;
    [CanBeNullAttribute]
private IconId myIcon;
    [CanBeNullAttribute]
private IRangeMarker myVisualReplaceRange;
    private IconId JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemPresentation.Image { get; }
    public RichText DisplayName { get; }
    private RichText JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemPresentation.DisplayTypeName { get; private set; }
    private bool JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemPresentation.CanShrink { get; }
    public SimplePresentation(RichText displayName, IconId icon, IRangeMarker visualReplaceRange);
    public SimplePresentation(string displayName, IconId icon, IRangeMarker visualReplaceRange, JetFontStyles fontStyle, Nullable`1<JetRgbaColor> fontColor);
    private SimplePresentation(IconId icon, IRangeMarker visualReplaceRange);
    private sealed virtual override IconId JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemPresentation.get_Image();
    public sealed virtual RichText get_DisplayName();
    private sealed virtual override RichText JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemPresentation.get_DisplayTypeName();
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemPresentation.set_DisplayTypeName(RichText value);
    private sealed virtual override DocumentRange JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemPresentation.GetVisualReplaceRange();
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemPresentation.get_CanShrink();
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemPresentation.Shrink();
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemPresentation.Unshrink();
}
public static class JetBrains.ReSharper.Feature.Services.CodeCompletion.NamesCorellationUtil : object {
    private static Char[] DIGITS;
    private static NamesCorellationUtil();
    public static int GetCorellation(string identifier1, string identifier2, NamingManager namingManager, INamingPolicyProvider policyProvider);
    public static int GetCorellation(IEnumerable`1<NameRoot> expectedRoots, string name, NamingManager namingManager, INamingPolicyProvider policyProvider);
    private static int GetCorellation(NameRoot root1, NameRoot root2);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.NoExternalIntellisenseHost : object {
    public sealed virtual void CloseHostCodeCompletion(RunningTextControlId textControlId);
    public sealed virtual void CloseHostParameterInfo(RunningTextControlId textControlId);
    public sealed virtual bool IsHostCodeCompletionActive(RunningTextControlId textControlId);
    public sealed virtual bool IsManualHostCodeCompletionActive(RunningTextControlId textControlId);
    public sealed virtual bool IsHostQuickInfoActive(RunningTextControlId textControlId);
    public sealed virtual bool IsInteractiveHostQuickInfoActive(RunningTextControlId textControlId);
    public sealed virtual void BeforeExecuteRefactoring(IDataContext context);
}
public enum JetBrains.ReSharper.Feature.Services.CodeCompletion.ParenthesesInsertType : Enum {
    public int value__;
    public static ParenthesesInsertType Both;
    public static ParenthesesInsertType Left;
    public static ParenthesesInsertType None;
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.PostfixTemplates.PostfixTemplateMatcher : LookupItemAspect`1<PostfixTemplateInfo> {
    public bool IgnoreSoftOnSpace { get; public set; }
    public string TextToMatch { get; }
    public PostfixTemplateMatcher(PostfixTemplateInfo info);
    public sealed virtual bool get_IgnoreSoftOnSpace();
    public void set_IgnoreSoftOnSpace(bool value);
    public sealed virtual string get_TextToMatch();
    public sealed virtual MatchingResult Match(PrefixMatcher prefixMatcher);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.PostfixTemplates.PostfixTemplatePresentation : object {
    [NotNullAttribute]
private RichText myDisplayName;
    [CanBeNullAttribute]
private RichText myDisplayTypeName;
    [CompilerGeneratedAttribute]
private bool <Highlight>k__BackingField;
    public IconId Image { get; }
    public bool Highlight { get; public set; }
    public RichText DisplayName { get; }
    public RichText DisplayTypeName { get; public set; }
    public bool CanShrink { get; }
    public PostfixTemplatePresentation(RichText displayName);
    public PostfixTemplatePresentation(PostfixTemplateInfo info);
    public sealed virtual DocumentRange GetVisualReplaceRange();
    public sealed virtual IconId get_Image();
    [CompilerGeneratedAttribute]
public bool get_Highlight();
    [CompilerGeneratedAttribute]
public void set_Highlight(bool value);
    public sealed virtual RichText get_DisplayName();
    public sealed virtual RichText get_DisplayTypeName();
    public sealed virtual void set_DisplayTypeName(RichText value);
    public sealed virtual bool get_CanShrink();
    public sealed virtual bool Shrink();
    public sealed virtual void Unshrink();
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.PostfixTemplates.PostfixTemplatesItemProviderBase`2 : ItemsProviderOfSpecificContext`1<TCodeCompletionContext> {
    [NotNullAttribute]
private PostfixTemplatesManager myTemplatesManager;
    [NotNullAttribute]
private UsageStatistics myUsageStatistics;
    [NotNullAttribute]
public static Key`1<TPostfixTemplateContext> PostfixContextKey;
    public bool IsDynamic { get; }
    public CompletionMode SupportedCompletionMode { get; }
    public EvaluationMode SupportedEvaluationMode { get; }
    protected PostfixTemplatesItemProviderBase`2(PostfixTemplatesManager templatesManager, UsageStatistics usageStatistics);
    private static PostfixTemplatesItemProviderBase`2();
    [CanBeNullAttribute]
protected abstract virtual TPostfixTemplateContext TryCreatePostfixContext(TCodeCompletionContext completionContext);
    protected sealed virtual bool IsAvailable(TCodeCompletionContext context);
    public virtual bool get_IsDynamic();
    public virtual CompletionMode get_SupportedCompletionMode();
    public virtual EvaluationMode get_SupportedEvaluationMode();
    protected sealed virtual bool AddLookupItems(TCodeCompletionContext context, IItemsCollector collector);
    [CanBeNullAttribute]
private TPostfixTemplateContext GetOrCreatePostfixTemplateContext(TCodeCompletionContext context);
    private bool AddPostfixLookupItems(TPostfixTemplateContext postfixContext, CodeCompletionContext completionContext, IItemsCollector collector);
    protected virtual void AdjustLookupItem(LookupItem`1<PostfixTemplateInfo> lookupItem);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionSessionData : object {
    [CompilerGeneratedAttribute]
private CodeCompletionParameters <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <CalculationTime>k__BackingField;
    public CodeCompletionParameters Parameters { get; }
    public TimeSpan CalculationTime { get; public set; }
    public CompletionSessionData(CodeCompletionParameters parameters, TimeSpan calculationTime);
    [CompilerGeneratedAttribute]
public sealed virtual CodeCompletionParameters get_Parameters();
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_CalculationTime();
    [CompilerGeneratedAttribute]
public void set_CalculationTime(TimeSpan value);
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionSessionInterruptedEvent : CompletionSessionPerformanceDataEvent {
    [CompilerGeneratedAttribute]
private TimeSpan <InterruptedAfter>k__BackingField;
    public TimeSpan InterruptedAfter { get; }
    public CompletionSessionInterruptedEvent(IReadOnlyList`1<ICompletionSessionData> sessions, IReadOnlyList`1<string> psiLanguages, TimeSpan totalTime, TimeSpan interruptedAfter);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_InterruptedAfter();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionSessionItemCompletedEvent : CompletionSessionLookupShownEvent {
    [CompilerGeneratedAttribute]
private TimeSpan <ItemCompletionTime>k__BackingField;
    public TimeSpan ItemCompletionTime { get; }
    public CompletionSessionItemCompletedEvent(IReadOnlyList`1<ICompletionSessionData> sessions, IReadOnlyList`1<string> psiLanguages, TimeSpan totalTime, TimeSpan lookupShownAfter, TimeSpan itemCompletionTime);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_ItemCompletionTime();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionSessionLookupShownEvent : CompletionSessionPerformanceDataEvent {
    [CompilerGeneratedAttribute]
private TimeSpan <LookupShownAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private PerfCounters <PerfCounters>k__BackingField;
    public TimeSpan LookupShownAfter { get; }
    public PerfCounters PerfCounters { get; }
    public CompletionSessionLookupShownEvent(IReadOnlyList`1<ICompletionSessionData> sessions, IReadOnlyList`1<string> psiLanguages, TimeSpan totalTime, TimeSpan lookupShownAfter, PerfCounters perfCounters);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_LookupShownAfter();
    [CompilerGeneratedAttribute]
public sealed virtual PerfCounters get_PerfCounters();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionSessionNoItemsEvent : CompletionSessionPerformanceDataEvent {
    public CompletionSessionNoItemsEvent(IReadOnlyList`1<ICompletionSessionData> sessions, IReadOnlyList`1<string> psiLanguages, TimeSpan totalTime);
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionSessionPerformanceDataEvent : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ICompletionSessionData> <Sessions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <PsiLanguages>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TotalTime>k__BackingField;
    public IReadOnlyList`1<ICompletionSessionData> Sessions { get; }
    public IReadOnlyList`1<string> PsiLanguages { get; }
    public TimeSpan TotalTime { get; }
    protected CompletionSessionPerformanceDataEvent(IReadOnlyList`1<ICompletionSessionData> sessions, IReadOnlyList`1<string> psiLanguages, TimeSpan totalTime);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<ICompletionSessionData> get_Sessions();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<string> get_PsiLanguages();
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_TotalTime();
    public virtual string ToString();
}
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionStatisticsCollector : CounterUsagesCollector {
    private ILogger myLogger;
    private EventLogGroup myEventLogGroup;
    private LongEventField myInterruptTimeEventField;
    private LongEventField myTotalTimeEventField;
    private EnumEventField`1<EvaluationMode> myEvalModeEventField;
    private IntEventField myMultiplierEventField;
    private BooleanEventField myIsAutomaticCompletionEventField;
    private EnumListEventField`1<CompletionType> myCompletionTypesEventField;
    private BooleanEventField myIsSignleCompletionModeEventField;
    private LongEventField mySessionCalculationTimeEventField;
    private VarargEventId mySessionInterruptedEvent;
    private VarargEventId mySessionNoItemsEvent;
    private LongEventField myLookupShownTimeEventField;
    private VarargEventId mySessionLookupShownEvent;
    private LongEventField myItemCompletedTimeEventField;
    private IntEventField myGC0CounterEventField;
    private IntEventField myGC1CounterEventField;
    private IntEventField myGC2CounterEventField;
    private VarargEventId mySessionItemCompletedEvent;
    private StringListEventField myPsiLanguagesEventField;
    private IList`1<string> ALLOWED_LANGUAGES;
    private int myLastActivityId;
    private object myActivityLock;
    private IntEventField myActivityField;
    private VarargEventId mySessionEvent;
    public bool IsSupported { get; }
    public CompletionStatisticsCollector(FeatureUsageLogger fusLogger, ILogger logger);
    public virtual bool get_IsSupported();
    public virtual EventLogGroup GetGroup();
    public void SubmitPerformanceDataIfSupported(ICompletionSessionPerformanceDataEvent event);
    private void LogSessions(ICompletionSessionPerformanceDataEvent event, int activityId);
    private void LogSession(ICompletionSessionData session, int activityId);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionStatisticsManager : object {
    [CompilerGeneratedAttribute]
private CompletionStatisticsCollector <Collector>k__BackingField;
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private string <LastChoiceContextId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LastChoiceItemId>k__BackingField;
    [CanBeNullAttribute]
private ConcurrentDictionary`2<string, ItemStatistics> myItems;
    private ConcurrentDictionary`2<string, ConcurrentDictionary`2<int, DateTime>> myContextualStatistics;
    private static int ContextualStatisticsSize;
    private bool myShouldSaveChanges;
    private SafeFileThrowAwayAccess myFileAccess;
    private ConcurrentDictionary`2<CodeCompletionType, List`1<long>> myCompletionPerformanceData;
    private Nullable`1<DateTime> myCompletionStartTime;
    private Nullable`1<DateTime> myAutomaticCompletionDateTime;
    public CompletionStatisticsCollector Collector { get; }
    public string LastChoiceContextId { get; public set; }
    public int LastChoiceItemId { get; public set; }
    private IDictionary`2<string, ItemStatistics> Items { get; }
    private IDictionary`2<CodeCompletionType, List`1<long>> PerformanceData { get; }
    public CompletionStatisticsManager(Lifetime lifetime, IPsiConfiguration psiConfiguration, ILogger logger, CompletionStatisticsCollector collector);
    [CompilerGeneratedAttribute]
public sealed virtual CompletionStatisticsCollector get_Collector();
    [CompilerGeneratedAttribute]
public sealed virtual string get_LastChoiceContextId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LastChoiceContextId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LastChoiceItemId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LastChoiceItemId(int value);
    private IDictionary`2<string, ItemStatistics> get_Items();
    private IDictionary`2<CodeCompletionType, List`1<long>> get_PerformanceData();
    public virtual void CompletionStart();
    public virtual void CompletionEnd(CodeCompletionType completionType);
    public sealed virtual void AutomaticCompletionStart();
    public sealed virtual void LookupWindowIsShown();
    private void Save();
    private bool Load(IDictionary`2<string, ItemStatistics> items, IDictionary`2<CodeCompletionType, List`1<long>> performanceData);
    private int CompletionTypeToInt(CodeCompletionType completionType);
    private CodeCompletionType IntToCompletionType(int i);
    public virtual int GetPosition(ILookupItem lookupItem, string contextId);
    public sealed virtual int GetPosition(ILookupItem lookupItem, Func`2<ILookupItem, int> customIdentityFunc);
    public sealed virtual bool IsInContext(ILookupItem lookupItem, string contextId);
    public virtual void AddStatistics(string contextId, int itemId);
    internal void SetItems(IEnumerable`1<Pair`2<string, ConcurrentDictionary`2<int, int>>> items);
    public virtual void Reset();
    public virtual void Dump(StreamWriter writer);
}
public static class JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionStatisticsUtil : object {
    [CanBeNullAttribute]
public static string GetContextIdentifier(IReference reference);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.ICompletionSessionData {
    public CodeCompletionParameters Parameters { get; }
    public TimeSpan CalculationTime { get; }
    public abstract virtual CodeCompletionParameters get_Parameters();
    public abstract virtual TimeSpan get_CalculationTime();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.ICompletionSessionInterruptedEvent {
    public TimeSpan InterruptedAfter { get; }
    public abstract virtual TimeSpan get_InterruptedAfter();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.ICompletionSessionItemCompletedEvent {
    public TimeSpan ItemCompletionTime { get; }
    public abstract virtual TimeSpan get_ItemCompletionTime();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.ICompletionSessionLookupShownEvent {
    public TimeSpan LookupShownAfter { get; }
    public PerfCounters PerfCounters { get; }
    public abstract virtual TimeSpan get_LookupShownAfter();
    public abstract virtual PerfCounters get_PerfCounters();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.ICompletionSessionNoItemsEvent {
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.ICompletionSessionPerformanceDataEvent {
    public IReadOnlyList`1<ICompletionSessionData> Sessions { get; }
    public IReadOnlyList`1<string> PsiLanguages { get; }
    public TimeSpan TotalTime { get; }
    public abstract virtual IReadOnlyList`1<ICompletionSessionData> get_Sessions();
    public abstract virtual IReadOnlyList`1<string> get_PsiLanguages();
    public abstract virtual TimeSpan get_TotalTime();
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.ICompletionStatisticsManager {
    public string LastChoiceContextId { get; public set; }
    public int LastChoiceItemId { get; public set; }
    public CompletionStatisticsCollector Collector { get; }
    public abstract virtual void CompletionStart();
    public abstract virtual void CompletionEnd(CodeCompletionType completionType);
    public abstract virtual void AutomaticCompletionStart();
    public abstract virtual void LookupWindowIsShown();
    public abstract virtual void Reset();
    public abstract virtual void Dump(StreamWriter writer);
    public abstract virtual string get_LastChoiceContextId();
    public abstract virtual void set_LastChoiceContextId(string value);
    public abstract virtual int get_LastChoiceItemId();
    public abstract virtual void set_LastChoiceItemId(int value);
    public abstract virtual void AddStatistics(string contextId, int itemId);
    public abstract virtual bool IsInContext(ILookupItem lookupItem, string contextId);
    public abstract virtual int GetPosition(ILookupItem lookupItem, string contextId);
    public abstract virtual int GetPosition(ILookupItem lookupItem, Func`2<ILookupItem, int> customIdentityFunc);
    public abstract virtual CompletionStatisticsCollector get_Collector();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.PerfCounters : ValueType {
    public static int GenCount;
    private Int32[] myValues;
    public IList`1<int> GC { get; }
    private PerfCounters(Int32[] values);
    public static PerfCounters GetCurrentValue();
    public IList`1<int> get_GC();
    public virtual string ToString();
    public static PerfCounters op_Subtraction(PerfCounters newValue, PerfCounters oldValue);
}
[SolutionSettingsUpgraderAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.Upgrade.CompletionStatisticsManagerUpgrader : object {
    private CompletionStatisticsManager myManager;
    private static string TagName;
    private static XmlExternalizationScope Scope;
    public CompletionStatisticsManagerUpgrader(CompletionStatisticsManager manager);
    public sealed virtual void Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
}
[NotNullAttribute]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.PrefixTextRule : MulticastDelegate {
    public PrefixTextRule(object object, IntPtr method);
    public virtual string Invoke(DocumentRange prefixRange);
    public virtual IAsyncResult BeginInvoke(DocumentRange prefixRange, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.ReparseContext : object {
    protected ReparseContextLexer myLexer;
    protected string myText;
    protected IPsiModule myPsiModule;
    public int OriginalTextLength { get; }
    public int WholeTextLength { get; }
    public string Text { get; }
    public int get_OriginalTextLength();
    public int get_WholeTextLength();
    public string get_Text();
    protected static bool HasErrorElement(ITreeNode root);
    [NotNullAttribute]
protected static string GetTextBetween(ITreeNode child1, ITreeNode child2);
    [NotNullAttribute]
[PureAttribute]
public static string GetTextInsideParentTillChild(ITreeNode parent, ITreeNode child);
    [NotNullAttribute]
[PureAttribute]
public static string GetTextBetweenOrInsideParentTillChild(ITreeNode prevNode, ITreeNode node, ITreeNode origin);
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.ReparseContextBase : object {
    [CompilerGeneratedAttribute]
private IPsiModule <Module>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNode <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContextTail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContextHead>k__BackingField;
    protected IPsiModule Module { get; protected set; }
    protected ITreeNode Origin { get; protected set; }
    public string ContextTail { get; }
    public string ContextHead { get; }
    protected ReparseContextBase(ITreeNode origin, string contextHead, string contextTail);
    [CompilerGeneratedAttribute]
protected IPsiModule get_Module();
    [CompilerGeneratedAttribute]
protected void set_Module(IPsiModule value);
    [CompilerGeneratedAttribute]
protected ITreeNode get_Origin();
    [CompilerGeneratedAttribute]
protected void set_Origin(ITreeNode value);
    public abstract virtual ReparseResult GetReparseResult(string newText);
    [CompilerGeneratedAttribute]
public string get_ContextTail();
    [CompilerGeneratedAttribute]
public string get_ContextHead();
    protected static void SplitNode(ITreeNode node, TreeTextRange range, String& contextHead, String& contextTail);
    protected static void FillNodeDecl(ITreeNode node, ITreeNode body, TreeTextRange selRange, StringBuilder& sbCur, StringBuilder sbTail);
    protected static ITreeNode SkipErrorNodes(ITreeNode origin);
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.ReparseContextShortBase : object {
    protected ReparseContextLexer myLexer;
    protected string myText;
    protected IPsiModule myPsiModule;
    public int OriginalTextLength { get; }
    public int WholeTextLength { get; }
    public string Text { get; }
    public int get_OriginalTextLength();
    public int get_WholeTextLength();
    public string get_Text();
    protected static bool HasErrorElement(ITreeNode root);
    protected static string GetTextBetween(ITreeNode child1, ITreeNode child2);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.ReparseResult : object {
    [CompilerGeneratedAttribute]
private ITreeNode <NewNode>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNode <OriginalNode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartOffsetInNewNode>k__BackingField;
    [NotNullAttribute]
public ITreeNode NewNode { get; }
    [NotNullAttribute]
public ITreeNode OriginalNode { get; }
    public int StartOffsetInNewNode { get; }
    public ReparseResult(ITreeNode newNode, ITreeNode originalNode, int startOffsetInNewNode);
    [CompilerGeneratedAttribute]
public ITreeNode get_NewNode();
    [CompilerGeneratedAttribute]
public ITreeNode get_OriginalNode();
    [CompilerGeneratedAttribute]
public int get_StartOffsetInNewNode();
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CodeCompletionSettingsKey", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "AutomaticCodeCompletionSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.AutopopupEnabledSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "EnableAutomaticReSharperIntelliSensePopupSettingDescription")]
public bool AutopopupEnabled;
}
public enum JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.AutopopupType : Enum {
    public int value__;
    public static AutopopupType NoAutopopup;
    public static AutopopupType SoftAutopopup;
    public static AutopopupType HardAutopopup;
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CodeCompletionSettingsKey", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "CodeCompletionPerformanceSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CodeCompletionPerformanceSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "CheckWhetherSymbolIsObsoleteSettingDescription")]
public bool PerformObsoleteCheck;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "PreCommitDelayMsSettingDescription")]
public int PreCommitDelay;
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntellisenseSettingsKey", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "CodeCompletionSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CodeCompletionSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "AutomaticallyCompleteItemsInSymbolCompletionSettingDescription")]
public bool AutoCompleteBasicCompletion;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "AutomaticallyCompleteItemsInImportCompletionSettingDescription")]
public bool AutoCompleteImportCompletion;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "AutomaticallyCompleteItemsInSmartCompletionSettingDescription")]
public bool AutoCompleteSmartCompletion;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "AutomaticPopupDelayInMillisecondsSettingDescription")]
public int AutoPopupDelay;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "UseMiddleMatchingInCompletionListSettingDescription")]
public bool MiddleMatchingCompletion;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "EditorBrowsableProcessingSettingDescription")]
public EditorBrowsableProcessingType EditorBrowsableProcessing;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ParenthesesInsertionTypeSettingDescription")]
public ParenthesesInsertType ParenthesesInsertType;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "SmartBehaviorInBasicCompletionSettingDescription")]
public SmartBehaviorType SmartBehaviorInBasicCompletion;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowNotImportedTypesAndExtensionMethodsInCodeCompletionSuggestionsSettingDescription")]
public bool ImportItemsInBasicCompletion;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowConfirmationDialogBeforeAddingReferenceSettingDescription")]
public bool ConfirmReferenceAdd;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "EnterKeyActionSettingDescription")]
public LookupItemInsertType EnterKeyInsertType;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "TabKeyActionSettingDescription")]
public LookupItemInsertType TabKeyInsertType;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "SortingSettingDescription")]
public LookupListSorting LookupListSorting;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ReplaceKeywordsWithLiveTemplatesSettingDescription")]
public bool ReplaceKeywordsWithTemplates;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "AdditionalAliasItemsToCorrectCommonErrorsDescription")]
public bool AdditionalAliasItemsToCorrectCommonErrors;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "InsertSpacingAfterKeywordsWhenRequired")]
public bool InsertSpacingAfterKeywordsWhenRequired;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CodeCompletionSettingsService : object {
    public virtual LookupListSorting GetLookupListSorting(IContextBoundSettingsStore settingsStore);
    public virtual IntellisenseEnabledType GetIntellisenseEnabledType(IContextBoundSettingsStore settingsStore);
    public virtual IProperty`1<IntellisenseEnabledType> GetIntellisenseEnabledTypeLive(Lifetime lifetime, IContextBoundSettingsStoreLive settingsStore);
    public virtual bool GetAutopopupEnabled(IContextBoundSettingsStore settingsStore);
}
public enum JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CompletionAction : Enum {
    public int value__;
    public static CompletionAction Accept;
    public static CompletionAction NotAccept;
    public static CompletionAction NotAcceptWithContinuation;
    public static CompletionAction Terminate;
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CodeCompletionSettingsKey", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "CompletionFiltersSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CompletionFiltersSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "RememberFilterStateSettingDescription")]
public bool PersistFilterState;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowFiltersSettingDescription")]
public bool ShowFilters;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "EnableFiltersSettingDescription")]
public bool EnableFilters;
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CppCodeCompletionManagerBase : LanguageSpecificCodeCompletionManager {
    protected CppCodeCompletionManagerBase(CodeCompletionSettingsService codeCompletionSettings);
}
public interface JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IAdvancedCompletionOptionsProvider {
    public string Name { get; }
    [NotNullAttribute]
public string OrderString { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_OrderString();
    public abstract virtual void FillOptions(StackPanel panel, Lifetime lifetime, OptionsSettingsSmartContext smartContext);
    public abstract virtual void SaveSettings(UserDataHolder dataHolder, OptionsSettingsSmartContext smartContext);
    public abstract virtual void RevertSettings(UserDataHolder dataHolder, OptionsSettingsSmartContext smartContext);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CodeCompletionSettingsKey", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "OtherSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntelliSenseCompletingCharactersSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "CompleteOnSpaceSettingDescription")]
public bool CompleteOnSpace;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "NonCompletingCharactersSettingDescription")]
public string NonCompletingCharacters;
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CodeCompletionSettingsKey", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "IntelliSenseEnablingSettingsSetSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntellisenseEnabledSettingsKey : object {
}
public enum JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntellisenseEnabledType : Enum {
    public int value__;
    public static IntellisenseEnabledType Enabled;
    public static IntellisenseEnabledType Disabled;
    public static IntellisenseEnabledType PerTechnology;
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CodeCompletionSettingsKey", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "IntelliSenseGloballyEnabledSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntellisenseGloballyEnabledSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "SpecifiesWhetherToOverrideVSIntelliSenseWithReSharperIntelliSenseForSymbolCodeCompletionAutomaticCodeCompletionAndParameterInfoSettingDescription")]
public IntellisenseEnabledType IntellisenseEnabled;
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "IntelliSenseHousekeepingSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntellisenseHousekeepingSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherHintWasShownSettingDescription")]
public bool HintUsed;
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntellisenseHousekeepingSettingsUpgrader : SettingTablesUpgrader {
    public IntellisenseHousekeepingSettingsUpgrader(ProductConfigurations productConfigurations);
    protected virtual void DoUpgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime, SettingsTableBase workspaceSettingsTable, SettingsTableBase globalSettingsTable);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Resources.Settings.CodeEditingSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "IntelliSenseSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntellisenseSettingsKey : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.LanguageSpecificCodeCompletionManager : object {
    private CodeCompletionSettingsService myCodeCompletionSettings;
    public PsiLanguageType PsiLanguage { get; }
    protected LanguageSpecificCodeCompletionManager(CodeCompletionSettingsService codeCompletionSettings);
    public bool GetIntellisenseEnabled(IContextBoundSettingsStore settingsStore);
    public bool GetAutopopupEnabled(IContextBoundSettingsStore settingsStore);
    public abstract virtual SettingsScalarEntry GetSettingsEntry(ISettingsSchema settingsSchema);
    public abstract virtual PsiLanguageType get_PsiLanguage();
    protected virtual bool GetIntellisenseEnabledSpecific(IContextBoundSettingsStore settingsStore);
}
[ObsoleteAttribute("Deprecated, use CodeCompletionSettingsKey")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings : object {
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Property`1<bool> AutoPopupAfterDot;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Property`1<bool> AutoPopupAfterNew;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Property`1<bool> AutoPopupOnIdentifier;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Property`1<bool> AutoCompleteBasicCompletion;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Property`1<bool> AutoCompleteClassNameCompletion;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Property`1<bool> AutoCompleteSmartCompletion;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Property`1<int> AutoPopupDelay;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Property`1<bool> MiddleMatchingCompletion;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Property`1<EditorBrowsableProcessingType> EditorBrowsableProcessing;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Property`1<ParenthesesInsertType> InsertType;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Property`1<bool> KeywordCompletionEnabled;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Property`1<int> KeywordCompletionMinLength;
    private static string TagName;
    public CodeCompletionSettings(IComponentSettingsProvider shellSettings, Lifetime lifetime);
    private sealed virtual override void JetBrains.Application.Configuration.IXmlReadable.ReadFromXml(XmlElement element);
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettingsUpgrader : object {
    public sealed virtual void Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.SimpleTextLookupItem : TextLookupItem {
    public SimpleTextLookupItem(string text, IRangeMarker completionMarker);
}
public enum JetBrains.ReSharper.Feature.Services.CodeCompletion.SmartBehaviorType : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("None")]
public static SmartBehaviorType None;
    [LocalizedDescriptionAttribute("Expected Type")]
public static SmartBehaviorType ExpectedType;
    [LocalizedDescriptionAttribute("Expected Type and Inheritors")]
public static SmartBehaviorType ExpectedTypeAndInheritors;
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.SmartCompletionSymbolFilter : object {
    private ExpectedIType myExpectedIType;
    private SuitabilityCache myCache;
    [CompilerGeneratedAttribute]
private ISubstitution <Substitution>k__BackingField;
    public ISubstitution Substitution { get; public set; }
    public ResolveErrorType ErrorType { get; }
    public FilterRunType RunType { get; }
    public SmartCompletionSymbolFilter(ExpectedIType expectedIType, ISubstitution substitution);
    [CompilerGeneratedAttribute]
public ISubstitution get_Substitution();
    [CompilerGeneratedAttribute]
public void set_Substitution(ISubstitution value);
    public sealed virtual bool TryFilterToDestination(List`1<ISymbolInfo> source, List`1<ISymbolInfo> destination);
    [CanBeNullAttribute]
public sealed virtual ISymbolInfo IsSymbolSuitable(ISymbolInfo symbolInfo, Nullable`1& withTypeInference);
    [NotNullAttribute]
private static SuitabilityInfo GetSymbolSuitability(ExpectedIType expectedType, IType substitutedType, ITypeMember typeMember);
    public sealed virtual ResolveErrorType get_ErrorType();
    public sealed virtual FilterRunType get_RunType();
}
public class JetBrains.ReSharper.Feature.Services.CodeCompletion.SmartCompletionSymbolFilterFactory : object {
    [NotNullAttribute]
private Dictionary`2<ExpectedIType, SmartCompletionSymbolFilter> mySmartCompletionSymbolFilters;
    [NotNullAttribute]
public SmartCompletionSymbolFilter GetFilter(ExpectedIType type, ISubstitution substitution);
}
public interface JetBrains.ReSharper.Feature.Services.CodeInsight.ILocalSymbolsServiceProvider {
    public abstract virtual VariablesList GetVisibleVariables(IFile file, TreeOffset offset);
    public abstract virtual IType GetThisType(ITreeNode element);
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeInsight.LocalSymbolsServiceProviderBase`2 : object {
    public sealed virtual IType GetThisType(ITreeNode element);
    public sealed virtual VariablesList GetVisibleVariables(IFile file, TreeOffset offset);
    private static ITreeNode GetResolveContextElement(ITreeNode context);
    protected virtual List`1<TypedAndNamedEntity> GetAdditionalEntries(ITreeNode element);
    protected virtual ISymbolTable FilterVisibleVariables(ISymbolTable table, IAccessContext context, ITreeNode element);
    protected virtual bool IsVariable(IDeclaredElement declaredElement, PsiLanguageType language);
}
public class JetBrains.ReSharper.Feature.Services.CodeInsight.PsiCodeInsightUtil : object {
    public static int CompareVariables(IDeclaredElement x, IDeclaredElement y);
}
public class JetBrains.ReSharper.Feature.Services.CodeInsight.VariablesList : object {
    [NotNullAttribute]
public static VariablesList Empty;
    [CompilerGeneratedAttribute]
private IList`1<DeclaredElementInstance`1<ITypeOwner>> <Variables>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<TypedAndNamedEntity> <AdditionalEntries>k__BackingField;
    [NotNullAttribute]
public IList`1<DeclaredElementInstance`1<ITypeOwner>> Variables { get; }
    [NotNullAttribute]
public IList`1<TypedAndNamedEntity> AdditionalEntries { get; }
    public VariablesList(IList`1<DeclaredElementInstance`1<ITypeOwner>> variables, IList`1<TypedAndNamedEntity> additionalEntries);
    private static VariablesList();
    [CompilerGeneratedAttribute]
public IList`1<DeclaredElementInstance`1<ITypeOwner>> get_Variables();
    [CompilerGeneratedAttribute]
public IList`1<TypedAndNamedEntity> get_AdditionalEntries();
    public bool Contains(string name);
}
public class JetBrains.ReSharper.Feature.Services.CodeStructure.CodeStructureDeclarationAspects : object {
    private static DeclaredElementPresenterStyle MEMBER_PRESENTER;
    private static DeclaredElementPresenterStyle TYPE_PRESENTER;
    private IDeclaration myDeclaration;
    private IList`1<string> myQuickSearchStrings;
    public IDeclaration Declaration { get; }
    protected IDeclaredElement DeclaredElement { get; }
    public bool InitiallyExpanded { get; }
    public DocumentRange NavigationRange { get; }
    public CodeStructureDeclarationAspects(IDeclaration declaration);
    private static CodeStructureDeclarationAspects();
    protected virtual IList`1<string> CalculateQuickSearchTexts(IDeclaration declaration);
    public virtual IDeclaration get_Declaration();
    protected virtual IDeclaredElement get_DeclaredElement();
    public virtual void Present(StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    public virtual bool get_InitiallyExpanded();
    public virtual bool CanMoveElements(RelativeLocation location, IList`1<CodeStructureElement> dropElements);
    public virtual void MoveElements(RelativeLocation location, IList`1<CodeStructureElement> dropElements);
    public virtual bool CanRemove();
    public virtual void Remove();
    public virtual bool CanRename();
    public virtual string InitialName();
    public virtual void Rename(string newName);
    public virtual void Present(IMenuItemDescriptor descriptor, PresentationState state);
    protected virtual bool DoPresentAsTypeMember(IDeclaredElement declaredElement);
    protected virtual bool DoPresentAsType(IDeclaredElement declaredElement);
    public virtual DocumentRange get_NavigationRange();
    public virtual IList`1<string> GetQuickSearchTexts();
    public sealed virtual IPsiSourceFile GetSourceFile();
    public virtual DocumentRange[] GetNavigationRanges();
}
public class JetBrains.ReSharper.Feature.Services.CodeStructure.CodeStructureDeclarationElement : CodeStructureElement {
    [NotNullAttribute]
private ITreeNodePointer`1<IDeclaration> myDeclarationPointer;
    private CodeStructureDeclarationAspects myAspects;
    private DocumentRange myDocumentRange;
    [CompilerGeneratedAttribute]
private PsiLanguageType <Language>k__BackingField;
    public IDeclaration Declaration { get; }
    public IDeclaredElement DeclaredElement { get; }
    public ITreeNode TreeNode { get; }
    public PsiLanguageType Language { get; }
    public CodeStructureDeclarationElement(CodeStructureElement parentElement, IDeclaration declaration);
    public sealed virtual IDeclaration get_Declaration();
    public virtual IDeclaredElement get_DeclaredElement();
    public virtual ITreeNode get_TreeNode();
    [CompilerGeneratedAttribute]
public virtual PsiLanguageType get_Language();
    public virtual IFileStructureAspect GetFileStructureAspect();
    public virtual IGotoFileMemberAspect GetGotoMemberAspect();
    public virtual IMemberNavigationAspect GetMemberNavigationAspect();
    public virtual DocumentRange GetTextRange();
    protected virtual void DumpSelf(TextWriter builder);
}
public abstract class JetBrains.ReSharper.Feature.Services.CodeStructure.CodeStructureElement : object {
    private List`1<CodeStructureElement> myChildren;
    [CompilerGeneratedAttribute]
private CodeStructureElement <Parent>k__BackingField;
    public CodeStructureElement Parent { get; }
    public ICodeStructureBlockStart ParentBlock { get; }
    public IList`1<CodeStructureElement> Children { get; }
    public ISolution Solution { get; }
    [CanBeNullAttribute]
public ITreeNode TreeNode { get; }
    [CanBeNullAttribute]
public PsiLanguageType Language { get; }
    protected CodeStructureElement(CodeStructureElement parent);
    [CompilerGeneratedAttribute]
public virtual CodeStructureElement get_Parent();
    public virtual ICodeStructureBlockStart get_ParentBlock();
    public IList`1<CodeStructureElement> get_Children();
    public virtual ISolution get_Solution();
    public abstract virtual ITreeNode get_TreeNode();
    public abstract virtual PsiLanguageType get_Language();
    [CanBeNullAttribute]
public abstract virtual IFileStructureAspect GetFileStructureAspect();
    [CanBeNullAttribute]
public abstract virtual IGotoFileMemberAspect GetGotoMemberAspect();
    [CanBeNullAttribute]
public abstract virtual IMemberNavigationAspect GetMemberNavigationAspect();
    public abstract virtual DocumentRange GetTextRange();
    public void Dump(TextWriter builder, int indent, char indenter);
    protected abstract virtual void DumpSelf(TextWriter builder);
    public void AppendChild(CodeStructureElement element);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.CodeStructure.CodeStructureElementEx : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IPsiSourceFile GetSourceFile(CodeStructureElement element);
}
public class JetBrains.ReSharper.Feature.Services.CodeStructure.CodeStructureOptions : object {
    public static CodeStructureOptions Default;
    [CompilerGeneratedAttribute]
private bool <BuildInheritanceInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowPreprocessorDirectives>k__BackingField;
    public bool BuildInheritanceInformation { get; public set; }
    public bool ShowPreprocessorDirectives { get; public set; }
    private static CodeStructureOptions();
    [CompilerGeneratedAttribute]
public bool get_BuildInheritanceInformation();
    [CompilerGeneratedAttribute]
public void set_BuildInheritanceInformation(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowPreprocessorDirectives();
    [CompilerGeneratedAttribute]
public void set_ShowPreprocessorDirectives(bool value);
}
public class JetBrains.ReSharper.Feature.Services.CodeStructure.CodeStructurePreprocessorElement : CodeStructureElement {
    [NotNullAttribute]
private ITreeNodePointer`1<ITreeNode> myDirectivePointer;
    [NotNullAttribute]
private string myText;
    private DocumentRange myDocumentRange;
    [CompilerGeneratedAttribute]
private PsiLanguageType <Language>k__BackingField;
    [CanBeNullAttribute]
public ITreeNode PreprocessorDirective { get; }
    public DocumentRange NavigationRange { get; }
    public bool InitiallyExpanded { get; }
    public ITreeNode TreeNode { get; }
    public PsiLanguageType Language { get; }
    public CodeStructurePreprocessorElement(CodeStructureElement parentElement, ITreeNode preprocessorDirective);
    public virtual void Present(StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    public ITreeNode get_PreprocessorDirective();
    protected virtual string GetText();
    public sealed virtual DocumentRange get_NavigationRange();
    public sealed virtual bool get_InitiallyExpanded();
    public sealed virtual IList`1<string> GetQuickSearchTexts();
    public virtual bool CanMoveElements(RelativeLocation location, IList`1<CodeStructureElement> dropElements);
    public virtual void MoveElements(RelativeLocation location, IList`1<CodeStructureElement> dropElements);
    public virtual bool CanRemove();
    public virtual void Remove();
    public virtual bool CanRename();
    public virtual string InitialName();
    public virtual void Rename(string newName);
    public sealed virtual DocumentRange[] GetNavigationRanges();
    public virtual ITreeNode get_TreeNode();
    [CompilerGeneratedAttribute]
public virtual PsiLanguageType get_Language();
    public virtual IFileStructureAspect GetFileStructureAspect();
    public virtual IGotoFileMemberAspect GetGotoMemberAspect();
    public virtual IMemberNavigationAspect GetMemberNavigationAspect();
    public virtual DocumentRange GetTextRange();
    protected virtual void DumpSelf(TextWriter builder);
}
public class JetBrains.ReSharper.Feature.Services.CodeStructure.CodeStructurePresentationState : PresentationState {
    [CompilerGeneratedAttribute]
private bool <QualifyType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <QualifyNamespace>k__BackingField;
    public bool QualifyType { get; public set; }
    public bool QualifyNamespace { get; public set; }
    public CodeStructurePresentationState(PresentationState state);
    [CompilerGeneratedAttribute]
public bool get_QualifyType();
    [CompilerGeneratedAttribute]
public void set_QualifyType(bool value);
    [CompilerGeneratedAttribute]
public bool get_QualifyNamespace();
    [CompilerGeneratedAttribute]
public void set_QualifyNamespace(bool value);
}
public static class JetBrains.ReSharper.Feature.Services.CodeStructure.CodeStructureProvider : object {
    [CanBeNullAttribute]
public static CodeStructureRootElement GetCodeStructureRoot(IPsiSourceFile sourceFile, CodeStructureOptions options);
    [CanBeNullAttribute]
public static bool HasCodeStructure(IPsiSourceFile sourceFile);
}
public class JetBrains.ReSharper.Feature.Services.CodeStructure.CodeStructureRootElement : CodeStructureElement {
    private DocumentRange myDocumentRange;
    [CompilerGeneratedAttribute]
private IFile <File>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private PsiLanguageType <Language>k__BackingField;
    [NotNullAttribute]
public IFile File { get; }
    [CanBeNullAttribute]
public IPsiSourceFile SourceFile { get; }
    [NotNullAttribute]
public ISolution Solution { get; }
    public ITreeNode TreeNode { get; }
    [NotNullAttribute]
public PsiLanguageType Language { get; }
    public CodeStructureRootElement(IFile file);
    [CompilerGeneratedAttribute]
public IFile get_File();
    public IPsiSourceFile get_SourceFile();
    [CompilerGeneratedAttribute]
public virtual ISolution get_Solution();
    public virtual ITreeNode get_TreeNode();
    [CompilerGeneratedAttribute]
public virtual PsiLanguageType get_Language();
    public DocumentRange GetDocumentRange();
    public virtual IFileStructureAspect GetFileStructureAspect();
    public virtual IGotoFileMemberAspect GetGotoMemberAspect();
    public virtual IMemberNavigationAspect GetMemberNavigationAspect();
    public virtual DocumentRange GetTextRange();
    protected virtual void DumpSelf(TextWriter builder);
    public virtual PresentationState CreatePresentationState();
}
public interface JetBrains.ReSharper.Feature.Services.CodeStructure.ICodeStructureBlock {
    [CanBeNullAttribute]
public ICodeStructureBlockStart ParentBlock { get; }
    public abstract virtual ICodeStructureBlockStart get_ParentBlock();
}
public interface JetBrains.ReSharper.Feature.Services.CodeStructure.ICodeStructureBlockEnd {
}
public interface JetBrains.ReSharper.Feature.Services.CodeStructure.ICodeStructureBlockStart {
    public bool Expanded { get; public set; }
    public abstract virtual bool get_Expanded();
    public abstract virtual void set_Expanded(bool value);
}
public interface JetBrains.ReSharper.Feature.Services.CodeStructure.ICodeStructureBrowser {
    public bool IsActive { get; }
    public Signal`1<Pair`2<TreeModel, IPsiSourceFile>> OnActiveTreeModelChange { get; }
    public abstract virtual bool get_IsActive();
    public abstract virtual void QueueRebuild(IPsiSourceFile sourceFile);
    public abstract virtual void QueueRebuildIfInCache(IPsiSourceFile sourceFile);
    public abstract virtual void SubscribeForDocumentModelChanges(Lifetime lifetime, IShellLocks locks, bool overrideWindowRequirements);
    public abstract virtual Signal`1<Pair`2<TreeModel, IPsiSourceFile>> get_OnActiveTreeModelChange();
}
public interface JetBrains.ReSharper.Feature.Services.CodeStructure.ICodeStructureDeclarationElement {
    [CanBeNullAttribute]
public IDeclaration Declaration { get; }
    [CanBeNullAttribute]
public IDeclaredElement DeclaredElement { get; }
    public abstract virtual IDeclaration get_Declaration();
    public abstract virtual IDeclaredElement get_DeclaredElement();
}
public interface JetBrains.ReSharper.Feature.Services.CodeStructure.ICodeStructureEnregionService {
    [CanBeNullAttribute]
public PsiLanguageType Language { get; }
    public abstract virtual PsiLanguageType get_Language();
    public abstract virtual ITreeNode Execute(IList`1<CodeStructureElement> elements);
}
public interface JetBrains.ReSharper.Feature.Services.CodeStructure.IFileStructureAspect {
    public DocumentRange NavigationRange { get; }
    public bool InitiallyExpanded { get; }
    public abstract virtual void Present(StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    public abstract virtual DocumentRange get_NavigationRange();
    public abstract virtual bool get_InitiallyExpanded();
    public abstract virtual IList`1<string> GetQuickSearchTexts();
    public abstract virtual bool CanMoveElements(RelativeLocation location, IList`1<CodeStructureElement> dropElements);
    public abstract virtual void MoveElements(RelativeLocation location, IList`1<CodeStructureElement> dropElements);
    public abstract virtual bool CanRemove();
    public abstract virtual void Remove();
    public abstract virtual bool CanRename();
    public abstract virtual string InitialName();
    public abstract virtual void Rename(string newName);
}
public interface JetBrains.ReSharper.Feature.Services.CodeStructure.IGotoFileMemberAspect {
    public DocumentRange NavigationRange { get; }
    public abstract virtual void Present(IMenuItemDescriptor descriptor, PresentationState state);
    public abstract virtual DocumentRange get_NavigationRange();
    public abstract virtual IList`1<string> GetQuickSearchTexts();
    public abstract virtual IPsiSourceFile GetSourceFile();
}
public interface JetBrains.ReSharper.Feature.Services.CodeStructure.IMemberNavigationAspect {
    public abstract virtual DocumentRange[] GetNavigationRanges();
}
public interface JetBrains.ReSharper.Feature.Services.CodeStructure.IProjectFileCodeStructureProvider {
    public abstract virtual CodeStructureRootElement Build(IPsiSourceFile sourceFile, CodeStructureOptions options);
}
public interface JetBrains.ReSharper.Feature.Services.CodeStructure.IPsiFileCodeStructureProvider {
    public abstract virtual CodeStructureRootElement Build(IFile file, CodeStructureOptions options);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.ColorHints.ColorHighlightingTooltipProvider : object {
    private sealed virtual override RichTextBlock JetBrains.TextControl.DocumentMarkup.IHighlighterTooltipProvider.TryGetTooltip(IHighlighter highlighter, HighlighterTooltipKind where);
    private sealed virtual override bool JetBrains.TextControl.DocumentMarkup.IHighlighterTooltipProvider.ShouldShowTooltip(IHighlighter highlighter, HighlighterTooltipKind where);
    private bool ShouldShowTooltip(IHighlighter highlighter, HighlighterTooltipKind where, IColorReference& colorReference);
    public static RichTextBlock PresentColor(IColorElement colorElement);
}
public class JetBrains.ReSharper.Feature.Services.ColorHints.ColorHintDataModel : object {
    private ColorHintHighlighting myHighlighting;
    private IEnumerable`1<BulbMenuItem> myContextMenuItems;
    [CompilerGeneratedAttribute]
private AdornmentData <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private IPresentableItem <ContextMenuTitle>k__BackingField;
    public AdornmentData Data { get; }
    public IPresentableItem ContextMenuTitle { get; }
    public IEnumerable`1<BulbMenuItem> ContextMenuItems { get; }
    public Nullable`1<TextRange> SelectionRange { get; }
    public ColorHintDataModel(ColorHintHighlighting highlighting, IconId icon);
    [CompilerGeneratedAttribute]
public sealed virtual AdornmentData get_Data();
    [CompilerGeneratedAttribute]
public sealed virtual IPresentableItem get_ContextMenuTitle();
    public sealed virtual IEnumerable`1<BulbMenuItem> get_ContextMenuItems();
    private IEnumerable`1<BulbMenuItem> CreateContextMenuItems();
    public sealed virtual void ExecuteNavigation(PopupWindowContextSource popupWindowContextSource);
    public sealed virtual Nullable`1<TextRange> get_SelectionRange();
    private string GetColorFormatValue(ColorPresentationFormat format);
    private Action SetClipboard(string clipboardValue);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.ColorHints.ColorHintDataModel/<<CreateContextMenuItems>g__ExtractItems|11_0>d")]
[CompilerGeneratedAttribute]
private IEnumerable`1<BulbMenuItem> <CreateContextMenuItems>g__ExtractItems|11_0();
}
[DaemonTooltipProviderAttribute("JetBrains.ReSharper.Feature.Services.ColorHints.ColorHighlightingTooltipProvider")]
[DaemonAdornmentProviderAttribute("JetBrains.ReSharper.Feature.Services.ColorHints.ColorHintHighlighting/ColorIconAdornment")]
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.ColorHints.ColorHintHighlighting/ColorPickerHighlightingId")]
public class JetBrains.ReSharper.Feature.Services.ColorHints.ColorHintHighlighting : object {
    [CompilerGeneratedAttribute]
private IColorReference <ColorReference>k__BackingField;
    [CompilerGeneratedAttribute]
private JetRgbaColor <Color>k__BackingField;
    public IColorReference ColorReference { get; }
    public JetRgbaColor Color { get; }
    private string JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.ErrorStripeToolTip { get; }
    private string JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.ToolTip { get; }
    public string TestOutput { get; }
    public ColorHintHighlighting(IColorReference colorReference);
    [CompilerGeneratedAttribute]
public IColorReference get_ColorReference();
    [CompilerGeneratedAttribute]
public JetRgbaColor get_Color();
    private sealed virtual override DocumentRange JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.CalculateRange();
    private sealed virtual override string JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.get_ErrorStripeToolTip();
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.IsValid();
    private sealed virtual override string JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.get_ToolTip();
    public sealed virtual string get_TestOutput();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Colors.ColorDeclaredElementDataRules : object {
    public ColorDeclaredElementDataRules(Lifetime lifetime, DataContexts dataContexts);
    [CanBeNullAttribute]
private static ICollection`1<IDeclaredElement> ColorDeclaredElements(IDataContext dataContext);
}
internal class JetBrains.ReSharper.Feature.Services.Colors.ColorDeclaredElementReferenceSearcher : object {
    private IDeclaredElementsSet`1<IColorDeclaredElement> myElements;
    private LanguageManager myLanguageManager;
    private Dictionary`2<PsiLanguageType, HashSet`1<string>> myWords;
    public ColorDeclaredElementReferenceSearcher(IDeclaredElementsSet`1<IColorDeclaredElement> colorDeclaredElements, LanguageManager languageManager);
    private HashSet`1<string> GetElementWords(IColorDeclaredElementSearcher searcher);
    public sealed virtual bool ProcessProjectItem(IPsiSourceFile sourceFile, IFindResultConsumer`1<TResult> consumer);
    public sealed virtual bool ProcessElement(ITreeNode element, IFindResultConsumer`1<TResult> consumer);
    private static bool InteriorShouldBeProcessedHandler(ITreeNode treeNode, List`1<StringSearcher> searchers);
    private void ProcessColorReferecnes(ITreeNode node, IVisualElementFactory visualElementFactory, IFindResultConsumer`1<TResult> consumer);
    [CompilerGeneratedAttribute]
private HashSet`1<string> <.ctor>b__3_1(Pair`2<PsiLanguageType, IColorDeclaredElementSearcher> pair);
}
[PsiSharedComponentAttribute]
internal class JetBrains.ReSharper.Feature.Services.Colors.ColorSearcherFactory : DomainSpecificSearcherFactoryBase {
    private LanguageManager myLanguageManager;
    public ColorSearcherFactory(LanguageManager languageManager);
    public virtual bool IsCompatibleWithLanguage(PsiLanguageType languageType);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Colors.ColorSearcherFactory/<GetAllPossibleWordsInFile>d__3")]
public virtual IEnumerable`1<string> GetAllPossibleWordsInFile(IDeclaredElement declaredElement);
    public virtual ISearchDomain GetDeclaredElementSearchDomain(IDeclaredElement declaredElement);
    public virtual IDomainSpecificSearcher CreateReferenceSearcher(IDeclaredElementsSet elements, ReferenceSearcherParameters referenceSearcherParameters);
}
public interface JetBrains.ReSharper.Feature.Services.Colors.IColorDeclaredElementSearcher {
    [CanBeNullAttribute]
public abstract virtual IEnumerable`1<string> GetWords(IColorDeclaredElement element);
}
[PsiSharedComponentAttribute]
public class JetBrains.ReSharper.Feature.Services.Colors.InjectionAttributeNames : object {
    public static IClrTypeName HtmlAttributeValueClrTypeName;
    public static IClrTypeName HtmlElementAttributesClrTypeName;
    public static IClrTypeName[] AllInjectionsClrNames;
    public IEnumerable`1<IClrTypeName> AttributeClrNamesToWatch { get; }
    private static InjectionAttributeNames();
    public sealed virtual IEnumerable`1<IClrTypeName> get_AttributeClrNamesToWatch();
}
public abstract class JetBrains.ReSharper.Feature.Services.Comment.CommentOrDirectiveInserterBase : object {
    [CompilerGeneratedAttribute]
private PsiLanguageType <LanguageType>k__BackingField;
    [CompilerGeneratedAttribute]
private IBlockCommentActionProvider <BlockCommentActionProvider>k__BackingField;
    public PsiLanguageType LanguageType { get; }
    public IBlockCommentActionProvider BlockCommentActionProvider { get; }
    protected CommentOrDirectiveInserterBase(PsiLanguageType languageType, IBlockCommentActionProvider blockCommentActionProvider);
    [CompilerGeneratedAttribute]
public PsiLanguageType get_LanguageType();
    [CompilerGeneratedAttribute]
public IBlockCommentActionProvider get_BlockCommentActionProvider();
    public bool InsertBlockComment(TreeTextRange treeRange, IFile file, string actionName, string insertBefore, string insertAfter);
    public virtual bool Insert(TreeTextRange treeRange, IFile file, string actionName, string insertBefore, string insertAfter);
    private static ValueTuple`2<bool, DocumentOffset> Filter(IEnumerable`1<ITokenNode> tokens, IFile file, ICodeFormatter codeFormatter, bool backwards);
}
public interface JetBrains.ReSharper.Feature.Services.Comment.IBlockCommentActionProvider {
    public string StartBlockCommentMarker { get; }
    public string EndBlockCommentMarker { get; }
    public string NestedStartBlockCommentMarker { get; }
    public string NestedEndBlockCommentMarker { get; }
    public abstract virtual DocumentRange GetBlockComment(ITokenNode tokenNode);
    public abstract virtual string get_StartBlockCommentMarker();
    public abstract virtual string get_EndBlockCommentMarker();
    public abstract virtual string get_NestedStartBlockCommentMarker();
    public abstract virtual string get_NestedEndBlockCommentMarker();
    public abstract virtual DocumentOffset InsertBlockCommentPosition(ITokenNode tokenNode, DocumentOffset position);
    public abstract virtual bool IsAvailable(IFile file, DocumentRange range, Boolean& disableAllProviders);
}
public interface JetBrains.ReSharper.Feature.Services.Comment.ICommentOrDirectiveInserter {
    public abstract virtual bool InsertBlockComment(TreeTextRange treeRange, IFile file, string actionName, string insertBefore, string insertAfter);
    public abstract virtual bool Insert(TreeTextRange treeRange, IFile file, string actionName, string insertBefore, string insertAfter);
}
public interface JetBrains.ReSharper.Feature.Services.Comment.ILineCommentActionProvider {
    public string StartLineCommentMarker { get; }
    public string EndLineCommentMarker { get; }
    public abstract virtual string get_StartLineCommentMarker();
    public abstract virtual string get_EndLineCommentMarker();
    public abstract virtual bool ShouldInsertAtLineStart(IContextBoundSettingsStore settingsStore);
    public abstract virtual bool ShouldInsertSpaceAtCommentStartAndEnd(IContextBoundSettingsStore settingsStore);
    public abstract virtual LineCommentRangeInfo GetLineCommentRange(IFile psiFile, DocumentRange lineRange);
}
public class JetBrains.ReSharper.Feature.Services.Comment.LineCommentRangeInfo : ValueType {
    public int StartCommentLength;
    public int EndCommentLength;
    public int IndentLength;
    public bool DoNotUncomment;
    public SpecialCommentFlags IsSpecialComment;
    public DocumentRange TextRange;
}
public abstract class JetBrains.ReSharper.Feature.Services.Comment.SimpleLineCommentActionProvider : object {
    public string StartLineCommentMarker { get; }
    public string EndLineCommentMarker { get; }
    public virtual string get_StartLineCommentMarker();
    public sealed virtual string get_EndLineCommentMarker();
    protected abstract virtual bool IsNewLine(TokenNodeType tokenType);
    protected abstract virtual bool IsEndOfLineComment(TokenNodeType tokenType, string tokenText);
    protected virtual SpecialCommentFlags IsSpecialEndOfLineComment(TokenNodeType tokenType, string tokenText);
    protected abstract virtual bool IsWhitespace(TokenNodeType tokenType);
    public abstract virtual bool ShouldInsertAtLineStart(IContextBoundSettingsStore settingsStore);
    public virtual bool ShouldInsertSpaceAtCommentStartAndEnd(IContextBoundSettingsStore settingsStore);
    public sealed virtual LineCommentRangeInfo GetLineCommentRange(IFile psiFile, DocumentRange lineRange);
    public static void CalculateIndentLength(ITokenNode tokenNode, DocumentRange lineRange, LineCommentRangeInfo& result, string tokenText);
    protected virtual int GetStartCommentLength(ITokenNode tokenNode);
    protected int GetEndCommentLength(ITokenNode tokenNode);
    protected static SpecialCommentFlags GetDocCommentFlagsFromCommentText(string tokenText, int prefixLength);
    public static string GetText(IFile file, DocumentRange documentRange);
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Feature.Services.Comment.SpecialCommentFlags : Enum {
    public int value__;
    public static SpecialCommentFlags None;
    public static SpecialCommentFlags SpecialComment;
    public static SpecialCommentFlags CanBeSpecialCommentBlockStart;
    public static SpecialCommentFlags CanBeSpecialCommentBlockEnd;
}
public abstract class JetBrains.ReSharper.Feature.Services.CompleteStatement.ElementBasedCompleteStatementActionProvider : object {
    private static int MaxRounds;
    private List`1<Action`2<ITreeNode, FixContext>> myFixers;
    private List`1<Predicate`1<ITreeNode>> myStoppers;
    private List`1<Action`1<FixContext>> mySimpleFixers;
    protected void StopAt();
    protected void StopAt(Predicate`1<T> predicate);
    protected void Fix(Action`2<T, FixContext> fixer);
    protected void Fix(Action`1<FixContext> fixer);
    protected static Int32`1<DocLine> GetStartLine(ITreeNode element);
    protected static DocumentRange GetRange(IEnumerable`1<ITreeNode> elements);
    protected static Int32`1<DocLine> GetEndLine(ITreeNode element);
    public sealed virtual void CompleteStatement(ITextControl textControl, ISolution solution);
    private bool CompleteStatement(ITextControl textControl, ISolution solution, FixContext context, int round, string originalText, TextRange originalSelection);
    protected virtual ITreeNode FindStopElement(ITreeNode element, IDocument document);
    protected bool StopAt(ITreeNode element);
    protected static bool StopAtError(ITreeNode element, FixContext fixContext);
}
public interface JetBrains.ReSharper.Feature.Services.CompleteStatement.ICompleteStatementActionProvider {
    public abstract virtual void CompleteStatement(ITextControl textControl, ISolution solution);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.ContextActions.CachedContextActionDataProviderBase : object {
    private ISolution mySolution;
    private ITextControl myTextControl;
    private IPsiServices myPsiServices;
    private IPsiModule myPsiModule;
    private IFile myPsiFile;
    private IPsiSourceFile mySourceFile;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myIsSelectedElementCached;
    [NullableAttribute("2")]
private ITreeNode myCachedSelectedElement;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myIsProjectCached;
    [NullableAttribute("2")]
private IProject myCachedProject;
    private DocumentOffset myDocumentCaret;
    private DocumentRange myDocumentSelection;
    private TreeOffset myTreeCaret;
    private TreeTextRange myTreeSelection;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyCollection`1<ITreeNode> myCachedWithSpaces;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyCollection`1<ITreeNode> myCachedWithoutSpaces;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<ValueTuple`2<Type, bool>, ITreeNode> myCachedByType;
    private object mySyncRoot;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITreeNode <TokenAfterCaret>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITreeNode <TokenBeforeCaret>k__BackingField;
    public DocumentOffset DocumentCaret { get; }
    public DocumentRange DocumentSelection { get; }
    public TreeOffset TreeOffset { get; }
    public TreeTextRange SelectedTreeRange { get; }
    public IPsiSourceFile SourceFile { get; }
    public IDocument Document { get; }
    public IFile PsiFile { get; }
    [NullableAttribute("2")]
public ITreeNode SelectedElement { get; }
    public IPsiServices PsiServices { get; }
    public ISolution Solution { get; }
    [NullableAttribute("2")]
public IProject Project { get; }
    public IPsiModule PsiModule { get; }
    [NullableAttribute("2")]
public ITreeNode TokenAfterCaret { get; }
    [NullableAttribute("2")]
public ITreeNode TokenBeforeCaret { get; }
    [ObsoleteAttribute("To be removed (should not be available inside CA availability and ExecutePsiTransaction)")]
public ITextControl TextControl { get; }
    protected CachedContextActionDataProviderBase(ISolution solution, ITextControl textControl, IFile psiFile);
    public sealed virtual DocumentOffset get_DocumentCaret();
    public sealed virtual DocumentRange get_DocumentSelection();
    public sealed virtual TreeOffset get_TreeOffset();
    public sealed virtual TreeTextRange get_SelectedTreeRange();
    public sealed virtual T GetSelectedElement(bool checkDocumentRange, bool ignoreSpaces);
    protected virtual IReadOnlyCollection`1<ITreeNode> GetNodesAt(TreeOffset treeOffset);
    public sealed virtual IPsiSourceFile get_SourceFile();
    public sealed virtual IDocument get_Document();
    public sealed virtual IFile get_PsiFile();
    [NullableContextAttribute("2")]
public sealed virtual ITreeNode get_SelectedElement();
    public sealed virtual IPsiServices get_PsiServices();
    public sealed virtual ISolution get_Solution();
    [NullableContextAttribute("2")]
public sealed virtual IProject get_Project();
    public sealed virtual IPsiModule get_PsiModule();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual ITreeNode get_TokenAfterCaret();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual ITreeNode get_TokenBeforeCaret();
    public sealed virtual ITextControl get_TextControl();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.ContextActions.CachedContextActionDataProviderBase`1 : CachedContextActionDataProviderBase {
    public TFile PsiFile { get; }
    protected CachedContextActionDataProviderBase`1(ISolution solution, ITextControl textControl, TFile psiFile);
    public sealed virtual TFile get_PsiFile();
}
[ContextActionGroupAttribute]
public static class JetBrains.ReSharper.Feature.Services.ContextActions.CommonContextActions : object {
    [NullableAttribute("1")]
public static string GroupID;
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.ContextActions.IContextAction")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionAttribute : PartAttribute {
    [CompilerGeneratedAttribute]
private string <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <GroupType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DescriptionResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowedInNonUserFiles>k__BackingField;
    [ObsoleteAttribute("use GroupType instead")]
[CanBeNullAttribute]
public string Group { get; public set; }
    [CanBeNullAttribute]
public Type GroupType { get; public set; }
    [CanBeNullAttribute]
public string Name { get; public set; }
    [CanBeNullAttribute]
public string Description { get; public set; }
    [CanBeNullAttribute]
public Type ResourceType { get; public set; }
    [CanBeNullAttribute]
public string NameResourceName { get; public set; }
    [CanBeNullAttribute]
public string DescriptionResourceName { get; public set; }
    public short Priority { get; public set; }
    public bool Disabled { get; public set; }
    public bool AllowedInNonUserFiles { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Group();
    [CompilerGeneratedAttribute]
public void set_Group(string value);
    [CompilerGeneratedAttribute]
public Type get_GroupType();
    [CompilerGeneratedAttribute]
public void set_GroupType(Type value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Type get_ResourceType();
    [CompilerGeneratedAttribute]
public void set_ResourceType(Type value);
    [CompilerGeneratedAttribute]
public string get_NameResourceName();
    [CompilerGeneratedAttribute]
public void set_NameResourceName(string value);
    [CompilerGeneratedAttribute]
public string get_DescriptionResourceName();
    [CompilerGeneratedAttribute]
public void set_DescriptionResourceName(string value);
    [CompilerGeneratedAttribute]
public short get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(short value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowedInNonUserFiles();
    [CompilerGeneratedAttribute]
public void set_AllowedInNonUserFiles(bool value);
}
public abstract class JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionBase : BulbActionBase {
    [NullableContextAttribute("1")]
public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [NullableContextAttribute("1")]
[PureAttribute]
public abstract virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionBase`1 : BulbActionBase {
    [PureAttribute]
protected abstract virtual TAvailabilityInfo TryCreateInfoFromDataProvider(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.ContextActions.IContextAction.IsAvailable(IUserDataHolder cache);
    [PureAttribute]
protected abstract virtual bool IsAvailable(TAvailabilityInfo availabilityInfo);
    protected sealed virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected abstract virtual Action`1<ITextControl> ExecutePsiTransaction(TAvailabilityInfo availabilityInfo, ISolution solution, IProgressIndicator progress);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionDataBuilderAttribute : ShellComponentAttribute {
    [CompilerGeneratedAttribute]
private Type <ProvidedDataType>k__BackingField;
    [NotNullAttribute]
public Type ProvidedDataType { get; }
    public ContextActionDataBuilderAttribute(Type dataType, Instantiation instantiation);
    [CompilerGeneratedAttribute]
public Type get_ProvidedDataType();
}
public abstract class JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionDataBuilderBase`2 : object {
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual IContextActionDataProvider BuildFromPsi(ISolution solution, ITextControl textControl, TPsiFile psiFile);
    public sealed virtual IContextActionDataProvider Build(ISolution solution, ITextControl textControl);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionDataBuilders : object {
    [NotNullAttribute]
private IThreading myThreading;
    [NotNullAttribute]
private IEnumerable`1<IContextActionDataBuilder> myDataBuilders;
    [CanBeNullAttribute]
private IDictionary`2<Type, IContextActionDataBuilder> myBuildersCache;
    public ContextActionDataBuilders(IThreading threading, IEnumerable`1<IContextActionDataBuilder> dataBuilders);
    [NotNullAttribute]
private IDictionary`2<Type, IContextActionDataBuilder> GetBuilders();
    public sealed virtual IContextActionDataBuilder TryGetBuilder(Type dataType);
    public sealed virtual IDictionary`2<Type, IContextActionDataProvider> BuildCacheData(ISolution solution, ITextControl textControl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionDataProviderExtensions : object {
    [ExtensionAttribute]
[PureAttribute]
public static IEnumerable`1<ITreeNode> ContainingNodes(IContextActionDataProvider provider);
    [ExtensionAttribute]
[PureAttribute]
public static TTreeNode GetSelectedTreeNode(IContextActionDataProvider provider);
    [ExtensionAttribute]
[PureAttribute]
public static IReadOnlyList`1<TMembers> TryGetMultipleSelectedMembers(IContextActionDataProvider provider, Func`2<TOwner, IEnumerable`1<TMembers>> selectMembers);
    [ExtensionAttribute]
[PureAttribute]
public static IReadOnlyList`1<TMembers> TryGetAllIntersectedMembers(IContextActionDataProvider provider, Func`2<TOwner, IEnumerable`1<TMembers>> selectMembers);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionGroupAttribute : PartAttribute {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameResourceName>k__BackingField;
    [NullableAttribute("1")]
public string Id { get; public set; }
    public string Name { get; public set; }
    public Type ResourceType { get; public set; }
    public string NameResourceName { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Id();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Type get_ResourceType();
    [CompilerGeneratedAttribute]
public void set_ResourceType(Type value);
    [CompilerGeneratedAttribute]
public string get_NameResourceName();
    [CompilerGeneratedAttribute]
public void set_NameResourceName(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionInfo : object {
    private ConstructorInfo myConstructorInfo;
    private ContextActionAttribute myMetadata;
    [NullableAttribute("2")]
private ContextActionGroupAttribute myGroup;
    private Type myDataProviderType;
    public Type DataProviderType { get; }
    public string ActionKey { get; }
    public string GroupId { get; }
    [NullableAttribute("2")]
public string GroupName { get; }
    public string Name { get; }
    public string Description { get; }
    public short Priority { get; }
    public bool IsDisabledByDefault { get; }
    public bool IsAllowedInNonUserFiles { get; }
    public ContextActionInfo(Type actionType, ContextActionAttribute attribute);
    public Type get_DataProviderType();
    public sealed virtual string get_ActionKey();
    [MustUseReturnValueAttribute]
public IContextAction Create(object ctorParameter);
    public sealed virtual string get_GroupId();
    [NullableContextAttribute("2")]
public sealed virtual string get_GroupName();
    public sealed virtual string get_Name();
    public sealed virtual string get_Description();
    public short get_Priority();
    public sealed virtual bool get_IsDisabledByDefault();
    public bool get_IsAllowedInNonUserFiles();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionInstance : object {
    public object Instance { get; }
    public abstract virtual object get_Instance();
    public abstract virtual bool IsAvailable(ISolution solution, UserDataHolder cache);
    [MustUseReturnValueAttribute]
public abstract virtual IEnumerable`1<IntentionAction> CreateBulbItemsNoScoped(ISolution solution);
    [MustUseReturnValueAttribute]
public IReadOnlyList`1<IntentionAction> CreateBulbItemsExpandScoped(ISolution solution, IPsiSourceFile sourceFile);
    [MustUseReturnValueAttribute]
public abstract virtual ContextActionInstance TryTranslateActionToFork(ISolution solution, IContentModelForkTranslator translator);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("20")]
internal class JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionTableImpl : object {
    private IContextActionDataBuilders myContextActionDataBuilders;
    private Dictionary`2<Type, ContextActionInfo> myContextActions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1 modreq(System.Runtime.CompilerServices.IsVolatile) mySortedActions;
    public IEnumerable`1<IContextActionInfo> AllActions { get; }
    private IEnumerable`1<ContextActionInfo> AllSortedActions { get; }
    public ContextActionTableImpl(Lifetime lifetime, ShellPartCatalogSet catalogueSet, IContextActionDataBuilders contextActionDataBuilders, IShellLocks shellLocks);
    public sealed virtual IEnumerable`1<IContextActionInfo> get_AllActions();
    private IEnumerable`1<ContextActionInfo> get_AllSortedActions();
    public ContextActionInstance CreateManualInstance(IContextActionDataProvider dataProvider, IContextAction contextAction);
    public sealed virtual ContextActionInstance TryInstantiateConcreteAction(ISolution solution, ITextControl textControl, Type contextActionType);
    public sealed virtual IReadOnlyList`1<ContextActionInstance> InstantiateAllAvailableActions(IPsiSourceFile sourceFile, IDictionary`2<Type, IContextActionDataProvider> dataProviders, IUserDataHolder dataHolderForIsAvailable);
    [PureAttribute]
private static IContextActionDataProvider GetOrCreateContextActionDataProvider(IDictionary`2<Type, IContextActionDataProvider> providersCache, Type dataProviderType);
    public sealed virtual bool IsActionEnabled(IIndexedEntry`2<string, bool> disableActions, IContextActionInfo contextActionInfo);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0();
    [CompilerGeneratedAttribute]
private List`1<ContextActionInfo> <get_AllSortedActions>g__ComputeActionsToInitialize|7_0();
}
[SettingsKeyAttribute("JetBrains.ReSharper.Resources.Settings.CodeEditingSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ContextActionsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionTableSettings : object {
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "ContextActionsEnabledDisabledStatusEachContextActionIsEnabledByDefaultSettingDescription")]
public IIndexedEntry`2<string, bool> DisabledContextActions;
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.ContextActions.IContextAction {
    public abstract virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public abstract virtual bool IsAvailable(IUserDataHolder cache);
}
public interface JetBrains.ReSharper.Feature.Services.ContextActions.IContextActionDataBuilder {
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual IContextActionDataProvider Build(ISolution solution, ITextControl textControl);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.ContextActions.IContextActionDataBuilders {
    [PureAttribute]
public abstract virtual IContextActionDataBuilder TryGetBuilder(Type dataType);
    public abstract virtual IDictionary`2<Type, IContextActionDataProvider> BuildCacheData(ISolution solution, ITextControl textControl);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.ContextActions.IContextActionDataProvider {
    public ISolution Solution { get; }
    [NullableAttribute("2")]
public IProject Project { get; }
    public IPsiModule PsiModule { get; }
    public IPsiServices PsiServices { get; }
    public IPsiSourceFile SourceFile { get; }
    public IFile PsiFile { get; }
    public IDocument Document { get; }
    public TreeTextRange SelectedTreeRange { get; }
    public DocumentRange DocumentSelection { get; }
    [NullableAttribute("2")]
[ObsoleteAttribute("To be removed. Use modern APIs like ContainingNodes/GetSelectedTreeNode")]
public ITreeNode SelectedElement { get; }
    [ObsoleteAttribute("Use SelectedTreeRange instead. Always implement availability in terms of the selection, not caret offset")]
public TreeOffset TreeOffset { get; }
    [ObsoleteAttribute("Use DocumentSelection instead. Always implement availability in terms of the selection, not caret offset")]
public DocumentOffset DocumentCaret { get; }
    [NullableAttribute("2")]
[ObsoleteAttribute("To be removed. Use modern APIs like ContainingNodes/GetSelectedTreeNode")]
public ITreeNode TokenAfterCaret { get; }
    [NullableAttribute("2")]
[ObsoleteAttribute("To be removed. Use modern APIs like ContainingNodes/GetSelectedTreeNode")]
public ITreeNode TokenBeforeCaret { get; }
    [ObsoleteAttribute("To be removed. Should not be used during PSI transaction")]
public ITextControl TextControl { get; }
    public abstract virtual ISolution get_Solution();
    [NullableContextAttribute("2")]
public abstract virtual IProject get_Project();
    public abstract virtual IPsiModule get_PsiModule();
    public abstract virtual IPsiServices get_PsiServices();
    public abstract virtual IPsiSourceFile get_SourceFile();
    public abstract virtual IFile get_PsiFile();
    public abstract virtual IDocument get_Document();
    public abstract virtual TreeTextRange get_SelectedTreeRange();
    public abstract virtual DocumentRange get_DocumentSelection();
    [PureAttribute]
public abstract virtual T GetSelectedElement(bool checkDocumentRange, bool ignoreSpaces);
    [NullableContextAttribute("2")]
public abstract virtual ITreeNode get_SelectedElement();
    public abstract virtual TreeOffset get_TreeOffset();
    public abstract virtual DocumentOffset get_DocumentCaret();
    [NullableContextAttribute("2")]
public abstract virtual ITreeNode get_TokenAfterCaret();
    [NullableContextAttribute("2")]
public abstract virtual ITreeNode get_TokenBeforeCaret();
    public abstract virtual ITextControl get_TextControl();
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.ContextActions.IContextActionDataProvider`1 {
    public TFile PsiFile { get; }
    public abstract virtual TFile get_PsiFile();
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.ContextActions.IContextActionInfo {
    public string ActionKey { get; }
    [NullableAttribute("2")]
public string GroupId { get; }
    [NullableAttribute("2")]
public string GroupName { get; }
    public string Name { get; }
    public string Description { get; }
    public bool IsDisabledByDefault { get; }
    public abstract virtual string get_ActionKey();
    [NullableContextAttribute("2")]
public abstract virtual string get_GroupId();
    [NullableContextAttribute("2")]
public abstract virtual string get_GroupName();
    public abstract virtual string get_Name();
    public abstract virtual string get_Description();
    public abstract virtual bool get_IsDisabledByDefault();
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.ContextActions.IContextActionTable {
    public IEnumerable`1<IContextActionInfo> AllActions { get; }
    public abstract virtual IEnumerable`1<IContextActionInfo> get_AllActions();
    [MustUseReturnValueAttribute]
public abstract virtual ContextActionInstance TryInstantiateConcreteAction(ISolution solution, ITextControl textControl, Type contextActionType);
    [MustUseReturnValueAttribute]
public abstract virtual IReadOnlyList`1<ContextActionInstance> InstantiateAllAvailableActions(IPsiSourceFile sourceFile, IDictionary`2<Type, IContextActionDataProvider> dataProviders, IUserDataHolder dataHolderForIsAvailable);
    [PureAttribute]
public abstract virtual bool IsActionEnabled(IIndexedEntry`2<string, bool> disableActions, IContextActionInfo contextActionInfo);
}
[ContextActionDataBuilderAttribute("JetBrains.ReSharper.Feature.Services.ContextActions.LanguageIndependentContextActionDataProvider", "16")]
public class JetBrains.ReSharper.Feature.Services.ContextActions.LanguageIndependentContextActionDataBuilder : ContextActionDataBuilderBase`2<KnownLanguage, IFile> {
    public virtual IContextActionDataProvider BuildFromPsi(ISolution solution, ITextControl textControl, IFile psiFile);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.ContextActions.LanguageIndependentContextActionDataProvider : CachedContextActionDataProviderBase {
    public LanguageIndependentContextActionDataProvider(ISolution solution, ITextControl textControl, IFile file);
    public sealed virtual LanguageIndependentContextActionDataProvider TryTranslateToCurrentFork(IContentModelForkTranslator translator);
}
public abstract class JetBrains.ReSharper.Feature.Services.ContextActions.ModernContextActionBase : ModernBulbActionBase {
    [NullableContextAttribute("1")]
public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [NullableContextAttribute("1")]
[PureAttribute]
public abstract virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.ContextActions.ModernContextActionBase`1 : ModernBulbActionBase {
    [PureAttribute]
protected abstract virtual TAvailabilityInfo TryCreateInfoFromDataProvider(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.ContextActions.IContextAction.IsAvailable(IUserDataHolder cache);
    [PureAttribute]
protected abstract virtual bool IsAvailable(TAvailabilityInfo availabilityInfo);
    protected sealed virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected abstract virtual IBulbActionCommand ExecutePsiTransaction(TAvailabilityInfo availabilityInfo, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.ContextActions.ModernScopedContextActionBase`1 : ModernScopedBulbAction {
    private static bool ourAvailabilityInfoIsTreeNode;
    public FileCollectorInfo FileCollectorInfo { get; }
    private static ModernScopedContextActionBase`1();
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.ContextActions.IContextAction.IsAvailable(IUserDataHolder cache);
    [PureAttribute]
protected abstract virtual TAvailabilityInfo TryCreateInfoFromDataProvider(IUserDataHolder cache);
    [PureAttribute]
protected virtual TAvailabilityInfo TryCreateInfoFromTreeNode(ITreeNode treeNode);
    [PureAttribute]
protected abstract virtual bool IsAvailable(TAvailabilityInfo availabilityInfo);
    [PureAttribute]
protected virtual bool IsAvailableForScope(Scope scope, TAvailabilityInfo availabilityInfo);
    [PureAttribute]
protected virtual ITreeNode TryGetContextTreeNode(TAvailabilityInfo availabilityInfo);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual FileCollectorInfo GetFileCollectorInfo(TAvailabilityInfo availabilityInfo);
    public sealed virtual FileCollectorInfo get_FileCollectorInfo();
    protected abstract virtual IBulbActionCommand ExecutePsiTransaction(TAvailabilityInfo availabilityInfo, ISolution solution, IProgressIndicator progress);
    [DebuggerStepThroughAttribute]
protected sealed virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private sealed virtual override IBulbActionCommand JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Actions.IModernManualScopedAction.ExecuteAction(ISolution solution, Scope scope, IHighlighting sourceHighlighting, IProgressIndicator progress);
    [MustUseReturnValueAttribute]
protected virtual IBulbActionCommand ExecuteCleanupAfterScopedExecution(ISolution solution, TAvailabilityInfo availabilityInfo, Scope scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Use ModernScopedContextActionBase<T> instead, this API eventually will be removed")]
public abstract class JetBrains.ReSharper.Feature.Services.ContextActions.ScopedContextActionBase`1 : ScopedBulbAction {
    private static bool ourAvailabilityInfoIsTreeNode;
    public FileCollectorInfo FileCollectorInfo { get; }
    private static ScopedContextActionBase`1();
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.ContextActions.IContextAction.IsAvailable(IUserDataHolder cache);
    [PureAttribute]
protected abstract virtual TAvailabilityInfo TryCreateInfoFromDataProvider(IUserDataHolder cache);
    [PureAttribute]
protected virtual TAvailabilityInfo TryCreateInfoFromTreeNode(ITreeNode treeNode);
    [PureAttribute]
protected abstract virtual bool IsAvailable(TAvailabilityInfo availabilityInfo);
    [PureAttribute]
protected virtual ITreeNode TryGetContextTreeNode(TAvailabilityInfo availabilityInfo);
    [PureAttribute]
protected virtual bool IsAvailableForScope(Scope scope, TAvailabilityInfo availabilityInfo);
    protected abstract virtual Action`1<ITextControl> ExecutePsiTransaction(TAvailabilityInfo availabilityInfo, ISolution solution, IProgressIndicator progress);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual FileCollectorInfo GetFileCollectorInfo(TAvailabilityInfo availabilityInfo);
    public virtual FileCollectorInfo get_FileCollectorInfo();
    [DebuggerStepThroughAttribute]
protected sealed virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private sealed virtual override Action`1<ITextControl> JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Actions.IManualScopedAction.ExecuteAction(ISolution solution, Scope scope, IHighlighting sourceHighlighting, IProgressIndicator progress);
    protected virtual Action`1<ITextControl> ExecuteCleanupAfterScopedExecution(ISolution solution, TAvailabilityInfo availabilityInfo, Scope scope);
}
[AttributeUsageAttribute("64")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.Feature.Services.Contexts.AsyncContextConsumerAttribute : Attribute {
}
public static class JetBrains.ReSharper.Feature.Services.Contexts.CaretDependentFeaturesUtil : object {
    public static void HighlightForLifetime(DocumentRange documentRange, string highlightingId, IPsiDocumentRangeView psiDocumentRangeView, Lifetime caretDependentStuffLifetime);
    public static void HighlightForLifetime(Lifetime lifetime, HighlightInfo highlightInfo, IPsiDocumentRangeView psiDocumentRangeView);
    public static void UpdateDocumentForSourceGeneratedFiles(List`1<HighlightInfo> highlightings, IPsiSourceFile psiSourceFile);
}
[ShellComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Contexts.CaretDependentFeaturesUtilComponent : object {
    [NotNullAttribute]
private IDocumentMarkupManager myDocumentMarkupManager;
    [NotNullAttribute]
private ITooltipManager myTooltipManager;
    [NotNullAttribute]
protected IShellLocks myShellLocks;
    public CaretDependentFeaturesUtilComponent(IDocumentMarkupManager documentMarkupManager, ITooltipManager tooltipManager, IShellLocks shellLocks);
    private void RemoveHighlighter(IDocument document, IHighlighter highlighter);
    public void HighlightForLifetime(DocumentRange documentRange, string highlightingId, Lifetime caretDependentStuffLifetime);
    public virtual void HighlightForLifetime(Lifetime lifetime, HighlightInfo highlightInfo);
    public virtual void ShowInvisibleBraceHintIfNeeded(ITextControl textControl, Func`2<ITextControl, RichTextBlock> hintTextGetter, Lifetime lifetimeOfShowing);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Contexts.CaretPositionContextProvider : object {
    private ContextManager myContextManager;
    private ITextControlManager myTextControlManager;
    public CaretPositionContextProvider(Lifetime lifetime, ContextManager contextManager, ITextControlManager textControlManager);
    private void HandleFocusedTextControlChanged(Lifetime focusedTextControlLifetime);
}
public class JetBrains.ReSharper.Feature.Services.Contexts.CaretPositionKey : ContextKeyWithoutValueBase {
    [NotNullAttribute]
public static CaretPositionKey Instance;
    public bool IsClientSpecific { get; }
    private static CaretPositionKey();
    public virtual bool get_IsClientSpecific();
}
[AttributeUsageAttribute("4")]
public class JetBrains.ReSharper.Feature.Services.Contexts.ContainsContextConsumerAttribute : PartAttribute {
}
public class JetBrains.ReSharper.Feature.Services.Contexts.ContextConsumer : object {
    [NotNullAttribute]
private Action`1<Lifetime> myAction;
    private static ILogger ourLogger;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IContextKey> <ContextKeys>k__BackingField;
    public IReadOnlyList`1<IContextKey> ContextKeys { get; }
    public ContextConsumer(IReadOnlyList`1<IContextKey> keys, Action`1<Lifetime> action);
    public ContextConsumer(IContextKey key0, Action`1<Lifetime> action);
    public ContextConsumer(IContextKey key0, IContextKey key1, Action`1<Lifetime> action);
    public ContextConsumer(IContextKey key0, IContextKey key1, IContextKey key2, Action`1<Lifetime> action);
    public ContextConsumer(IContextKey key0, IContextKey key1, IContextKey key2, IContextKey key3, Action`1<Lifetime> action);
    public ContextConsumer(IContextKey key0, IContextKey key1, IContextKey key2, IContextKey key3, IContextKey key4, Action`1<Lifetime> action);
    public ContextConsumer(IContextKey key0, IContextKey key1, IContextKey key2, IContextKey key3, IContextKey key4, IContextKey key5, Action`1<Lifetime> action);
    public ContextConsumer(IContextKey key0, IContextKey key1, IContextKey key2, IContextKey key3, IContextKey key4, IContextKey key5, IContextKey key6, Action`1<Lifetime> action);
    public ContextConsumer(IContextKey key0, IContextKey key1, IContextKey key2, IContextKey key3, IContextKey key4, IContextKey key5, IContextKey key6, IContextKey key7, Action`1<Lifetime> action);
    private static ContextConsumer();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<IContextKey> get_ContextKeys();
    public sealed virtual void OnAllContextsCreated(Lifetime contextLifetime);
    public static void AsyncHandler(IShellLocks shellLocks, Lifetime lifetime, IPsiFiles psiFiles, Func`2<Lifetime, Action> action, string moniker);
    [NotNullAttribute]
[PureAttribute]
public static Action`1<Lifetime> OnCommitedPsiHandler(IShellLocks shellLocks, AsyncCommitService asyncCommitService, IPsiFiles psiFiles, Action`1<Lifetime> action);
    [NotNullAttribute]
[PureAttribute]
public static Action`1<Lifetime> OnCommitedPsiHandler(string operationName, IShellLocks shellLocks, AsyncCommitService asyncCommitService, IPsiFiles psiFiles, Action`1<Lifetime> action);
    public virtual string ToString();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Contexts.ContextConsumersWithAttributesManager : object {
    [NotNullAttribute]
private ContextManager myContextManager;
    [NotNullAttribute]
private IShellLocks myShellLocks;
    [NotNullAttribute]
private TextControlManager myTextControlManager;
    [NotNullAttribute]
private IComponentContainer myComponentContainer;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private IPsiFiles myPsiFiles;
    public ContextConsumersWithAttributesManager(Lifetime lifetime, ContextManager contextManager, IShellLocks shellLocks, ShellPartCatalogSet partsCatalogueSet, TextControlManager textControlManager, IComponentContainer componentContainer, ISolution solution, IPsiFiles psiFiles);
    private void ProcessContextConsumerContainerType(Lifetime contextConsumerContainerLifetime, Type contextConsumerContainerType);
    [NotNullAttribute]
private static Func`3<Lifetime, Lifetime, object> GetParameterResolver(ParameterInfo parameterInfo, IList`1<IContextKey> contextKeys, IComponentContainer componentContainer);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Contexts.ContextConsumerUtil : object {
    private static ILogger Log;
    private static ContextConsumerUtil();
    [ExtensionAttribute]
[NotNullAttribute]
public static IContextConsumer AssertClientSpecificConsistency(IContextConsumer consumer, IContextKey providedKey);
    [ExtensionAttribute]
public static bool HasClientSpecificKey(IContextConsumer consumer);
}
[AttributeUsageAttribute("2048")]
public class JetBrains.ReSharper.Feature.Services.Contexts.ContextKeyAttribute : PartAttribute {
    private Type myContextKeyType;
    public Type ContextKeyType { get; }
    public ContextKeyAttribute(Type contextKeyType);
    public Type get_ContextKeyType();
}
public abstract class JetBrains.ReSharper.Feature.Services.Contexts.ContextKeyWithoutValueBase : object {
    private bool JetBrains.ReSharper.Feature.Services.Contexts.IContextKey.WithValue { get; }
    private Type JetBrains.ReSharper.Feature.Services.Contexts.IContextKey.ValueType { get; }
    private object JetBrains.ReSharper.Feature.Services.Contexts.IContextKey.Value { get; }
    public bool IsClientSpecific { get; }
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.Contexts.IContextKey.get_WithValue();
    private sealed virtual override Type JetBrains.ReSharper.Feature.Services.Contexts.IContextKey.get_ValueType();
    private sealed virtual override object JetBrains.ReSharper.Feature.Services.Contexts.IContextKey.get_Value();
    public virtual bool get_IsClientSpecific();
    public virtual string ToString();
}
public abstract class JetBrains.ReSharper.Feature.Services.Contexts.ContextKeyWithPerClientValueBase`1 : ContextKeyWithValueBase`1<TContextValue> {
    private ConcurrentDictionary`2<ClientId, TContextValue> myValues;
    public bool IsClientSpecific { get; }
    public TContextValue Value { get; protected set; }
    public virtual bool get_IsClientSpecific();
    public virtual TContextValue get_Value();
    protected virtual void set_Value(TContextValue value);
    internal virtual void SetValue(Lifetime lifetime, TContextValue value);
}
public abstract class JetBrains.ReSharper.Feature.Services.Contexts.ContextKeyWithValueBase`1 : object {
    [CompilerGeneratedAttribute]
private TContextValue <Value>k__BackingField;
    private bool JetBrains.ReSharper.Feature.Services.Contexts.IContextKey.WithValue { get; }
    private Type JetBrains.ReSharper.Feature.Services.Contexts.IContextKey.ValueType { get; }
    private object JetBrains.ReSharper.Feature.Services.Contexts.IContextKey.Value { get; }
    public bool IsClientSpecific { get; }
    public TContextValue Value { get; protected set; }
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.Contexts.IContextKey.get_WithValue();
    private sealed virtual override Type JetBrains.ReSharper.Feature.Services.Contexts.IContextKey.get_ValueType();
    private sealed virtual override object JetBrains.ReSharper.Feature.Services.Contexts.IContextKey.get_Value();
    public virtual bool get_IsClientSpecific();
    [CompilerGeneratedAttribute]
public virtual TContextValue get_Value();
    [CompilerGeneratedAttribute]
protected virtual void set_Value(TContextValue value);
    internal virtual void SetValue(Lifetime lifetime, TContextValue value);
    public virtual string ToString();
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Contexts.ContextManager : object {
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private IClientSessionManager myClientSessionManager;
    [NotNullAttribute]
protected JetDispatcher Dispatcher;
    [NotNullAttribute]
protected Dictionary`2<IContextKey, Lifetime> KeyToLifetime;
    [NotNullAttribute]
protected Dictionary`2<ValueTuple`2<IContextKey, ClientId>, Lifetime> PerClientKeyToLifetime;
    [NotNullAttribute]
protected Dictionary`2<IContextConsumer, Lifetime> ConsumerToLifetime;
    [NotNullAttribute]
protected OneToSetMap`2<IContextKey, IContextConsumer> KeyToConsumer;
    [NotNullAttribute]
protected OneToSetMap`2<IContextConsumer, IContextKey> ConsumerToKey;
    [NotNullAttribute]
protected Dictionary`2<IContextKey, Exception> KeyAddStackTraces;
    [NotNullAttribute]
protected Dictionary`2<IContextKey, Exception> KeyRemoveStackTraces;
    [NotNullAttribute]
protected Dictionary`2<ValueTuple`2<IContextKey, ClientId>, Exception> PerClientKeyAddStackTraces;
    [NotNullAttribute]
protected Dictionary`2<ValueTuple`2<IContextKey, ClientId>, Exception> PerClientKeyRemoveStackTraces;
    protected bool IsActive { get; }
    public ContextManager(IShellLocks shellLocks, ILogger logger, IClientSessionManager clientSessionManager);
    public void RegisterContextConsumer(Lifetime lifetime, IContextConsumer consumer);
    protected virtual void RegisterContextConsumerInternal(Lifetime lifetime, IContextConsumer consumer);
    public void RegisterContext(Lifetime lifetime, ContextKeyWithoutValueBase key);
    public void RegisterContext(Lifetime lifetime, ContextKeyWithValueBase`1<T> key, T value);
    protected virtual void RegisterContextInternal(Lifetime initialLifetime, IContextKey key);
    protected bool AllKeysAreReady(IContextConsumer consumer, Lifetime& synchronizedLifetime);
    protected virtual bool get_IsActive();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Contexts.ContextManagerEx : object {
    [ExtensionAttribute]
public static void RegisterContextConsumer_SpecificClient(ContextManager contextManager, Lifetime lifetime, ClientId clientId, IContextConsumer consumer);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Contexts.EditorSelectionContextProvider : object {
    public EditorSelectionContextProvider(Lifetime lifetime, ContextManager contextManager, ITextControlManager textControlManager);
}
public class JetBrains.ReSharper.Feature.Services.Contexts.EditorSelectionKey : ContextKeyWithoutValueBase {
    [NotNullAttribute]
public static EditorSelectionKey Instance;
    public bool IsClientSpecific { get; }
    private static EditorSelectionKey();
    public virtual bool get_IsClientSpecific();
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Contexts.FocusedTextControlContextProvider : object {
    private ILogger myLogger;
    public FocusedTextControlContextProvider(Lifetime lifetime, ContextManager contextManager, ITextControlManager textControlManager, ILogger logger);
}
public class JetBrains.ReSharper.Feature.Services.Contexts.FocusedTextControlKey : ContextKeyWithoutValueBase {
    public static FocusedTextControlKey Instance;
    public bool IsClientSpecific { get; }
    private static FocusedTextControlKey();
    public virtual bool get_IsClientSpecific();
}
public class JetBrains.ReSharper.Feature.Services.Contexts.HighlightingProlongedLifetime : object {
    [NotNullAttribute]
public Lifetime Lifetime;
    public HighlightingProlongedLifetime(Lifetime lifetime);
}
public interface JetBrains.ReSharper.Feature.Services.Contexts.IContextConsumer {
    [NotNullAttribute]
public IReadOnlyList`1<IContextKey> ContextKeys { get; }
    public abstract virtual IReadOnlyList`1<IContextKey> get_ContextKeys();
    public abstract virtual void OnAllContextsCreated(Lifetime contextLifetime);
}
public interface JetBrains.ReSharper.Feature.Services.Contexts.IContextKey {
    public bool WithValue { get; }
    public Type ValueType { get; }
    public object Value { get; }
    public bool IsClientSpecific { get; }
    public abstract virtual bool get_WithValue();
    public abstract virtual Type get_ValueType();
    public abstract virtual object get_Value();
    public abstract virtual bool get_IsClientSpecific();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Contexts.IdlePsiCachesContextProvider : object {
    private ContextManager myContextManager;
    private IShellLocks myShellLocks;
    public IdlePsiCachesContextProvider(Lifetime lifetime, ISolution solution, IPsiCachesState psiCaches, ContextManager contextManager, IShellLocks shellLocks);
    private void HandleIdleCaches(Lifetime idleLifetime);
}
public class JetBrains.ReSharper.Feature.Services.Contexts.IdlePsiCachesKey : ContextKeyWithoutValueBase {
    public static IdlePsiCachesKey Instance;
    private static IdlePsiCachesKey();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Contexts.LastFocusedTextControlContextProvider : object {
    private ILogger myLogger;
    private ContextManager myContextManager;
    public LastFocusedTextControlContextProvider(Lifetime lifetime, ContextManager contextManager, ITextControlManager textControlManager, ILogger logger);
    private void TextControlFocusHandler(Lifetime focusLifetime, ITextControl textControl);
}
public class JetBrains.ReSharper.Feature.Services.Contexts.LastFocusedTextControlKey : ContextKeyWithoutValueBase {
    public static LastFocusedTextControlKey Instance;
    public bool IsClientSpecific { get; }
    private static LastFocusedTextControlKey();
    public virtual bool get_IsClientSpecific();
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Contexts.NotUnderPsiTransactionContextProvider : object {
    public NotUnderPsiTransactionContextProvider(Lifetime lifetime, ISolution solution, IPsiTransactions psiTransactions, ContextManager contextManager);
}
public class JetBrains.ReSharper.Feature.Services.Contexts.NotUnderPsiTransactionKey : ContextKeyWithoutValueBase {
    public static NotUnderPsiTransactionKey Instance;
    private static NotUnderPsiTransactionKey();
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Contexts.NoWriteLockContext : object {
    private IPsiServices myPsiServices;
    private ContextManager myContextManager;
    private SequentialLifetimes mySequentialLifetimes;
    [NotNullAttribute]
public static ContextKeyWithoutValueBase Instance;
    public NoWriteLockContext(IPsiServices psiServices, ContextManager contextManager, Lifetime lifetime);
    private static NoWriteLockContext();
    private void WriteLocked(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <WriteLocked>b__6_0(Lifetime lifetime);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Contexts.UnchangedDocumentContextProvider : object {
    private IShellLocks myLocks;
    private ContextManager myContextManager;
    private ITextControlManager myTextControlManager;
    private DocumentTransactionManager myDocumentTransactionManager;
    public UnchangedDocumentContextProvider(Lifetime lifetime, ISolution solution, IShellLocks locks, ContextManager contextManager, ITextControlManager textControlManager, DocumentTransactionManager documentTransactionManager);
    private void HandleFocusedTextControlChanged(Lifetime textControlLifetime);
}
public class JetBrains.ReSharper.Feature.Services.Contexts.UnchangedDocumentKey : ContextKeyWithoutValueBase {
    public static UnchangedDocumentKey Instance;
    public bool IsClientSpecific { get; }
    private static UnchangedDocumentKey();
    public virtual bool get_IsClientSpecific();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Contexts.ViewportRangeContextProvider : object {
    private ContextManager myContextManager;
    private ITextControlManager myTextControlManager;
    public ViewportRangeContextProvider(Lifetime lifetime, ContextManager contextManager, ITextControlManager textControlManager);
    private void HandleFocusedTextControlChanged(Lifetime focusedTextControlLifetime);
}
public class JetBrains.ReSharper.Feature.Services.Contexts.ViewportRangeKey : ContextKeyWithoutValueBase {
    [NotNullAttribute]
public static ViewportRangeKey Instance;
    public bool IsClientSpecific { get; }
    private static ViewportRangeKey();
    public virtual bool get_IsClientSpecific();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.CustomHighlighting.CustomHighlightingEntry : object {
    public TextRange TextRange;
    [NullableAttribute("2")]
public IDocument Document;
    public CustomHighlightingKind Kind;
    public IHighlighterTooltipProvider ToolTipProvider;
    public DocumentRange DocumentRange { get; }
    [ObsoleteAttribute("Use overload with DocumentRange")]
public CustomHighlightingEntry(TextRange range);
    public CustomHighlightingEntry(DocumentRange range);
    [ObsoleteAttribute("Use overload with DocumentRange")]
public CustomHighlightingEntry(TextRange range, CustomHighlightingKind kind);
    [ObsoleteAttribute("Use overload with DocumentRange")]
public CustomHighlightingEntry(TextRange range, RichTextBlock toolTip);
    public CustomHighlightingEntry(DocumentRange range, CustomHighlightingKind kind);
    [ObsoleteAttribute("Use overload with DocumentRange")]
public CustomHighlightingEntry(TextRange range, CustomHighlightingKind kind, string toolTip);
    public CustomHighlightingEntry(DocumentRange range, CustomHighlightingKind kind, string toolTip);
    public DocumentRange get_DocumentRange();
    public virtual string ToString();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.CustomTool.CustomToolServiceStub : object {
    public sealed virtual bool RunCustomTool(IPsiSourceFile psiSourceFile);
    public sealed virtual ICollection`1<string> GetToolsFor(IPsiSourceFile psiSourceFile);
}
public interface JetBrains.ReSharper.Feature.Services.CustomTool.ICustomToolService {
    public abstract virtual bool RunCustomTool(IPsiSourceFile psiSourceFile);
    [NotNullAttribute]
public abstract virtual ICollection`1<string> GetToolsFor(IPsiSourceFile psiSourceFile);
}
[DaemonStageAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Daemon.AfterAllReferencesResolvedDaemonStage : object {
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
}
public enum JetBrains.ReSharper.Feature.Services.Daemon.AnalysisScope : Enum {
    public int value__;
    public static AnalysisScope VISIBLE_FILES;
    public static AnalysisScope SOLUTION;
    public static AnalysisScope OFF;
}
[RegisterHighlighterAttribute("ReSharper Error Unresolved")]
[RegisterHighlighterAttribute("ReSharper Error Underlined")]
[RegisterHighlighterAttribute("ReSharper Code Analysis Error Marker on Error Stripe")]
[RegisterHighlighterAttribute("ReSharper Warning")]
[RegisterHighlighterAttribute("ReSharper Code Analysis Warning Marker on Error Stripe")]
[RegisterHighlighterAttribute("ReSharper Dead Code")]
[RegisterHighlighterAttribute("ReSharper Suggestion")]
[RegisterHighlighterAttribute("ReSharper Code Analysis Suggestion Marker on Error Stripe")]
[RegisterHighlighterAttribute("ReSharper Non-Private Unused Members")]
[RegisterHighlighterAttribute("ReSharper Hint")]
[RegisterHighlighterAttribute("ReSharper InterLine Adornment")]
[RegisterHighlighterAttribute("ReSharper Parameter Name Hint")]
[RegisterHighlighterAttribute("ReSharper Virtual Indentation")]
[RegisterHighlighterAttribute("ReSharper Parameter Name Hint Action")]
[RegisterHighlighterAttribute("ReSharper Missing Construct Hint")]
[RegisterHighlighterAttribute("ReSharper Missing Construct Hint Action")]
[RegisterHighlighterAttribute("ReSharper Resource Must Be Disposed Hint")]
[RegisterHighlighterAttribute("ReSharper Resource Must Be Disposed Hint Action")]
[RegisterHighlighterAttribute("ReSharper Resources Dispose Points")]
[RegisterHighlighterAttribute("ReSharper Resources Dispose Points Action")]
[RegisterHighlighterAttribute("ReSharper Implements")]
[RegisterHighlighterAttribute("ReSharper Overrides")]
[RegisterHighlighterAttribute("ReSharper Hides")]
[RegisterHighlighterAttribute("ReSharper Implements And Overrides")]
[RegisterHighlighterAttribute("ReSharper Implements And Hides")]
[RegisterHighlighterAttribute("ReSharper Implements Over Default")]
[RegisterHighlighterAttribute("Interface Is Implemented")]
[RegisterHighlighterAttribute("Class Is Inherited")]
[RegisterHighlighterAttribute("ReSharper Recursion")]
[RegisterHighlighterAttribute("ReSharper Global Import")]
public static class JetBrains.ReSharper.Feature.Services.Daemon.Attributes.AnalysisHighlightingAttributeIds : object {
    public static string UNRESOLVED_ERROR;
    public static string ERROR;
    public static string ERROR_MARK_ERROR_STRIPE;
    [ObsoleteAttribute]
public static string UNRESOLVED_ERROR_OLD;
    [ObsoleteAttribute]
public static string ERROR_OLD;
    public static string WARNING;
    public static string WARNING_MARK_ERROR_STRIPE;
    public static string DEADCODE;
    public static string PUBLIC_DEADCODE;
    public static string SUGGESTION;
    public static string SUGGESTION_MARK_ERROR_STRIPE;
    public static string HINT;
    public static string VIRTUAL_INDENTATION;
    public static string INTER_LINE_ADORNMENT;
    public static string PARAMETER_NAME_HINT;
    public static string PARAMETER_NAME_HINT_ACTION;
    public static string MISSING_CONSTRUCT_HINT;
    public static string MISSING_CONSTRUCT_HINT_ACTION;
    public static string RESOURCE_DISPOSE_REQUIRED_HINT;
    public static string RESOURCE_DISPOSE_REQUIRED_HINT_ACTION;
    public static string RESOURCE_DISPOSE_POINTS_HINT;
    public static string RESOURCE_DISPOSE_POINTS_HINT_ACTION;
    public static string GUTTER_MARK_IMPLEMENTS;
    public static string GUTTER_MARK_OVERRIDES;
    public static string GUTTER_MARK_IMPLEMENTS_AND_OVERRIDES;
    public static string GUTTER_MARK_HIDES;
    public static string GUTTER_MARK_IMPLEMENTS_AND_HIDES;
    public static string GUTTER_MARK_IMPLEMENTS_OVER_DEFAULT;
    public static string GUTTER_MARK_INTERFACE_IS_IMPLEMENTED;
    public static string GUTTER_MARK_CLASS_IS_INHERITED;
    public static string GUTTER_MARK_RECURSION;
    public static string GUTTER_MARK_GLOBAL_IMPORT;
    [CanBeNullAttribute]
public static string FromSeverity(Severity severity);
}
public static class JetBrains.ReSharper.Feature.Services.Daemon.Attributes.BlockShaders.BlockShadersHighlightingAttributeIds : object {
    public static string BLOCK_SHADERS_KEYWORD;
    public static string BLOCK_SHADERS_IDENTIFIER;
}
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Daemon.Attributes.DefaultHighlightingAttributeIdProvider : object {
    public virtual string GetHighlightingAttributeId(IDeclaredElement declaredElement, bool isDeclaration);
    [NotNullAttribute]
protected virtual string GetHighlightAttributeForTypeElement(ITypeElement typeElement);
}
[RegisterHighlighterAttribute("ReSharper Default Identifier")]
[RegisterHighlighterAttribute("ReSharper Constant Identifier")]
[RegisterHighlighterAttribute("ReSharper Event Identifier")]
[RegisterHighlighterAttribute("ReSharper Field Identifier")]
[RegisterHighlighterAttribute("ReSharper Static Field Identifier")]
[RegisterHighlighterAttribute("ReSharper Property Identifier")]
[RegisterHighlighterAttribute("ReSharper Local Variable Identifier")]
[RegisterHighlighterAttribute("ReSharper Parameter Identifier")]
[RegisterHighlighterAttribute("ReSharper Mutable Local Variable Identifier")]
[RegisterHighlighterAttribute("ReSharper Function Identifier")]
[RegisterHighlighterAttribute("ReSharper Method Identifier")]
[RegisterHighlighterAttribute("ReSharper Static Method Identifier")]
[RegisterHighlighterAttribute("ReSharper Operator Identifier")]
[RegisterHighlighterAttribute("ReSharper Class Identifier")]
[RegisterHighlighterAttribute("ReSharper Delegate Identifier")]
[RegisterHighlighterAttribute("ReSharper Enum Identifier")]
[RegisterHighlighterAttribute("ReSharper Interface Identifier")]
[RegisterHighlighterAttribute("ReSharper Type Parameter Identifier")]
[RegisterHighlighterAttribute("ReSharper Struct Identifier")]
[RegisterHighlighterAttribute("ReSharper Namespace Identifier")]
[RegisterHighlighterAttribute("ReSharper Keyword")]
[RegisterHighlighterAttribute("ReSharper Preprocessor Keyword")]
[RegisterHighlighterAttribute("ReSharper String")]
[RegisterHighlighterAttribute("ReSharper Number")]
[RegisterHighlighterAttribute("ReSharper Dot")]
[RegisterHighlighterAttribute("ReSharper Comma")]
[RegisterHighlighterAttribute("ReSharper Semicolon")]
[RegisterHighlighterAttribute("ReSharper Parentheses")]
[RegisterHighlighterAttribute("ReSharper Brackets")]
[RegisterHighlighterAttribute("ReSharper Braces")]
[RegisterHighlighterAttribute("ReSharper Operator Sign")]
[RegisterHighlighterAttribute("ReSharper Doc Comment")]
[RegisterHighlighterAttribute("ReSharper Doc Comment Tag Name")]
[RegisterHighlighterAttribute("ReSharper Doc Comment Attribute")]
[RegisterHighlighterAttribute("ReSharper Doc Comment Attribute Value")]
[RegisterHighlighterAttribute("ReSharper Comment")]
[RegisterHighlighterAttribute("ReSharper Text")]
[RegisterHighlighterAttribute("ReSharper Block Comment")]
[RegisterHighlighterAttribute("ReSharper Format String Item")]
[RegisterHighlighterAttribute("ReSharper Format String Item 2")]
[RegisterHighlighterAttribute("ReSharper Matched Format String Item")]
[RegisterHighlighterAttribute("ReSharper String Escape Character 1")]
[RegisterHighlighterAttribute("ReSharper String Escape Character 2")]
[RegisterHighlighterAttribute("ReSharper Inactive Preprocessor Branch")]
public static class JetBrains.ReSharper.Feature.Services.Daemon.Attributes.DefaultLanguageAttributeIds : object {
    public static string IDENTIFIER;
    public static string CONSTANT;
    public static string EVENT;
    public static string FIELD;
    public static string STATIC_FIELD;
    public static string PARAMETER;
    public static string PROPERTY;
    public static string LOCAL_VARIABLE;
    public static string MUTABLE_LOCAL_VARIABLE;
    public static string FUNCTION;
    public static string METHOD;
    public static string STATIC_METHOD;
    public static string OVERLOADED_OPERATOR;
    public static string CLASS;
    public static string INTERFACE;
    public static string DELEGATE;
    public static string STRUCT;
    public static string ENUM;
    public static string TYPE_PARAMETER;
    public static string NAMESPACE;
    public static string FORMAT_STRING_ITEM;
    public static string FORMAT_STRING_ITEM_2;
    public static string MATCHED_FORMAT_STRING_ITEM;
    public static string STRING_ESCAPE_CHARACTER_1;
    public static string STRING_ESCAPE_CHARACTER_2;
    public static string KEYWORD;
    public static string LINE_COMMENT;
    public static string BLOCK_COMMENT;
    public static string STRING;
    public static string NUMBER;
    public static string TEXT;
    public static string PREPROCESSOR_KEYWORD;
    public static string PREPROCESSOR_INACTIVE_BRANCH;
    public static string DOT;
    public static string COMMA;
    public static string SEMICOLON;
    public static string PARENTHESES;
    public static string BRACKETS;
    public static string BRACES;
    public static string OPERATOR_SIGN;
    public static string DOC_COMMENT;
    public static string DOC_COMMENT_TAG_NAME;
    public static string DOC_COMMENT_ATTRIBUTE;
    public static string DOC_COMMENT_ATTRIBUTE_VALUE;
}
[RegisterHighlighterAttribute("ReSharper Matched Brace")]
[RegisterHighlighterAttribute("ReSharper Unmatched Brace")]
[RegisterHighlighterAttribute("ReSharper Brace Outline")]
[RegisterHighlighterAttribute("ReSharper Outlined Entity")]
[RegisterHighlighterAttribute("ReSharper Context Exit")]
[RegisterHighlighterAttribute("ReSharper Usage of element under cursor")]
[RegisterHighlighterAttribute("ReSharper Hyperlink")]
[RegisterHighlighterAttribute("ReSharper Path Identifier")]
[RegisterHighlighterAttribute("ReSharper Injected Language Background")]
[RegisterHighlighterAttribute("ReSharper Async Boundary")]
[RegisterHighlighterAttribute("ReSharper Condition Element")]
public static class JetBrains.ReSharper.Feature.Services.Daemon.Attributes.GeneralHighlightingAttributeIds : object {
    public static string MATCHED_BRACE;
    public static string UNMATCHED_BRACE;
    public static string OUTLINE_BRACE;
    public static string OUTLINED_ENTITY;
    public static string CONTEXT_EXIT;
    public static string USAGE_OF_ELEMENT_UNDER_CURSOR;
    public static string HYPERLINK;
    public static string PATH;
    public static string INJECT_STRING_BACKGROUND;
    public static string ASYNC_BOUNDARY;
    public static string CONDITION_ELEMENT;
}
public static class JetBrains.ReSharper.Feature.Services.Daemon.Attributes.Idea.IdeaCssHighlighterAttributeIds : object {
    public static string CSS_IDENT;
    public static string CSS_COMMENT;
    public static string CSS_PROPERTY_NAME;
    public static string CSS_PROPERTY_VALUE;
    public static string CSS_TAG_NAME;
    public static string CSS_STRING;
    public static string CSS_NUMBER;
    public static string CSS_KEYWORD;
    public static string CSS_IMPORTANT;
    public static string CSS_FUNCTION;
    public static string CSS_URL;
    public static string CSS_OPERATORS;
    public static string CSS_PARENTHESES;
    public static string CSS_BRACKETS;
    public static string CSS_BRACES;
    public static string CSS_DOT;
    public static string CSS_SEMICOLON;
    public static string CSS_COLON;
    public static string CSS_COMMA;
    public static string CSS_BAD_CHARACTER;
    public static string CSS_COLOR;
    public static string CSS_PSEUDO;
    public static string CSS_ID_SELECTOR;
    public static string CSS_UNICODE_RANGE;
}
public static class JetBrains.ReSharper.Feature.Services.Daemon.Attributes.Idea.IdeaHighlightingAttributeIds : object {
    private static string IDEA_PREFIX;
    public static string WRONG_REFERENCES_ATTRIBUTES;
    public static string ERRORS_ATTRIBUTES;
    public static string WARNINGS_ATTRIBUTES;
    public static string NOT_USED_ELEMENT_ATTRIBUTES;
    public static string MATCHED_BRACE_ATTRIBUTES;
    public static string UNMATCHED_BRACE_ATTRIBUTES;
    public static string TODO_DEFAULT_ATTRIBUTES;
    public static string HYPERLINK_ATTRIBUTES;
    public static string LINE_FULL_COVERAGE;
    public static string LINE_PARTIAL_COVERAGE;
    public static string LINE_NONE_COVERAGE;
    public static string TEMPLATE_LANGUAGE_COLOR;
    public static string IDENTIFIER;
    public static string NUMBER;
    public static string KEYWORD;
    public static string STRING;
    public static string BLOCK_COMMENT;
    public static string LINE_COMMENT;
    public static string DOC_COMMENT;
    public static string OPERATION_SIGN;
    public static string BRACES;
    public static string DOT;
    public static string SEMICOLON;
    public static string COMMA;
    public static string PARENTHESES;
    public static string BRACKETS;
    public static string LABEL;
    public static string CONSTANT;
    public static string LOCAL_VARIABLE;
    public static string REASSIGNED_LOCAL_VARIABLE;
    public static string GLOBAL_VARIABLE;
    public static string FUNCTION_DECLARATION;
    public static string FUNCTION_CALL;
    public static string PARAMETER;
    public static string REASSIGNED_PARAMETER;
    public static string CLASS_NAME;
    public static string INTERFACE_NAME;
    public static string CLASS_REFERENCE;
    public static string INSTANCE_METHOD;
    public static string INSTANCE_FIELD;
    public static string STATIC_METHOD;
    public static string STATIC_FIELD;
    public static string DOC_COMMENT_MARKUP;
    public static string DOC_COMMENT_TAG;
    public static string DOC_COMMENT_TAG_VALUE;
    public static string VALID_STRING_ESCAPE;
    public static string INVALID_STRING_ESCAPE;
    public static string PREDEFINED_SYMBOL;
    public static string METADATA;
    public static string MARKUP_TAG;
    public static string MARKUP_ATTRIBUTE;
    public static string MARKUP_ENTITY;
    public static string INLINE_PARAMETER_HINT;
    public static string INLINE_PARAMETER_HINT_HIGHLIGHTED;
    public static string INLINE_PARAMETER_HINT_CURRENT;
    public static string REFERENCE_HYPERLINK_COLOR;
    public static string SEARCH_RESULT_ATTRIBUTES;
    public static string LIVE_TEMPLATE_ATTRIBUTES;
    public static string LIVE_TEMPLATE_INACTIVE_SEGMENT;
    public static string WRITE_SEARCH_RESULT_ATTRIBUTES;
    public static string IDENTIFIER_UNDER_CARET_ATTRIBUTES;
    public static string WRITE_IDENTIFIER_UNDER_CARET_ATTRIBUTES;
    public static string INJECTED_LANGUAGE_FRAGMENT;
    public static string DEFAULT_HIGHLIGHTED_REFERENCE;
    public static string NO_HIGHLIGHTING;
    public static string TEXT;
    public static string BAD_CHARACTER;
    public static string SUGGESTION;
    [PureAttribute]
public static bool IsIdeaAttributeId(string attributeId);
    [PureAttribute]
[NotNullAttribute]
public static string GetExternalName(string ideaAttributeKey);
    public static string TryGetExternalName(string attributeId);
}
public static class JetBrains.ReSharper.Feature.Services.Daemon.Attributes.Idea.IdeaJsHighlighterAttributeIds : object {
    public static string JS_KEYWORD;
    public static string JS_STRING;
    public static string JS_NUMBER;
    public static string JS_REGEXP;
    public static string JS_LINE_COMMENT;
    public static string JS_BLOCK_COMMENT;
    public static string JS_DOC_COMMENT;
    public static string JS_OPERATION_SIGN;
    public static string JS_PARENTHS;
    public static string JS_BRACKETS;
    public static string JS_BRACES;
    public static string JS_COMMA;
    public static string JS_DOT;
    public static string JS_SEMICOLON;
    public static string JS_BAD_CHARACTER;
    public static string JS_DOC_TAG;
    public static string JS_DOC_MARKUP;
    public static string JS_VALID_STRING_ESCAPE;
    public static string JS_INVALID_STRING_ESCAPE;
    public static string JS_LOCAL_VARIABLE;
    public static string JS_PARAMETER;
    public static string JS_INSTANCE_MEMBER_VARIABLE;
    public static string JS_STATIC_MEMBER_VARIABLE;
    public static string JS_GLOBAL_VARIABLE;
    public static string JS_GLOBAL_FUNCTION;
    public static string JS_STATIC_MEMBER_FUNCTION;
    public static string JS_INSTANCE_MEMBER_FUNCTION;
    public static string JS_CLASS;
    public static string JS_INTERFACE;
    public static string JS_LABEL;
    public static string JS_MODULE_NAME;
    public static string FUNCTION_ARROW;
}
public static class JetBrains.ReSharper.Feature.Services.Daemon.Attributes.Idea.IdeaJsonHighlighterAttributeIds : object {
    public static string JSON_BRACKETS;
    public static string JSON_BRACES;
    public static string JSON_COMMA;
    public static string JSON_COLON;
    public static string JSON_NUMBER;
    public static string JSON_STRING;
    public static string JSON_KEYWORD;
    public static string JSON_LINE_COMMENT;
    public static string JSON_BLOCK_COMMENT;
    public static string JSON_IDENTIFIER;
    public static string JSON_PROPERTY_KEY;
    public static string JSON_VALID_ESCAPE;
    public static string JSON_INVALID_ESCAPE;
}
public static class JetBrains.ReSharper.Feature.Services.Daemon.Attributes.Idea.IdeaRegexHighlightingAttributeIds : object {
    public static string CHARACTER;
    public static string DOT;
    public static string META;
    public static string INVALID_CHARACTER_ESCAPE;
    public static string BAD_CHARACTER;
    public static string REDUNDANT_ESCAPE;
    public static string PARENTHS;
    public static string BRACES;
    public static string BRACKETS;
    public static string COMMA;
    public static string ESC_CHARACTER;
    public static string CHAR_CLASS;
    public static string QUOTE_CHARACTER;
    public static string COMMENT;
    public static string QUANTIFIER;
    public static string OPTIONS;
    public static string NAME;
}
public static class JetBrains.ReSharper.Feature.Services.Daemon.Attributes.Idea.IdeaTypeScriptHighlighterAttributeIds : object {
    public static string TS_KEYWORD;
    public static string TS_STRING;
    public static string TS_NUMBER;
    public static string TS_REGEXP;
    public static string TS_LINE_COMMENT;
    public static string TS_BLOCK_COMMENT;
    public static string TS_DOC_COMMENT;
    public static string TS_OPERATION_SIGN;
    public static string TS_PARENTHS;
    public static string TS_BRACKETS;
    public static string TS_BRACES;
    public static string TS_COMMA;
    public static string TS_DOT;
    public static string TS_SEMICOLON;
    public static string TS_BAD_CHARACTER;
    public static string TS_DOC_TAG;
    public static string TS_DOC_MARKUP;
    public static string TS_VALID_STRING_ESCAPE;
    public static string TS_INVALID_STRING_ESCAPE;
    public static string TS_LOCAL_VARIABLE;
    public static string TS_PARAMETER;
    public static string TS_TYPE_PARAMETER;
    public static string TS_INSTANCE_MEMBER_VARIABLE;
    public static string TS_STATIC_MEMBER_VARIABLE;
    public static string TS_GLOBAL_VARIABLE;
    public static string TS_GLOBAL_FUNCTION;
    public static string TS_STATIC_MEMBER_FUNCTION;
    public static string TS_INSTANCE_MEMBER_FUNCTION;
    public static string TS_CLASS;
    public static string TS_INTERFACE;
    public static string TS_MODULE_NAME;
    public static string FUNCTION_ARROW;
}
public static class JetBrains.ReSharper.Feature.Services.Daemon.Attributes.Idea.IdeaXmlHighlighterColorsAttributeIds : object {
    public static string XML_PROLOGUE;
    public static string XML_COMMENT;
    public static string XML_TAG;
    public static string XML_TAG_NAME;
    public static string XML_NS_PREFIX;
    public static string XML_ATTRIBUTE_NAME;
    public static string XML_ATTRIBUTE_VALUE;
    public static string XML_TAG_DATA;
    public static string XML_ENTITY_REFERENCE;
    public static string HTML_COMMENT;
    public static string HTML_TAG;
    public static string HTML_TAG_NAME;
    public static string HTML_ATTRIBUTE_NAME;
    public static string HTML_ATTRIBUTE_VALUE;
    public static string HTML_ENTITY_REFERENCE;
    public static string HTML_CODE;
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.Attributes.IHighlightingAttributeIdProvider {
    [CanBeNullAttribute]
public abstract virtual string GetHighlightingAttributeId(IDeclaredElement declaredElement, bool isDeclaration);
}
[RegisterHighlighterAttribute("ReSharper Injected Language Keyword")]
[RegisterHighlighterAttribute("ReSharper Injected Language String")]
[RegisterHighlighterAttribute("ReSharper Injected Language Number")]
[RegisterHighlighterAttribute("ReSharper Injected Language Comment")]
[RegisterHighlighterAttribute("ReSharper Injected Language Text")]
public static class JetBrains.ReSharper.Feature.Services.Daemon.Attributes.InjectedHighlightingAttributeIds : object {
    public static string KEYWORD;
    public static string STRING;
    public static string NUMBER;
    public static string COMMENT;
    public static string TEXT;
}
public class JetBrains.ReSharper.Feature.Services.Daemon.ClassIsInheritedGutterMark : InheritanceGutterMark {
}
[ZoneDefinitionAttribute]
public class JetBrains.ReSharper.Feature.Services.Daemon.CodeInspectionPageImplZone : object {
}
[AttributeUsageAttribute("4")]
public class JetBrains.ReSharper.Feature.Services.Daemon.CompilerIdForLanguageAttribute : PartAttribute {
    [CompilerGeneratedAttribute]
private string <SeverityId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompilerId>k__BackingField;
    public string SeverityId { get; }
    public string Language { get; }
    public string CompilerId { get; }
    public CompilerIdForLanguageAttribute(string SeverityId, string Language, string CompilerId);
    [CompilerGeneratedAttribute]
public string get_SeverityId();
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public string get_CompilerId();
}
public enum JetBrains.ReSharper.Feature.Services.Daemon.CompilerWarningPreProcessResult : Enum {
    public int value__;
    public static CompilerWarningPreProcessResult NoChange;
    public static CompilerWarningPreProcessResult Suppress;
    public static CompilerWarningPreProcessResult LiftToError;
}
public abstract class JetBrains.ReSharper.Feature.Services.Daemon.CompilerWarningProcessorBase : object {
    [NullableContextAttribute("1")]
protected abstract virtual CompilerWarningPreProcessResult PreProcess(HighlightingInfo highlightingInfo, IReadOnlyCollection`1<string> compilerIds, IFile psiFile);
    [NullableContextAttribute("1")]
public virtual HighlightingInfo ProcessCompilerWarning(IFile psiFile, HighlightingInfo highlightingInfo, IReadOnlyCollection`1<string> compilerIds, Severity severity, HighlightingAttributeBase highlightingAttribute, IContextBoundSettingsStore contextBoundSettingsStore);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Daemon.ConfigurableIdentifierHighlightingStageService : object {
    private static Key FORCE_HIGHLIGHT_IDENTIFIERS;
    private static ConfigurableIdentifierHighlightingStageService();
    public virtual bool ShouldHighlightIdentifiers(IPsiSourceFile file, IContextBoundSettingsStore settingsStore);
    public static void ForceHighlightIdentifiers(IPsiSourceFile file);
}
public class JetBrains.ReSharper.Feature.Services.Daemon.ConfigurableSeverityHighlightingAttribute : HighlightingAttributeBase {
    [CompilerGeneratedAttribute]
private string <ConfigurableSeverityId>k__BackingField;
    public string ConfigurableSeverityId { get; }
    public ConfigurableSeverityHighlightingAttribute(string ConfigurableSeverityId, string Languages);
    [CompilerGeneratedAttribute]
public string get_ConfigurableSeverityId();
}
[AttributeUsageAttribute("4")]
public class JetBrains.ReSharper.Feature.Services.Daemon.ConfigurableSeverityImplementedForLanguageAttribute : PartAttribute {
    [CompilerGeneratedAttribute]
private string <SeverityId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    public string SeverityId { get; }
    public string Language { get; }
    public ConfigurableSeverityImplementedForLanguageAttribute(string SeverityId, string Language);
    [CompilerGeneratedAttribute]
public string get_SeverityId();
    [CompilerGeneratedAttribute]
public string get_Language();
}
public class JetBrains.ReSharper.Feature.Services.Daemon.ConfigurableSeverityItem : object {
    [CanBeNullAttribute]
private string myCompoundItemName;
    [CanBeNullAttribute]
private string myTitle;
    [CanBeNullAttribute]
private string myDescription;
    [CanBeNullAttribute]
private Nullable`1<PartCatalogType> myCompoundItemResourceType;
    [CanBeNullAttribute]
private Nullable`1<StringSource> myCompoundItemResourceName;
    [CanBeNullAttribute]
private Nullable`1<PartCatalogType> myTitleResourceType;
    [CanBeNullAttribute]
private Nullable`1<StringSource> myTitleResourceName;
    [CanBeNullAttribute]
private Nullable`1<PartCatalogType> myDescriptionResourceType;
    [CanBeNullAttribute]
private Nullable`1<StringSource> myDescriptionResourceName;
    [NotNullAttribute]
public string Id;
    public string GroupId;
    public Severity DefaultSeverity;
    public SolutionAnalysisMode SolutionAnalysisMode;
    [ObsoleteAttribute("Use SolutionAnalysisMode instead")]
public bool SolutionAnalysisRequired;
    [ObsoleteAttribute("Use SolutionAnalysisMode instead")]
public bool UsesSolutionAnalysisWhenAvailable;
    public bool Internal;
    [CanBeNullAttribute]
public String[] AlternativeIds;
    [CanBeNullAttribute]
public String[] CompilerIds;
    public string CompoundItemName { get; }
    public string Title { get; }
    public string Description { get; }
    [NotNullAttribute]
public string FullTitle { get; }
    public ConfigurableSeverityItem(string id, string compoundItemName, string groupId, string title, string description, Severity defaultSeverity, bool solutionAnalysisRequired, bool usesSolutionAnalysisWhenAvailable, bool internal, string alternativeIds, string compilerIds, Nullable`1<PartCatalogType> compoundItemResourceType, Nullable`1<StringSource> compoundItemResourceName, Nullable`1<PartCatalogType> titleResourceType, Nullable`1<StringSource> titleResourceName, Nullable`1<PartCatalogType> descriptionResourceType, Nullable`1<StringSource> descriptionResourceName);
    public ConfigurableSeverityItem(string id, string compoundItemName, string groupId, string title, string description, Severity defaultSeverity, SolutionAnalysisMode solutionAnalysisMode, bool internal, string alternativeIds, string compilerIds, Nullable`1<PartCatalogType> compoundItemResourceType, Nullable`1<StringSource> compoundItemResourceName, Nullable`1<PartCatalogType> titleResourceType, Nullable`1<StringSource> titleResourceName, Nullable`1<PartCatalogType> descriptionResourceType, Nullable`1<StringSource> descriptionResourceName);
    public string get_CompoundItemName();
    public string get_Title();
    public string get_Description();
    public string get_FullTitle();
    public static ConfigurableSeverityItem FromAttribute(PartCatalogAttribute attribute);
    private static SolutionAnalysisMode CalculateSolutionAnalysisMode(bool solutionAnalysisRequired, bool usesSolutionAnalysisWhenAvailable);
    private static SolutionAnalysisMode CalculateSolutionAnalysisMode(PartCatalogAttribute attribute);
}
[AttributeUsageAttribute("4")]
public class JetBrains.ReSharper.Feature.Services.Daemon.ConfigurableSeverityLanguagesAttribute : PartAttribute {
    [CompilerGeneratedAttribute]
private string <ConfigurableSeverityId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Languages>k__BackingField;
    public string ConfigurableSeverityId { get; }
    public string Languages { get; public set; }
    public ConfigurableSeverityLanguagesAttribute(string ConfigurableSeverityId, string Languages);
    [CompilerGeneratedAttribute]
public string get_ConfigurableSeverityId();
    [CompilerGeneratedAttribute]
public string get_Languages();
    [CompilerGeneratedAttribute]
public void set_Languages(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Daemon.ControlFlowDaemonUtil : object {
    private static Key`1<ControlFlowGraphBag> CONTROL_FLOW_GRAPHS;
    private static ControlFlowDaemonUtil();
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static IControlFlowGraph GetOrBuildControlFlowGraph(ElementProblemAnalyzerData data, ITreeNode graphOwner);
    [ExtensionAttribute]
public static void PinControlFlowGraph(ElementProblemAnalyzerData data, ITreeNode graphOwner);
    [ExtensionAttribute]
public static void UnpinControlFlowGraph(ElementProblemAnalyzerData data, ITreeNode graphOwner);
}
public class JetBrains.ReSharper.Feature.Services.Daemon.DaemonAdornmentProviderAttribute : Attribute {
    private Type myType;
    public Type Type { get; }
    public DaemonAdornmentProviderAttribute(Type type);
    public Type get_Type();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Feature.Services.Daemon.DaemonCustomDataConstants : object {
    public static Key`1<ISet`1<Type>> SpecificHighlightingTypesKey;
    public static Key`1<Predicate`1<IElementProblemAnalyzer>> AnalyzersFilterKey;
    private static DaemonCustomDataConstants();
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Feature.Services.Daemon.DaemonDisableResult : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsTemporary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public bool IsTemporary { get; }
    public string Message { get; }
    public DaemonDisableResult(string message, bool isTemporary);
    [CompilerGeneratedAttribute]
public bool get_IsTemporary();
    [CompilerGeneratedAttribute]
public string get_Message();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Daemon.DaemonElementProblemAnalyzerDataExtensions : object {
    [NotNullAttribute]
private static Key`1<IDaemonProcess> ourDaemonProcessKey;
    [NotNullAttribute]
private static Key`1<Boxed`1<DaemonProcessKind>> ourDaemonProcessKindKey;
    private static DaemonElementProblemAnalyzerDataExtensions();
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static Func`1<bool> GetCheckForInterrupt(IDaemonProcess daemonProcess);
    [ExtensionAttribute]
public static void SetDaemonProcess(ElementProblemAnalyzerData data, IDaemonProcess process, DaemonProcessKind processKind);
    [ExtensionAttribute]
public static void SetDaemonProcessKind(ElementProblemAnalyzerData data, DaemonProcessKind processKind);
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
public static IDaemonProcess TryGetDaemonProcess(ElementProblemAnalyzerData data);
    [ExtensionAttribute]
[PureAttribute]
public static DaemonProcessKind GetDaemonProcessKind(ElementProblemAnalyzerData data);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsSingleThreadedDaemon(ElementProblemAnalyzerData data);
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Daemon.DaemonEnablePolicyDefault : object {
    public virtual void Isolate(IPsiSourceFile sourceFile);
    public virtual bool IsSwaEnabled(IPsiSourceFile sourceFile);
    public sealed virtual bool IsDaemonEnabled(IDocument document);
    public virtual ErrorStripeRequestWithDescription NeedErrorStripe(IPsiSourceFile sourceFile);
    public virtual Nullable`1<DaemonDisableResult> GetDaemonDisableResult(IDocument document);
}
[ZoneDefinitionAttribute]
public class JetBrains.ReSharper.Feature.Services.Daemon.DaemonEngineZone : object {
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Daemon.DaemonEx : object {
    [ExtensionAttribute]
public static DaemonState State(IDaemon daemon, IDocument document);
    [ExtensionAttribute]
public static string TryGetDaemonDescription(IDaemon daemon, IDocument document);
}
public class JetBrains.ReSharper.Feature.Services.Daemon.DaemonHighlightingStatistics : object {
    private ISolution mySolution;
    private IPsiSourceFile mySourceFile;
    private IDocument myDocument;
    private DaemonPerformanceCollector myCollector;
    private Stopwatch myNormalWallWatch;
    private long myProcessTicks;
    private int myProcessCount;
    private long myStageTicks;
    private int myStagesCount;
    public DaemonHighlightingStatistics(ISolution solution, IPsiSourceFile sourceFile, IDocument document, DaemonPerformanceCollector collector);
    public void RegisterProcessCommitted(long ticks);
    public void RegisterStageCompleted(long ticks);
    public void RegisterNormalStagesDone();
    [CompilerGeneratedAttribute]
private void <RegisterNormalStagesDone>b__12_0();
}
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Daemon.DaemonPerformanceCollector : CounterUsagesCollector {
    private EventLogGroup myGroup;
    private LongEventField myNormalWallField;
    private StringEventField myFileTypeField;
    private IntEventField myLinesField;
    private VarargEventId myFinishedEvent;
    private AnonymizedIdField myIdField;
    private LongEventField myStagesTimeField;
    private IntEventField myStagesCountField;
    private LongEventField myProcessesTimeField;
    private IntEventField myProcessCountField;
    public DaemonPerformanceCollector(FeatureUsageLogger featureUsageLogger, EventLogConfiguration eventLogConfiguration);
    public virtual EventLogGroup GetGroup();
    private static int RoundToOneSignificantDigit(Int32`1<DocLine> docLines);
    private static int CoerceAtLeast(int value, int minimum);
    public void RegisterDaemonFinished(ISolution solution, string persistentId, Int32`1<DocLine> lineCount, string fileExtension, long normalElapsed, long stagesElapsed, int stagesCount, long processesElapsed, int processCount);
}
public abstract class JetBrains.ReSharper.Feature.Services.Daemon.DaemonProcessBase : object {
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private IDaemonStagesManager myDaemonStagesManager;
    [NotNullAttribute]
private IDaemonThread myDaemonThread;
    [NotNullAttribute]
private IHighlightingOverlapResolver myOverlapResolver;
    [NotNullAttribute]
private HighlightingSettingsManager myHighlightingSettingsManager;
    [NotNullAttribute]
private DependencyStore myDependencyStore;
    [NotNullAttribute]
private IDocumentInfoCache myDocumentInfoCache;
    [NotNullAttribute]
private PerformanceUserNotifications myPerformanceNotifications;
    [NotNullAttribute]
private NoInterruptWrapper myFastContentLockNotificationInterrupt;
    [NotNullAttribute]
protected IDaemonEnablePolicy EnablePolicy;
    [NotNullAttribute]
private DaemonPerformanceCollector myPerformanceCollector;
    [NotNullAttribute]
private Dictionary`2<Type, IDaemonStageProcess[]> myProcessTypeToProcess;
    [NotNullAttribute]
protected IContextBoundSettingsStore myContextBoundSettingsStore;
    [CompilerGeneratedAttribute]
private IPsiSourceFile <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiModule <PsiModule>k__BackingField;
    [CompilerGeneratedAttribute]
private IDocument <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private UserDataHolder <CustomData>k__BackingField;
    [NotNullAttribute]
private Dictionary`2<IDaemonStageProcess, IDaemonStage> myProcessToStageForAsserts;
    [CompilerGeneratedAttribute]
private long <LastRunTimestamp>k__BackingField;
    private static ObjectPool`1<PooledList`1<IDaemonStage>> ourStageListPool;
    private static ObjectPool`1<PooledDictionary`2<IDaemonStage, bool>> ourStagesDictionaryPool;
    private static ObjectPool`1<PooledHashSet`1<IDaemonStage>> ourStagesHashSetPool;
    public IPsiSourceFile SourceFile { get; }
    public ISolution Solution { get; }
    public IPsiModule PsiModule { get; }
    public IDocument Document { get; }
    public UserDataHolder CustomData { get; }
    public IContextBoundSettingsStore ContextBoundSettingsStore { get; }
    public bool FullRehighlightingRequired { get; }
    public bool InterruptFlag { get; }
    public DocumentRange VisibleRange { get; }
    protected bool RunStagesInParallel { get; }
    protected bool AnalyzeMembersInParallel { get; }
    public bool IsSingleThreadedDaemon { get; }
    public long LastRunTimestamp { get; private set; }
    protected DaemonProcessBase(IPsiSourceFile sourceFile, IDocument document, IContextBoundSettingsStore contextBoundSettingsStore);
    private static DaemonProcessBase();
    [CompilerGeneratedAttribute]
public sealed virtual IPsiSourceFile get_SourceFile();
    [CompilerGeneratedAttribute]
public sealed virtual ISolution get_Solution();
    [CompilerGeneratedAttribute]
public sealed virtual IPsiModule get_PsiModule();
    [CompilerGeneratedAttribute]
public sealed virtual IDocument get_Document();
    [CompilerGeneratedAttribute]
public sealed virtual UserDataHolder get_CustomData();
    protected virtual IHighlightingOverlapResolver CreateOverlapResolver();
    [NotNullAttribute]
protected IContextBoundSettingsStore BindSettings();
    public sealed virtual TDaemonStageProcess GetStageProcess();
    public sealed virtual IEnumerable`1<TDaemonStageProcess> GetStageProcesses();
    public sealed virtual IReadOnlyCollection`1<TDaemonStageProcess> GetCompletedStageProcesses();
    private void AssertCurrentStageHasBeforeDependencyExistsToAccessProcess(IDaemonStageProcess process);
    public sealed virtual ICollection`1<IDaemonStageProcess> GetCompletedStageProcesses();
    public sealed virtual IContextBoundSettingsStore get_ContextBoundSettingsStore();
    public abstract virtual bool IsRangeInvalidated(DocumentRange range);
    public abstract virtual bool get_FullRehighlightingRequired();
    public virtual bool get_InterruptFlag();
    public virtual DocumentRange get_VisibleRange();
    protected virtual bool get_RunStagesInParallel();
    protected virtual bool get_AnalyzeMembersInParallel();
    public bool get_IsSingleThreadedDaemon();
    [CompilerGeneratedAttribute]
public long get_LastRunTimestamp();
    [CompilerGeneratedAttribute]
private void set_LastRunTimestamp(long value);
    public sealed virtual ITaskBarrier CreateTaskBarrierForStageExecution();
    [NotNullAttribute]
public IHighlightingOverlapResolver GetOverlapResolver();
    public virtual void ClearOverlapResolver(Layer layerMask);
    private static Layer AdjustLayerFromProcess(Layer layer, IDaemonStageProcess process);
    private static Layer DaemonProcessKindToLayer(DaemonProcessKind kind, bool forCleanUp);
    protected void DoHighlighting(DaemonProcessKind processKind, Action`1<DaemonCommitContext> committer, Action onFastStagesCompleted);
    protected void DoHighlighting(DaemonProcessKind processKind, Action`1<DaemonCommitContext> committer, IContextBoundSettingsStore settingsStore, Action onFastStagesCompleted);
    private void ScheduleStages(ITaskBarrier taskBarrier, HashSet`1<IDaemonStage> stagesToRun, OneToSetMap`2<IDaemonStage, IDaemonStage> stagesBefore, DaemonProcessKind processKind, Action`2<IDaemonStage, DaemonCommitContext> stageResultCommitter, IContextBoundSettingsStore settingsStore, ThreadTransitionCookie threadTransitionCookie, DaemonHighlightingStatistics highlightingStatistics);
    protected virtual bool ShouldRunStage(IDaemonStage stage);
    private void NotifySolutionAnalysis(StageResultForSWEACollector sweaResultCollector, DaemonProcessKind processKind, IContextBoundSettingsStore settingsStore);
    [NotNullAttribute]
private StagesToRun PrepareStagesToRun(DaemonProcessKind processKind);
    [CanBeNullAttribute]
private static Action`2<IDaemonStage, DaemonCommitContext> CreateTransitWrapper(Action`1<DaemonCommitContext> committer);
    private void RunStage(IDaemonStage stage, DaemonProcessKind processKind, Action`2<IDaemonStage, DaemonCommitContext> committer, IContextBoundSettingsStore settingsStore, ThreadTransitionCookie threadTransitionCookie, DaemonHighlightingStatistics highlightingStatistics);
    protected abstract virtual void FilePartlyReanalyzed(IPsiSourceFile sourceFile, DaemonProcessBase daemonProcessBase, DaemonProcessKind processKind);
    protected abstract virtual void AnalysisCompleted(IPsiSourceFile sourceFile, DaemonProcessBase daemonProcessBase, DependencySet dependencies, bool analysisSupported, DaemonProcessKind processKind);
    protected abstract virtual void AnalysisStageCompleted(IPsiSourceFile sourceFile, IDaemonStage stage, byte layer, List`1<HighlightingInfo> stageHighlightings, bool stageFullRehighlight, List`1<DocumentRange> stageRanges, DaemonProcessKind processKind, IContextBoundSettingsStore settingsStore);
    protected abstract virtual bool ShouldNotifySwea(IPsiSourceFile sourceFile);
    [PureAttribute]
[NotNullAttribute]
private DaemonCommitContext CreateCommitContext(Type stageId, Layer layer, IContextBoundSettingsStore settingsStore, DaemonStageResult stageResult);
    [CompilerGeneratedAttribute]
[NotNullAttribute]
internal static IDocument <.ctor>g__GetSourceFileDocument|28_0(IPsiSourceFile sourceFile);
    [CompilerGeneratedAttribute]
private IContextBoundSettingsStore <BindSettings>b__30_0();
    [CompilerGeneratedAttribute]
[NotNullAttribute]
private OneToSetMap`2<IDaemonStage, IDaemonStage> <PrepareStagesToRun>g__CollectBeforeStages|70_0(HashSet`1<IDaemonStage> stagesToRun, HashSet`1<IDaemonStage> completedStages);
    [CompilerGeneratedAttribute]
private void <PrepareStagesToRun>g__EnablesDeactivatedStagesRequiredByStagesBeforeDependencies|70_1(Dictionary`2<IDaemonStage, bool> stages);
    [CompilerGeneratedAttribute]
private bool <CreateCommitContext>b__77_0();
}
public enum JetBrains.ReSharper.Feature.Services.Daemon.DaemonProcessKind : Enum {
    public int value__;
    public static DaemonProcessKind VISIBLE_DOCUMENT;
    public static DaemonProcessKind SOLUTION_ANALYSIS;
    public static DaemonProcessKind INCREMENTAL_SOLUTION_ANALYSIS;
    public static DaemonProcessKind GLOBAL_WARNINGS;
    public static DaemonProcessKind CLEANUP;
    public static DaemonProcessKind EXTERNAL_DAEMON;
    public static DaemonProcessKind OTHER;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStage")]
[MeansImplicitUseAttribute]
[ComponentInstantiationAttribute("-32758")]
public class JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageAttribute : ComponentAttribute {
    [CompilerGeneratedAttribute]
private bool <InternalMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GlobalAnalysisStage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LongRunningStage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LastStage>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <StagesBefore>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <StagesAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <OverridenStages>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <HighlightingTypes>k__BackingField;
    public bool InternalMode { get; public set; }
    public bool GlobalAnalysisStage { get; public set; }
    public bool LongRunningStage { get; public set; }
    public bool LastStage { get; public set; }
    public Type[] StagesBefore { get; public set; }
    public Type[] StagesAfter { get; public set; }
    public Type[] OverridenStages { get; public set; }
    public Type[] HighlightingTypes { get; public set; }
    public DaemonStageAttribute(Instantiation instantiation);
    [CompilerGeneratedAttribute]
public bool get_InternalMode();
    [CompilerGeneratedAttribute]
public void set_InternalMode(bool value);
    [CompilerGeneratedAttribute]
public bool get_GlobalAnalysisStage();
    [CompilerGeneratedAttribute]
public void set_GlobalAnalysisStage(bool value);
    [CompilerGeneratedAttribute]
public bool get_LongRunningStage();
    [CompilerGeneratedAttribute]
public void set_LongRunningStage(bool value);
    [CompilerGeneratedAttribute]
public bool get_LastStage();
    [CompilerGeneratedAttribute]
public void set_LastStage(bool value);
    [CompilerGeneratedAttribute]
public Type[] get_StagesBefore();
    [CompilerGeneratedAttribute]
public void set_StagesBefore(Type[] value);
    [CompilerGeneratedAttribute]
public Type[] get_StagesAfter();
    [CompilerGeneratedAttribute]
public void set_StagesAfter(Type[] value);
    [CompilerGeneratedAttribute]
public Type[] get_OverridenStages();
    [CompilerGeneratedAttribute]
public void set_OverridenStages(Type[] value);
    [CompilerGeneratedAttribute]
public Type[] get_HighlightingTypes();
    [CompilerGeneratedAttribute]
public void set_HighlightingTypes(Type[] value);
}
public class JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageResult : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<HighlightingInfo> <Highlightings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FullyRehighlighted>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <RehighlightedRange>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Layer>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <OnCommitted>k__BackingField;
    [NotNullAttribute]
public IReadOnlyList`1<HighlightingInfo> Highlightings { get; }
    public bool FullyRehighlighted { get; }
    public DocumentRange RehighlightedRange { get; }
    public byte Layer { get; }
    [CanBeNullAttribute]
public Action OnCommitted { get; public set; }
    public DaemonStageResult(IReadOnlyList`1<HighlightingInfo> highlightings);
    public DaemonStageResult(IReadOnlyList`1<HighlightingInfo> highlightings, byte layer);
    public DaemonStageResult(IReadOnlyList`1<HighlightingInfo> highlightings, DocumentRange rehighlightRange);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<HighlightingInfo> get_Highlightings();
    [CompilerGeneratedAttribute]
public bool get_FullyRehighlighted();
    [CompilerGeneratedAttribute]
public DocumentRange get_RehighlightedRange();
    [CompilerGeneratedAttribute]
public byte get_Layer();
    [CompilerGeneratedAttribute]
public Action get_OnCommitted();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OnCommitted(Action value);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageResult/<CreateResultsPerRehighlightRange>d__19")]
[NotNullAttribute]
[ItemNotNullAttribute]
[PureAttribute]
public static IEnumerable`1<DaemonStageResult> CreateResultsPerRehighlightRange(IReadOnlyCollection`1<HighlightingInfo> highlightings, IReadOnlyCollection`1<DocumentRange> rehighlightRanges, Action onCommitted);
}
public enum JetBrains.ReSharper.Feature.Services.Daemon.DaemonState : Enum {
    public int value__;
    public static DaemonState HIDDEN;
    public static DaemonState UNSUPPORTED;
    public static DaemonState DISABLED;
    public static DaemonState SUSPENDED;
    public static DaemonState INVALIDATED;
    public static DaemonState IN_PROGRESS_LOCAL_FAST;
    public static DaemonState IN_PROGRESS_LOCAL_SLOW;
    public static DaemonState IN_PROGRESS_GLOBAL;
    public static DaemonState UP_TO_DATE;
}
public class JetBrains.ReSharper.Feature.Services.Daemon.DaemonStateChangedEventArgs : object {
    [CompilerGeneratedAttribute]
private HighlightingProgressState <HighlightingState>k__BackingField;
    [CompilerGeneratedAttribute]
private IDocument <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private DaemonState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [ObsoleteAttribute("Don't use it (RIDER-38329)")]
public HighlightingProgressState HighlightingState { get; }
    public IDocument Document { get; }
    public DaemonState State { get; }
    public string Message { get; }
    public DaemonStateChangedEventArgs(IDocument document, DaemonState state, string message, HighlightingProgressState highlightingState);
    [CompilerGeneratedAttribute]
public HighlightingProgressState get_HighlightingState();
    [CompilerGeneratedAttribute]
public IDocument get_Document();
    [CompilerGeneratedAttribute]
public DaemonState get_State();
    [CompilerGeneratedAttribute]
public string get_Message();
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Feature.Services.Daemon.DaemonStateWithDescription : ValueType {
    [CompilerGeneratedAttribute]
private DaemonState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public DaemonState State { get; }
    [NotNullAttribute]
public string Description { get; }
    public DaemonStateWithDescription(DaemonState state, string description);
    [CompilerGeneratedAttribute]
public DaemonState get_State();
    [CompilerGeneratedAttribute]
public string get_Description();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Daemon.DaemonStateWithDescriptionEx : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string TryGetDaemonDescription(DaemonStateWithDescription stateWithDescription);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetDaemonDescription(DaemonStateWithDescription stateWithDescription);
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Daemon.DaemonSuppressorBase : object {
    public virtual void Suppress(Lifetime lifetime, string reason, bool alsoSuppressSwa);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Daemon.DaemonThread : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private SingleThreadExecutor myThreadExecutor;
    [CompilerGeneratedAttribute]
private Action Interrupted;
    public bool HighlightingInProgress { get; }
    public bool IsDaemonThread { get; }
    public bool Terminating { get; }
    public DaemonThread(Lifetime lifetime, IShellLocks locks, ILogger logger);
    private void SyncContinuation(Task task);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Interrupted(Action value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Interrupted(Action value);
    public virtual void EnqueueDaemonJob(Action action, TaskPriority priority);
    public virtual bool get_HighlightingInProgress();
    public virtual bool get_IsDaemonThread();
    public virtual bool get_Terminating();
    public virtual ITaskBarrier CreateTaskBarrier(IDaemonProcess owner, bool sync);
    public virtual ITaskBarrier CreateInterProcessTaskBarrier(bool sync);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Daemon.DaemonUtil : object {
    [CanBeNullAttribute]
[ThreadStaticAttribute]
private static IDaemonStage ourCurrentRunningStage;
    [ExtensionAttribute]
[NotNullAttribute]
public static IList`1<ILanguageSpecificDaemonBehavior> GetLanguageSpecificDaemonBehaviors(IPsiSourceFile sourceFile);
    [ExtensionAttribute]
public static DocumentRange GetHighlightingRange(ITreeNode node);
    [ExtensionAttribute]
public static DocumentRange GetNullableWarningHighlightingRange(ITreeNode node);
    [ExtensionAttribute]
public static DocumentRange TranslateRangeForHighlighting(IFile file, TreeTextRange textRange);
    [CanBeNullAttribute]
public static IHighlighterTooltipProvider GetHighlighterTooltipProvider(IHighlighting highlighting, ISolution solution);
    [ConditionalAttribute("JET_MODE_ASSERT")]
internal static void AssertHighlightingInDocumentRange(IPsiSourceFile sourceFile, HighlightingInfo highlightingInfo);
    [ExtensionAttribute]
[PureAttribute]
public static bool CanProduceAnyHighlightingOfType(IDaemonStage stage, IDaemonStagesManager daemonStagesManager, IReadOnlyCollection`1<Type> highlightingTypes);
    [NotNullAttribute]
[PureAttribute]
public static Predicate`1<IElementProblemAnalyzer> GetAnalyzersFilterByHighlightingTypes(ElementProblemAnalyzerRegistrar elementProblemAnalyzerRegistrar, IReadOnlyCollection`1<Type> highlightingTypes);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsSingleThreadedDaemon(IDaemonProcess daemonProcess);
    [ConditionalAttribute("JET_MODE_ASSERT")]
public static void AssertCurrentStageHasDependencyOn(IPsiServices psiServices);
    [ConditionalAttribute("JET_MODE_ASSERT")]
public static void AssertCurrentStageHasDependencyOn(IPsiServices psiServices, Predicate`1<IDaemonStage> dependencyPredicate, string predicateText);
    [MustDisposeResourceAttribute]
internal static CurrentRunningStageForAssertsCookie SetCurrentRunningStageForAsserts(IDaemonStage stage);
    [CompilerGeneratedAttribute]
internal static bool <AssertCurrentStageHasDependencyOn>g__CheckRecursively|10_0(IDaemonStage stage, <>c__DisplayClass10_0& );
}
[ZoneDefinitionAttribute]
[ZoneLicenseAttribute("3145720492160894540861205022590510994015486567574670580789")]
public class JetBrains.ReSharper.Feature.Services.Daemon.DaemonZone : object {
}
public class JetBrains.ReSharper.Feature.Services.Daemon.DeclarationDefinitionGutterMark : InheritanceGutterMark {
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Daemon.DefaultDaemon : object {
    [CompilerGeneratedAttribute]
private ISignal`1<DaemonStateChangedEventArgs> <DaemonStateChanged>k__BackingField;
    public ISignal`1<DaemonStateChangedEventArgs> DaemonStateChanged { get; }
    [ObsoleteAttribute("Use DaemonStateChanged")]
public ISignal`1<DaemonStateChangedEventArgs> DaemonStateChanged2 { get; }
    public virtual IHighlighting GetHighlighting(IHighlighter highlighter);
    public virtual bool ForceReHighlight(IDocument document);
    public sealed virtual void Invalidate();
    public sealed virtual void Invalidate(IDocument document);
    public virtual void Invalidate(string reason);
    public virtual void Invalidate(string reason, IDocument document);
    public virtual IDisposable Suspend();
    public virtual DaemonStateWithDescription StateWithDescription(IDocument document);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<DaemonStateChangedEventArgs> get_DaemonStateChanged();
    public sealed virtual ISignal`1<DaemonStateChangedEventArgs> get_DaemonStateChanged2();
    public virtual IDaemonProcess TryGetExistingDaemonProcess(IDocument document);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Daemon.DefaultHighlightingConsumer : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<HighlightingInfo> myHighlightingInfos;
    [CompilerGeneratedAttribute]
private IPsiSourceFile <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNonUserFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGeneratedFile>k__BackingField;
    public IPsiSourceFile SourceFile { get; }
    internal bool IsNonUserFile { get; }
    internal bool IsGeneratedFile { get; }
    public DefaultHighlightingConsumer(IPsiSourceFile sourceFile);
    [CompilerGeneratedAttribute]
public IPsiSourceFile get_SourceFile();
    [MustUseReturnValueAttribute]
public virtual IReadOnlyList`1<HighlightingInfo> CollectHighlightings();
    [CompilerGeneratedAttribute]
internal bool get_IsNonUserFile();
    [CompilerGeneratedAttribute]
internal bool get_IsGeneratedFile();
    public sealed virtual void ConsumeHighlighting(HighlightingInfo highlightingInfo);
    protected virtual void ConsumeHighlightingImpl(HighlightingInfo highlightingInfo);
    public virtual void ClearAndReset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Daemon.DisableByAttributeCodeInspectionSection : object {
    [CompilerGeneratedAttribute]
private string <warningId>P;
    [CompilerGeneratedAttribute]
private ITreeNode <attributeNode>P;
    [CompilerGeneratedAttribute]
private DocumentRange <disabledRange>P;
    [CompilerGeneratedAttribute]
private bool <Used>k__BackingField;
    public string WarningId { get; }
    public ITreeNode StartTreeNode { get; }
    [NullableAttribute("2")]
public ITreeNode EndTreeNode { get; }
    public DocumentRange DisabledRange { get; }
    public bool Used { get; public set; }
    public IEnumerable`1<IDisableCodeInspectionSection> RelatedSections { get; }
    public DisableByAttributeCodeInspectionSection(string warningId, ITreeNode attributeNode, DocumentRange disabledRange);
    public sealed virtual string get_WarningId();
    public sealed virtual ITreeNode get_StartTreeNode();
    [NullableContextAttribute("2")]
public sealed virtual ITreeNode get_EndTreeNode();
    public sealed virtual DocumentRange get_DisabledRange();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Used();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Used(bool value);
    public sealed virtual IEnumerable`1<IDisableCodeInspectionSection> get_RelatedSections();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Daemon.DisableByCommentCodeInspectionSection : object {
    [CompilerGeneratedAttribute]
private string <warningId>P;
    [CompilerGeneratedAttribute]
private ITreeNode <startCommentNode>P;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IDisableCodeInspectionSection> myRelatedInfos;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITreeNode <EndTreeNode>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <DisabledRange>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Used>k__BackingField;
    public string WarningId { get; }
    public ITreeNode StartTreeNode { get; }
    [NullableAttribute("2")]
public ITreeNode EndTreeNode { get; private set; }
    public DocumentRange DisabledRange { get; private set; }
    public bool Used { get; public set; }
    public IEnumerable`1<IDisableCodeInspectionSection> RelatedSections { get; }
    public DisableByCommentCodeInspectionSection(string warningId, ITreeNode startCommentNode);
    public sealed virtual string get_WarningId();
    public sealed virtual ITreeNode get_StartTreeNode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual ITreeNode get_EndTreeNode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_EndTreeNode(ITreeNode value);
    [CompilerGeneratedAttribute]
public sealed virtual DocumentRange get_DisabledRange();
    [CompilerGeneratedAttribute]
private void set_DisabledRange(DocumentRange value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Used();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Used(bool value);
    public sealed virtual IEnumerable`1<IDisableCodeInspectionSection> get_RelatedSections();
    public void SetEndCommentNode(ITreeNode endCommentNode);
    private DocumentRange CalcTextRange(ITreeNode endCommentNode);
    private DocumentOffset FindStartDisableRangeOffset();
    public void SetDisabledTextRangeEndOffset(DocumentOffset documentEndOffset);
    public void AddRelatedSection(IDisableCodeInspectionSection relatedSection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Daemon.DisableOnceCodeInspectionSection : object {
    [CompilerGeneratedAttribute]
private string <warningId>P;
    [CompilerGeneratedAttribute]
private ITreeNode <commentNode>P;
    [CompilerGeneratedAttribute]
private DocumentRange <disabledRange>P;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IDisableCodeInspectionSection> myRelatedInfos;
    [CompilerGeneratedAttribute]
private bool <Used>k__BackingField;
    public string WarningId { get; }
    public ITreeNode StartTreeNode { get; }
    [NullableAttribute("2")]
public ITreeNode EndTreeNode { get; }
    public DocumentRange DisabledRange { get; }
    public bool Used { get; public set; }
    public IEnumerable`1<IDisableCodeInspectionSection> RelatedSections { get; }
    public DisableOnceCodeInspectionSection(string warningId, ITreeNode commentNode, DocumentRange disabledRange);
    public sealed virtual string get_WarningId();
    public sealed virtual ITreeNode get_StartTreeNode();
    [NullableContextAttribute("2")]
public sealed virtual ITreeNode get_EndTreeNode();
    public sealed virtual DocumentRange get_DisabledRange();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Used();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Used(bool value);
    public sealed virtual IEnumerable`1<IDisableCodeInspectionSection> get_RelatedSections();
    public bool ShouldIgnoreHighlighting(HighlightingInfo highlightingInfo, DocumentRange& disableOnceRange);
    public void AddRelatedSection(IDisableCodeInspectionSection relatedSection);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Daemon.DocumentInfoCache : SimpleICache`1<DocumentInfo> {
    private IPersistentIndexManager myPersistentIndexManager;
    private PerformanceThresholds myThresholds;
    private ILogger myLogger;
    public string Version { get; }
    protected string CachesLoadingMessage { get; }
    public DocumentInfoCache(Lifetime lifetime, IPersistentIndexManager persistentIndexManager, PerformanceThresholds thresholds, ILogger logger, IShellLocks locks);
    public virtual string get_Version();
    public sealed virtual int GetDocumentLength(IPsiSourceFile psiSourceFile);
    public sealed virtual Nullable`1<DaemonDisableResult> GetDaemonDisableResult(IProjectFile file);
    public sealed virtual Nullable`1<DaemonDisableResult> GetDaemonDisableResult(IPsiSourceFile file);
    protected virtual string get_CachesLoadingMessage();
    protected virtual bool IsApplicable(IPsiSourceFile sourceFile);
    public virtual object Build(IPsiSourceFile sourceFile, bool isStartup);
}
public abstract class JetBrains.ReSharper.Feature.Services.Daemon.ElementProblemAnalyzer`1 : object {
    [NullableContextAttribute("1")]
private sealed virtual override void JetBrains.ReSharper.Feature.Services.Daemon.IElementProblemAnalyzer.Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    [NullableContextAttribute("1")]
protected abstract virtual void Run(T element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[MeansImplicitUseAttribute]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.Daemon.IElementProblemAnalyzer")]
[ComponentInstantiationAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Daemon.ElementProblemAnalyzerAttribute : SolutionComponentAttribute {
    protected static Instantiation ElementProblemAnalyzerDefaultInstantiation;
    [CompilerGeneratedAttribute]
private Type[] <ElementTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <HighlightingTypes>k__BackingField;
    [NotNullAttribute]
public Type[] ElementTypes { get; }
    [NotNullAttribute]
public Type[] HighlightingTypes { get; public set; }
    public ElementProblemAnalyzerAttribute(Instantiation instantiation, Type[] ElementTypes);
    public ElementProblemAnalyzerAttribute(Type[] ElementTypes);
    [CompilerGeneratedAttribute]
public Type[] get_ElementTypes();
    [CompilerGeneratedAttribute]
public Type[] get_HighlightingTypes();
    [CompilerGeneratedAttribute]
public void set_HighlightingTypes(Type[] value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Daemon.ElementProblemAnalyzerData : ConcurrentUserDataHolder {
    [NullableAttribute("2")]
private Func`1<bool> myCheckForInterrupt;
    [CompilerGeneratedAttribute]
private IFile <File>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IPsiSourceFile <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private IContextBoundSettingsStore <SettingsStore>k__BackingField;
    [CompilerGeneratedAttribute]
private ElementProblemAnalyzerRunKind <RunKind>k__BackingField;
    public IFile File { get; }
    [NullableAttribute("2")]
public IPsiSourceFile SourceFile { get; }
    public ISolution Solution { get; }
    public IContextBoundSettingsStore SettingsStore { get; }
    public ElementProblemAnalyzerRunKind RunKind { get; }
    public ElementProblemAnalyzerData(IFile file, IContextBoundSettingsStore settingsStore, ElementProblemAnalyzerRunKind runKind, Func`1<bool> checkForInterrupt);
    [CompilerGeneratedAttribute]
public IFile get_File();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IPsiSourceFile get_SourceFile();
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    [CompilerGeneratedAttribute]
public IContextBoundSettingsStore get_SettingsStore();
    [CompilerGeneratedAttribute]
public ElementProblemAnalyzerRunKind get_RunKind();
    public void ThrowIfInterrupted();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("0")]
[NonHighlightingSourceAttribute]
public class JetBrains.ReSharper.Feature.Services.Daemon.ElementProblemAnalyzerRegistrar : object {
    protected HighlightingSettingsManager HighlightingSettingsManager;
    protected Dictionary`2<IElementProblemAnalyzer, ElementProblemAnalyzerAttribute> Analyzers;
    protected Dictionary`2<Type, AnalyzerInfo[]> AnalyzersPerNodeType;
    protected Dictionary`2<Type, HighlightingTypesSet> HandledHighlightingTypes;
    private HighlightingTypesSet myAllHandledHighlightingTypes;
    public IReadOnlyDictionary`2<IElementProblemAnalyzer, ElementProblemAnalyzerAttribute> AnalyzersTable { get; }
    public ElementProblemAnalyzerRegistrar(HighlightingSettingsManager highlightingSettingsManager, IEnumerable`1<IElementProblemAnalyzer> analyzers);
    public IReadOnlyDictionary`2<IElementProblemAnalyzer, ElementProblemAnalyzerAttribute> get_AnalyzersTable();
    public virtual IElementAnalyzerDispatcher CreateDispatcher(ElementProblemAnalyzerData data, Predicate`1<IElementProblemAnalyzer> analyzerFilter, Severity minimalSeverity);
    [PureAttribute]
public bool CheckHighlightingIsHandled(Type highlightingType);
    [PureAttribute]
public HighlightingTypesSet GetAnalyzerHandledHighlightingTypes(Type analyzerType);
    private AnalyzerInfo[] GetAllAnalyzersForNodeType(Type type);
}
public enum JetBrains.ReSharper.Feature.Services.Daemon.ElementProblemAnalyzerRunKind : Enum {
    public int value__;
    public static ElementProblemAnalyzerRunKind FullDaemon;
    public static ElementProblemAnalyzerRunKind UnderCaretDaemon;
    public static ElementProblemAnalyzerRunKind ScopedCleanup;
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Feature.Services.Daemon.ErrorStripeRequest : Enum {
    public int value__;
    public static ErrorStripeRequest NONE;
    public static ErrorStripeRequest STRIPE;
    public static ErrorStripeRequest ERRORS;
    public static ErrorStripeRequest STRIPE_AND_ERRORS;
}
public class JetBrains.ReSharper.Feature.Services.Daemon.ErrorStripeRequestWithDescription : ValueType {
    [CompilerGeneratedAttribute]
private ErrorStripeRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public static ErrorStripeRequestWithDescription NoneNoPsi;
    public static ErrorStripeRequestWithDescription NoneNoCodeModel;
    public static ErrorStripeRequestWithDescription StripeAndErrors;
    public ErrorStripeRequest Request { get; }
    [NotNullAttribute]
public string Description { get; }
    public ErrorStripeRequestWithDescription(ErrorStripeRequest request, string description);
    private static ErrorStripeRequestWithDescription();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ErrorStripeRequest get_Request();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Description();
    public static ErrorStripeRequestWithDescription None(string description);
    public static ErrorStripeRequestWithDescription CreateNoneNoPsi(IPsiSourceFileProperties properties);
    public static ErrorStripeRequestWithDescription CreateNoneNoCodeModel(IPsiSourceFileProperties properties);
    public static ErrorStripeRequestWithDescription Stripe(string description);
    public static ErrorStripeRequestWithDescription Errors(string description);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Daemon.ExternalFilesProcessingWatcher : object {
    private TimeSpan myLockTimeout;
    private ReaderWriterLockSlim myLock;
    private Lifetime myLifetime;
    private ILogger myLogger;
    private IShellLocks myShellLocks;
    private IPsiServices myPsiServices;
    private IPsiModules myPsiModules;
    private ChangeManager myChangeManager;
    private SynchronizationPoint mySyncPoint;
    private HashSet`1<string> mySyncPointReasons;
    private HybridCollection`1<DependentFilesCacheBase> myDependentFilesCaches;
    private HybridCollection`1<DependentFilesModuleFactory> myDependentFilesModuleFactories;
    private CollectionEvents`1<IPsiSourceFile> myDirtySourceFiles;
    private bool myHasUnprocessed;
    private LifetimeDefinition myProcessingLifetimeDef;
    public ICollectionEvents`1<IPsiSourceFile> DirtySourceFiles { get; }
    public ExternalFilesProcessingWatcher(Lifetime lifetime, ILogger logger, IShellLocks shellLocks, IPsiServices psiServices, IPsiModules psiModules, ChangeManager changeManager, SynchronizationPoints syncPoints, IEnumerable`1<DependentFilesCacheBase> dependentFilesCaches, IEnumerable`1<DependentFilesModuleFactory> dependentFilesModuleFactories);
    public ICollectionEvents`1<IPsiSourceFile> get_DirtySourceFiles();
    private void OnUnprocessedItemAdded(IFileDependency fileDependency);
    private void OnUnprocessedItemsEmpty();
    private void LaunchCheckProcessingState(Lifetime lifetime);
    private sealed virtual override object JetBrains.Application.changes.IChangeProvider.Execute(IChangeMap changeMap);
    private void CheckProcessingState();
    public sealed virtual Nullable`1<DaemonDisableResult> GetDaemonDisableResult(IProjectFile file);
    public sealed virtual Nullable`1<DaemonDisableResult> GetDaemonDisableResult(IPsiSourceFile file);
    [CompilerGeneratedAttribute]
private void <.ctor>b__17_1(AddRemoveEventArgs`1<IFileDependency> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__17_2(Lifetime lt);
    [CompilerGeneratedAttribute]
private void <.ctor>b__17_0(Lifetime asyncLifetime);
    [CompilerGeneratedAttribute]
private void <.ctor>b__17_3();
    [CompilerGeneratedAttribute]
private void <.ctor>b__17_4();
    [CompilerGeneratedAttribute]
private void <.ctor>b__17_5();
    [CompilerGeneratedAttribute]
private void <OnUnprocessedItemAdded>b__18_1(Lifetime recurringLifetime);
    [CompilerGeneratedAttribute]
private void <OnUnprocessedItemAdded>b__18_3(Lifetime asyncLifetime);
    [CompilerGeneratedAttribute]
private void <OnUnprocessedItemAdded>b__18_6(IFileDependency dependency);
    [CompilerGeneratedAttribute]
private void <OnUnprocessedItemAdded>b__18_2(Lifetime asyncLifetime);
    [CompilerGeneratedAttribute]
private void <OnUnprocessedItemsEmpty>b__19_0();
    [CompilerGeneratedAttribute]
private void <LaunchCheckProcessingState>b__20_0();
    [CompilerGeneratedAttribute]
private bool <GetDaemonDisableResult>b__23_0(IPsiSourceFile sourceFile);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Daemon.FilteringHighlightingConsumer : DefaultHighlightingConsumer {
    private IHighlightingSettingsManager myHighlightingManager;
    private IFile myPsiFile;
    private ISolution mySolution;
    [NullableAttribute("2")]
private ICompilerWarningProcessor myCompilerWarningProcessor;
    private IContextBoundSettingsStore myStoreBoundToSourceFile;
    [NullableAttribute("2")]
private IgnoreWarningsRegionsInfo myIgnoreRegionsInfo;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<DisableOnceOccurrence, HighlightingInfo> myDisableOnceMostLeftSuppressedHighlighting;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HashSet`1<IHighlighting> mySuppressedHighlightings;
    public FilteringHighlightingConsumer(IPsiSourceFile sourceFile, IFile psiFile, IContextBoundSettingsStore storeBoundToSourceFile);
    public FilteringHighlightingConsumer(IPsiSourceFile sourceFile, IFile psiFile, IContextBoundSettingsStore storeBoundToSourceFile, IgnoreWarningsRegionsInfo ignoreRegionsInfo);
    public virtual IReadOnlyList`1<HighlightingInfo> CollectHighlightings();
    protected virtual void ConsumeHighlightingImpl(HighlightingInfo highlightingInfo);
    private SuppressionKind PreprocessAndGetHighlightingSuppressionKind(HighlightingInfo& highlightingInfo, IReadOnlyList`1& compilerIds);
    private bool CheckSuppressedAtRange(HighlightingInfo highlightingInfo, SuppressionKind suppressionKind, IReadOnlyList`1<string> compilerIds);
    private bool CheckSeverityIdSuppression(HighlightingInfo highlightingInfo, string configurableSeverityId, bool isCompilerWarning);
    private bool CheckStaticSeveritySuppression(HighlightingInfo highlightingInfo, ISuppressableStaticSeverityHighlighting suppressableHighlighting);
    private bool ProcessSuppressedHighlighting(HighlightingInfo highlightingInfo, string suppressionId, SuppressionInfo suppression);
    public void RecomputeIgnoreRegions();
    public virtual void ClearAndReset();
    [CompilerGeneratedAttribute]
private bool <CollectHighlightings>b__10_0(HighlightingInfo highlightingInfo);
}
public static class JetBrains.ReSharper.Feature.Services.Daemon.FrontendHighlighterSeverities : object {
    public static string ERROR;
    public static string WARNING;
    public static string SUGGESTION;
    public static string INFORMATION;
    public static string BACKGROUND;
    public static string TYPO;
    public static string GRAMMAR_ERROR;
    public static string WEAK_WARNING;
}
[DaemonStageAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Daemon.GlobalFileStructureCollectorStage : object {
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Daemon.GlobalImportMark : IconGutterMarkType {
    public IAnchor Priority { get; }
    public virtual IAnchor get_Priority();
    public virtual IEnumerable`1<BulbMenuItem> GetBulbMenuItems(IHighlighter highlighter);
}
public class JetBrains.ReSharper.Feature.Services.Daemon.HidesGutterMark : InheritanceGutterMark {
}
public static class JetBrains.ReSharper.Feature.Services.Daemon.HighlighterGroupsHelper : object {
    public static IRiderHighlighterNamesProvider DefaultNamesProvider;
    public static HighlighterGroup OTHER_GROUP;
    private static Comparer`1<string> ourComparer;
    public static string GENERAL_GROUP_PREFIX;
    public static string OTHER_GROUP_PREFIX;
    private static SortedDictionary`2<string, string> ourPrefixToHighlighterGroupId;
    private static HighlighterGroupsHelper();
    public static string InferHighlighterGroupId(string attributeId);
}
public class JetBrains.ReSharper.Feature.Services.Daemon.HighlighterUtils : object {
    public static bool IsRainbowOnForLanguage(IContextBoundSettingsStore settingsStore, string languageId);
    public static string GetSeverity(IHighlighter highlighter);
    public static string GetSeverity(string attributeId);
}
[AttributeUsageAttribute("4")]
public abstract class JetBrains.ReSharper.Feature.Services.Daemon.HighlightingAttributeBase : PartAttribute {
    private string myToolTipFormatString;
    [CompilerGeneratedAttribute]
private string <AttributeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorStripeColorHighlighterAttributeId>k__BackingField;
    [CompilerGeneratedAttribute]
private OverlapResolveKind <OverlapResolve>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OverloadResolvePriority>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowToolTipInStatusBar>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ToolTipFormatStringResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTipFormatStringResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Languages>k__BackingField;
    [CanBeNullAttribute]
public string AttributeId { get; public set; }
    [CanBeNullAttribute]
public string ErrorStripeColorHighlighterAttributeId { get; public set; }
    public OverlapResolveKind OverlapResolve { get; public set; }
    public int OverloadResolvePriority { get; public set; }
    public bool ShowToolTipInStatusBar { get; public set; }
    public string ToolTipFormatString { get; public set; }
    public Type ToolTipFormatStringResourceType { get; public set; }
    public string ToolTipFormatStringResourceName { get; public set; }
    public string Languages { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AttributeId();
    [CompilerGeneratedAttribute]
public void set_AttributeId(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorStripeColorHighlighterAttributeId();
    [CompilerGeneratedAttribute]
public void set_ErrorStripeColorHighlighterAttributeId(string value);
    [CompilerGeneratedAttribute]
public OverlapResolveKind get_OverlapResolve();
    [CompilerGeneratedAttribute]
public void set_OverlapResolve(OverlapResolveKind value);
    [CompilerGeneratedAttribute]
public int get_OverloadResolvePriority();
    [CompilerGeneratedAttribute]
public void set_OverloadResolvePriority(int value);
    [CompilerGeneratedAttribute]
public bool get_ShowToolTipInStatusBar();
    [CompilerGeneratedAttribute]
public void set_ShowToolTipInStatusBar(bool value);
    public string get_ToolTipFormatString();
    public void set_ToolTipFormatString(string value);
    [CompilerGeneratedAttribute]
public Type get_ToolTipFormatStringResourceType();
    [CompilerGeneratedAttribute]
public void set_ToolTipFormatStringResourceType(Type value);
    [CompilerGeneratedAttribute]
public string get_ToolTipFormatStringResourceName();
    [CompilerGeneratedAttribute]
public void set_ToolTipFormatStringResourceName(string value);
    [CompilerGeneratedAttribute]
public string get_Languages();
    [CompilerGeneratedAttribute]
public void set_Languages(string value);
}
public static class JetBrains.ReSharper.Feature.Services.Daemon.HighlightingAttributeIds : object {
    private static string UseAnalysisHighlightingAttributeIdsMessage;
    [ObsoleteAttribute("Use AnalysisHighlightingAttributeIds")]
public static string UNRESOLVED_ERROR_ATTRIBUTE;
    [ObsoleteAttribute("Use AnalysisHighlightingAttributeIds")]
public static string ERROR_ATTRIBUTE;
    [ObsoleteAttribute("Use AnalysisHighlightingAttributeIds")]
public static string ANALYSIS_ERROR_ERRORSTRIPE;
    [ObsoleteAttribute("Use AnalysisHighlightingAttributeIds")]
public static string WARNING_ATTRIBUTE;
    [ObsoleteAttribute("Use AnalysisHighlightingAttributeIds")]
public static string ANALYSIS_WARNING_ERRORSTRIPE;
    [ObsoleteAttribute("Use AnalysisHighlightingAttributeIds")]
public static string DEADCODE_ATTRIBUTE;
    [ObsoleteAttribute("Use AnalysisHighlightingAttributeIds")]
public static string PUBLIC_DEADCODE_ATTRIBUTE;
    [ObsoleteAttribute("Use AnalysisHighlightingAttributeIds")]
public static string SUGGESTION_ATTRIBUTE;
    [ObsoleteAttribute("Use AnalysisHighlightingAttributeIds")]
public static string ANALYSIS_SUGGESTION_ERRORSTRIPE;
    [ObsoleteAttribute("Use AnalysisHighlightingAttributeIds")]
public static string HINT_ATTRIBUTE;
    [ObsoleteAttribute("Use AnalysisHighlightingAttributeIds")]
public static string IMPLEMENTS_ATTRIBUTE;
    [ObsoleteAttribute("Use AnalysisHighlightingAttributeIds")]
public static string OVERRIDES_ATTRIBUTE;
    [ObsoleteAttribute("Use AnalysisHighlightingAttributeIds")]
public static string IMPLEMENTS_AND_OVERRIDES_ATTRIBUTE;
    [ObsoleteAttribute("Use AnalysisHighlightingAttributeIds")]
public static string HIDES_ATTRIBUTE;
    [ObsoleteAttribute("Use AnalysisHighlightingAttributeIds")]
public static string IMPLEMENTS_AND_HIDES_ATTRIBUTE;
    [ObsoleteAttribute("Use AnalysisHighlightingAttributeIds")]
public static string INTERFACE_IS_IMPLEMENTED_ATTRIBUTE;
    [ObsoleteAttribute("Use AnalysisHighlightingAttributeIds")]
public static string CLASS_IS_INHERITED_ATTRIBUTE;
    [ObsoleteAttribute("Use AnalysisHighlightingAttributeIds")]
public static string RECURSION_ATTRIBUTE;
    [ObsoleteAttribute("Use AnalysisHighlightingAttributeIds")]
public static string PARAMETER_NAME_HINT_ATTRIBUTE;
    [ObsoleteAttribute("Use AnalysisHighlightingAttributeIds")]
public static string PARAMETER_NAME_HINT_ACTION_ATTRIBUTE;
    [ObsoleteAttribute("Use AnalysisHighlightingAttributeIds")]
public static string MISSING_CONSTRUCT_HINT_ATTRIBUTE;
    private static string DEFAULT_LANGUAGE_MESSAGE;
    [ObsoleteAttribute("Create ids for your language and [RegisterHighlighter] with fallback to DefaultLanguageAttributeIds")]
public static string CONSTANT_IDENTIFIER_ATTRIBUTE;
    [ObsoleteAttribute("Create ids for your language and [RegisterHighlighter] with fallback to DefaultLanguageAttributeIds")]
public static string EVENT_IDENTIFIER_ATTRIBUTE;
    [ObsoleteAttribute("Create ids for your language and [RegisterHighlighter] with fallback to DefaultLanguageAttributeIds")]
public static string FIELD_IDENTIFIER_ATTRIBUTE;
    [ObsoleteAttribute("Create ids for your language and [RegisterHighlighter] with fallback to DefaultLanguageAttributeIds")]
public static string PROPERTY_IDENTIFIER_ATTRIBUTE;
    [ObsoleteAttribute("Create ids for your language and [RegisterHighlighter] with fallback to DefaultLanguageAttributeIds")]
public static string LOCAL_VARIABLE_IDENTIFIER_ATTRIBUTE;
    [ObsoleteAttribute("Create ids for your language and [RegisterHighlighter] with fallback to DefaultLanguageAttributeIds")]
public static string MUTABLE_LOCAL_VARIABLE_IDENTIFIER_ATTRIBUTE;
    [ObsoleteAttribute("Create ids for your language and [RegisterHighlighter] with fallback to DefaultLanguageAttributeIds")]
public static string METHOD_IDENTIFIER_ATTRIBUTE;
    [ObsoleteAttribute("Create ids for your language and [RegisterHighlighter] with fallback to DefaultLanguageAttributeIds")]
public static string OPERATOR_IDENTIFIER_ATTRIBUTE;
    [ObsoleteAttribute("Create ids for your language and [RegisterHighlighter] with fallback to DefaultLanguageAttributeIds")]
public static string TYPE_CLASS_ATTRIBUTE;
    [ObsoleteAttribute("Create ids for your language and [RegisterHighlighter] with fallback to DefaultLanguageAttributeIds")]
public static string TYPE_INTERFACE_ATTRIBUTE;
    [ObsoleteAttribute("Create ids for your language and [RegisterHighlighter] with fallback to DefaultLanguageAttributeIds")]
public static string TYPE_DELEGATE_ATTRIBUTE;
    [ObsoleteAttribute("Create ids for your language and [RegisterHighlighter] with fallback to DefaultLanguageAttributeIds")]
public static string TYPE_STRUCT_ATTRIBUTE;
    [ObsoleteAttribute("Create ids for your language and [RegisterHighlighter] with fallback to DefaultLanguageAttributeIds")]
public static string TYPE_ENUM_ATTRIBUTE;
    [ObsoleteAttribute("Create ids for your language and [RegisterHighlighter] with fallback to DefaultLanguageAttributeIds")]
public static string TYPE_PARAMETER_ATTRIBUTE;
    [ObsoleteAttribute("Create ids for your language and [RegisterHighlighter] with fallback to DefaultLanguageAttributeIds")]
public static string NAMESPACE_IDENTIFIER_ATTRIBUTE;
    [ObsoleteAttribute("Create ids for your language and [RegisterHighlighter] with fallback to DefaultLanguageAttributeIds")]
public static string PARAMETER_IDENTIFIER_ATTRIBUTE;
    private static string CSHARP_ATTRIBUTES_MESSAGE;
    [ObsoleteAttribute("Use CSharpHighlightingAttributeIds or register new highlighter for your language")]
public static string EXTENSION_METHOD_IDENTIFIER_ATTRIBUTE;
    [ObsoleteAttribute("Use CSharpHighlightingAttributeIds or register new highlighter for your language")]
public static string TYPE_STATIC_CLASS_ATTRIBUTE;
    [ObsoleteAttribute("Use CSharpHighlightingAttributeIds or register new highlighter for your language")]
public static string LATE_BOUND_IDENTIFIER_ATTRIBUTE;
    [ObsoleteAttribute("Use CSharpHighlightingAttributeIds or register new highlighter for your language")]
public static string LOCAL_FUNCTION_IDENTIFIER_ATTRIBUTE;
    [ObsoleteAttribute("Use CSharpHighlightingAttributeIds or register new highlighter for your language")]
public static string TUPLE_COMPONENT_NAME_ATTRIBUTE;
    private static string UseGeneralHighlightingAttributeIdsMessage;
    [ObsoleteAttribute("Use GeneralHighlightingAttributeIds")]
public static string PATH_IDENTIFIER_ATTRIBUTE;
    [ObsoleteAttribute("Use GeneralHighlightingAttributeIds")]
public static string INJECT_STRING_BACKGROUND;
    [ObsoleteAttribute("Create ids for your language and [RegisterHighlighter] with fallback to DefaultLanguageAttributeIds")]
public static string FORMAT_STRING_ITEM;
    [ObsoleteAttribute("Create ids for your language and [RegisterHighlighter] with fallback to DefaultLanguageAttributeIds")]
public static string FORMAT_STRING_ITEM_2;
    [ObsoleteAttribute("Create ids for your language and [RegisterHighlighter] with fallback to DefaultLanguageAttributeIds")]
public static string MATCHED_FORMAT_STRING_ITEM;
    [ObsoleteAttribute("Create ids for your language and [RegisterHighlighter] with fallback to DefaultLanguageAttributeIds")]
public static string STRING_ESCAPE_CHARACTER_PRIMARY;
    [ObsoleteAttribute("Create ids for your language and [RegisterHighlighter] with fallback to DefaultLanguageAttributeIds")]
public static string STRING_ESCAPE_CHARACTER_SECONDARY;
    [ObsoleteAttribute("Use GeneralHighlightingAttributeIds")]
public static string MATCHED_BRACE;
    [ObsoleteAttribute("Use GeneralHighlightingAttributeIds")]
public static string UNMATCHED_BRACE;
    [ObsoleteAttribute("Use GeneralHighlightingAttributeIds")]
public static string OUTLINE_BRACE;
    [ObsoleteAttribute("Use GeneralHighlightingAttributeIds")]
public static string OUTLINED_ENTITY;
    [ObsoleteAttribute("Use GeneralHighlightingAttributeIds")]
public static string CONTEXT_EXIT;
    [ObsoleteAttribute("Use GeneralHighlightingAttributeIds")]
public static string USAGE_OF_ELEMENT_UNDER_CURSOR;
    [ObsoleteAttribute("Create ids for your language and [RegisterHighlighter] with fallback to DefaultLanguageAttributeIds")]
public static string KEYWORD;
    [ObsoleteAttribute("Create ids for your language and [RegisterHighlighter] with fallback to DefaultLanguageAttributeIds")]
public static string STRING;
    [ObsoleteAttribute("Create ids for your language and [RegisterHighlighter] with fallback to DefaultLanguageAttributeIds")]
public static string NUMBER;
    [ObsoleteAttribute("Create ids for your language and [RegisterHighlighter] with fallback to DefaultLanguageAttributeIds")]
public static string COMMENT;
    [ObsoleteAttribute("Create ids for your language and [RegisterHighlighter] with fallback to DefaultLanguageAttributeIds")]
public static string TEXT;
    [ObsoleteAttribute("Create ids for your language and [RegisterHighlighter] with fallback to DefaultLanguageAttributeIds")]
public static string INACTIVE_PREPROCESSOR_BRANCH;
    public static Dictionary`2<Severity, ICollection`1<string>> ValidHighlightingsForSeverity;
    private static HighlightingAttributeIds();
    [ObsoleteAttribute]
public static string GetHighlightAttributeForTypeElement(ITypeElement typeElement);
}
public class JetBrains.ReSharper.Feature.Services.Daemon.HighlightingAttributeSelector : object {
    private string myPrimaryhighlightingAttribute;
    private String[] myAdditionalHighlightingAttributes;
    private int myIndex;
    private int myLastOffset;
    public HighlightingAttributeSelector(string primaryhighlightingAttribute, String[] additionalHighlightingAttributes);
    public string Next(TextRange escapeTextRange);
}
public abstract class JetBrains.ReSharper.Feature.Services.Daemon.HighlightingBase : object {
    private string JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.ToolTip { get; }
    private string JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.ErrorStripeToolTip { get; }
    private sealed virtual override string JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.get_ToolTip();
    private sealed virtual override string JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.get_ErrorStripeToolTip();
    public abstract virtual bool IsValid();
    private sealed virtual override DocumentRange JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.CalculateRange();
}
public class JetBrains.ReSharper.Feature.Services.Daemon.HighlightingComparer : object {
    [NotNullAttribute]
public static HighlightingComparer Instance;
    private static HighlightingComparer();
    public sealed virtual int Compare(HighlightingInfo x, HighlightingInfo y);
    public sealed virtual bool Equals(HighlightingInfo x, HighlightingInfo y);
    public sealed virtual int GetHashCode(HighlightingInfo x);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Daemon.HighlightingConsumerExtension : object {
    [ExtensionAttribute]
public static void AddHighlighting(IHighlightingConsumer consumer, IHighlighting highlighting);
    [ExtensionAttribute]
public static void AddHighlighting(IHighlightingConsumer consumer, IHighlighting highlighting, DocumentRange documentRange);
    [ExtensionAttribute]
public static void AddHighlightingWithOverrides(IHighlightingConsumer consumer, IHighlighting highlighting, Nullable`1<Severity> overriddenSeverity, string overriddenAttributeId, Nullable`1<OverlapResolveKind> overriddenOverlapResolve, Nullable`1<int> overriddenOverloadResolvePriority, bool showOnErrorStripe);
    [ExtensionAttribute]
public static void AddHighlightingWithOverrides(IHighlightingConsumer consumer, IHighlighting highlighting, DocumentRange documentRange, Nullable`1<Severity> overriddenSeverity, string overriddenAttributeId, Nullable`1<OverlapResolveKind> overriddenOverlapResolve, Nullable`1<int> overriddenOverloadResolvePriority, bool showOnErrorStripe);
    [ExtensionAttribute]
public static void AddMultipleHighlightings(IHighlightingConsumer consumer, IHighlighting highlighting, IEnumerable`1<ITreeNode> nodesToHighlight, string secondaryAttributeId);
    [ExtensionAttribute]
public static void AddMultipleHighlightings(IHighlightingConsumer consumer, IHighlighting highlighting, IEnumerable`1<DocumentRange> highlightingRanges, string secondaryAttributeId);
    [ExtensionAttribute]
[PureAttribute]
public static bool InBatterySaverMode(IContextBoundSettingsStore settingsStore);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Daemon.HighlightingDefaultSettingValuesProvider : object {
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<DefaultSettingValuesProvider> <Items>k__BackingField;
    public ICollectionEvents`1<DefaultSettingValuesProvider> Items { get; }
    [CompilerGeneratedAttribute]
public sealed virtual ICollectionEvents`1<DefaultSettingValuesProvider> get_Items();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Daemon.HighlightingExtensions : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
public static string GetConfigurableSeverityId(IHighlighting highlighting, HighlightingAttributeBase attribute, bool ignoreDynamicIds);
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
public static string GetConfigurableSeverityIdForObject(object obj, HighlightingAttributeBase attribute, bool ignoreDynamicIds);
}
[RegisterConfigurableHighlightingsGroupAttribute("CodeSmell", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "PotentialCodeQualityIssues_Text", "")]
[RegisterConfigurableHighlightingsGroupAttribute("ConstraintViolation", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ConstraintsViolations_Text", "Constraints")]
[RegisterConfigurableHighlightingsGroupAttribute("BestPractice", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "CommonPracticesAndCodeImprovements_Text", "")]
[RegisterConfigurableHighlightingsGroupAttribute("CodeInfo", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "CodeNotification_Text", "")]
[RegisterConfigurableHighlightingsGroupAttribute("LanguageUsage", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "LanguageUsageOpportunities_Text", "")]
[RegisterConfigurableHighlightingsGroupAttribute("CodeRedundancy", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "RedundanciesInCode_Text", "")]
[RegisterConfigurableHighlightingsGroupAttribute("DeclarationRedundancy", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "RedundanciesInSymbolDeclarations_Text", "")]
[RegisterConfigurableHighlightingsGroupAttribute("CompilerWarnings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "CompilerWarnings_Text", "")]
[RegisterConfigurableHighlightingsGroupAttribute("NUnit", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "NUnit_Text", "")]
[RegisterConfigurableHighlightingsGroupAttribute("Xunit", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "Xunit_Text", "")]
[RegisterConfigurableHighlightingsGroupAttribute("NotRunnableTests", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "NotRunnableTests_Text", "")]
[RegisterConfigurableHighlightingsGroupAttribute("CodeStyleIssues", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "SyntaxStyle_Text", "CodeStyle")]
[RegisterConfigurableHighlightingsGroupAttribute("FormattingIssues", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "Formatting_Text", "")]
[RegisterConfigurableHighlightingsGroupAttribute("StructuralSearch", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "StructuralSearchPatterns_Text", "")]
[RegisterConfigurableHighlightingsGroupAttribute("JsStrictModeErrors", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "StrictModeViolations_Text", "")]
[RegisterConfigurableHighlightingsGroupAttribute("Unreal Engine", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "UnrealEngine_Text", "")]
[RegisterConfigurableHighlightingsGroupAttribute("Unreal Build System", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "UnrealBuildSystem_Text", "")]
[RegisterConfigurableHighlightingsGroupAttribute("UnrealHeaderTool", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "UnrealHeaderTool_Text", "")]
[RegisterConfigurableHighlightingsGroupAttribute(".NET Core", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "NETCore_Text", "")]
[RegisterConfigurableHighlightingsGroupAttribute("Security", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "Security_Text", "")]
[RegisterConfigurableHighlightingsGroupAttribute("EntityFramework", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "EntityFramework_Text", "")]
[RegisterConfigurableHighlightingsGroupAttribute("DataFlow", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "DataFlow_Text", "")]
public static class JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds : object {
    public static string CodeSmell;
    public static string CodeStyleIssues;
    public static string DataFlow;
    public static string FormattingIssues;
    public static string StructuralSearch;
    public static string ConstraintViolation;
    public static string BestPractice;
    public static string CodeInfo;
    public static string LanguageUsage;
    public static string CodeRedundancy;
    public static string DeclarationRedundancy;
    public static string CompilerWarnings;
    public static string NUnit;
    public static string Xunit;
    public static string NotRunnableTests;
    public static string JsStrictModeErrors;
    public static string UnrealCpp;
    public static string UnrealBuildSystem;
    public static string UnrealHeaderTool;
    public static string DotNetCore;
    public static string Security;
    public static string EntityFramework;
    public static string SQL;
}
[DebuggerDisplayAttribute("{DebugView,nq}")]
public class JetBrains.ReSharper.Feature.Services.Daemon.HighlightingInfo : object {
    [CompilerGeneratedAttribute]
private DocumentRange <Range>k__BackingField;
    [CompilerGeneratedAttribute]
private IHighlighting <Highlighting>k__BackingField;
    [CompilerGeneratedAttribute]
private OverlapKind <Overlapped>k__BackingField;
    public DocumentRange Range { get; }
    [NotNullAttribute]
public IHighlighting Highlighting { get; }
    [NotNullAttribute]
[UsedImplicitlyAttribute]
[DebuggerBrowsableAttribute("0")]
internal string DebugView { get; }
    public OverlapKind Overlapped { get; public set; }
    [DebuggerBrowsableAttribute("0")]
private TextRange JetBrains.TextControl.Data.IRangeable.Range { get; }
    [DebuggerBrowsableAttribute("0")]
private DocumentRange JetBrains.TextControl.Data.IRangeable.DocumentRange { get; }
    [DebuggerBrowsableAttribute("0")]
private bool JetBrains.TextControl.Data.IRangeable.IsValid { get; }
    [DebuggerBrowsableAttribute("0")]
private IDocument JetBrains.TextControl.Data.IRangeable.Document { get; }
    public bool ShowOnErrorStripe { get; }
    public HighlightingInfo(DocumentRange range, IHighlighting highlighting);
    [CompilerGeneratedAttribute]
public DocumentRange get_Range();
    [CompilerGeneratedAttribute]
public IHighlighting get_Highlighting();
    internal string get_DebugView();
    [CompilerGeneratedAttribute]
public OverlapKind get_Overlapped();
    [CompilerGeneratedAttribute]
public void set_Overlapped(OverlapKind value);
    private sealed virtual override TextRange JetBrains.TextControl.Data.IRangeable.get_Range();
    private sealed virtual override DocumentRange JetBrains.TextControl.Data.IRangeable.get_DocumentRange();
    private sealed virtual override bool JetBrains.TextControl.Data.IRangeable.get_IsValid();
    private sealed virtual override IDocument JetBrains.TextControl.Data.IRangeable.get_Document();
    public virtual bool get_ShowOnErrorStripe();
    [PureAttribute]
public virtual Severity GetSeverity(IHighlightingSettingsManager highlightingsManager, IPsiSourceFile sourceFile, IContextBoundSettingsStore storeBoundToSourceFile);
    [CanBeNullAttribute]
[PureAttribute]
public virtual string GetAttributeId(IHighlightingSettingsManager highlightingsManager, IPsiSourceFile sourceFile, IContextBoundSettingsStore storeBoundToSourceFile);
    [NotNullAttribute]
[PureAttribute]
public virtual HighlightingInfo ReplaceHighlighting(IHighlighting newHighlighting);
    [NotNullAttribute]
[PureAttribute]
public virtual HighlightingInfo Override(Nullable`1<DocumentRange> overridenRange, Nullable`1<Severity> overriddenSeverity, string overriddenAttributeId, Nullable`1<OverlapResolveKind> overriddenOverlapResolve, Nullable`1<bool> showOnErrorStripe);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class JetBrains.ReSharper.Feature.Services.Daemon.HighlightingInfoWithOverrides : HighlightingInfo {
    [CompilerGeneratedAttribute]
private Nullable`1<Severity> <OverriddenSeverity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OverriddenAttributeId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<OverlapResolveKind> <OverriddenOverlapResolve>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <OverriddenOverlapResolvePriority>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowOnErrorStripe>k__BackingField;
    public Nullable`1<Severity> OverriddenSeverity { get; }
    [CanBeNullAttribute]
public string OverriddenAttributeId { get; }
    public Nullable`1<OverlapResolveKind> OverriddenOverlapResolve { get; }
    public Nullable`1<int> OverriddenOverlapResolvePriority { get; }
    public bool ShowOnErrorStripe { get; }
    public HighlightingInfoWithOverrides(DocumentRange range, IHighlighting highlighting, Nullable`1<Severity> overriddenSeverity, string overriddenAttributeId, Nullable`1<OverlapResolveKind> overriddenOverlapResolve, Nullable`1<int> overriddenOverlapResolvePriority, bool showOnErrorStripe);
    [CompilerGeneratedAttribute]
public Nullable`1<Severity> get_OverriddenSeverity();
    [CompilerGeneratedAttribute]
public string get_OverriddenAttributeId();
    [CompilerGeneratedAttribute]
public Nullable`1<OverlapResolveKind> get_OverriddenOverlapResolve();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_OverriddenOverlapResolvePriority();
    [CompilerGeneratedAttribute]
public virtual bool get_ShowOnErrorStripe();
    public virtual Severity GetSeverity(IHighlightingSettingsManager highlightingsManager, IPsiSourceFile sourceFile, IContextBoundSettingsStore storeBoundToSourceFile);
    public virtual string GetAttributeId(IHighlightingSettingsManager highlightingsManager, IPsiSourceFile sourceFile, IContextBoundSettingsStore storeBoundToSourceFile);
    public virtual HighlightingInfo ReplaceHighlighting(IHighlighting newHighlighting);
    public virtual HighlightingInfo Override(Nullable`1<DocumentRange> overridenRange, Nullable`1<Severity> overriddenSeverity, string overriddenAttributeId, Nullable`1<OverlapResolveKind> overriddenOverlapResolve, Nullable`1<bool> showOnErrorStripe);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Daemon.HighlightingOverlapResolver : object {
    private IHighlightingSettingsManager myHighlightingsManager;
    private IDocument myDocument;
    private IPsiSourceFile mySourceFile;
    private IShellLocks myShellLocks;
    private IRangeableContainer`1[] myHighlightingsByLayer;
    private IDocumentInfoCache myDocumentInfoCache;
    private static Layer[] ourAllLayers;
    private static ObjectPool`1<PooledDictionary`2<IHighlighting, OverlapEntity>> ourEntityMergeMap;
    public HighlightingOverlapResolver(IHighlightingSettingsManager highlightingsManager, IDocument document, IPsiSourceFile sourceFile, IShellLocks shellLocks);
    private static HighlightingOverlapResolver();
    public sealed virtual void Clear(Layer layerMask);
    [PureAttribute]
private static int LayerToInt(Layer layer);
    private static int Compare(OverlapEntity i, OverlapEntity j);
    private static int Compare(CompositeOverlapEntity xs, CompositeOverlapEntity ys);
    [PureAttribute]
private static int Compare(HighlightingOverlapEntity i, HighlightingOverlapEntity j);
    [PureAttribute]
private Severity GetSeverity(HighlightingInfo highlightingInfo, IContextBoundSettingsStore settingsStore);
    [PureAttribute]
private DocumentRange GetPresentationRange(HighlightingInfo highlightingInfo, Severity severity, IContextBoundSettingsStore settingsStore);
    public sealed virtual void ResolveOverlappedPreviousHighlightings(IReadOnlyCollection`1<HighlightingInfo> newInfos, bool fullRehighlight, DocumentRange invalidationRange, Layer layer, IContextBoundSettingsStore settingsStore, Func`1<bool> interruptChecker, IReadOnlyCollection`1& overlappedPreviousHighlightingInfos, IReadOnlyCollection`1& restoredPreviousHighlightingInfos);
    [MustDisposeResourceAttribute]
private PooledList`1<OverlapEntity> BuildOverlapEntitiesList(IReadOnlyCollection`1<HighlightingInfo> newInfos, bool fullRehighlight, DocumentRange invalidationRange, Layer layer, IContextBoundSettingsStore settingsStore);
    private static void ResolveOverlaps(List`1<OverlapEntity> allOverlapEntities, int startIndex, int length, List`1& overlappedPreviousHighlightings, List`1& resurrectedPreviousHighlightings);
    private static void ResolveTwoOverlappedHighlightings(List`1<OverlapEntity> allOverlapEntities, int startIndex, List`1& overlappedPreviousHighlightings);
    private static bool IsError(OverlapEntity overlapEntity);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Daemon.HighlightingOverlapResolver/<<Compare>g__MergeSortedLists|14_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<ValueTuple`2<HighlightingOverlapEntity, bool>> <Compare>g__MergeSortedLists|14_0(List`1<HighlightingOverlapEntity> xs, List`1<HighlightingOverlapEntity> ys);
    [CompilerGeneratedAttribute]
internal static void <BuildOverlapEntitiesList>g__MergeOverlapEntity|20_0(HighlightingOverlapEntity overlapEntity, <>c__DisplayClass20_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Daemon.HighlightingOverlapResolverFactory : object {
    [CompilerGeneratedAttribute]
private IHighlightingSettingsManager <highlightingSettingsManager>P;
    [CompilerGeneratedAttribute]
private IShellLocks <shellLocks>P;
    public HighlightingOverlapResolverFactory(IHighlightingSettingsManager highlightingSettingsManager, IShellLocks shellLocks);
    public virtual IHighlightingOverlapResolver Create(IDocument document, IPsiSourceFile sourceFile);
}
public enum JetBrains.ReSharper.Feature.Services.Daemon.HighlightingProgressState : Enum {
    public int value__;
    public static HighlightingProgressState OFF;
    public static HighlightingProgressState LOCAL_STAGES;
    public static HighlightingProgressState GLOBAL_STAGES;
    public static HighlightingProgressState LONG_RUNNING_STAGES;
}
[SettingsKeyAttribute("JetBrains.ReSharper.Resources.Settings.CodeInspectionSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "HighlightingSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.Daemon.HighlightingSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "RainbowOnLanguagesSettingDescription")]
public string RainbowOnLanguages;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ReadSettingsFromEditorconfigAndProjectSettingsSettingDescription")]
public bool ReadSettingsFromFileLevel;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "AnalysisModeSettingDescription")]
public AnalysisScope AnalysisEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "HighlightingSettings_IncludeWarningsInSwea_Description")]
[ObsoleteAttribute]
public bool IncludeWarningsInSwea;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "HighlightingSettings_SweaWarningsMode_Description")]
public SweaWarningsMode SweaWarningsMode;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "HighlightingSettings_SweaResourceConsumption_Description")]
public SolutionAnalysisResourcesUtilization SweaResourcesUtilization;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "IdentifierHighlightingEnabledSettingDescription")]
public bool IdentifierHighlightingEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ColorUsageHighlightingEnabledSettingDescription")]
public bool ColorUsageHighlightingEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "StringHighlightingEnabledSettingDescription")]
public bool StringHighlightingEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowImportTypeMethodUsingPopupSettingDescription")]
public bool ShowImportPopup;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowCImportPopupSettingDescription")]
public bool ShowCppImportPopup;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ValueAnalysisModeSettingDescription")]
public ValueAnalysisMode ValueAnalysisMode;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToConsiderNonNullableReferenceTypesAsNotHoldingnullValuesWithoutRuntimeChecksEnforcingItSettingDescription")]
public bool IgnoreNonNullableAnnotationsInValueAnalysis;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "DisposeAnalysisModeSettingDescription")]
public DisposeAnalysisMode DisposeAnalysisMode;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "IntegerArithmeticAnalysisModeSettingDescription")]
public ValueAnalysisMode IntegerArithmeticAnalysisMode;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToUseSolutionWideAnalysisResultsToSpeedUpFindUsagesSettingDescription")]
public bool SpeedUpFindUsages;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Do not warn in conditionally-compiled members")]
public bool DoNotWarnInConditionallyCompiledMembers;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "HighlightingSettings_UsageCheckingInspectionLevel_Description")]
public SolutionWideInspectionsLevel UsageCheckingInspectionLevel;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "InspectionSeveritiesSettingDescription")]
public IIndexedEntry`2<string, Severity> InspectionSeverities;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "BatterySaverModeLevelTurnedOffSettingDescription")]
public int BatterySaverLevel;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "VsLightBulbDisplayModeSettingDescription")]
public VsLightBulbDisplayMode VsLightBulbDisplayMode;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowVisualStudioLightBulbActionsInSubmenuSettingDescription")]
public bool ShowVsLightBulbActionsInSubmenu;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "DisableVsLightBulbActionsFilteringSettingDescription")]
public bool DisableVsLightBulbActionsFiltering;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "EnableVisualStudioQuickActionsRetrieval_Text")]
public bool EnableVsLightBulbActionsRetrievalTimeout;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowMissingConstructsAsEditorHintsSettingDescription")]
public bool ShowMissingConstructHints;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowResourceDisposePointsAsEditorHintsSettingDescription")]
public bool ShowResourcesDisposePoints;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "HideVisualStudioSquigglesSettingDescription")]
public bool SuppressVsSquiggles;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "VisualStudioSquigglesRoslynAnalyzersAreNotRenderedByVisualStudioItselfButInsteadThoseOfThemWhichAreNotRedundantInPresenceOfReSharperSuchAsCustomAnalyzerSetsAreProcessedTogetherWithReSharperAnalysisResultsSuppressVsSquigglesMustBeOffToTakeEffectSettingDescription")]
public bool ImportVsSquiggles;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToHighlightUsagesOfTheElementUnderCaretSettingDescription")]
public bool HighlightUsages;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "HighlightContextExitsSettingDescription")]
public bool ContextExitsHighlightingEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "HighlightConditionElementsSettingDescription")]
public bool ConditionElementsHighlightingEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "PrimaryParametersCaptureHighlightingEnabled")]
public bool PrimaryParametersCaptureHighlightingEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowGutterNavigationMarksForImplementedAndOverriddenMembersSettingDescription")]
public bool CalculateInheritedTypeMembers;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowGlobalImportsSettingDescription")]
public bool ShowGlobalImports;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowUnusedTypeMembersInEditorSettingDescription")]
public bool CalculateUnusedTypeMembers;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowUnusedGlobalUsingsSettingDescription")]
public bool CalculateUnusedGlobalUsings;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "RunLongAnalysesLikeValueAnalysisInControlFlowInSolutionWideAnalysisSettingDescription")]
public bool RunLongAnalysisInSwa;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowMethodSeparatorsSettingDescription")]
public bool ShowMethodSeparators;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowIndentGuidesSettingDescription")]
public bool ShowIndentGuides;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "HighlightingLevelForRecentlyUnmodifiedCodeFromSettingDescription")]
public Severity HighlightingLevelInNonModifiedFilesFrom;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ParallelCodeAnalysisWhenApplyingQuickFixesAndContextActionsInScopeSettingDescription")]
public bool ParallelScopedIntentionsAnalysis;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "MakeUseOfSolutionWideAnalysisResultsWhenApplyingQuickFixesInScopeSettingDescription")]
public bool MakeUseOfSolutionAnalysisResultsInScopedIntentions;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "TrackRecentlyModifiedPartsOfFileOtherwiseTrackWholeFilesSettingDescription")]
public bool TrackPartsOfFile;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "PeriodToConsiderFilesRecentlyModifiedDaysSettingDescription")]
public int RecentlyModifiedPeriod;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "HighlightRelatedAsyncAwaitKeywordsSettingDescription")]
public bool AsyncAwaitHighlightingEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "IncrementalDaemonStagesOptimizationSettingDescription")]
public bool IncrementalDaemonStagesOptimization;
}
public static class JetBrains.ReSharper.Feature.Services.Daemon.HighlightingSettingsAccessor : object {
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, string>> RainbowOnLanguages;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> ReadSettingsFromFileLevel;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, AnalysisScope>> AnalysisEnabled;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, SweaWarningsMode>> SweaWarningsMode;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, SolutionAnalysisResourcesUtilization>> SweaResourcesUtilization;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> IdentifierHighlightingEnabled;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> ColorUsageHighlightingEnabled;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> StringHighlightingEnabled;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> ShowImportPopup;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> ShowCppImportPopup;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, VsLightBulbDisplayMode>> VsLightBulbDisplayMode;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> ShowVsLightBulbActionsInSubmenu;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> DisableVsLightBulbActionsFiltering;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> EnableVsLightBulbActionsRetrievalTimeout;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> SuppressVsSquiggles;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> ImportVsSquiggles;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, ValueAnalysisMode>> ValueAnalysisMode;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> IgnoreNonNullableAnnotationsInValueAnalysis;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, DisposeAnalysisMode>> DisposeAnalysisMode;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, ValueAnalysisMode>> IntegerArithmeticAnalysisMode;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> DoNotWarnInConditionallyCompiledMembers;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> SpeedUpFindUsages;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, SolutionWideInspectionsLevel>> UsageCheckingInspectionLevel;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, IIndexedEntry`2<string, Severity>>> InspectionSeverities;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, int>> BatterySaverLevel;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> HighlightUsages;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> ContextExitsHighlightingEnabled;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> ConditionElementsHighlightingEnabled;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> PrimaryParametersCaptureHighlightingEnabled;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> CalculateInheritedTypeMembers;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> ShowGlobalImports;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> CalculateUnusedTypeMembers;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> CalculateUnusedGlobalUsings;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> RunLongAnalysisInSwa;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> ShowMethodSeparators;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> ShowIndentGuides;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, Severity>> HighlightingLevelInNonModifiedFilesFrom;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, int>> RecentlyModifiedPeriod;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> TrackPartsOfFile;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> AsyncAwaitHighlightingEnabled;
    [NotNullAttribute]
public static Expression`1<Func`2<HighlightingSettings, bool>> IncrementalDaemonStagesOptimization;
    private static HighlightingSettingsAccessor();
}
public abstract class JetBrains.ReSharper.Feature.Services.Daemon.HighlightingSettingsManager : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
private SettingsCacheManager myCacheManager;
    private ICalculatedSettingsSchema myCalculatedSettingsSchema;
    [NotNullAttribute]
private HighlightingsSettingsReader myCachedReader;
    [NotNullAttribute]
private Signal`1<Nullable`1<bool>> mySettingsChanged;
    [NotNullAttribute]
private SettingsKey myHighlightingSettingsKey;
    [NotNullAttribute]
private SettingsIndexedEntry myInspectionSeveritiesSettingEntry;
    private IJetReadonlyList`1<ILiveCustomConfigurableSeverityItemProvider> myLiveCustomConfigurableSeverityItemProviders;
    [NotNullAttribute]
public static HighlightingSettingsManager Instance { get; }
    [NotNullAttribute]
public Signal`1<Nullable`1<bool>> SettingsChanged { get; }
    [NotNullAttribute]
public IEnumerable`1<ConfigurableSeverityItem> SeverityConfigurations { get; }
    [NotNullAttribute]
public IEnumerable`1<StaticGroupDescriptor> StaticGroups { get; }
    [NotNullAttribute]
public IEnumerable`1<ConfigurableGroupDescriptor> ConfigurableGroups { get; }
    protected HighlightingSettingsManager(Lifetime lifetime, ISettingsStore settingsStore, SettingsCacheManager cacheManager, ICalculatedSettingsSchema calculatedSettingsSchema, IJetReadonlyList`1<ILiveCustomConfigurableSeverityItemProvider> liveCustomConfigurableSeverityItemProviders);
    public static HighlightingSettingsManager get_Instance();
    [NotNullAttribute]
[PureAttribute]
public virtual HighlightingAttributeBase GetHighlightingAttribute(Type highlightingType);
    public abstract virtual IReadOnlyCollection`1<string> GetSeverityIdsByCompilerId(string compilerID);
    public abstract virtual IEnumerable`1<string> GetAllCompilerIds();
    public sealed virtual IReadOnlyList`1<string> GetCompilerIds(IHighlighting highlighting, PsiLanguageType language);
    [NotNullAttribute]
public abstract virtual IReadOnlyList`1<string> GetCompilerIds(string severityId, PsiLanguageType language);
    public abstract virtual bool IsCompilerHighlighting(IHighlighting highlighting);
    public abstract virtual bool IsCompilerHighlighting(string severityId);
    public Signal`1<Nullable`1<bool>> get_SettingsChanged();
    [CompilerGeneratedAttribute]
public abstract virtual void add_SeverityConfigurationsSetChanged(Action value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SeverityConfigurationsSetChanged(Action value);
    public abstract virtual IEnumerable`1<ConfigurableSeverityItem> get_SeverityConfigurations();
    public abstract virtual IEnumerable`1<StaticGroupDescriptor> get_StaticGroups();
    public abstract virtual IEnumerable`1<ConfigurableGroupDescriptor> get_ConfigurableGroups();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<PsiLanguageType> GetInspectionImplementations(string configurableSeverityId);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<string> GetConfigurableSeverityIdsByGroupId(string groupId);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<string> GetConfigurableSeverityIdsByCompoundItemName(string compoundItemName);
    public sealed virtual ConfigurableSeverityItem TryGetSeverityItem(string id);
    public abstract virtual Result`1<ConfigurableSeverityItem> GetSeverityItem(string id);
    public virtual HighlightingAttributeBase GetHighlightingAttribute(IHighlighting highlighting);
    public bool IsAnyConfigurableInspectionTurnedOnByGroupId(string groupId, IPsiSourceFile sourceFile, ISolution solution, IContextBoundSettingsStore storeBoundToSourceFile, DaemonProcessKind daemonProcessKind);
    public bool IsAnyConfigurableInspectionTurnedOnByCompoundItem(string compoundItemName, IPsiSourceFile sourceFile, ISolution solution, IContextBoundSettingsStore storeBoundToSourceFile, PsiLanguageType language);
    public bool HasNecessarySeverity(Severity severity, IHighlighting highlighting, IPsiSourceFile sourceFile, IContextBoundSettingsStore storeBoundToSourceFile);
    public string GetGroupTitleByGroupId(string groupId);
    [NotNullAttribute]
private HighlightingSettings Get(ISolution solution);
    [NotNullAttribute]
private HighlightingSettings Get(IPsiSourceFile sourceFile);
    public AnalysisScope GetAnalysisEnabled(IPsiSourceFile sourceFile);
    public bool GetIdentifierHighlightingEnabled(IPsiSourceFile sourceFile);
    public bool GetReadSettingsFromFileLevel(IPsiSourceFile sourceFile);
    public bool GetShowImportPopup(IPsiSourceFile sourceFile);
    public Severity GetConfigurableSeverity(string severityId, IPsiSourceFile sourceFile, IContextBoundSettingsStore storeBoundToSourceFile);
    public Severity GetConfigurableSeverity(string severityId, IContextBoundSettingsStore storeBoundToSourceFile);
    public Severity GetConfigurableSeverity(string severityId, IPsiSourceFile sourceFile, ISolution solution, IContextBoundSettingsStore storeBoundToSourceFile);
    private bool TryGetSeverity(string severityId, IPsiSourceFile sourceFile, ISolution solution, IContextBoundSettingsStore storeBoundToSourceFile, Severity& severity);
    protected virtual void ReportMissedSeverity(string severityId);
    [PureAttribute]
public sealed virtual Severity GetSeverity(IHighlighting highlighting, IPsiSourceFile sourceFile, IContextBoundSettingsStore storeBoundToSourceFile);
    [PureAttribute]
public Severity GetSeverity(IHighlighting highlighting, IPsiSourceFile sourceFile, ISolution solution, IContextBoundSettingsStore storeBoundToSourceFile);
    [PureAttribute]
public Severity GetSeverity(IHighlighting highlighting, Type highlightingType, IPsiSourceFile sourceFile, IContextBoundSettingsStore storeBoundToSourceFile, DaemonProcessKind daemonProcessKind);
    [PureAttribute]
public Severity GetSeverity(IHighlighting highlighting, Type highlightingType, IPsiSourceFile sourceFile, IContextBoundSettingsStore storeBoundToSourceFile);
    public sealed virtual string GetAttributeId(IHighlighting highlighting, IPsiSourceFile sourceFile, IContextBoundSettingsStore storeBoundToSourceFile);
    public ErrorStripeAttributes GetErrorStripeAttributes(IHighlighting highlighting, Severity severity);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_0(SettingsStoreChangeArgs args);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Daemon.HighlightingSettingsManagerImpl : HighlightingSettingsManager {
    private HighlightingSettingsManagerState myState;
    private Dictionary`2<Type, HighlightingAttributeBase> myAttributes;
    [CompilerGeneratedAttribute]
private Action SeverityConfigurationsSetChanged;
    public IEnumerable`1<ConfigurableSeverityItem> SeverityConfigurations { get; }
    public IEnumerable`1<StaticGroupDescriptor> StaticGroups { get; }
    public IEnumerable`1<ConfigurableGroupDescriptor> ConfigurableGroups { get; }
    public HighlightingSettingsManagerImpl(Lifetime lifetime, ShellPartCatalogSet partsCatalogueSet, ILanguages allLanguages, ISettingsStore settingsStore, SettingsCacheManager cacheManger, ILogger logger, HighlightingDefaultSettingValuesProvider defaultSettingValuesProvider, ICalculatedSettingsSchema calculatedSettingsSchema, IImmutableList`1<ICustomConfigurableSeverityItemProvider> providers, IImmutableList`1<ILiveCustomConfigurableSeverityItemProvider> liveProviders, CultureContextComponent cultureContextComponent, CultureContextComponentPluginActivator cultureContextComponentPluginActivator);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SeverityConfigurationsSetChanged(Action value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SeverityConfigurationsSetChanged(Action value);
    public virtual IEnumerable`1<ConfigurableSeverityItem> get_SeverityConfigurations();
    public virtual IEnumerable`1<StaticGroupDescriptor> get_StaticGroups();
    public virtual IEnumerable`1<ConfigurableGroupDescriptor> get_ConfigurableGroups();
    public virtual IEnumerable`1<PsiLanguageType> GetInspectionImplementations(string configurableSeverityId);
    public virtual IEnumerable`1<string> GetConfigurableSeverityIdsByGroupId(string groupId);
    public virtual IEnumerable`1<string> GetConfigurableSeverityIdsByCompoundItemName(string compoundItemName);
    public virtual Result`1<ConfigurableSeverityItem> GetSeverityItem(string id);
    public virtual HighlightingAttributeBase GetHighlightingAttribute(Type highlightingType);
    public virtual IReadOnlyCollection`1<string> GetSeverityIdsByCompilerId(string compilerID);
    public virtual IEnumerable`1<string> GetAllCompilerIds();
    public virtual IReadOnlyList`1<string> GetCompilerIds(string severityId, PsiLanguageType language);
    public virtual bool IsCompilerHighlighting(IHighlighting highlighting);
    public virtual bool IsCompilerHighlighting(string severityId);
    [CompilerGeneratedAttribute]
private object <.ctor>b__2_0(object highlighting);
}
public class JetBrains.ReSharper.Feature.Services.Daemon.HighlightingSettingsManagerState : object {
    private Lazy`1<Dictionary`2<string, ConfigurableGroupDescriptor>> myLazyConfigurableGroups;
    private Lazy`1<OneToSetMap`2<StringSource, PsiLanguageType>> myLazyInspectionImplementation;
    private Lazy`1<OneToSetMap`2<string, string>> myLazyCompilerIdToSeverityId;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<OneToListMap`2<ValueTuple`2<StringSource, PsiLanguageType>, string>> myLazyPerLanguageCompilerIds;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<ValueTuple`3<Dictionary`2<string, ConfigurableSeverityItem>, OneToListMap`2<string, string>, OneToListMap`2<string, string>>> myLazyStaticConfigurableSeverityItems;
    private Lazy`1<Dictionary`2<string, StaticGroupDescriptor>> myLazyStaticGroupDescriptors;
    [NotNullAttribute]
private IJetReadonlyList`1<ILiveCustomConfigurableSeverityItemProvider> myLiveCustomConfigurableSeverityItemProviders;
    public IDictionary`2<string, ConfigurableGroupDescriptor> ConfigurableGroups { get; }
    public OneToSetMap`2<StringSource, PsiLanguageType> InspectionImplementation { get; }
    public OneToSetMap`2<string, string> CompilerIdToSeverityId { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public OneToListMap`2<ValueTuple`2<StringSource, PsiLanguageType>, string> PerLanguageCompilerIds { get; }
    public IDictionary`2<string, StaticGroupDescriptor> StaticGroups { get; }
    public HighlightingSettingsManagerState(PartCatalog catalog, ILanguages allLanguages, IJetReadonlyList`1<ICustomConfigurableSeverityItemProvider> customConfigurableSeverityItemProviders, IJetReadonlyList`1<ILiveCustomConfigurableSeverityItemProvider> liveCustomConfigurableSeverityItemProviders, ILogger logger);
    public IDictionary`2<string, ConfigurableGroupDescriptor> get_ConfigurableGroups();
    public OneToSetMap`2<StringSource, PsiLanguageType> get_InspectionImplementation();
    public OneToSetMap`2<string, string> get_CompilerIdToSeverityId();
    public OneToListMap`2<ValueTuple`2<StringSource, PsiLanguageType>, string> get_PerLanguageCompilerIds();
    public IDictionary`2<string, StaticGroupDescriptor> get_StaticGroups();
    [NotNullAttribute]
public IEnumerable`1<string> GetConfigurableSeverityIdsByCompoundItemName(string compountItemName);
    [NotNullAttribute]
public IEnumerable`1<string> GetConfigurableSeverityIdsByGroupId(string groupId);
    [NotNullAttribute]
public IReadOnlyCollection`1<string> GetSeverityIdsByCompilerId(string compilerID);
    [NotNullAttribute]
public IEnumerable`1<string> GetAllCompilerIds();
    public Result`1<ConfigurableSeverityItem> GetConfigurableSeverityItem(string id);
    [NotNullAttribute]
public IEnumerable`1<ConfigurableSeverityItem> GetConfigurableSeverityItems();
    [NotNullAttribute]
private static Dictionary`2<string, ConfigurableGroupDescriptor> LazyConfigurableGroupDescriptors(PartCatalog catalog, ILogger logger);
    private static OneToSetMap`2<StringSource, PsiLanguageType> LazyInspectionImplementation(PartCatalog catalog, ILanguages allLanguages, IJetReadonlyList`1<ICustomConfigurableSeverityItemProvider> customConfigurableSeverityItemProviders, ILogger logger);
    [NotNullAttribute]
private OneToSetMap`2<string, string> LazyCompilerIdToSeverityId();
    [NotNullAttribute]
private OneToListMap`2<ValueTuple`2<StringSource, PsiLanguageType>, string> LazyPerLanguageCompilerIdsInit(PartCatalog catalog, ILanguages languages, ILogger logger);
    private static ValueTuple`3<Dictionary`2<string, ConfigurableSeverityItem>, OneToListMap`2<string, string>, OneToListMap`2<string, string>> LazyStaticConfigurableSeverityItems(PartCatalog catalog, IJetReadonlyList`1<ICustomConfigurableSeverityItemProvider> customConfigurableSeverityItemProviders, ILogger logger);
    [NotNullAttribute]
private static Dictionary`2<string, StaticGroupDescriptor> StaticGroupDescriptors(PartCatalog catalog, ILogger logger);
    [CompilerGeneratedAttribute]
internal static void <LazyInspectionImplementation>g__AddLanguagesForSeverityId|25_0(StringSource configurableSeverityId, StringSource languages, <>c__DisplayClass25_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1036")]
[PublicAPIAttribute]
public class JetBrains.ReSharper.Feature.Services.Daemon.HighlightingSourceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type[] <HighlightingTypes>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static HashSet`1<Type> ourCurrentTypesInProgress;
    private static ConcurrentDictionary`2<Type, Nullable`1<HighlightingTypesSet>> ourCachedHighlightingTypes;
    private static HashSet`1<Type> ourBaseTypesToIgnore;
    public Type[] HighlightingTypes { get; public set; }
    private static HighlightingSourceAttribute();
    [CompilerGeneratedAttribute]
public Type[] get_HighlightingTypes();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HighlightingTypes(Type[] value);
    [PureAttribute]
public static bool IsHighlightingSourceType(Type type, Nullable`1& highlightingTypes);
    [MustUseReturnValueAttribute]
public static HighlightingTypesSet CollectFlattenedListOfHighlightingTypes(Type[] highlightingTypes, Type highlightingProducerType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Feature.Services.Daemon.HighlightingTypesSet : ValueType {
    public static HighlightingTypesSet Any;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HashSet`1<Type> myHighlightingTypes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Type> myNonSealedHighlightingTypes;
    [MemberNotNullWhenAttribute("False", "myHighlightingTypes")]
public bool ContainsAnyType { get; }
    private HighlightingTypesSet(HashSet`1<Type> highlightingTypes);
    private static HighlightingTypesSet();
    [MemberNotNullWhenAttribute("False", "myHighlightingTypes")]
public bool get_ContainsAnyType();
    [PureAttribute]
public IReadOnlyCollection`1<Type> Enumerate();
    [PureAttribute]
public bool Contains(Type type);
    [PureAttribute]
private bool ContainsSuperTypeOf(Type highlightingType);
    [PureAttribute]
public bool ContainsAny(IReadOnlyCollection`1<Type> highlightingTypes);
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.ICodeInspectionSettingsProvider {
    public abstract virtual IEnumerable`1<ValueTuple`2<SettingsScalarEntry, string>> GetBooleanOptions(IContextBoundSettingsStore settingsStore, ConfigurableSeverityItem configurableSeverity);
    public abstract virtual IEnumerable`1<ValueTuple`2<SettingsScalarEntry, string>> GetSeverityOptions(IContextBoundSettingsStore settingsStore, ConfigurableSeverityItem configurableSeverity);
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.ICompilerWarningIdDescriptionProvider {
    [CanBeNullAttribute]
public abstract virtual string GetDescription(string compilerId);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.Daemon.ICompilerWarningProcessor {
    public abstract virtual HighlightingInfo ProcessCompilerWarning(IFile psiFile, HighlightingInfo highlightingInfo, IReadOnlyCollection`1<string> compilerIds, Severity severity, HighlightingAttributeBase highlightingAttribute, IContextBoundSettingsStore contextBoundSettingsStore);
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IConditionalElementProblemAnalyzer {
    [NullableContextAttribute("1")]
public abstract virtual bool ShouldRun(IFile file, ElementProblemAnalyzerData data);
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IConfigurableSeverityId {
    [CanBeNullAttribute]
public string ConfigurableSeverityId { get; }
    public abstract virtual string get_ConfigurableSeverityId();
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.ICustomAttributeIdHighlighting {
    [CanBeNullAttribute]
public string AttributeId { get; }
    public abstract virtual string get_AttributeId();
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.ICustomCompilerIdHighlighting {
    public string CompilerId { get; }
    public string Title { get; }
    public abstract virtual string get_CompilerId();
    public abstract virtual string get_Title();
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.ICustomConfigurableSeverityIdHighlighting {
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.Daemon.ICustomConfigurableSeverityItemProvider {
    [NotNullAttribute]
public IEnumerable`1<Tuple`2<PsiLanguageType, ConfigurableSeverityItem>> ConfigurableSeverityItems { get; }
    public abstract virtual IEnumerable`1<Tuple`2<PsiLanguageType, ConfigurableSeverityItem>> get_ConfigurableSeverityItems();
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.ICustomFrontendSeverityHighlighting {
    [NotNullAttribute]
public string FrontendSeverity { get; }
    public abstract virtual string get_FrontendSeverity();
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.ICustomHighlightingWithConfigurableSeverityItem {
    public ConfigurableSeverityItem ConfigurableSeverityItem { get; }
    public abstract virtual ConfigurableSeverityItem get_ConfigurableSeverityItem();
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.ICustomHighlightingWithHtmlText {
    public string HtmlText { get; }
    public string Title { get; }
    public abstract virtual string get_HtmlText();
    public abstract virtual string get_Title();
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.ICustomOverlapResolveHighlighting {
    public OverlapResolveKind OverlapResolve { get; }
    public int OverloadResolvePriority { get; }
    public abstract virtual OverlapResolveKind get_OverlapResolve();
    public abstract virtual int get_OverloadResolvePriority();
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.ICustomSeverityHighlighting {
    public Severity Severity { get; }
    public abstract virtual Severity get_Severity();
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.ICustomStyleHighlighting {
    [CanBeNullAttribute]
public HighlighterAttributes Attributes { get; }
    [CanBeNullAttribute]
public string AttributeId { get; }
    public HighlighterLayer Layer { get; }
    public abstract virtual HighlighterAttributes get_Attributes();
    public abstract virtual string get_AttributeId();
    public abstract virtual HighlighterLayer get_Layer();
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IDaemon {
    public ISignal`1<DaemonStateChangedEventArgs> DaemonStateChanged { get; }
    [ObsoleteAttribute("Use DaemonStateChanged")]
public ISignal`1<DaemonStateChangedEventArgs> DaemonStateChanged2 { get; }
    [CanBeNullAttribute]
public abstract virtual IHighlighting GetHighlighting(IHighlighter highlighter);
    public abstract virtual bool ForceReHighlight(IDocument document);
    [ObsoleteAttribute("Use the method with reason parameter")]
public abstract virtual void Invalidate();
    public abstract virtual void Invalidate(string reason);
    [ObsoleteAttribute("Use the method with reason parameter")]
public abstract virtual void Invalidate(IDocument document);
    public abstract virtual void Invalidate(string reason, IDocument document);
    public abstract virtual DaemonStateWithDescription StateWithDescription(IDocument document);
    public abstract virtual ISignal`1<DaemonStateChangedEventArgs> get_DaemonStateChanged();
    public abstract virtual ISignal`1<DaemonStateChangedEventArgs> get_DaemonStateChanged2();
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IDaemonAutoDisableStrategy {
    public abstract virtual Nullable`1<DaemonDisableResult> GetDaemonDisableResult(IProjectFile file);
    public abstract virtual Nullable`1<DaemonDisableResult> GetDaemonDisableResult(IPsiSourceFile file);
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IDaemonEnablePolicy {
    public abstract virtual bool IsDaemonEnabled(IDocument document);
    public abstract virtual Nullable`1<DaemonDisableResult> GetDaemonDisableResult(IDocument document);
    public abstract virtual ErrorStripeRequestWithDescription NeedErrorStripe(IPsiSourceFile sourceFile);
    public abstract virtual bool IsSwaEnabled(IPsiSourceFile sourceFile);
    public abstract virtual void Isolate(IPsiSourceFile sourceFile);
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IDaemonImpl {
    [CanBeNullAttribute]
public abstract virtual IDaemonProcess TryGetExistingDaemonProcess(IDocument document);
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IDaemonProcess {
    [NotNullAttribute]
public ISolution Solution { get; }
    [NotNullAttribute]
public IPsiModule PsiModule { get; }
    [NotNullAttribute]
public IPsiSourceFile SourceFile { get; }
    [NotNullAttribute]
public IDocument Document { get; }
    [NotNullAttribute]
public IContextBoundSettingsStore ContextBoundSettingsStore { get; }
    public DocumentRange VisibleRange { get; }
    public bool InterruptFlag { get; }
    [NotNullAttribute]
public UserDataHolder CustomData { get; }
    public bool FullRehighlightingRequired { get; }
    public abstract virtual ISolution get_Solution();
    public abstract virtual IPsiModule get_PsiModule();
    public abstract virtual IPsiSourceFile get_SourceFile();
    public abstract virtual IDocument get_Document();
    public abstract virtual IContextBoundSettingsStore get_ContextBoundSettingsStore();
    public abstract virtual DocumentRange get_VisibleRange();
    public abstract virtual bool get_InterruptFlag();
    public abstract virtual UserDataHolder get_CustomData();
    public abstract virtual bool get_FullRehighlightingRequired();
    public abstract virtual bool IsRangeInvalidated(DocumentRange range);
    [CanBeNullAttribute]
[MustUseReturnValueAttribute]
public abstract virtual TDaemonStageProcess GetStageProcess();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<TDaemonStageProcess> GetStageProcesses();
    [NotNullAttribute]
public abstract virtual ICollection`1<IDaemonStageProcess> GetCompletedStageProcesses();
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<TDaemonStageProcess> GetCompletedStageProcesses();
    [NotNullAttribute]
[MustDisposeResourceAttribute]
public abstract virtual ITaskBarrier CreateTaskBarrierForStageExecution();
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStage {
    public abstract virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageProcess {
    public IDaemonProcess DaemonProcess { get; }
    public abstract virtual void Execute(Action`1<DaemonStageResult> committer);
    public abstract virtual IDaemonProcess get_DaemonProcess();
}
[NullableContextAttribute("2")]
public interface JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageProcessWithPsiFile {
    public IFile File { get; }
    public abstract virtual IFile get_File();
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStagesManager {
    public IReadOnlyCollection`1<IDaemonStage> AllRegisteredStagesSorted { get; }
    public abstract virtual IReadOnlyCollection`1<IDaemonStage> get_AllRegisteredStagesSorted();
    public abstract virtual Nullable`1<int> TryCompareStages(IDaemonStage x, IDaemonStage y);
    [PureAttribute]
public abstract virtual DaemonStageAttribute GetStageAttribute(IDaemonStage stage);
    [PureAttribute]
public abstract virtual HighlightingTypesSet GetStageHighlightingTypes(IDaemonStage stage);
    [PureAttribute]
public abstract virtual IEnumerable`1<IDaemonStage> GetBeforeStagesFor(IDaemonStage stage);
    [PureAttribute]
public abstract virtual IEnumerable`1<IDaemonStage> GetAfterStagesFor(IDaemonStage stage);
    [PureAttribute]
public abstract virtual IEnumerable`1<IDaemonStage> GetTransitiveBeforeOnlyStagesFor(IDaemonStage stage);
    [PureAttribute]
public abstract virtual Type[] GetStagesOverridenBy(Type stageType);
    public abstract virtual void ValidateDaemonStageResult(IDaemonStage stage, DaemonStageResult result);
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageWithSettings {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Type[] DaemonStagesRequired { get; }
    [NullableContextAttribute("1")]
public abstract virtual int CalcSettingsHash(IPsiSourceFile sourceFile, IContextBoundSettingsStore settingsStore);
    public abstract virtual Type[] get_DaemonStagesRequired();
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.Daemon.IDaemonSuppressor {
    public abstract virtual void Suppress(Lifetime lifetime, string reason, bool alsoSuppressSwa);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.Daemon.IDaemonThread {
    public bool HighlightingInProgress { get; }
    public bool IsDaemonThread { get; }
    public bool Terminating { get; }
    public abstract virtual bool get_HighlightingInProgress();
    public abstract virtual bool get_IsDaemonThread();
    public abstract virtual bool get_Terminating();
    public abstract virtual void EnqueueDaemonJob(Action action, TaskPriority priority);
    [MustDisposeResourceAttribute]
public abstract virtual ITaskBarrier CreateTaskBarrier(IDaemonProcess owner, bool sync);
    [MustDisposeResourceAttribute]
public abstract virtual ITaskBarrier CreateInterProcessTaskBarrier(bool sync);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Interrupted(Action value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Interrupted(Action value);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.Daemon.IDelegatingHighlighting {
    public IHighlighting DelegatesTo { get; }
    public abstract virtual IHighlighting get_DelegatesTo();
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IDisableCodeInspectionSection {
    [NotNullAttribute]
public string WarningId { get; }
    [NotNullAttribute]
public ITreeNode StartTreeNode { get; }
    [CanBeNullAttribute]
public ITreeNode EndTreeNode { get; }
    public DocumentRange DisabledRange { get; }
    public bool Used { get; public set; }
    [NotNullAttribute]
public IEnumerable`1<IDisableCodeInspectionSection> RelatedSections { get; }
    public abstract virtual string get_WarningId();
    public abstract virtual ITreeNode get_StartTreeNode();
    public abstract virtual ITreeNode get_EndTreeNode();
    public abstract virtual DocumentRange get_DisabledRange();
    public abstract virtual bool get_Used();
    public abstract virtual void set_Used(bool value);
    public abstract virtual IEnumerable`1<IDisableCodeInspectionSection> get_RelatedSections();
}
[NullableContextAttribute("1")]
[HighlightingSourceAttribute]
public interface JetBrains.ReSharper.Feature.Services.Daemon.IElementAnalyzerDispatcher {
    public abstract virtual void Run(ITreeNode element, IHighlightingConsumer consumer);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.Daemon.IElementProblemAnalyzer {
    public abstract virtual void Run(ITreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IElementProblemAnalyzerConsumingControlFlowGraph {
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IExternalVisibleDaemonDescriptor {
    public String[] PossibleHighlighterKeys { get; }
    public abstract virtual String[] get_PossibleHighlighterKeys();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Daemon.IgnoreWarningsRegionsInfo : object {
    [CompilerGeneratedAttribute]
private IList`1<DocumentRange> <generatedTextRanges>P;
    [CompilerGeneratedAttribute]
private OneToListMap`2<string, IDisableCodeInspectionSection> <warningDisableRange>P;
    [CompilerGeneratedAttribute]
private OneToListMap`2<string, DisableOnceCodeInspectionSection> <disableOnceHighlightingInfos>P;
    public static Key`1<IgnoreWarningsRegionsInfo> INFO_IN_CUSTOM_DATA_KEY;
    public bool IsEmpty { get; }
    public IgnoreWarningsRegionsInfo(IList`1<DocumentRange> generatedTextRanges, OneToListMap`2<string, IDisableCodeInspectionSection> warningDisableRange, OneToListMap`2<string, DisableOnceCodeInspectionSection> disableOnceHighlightingInfos);
    private static IgnoreWarningsRegionsInfo();
    public sealed virtual bool get_IsEmpty();
    public sealed virtual bool ContainedInIgnoreRangeForWarning(string severityId, DocumentRange documentRange);
    [PureAttribute]
public SuppressionInfo ShouldIgnoreWarningHighlighting(string severityId, HighlightingInfo highlightingInfo, bool isCompilerWarning);
    [PureAttribute]
public bool ShouldIgnoreErrorHighlighting(HighlightingInfo highlightingInfo);
    public sealed virtual bool ContainedInGeneratedRange(DocumentRange documentRange);
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IHideInheritanceMarkWhenDuplicatedByVs {
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting {
    [CanBeNullAttribute]
public string ToolTip { get; }
    [CanBeNullAttribute]
public string ErrorStripeToolTip { get; }
    public abstract virtual string get_ToolTip();
    public abstract virtual string get_ErrorStripeToolTip();
    public abstract virtual bool IsValid();
    [PureAttribute]
public abstract virtual DocumentRange CalculateRange();
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IHighlightingConsumer {
    public abstract virtual void ConsumeHighlighting(HighlightingInfo highlightingInfo);
    [NotNullAttribute]
public abstract virtual IReadOnlyList`1<HighlightingInfo> CollectHighlightings();
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IHighlightingOverlapResolver {
    public abstract virtual void Clear(Layer layerMask);
    [NullableContextAttribute("1")]
public abstract virtual void ResolveOverlappedPreviousHighlightings(IReadOnlyCollection`1<HighlightingInfo> newInfos, bool fullRehighlight, DocumentRange invalidationRange, Layer layer, IContextBoundSettingsStore settingsStore, Func`1<bool> interruptChecker, IReadOnlyCollection`1& overlappedPreviousHighlightingInfos, IReadOnlyCollection`1& restoredPreviousHighlightingInfos);
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IHighlightingPointer {
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual IHighlighting Find();
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.Daemon.IHighlightingSettingsManager {
    [NullableContextAttribute("2")]
[PureAttribute]
public abstract virtual Severity GetSeverity(IHighlighting highlighting, IPsiSourceFile sourceFile, IContextBoundSettingsStore storeBoundToSourceFile);
    [NullableContextAttribute("2")]
[PureAttribute]
public abstract virtual string GetAttributeId(IHighlighting highlighting, IPsiSourceFile sourceFile, IContextBoundSettingsStore storeBoundToSourceFile);
    [PureAttribute]
public abstract virtual ConfigurableSeverityItem TryGetSeverityItem(string id);
    [PureAttribute]
public abstract virtual Result`1<ConfigurableSeverityItem> GetSeverityItem(string id);
    [PureAttribute]
public abstract virtual HighlightingAttributeBase GetHighlightingAttribute(IHighlighting highlighting);
    [PureAttribute]
public abstract virtual IReadOnlyList`1<string> GetCompilerIds(IHighlighting highlighting, PsiLanguageType language);
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IHighlightingTestBehaviour {
    public bool IsSuppressed { get; }
    public abstract virtual bool get_IsSuppressed();
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IHighlightingWithCustomDisableRange {
    [PureAttribute]
public abstract virtual DocumentRange GetDisableRange();
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IHighlightingWithFeatureStatisticsKey {
    [PureAttribute]
public abstract virtual Nullable`1<int> GetStatisticsKey();
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IHighlightingWithNavigationOffset {
    public int NavigationOffset { get; }
    public abstract virtual int get_NavigationOffset();
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IHighlightingWithSecondaryRanges {
    [CanBeNullAttribute]
public string OverridenSecondaryAttributeId { get; }
    [PureAttribute]
public abstract virtual IEnumerable`1<DocumentRange> CalculateSecondaryRanges();
    public abstract virtual string get_OverridenSecondaryAttributeId();
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IHighlightingWithTestOutput {
    public string TestOutput { get; }
    public abstract virtual string get_TestOutput();
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IInheritanceMarkOnGutter {
    public abstract virtual void OnClick(IconId iconId);
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IInheritanceMarkOnGutterWithMultipleItems {
    public abstract virtual IEnumerable`1<BulbMenuItem> GetBulbItems();
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IInvisibleFeatureStatisticsMark {
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.ILanguageSpecificDaemonBehavior {
    public bool CanShowErrorBox { get; }
    public bool RunInSolutionAnalysis { get; }
    public bool RunInFindCodeIssues { get; }
    public abstract virtual ErrorStripeRequestWithDescription InitialErrorStripe(IPsiSourceFile sourceFile);
    public abstract virtual bool get_CanShowErrorBox();
    public abstract virtual bool get_RunInSolutionAnalysis();
    public abstract virtual bool get_RunInFindCodeIssues();
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.Daemon.ILiveCustomConfigurableSeverityItemProvider {
    public abstract virtual IEnumerable`1<ConfigurableSeverityItem> GetConfigurableSeverityItems();
    public abstract virtual Result`1<ConfigurableSeverityItem> GetConfigurableSeverityItem(string id);
    public abstract virtual IEnumerable`1<string> GetConfigurableSeverityIdsByCompoundItemName(string compountItemName);
    public abstract virtual IEnumerable`1<string> GetConfigurableSeverityIdsByGroupId(string groupId);
    public abstract virtual IReadOnlyCollection`1<string> GetSeverityIdsByCompilerId(string compilerID);
    public abstract virtual IEnumerable`1<string> GetAllCompilerIds();
    public abstract virtual Result`1<Severity> GetSeverity(string severityId, IPsiSourceFile sourceFile, ISolution solution, IContextBoundSettingsStore storeBoundToSourceFile);
}
public class JetBrains.ReSharper.Feature.Services.Daemon.IlTargetGutterMark : IconGutterMarkType {
    public IAnchor Priority { get; }
    public virtual IAnchor get_Priority();
    public virtual IEnumerable`1<BulbMenuItem> GetBulbMenuItems(IHighlighter highlighter);
}
public class JetBrains.ReSharper.Feature.Services.Daemon.ImplementsAndHidesGutterMark : InheritanceGutterMark {
}
public class JetBrains.ReSharper.Feature.Services.Daemon.ImplementsAndOverridesGutterMark : InheritanceGutterMark {
}
public class JetBrains.ReSharper.Feature.Services.Daemon.ImplementsGutterMark : InheritanceGutterMark {
}
public class JetBrains.ReSharper.Feature.Services.Daemon.ImplementsOverDefaultGutterMark : InheritanceGutterMark {
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IMultiLayerDaemonStage {
    public Byte[] UsedLayers { get; }
    public abstract virtual Byte[] get_UsedLayers();
}
public abstract class JetBrains.ReSharper.Feature.Services.Daemon.InheritanceGutterMark : IconGutterMarkType {
    public IAnchor Priority { get; }
    protected InheritanceGutterMark(IconId image);
    public virtual IAnchor get_Priority();
    public virtual IEnumerable`1<BulbMenuItem> GetBulbMenuItems(IHighlighter highlighter);
}
public class JetBrains.ReSharper.Feature.Services.Daemon.InterfaceIsImplementedGutterMark : InheritanceGutterMark {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/FeatureStatistics")]
public class JetBrains.ReSharper.Feature.Services.Daemon.InvisibleFeatureStatisticsMark : object {
    [CompilerGeneratedAttribute]
private Type <MarkType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StatisticsKey>k__BackingField;
    public Type MarkType { get; }
    public int StatisticsKey { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public InvisibleFeatureStatisticsMark(Type markType, int statisticsKey);
    [CompilerGeneratedAttribute]
public Type get_MarkType();
    [CompilerGeneratedAttribute]
public int get_StatisticsKey();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual Nullable`1<int> GetStatisticsKey();
    public sealed virtual DocumentRange CalculateRange();
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IPredictiveDebuggerRunner {
    public abstract virtual void Toggle();
}
[HighlightingSourceAttribute]
public interface JetBrains.ReSharper.Feature.Services.Daemon.IResolveProblemHighlighter {
    [NotNullAttribute]
public IEnumerable`1<ResolveErrorType> ErrorTypes { get; }
    public abstract virtual IEnumerable`1<ResolveErrorType> get_ErrorTypes();
    [CanBeNullAttribute]
public abstract virtual IHighlighting Run(IReference reference);
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IResolveProblemHighlighting {
}
[HighlightingSourceAttribute]
public interface JetBrains.ReSharper.Feature.Services.Daemon.IResolveProblemHighlightingSource {
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IRichTextToolTipHighlighting {
    [CanBeNullAttribute]
[GuardAttribute("1")]
public abstract virtual RichTextBlock TryGetTooltip(HighlighterTooltipKind where);
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.IStructuralSearchHighlighting {
    [NotNullAttribute]
public ICustomPattern Pattern { get; }
    public abstract virtual ICustomPattern get_Pattern();
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.ISupportsHighlightingPointer {
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual IHighlightingPointer TryCreatePointer();
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.ISuppressableStaticSeverityHighlighting {
    public String[] SuppressedHighlightingIds { get; }
    public abstract virtual String[] get_SuppressedHighlightingIds();
}
public interface JetBrains.ReSharper.Feature.Services.Daemon.ISWEAFileIssue {
}
public abstract class JetBrains.ReSharper.Feature.Services.Daemon.LanguageSpecificDaemonBehavior : object {
    public bool CanShowErrorBox { get; }
    public bool RunInSolutionAnalysis { get; }
    public bool RunInFindCodeIssues { get; }
    public abstract virtual ErrorStripeRequestWithDescription InitialErrorStripe(IPsiSourceFile sourceFile);
    public virtual bool get_CanShowErrorBox();
    public virtual bool get_RunInSolutionAnalysis();
    public virtual bool get_RunInFindCodeIssues();
}
[DaemonStageAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Daemon.LanguageSpecificDaemonStage : object {
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Daemon.ModifiedFilesCacheForDaemon : ModifiedFilesCacheBase {
    [CompilerGeneratedAttribute]
private IProperty`1<int> <RecentlyModifiedPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <TrackDiffs>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsActive>k__BackingField;
    protected IProperty`1<int> RecentlyModifiedPeriod { get; }
    protected IProperty`1<bool> TrackDiffs { get; }
    protected internal IProperty`1<bool> IsActive { get; }
    public ModifiedFilesCacheForDaemon(ISolution solution, Lifetime lifetime, IPersistentIndexManager manager, ApplicationWideContextBoundSettingStore store);
    [CompilerGeneratedAttribute]
protected virtual IProperty`1<int> get_RecentlyModifiedPeriod();
    [CompilerGeneratedAttribute]
protected virtual IProperty`1<bool> get_TrackDiffs();
    [CompilerGeneratedAttribute]
protected internal virtual IProperty`1<bool> get_IsActive();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Daemon.MultiFileDaemonStageProcess : object {
    [CompilerGeneratedAttribute]
private IDaemonProcess <DaemonProcess>k__BackingField;
    private List`1<IDaemonStageProcess> myDaemonStageProcesses;
    public IDaemonProcess DaemonProcess { get; }
    public IEnumerable`1<IDaemonStageProcess> Processes { get; }
    public MultiFileDaemonStageProcess(IDaemonProcess daemonProcess, IEnumerable`1<IDaemonStageProcess> daemonStageProcesses);
    [CompilerGeneratedAttribute]
public sealed virtual IDaemonProcess get_DaemonProcess();
    public IEnumerable`1<IDaemonStageProcess> get_Processes();
    public sealed virtual void Execute(Action`1<DaemonStageResult> committer);
}
[AttributeUsageAttribute("12")]
[PublicAPIAttribute]
public class JetBrains.ReSharper.Feature.Services.Daemon.NonHighlightingSourceAttribute : Attribute {
}
[OptionsPageAttribute("CodeInspection", "Code Inspection", "")]
public class JetBrains.ReSharper.Feature.Services.Daemon.OptionPages.CodeInspectionPage : AEmptyOptionsPage {
    public static string PID;
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Daemon.OptionPages.ZoneMarker : object {
}
public enum JetBrains.ReSharper.Feature.Services.Daemon.OverlapKind : Enum {
    public byte value__;
    public static OverlapKind NONE;
    public static OverlapKind OVERLAPPED_BY_WARNING;
    public static OverlapKind OVERLAPPED_BY_ERROR;
}
public enum JetBrains.ReSharper.Feature.Services.Daemon.OverlapResolveKind : Enum {
    public int value__;
    public static OverlapResolveKind NONE;
    public static OverlapResolveKind DEADCODE;
    public static OverlapResolveKind WARNING;
    public static OverlapResolveKind ERROR;
    public static OverlapResolveKind UNRESOLVED_ERROR;
}
public class JetBrains.ReSharper.Feature.Services.Daemon.OverridesGutterMark : InheritanceGutterMark {
}
public class JetBrains.ReSharper.Feature.Services.Daemon.PredictiveButtonGutterMark : IconGutterMarkType {
    public IAnchor Priority { get; }
    public virtual IAnchor get_Priority();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Daemon.PredictiveButtonGutterMark/<GetBulbMenuItems>d__3")]
public virtual IEnumerable`1<BulbMenuItem> GetBulbMenuItems(IHighlighter highlighter);
}
public class JetBrains.ReSharper.Feature.Services.Daemon.PredictiveImpureGutterMark : IconGutterMarkType {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Daemon.PredictiveImpureGutterMark/<GetBulbMenuItems>d__1")]
public virtual IEnumerable`1<BulbMenuItem> GetBulbMenuItems(IHighlighter highlighter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Daemon.RecursionGutterMark : IconGutterMarkType {
    public IAnchor Priority { get; }
    public virtual IAnchor get_Priority();
    public virtual IEnumerable`1<BulbMenuItem> GetBulbMenuItems(IHighlighter highlighter);
}
[AttributeUsageAttribute("4")]
public class JetBrains.ReSharper.Feature.Services.Daemon.RegisterConfigurableHighlightingsGroupAttribute : PartAttribute {
    private string myTitle;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TitleResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TitleResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    public string Key { get; }
    public Type TitleResourceType { get; }
    public string TitleResourceName { get; }
    public string Title { get; }
    public string Kind { get; }
    public RegisterConfigurableHighlightingsGroupAttribute(string Key, string Title, string Kind);
    public RegisterConfigurableHighlightingsGroupAttribute(string Key, Type TitleResourceType, string TitleResourceName, string Kind);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public Type get_TitleResourceType();
    [CompilerGeneratedAttribute]
public string get_TitleResourceName();
    public string get_Title();
    [CompilerGeneratedAttribute]
public string get_Kind();
}
[AttributeUsageAttribute("4")]
public class JetBrains.ReSharper.Feature.Services.Daemon.RegisterConfigurableSeverityAttribute : PartAttribute {
    [CompilerGeneratedAttribute]
private string <CompoundItemNameResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <CompoundItemNameResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TitleResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TitleResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DescriptionResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DescriptionResourceType>k__BackingField;
    [CanBeNullAttribute]
private string myTitle;
    [CanBeNullAttribute]
private string myDescription;
    [CanBeNullAttribute]
private string myCompoundItemName;
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private Severity <DefaultSeverity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SolutionAnalysisRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsesSolutionAnalysisWhenAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Internal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AlternativeIDs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompilerIDs>k__BackingField;
    private Nullable`1<SolutionAnalysisMode> mySolutionAnalysisMode;
    [CanBeNullAttribute]
public string CompoundItemNameResourceName { get; }
    [CanBeNullAttribute]
public Type CompoundItemNameResourceType { get; }
    [CanBeNullAttribute]
public string TitleResourceName { get; }
    [CanBeNullAttribute]
public Type TitleResourceType { get; }
    [CanBeNullAttribute]
public string DescriptionResourceName { get; }
    [CanBeNullAttribute]
public Type DescriptionResourceType { get; }
    [NotNullAttribute]
public string ID { get; }
    [CanBeNullAttribute]
public string CompoundItemName { get; }
    [NotNullAttribute]
public string Group { get; }
    [CanBeNullAttribute]
public string Title { get; }
    [CanBeNullAttribute]
public string Description { get; }
    public Severity DefaultSeverity { get; }
    public SolutionAnalysisMode SolutionAnalysisMode { get; public set; }
    public bool SolutionAnalysisRequired { get; public set; }
    public bool UsesSolutionAnalysisWhenAvailable { get; public set; }
    public bool Internal { get; public set; }
    public string AlternativeIDs { get; public set; }
    public string CompilerIDs { get; public set; }
    public RegisterConfigurableSeverityAttribute(string ID, string CompoundItemName, string Group, string Title, string Description, Severity DefaultSeverity);
    public RegisterConfigurableSeverityAttribute(string ID, string CompoundItemName, Type CompoundItemNameResourceType, string CompoundItemNameResourceName, string Group, string Title, Type TitleResourceType, string TitleResourceName, string Description, Type DescriptionResourceType, string DescriptionResourceName, Severity DefaultSeverity);
    [CompilerGeneratedAttribute]
public string get_CompoundItemNameResourceName();
    [CompilerGeneratedAttribute]
public Type get_CompoundItemNameResourceType();
    [CompilerGeneratedAttribute]
public string get_TitleResourceName();
    [CompilerGeneratedAttribute]
public Type get_TitleResourceType();
    [CompilerGeneratedAttribute]
public string get_DescriptionResourceName();
    [CompilerGeneratedAttribute]
public Type get_DescriptionResourceType();
    [CompilerGeneratedAttribute]
public string get_ID();
    public string get_CompoundItemName();
    [CompilerGeneratedAttribute]
public string get_Group();
    public string get_Title();
    public string get_Description();
    [CompilerGeneratedAttribute]
public Severity get_DefaultSeverity();
    public SolutionAnalysisMode get_SolutionAnalysisMode();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SolutionAnalysisMode(SolutionAnalysisMode value);
    private SolutionAnalysisMode CalculateMode();
    [CompilerGeneratedAttribute]
public bool get_SolutionAnalysisRequired();
    [CompilerGeneratedAttribute]
public void set_SolutionAnalysisRequired(bool value);
    [CompilerGeneratedAttribute]
public bool get_UsesSolutionAnalysisWhenAvailable();
    [CompilerGeneratedAttribute]
public void set_UsesSolutionAnalysisWhenAvailable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Internal();
    [CompilerGeneratedAttribute]
public void set_Internal(bool value);
    [CompilerGeneratedAttribute]
public string get_AlternativeIDs();
    [CompilerGeneratedAttribute]
public void set_AlternativeIDs(string value);
    [CompilerGeneratedAttribute]
public string get_CompilerIDs();
    [CompilerGeneratedAttribute]
public void set_CompilerIDs(string value);
}
[AttributeUsageAttribute("4")]
public class JetBrains.ReSharper.Feature.Services.Daemon.RegisterStaticHighlightingsGroupAttribute : PartAttribute {
    [CompilerGeneratedAttribute]
private bool <IsVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TitleResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TitleResourceName>k__BackingField;
    public bool IsVisible { get; }
    public string Title { get; }
    public Type TitleResourceType { get; }
    public string TitleResourceName { get; }
    public RegisterStaticHighlightingsGroupAttribute(string Title, bool IsVisible);
    public RegisterStaticHighlightingsGroupAttribute(Type TitleResourceType, string TitleResourceName, bool IsVisible);
    [CompilerGeneratedAttribute]
public bool get_IsVisible();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public Type get_TitleResourceType();
    [CompilerGeneratedAttribute]
public string get_TitleResourceName();
    [NotNullAttribute]
public static string GetGroupIdString(Type type);
    [NotNullAttribute]
public static string GetGroupIdString();
    public static StringSource GetGroupIdString(PartCatalogType pctype);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Feature.Services.Daemon.ResolveHighlighterRegistrar : object {
    [CompilerGeneratedAttribute]
private ILanguageManager <languageManager>P;
    public ResolveHighlighterRegistrar(ILanguageManager languageManager);
    public IHighlighting GetResolveHighlighting(IReference reference, ResolveErrorType errorType);
    public IHighlighting GetResolveHighlighting(IReference reference, ResolveErrorType errorType, PsiLanguageType psiLanguageType);
    [PureAttribute]
public bool ContainsHandler(PsiLanguageType language, ResolveErrorType error);
    [PureAttribute]
public bool ContainsHandler(ResolveErrorType error);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Feature.Services.Daemon.RichTextToolTipHighlighting : object {
    [MustUseReturnValueAttribute]
public static RichText Create(RichText richText, PsiLanguageType languageType, HighlighterTooltipKind where);
    [MustUseReturnValueAttribute]
public static RichTextBlock CreateBlock(RichText richText, PsiLanguageType languageType, HighlighterTooltipKind where);
    [MustUseReturnValueAttribute]
public static RichTextBlock CreateBlock(RichTextBlock richTextBlock, PsiLanguageType languageType, HighlighterTooltipKind where);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Daemon.Settings.Migration.SweaWarningsModeUpgradeDescription : object {
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<ScalarSettingDescription> <Items>k__BackingField;
    public ICollectionEvents`1<ScalarSettingDescription> Items { get; }
    public SweaWarningsModeUpgradeDescription(ISettingsSchema schema);
    [CompilerGeneratedAttribute]
public sealed virtual ICollectionEvents`1<ScalarSettingDescription> get_Items();
}
public enum JetBrains.ReSharper.Feature.Services.Daemon.Severity : Enum {
    public int value__;
    [BrowsableAttribute("False")]
[ExcludeFromEditorConfigAttribute]
public static Severity INVALID_SEVERITY;
    [EditorConfigValueAliasAttribute("none", "True")]
[EditorConfigValueAliasAttribute("silent", "True")]
[EditorConfigValueAliasAttribute("refactoring", "True")]
public static Severity DO_NOT_SHOW;
    public static Severity INFO;
    public static Severity HINT;
    public static Severity SUGGESTION;
    public static Severity WARNING;
    public static Severity ERROR;
}
public class JetBrains.ReSharper.Feature.Services.Daemon.SeverityOption : object {
    public static SeverityOption MultipleSelected;
    public static SeverityOption DoNotShow;
    public static SeverityOption Hint;
    public static SeverityOption Suggestion;
    public static SeverityOption Warning;
    public static SeverityOption Error;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Severity <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Display>k__BackingField;
    public Color Color { get; }
    public Severity Severity { get; }
    public string Display { get; }
    public SeverityOption(string display, Severity severity, Color color);
    private static SeverityOption();
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public Severity get_Severity();
    [CompilerGeneratedAttribute]
public string get_Display();
    private bool Equals(SeverityOption other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public static class JetBrains.ReSharper.Feature.Services.Daemon.SeverityOptions : object {
    public static List`1<SeverityOption> Configurable;
    public static List`1<SeverityOption> OptionsNoError;
    public static List`1<SeverityOption> OptionsWithError;
    private static SeverityOptions();
}
[DaemonStageAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Daemon.SolutionAnalysisFileStructureCollectorStage : object {
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
}
public enum JetBrains.ReSharper.Feature.Services.Daemon.SolutionAnalysisMode : Enum {
    public int value__;
    public static SolutionAnalysisMode LocalInspection;
    public static SolutionAnalysisMode GlobalInspection;
    public static SolutionAnalysisMode LocalAndGlobalInspection;
    public static SolutionAnalysisMode LocalInspectionExcludedFromSolutionAnalysisResults;
}
public enum JetBrains.ReSharper.Feature.Services.Daemon.SolutionAnalysisResourcesUtilization : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("Low")]
public static SolutionAnalysisResourcesUtilization Low;
    [LocalizedDescriptionAttribute("Moderate")]
public static SolutionAnalysisResourcesUtilization Moderate;
    [LocalizedDescriptionAttribute("High")]
public static SolutionAnalysisResourcesUtilization High;
}
public enum JetBrains.ReSharper.Feature.Services.Daemon.SolutionWideInspectionsLevel : Enum {
    public int value__;
    public static SolutionWideInspectionsLevel On;
    public static SolutionWideInspectionsLevel InternalsOnly;
    public static SolutionWideInspectionsLevel Off;
}
public static class JetBrains.ReSharper.Feature.Services.Daemon.SolutionWideInspectionsLevelHelper : object {
    public static string ToString(SolutionWideInspectionsLevel value);
    public static SolutionWideInspectionsLevel FromString(string value);
}
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting")]
public class JetBrains.ReSharper.Feature.Services.Daemon.StaticSeverityHighlightingAttribute : HighlightingAttributeBase {
    [CompilerGeneratedAttribute]
private string <GroupId>k__BackingField;
    [CompilerGeneratedAttribute]
private Severity <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompilerId>k__BackingField;
    [NotNullAttribute]
public string GroupId { get; }
    public Severity Severity { get; }
    [CanBeNullAttribute]
public string Title { get; public set; }
    [CanBeNullAttribute]
public string CompilerId { get; public set; }
    public StaticSeverityHighlightingAttribute(Severity Severity, Type GroupId);
    [CompilerGeneratedAttribute]
public string get_GroupId();
    [CompilerGeneratedAttribute]
public Severity get_Severity();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_CompilerId();
    [CompilerGeneratedAttribute]
public void set_CompilerId(string value);
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Feature.Services.Daemon.SuppressionInfo : ValueType {
    private DocumentRange myDisableOnceRange;
    [CompilerGeneratedAttribute]
private bool <IsSuppressed>k__BackingField;
    public static SuppressionInfo Suppressed;
    public static SuppressionInfo NotSuppressed;
    public bool IsSuppressed { get; }
    private SuppressionInfo(bool isSuppressed);
    private SuppressionInfo(DocumentRange disableOnceRange);
    private static SuppressionInfo();
    [CompilerGeneratedAttribute]
public bool get_IsSuppressed();
    [PureAttribute]
public bool IsDisableOnceSuppression(DocumentRange& disableOnceRange);
    [PureAttribute]
public static SuppressionInfo DisabledOnce(DocumentRange disableOnceRange);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(SuppressionInfo left, SuppressionInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(SuppressionInfo left, SuppressionInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(SuppressionInfo other);
}
[RegisterStaticHighlightingsGroupAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "SolutionWideAnalysisErrors_Text", "False")]
public static class JetBrains.ReSharper.Feature.Services.Daemon.SWEAFileErrors : object {
}
public enum JetBrains.ReSharper.Feature.Services.Daemon.SweaWarningsMode : Enum {
    public int value__;
    public static SweaWarningsMode DoNotShowAndRun;
    public static SweaWarningsMode DoNotShowAndDoNotRun;
    public static SweaWarningsMode ShowAndRun;
}
public class JetBrains.ReSharper.Feature.Services.Daemon.UnknownLanguageSpecificDaemonBehavior : object {
    [NullableAttribute("1")]
public static UnknownLanguageSpecificDaemonBehavior Instance;
    public bool CanShowErrorBox { get; }
    public bool RunInSolutionAnalysis { get; }
    public bool RunInFindCodeIssues { get; }
    private static UnknownLanguageSpecificDaemonBehavior();
    [NullableContextAttribute("1")]
public sealed virtual ErrorStripeRequestWithDescription InitialErrorStripe(IPsiSourceFile sourceFile);
    public sealed virtual bool get_CanShowErrorBox();
    public sealed virtual bool get_RunInSolutionAnalysis();
    public sealed virtual bool get_RunInFindCodeIssues();
}
public enum JetBrains.ReSharper.Feature.Services.Daemon.VsLightBulbDisplayMode : Enum {
    public int value__;
    public static VsLightBulbDisplayMode HideVsLightBulb;
    public static VsLightBulbDisplayMode ShowVsLightBulb;
    public static VsLightBulbDisplayMode MergeVsActionsIntoResharperMenu;
}
public static class JetBrains.ReSharper.Feature.Services.Debugger.BreakpointPresentationUtils : object {
    [CanBeNullAttribute]
public static string GetContainingDeclarationPresentation(ITreeNode targetNode);
    [CanBeNullAttribute]
private static string GetDeclarationPresentation(IDeclaration declaration);
    [CanBeNullAttribute]
private static string GetLambdaExpressionDescription(ILambdaExpression lambdaExpression);
    [CanBeNullAttribute]
private static string GetContainingEntityDescription(ILambdaExpression lambdaExpression);
}
public class JetBrains.ReSharper.Feature.Services.Debugger.BreakpointVariant : object {
    [CompilerGeneratedAttribute]
private int <StartOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainingFunctionPresentation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMultiMethodBreakpoint>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public int StartOffset { get; public set; }
    public int EndOffset { get; public set; }
    public string Text { get; public set; }
    public string ContainingFunctionPresentation { get; public set; }
    public bool IsMultiMethodBreakpoint { get; public set; }
    public BreakpointVariant(int StartOffset, int EndOffset, string Text, string ContainingFunctionPresentation, bool IsMultiMethodBreakpoint);
    [CompilerGeneratedAttribute]
protected BreakpointVariant(BreakpointVariant original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public int get_StartOffset();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_StartOffset(int value);
    [CompilerGeneratedAttribute]
public int get_EndOffset();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_EndOffset(int value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_ContainingFunctionPresentation();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ContainingFunctionPresentation(string value);
    [CompilerGeneratedAttribute]
public bool get_IsMultiMethodBreakpoint();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsMultiMethodBreakpoint(bool value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(BreakpointVariant left, BreakpointVariant right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(BreakpointVariant left, BreakpointVariant right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(BreakpointVariant other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual BreakpointVariant <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Int32& StartOffset, Int32& EndOffset, String& Text, String& ContainingFunctionPresentation, Boolean& IsMultiMethodBreakpoint);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Debugger.BreakpointVariantsEnumerator : object {
    private static ILogger ourLogger;
    private ISolution mySolution;
    private LanguageManager myLanguageManager;
    public BreakpointVariantsEnumerator(ISolution solution, LanguageManager languageManager);
    private static BreakpointVariantsEnumerator();
    public IBreakpointVariant[] GetVariants(SourcePositionInfo info);
    private void ProcessProjectFile(SourcePositionInfo info, IProjectFile file, List`1<IBreakpointVariant> breakpointVariantsList);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Debugger.BreakpointVariantsUtil : object {
    [ExtensionAttribute]
public static DocumentRange GetTextRangeWithoutCommentsAndSpaces(ITreeNode node);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Debugger.DebuggerLocalSymbolProvider : object {
    private ILanguageManager myLanguageManager;
    public DebuggerLocalSymbolProvider(ILanguageManager languageManager);
    [CanBeNullAttribute]
public Tuple`2<ITreeNode, IDeclaredElement> FindLocalDeclarationAt(IPsiSourceFile psiSourceFile, DocumentRange range, string name);
    public ICollection`1<IOccurrence> FindLocalUsages(IProgressIndicator indicator, IPsiSourceFile psiSourceFile, DocumentRange range, string name);
    [CanBeNullAttribute]
private Tuple`2<ITreeNode, IDeclaredElement> FindLocalDeclarationAt(IFile file, DocumentRange range, string name);
}
public class JetBrains.ReSharper.Feature.Services.Debugger.DebugStacktraceParser : StackTraceVisitor {
    [CompilerGeneratedAttribute]
private ISolution <solution>P;
    [CompilerGeneratedAttribute]
private ILogger <logger>P;
    [CompilerGeneratedAttribute]
private string <text>P;
    private IDeclaredElement myLastDeclaredElement;
    private string myLastFullName;
    private List`1<StackTraceInfo> myStack;
    public DebugStacktraceParser(ISolution solution, ILogger logger, string text);
    public static IReadOnlyList`1<StackTraceInfo> ParseStackTrace(ISolution solution, ILogger logger, string stackTrace);
    public List`1<StackTraceInfo> GetResult();
    private void SaveNew(IDeclaredElement candidate, string fullName);
    public void Finish();
    public virtual void VisitResolvedNode(IdentifierNode node);
    public virtual void VisitResolvedPath(PathNode node);
    public virtual void VisitText(TextNode node);
    public virtual void VisitParameter(ParameterNode node);
}
public class JetBrains.ReSharper.Feature.Services.Debugger.DocumentRangeExpression : object {
    [CompilerGeneratedAttribute]
private DocumentRange <FullPresentationRange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MetadataName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpressionText>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <MainComponentRange>k__BackingField;
    public DocumentRange FullPresentationRange { get; }
    public string MetadataName { get; }
    public string ExpressionText { get; }
    public DocumentRange MainComponentRange { get; }
    public DocumentRangeExpression(DocumentRange fullPresentationRange, string metadataName, string expressionText, DocumentRange mainComponentRange);
    [CompilerGeneratedAttribute]
public DocumentRange get_FullPresentationRange();
    [CompilerGeneratedAttribute]
public string get_MetadataName();
    [CompilerGeneratedAttribute]
public string get_ExpressionText();
    [CompilerGeneratedAttribute]
public DocumentRange get_MainComponentRange();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Debugger.DummyBreakpointVariant : object {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
protected DummyBreakpointVariant(DummyBreakpointVariant original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(DummyBreakpointVariant left, DummyBreakpointVariant right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(DummyBreakpointVariant left, DummyBreakpointVariant right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(DummyBreakpointVariant other);
    [CompilerGeneratedAttribute]
public virtual DummyBreakpointVariant <Clone>$();
}
public class JetBrains.ReSharper.Feature.Services.Debugger.EvaluationExpressionInfo : object {
    [CompilerGeneratedAttribute]
private ITreeRange <Range>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeRange <QualifierRange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActualExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayText>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <ActualToDisplayExpressionMapping>k__BackingField;
    public ITreeRange Range { get; }
    [CanBeNullAttribute]
public ITreeRange QualifierRange { get; }
    [CanBeNullAttribute]
public string ActualExpression { get; }
    [CanBeNullAttribute]
public string DisplayText { get; }
    public IReadOnlyDictionary`2<string, string> ActualToDisplayExpressionMapping { get; }
    public EvaluationExpressionInfo(ITreeNode node, ITreeNode qualifier, string actualExpression, string displayText, IReadOnlyDictionary`2<string, string> mapping);
    public EvaluationExpressionInfo(ITreeRange range, ITreeRange qualifierRange, string actualExpression, string displayText, IReadOnlyDictionary`2<string, string> mapping);
    [CompilerGeneratedAttribute]
public ITreeRange get_Range();
    [CompilerGeneratedAttribute]
public ITreeRange get_QualifierRange();
    [CompilerGeneratedAttribute]
public string get_ActualExpression();
    [CompilerGeneratedAttribute]
public string get_DisplayText();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_ActualToDisplayExpressionMapping();
    private static ITreeRange OptionalRange(ITreeNode node);
}
public enum JetBrains.ReSharper.Feature.Services.Debugger.EvaluationMode : Enum {
    public int value__;
    public static EvaluationMode NoSideEffects;
    public static EvaluationMode PropertiesAllowed;
    public static EvaluationMode AllSideEffects;
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Debugger.ExpressionEvaluationInfoManager : object {
    private ILanguageManager myLanguageManager;
    public ExpressionEvaluationInfoManager(ILanguageManager languageManager);
    public sealed virtual EvaluationExpressionInfo FindExpression(IFile psiFile, DocumentRange range, EvaluationMode evaluationMode, IFile evaluationPointFile, DocumentOffset evaluationPointOffset, bool promoteToInvocation);
    public sealed virtual EvaluationExpressionInfo FindExpression(IPsiSourceFile psiSourceFile, DocumentRange range, EvaluationMode evaluationMode, IPsiSourceFile evaluationPointPsiSourceFile, DocumentOffset evaluationPointOffset, bool promoteToInvocation);
    public sealed virtual IEnumerable`1<EvaluationExpressionInfo> FindTrivialExpressionsWithoutSideEffects(IFile psiFile, DocumentRange range);
    public sealed virtual IEnumerable`1<EvaluationExpressionInfo> FindTrivialExpressionsWithoutSideEffects(IPsiSourceFile psiSourceFile, DocumentRange range);
}
public interface JetBrains.ReSharper.Feature.Services.Debugger.IBreakpoint {
    public string Name { get; }
    public abstract virtual string get_Name();
}
public interface JetBrains.ReSharper.Feature.Services.Debugger.IBreakpointVariant {
}
public interface JetBrains.ReSharper.Feature.Services.Debugger.IBreakpointVariantsProvider {
    public abstract virtual IReadOnlyList`1<IBreakpoint> GetBreakpointVariants(IProjectFile file, int line, ISolution solution);
    public abstract virtual IEnumerable`1<string> GetSupportedFileExtensions();
}
public interface JetBrains.ReSharper.Feature.Services.Debugger.IDebuggerLocalSymbolProvider {
    [CanBeNullAttribute]
public abstract virtual Tuple`2<ITreeNode, IDeclaredElement> FindLocalDeclarationAt(IFile file, DocumentRange range, string name);
    [CanBeNullAttribute]
public abstract virtual ITreeNode FindContainingFunctionDeclarationBody(ITreeNode node);
}
public interface JetBrains.ReSharper.Feature.Services.Debugger.IDebuggerMethodRangesProvider {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<TextRange> GetMethodsRanges(IFile file);
}
public interface JetBrains.ReSharper.Feature.Services.Debugger.IDebuggerStateInfo {
    public bool IsOnBreakpoint { get; }
    [CanBeNullAttribute]
public IExceptionInfo CurrentException { get; }
    public abstract virtual bool get_IsOnBreakpoint();
    public abstract virtual IExceptionInfo get_CurrentException();
}
public interface JetBrains.ReSharper.Feature.Services.Debugger.IExceptionInfo {
    public string TypeName { get; }
    public string Message { get; }
    public IReadOnlyList`1<StackTraceInfo> StackTrace { get; }
    public bool HasInnerExceptions { get; }
    [CanBeNullAttribute]
public IReadOnlyCollection`1<IExceptionInfo> InnerExceptions { get; }
    public abstract virtual string get_TypeName();
    public abstract virtual string get_Message();
    public abstract virtual IReadOnlyList`1<StackTraceInfo> get_StackTrace();
    public abstract virtual bool get_HasInnerExceptions();
    public abstract virtual IReadOnlyCollection`1<IExceptionInfo> get_InnerExceptions();
    public abstract virtual Task BuildInnerExceptions();
}
public interface JetBrains.ReSharper.Feature.Services.Debugger.IExplainExceptionAdornmentFactory {
    public IProperty`1<bool> IsExplainExceptionEnabled { get; }
    public abstract virtual IProperty`1<bool> get_IsExplainExceptionEnabled();
    public abstract virtual UIElement CreateAdornment(Lifetime lifetime, ITextControl editor);
}
public interface JetBrains.ReSharper.Feature.Services.Debugger.IExpressionEvaluationInfoManager {
    [CanBeNullAttribute]
public abstract virtual EvaluationExpressionInfo FindExpression(IFile psiFile, DocumentRange range, EvaluationMode evaluationMode, IFile evaluationPointFile, DocumentOffset evaluationPointOffset, bool promoteToInvocation);
    [CanBeNullAttribute]
public abstract virtual EvaluationExpressionInfo FindExpression(IPsiSourceFile psiSourceFile, DocumentRange range, EvaluationMode evaluationMode, IPsiSourceFile evaluationPointPsiSourceFile, DocumentOffset evaluationPointOffset, bool promoteToInvocation);
    public abstract virtual IEnumerable`1<EvaluationExpressionInfo> FindTrivialExpressionsWithoutSideEffects(IFile psiFile, DocumentRange range);
    public abstract virtual IEnumerable`1<EvaluationExpressionInfo> FindTrivialExpressionsWithoutSideEffects(IPsiSourceFile psiSourceFile, DocumentRange range);
}
public interface JetBrains.ReSharper.Feature.Services.Debugger.IExpressionEvaluationInfoProvider {
    [CanBeNullAttribute]
public abstract virtual EvaluationExpressionInfo FindExpression(IFile psiFile, DocumentRange range, EvaluationMode evaluationMode, IFile evaluationPointFile, DocumentOffset evaluationPointOffset, bool promoteToInvocation);
}
public interface JetBrains.ReSharper.Feature.Services.Debugger.IMethodDeclarationTreeNodeProvider {
    public abstract virtual ITreeNode GetMethodDeclarationTreeNode(IPsiSourceFile sourceFile, DocumentRange documentRange);
}
public interface JetBrains.ReSharper.Feature.Services.Debugger.ISmartStepIntoInfoProvider {
    public abstract virtual IEnumerable`1<SmartStepIntoTargetInfo> GetStepIntoInformation(IFile file, DocumentRange documentRange);
}
public interface JetBrains.ReSharper.Feature.Services.Debugger.ISourceCallableExpressionsProvider {
    [CanBeNullAttribute]
public abstract virtual string GetCallableSource(IProjectFile file, ISolution solution, int startLine, int startCol, int endLine, int endCol, int callIndex, string callableName);
    [CanBeNullAttribute]
public abstract virtual List`1<DocumentRangeExpression> GetExpressionList(IProjectFile file, ISolution solution, int startLine, int startCol, int endLine, int endCol);
    public abstract virtual DocumentRange GetExpressionRange(IProjectFile file, ISolution solution, int startLine, int startCol);
}
public interface JetBrains.ReSharper.Feature.Services.Debugger.ITrivialExpressionsWithoutSideEffectsEvaluationInfoProvider {
    [CanBeNullAttribute]
public abstract virtual IEnumerable`1<EvaluationExpressionInfo> FindExpressions(IFile psiFile, DocumentRange range);
}
public interface JetBrains.ReSharper.Feature.Services.Debugger.IVsManagedExceptionMonitor {
    public IReadonlyProperty`1<IExceptionInfo> CurrentException { get; }
    public IReadonlyProperty`1<IDebuggerStateInfo> CurrentState { get; }
    public abstract virtual IReadonlyProperty`1<IExceptionInfo> get_CurrentException();
    public abstract virtual IReadonlyProperty`1<IDebuggerStateInfo> get_CurrentState();
}
public class JetBrains.ReSharper.Feature.Services.Debugger.LineBreakpoint : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public LineBreakpoint(string name);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
}
public class JetBrains.ReSharper.Feature.Services.Debugger.SmartStepIntoTargetInfo : ValueType {
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Presentation>k__BackingField;
    [CompilerGeneratedAttribute]
private TextRange <Range>k__BackingField;
    public string Identifier { get; }
    public string Presentation { get; }
    public TextRange Range { get; }
    public SmartStepIntoTargetInfo(string identifier, string presentation, TextRange range);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Identifier();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Presentation();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TextRange get_Range();
}
public class JetBrains.ReSharper.Feature.Services.Debugger.SourcePositionInfo : object {
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string File { get; public set; }
    public int Line { get; public set; }
    public SourcePositionInfo(string File, int Line);
    [CompilerGeneratedAttribute]
protected SourcePositionInfo(SourcePositionInfo original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_File(string value);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Line(int value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SourcePositionInfo left, SourcePositionInfo right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SourcePositionInfo left, SourcePositionInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(SourcePositionInfo other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual SourcePositionInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& File, Int32& Line);
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Feature.Services.Debugger.StackTraceInfo : ValueType {
    [CanBeNullAttribute]
public IDocument Document;
    [CanBeNullAttribute]
public VirtualFileSystemPath Path;
    [CanBeNullAttribute]
public IDeclaredElement DeclaredElement;
    public string FullName;
    public DocumentCoords Coords;
    public StackTraceInfo(IDocument document, IDeclaredElement declaredElement, DocumentCoords coords, string fullName, VirtualFileSystemPath path);
}
public class JetBrains.ReSharper.Feature.Services.Debugger.TextRangeBreakpoint : object {
    [CompilerGeneratedAttribute]
private TextRange <TextRange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainingFunctionName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMultiMethodBreakpoint>k__BackingField;
    public TextRange TextRange { get; }
    [NotNullAttribute]
public string Name { get; }
    [CanBeNullAttribute]
public string ContainingFunctionName { get; }
    public bool IsMultiMethodBreakpoint { get; }
    public TextRangeBreakpoint(TextRange textRange, string name, string containingFunctionName, bool isMultiMethodBreakpoint);
    public TextRangeBreakpoint(int startOffset, int endOffset, string name, string containingFunctionName);
    public TextRangeBreakpoint(TextRange textRange, string name);
    [NotNullAttribute]
public static TextRangeBreakpoint Create(ITreeNode node, TextRange lineRange);
    [CompilerGeneratedAttribute]
public TextRange get_TextRange();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_ContainingFunctionName();
    [CompilerGeneratedAttribute]
public bool get_IsMultiMethodBreakpoint();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Debugger.ZoneMarker : object {
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.DebuggerVs.BreakpointCacheExtensions : object {
    [ExtensionAttribute]
public static bool HasBreakpointOnLine(IBreakpointsSynchronizer cache, VirtualFileSystemPath path, Int32`1<DocLine> line);
}
public class JetBrains.ReSharper.Feature.Services.DebuggerVs.BreakpointOccurrence : object {
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private IVsBreakpointDescriptor myBreakpoint;
    private IVsBreakpointInformation myInformation;
    [CanBeNullAttribute]
private ProjectModelElementEnvoy myProjectModelElementEnvoy;
    [CanBeNullAttribute]
private IDeclaredElementEnvoy myTypeMember;
    [CanBeNullAttribute]
private IDeclaredElementEnvoy myTypeElement;
    [CanBeNullAttribute]
private IDeclaredElementEnvoy myNamespace;
    private SourceFilePtr mySourceFilePtr;
    private int myOffset;
    [CompilerGeneratedAttribute]
private OccurrencePresentationOptions <PresentationOptions>k__BackingField;
    public IVsBreakpointDescriptor Breakpoint { get; }
    public IVsBreakpointInformation BreakpointInfo { get; }
    public OccurrenceType OccurrenceType { get; }
    public bool IsValid { get; }
    public OccurrencePresentationOptions PresentationOptions { get; public set; }
    public BreakpointOccurrence(ISolution solution, IVsBreakpointDescriptor breakpoint, IVsBreakpointInformation information);
    [CanBeNullAttribute]
private IDocument TryGetDocument(ISolution solution, IVsBreakpointDescriptor breakpoint, IProjectFile& projectFile);
    public sealed virtual ISolution GetSolution();
    public IVsBreakpointDescriptor get_Breakpoint();
    public IVsBreakpointInformation get_BreakpointInfo();
    public sealed virtual OccurrenceType get_OccurrenceType();
    public sealed virtual bool get_IsValid();
    public sealed virtual bool Navigate(ISolution solution, PopupWindowContextSource windowContext, bool transferFocus, TabOptions tabOptions);
    public sealed virtual string DumpToString();
    [CompilerGeneratedAttribute]
public sealed virtual OccurrencePresentationOptions get_PresentationOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PresentationOptions(OccurrencePresentationOptions value);
    public IDeclaredElementEnvoy GetTypeMember();
    public IDeclaredElementEnvoy GetTypeElement();
    public IDeclaredElementEnvoy GetNamespace();
    public ProjectModelElementEnvoy GetProjectModelElementEnvoy();
    public SourceFilePtr GetSourceFilePtr();
    public TextRange GetTextRange();
}
public static class JetBrains.ReSharper.Feature.Services.DebuggerVs.DebuggerOptions : object {
    public static Expression`1<Func`2<DebuggerSettings, string>> TraceMessagePattern;
    private static DebuggerOptions();
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "DebuggerSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.DebuggerVs.DebuggerSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "MessagePatternForTracePointSettingDescription")]
public string TraceMessagePattern;
}
public interface JetBrains.ReSharper.Feature.Services.DebuggerVs.IBreakpointsSynchronizer {
    public SimpleSignal BreakpointsChanged { get; }
    public GroupingEvent SynchronizationGroupintEvent { get; }
    public IListEvents`1<IVsBreakpointDescriptor> All { get; }
    public abstract virtual void CreateSimpleBreakpoint(IProjectFile file, DocumentCoords coords);
    public abstract virtual void CreateSimpleBreakpoint(FileSystemPath filePath, DocumentCoords coords);
    public abstract virtual void CreateTracePoint(IProjectFile file, DocumentCoords coords, string traceMessage);
    public abstract virtual void CreateTracePoint(FileSystemPath filePath, DocumentCoords coords, string traceMessage);
    public abstract virtual void SetEnabled(IVsBreakpointDescriptor pointer, bool isEnabled);
    public abstract virtual void Delete(IVsBreakpointDescriptor descriptor);
    public abstract virtual SimpleSignal get_BreakpointsChanged();
    public abstract virtual GroupingEvent get_SynchronizationGroupintEvent();
    public abstract virtual IListEvents`1<IVsBreakpointDescriptor> get_All();
    [CanBeNullAttribute]
public abstract virtual IVsBreakpointInformation GetValidFullBreakpoint(IVsBreakpointDescriptor descriptor, bool cacheValues);
    public abstract virtual bool HasBreakpoints(VirtualFileSystemPath location);
    public abstract virtual IReadOnlyCollection`1<IVsBreakpointDescriptor> GetDescriptors(VirtualFileSystemPath path);
}
public interface JetBrains.ReSharper.Feature.Services.DebuggerVs.IVsBreakpointDescriptor {
    public bool IsValid { get; public set; }
    public VirtualFileSystemPath Location { get; }
    public VsBreakpointType Type { get; }
    public string Condition { get; }
    public bool Enabled { get; }
    public bool BreakWhenHit { get; }
    public string Tag { get; }
    public DocumentCoords DocCoords { get; }
    public abstract virtual bool get_IsValid();
    public abstract virtual void set_IsValid(bool value);
    public abstract virtual VirtualFileSystemPath get_Location();
    public abstract virtual VsBreakpointType get_Type();
    public abstract virtual string get_Condition();
    public abstract virtual bool get_Enabled();
    public abstract virtual bool get_BreakWhenHit();
    public abstract virtual string get_Tag();
    public abstract virtual DocumentCoords get_DocCoords();
}
public interface JetBrains.ReSharper.Feature.Services.DebuggerVs.IVsBreakpointInformation {
    public VsBreakpointLocationType LocationType { get; }
    public VirtualFileSystemPath Location { get; }
    public string FunctionName { get; }
    public int FunctionLineOffset { get; }
    public int FunctionColumnOffset { get; }
    public Int32`1<DocLine> FileLine { get; }
    public Int32`1<DocColumn> FileColumn { get; }
    public VsBreakpointConditionType ConditionType { get; }
    public string Language { get; }
    public VsHitCountType HitCountType { get; }
    public int HitCountTarget { get; }
    public string FilterBy { get; }
    public string Message { get; }
    public abstract virtual VsBreakpointLocationType get_LocationType();
    public abstract virtual VirtualFileSystemPath get_Location();
    public abstract virtual string get_FunctionName();
    public abstract virtual int get_FunctionLineOffset();
    public abstract virtual int get_FunctionColumnOffset();
    public abstract virtual Int32`1<DocLine> get_FileLine();
    public abstract virtual Int32`1<DocColumn> get_FileColumn();
    public abstract virtual VsBreakpointConditionType get_ConditionType();
    public abstract virtual string get_Language();
    public abstract virtual VsHitCountType get_HitCountType();
    public abstract virtual int get_HitCountTarget();
    public abstract virtual string get_FilterBy();
    public abstract virtual string get_Message();
}
[ZoneDefinitionAttribute]
[ZoneDefinitionConfigurableFeatureAttribute("Debugger integration", "Features related to Visual Studio debugger", "False")]
public interface JetBrains.ReSharper.Feature.Services.DebuggerVs.IVsDebuggerZone {
}
public enum JetBrains.ReSharper.Feature.Services.DebuggerVs.VsBreakpointConditionType : Enum {
    public int value__;
    public static VsBreakpointConditionType WhenTrue;
    public static VsBreakpointConditionType WhenChanged;
}
public enum JetBrains.ReSharper.Feature.Services.DebuggerVs.VsBreakpointLocationType : Enum {
    public int value__;
    public static VsBreakpointLocationType DbgBreakpointLocationTypeNone;
    public static VsBreakpointLocationType DbgBreakpointLocationTypeFunction;
    public static VsBreakpointLocationType DbgBreakpointLocationTypeFile;
    public static VsBreakpointLocationType DbgBreakpointLocationTypeData;
    public static VsBreakpointLocationType DbgBreakpointLocationTypeAddress;
}
public enum JetBrains.ReSharper.Feature.Services.DebuggerVs.VsBreakpointType : Enum {
    public int value__;
    public static VsBreakpointType DbgBreakpointTypePending;
    public static VsBreakpointType DbgBreakpointTypeBound;
}
public enum JetBrains.ReSharper.Feature.Services.DebuggerVs.VsHitCountType : Enum {
    public int value__;
    public static VsHitCountType DbgHitCountTypeNone;
    public static VsHitCountType DbgHitCountTypeEqual;
    public static VsHitCountType DbgHitCountTypeGreaterOrEqual;
    public static VsHitCountType DbgHitCountTypeMultiple;
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.DebuggerVs.ZoneMarker : object {
}
public abstract class JetBrains.ReSharper.Feature.Services.DeferredCaches.DeferredCacheBase`1 : object {
    protected Lifetime myLifetime;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [NotNullAttribute]
private IPersistentIndexManager myPersistentIndexManager;
    [CompilerGeneratedAttribute]
private IOptimizedPersistentSortedMap`2<IPsiSourceFile, T> <Map>k__BackingField;
    [NotNullAttribute]
private IOptimizedPersistentSortedMap`2<IPsiSourceFile, long> myTimeStamps;
    [NotNullAttribute]
private OptimizedPersistentSortedMap`2<string, string> myCacheVersions;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myInitialized;
    [NotNullAttribute]
private ViewableProperty`1<bool> myLoadCompleted;
    [CompilerGeneratedAttribute]
private bool <ClearOnLoad>k__BackingField;
    [NotNullAttribute]
protected ILogger Logger { get; }
    [NotNullAttribute]
protected IOptimizedPersistentSortedMap`2<IPsiSourceFile, T> Map { get; }
    public IReadonlyProperty`1<bool> LoadCompleted { get; }
    [NotNullAttribute]
protected string Version { get; }
    private bool ClearOnLoad { get; private set; }
    public bool TakeWriteLockForMerge { get; }
    [NotNullAttribute]
private string PersistentId { get; }
    protected DeferredCacheBase`1(Lifetime lifetime, IPersistentIndexManager persistentIndexManager, IUnsafeMarshaller`1<T> valueMarshaller, ILogger logger);
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
protected IOptimizedPersistentSortedMap`2<IPsiSourceFile, T> get_Map();
    public sealed virtual IReadonlyProperty`1<bool> get_LoadCompleted();
    protected virtual string get_Version();
    [CompilerGeneratedAttribute]
private bool get_ClearOnLoad();
    [CompilerGeneratedAttribute]
private void set_ClearOnLoad(bool value);
    public virtual bool get_TakeWriteLockForMerge();
    public abstract virtual bool IsApplicable(IPsiSourceFile sourceFile);
    public virtual bool Contains(IPsiSourceFile sourceFile);
    public sealed virtual bool UpToDate(IPsiSourceFile sourceFile);
    public sealed virtual void Merge(IPsiSourceFile psiSourceFile, object build);
    protected virtual void DoMerge(IPsiSourceFile psiSourceFile, object build);
    protected abstract virtual void MergeData(IPsiSourceFile sourceFile, T build);
    public abstract virtual object Build(IPsiSourceFile psiSourceFile);
    public virtual void Drop(IPsiSourceFile psiSourceFile);
    protected abstract virtual void DropData(IPsiSourceFile sourceFile, T data);
    [CanBeNullAttribute]
private string GetVersionFromDisk();
    public sealed virtual void Initialize();
    public sealed virtual void Load();
    public virtual void MergeLoaded();
    private void MergeLoadedData();
    public virtual void Invalidate();
    public virtual void OnDocumentChange(IPsiSourceFile sourceFile, ProjectFileDocumentCopyChange change);
    protected abstract virtual void InvalidateData();
    private string get_PersistentId();
    [CanBeNullAttribute]
public T TryGetValue(IPsiSourceFile sourceFile);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.DeferredCaches.DeferredCacheController : object {
    private IProperty`1<int> myBatchSize;
    private IProperty`1<int> myThreadCount;
    private Lifetime myLifetime;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private SolutionCaches mySolutionCaches;
    [NotNullAttribute]
private IPsiFiles myPsiFiles;
    [NotNullAttribute]
private IShellLocks myShellLocks;
    [NotNullAttribute]
private DeferredHelperCache myDeferredHelperCache;
    [NotNullAttribute]
private IEnumerable`1<IDeferredCache> myDeferredCaches;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private GroupingEvent myGroupingEvent;
    [NotNullAttribute]
private ViewableProperty`1<bool> myCompletedOnce;
    [NotNullAttribute]
private IReadonlyProperty`1<bool> myCachesLoadCompleted;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsProcessing>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IPsiSourceFile> <CurrentFile>k__BackingField;
    private Lifetime myCurrentBackgroundActivityLifetime;
    private LifetimeDefinition myCurrentBackgroundActivityLifetimeDefinition;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myIsFirstTime;
    [NotNullAttribute]
public IReadonlyProperty`1<bool> CompletedOnce { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsProcessing { get; }
    [NotNullAttribute]
public IProperty`1<IPsiSourceFile> CurrentFile { get; }
    public DeferredCacheController(Lifetime lifetime, ISolution solution, ISettingsStore settingsStore, SolutionCaches solutionCaches, IPsiFiles psiFiles, IShellLocks shellLocks, DeferredCacheSuppressor suppressor, DeferredHelperCache deferredHelperCache, IEnumerable`1<IDeferredCache> deferredCaches, ILogger logger);
    public IReadonlyProperty`1<bool> get_CompletedOnce();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsProcessing();
    [CompilerGeneratedAttribute]
public IProperty`1<IPsiSourceFile> get_CurrentFile();
    private IReadonlyProperty`1<bool> And(IEnumerable`1<IReadonlyProperty`1<bool>> properties);
    private void ScheduleBackgroundActivity();
    private List`1<List`1<IPsiSourceFile>> GetBatchesToProcess(int batchSize, int batchCount);
    private void RunBackgroundActivity();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Feature.Services.DeferredCaches.DeferredCacheController/<ScheduleBackgroundProcess>d__28")]
private Task ScheduleBackgroundProcess(List`1<IPsiSourceFile> toDelete, List`1<List`1<IPsiSourceFile>> toProcessList);
    public bool HasDirtyFiles();
    public bool IsProcessingFiles();
    private void BackgroundActivity(List`1<IPsiSourceFile> toProcess, ConcurrentDictionary`2<IPsiSourceFile, ValueTuple`2<long, Dictionary`2<IDeferredCache, object>>> calculatedData, Boolean& needWriteLockForMerge);
    private void FlushData(ConcurrentDictionary`2<IPsiSourceFile, ValueTuple`2<long, Dictionary`2<IDeferredCache, object>>> calculatedData, bool needWriteLockForMerge);
    private void DeleteFilesFromCaches(List`1<IPsiSourceFile> toDelete);
    public void Invalidate();
    private void Initialize();
    private void LoadAndMergeCaches();
    [CompilerGeneratedAttribute]
private void <Initialize>b__36_0();
    [CompilerGeneratedAttribute]
private void <Initialize>b__36_1(bool b);
    [CompilerGeneratedAttribute]
private void <Initialize>b__36_3();
    [CompilerGeneratedAttribute]
private void <Initialize>b__36_4(IPsiSourceFile _);
    [CompilerGeneratedAttribute]
private void <Initialize>b__36_5(IPsiSourceFile _);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.DeferredCaches.DeferredCacheProgressBar : object {
    [NotNullAttribute]
private DeferredHelperCache myCache;
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private DeferredCacheController myController;
    [NotNullAttribute]
private IBackgroundProgressIndicatorManager myBackgroundProgressManager;
    public DeferredCacheProgressBar(Lifetime lifetime, DeferredHelperCache cache, IShellLocks locks, DeferredCacheController controller, IBackgroundProgressIndicatorManager backgroundProgressManager);
    private void Start(Lifetime lifetime);
    [NotNullAttribute]
private ProgressIndicator CreateProgressIndicator(Lifetime lifetime, string title);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "Deferred Cache Settings")]
public class JetBrains.ReSharper.Feature.Services.DeferredCaches.DeferredCacheSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "DeferredCacheController.BatchSize")]
public int BatchSize;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "DeferredCacheController.ThreadCount")]
public int ThreadCount;
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.DeferredCaches.DeferredCacheSuppressor : object {
    [NotNullAttribute]
private Reasons`1<string> myReasons;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
public IProperty`1<bool> CanLoadDeferredCaches { get; }
    public DeferredCacheSuppressor(Lifetime lifetime, IFeaturesStartupMonitor featuresStartupMonitor, ILogger logger);
    public IProperty`1<bool> get_CanLoadDeferredCaches();
    public void AddReason(Lifetime lifetime, string reason);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(Lifetime startupLifetime);
}
public abstract class JetBrains.ReSharper.Feature.Services.DeferredCaches.DeferredCacheWithCustomLockBase`1 : DeferredCacheBase`1<T> {
    [NotNullAttribute]
protected object Lock;
    public bool TakeWriteLockForMerge { get; }
    protected DeferredCacheWithCustomLockBase`1(Lifetime lifetime, IPersistentIndexManager persistentIndexManager, IUnsafeMarshaller`1<T> valueMarshaller, ILogger logger);
    public virtual bool get_TakeWriteLockForMerge();
    protected virtual void DoMerge(IPsiSourceFile psiSourceFile, object build);
    public virtual void Drop(IPsiSourceFile psiSourceFile);
    public virtual void MergeLoaded();
    public virtual void Invalidate();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.DeferredCaches.DeferredHelperCache : object {
    [NotNullAttribute]
private IShellLocks myShellLocks;
    [NotNullAttribute]
[ItemNotNullAttribute]
private IEnumerable`1<IDeferredCache> myCaches;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
public SynchronizedSet`1<IPsiSourceFile> FilesToDrop;
    [NotNullAttribute]
public SynchronizedSet`1<IPsiSourceFile> FilesToProcess;
    [NotNullAttribute]
private LifetimeDefinition myLoadLifetime;
    [NotNullAttribute]
public Signal`1<IPsiSourceFile> AfterAddToProcess;
    [NotNullAttribute]
public Signal`1<IPsiSourceFile> AfterAddToDrop;
    [NotNullAttribute]
public Signal`1<IPsiSourceFile> AfterRemoveFromProcess;
    public bool HasDirtyFiles { get; }
    public DeferredHelperCache(Lifetime lifetime, IShellLocks shellLocks, IEnumerable`1<IDeferredCache> caches, ILogger logger, DeferredCacheSuppressor deferredCacheSuppressor);
    public sealed virtual void MarkAsDirty(IPsiSourceFile sourceFile);
    public sealed virtual object Load(IProgressIndicator progress, bool enablePersistence);
    public sealed virtual void MergeLoaded(object data);
    public sealed virtual void Save(IProgressIndicator progress, bool enablePersistence);
    public sealed virtual bool UpToDate(IPsiSourceFile sourceFile);
    public sealed virtual object Build(IPsiSourceFile sourceFile, bool isStartup);
    public sealed virtual void Merge(IPsiSourceFile sourceFile, object builtPart);
    public sealed virtual void Drop(IPsiSourceFile sourceFile);
    public sealed virtual void OnPsiChange(ITreeNode elementContainingChanges, PsiChangedElementType type);
    public sealed virtual void OnDocumentChange(IPsiSourceFile sourceFile, ProjectFileDocumentCopyChange change);
    public sealed virtual void SyncUpdate(bool underTransaction);
    public sealed virtual void Dump(TextWriter writer, IPsiSourceFile sourceFile);
    private void AddToProcess(IPsiSourceFile sourceFile);
    public void DropFromProcess(IPsiSourceFile sourceFile);
    public sealed virtual bool get_HasDirtyFiles();
}
public interface JetBrains.ReSharper.Feature.Services.DeferredCaches.IDeferredCache {
    public bool TakeWriteLockForMerge { get; }
    [NotNullAttribute]
public IReadonlyProperty`1<bool> LoadCompleted { get; }
    public abstract virtual bool get_TakeWriteLockForMerge();
    public abstract virtual bool IsApplicable(IPsiSourceFile sourceFile);
    public abstract virtual bool Contains(IPsiSourceFile sourceFile);
    public abstract virtual bool UpToDate(IPsiSourceFile sourceFile);
    public abstract virtual void Merge(IPsiSourceFile psiSourceFile, object build);
    [CanBeNullAttribute]
public abstract virtual object Build(IPsiSourceFile psiSourceFile);
    public abstract virtual void Drop(IPsiSourceFile psiSourceFile);
    public abstract virtual void Load();
    public abstract virtual void MergeLoaded();
    public abstract virtual void Invalidate();
    public abstract virtual void OnDocumentChange(IPsiSourceFile sourceFile, ProjectFileDocumentCopyChange change);
    public abstract virtual void Initialize();
    public abstract virtual IReadonlyProperty`1<bool> get_LoadCompleted();
}
[DeclaredElementDescriptionProviderAttribute("16")]
internal class JetBrains.ReSharper.Feature.Services.Descriptions.ClrDeclaredElementXmlDescriptionProvider : DeclaredElementXmlDescriptionProviderBase {
    public int Priority { get; }
    public ClrDeclaredElementXmlDescriptionProvider(Lifetime lifetime, ISettingsCache settingsCache, ISettingsSchema settingsSchema, ISettingsOptimization settingsOptimization);
    [CanBeNullAttribute]
protected virtual IPsiModule TryToGetPsiModule(IDeclaredElement element);
    [CanBeNullAttribute]
protected virtual XmlNode GetXmlSummary(IDeclaredElement element);
    [CanBeNullAttribute]
protected virtual XmlNode GetXmlDoc(IDeclaredElement element);
    public virtual Nullable`1<bool> IsElementObsolete(IDeclaredElement element, RichTextBlock& obsoleteDescription, DeclaredElementDescriptionStyle style);
    public virtual int get_Priority();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Descriptions.DeclaredElementDescriptionPresenter : object {
    private IEnumerable`1<IDeclaredElementDescriptionProvider> myDescriptionProviders;
    [CompilerGeneratedAttribute]
private bool <AvoidExternalDocLink>k__BackingField;
    public bool AvoidExternalDocLink { get; private set; }
    public DeclaredElementDescriptionPresenter(IEnumerable`1<IDeclaredElementDescriptionProvider> providers);
    [CompilerGeneratedAttribute]
public bool get_AvoidExternalDocLink();
    [CompilerGeneratedAttribute]
private void set_AvoidExternalDocLink(bool value);
    public sealed virtual RichTextBlock GetDeclaredElementDescription(IDeclaredElement element, DeclaredElementDescriptionStyle style, PsiLanguageType language, IPsiModule module);
    public sealed virtual bool IsDeclaredElementObsolete(IDeclaredElement element);
    public sealed virtual bool IsDeclaredElementObsolete(IDeclaredElement element, RichTextBlock& obsoleteDescription, DeclaredElementDescriptionStyle style);
}
public static class JetBrains.ReSharper.Feature.Services.Descriptions.DeclaredElementDescriptionPresenterUtil : object {
    public static bool IsObsolete(IDeclaredElement element);
    [ContractAnnotationAttribute("=> false, obsoleteDescription: null; => true, obsoleteDescription: notnull")]
public static bool IsObsolete(IDeclaredElement element, RichTextBlock& obsoleteDescription);
    public static RichTextBlock GetDeclaredElementDescription(IDeclaredElement element, DeclaredElementDescriptionStyle style, PsiLanguageType language, IPsiModule module);
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.Descriptions.IDeclaredElementDescriptionProvider")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.Feature.Services.Descriptions.DeclaredElementDescriptionProviderAttribute : SolutionComponentAttribute {
    public DeclaredElementDescriptionProviderAttribute(Instantiation instantiation);
}
public class JetBrains.ReSharper.Feature.Services.Descriptions.DeclaredElementDescriptionStyle : object {
    [CompilerGeneratedAttribute]
private bool <ShowSummary>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowFullDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowObsoleteDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private DescriptionPlacement <IntendedDescriptionPlacement>k__BackingField;
    [CompilerGeneratedAttribute]
private DeclaredElementPresenterTextStyles <TextStyles>k__BackingField;
    public static DeclaredElementDescriptionStyle SUMMARY_STYLE;
    public static DeclaredElementDescriptionStyle NO_OBSOLETE_SUMMARY_STYLE;
    public static DeclaredElementDescriptionStyle FULL_STYLE;
    public static DeclaredElementDescriptionStyle PARAMETER_STYLE;
    public static DeclaredElementDescriptionStyle OBSOLETE_DESCRIPTION;
    public static DeclaredElementDescriptionStyle NO_OBSOLETE_FULL_STYLE;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool ShowSummary { get; public set; }
    public bool ShowFullDescription { get; public set; }
    public bool ShowObsoleteDescription { get; public set; }
    public DescriptionPlacement IntendedDescriptionPlacement { get; public set; }
    public DeclaredElementPresenterTextStyles TextStyles { get; public set; }
    [CompilerGeneratedAttribute]
protected DeclaredElementDescriptionStyle(DeclaredElementDescriptionStyle original);
    private static DeclaredElementDescriptionStyle();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public bool get_ShowSummary();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ShowSummary(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowFullDescription();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ShowFullDescription(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowObsoleteDescription();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ShowObsoleteDescription(bool value);
    [CompilerGeneratedAttribute]
public DescriptionPlacement get_IntendedDescriptionPlacement();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IntendedDescriptionPlacement(DescriptionPlacement value);
    [CompilerGeneratedAttribute]
public DeclaredElementPresenterTextStyles get_TextStyles();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TextStyles(DeclaredElementPresenterTextStyles value);
    public static DeclaredElementDescriptionStyle CreateSummaryStyle(DeclaredElementPresenterTextStyles textStyles);
    public static DeclaredElementDescriptionStyle CreateNoObsoleteSummaryStyle(DeclaredElementPresenterTextStyles textStyles);
    public static DeclaredElementDescriptionStyle CreateFullStyle(DeclaredElementPresenterTextStyles textStyles);
    public static DeclaredElementDescriptionStyle CreateParameterStyle(DeclaredElementPresenterTextStyles textStyles);
    public static DeclaredElementDescriptionStyle CreateObsoleteDescription(DeclaredElementPresenterTextStyles textStyles);
    public static DeclaredElementDescriptionStyle CreateNoObsoleteFullStyle(DeclaredElementPresenterTextStyles textStyles);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(DeclaredElementDescriptionStyle left, DeclaredElementDescriptionStyle right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(DeclaredElementDescriptionStyle left, DeclaredElementDescriptionStyle right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(DeclaredElementDescriptionStyle other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual DeclaredElementDescriptionStyle <Clone>$();
}
public abstract class JetBrains.ReSharper.Feature.Services.Descriptions.DeclaredElementXmlDescriptionProviderBase : object {
    private Lifetime myLifetime;
    private ISettingsCache mySettingsCache;
    private ISettingsOptimization mySettingsOptimization;
    private SettingsKey mySettingsKey;
    public int Priority { get; }
    private SettingsKey JetBrains.Application.Settings.Extentions.ICachedSettingsReader<JetBrains.ReSharper.Feature.Services.ParameterInfo.Settings.ParameterInfoSettingsKey>.KeyExposed { get; }
    protected DeclaredElementXmlDescriptionProviderBase(Lifetime lifetime, ISettingsCache settingsCache, ISettingsSchema settingsSchema, ISettingsOptimization settingsOptimization);
    public abstract virtual int get_Priority();
    private sealed virtual override SettingsKey JetBrains.Application.Settings.Extentions.ICachedSettingsReader<JetBrains.ReSharper.Feature.Services.ParameterInfo.Settings.ParameterInfoSettingsKey>.get_KeyExposed();
    protected abstract virtual IPsiModule TryToGetPsiModule(IDeclaredElement element);
    public sealed virtual RichTextBlock GetElementDescription(IDeclaredElement element, DeclaredElementDescriptionStyle style, PsiLanguageType language, IPsiModule module);
    protected abstract virtual XmlNode GetXmlSummary(IDeclaredElement element);
    protected abstract virtual XmlNode GetXmlDoc(IDeclaredElement element);
    public abstract virtual Nullable`1<bool> IsElementObsolete(IDeclaredElement element, RichTextBlock& obsoleteDescription, DeclaredElementDescriptionStyle style);
    private sealed virtual override ParameterInfoSettingsKey JetBrains.Application.Settings.Extentions.ICachedSettingsReader<JetBrains.ReSharper.Feature.Services.ParameterInfo.Settings.ParameterInfoSettingsKey>.ReadData(Lifetime lifetime, IContextBoundSettingsStore store);
}
public enum JetBrains.ReSharper.Feature.Services.Descriptions.DescriptionPlacement : Enum {
    public int value__;
    public static DescriptionPlacement ON_THE_NEW_LINE;
    public static DescriptionPlacement AFTER_NAME;
}
public interface JetBrains.ReSharper.Feature.Services.Descriptions.IDeclaredElementDescriptionPresenter {
    public abstract virtual RichTextBlock GetDeclaredElementDescription(IDeclaredElement element, DeclaredElementDescriptionStyle style, PsiLanguageType language, IPsiModule module);
    public abstract virtual bool IsDeclaredElementObsolete(IDeclaredElement element);
    [ContractAnnotationAttribute("=> false, obsoleteDescription: null; => true, obsoleteDescription: notnull")]
public abstract virtual bool IsDeclaredElementObsolete(IDeclaredElement element, RichTextBlock& obsoleteDescription, DeclaredElementDescriptionStyle style);
}
public interface JetBrains.ReSharper.Feature.Services.Descriptions.IDeclaredElementDescriptionProvider {
    public int Priority { get; }
    [CanBeNullAttribute]
public abstract virtual RichTextBlock GetElementDescription(IDeclaredElement element, DeclaredElementDescriptionStyle style, PsiLanguageType language, IPsiModule module);
    [ContractAnnotationAttribute("=> false, obsoleteDescription: null; => true, obsoleteDescription: notnull")]
public abstract virtual Nullable`1<bool> IsElementObsolete(IDeclaredElement element, RichTextBlock& obsoleteDescription, DeclaredElementDescriptionStyle style);
    public abstract virtual int get_Priority();
}
public static class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.ArchitectureGroupings : object {
    public static GroupingId SolutionFolders;
    public static GroupingId FileStructure;
    public static GroupingId ProjectStructure;
    public static GroupingId Namespaces;
    private static ArchitectureGroupings();
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Core.ArchitectureAssemblyNode : ArchitectureGraphNodeBase {
    public ArchitectureAssemblyNode(IAssembly assembly);
}
[DebuggerDisplayAttribute("Name = {Name}, Kind = {Kind}")]
public abstract class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Core.ArchitectureGraphElementBase : object {
    [CanBeNullAttribute]
private IProjectModelElementPointer myProjectItemPointer;
    private string mySolutionIdentifier;
    private string myName;
    private IProjectModelElement myProjectModelElement;
    [CanBeNullAttribute]
private ISolution mySolution;
    [CompilerGeneratedAttribute]
private bool <IsBinded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private ElementKind <Kind>k__BackingField;
    public bool IsBinded { get; public set; }
    public string SolutionIdentifier { get; }
    public string Name { get; }
    public bool IsValid { get; public set; }
    public ElementKind Kind { get; public set; }
    public ISolution Solution { get; }
    protected ArchitectureGraphElementBase(ISolution solution, IProjectModelElementPointer projectItemPointer, string solutionIdentifier, string name);
    protected ArchitectureGraphElementBase(IProjectModelElement projectModelElement, string solutionIdentifier, string name);
    protected ArchitectureGraphElementBase(string solutionIdentifier, string name);
    [CanBeNullAttribute]
public sealed virtual IProjectModelElement GetProjectModelElement(ISolution solution);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsBinded();
    [CompilerGeneratedAttribute]
public void set_IsBinded(bool value);
    public sealed virtual string get_SolutionIdentifier();
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsValid();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsValid(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ElementKind get_Kind();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Kind(ElementKind value);
    public sealed virtual void Bind(IProjectModelElement projectModelElement);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    public bool Equals(ArchitectureGraphElementBase element);
    public sealed virtual ISolution get_Solution();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Core.ArchitectureGraphElementExtentions : object {
    [ExtensionAttribute]
public static IProjectModelElement GetElement(IProjectModelGraphElement graphElement, ISolution solution);
    [ExtensionAttribute]
public static string GetName(IProjectModelGraphElement graphElement, ISolution solution);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Core.ArchitectureGraphExtentions : object {
    [ExtensionAttribute]
public static IDiagramGraphEdge CreateEdgeFromProjectModel(IProjectModelGraph graph, IProjectModelElement element, IArchitectureElementBuilder builder, IProject targetProject);
    [ExtensionAttribute]
public static IDiagramGraphNode CreateNodeFromProjectModel(IDiagramGraph graph, IProjectModelElement element, IArchitectureElementBuilder builder);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IDiagramGraphElement CreateGraphElement(IProjectModelGraph graph, IProjectModelElement element, IArchitectureElementBuilder builder);
    [ExtensionAttribute]
public static bool GetGraphElement(IDiagramGraph graph, IProjectElement element);
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Core.ArchitectureGraphNodeBase : ArchitectureGraphElementBase {
    private ICollection`1<IDiagramGraphEdge> myIncoming;
    private ICollection`1<IDiagramGraphEdge> myOutgoing;
    public ICollection`1<IDiagramGraphEdge> Outgoing { get; }
    public ICollection`1<IDiagramGraphEdge> Incoming { get; }
    protected ArchitectureGraphNodeBase(ISolution solution, IProjectModelElementPointer pointer, string solutionIdentifier, string name);
    protected ArchitectureGraphNodeBase(string solutionIdentifier, string name);
    public sealed virtual ICollection`1<IDiagramGraphEdge> get_Outgoing();
    public sealed virtual ICollection`1<IDiagramGraphEdge> get_Incoming();
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Core.ArchitecturePersistentGraph : DiagramGraphBase {
    protected Dictionary`2<string, IProjectModelGraphElement> BindingMap;
    private GraphDiff myDiff;
    private bool myHasDiff;
    private ISolution mySolution;
    public GraphDiff DiffToCurrentSolution { get; }
    public bool IsBound { get; }
    public bool HasDiff { get; internal set; }
    public ArchitecturePersistentGraph(ISolution solution);
    public sealed virtual IProjectModelGraphElement TryGetGraphElement(IProjectElement element);
    public sealed virtual IProjectModelGraphElement TryGetGraphElement(string persistentId);
    public virtual void AddNode(IDiagramGraphNode node);
    public virtual void AddEdge(IDiagramGraphEdge edge);
    public virtual bool RemoveNode(IDiagramGraphNode node);
    public virtual bool RemoveEdge(IDiagramGraphEdge edge);
    public sealed virtual GraphDiff get_DiffToCurrentSolution();
    public sealed virtual void BindToCurrentSolution(ISolution solution);
    public sealed virtual bool get_IsBound();
    public bool get_HasDiff();
    internal void set_HasDiff(bool value);
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Core.ArchitectureProjectNode : ArchitectureGraphNodeBase {
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectMark <ProjectMark>k__BackingField;
    public IProject Project { get; public set; }
    public IProjectMark ProjectMark { get; public set; }
    public ArchitectureProjectNode(IProject project);
    public ArchitectureProjectNode(string identifier, string name);
    [CompilerGeneratedAttribute]
public IProject get_Project();
    [CompilerGeneratedAttribute]
public void set_Project(IProject value);
    [CompilerGeneratedAttribute]
public IProjectMark get_ProjectMark();
    [CompilerGeneratedAttribute]
public void set_ProjectMark(IProjectMark value);
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Core.FileSystemFolderGroupNode : object {
    private VirtualFileSystemPath myFileSystemPath;
    private int myLevel;
    private JetHashSet`1<IDiagramGraphElement> myNestedElements;
    private ISolution mySolution;
    [CompilerGeneratedAttribute]
private ElementKind <Kind>k__BackingField;
    public string Name { get; }
    public bool IsValid { get; public set; }
    public ElementKind Kind { get; public set; }
    public ICollection`1<IDiagramGraphElement> NestedElements { get; }
    public int Level { get; public set; }
    public VirtualFileSystemPath FileSystemPath { get; }
    public ICollection`1<IDiagramGraphEdge> Outgoing { get; }
    public ICollection`1<IDiagramGraphEdge> Incoming { get; }
    public ISolution Solution { get; }
    public FileSystemFolderGroupNode(VirtualFileSystemPath fileSystemPath, ISolution solution);
    public sealed virtual string get_Name();
    public sealed virtual bool get_IsValid();
    public sealed virtual void set_IsValid(bool value);
    [CompilerGeneratedAttribute]
public ElementKind get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(ElementKind value);
    public sealed virtual ICollection`1<IDiagramGraphElement> get_NestedElements();
    public sealed virtual int get_Level();
    public sealed virtual void set_Level(int value);
    public sealed virtual void ProvideMetadata(IDictionary`2<string, string> metadata);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Core.FileSystemFolderGroupNode/<GetInvalidGroupElements>d__20")]
public sealed virtual IEnumerable`1<IDiagramGraphElement> GetInvalidGroupElements(IDiagramGraph graph);
    public VirtualFileSystemPath get_FileSystemPath();
    protected bool Equals(FileSystemFolderGroupNode other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual ICollection`1<IDiagramGraphEdge> get_Outgoing();
    public sealed virtual ICollection`1<IDiagramGraphEdge> get_Incoming();
    public sealed virtual ISolution get_Solution();
}
public interface JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Core.IArchitectureAssemblyNode {
}
public interface JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Core.IArchitectureElementBuilder {
    public abstract virtual IArchitectureProjectNode CreateProjectNode(IProject project);
    public abstract virtual IArchitectureAssemblyNode CreateAssemblyNode(IAssembly assembly);
    public abstract virtual IArchitectureModuleToModuleReference CreateProjectRefrerenceNode(IProjectModelGraph graph, IProjectToProjectReference reference);
    public abstract virtual IArchitectureModuleToModuleReference CreateProjectOutputRefrerenceNode(IProjectModelGraph graph, IProjectToAssemblyReference reference, IProject projectWithOutput);
    public abstract virtual IDiagramGraphNode CreateSolutionFolderNode(IProject project);
}
public interface JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Core.IArchitectureModuleToModuleReference {
    public int Weight { get; public set; }
    public abstract virtual int get_Weight();
    public abstract virtual void set_Weight(int value);
}
public interface JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Core.IArchitectureProjectNode {
}
public interface JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Core.IProjectModelEdge {
    public DependencyType Type { get; public set; }
    public abstract virtual DependencyType get_Type();
    public abstract virtual void set_Type(DependencyType value);
}
public interface JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Core.IProjectModelNode {
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Core.ModulesPathEdge : object {
    private bool myIsValid;
    private ElementKind myKind;
    private IDiagramGraphNode mySource;
    private IDiagramGraphNode myTarget;
    public string Name { get; }
    public bool IsValid { get; public set; }
    public ElementKind Kind { get; public set; }
    public IDiagramGraphNode Source { get; }
    public IDiagramGraphNode Target { get; }
    public ModulesPathEdge(IDiagramGraphNode source, IDiagramGraphNode target);
    public sealed virtual string get_Name();
    public sealed virtual bool get_IsValid();
    public sealed virtual void set_IsValid(bool value);
    public ElementKind get_Kind();
    public void set_Kind(ElementKind value);
    public sealed virtual IDiagramGraphNode get_Source();
    public sealed virtual IDiagramGraphNode get_Target();
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Core.ProjectToModuleReferenceEdge : ArchitectureGraphElementBase {
    private IDiagramGraphNode mySource;
    private IDiagramGraphNode myTarget;
    private int myWeight;
    [CompilerGeneratedAttribute]
private DependencyType <Type>k__BackingField;
    public IDiagramGraphNode Source { get; public set; }
    public IDiagramGraphNode Target { get; public set; }
    public DependencyType Type { get; public set; }
    public int Weight { get; public set; }
    public ProjectToModuleReferenceEdge(IProjectToModuleReference reference, string id, string name, IDiagramGraphNode source, IDiagramGraphNode target);
    public ProjectToModuleReferenceEdge(string id, string name, IDiagramGraphNode source, IDiagramGraphNode target);
    public sealed virtual IDiagramGraphNode get_Source();
    public void set_Source(IDiagramGraphNode value);
    public sealed virtual IDiagramGraphNode get_Target();
    public void set_Target(IDiagramGraphNode value);
    [CompilerGeneratedAttribute]
public sealed virtual DependencyType get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Type(DependencyType value);
    public sealed virtual int get_Weight();
    public sealed virtual void set_Weight(int value);
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Core.SolutionFolderGroupNode : ArchitectureGraphNodeBase {
    [CompilerGeneratedAttribute]
private ICollection`1<IDiagramGraphElement> <NestedElements>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectFolder <ProjectFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Level>k__BackingField;
    public ICollection`1<IDiagramGraphElement> NestedElements { get; }
    public IProjectFolder ProjectFolder { get; }
    public int Level { get; public set; }
    public SolutionFolderGroupNode(IProjectFolder projectFolder);
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<IDiagramGraphElement> get_NestedElements();
    [CompilerGeneratedAttribute]
public IProjectFolder get_ProjectFolder();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Level();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Level(int value);
    public sealed virtual void ProvideMetadata(IDictionary`2<string, string> metadata);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Core.SolutionFolderGroupNode/<GetInvalidGroupElements>d__12")]
public sealed virtual IEnumerable`1<IDiagramGraphElement> GetInvalidGroupElements(IDiagramGraph graph);
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.CouplingHelper : object {
    private ISolution mySolution;
    private Lifetime myLifetime;
    private ReferencedCodeSearcher myReferencedCodeSearcher;
    private IShellLocks myShellLocks;
    private IProperty`1<bool> myIsTurnedOff;
    public ISignal`1<ProjectReferencesCoupling> ProjectCalculationFinished;
    public ISignal`1<IProject> ProjectIsBeingAnalyzed;
    public ISignal`1<bool> Done;
    public ISignal`1<bool> Interrupted;
    private Queue`1<IProject> myWorkQueue;
    private AsyncCommitService myAsyncCommitService;
    private InterruptionSet myInterruptionSet;
    public CouplingHelper(Lifetime lifetime, ISolution solution, IShellLocks shellLocks);
    public void CalculateCoupling(IEnumerable`1<IProject> projects);
    private void Run();
    public void Stop();
    public sealed virtual Action BeforeCommit();
    public sealed virtual void OnInterrupt();
    [CompilerGeneratedAttribute]
private void <Run>b__14_0();
    [CompilerGeneratedAttribute]
private void <Run>b__14_2();
    [CompilerGeneratedAttribute]
private void <Run>b__14_1();
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Graph.GraphDiff : object {
    protected JetHashSet`1<IDiagramGraphElement> myNewElements;
    protected JetHashSet`1<IDiagramGraphElement> myElementsToRemove;
    public ICollection`1<IDiagramGraphElement> NewElements { get; }
    public ICollection`1<IDiagramGraphElement> ElementsToRemove { get; }
    public ICollection`1<IDiagramGraphElement> get_NewElements();
    public ICollection`1<IDiagramGraphElement> get_ElementsToRemove();
    public bool IsEmpty();
    public void Clear();
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.GraphInputSettings : object {
    private ICollection`1<IProject> myScope;
    private bool myIncludeTransitive;
    private GroupingId myGroupingId;
    private bool myShowDiff;
    private bool myShowPaths;
    private bool myShowNuGet;
    public GroupingId GroupingId { get; }
    public bool IncludeTransitive { get; }
    public ICollection`1<IProject> Scope { get; }
    public bool ShowDiff { get; }
    public bool ShowPaths { get; }
    public bool ShowNuGet { get; }
    public GraphInputSettings(ICollection`1<IProject> scope, bool includeTransitive, GroupingId groupingId, bool showDiff, bool showPaths, bool showNuGet);
    public GraphInputSettings(ICollection`1<IProject> selectedProjects, bool showDiff, bool showPaths, bool showNuGet);
    public GroupingId get_GroupingId();
    public bool get_IncludeTransitive();
    public ICollection`1<IProject> get_Scope();
    public bool get_ShowDiff();
    public bool get_ShowPaths();
    public bool get_ShowNuGet();
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Grouping.ArchitectureGrouping : TreeModelGrouping`1<IOccurrence> {
    private GroupingId myGroupingId;
    public GroupingId GroupingId { get; }
    public ArchitectureGrouping(string name, GroupingId groupingId, ITreeGroupProvider`1[] groups);
    public GroupingId get_GroupingId();
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Grouping.ContainingSolutionFolderGrouping : object {
    public sealed virtual IDiagramGroupNode GetParentNode(IDiagramGraphElement node, IDiagramGraph graph);
    public sealed virtual IDiagramGroupNode CreateGroupNode(ISolution solution, IReadOnlyDictionary`2<string, string> metadata, IDiagramGraph graph);
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Grouping.FileStructureGrouping : object {
    public sealed virtual IDiagramGroupNode GetParentNode(IDiagramGraphElement node, IDiagramGraph graph);
    public sealed virtual IDiagramGroupNode CreateGroupNode(ISolution solution, IReadOnlyDictionary`2<string, string> metadata, IDiagramGraph graph);
    private VirtualFileSystemPath GetNodeLocation(IDiagramGraphElement node, ISolution solution);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Grouping.FileStructureGroupingProvider : object {
    public sealed virtual bool IsApplicable(GroupingId id);
    public sealed virtual ICollection`1<IGraphGrouping> GetGroupings();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Grouping.GraphGroupingManager : object {
    private Lazy`1<IFeaturePartsContainer> myShellFeatureParts;
    public GraphGroupingManager(Lazy`1<IFeaturePartsContainer> shellFeatureParts);
    public void GroupGraph(IDiagramGraph graph, GroupingId id);
    private void BuildHierarchyMap(DiagramGraphBase graph);
    private ICollection`1<IDiagramGraphElement> GroupToplevelNodes(ICollection`1<IDiagramGraphElement> toplevelNodes, IGraphGrouping graphGrouping, IDiagramGraph graph, int level);
}
public interface JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Grouping.IGraphGrouping {
    public abstract virtual IDiagramGroupNode GetParentNode(IDiagramGraphElement node, IDiagramGraph graph);
    [NotNullAttribute]
public abstract virtual IDiagramGroupNode CreateGroupNode(ISolution solution, IReadOnlyDictionary`2<string, string> metadata, IDiagramGraph graph);
}
public interface JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Grouping.IGraphGroupingProvider {
    public abstract virtual bool IsApplicable(GroupingId id);
    public abstract virtual ICollection`1<IGraphGrouping> GetGroupings();
}
public interface JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Grouping.ISolutionHolderNode {
    public ISolution Solution { get; }
    public abstract virtual ISolution get_Solution();
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Grouping.SolutionFoldersGroupingProvider : object {
    public virtual bool IsApplicable(GroupingId id);
    public virtual ICollection`1<IGraphGrouping> GetGroupings();
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.GroupingId : ConvertableEnumPattern`1<GroupingId> {
    public static GroupingId None;
    private GroupingId(string name);
    private static GroupingId();
    [NotNullAttribute]
public static GroupingId GetOrCreate(string name);
}
public interface JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.IArchitectureGraphManager {
    [CanBeNullAttribute]
public abstract virtual IArchitecturePersistentGraph BuildFromSolution(ISolution solution);
    public abstract virtual IArcitectureViewGraph GetViewModel(IArchitecturePersistentGraph persistentGraph, GraphInputSettings userInputSettings);
}
public interface JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.IArchitecturePersistentGraph {
    [NotNullAttribute]
public GraphDiff DiffToCurrentSolution { get; }
    public bool IsBound { get; }
    public abstract virtual GraphDiff get_DiffToCurrentSolution();
    public abstract virtual void BindToCurrentSolution(ISolution solution);
    public abstract virtual bool get_IsBound();
}
public interface JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.IArcitectureViewGraph {
    public IArchitecturePersistentGraph PersistentOwner { get; }
    public bool ShowAdvanced { get; }
    public bool HasAnyPath { get; public set; }
    public abstract virtual IArchitecturePersistentGraph get_PersistentOwner();
    public abstract virtual bool get_ShowAdvanced();
    public abstract virtual bool get_HasAnyPath();
    public abstract virtual void set_HasAnyPath(bool value);
}
public interface JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.IProjectModelGraph {
    [CanBeNullAttribute]
public abstract virtual IProjectModelGraphElement TryGetGraphElement(IProjectElement element);
    [CanBeNullAttribute]
public abstract virtual IProjectModelGraphElement TryGetGraphElement(string persistentId);
}
public interface JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.IProjectModelGraphElement {
    public string SolutionIdentifier { get; }
    public bool IsBinded { get; }
    public ElementKind Kind { get; public set; }
    public abstract virtual string get_SolutionIdentifier();
    public abstract virtual bool get_IsBinded();
    public abstract virtual ElementKind get_Kind();
    public abstract virtual void set_Kind(ElementKind value);
    [CanBeNullAttribute]
public abstract virtual IProjectModelElement GetProjectModelElement(ISolution solution);
    public abstract virtual void Bind(IProjectModelElement projectModelElement);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Loading.ArchitectureGraphManager : object {
    private GraphGroupingManager myGraphGroupingManager;
    private IFeaturePartsContainer myFeaturePartsContainer;
    [NotNullAttribute]
private ISolution mySolution;
    public ArchitectureGraphManager(ISolution solution, GraphGroupingManager graphGroupingManager, IFeaturePartsContainer featurePartsContainer);
    public sealed virtual IArchitecturePersistentGraph BuildFromSolution(ISolution solution);
    protected virtual void BuildAllPossiblePathes(ArchitecturePersistentGraph fullSolutionGraph);
    public sealed virtual IArcitectureViewGraph GetViewModel(IArchitecturePersistentGraph persistentGraph, GraphInputSettings userInputSettings);
    protected virtual void CreateGroupNodes(GraphInputSettings userInputSettings, ArchitectureViewModelGraph viewGraph);
    protected virtual void FillViewModelGraph(IArchitecturePersistentGraph persistentGraph, GraphInputSettings userInputSettings, ArchitectureViewModelGraph viewGraph);
    private static void ProcessTransitiveEdge(IDiagramGraphEdge diagramGraphEdge);
    private static bool ShouldProcessEdge(IDiagramGraphEdge diagramGraphEdge);
    public void WriteToXml(VirtualFileSystemPath path, IArchitecturePersistentGraph persistentGraph);
}
[ShellComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Loading.GraphPersistence : object {
    private IFeaturePartsContainer myShellFeaturePartsContainer;
    private static string ROOT_TAG_NAME;
    public GraphPersistence(IFeaturePartsContainer shellFeaturePartsContainer);
    public sealed virtual void WriteToXml(VirtualFileSystemPath path, IArchitecturePersistentGraph persistentGraph);
    private void WriteElement(IProjectModelGraphElement persistentEdge, XmlDocument document, XmlElement root, IEnumerable`1<IArchitecturePersistenceProvider> providers);
    public sealed virtual IArchitecturePersistentGraph ReadGraphFromXml(XmlDocument document);
}
public interface JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Loading.IArchitectureGraphCustomizer {
    public abstract virtual void CustomizeGraph(IArchitecturePersistentGraph persistentGraph, GraphInputSettings graphInputSettings, ArchitectureViewModelGraph viewGraph);
}
public interface JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Loading.IGraphPersistence {
    public abstract virtual void WriteToXml(VirtualFileSystemPath path, IArchitecturePersistentGraph persistentGraph);
    public abstract virtual IArchitecturePersistentGraph ReadGraphFromXml(XmlDocument document);
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Persistence.AssemblyNodePersistenceProvider : object {
    public bool IsApplicable(IDiagramGraphElement graphElement);
    public XmlElement WriteToXml(IDiagramGraphElement graphElement, XmlDocument document);
}
public interface JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Persistence.IArchitecturePersistenceProvider {
    public abstract virtual bool IsApplicable(IDiagramGraphElement graphElement);
    public abstract virtual bool IsApplicable(XmlElement xmlElement);
    public abstract virtual XmlElement WriteToXml(IProjectModelGraphElement graphElement, XmlDocument document);
    public abstract virtual void ReadFromXml(XmlElement xmlElement, IArchitecturePersistentGraph graph);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Persistence.ModulePersistentProvider : object {
    private static string TagName;
    public virtual bool IsApplicable(IDiagramGraphElement graphElement);
    public virtual bool IsApplicable(XmlElement xmlElement);
    public virtual XmlElement WriteToXml(IProjectModelGraphElement graphElement, XmlDocument document);
    public virtual void ReadFromXml(XmlElement xmlElement, IArchitecturePersistentGraph graph);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Persistence.ReferencePersistenceProvider : object {
    private static string TagName;
    public virtual bool IsApplicable(IDiagramGraphElement graphElement);
    public virtual bool IsApplicable(XmlElement xmlElement);
    public virtual XmlElement WriteToXml(IProjectModelGraphElement graphElement, XmlDocument document);
    public virtual void ReadFromXml(XmlElement xmlElement, IArchitecturePersistentGraph graph);
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.ProjectReferencesCoupling : object {
    private IProject myOwner;
    private Dictionary`2<IProject, int> myReferencesWeight;
    public Dictionary`2<IProject, int> ReferencesWeight { get; }
    public IProject Owner { get; }
    public ProjectReferencesCoupling(IProject owner);
    public Dictionary`2<IProject, int> get_ReferencesWeight();
    public IProject get_Owner();
    public void Increment(IProject referencedProject);
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.ReferencesWeightConsumer : SearchResultsConsumer {
    private IProject myProject;
    private object myLockObj;
    [CompilerGeneratedAttribute]
private ProjectReferencesCoupling <CalculatedCoupling>k__BackingField;
    public ProjectReferencesCoupling CalculatedCoupling { get; }
    public ReferencesWeightConsumer(IProject project);
    [CompilerGeneratedAttribute]
public ProjectReferencesCoupling get_CalculatedCoupling();
    public virtual IOccurrence Build(FindResult result);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Utils.ArchitectureElementBuilder : object {
    public sealed virtual IArchitectureProjectNode CreateProjectNode(IProject project);
    public sealed virtual IArchitectureAssemblyNode CreateAssemblyNode(IAssembly assembly);
    public sealed virtual IArchitectureModuleToModuleReference CreateProjectRefrerenceNode(IProjectModelGraph graph, IProjectToProjectReference reference);
    public sealed virtual IArchitectureModuleToModuleReference CreateProjectOutputRefrerenceNode(IProjectModelGraph graph, IProjectToAssemblyReference reference, IProject projectWithOutput);
    public sealed virtual IDiagramGraphNode CreateSolutionFolderNode(IProject project);
}
[SettingsKeyAttribute("JetBrains.Application.UI.Utils.UserInterfaceSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ArchitectureViewSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Utils.DiagramSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "GroupBySettingDescription")]
public int GroupingIndex;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "AllowDragNdropSettingDescription")]
public bool AllowDragNDrop;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "CouplingCalculationIsTurnedOnSettingDescription")]
public bool CouplingCalculationTurnedOn;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Utils.ProjectModelGraphUtils : object {
    public static bool PathExists(IDiagramGraph graph, IDiagramGraphNode from, IDiagramGraphNode to);
    public static bool HasAnyPath(IArcitectureViewGraph graph);
    public static GraphDiff GetDiff(IArcitectureViewGraph oldView, IArcitectureViewGraph newView);
    public static ICollection`1<IDiagramGraphNode> GetPath(IDiagramGraphNode from, IDiagramGraphNode to, IDiagramGraph graph);
    [ExtensionAttribute]
public static bool ContainsReference(IProjectModelGraph graph, IProjectToProjectReference reference);
    public static ICollection`1<IProject> CollectProjects(List`1<IProjectModelElement> elements);
    public static void SolutionDfs(IProject project, IDiagramGraph graph, OutputAssemblies outputAssembliesService, Func`2<IProject, bool> moduleFunc, Action`2<IProjectToModuleReference, IProject> referenceAction);
    private static IProject GetTargetProject(IProjectToModuleReference reference, OutputAssemblies outputAssembliesService);
}
internal class JetBrains.ReSharper.Feature.Services.Diagrams.Architecture.Utils.UserProjectsCollector : RecursiveProjectVisitor {
    [CompilerGeneratedAttribute]
private ICollection`1<IProject> <SelectedProjects>k__BackingField;
    [NotNullAttribute]
public ICollection`1<IProject> SelectedProjects { get; protected set; }
    [CompilerGeneratedAttribute]
public ICollection`1<IProject> get_SelectedProjects();
    [CompilerGeneratedAttribute]
protected void set_SelectedProjects(ICollection`1<IProject> value);
    public virtual void VisitProject(IProject project);
}
public static class JetBrains.ReSharper.Feature.Services.Diagrams.EntityFramework.EntityRelationshipDiagramManager : object {
    public static EfEntityRelationshipGraph BuildGraph(EntityFrameworkModelConfigReader cache);
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.EntityFramework.Graph.EfEntityRelationshipGraph : DiagramGraphBase {
}
public enum JetBrains.ReSharper.Feature.Services.Diagrams.EntityFramework.Graph.EFEntityRelationType : Enum {
    public int value__;
    public static EFEntityRelationType OneToOne;
    public static EFEntityRelationType OneToMany;
}
public interface JetBrains.ReSharper.Feature.Services.Diagrams.EntityFramework.Graph.IEfEntityNode {
    [NotNullAttribute]
[ItemNotNullAttribute]
public IList`1<EntityFrameworkNodePropertyInfo> Properties { get; }
    [NotNullAttribute]
public IList`1<NavigationParameters> Navigations { get; }
    [CanBeNullAttribute]
public IPsiSourceFile File { get; }
    [NotNullAttribute]
public EntityFrameworkEntityId EntityId { get; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public IList`1<EntityFrameworkEntityId> InheritsFrom { get; }
    public abstract virtual IList`1<EntityFrameworkNodePropertyInfo> get_Properties();
    public abstract virtual IList`1<NavigationParameters> get_Navigations();
    public abstract virtual IPsiSourceFile get_File();
    public abstract virtual EntityFrameworkEntityId get_EntityId();
    public abstract virtual IList`1<EntityFrameworkEntityId> get_InheritsFrom();
}
public interface JetBrains.ReSharper.Feature.Services.Diagrams.EntityFramework.Graph.IEFEntityRelationEdge {
    public IEfEntityNode Source { get; }
    public IEfEntityNode Target { get; }
    public EFEntityRelationType Type { get; }
    public abstract virtual IEfEntityNode get_Source();
    public abstract virtual IEfEntityNode get_Target();
    public abstract virtual EFEntityRelationType get_Type();
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.EntityFramework.Graph.Impl.EFEntityRelationEdge : object {
    private IEfEntityNode mySource;
    private IEfEntityNode myTarget;
    private EFEntityRelationType myType;
    private string myName;
    public string Name { get; }
    public bool IsValid { get; public set; }
    public IEfEntityNode Target { get; }
    public EFEntityRelationType Type { get; }
    public IEfEntityNode Source { get; }
    private IDiagramGraphNode JetBrains.Application.UI.Diagramming.API.IDiagramGraphEdge.Source { get; }
    private IDiagramGraphNode JetBrains.Application.UI.Diagramming.API.IDiagramGraphEdge.Target { get; }
    public EFEntityRelationEdge(IEfEntityNode source, IEfEntityNode target, EFEntityRelationType type, string name);
    public sealed virtual string get_Name();
    public sealed virtual bool get_IsValid();
    public sealed virtual void set_IsValid(bool value);
    public sealed virtual IEfEntityNode get_Target();
    public sealed virtual EFEntityRelationType get_Type();
    public sealed virtual IEfEntityNode get_Source();
    private sealed virtual override IDiagramGraphNode JetBrains.Application.UI.Diagramming.API.IDiagramGraphEdge.get_Source();
    private sealed virtual override IDiagramGraphNode JetBrains.Application.UI.Diagramming.API.IDiagramGraphEdge.get_Target();
    public void Dump(TextWriter writer);
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.EntityFramework.Graph.Impl.EntityFrameworkEdgeInfo : EFEntityRelationEdge {
    [CompilerGeneratedAttribute]
private bool <IsOnDependencyCycle>k__BackingField;
    public bool IsOnDependencyCycle { get; public set; }
    public EntityFrameworkEdgeInfo(IEFEntityRelationEdge edge);
    public EntityFrameworkEdgeInfo(IEfEntityNode source, IEfEntityNode target, EFEntityRelationType type, string name);
    [CompilerGeneratedAttribute]
public bool get_IsOnDependencyCycle();
    [CompilerGeneratedAttribute]
public void set_IsOnDependencyCycle(bool value);
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.EntityFramework.Graph.Impl.EntityFrameworkNodeInfo : DiagramGraphNode {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<EntityFrameworkNodePropertyInfo> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<NavigationParameters> <Navigations>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiSourceFile <File>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityFrameworkEntityId <EntityId>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<EntityFrameworkEntityId> <InheritsFrom>k__BackingField;
    public string Name { get; }
    public IList`1<EntityFrameworkNodePropertyInfo> Properties { get; }
    public IList`1<NavigationParameters> Navigations { get; }
    public IPsiSourceFile File { get; private set; }
    public EntityFrameworkEntityId EntityId { get; }
    public IList`1<EntityFrameworkEntityId> InheritsFrom { get; }
    public EntityFrameworkNodeInfo(EntityFrameworkEntityConfigReader entity, IPsiSourceFile file);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<EntityFrameworkNodePropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<NavigationParameters> get_Navigations();
    [CompilerGeneratedAttribute]
public sealed virtual IPsiSourceFile get_File();
    [CompilerGeneratedAttribute]
private void set_File(IPsiSourceFile value);
    [CompilerGeneratedAttribute]
public sealed virtual EntityFrameworkEntityId get_EntityId();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<EntityFrameworkEntityId> get_InheritsFrom();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0();
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.EntityFramework.Graph.Impl.EntityFrameworkNodePropertyInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ModelValidationIsApplicable>k__BackingField;
    [CompilerGeneratedAttribute]
private IEfSerializedType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasUnlimitedStringLength>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOnDependencyCycle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUninitializedNavigation>k__BackingField;
    public string Name { get; }
    public bool ModelValidationIsApplicable { get; }
    [NotNullAttribute]
public IEfSerializedType Type { get; }
    public bool HasUnlimitedStringLength { get; }
    public bool IsOnDependencyCycle { get; public set; }
    public bool IsUninitializedNavigation { get; public set; }
    public EntityFrameworkNodePropertyInfo(EntityFrameworkPropertyConfigReader property, bool modelValidationIsApplicable);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_ModelValidationIsApplicable();
    [CompilerGeneratedAttribute]
public IEfSerializedType get_Type();
    [CompilerGeneratedAttribute]
public bool get_HasUnlimitedStringLength();
    [CompilerGeneratedAttribute]
public bool get_IsOnDependencyCycle();
    [CompilerGeneratedAttribute]
public void set_IsOnDependencyCycle(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsUninitializedNavigation();
    [CompilerGeneratedAttribute]
public void set_IsUninitializedNavigation(bool value);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Diagrams.GraphSynchronizer : object {
    private ISolution mySolution;
    private IList`1<IBindableGraphDescriptor> mySubscribers;
    public GraphSynchronizer(Lifetime lifetime, ChangeManager changeManager, ISolution solution);
    public sealed virtual object Execute(IChangeMap changeMap);
    public void Subscribe(IBindableGraphDescriptor descriptor);
    public void UnSubscribe(IBindableGraphDescriptor descriptor);
    [CompilerGeneratedAttribute]
private void <Execute>b__3_0(ProjectModelChange modelChange);
    [CompilerGeneratedAttribute]
private void <Execute>b__3_1(ProjectItemChange itemChange);
}
public interface JetBrains.ReSharper.Feature.Services.Diagrams.IBindableGraphDescriptor {
    public abstract virtual void RebindToSolution(ISolution solution);
    public abstract virtual void AddProjectToRescan(IProject project);
    public abstract virtual void RemoveProjectToRescan(IProject project);
}
public interface JetBrains.ReSharper.Feature.Services.Diagrams.TypeDependencies.IServicesGraphViewer {
    public abstract virtual void ShowDiagramInToolwindow(string name, IDiagramGraph graph, Lifetime lifetime);
}
public interface JetBrains.ReSharper.Feature.Services.Diagrams.TypeDependencies.ITypeRelationsViewer {
    public abstract virtual Task`1<IDiagramDescriptor> ShowTypesDependencies(ICollection`1<ITypeElement> typeElements, TypeDependenciesOptions ions);
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDependencies.ServicesGraphViewerDefault : object {
    public virtual void ShowDiagramInToolwindow(string name, IDiagramGraph graph, Lifetime lifetime);
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDependencies.TypeDependenciesOptions : object {
    [CompilerGeneratedAttribute]
private ICollection`1<TypeElementDependencyType> <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<IDiagramGroupNode, IDiagramGraph, bool> <ShouldCollapseFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldLayout>k__BackingField;
    [CanBeNullAttribute]
public ICollection`1<TypeElementDependencyType> Filter { get; }
    [CanBeNullAttribute]
public Func`3<IDiagramGroupNode, IDiagramGraph, bool> ShouldCollapseFunc { get; }
    public bool ShouldLayout { get; }
    public TypeDependenciesOptions(ICollection`1<TypeElementDependencyType> filter, Func`3<IDiagramGroupNode, IDiagramGraph, bool> shouldCollapseFunc, bool shouldLayout);
    [CompilerGeneratedAttribute]
public ICollection`1<TypeElementDependencyType> get_Filter();
    [CompilerGeneratedAttribute]
public Func`3<IDiagramGroupNode, IDiagramGraph, bool> get_ShouldCollapseFunc();
    [CompilerGeneratedAttribute]
public bool get_ShouldLayout();
    public static bool CollapseBigFoldersFunc(IDiagramGroupNode diagramGroupNode, IDiagramGraph graph);
    public static bool CollapseBigFoldersFunc(IDiagramGroupNode diagramGroupNode, IDiagramGraph graph, Func`2<IDiagramGroupNode, bool> dontCollapse);
    private static bool ShouldCollapseRaw(IDiagramGroupNode diagramGroupNode);
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDependencies.TypeElementDependencyType : ConvertableEnumPattern`1<TypeElementDependencyType> {
    public static TypeElementDependencyType Aggregation;
    public static TypeElementDependencyType Usages;
    public static TypeElementDependencyType ReturnType;
    public static TypeElementDependencyType EventSubscription;
    public static TypeElementDependencyType Inheritance;
    public static TypeElementDependencyType Injection;
    private TypeElementDependencyType(string name);
    private static TypeElementDependencyType();
    public static TypeElementDependencyType GetOrCreate(string name);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.DeclaredElementNodesFactory : object {
    private ISolution mySolution;
    private InversionOfControlService myIocService;
    public DeclaredElementNodesFactory(ISolution solution, InversionOfControlService iocService);
    public TypesRelationEdge CreateImmediateInheritanceEdge(ITypeElementNode inheritorsNode, ITypeElementNode baseNode);
    [CanBeNullAttribute]
public TypesRelationEdge CreateTypesRelationEdge(ITypeElementNode source, ITypeElementNode target, TypeElementsDependency dependency);
    public ITypeElementNode CreateAndAddNode(ITypeElement currentElement, IDiagramGraph typesDependenciesGraph, IPsiSourceFile singleOrDefaultSourceFile);
    protected virtual TypeElementNodeType GetTypeElementNodeType(ITypeElement currentElement);
    protected virtual bool IsLogicOwnerByNameConvention(ITypeElement currentElement);
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.Graph.AssemblyGroupNode : object {
    private IAssembly myAssembly;
    private JetHashSet`1<IDiagramGraphElement> myNestedElements;
    private int myLevel;
    public string Name { get; }
    public bool IsValid { get; public set; }
    public ICollection`1<IDiagramGraphEdge> Outgoing { get; }
    public ICollection`1<IDiagramGraphEdge> Incoming { get; }
    public ICollection`1<IDiagramGraphElement> NestedElements { get; }
    public int Level { get; public set; }
    public IAssembly Assembly { get; }
    public AssemblyGroupNode(IAssembly assembly);
    public sealed virtual string get_Name();
    public sealed virtual bool get_IsValid();
    public sealed virtual void set_IsValid(bool value);
    public sealed virtual ICollection`1<IDiagramGraphEdge> get_Outgoing();
    public sealed virtual ICollection`1<IDiagramGraphEdge> get_Incoming();
    public sealed virtual ICollection`1<IDiagramGraphElement> get_NestedElements();
    public sealed virtual int get_Level();
    public sealed virtual void set_Level(int value);
    public sealed virtual void ProvideMetadata(IDictionary`2<string, string> metadata);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.Graph.AssemblyGroupNode/<GetInvalidGroupElements>d__19")]
public sealed virtual IEnumerable`1<IDiagramGraphElement> GetInvalidGroupElements(IDiagramGraph graph);
    public IAssembly get_Assembly();
    protected bool Equals(AssemblyGroupNode other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.Graph.IComponentNode {
    public IoCType ComponentType { get; }
    public IComponentDescription Description { get; }
    public abstract virtual IoCType get_ComponentType();
    public abstract virtual IComponentDescription get_Description();
}
public interface JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.Graph.IDeclaredElementNode {
    public string SerializationId { get; }
    public IClrDeclaredElement DeclaredElement { get; }
    public abstract virtual string get_SerializationId();
    public abstract virtual IClrDeclaredElement get_DeclaredElement();
    public abstract virtual bool IsPsiValid();
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.Graph.Impl.ComponentNode : TypeElementNode {
    private IComponentDescription myDescription;
    private IoCType myComponentType;
    public IoCType ComponentType { get; }
    public IComponentDescription Description { get; }
    public TypeElementNodeType NodeType { get; }
    public ComponentNode(ITypeElement typeElement, IComponentDescription description);
    public sealed virtual IoCType get_ComponentType();
    public sealed virtual IComponentDescription get_Description();
    public virtual TypeElementNodeType get_NodeType();
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.Graph.Impl.DeclaredElementDiagramNode : DiagramGraphNode {
    private string myName;
    private IModule myModule;
    private DeclaredElementEnvoy`1<IClrDeclaredElement> myDeclaredElementEnvoy;
    private ISolution mySolution;
    private int myCachedHashCode;
    private IShellLocks myShellLocks;
    [CompilerGeneratedAttribute]
private string <SerializationId>k__BackingField;
    public string Name { get; }
    public string SerializationId { get; }
    [CanBeNullAttribute]
public IClrDeclaredElement DeclaredElement { get; }
    public IModule ContainingModule { get; }
    public ISolution Solution { get; }
    public DeclaredElementDiagramNode(IClrDeclaredElement declaredElement);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual string get_SerializationId();
    public sealed virtual IClrDeclaredElement get_DeclaredElement();
    public sealed virtual bool IsPsiValid();
    public IModule get_ContainingModule();
    protected bool Equals(DeclaredElementDiagramNode other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual ISolution get_Solution();
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.Graph.Impl.DeclaredElementNodeType : EnumPattern {
    public static DeclaredElementNodeType AbstractClass;
    public static DeclaredElementNodeType Class;
    public static DeclaredElementNodeType SealedClass;
    public static DeclaredElementNodeType Interface;
    public static DeclaredElementNodeType StaticClass;
    public DeclaredElementNodeType(string name);
    private static DeclaredElementNodeType();
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.Graph.Impl.InvalidTypeElementNode : DiagramGraphNode {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SerializationId>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeElementNodeType <NodeType>k__BackingField;
    public string Name { get; }
    public string SerializationId { get; }
    public IClrDeclaredElement DeclaredElement { get; }
    public ITypeElement TypeElement { get; }
    public TypeElementNodeType NodeType { get; public set; }
    public InvalidTypeElementNode(string name, string typeElementId, TypeElementNodeType nodeType);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual string get_SerializationId();
    public sealed virtual IClrDeclaredElement get_DeclaredElement();
    public sealed virtual ITypeElement get_TypeElement();
    [CompilerGeneratedAttribute]
public sealed virtual TypeElementNodeType get_NodeType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NodeType(TypeElementNodeType value);
    public sealed virtual bool IsPsiValid();
    public sealed virtual IPsiSourceFile GetPsiSourceFile();
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.Graph.Impl.InvalidTypesRelationEdge : object {
    [CompilerGeneratedAttribute]
private ITypeElementNode <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeElementDependencyType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeElementNode <Source>k__BackingField;
    public string Name { get; }
    public bool IsValid { get; public set; }
    private IDiagramGraphNode JetBrains.Application.UI.Diagramming.API.IDiagramGraphEdge.Source { get; }
    public ITypeElementNode Target { get; }
    public TypeElementDependencyType Type { get; }
    public TypeElementsDependency Dependency { get; }
    public ITypeElementNode Source { get; }
    private IDiagramGraphNode JetBrains.Application.UI.Diagramming.API.IDiagramGraphEdge.Target { get; }
    public InvalidTypesRelationEdge(TypeElementDependencyType type, ITypeElementNode source, ITypeElementNode target);
    public sealed virtual string get_Name();
    public sealed virtual bool get_IsValid();
    public sealed virtual void set_IsValid(bool value);
    private sealed virtual override IDiagramGraphNode JetBrains.Application.UI.Diagramming.API.IDiagramGraphEdge.get_Source();
    [CompilerGeneratedAttribute]
public sealed virtual ITypeElementNode get_Target();
    [CompilerGeneratedAttribute]
public sealed virtual TypeElementDependencyType get_Type();
    public sealed virtual TypeElementsDependency get_Dependency();
    [CompilerGeneratedAttribute]
public sealed virtual ITypeElementNode get_Source();
    private sealed virtual override IDiagramGraphNode JetBrains.Application.UI.Diagramming.API.IDiagramGraphEdge.get_Target();
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.Graph.Impl.TypeElementNode : DeclaredElementDiagramNode {
    private TypeElementNodeType myNodeType;
    private IPsiSourceFile myCachedSourceFile;
    public ITypeElement TypeElement { get; }
    public TypeElementNodeType NodeType { get; public set; }
    public TypeElementNode(ITypeElement typeElement, IPsiSourceFile psiSourceFile);
    public sealed virtual ITypeElement get_TypeElement();
    public virtual TypeElementNodeType get_NodeType();
    public virtual void set_NodeType(TypeElementNodeType value);
    [CanBeNullAttribute]
public sealed virtual IPsiSourceFile GetPsiSourceFile();
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.Graph.Impl.TypeMemberNode : DeclaredElementDiagramNode {
    public ITypeMember TypeMember { get; }
    public TypeMemberNode(ITypeMember typeMember);
    public sealed virtual ITypeMember get_TypeMember();
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.Graph.Impl.TypesRelationEdge : object {
    private ElementKind myKind;
    private ITypeElementNode mySource;
    private ITypeElementNode myTarget;
    private TypeElementDependencyType myType;
    private TypeElementsDependency myDependency;
    public string Name { get; }
    public bool IsValid { get; public set; }
    public ElementKind Kind { get; public set; }
    private IDiagramGraphNode JetBrains.Application.UI.Diagramming.API.IDiagramGraphEdge.Source { get; }
    public ITypeElementNode Target { get; }
    public ITypeElementNode Source { get; }
    private IDiagramGraphNode JetBrains.Application.UI.Diagramming.API.IDiagramGraphEdge.Target { get; }
    public TypeElementDependencyType Type { get; }
    public TypeElementsDependency Dependency { get; }
    [ObsoleteAttribute("Don't use directly")]
internal TypesRelationEdge(ITypeElementNode source, ITypeElementNode target, TypeElementsDependency dependency);
    [ObsoleteAttribute("Don't use directly")]
internal TypesRelationEdge(ITypeElementNode source, ITypeElementNode target, TypeElementDependencyType type);
    public sealed virtual string get_Name();
    public sealed virtual bool get_IsValid();
    public sealed virtual void set_IsValid(bool value);
    public ElementKind get_Kind();
    public void set_Kind(ElementKind value);
    private sealed virtual override IDiagramGraphNode JetBrains.Application.UI.Diagramming.API.IDiagramGraphEdge.get_Source();
    public sealed virtual ITypeElementNode get_Target();
    public sealed virtual ITypeElementNode get_Source();
    private sealed virtual override IDiagramGraphNode JetBrains.Application.UI.Diagramming.API.IDiagramGraphEdge.get_Target();
    public sealed virtual TypeElementDependencyType get_Type();
    public sealed virtual TypeElementsDependency get_Dependency();
    protected bool Equals(TypesRelationEdge other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.Graph.ITypeElementNode {
    [CanBeNullAttribute]
public ITypeElement TypeElement { get; }
    public TypeElementNodeType NodeType { get; public set; }
    public abstract virtual ITypeElement get_TypeElement();
    public abstract virtual TypeElementNodeType get_NodeType();
    public abstract virtual void set_NodeType(TypeElementNodeType value);
    [CanBeNullAttribute]
public abstract virtual IPsiSourceFile GetPsiSourceFile();
}
public interface JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.Graph.ITypeMemberNode {
    public ITypeMember TypeMember { get; }
    public abstract virtual ITypeMember get_TypeMember();
}
public interface JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.Graph.ITypesRelationEdge {
    [NotNullAttribute]
public ITypeElementNode Source { get; }
    [NotNullAttribute]
public ITypeElementNode Target { get; }
    public TypeElementDependencyType Type { get; }
    [CanBeNullAttribute]
public TypeElementsDependency Dependency { get; }
    public abstract virtual ITypeElementNode get_Source();
    public abstract virtual ITypeElementNode get_Target();
    public abstract virtual TypeElementDependencyType get_Type();
    public abstract virtual TypeElementsDependency get_Dependency();
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.Graph.ProjectFolderGroupNode : object {
    private IProjectFolder myProjectFolder;
    private IDiagramGraph myGraph;
    private JetHashSet`1<IDiagramGraphElement> myNestedElements;
    private int myLevel;
    private string myCachedName;
    public string Name { get; }
    public bool IsValid { get; public set; }
    public ICollection`1<IDiagramGraphEdge> Outgoing { get; }
    public ICollection`1<IDiagramGraphEdge> Incoming { get; }
    public ICollection`1<IDiagramGraphElement> NestedElements { get; }
    public int Level { get; public set; }
    public IProjectFolder ProjectFolder { get; }
    public ProjectFolderGroupNode(IProjectFolder projectFolder, IDiagramGraph graph);
    public sealed virtual string get_Name();
    private string GetName();
    public sealed virtual bool get_IsValid();
    public sealed virtual void set_IsValid(bool value);
    public sealed virtual ICollection`1<IDiagramGraphEdge> get_Outgoing();
    public sealed virtual ICollection`1<IDiagramGraphEdge> get_Incoming();
    public sealed virtual ICollection`1<IDiagramGraphElement> get_NestedElements();
    public sealed virtual int get_Level();
    public sealed virtual void set_Level(int value);
    public sealed virtual void ProvideMetadata(IDictionary`2<string, string> metadata);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.Graph.ProjectFolderGroupNode/<GetInvalidGroupElements>d__22")]
public sealed virtual IEnumerable`1<IDiagramGraphElement> GetInvalidGroupElements(IDiagramGraph graph);
    public IProjectFolder get_ProjectFolder();
    protected bool Equals(ProjectFolderGroupNode other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.Graph.TypeInheritanceGraph : DiagramGraphBase {
    private IDeclaredElementNode myCurrentTarget;
    public IDeclaredElementNode CurrentTarget { get; public set; }
    public IDeclaredElementNode get_CurrentTarget();
    public void set_CurrentTarget(IDeclaredElementNode value);
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.Graph.TypesDependenciesGraph : DiagramGraphBase {
    private TypeElementsDependenciesStore myStore;
    private Dictionary`2<ITypeElement, ITypeElementNode> myTypeBindingMap;
    private Dictionary`2<string, ITypeElementNode> myIdBindingMap;
    private HashSet`1<IDiagramGroupNode> myProjectStructureGroupNodes;
    private HashSet`1<IDiagramGroupNode> myNamespaceGroupNodes;
    [CompilerGeneratedAttribute]
private int <MaxLevel>k__BackingField;
    public TypeElementsDependenciesStore Store { get; }
    public int MaxLevel { get; public set; }
    public IEnumerable`1<IDiagramGroupNode> GroupNodes { get; }
    public TypesDependenciesGraph(TypeElementsDependenciesStore store);
    public TypeElementsDependenciesStore get_Store();
    [CompilerGeneratedAttribute]
public int get_MaxLevel();
    [CompilerGeneratedAttribute]
public void set_MaxLevel(int value);
    public virtual IEnumerable`1<IDiagramGroupNode> get_GroupNodes();
    [CanBeNullAttribute]
public ITypeElementNode GetTypeElementNode(ITypeElement targetTypeElement);
    [CanBeNullAttribute]
public ITypeElementNode GetTypeElementNode(string id);
    public virtual void AddNode(IDiagramGraphNode node);
    public virtual bool RemoveNode(IDiagramGraphNode node);
    public IDiagramGraph Clone();
    public void CleanInvalid();
}
public static class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.GroupingConstants : object {
    public static string NodeTypeMetadataKey;
    public static string ProjectFolderNodeTypeValue;
    public static string AssemblyNodeTypeValue;
    public static string ProjectFolderNameMetadataKey;
    public static string ProjectFolderPersistentIdMetadataKey;
    public static string FullAssemblyNameMetadataKey;
    public static string ProjectPersistentIdMetadataKey;
    public static string TargetFrameworkIdMetadataKey;
    public static string LevelMetadataKey;
    public static string FqnMetadataKey;
}
public static class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.GroupingHelper : object {
    public static IProjectModelElement GetNodeLocation(IDiagramGraphElement node);
    public static IProjectFolder GetNonIntermediateParent(IProjectItem projectItem, ICollection`1<IProjectFolder> projectFoldersWithTypeElements);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.GroupingHelper/<GetProjectFoldersWithTypeElements>d__2")]
public static IEnumerable`1<IProjectFolder> GetProjectFoldersWithTypeElements(IDiagramGraph graph);
    [CanBeNullAttribute]
public static INamespace GetNodeContainingNamespace(IDiagramGraphElement node);
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.InvalidGroupNode : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IDiagramGraphElement> <NestedElements>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Metadata>k__BackingField;
    public string Name { get; }
    public bool IsValid { get; public set; }
    public ICollection`1<IDiagramGraphEdge> Outgoing { get; }
    public ICollection`1<IDiagramGraphEdge> Incoming { get; }
    public ICollection`1<IDiagramGraphElement> NestedElements { get; }
    public int Level { get; public set; }
    public IReadOnlyDictionary`2<string, string> Metadata { get; }
    public InvalidGroupNode(IReadOnlyDictionary`2<string, string> metadata);
    public InvalidGroupNode(string name, IReadOnlyDictionary`2<string, string> metadata);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual bool get_IsValid();
    public sealed virtual void set_IsValid(bool value);
    public sealed virtual ICollection`1<IDiagramGraphEdge> get_Outgoing();
    public sealed virtual ICollection`1<IDiagramGraphEdge> get_Incoming();
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<IDiagramGraphElement> get_NestedElements();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Level();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Level(int value);
    public sealed virtual void ProvideMetadata(IDictionary`2<string, string> metadata);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.InvalidGroupNode/<GetInvalidGroupElements>d__18")]
public sealed virtual IEnumerable`1<IDiagramGraphElement> GetInvalidGroupElements(IDiagramGraph graph);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_Metadata();
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.NamespaceGroupingProvider : object {
    public sealed virtual bool IsApplicable(GroupingId id);
    public sealed virtual ICollection`1<IGraphGrouping> GetGroupings();
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.NamespaceGroupNode : object {
    private INamespace myNamespace;
    private IDiagramGraph myGraph;
    private JetHashSet`1<IDiagramGraphElement> myNestedElements;
    private int myLevel;
    private string myCachedName;
    public string Name { get; }
    public bool IsValid { get; public set; }
    public ICollection`1<IDiagramGraphEdge> Outgoing { get; }
    public ICollection`1<IDiagramGraphEdge> Incoming { get; }
    public ICollection`1<IDiagramGraphElement> NestedElements { get; }
    public int Level { get; public set; }
    public INamespace Namespace { get; }
    public NamespaceGroupNode(INamespace ns, IDiagramGraph graph);
    public sealed virtual string get_Name();
    private string GetName();
    public sealed virtual bool get_IsValid();
    public sealed virtual void set_IsValid(bool value);
    public sealed virtual ICollection`1<IDiagramGraphEdge> get_Outgoing();
    public sealed virtual ICollection`1<IDiagramGraphEdge> get_Incoming();
    public sealed virtual ICollection`1<IDiagramGraphElement> get_NestedElements();
    public sealed virtual int get_Level();
    public sealed virtual void set_Level(int value);
    public sealed virtual void ProvideMetadata(IDictionary`2<string, string> metadata);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.NamespaceGroupNode/<GetInvalidGroupElements>d__22")]
public sealed virtual IEnumerable`1<IDiagramGraphElement> GetInvalidGroupElements(IDiagramGraph graph);
    public INamespace get_Namespace();
    protected bool Equals(NamespaceGroupNode other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.NoneGroupingProvider : object {
    public sealed virtual bool IsApplicable(GroupingId id);
    public sealed virtual ICollection`1<IGraphGrouping> GetGroupings();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.PopupDataProvider : object {
    public List`1<IDeclaredElement> GetBaseTypes(IDeclaredElement declaredElement, int level, Func`3<IDeclaredElement, int, bool> isApply);
    public IEnumerable`1<ITypeElement> GetImmediateInheritors(ITypeElement typeElement);
    public IEnumerable`1<ITypeElement> GetConstructorInjections(ITypeElement typeElement, TypeElementsDependenciesStore store);
    public IEnumerable`1<UsagesDependency> GetReferences(ITypeElement typeElement, TypeElementsDependenciesStore store);
    public IEnumerable`1<ITypeElement> GetUsages(IDeclaredElement declaredElement);
    [NotNullAttribute]
public static RichText GetDeclaredElementRichText(IClrDeclaredElement declaredElement);
    public static List`1<ITypeElement> FilterElements(IEnumerable`1<ITypeElement> newTypeElements);
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.ProjectStructureGrouping : object {
    private JetHashSet`1<IProjectFolder> myProjectFoldersWithTypeElements;
    public sealed virtual IDiagramGroupNode GetParentNode(IDiagramGraphElement node, IDiagramGraph graph);
    public sealed virtual IDiagramGroupNode CreateGroupNode(ISolution solution, IReadOnlyDictionary`2<string, string> metadata, IDiagramGraph graph);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.ProjectStructureGroupingProvider : object {
    public sealed virtual bool IsApplicable(GroupingId id);
    public sealed virtual ICollection`1<IGraphGrouping> GetGroupings();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.TypeDependenciesDiagramManager : object {
    private TypeDependenciesSearcher myEngine;
    private DeclaredElementNodesFactory myNodesFactory;
    public TypeDependenciesDiagramManager(DeclaredElementNodesFactory nodesFactory, TypeDependenciesSearcher engine);
    public List`1<ITypeElement> AddExternalModuleDependencies(List`1<ITypeElementNode> targets, TypesDependenciesGraph graph, ICollection`1<IModule> externalModules);
    public TypesDependenciesGraph BuildTypesDiagramGraph(ICollection`1<ITypeElement> targets, IProgressIndicator indicator);
    public virtual void UpdateGraph(TypeElementsDependenciesStore updatedStore, TypesDependenciesGraph graph, ICollection`1<ITypeElement> displayedElements, ICollection`1<ITypeElementNode> invalidElements);
    public static bool ShouldProcessEdge(IDiagramGraphEdge diagramGraphEdge);
    private static bool DoesEdgeHasSpecificDependency(IDiagramGraphEdge graphEdge, TypeElementsDependency typeElementsDependency);
    private TypesDependenciesGraph BuildGraph(TypeElementsDependenciesStore store);
    public TypesDependenciesGraph BuildDependencyDiagram(ICollection`1<ITypeElement> sourceTypeElements, ICollection`1<IModule> externalModules, IProgressIndicator indicator);
}
public static class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.TypeDependencyDiagramUtils : object {
    public static GraphDiff GetDiff(TypesDependenciesGraph oldView, TypesDependenciesGraph newView);
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.TypeElementNodeType : Enum {
    public int value__;
    public static TypeElementNodeType Unknown;
    public static TypeElementNodeType Instance;
    public static TypeElementNodeType Interface;
    public static TypeElementNodeType Abstract;
    public static TypeElementNodeType Util;
    public static TypeElementNodeType LogicOwner;
    public static TypeElementNodeType Struct;
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeDiagrams.TypeInheritanceDiagramManager : object {
    private ISolution mySolution;
    private DeclaredElementNodesFactory myNodesFactory;
    private IFinder myFinder;
    private IPsiServices myPsiServices;
    public TypeInheritanceDiagramManager(ISolution solution, DeclaredElementNodesFactory nodesFactory);
    public static TypeInheritanceDiagramManager GetInstance(ISolution solution);
    public TypeInheritanceGraph BuildTypeInheritanceGraph(ITypeElement typeElement);
    private void MoveDown(TypeInheritanceGraph graph, ITypeElement typeElement, ITypeElementNode targetNode);
    private void ProcessInheritors(TypeInheritanceGraph graph, ITypeElementNode currentNode, ITypeElement typeElement, Dictionary`2<ITypeElement, ITypeElementNode> cachedInheritors);
    private void MoveUp(TypeInheritanceGraph graph, ITypeElement typeElement, ITypeElementNode targetNode);
    private void ProcessBaseTypes(TypeInheritanceGraph graph, ITypeElementNode currentNode, ITypeElement typeElement, Dictionary`2<ITypeElement, ITypeElementNode> dictionay);
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeElementsCollector : RecursiveProjectVisitor {
    private JetHashSet`1<ITypeElement> myExistingElements;
    private int myMaxElements;
    [CompilerGeneratedAttribute]
private JetHashSet`1<ITypeElement> <TypeElements>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ToAddCount>k__BackingField;
    public JetHashSet`1<ITypeElement> TypeElements { get; }
    public int ToAddCount { get; private set; }
    public TypeElementsCollector(JetHashSet`1<ITypeElement> existingElements, int maxElements);
    [CompilerGeneratedAttribute]
public JetHashSet`1<ITypeElement> get_TypeElements();
    [CompilerGeneratedAttribute]
public int get_ToAddCount();
    [CompilerGeneratedAttribute]
private void set_ToAddCount(int value);
    public virtual void VisitSolution(ISolution solution);
    public virtual void VisitProject(IProject project);
    public virtual void VisitProjectFolder(IProjectFolder projectFolder);
    public virtual void VisitProjectFile(IProjectFile projectFile);
    private bool ProcessTreeNode(ITreeNode node);
    private static bool ShouldFilterOut(ITypeElement typeElement);
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeElementsDependencies.AggregationDependency : TypeElementsDependency {
    private IList`1<DeclaredElementOccurrence> myFields;
    public IList`1<DeclaredElementOccurrence> Fields { get; }
    public AggregationDependency(TypeElementsDependenciesStore store, ITypeElement sourceTypeElement, ITypeElement targetTypeElement, IClrDeclaredElement sourceDeclaredElement);
    public IList`1<DeclaredElementOccurrence> get_Fields();
    protected bool Equals(AggregationDependency other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeElementsDependencies.AttributeUsageDependency : UsagesDependency {
    public AttributeUsageDependency(TypeElementsDependenciesStore store, ITypeElement sourceTypeElement, ITypeElement targetTypeElement);
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeElementsDependencies.InheritanceTypeDependency : TypeElementsDependency {
    private bool myIsImmediate;
    public bool IsImmediate { get; }
    public InheritanceTypeDependency(TypeElementsDependenciesStore store, ITypeElement sourceTypeElement, ITypeElement targetTypeElement, bool isImmediate);
    public bool get_IsImmediate();
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeElementsDependencies.ReturnTypeDependency : TypeElementsDependency {
    private IList`1<ITypeMember> myTypeMembers;
    public IList`1<ITypeMember> TypeMembers { get; }
    public ReturnTypeDependency(TypeElementsDependenciesStore store, ITypeElement sourceTypeElement, ITypeElement targetTypeElement);
    public IList`1<ITypeMember> get_TypeMembers();
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeElementsDependencies.TypeDependencies : object {
    private ITypeElement myOwner;
    private OneToSetMap`2<ITypeElement, TypeElementsDependency> myTargetsToDependenciesMap;
    public ITypeElement Owner { get; }
    [NotNullAttribute]
public OneToSetMap`2<ITypeElement, TypeElementsDependency> TargetsToDependenciesMap { get; }
    public TypeDependencies(ITypeElement owner);
    public ITypeElement get_Owner();
    public OneToSetMap`2<ITypeElement, TypeElementsDependency> get_TargetsToDependenciesMap();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeElementsDependencies.TypeDependenciesSearcher : object {
    private ISolution mySolution;
    private IShellLocks myLocks;
    private static object ourLockObj;
    public TypeDependenciesSearcher(ISolution solution, IShellLocks locks, InversionOfControlService iocService);
    private static TypeDependenciesSearcher();
    public void Execute(TypeElementsDependenciesStore store, ICollection`1<ITypeElement> targets, IProgressIndicator progressIndicator);
    private void ProcessSingleTypeElement(ITypeElement target, TypeElementsDependenciesStore store);
    private void ProcessAttributes(IAttributesOwner attributesOwner, TypeElementsDependenciesStore store, ITypeElement ownerTypeElement);
    private void ProcessAttributeParameter(AttributeValue attributeValue, TypeElementsDependenciesStore store, ITypeElement ownerTypeElement);
    private void ProcessExtendsList(ITypeElement sourceTypeElement, TypeElementsDependenciesStore store);
    private void ProcessSingleTypeMember(ITypeMember targetTypeMember, ITypeElement ownerTypeElement, TypeElementsDependenciesStore store, HashSet`1<IClrDeclaredElement> allCtorParameters);
    private void ProcessEvent(IEvent event, ITypeElement ownerTypeElement, TypeElementsDependenciesStore store);
    private void ProcessField(ITypeMember field, ITypeElement ownerTypeElement, TypeElementsDependenciesStore store);
    [CanBeNullAttribute]
private static ITypeElement GetReturnTypeElement(IType fieldType);
    private void ProcessMethodOrProperty(ITypeMember targetTypeMember, ITypeElement ownerTypeElement, TypeElementsDependenciesStore store, HashSet`1<IClrDeclaredElement> parameters);
    private void ProcessTypeMemberBodyAndAttrs(IDeclaration declaration, ITypeElement ownerTypeElement, TypeElementsDependenciesStore store, IClrDeclaredElement member);
    private void ProcessCtor(IDeclaration declaration, ITypeElement ownerTypeElement, TypeElementsDependenciesStore store, IConstructor ctor, HashSet`1<IClrDeclaredElement> allCtorParameters);
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeElementsDependencies.TypeElementsDependenciesStore : object {
    private JetHashSet`1<ITypeElement> myDisplayTypeElements;
    private Dictionary`2<ITypeElement, TypeDependencies> myTypeElementsStore;
    private static object ourLockObj;
    public JetHashSet`1<ITypeElement> DisplayTypeElements { get; internal set; }
    public TypeElementsDependenciesStore(IEnumerable`1<ITypeElement> targets);
    private static TypeElementsDependenciesStore();
    public JetHashSet`1<ITypeElement> get_DisplayTypeElements();
    internal void set_DisplayTypeElements(JetHashSet`1<ITypeElement> value);
    public void AddDependency(ITypeElement sourceTypeElement, TypeElementsDependency dependency);
    [CanBeNullAttribute]
public TypeDependencies GetTypeDependencies(ITypeElement typeElement);
    public void AddUsage(ITypeElement ownerTypeElement, ITypeElement targetTypeElement, IOccurrence occurrence, bool isAttributeDependency);
    public void AddAggregation(ITypeElement ownerTypeElement, ITypeElement targetTypeElement, DeclaredElementOccurrence occurrence, ITypeMember field);
    public void AddReturnType(ITypeElement ownerTypeElement, ITypeElement returnTypeElement, ITypeMember containingTypeMember);
    public void RemoveTypeDependencies(ITypeElement target);
    public IEnumerable`1<ITypeElement> GetTargets(ITypeElement typeElement);
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeElementsDependencies.TypeElementsDependency : object {
    private TypeElementsDependenciesStore myStore;
    protected ITypeElement mySourceTypeElement;
    protected ITypeElement myTargetTypeElement;
    private TypeElementDependencyType myType;
    private DeclaredElementEnvoy`1<IClrDeclaredElement> mySourceDeclaredElementEnvoy;
    private DeclaredElementEnvoy`1<IClrDeclaredElement> myTargetDeclaredElementEnvoy;
    public ITypeElement TargetTypeElement { get; }
    public ITypeElement SourceTypeElement { get; }
    public TypeElementDependencyType Type { get; }
    public IClrDeclaredElement SourceDeclaredElement { get; }
    public IClrDeclaredElement TargetScopeElement { get; }
    public TypeElementsDependency(TypeElementsDependenciesStore store, ITypeElement sourceTypeElement, ITypeElement targetTypeElement, TypeElementDependencyType type, IClrDeclaredElement sourceDeclaredElement, IClrDeclaredElement targetDeclaredElement);
    public ITypeElement get_TargetTypeElement();
    public ITypeElement get_SourceTypeElement();
    public TypeElementDependencyType get_Type();
    public IClrDeclaredElement get_SourceDeclaredElement();
    public IClrDeclaredElement get_TargetScopeElement();
    public bool IsValid();
}
public class JetBrains.ReSharper.Feature.Services.Diagrams.TypeElementsDependencies.UsagesDependency : TypeElementsDependency {
    private IList`1<IOccurrence> myUsages;
    public IList`1<IOccurrence> Usages { get; }
    public UsagesDependency(TypeElementsDependenciesStore store, ITypeElement sourceTypeElement, ITypeElement targetTypeElement);
    public IList`1<IOccurrence> get_Usages();
    protected bool Equals(UsagesDependency other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface JetBrains.ReSharper.Feature.Services.Documents.IDocumentInfoCache {
    public abstract virtual int GetDocumentLength(IPsiSourceFile psiSourceFile);
}
[ZoneDefinitionAttribute]
public interface JetBrains.ReSharper.Feature.Services.DPA.IDpaFeatureZone {
}
[ActionAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "DumpPsiModulesActionText")]
public class JetBrains.ReSharper.Feature.Services.Dumps.PsiModules.DumpPsiModulesAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "DumpPSISourceFilePropertiesActionText")]
public class JetBrains.ReSharper.Feature.Services.Dumps.PsiModules.DumpPsiSourceFilePropertiesAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.ReSharper.Feature.Services.Dumps.PsiModules.IntoInternalProjectsMenu : object {
    public IntoInternalProjectsMenu(DumpPsiModulesAction dumpPsiModules);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.Editor.EditorSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "HighlightUsagesOfTheElementUnderCaretInCSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.Editor.CppUsagesHighlighterSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToHighlightUsagesOfTheElementUnderCaretInCSettingDescription")]
public bool HighlightUsages;
}
public static class JetBrains.ReSharper.Feature.Services.Editor.CppUsagesHighlighterSettingsAccessor : object {
    [NotNullAttribute]
public static Expression`1<Func`2<CppUsagesHighlighterSettings, bool>> HighlightUsages;
    private static CppUsagesHighlighterSettingsAccessor();
}
public static class JetBrains.ReSharper.Feature.Services.Editor.EditorOptions : object {
    public static Expression`1<Func`2<EditorSettings, bool>> UseCamelHumpsExpression;
    private static EditorOptions();
    public static bool DoUseCamelHumps(ISettingsStore settingsStore, ITreeNode treeNode);
    public static bool DoUseCamelHumps(ISettingsStore settingsStore, IPsiSourceFile sourceFile);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "GeneralSettingsAppliedToATextEditorSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.Editor.EditorSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "UseCamelHumpsForSelectingAndNavigatingBetweenWordsSettingDescription")]
public bool UseCamelHumps;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "UseTabShiftTabKeysForNavigationInCodeSettingDescription")]
public bool StructuralNavigationIsEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "TabNavigationBehaviorSettingDescription")]
public StructuralNavigationBehavior StructuralNavigationBehavior;
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.EditorConfig.ClangFormatConfigService : ConfigFileTypeBase {
    public static int ClangFormatPriority;
    private String[] myFileNames;
    public static String[] BaseStyles;
    private static string ResourceFileNameFormatString;
    [NotNullAttribute]
private IImmutableList`1<IClangFormatConverterForLanguage> myConverters;
    [NotNullAttribute]
private ISettingsSchema mySchema;
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private SettingsScalarEntry <EnabledSetting>k__BackingField;
    public SettingsScalarEntry EnabledSetting { get; }
    public HelpId HelpTopicId { get; }
    public string Name { get; }
    public string DisplayName { get; }
    public int Priority { get; }
    public bool InheritFromParentFile { get; }
    public IJetReadonlyList`1<IClangFormatConverterForLanguage> Converters { get; }
    public ClangFormatConfigService(ILogger logger, IImmutableList`1<IClangFormatConverterForLanguage> converters, ISettingsSchema schema);
    private static ClangFormatConfigService();
    [CompilerGeneratedAttribute]
public virtual SettingsScalarEntry get_EnabledSetting();
    public sealed virtual HelpId get_HelpTopicId();
    public sealed virtual string get_Name();
    public sealed virtual string get_DisplayName();
    public sealed virtual int get_Priority();
    public sealed virtual bool get_InheritFromParentFile();
    public virtual String[] GetFileNamesForPathBasedDetection();
    public IJetReadonlyList`1<IClangFormatConverterForLanguage> get_Converters();
    private void ReadAndConvertConfigFile(ConvertedSettings storageContext, TextReader configFileStream, List`1<IConfigElement> configElements, VirtualFileSystemPath fileSystemPath);
    private IList`1<YamlDocument> ReadConfigFile(TextReader reader);
    private void ProcessDocuments(ConvertedSettings storageContext, List`1<IConfigElement> configElements, IList`1<YamlDocument> documents);
    public static string YamlNodeToString(YamlNode node);
    private static string YamlNodeToStringImpl(YamlNode node, bool newLineBefore, string indent);
    private YamlMappingNode ReadBasedOnStyle(string basedOnStyle);
    public IDictionary`2<string, string> GetBaseStyleOptions(string basedOnStyle);
    public static void CheckStandartProperties(KeyValuePair`2<YamlNode, YamlNode> pair, ClangFormatConfigService service, Boolean& isNameSupported, Boolean& isValueSupported);
    public sealed virtual IConfigFile ParseFile(VirtualFileSystemPath path, TextReader stream, bool details);
}
public class JetBrains.ReSharper.Feature.Services.EditorConfig.ClangFormatConverter : ScalarSettingsConverter {
}
public abstract class JetBrains.ReSharper.Feature.Services.EditorConfig.ClangFormatConverterBase`1 : object {
    protected SettingsSchema mySchema;
    protected CollectionEvents`1<ClangFormatConverter> myItems;
    public String[] TabValues;
    [CompilerGeneratedAttribute]
private string <LanguageName>k__BackingField;
    public ICollectionEvents`1<ClangFormatConverter> Items { get; }
    public string LanguageName { get; }
    protected ClangFormatConverterBase`1(Lifetime lifetime, SettingsSchema schema, string languageName);
    public sealed virtual ICollectionEvents`1<ClangFormatConverter> get_Items();
    [CompilerGeneratedAttribute]
public sealed virtual string get_LanguageName();
    public sealed virtual bool AcceptsLanguage(string languageName);
    protected bool ParseBool(object sourceValue, int index, ISettingsConverterLogger logger, bool defaultValue);
    public string GetValue(YamlMappingNode node, string name);
    protected void RegisterBoolConverter(string name, Expression`1<Func`2<TSettingsKey, bool>> lambdaexpression);
    protected void RegisterBoolConverter(string name, Expression`1<Func`2<TSettingsKey, TValue>> lambdaexpression, TValue valueIfTrue, TValue valueIfFalse);
    protected void RegisterBoolConverter(string name, Expression`1[] settings, TValue valueIfTrue, TValue valueIfFalse);
    protected void RegisterStringToBoolConverter(string name, Expression`1<Func`2<TSettingsKey, bool>> setting, String[] trueValues, String[] falseValues, string valueIfTrue, string valueIfFalse);
    public virtual void Convert(YamlMappingNode node, ISettingsSchema schema, ConvertedSettings convertedSettings, ILogger logger);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_13(Object[] values, Object[] targetValues, ISettingsConverterLogger logger);
}
public class JetBrains.ReSharper.Feature.Services.EditorConfig.ClangFormatLayerIdentity : ConfigFileIdentity`1<ClangFormatConfigService> {
    public string Name { get; }
    public ClangFormatLayerIdentity(Lifetime lifetime);
    public virtual string get_Name();
    public virtual string ToString();
}
[ShellComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.EditorConfig.ClangFormatOptionsExporter : ConfigFileOptionsExporterBase`2<ClangFormatConfigService, ClangFormatLayerIdentity> {
    protected string Name { get; }
    public String[] FilterTags { get; }
    protected string FileExtension { get; }
    private IEnumerable`1<string> AllLanguages { get; }
    public ClangFormatOptionsExporter(ILazy`1<ITextAttributesKeyProvider> textAttributesKeyProvider, ILazy`1<ICommonFileDialogs> fileDialogs, Lifetime lifetime, IconHostBase iconHost, ClangFormatConfigService configFileService, ILogger logger);
    protected virtual string get_Name();
    public virtual String[] get_FilterTags();
    protected virtual string get_FileExtension();
    private IEnumerable`1<string> get_AllLanguages();
    protected virtual void AdditionalChangesAdvise(Lifetime lifetime, Property`1<string> path, ISolution solution, Action`1<object> handler, ISettingsExportParameters parameters, object additionalData);
    protected virtual object CreateAdditionalData(Lifetime lifetime, VirtualFileSystemPath configFilePath, VirtualFileSystemPath sourceFilePath);
    protected virtual void CreateOrChangePropertiesInFile(IList`1<ConfigChange> changes, ConfigFile file, ISettingsExportParameters parameters);
    protected virtual ISettingsExportParameters CreateExportParameters(Lifetime lifetime, HashSet`1<SettingIndex> entries, object additionalData);
    protected virtual RichAttributedTextModel GenerateConfigFileDiff(ConfigFile file, IList`1<ConfigChange> changes, ISettingsExportParameters parameters);
    protected virtual string GenerateConfigFileText(ConfigFile configFile, string lineEnding, ISettingsExportParameters converterParameters);
    protected virtual IList`1<ConfigChange> GetFileConfigChanges(ISolution solution, IContextBoundSettingsStore store, string additionalContent, ConfigFile configFile, ISettingsExportParameters exportParameters);
    protected virtual BeControl GetAdditionalButtons(HashSet`1<SettingIndex> entries, Lifetime lifetime, Action`1<object> Handler, ISettingsExportParameters exportParameters, object additionalData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.EditorConfig.ConfigFileCustomOverride : object {
    private ISettingsSchema mySettingsSchema;
    private ConfigFileService myConfigFileService;
    private Lifetime myLifetime;
    private ILogger myLogger;
    private IExceptionThrowingLogger myThrowingLogger;
    private IImmutableList`1<IFoldableSeveritiesOverrideTopic> myFoldableSeverities;
    private object myLock;
    private IOptimizedPersistentSortedMap`2<string, ConfigOverridePersistentData> myStackedSettingsCache;
    private IDictionary`2<string, ConfigOverrideLiveData> myLivingCache;
    public ConfigFileCustomOverride(ISettingsStore settingsStore, ISettingsSchema schema, IPersistentIndexManager persistentIndexManager, ConfigFileService configFileService, IImmutableList`1<IFoldableSeveritiesOverrideTopic> foldableIds, Lifetime lifetime, ILogger logger);
    private static IJetSortedStringDictionary`1<Severity> FoldOverInspectionSeverities(List`1<string> severitiesIds, Severity baseSeverity, List`1<ValueTuple`2<SeverityOverrideType, IDictionary`2<string, Severity>>> inspectionSeverities);
    private ISettingsStorageMountPoint DoMountStack(List`1<ISettingsStorageMountPoint> participatingMounts, IReadOnlyList`1<IConfigFileTypeWithDefaulters> configFileTypeWithDefaults, SourceFileDataForConfig sourceFileData, List`1<ValueTuple`2<SeverityOverrideType, IDictionary`2<string, Severity>>> perParticipantInspectionSeverities, double maxParticipantPriority, string stackedId);
    public sealed virtual ISettingsStorageMountPoint ProvideOverride(IReadOnlyList`1<ISettingsStorageMountPoint> mounts, IReadOnlyList`1<IConfigFileTypeWithDefaulters> configFileTypeWithDefaults, SourceFileDataForConfig sourceFileData);
}
public abstract class JetBrains.ReSharper.Feature.Services.EditorConfig.ConfigFileIdentity`1 : Identity {
    [CompilerGeneratedAttribute]
private IPropertyBag <Metadata>k__BackingField;
    public bool IsUserEditable { get; }
    public string Name { get; }
    public IPropertyBag Metadata { get; }
    public bool IsDefault { get; }
    public bool HasCustomEditSemantic { get; }
    protected double Priority { get; }
    protected ConfigFileIdentity`1(Lifetime lifetime);
    public virtual bool get_IsUserEditable();
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual IPropertyBag get_Metadata();
    public virtual bool get_IsDefault();
    public virtual bool get_HasCustomEditSemantic();
    protected virtual double get_Priority();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual UserFriendlySettingsLayer CreateUserFriendlySettingsLayer(Lifetime lifetime, ISettingsStore store, Func`3<Lifetime, DataContexts, IDataContext> getContext, TrackMountPointsWithDefaults defaults);
}
public abstract class JetBrains.ReSharper.Feature.Services.EditorConfig.ConfigFileOptionsExporterBase`2 : object {
    protected ILazy`1<ITextAttributesKeyProvider> myTextAttributesKeyProvider;
    private ILazy`1<ICommonFileDialogs> myFileDialogs;
    private IconHostBase myIconHost;
    protected TConfigFileService myConfigFileService;
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private Identity <Identity>k__BackingField;
    public Identity Identity { get; }
    protected string Name { get; }
    protected string FileExtension { get; }
    public String[] FilterTags { get; }
    protected ConfigFileOptionsExporterBase`2(ILazy`1<ITextAttributesKeyProvider> textAttributesKeyProvider, ILazy`1<ICommonFileDialogs> fileDialogs, Lifetime lifetime, IconHostBase iconHost, TConfigFileService configFileService, ILogger logger);
    [CompilerGeneratedAttribute]
public sealed virtual Identity get_Identity();
    protected abstract virtual string get_Name();
    protected abstract virtual string get_FileExtension();
    public abstract virtual String[] get_FilterTags();
    public sealed virtual void Save(OptionsTransaction transaction, Func`3<Lifetime, DataContexts, IDataContext> context, Action onSuccess, Action onCancel);
    public sealed virtual void ExportAll(ISolution solution, IContextBoundSettingsStore store, HashSet`1<SettingIndex> entries, string additionalContent);
    public void EditConfigFileInOptionsDialog(Func`3<Lifetime, DataContexts, IDataContext> dataContext);
    private static IDocument TryGetDocumentOpenedInIDE(ISolution solution, VirtualFileSystemPath path);
    private void DoExportAll(ISolution solution, IContextBoundSettingsStore store, HashSet`1<SettingIndex> entries, string additionalContent, Action onSuccess, Action onCancel, VirtualFileSystemPath initialConfigFilePath, VirtualFileSystemPath sourceFilePath, IDisposable prolongationCookie);
    protected virtual ConfigFile CreateConfigFile(VirtualFileSystemPath configFilePath);
    protected bool TryGetConfigFile(string path, ISolution solution, VirtualFileSystemPath& fileSystemPath, ConfigFile& configFile);
    protected abstract virtual void AdditionalChangesAdvise(Lifetime lifetime, Property`1<string> path, ISolution solution, Action`1<object> handler, ISettingsExportParameters parameters, object additionalData);
    protected abstract virtual object CreateAdditionalData(Lifetime lifetime, VirtualFileSystemPath configFilePath, VirtualFileSystemPath sourceFilePath);
    protected abstract virtual void CreateOrChangePropertiesInFile(IList`1<ConfigChange> changes, ConfigFile configFile, ISettingsExportParameters parameters);
    protected abstract virtual ISettingsExportParameters CreateExportParameters(Lifetime lifetime, HashSet`1<SettingIndex> entries, object additionalData);
    protected virtual void CheckChanges(ISettingsExportParameters parameters, IList`1<ConfigChange> changes);
    protected abstract virtual RichAttributedTextModel GenerateConfigFileDiff(ConfigFile configFile, IList`1<ConfigChange> changes, ISettingsExportParameters parameters);
    protected abstract virtual string GenerateConfigFileText(ConfigFile configFile, string lineEnding, ISettingsExportParameters converterParameters);
    private ConfigFile ParseConfigFile(IDocument document, VirtualFileSystemPath configFilePath);
    protected abstract virtual IList`1<ConfigChange> GetFileConfigChanges(ISolution solution, IContextBoundSettingsStore store, string additionalContent, ConfigFile configFile, ISettingsExportParameters parameters);
    protected abstract virtual BeControl GetAdditionalButtons(HashSet`1<SettingIndex> entries, Lifetime lifetime, Action`1<object> Handler, ISettingsExportParameters parameters, object additionalData);
}
[SolutionComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.EditorConfig.ConfigFileUserFriendlyLayerProvider : object {
    private Lazy`1<CollectionEvents`1<Identity>> myItems;
    public ICollectionEvents`1<Identity> Items { get; }
    public ConfigFileUserFriendlyLayerProvider(IEnumerable`1<IConfigFileOptionsExporter> exporters);
    public sealed virtual ICollectionEvents`1<Identity> get_Items();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Feature.Services.EditorConfig.ConfigOverrideCachedDataMarshaller : object {
    private static Lazy`1<ConfigOverrideCachedDataMarshaller> ourLazyInstance;
    public static ConfigOverrideCachedDataMarshaller Instance { get; }
    private static ConfigOverrideCachedDataMarshaller();
    public static ConfigOverrideCachedDataMarshaller get_Instance();
    public sealed virtual void Marshal(UnsafeWriter writer, ConfigOverridePersistentData value);
    public sealed virtual ConfigOverridePersistentData Unmarshal(UnsafeReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Feature.Services.EditorConfig.ConfigOverrideLiveData : object {
    [CompilerGeneratedAttribute]
private DateTime <LatestInfluentialWrite>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingsStorageMountPoint <MountPoint>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public DateTime LatestInfluentialWrite { get; public set; }
    public ISettingsStorageMountPoint MountPoint { get; public set; }
    public ConfigOverrideLiveData(DateTime LatestInfluentialWrite, ISettingsStorageMountPoint MountPoint);
    [CompilerGeneratedAttribute]
protected ConfigOverrideLiveData(ConfigOverrideLiveData original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public DateTime get_LatestInfluentialWrite();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LatestInfluentialWrite(DateTime value);
    [CompilerGeneratedAttribute]
public ISettingsStorageMountPoint get_MountPoint();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MountPoint(ISettingsStorageMountPoint value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ConfigOverrideLiveData left, ConfigOverrideLiveData right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ConfigOverrideLiveData left, ConfigOverrideLiveData right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ConfigOverrideLiveData other);
    [CompilerGeneratedAttribute]
public virtual ConfigOverrideLiveData <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(DateTime& LatestInfluentialWrite, ISettingsStorageMountPoint& MountPoint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Feature.Services.EditorConfig.ConfigOverridePersistentData : object {
    [CompilerGeneratedAttribute]
private DateTime <LatestInfluentialWrite>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XmlString>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public DateTime LatestInfluentialWrite { get; public set; }
    public string XmlString { get; public set; }
    public ConfigOverridePersistentData(DateTime LatestInfluentialWrite, string XmlString);
    [CompilerGeneratedAttribute]
protected ConfigOverridePersistentData(ConfigOverridePersistentData original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public DateTime get_LatestInfluentialWrite();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LatestInfluentialWrite(DateTime value);
    [CompilerGeneratedAttribute]
public string get_XmlString();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_XmlString(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ConfigOverridePersistentData left, ConfigOverridePersistentData right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ConfigOverridePersistentData left, ConfigOverridePersistentData right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ConfigOverridePersistentData other);
    [CompilerGeneratedAttribute]
public virtual ConfigOverridePersistentData <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(DateTime& LatestInfluentialWrite, String& XmlString);
}
public class JetBrains.ReSharper.Feature.Services.EditorConfig.ConfigPropertyDependencyModel : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    public ConfigPropertyDependencyModel(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
}
public class JetBrains.ReSharper.Feature.Services.EditorConfig.EcFileViewModel : object {
    private ISolution mySolution;
    private string myDescription;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IConfigElement> <Elements>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfigFileType <FileType>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <File>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRoot>k__BackingField;
    public IReadOnlyList`1<IConfigElement> Elements { get; }
    public IConfigFileType FileType { get; }
    public VirtualFileSystemPath File { get; }
    public bool IsRoot { get; }
    public bool IsNavigable { get; }
    public string Name { get; }
    public ICommand NavigateToFile { get; }
    public EcFileViewModel(IConfigFileType fileType, ISolution solution, VirtualFileSystemPath file, bool isRoot, IReadOnlyList`1<IConfigElement> elements, string description);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IConfigElement> get_Elements();
    [CompilerGeneratedAttribute]
public IConfigFileType get_FileType();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_File();
    [CompilerGeneratedAttribute]
public bool get_IsRoot();
    public bool get_IsNavigable();
    public string get_Name();
    public ICommand get_NavigateToFile();
    [CompilerGeneratedAttribute]
private void <get_NavigateToFile>b__19_0();
    [CompilerGeneratedAttribute]
private void <get_NavigateToFile>b__19_1();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.EditorConfig.EditorConfigHighlightingConverter : object {
    private ILazy`1<HighlightingSettingsManager> myHighlightingSettingsManager;
    public static int Priority;
    private OneToListMultimap`2<string, string> myAliases;
    private SettingsIndexedEntry mySettingsEntry;
    private IEditorConfigValueTypeInfo mySeverityTypeInfo;
    public EditorConfigHighlightingConverter(ILazy`1<HighlightingSettingsManager> highlightingSettingsManager, SettingsSchema schema);
    private sealed virtual override IEnumerable`1<ReadConverter> JetBrains.ReSharper.Psi.impl.EditorConfig.IEditorConfigSchemaReadConvertersProvider.ProvideReadConverters(IEditorConfigSchemaCollector manager);
    private void Convert(string propertyName, string value, IDictionary`2<string, string> properties, ConvertedSettings convertedSettings);
}
public class JetBrains.ReSharper.Feature.Services.EditorConfig.EditorConfigLayerIdentity : ConfigFileIdentity`1<EditorConfigService> {
    public string Name { get; }
    public EditorConfigLayerIdentity(Lifetime lifetime);
    public virtual string get_Name();
    public virtual string ToString();
}
[ShellComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.EditorConfig.EditorConfigOptionsExporter : ConfigFileOptionsExporterBase`2<EditorConfigService, EditorConfigLayerIdentity> {
    protected string Name { get; }
    public String[] FilterTags { get; }
    protected string FileExtension { get; }
    public EditorConfigOptionsExporter(ILazy`1<ITextAttributesKeyProvider> textAttributesKeyProvider, ILazy`1<ICommonFileDialogs> fileDialogs, Lifetime lifetime, IconHostBase iconHost, EditorConfigService editorConfigService, ILogger logger);
    protected virtual string get_Name();
    public virtual String[] get_FilterTags();
    protected virtual string get_FileExtension();
    protected virtual IList`1<ConfigChange> GetFileConfigChanges(ISolution solution, IContextBoundSettingsStore store, string additionalContent, ConfigFile configFile, ISettingsExportParameters parameters);
    protected virtual string GenerateConfigFileText(ConfigFile configFile, string lineEnding, ISettingsExportParameters converterParameters);
    protected virtual object CreateAdditionalData(Lifetime lifetime, VirtualFileSystemPath configFilePath, VirtualFileSystemPath sourceFilePath);
    protected virtual ConfigFile CreateConfigFile(VirtualFileSystemPath configFilePath);
    private static bool GetSpaceAroundEqSetting();
    protected virtual void AdditionalChangesAdvise(Lifetime lifetime, Property`1<string> path, ISolution solution, Action`1<object> handler, ISettingsExportParameters parameters, object additionalData);
    protected virtual void CreateOrChangePropertiesInFile(IList`1<ConfigChange> changes, ConfigFile configFile, ISettingsExportParameters parameters);
    protected virtual ISettingsExportParameters CreateExportParameters(Lifetime lifetime, HashSet`1<SettingIndex> entries, object additionalData);
    protected virtual void CheckChanges(ISettingsExportParameters exportParameters, IList`1<ConfigChange> changes);
    protected virtual RichAttributedTextModel GenerateConfigFileDiff(ConfigFile configFile, IList`1<ConfigChange> changes, ISettingsExportParameters parameters);
    protected virtual BeControl GetAdditionalButtons(HashSet`1<SettingIndex> entries, Lifetime lifetime, Action`1<object> Handler, ISettingsExportParameters exportParameters, object additionalData);
}
public class JetBrains.ReSharper.Feature.Services.EditorConfig.EditorConfigPropertyDescription : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SectionDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private KnownLanguage <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGeneralized>k__BackingField;
    public string FileName { get; public set; }
    public string Id { get; public set; }
    public string SectionDescription { get; public set; }
    public string Description { get; public set; }
    public KnownLanguage Language { get; public set; }
    public bool IsGeneralized { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_SectionDescription();
    [CompilerGeneratedAttribute]
public void set_SectionDescription(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public KnownLanguage get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(KnownLanguage value);
    [CompilerGeneratedAttribute]
public bool get_IsGeneralized();
    [CompilerGeneratedAttribute]
public void set_IsGeneralized(bool value);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.EditorConfig.ExportToClangFormatUtil : object {
    [ExtensionAttribute]
public static string GenerateClangFormatText(ConfigFile configFile, string lineEnding);
    public static IList`1<ConfigChange> GetFileConfigChanges(IContextBoundSettingsStore store, ConfigFile configFile, ClangFormatConfigService service, ClangFormatExportParameters parameters);
    [ExtensionAttribute]
public static RichAttributedTextModel GenerateClangFormatDiff(ConfigFile file, IList`1<ConfigChange> changes, ClangFormatExportParameters parameters, ITextAttributesKeyProvider keyProvider);
    public static void CreateOrChangePropertiesInFile(IList`1<ConfigChange> changes, ConfigFile file, ISettingsExportParameters exportParameters, ISet`1<IConfigElement> newElements, IDictionary`2<ConfigFileProperty, string> changedElements);
    private static void SortSection(ClangConfigFileSection section);
    [CanBeNullAttribute]
public static string DetectBasedOnStyle(ConfigFile configFile, ClangFormatExportParameters parameters);
    [CompilerGeneratedAttribute]
internal static void <GenerateClangFormatText>g__WriteLine|1_0(string s, <>c__DisplayClass1_0& );
    [CompilerGeneratedAttribute]
internal static AttributeId <GenerateClangFormatDiff>g__GetStyle|3_0(IConfigElement element, <>c__DisplayClass3_0& );
}
[ExtensionAttribute]
[RegisterHighlighterAttribute("ReSharper Text to Delete in Config File")]
[RegisterHighlighterAttribute("ReSharper Text to Insert in Config File")]
[RegisterHighlighterAttribute("ReSharper Config File Conflict Warning")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static class JetBrains.ReSharper.Feature.Services.EditorConfig.ExportToConfigFileUtil : object {
    public static string DeletedTextAttributeId;
    public static string InsertedTextAttributeId;
    public static string WarningTextAttributeId;
    public static AttributeId StyleForWarnings;
    public static AttributeId StyleForDeletedText;
    public static AttributeId StyleForNewText;
    private static ExportToConfigFileUtil();
    public static void CreateOrChangeProperty(ConfigFile file, ConfigChange change, ISet`1<IConfigElement> newElements, IDictionary`2<ConfigFileProperty, string> changedElements, Func`2<string, TConfigFileSection> createSection, Func`2<ConfigChange, ConfigFileProperty> createPropertyForChange, bool addComments, Func`3<TConfigFileSection, string, int> findCommentByText);
    public static RichAttributedTextModel PropertyToRichText(ConfigFileProperty prop, ITextAttributesKeyProvider keyProvider, AttributeId style, string oldValue, string warning, string delimiter);
    [ExtensionAttribute]
public static void MergeDictionaries(IDictionary`2<TKey, TValue> dictionary, IEnumerable`1<KeyValuePair`2<TKey, TValue>> dictionaryToAdd, bool overwrite);
    [CanBeNullAttribute]
public static ConfigFile ParseConfigFileFromString(string text, TService editorConfigService, VirtualFileSystemPath path, bool details, bool convertSettings);
    [CompilerGeneratedAttribute]
internal static void <CreateOrChangeProperty>g__RemoveProperty|6_0(TConfigFileSection curSection, ConfigFileProperty existingProp);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.EditorConfig.ExportToEditorConfigUtil : object {
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> list);
    public static IList`1<ConfigChange> GetEditorConfigChanges(ISolution solution, IContextBoundSettingsStore store, string additionalContent, ConfigFile configFile, EditorConfigExportParameters parameters);
    private static void WritePropertiesFromDictionary(string precedingComment, IDictionary`2<string, string> dictionary, List`1<ConfigChange> result, string section);
    public static void CreateOrChangeProperty(ConfigFile file, ConfigChange change, HashSet`1<IConfigElement> newElements, Dictionary`2<ConfigFileProperty, string> changedElements);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.EditorConfig.ExportToEditorConfigUtil/<ConvertFileToChanges>d__6")]
[ExtensionAttribute]
private static IEnumerable`1<ConfigChange> ConvertFileToChanges(IConfigFile file);
    [ExtensionAttribute]
public static RichAttributedTextModel GenerateEditorConfigDiff(ConfigFile file, ICollection`1<ConfigChange> changes, ITextAttributesKeyProvider keyProvider);
    [ExtensionAttribute]
public static string GenerateEditorConfigText(IConfigFile file, string lineEnding, ISettingsExportParameters converterParameters);
    [ExtensionAttribute]
private static string SectionHeaderToText(EditorConfigFileSection section);
    [ExtensionAttribute]
private static string PropertyToText(ConfigFileProperty prop, string spaceAroundEq);
    public static string ConvertToId(string text);
    [CompilerGeneratedAttribute]
internal static AttributeId <GenerateEditorConfigDiff>g__GetStyle|7_0(IConfigElement element, <>c__DisplayClass7_0& );
}
public static class JetBrains.ReSharper.Feature.Services.EditorConfig.FileFormattingInfoBeControl : object {
    public static BeControl CreateFileFormattingInfoControl(FileFormattingInfoWindowModelBase model, Lifetime lifetime);
}
public abstract class JetBrains.ReSharper.Feature.Services.EditorConfig.FileFormattingInfoWindowModelBase : AAutomation {
    protected Lifetime myLifetime;
    [NotNullAttribute]
private IConfigFileService myConfigFileService;
    [NotNullAttribute]
private ISettingsStore mySettingsStore;
    [NotNullAttribute]
private IIndentAutodetectService myIndentAutodetectService;
    [NotNullAttribute]
private IVsTabSettingsService myVSTabSettingsService;
    [NotNullAttribute]
private IProperty`1<bool> myAutodetectIndentSetting;
    [NotNullAttribute]
private IProperty`1<int> myBaseIndentAsInt;
    [NotNullAttribute]
private IContextBoundSettingsStoreLive myLiveSettings;
    [NotNullAttribute]
private IndentInfoSource myVSSource;
    [NotNullAttribute]
private IndentInfoSource myResharperSource;
    [NotNullAttribute]
private IndentInfoSource myAutodetectSource;
    [NotNullAttribute]
private SequentialLifetimes mySequence;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private IShellLocks <Threading>k__BackingField;
    [CompilerGeneratedAttribute]
private IndentInfoSource[] <IndentInfoSources>k__BackingField;
    [CompilerGeneratedAttribute]
private IChildrenProvider <ChildrenProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IExpansionProvider <ExpansionProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<object> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, bool> <SelectabilityProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IPsiSourceFile> <SourceFile>k__BackingField;
    [NotNullAttribute]
public IProperty`1<string> FileName { get; }
    [NotNullAttribute]
public ISolution Solution { get; }
    [NotNullAttribute]
public IShellLocks Threading { get; }
    [NotNullAttribute]
public IndentInfoSource[] IndentInfoSources { get; }
    [NotNullAttribute]
public IChildrenProvider ChildrenProvider { get; }
    [NotNullAttribute]
public IExpansionProvider ExpansionProvider { get; }
    [NotNullAttribute]
public ListEvents`1<object> Files { get; }
    [NotNullAttribute]
public Func`2<object, bool> SelectabilityProvider { get; }
    [NotNullAttribute]
public IProperty`1<IPsiSourceFile> SourceFile { get; }
    protected FileFormattingInfoWindowModelBase(Lifetime lifetime, ISolution solution, IConfigFileService configFileService, IShellLocks threading, ISettingsStore settingsStore, IIndentAutodetectService indentAutodetectService, IVsTabSettingsService vsTabSettingsService);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_FileName();
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    [CompilerGeneratedAttribute]
public IShellLocks get_Threading();
    [CompilerGeneratedAttribute]
public IndentInfoSource[] get_IndentInfoSources();
    [CompilerGeneratedAttribute]
public IChildrenProvider get_ChildrenProvider();
    [CompilerGeneratedAttribute]
public IExpansionProvider get_ExpansionProvider();
    [CompilerGeneratedAttribute]
public ListEvents`1<object> get_Files();
    [CompilerGeneratedAttribute]
public Func`2<object, bool> get_SelectabilityProvider();
    [CompilerGeneratedAttribute]
public IProperty`1<IPsiSourceFile> get_SourceFile();
    public void ChangeSourceFile(IPsiSourceFile sourceFile, PsiLanguageType primaryPsiLanguage);
    [CompilerGeneratedAttribute]
internal static void <.ctor>g__ShowHelp|39_0(IndentInfoSource it);
    [CompilerGeneratedAttribute]
internal static ConfigPropertyDependencyModel[] <.ctor>g__BoxAlsoDependsOn|39_1(ConvertedSettingInfo info);
    [CompilerGeneratedAttribute]
private void <.ctor>b__39_3(IndentInfoSource it);
}
public interface JetBrains.ReSharper.Feature.Services.EditorConfig.IClangFormatConverterForLanguage {
    [NotNullAttribute]
public string LanguageName { get; }
    public abstract virtual string get_LanguageName();
    public abstract virtual bool AcceptsLanguage(string languageName);
    public abstract virtual void Convert(YamlMappingNode node, ISettingsSchema schema, ConvertedSettings converter, ILogger logger);
}
public interface JetBrains.ReSharper.Feature.Services.EditorConfig.IConfigFileOptionsExporter {
    public Identity Identity { get; }
    public abstract virtual Identity get_Identity();
    public abstract virtual void ExportAll(ISolution solution, IContextBoundSettingsStore store, HashSet`1<SettingIndex> entries, string additionalContent);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.EditorConfig.IFoldableSeveritiesOverrideTopic {
    public List`1<string> SeveritiesIds { get; }
    public Severity BaseSeverity { get; }
    public IReadOnlyList`1<ISettingsConverter> Converters { get; }
    public IReadOnlyDictionary`2<SettingIndex, object> SetWhenConvertersRun { get; }
    public abstract virtual List`1<string> get_SeveritiesIds();
    public abstract virtual Severity get_BaseSeverity();
    public abstract virtual IReadOnlyList`1<ISettingsConverter> get_Converters();
    public abstract virtual IReadOnlyDictionary`2<SettingIndex, object> get_SetWhenConvertersRun();
}
public class JetBrains.ReSharper.Feature.Services.EditorConfig.IndentInfoSource : AAutomation {
    [CompilerGeneratedAttribute]
private IConfigFileType <ConfigFileType>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private HelpId <HelpTopicId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasHelp>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <ShowHelp>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsDiscarded>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <Indent>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <IndentMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanDisable>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <IsEnabledMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <ToggleIsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <OverridenMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldDisplayProjectAvailability>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ConfigProjectAvailability> <ConfigProjectAvailabilityForSourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <ConfigProjectAvailabilityMessage>k__BackingField;
    public IConfigFileType ConfigFileType { get; }
    public IProperty`1<bool> IsAvailable { get; public set; }
    public string Name { get; }
    public HelpId HelpTopicId { get; }
    public bool HasHelp { get; }
    public ICommand ShowHelp { get; public set; }
    public IProperty`1<bool> IsDiscarded { get; public set; }
    public IProperty`1<int> Indent { get; public set; }
    public IProperty`1<string> IndentMessage { get; public set; }
    public bool CanDisable { get; }
    public IProperty`1<bool> IsEnabled { get; public set; }
    public IProperty`1<string> IsEnabledMessage { get; public set; }
    public ICommand ToggleIsEnabled { get; public set; }
    public IProperty`1<string> OverridenMessage { get; public set; }
    public bool ShouldDisplayProjectAvailability { get; public set; }
    public IProperty`1<ConfigProjectAvailability> ConfigProjectAvailabilityForSourceFile { get; public set; }
    public IProperty`1<string> ConfigProjectAvailabilityMessage { get; public set; }
    public IndentInfoSource(Lifetime lifetime, IConfigFileType configFileType, string name, bool hasHelp, bool canDisable, Action`1<IndentInfoSource> showHelp, Action`1<IndentInfoSource> toggleIsEnabled, HelpId helpTopicId, IProperty`1<IPsiSourceFile> sourceFile);
    [CompilerGeneratedAttribute]
public IConfigFileType get_ConfigFileType();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsAvailable();
    [CompilerGeneratedAttribute]
public void set_IsAvailable(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public HelpId get_HelpTopicId();
    [CompilerGeneratedAttribute]
public bool get_HasHelp();
    [CompilerGeneratedAttribute]
public ICommand get_ShowHelp();
    [CompilerGeneratedAttribute]
public void set_ShowHelp(ICommand value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsDiscarded();
    [CompilerGeneratedAttribute]
public void set_IsDiscarded(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_Indent();
    [CompilerGeneratedAttribute]
public void set_Indent(IProperty`1<int> value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_IndentMessage();
    [CompilerGeneratedAttribute]
public void set_IndentMessage(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_CanDisable();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_IsEnabledMessage();
    [CompilerGeneratedAttribute]
public void set_IsEnabledMessage(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public ICommand get_ToggleIsEnabled();
    [CompilerGeneratedAttribute]
public void set_ToggleIsEnabled(ICommand value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_OverridenMessage();
    [CompilerGeneratedAttribute]
public void set_OverridenMessage(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_ShouldDisplayProjectAvailability();
    [CompilerGeneratedAttribute]
public void set_ShouldDisplayProjectAvailability(bool value);
    [CompilerGeneratedAttribute]
public IProperty`1<ConfigProjectAvailability> get_ConfigProjectAvailabilityForSourceFile();
    [CompilerGeneratedAttribute]
public void set_ConfigProjectAvailabilityForSourceFile(IProperty`1<ConfigProjectAvailability> value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_ConfigProjectAvailabilityMessage();
    [CompilerGeneratedAttribute]
public void set_ConfigProjectAvailabilityMessage(IProperty`1<string> value);
}
public interface JetBrains.ReSharper.Feature.Services.EditorConfig.IVsTabSettingsService {
    public abstract virtual IProperty`1<GlobalFormatSettings> GetVsLangSettings(Lifetime lifetime, PsiLanguageType psiLanguage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Feature.Services.EditorConfig.OverriderConstants : object {
    public static string StyleCopRuleSetServiceName;
    public static string EditorConfigServiceName;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class JetBrains.ReSharper.Feature.Services.EditorConfig.OverriderUtils : object {
    internal static string SeverityToText(Severity s);
    internal static StringBuilder BuildLogEntry(StringBuilder to, string storageName, IDictionary`2<string, Severity> indexedValuesDict, string fileHeaderText, bool isStyleCopXml);
    [ExtensionAttribute]
public static Dictionary`2<TIndex, TIndexedValue> FetchIndexedValues(ISettingsStorageMountPoint mount, SettingsIndexedEntry entry, IExceptionThrowingLogger logger);
    [ExtensionAttribute]
public static Dictionary`2<TIndex, TIndexedValue> FetchIndexedValues(ISettingsStorageMountPoint mount, ISettingsSchema settingsSchema, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TIndex, TIndexedValue>>> lambdaexpression, IExceptionThrowingLogger logger);
    [ExtensionAttribute]
public static T FetchScalarValueClass(ISettingsStorageMountPoint mount, SettingsScalarEntry entry, IExceptionThrowingLogger logger);
    [ExtensionAttribute]
public static T FetchScalarValueClass(ISettingsStorageMountPoint mount, ISettingsSchema settingsSchema, Expression`1<Func`2<TKeyClass, T>> lambdaexpression, IExceptionThrowingLogger logger);
    [ExtensionAttribute]
public static Nullable`1<T> FetchScalarValueStruct(ISettingsStorageMountPoint mount, SettingsScalarEntry entry, IExceptionThrowingLogger logger);
    [ExtensionAttribute]
public static Nullable`1<T> FetchScalarValueStruct(ISettingsStorageMountPoint mount, ISettingsSchema settingsSchema, Expression`1<Func`2<TKeyClass, T>> lambdaexpression, IExceptionThrowingLogger logger);
}
internal enum JetBrains.ReSharper.Feature.Services.EditorConfig.SeverityOverrideType : Enum {
    public int value__;
    public static SeverityOverrideType NonSpecific;
    public static SeverityOverrideType EditorConfig;
    public static SeverityOverrideType Ruleset;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.EditorConfig.YamlEx : object {
    [ExtensionAttribute]
public static string GetScalarValue(YamlNode node);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.EditorConfig.ZoneMarker : object {
}
internal class JetBrains.ReSharper.Feature.Services.EditorUIAdornment.<EditorUICodePositionSelector>F6659FAC9B6277B738588F721ECC088CEAA8C69FA7418AC30128B60CC49415096__AlwaysAvailableHandler : object {
    [CompilerGeneratedAttribute]
private static <EditorUICodePositionSelector>F6659FAC9B6277B738588F721ECC088CEAA8C69FA7418AC30128B60CC49415096__AlwaysAvailableHandler <Instance>k__BackingField;
    [NotNullAttribute]
public static <EditorUICodePositionSelector>F6659FAC9B6277B738588F721ECC088CEAA8C69FA7418AC30128B60CC49415096__AlwaysAvailableHandler Instance { get; }
    private static <EditorUICodePositionSelector>F6659FAC9B6277B738588F721ECC088CEAA8C69FA7418AC30128B60CC49415096__AlwaysAvailableHandler();
    [CompilerGeneratedAttribute]
public static <EditorUICodePositionSelector>F6659FAC9B6277B738588F721ECC088CEAA8C69FA7418AC30128B60CC49415096__AlwaysAvailableHandler get_Instance();
    public sealed virtual bool QuickCheckAvailability(ITextControl textControl, IPsiSourceFile psiSourceFile);
}
internal class JetBrains.ReSharper.Feature.Services.EditorUIAdornment.<EditorUICodePositionSelector>F6659FAC9B6277B738588F721ECC088CEAA8C69FA7418AC30128B60CC49415096__EscapeHandler : EscapeActionHandlerBase {
    [NotNullAttribute]
private Action myAction;
    [NotNullAttribute]
private ITextControl myTextControl;
    public <EditorUICodePositionSelector>F6659FAC9B6277B738588F721ECC088CEAA8C69FA7418AC30128B60CC49415096__EscapeHandler(Action action, ITextControl textControl);
    protected virtual bool IsAvailable(IDataContext dataContext);
    protected virtual void Execute(IDataContext dataContext);
}
[RequiredMemberAttribute]
public class JetBrains.ReSharper.Feature.Services.EditorUIAdornment.CodePositionEditorSelectionModel`1 : object {
    [CompilerGeneratedAttribute]
private IconId <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MoveUpTooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MoveDownTooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CancelTooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<TCandidate> <Candidates>k__BackingField;
    [RequiredMemberAttribute]
[NotNullAttribute]
public IconId Icon { get; public set; }
    [RequiredMemberAttribute]
public string Title { get; public set; }
    [RequiredMemberAttribute]
public RichText Description { get; public set; }
    [RequiredMemberAttribute]
public string MoveUpTooltip { get; public set; }
    [RequiredMemberAttribute]
public string MoveDownTooltip { get; public set; }
    [RequiredMemberAttribute]
public string CommitText { get; public set; }
    [RequiredMemberAttribute]
public string CancelTooltip { get; public set; }
    [RequiredMemberAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public IReadOnlyList`1<TCandidate> Candidates { get; public set; }
    [CompilerGeneratedAttribute]
public IconId get_Icon();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Icon(IconId value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Title(string value);
    [CompilerGeneratedAttribute]
public RichText get_Description();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Description(RichText value);
    [CompilerGeneratedAttribute]
public string get_MoveUpTooltip();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MoveUpTooltip(string value);
    [CompilerGeneratedAttribute]
public string get_MoveDownTooltip();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MoveDownTooltip(string value);
    [CompilerGeneratedAttribute]
public string get_CommitText();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CommitText(string value);
    [CompilerGeneratedAttribute]
public string get_CancelTooltip();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CancelTooltip(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<TCandidate> get_Candidates();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Candidates(IReadOnlyList`1<TCandidate> value);
}
[IsReadOnlyAttribute]
[RequiredMemberAttribute]
public class JetBrains.ReSharper.Feature.Services.EditorUIAdornment.CodePositionPresentationData : ValueType {
    [CompilerGeneratedAttribute]
private TextRange <Range>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <PreviewElement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBeforeDocumentPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmptyLineAbove>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmptyLineBelow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInterline>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Tooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <IndentLengthInCharacters>k__BackingField;
    [RequiredMemberAttribute]
public TextRange Range { get; public set; }
    [CanBeNullAttribute]
public IconId Icon { get; public set; }
    [RequiredMemberAttribute]
[CanBeNullAttribute]
public RichText PreviewElement { get; public set; }
    [RequiredMemberAttribute]
public bool IsBeforeDocumentPosition { get; public set; }
    public bool EmptyLineAbove { get; public set; }
    public bool EmptyLineBelow { get; public set; }
    public bool IsInterline { get; public set; }
    [CanBeNullAttribute]
public RichText Tooltip { get; public set; }
    public Nullable`1<int> IndentLengthInCharacters { get; public set; }
    [CompilerGeneratedAttribute]
public TextRange get_Range();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Range(TextRange value);
    [CompilerGeneratedAttribute]
public IconId get_Icon();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Icon(IconId value);
    [CompilerGeneratedAttribute]
public RichText get_PreviewElement();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PreviewElement(RichText value);
    [CompilerGeneratedAttribute]
public bool get_IsBeforeDocumentPosition();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsBeforeDocumentPosition(bool value);
    [CompilerGeneratedAttribute]
public bool get_EmptyLineAbove();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_EmptyLineAbove(bool value);
    [CompilerGeneratedAttribute]
public bool get_EmptyLineBelow();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_EmptyLineBelow(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsInterline();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsInterline(bool value);
    [CompilerGeneratedAttribute]
public RichText get_Tooltip();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Tooltip(RichText value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_IndentLengthInCharacters();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IndentLengthInCharacters(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(CodePositionPresentationData left, CodePositionPresentationData right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(CodePositionPresentationData left, CodePositionPresentationData right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(CodePositionPresentationData other);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.EditorUIAdornment.CodePositionSelectionHighlighterModelProvider : object {
    public sealed virtual bool IsValid(IHighlighter highlighter);
    public sealed virtual IAdornmentDataModel CreateDataModel(IHighlighter highlighter);
}
public class JetBrains.ReSharper.Feature.Services.EditorUIAdornment.CodePositionSelectionHintDataModel : object {
    private static int Priority;
    [CompilerGeneratedAttribute]
private AdornmentData <Data>k__BackingField;
    public AdornmentData Data { get; }
    public IPresentableItem ContextMenuTitle { get; }
    public IEnumerable`1<BulbMenuItem> ContextMenuItems { get; }
    public Nullable`1<TextRange> SelectionRange { get; }
    public CodePositionSelectionHintDataModel(CodePositionPresentationData presentationData);
    [CompilerGeneratedAttribute]
public sealed virtual AdornmentData get_Data();
    public sealed virtual IPresentableItem get_ContextMenuTitle();
    public sealed virtual IEnumerable`1<BulbMenuItem> get_ContextMenuItems();
    public sealed virtual void ExecuteNavigation(PopupWindowContextSource popupWindowContextSource);
    public sealed virtual Nullable`1<TextRange> get_SelectionRange();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.EditorUIAdornment.CodePositionSelectorHighlighterTooltipProvider : object {
    public sealed virtual RichTextBlock TryGetTooltip(IHighlighter highlighter, HighlighterTooltipKind where);
    public sealed virtual bool ShouldShowTooltip(IHighlighter highlighter, HighlighterTooltipKind where);
}
public class JetBrains.ReSharper.Feature.Services.EditorUIAdornment.CodePositionSelectorHighlightingManager : object {
    public static string HighlighterKeyPrefix;
    private string HIGHLIGHTER_KEY;
    [NotNullAttribute]
private CodePositionSelectionHighlighterModelProvider myHighlighterModelProvider;
    private Lifetime myLifetime;
    [NotNullAttribute]
private IThreading myThreading;
    [NotNullAttribute]
private IDocument myDocument;
    [NotNullAttribute]
private IHighlighterTooltipProvider myTooltipProvider;
    private List`1<CodePositionPresentationData> myHighlighters;
    private TextRange myOutlineRange;
    public CodePositionSelectorHighlightingManager(Lifetime lifetime, IDocument document, CodePositionSelectionHighlighterModelProvider highlighterModelProvider, IThreading threading, IHighlighterTooltipProvider tooltipProvider);
    public void SetHighlighter(Nullable`1<CodePositionPresentationData> lBrace, Nullable`1<CodePositionPresentationData> highlighterData, Nullable`1<CodePositionPresentationData> rBrace);
    public void ClearHighlighter();
    private void ClearHighlighter(Lifetime lifetime);
    private void UpdateHighlighter();
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_0();
}
[RequiredMemberAttribute]
public class JetBrains.ReSharper.Feature.Services.EditorUIAdornment.CodePositionSelectorPopupViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ImageSource> <IconImageSource>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <ConfirmCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <CancelCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <MoveUpCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <MoveDownCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextButtonText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MoveUpButtonTooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MoveDownButtonTooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CancelButtonTooltip>k__BackingField;
    [RequiredMemberAttribute]
public string Title { get; public set; }
    [RequiredMemberAttribute]
public RichText Description { get; public set; }
    [NotNullAttribute]
public IProperty`1<ImageSource> IconImageSource { get; }
    [NotNullAttribute]
public ICommand ConfirmCommand { get; }
    [NotNullAttribute]
public ICommand CancelCommand { get; }
    [NotNullAttribute]
public ICommand MoveUpCommand { get; }
    [NotNullAttribute]
public ICommand MoveDownCommand { get; }
    [RequiredMemberAttribute]
[NotNullAttribute]
public string NextButtonText { get; public set; }
    [RequiredMemberAttribute]
[NotNullAttribute]
public string MoveUpButtonTooltip { get; public set; }
    [RequiredMemberAttribute]
[NotNullAttribute]
public string MoveDownButtonTooltip { get; public set; }
    [RequiredMemberAttribute]
[NotNullAttribute]
public string CancelButtonTooltip { get; public set; }
    [ObsoleteAttribute("Constructors of types with required members are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RequiredMembers")]
public CodePositionSelectorPopupViewModel(IconId iconId, Action confirm, Action cancel, Action moveUp, Action moveDown);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Title(string value);
    [CompilerGeneratedAttribute]
public RichText get_Description();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Description(RichText value);
    [CompilerGeneratedAttribute]
public IProperty`1<ImageSource> get_IconImageSource();
    [CompilerGeneratedAttribute]
public ICommand get_ConfirmCommand();
    [CompilerGeneratedAttribute]
public ICommand get_CancelCommand();
    [CompilerGeneratedAttribute]
public ICommand get_MoveUpCommand();
    [CompilerGeneratedAttribute]
public ICommand get_MoveDownCommand();
    [CompilerGeneratedAttribute]
public string get_NextButtonText();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NextButtonText(string value);
    [CompilerGeneratedAttribute]
public string get_MoveUpButtonTooltip();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MoveUpButtonTooltip(string value);
    [CompilerGeneratedAttribute]
public string get_MoveDownButtonTooltip();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MoveDownButtonTooltip(string value);
    [CompilerGeneratedAttribute]
public string get_CancelButtonTooltip();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CancelButtonTooltip(string value);
}
public class JetBrains.ReSharper.Feature.Services.EditorUIAdornment.EditorUICodePositionSelector`1 : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
private IThreading myThreading;
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private CodePositionSelectorHighlighterTooltipProvider myTooltipProvider;
    [NotNullAttribute]
private DocumentManager myDocumentManager;
    [NotNullAttribute]
private InterlineAdornmentSupportChecker myInterlineAdornmentSupportChecker;
    [NotNullAttribute]
private ITextControlManager myTextControlManager;
    [NotNullAttribute]
private ITypingAssistManager myTypingAssistManager;
    [CanBeNullAttribute]
private ICodePositionSelectorEditorPopupProvider myEditorPopupProvider;
    [CanBeNullAttribute]
private CodePositionSelectionHighlighterModelProvider myScopeSelectionHighlighterModelProvider;
    [CanBeNullAttribute]
private IEditorUIAdorner myEditorUIAdorner;
    [CompilerGeneratedAttribute]
private CodePositionEditorSelectionModel`1<TCandidate> <Model>k__BackingField;
    [CanBeNullAttribute]
private CodePositionSelectorHighlightingManager myScopeSelectionHighlightingManager;
    [CanBeNullAttribute]
private ITextControl myTextControl;
    [CanBeNullAttribute]
private FreeThreadedGroupingEvent myVisibleTextControlChangesGroupingEvent;
    [CompilerGeneratedAttribute]
private ISignal`1<Unit> <Cancelled>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<Unit> <Committed>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<TCandidate> <SelectedCandidate>k__BackingField;
    [NotNullAttribute]
public CodePositionEditorSelectionModel`1<TCandidate> Model { get; public set; }
    public ISignal`1<Unit> Cancelled { get; }
    public ISignal`1<Unit> Committed { get; }
    public IProperty`1<TCandidate> SelectedCandidate { get; }
    public bool CanShowEditorUI { get; }
    public EditorUICodePositionSelector`1(Lifetime lifetime, ISolution solution, CodePositionEditorSelectionModel`1<TCandidate> model);
    [CompilerGeneratedAttribute]
public CodePositionEditorSelectionModel`1<TCandidate> get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(CodePositionEditorSelectionModel`1<TCandidate> value);
    [CompilerGeneratedAttribute]
public ISignal`1<Unit> get_Cancelled();
    [CompilerGeneratedAttribute]
public ISignal`1<Unit> get_Committed();
    [CompilerGeneratedAttribute]
public IProperty`1<TCandidate> get_SelectedCandidate();
    public bool get_CanShowEditorUI();
    public bool Initialize(IDocument document);
    public bool Initialize(ITextControl textControl);
    public void ShowEditorUI(Lifetime lifetime);
    private void UpdateInterlineHighlighting(ICodePositionCandidate candidate);
}
public interface JetBrains.ReSharper.Feature.Services.EditorUIAdornment.ICodePositionCandidate {
    public abstract virtual bool IsValid();
    public abstract virtual CodePositionPresentationData GetPresentationInfo(Nullable`1& lBrace, Nullable`1& rBrace);
}
public interface JetBrains.ReSharper.Feature.Services.EditorUIAdornment.ICodePositionSelectorEditorPopupProvider {
    [NotNullAttribute]
public abstract virtual IEditorUIAdornment CreateEditorUIAdornment(Lifetime lifetime, EditorUICodePositionSelector`1<TCandidate> selector);
}
[ActionAttribute("JetBrains.ReSharper.Psi.CSharp.Resources.Strings", "DumpDbContextsStructureText")]
public class JetBrains.ReSharper.Feature.Services.EntityFramework.Actions.DumpDbContextsStructureAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionGroupAttribute("2", "10")]
public class JetBrains.ReSharper.Feature.Services.EntityFramework.Actions.DumpEntityFrameworkInternalMenu : object {
    public DumpEntityFrameworkInternalMenu(DumpDbContextsStructureAction dbContextsStructureAction);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.EntityFramework.Actions.ZoneMarker : object {
}
public interface JetBrains.ReSharper.Feature.Services.EntityFramework.EntityAdornment.IEntityFrameworkDiagramActionProvider {
    public abstract virtual Func`2<IDocument, IExecutableItem> CreateShowEntityRelationshipDiagramBulbActionTemplate();
}
[HighlightingSourceAttribute]
public interface JetBrains.ReSharper.Feature.Services.EntityFramework.EntityAdornment.IEntityFrameworkEntityAdornmentHighlightingProvider {
    public abstract virtual IInlayHintWithDescriptionHighlighting CreateAdornmentHighlighting(DocumentRange range, TextRange selectionRange, RichText text, PushToHintMode pushToHintMode, IEntityFrameworkDiagramActionProvider diagramActionProvider, RichText description, IconId iconId);
}
public class JetBrains.ReSharper.Feature.Services.EntityFramework.EntityAdornment.ReSharper.EntityFrameworkEntityAdornmentBulbActionProvider : object {
    private IEntityFrameworkDiagramActionProvider myDiagramActionProvider;
    public EntityFrameworkEntityAdornmentBulbActionProvider(IEntityFrameworkDiagramActionProvider diagramActionProvider);
    public BulbMenuItem CreateShowEntityRelationshipDiagramBulbMenuItem(IDocument document);
    public sealed virtual IEnumerable`1<IntentionAction> CreateChangeVisibilityActions(ISettingsStore settingsStore, IHighlighting highlighting, IAnchor anchor);
    public sealed virtual IEnumerable`1<BulbMenuItem> CreateChangeVisibilityBulbMenuItems(ISettingsStore settingsStore, IHighlighting highlighting);
    public sealed virtual string GetOptionsPageId();
    public BulbMenuItem CreateTurnOffEntityAdornmentBulbMenuItem(ISettingsStore settingsStore);
}
public class JetBrains.ReSharper.Feature.Services.EntityFramework.EntityAdornment.ReSharper.EntityFrameworkEntityAdornmentDataModel : object {
    [NotNullAttribute]
private ISettingsStore mySettingsStore;
    [NotNullAttribute]
private EntityFrameworkEntityAdornmentHighlighting myHighlighting;
    [NotNullAttribute]
private EntityFrameworkEntityAdornmentBulbActionProvider myBulbActionsProvider;
    [CanBeNullAttribute]
private IEnumerable`1<BulbMenuItem> myContextMenuItems;
    [CompilerGeneratedAttribute]
private AdornmentData <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private IPresentableItem <ContextMenuTitle>k__BackingField;
    public AdornmentData Data { get; }
    public IPresentableItem ContextMenuTitle { get; }
    public IEnumerable`1<BulbMenuItem> ContextMenuItems { get; }
    public Nullable`1<TextRange> SelectionRange { get; }
    public EntityFrameworkEntityAdornmentDataModel(ISettingsStore settingsStore, EntityFrameworkEntityAdornmentHighlighting highlighting, EntityFrameworkEntityAdornmentBulbActionProvider bulbActionsProvider);
    [CompilerGeneratedAttribute]
public sealed virtual AdornmentData get_Data();
    [CompilerGeneratedAttribute]
public sealed virtual IPresentableItem get_ContextMenuTitle();
    public sealed virtual IEnumerable`1<BulbMenuItem> get_ContextMenuItems();
    public sealed virtual void ExecuteNavigation(PopupWindowContextSource popupWindowContextSource);
    [NotNullAttribute]
private IEnumerable`1<BulbMenuItem> CreateBulbMenuItems();
    public sealed virtual Nullable`1<TextRange> get_SelectionRange();
}
[DaemonAdornmentProviderAttribute("JetBrains.ReSharper.Feature.Services.EntityFramework.EntityAdornment.ReSharper.EntityFrameworkEntityAdornmentProvider")]
[DaemonTooltipProviderAttribute("JetBrains.ReSharper.Feature.Services.InlayHints.InlayHintTooltipProvider")]
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IntraTextAdornments")]
public class JetBrains.ReSharper.Feature.Services.EntityFramework.EntityAdornment.ReSharper.EntityFrameworkEntityAdornmentHighlighting : object {
    private DocumentRange myRange;
    private static double DefaultOrder;
    [CompilerGeneratedAttribute]
private double <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private PushToHintMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private TextRange <SelectionRange>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityFrameworkEntityAdornmentBulbActionProvider <BulbActionsProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestOutput>k__BackingField;
    public double Order { get; }
    public PushToHintMode Mode { get; }
    public TextRange SelectionRange { get; }
    public RichText Description { get; }
    public RichText Text { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public EntityFrameworkEntityAdornmentBulbActionProvider BulbActionsProvider { get; }
    public IconId Icon { get; }
    public string TestOutput { get; }
    public EntityFrameworkEntityAdornmentHighlighting(DocumentRange range, TextRange selectionRange, RichText text, PushToHintMode pushToHintMode, EntityFrameworkEntityAdornmentBulbActionProvider bulbActionsProvider, RichText description, IconId iconId, double order);
    [CompilerGeneratedAttribute]
public double get_Order();
    [CompilerGeneratedAttribute]
public PushToHintMode get_Mode();
    [CompilerGeneratedAttribute]
public TextRange get_SelectionRange();
    [CompilerGeneratedAttribute]
public sealed virtual RichText get_Description();
    [CompilerGeneratedAttribute]
public RichText get_Text();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    [CompilerGeneratedAttribute]
public EntityFrameworkEntityAdornmentBulbActionProvider get_BulbActionsProvider();
    [CompilerGeneratedAttribute]
public IconId get_Icon();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestOutput();
}
[SolutionComponentAttribute("16")]
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Feature.Services.EntityFramework.EntityAdornment.ReSharper.EntityFrameworkEntityAdornmentHighlightingProvider : object {
    public sealed virtual IInlayHintWithDescriptionHighlighting CreateAdornmentHighlighting(DocumentRange range, TextRange selectionRange, RichText text, PushToHintMode pushToHintMode, IEntityFrameworkDiagramActionProvider diagramActionProvider, RichText description, IconId iconId);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.EntityFramework.EntityAdornment.ReSharper.EntityFrameworkEntityAdornmentProvider : object {
    [NotNullAttribute]
private ISettingsStore mySettingsStore;
    public EntityFrameworkEntityAdornmentProvider(ISettingsStore settingsStore);
    public sealed virtual bool IsValid(IHighlighter highlighter);
    public sealed virtual IAdornmentDataModel CreateDataModel(IHighlighter highlighter);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.EntityFramework.EntityAdornment.ReSharper.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.EntityFramework.EntityAdornment.ZoneMarker : object {
}
public enum JetBrains.ReSharper.Feature.Services.EntityFramework.EntityFrameworkQueryAnalysisMode : Enum {
    public int value__;
    public static EntityFrameworkQueryAnalysisMode Pessimistic;
    public static EntityFrameworkQueryAnalysisMode Optimistic;
    public static EntityFrameworkQueryAnalysisMode Disabled;
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.ReSharper.Psi.CSharp.Resources.Strings", "EntityFrameworkSettingsDescription")]
public class JetBrains.ReSharper.Feature.Services.EntityFramework.EntityFrameworkSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.CSharp.Resources.Strings", "EntityFrameworkAnalysisSettingsEntryDescription")]
public bool EntityFrameworkAnalysisEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.CSharp.Resources.Strings", "EntityFrameworkQueryAnalysisModeSettingsEntryDescription")]
public EntityFrameworkQueryAnalysisMode EntityFrameworkQueryAnalysisMode;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Psi.CSharp.Resources.Strings", "EntityFrameworkAnalysisSettingsDisabledDbContextsDescription")]
public IIndexedEntry`2<string, bool> EntityFrameworkDisabledQueryInspectionsContexts;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.CSharp.Resources.Strings", "EntityFrameworkModelAnalysis_Settings_Enabled_Description")]
public bool EntityFrameworkModelAnalysisEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.CSharp.Resources.Strings", "EntityFrameworkEntityAdornment_Settings_Enabled_Description")]
public bool EntityFrameworkEntityAdornmentEnabled;
}
public static class JetBrains.ReSharper.Feature.Services.EntityFramework.EntityFrameworkSettingsAccessor : object {
    public static string PID;
    [NotNullAttribute]
public static Expression`1<Func`2<EntityFrameworkSettings, bool>> EnableEntityFrameworkAnalysis;
    [NotNullAttribute]
public static Expression`1<Func`2<EntityFrameworkSettings, EntityFrameworkQueryAnalysisMode>> EntityFrameworkQueryAnalysisMode;
    [NotNullAttribute]
public static Expression`1<Func`2<EntityFrameworkSettings, IIndexedEntry`2<string, bool>>> EntityFrameworkDisabledQueryInspectionsContexts;
    [NotNullAttribute]
public static Expression`1<Func`2<EntityFrameworkSettings, bool>> EnableEntityFrameworkModelAnalysis;
    [NotNullAttribute]
public static Expression`1<Func`2<EntityFrameworkSettings, bool>> EnableEntityFrameworkEntityAdornment;
    private static EntityFrameworkSettingsAccessor();
}
public interface JetBrains.ReSharper.Feature.Services.EntityFramework.IEntityFrameworkSettingsManager {
    public bool IsEnabled { get; }
    public EntityFrameworkQueryAnalysisMode QueryAnalysisMode { get; }
    public bool IsModelAnalysisEnabled { get; }
    public bool IsEntityAdornmentEnabled { get; }
    public abstract virtual bool get_IsEnabled();
    public abstract virtual EntityFrameworkQueryAnalysisMode get_QueryAnalysisMode();
    public abstract virtual bool QueryInspectionsDisabledForDbContext(string dbContextFullName);
    public abstract virtual bool get_IsModelAnalysisEnabled();
    public abstract virtual bool get_IsEntityAdornmentEnabled();
}
[ZoneDefinitionAttribute]
[ZoneDefinitionConfigurableFeatureAttribute("Entity Framework", "All features related to Entity Framework", "False")]
public interface JetBrains.ReSharper.Feature.Services.EntityFramework.IEntityFrameworkZone {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.ExcludedFiles.ExcludedFilesDefaultSettings : HaveDefaultSettings`1<ExcludedFilesSettingsKey> {
    public string Name { get; }
    public ExcludedFilesDefaultSettings(ILogger logger, ISettingsSchema settingsSchema);
    public virtual void InitDefaultSettings(ISettingsStorageMountPoint mountPoint);
    public virtual string get_Name();
}
public class JetBrains.ReSharper.Feature.Services.ExcludedFiles.ExcludedFilesInfo : object {
    [CompilerGeneratedAttribute]
private ProjectModelElementPointersSet <FilesAndFoldersToSkip>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectModelElementPointersSet <FilesAndFoldersThirdParty>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PathWildcard> <FileMasksToSkip>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PathWildcard> <FileMasksThirdParty>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Timestamp>k__BackingField;
    private static Int32 modreq(System.Runtime.CompilerServices.IsVolatile) ourTimestamp;
    public ProjectModelElementPointersSet FilesAndFoldersToSkip { get; }
    public ProjectModelElementPointersSet FilesAndFoldersThirdParty { get; }
    public IList`1<PathWildcard> FileMasksToSkip { get; }
    public IList`1<PathWildcard> FileMasksThirdParty { get; }
    public int Timestamp { get; }
    public ExcludedFilesInfo(Lifetime lifetime, ISolution solution, IContextBoundSettingsStore store, ProjectModelElementPointerManager projectModelElementPointerManager, ILogger logger, string name);
    [CompilerGeneratedAttribute]
public ProjectModelElementPointersSet get_FilesAndFoldersToSkip();
    [CompilerGeneratedAttribute]
public ProjectModelElementPointersSet get_FilesAndFoldersThirdParty();
    [CompilerGeneratedAttribute]
public IList`1<PathWildcard> get_FileMasksToSkip();
    [CompilerGeneratedAttribute]
public IList`1<PathWildcard> get_FileMasksThirdParty();
    [CompilerGeneratedAttribute]
public int get_Timestamp();
    [CanBeNullAttribute]
private PathWildcard CreateByRelativePath(string path, ISolution solution);
}
public static class JetBrains.ReSharper.Feature.Services.ExcludedFiles.ExcludedFilesSettingsAccessor : object {
    public static Expression`1<Func`2<ExcludedFilesSettingsKey, IIndexedEntry`2<string, bool>>> FilesAndFoldersToSkip;
    public static Expression`1<Func`2<ExcludedFilesSettingsKey, IIndexedEntry`2<string, bool>>> FilesAndFoldersThirdParty;
    public static Expression`1<Func`2<ExcludedFilesSettingsKey, IIndexedEntry`2<string, bool>>> FileMasksToSkip;
    public static Expression`1<Func`2<ExcludedFilesSettingsKey, IIndexedEntry`2<string, bool>>> FileMasksThirdParty;
    public static Expression`1<Func`2<ExcludedFilesSettingsKey, bool>> SearchBadPerformanceFiles;
    private static ExcludedFilesSettingsAccessor();
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilesExcludedFromCodeAnalysisSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.ExcludedFiles.ExcludedFilesSettingsKey : object {
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilesAndFoldersToSkipSettingDescription")]
public IIndexedEntry`2<string, bool> FilesAndFoldersToSkip;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "FileMasksToSkipSettingDescription")]
public IIndexedEntry`2<string, bool> FileMasksToSkip;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "ThirdPartyFilesAndFoldersSettingDescription")]
public IIndexedEntry`2<string, bool> FilesAndFoldersThirdParty;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "ThirdPartyFileMasksSettingDescription")]
public IIndexedEntry`2<string, bool> FileMasksThirdParty;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "SearchForWebFilesThatCanAffectPerformanceSettingDescription")]
public bool SearchBadPerformanceFiles;
}
public interface JetBrains.ReSharper.Feature.Services.ExcludedFiles.IThirdPartyFilesManager {
    public ISimpleSignal Changed { get; }
    public abstract virtual ThirdPartyFileInfo GetFileInfo(IProjectFile projectFile);
    public abstract virtual ISimpleSignal get_Changed();
}
[OptionsPageAttribute("ThirdPartyCode", "Third-Party Code", "JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons/Library")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.ExcludedFiles.ThirdPartyCodeSettingsPage : CustomSimpleOptionsPage {
    public static string PID;
    public ThirdPartyCodeSettingsPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, IShellLocks locks, ProjectModelElementPresentationService projectModelElementPresentationService, IWindowsHookManager windowsHookManager, FormValidators formValidators, IUIApplication environment, ISolution solution);
}
public class JetBrains.ReSharper.Feature.Services.ExcludedFiles.ThirdPartyFileInfo : ValueType {
    public bool Ignore;
    public bool NonUser;
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.ExcludedFiles.ThirdPartyFilesManager : object {
    private IShellLocks myLocks;
    private ISolution mySolution;
    private Lifetime myLifetime;
    private ProjectModelElementPointerManager myElementPointerManager;
    private SettingsCacheManager mySettingsCacheManager;
    private ILogger myLogger;
    private SettingsKey myKeyExposed;
    private LifetimeDefinition myCacheLifetimeDefinition;
    private object myCacheLockObject;
    [CompilerGeneratedAttribute]
private ISimpleSignal <Changed>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectModelElementPointersSet <FilesAndFoldersToSkip>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectModelElementPointersSet <FilesAndFoldersThirdParty>k__BackingField;
    private static Key`1<CachedThirdPartyFileInfo> ourThirdPartyFileInfoKey;
    public ISimpleSignal Changed { get; }
    public ProjectModelElementPointersSet FilesAndFoldersToSkip { get; }
    public ProjectModelElementPointersSet FilesAndFoldersThirdParty { get; }
    public SettingsKey KeyExposed { get; }
    public ThirdPartyFilesManager(IShellLocks locks, ISettingsStore settingsStore, ISolution solution, Lifetime lifetime, ProjectModelElementPointerManager elementPointerManager, SettingsCacheManager settingsCacheManager, ILogger logger, ISolutionLoadTasksScheduler solutionLoadTasksScheduler);
    private static ThirdPartyFilesManager();
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_Changed();
    [CompilerGeneratedAttribute]
public ProjectModelElementPointersSet get_FilesAndFoldersToSkip();
    [CompilerGeneratedAttribute]
public ProjectModelElementPointersSet get_FilesAndFoldersThirdParty();
    private void UpdateFilesAndFolders();
    private ExcludedFilesInfo GetInfo(IProjectModelElement projectModelElement);
    public sealed virtual SettingsKey get_KeyExposed();
    public sealed virtual ExcludedFilesInfo ReadData(Lifetime lifetime, IContextBoundSettingsStore store);
    private static bool Check(IProjectFile projectFile, ProjectModelElementPointersSet pointers, IList`1<PathWildcard> masks);
    public sealed virtual ThirdPartyFileInfo GetFileInfo(IProjectFile projectFile);
    [CompilerGeneratedAttribute]
private void <UpdateFilesAndFolders>b__20_0();
}
[PsiComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.ExcludedFiles.UserSpecifiedProjectPropertiesProvider : object {
    private IThirdPartyFilesManager myThirdPartyFilesManager;
    private DaemonExcludedFilesManager myFileToSkipChecker;
    public double Order { get; }
    public UserSpecifiedProjectPropertiesProvider(IThirdPartyFilesManager thirdPartyFilesManager, DaemonExcludedFilesManager fileToSkipChecker);
    public sealed virtual double get_Order();
    public sealed virtual IPsiSourceFileProperties GetPsiProperties(IPsiSourceFileProperties prevProperties, IProject project, IProjectFile projectFile, IPsiSourceFile sourceFile);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.ExcludedFiles.ZoneMarker : object {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Explanatory.CodeInspectionWikiDataProvider : object {
    [CanBeNullAttribute]
private JetBrainsResourceMappingAccessor myResourceMappingAccessor;
    private Dictionary`2<string, string> myData;
    public CodeInspectionWikiDataProvider(JetBrainsResourceMappingAccessor resourceMappingAccessor);
    protected virtual string GetProductName();
    [CanBeNullAttribute]
private Dictionary`2<string, string> LoadData(string content);
    private Dictionary`2<string, string> FillDictionary(XmlNodeList nodes, string defaultProduct);
    public sealed virtual bool TryGetValue(string attributeId, String& url);
}
public interface JetBrains.ReSharper.Feature.Services.Explanatory.ICodeInspectionWikiDataProvider {
    public abstract virtual bool TryGetValue(string attributeId, String& url);
}
public class JetBrains.ReSharper.Feature.Services.ExpressionSelection.ExpressionSelectionProviderBase`1 : object {
    [CanBeNullAttribute]
protected TExpressionRequired GetExpressionInRangeInternal(IFile file, ITokenNode left, ITokenNode right, bool exactRange, Predicate`1<TExpressionRequired> predicate);
    public virtual TExpressionRequired GetExpressionInRange(IFile file, DocumentRange range, bool exactRange, Predicate`1<TExpressionRequired> predicate);
    public sealed virtual TExpressionRequired GetExpression(IFile file, DocumentRange range, bool exactRange, Predicate`1<TExpressionRequired> predicate);
    [CanBeNullAttribute]
private TExpressionRequired FindLargestExpression(IFile file, ITreeNode tokenAt, TreeOffset lineStart, Predicate`1<TExpressionRequired> predicate);
    [CanBeNullAttribute]
private TExpressionRequired FindLargestExpression(ITreeNode treeNode, TreeOffset lineStart, Predicate`1<TExpressionRequired> predicate);
    protected virtual bool StopLargestExpressionSearchAtNode(ITreeNode node);
    protected virtual bool IsTokenSkipped(ITokenNode token);
}
public static class JetBrains.ReSharper.Feature.Services.ExpressionSelection.ExpressionSelectionUtil : object {
    [CanBeNullAttribute]
[PureAttribute]
private static IExpressionSelectionProvider GetProvider(PsiLanguageType language);
    [CanBeNullAttribute]
[PureAttribute]
public static TExpression GetSelectedExpression(ISolution solution, ITextControl textControl, bool exactRange);
    [CanBeNullAttribute]
[PureAttribute]
public static TExpression GetSelectedExpression(ISolution solution, ITextControl textControl, bool exactRange, Predicate`1<TExpression> predicate);
    [CanBeNullAttribute]
[PureAttribute]
public static TExpressionRequired GetExpressionInRange(IFile file, DocumentRange range, bool exactRange, Predicate`1<TExpressionRequired> predicate);
    [CanBeNullAttribute]
[PureAttribute]
public static TExpression GetSelectedExpression(ISolution solution, DocumentRange documentRange, bool exactRange, Predicate`1<TExpression> predicate);
}
public interface JetBrains.ReSharper.Feature.Services.ExpressionSelection.IExpressionSelectionProvider {
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual TExpression GetExpression(IFile file, DocumentRange range, bool exactRange, Predicate`1<TExpression> predicate);
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual TExpression GetExpressionInRange(IFile file, DocumentRange range, bool exactRange, Predicate`1<TExpression> predicate);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.ExternalSource.CompilerGeneratedCodeUtil : object {
    private static Char[] ourIllegalSymbols;
    private static HashSet`1<string> ourForbiddenAttributes;
    private static CompilerGeneratedCodeUtil();
    [ExtensionAttribute]
private static bool HasIllegalSymbolsInName(IDeclaredElement element);
    [ExtensionAttribute]
private static bool IsForbiddenAttribute(IDeclaredElement element);
    [ExtensionAttribute]
private static bool IsPrivate(IDeclaredElement element);
    [ExtensionAttribute]
private static bool IsCompilerGeneratedMain(IDeclaredElement element);
    [ExtensionAttribute]
private static bool IsCompilerGeneratedRecordClone(IDeclaredElement element);
    [CanBeNullAttribute]
public static IMethod TryGetTopLevelEntryPoint(ITypeElement typeElement);
    public static bool IsTopLevelProgram(ITypeElement typeElement);
    public static bool IsTopLevelEntryPoint(ITypeMember method);
    [ExtensionAttribute]
private static bool IsTopLevelProgramOrEntryPoint(IDeclaredElement element);
    [ExtensionAttribute]
private static bool IsHereditaryCompilerGenerated(IDeclaredElement element);
    [ExtensionAttribute]
public static bool IsBadCompilerGenerated(IDeclaredElement element);
    [ExtensionAttribute]
public static bool IsBadCompilerGenerated(IOccurrence occurrence);
    [ExtensionAttribute]
public static ICollection`1<IOccurrence> FilterBadCompilerGenerated(ICollection`1<IOccurrence> occurrences);
    [ExtensionAttribute]
public static IEnumerable`1<IOccurrence> FilterBadCompilerGenerated(IEnumerable`1<IOccurrence> occurrences);
    [ExtensionAttribute]
public static IEnumerable`1<T> FilterBadCompilerGenerated(IEnumerable`1<T> elements);
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.ExternalSource.DefaultExternalSourcesPdbGenerator : object {
    public virtual bool CanGenerate();
    public virtual void EnableDebuggingForAssemblies(IEnumerable`1<FileSystemPath> assemblies, IDebugProgram program);
    public virtual void EnableDebuggingForDecompiledSource(FileSystemPath decompiledSourceFile, IDebugProgram program);
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.ExternalSource.DefaultVsDebuggerSettings : object {
    public bool IsAvailable { get; }
    public FileSystemPath SymbolCacheFolder { get; public set; }
    public bool JustMyCode { get; public set; }
    public virtual bool get_IsAvailable();
    public virtual FileSystemPath get_SymbolCacheFolder();
    public virtual void set_SymbolCacheFolder(FileSystemPath value);
    public virtual bool get_JustMyCode();
    public virtual void set_JustMyCode(bool value);
}
public class JetBrains.ReSharper.Feature.Services.ExternalSource.ExternalSourcesMapping : object {
    [CompilerGeneratedAttribute]
private IAssembly <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <File>k__BackingField;
    [CompilerGeneratedAttribute]
private IExternalSourcesProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUserFile>k__BackingField;
    [NotNullAttribute]
public IAssembly Assembly { get; }
    [NotNullAttribute]
public FileSystemPath File { get; }
    [NotNullAttribute]
public IExternalSourcesProvider Provider { get; }
    public bool IsUserFile { get; }
    public ExternalSourcesMapping(IAssembly assembly, FileSystemPath file, IExternalSourcesProvider provider, bool isUserFile);
    [CompilerGeneratedAttribute]
public IAssembly get_Assembly();
    [CompilerGeneratedAttribute]
public FileSystemPath get_File();
    [CompilerGeneratedAttribute]
public IExternalSourcesProvider get_Provider();
    [CompilerGeneratedAttribute]
public bool get_IsUserFile();
}
public enum JetBrains.ReSharper.Feature.Services.ExternalSource.ExternalSourcesNavigationMode : Enum {
    public int value__;
    public static ExternalSourcesNavigationMode Disabled;
    public static ExternalSourcesNavigationMode ObjectBrowser;
    public static ExternalSourcesNavigationMode AssemblyExplorer;
    public static ExternalSourcesNavigationMode Sources;
}
public abstract class JetBrains.ReSharper.Feature.Services.ExternalSource.ExternalSourcesProviderBase : object {
    [CompilerGeneratedAttribute]
private string <PresentableShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public string PresentableShortName { get; }
    public string Id { get; }
    public int Priority { get; }
    protected ExternalSourcesProviderBase(string presentableShortName, string id, int priority);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PresentableShortName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Priority();
    public virtual bool IsApplicableForNavigation(CompiledElementNavigationInfo navigationInfo, bool ignoreOptions);
    public virtual bool IsPreferredForNavigation();
    public virtual ExternalSourcesMapping MapFileToAssembly(FileSystemPath file);
    public abstract virtual IReadOnlyCollection`1<ExternalSourcesMapping> NavigateToSources(ICompiledElement compiledElement, ITaskExecutor taskExecutor);
    public virtual IReadOnlyCollection`1<ExternalSourcesMapping> NavigateToSources(CompiledElementNavigationInfo navigationInfo, ITaskExecutor taskExecutor);
    public virtual ExtendedDebugData GetTypeDebugData(ICompiledElement type, ITaskExecutor taskExecutor);
    public virtual ExtendedDebugData GetSourceDebugData(FileSystemPath file);
    public virtual bool IsPreferredForGettingDebugData(FileSystemPath file);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ExternalSourcesNavigationOptionsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.ExternalSource.ExternalSourcesSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "NavigationModeSettingDescription")]
public ExternalSourcesNavigationMode NavigationMode;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FirstTimeNavigationDialogHasBeenShownSettingDescription")]
public bool FirstTimeFormShown;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "LockExternalSourcesFilesLocatedOnLocalMachineSettingDescription")]
public bool LockUserFiles;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowNonPublicCompiledItemsInGoToResultsSettingDescription")]
public bool ShowNonPublicCompiledElementsInGoto;
}
public static class JetBrains.ReSharper.Feature.Services.ExternalSource.ExternalSourcesSettingsUtil : object {
    public static IProperty`1<bool> GetShowNonPublicCompiledElementsProperty(Lifetime lifetime, ISettingsStore settingsStore);
    public static IProperty`1<bool> GetShowNonPublicCompiledElementsProperty2(Lifetime lifetime, ISettingsStore settingsStore, ApartmentForNotifications apartmentForNotifications);
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSource.IDebugProgram {
    public abstract virtual bool ContainsAssembly(FileSystemPath assembly, Boolean& symbolsLoaded);
    public abstract virtual void LoadSymbolsForAssembly(FileSystemPath assembly);
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSource.IExternalSourcesPdbGenerator {
    public abstract virtual bool CanGenerate();
    public abstract virtual void EnableDebuggingForAssemblies(IEnumerable`1<FileSystemPath> assemblies, IDebugProgram program);
    public abstract virtual void EnableDebuggingForDecompiledSource(FileSystemPath decompiledSourceFile, IDebugProgram program);
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSource.IExternalSourcesProvider {
    [NotNullAttribute]
public string PresentableShortName { get; }
    [NotNullAttribute]
public string Id { get; }
    public int Priority { get; }
    public abstract virtual string get_PresentableShortName();
    public abstract virtual string get_Id();
    public abstract virtual int get_Priority();
    public abstract virtual bool IsApplicableForNavigation(CompiledElementNavigationInfo navigationInfo, bool ignoreOptions);
    public abstract virtual bool IsPreferredForNavigation();
    [CanBeNullAttribute]
public abstract virtual ExternalSourcesMapping MapFileToAssembly(FileSystemPath file);
    [CanBeNullAttribute]
public abstract virtual IReadOnlyCollection`1<ExternalSourcesMapping> NavigateToSources(ICompiledElement compiledElement, ITaskExecutor taskExecutor);
    [CanBeNullAttribute]
public abstract virtual IReadOnlyCollection`1<ExternalSourcesMapping> NavigateToSources(CompiledElementNavigationInfo navigationInfo, ITaskExecutor taskExecutor);
    [CanBeNullAttribute]
public abstract virtual ExtendedDebugData GetTypeDebugData(ICompiledElement type, ITaskExecutor taskExecutor);
    [CanBeNullAttribute]
public abstract virtual ExtendedDebugData GetSourceDebugData(FileSystemPath file);
    public abstract virtual bool IsPreferredForGettingDebugData(FileSystemPath file);
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSource.INavigationModeProvider {
    public abstract virtual ExternalSourcesNavigationMode GetNavigationMode();
    public abstract virtual ExternalSourcesNavigationMode GetNavigationMode(IDataContext context);
    public abstract virtual bool UseSymbolFiles();
    public abstract virtual bool DownloadPdb();
}
public interface JetBrains.ReSharper.Feature.Services.ExternalSource.IVsDebuggerSettings {
    public bool IsAvailable { get; }
    [CanBeNullAttribute]
public FileSystemPath SymbolCacheFolder { get; public set; }
    public bool JustMyCode { get; public set; }
    public abstract virtual bool get_IsAvailable();
    public abstract virtual FileSystemPath get_SymbolCacheFolder();
    public abstract virtual void set_SymbolCacheFolder(FileSystemPath value);
    public abstract virtual bool get_JustMyCode();
    public abstract virtual void set_JustMyCode(bool value);
}
[ZoneDefinitionAttribute]
public class JetBrains.ReSharper.Feature.Services.ExternalSource.MetadataTreeZone : object {
}
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.FeaturesStatistics.ActionsSolutionCounterCollector : ActionsCounterCollector {
    private SolutionsManager mySolutionsManager;
    public ActionsSolutionCounterCollector(SolutionsManager solutionsManager, FeatureUsageLogger featureUsageLogger);
    public virtual void RegisterAction(ActionEventArgs args);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.FeaturesStatistics.ApplicationSettingsUsagesCollectorHider : object {
    public sealed virtual bool AreWeSafe();
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.FeaturesStatistics.BulbActionsOrderTracking : object {
    [CompilerGeneratedAttribute]
private IProperty`1<int> <TotalCounter>k__BackingField;
    public IProperty`1<int> TotalCounter { get; }
    public BulbActionsOrderTracking(Lifetime lifetime, BulbMenuComponent bulbMenu, ActivityTracking activityTracking);
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_TotalCounter();
    [CanBeNullAttribute]
private static IBulbAction TryGetBulbAction(object obj);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.FeaturesStatistics.FrameworkVersionsCollector : SolutionUsagesCollector {
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private EventLogGroup myGroup;
    [NotNullAttribute]
private static AssemblyNameInfo ourEntityFrameworkCoreReferenceName;
    [NotNullAttribute]
private static AssemblyNameInfo ourEntityFrameworkReferenceName;
    [NotNullAttribute]
private static AssemblyNameInfo ourDapperReferenceName;
    [NotNullAttribute]
private static AssemblyNameInfo ourNHibernateReferenceName;
    [NotNullAttribute]
private static AssemblyNameInfo ourLinq2dbReferenceName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private EventId2`2<string, string> myEntityFramework;
    private EventId1`1<string> myDapperEvent;
    private EventId1`1<string> myNHibernateEvent;
    private EventId1`1<string> myLinq2dbEvent;
    private EventId myDevExpressEvent;
    public FrameworkVersionsCollector(FeatureUsageLogger logger, ISolution solution);
    private static FrameworkVersionsCollector();
    [NotNullAttribute]
public virtual EventLogGroup GetGroup();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Feature.Services.FeaturesStatistics.FrameworkVersionsCollector/<GetMetricsAsync>d__14")]
[ItemNotNullAttribute]
public virtual Task`1<ISet`1<MetricEvent>> GetMetricsAsync(Lifetime lifetime);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.FeaturesStatistics.FuSolutionStateUsagesLogger : object {
    private Lifetime myLifetime;
    private ISolution mySolution;
    private IComponentContainer myComponentContainer;
    private FeatureUsageLogger myFeatureUsageLogger;
    private ILogger myLogger;
    public FuSolutionStateUsagesLogger(Lifetime lifetime, ISolution solution, IComponentContainer componentContainer, FeatureUsageLogger featureUsageLogger, ILogger logger);
    public void LogProjectStates(Lifetime lifetime);
    private void LogMetricsOrError(EventLogGroup group, ISet`1<MetricEvent> metrics);
    private void LogUsagesAsStateEvents(EventLogGroup group, ISet`1<MetricEvent> metrics);
    private static FeatureUsageData AddSolution(ISolution solution);
}
[SolutionComponentAttribute("10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.FeaturesStatistics.NuGetInstalledCollector : SolutionUsagesCollector {
    private NuGetLockFileTracker myLockFileTracker;
    private EventLogGroup myGroup;
    private EventId1`1<string> myPackageEvent;
    private String[] myAllowedPackages;
    public NuGetInstalledCollector(FeatureUsageLogger featureUsageLogger, NuGetLockFileTracker lockFileTracker);
    public virtual EventLogGroup GetGroup();
    public virtual Task`1<ISet`1<MetricEvent>> GetMetricsAsync(Lifetime lifetime);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.FeaturesStatistics.SolutionProjectsCollector : SolutionUsagesCollector {
    private IList`1<AnnotatedValue> myAllowedTechnologiesAnnotated;
    private IList`1<string> myObsoleteTechnologies;
    private IList`1<string> myAllowedProjectFiles;
    private IList`1<string> myAllowedTfidIdentifiers;
    private ISolution mySolution;
    [CanBeNullAttribute]
private ILogger myLogger;
    private EventLogGroup myGroup;
    private EventId1`1<IList`1<string>> myTechnologiesEvent;
    private EventId2`2<string, string> myTechnologyEvent;
    private EventId1`1<IList`1<string>> myProjectFilesEvent;
    private EventId2`2<string, string> myProjectFileEvent;
    private EventId1`1<IList`1<string>> myTargetFrameworksIds;
    private EventId2`2<string, string> myTargetFrameworkId;
    public SolutionProjectsCollector(ISolution solution, FeatureUsageLogger featureUsageLogger, ILogger logger);
    private void DumpAnnotatedValues();
    public virtual EventLogGroup GetGroup();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Feature.Services.FeaturesStatistics.SolutionProjectsCollector/<GetMetricsAsync>d__17")]
public virtual Task`1<ISet`1<MetricEvent>> GetMetricsAsync(Lifetime lifetime);
    private string GetAverageCount(int value);
    private static IEnumerable`1<string> GetTargetFrameworks(IProject project);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.FeaturesStatistics.SolutionSettingsUsagesCollector : SolutionUsagesCollector {
    private SettingsUsagesCollector myCollector;
    public SolutionSettingsUsagesCollector(FeatureUsageLogger featureUsageLogger, IShellLocks locks, ISettingsStore settingsStore, UserFriendlySettingsLayers userFriendlySettingsLayers, UserInjectedSettingsLayers userInjectedSettingsLayers, GlobalSettings globalSettings, SolutionSettings solutionSettings, ISettingsUsagesCollectorShellProtector protector);
    public virtual EventLogGroup GetGroup();
    public virtual Task`1<ISet`1<MetricEvent>> GetMetricsAsync(Lifetime lifetime);
}
[SolutionComponentAttribute("4")]
public class JetBrains.ReSharper.Feature.Services.FeaturesStatistics.SolutionStatisticsJobsScheduler : object {
    private Lifetime myLifetime;
    private ILogger myLogger;
    private StatisticsUploadAssistant myStatisticsUploadAssistant;
    private IThreading myThreading;
    private ISolutionLoadTasksScheduler mySolutionScheduler;
    private FuSolutionStateUsagesLogger mySolutionStateUsagesLogger;
    private IFeaturesStartupMonitor myFeaturesStartupMonitor;
    private SequentialLifetimes myCollectSequence;
    private static int LOG_PROJECTS_STATES_DELAY_IN_MIN;
    public SolutionStatisticsJobsScheduler(Lifetime lifetime, ILogger logger, ISolution solution, StatisticsActivator statisticsActivator, StatisticsUploadAssistant statisticsUploadAssistant, IThreading threading, ISolutionLoadTasksScheduler solutionScheduler, FuSolutionStateUsagesLogger solutionStateUsagesLogger, IFeaturesStartupMonitor featuresStartupMonitor);
    private void RunStatesLogging();
    [CompilerGeneratedAttribute]
private void <RunStatesLogging>b__10_0();
    [CompilerGeneratedAttribute]
private bool <RunStatesLogging>b__10_1(bool startupFinished);
    [CompilerGeneratedAttribute]
private void <RunStatesLogging>b__10_2();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Feature.Services.FeaturesStatistics.SolutionStatisticsJobsScheduler/<<RunStatesLogging>b__10_3>d")]
[CompilerGeneratedAttribute]
private Task <RunStatesLogging>b__10_3();
    [CompilerGeneratedAttribute]
private void <RunStatesLogging>b__10_4(Lifetime l);
}
public abstract class JetBrains.ReSharper.Feature.Services.FeaturesStatistics.SolutionUsagesCollector : FeatureUsagesCollector {
    public sealed virtual string GroupType();
    public virtual Task`1<ISet`1<MetricEvent>> GetMetricsAsync(Lifetime lifetime);
}
[ActionAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "DisableAllTipsActionText")]
public class JetBrains.ReSharper.Feature.Services.FeatureSuggestion.Actions.DisableFeatureSuggestionsAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionGroupAttribute("FeatureSuggestionOptionsActions", "0", "16")]
public class JetBrains.ReSharper.Feature.Services.FeatureSuggestion.Actions.FeatureSuggestionOptionsActions : object {
}
[ActionGroupAttribute("1", "10")]
public class JetBrains.ReSharper.Feature.Services.FeatureSuggestion.Actions.FeatureSuggestionOptionsSwitcher : object {
    public FeatureSuggestionOptionsSwitcher(DisableFeatureSuggestionsAction disableFeatureSuggestionsAction);
    public sealed virtual bool Update(IDataContext context, ActionPresentation actionPresentation);
}
[ActionAttribute("Manage Feature Suggestion")]
public class JetBrains.ReSharper.Feature.Services.FeatureSuggestion.Actions.Internal.ShowFeatureSuggestionToolWindow : ActivateToolWindowActionHandler`1<FeatureSuggestionToolWindowDescriptor> {
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.FeatureSuggestion.Actions.Internal.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.FeatureSuggestion.Actions.ZoneMarker : object {
}
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.FeatureSuggestion.FeatureSuggestionInvocationCollector : CounterUsagesCollector {
    private SolutionsManager mySolutionsManager;
    private EventLogGroup myGroup;
    private EventId1`1<Type> myShownEvent;
    private EventId2`2<UserResponse, Type> myRespondedEvent;
    public FeatureSuggestionInvocationCollector(FeatureUsageLogger featureUsageLogger, SolutionsManager solutionsManager);
    public virtual EventLogGroup GetGroup();
    public void LogShown(Type suggesterType);
    public void LogAccepted(Type suggesterType);
    public void LogRejected(Type suggesterType);
    public void LogDisabled(Type suggesterType);
    public void LogDisabledAll(Type suggesterType);
    public void LogHelpAsked(Type suggesterType);
    private void LogInteracted(Type suggesterType, UserResponse userResponse);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.FeatureSuggestion.FeatureSuggestionLiveSettings : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
private IContextBoundSettingsStoreLive myBoundSettings;
    [NotNullAttribute]
private ConcurrentDictionary`2<Type, IProperty`1<bool>> myStateMap;
    [CompilerGeneratedAttribute]
private Property`1<FeatureSuggestionMode> <SuggestionMode>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<TimeSpan> <MinIntervalBetweenSuggestions>k__BackingField;
    [NotNullAttribute]
private static Expression`1<Func`2<FeatureSuggestionManagerSettings, IIndexedEntry`2<string, bool>>> DisabledSuggesters;
    [NotNullAttribute]
public Property`1<FeatureSuggestionMode> SuggestionMode { get; }
    [NotNullAttribute]
public IProperty`1<TimeSpan> MinIntervalBetweenSuggestions { get; }
    public FeatureSuggestionLiveSettings(Lifetime lifetime, ISettingsStore settingsStore, IThreading threading);
    private static FeatureSuggestionLiveSettings();
    [CompilerGeneratedAttribute]
public Property`1<FeatureSuggestionMode> get_SuggestionMode();
    [CompilerGeneratedAttribute]
public IProperty`1<TimeSpan> get_MinIntervalBetweenSuggestions();
    [NotNullAttribute]
public IProperty`1<bool> GetFeatureSuggesterState(IFeatureSuggester featureSuggester);
    private static IProperty`1<TimeSpan> GetDefaultIntervalBetweenSuggestionsLive(IContextBoundSettingsStoreLive boundSettings, Lifetime lifetime, ApartmentForNotifications apartmentForNotifications);
    [NotNullAttribute]
private static IProperty`1<FeatureSuggestionMode> GetSuggestionModeLive(IContextBoundSettingsStoreLive boundSettings, Lifetime lifetime, ApartmentForNotifications apartmentForNotifications);
    private static void DisableSuggester(IContextBoundSettingsStore boundSettings, Type suggesterType);
    private static void EnableSuggester(IContextBoundSettingsStore boundSettings, Type suggesterType);
    private static bool IsSuggesterEnabled(IContextBoundSettingsStore boundSettings, Type suggesterType);
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <GetFeatureSuggesterState>g__StateFactory|10_0(Type suggesterType);
}
[SolutionComponentAttribute("4")]
public class JetBrains.ReSharper.Feature.Services.FeatureSuggestion.FeatureSuggestionManager : object {
    private Lifetime myLifetime;
    private ILogger myLogger;
    [NotNullAttribute]
private IUsageStatisticsCounters myUsageStatisticsCounters;
    [NotNullAttribute]
private FeatureSuggestionInvocationCollector myInvocationCollector;
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private Dictionary`2<string, int> mySuggestionIdToShowsCount;
    private DateTime myLastShownSuggestionTimestamp;
    [CanBeNullAttribute]
private IFeatureSuggestion myCurrentSuggestion;
    [CompilerGeneratedAttribute]
private FeatureSuggestionLiveSettings <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadyImmutableList`1<IFeatureSuggester> <FeatureSuggesters>k__BackingField;
    [NotNullAttribute]
public FeatureSuggestionLiveSettings Settings { get; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public IReadyImmutableList`1<IFeatureSuggester> FeatureSuggesters { get; }
    public FeatureSuggestionManager(Lifetime lifetime, ILogger logger, FeatureSuggestionLiveSettings featureSuggestionLiveSettings, IShellLocks locks, IUsageStatisticsCounters usageStatisticsCounters, IReadyImmutableList`1<IFeatureSuggester> featureSuggesters, FeatureSuggestionInvocationCollector invocationCollector);
    [CompilerGeneratedAttribute]
public FeatureSuggestionLiveSettings get_Settings();
    [CompilerGeneratedAttribute]
public IReadyImmutableList`1<IFeatureSuggester> get_FeatureSuggesters();
    private void HandleSuggestion(IFeatureSuggester suggester, IFeatureSuggestion suggestion);
    private bool ShouldShowSuggestion(IFeatureSuggester suggester, string suggestionId);
    private void PermanentlyDisableSuggester(IFeatureSuggester suggester);
    private void SubscribeToDisableNotifications(IFeatureSuggester suggester);
    private static string GetSuggestionId(IFeatureSuggester suggester);
    public static void DisableAllSuggestions();
    [CompilerGeneratedAttribute]
private void <.ctor>b__14_0(Lifetime modeLifetime, FeatureSuggestionMode mode);
}
[SettingsKeyAttribute("JetBrains.IDE.FeatureSuggestion.FeatureSuggestionSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FeatureSuggestionManagerSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.FeatureSuggestion.FeatureSuggestionManagerSettings : object {
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "SuggestersStateSettingDescription")]
public IIndexedEntry`2<string, bool> DisabledSuggesters;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "CurrentModeSettingDescription")]
public FeatureSuggestionMode Mode;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "DefaultIntervalBetweenSuggestionsInSecondsSettingDescription")]
public int DefaultIntervalBetweenSuggestionsInSeconds;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "IgnoreIndependentModeSettingDescription")]
public bool IgnoreIndependentMode;
}
[ShellComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.FeatureSuggestion.FeatureSuggestionNotificationProvider : object {
    [CanBeNullAttribute]
private IFeatureSuggestionNotifier mySuggestionNotifier;
    public FeatureSuggestionNotificationProvider(IFeatureSuggestionNotifier suggestionNotifier);
    public virtual ISuggestionNotification TryCreate(Lifetime suggesterLifetime, Action onAccept, Action onDisable, Action onClose);
    [CompilerGeneratedAttribute]
private void <TryCreate>b__2_0(SuggestionNotification suggestion);
}
public class JetBrains.ReSharper.Feature.Services.FeatureSuggestion.OverridingResolveContext : object {
    [NotNullAttribute]
private IValueResolveContext myDefaultResolveContext;
    [NotNullAttribute]
private HashMap`2<Type, object> myOverrideTable;
    private ValueResolveRequester JetBrains.Application.Components.IValueResolveContext.Requester { get; }
    public OverridingResolveContext(IValueResolveContext defaultResolveContext);
    public OverridingResolveContext WithValue(TValue value);
    public sealed virtual IValueDescriptor Resolve(ResolveRequest request, ValueResolveFlags flags);
    private sealed virtual override ValueResolveRequester JetBrains.Application.Components.IValueResolveContext.get_Requester();
}
public class JetBrains.ReSharper.Feature.Services.FeatureSuggestion.SuggestionNotification : object {
    private LifetimeDefinition myLifetimeDefinition;
    private ReadonlyToken myReadonlyToken;
    private Action`1<SuggestionNotification> myShowAction;
    [CanBeNullAttribute]
private string myCloseButtonTooltip;
    [CompilerGeneratedAttribute]
private ISimpleSignal <Shown>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <Accepted>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <Rejected>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <HelpAsked>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowDisableAction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowDisableAllAction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoNotDisableOnClose>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <IconId>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <SuggestionMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AcceptText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisableText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisableAllText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LearnMoreText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelpUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private HelpId <HelpTopicId>k__BackingField;
    public Lifetime Lifetime { get; }
    public ISimpleSignal Shown { get; }
    public ISimpleSignal Accepted { get; }
    public ISimpleSignal Rejected { get; }
    public ISimpleSignal Disabled { get; }
    public ISimpleSignal HelpAsked { get; }
    public bool ShowDisableAction { get; public set; }
    public bool ShowDisableAllAction { get; public set; }
    public bool DoNotDisableOnClose { get; public set; }
    public IconId IconId { get; public set; }
    public RichText SuggestionMessage { get; public set; }
    public string ShortDescription { get; public set; }
    public string AcceptText { get; public set; }
    public string DisableText { get; public set; }
    public string DisableAllText { get; public set; }
    public string LearnMoreText { get; public set; }
    public string HelpUrl { get; public set; }
    public HelpId HelpTopicId { get; public set; }
    public string CloseButtonTooltip { get; public set; }
    public SuggestionNotification(Lifetime suggesterLifetime, Action`1<SuggestionNotification> showAction, Action onAccept, Action onDisable, Action onReject);
    public sealed virtual Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_Shown();
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_Accepted();
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_Rejected();
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_Disabled();
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_HelpAsked();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowDisableAction();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowDisableAction(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowDisableAllAction();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowDisableAllAction(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DoNotDisableOnClose();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DoNotDisableOnClose(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IconId get_IconId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IconId(IconId value);
    [CompilerGeneratedAttribute]
public sealed virtual RichText get_SuggestionMessage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SuggestionMessage(RichText value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ShortDescription();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShortDescription(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AcceptText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AcceptText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisableText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisableText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisableAllText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisableAllText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LearnMoreText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LearnMoreText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_HelpUrl();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HelpUrl(string value);
    [CompilerGeneratedAttribute]
public sealed virtual HelpId get_HelpTopicId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HelpTopicId(HelpId value);
    public sealed virtual string get_CloseButtonTooltip();
    public sealed virtual void set_CloseButtonTooltip(string value);
    public sealed virtual void Show();
    public sealed virtual void Accept();
    public sealed virtual void Reject();
    public sealed virtual void Disable();
    public sealed virtual void Close();
}
public class JetBrains.ReSharper.Feature.Services.FeatureSuggestion.SuggestionNotificationViewModel : AAutomation {
    [NotNullAttribute]
private ISuggestionNotification mySuggestion;
    [CompilerGeneratedAttribute]
private IProperty`1<ImageSource> <IconImageSource>k__BackingField;
    public Lifetime Lifetime { get; }
    [NotNullAttribute]
public IProperty`1<ImageSource> IconImageSource { get; }
    [CanBeNullAttribute]
public RichText SuggestionMessage { get; }
    [CanBeNullAttribute]
public string AcceptText { get; }
    [CanBeNullAttribute]
public string DisableText { get; }
    [CanBeNullAttribute]
public string DisableAllText { get; }
    [CanBeNullAttribute]
public string LearnMoreText { get; }
    [CanBeNullAttribute]
public string CloseButtonTooltip { get; }
    public bool AcceptVisibility { get; }
    public bool DisableVisibility { get; }
    public bool DisableAllVisibility { get; }
    public bool LearnMoreVisibility { get; }
    [NotNullAttribute]
public ICommand AcceptSuggestionCommand { get; }
    [NotNullAttribute]
public ICommand DisableSuggestionCommand { get; }
    [NotNullAttribute]
public ICommand DisableAllSuggestionsCommand { get; }
    [NotNullAttribute]
public ICommand CloseSuggestionCommand { get; }
    [NotNullAttribute]
public ICommand LearnMoreCommand { get; }
    public SuggestionNotificationViewModel(ISuggestionNotification suggestion);
    public sealed virtual Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public IProperty`1<ImageSource> get_IconImageSource();
    public RichText get_SuggestionMessage();
    public string get_AcceptText();
    public string get_DisableText();
    public string get_DisableAllText();
    public string get_LearnMoreText();
    public string get_CloseButtonTooltip();
    public bool get_AcceptVisibility();
    public bool get_DisableVisibility();
    public bool get_DisableAllVisibility();
    public bool get_LearnMoreVisibility();
    public ICommand get_AcceptSuggestionCommand();
    public ICommand get_DisableSuggestionCommand();
    public ICommand get_DisableAllSuggestionsCommand();
    public ICommand get_CloseSuggestionCommand();
    public ICommand get_LearnMoreCommand();
    public sealed virtual void Close();
    public sealed virtual void OnEscape();
    [CompilerGeneratedAttribute]
private void <get_CloseSuggestionCommand>b__34_0();
    [CompilerGeneratedAttribute]
private void <get_LearnMoreCommand>b__36_0();
}
public class JetBrains.ReSharper.Feature.Services.FeatureSuggestion.UI.FeatureSuggesterViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabled>k__BackingField;
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsEnabled { get; }
    public FeatureSuggesterViewModel(string name, IProperty`1<bool> isEnabled);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsEnabled();
}
[UsedImplicitlyAttribute]
public class JetBrains.ReSharper.Feature.Services.FeatureSuggestion.UI.FeatureSuggestionToolViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private IProperty`1<FeatureSuggestionMode> <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private IListEvents`1<FeatureSuggesterViewModel> <Suggesters>k__BackingField;
    [NotNullAttribute]
public IProperty`1<FeatureSuggestionMode> Mode { get; }
    [NotNullAttribute]
public IListEvents`1<FeatureSuggesterViewModel> Suggesters { get; }
    public FeatureSuggestionToolViewModel(Lifetime lifetime, FeatureSuggestionManager suggestionManager);
    [CompilerGeneratedAttribute]
public IProperty`1<FeatureSuggestionMode> get_Mode();
    [CompilerGeneratedAttribute]
public IListEvents`1<FeatureSuggesterViewModel> get_Suggesters();
}
[ToolWindowDescriptorAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.FeatureSuggestion.UI.FeatureSuggestionToolWindowDescriptor : ToolWindowDescriptor {
}
[ReportAttachmentPartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Feedback.SourceCodeAttachmentProvider : FileAttachmentProviderBase {
    [CompilerGeneratedAttribute]
private TextControlManager <textControlManager>P;
    [CompilerGeneratedAttribute]
private SolutionsManager <solutionsManager>P;
    public static string ProviderName;
    public static string ProviderId;
    public string Name { get; }
    public string Id { get; }
    public SourceCodeAttachmentProvider(TextControlManager textControlManager, SolutionsManager solutionsManager);
    public virtual string get_Name();
    public virtual string get_Id();
    public static IReportAttachment CreateSourceCodeAttachment(ISolution solution, ITextControl textControl);
    public virtual IDisposable BeginGetAttachment(Action`1<IReportAttachment> onAttachmentAvailable, IProgressIndicator progressIndicator);
    protected virtual IReportAttachment RestoreFromPath(FileSystemPath path);
}
public class JetBrains.ReSharper.Feature.Services.Filtering.CamelCasePrefixMatcher : PrefixMatcher {
    public CamelCasePrefixMatcher(string prefix, bool appendEnding, bool bMatchBeginningOfStringOnly);
    public IEnumerable`1<TextRange> Match(string nameToMatch);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Filtering.CamelCasePrefixMatcher/<EnumerateMatch>d__2")]
private static IEnumerable`1<TextRange> EnumerateMatch(Match match);
    public virtual string BuildRegexString(string prefix);
}
public class JetBrains.ReSharper.Feature.Services.Filtering.FilteringPrefixMatcher : PrefixMatcher {
    [NotNullAttribute]
private Func`2<string, bool> myFuncFilter;
    [NotNullAttribute]
private PrefixMatcher myMatcher;
    [NotNullAttribute]
public PrefixMatcher Matcher { get; }
    public FilteringPrefixMatcher(PrefixMatcher matcher, Func`2<string, bool> funcFilter);
    public PrefixMatcher get_Matcher();
    public virtual string BuildRegexString(string prefix);
    public virtual bool IsMatch(string nameToMatch);
}
public class JetBrains.ReSharper.Feature.Services.Filtering.PlainPrefixMatcher : PrefixMatcher {
    public PlainPrefixMatcher(string prefix, bool appendEnding, bool includeStartLine);
    public virtual string BuildRegexString(string prefix);
}
public abstract class JetBrains.ReSharper.Feature.Services.Filtering.PrefixMatcher : object {
    protected static string LOWERCASE_OR_DIGIT;
    private bool myAppendEnding;
    private string myFilteringPrefix;
    private bool myIsValid;
    private bool myMatchBeginningOfStringOnly;
    private string myPrefix;
    private Regex myRegex;
    public string FilteringPrefix { get; }
    public bool IsValid { get; }
    public string Prefix { get; }
    public bool MatchBeginningOfStringOnly { get; }
    public bool AppendEnding { get; }
    protected Regex MatchingRegex { get; }
    protected PrefixMatcher(string prefix, bool appendEnding, bool bMatchBeginningOfStringOnly);
    public string get_FilteringPrefix();
    public bool get_IsValid();
    public string get_Prefix();
    public bool get_MatchBeginningOfStringOnly();
    public bool get_AppendEnding();
    public string GetSuffix(string nameToMatch);
    public virtual bool IsMatch(string nameToMatch);
    [NotNullAttribute]
public abstract virtual string BuildRegexString(string prefix);
    protected static bool IsAllUppercase(string text);
    protected static string TransformAbbreviation(string abbreviation, string expandor, bool captureCharacters);
    private static string GetFilteringPrefix(string prefix);
    protected Regex get_MatchingRegex();
    private Regex BuildRegex();
}
public abstract class JetBrains.ReSharper.Feature.Services.Generate.Actions.GenerateActionBase`1 : ExtensibleAction`3<TGenerateActionProvider, IGenerateActionWorkflow, GenerateActionGroup> {
    protected RichText Caption { get; }
    protected bool AssertsMenuItemsMnemonics { get; }
    protected bool ShowMenuWithOneItem { get; }
    protected virtual ICollection`1<TGenerateActionProvider> GetWorkflowProviders();
    protected virtual int CompareWorkflowItems(ValueTuple`2<IGenerateActionWorkflow, TGenerateActionProvider> item1, ValueTuple`2<IGenerateActionWorkflow, TGenerateActionProvider> item2);
    protected virtual void Execute(IDataContext context, IGenerateActionWorkflow workflow);
    protected virtual bool IsAvailable(IDataContext context, IGenerateActionWorkflow workflow);
    protected virtual bool IsEnabled(IDataContext context, IGenerateActionWorkflow workflow);
    protected virtual RichText get_Caption();
    protected virtual bool get_AssertsMenuItemsMnemonics();
    protected virtual bool get_ShowMenuWithOneItem();
    protected virtual IconId GetGroupIcon(IDataContext dataContext);
}
public class JetBrains.ReSharper.Feature.Services.Generate.Actions.GenerateActionGroup : ExtensibleActionGroup {
    [NotNullAttribute]
public static GenerateActionGroup CLR_LANGUAGE;
    [NotNullAttribute]
public static GenerateActionGroup CPP;
    [NotNullAttribute]
public static GenerateActionGroup ASP;
    [NotNullAttribute]
public static GenerateActionGroup XAML;
    [NotNullAttribute]
public static GenerateActionGroup FILE_TEMPLATES;
    [NotNullAttribute]
public static GenerateActionGroup SOLUTION_EXPLORER;
    public GenerateActionGroup(string name, float order);
    private static GenerateActionGroup();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Generate.Actions.GenerateManager : object {
    [NotNullAttribute]
private IEnumerable`1<IGenerateWorkflowProvider> myProviders;
    [NotNullAttribute]
public static GenerateManager Instance { get; }
    public GenerateManager(IEnumerable`1<IGenerateWorkflowProvider> providers);
    public static GenerateManager get_Instance();
    [NotNullAttribute]
public IEnumerable`1<TGenerateProvider> GetGenerationProviders();
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.Generate.Actions.IGenerateWorkflowProvider")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.Feature.Services.Generate.Actions.GenerateProviderAttribute : ShellComponentAttribute {
    public GenerateProviderAttribute(Instantiation instantiation);
}
[ObsoleteAttribute("Use 'IGenerateWorkflowProvider' instead")]
public interface JetBrains.ReSharper.Feature.Services.Generate.Actions.IGenerateActionProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Generate.Actions.IGenerateActionWorkflow {
    public double Order { get; }
    public abstract virtual double get_Order();
    public abstract virtual bool IsAvailable(IDataContext dataContext);
    public abstract virtual bool IsEnabled(IDataContext dataContext);
    public abstract virtual void Execute(IDataContext context);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.Generate.Actions.IGenerateWorkflowProvider {
}
public abstract class JetBrains.ReSharper.Feature.Services.Generate.CodeBehindGeneratorBuilderBase`2 : GeneratorBuilderBase`1<TGeneratorContext> {
    protected static string OpenCodeBehindForUndoOptionKey;
    [CanBeNullAttribute]
private IGeneratorBuilder myCodeBehindBuilder;
    [NotNullAttribute]
protected IGeneratorBuilder CodeBehindBuilder { get; }
    [NotNullAttribute]
protected abstract virtual IGeneratorBuilder CreateCodeBehindBuilder();
    [CanBeNullAttribute]
protected abstract virtual TCodeBehindContext CreateCodeBehindContext(TGeneratorContext context);
    protected IGeneratorBuilder get_CodeBehindBuilder();
    protected virtual void BuildOptions(TGeneratorContext context, ICollection`1<IGeneratorOption> options);
    protected virtual bool IsAvailable(TGeneratorContext context);
    public virtual bool IsAvaliable(TGeneratorContext context, TCodeBehindContext codeBehindContext);
    protected virtual bool HasProcessableElements(TGeneratorContext context, IEnumerable`1<IGeneratorElement> elements);
    public virtual bool HasProcessableElements(TGeneratorContext context, TCodeBehindContext codebehindContext, IEnumerable`1<IGeneratorElement> elements);
    protected virtual void Process(TGeneratorContext context, IProgressIndicator progress);
    public virtual void ProcessWithCodebehind(TGeneratorContext context, TCodeBehindContext codeBehindContext, IProgressIndicator progress);
}
public static class JetBrains.ReSharper.Feature.Services.Generate.CommonGenerationOptions : object {
    private static String[] ourExistingMemberConflictModeOptions;
    private static Dictionary`2<string, StringComparison> ourStringComparisonTypes;
    private static CommonGenerationOptions();
    [PureAttribute]
public static TypeEqualityCheckMode ParseTypeEqualityCheckMode(string value);
    [NotNullAttribute]
[PureAttribute]
public static GeneratorOptionSelector CreateTypeEqualityCheckOption(string optionName, string typeName, bool persist);
    [PureAttribute]
public static ExistingMemberConflictMode ParseExistingMemberConflictMode(string value);
    [NotNullAttribute]
[PureAttribute]
public static string ToStringOption(ExistingMemberConflictMode conflictMode);
    [NotNullAttribute]
[PureAttribute]
public static GeneratorOptionSelector CreateExistingMemberConflictOption(string optionName, string memberName, bool persist, bool isPlural);
    [PureAttribute]
public static StringComparison ParseStringComparison(string value);
    [PureAttribute]
public static GeneratorOptionSelector CreateStringComparisonOption(string optionName);
}
public static class JetBrains.ReSharper.Feature.Services.Generate.DisposePatternUtil : object {
    [PureAttribute]
public static bool IsSubtypeOfDisposable(IType type);
    [CanBeNullAttribute]
[PureAttribute]
public static IMethod FindFinalizeInHierarchy(ITypeElement typeElement);
    [CanBeNullAttribute]
[PureAttribute]
public static IMethod FindDisposeInHierarchy(ITypeElement typeElement, IPsiModule module, bool isAsync, bool allowPattern);
    [CanBeNullAttribute]
[PureAttribute]
public static IMethod FindDisposeAsyncCoreInHierarchy(IClass baseTypeElement);
    [CanBeNullAttribute]
[PureAttribute]
public static IMethod FindDisposeWithBoolParameterInHierarchy(IClass baseTypeElement);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Generate.DisposePatternUtil/<FindMethodsInHierarchy>d__5")]
[PureAttribute]
private static IEnumerable`1<IMethod> FindMethodsInHierarchy(ITypeElement baseTypeElement, string methodName, bool allowPattern);
}
public static class JetBrains.ReSharper.Feature.Services.Generate.EqualityMembersBuilderOptions : object {
    public static string ChangeGetHashCodeOption;
    public static string ChangeEqualsOption;
    public static string EqualityOperatorsOption;
    public static string ImplementIEquatableForClassOption;
    public static string ImplementIEquatableForStructOption;
    public static string ImplementDefaultEqualityWithoutMembersOption;
    public static string TypeEqualityCheckOption;
}
public enum JetBrains.ReSharper.Feature.Services.Generate.ExistingMemberConflictMode : Enum {
    public int value__;
    public static ExistingMemberConflictMode Replace;
    public static ExistingMemberConflictMode Skip;
    public static ExistingMemberConflictMode SideBySide;
}
public abstract class JetBrains.ReSharper.Feature.Services.Generate.GenerateEventSubscriptionsBuilderBase`1 : GeneratorBuilderBase`1<TGeneratorContext> {
    protected static string EventHandlerPrefixOptionKey;
    protected static string EventHandlerSuffix;
    [CanBeNullAttribute]
protected virtual string SuggestEventHandlerPrefix(TGeneratorContext context);
    [NotNullAttribute]
protected virtual string GetEventName(IGeneratorElement element);
    [NotNullAttribute]
protected virtual string MakeEventHandlerName(TGeneratorContext context, string prefix, INamingLanguageService namingService, IGeneratorElement element, ITypeDeclaration codeBehindTypeDeclaration);
    protected virtual void BuildOptions(TGeneratorContext context, ICollection`1<IGeneratorOption> options);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "MRUSettingsForTheGenerateDialogSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.Generate.GenerateMruSettings : object {
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToGroupItemsToGenerateByTypeSettingDescription")]
public IIndexedEntry`2<string, bool> GroupByType;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToSortItemsToGenerateByNameSettingDescription")]
public IIndexedEntry`2<string, bool> SortByName;
}
[SettingsIndexedKeyAttribute("JetBrains.ReSharper.Resources.Settings.CodeStyleSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "HowTheCodeIsGeneratedByTheGenerateFeatureSettingDescription", "System.String")]
public class JetBrains.ReSharper.Feature.Services.Generate.GenerateSettings : object {
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "BagOfRawSettingsSettingDescription")]
public IIndexedEntry`2<string, string> Options;
}
public static class JetBrains.ReSharper.Feature.Services.Generate.GenerateUtil : object {
    [PureAttribute]
public static bool CanMemberBeNull(ITypeOwner typeOwner, ISubstitution substitution);
    [CanBeNullAttribute]
[PureAttribute]
public static IClass GetBaseClass(IClass type);
    [PureAttribute]
public static bool HasOverrideInHierarchy(ITypeElement element, OverridableMemberInstance rootMember);
    [PureAttribute]
public static bool HasOverride(ITypeElement element, OverridableMemberInstance rootMember);
    [CanBeNullAttribute]
[PureAttribute]
public static IOverridableMember FindOverride(ITypeElement element, OverridableMemberInstance rootMember, bool includeBaseTypes);
    [CanBeNullAttribute]
[PureAttribute]
public static IOverridableMember FindOverrideExcludeImplicit(ITypeElement element, OverridableMemberInstance rootMember, bool includeBaseTypes);
    [PureAttribute]
public static bool HasOverrideOfObjectMethodInHierarchy(ITypeElement containingType, string shortName);
    [CanBeNullAttribute]
[PureAttribute]
public static OverridableMemberInstance GetObjectMember(ITypeElement containingType, string shortName);
    [NotNullAttribute]
[ItemNotNullAttribute]
[PureAttribute]
public static IList`1<OverridableMemberInstance> GetOverridableMembersOrder(ITypeElement typeElement, ISubstitution substitution, bool reversed);
    [NotNullAttribute]
[ItemNotNullAttribute]
[PureAttribute]
public static IList`1<OverridableMemberInstance> GetOverridableMembersOrder(ITypeElement typeElement, bool reversed);
    public static void FormatWithDefaultProfile(ITreeNode root);
}
public class JetBrains.ReSharper.Feature.Services.Generate.GeneratorAccessContext : object {
    [NotNullAttribute]
private ITypeElement myTypeElement;
    private IPsiSourceFile mySourceFile;
    public GeneratorAccessContext(ITypeElement accessPoint, IPsiSourceFile contextSourceFile);
    [NotNullAttribute]
public sealed virtual ITypeElement GetAccessContainingTypeElement();
    public sealed virtual Staticness GetStaticness();
    public virtual QualifierKind GetQualifierKind();
    public sealed virtual ITypeElement GetQualifierTypeElement();
    public sealed virtual IPsiModule GetPsiModule();
    public sealed virtual IPsiSourceFile GetSourceFile();
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.Generate.IGeneratorBuilder")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.Feature.Services.Generate.GeneratorBuilderAttribute : SolutionComponentAttribute {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <LanguageType>k__BackingField;
    [NotNullAttribute]
public string Kind { get; }
    [NotNullAttribute]
public Type LanguageType { get; }
    public GeneratorBuilderAttribute(string kind, Type languageType, Instantiation instantiation);
    [CompilerGeneratedAttribute]
public string get_Kind();
    [CompilerGeneratedAttribute]
public Type get_LanguageType();
}
public abstract class JetBrains.ReSharper.Feature.Services.Generate.GeneratorBuilderBase`1 : object {
    public double Priority { get; }
    public virtual double get_Priority();
    [DebuggerStepThroughAttribute]
public sealed virtual bool IsAvailable(IGeneratorContext context);
    protected virtual bool IsAvailable(TGeneratorContext context);
    [DebuggerStepThroughAttribute]
public sealed virtual bool HasProcessableElements(IGeneratorContext context, IEnumerable`1<IGeneratorElement> elements);
    protected virtual bool HasProcessableElements(TGeneratorContext context, IEnumerable`1<IGeneratorElement> elements);
    [DebuggerStepThroughAttribute]
public sealed virtual void BuildOptions(IGeneratorContext context, ICollection`1<IGeneratorOption> options);
    [DebuggerStepThroughAttribute]
protected virtual void BuildOptions(TGeneratorContext context, ICollection`1<IGeneratorOption> options);
    [DebuggerStepThroughAttribute]
public sealed virtual void Process(IGeneratorContext context, IProgressIndicator progress);
    [DebuggerStepThroughAttribute]
protected virtual void Process(TGeneratorContext context, IProgressIndicator progress);
    [ObsoleteAttribute("Please, override overload with progress indicator")]
protected virtual void Process(TGeneratorContext context);
}
public abstract class JetBrains.ReSharper.Feature.Services.Generate.GeneratorComparerBuilderBase`1 : GeneratorComparisonBuilderBase`1<TGeneratorContext> {
    protected static string ComparerNamePrefixOption;
    protected static string ExposeViaPropertyOption;
    protected virtual void BuildOptions(TGeneratorContext context, ICollection`1<IGeneratorOption> options);
    protected static string RenderNames(IGeneratorContext context, bool bakeProperty, IDeclaredElement memberSource, IReadOnlyList`1<GeneratorComparisonMemberDescriptor> members, String[] comparerTypeNamePostfixes, String& fieldName, String& propertyName);
    [NotNullAttribute]
private static List`1<NameInnerElement> CreateRootName(IDeclaredElement memberSource, NamingManager naming, INamingPolicyProvider policyProvider, string name, IReadOnlyList`1<GeneratorComparisonMemberDescriptor> members);
    [CanBeNullAttribute]
private static IEnumerable`1<NameInnerElement> TryBakeNameFromMembers(NamingManager naming, INamingPolicyProvider policyProvider, IReadOnlyList`1<GeneratorComparisonMemberDescriptor> members);
    [NotNullAttribute]
private static string RenderMemberName(NamingManager naming, INamingPolicyProvider policyProvider, IEnumerable`1<NameInnerElement> words, NamedElementKinds kind, AccessRightKinds accessRight, StaticnessKinds staticness, String[] postfix);
}
public abstract class JetBrains.ReSharper.Feature.Services.Generate.GeneratorComparisonBuilderBase`1 : GeneratorBuilderBase`1<TGeneratorContext> {
    private static string CanBeNullOption;
    private static string StringComparisonOption;
    protected static string UseSystemHashCodeToImplementGetHashCode;
    [CanBeNullAttribute]
[PureAttribute]
protected abstract virtual IDeclaredType GetMemberSource(TGeneratorContext context);
    protected virtual bool IsAvailable(TGeneratorContext context);
    protected virtual bool HasProcessableElements(TGeneratorContext context, IEnumerable`1<IGeneratorElement> elements);
    protected virtual void BuildOptions(TGeneratorContext context, ICollection`1<IGeneratorOption> options);
    [NotNullAttribute]
[PureAttribute]
protected IReadOnlyList`1<GeneratorComparisonMemberDescriptor> GetSelectedMembers(TGeneratorContext context);
    [PureAttribute]
protected static bool CanUseSystemHashCode(ITreeNode context);
}
public class JetBrains.ReSharper.Feature.Services.Generate.GeneratorComparisonMemberDescriptor : object {
    [CompilerGeneratedAttribute]
private ITypeOwner <TypeMember>k__BackingField;
    [CompilerGeneratedAttribute]
private ISubstitution <Substitution>k__BackingField;
    [CompilerGeneratedAttribute]
private StringComparison <StringComparison>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanBeNull>k__BackingField;
    [NotNullAttribute]
public ITypeOwner TypeMember { get; }
    [NotNullAttribute]
public ISubstitution Substitution { get; }
    public StringComparison StringComparison { get; }
    public bool CanBeNull { get; }
    public IType Type { get; }
    public GeneratorComparisonMemberDescriptor(ITypeOwner member, ISubstitution substitution, bool canBeNull, StringComparison stringComparison);
    [CompilerGeneratedAttribute]
public ITypeOwner get_TypeMember();
    [CompilerGeneratedAttribute]
public ISubstitution get_Substitution();
    [CompilerGeneratedAttribute]
public StringComparison get_StringComparison();
    [CompilerGeneratedAttribute]
public bool get_CanBeNull();
    public IType get_Type();
}
public class JetBrains.ReSharper.Feature.Services.Generate.GeneratorConstructorDeclarationElement : GeneratorDeclarationElement {
    [CompilerGeneratedAttribute]
private GeneratorDeclaredElement`1<IConstructor> <DelegatedConstructor>k__BackingField;
    [NotNullAttribute]
public GeneratorDeclaredElement`1<IConstructor> DelegatedConstructor { get; }
    public GeneratorConstructorDeclarationElement(IDeclaration declaration, GeneratorDeclaredElement`1<IConstructor> delegatedConstructor);
    [CompilerGeneratedAttribute]
public GeneratorDeclaredElement`1<IConstructor> get_DelegatedConstructor();
}
public abstract class JetBrains.ReSharper.Feature.Services.Generate.GeneratorContextBase : object {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private IUserDataHolder <UserData>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaredType <ExternalElementsSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IGeneratorElement> <ProvidedElements>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IGeneratorElement> <InputElements>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IGeneratorElement> <OutputElements>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceInputElementsOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IGeneratorOption> <Options>k__BackingField;
    public string Kind { get; private set; }
    public PsiLanguageType Language { get; }
    public PsiLanguageType PresentationLanguage { get; }
    public ITreeNode Root { get; }
    public IPsiModule PsiModule { get; }
    public ITreeNode Anchor { get; public set; }
    public IUserDataHolder UserData { get; public set; }
    public IDeclaredType ExternalElementsSource { get; public set; }
    public IList`1<IGeneratorElement> ProvidedElements { get; }
    public IList`1<IGeneratorElement> InputElements { get; }
    public IList`1<IGeneratorElement> OutputElements { get; }
    public bool ForceInputElementsOrder { get; public set; }
    public IList`1<IGeneratorOption> Options { get; }
    public ISolution Solution { get; }
    protected GeneratorContextBase(string kind);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(string value);
    public abstract virtual PsiLanguageType get_Language();
    public virtual PsiLanguageType get_PresentationLanguage();
    public abstract virtual ITreeNode get_Root();
    public abstract virtual IPsiModule get_PsiModule();
    public abstract virtual ITreeNode get_Anchor();
    public abstract virtual void set_Anchor(ITreeNode value);
    [CompilerGeneratedAttribute]
public sealed virtual IUserDataHolder get_UserData();
    [CompilerGeneratedAttribute]
public void set_UserData(IUserDataHolder value);
    [CompilerGeneratedAttribute]
public sealed virtual IDeclaredType get_ExternalElementsSource();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExternalElementsSource(IDeclaredType value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IGeneratorElement> get_ProvidedElements();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IGeneratorElement> get_InputElements();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IGeneratorElement> get_OutputElements();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ForceInputElementsOrder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ForceInputElementsOrder(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IGeneratorOption> get_Options();
    public abstract virtual ISolution get_Solution();
    public abstract virtual TreeTextRange GetSelectionTreeRange();
    public sealed virtual string GetOption(string id);
    public sealed virtual void SetOption(string id, string value);
    public abstract virtual IGeneratorContextPointer CreatePointer();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Generate.GeneratorContextExtensions : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
public static IGeneratorOption TryGetOption(IGeneratorContext context, string id);
    [ExtensionAttribute]
[PureAttribute]
public static bool GetBooleanOption(IGeneratorContext context, string id);
    [ExtensionAttribute]
[PureAttribute]
public static bool HasOption(IGeneratorContext context, string id);
}
public class JetBrains.ReSharper.Feature.Services.Generate.GeneratorDeclarationElement : GeneratorElementBase {
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    [NotNullAttribute]
public IDeclaration Declaration { get; }
    public string TestDescriptor { get; }
    public GeneratorDeclarationElement(IDeclaration declaration);
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
    public virtual object GetPresentationObject();
    public virtual bool Matches(string searchText, IdentifierMatcher matcher);
    public virtual string get_TestDescriptor();
}
public class JetBrains.ReSharper.Feature.Services.Generate.GeneratorDeclaredElement : GeneratorElementBase {
    [CanBeNullAttribute]
private object myGroupElement;
    [CompilerGeneratedAttribute]
private IClrDeclaredElement <DeclaredElement>k__BackingField;
    [CompilerGeneratedAttribute]
private ISubstitution <Substitution>k__BackingField;
    [NotNullAttribute]
public IClrDeclaredElement DeclaredElement { get; }
    [NotNullAttribute]
public ISubstitution Substitution { get; }
    public string TestDescriptor { get; }
    public GeneratorDeclaredElement(IClrDeclaredElement declaredElement);
    public GeneratorDeclaredElement(IClrDeclaredElement declaredElement, ISubstitution substitution);
    public GeneratorDeclaredElement(IClrDeclaredElement declaredElement, ISubstitution substitution, object groupElement);
    [CompilerGeneratedAttribute]
public IClrDeclaredElement get_DeclaredElement();
    [CompilerGeneratedAttribute]
public ISubstitution get_Substitution();
    public virtual object GetPresentationObject();
    public virtual object GetGroupingObject();
    public virtual bool Matches(string searchText, IdentifierMatcher matcher);
    public virtual string get_TestDescriptor();
}
public class JetBrains.ReSharper.Feature.Services.Generate.GeneratorDeclaredElement`1 : GeneratorDeclaredElement {
    [NotNullAttribute]
public TDeclaredElement DeclaredElement { get; }
    public GeneratorDeclaredElement`1(TDeclaredElement declaredElement);
    public GeneratorDeclaredElement`1(TDeclaredElement declaredElement, ISubstitution substitution);
    protected GeneratorDeclaredElement`1(TDeclaredElement declaredElement, ISubstitution substitution, object groupElement);
    public TDeclaredElement get_DeclaredElement();
    public void Deconstruct(TDeclaredElement& declaredElement);
}
public class JetBrains.ReSharper.Feature.Services.Generate.GeneratorDelagateDeclarationElement : GeneratorDeclarationElement {
    [CompilerGeneratedAttribute]
private GeneratorDeclaredElement`1<IOverridableMember> <DelegatedMember>k__BackingField;
    [NotNullAttribute]
public GeneratorDeclaredElement`1<IOverridableMember> DelegatedMember { get; }
    public GeneratorDelagateDeclarationElement(IDeclaration declaration, GeneratorDeclaredElement`1<IOverridableMember> delegatedMember);
    [CompilerGeneratedAttribute]
public GeneratorDeclaredElement`1<IOverridableMember> get_DelegatedMember();
}
public class JetBrains.ReSharper.Feature.Services.Generate.GeneratorDelegatingElement : GeneratorDeclaredElement`1<IOverridableMember> {
    [CompilerGeneratedAttribute]
private ITypeOwner <Owner>k__BackingField;
    [NotNullAttribute]
public ITypeOwner Owner { get; }
    public GeneratorDelegatingElement(IOverridableMember overridableMember, ISubstitution substitution, ITypeOwner owner);
    public GeneratorDelegatingElement(IOverridableMember overridableMember, ISubstitution substitution, ITypeOwner owner, object groupElement);
    [CompilerGeneratedAttribute]
public ITypeOwner get_Owner();
}
public abstract class JetBrains.ReSharper.Feature.Services.Generate.GeneratorDisposePatternBuilderBase`1 : GeneratorBuilderBase`1<TGeneratorContext> {
    protected static string CanBeNullOption;
    protected static string ChangeDisposeOption;
    protected static string IsInheritableOption;
    protected static string ChangeFinalizeOption;
    protected static string CreateFinalizeOption;
    [NotNullAttribute]
protected string FinalizeName { get; }
    protected abstract virtual string get_FinalizeName();
    [CanBeNullAttribute]
[PureAttribute]
protected abstract virtual ITypeElement GetContainingType(TGeneratorContext context);
    [PureAttribute]
protected abstract virtual bool HasFinalize(TGeneratorContext context);
    protected virtual bool IsAvailable(TGeneratorContext context);
    protected virtual bool HasProcessableElements(TGeneratorContext context, IEnumerable`1<IGeneratorElement> elements);
    protected virtual void BuildOptions(TGeneratorContext context, ICollection`1<IGeneratorOption> options);
    protected virtual void BuildOptions(TGeneratorContext context, IReadOnlyList`1<ITypeOwner> members, ICollection`1<IGeneratorOption> options);
    protected static IMethod FindExistingMethod(ITypeElement type, string name, Func`2<IMethod, bool> predicate);
    [CanBeNullAttribute]
[PureAttribute]
protected static IMethod FindExistingDispose(ITypeElement type, bool isBoolParameter);
    [CompilerGeneratedAttribute]
internal static bool <FindExistingDispose>g__IsDispose|14_0(IMethod method);
    [CompilerGeneratedAttribute]
internal static bool <FindExistingDispose>g__IsDisposeWithBoolParam|14_1(IMethod method);
}
public abstract class JetBrains.ReSharper.Feature.Services.Generate.GeneratorElementBase : object {
    [CompilerGeneratedAttribute]
private bool <Emphasize>k__BackingField;
    [CompilerGeneratedAttribute]
private GeneratorElementKind <Kind>k__BackingField;
    public bool Emphasize { get; public set; }
    public GeneratorElementKind Kind { get; public set; }
    public string TestDescriptor { get; }
    [NotNullAttribute]
public static string GetTestDescriptor(IDeclaredElement declaredElement, ISubstitution substitution);
    public abstract virtual object GetPresentationObject();
    public virtual object GetGroupingObject();
    public abstract virtual bool Matches(string searchText, IdentifierMatcher matcher);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Emphasize();
    [CompilerGeneratedAttribute]
public void set_Emphasize(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual GeneratorElementKind get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(GeneratorElementKind value);
    public abstract virtual string get_TestDescriptor();
}
public enum JetBrains.ReSharper.Feature.Services.Generate.GeneratorElementKind : Enum {
    public int value__;
    public static GeneratorElementKind Default;
    public static GeneratorElementKind Preselected;
    public static GeneratorElementKind Hidden;
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.Generate.IGeneratorElementProvider")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.Feature.Services.Generate.GeneratorElementProviderAttribute : SolutionComponentAttribute {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <LanguageType>k__BackingField;
    [NotNullAttribute]
public string Kind { get; }
    [NotNullAttribute]
public Type LanguageType { get; }
    public GeneratorElementProviderAttribute(string kind, Type languageType, Instantiation instantiation);
    [CompilerGeneratedAttribute]
public string get_Kind();
    [CompilerGeneratedAttribute]
public Type get_LanguageType();
}
public abstract class JetBrains.ReSharper.Feature.Services.Generate.GeneratorEqualityMembersBuilderBase`1 : GeneratorComparisonBuilderBase`1<TGeneratorContext> {
    protected static string RegionName;
    protected virtual void BuildOptions(TGeneratorContext context, ICollection`1<IGeneratorOption> options);
    protected virtual bool IsAvailable(TGeneratorContext context);
    protected bool IsAnyImplementIEquatableOptionSet(IGeneratorContext context);
    [CanBeNullAttribute]
[PureAttribute]
protected IOverridableMember FindTypedEquals(IDeclaredType type);
    [CanBeNullAttribute]
[PureAttribute]
protected IOverridableMember FindObjectEquals(ITypeElement type, bool includeBaseTypes);
    [CanBeNullAttribute]
[PureAttribute]
protected IOverridableMember FindGetHashCode(ITypeElement type, bool includeBaseTypes);
    [CanBeNullAttribute]
[PureAttribute]
private static IOperator FindEqualityOperator(ITypeElement type);
    [CanBeNullAttribute]
[PureAttribute]
private static IOperator FindInequalityOperator(ITypeElement type);
    [PureAttribute]
protected bool HasEquatable(IDeclaredType type);
    [CanBeNullAttribute]
[PureAttribute]
protected static ITypeElement GetEquatableInterface(IPsiModule psiModule);
}
public class JetBrains.ReSharper.Feature.Services.Generate.GeneratorEventElement : GeneratorDeclaredElement`1<IEvent> {
    [CompilerGeneratedAttribute]
private string <HandlerName>k__BackingField;
    [CanBeNullAttribute]
public IField Field { get; }
    [NotNullAttribute]
public string HandlerName { get; public set; }
    public string TestDescriptor { get; }
    public GeneratorEventElement(IEvent declaredElement);
    public GeneratorEventElement(IEvent declaredElement, ISubstitution substitution);
    public GeneratorEventElement(IEvent declaredElement, ISubstitution substitution, object groupElement);
    public IField get_Field();
    [CompilerGeneratedAttribute]
public string get_HandlerName();
    [CompilerGeneratedAttribute]
public void set_HandlerName(string value);
    public virtual string get_TestDescriptor();
}
public class JetBrains.ReSharper.Feature.Services.Generate.GeneratorEventHandlerElement : GeneratorDeclarationElement {
    [CompilerGeneratedAttribute]
private GeneratorDeclaredElement <HandledEvent>k__BackingField;
    [NotNullAttribute]
public GeneratorDeclaredElement HandledEvent { get; }
    public GeneratorEventHandlerElement(IDeclaration declaration, GeneratorDeclaredElement handledEvent);
    [CompilerGeneratedAttribute]
public GeneratorDeclaredElement get_HandledEvent();
}
public abstract class JetBrains.ReSharper.Feature.Services.Generate.GeneratorEventsProviderBase`1 : GeneratorProviderBase`1<TGeneratorContext> {
    [NotNullAttribute]
protected virtual List`1<DeclaredElementInstance`1<IEvent>> CollectInstanceEvents(ITypeElement typeElement, IAccessContext accessContext, IPsiModule module, PsiLanguageType codeBehindLanguage);
}
public enum JetBrains.ReSharper.Feature.Services.Generate.GeneratorGroupingBehavior : Enum {
    public int value__;
    public static GeneratorGroupingBehavior Automatic;
    public static GeneratorGroupingBehavior NoGroupingAllowed;
    public static GeneratorGroupingBehavior OrderBasedGenerate;
    public static GeneratorGroupingBehavior EnforceGrouping;
    public static GeneratorGroupingBehavior AutomaticPreordered;
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Generate.GeneratorManager : object {
    [NotNullAttribute]
private Lazy`1<OneToListMap`2<string, GeneratorItem`1<IGeneratorBuilder>>> myBuilders;
    [NotNullAttribute]
private Lazy`1<OneToListMap`2<string, GeneratorItem`1<IGeneratorElementProvider>>> myElementProviders;
    public GeneratorManager(IParallelImmutableList`1<IGeneratorBuilder> builders, IParallelImmutableList`1<IGeneratorElementProvider> providers);
    [CanBeNullAttribute]
[PureAttribute]
public PsiLanguageType TryGetCurrentPsiLanguage(IDataContext dataContext);
    [CanBeNullAttribute]
[PureAttribute]
public IGeneratorContext TryCreateContext(string kind, IDataContext dataContext);
    [CanBeNullAttribute]
[PureAttribute]
public IGeneratorContext TryCreateContext(string kind, PsiLanguageType languageType, ISolution solution, ITextControl textControl);
    [CanBeNullAttribute]
[PureAttribute]
public IGeneratorContext TryCreateContext(string kind, ITreeNode targetContext, ITreeNode anchor);
    [NotNullAttribute]
[PureAttribute]
public IList`1<IGeneratorBuilder> GetBuilders(string kind, PsiLanguageType languageType);
    [NotNullAttribute]
[PureAttribute]
public IList`1<IGeneratorElementProvider> GetElementProviders(string kind, PsiLanguageType languageType);
    [NotNullAttribute]
private static IList`1<T> GetItems(OneToListMap`2<string, GeneratorItem`1<T>> mapItems, string kind, PsiLanguageType languageType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.Generate.GeneratorOptionBase : object {
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Persist>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    public string ID { get; }
    public string Title { get; }
    public bool Persist { get; public set; }
    public bool Visible { get; public set; }
    public string Value { get; public set; }
    public GeneratorOptionKind Kind { get; }
    protected GeneratorOptionBase(string id, string title);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ID();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Title();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Persist();
    [CompilerGeneratedAttribute]
public void set_Persist(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Visible();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Visible(bool value);
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    public abstract virtual GeneratorOptionKind get_Kind();
    public abstract virtual IReadOnlyList`1<string> GetPossibleValues();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Generate.GeneratorOptionBoolean : GeneratorOptionBase {
    private static String[] ourValues;
    private bool myValue;
    public GeneratorOptionKind Kind { get; }
    public string Value { get; public set; }
    public bool BooleanValue { get; public set; }
    public GeneratorOptionBoolean(string id, string title, bool value);
    private static GeneratorOptionBoolean();
    public virtual GeneratorOptionKind get_Kind();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public bool get_BooleanValue();
    public void set_BooleanValue(bool value);
    public virtual IReadOnlyList`1<string> GetPossibleValues();
}
public enum JetBrains.ReSharper.Feature.Services.Generate.GeneratorOptionKind : Enum {
    public int value__;
    public static GeneratorOptionKind Boolean;
    public static GeneratorOptionKind Selector;
    public static GeneratorOptionKind Text;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Generate.GeneratorOptionSelector : GeneratorOptionBase {
    private IReadOnlyList`1<string> myValues;
    private string myValue;
    public GeneratorOptionKind Kind { get; }
    public string Value { get; public set; }
    public GeneratorOptionSelector(string id, string title, string value, IReadOnlyList`1<string> values);
    public GeneratorOptionSelector(string id, string title, IReadOnlyList`1<string> values);
    public virtual GeneratorOptionKind get_Kind();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual IReadOnlyList`1<string> GetPossibleValues();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Generate.GeneratorOptionSelectorFromSettings`1 : GeneratorOptionBase {
    private SettingsScalarEntry mySettingsEntry;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<TEnum, string> myLabels;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, TEnum> myValues;
    private List`1<string> myPossibleValues;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public GeneratorOptionKind Kind { get; }
    public string Value { get; public set; }
    private bool JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.Persist { get; }
    public GeneratorOptionSelectorFromSettings`1(string id, string title, SettingsScalarEntry settingsEntry, Dictionary`2<TEnum, string> labels);
    public virtual GeneratorOptionKind get_Kind();
    [CompilerGeneratedAttribute]
public virtual string get_Value();
    [CompilerGeneratedAttribute]
public virtual void set_Value(string value);
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.get_Persist();
    public virtual IReadOnlyList`1<string> GetPossibleValues();
    public sealed virtual void LoadOption(IContextBoundSettingsStore store);
    public sealed virtual void SaveOption(IContextBoundSettingsStore store);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Generate.GeneratorOptionText : GeneratorOptionBase {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; public set; }
    public GeneratorOptionKind Kind { get; }
    public GeneratorOptionText(string id, string title, string value);
    [CompilerGeneratedAttribute]
public virtual string get_Value();
    [CompilerGeneratedAttribute]
public virtual void set_Value(string value);
    public virtual GeneratorOptionKind get_Kind();
    public virtual IReadOnlyList`1<string> GetPossibleValues();
}
public class JetBrains.ReSharper.Feature.Services.Generate.GeneratorOverrideDeclarationElement : GeneratorDeclarationElement {
    [CompilerGeneratedAttribute]
private GeneratorDeclaredElement`1<IOverridableMember> <InheritedElement>k__BackingField;
    [CompilerGeneratedAttribute]
private IField <BackingField>k__BackingField;
    [NotNullAttribute]
public GeneratorDeclaredElement`1<IOverridableMember> InheritedElement { get; }
    [CanBeNullAttribute]
public IField BackingField { get; public set; }
    public GeneratorOverrideDeclarationElement(IDeclaration declaration, GeneratorDeclaredElement`1<IOverridableMember> inheritedElement);
    [CompilerGeneratedAttribute]
public GeneratorDeclaredElement`1<IOverridableMember> get_InheritedElement();
    [CompilerGeneratedAttribute]
public IField get_BackingField();
    [CompilerGeneratedAttribute]
public void set_BackingField(IField value);
}
public class JetBrains.ReSharper.Feature.Services.Generate.GeneratorPropertyDeclarationElement : GeneratorDeclarationElement {
    [CompilerGeneratedAttribute]
private GeneratorDeclaredElement <FieldLike>k__BackingField;
    [NotNullAttribute]
public GeneratorDeclaredElement FieldLike { get; }
    public GeneratorPropertyDeclarationElement(IDeclaration declaration, GeneratorDeclaredElement fieldLike);
    [CompilerGeneratedAttribute]
public GeneratorDeclaredElement get_FieldLike();
}
public abstract class JetBrains.ReSharper.Feature.Services.Generate.GeneratorProviderBase`1 : object {
    public double Priority { get; }
    public virtual double get_Priority();
    public sealed virtual void Populate(IGeneratorContext context);
    public abstract virtual void Populate(TGeneratorContext context);
}
public class JetBrains.ReSharper.Feature.Services.Generate.GeneratorQualifiedAccessContext : object {
    [NotNullAttribute]
private ITypeElement myTypeElement;
    [NotNullAttribute]
private ITypeOwner myQualifier;
    [NotNullAttribute]
private IPsiSourceFile mySourceFile;
    public GeneratorQualifiedAccessContext(ITypeElement accessPoint, ITypeOwner qualifier, IPsiSourceFile contextPsiSourceFile);
    [NotNullAttribute]
public sealed virtual ITypeElement GetAccessContainingTypeElement();
    public sealed virtual Staticness GetStaticness();
    public sealed virtual QualifierKind GetQualifierKind();
    public sealed virtual ITypeElement GetQualifierTypeElement();
    public sealed virtual IPsiModule GetPsiModule();
    public sealed virtual IPsiSourceFile GetSourceFile();
}
public abstract class JetBrains.ReSharper.Feature.Services.Generate.GeneratorRelationalMembersBuilderBase`1 : GeneratorComparisonBuilderBase`1<TGeneratorContext> {
    protected static string ChangeCompareToOption;
    protected static string RelationalOperatorsOption;
    protected static string ImplementIComparableOption;
    protected virtual void BuildOptions(TGeneratorContext context, ICollection`1<IGeneratorOption> options);
    [CanBeNullAttribute]
[PureAttribute]
protected static IOverridableMember FindExistingCompareTo(IDeclaredType type, bool isTypedParameter);
    [CanBeNullAttribute]
[PureAttribute]
protected static IOperator FindExistingOperator(ITypeElement type, string operatorName);
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Generate.GeneratorSettingsUpgrader : SettingTablesUpgrader {
    public GeneratorSettingsUpgrader(ProductConfigurations productConfigurations);
    [CanBeNullAttribute]
public static string ParseIndexerName(string fullSettingName, string tail);
    public static Pair`2<string, string> ParseIndexerAndOptionName(string fullSettingName);
    protected virtual void DoUpgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime, SettingsTableBase workspaceSettingsTable, SettingsTableBase globalSettingsTable);
}
public static class JetBrains.ReSharper.Feature.Services.Generate.GeneratorStandardKinds : object {
    public static string Constructor;
    public static string ReadProperties;
    public static string Properties;
    public static string MissingMembers;
    public static string Overrides;
    public static string Delegating;
    public static string PartialMethods;
    public static string Deconstructor;
    public static string EqualityMembers;
    public static string EqualityComparer;
    public static string RelationalMembers;
    public static string RelationalComparer;
    public static string Formatting;
    public static string EventSubscriptions;
    public static string DisposePattern;
}
public static class JetBrains.ReSharper.Feature.Services.Generate.GeneratorStandardOrder : object {
    public static double Constructor;
    public static double ReadProperties;
    public static double Properties;
    public static double MissingMembers;
    public static double Overrides;
    public static double Delegating;
    public static double PartialMethods;
    public static double Deconstructor;
    public static double EqualityMembers;
    public static double EqualityComparer;
    public static double RelationalMembers;
    public static double RelationalComparer;
    public static double Formatting;
    public static double EventSubscriptions;
    public static double DisposePattern;
}
internal class JetBrains.ReSharper.Feature.Services.Generate.GeneratorWorkflowBase : object {
    [NotNullAttribute]
protected IPsiServices PsiServices;
    [NotNullAttribute]
protected List`1<IGeneratorBuilder> Builders;
    [CanBeNullAttribute]
private Lazy`1<JetHashSet`1<IGeneratorElement>> myDelayedElements;
    [CompilerGeneratedAttribute]
private IGeneratorContext <Context>k__BackingField;
    public IGeneratorContext Context { get; }
    public GeneratorWorkflowBase(IGeneratorContext generatorContext, IPsiServices psiServices);
    [CompilerGeneratedAttribute]
public sealed virtual IGeneratorContext get_Context();
    public sealed virtual bool CheckIsEnabled();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Generate.GeneratorWorkflowBase/<DelayedInputItems>d__8")]
private IEnumerable`1<IGeneratorElement> DelayedInputItems();
    public sealed virtual void PopulateInputItems();
    public sealed virtual void BuildOptions();
    public virtual IGeneratorWorkflow TryRestoreFrom(IGeneratorContextPointer pointer);
    protected virtual void RestoreWorkflowState(GeneratorWorkflowBase restoredWorkflow);
    public sealed virtual void Generate(string commandName, IProgressIndicator progressIndicator);
    protected virtual void AfterCommit();
    private void LoadPersistentOptions(IEnumerable`1<IGeneratorOption> options);
    private void SavePersistentOptions(IEnumerable`1<IGeneratorOption> options);
}
public static class JetBrains.ReSharper.Feature.Services.Generate.GeneratorWorkflowFactory : object {
    [CanBeNullAttribute]
[PureAttribute]
public static IGeneratorWorkflow CreateWorkflow(string kind, IDataContext dataContext);
    [CanBeNullAttribute]
[PureAttribute]
public static IGeneratorWorkflow CreateWorkflow(string kind, ISolution solution, ITextControl textControl, PsiLanguageType languageType);
    [CanBeNullAttribute]
[PureAttribute]
public static IGeneratorWorkflow CreateWorkflow(string kind, ITextControl textControl, ITreeNode targetContext, ITreeNode anchor);
    [CanBeNullAttribute]
[PureAttribute]
public static IGeneratorWorkflow CreateWorkflowWithoutTextControl(string kind, ITreeNode targetContext, ITreeNode anchor);
    [CanBeNullAttribute]
[PureAttribute]
public static IGeneratorWorkflow CreateWorkflow(IGeneratorContext generatorContext, ITextControl textControl);
}
internal class JetBrains.ReSharper.Feature.Services.Generate.GeneratorWorkflowWithTextControl : GeneratorWorkflowBase {
    [NotNullAttribute]
private ITextControl myTextControl;
    [NotNullAttribute]
private IShellLocks myShellLocks;
    public GeneratorWorkflowWithTextControl(IGeneratorContext generatorContext, IPsiServices psiServices, ITextControl textControl);
    public virtual IGeneratorWorkflow TryRestoreFrom(IGeneratorContextPointer pointer);
    protected virtual void AfterCommit();
}
public interface JetBrains.ReSharper.Feature.Services.Generate.IGeneratorBuilder {
    public double Priority { get; }
    public abstract virtual double get_Priority();
    [PureAttribute]
public abstract virtual bool IsAvailable(IGeneratorContext context);
    [PureAttribute]
public abstract virtual bool HasProcessableElements(IGeneratorContext context, IEnumerable`1<IGeneratorElement> elements);
    public abstract virtual void BuildOptions(IGeneratorContext context, ICollection`1<IGeneratorOption> options);
    public abstract virtual void Process(IGeneratorContext context, IProgressIndicator progress);
}
public interface JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext {
    [NotNullAttribute]
public string Kind { get; }
    [NotNullAttribute]
public PsiLanguageType Language { get; }
    [NotNullAttribute]
public PsiLanguageType PresentationLanguage { get; }
    [NotNullAttribute]
public ITreeNode Root { get; }
    [CanBeNullAttribute]
public ITreeNode Anchor { get; }
    [NotNullAttribute]
public IList`1<IGeneratorElement> ProvidedElements { get; }
    [NotNullAttribute]
public IList`1<IGeneratorElement> InputElements { get; }
    [NotNullAttribute]
public IList`1<IGeneratorElement> OutputElements { get; }
    [NotNullAttribute]
public IUserDataHolder UserData { get; }
    [CanBeNullAttribute]
public IDeclaredType ExternalElementsSource { get; public set; }
    public bool ForceInputElementsOrder { get; public set; }
    [NotNullAttribute]
public IList`1<IGeneratorOption> Options { get; }
    [NotNullAttribute]
public ISolution Solution { get; }
    [NotNullAttribute]
public IPsiModule PsiModule { get; }
    public abstract virtual string get_Kind();
    public abstract virtual PsiLanguageType get_Language();
    public abstract virtual PsiLanguageType get_PresentationLanguage();
    public abstract virtual ITreeNode get_Root();
    public abstract virtual ITreeNode get_Anchor();
    public abstract virtual IList`1<IGeneratorElement> get_ProvidedElements();
    public abstract virtual IList`1<IGeneratorElement> get_InputElements();
    public abstract virtual IList`1<IGeneratorElement> get_OutputElements();
    public abstract virtual IUserDataHolder get_UserData();
    public abstract virtual IDeclaredType get_ExternalElementsSource();
    public abstract virtual void set_ExternalElementsSource(IDeclaredType value);
    public abstract virtual bool get_ForceInputElementsOrder();
    public abstract virtual void set_ForceInputElementsOrder(bool value);
    public abstract virtual IList`1<IGeneratorOption> get_Options();
    public abstract virtual ISolution get_Solution();
    public abstract virtual IPsiModule get_PsiModule();
    [PureAttribute]
public abstract virtual TreeTextRange GetSelectionTreeRange();
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual string GetOption(string id);
    public abstract virtual void SetOption(string id, string value);
    [NotNullAttribute]
public abstract virtual IGeneratorContextPointer CreatePointer();
}
public interface JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContextFactory {
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual IGeneratorContext TryCreate(string kind, IPsiDocumentRangeView psiDocumentRangeView);
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual IGeneratorContext TryCreate(string kind, ITreeNode targetContext, ITreeNode anchor);
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual IGeneratorContext TryCreate(string kind, IDeclaredElement contextElement);
}
public interface JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContextPointer {
    [CanBeNullAttribute]
public abstract virtual IGeneratorContext TryRestoreContext();
}
public interface JetBrains.ReSharper.Feature.Services.Generate.IGeneratorElement {
    public GeneratorElementKind Kind { get; }
    public bool Emphasize { get; }
    [NotNullAttribute]
public string TestDescriptor { get; }
    [PureAttribute]
[NotNullAttribute]
public abstract virtual object GetPresentationObject();
    [PureAttribute]
public abstract virtual bool Matches(string searchText, IdentifierMatcher matcher);
    [PureAttribute]
[CanBeNullAttribute]
public abstract virtual object GetGroupingObject();
    public abstract virtual GeneratorElementKind get_Kind();
    public abstract virtual bool get_Emphasize();
    public abstract virtual string get_TestDescriptor();
}
public interface JetBrains.ReSharper.Feature.Services.Generate.IGeneratorElementPresenter {
    public abstract virtual void InitGeneratorPresenter(StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.Generate.IGeneratorElementProvider {
    public double Priority { get; }
    public abstract virtual double get_Priority();
    public abstract virtual void Populate(IGeneratorContext context);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption {
    public string ID { get; }
    public string Title { get; }
    public GeneratorOptionKind Kind { get; }
    public bool Persist { get; }
    public bool Visible { get; public set; }
    public string Value { get; public set; }
    public abstract virtual string get_ID();
    public abstract virtual string get_Title();
    public abstract virtual GeneratorOptionKind get_Kind();
    public abstract virtual bool get_Persist();
    public abstract virtual bool get_Visible();
    public abstract virtual void set_Visible(bool value);
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    public abstract virtual IReadOnlyList`1<string> GetPossibleValues();
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOptionFromSettings {
    public abstract virtual void LoadOption(IContextBoundSettingsStore store);
    public abstract virtual void SaveOption(IContextBoundSettingsStore store);
}
public interface JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOptionsProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Generate.IGeneratorWorkflow {
    [NotNullAttribute]
public IGeneratorContext Context { get; }
    public abstract virtual IGeneratorContext get_Context();
    public abstract virtual bool CheckIsEnabled();
    public abstract virtual void PopulateInputItems();
    public abstract virtual void BuildOptions();
    [CanBeNullAttribute]
public abstract virtual IGeneratorWorkflow TryRestoreFrom(IGeneratorContextPointer pointer);
    public abstract virtual void Generate(string commandName, IProgressIndicator progressIndicator);
}
public interface JetBrains.ReSharper.Feature.Services.Generate.IMemberBodyOperations {
    [PureAttribute]
public abstract virtual DocumentRange GetBodyRange(IDeclaration declaration);
    public abstract virtual DocumentRange SetBodyToDefault(IDeclaration declaration);
    public abstract virtual DocumentRange SetBody(IDeclaration declaration, MethodImplementationKind implementationKind);
    public abstract virtual DocumentRange SetParameterlessMethodCall(IDeclaration declaration, IMethod methodToCall);
    public abstract virtual DocumentRange SetDelegatingCall(ITypeMemberDeclaration declaration, IClrDeclaredElement qualifier, IOverridableMember delegateTo);
    public abstract virtual void RemoveBody(IDeclaration declaration);
}
public static class JetBrains.ReSharper.Feature.Services.Generate.InheritanceAnalyzer : object {
    public static IEnumerable`1<OverridableMemberInstance> GetMissingMembers(ITypeElement typeElement);
    public static IEnumerable`1<OverridableMemberInstance> GetOverridableMembers(ITypeElement typeElement);
}
public static class JetBrains.ReSharper.Feature.Services.Generate.MemberBodyUtil : object {
    [PureAttribute]
public static DocumentRange GetBodyTextRange(IDeclaration declaration);
    public static DocumentRange SetBodyToDefault(IDeclaration declaration);
    public static DocumentRange SetBodyToDefault(IFunctionDeclaration declaration);
    public static DocumentRange MakeBodyCallMethod(IDeclaration declaration, IMethod methodToCall);
}
public static class JetBrains.ReSharper.Feature.Services.Generate.NotifyPropertyChangedUtil : object {
    public static DeclaredElementPresenterStyle ShortNotifierStyle;
    public static DeclaredElementPresenterStyle FullNotifierStyle;
    private static NotifyPropertyChangedUtil();
    [NotNullAttribute]
public static IReadOnlyList`1<IMethod> GetNotifyMethods(IClass classType, IPsiModule psiModule);
    [PureAttribute]
private static bool IsNotifierMethod(IMethod method, NotifyPropertyChangedAnnotationProvider annotationProvider);
    [PureAttribute]
public static NotifyMethodType ClassifyNotifierMethodSignature(IMethod method);
    [PureAttribute]
private static NotifyMethodType ValidateLambdaSignature(IMethod method, IDeclaredType parameterType);
    private static NotifyMethodType ValidateSetFieldSignature(IMethod method);
    [PureAttribute]
public static bool RequiresEqualityCheck(IMethod notifyMethod);
    [PureAttribute]
public static bool CanNotifyDependentProps(IMethod notifyMethod, IMethod& dependencyNotifyMethod);
    [NotNullAttribute]
public static IList`1<IProperty> FindDependentProperties(ITypeElement containingType, ITypeMember[] propertyOrFields);
    [NotNullAttribute]
public static List`1<string> PresentNotifiersNames(IEnumerable`1<IMethod> notifiers, string format, PsiLanguageType language);
    [NotNullAttribute]
[PureAttribute]
private static string PresentNotifierFullSignature(IMethod method, string format, PsiLanguageType language);
    [CanBeNullAttribute]
public static IMethod GetNotifierByPresentation(IEnumerable`1<IMethod> notifiers, string format, string presentation, PsiLanguageType language);
}
public static class JetBrains.ReSharper.Feature.Services.Generate.RelationalCompareUtil : object {
    [PureAttribute]
public static bool IsComparableType(IDeclaredType type, ITreeNode context);
}
public enum JetBrains.ReSharper.Feature.Services.Generate.TypeEqualityCheckMode : Enum {
    public int value__;
    public static TypeEqualityCheckMode ExactType;
    public static TypeEqualityCheckMode ThisType;
    public static TypeEqualityCheckMode Subclass;
}
[ObsoleteAttribute("Use 'GenerateCodeWorkflowBase' instead")]
public abstract class JetBrains.ReSharper.Feature.Services.Generate.UI.New.StandardGenerateActionWorkflow : GenerateCodeWorkflowBase {
    protected StandardGenerateActionWorkflow(string kind, IconId icon, string title, GenerateActionGroup actionGroup, string windowTitle, string description, string actionId);
}
public class JetBrains.ReSharper.Feature.Services.Generate.ViewModel.GenerateAlphabeticComparer : object {
    [NotNullAttribute]
public static IComparer`1<TreeModelNode> Instance;
    private static GenerateAlphabeticComparer();
    public sealed virtual int Compare(TreeModelNode x, TreeModelNode y);
}
public class JetBrains.ReSharper.Feature.Services.Generate.ViewModel.GenerateTreeModelPresenter : TreeModelBrowserPresenter {
    [NotNullAttribute]
private PsiLanguageType myLanguageType;
    public GenerateTreeModelPresenter(PsiLanguageType languageType, IEnumerable`1<IGeneratorElement> elements);
    public virtual void UpdateItem(object value, TreeModelNode structureElement, IPresentableItem item, PresentationState state);
    private void PresentGeneratorElement(IGeneratorElement value, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
    protected virtual void PresentDeclaredElementInstance(DeclaredElementInstance value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    protected virtual PsiLanguageType GetPresentationLanguage(IDeclaredElement value);
    protected virtual bool IsNodeParentNatural(TreeModelNode modelNode, object childValue);
    protected virtual object Unwrap(object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(object value, TreeModelNode structureElement, IPresentableItem item, PresentationState state);
}
public class JetBrains.ReSharper.Feature.Services.Generate.ViewModel.GenerateTypeGroupingProvider : object {
    [NotNullAttribute]
public static ITreeGroupProvider`1<IGeneratorElement> Instance;
    private static GenerateTypeGroupingProvider();
    public sealed virtual object ExtractGroupObject(IGeneratorElement item);
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Generate.ViewProvider.GenerateViewProvider : object {
    public virtual void Execute(IGeneratorWorkflow workflow, IGenerateViewInfo info, Action`1<IGeneratorContext> configureContext);
}
public interface JetBrains.ReSharper.Feature.Services.Generate.ViewProvider.IGenerateViewInfo {
    [NotNullAttribute]
public string WindowTitle { get; }
    [NotNullAttribute]
public string Description { get; }
    [CanBeNullAttribute]
public IconId Icon { get; }
    public GeneratorGroupingBehavior GroupingBehavior { get; }
    [NotNullAttribute]
public string OptionsPageId { get; }
    public abstract virtual string get_WindowTitle();
    public abstract virtual string get_Description();
    public abstract virtual IconId get_Icon();
    public abstract virtual bool IsEmptyInputAllowed(IGeneratorContext context);
    public abstract virtual GeneratorGroupingBehavior get_GroupingBehavior();
    public abstract virtual string get_OptionsPageId();
}
public interface JetBrains.ReSharper.Feature.Services.Generate.ViewProvider.IGenerateViewProvider {
    public abstract virtual void Execute(IGeneratorWorkflow workflow, IGenerateViewInfo info, Action`1<IGeneratorContext> configureContext);
}
public abstract class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GenerateCodeWorkflowBase : object {
    [NotNullAttribute]
private string myKind;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActionId>k__BackingField;
    [CompilerGeneratedAttribute]
private GenerateActionGroup <ActionGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WindowTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Title { get; }
    public string ActionId { get; }
    public double Order { get; }
    [NotNullAttribute]
public GenerateActionGroup ActionGroup { get; }
    public IconId Icon { get; }
    public string WindowTitle { get; }
    public string Description { get; }
    public GeneratorGroupingBehavior GroupingBehavior { get; }
    public string OptionsPageId { get; }
    protected GenerateCodeWorkflowBase(string kind, IconId icon, string title, GenerateActionGroup actionGroup, string windowTitle, string description, string actionId);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Title();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ActionId();
    public abstract virtual double get_Order();
    [CompilerGeneratedAttribute]
public sealed virtual GenerateActionGroup get_ActionGroup();
    [CompilerGeneratedAttribute]
public sealed virtual IconId get_Icon();
    [CompilerGeneratedAttribute]
public sealed virtual string get_WindowTitle();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    public virtual bool IsEmptyInputAllowed(IGeneratorContext context);
    public virtual GeneratorGroupingBehavior get_GroupingBehavior();
    public virtual string get_OptionsPageId();
    public virtual bool IsAvailable(IDataContext dataContext);
    protected virtual void SetupGeneratorContext(IGeneratorContext generatorContext);
    public sealed virtual bool IsEnabled(IDataContext dataContext);
    public virtual bool IsEnabled(ITreeNode context);
    public sealed virtual void Execute(IDataContext context);
    public void Execute(ISolution solution, ITextControl textControl, ITreeNode targetContext, ITreeNode anchor, Action`1<IGeneratorContext> configureContext);
    public void Execute(ISolution solution, ITextControl textControl, PsiLanguageType languageType, Action`1<IGeneratorContext> configureContext);
    public static void ExecuteNonInteractive(string kind, ISolution solution, ITextControl textControl, PsiLanguageType languageType, IProgressIndicator progress, Action`1<IGeneratorContext> configureContext, Action`1<IGeneratorContext> onCompleted);
    public static void ExecuteNonInteractive(string kind, IDeclaration targetDeclaration, ITreeNode anchor, IProgressIndicator progress, Action`1<IGeneratorContext> configureContext, Action`1<IGeneratorContext> onCompleted);
    [PureAttribute]
private static bool CheckDataContext(IDataContext dataContext);
    private void ExecuteImpl(IGeneratorWorkflow workflow, Action`1<IGeneratorContext> configureContext);
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GenerateConstructorWorkflow : GenerateCodeWorkflowBase {
    public double Order { get; }
    public virtual double get_Order();
    public virtual bool IsEmptyInputAllowed(IGeneratorContext context);
}
[GenerateProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GenerateConstructorWorkflowProvider : object {
    public sealed virtual IEnumerable`1<IGenerateActionWorkflow> CreateWorkflow(IDataContext dataContext);
}
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GenerateDeconstructorWorkflow : GenerateCodeWorkflowBase {
    public double Order { get; }
    public GeneratorGroupingBehavior GroupingBehavior { get; }
    public virtual double get_Order();
    public virtual GeneratorGroupingBehavior get_GroupingBehavior();
}
[GenerateProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GenerateDeconstructorWorkflowProvider : object {
    public sealed virtual IEnumerable`1<IGenerateActionWorkflow> CreateWorkflow(IDataContext dataContext);
}
[GenerateProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GenerateDelegatingMembersWorkflowProvider : object {
    public sealed virtual IEnumerable`1<IGenerateActionWorkflow> CreateWorkflow(IDataContext dataContext);
}
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GenerateDelegatingWorkflow : GenerateCodeWorkflowBase {
    public double Order { get; }
    public GeneratorGroupingBehavior GroupingBehavior { get; }
    public virtual double get_Order();
    public virtual GeneratorGroupingBehavior get_GroupingBehavior();
}
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GenerateDisposePatternWorkflow : GenerateCodeWorkflowBase {
    public static string DisposableInterfaceOption;
    private static Key`1<string> ourDisposableInterfaceDataKey;
    [CompilerGeneratedAttribute]
private bool <ImplementDispose>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ImplementDisposeAsync>k__BackingField;
    public bool ImplementDispose { get; public set; }
    public bool ImplementDisposeAsync { get; public set; }
    public double Order { get; }
    public GeneratorGroupingBehavior GroupingBehavior { get; }
    private static GenerateDisposePatternWorkflow();
    [CompilerGeneratedAttribute]
public bool get_ImplementDispose();
    [CompilerGeneratedAttribute]
public void set_ImplementDispose(bool value);
    [CompilerGeneratedAttribute]
public bool get_ImplementDisposeAsync();
    [CompilerGeneratedAttribute]
public void set_ImplementDisposeAsync(bool value);
    public virtual double get_Order();
    public virtual bool IsEmptyInputAllowed(IGeneratorContext context);
    public virtual GeneratorGroupingBehavior get_GroupingBehavior();
    protected virtual void SetupGeneratorContext(IGeneratorContext generatorContext);
    public static String[] GetDisposableInterfaceOptionValues(IPsiModule psiModule, IReadOnlyList`1<ITypeOwner> members, IUserDataHolder userData, String& defaultValue);
    public static bool IsRequiredByDisposableInterfaceOption(IDeclaredType type, string optionValue, PredefinedType predefinedType);
}
[GenerateProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GenerateDisposePatternWorkflowProvider : object {
    public sealed virtual IEnumerable`1<IGenerateActionWorkflow> CreateWorkflow(IDataContext dataContext);
}
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GenerateEqualityComparerWorkflow : GenerateCodeWorkflowBase {
    public double Order { get; }
    public GeneratorGroupingBehavior GroupingBehavior { get; }
    public virtual double get_Order();
    public virtual bool IsEmptyInputAllowed(IGeneratorContext context);
    public virtual GeneratorGroupingBehavior get_GroupingBehavior();
}
[GenerateProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GenerateEqualityComparerWorkflowProvider : object {
    public sealed virtual IEnumerable`1<IGenerateActionWorkflow> CreateWorkflow(IDataContext dataContext);
}
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GenerateEqualityMembersWorkflow : GenerateCodeWorkflowBase {
    public double Order { get; }
    public GeneratorGroupingBehavior GroupingBehavior { get; }
    public virtual double get_Order();
    public virtual bool IsEmptyInputAllowed(IGeneratorContext context);
    public virtual GeneratorGroupingBehavior get_GroupingBehavior();
}
[GenerateProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GenerateEqualityMembersWorkflowProvider : object {
    public sealed virtual IEnumerable`1<IGenerateActionWorkflow> CreateWorkflow(IDataContext dataContext);
}
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GenerateEventSubscriptionWorkflow : GenerateCodeWorkflowBase {
    public double Order { get; }
    public virtual double get_Order();
}
[GenerateProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GenerateEventSubscriptionWorkflowProvider : object {
    public sealed virtual IEnumerable`1<IGenerateActionWorkflow> CreateWorkflow(IDataContext dataContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GenerateFormattingWorkflow : GenerateCodeWorkflowBase {
    private static Key`1<OptionsState> ourWorkflowOptionsKey;
    [CompilerGeneratedAttribute]
private bool <ImplementIFormattable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ImplementISpanFormattable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ImplementIUtf8SpanFormattable>k__BackingField;
    public bool ImplementIFormattable { get; public set; }
    public bool ImplementISpanFormattable { get; public set; }
    public bool ImplementIUtf8SpanFormattable { get; public set; }
    public double Order { get; }
    public GeneratorGroupingBehavior GroupingBehavior { get; }
    private static GenerateFormattingWorkflow();
    [CompilerGeneratedAttribute]
public bool get_ImplementIFormattable();
    [CompilerGeneratedAttribute]
public void set_ImplementIFormattable(bool value);
    [CompilerGeneratedAttribute]
public bool get_ImplementISpanFormattable();
    [CompilerGeneratedAttribute]
public void set_ImplementISpanFormattable(bool value);
    [CompilerGeneratedAttribute]
public bool get_ImplementIUtf8SpanFormattable();
    [CompilerGeneratedAttribute]
public void set_ImplementIUtf8SpanFormattable(bool value);
    public virtual double get_Order();
    public virtual bool IsEmptyInputAllowed(IGeneratorContext context);
    public virtual GeneratorGroupingBehavior get_GroupingBehavior();
    protected virtual void SetupGeneratorContext(IGeneratorContext generatorContext);
    public static OptionsState TryGetOptions(IGeneratorContext generatorContext);
}
[GenerateProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GenerateFormattingWorkflowProvider : object {
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable`1<IGenerateActionWorkflow> CreateWorkflow(IDataContext dataContext);
}
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GenerateImplementationsWorkflow : GenerateCodeWorkflowBase {
    public double Order { get; }
    public virtual double get_Order();
}
[GenerateProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GenerateImplementationsWorkflowProvider : object {
    public sealed virtual IEnumerable`1<IGenerateActionWorkflow> CreateWorkflow(IDataContext dataContext);
}
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GenerateOverridesWorkflow : GenerateCodeWorkflowBase {
    public double Order { get; }
    public virtual double get_Order();
}
[GenerateProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GenerateOverridesWorkflowProvider : object {
    public sealed virtual IEnumerable`1<IGenerateActionWorkflow> CreateWorkflow(IDataContext dataContext);
}
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GeneratePartialMethodsWorkflow : GenerateCodeWorkflowBase {
    public double Order { get; }
    public GeneratorGroupingBehavior GroupingBehavior { get; }
    public virtual double get_Order();
    public virtual GeneratorGroupingBehavior get_GroupingBehavior();
}
[GenerateProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GeneratePartialMethodsWorkflowProvider : object {
    public sealed virtual IEnumerable`1<IGenerateActionWorkflow> CreateWorkflow(IDataContext dataContext);
}
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GeneratePropertiesWorkflow : GenerateCodeWorkflowBase {
    public double Order { get; }
    public GeneratorGroupingBehavior GroupingBehavior { get; }
    public GeneratePropertiesWorkflow(IconId icon);
    public virtual double get_Order();
    public virtual GeneratorGroupingBehavior get_GroupingBehavior();
}
[GenerateProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GeneratePropertiesWorkflowProvider : object {
    public sealed virtual IEnumerable`1<IGenerateActionWorkflow> CreateWorkflow(IDataContext dataContext);
}
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GenerateReadOnlyPropertiesWorkflow : GenerateCodeWorkflowBase {
    public double Order { get; }
    public GeneratorGroupingBehavior GroupingBehavior { get; }
    public GenerateReadOnlyPropertiesWorkflow(IconId icon);
    public virtual double get_Order();
    public virtual GeneratorGroupingBehavior get_GroupingBehavior();
}
[GenerateProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GenerateReadOnlyPropertiesWorkflowProvider : object {
    public sealed virtual IEnumerable`1<IGenerateActionWorkflow> CreateWorkflow(IDataContext dataContext);
}
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GenerateRelationalComparerWorkflow : GenerateCodeWorkflowBase {
    public double Order { get; }
    public GeneratorGroupingBehavior GroupingBehavior { get; }
    public virtual double get_Order();
    public virtual bool IsEmptyInputAllowed(IGeneratorContext context);
    public virtual GeneratorGroupingBehavior get_GroupingBehavior();
}
[GenerateProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GenerateRelationalComparerWorkflowProvider : object {
    public sealed virtual IEnumerable`1<IGenerateActionWorkflow> CreateWorkflow(IDataContext dataContext);
}
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GenerateRelationalMembersWorkflow : GenerateCodeWorkflowBase {
    public double Order { get; }
    public GeneratorGroupingBehavior GroupingBehavior { get; }
    public virtual double get_Order();
    public virtual bool IsEmptyInputAllowed(IGeneratorContext context);
    public virtual GeneratorGroupingBehavior get_GroupingBehavior();
}
[GenerateProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Generate.Workflows.GenerateRelationalMembersWorkflowProvider : object {
    public sealed virtual IEnumerable`1<IGenerateActionWorkflow> CreateWorkflow(IDataContext dataContext);
}
public interface JetBrains.ReSharper.Feature.Services.Generate.Workflows.IGenerateImplementationsWorkflowProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Generate.Workflows.IGenerateOverridesWorkflowProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Gestures.IDragDropExecutor {
    public string PresentableName { get; }
    public Dictionary`2<string, object> Parameters { get; }
    public abstract virtual string get_PresentableName();
    public abstract virtual Dictionary`2<string, object> get_Parameters();
    public abstract virtual void Execute(object droppedItem, object dropDestination, Dictionary`2<string, object> parameters);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkProviderAttribute : SolutionComponentWithPriorityAttribute {
    protected static Instantiation HyperlinkProviderDefaultInstantiation;
    public HyperlinkProviderAttribute(int priority, Instantiation instantiation);
}
public interface JetBrains.ReSharper.Feature.Services.Hyperlink.IHyperlink {
    public abstract virtual DocumentRange GetDocumentRange();
    [CanBeNullAttribute]
public abstract virtual IHighlighter CreateHighlighter(ITextControl textControl);
    public abstract virtual void Navigate(IDataContext dataContext);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.Hyperlink.IHyperlinkProvider {
    public KeyStateMasks ActivationKeys { get; }
    public abstract virtual KeyStateMasks get_ActivationKeys();
    [CanBeNullAttribute]
public abstract virtual IHyperlink CreateHyperlink(IDataContext context);
}
[ZoneDefinitionAttribute]
[ZoneLicenseAttribute("3224415555278898107678094174726325025260023407112999478297")]
public interface JetBrains.ReSharper.Feature.Services.ICodeEditingZone {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.ImportType.ImportTypeFilteringCachedSettings : object {
    private Lifetime myLifetime;
    private ClrLanguagesKnown myCLRLanguages;
    private SettingsCacheManager mySettingsCacheManager;
    private ISettingsStore mySettingsStore;
    private SettingsKey JetBrains.Application.Settings.Extentions.ICachedSettingsReader<JetBrains.ReSharper.Psi.ImportType.ImportTypeFiltering>.KeyExposed { get; }
    public ImportTypeFilteringCachedSettings(Lifetime lifetime, ClrLanguagesKnown clrLanguages, SettingsCacheManager settingsCacheManager, ISettingsStore settingsStore);
    public sealed virtual ImportTypeFiltering TryGetImportFiltering(PsiLanguageType languageType, ISolution solution);
    private sealed virtual override SettingsKey JetBrains.Application.Settings.Extentions.ICachedSettingsReader<JetBrains.ReSharper.Psi.ImportType.ImportTypeFiltering>.get_KeyExposed();
    private sealed virtual override ImportTypeFiltering JetBrains.Application.Settings.Extentions.ICachedSettingsReader<JetBrains.ReSharper.Psi.ImportType.ImportTypeFiltering>.ReadData(Lifetime lifetime, IContextBoundSettingsStore store);
    [CompilerGeneratedAttribute]
internal static ClrImportTypeFilter <JetBrains.Application.Settings.Extentions.ICachedSettingsReader<JetBrains.ReSharper.Psi.ImportType.ImportTypeFiltering>.ReadData>g__ReadFilters|8_2(Expression`1<Func`2<AutoImport2Settings, IIndexedEntry`2<string, bool>>> lambdaexpression, <>c__DisplayClass8_0& );
}
[OptionsPageAttribute("TypeImportPage", "Type Import", "JetBrains.Application.Resources.IdeThemedIcons/SearchResults")]
public class JetBrains.ReSharper.Feature.Services.ImportType.TypeImportPage : BeSimpleOptionsPage {
    private static string PID;
    private Lifetime myLifetime;
    private IconHostBase myIconHost;
    private IconModel myErrorIcon;
    public TypeImportPage(Lifetime lifetime, IconHostBase iconHost, OptionsPageContext optionsPageContext, OptionsSettingsSmartContext optionsSettingsSmartContext);
    [NotNullAttribute]
private BeControl CreateTypeFilteringControl(SettingsKey settingsKey, SettingsIndexedEntry indexedEntry);
    private ValueTuple`3<string, IconModel, ValidationStates> ValidateMask(string value);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.ImportType.ZoneMarker : object {
}
public static class JetBrains.ReSharper.Feature.Services.InlayHints.DeclaredElementInlayHintDescriptionHelper : object {
    private static DeclaredElementPresenterStyle ourPresentingStyle;
    private static DeclaredElementInlayHintDescriptionHelper();
    public static RichText GetInlayHintDescription(PsiLanguageType languageType, IDeclaredElement declaration);
    public static RichText GetInlayHintDescription(PsiLanguageType languageType, IDeclaredElement declaration, ISubstitution substitution);
    private static void AddDeclaredElementDescription(IDeclaredElement declaration, RichTextBlock description);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.InlayHints.ExclusionList.ExclusionListControl : object {
    [ExtensionAttribute]
public static void AddExclusionListControl(BeSimpleOptionsPage optionsPage, IInlayHintsExclusionListStore exclusionListStore, IconHostBase iconHost, string labelText, Regex entryPattern, string entryErrorMessage);
    private static BeControl DoCreateExclusionListControl(BeSimpleOptionsPage optionsPage, IInlayHintsExclusionListStore parameterNameHintsExclusionListStore, IconHostBase iconHost, Regex entryPattern, string entryErrorMessage);
}
public interface JetBrains.ReSharper.Feature.Services.InlayHints.ExclusionList.IInlayHintsExclusionListManager {
    public ILanguageManager LanguageManager { get; }
    public abstract virtual ILanguageManager get_LanguageManager();
    public abstract virtual void AddExclusionListEntry(IInlayHintsExclusionListStore store, IContextBoundSettingsStore settingsStore, string entry);
    public abstract virtual TExclusionListMatcher GetMatcher(IInlayHintsExclusionListStore store, IContextBoundSettingsStore settingsStore, Func`2<IEnumerable`1<string>, TExclusionListMatcher> matcherFactory);
}
public interface JetBrains.ReSharper.Feature.Services.InlayHints.ExclusionList.IInlayHintsExclusionListStore {
    public abstract virtual Guid GetExclusionListCacheKey();
    public abstract virtual IEnumerable`1<ValueTuple`2<Guid, string>> GetExclusionListEntries(IContextBoundSettingsStore settingsStore);
    public abstract virtual void DeleteExclusionListEntry(IContextBoundSettingsStore settingsStore, Guid key);
    public abstract virtual void AddOrUpdateExclusionListEntry(IContextBoundSettingsStore settingsStore, Guid key, string entry);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.InlayHints.ExclusionList.InlayHintsExclusionListManager : object {
    private Dictionary`2<Guid, object> myMatchers;
    private ReaderWriterLockSlim myLock;
    [CompilerGeneratedAttribute]
private ILanguageManager <LanguageManager>k__BackingField;
    public ILanguageManager LanguageManager { get; }
    public InlayHintsExclusionListManager(Lifetime lifetime, ILanguageManager languageManager, ISettingsStore settingsStore);
    private void ClearMatchers();
    public sealed virtual TExclusionListMatcher GetMatcher(IInlayHintsExclusionListStore store, IContextBoundSettingsStore settingsStore, Func`2<IEnumerable`1<string>, TExclusionListMatcher> matcherFactory);
    [CompilerGeneratedAttribute]
public sealed virtual ILanguageManager get_LanguageManager();
    public sealed virtual void AddExclusionListEntry(IInlayHintsExclusionListStore store, IContextBoundSettingsStore settingsStore, string entry);
    private IEnumerable`1<string> GetExclusionListEntries(IInlayHintsExclusionListStore store, IContextBoundSettingsStore settingsStore);
}
public static class JetBrains.ReSharper.Feature.Services.InlayHints.ExclusionList.InlayHintsExclusionListMatcherUtil : object {
    private static Predicate`1<string> ourAnyPredicate;
    private static InlayHintsExclusionListMatcherUtil();
    public static Predicate`1<string> CreatePredicate(string value);
}
public abstract class JetBrains.ReSharper.Feature.Services.InlayHints.ExclusionList.InlayHintsExclusionListStore : object {
    public abstract virtual Guid GetExclusionListCacheKey();
    public abstract virtual SettingsIndexedEntry GetIndexedEntry(IContextBoundSettingsStore settingsStore);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.InlayHints.ExclusionList.InlayHintsExclusionListStore/<GetExclusionListEntries>d__2")]
public sealed virtual IEnumerable`1<ValueTuple`2<Guid, string>> GetExclusionListEntries(IContextBoundSettingsStore settingsStore);
    public void AddOrUpdateExclusionListEntry(IContextBoundSettingsStore settingsStore, Guid key, string entry);
    public sealed virtual void DeleteExclusionListEntry(IContextBoundSettingsStore settingsStore, Guid key);
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.InlayHints.ExclusionList.IInlayHintsExclusionListStore.AddOrUpdateExclusionListEntry(IContextBoundSettingsStore settingsStore, Guid key, string entry);
}
public interface JetBrains.ReSharper.Feature.Services.InlayHints.IInlayHintBulbActionsProvider {
    public abstract virtual IEnumerable`1<IntentionAction> CreateChangeVisibilityActions(ISettingsStore settingsStore, IHighlighting highlighting, IAnchor anchor);
    public abstract virtual IEnumerable`1<BulbMenuItem> CreateChangeVisibilityBulbMenuItems(ISettingsStore settingsStore, IHighlighting highlighting);
    public abstract virtual string GetOptionsPageId();
}
public interface JetBrains.ReSharper.Feature.Services.InlayHints.IInlayHintContextActionHighlighting {
}
public interface JetBrains.ReSharper.Feature.Services.InlayHints.IInlayHintContextActionsProvider {
    public abstract virtual bool IsApplicable(IEnumerable`1<IInlayHintContextActionHighlighting> highlightings);
    public abstract virtual IEnumerable`1<IntentionAction> GetPerHighlightingActions(IEnumerable`1<IInlayHintContextActionHighlighting> highlighting, IAnchor groupAnchor, IAnchor configureParentAnchor);
    public abstract virtual IEnumerable`1<IntentionAction> GetCommonActions(IEnumerable`1<IInlayHintContextActionHighlighting> highlightings, IAnchor groupAnchor);
    public abstract virtual string GetOptionsPageId(IEnumerable`1<IInlayHintContextActionHighlighting> highlightings);
}
public interface JetBrains.ReSharper.Feature.Services.InlayHints.IInlayHintHighlighting {
}
public interface JetBrains.ReSharper.Feature.Services.InlayHints.IInlayHintWithDescriptionHighlighting {
    public RichText Description { get; }
    public abstract virtual RichText get_Description();
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.InlayHints.IInlayHintContextActionsProvider")]
public class JetBrains.ReSharper.Feature.Services.InlayHints.InlayHintContextActionProviderAttribute : ProjectFileTypeAttribute {
    public InlayHintContextActionProviderAttribute(Type Type, Instantiation instantiation);
}
public abstract class JetBrains.ReSharper.Feature.Services.InlayHints.InlayHintContextActionsProvider`1 : object {
    public sealed virtual bool IsApplicable(IEnumerable`1<IInlayHintContextActionHighlighting> highlightings);
    public abstract virtual IEnumerable`1<IntentionAction> GetPerHighlightingActions(IEnumerable`1<IInlayHintContextActionHighlighting> highlighting, IAnchor groupAnchor, IAnchor configureParentAnchor);
    public abstract virtual IEnumerable`1<IntentionAction> GetCommonActions(IEnumerable`1<IInlayHintContextActionHighlighting> highlightings, IAnchor groupAnchor);
    public abstract virtual string GetOptionsPageId(IEnumerable`1<IInlayHintContextActionHighlighting> highlightings);
}
[AttributeUsageAttribute("4")]
public class JetBrains.ReSharper.Feature.Services.InlayHints.InlayHintContextActionStyleAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <SubmenuWrappingRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubmenuName>k__BackingField;
    public bool SubmenuWrappingRequired { get; }
    [NotNullAttribute]
public string SubmenuName { get; }
    public InlayHintContextActionStyleAttribute(Type submenuNameResourceType, string submenuNameResourceName, bool submenuWrappingRequired);
    [CompilerGeneratedAttribute]
public bool get_SubmenuWrappingRequired();
    [CompilerGeneratedAttribute]
public string get_SubmenuName();
}
public static class JetBrains.ReSharper.Feature.Services.InlayHints.InlayHintHighlighterHelper : object {
    public static DocumentRange GetContainingLineEndOffsetNoLineBreak(DocumentOffset offsetInsideLine);
}
public class JetBrains.ReSharper.Feature.Services.InlayHints.InlayHintsFilter : PencilsFilterSettingsBase`1<GeneralInlayHintsOptions> {
    public string Kind { get; }
    public InlayHintsFilter(ISettingsStore store);
    public virtual string get_Kind();
}
[OptionsPageAttribute("InlayHintsGeneralOptionsPageId", "General", "JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons/ParameterInfoPage")]
public class JetBrains.ReSharper.Feature.Services.InlayHints.InlayHintsGeneralOptionsPage : BeSimpleOptionsPage {
    public static string PID;
    public InlayHintsGeneralOptionsPage(Lifetime lifetime, OptionsPageContext optionsPageContext, OptionsSettingsSmartContext optionsSettingsSmartContext);
}
[CustomHighlightingGroupActionProviderAttribute("JetBrains.ProjectModel.KnownProjectFileType", "16")]
public class JetBrains.ReSharper.Feature.Services.InlayHints.InlayHintsGroupContextActionProvider : object {
    private ISettingsStore mySettingsStore;
    private IEnumerable`1<IInlayHintContextActionsProvider> myProviders;
    public InlayHintsGroupContextActionProvider(ISettingsStore settingsStore, IEnumerable`1<IInlayHintContextActionsProvider> providers);
    public sealed virtual IAnchor GetAnchor();
    public sealed virtual IEnumerable`1<IntentionAction> GetActions(IEnumerable`1<IHighlighting> highlightings, IPsiSourceFile sourceFile, IAnchor configureAnchor);
    [CompilerGeneratedAttribute]
internal static IntentionAction <GetActions>g__CreateConfigureIntentionAction|4_2(string optionsPage, IAnchor anchor);
}
public class JetBrains.ReSharper.Feature.Services.InlayHints.InlayHintsOptionPageBase : BeSimpleOptionsPage {
    private OptionsPageContext myOptionsPageContext;
    public InlayHintsOptionPageBase(Lifetime lifetime, OptionsPageContext optionsPageContext, OptionsSettingsSmartContext optionsSettingsSmartContext, bool wrapInScrollablePanel);
    public void AddVisibilityHelpText();
    public void AddVisibilityOption(Expression`1<Func`2<T, PushToHintMode>> func, string prefix);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ReSharperGeneralInlayHintsSettingsSettingDescription")]
[ObsoleteAttribute]
public class JetBrains.ReSharper.Feature.Services.InlayHints.InlayHintsOptions : object {
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToShowInlayHintsSettingDescription")]
public bool ShowInlayHints;
}
[MigrateSettingsAttribute]
public class JetBrains.ReSharper.Feature.Services.InlayHints.InlayHintsOptionsMigration : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.InlayHints.InlayHintsOptionsMigration/<GetEntriesToMigrate>d__0")]
public sealed virtual IEnumerable`1<SettingsEntry> GetEntriesToMigrate(ISettingsSchema schema);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.InlayHints.InlayHintsOptionsMigration/<GetKeysToMigrate>d__1")]
public sealed virtual IEnumerable`1<SettingsKey> GetKeysToMigrate(ISettingsSchema schema);
    public sealed virtual void Migrate(IContextBoundSettingsStoreImplementation store);
}
public static class JetBrains.ReSharper.Feature.Services.InlayHints.InlayHintsOptionsMigrationHelper : object {
    public static void Migrate(IContextBoundSettingsStoreImplementation store, Expression`1<Func`2<TSource, bool>> source, Expression`1<Func`2<TTarget, PushToHintMode>> target);
    public static void NegateAndMigrate(IContextBoundSettingsStoreImplementation store, Expression`1<Func`2<TSource, bool>> source, Expression`1<Func`2<TTarget, PushToHintMode>> target);
    public static void Migrate(IContextBoundSettingsStoreImplementation store, Expression`1<Func`2<TSource, TValue>> source, Expression`1<Func`2<TTarget, TValue>> target);
    public static void MigrateExclusionList(IContextBoundSettingsStoreImplementation store, Expression`1<Func`2<TSource, string>> source);
    public static void RemoveEmptyValuesFromExclusionList(IContextBoundSettingsStoreImplementation store);
}
[OptionsPageAttribute("InlayHintsOptionsId", "Inlay Hints", "JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons/ParameterInfoPage")]
public class JetBrains.ReSharper.Feature.Services.InlayHints.InlayHintsOptionsPage : AEmptyOptionsPage {
    public static string PID;
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.InlayHints.InlayHintsOptionsStore : object {
    private JetHashSet`1<SettingsKey> mySettingsKeysToRehighlight;
    public InlayHintsOptionsStore(Lifetime lifetime, ISettingsStore settingsStore, HighlightingSettingsManager highlightingSettingsManager);
    public void RegisterSettingsKeyToRehighlightVisibleDocumentOnItsChange(SettingsKey settingsKey);
    public bool IsEnabled(IContextBoundSettingsStore settingsStore);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.InlayHints.InlayHintTooltipProvider : object {
    private sealed virtual override RichTextBlock JetBrains.TextControl.DocumentMarkup.IHighlighterTooltipProvider.TryGetTooltip(IHighlighter highlighter, HighlighterTooltipKind where);
    public sealed virtual bool ShouldShowTooltip(IHighlighter highlighter, HighlighterTooltipKind where);
    private bool ShouldShowTooltip(IHighlighter highlighter, IInlayHintWithDescriptionHighlighting& highlighting);
}
public static class JetBrains.ReSharper.Feature.Services.InlayHints.IntraTextAdornmentDataModelHelper : object {
    public static BulbMenuItem CreateTurnOffAllInlayHintsBulbMenuItem(ISettingsStore settingsStore);
    public static BulbMenuItem CreateConfigureBulbMenuItem(string page);
    public static BulbMenuItem CreateTurnOffBulbMenuItem(ISettingsStore settingsStore, Expression`1<Func`2<TKeyClass, bool>> option, string text, IconId iconId, InvisibleAnchor anchor);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.InlayHints.IntraTextAdornmentDataModelHelper/<CreateChangeVisibilityItems>d__3`2")]
private static IEnumerable`1<T> CreateChangeVisibilityItems(ISettingsStore settingsStore, Expression`1<Func`2<TKeyClass, PushToHintMode>> option, IAnchor anchor, string title, Func`5<Action, string, IconId, IAnchor, T> factory);
    public static IEnumerable`1<BulbMenuItem> CreateChangeVisibilityBulbMenuItems(ISettingsStore settingsStore, Expression`1<Func`2<TKeyClass, PushToHintMode>> option, IAnchor anchor, string title);
    public static IEnumerable`1<IntentionAction> CreateChangeVisibilityActions(ISettingsStore settingsStore, Expression`1<Func`2<TKeyClass, PushToHintMode>> option, IAnchor anchor, string title);
}
public static class JetBrains.ReSharper.Feature.Services.InlayHints.NamesHelper : object {
    private static String[] ourEmptyParts;
    private static NamesHelper();
    public static String[] GetParts(NameParser nameParser, INamingPolicyProvider namingPolicyProvider, string name, NamingRule namingRule);
    public static String[] GetParts(NameParser nameParser, INamingPolicyProvider namingPolicyProvider, string name);
    public static bool IsPresentedAsInitials(string primary, String[] secondary);
    public static bool IsLike(String[] primary, String[] secondary);
    public static bool IsLike(NameParser nameParser, INamingPolicyProvider namingPolicyProvider, NamingRule namingRule, string primary, String[] primaryParts, string secondary);
    public static bool IsLike(NameParser nameParser, INamingPolicyProvider namingPolicyProvider, NamingRule namingRule, String[] primaryParts, string secondary);
    public static String[][] GetUniqueNamesParts(NameParser nameParser, INamingPolicyProvider namingPolicyProvider, String[] names, NamingRule namingRule);
    public static String[][] GetUniqueNamesParts(NameParser nameParser, INamingPolicyProvider namingPolicyProvider, String[] names, HashSet`1<string> usedNames, NamingRule namingRule);
    public static string TrimDigits(string value);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.InlayHints.PencilsDefaultFilterProvider : object {
    public sealed virtual IEnumerable`1<IPencilsFilter> GetFilters(Lifetime lifetime, ISolution solution, ISettingsStore store);
}
[OptionsPageAttribute("VirtualIndentingOptionsPageId", "Virtual Indenting", "JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons/ParameterInfoPage")]
public class JetBrains.ReSharper.Feature.Services.InlayHints.VirtualIndentingOptionsPage : BeSimpleOptionsPage {
    [CompilerGeneratedAttribute]
private IComponentContainer <Container>k__BackingField;
    public static string PID;
    private BeControl myButton;
    private BeRichText myTextOption;
    [NotNullAttribute]
public IComponentContainer Container { get; }
    public VirtualIndentingOptionsPage(Lifetime lifetime, OptionsPageContext optionsPageContext, OptionsSettingsSmartContext optionsSettingsSmartContext, IComponentContainer componentContainer);
    [CompilerGeneratedAttribute]
public IComponentContainer get_Container();
    private void NavigateToPage(string pid);
    private RichText GetRichTextForDisabledVirtualIndentingMessage(bool smartIndent, bool virtualIndentOnEnter, TabHandlingType tabType);
    private bool IsNeedToFix();
    private void ChangeVisibility(ControlVisibility visibility);
    private void UpdateVisibility();
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_11();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.InlayHints.ZoneMarker : object {
}
public interface JetBrains.ReSharper.Feature.Services.InspectThis.IInspectionResultDescriptor {
    unknown Action RefreshAction {public set; }
    unknown Action StopAction {public set; }
    public LifetimeDefinition LifetimeDefinition { get; }
    public NoContentLockInsideReadWriteLock RwLock { get; }
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> Presenter { get; }
    public ISolution Solution { get; }
    public IProperty`1<string> Title { get; }
    public abstract virtual void set_RefreshAction(Action value);
    public abstract virtual void set_StopAction(Action value);
    public abstract virtual void SetCalculationLifetime(Lifetime calculationLifetime);
    public abstract virtual LifetimeDefinition get_LifetimeDefinition();
    public abstract virtual NoContentLockInsideReadWriteLock get_RwLock();
    public abstract virtual StructuredPresenter`2<TreeModelNode, IPresentableItem> get_Presenter();
    public abstract virtual ISolution get_Solution();
    public abstract virtual IProperty`1<string> get_Title();
}
public interface JetBrains.ReSharper.Feature.Services.InspectThis.IInspectionWindowRegistrar {
    public abstract virtual void ShowContent(IInspectionResultDescriptor descriptor);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.InspectThis.IInspectThisProvider {
}
public class JetBrains.ReSharper.Feature.Services.InspectThis.InspectGroup : ExtensibleActionGroup {
    public static InspectGroup Default;
    public static InspectGroup ValueTracking;
    public static InspectGroup Other;
    protected InspectGroup(string name, float order);
    private static InspectGroup();
}
public class JetBrains.ReSharper.Feature.Services.InspectThis.InspectGroupWorkflow : ContextNavigation {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private InspectGroup <ActionGroup>k__BackingField;
    public int Order { get; }
    public InspectGroup ActionGroup { get; }
    public InspectGroupWorkflow(string title, string actionId, InspectGroup actionGroup, Action execution, int order, IconId icon);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public sealed virtual InspectGroup get_ActionGroup();
}
[ToolWindowDescriptorAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.InspectThis.InspectionToolWindowDescriptor : ToolWindowDescriptor {
}
[ActionAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "InspectThis_Action_Name_Text")]
public class JetBrains.ReSharper.Feature.Services.InspectThis.InspectThisAction : InspectThisActionBase`1<IInspectThisProvider> {
    public static string Title;
    protected RichText Caption { get; }
    protected bool ShowMenuWithOneItem { get; }
    private static InspectThisAction();
    protected virtual RichText get_Caption();
    protected virtual bool get_ShowMenuWithOneItem();
}
public abstract class JetBrains.ReSharper.Feature.Services.InspectThis.InspectThisActionBase`1 : ExtensibleAction`3<TProvider, InspectGroupWorkflow, InspectGroup> {
    protected virtual IconId GetGroupIcon(IDataContext context);
    protected virtual ICollection`1<TProvider> GetWorkflowProviders();
    protected virtual void Execute(IDataContext context, InspectGroupWorkflow workflow);
    protected virtual bool IsAvailable(IDataContext context, InspectGroupWorkflow workflow);
    protected virtual bool IsEnabled(IDataContext context, InspectGroupWorkflow workflow);
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.InspectThis.IInspectThisProvider")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.Feature.Services.InspectThis.InspectThisProviderAttribute : ShellComponentAttribute {
    public InspectThisProviderAttribute(Instantiation instantiation);
}
public interface JetBrains.ReSharper.Feature.Services.Integration.ICoverageSnapshotHandler {
    public abstract virtual void OpenSnapshot(string fileName, IProgressIndicator progress);
}
[ZoneDefinitionAttribute]
public interface JetBrains.ReSharper.Feature.Services.Integration.ICoverageSnapshotHandlerZone {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Integration.ZoneMarker : object {
}
public enum JetBrains.ReSharper.Feature.Services.Intentions.AltEnterHandlerPriority : Enum {
    public int value__;
    public static AltEnterHandlerPriority TheFirst;
    public static AltEnterHandlerPriority Normal;
    public static AltEnterHandlerPriority TheLast;
}
public class JetBrains.ReSharper.Feature.Services.Intentions.AttributeArguments : ValueType {
    [CompilerGeneratedAttribute]
private AttributeValue[] <FixedArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private Pair`2[] <NamedArguments>k__BackingField;
    public AttributeValue[] FixedArguments { get; public set; }
    public Pair`2[] NamedArguments { get; public set; }
    [CompilerGeneratedAttribute]
public void set_FixedArguments(AttributeValue[] value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public AttributeValue[] get_FixedArguments();
    [CompilerGeneratedAttribute]
public void set_NamedArguments(Pair`2[] value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Pair`2[] get_NamedArguments();
}
public static class JetBrains.ReSharper.Feature.Services.Intentions.ConfigureHighlightingAnchor : object {
    [NotNullAttribute]
public static IAnchorPosition SuppressPosition;
    [NotNullAttribute]
public static IAnchorPosition SeverityPosition;
    [NotNullAttribute]
public static IAnchorPosition ConfigurePosition;
    [NotNullAttribute]
public static IAnchorPosition FindSimilarPosition;
    [NotNullAttribute]
public static IAnchorPosition InspectionWikiPosition;
    private static ConfigureHighlightingAnchor();
    [NotNullAttribute]
[PureAttribute]
public static IAnchor Create(IQuickFixes quickFixes, IHighlighting highlighting, IPsiSourceFile sourceFile);
    [NotNullAttribute]
[PureAttribute]
public static IAnchor Create(string severityId, IPsiSourceFile sourceFile);
    private static string GetWarningTitle(HighlightingSettingsManager settingsManager, string severityId);
    [NotNullAttribute]
private static string GetConfigurableSeverityId(HighlightingSettingsManager settingsManager, IHighlighting highlighting);
    [NotNullAttribute]
private static string GetTitle(HighlightingSettingsManager highlightingManager, IHighlighting highlighting, string warningTitle, IPsiSourceFile sourceFile);
    [NotNullAttribute]
private static string GetTitle(HighlightingSettingsManager highlightingManager, string severityId, string warningTitle, IPsiSourceFile sourceFile);
    private static string GetTitleForCompilerHighlighting(string warningTitle, string compilerIds);
    [NotNullAttribute]
[PureAttribute]
private static IAnchor CreateAnchor(string title);
}
public class JetBrains.ReSharper.Feature.Services.Intentions.CreateDeclaration.CreateClassDeclarationContext : CreateContextBase {
    public string ClassName;
    public AccessRights AccessRights;
    public int TypeArgumentsCount;
    public SimpleTypeImage BaseType;
    public bool CreatePrimaryConstructor;
    [CanBeNullAttribute]
public MemberSignature ConstructorSignature;
    public bool IsStatic;
    public bool IsPartial;
    public bool CreateAsInterface;
    public bool CannotBeEnum;
    public bool CannotBeInterface;
    public bool CannotBeStruct;
    public bool CannotBeClass;
    public bool CannotBeRecord;
    public bool CannotBeRecordStruct;
}
public class JetBrains.ReSharper.Feature.Services.Intentions.CreateDeclaration.CreateConstantDeclarationContext : CreateContextBase {
    public AccessRights AccessRights;
    public string ConstantName;
    public SimpleTypeImage Type;
}
public class JetBrains.ReSharper.Feature.Services.Intentions.CreateDeclaration.CreateConstDeclarationContext : CreateContextBase {
    public string FieldName;
    public SimpleTypeImage Type;
}
public class JetBrains.ReSharper.Feature.Services.Intentions.CreateDeclaration.CreateConstructorDeclarationContext : CreateContextBase {
    public ITypeElement Class;
    public MemberSignature ConstructorSignature;
    public AccessRights AccessRights;
    public bool IsPrimary;
    [CanBeNullAttribute]
public IMemberBodyTemplateFieldHolderFactory MemberBodyTemplateFieldFactory;
}
public class JetBrains.ReSharper.Feature.Services.Intentions.CreateDeclaration.CreateContextBase : object {
    public ICreationTarget Target;
    public CreateContextBase(ICreationTarget target);
}
public class JetBrains.ReSharper.Feature.Services.Intentions.CreateDeclaration.CreateDelegateDeclarationContext : CreateContextBase {
    public string DelegateName;
    public int TypeArgumentsCount;
    public AccessRights AccessRights;
}
public class JetBrains.ReSharper.Feature.Services.Intentions.CreateDeclaration.CreateEnumMemberDeclarationContext : CreateContextBase {
    public string EnumMemberName;
}
public class JetBrains.ReSharper.Feature.Services.Intentions.CreateDeclaration.CreateEventDeclarationContext : CreateContextBase {
    public string EventName;
    public bool IsStatic;
    public AccessRights AccessRights;
    public ITypeImage EventType;
}
public class JetBrains.ReSharper.Feature.Services.Intentions.CreateDeclaration.CreateFieldDeclarationContext : CreateContextBase {
    public AccessRights AccessRights;
    public string FieldName;
    public bool IsStatic;
    public bool IsReadOnly;
    public SimpleTypeImage Type;
}
public class JetBrains.ReSharper.Feature.Services.Intentions.CreateDeclaration.CreateMethodDeclarationContext : CreateContextBase {
    public string MethodName;
    public IReference SourceReferenceExpressionReference;
    public bool IsAbstract;
    public bool IsStatic;
    public AccessRights AccessRights;
    public IList`1<IType> TypeArguments;
    public IReadOnlyList`1<MemberSignature> MethodSignatures;
    public bool ExecuteTemplateOverParameters;
    public bool ExecuteTemplateOverReturnType;
    public bool ExecuteTemplateOverName;
    public bool ExecuteTemplateOverMemberBody;
}
public class JetBrains.ReSharper.Feature.Services.Intentions.CreateDeclaration.CreatePropertyDeclarationContext : CreateContextBase {
    public string PropertyName;
    public MemberSignature PropertySignature;
    public bool IsStatic;
    public AccessRights AccessRights;
    public ReadWriteKind ReadWriteKind;
    public OverridableKind OverridableKind;
    public AccessorImplementationKind AccessorImplementationKind;
}
public interface JetBrains.ReSharper.Feature.Services.Intentions.CreateDeclaration.ICreateConstDeclarationIntention {
    public abstract virtual IntentionResult ExecuteEx(CreateConstDeclarationContext context);
}
public interface JetBrains.ReSharper.Feature.Services.Intentions.CreateDeclaration.ICreateNameSpaceDeclarationIntention {
    public abstract virtual ITypeAndNamespaceHolderDeclaration CreateOrFindNameSpace(IFile file, string nameSpaceName);
}
public interface JetBrains.ReSharper.Feature.Services.Intentions.CreateDeclaration.ICreateTypeParameterDeclarationIntention {
    public abstract virtual void ExecuteEx(ITypeParametersOwner destination, string newTypeParamName);
}
public enum JetBrains.ReSharper.Feature.Services.Intentions.CreateDeclaration.OverridableKind : Enum {
    public int value__;
    public static OverridableKind REGULAR;
    public static OverridableKind ABSTRACT;
    public static OverridableKind VIRTUAL;
    public static OverridableKind OVERRIDE;
}
public enum JetBrains.ReSharper.Feature.Services.Intentions.CreateDeclaration.ReadWriteKind : Enum {
    public int value__;
    public static ReadWriteKind READ_WRITE;
    public static ReadWriteKind READ_ONLY;
    public static ReadWriteKind WRITE_ONLY;
}
[MeansImplicitUseAttribute]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.Intentions.ICustomHighlightingActionProvider")]
[ComponentInstantiationAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Intentions.CustomHighlightingActionProviderAttribute : ProjectFileTypeAttribute {
    public CustomHighlightingActionProviderAttribute(Type Type);
    public CustomHighlightingActionProviderAttribute(Type Type, Instantiation instantiation);
}
[MeansImplicitUseAttribute]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.Intentions.ICustomHighlightingGroupActionProvider")]
public class JetBrains.ReSharper.Feature.Services.Intentions.CustomHighlightingGroupActionProviderAttribute : ProjectFileTypeAttribute {
    public CustomHighlightingGroupActionProviderAttribute(Type Type, Instantiation instantiation);
}
public class JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.ComplexTypeImage : object {
    [CompilerGeneratedAttribute]
private IDeclaredType <ParentType>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ITypeImage> <ChildTypes>k__BackingField;
    [NotNullAttribute]
public IDeclaredType ParentType { get; }
    [NotNullAttribute]
public IList`1<ITypeImage> ChildTypes { get; }
    public ComplexTypeImage(IDeclaredType parentType, IEnumerable`1<ITypeImage> childTypes);
    [CompilerGeneratedAttribute]
public IDeclaredType get_ParentType();
    [CompilerGeneratedAttribute]
public IList`1<ITypeImage> get_ChildTypes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.CreateNewFileTarget : object {
    private bool myPrepared;
    [NullableAttribute("2")]
private ITreeNode myTarget;
    [NullableAttribute("2")]
private IFile myFile;
    [NullableAttribute("2")]
private IReferencePointer myReferenceToBind;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITreeNode <Anchor>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectFolder <TargetFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectFileType <FileType>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <TargetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetNamespaceName>k__BackingField;
    [CompilerGeneratedAttribute]
private PsiLanguageType <TargetLanguage>k__BackingField;
    [NullableAttribute("2")]
public ITreeNode Anchor { get; }
    public IProjectFolder TargetFolder { get; }
    public ProjectFileType FileType { get; }
    public VirtualFileSystemPath TargetPath { get; }
    public string FileName { get; }
    public string TargetNamespaceName { get; }
    public PsiLanguageType TargetLanguage { get; }
    [NullableAttribute("2")]
public IReference ReferenceToBind { get; }
    public CreateNewFileTarget(ITreeNode anchor, IProjectFolder targetFolder, VirtualFileSystemPath targetPath, string targetNamespaceName, string fileName, ProjectFileType fileType, IReference referenceToBind, PsiLanguageType targetLanguage);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual ITreeNode get_Anchor();
    public sealed virtual ITreeNode GetTargetDeclaration();
    public sealed virtual IFile GetTargetDeclarationFile();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.CreateNewFileTarget/<GetPossibleTargetDeclarations>d__10")]
public sealed virtual IEnumerable`1<ITreeNode> GetPossibleTargetDeclarations();
    [NullableContextAttribute("2")]
public sealed virtual IProject GetTargetProject();
    [CompilerGeneratedAttribute]
public sealed virtual IProjectFolder get_TargetFolder();
    [CompilerGeneratedAttribute]
public sealed virtual ProjectFileType get_FileType();
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_TargetPath();
    [CompilerGeneratedAttribute]
public sealed virtual string get_FileName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TargetNamespaceName();
    [CompilerGeneratedAttribute]
public sealed virtual PsiLanguageType get_TargetLanguage();
    [NullableContextAttribute("2")]
public sealed virtual IReference get_ReferenceToBind();
    public sealed virtual void PreExecute();
    public sealed virtual void PostExecute(IDeclaredElement creationResult);
}
public class JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.FileTarget : TopLevelTargetBase {
    [NullableContextAttribute("1")]
public FileTarget(IFile targetFile, ITreeNode anchor);
    [NullableContextAttribute("1")]
public sealed virtual ITreeNode GetTargetDeclaration();
}
public interface JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.ITypeImage {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.MemberSignature : object {
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParametersDeclarePublicMembers>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ParameterInfoBase <ThisParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ParameterInfoBase> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeImage <ReturnType>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceKind <ReturnKind>k__BackingField;
    public bool IsAsync { get; public set; }
    public bool ParametersDeclarePublicMembers { get; public set; }
    [NullableAttribute("2")]
public ParameterInfoBase ThisParameter { get; public set; }
    public IList`1<ParameterInfoBase> Parameters { get; public set; }
    public ITypeImage ReturnType { get; }
    public ReferenceKind ReturnKind { get; }
    public MemberSignature(ITypeImage returnType, IEnumerable`1<ParameterInfoBase> parameters, ReferenceKind returnKind, bool isAsync);
    [CompilerGeneratedAttribute]
public bool get_IsAsync();
    [CompilerGeneratedAttribute]
public void set_IsAsync(bool value);
    [CompilerGeneratedAttribute]
public bool get_ParametersDeclarePublicMembers();
    [CompilerGeneratedAttribute]
public void set_ParametersDeclarePublicMembers(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ParameterInfoBase get_ThisParameter();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ThisParameter(ParameterInfoBase value);
    [CompilerGeneratedAttribute]
public IList`1<ParameterInfoBase> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(IList`1<ParameterInfoBase> value);
    [CompilerGeneratedAttribute]
public ITypeImage get_ReturnType();
    [CompilerGeneratedAttribute]
public ReferenceKind get_ReturnKind();
}
public class JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.MemberSignatureProvider : object {
    private IPsiServices myPsiServices;
    private PsiLanguageType myLanguage;
    public MemberSignatureProvider(IPsiServices psiServices, PsiLanguageType language);
    public MemberSignature CreateFromTypes(IType returnType, IEnumerable`1<Pair`2<IType, string>> parameterTypes, IPsiSourceFile sourceFile);
    public MemberSignature CreateFromTypes(IType returnType, IEnumerable`1<IType> parameterTypes, IPsiSourceFile sourceFile, bool isNullableAnnotationsContextEnabled);
    public MemberSignature CreateFromDelegate(IDelegate delegate, ISubstitution substitution, IPsiSourceFile sourceFile);
    public MemberSignature CreateFromMethod(IMethod method, ISubstitution substitution, IPsiSourceFile sourceFile);
    public ParameterInfoBase CreateFromParameter(IParameter paramer, IPsiSourceFile sourceFile);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.NamedParameterInfo : ParameterInfoBase {
    [CompilerGeneratedAttribute]
private IReference <NameReference>k__BackingField;
    public IReference NameReference { get; }
    public NamedParameterInfo(ITypeImage type, ParameterKind parameterKind, IReference nameReference);
    [CompilerGeneratedAttribute]
public IReference get_NameReference();
}
public class JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.NamespaceByNameTarget : TopLevelTargetBase {
    [NullableAttribute("2")]
private ITreeNode myTarget;
    private bool myPrepared;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <TargetNamespaceName>k__BackingField;
    [NullableAttribute("1")]
public string TargetNamespaceName { get; }
    [NullableContextAttribute("1")]
public NamespaceByNameTarget(string targetNamespace, IFile targetFile, ITreeNode anchor);
    [NullableContextAttribute("1")]
public sealed virtual ITreeNode GetTargetDeclaration();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_TargetNamespaceName();
    public sealed virtual void PreExecute();
}
public class JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.NamespaceTarget : TopLevelTargetBase {
    [NullableAttribute("2")]
private ITypeAndNamespaceHolderDeclaration myNameSpaceDeclaration;
    private bool myPrepared;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private INamespace <TargetNamespace>k__BackingField;
    [NullableAttribute("1")]
public INamespace TargetNamespace { get; }
    [NullableContextAttribute("1")]
public NamespaceTarget(INamespace targetNamespace, IFile targetFile, ITreeNode anchor);
    [NullableContextAttribute("1")]
public sealed virtual ITreeNode GetTargetDeclaration();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual INamespace get_TargetNamespace();
    public sealed virtual void PreExecute();
}
public class JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.NoTypeImage : object {
    [NotNullAttribute]
public static ITypeImage Instance;
    private static NoTypeImage();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.ParameterInfoBase : object {
    [CompilerGeneratedAttribute]
private ITypeImage <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterKind <ParameterKind>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ScopedKind> <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UnscopedRefAttribute>k__BackingField;
    public ITypeImage Type { get; }
    public ParameterKind ParameterKind { get; }
    public Nullable`1<ScopedKind> Scope { get; public set; }
    public Nullable`1<bool> UnscopedRefAttribute { get; public set; }
    protected ParameterInfoBase(ITypeImage type, ParameterKind parameterKind);
    [CompilerGeneratedAttribute]
public ITypeImage get_Type();
    [CompilerGeneratedAttribute]
public ParameterKind get_ParameterKind();
    [CompilerGeneratedAttribute]
public Nullable`1<ScopedKind> get_Scope();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Scope(Nullable`1<ScopedKind> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UnscopedRefAttribute();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UnscopedRefAttribute(Nullable`1<bool> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.RegularParameterInfo : ParameterInfoBase {
    [CompilerGeneratedAttribute]
private INamesCollection <NamesCollection>k__BackingField;
    public INamesCollection NamesCollection { get; }
    public RegularParameterInfo(ITypeImage type, ParameterKind parameterKind, INamesCollection namesCollection);
    public RegularParameterInfo(ITypeImage type, ParameterKind parameterKind, IPsiServices psiServices, PsiLanguageType language, IPsiSourceFile sourceFile, string proposedName);
    [CompilerGeneratedAttribute]
public INamesCollection get_NamesCollection();
}
public class JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.SimpleTypeImage : object {
    [CompilerGeneratedAttribute]
private IList`1<IType> <Candidates>k__BackingField;
    [NotNullAttribute]
public IList`1<IType> Candidates { get; }
    public SimpleTypeImage(IType type);
    public SimpleTypeImage(IEnumerable`1<IType> candidateTypes);
    [CompilerGeneratedAttribute]
public IList`1<IType> get_Candidates();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.StatementTarget : object {
    [CompilerGeneratedAttribute]
private ICSharpExpression <expression>P;
    public ITreeNode Anchor { get; }
    public StatementTarget(ICSharpExpression expression);
    public sealed virtual ITreeNode get_Anchor();
    public sealed virtual ITreeNode GetTargetDeclaration();
    [NullableContextAttribute("2")]
public sealed virtual IFile GetTargetDeclarationFile();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.StatementTarget/<GetPossibleTargetDeclarations>d__6")]
public sealed virtual IEnumerable`1<ITreeNode> GetPossibleTargetDeclarations();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.TopLevelTargetBase : object {
    [CompilerGeneratedAttribute]
private IFile <TargetFile>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITreeNode <Anchor>k__BackingField;
    public IFile TargetFile { get; }
    [NullableAttribute("2")]
public ITreeNode Anchor { get; }
    protected TopLevelTargetBase(IFile targetFile, ITreeNode anchor);
    public sealed virtual IFile GetTargetDeclarationFile();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.TopLevelTargetBase/<GetPossibleTargetDeclarations>d__2")]
public sealed virtual IEnumerable`1<ITreeNode> GetPossibleTargetDeclarations();
    [NullableContextAttribute("2")]
public sealed virtual IProject GetTargetProject();
    [CompilerGeneratedAttribute]
public sealed virtual IFile get_TargetFile();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual ITreeNode get_Anchor();
}
public class JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.TupleTypeImage : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IList`1<ValueTuple`2<ITypeImage, string>> <ComponentImages>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NotNullAttribute]
public IList`1<ValueTuple`2<ITypeImage, string>> ComponentImages { get; }
    public TupleTypeImage(DecoratedType`1<TupleTypeDecoration> tupleType);
    [CompilerGeneratedAttribute]
public IList`1<ValueTuple`2<ITypeImage, string>> get_ComponentImages();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.TypeDeclarationTarget : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITreeNode <Anchor>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeDeclaration <TargetTypeDeclaration>k__BackingField;
    [NullableAttribute("2")]
public ITreeNode Anchor { get; }
    public ITypeDeclaration TargetTypeDeclaration { get; }
    public TypeDeclarationTarget(ITypeDeclaration targetTypeDeclaration, ITreeNode anchor);
    public sealed virtual ITreeNode GetTargetDeclaration();
    [NullableContextAttribute("2")]
public sealed virtual IFile GetTargetDeclarationFile();
    public sealed virtual IEnumerable`1<ITreeNode> GetPossibleTargetDeclarations();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual ITreeNode get_Anchor();
    [CompilerGeneratedAttribute]
public sealed virtual ITypeDeclaration get_TargetTypeDeclaration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.TypeTarget : object {
    [NullableAttribute("2")]
private IDeclaration myPreferredPart;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITreeNode <Anchor>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeElement <TargetType>k__BackingField;
    [NullableAttribute("2")]
public ITreeNode Anchor { get; }
    public ITypeElement TargetType { get; }
    public IEnumerable`1<IDeclaration> AvailableTargets { get; }
    public TypeTarget(ITypeElement targetType, ITreeNode anchor);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual ITreeNode get_Anchor();
    public sealed virtual ITreeNode GetTargetDeclaration();
    [NullableContextAttribute("2")]
public sealed virtual IFile GetTargetDeclarationFile();
    public sealed virtual IEnumerable`1<ITreeNode> GetPossibleTargetDeclarations();
    private IEnumerable`1<IDeclaration> GetPossibleTargetDeclarationsInternal();
    private static bool IsAvailableForContainer(IDeclaration declaration);
    [CompilerGeneratedAttribute]
public sealed virtual ITypeElement get_TargetType();
    public sealed virtual IEnumerable`1<IDeclaration> get_AvailableTargets();
    public sealed virtual void SetPart(IDeclaration typePart);
}
public interface JetBrains.ReSharper.Feature.Services.Intentions.IAltEnterHandler {
    public double Priority { get; }
    public abstract virtual double get_Priority();
    public abstract virtual bool IsAvailable(IDataContext context);
    public abstract virtual bool HandleAction(IDataContext context);
}
public interface JetBrains.ReSharper.Feature.Services.Intentions.IAnnotateWithAttributeIntention {
    public abstract virtual void Annotate(IDeclaration declaration, ITypeElement markBy, AttributeValue[] fixedArguments, Pair`2[] namedArguments);
    public abstract virtual bool HasAnnotation(IDeclaration declaration, ITypeElement markBy);
    public abstract virtual void UpdateAnnotations(IDeclaration markedDeclaration, UpdateArgumentsDelegate provideArguments);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.Intentions.IChangeBaseTypeRequiredIntention {
    public abstract virtual void Execute(IClass classToProcess, IDeclaredType fromType, IDeclaredType toType);
}
public interface JetBrains.ReSharper.Feature.Services.Intentions.IChangeSignatureIntention {
    public abstract virtual void ChangeSignature(IParametersOwnerDeclaration signatureToChange, IParametersOwner sourcePattern, ISubstitution sourceSubstitution, SignatureChangeKind changeKind);
}
public interface JetBrains.ReSharper.Feature.Services.Intentions.ICustomHighlightingActionProvider {
    [ItemNotNullAttribute]
[NotNullAttribute]
public abstract virtual IEnumerable`1<IntentionAction> GetActions(IHighlighting highlighting, DocumentRange highlightingRange, IPsiSourceFile sourceFile, IAnchor configureAnchor);
}
public interface JetBrains.ReSharper.Feature.Services.Intentions.ICustomHighlightingGroupActionProvider {
    [NotNullAttribute]
public abstract virtual IAnchor GetAnchor();
    [ItemNotNullAttribute]
[NotNullAttribute]
public abstract virtual IEnumerable`1<IntentionAction> GetActions(IEnumerable`1<IHighlighting> highlightings, IPsiSourceFile sourceFile, IAnchor configureAnchor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Feature.Services.Intentions.Impl.DeclarationBuilders.ClassDeclarationBuilder : object {
    public static IntentionResult CreateClass(CreateClassDeclarationContext context);
    private static void AppendExtendsList(ICollection`1<ITemplateFieldHolder> holders, ITypeDeclaration declaration, SimpleTypeImage baseType, ClassLikeDeclarationFinder classFinder);
}
public static class JetBrains.ReSharper.Feature.Services.Intentions.Impl.DeclarationBuilders.ConstantDeclarationBuilder : object {
    [NotNullAttribute]
public static IntentionResult Create(CreateConstantDeclarationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Feature.Services.Intentions.Impl.DeclarationBuilders.ConstructorDeclarationBuilder : object {
    public static IntentionResult Create(CreateConstructorDeclarationContext context);
    private static bool ShouldAddBaseCall(ITypeElement typeElement, ITreeNode usageContext);
}
public static class JetBrains.ReSharper.Feature.Services.Intentions.Impl.DeclarationBuilders.DelegateDeclarationBuilder : object {
    [NotNullAttribute]
public static IntentionResult Create(CreateDelegateDeclarationContext context);
}
public static class JetBrains.ReSharper.Feature.Services.Intentions.Impl.DeclarationBuilders.EnumMemberDeclarationBuilder : object {
    [NotNullAttribute]
public static IntentionResult Create(CreateEnumMemberDeclarationContext context);
}
public static class JetBrains.ReSharper.Feature.Services.Intentions.Impl.DeclarationBuilders.EventDeclarationBuilder : object {
    [NotNullAttribute]
public static IntentionResult Create(CreateEventDeclarationContext context);
}
public static class JetBrains.ReSharper.Feature.Services.Intentions.Impl.DeclarationBuilders.FieldDeclarationBuilder : object {
    [NotNullAttribute]
public static IntentionResult Create(CreateFieldDeclarationContext context);
}
public interface JetBrains.ReSharper.Feature.Services.Intentions.Impl.DeclarationBuilders.IReverseSubstitution {
    [NotNullAttribute]
public abstract virtual IType Substitute(IType sourceType);
    [NotNullAttribute]
public abstract virtual IType SubstituteDeep(IType sourceType);
    [NotNullAttribute]
[PureAttribute]
public abstract virtual IReverseSubstitution Extend(IType sourceType, ITypeParameter destinationTypeParameter);
    [NotNullAttribute]
[PureAttribute]
public abstract virtual IReverseSubstitution Extend(IDictionary`2<IType, ITypeParameter> dictionary);
}
public static class JetBrains.ReSharper.Feature.Services.Intentions.Impl.DeclarationBuilders.MethodDeclarationBuilder : object {
    [NotNullAttribute]
public static IntentionResult CreateLocalFunction(CreateMethodDeclarationContext context);
    [NotNullAttribute]
public static IntentionResult Create(CreateMethodDeclarationContext context);
    [NotNullAttribute]
private static IntentionResult CreateParametersOwnerDeclaration(CreateMethodDeclarationContext context, IDeclaration declarationToAdd, ITreeNode ownerElement, IntentionLanguageSpecific languageSpecific);
    [NotNullAttribute]
[PureAttribute]
private static IList`1<IType> GetTypeArguments(CreateMethodDeclarationContext context, MemberSignature methodSignature, IntentionLanguageSpecific languageSpecific, IDeclaration typeArgumentsOwnerDeclaration);
    [NotNullAttribute]
private static IReverseSubstitution ProcessTypeArguments(IList`1<IType> typeArguments, IDeclaration typeArgumentsOwnerDeclaration);
}
public static class JetBrains.ReSharper.Feature.Services.Intentions.Impl.DeclarationBuilders.ParametersDeclarationBuilder : object {
    public static void CreateParameters(IParametersOwnerDeclaration parametersOwnerDeclaration, MemberSignature memberSignature, IReverseSubstitution reverseSubstitution, List`1<ITemplateFieldHolder> holders);
}
public static class JetBrains.ReSharper.Feature.Services.Intentions.Impl.DeclarationBuilders.PropertyDeclarationBuilder : object {
    [NotNullAttribute]
public static IntentionResult CreateProperty(CreatePropertyDeclarationContext context);
}
public static class JetBrains.ReSharper.Feature.Services.Intentions.Impl.DeclarationBuilders.ReturnTypeBuilder : object {
    public static void CreateReturnType(ITypeOwnerDeclaration typeOwnerDeclaration, IReverseSubstitution reverseSubstitution, ITypeImage returnTypeImage, List`1<ITemplateFieldHolder> holders, bool executeTemplate, bool executeTemplateOverVoid);
}
public class JetBrains.ReSharper.Feature.Services.Intentions.Impl.DeclarationBuilders.ReverseSubstitution : object {
    [NotNullAttribute]
public static IReverseSubstitution Empty;
    [NotNullAttribute]
private IDictionary`2<IType, IType> myMap;
    private ReverseSubstitution(IEnumerable`1<KeyValuePair`2<IType, IType>> dictionary);
    private static ReverseSubstitution();
    public sealed virtual IType SubstituteDeep(IType sourceType);
    public sealed virtual IType Substitute(IType sourceType);
    public sealed virtual IReverseSubstitution Extend(IType sourceType, ITypeParameter destinationTypeParameter);
    public sealed virtual IReverseSubstitution Extend(IDictionary`2<IType, ITypeParameter> dictionary);
    private void InternalExtend(IType sourceType, ITypeParameter destinationTypeParameter);
}
public static class JetBrains.ReSharper.Feature.Services.Intentions.Impl.DeclarationBuilders.TypeUsageBuilder : object {
    public static IType CreateType(ITypeImage image, IReverseSubstitution reverseSubstitution, ITypeOwnerDeclaration context, TypeUsageFinder finder, ICollection`1<ITemplateFieldHolder> holders);
    private static IEnumerable`1<IType> ExpandMultitype(IEnumerable`1<IType> types);
    public static IType CreateTypeSimple(ITypeImage image, ITreeNode context, TypeUsageFinder finder, ICollection`1<ITemplateFieldHolder> holders);
    public static IType TypeFromTypeImage(ITypeImage image, ITreeNode context, TypeUsageFinder finder, ICollection`1<ITemplateFieldHolder> holders, Func`2<IEnumerable`1<IType>, IEnumerable`1<IType>> expandTypes, Predicate`1<IType> isResolved);
    private static bool IsResolved(IType type, ITypeOwnerDeclaration context);
    private static IEnumerable`1<IType> GeneralizeTypeParametersWithContextParameters(ITypeConstraintsVerifier typeConstraintsVerifier, IEnumerable`1<IType> types, ITypeOwnerDeclaration context);
    private static HybridCollection`1<ITypeParameter> GetAllTypeParameters(ITypeOwnerDeclaration context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Intentions.Impl.DeclarationBuilders.TypeUsageBuilder/<ExpandTypeParametersConstraints>d__7")]
private static IEnumerable`1<IType> ExpandTypeParametersConstraints(IEnumerable`1<IType> types, ITypeOwnerDeclaration context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Intentions.Impl.DeclarationBuilders.TypeUsageBuilder/<ExpandReverseSubstitution>d__8")]
private static IEnumerable`1<IType> ExpandReverseSubstitution(IEnumerable`1<IType> types, IReverseSubstitution reverseSubstitution);
    private static IEnumerable`1<IType> InsertAvailableTypeParameters(IEnumerable`1<IType> types, IDeclaration typeMemberDeclaration);
    private static IEnumerable`1<IType> ProcessUnresolvedTypeParameters(IEnumerable`1<IType> types, ITypeOwnerDeclaration context);
}
public abstract class JetBrains.ReSharper.Feature.Services.Intentions.Impl.LanguageSpecific.Finders.ClassExtendsFinder : NestedFinder {
    public ClassExtendsFinder(NestedFinder parent);
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.Intentions.Impl.LanguageSpecific.Finders.ClassLikeDeclarationFinder : MarkDeclarationFinder`1<ITypeDeclaration> {
    public ClassLikeDeclarationFinder(ITypeDeclaration parent);
}
public abstract class JetBrains.ReSharper.Feature.Services.Intentions.Impl.LanguageSpecific.Finders.ConstructorInitializerArgumentsFinder : MarkDeclarationFinder`1<ITypeMemberDeclaration> {
    protected ConstructorInitializerArgumentsFinder(ITypeMemberDeclaration declaration);
    public virtual string ToString();
}
public abstract class JetBrains.ReSharper.Feature.Services.Intentions.Impl.LanguageSpecific.Finders.FinderFactory : object {
    public abstract virtual ParamTypeUsageFinder CreateParamTypeUsageFinder(ParametersOwnerDeclarationFinder parent, int paramIndex);
    public abstract virtual TypeArgumentFinder CreateTypeArgumentFinder(TypeUsageFinder parent, int typeArgIndex);
    public abstract virtual ParamNameFinder CreateParamNameFinder(ParametersOwnerDeclarationFinder parent, int paramIndex);
    public abstract virtual ReturnTypeFinder CreateReturnTypeFinder(TypeOwnerDeclarationFinder parent);
    public abstract virtual MethodNameFinder CreateMethodNameFinder(ParametersOwnerDeclarationFinder parent);
    public abstract virtual ConstructorInitializerArgumentsFinder CreateConstructorInitializerArgumentsFinder(ITypeMemberDeclaration declaration);
    public abstract virtual ClassExtendsFinder CreateClassExtendsFinder(ClassLikeDeclarationFinder parent);
    public abstract virtual TypeKindFinder CreateTypeKindFinders(ClassLikeDeclarationFinder parent);
    public abstract virtual DocumentRange GetInitializerExpressionRange(IDeclaration fieldLikeDeclaration);
    public ParametersOwnerDeclarationFinder CreateParametersOwnerDeclarationFinder(IParametersOwnerDeclaration parametersOwnerDeclaration);
    public ClassLikeDeclarationFinder CreateClassLikeDeclarationFinder(ITypeDeclaration typeDeclaration);
    public TypeOwnerDeclarationFinder CreateTypeOwnerDeclarationFinder(ITypeOwnerDeclaration typeOwnerDeclaration);
}
public class JetBrains.ReSharper.Feature.Services.Intentions.Impl.LanguageSpecific.Finders.MarkDeclarationFinder`1 : NestedFinder {
    private TreeNodeMarker myMarker;
    private PsiLanguageType myLanguage;
    public PsiLanguageType Language { get; }
    public MarkDeclarationFinder`1(T declaration);
    public PsiLanguageType get_Language();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Intentions.Impl.LanguageSpecific.Finders.MarkDeclarationFinder`1/<Find>d__5")]
public virtual IEnumerable`1<ITreeNode> Find(IDeclaration obj);
    public virtual string ToString();
}
public abstract class JetBrains.ReSharper.Feature.Services.Intentions.Impl.LanguageSpecific.Finders.MethodNameFinder : NestedFinder {
    public MethodNameFinder(NestedFinder parent);
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.Intentions.Impl.LanguageSpecific.Finders.ParametersOwnerDeclarationFinder : MarkDeclarationFinder`1<IParametersOwnerDeclaration> {
    public ParametersOwnerDeclarationFinder(IParametersOwnerDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Feature.Services.Intentions.Impl.LanguageSpecific.Finders.ParamNameFinder : NestedFinder {
    [CompilerGeneratedAttribute]
private int <ParamIndex>k__BackingField;
    public int ParamIndex { get; public set; }
    protected ParamNameFinder(ParametersOwnerDeclarationFinder parent, int paramIndex);
    [CompilerGeneratedAttribute]
public int get_ParamIndex();
    [CompilerGeneratedAttribute]
public void set_ParamIndex(int value);
    public virtual string ToString();
}
public abstract class JetBrains.ReSharper.Feature.Services.Intentions.Impl.LanguageSpecific.Finders.ParamTypeUsageFinder : TypeUsageFinder {
    [CompilerGeneratedAttribute]
private int <ParamIndex>k__BackingField;
    public int ParamIndex { get; }
    protected ParamTypeUsageFinder(ParametersOwnerDeclarationFinder parent, int paramIndex);
    [CompilerGeneratedAttribute]
public int get_ParamIndex();
    public virtual string ToString();
}
public abstract class JetBrains.ReSharper.Feature.Services.Intentions.Impl.LanguageSpecific.Finders.ReturnTypeFinder : TypeUsageFinder {
    protected ReturnTypeFinder(NestedFinder parent);
    public virtual string ToString();
}
public abstract class JetBrains.ReSharper.Feature.Services.Intentions.Impl.LanguageSpecific.Finders.TypeArgumentFinder : TypeUsageFinder {
    [CompilerGeneratedAttribute]
private int <TypeArgIndex>k__BackingField;
    public int TypeArgIndex { get; }
    protected TypeArgumentFinder(TypeUsageFinder parent, int typeArgIndex);
    [CompilerGeneratedAttribute]
public int get_TypeArgIndex();
    public virtual string ToString();
}
public abstract class JetBrains.ReSharper.Feature.Services.Intentions.Impl.LanguageSpecific.Finders.TypeKindFinder : object {
    private ClassLikeDeclarationFinder myParent;
    protected ClassLikeDeclarationFinder Parent { get; }
    public TypeKindFinder(ClassLikeDeclarationFinder parent);
    public abstract virtual IEnumerable`1<DocumentRange> GetTypeKindRanges(IDeclaration declaration);
    protected ClassLikeDeclarationFinder get_Parent();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.Intentions.Impl.LanguageSpecific.Finders.TypeOwnerDeclarationFinder : MarkDeclarationFinder`1<ITypeOwnerDeclaration> {
    public TypeOwnerDeclarationFinder(ITypeOwnerDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Feature.Services.Intentions.Impl.LanguageSpecific.Finders.TypeUsageFinder : NestedFinder {
    public PsiLanguageType Language { get; }
    protected TypeUsageFinder(NestedFinder parent);
    public abstract virtual PsiLanguageType get_Language();
}
public interface JetBrains.ReSharper.Feature.Services.Intentions.Impl.LanguageSpecific.IMemberBodyTemplateItemsProvider {
    public abstract virtual IList`1<ILookupItem> GetLookupItems(IDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Feature.Services.Intentions.Impl.LanguageSpecific.IntentionLanguageSpecific : object {
    public bool IsVoidMethodDeclarationHasTypeUsage { get; }
    [NotNullAttribute]
public string InterfaceKeyword { get; }
    [NotNullAttribute]
public string ClassKeyword { get; }
    [NotNullAttribute]
public string StructKeyword { get; }
    [NotNullAttribute]
public string EnumKeyword { get; }
    [CanBeNullAttribute]
public string RecordKeyword { get; }
    [CanBeNullAttribute]
public string RecordStructKeyword { get; }
    [NotNullAttribute]
public FinderFactory FinderFactory { get; }
    [NotNullAttribute]
public IEqualityComparer`1<string> NamesComparer { get; }
    [NotNullAttribute]
[PureAttribute]
public static IntentionLanguageSpecific GetForLanguage(PsiLanguageType languageType);
    [CanBeNullAttribute]
[PureAttribute]
public static IntentionLanguageSpecific TryGetForLanguage(PsiLanguageType languageType);
    [NotNullAttribute]
[PureAttribute]
public static ITypeConversionRule GetTypeConversion(ITreeNode expression);
    [NotNullAttribute]
public abstract virtual TDeclaration AddToTarget(TDeclaration declarationToAdd, ICreationTarget target);
    [NotNullAttribute]
public abstract virtual ITypeMemberDeclaration AddToOwnerDeclaration(ITypeMemberDeclaration declarationToAdd, ITypeDeclaration typeDeclaration, ICreationTarget target);
    [NotNullAttribute]
public abstract virtual ITypeDeclaration CreateClassDeclaration(IPsiModule psiModule, bool isStatic);
    [NotNullAttribute]
public abstract virtual ITypeDeclaration CreateInterfaceDeclaration(IPsiModule module);
    [NotNullAttribute]
public abstract virtual ITypeDeclaration CreateRecordDeclaration(IPsiModule module);
    [NotNullAttribute]
public abstract virtual ITypeMemberDeclaration CreateMethodDeclaration(IPsiModule psiModule, bool inInterface);
    [NotNullAttribute]
public abstract virtual IDeclaration CreateLocalFunctionDeclaration(IPsiModule psiModule, bool inInterface);
    [NotNullAttribute]
public abstract virtual ITypeMemberDeclaration CreateConstructorDeclaration(IPsiModule psiModule, bool isPrimary);
    [NotNullAttribute]
public abstract virtual ITypeMemberDeclaration CreatePropertyDeclaration(IPsiModule psiModule, bool inInterface);
    [NotNullAttribute]
public abstract virtual ITypeMemberDeclaration CreateIndexerDeclaration(IPsiModule psiModule, bool inInterface);
    [NotNullAttribute]
public abstract virtual ITypeMemberDeclaration CreateFieldDeclaration(IPsiModule psiModule);
    [NotNullAttribute]
public abstract virtual ITypeMemberDeclaration CreateConstDeclaration(IPsiModule psiModule);
    [NotNullAttribute]
public abstract virtual ITypeMemberDeclaration CreateDelegateDeclaration(IPsiModule psiModule);
    [NotNullAttribute]
public abstract virtual ITypeMemberDeclaration CreateEnumMember(IPsiModule psiModule);
    [NotNullAttribute]
public abstract virtual ITypeMemberDeclaration CreateEventDeclaration(IPsiModule psiModule);
    public abstract virtual void ToExtensionMethod(ITypeMemberDeclaration method);
    public abstract virtual void SetAsync(IParametersOwnerDeclaration method, bool isAsync);
    public abstract virtual void SetPartial(ITypeDeclaration declaration, bool isPartial);
    public abstract virtual void AddBaseType(ITypeDeclaration typeDeclaration, IDeclaredType inheritsFrom);
    public abstract virtual IParameterDeclaration SetParameterScope(IParameterDeclaration declaration, ScopedKind scope, Nullable`1<bool> requiresUnscopedRefAttribute);
    public abstract virtual void SetReturnKind(IDeclaration declaration, ReferenceKind returnKind);
    [NotNullAttribute]
public abstract virtual ITypeParameter AddTypeParameter(IDeclaration typeParametersOwner, string typeParameterName);
    public abstract virtual void AddTypeConstraints(IDeclaration typeParameterDeclaration, ITypeParameter typeParameter, ISubstitution substitution, string parameterName);
    public abstract virtual void AddBaseConstructorCall(ITypeMemberDeclaration constructorDeclaration);
    [CanBeNullAttribute]
public abstract virtual IFunctionDeclaration AddAccessorDeclaration(ITypeMemberDeclaration ownerDeclaration, AccessorKind kind);
    public abstract virtual bool CanUseExplicitly(IType type, ITreeNode context);
    [NotNullAttribute]
public abstract virtual IList`1<string> GuessTypeParamNames(int typeArgumentsCount, ITreeNode context);
    [NotNullAttribute]
public abstract virtual IList`1<string> GuessTypeParamNames(IList`1<IType> typeArguments, ITreeNode context);
    public abstract virtual bool IsPurePropertyDeclaration(IDeclaration declaration);
    public abstract virtual void SetAccessorOwnerName(ITypeMemberDeclaration accessorOwnerDeclaration, string name);
    public abstract virtual bool get_IsVoidMethodDeclarationHasTypeUsage();
    public abstract virtual string get_InterfaceKeyword();
    public abstract virtual string get_ClassKeyword();
    public abstract virtual string get_StructKeyword();
    public abstract virtual string get_EnumKeyword();
    public abstract virtual string get_RecordKeyword();
    public abstract virtual string get_RecordStructKeyword();
    public abstract virtual FinderFactory get_FinderFactory();
    public abstract virtual IEqualityComparer`1<string> get_NamesComparer();
    [NotNullAttribute]
public abstract virtual ITypeConversionRule GetTypeConversionRule(ITreeNode context);
    [NotNullAttribute]
public abstract virtual ITypeConstraintsVerifier GetTypeConstraintsVerifier(ITreeNode context);
    public abstract virtual void SetIsParamArray(IParameterDeclaration parameterDeclaration, bool isSet);
    public abstract virtual void SetAccessorBodies(ITypeMemberDeclaration typeMemberDeclaration, AccessorImplementationKind accessorImplementationKind, List`1<ITemplateFieldHolder> holders);
    public virtual void SetTypeSmart(ITypeOwnerDeclaration declaration, IType type);
    public abstract virtual bool TypeSupportsOnlyStaticMembers(ITreeNode targetDeclaration);
    public abstract virtual bool TypeMembersAreStaticImplicitly(IDeclaration targetDeclaration);
    public abstract virtual bool IsInactivePreprocessorBranch(ITreeNode node);
}
public class JetBrains.ReSharper.Feature.Services.Intentions.Impl.LanguageSpecific.NullMemberBodyTemplateItemsProvider : object {
    public sealed virtual IList`1<ILookupItem> GetLookupItems(IDeclaration declaration);
}
public class JetBrains.ReSharper.Feature.Services.Intentions.Impl.MemberBodyTemplates.CallMethodTemplateFieldHolderFactory : object {
    private IElementInstancePointer`1<IMethod> myMethodToCall;
    public CallMethodTemplateFieldHolderFactory(IMethod methodToCall);
    public sealed virtual ITemplateFieldHolder CreateBodyTemplateHolder(IDeclaration declaration);
}
public class JetBrains.ReSharper.Feature.Services.Intentions.Impl.MemberBodyTemplates.DefaultMemberBodyTemplateExpression : object {
    private PsiLanguageType myLanguageType;
    private IMemberBodyTemplateItemsProvider myProvider;
    public DefaultMemberBodyTemplateExpression(PsiLanguageType languageType);
    public DefaultMemberBodyTemplateExpression(IMemberBodyTemplateItemsProvider provider);
    public sealed virtual void HandleExpansion(IHotspotContext context);
    [CanBeNullAttribute]
private IDeclaration GetMemberDeclaration(IHotspotContext context);
    public sealed virtual HotspotItems GetLookupItems(IHotspotContext context);
    public sealed virtual object Clone();
    public sealed virtual string EvaluateQuickResult(IHotspotContext context);
    public sealed virtual string Serialize();
}
public class JetBrains.ReSharper.Feature.Services.Intentions.Impl.MemberBodyTemplates.DefaultMemberBodyTemplateFieldHolderFactory : object {
    [NotNullAttribute]
public static ITemplateFieldHolder Create(IDeclaration declaration);
    public sealed virtual ITemplateFieldHolder CreateBodyTemplateHolder(IDeclaration declaration);
}
public interface JetBrains.ReSharper.Feature.Services.Intentions.Impl.MemberBodyTemplates.IMemberBodyTemplateFieldHolderFactory {
    [NotNullAttribute]
public abstract virtual ITemplateFieldHolder CreateBodyTemplateHolder(IDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Feature.Services.Intentions.Impl.MemberBodyTemplates.MemberBodyLookupBase : object {
    private PsiLanguageType myLanguageType;
    [CompilerGeneratedAttribute]
private LookupItemPlacement <Placement>k__BackingField;
    public RichText DisplayName { get; }
    public LookupItemPlacement Placement { get; }
    public bool IsDynamic { get; }
    public bool IgnoreSoftOnSpace { get; }
    public int Identity { get; }
    public IconId Image { get; }
    public RichText DisplayTypeName { get; }
    public bool CanShrink { get; }
    protected MemberBodyLookupBase(PsiLanguageType languageType, string text);
    public sealed virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    public abstract virtual RichText get_DisplayName();
    [CompilerGeneratedAttribute]
public sealed virtual LookupItemPlacement get_Placement();
    public sealed virtual bool get_IsDynamic();
    public sealed virtual bool get_IgnoreSoftOnSpace();
    public sealed virtual int get_Identity();
    public sealed virtual IconId get_Image();
    public sealed virtual RichText get_DisplayTypeName();
    public sealed virtual bool AcceptIfOnlyMatched(LookupItemAcceptanceContext itemAcceptanceContext);
    public sealed virtual bool get_CanShrink();
    public sealed virtual bool Shrink();
    public sealed virtual void Unshrink();
    public sealed virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    public sealed virtual DocumentRange GetVisualReplaceRange(DocumentRange nameRange);
    protected abstract virtual void DoCommand(ITreeNode element);
}
public class JetBrains.ReSharper.Feature.Services.Intentions.Impl.TemplateFieldHolders.FindersTemplateFieldHolder : object {
    [NotNullAttribute]
private TemplateField myField;
    [NotNullAttribute]
private List`1<ITemplateFieldFinder> myFinders;
    public FindersTemplateFieldHolder(TemplateField field, ITemplateFieldFinder[] finders);
    public void AddFinder(ITemplateFieldFinder finder);
    public sealed virtual HotspotInfo GetInfo(IDeclaration declaration);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Intentions.Impl.TemplateFieldHolders.FindersTemplateFieldHolder/<GetRanges>d__5")]
[NotNullAttribute]
private static IEnumerable`1<DocumentRange> GetRanges(IEnumerable`1<ITreeNode> elements);
}
public interface JetBrains.ReSharper.Feature.Services.Intentions.Impl.TemplateFieldHolders.ITemplateFieldFinder {
    public abstract virtual IEnumerable`1<ITreeNode> Find(IDeclaration declaration);
}
public interface JetBrains.ReSharper.Feature.Services.Intentions.Impl.TemplateFieldHolders.ITemplateFieldHolder {
    public abstract virtual HotspotInfo GetInfo(IDeclaration declaration);
}
public abstract class JetBrains.ReSharper.Feature.Services.Intentions.Impl.TemplateFieldHolders.NestedFinder : object {
    [CompilerGeneratedAttribute]
private NestedFinder <Parent>k__BackingField;
    [CanBeNullAttribute]
protected NestedFinder Parent { get; }
    public string Path { get; }
    protected NestedFinder(NestedFinder parent);
    [CompilerGeneratedAttribute]
protected NestedFinder get_Parent();
    public string get_Path();
    public abstract virtual IEnumerable`1<ITreeNode> Find(IDeclaration obj);
}
public class JetBrains.ReSharper.Feature.Services.Intentions.Impl.TemplateFieldHolders.RangeMarkerTemplateFieldHolder : object {
    private TemplateField myField;
    private IRangeMarker[] myRangeMarkers;
    public RangeMarkerTemplateFieldHolder(TemplateField field, IRangeMarker rangeMarker);
    public RangeMarkerTemplateFieldHolder(TemplateField field, IRangeMarker[] rangeMarkers);
    public sealed virtual HotspotInfo GetInfo(IDeclaration declaration);
}
public class JetBrains.ReSharper.Feature.Services.Intentions.Impl.TemplateFieldHolders.SimpleTemplateFieldFinder : object {
    [NotNullAttribute]
private Func`2<IDeclaration, IEnumerable`1<ITreeNode>> myFunc;
    public SimpleTemplateFieldFinder(Func`2<IDeclaration, IEnumerable`1<ITreeNode>> func);
    public sealed virtual IEnumerable`1<ITreeNode> Find(IDeclaration declaration);
}
public class JetBrains.ReSharper.Feature.Services.Intentions.Impl.TemplateFieldHolders.SmartTemplateFieldHolder : object {
    private TemplateField myField;
    private DisposableMarker myFirstMarker;
    private DisposableMarker myLastMarker;
    public SmartTemplateFieldHolder(TemplateField field, ITreeNode treeNode);
    public SmartTemplateFieldHolder(TemplateField field, ITreeRange treeRange);
    public void Dispose();
    public sealed virtual HotspotInfo GetInfo(IDeclaration declaration);
}
public class JetBrains.ReSharper.Feature.Services.Intentions.Impl.TemplateFieldHolders.TupleComponentNameTemplateFieldHolder : object {
    [NotNullAttribute]
private TemplateField myField;
    [NotNullAttribute]
private ITemplateFieldFinder myFinder;
    private int myIndex;
    public TupleComponentNameTemplateFieldHolder(TemplateField field, ITemplateFieldFinder finder, int index);
    public sealed virtual HotspotInfo GetInfo(IDeclaration declaration);
    private static DocumentRange GetRange(ITreeNode element);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Intentions.IntentionAction : object {
    [CompilerGeneratedAttribute]
private IBulbAction <BulbAction>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <RichText>k__BackingField;
    [CompilerGeneratedAttribute]
private IAnchor <Anchor>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IconId <IconId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoNotShowGutterMark>k__BackingField;
    public IBulbAction BulbAction { get; }
    public RichText RichText { get; }
    public IAnchor Anchor { get; }
    [NullableAttribute("2")]
public IconId IconId { get; }
    public bool DoNotShowGutterMark { get; public set; }
    public IntentionAction(IBulbAction bulbAction, IconId iconId, IAnchor anchor);
    public IntentionAction(IBulbAction bulbAction, RichText richText, IconId iconId, IAnchor anchor);
    [CompilerGeneratedAttribute]
public IBulbAction get_BulbAction();
    [CompilerGeneratedAttribute]
public RichText get_RichText();
    [CompilerGeneratedAttribute]
public IAnchor get_Anchor();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IconId get_IconId();
    [CompilerGeneratedAttribute]
public bool get_DoNotShowGutterMark();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DoNotShowGutterMark(bool value);
    private sealed virtual override object JetBrains.Application.UI.Controls.BulbMenu.IBulbActionWrapper.Unwrap();
    [PureAttribute]
private static RichText GetRichText(IBulbAction bulbAction);
    [PureAttribute]
public BulbMenuItem ToBulbMenuItem(ISolution solution, ITextControl textControl);
    public BulbMenuItem ToBulbMenuItem(ISolution solution, ITextControl textControl, DocumentRange markupRangeToClean);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Intentions.IntentionPopup : object {
    [CompilerGeneratedAttribute]
private IPopupBulbAction <Popup>k__BackingField;
    [CompilerGeneratedAttribute]
private IBulbAction[] <Actions>k__BackingField;
    public IPopupBulbAction Popup { get; }
    public IBulbAction[] Actions { get; }
    public string PopupText { get; }
    public string PopupKey { get; }
    public IntentionPopup(IPopupBulbAction popup);
    public IntentionPopup(IPopupBulbAction popup, IBulbAction bulbAction);
    [CompilerGeneratedAttribute]
public IPopupBulbAction get_Popup();
    [CompilerGeneratedAttribute]
public IBulbAction[] get_Actions();
    public string get_PopupText();
    public string get_PopupKey();
    [PureAttribute]
public bool IsAvailable(HashSet`1<string> stopList);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Intentions.IntentionResult : object {
    [NullableAttribute("2")]
private IRangeMarker myPreferredSelectionMarker;
    [CompilerGeneratedAttribute]
private IList`1<ITemplateFieldHolder> <Holders>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaration <ResultDeclaration>k__BackingField;
    public IList`1<ITemplateFieldHolder> Holders { get; }
    public IDeclaration ResultDeclaration { get; }
    public DocumentRange PreferredSelection { get; }
    public IntentionResult(IList`1<ITemplateFieldHolder> holders, IDeclaration resultDeclaration, DocumentRange preferredSelection);
    [CompilerGeneratedAttribute]
public IList`1<ITemplateFieldHolder> get_Holders();
    [CompilerGeneratedAttribute]
public IDeclaration get_ResultDeclaration();
    public DocumentRange get_PreferredSelection();
    [PureAttribute]
public IntentionResult WithPreferredSelection(DocumentRange preferredSelection);
    [MustUseReturnValueAttribute]
public IBulbActionCommand ToHotspotSessionBulbActionCommand(bool openTargetFile);
}
public static class JetBrains.ReSharper.Feature.Services.Intentions.IntentionsAnchors : object {
    [NotNullAttribute]
public static InvisibleAnchor InplaceRefactoringAnchor;
    [NotNullAttribute]
public static InvisibleAnchor QuickFixesAnchor;
    [NotNullAttribute]
public static InvisibleAnchor ContextActionsAnchor;
    [NotNullAttribute]
public static InvisibleAnchor HighPriorityContextActionsAnchor;
    [NotNullAttribute]
public static InvisibleAnchor LowPriorityContextActionsAnchor;
    [NotNullAttribute]
public static InvisibleAnchor RefactoringsAnchor;
    [NotNullAttribute]
public static InvisibleAnchor VsHighPriorityActionsAnchor;
    [NotNullAttribute]
public static InvisibleAnchor VsMeduimPriorityActionsAnchor;
    [NotNullAttribute]
public static InvisibleAnchor VsLowPriorityActionsAnchor;
    [NotNullAttribute]
public static InvisibleAnchor VsNonePriorityActionsAnchor;
    [NotNullAttribute]
public static InvisibleAnchor AnnotateActionsAnchor;
    [NotNullAttribute]
public static InvisibleAnchor ConfigureActionsAnchor;
    [NotNullAttribute]
public static InvisibleAnchor SelectionActionsAnchor;
    [NotNullAttribute]
public static InvisibleAnchor AIActionsAnchor;
    [NotNullAttribute]
public static InvisibleAnchor DebugInProgressAnchor;
    private static IntentionsAnchors();
}
public interface JetBrains.ReSharper.Feature.Services.Intentions.ISetAccessRightsIntention {
    public abstract virtual void SetAccessRights(IAccessRightsOwnerDeclaration declaration, AccessRights accessRights);
}
public static class JetBrains.ReSharper.Feature.Services.Intentions.ResolveProblemsFixAnchors : object {
    [NotNullAttribute]
public static InvisibleAnchor Main;
    [NotNullAttribute]
public static InvisibleAnchor CustomConvertTransformationFix;
    [NotNullAttribute]
public static InvisibleAnchor ChangeTypeFix;
    [NotNullAttribute]
public static InvisibleAnchor AddParameterFix;
    [NotNullAttribute]
public static InvisibleAnchor QualificationFix;
    [NotNullAttribute]
public static InvisibleAnchor ImportFix;
    [NotNullAttribute]
public static InvisibleAnchor AddReferenceFix;
    [NotNullAttribute]
public static InvisibleAnchor ChangeModifiersFix;
    [NotNullAttribute]
public static InvisibleAnchor EscapeAtCharFix;
    [NotNullAttribute]
public static InvisibleAnchor CreateFromUsageAnchor;
    [NotNullAttribute]
public static InvisibleAnchor ChangeAllFixAnchor;
    [NotNullAttribute]
public static InvisibleAnchor FindEntityAnchor;
    private static ResolveProblemsFixAnchors();
}
public interface JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Actions.IManualScopedAction {
    [NullableContextAttribute("1")]
public abstract virtual Action`1<ITextControl> ExecuteAction(ISolution solution, Scope scope, IHighlighting sourceHighlighting, IProgressIndicator progress);
}
public interface JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Actions.IModernManualScopedAction {
    [NullableContextAttribute("1")]
public abstract virtual IBulbActionCommand ExecuteAction(ISolution solution, Scope scope, IHighlighting sourceHighlighting, IProgressIndicator progress);
}
[ScopedIntentionBuilderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Builders.ManualScopedIntentionBuilder : ScopedIntentionsBuilder {
    [NullableContextAttribute("2")]
public virtual bool IsAvailable(IScopedAction action, ISolution solution, IHighlighting sourceHighlighting);
    [NullableContextAttribute("1")]
protected virtual IBulbAction TryCreateForScope(IScopedAction scopedAction, Scope scope, IHighlighting sourceHighlighting);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Builders.ScopedIntentionsBuilder : object {
    public double Priority { get; }
    [PureAttribute]
public abstract virtual bool IsAvailable(IScopedAction action, ISolution solution, IHighlighting sourceHighlighting);
    public virtual double get_Priority();
    protected virtual IBulbAction TryCreateCaretAction(IBulbAction caretAction);
    protected abstract virtual IBulbAction TryCreateForScope(IScopedAction scopedAction, Scope scope, IHighlighting sourceHighlighting);
    protected virtual IntentionAction ToIntentionAction(IBulbAction bulbAction, IAnchor anchor, IntentionAction originalAction);
    public bool CreateScopedIntentions(IScopedAction scopedAction, IntentionAction originalAction, IHighlighting sourceHighlighting, IPsiSourceFile sourceFile, List`1<IntentionAction> consumer);
    private static ValueTuple`2<IAnchor, IAnchor> CreateLocalActionsAnchor(IAnchor originalAnchor, IScopedAction scopedAction);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.Intentions.Scoped.BulbActions.IScopedActionInstance {
    public IScopedAction ScopedAction { get; }
    public Scope Scope { get; }
    public abstract virtual IScopedAction get_ScopedAction();
    public abstract virtual Scope get_Scope();
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.Intentions.Scoped.BulbActions.ISimpleScopedBulbAction {
    public abstract virtual void ExecutePsiTransactionInScopedExecution(ISolution solution);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Intentions.Scoped.BulbActions.ManualScopedActionInstance : BulbActionBase {
    [CompilerGeneratedAttribute]
private IManualScopedAction <scopedAction>P;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IHighlighting <sourceHighlighting>P;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<ITextControl> myTextControlAction;
    [CompilerGeneratedAttribute]
private Scope <Scope>k__BackingField;
    public IScopedAction ScopedAction { get; }
    public Scope Scope { get; }
    public string Text { get; }
    public string ID { get; }
    public ManualScopedActionInstance(IManualScopedAction scopedAction, Scope scope, IHighlighting sourceHighlighting);
    public sealed virtual IScopedAction get_ScopedAction();
    [CompilerGeneratedAttribute]
public sealed virtual Scope get_Scope();
    public virtual string get_Text();
    public sealed virtual string get_ID();
    protected virtual void ExecuteBeforePsiTransaction(ISolution solution, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Intentions.Scoped.BulbActions.ModernManualScopedActionInstance : object {
    [CompilerGeneratedAttribute]
private IModernManualScopedAction <scopedAction>P;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IHighlighting <sourceHighlighting>P;
    [CompilerGeneratedAttribute]
private Scope <Scope>k__BackingField;
    public IScopedAction ScopedAction { get; }
    public Scope Scope { get; }
    public string Text { get; }
    public string ID { get; }
    public ModernManualScopedActionInstance(IModernManualScopedAction scopedAction, Scope scope, IHighlighting sourceHighlighting);
    public sealed virtual IScopedAction get_ScopedAction();
    [CompilerGeneratedAttribute]
public sealed virtual Scope get_Scope();
    public sealed virtual string get_Text();
    public sealed virtual string get_ID();
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.Bulbs.IBulbAction.Execute(ISolution solution, ITextControl textControl);
    [CompilerGeneratedAttribute]
private IBulbActionCommand <JetBrains.ReSharper.Feature.Services.Bulbs.IBulbAction.Execute>b__12_0(ISolution sol, ITextControl _, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.Intentions.Scoped.BulbActions.ScopedBulbAction : BulbActionBase {
    [ThreadStaticAttribute]
private static bool ourScopedExecutionInProgress;
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    protected bool IsScopedExecuteInProgress { get; private protected set; }
    public virtual string get_ScopedText();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    protected bool get_IsScopedExecuteInProgress();
    private protected void set_IsScopedExecuteInProgress(bool value);
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.Intentions.Scoped.BulbActions.ISimpleScopedBulbAction.ExecutePsiTransactionInScopedExecution(ISolution solution);
    [DebuggerStepThroughAttribute]
public sealed virtual void Execute(ISolution solution, ITextControl textControl);
    [DebuggerStepThroughAttribute]
protected sealed virtual void ExecuteBeforeProgressAndTransaction(ISolution solution);
    [DebuggerStepThroughAttribute]
protected sealed virtual void ExecuteBeforePsiTransaction(ISolution solution, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
    [DebuggerStepThroughAttribute]
protected sealed virtual Action`1<ITextControl> ExecuteAfterPsiTransaction(ISolution solution, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Feature.Services.Intentions.Scoped.ContextActions.ModernScopedCodeStyleActionBase`1 : ModernScopedContextActionBase`1<TStyleSuggestion> {
    protected ICodeStyleAdviser CodeStyleAdviser { get; }
    protected virtual bool IsAvailable(TStyleSuggestion suggestion);
    protected virtual TStyleSuggestion TryCreateInfoFromTreeNode(ITreeNode treeNode);
    protected virtual IBulbActionCommand ExecutePsiTransaction(TStyleSuggestion availabilityInfo, ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
protected virtual TStyleSuggestion SuggestStyle();
    protected abstract virtual ICodeStyleAdviser get_CodeStyleAdviser();
    [NullableContextAttribute("2")]
protected abstract virtual ITreeNode FindSuggestionSourceNode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Intentions.Scoped.ContextActions.ScopedContextActionExecutor : ScopedIntentionExecutor {
    [CompilerGeneratedAttribute]
private IScopedTreeProcessor <treeProcessor>P;
    public ScopedContextActionExecutor(ISolution solution, IScopedTreeProcessor treeProcessor, PsiLanguageType languageFilter);
    protected virtual IScopedTreeProcessor GetTreeProcessor(Scope scope, ITreeNode psiScope, IContextBoundSettingsStore psiScopeSettingsStore, IProgressIndicator psiScopeProgress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.Intentions.Scoped.ContextActions.ScopedContextActionTreeProcessorBase`1 : object {
    [PureAttribute]
protected abstract virtual TAvailabilityInfo IsAvailable(ITreeNode node, Scope scope);
    protected abstract virtual void ExecutePsiTransaction(TAvailabilityInfo availabilityInfo, IProgressIndicator progress);
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Engine.IScopedTreeProcessor.AnalyzeNode(ITreeNode node, Scope scope);
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Engine.IScopedTreeProcessor.ProcessNode(ITreeNode node, Scope scope, ScopedApplyFile scopedApplyFile, OffsetBasedProgressReporter progressReporter);
    private bool CanBeAppliedInSecondaryFiles(ScopedApplyFile scopedApplyFile, Scope scope, ITreeNode node);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <CanBeAppliedInSecondaryFiles>g__CanBeApplied|4_0(IPsiSourceFile secondaryFile, <>c__DisplayClass4_0& );
}
public interface JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Engine.IDaemonSuppressorService {
    [NotNullAttribute]
public abstract virtual IDisposable Suspend();
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Engine.IScopedTreeProcessor {
    public abstract virtual bool AnalyzeNode(ITreeNode node, Scope scope);
    public abstract virtual bool ProcessNode(ITreeNode node, Scope scope, ScopedApplyFile scopedApplyFile, OffsetBasedProgressReporter progressReporter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Engine.OffsetBasedProgressReporter : object {
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myIsDisposed;
    private int myStartOffset;
    private int myEndOffset;
    private bool myReportMatches;
    private int myLastReportedOffset;
    [CompilerGeneratedAttribute]
private IProgressIndicator <UnderlyingIndicator>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MatchesCount>k__BackingField;
    public bool IsCanceled { get; }
    public IProgressIndicator UnderlyingIndicator { get; }
    public int MatchesCount { get; private set; }
    public OffsetBasedProgressReporter(IProgressIndicator progressIndicator, int matchesCount, int startOffset, int endOffset, bool reportMatches);
    public bool get_IsCanceled();
    [CompilerGeneratedAttribute]
public IProgressIndicator get_UnderlyingIndicator();
    [CompilerGeneratedAttribute]
public int get_MatchesCount();
    [CompilerGeneratedAttribute]
private void set_MatchesCount(int value);
    public void ReportMatch(int offset);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Engine.ScopedIntentionExecutor : ScopedActionExecutor {
    protected ScopedIntentionExecutor(ISolution solution, PsiLanguageType languageFilter);
    protected sealed virtual bool AnalyzeInPsiScope(Scope scope, ITreeNode psiScope, IContextBoundSettingsStore settingsStore, IProgressIndicator psiScopeProgress);
    protected sealed virtual void ExecuteInPsiScope(Scope scope, ITreeNode psiScope, ScopedApplyFile scopedApplyFile, IProgressIndicator psiScopeProgress);
    private void ExecuteInSinglePsiScopeUnderPsiTransaction(Scope scope, ITreeNode psiScope, ScopedApplyFile scopedApplyFile, IProgressIndicator psiScopeProgress, IContextBoundSettingsStore psiScopeSettingsStore, bool reportMatches);
    public void ExecuteInSinglePsiScopeUnderPsiTransaction(ITreeNode psiScope, IProgressIndicator progressIndicator, Predicate`1<ITreeNode> descendantsFilter, IRangeMarker rangeMarker, IContextBoundSettingsStore psiScopeSettingsStore);
    protected abstract virtual IScopedTreeProcessor GetTreeProcessor(Scope scope, ITreeNode psiScope, IContextBoundSettingsStore psiScopeSettingsStore, IProgressIndicator psiScopeProgress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Engine.ScopedTreeModifier : RecursiveElementModifier`1<Unit> {
    [CompilerGeneratedAttribute]
private IScopedTreeProcessor <treeProcessor>P;
    [CompilerGeneratedAttribute]
private OffsetBasedProgressReporter <offsetBasedProgressReporter>P;
    [CompilerGeneratedAttribute]
private Scope <scope>P;
    [CompilerGeneratedAttribute]
private ScopedApplyFile <scopedApplyFile>P;
    private Predicate`1<ITreeNode> myShouldModifyDescendants;
    [NullableAttribute("2")]
private IRangeMarker myRangeMarker;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected ModificationMode<Unit> Mode { get; }
    public ScopedTreeModifier(IScopedTreeProcessor treeProcessor, OffsetBasedProgressReporter offsetBasedProgressReporter, IGeneratedCodeRegionDetector generatedRegionDetector, Scope scope, ScopedApplyFile scopedApplyFile);
    protected virtual ModificationMode<Unit> get_Mode();
    public virtual bool InteriorShouldBeModified(ITreeNode element, Unit context);
    protected virtual bool Modify(ITreeNode element, Unit context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public abstract class JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Executors.ScopedActionExecutor : object {
    protected static string ApplyingInScope;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PsiLanguageType <LanguageFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MatchesCount>k__BackingField;
    [CompilerGeneratedAttribute]
private MultipleContextsApplyMode <MultipleContextsApplyMode>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [NullableAttribute("2")]
public PsiLanguageType LanguageFilter { get; }
    public int MatchesCount { get; protected set; }
    public MultipleContextsApplyMode MultipleContextsApplyMode { get; public set; }
    protected ISolution Solution { get; }
    protected ScopedActionExecutor(ISolution solution, PsiLanguageType languageFilter);
    private static ScopedActionExecutor();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public PsiLanguageType get_LanguageFilter();
    [CompilerGeneratedAttribute]
public int get_MatchesCount();
    [CompilerGeneratedAttribute]
protected void set_MatchesCount(int value);
    [CompilerGeneratedAttribute]
public MultipleContextsApplyMode get_MultipleContextsApplyMode();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MultipleContextsApplyMode(MultipleContextsApplyMode value);
    [PureAttribute]
public static string ApplyingInScopeTextForMatchesCount(int count);
    [CompilerGeneratedAttribute]
protected ISolution get_Solution();
    public Action`1<ITextControl> Execute(Scope scope, IProgressIndicator progress);
    private IReadOnlyList`1<ScopedApplyFile> ComputeSourceFiles(IReadOnlyList`1<IPsiSourceFile> sourceFiles);
    private IReadOnlyList`1<ScopedApplyFile> ComputeSourceFilesGroupedByAllContexts(IReadOnlyList`1<IProjectFile> projectFiles);
    protected virtual void ExecuteInScope(Scope scope, ScopedApplyFile scopedApplyFile, IProgressIndicator sourceFileProgress);
    protected virtual void EnsureGlobalAnalysisIsCompletedIfNecessary(IProgressIndicator progress);
    protected virtual bool CanExcludeFilesFast(IContextBoundSettingsStore settingsStore, FilesToProcess filesToProcess);
    protected virtual FilesToProcess ExcludeFilesFast(FilesToProcess filteredFiles, Scope scope, IProgressIndicator progress);
    protected virtual bool AnalyzeInScope(IPsiSourceFile sourceFile, Scope scope, IContextBoundSettingsStore settingsStore, IProgressIndicator sourceFileProgress);
    protected abstract virtual bool AnalyzeInPsiScope(Scope scope, ITreeNode psiScope, IContextBoundSettingsStore settingsStore, IProgressIndicator psiScopeProgress);
    protected abstract virtual void ExecuteInPsiScope(Scope scope, ITreeNode psiScope, ScopedApplyFile scopedApplyFile, IProgressIndicator psiScopeProgress);
    protected virtual Action`1<ITextControl> GetCapturedTextControlAction();
    [PureAttribute]
protected virtual bool CheckShouldSkipSourceFile(IPsiSourceFile sourceFile);
    protected virtual FilesToProcess FilterWithSolutionAnalysisResults(IReadOnlyList`1<ScopedApplyFile> filesToProcess, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
private bool <Execute>b__17_1(IPsiSourceFile sourceFile);
}
public abstract class JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Executors.ScopedActionExecutorWithManualSearch`1 : ScopedActionExecutor {
    private int myFileOccurrencesToReport;
    private double myFileOccurrenceAdvanceStep;
    [NotNullAttribute]
private List`1<TApplicationEntity> myApplicationEntities;
    [CanBeNullAttribute]
private Action`1<ITextControl> myCapturedTextControlAction;
    protected ScopedActionExecutorWithManualSearch`1(ISolution solution, PsiLanguageType languageFilter);
    protected sealed virtual bool AnalyzeInPsiScope(Scope scope, ITreeNode psiScope, IContextBoundSettingsStore settingsStore, IProgressIndicator psiScopeProgress);
    protected sealed virtual void ExecuteInPsiScope(Scope scope, ITreeNode psiScope, ScopedApplyFile scopedApplyFile, IProgressIndicator psiScopeProgress);
    private void ReportStartFixingMatches(IProgressIndicator fileProgress, int occurrencesCount);
    private void ReportMatchFixed(IProgressIndicator fileProgress, Action`1<ITextControl> textControlAction);
    protected virtual Action`1<ITextControl> GetCapturedTextControlAction();
    [NotNullAttribute]
[PureAttribute]
protected abstract virtual IEnumerable`1<TApplicationEntity> ExecuteSearchInScope(ITreeNode psiScopes, IProgressIndicator progressIndicator);
    private void ApplyEntitiesUnderPsiTransaction(IProgressIndicator progressIndicator);
    [CanBeNullAttribute]
protected abstract virtual Action`1<ITextControl> ApplyUnderPsiTransaction(TApplicationEntity entity);
}
public abstract class JetBrains.ReSharper.Feature.Services.Intentions.Scoped.FileCollectorInfo : object {
    [NotNullAttribute]
public static FileCollectorInfo Empty;
    [NotNullAttribute]
public static FileCollectorInfo Default;
    [NotNullAttribute]
public static FileCollectorInfo DefaultWithoutSolution;
    [NotNullAttribute]
public static FileCollectorInfo WithoutCaretFix;
    [NotNullAttribute]
public static FileCollectorInfo WithoutFileFix;
    [NotNullAttribute]
public static FileCollectorInfo WithoutCaretAndFileFix;
    [NotNullAttribute]
public static FileCollectorInfo OnlyInFile;
    [NotNullAttribute]
public static FileCollectorInfo CaretAndFileFix;
    [NotNullAttribute]
public static FileCollectorInfo FileScopedFix;
    public bool HasCaretFix { get; }
    private static FileCollectorInfo();
    [NotNullAttribute]
[PureAttribute]
public static FileCollectorInfo WithLanguage(PsiLanguageType languageType);
    [NotNullAttribute]
[PureAttribute]
public static FileCollectorInfo WithLocalScopes(ITreeNode contextNode);
    [NotNullAttribute]
[PureAttribute]
public static FileCollectorInfo WithLocalScopes(FileCollectorInfo inner, ITreeNode contextNode);
    [NotNullAttribute]
[PureAttribute]
public static FileCollectorInfo WithLocalAndAdditionalScopes(ITreeNode contextNode, LocalScope[] customScopes);
    [NotNullAttribute]
[PureAttribute]
public static FileCollectorInfo WithLocalAndAdditionalScopes(ITreeNode contextNode, PsiLanguageType psiLanguageType, Scope[] customScopes);
    [NotNullAttribute]
[PureAttribute]
public static FileCollectorInfo OnlyLocalAndCustomScopes(ITreeNode contextNode, PsiLanguageType psiLanguageType, Scope[] customScopes);
    [NotNullAttribute]
[PureAttribute]
public static FileCollectorInfo OnlyLocalScopes(ITreeNode contextNode);
    [NotNullAttribute]
[PureAttribute]
public static FileCollectorInfo OnlyNarrowestLocalScope(ITreeNode contextNode);
    [NotNullAttribute]
[PureAttribute]
public static FileCollectorInfo WithSingleLocalScope(LocalScope localScope);
    [NotNullAttribute]
[PureAttribute]
public static FileCollectorInfo FromSingleScope(Scope scope, bool hasCaretFix);
    public virtual bool get_HasCaretFix();
    [ItemNotNullAttribute]
[NotNullAttribute]
public abstract virtual IEnumerable`1<Scope> GetScopes(IPsiSourceFile sourceFile, IProjectFile projectFile);
    [CanBeNullAttribute]
protected abstract virtual Predicate`1<IProjectFile> GetFilteringPredicate(IProjectFile currentFile);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Intentions.Scoped.FileCollectorOptionsProvider : object {
    public bool HasSolutionScope { get; }
    public virtual bool get_HasSolutionScope();
}
public interface JetBrains.ReSharper.Feature.Services.Intentions.Scoped.IScopedAction {
    [NotNullAttribute]
public string ScopedText { get; }
    [NotNullAttribute]
public FileCollectorInfo FileCollectorInfo { get; }
    public abstract virtual string get_ScopedText();
    public abstract virtual FileCollectorInfo get_FileCollectorInfo();
}
public interface JetBrains.ReSharper.Feature.Services.Intentions.Scoped.IScopedActionWithCustomAnchor {
    [NotNullAttribute]
public IAnchor LocalScopeAnchor { get; }
    [NotNullAttribute]
public IAnchor GlobalScopeAnchor { get; }
    public abstract virtual IAnchor get_LocalScopeAnchor();
    public abstract virtual IAnchor get_GlobalScopeAnchor();
}
public enum JetBrains.ReSharper.Feature.Services.Intentions.Scoped.MultipleContextsApplyMode : Enum {
    public int value__;
    public static MultipleContextsApplyMode ApplyInAllContexts;
    public static MultipleContextsApplyMode OnlyApplyWhenCanBeAppliedInAllContexts;
}
public interface JetBrains.ReSharper.Feature.Services.Intentions.Scoped.QuickFixes.IManualScopedQuickFix {
    [NullableContextAttribute("1")]
[PureAttribute]
public abstract virtual bool CanHandleHighlighting(ISolution solution, IHighlighting highlighting);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Intentions.Scoped.QuickFixes.ScopedQuickFixTreeProcessor : object {
    private ISolution mySolution;
    private ScopedQuickFixExecutor myQuickFixExecutor;
    private IQuickFixes myQuickFixes;
    private IReadOnlyCollection`1<Type> myQuickFixTypes;
    [NullableAttribute("2")]
private Func`1<bool> myCheckForInterrupt;
    private IContextBoundSettingsStore mySettingsStore;
    private DispatcherInstance myDispatcher;
    private IScopedFixingStrategy myStrategy;
    public ScopedQuickFixTreeProcessor(ISolution solution, ScopedQuickFixExecutor quickFixExecutor, IQuickFixes quickFixes, IScopedFixingStrategy strategy, Func`1<bool> checkForInterrupt, IContextBoundSettingsStore settingsStore, ITreeNode psiScope);
    private DispatcherInstance CreateDispatcherForPsiScope(ITreeNode psiScope);
    public sealed virtual bool AnalyzeNode(ITreeNode node, Scope scope);
    public void FindHighlightings(ITreeNode node, Scope scope, List`1<IHighlighting> result);
    public sealed virtual bool ProcessNode(ITreeNode node, Scope scope, ScopedApplyFile scopedApplyFile, OffsetBasedProgressReporter progressReporter);
    [PureAttribute]
private static bool IsHighlightingRangeInScope(HighlightingInfo highlightingInfo, Scope scope);
    private Nullable`1<ScopedFixInstance> TryFindQuickFixToExecute(HighlightingInfo highlightingInfo, Scope scope);
    private bool ApplyQuickFixes(HighlightingInfo highlightingInfo, Scope scope, Boolean& isReanalysisRequired);
    private bool CanBeAppliedInSecondaryFiles(ScopedApplyFile scopedApplyFile, Scope scope, ITreeNode node, HighlightingInfo primaryHighlightingInfo);
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Feature.Services.Intentions.Scoped.ScopedApplyFile : ValueType {
    [CompilerGeneratedAttribute]
private IPsiSourceFile <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IPsiSourceFile> <SecondaryFiles>k__BackingField;
    public IPsiSourceFile SourceFile { get; public set; }
    public IReadOnlyList`1<IPsiSourceFile> SecondaryFiles { get; public set; }
    public bool HasSecondaryFiles { get; }
    public ScopedApplyFile(IPsiSourceFile SourceFile, IReadOnlyList`1<IPsiSourceFile> SecondaryFiles);
    public ScopedApplyFile(IPsiSourceFile SourceFile);
    [CompilerGeneratedAttribute]
public IPsiSourceFile get_SourceFile();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SourceFile(IPsiSourceFile value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IPsiSourceFile> get_SecondaryFiles();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SecondaryFiles(IReadOnlyList`1<IPsiSourceFile> value);
    public bool get_HasSecondaryFiles();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ScopedApplyFile left, ScopedApplyFile right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ScopedApplyFile left, ScopedApplyFile right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ScopedApplyFile other);
    [CompilerGeneratedAttribute]
public void Deconstruct(IPsiSourceFile& SourceFile, IReadOnlyList`1& SecondaryFiles);
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Builders.ScopedIntentionsBuilder")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.Feature.Services.Intentions.Scoped.ScopedIntentionBuilderAttribute : ShellComponentAttribute {
    public ScopedIntentionBuilderAttribute(Instantiation instantiation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Intentions.Scoped.ScopedIntentionsManager : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<ScopedIntentionsBuilder> <providers>P;
    public ScopedIntentionsManager(IEnumerable`1<ScopedIntentionsBuilder> providers);
    [PureAttribute]
public IReadOnlyList`1<IntentionAction> GetScopedIntentions(IQuickFix quickFix, IHighlighting sourceHighlighting, ISolution solution, IPsiSourceFile sourceFile);
    [PureAttribute]
public IReadOnlyList`1<IntentionAction> GetScopedIntentions(ContextActionInstance contextActionInstance, ISolution solution, IPsiSourceFile sourceFile);
    [PureAttribute]
public IReadOnlyList`1<IntentionAction> GetScopedIntentions(IContextAction contextAction, ISolution solution, IPsiSourceFile sourceFile);
    internal IReadOnlyList`1<IntentionAction> ExpandScopedActions(List`1<IntentionAction> intentionActions, IScopedAction ownerScopedAction, IHighlighting sourceHighlighting, ISolution solution, IPsiSourceFile sourceFile);
    public static IntentionPopup GetScopedPopupAction(IPopupBulbAction popupBulbAction, ISolution solution, ITextControl textControl);
    [CompilerGeneratedAttribute]
internal static void <ExpandScopedActions>g__StoreExpandedActions|5_1(IntentionAction original, <>c__DisplayClass5_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Scopes.DeclaredElementUsagesScope`1 : Scope {
    [CompilerGeneratedAttribute]
private TDeclaredElement <Element>k__BackingField;
    public TDeclaredElement Element { get; }
    public string Title { get; }
    public DeclaredElementUsagesScope`1(TDeclaredElement element);
    [CompilerGeneratedAttribute]
public TDeclaredElement get_Element();
    public virtual string get_Title();
    protected virtual bool IsMatchingUsage(IReference reference);
    public sealed virtual IReadOnlyList`1<IProjectFile> GetProjectFilesToProcess(IProgressIndicator progress);
    public virtual IProjectModelElement[] GetProjectModelElementsDataConstant();
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Scopes.ILocalScopesBuilder {
    [PureAttribute]
public abstract virtual IEnumerable`1<LocalScope> Build(ITreeNode context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Scopes.LocalScope : Scope {
    private IPsiSourceFile mySourceFile;
    private ITreeRangePointer myRangePointer;
    private IReadOnlyList`1<IRangeMarker> myIntersectingRanges;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Predicate`1<ITreeNode> myDescendantsFilter;
    [CompilerGeneratedAttribute]
private PsiLanguageType <Language>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IRangeMarker <RangeMarker>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    public IPsiSourceFile SourceFile { get; }
    public PsiLanguageType Language { get; }
    [NullableAttribute("2")]
public IRangeMarker RangeMarker { get; }
    public string Title { get; }
    public string Kind { get; }
    public LocalScope(ITreeRange treeRange, string title, string kind, Predicate`1<ITreeNode> descendantsFilter);
    public LocalScope(ITreeNode scopeNode, string title, string kind, IRangeMarker rangeMarker, Predicate`1<ITreeNode> descendantsFilter);
    public IPsiSourceFile get_SourceFile();
    [CompilerGeneratedAttribute]
public PsiLanguageType get_Language();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IRangeMarker get_RangeMarker();
    public IEnumerable`1<DocumentRange> GetIntersectingDocumentRanges(IDocument document);
    public DocumentRange GetCoveringDocumentRange(IDocument document);
    [CompilerGeneratedAttribute]
public virtual string get_Title();
    [CompilerGeneratedAttribute]
public virtual string get_Kind();
    public virtual IEnumerable`1<ITreeNode> GetPsiScopesToProcess(IPsiSourceFile sourceFile, PsiLanguageType languageType);
    private static ITreeRange TryProjectRangeToFile(IFile psiFile, ITreeRange range);
    public virtual Predicate`1<ITreeNode> GetPsiScopeDescendantsFilter();
    public virtual IReadOnlyList`1<IProjectFile> GetProjectFilesToProcess(IProgressIndicator progress);
    public virtual IReadOnlyList`1<IPsiSourceFile> GetSourceFilesToProcess(IProgressIndicator progress, Func`2<IPsiSourceFile, bool> actionSpecificFilter);
    public virtual IProjectModelElement[] GetProjectModelElementsDataConstant();
    [CompilerGeneratedAttribute]
internal static ITreeNode <TryProjectRangeToFile>g__ProjectNodeToFile|23_0(ITreeNode node, <>c__DisplayClass23_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Scopes.ProjectFileScope : Scope {
    [CompilerGeneratedAttribute]
private IProjectFile <projectFile>P;
    public string Title { get; }
    public ProjectFileScope(IProjectFile projectFile);
    public virtual string get_Title();
    public virtual IReadOnlyList`1<IProjectFile> GetProjectFilesToProcess(IProgressIndicator progress);
    public virtual IReadOnlyList`1<IPsiSourceFile> GetSourceFilesToProcess(IProgressIndicator progress, Func`2<IPsiSourceFile, bool> actionSpecificFilter);
    public virtual IProjectModelElement[] GetProjectModelElementsDataConstant();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Scopes.ProjectFolderScope : Scope {
    [CompilerGeneratedAttribute]
private IProjectFolder <projectFolder>P;
    [CompilerGeneratedAttribute]
private Predicate`1<IProjectFile> <projectFilePredicate>P;
    public string Title { get; }
    public ProjectFolderScope(IProjectFolder projectFolder, Predicate`1<IProjectFile> projectFilePredicate);
    public virtual string get_Title();
    public virtual IReadOnlyList`1<IProjectFile> GetProjectFilesToProcess(IProgressIndicator progress);
    public virtual IProjectModelElement[] GetProjectModelElementsDataConstant();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Scopes.Scope : object {
    public string Title { get; }
    public string Kind { get; }
    public abstract virtual string get_Title();
    public virtual string get_Kind();
    public virtual IEnumerable`1<ITreeNode> GetPsiScopesToProcess(IPsiSourceFile sourceFile, PsiLanguageType languageFilter);
    [PureAttribute]
public virtual Predicate`1<ITreeNode> GetPsiScopeDescendantsFilter();
    public abstract virtual IReadOnlyList`1<IProjectFile> GetProjectFilesToProcess(IProgressIndicator progress);
    public virtual IReadOnlyList`1<IPsiSourceFile> GetSourceFilesToProcess(IProgressIndicator progress, Func`2<IPsiSourceFile, bool> actionSpecificFilter);
    public abstract virtual IProjectModelElement[] GetProjectModelElementsDataConstant();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Scopes.SolutionScope : Scope {
    [CompilerGeneratedAttribute]
private ISolution <solution>P;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IProjectFile <anchor>P;
    [CompilerGeneratedAttribute]
private Predicate`1<IProjectFile> <projectFilePredicate>P;
    public string Title { get; }
    public SolutionScope(ISolution solution, IProjectFile anchor, Predicate`1<IProjectFile> projectFilePredicate);
    public virtual string get_Title();
    public virtual IReadOnlyList`1<IProjectFile> GetProjectFilesToProcess(IProgressIndicator progress);
    public virtual IProjectModelElement[] GetProjectModelElementsDataConstant();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Scopes.SourceFileScope : Scope {
    [CompilerGeneratedAttribute]
private IPsiSourceFile <sourceFile>P;
    public string Title { get; }
    public SourceFileScope(IPsiSourceFile sourceFile);
    public virtual string get_Title();
    public virtual IReadOnlyList`1<IProjectFile> GetProjectFilesToProcess(IProgressIndicator progress);
    public virtual IReadOnlyList`1<IPsiSourceFile> GetSourceFilesToProcess(IProgressIndicator progress, Func`2<IPsiSourceFile, bool> actionSpecificFilter);
    public virtual IProjectModelElement[] GetProjectModelElementsDataConstant();
}
public enum JetBrains.ReSharper.Feature.Services.Intentions.SignatureChangeKind : Enum {
    public int value__;
    public static SignatureChangeKind OnlyReturnType;
    public static SignatureChangeKind WholeSignature;
}
public class JetBrains.ReSharper.Feature.Services.Intentions.UpdateArgumentsDelegate : MulticastDelegate {
    public UpdateArgumentsDelegate(object object, IntPtr method);
    public virtual Nullable`1<AttributeArguments> Invoke(IAttributeInstance instance);
    public virtual IAsyncResult BeginInvoke(IAttributeInstance instance, AsyncCallback callback, object object);
    public virtual Nullable`1<AttributeArguments> EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Feature.Services.Intentions.Util.CreateMethodUtil`1 : object {
    public static ITypeDeclaration GetTargetTypeDeclaration(TMethodReference valueReference);
    private static bool IsSuitableTypeDeclaration(IDeclaration declaration);
    [NullableContextAttribute("2")]
public static ITypeDeclaration GetTargetTypeDeclaration(ITypeElement typeElement);
    public static IBulbActionCommand CreateMethod(TMethodReference newReference, ITypeDeclaration targetTypeDeclaration, MemberSignature signature, AccessRights accessRights, Func`2<TMethodReference, string> suggestMethodName, bool executeTemplateOverReturnType);
    public static MemberSignature CreateEventHandlerSignature(ITypeDeclaration targetTypeDeclaration, IDelegate delegate, ISubstitution substitution);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Intentions.Util.TypeProcessUtil : object {
    [NotNullAttribute]
public static IDeclaredType GetDeclaredTypeForAnonymousFunction(IPsiModule psiModule, bool hasReturnValue, IList`1<IType> typeParameters, Int32& typeArgsToSkip);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Intentions.Util.TypeProcessUtil/<FilterVoid>d__1")]
[ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<IExpressionType> FilterVoid(IEnumerable`1<IExpressionType> typeToFilter);
    public static ITypeImage CreateMethodGroupTypeImage(IPsiModule psiModule, IEnumerable`1<IType> parameterTypes, IType returnType, ISubstitution substitution);
}
public class JetBrains.ReSharper.Feature.Services.InterLineAdornments.DefaultInterLineAdornmentDataModel : object {
    [CompilerGeneratedAttribute]
private AdornmentData <Data>k__BackingField;
    public AdornmentData Data { get; }
    public IPresentableItem ContextMenuTitle { get; }
    public IEnumerable`1<BulbMenuItem> ContextMenuItems { get; }
    public Nullable`1<TextRange> SelectionRange { get; }
    public DefaultInterLineAdornmentDataModel(DefaultInterLineAdornmentHighlighting highlighting);
    [CompilerGeneratedAttribute]
public sealed virtual AdornmentData get_Data();
    public sealed virtual IPresentableItem get_ContextMenuTitle();
    public sealed virtual IEnumerable`1<BulbMenuItem> get_ContextMenuItems();
    public sealed virtual void ExecuteNavigation(PopupWindowContextSource popupWindowContextSource);
    public sealed virtual Nullable`1<TextRange> get_SelectionRange();
}
[DaemonAdornmentProviderAttribute("JetBrains.ReSharper.Feature.Services.InterLineAdornments.DefaultInterLineAdornmentProvider")]
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/InterLineAdornments")]
public class JetBrains.ReSharper.Feature.Services.InterLineAdornments.DefaultInterLineAdornmentHighlighting : object {
    private DocumentRange myRange;
    [CompilerGeneratedAttribute]
private RichText <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAboveLine>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <ExtraLinesAbove>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <ExtraLinesBelow>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Indent>k__BackingField;
    public RichText Text { get; }
    public string ToolTip { get; }
    public bool IsAboveLine { get; }
    public byte ExtraLinesAbove { get; }
    public byte ExtraLinesBelow { get; }
    public Nullable`1<int> Indent { get; }
    public string ErrorStripeToolTip { get; }
    public IconId Icon { get; }
    public double Order { get; }
    public PushToHintMode Mode { get; }
    public DefaultInterLineAdornmentHighlighting(DocumentRange range, string text, string tooltip, bool isAboveLine, byte extraLinesAbove, byte extraLinesBelow, Nullable`1<int> indent);
    [CompilerGeneratedAttribute]
public RichText get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    [CompilerGeneratedAttribute]
public bool get_IsAboveLine();
    [CompilerGeneratedAttribute]
public byte get_ExtraLinesAbove();
    [CompilerGeneratedAttribute]
public byte get_ExtraLinesBelow();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Indent();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public IconId get_Icon();
    public sealed virtual DocumentRange CalculateRange();
    public double get_Order();
    public PushToHintMode get_Mode();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.InterLineAdornments.DefaultInterLineAdornmentProvider : object {
    public sealed virtual bool IsValid(IHighlighter highlighter);
    public sealed virtual IAdornmentDataModel CreateDataModel(IHighlighter highlighter);
}
public interface JetBrains.ReSharper.Feature.Services.Internal.DeadlockSafety.IInstantiationAttributesUpdateHelper {
    public abstract virtual bool Check(StringSource attributeLocalName, IDeclaration declaration, ITypeDeclaration& classDeclaration, IInvocationInfo& attribute);
    public abstract virtual bool Process(ITypeDeclaration classDeclaration, IInvocationInfo attribute, Instantiation newInstantiation, IDeclaredType instantiationType, bool isDefault);
}
public interface JetBrains.ReSharper.Feature.Services.Internal.DeadlockSafety.IPrimaryToAnyThreadAttributesUpdateHelper {
    public abstract virtual bool Check(IDeclaration declaration);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.Internal.ZoneMarker : object {
}
public class JetBrains.ReSharper.Feature.Services.IoC.ComponentDescriptionBase : object {
    private IoCType myType;
    public IoCType Type { get; }
    public ComponentDescriptionBase(IoCType type);
    public sealed virtual IoCType get_Type();
    public virtual string GetPresentableDescription();
}
public interface JetBrains.ReSharper.Feature.Services.IoC.IComponentDescription {
    public IoCType Type { get; }
    public abstract virtual IoCType get_Type();
    public abstract virtual string GetPresentableDescription();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.IoC.InversionOfControlService : object {
    private ISolution mySolution;
    private Lazy`1<SolutionFeaturePartsContainer> mySolutionFeaturePartsContainer;
    public InversionOfControlService(ISolution solution, Lazy`1<SolutionFeaturePartsContainer> solutionFeaturePartsContainer);
    public static InversionOfControlService GetInstance(ISolution solution);
    [NotNullAttribute]
public ICollection`1<ComponentDescriptionBase> GetComponentInfos(ITypeElement target);
    [CompilerGeneratedAttribute]
private bool <GetComponentInfos>b__4_0(IIoCProvider provider);
}
public class JetBrains.ReSharper.Feature.Services.IoC.IoCType : EnumPattern {
    public static IoCType ReSharperComContainer;
    public static IoCType MEF;
    public static IoCType StructureMap;
    public static IoCType Unity;
    public static IoCType CastleWindsor;
    public static IoCType Spring;
    public static IoCType Ninject;
    public static IoCType Custom;
    public IoCType(string name);
    private static IoCType();
}
public interface JetBrains.ReSharper.Feature.Services.IoC.Providers.IIoCProvider {
    [CanBeNullAttribute]
public abstract virtual ComponentDescriptionBase GetIocType(ITypeElement typeElement);
    public abstract virtual bool IsApplicable(ISolution solution);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.IoC.Providers.ReSharperComContainerProvider : object {
    private ISolution mySolution;
    public ReSharperComContainerProvider(ISolution solution);
    public sealed virtual ComponentDescriptionBase GetIocType(ITypeElement typeElement);
    private bool IsPartAttribute(ITypeElement typeElement);
    public sealed virtual bool IsApplicable(ISolution solution);
}
public class JetBrains.ReSharper.Feature.Services.IoC.ReSharperComponentDescription : ComponentDescriptionBase {
    private ITypeElement myAttributeTypeElement;
    private string myPresentation;
    private static string SolutionComponent;
    private static string PsiComponent;
    private static string ShellComponent;
    private static string SolutionInstanceComponent;
    private static string FeaturePart;
    private static string SolutionFeaturePart;
    public ITypeElement AttributeTypeElement { get; }
    public ReSharperComponentDescription(ITypeElement attributeTypeElement);
    private string GetPresentableName(ITypeElement attributeTypeElement);
    public ITypeElement get_AttributeTypeElement();
    public virtual string GetPresentableDescription();
}
public interface JetBrains.ReSharper.Feature.Services.IPassFormatStringHelper {
    [PureAttribute]
public abstract virtual bool CanRewriteFormattingInvocation(FormattingFunctionInvocationInfo invocationInfo, ISolution solution, bool allowCustomFormattingMethods);
    [PureAttribute]
public abstract virtual bool CanPassFormatString(FormattingFunctionInvocationInfo invocationInfo, ISolution solution, bool allowInterpolatedStringHandlerOnly);
    [PureAttribute]
public abstract virtual bool CanPassInterpolation(FormattingFunctionInvocationInfo invocationInfo, ISolution solution, bool allowInterpolatedStringHandlerOnly);
    [PureAttribute]
public abstract virtual bool IsResolvedWithNewMethod(FormattingFunctionInvocationInfo invocationInfo, IMethod suggestedMethod, IReadOnlyList`1<IArgument> removingArguments, bool allowInterpolatedStringHandlerOnly);
    public abstract virtual void RemoveFormattingArguments(FormattingFunctionInvocationInfo invocationInfo);
    public abstract virtual void RemoveFormattingArguments(IReadOnlyList`1<IExpression> argumentExpressions);
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual IMethod GetNonFormattingMethod(FormattingFunctionInvocationInfo invocationInfo, ISolution solution, bool withoutCustomFormatProvider, bool allowInterpolatedStringHandlerOnly);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.ReSharper.Feature.Services.LinqTools.CopyToPhysicalMap : object {
    public static CopyToPhysicalMap TRIVIAL;
    private Func`2<ITreeNode, ITreeNode> myCopyToPhysical;
    private Func`2<ITreeNode, ITreeNode> myPhisicalToCopy;
    public IStatement Item { get; }
    public IExpression Item { get; }
    public ITypeOwner Item { get; }
    public CopyToPhysicalMap(Func`2<ITreeNode, ITreeNode> copyToPhysical, Func`2<ITreeNode, ITreeNode> phisicalToCopy);
    private static CopyToPhysicalMap();
    public IStatement get_Item(IStatement statement);
    public IExpression get_Item(IExpression expression);
    public ITypeOwner get_Item(ITypeOwner variable);
    public IStatement PhysicalToCopy(IStatement statement);
    public IExpression PhysicalToCopy(IExpression expression);
    public ITypeOwner PhysicalToCopy(ITypeOwner variable);
    private static ITypeOwner ConvertVariable(ITypeOwner variable, Func`2<ITreeNode, ITreeNode> func);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.LinqTools.ElementPointerExtensions : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static TElement GetOrNull(IElementPointer`1<TElement> pointer, ITreeNode scope);
}
public class JetBrains.ReSharper.Feature.Services.LinqTools.ElementPointersStore : object {
    private List`1<IElementPointerImpl> myPointers;
    private bool myTransformationsInProgress;
    public IElementPointer`1<TElement> CreatePointer(TElement element);
    [CanBeNullAttribute]
public IElementPointer`1<TElement> CreatePointerOrNull(TElement element);
    public void StartTransformations();
    public void EndTransformations(ITreeNode scopeToClear);
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Feature.Services.LinqTools.EscapeType : Enum {
    public int value__;
    public static EscapeType BREAK;
    public static EscapeType CONTINUE;
    public static EscapeType RETURN;
    public static EscapeType GOTO;
    public static EscapeType ALL;
}
public class JetBrains.ReSharper.Feature.Services.LinqTools.FixedElementPointer`1 : object {
    private TElement myElement;
    public FixedElementPointer`1(TElement element);
    public sealed virtual TElement Get(ITreeNode scope);
}
public interface JetBrains.ReSharper.Feature.Services.LinqTools.IElementPointer`1 {
    public abstract virtual TElement Get(ITreeNode scope);
}
public interface JetBrains.ReSharper.Feature.Services.LinqTools.ILinqToolsLanguageHelper {
    public IEnumerable`1<Type> TypesToMarkOnCopy { get; }
    public String[] WherePatterns { get; }
    public String[] WhereInversePatterns { get; }
    public String[] SelectOrLetPatterns { get; }
    public String[] TakeWhilePatterns { get; }
    public String[] DistinctPatterns { get; }
    public String[] DistinctPatternsWithContinue { get; }
    public String[] DistinctSetVarDeclPatterns { get; }
    public String[] CastPatterns { get; }
    public String[] OfTypePatterns { get; }
    public String[] OfTypePatternsWithContinue1 { get; }
    public String[] OfTypePatternsWithContinue2 { get; }
    public String[] CountPatterns { get; }
    public String[] MinPatterns { get; }
    public String[] MaxPatterns { get; }
    public String[] SumPatterns { get; }
    public String[] AssignAnyPatterns { get; }
    public String[] ReturnAnyPatterns { get; }
    public String[] IfAnyPatterns { get; }
    public String[] IfAnyPatternsWithBreak { get; }
    public String[] FirstOrDefaultPatternsWithBreak { get; }
    public String[] FirstOrDefaultPatternsWithReturn { get; }
    public String[] YieldReturnPatterns { get; }
    public String[] ForLoopPatterns { get; }
    public String[] ElementAccessPatterns { get; }
    public String[] TypeInstantiationPatterns { get; }
    public String[] TypeInstantiationOneParamPatterns { get; }
    public String[] EqualsPatterns { get; }
    public String[] DeclarationAndReturnPatterns { get; }
    public String[] AssignmentAndReturnPatterns { get; }
    public string FromQueryFormatString { get; }
    public string FromQueryExplicitTypeFormatString { get; }
    public string SelectQueryFormatString { get; }
    public string SelectIntoQueryFormatString { get; }
    public string WhereQueryFormatString { get; }
    public string LetQueryFormatString { get; }
    public bool CanOmitTrivialSelect { get; }
    public bool VariablesInLoopCollectionConflictWithIterator { get; }
    public abstract virtual IPlaceholder CreateIdentifierPlaceholder(string name);
    public abstract virtual IPlaceholder CreateExpressionPlaceholder(string name);
    public abstract virtual IPlaceholder CreateStatementPlaceholder(string name);
    public abstract virtual IPlaceholder CreateStatementsPlaceholder(string name);
    public abstract virtual IPlaceholder CreateTypePlaceholder(string name);
    public abstract virtual IPlaceholder CreateElementPlaceholder(string name, ITreeNode node);
    public abstract virtual IStructuralSearchPattern CreatePattern(string text, IEnumerable`1<IPlaceholder> placeholders);
    [ContractAnnotationAttribute("=> true, body:notnull, iteratorVar:notnull, collectionExpr:notnull;=> false, body:null, iteratorVar:null, collectionExpr:null")]
public abstract virtual bool IsForeachStatement(IStatement statement, IStatementsRange& body, ILocalVariable& iteratorVar, IExpression& collectionExpr, Boolean& isAsync);
    public abstract virtual bool CanUseGetEnumeratorFromIEnumerable(IStatement statement, Boolean& usesGetEnumeratorFromIEnumerable);
    [ContractAnnotationAttribute("=> true, body:notnull;=> false, body:null")]
public abstract virtual bool IsForStatement(IStatement statement, IStatementsRange& body);
    public abstract virtual bool IsLabelStatement(IStatement statement);
    public abstract virtual bool IsLoopBodyBlock(IStatement statement);
    public abstract virtual bool IsAsyncForeachStatement(IStatement statement);
    public abstract virtual IStatementsRange StatementToRange(IStatement statement);
    public abstract virtual IStatementsRange StatementsToRange(IList`1<IStatement> statements);
    public abstract virtual IStatementsRange ToStatementsRange(ITreeRange treeRange);
    public abstract virtual IStatementsRange SkipStatements(IList`1<IStatement> statements, int n);
    public abstract virtual bool IsTheOnlyExecutedStatement(IStatement statement);
    public abstract virtual bool IsLastExecutedStatement(IStatement statement, bool allowIfs, IExpression& valueReturned, IStatement& returnStatementToRemove);
    public abstract virtual IReference ReferenceExpressionReference(IExpression expression);
    public abstract virtual IExpression ReferenceExpressionByReference(IReference reference);
    public abstract virtual bool IsInvocationQualifier(IExpression qualifier, IExpression& invocation, IMethod& targetMethod, IList`1& args);
    public abstract virtual IExpression ReferenceExpressionByQualifier(IExpression qualifier);
    public abstract virtual IExpression ElementAccessByArgument(IExpression argument);
    public abstract virtual IReference InvocationExpressionReference(IExpression expression);
    public abstract virtual IReference ElementAccessReference(IExpression expression);
    public abstract virtual bool IsCastExpression(IExpression expression, IExpression& operand);
    public abstract virtual bool IsCastExpressionOperand(IExpression expression, IExpression& castExpr);
    [CanBeNullAttribute]
public abstract virtual ITypeOwnerDeclaration SingleVariableDeclaration(IStatement statement, bool checkIsRegular);
    public abstract virtual bool IsVariableAssignment(IStatement statement, ITypeOwner& variable, IExpression& valueAssigned);
    public abstract virtual bool IsVariableAssignmentValue(IExpression expression, IStatement& statement, ITypeOwner& variable);
    public abstract virtual bool IsInvocation(IStatement statement, IMethod& targetMethod, IExpression& qualifier, IList`1& args);
    public abstract virtual bool IsInvocation(IExpression expression, IMethod& targetMethod, IExpression& qualifier, IList`1& args);
    public abstract virtual IEnumerable`1<IStatement> StatementsBefore(IStatement statement);
    public abstract virtual IEnumerable`1<IStatement> StatementsAfter(IStatement statement);
    public abstract virtual bool IsVariableUsage(IExpression expression, string name);
    public abstract virtual bool IsReturnOwner(ITreeNode node, IType& returnType);
    public abstract virtual bool IsYieldStatement(IStatement statement);
    public abstract virtual bool CheckNoEscapes(IStatement statement, EscapeType escapeTypes, Predicate`1<IStatement> filter);
    [CanBeNullAttribute]
public abstract virtual ILocalVariable DeclareTempVariable(IType type, string name, IStatementsRange& beforeStatementsRange, bool applyCodeFormatter);
    [CanBeNullAttribute]
public abstract virtual ITreeNode GetScopeToCopy(IStatement loop);
    [NotNullAttribute]
public abstract virtual ConstantValue ConvertConstantValueToTypeImplicit(ConstantValue value, IType type, IFile context);
    [NotNullAttribute]
public abstract virtual ITypeConversionRule TypeConversionRule(ITreeNode context);
    public abstract virtual IExpression InvertCondition(IExpression condition, bool applyCodeFormatter);
    public abstract virtual IEnumerable`1<Type> get_TypesToMarkOnCopy();
    public abstract virtual void ChangeVariableType(ITypeOwnerDeclaration declaration, IType newType, bool applyCodeFormatter);
    public abstract virtual void SetTypeOrVar(ITypeOwnerDeclaration localVarDeclaration, IType type);
    public abstract virtual ILocalVariable CreateDummyVariable(IPsiModule module, IType type);
    public abstract virtual bool IsImplicitlyTyped(ILocalVariable local);
    public abstract virtual IExpression CreateVariableUsageExpression(IPsiModule module, ITypeOwner variable, bool applyCodeFormatter);
    public abstract virtual IExpression CreateVariableUsageExpression(IPsiModule module, string variableName, bool applyCodeFormatter);
    public abstract virtual IExpression CreateInvocationExpression(IPsiModule module, IMethod targetMethod, IList`1<IType> typeArgs, object qualifier, string methodName, bool wrapWithAwait, Object[] args);
    public abstract virtual IExpression CreateLambdaExpression(IPsiModule module, bool isAsync, String[] argNames, IExpression body);
    public abstract virtual IExpression CreateCastExpression(IExpression expression, IType type, bool applyCodeFormatter);
    public abstract virtual IExpression CreateSumExpression(IPsiModule module, IExpression operand1, IExpression operand2);
    public abstract virtual IExpression CreateLogicalAndExpression(IPsiModule module, IExpression condition1, IExpression condition2);
    public abstract virtual IExpression CreateOneElementArrayCreationExpression(IPsiModule module, IType elementType, IExpression element);
    public abstract virtual IExpression CreateQueryExpression(IPsiModule module, string text, IEnumerable`1<object> args);
    public abstract virtual IStatement CreateReturnStatement(IPsiModule module, IExpression returnValue);
    public abstract virtual IStatement CreateInvocationStatement(IPsiModule module, IMethod targetMethod, IList`1<IType> typeArgs, object qualifier, string methodName, bool wrapWithAwait, Object[] args);
    public abstract virtual IStatement CreateAssignmentStatement(IPsiModule module, ITypeOwner targetVar, IExpression expression);
    public abstract virtual IStatement CreateAddValueStatement(IPsiModule module, ITypeOwner targetVar, IExpression expression);
    public abstract virtual IStatement CreateIfStatement(IPsiModule module, IExpression condition, IStatementsRange thenStatements);
    public abstract virtual IStatement ReplaceWithForeachLoop(IStatement loop, IExpression iteratorExpression, IType elementType, string iteratorName, IExpression enumerableExpr, IStatementsRange body, bool forceUseBlock);
    public abstract virtual IExpression ReplaceBy(IExpression oldExpr, IExpression newExpr);
    public abstract virtual IStatement ReplaceBy(IStatement oldStatement, IStatement newStatement);
    public abstract virtual void SetInitializer(IDeclaration localVarDeclaration, IExpression value);
    public abstract virtual bool CanReplaceCastOperator(IType sourceType, IType targetType, ITreeNode context);
    public abstract virtual IStatement AddStatement(IStatement statement, IStatement& anchor, bool before);
    public abstract virtual void RemoveStatement(IStatement statement);
    public abstract virtual IExpression GetInitializer(IDeclaration localVarDeclaration);
    public abstract virtual String[] get_WherePatterns();
    public abstract virtual String[] get_WhereInversePatterns();
    public abstract virtual String[] get_SelectOrLetPatterns();
    public abstract virtual String[] get_TakeWhilePatterns();
    public abstract virtual String[] get_DistinctPatterns();
    public abstract virtual String[] get_DistinctPatternsWithContinue();
    public abstract virtual String[] get_DistinctSetVarDeclPatterns();
    public abstract virtual String[] get_CastPatterns();
    public abstract virtual String[] get_OfTypePatterns();
    public abstract virtual String[] get_OfTypePatternsWithContinue1();
    public abstract virtual String[] get_OfTypePatternsWithContinue2();
    public abstract virtual String[] get_CountPatterns();
    public abstract virtual String[] get_MinPatterns();
    public abstract virtual String[] get_MaxPatterns();
    public abstract virtual String[] get_SumPatterns();
    public abstract virtual String[] get_AssignAnyPatterns();
    public abstract virtual String[] get_ReturnAnyPatterns();
    public abstract virtual String[] get_IfAnyPatterns();
    public abstract virtual String[] get_IfAnyPatternsWithBreak();
    public abstract virtual String[] get_FirstOrDefaultPatternsWithBreak();
    public abstract virtual String[] get_FirstOrDefaultPatternsWithReturn();
    public abstract virtual String[] get_YieldReturnPatterns();
    public abstract virtual String[] get_ForLoopPatterns();
    public abstract virtual String[] get_ElementAccessPatterns();
    public abstract virtual String[] get_TypeInstantiationPatterns();
    public abstract virtual String[] get_TypeInstantiationOneParamPatterns();
    public abstract virtual String[] get_EqualsPatterns();
    public abstract virtual String[] get_DeclarationAndReturnPatterns();
    public abstract virtual String[] get_AssignmentAndReturnPatterns();
    public abstract virtual bool IsSimpleExpression(IExpression expression);
    [CanBeNullAttribute]
public abstract virtual IExpression GenerateFunctionalForm(IExpression queryExpression, ITreeNode context);
    public abstract virtual void CopyLocal(IExpression refExpression);
    public abstract virtual string get_FromQueryFormatString();
    public abstract virtual string get_FromQueryExplicitTypeFormatString();
    public abstract virtual string get_SelectQueryFormatString();
    public abstract virtual string get_SelectIntoQueryFormatString();
    public abstract virtual string get_WhereQueryFormatString();
    public abstract virtual string get_LetQueryFormatString();
    public abstract virtual bool get_CanOmitTrivialSelect();
    public abstract virtual bool get_VariablesInLoopCollectionConflictWithIterator();
    public abstract virtual void RenameVarRef(IReference reference, IExpression newExpr, IExpression& expr);
    public abstract virtual bool IsWriteElementAccess(IExpression refExpr);
    public abstract virtual bool HasAwaitExpressions(IExpression expression);
    public abstract virtual bool VarCanAggregateMultipleTimes(ILocalVariable workingVar, IStatement setVarDeclStatement);
    public abstract virtual bool IsIndexerUsed(IExpression indexer);
    public abstract virtual IEnumerable`1<ILocalVariable> GetDeclaredVariables(IExpression expression);
    public abstract virtual bool CanUseInClosure(IExpression expression);
    public abstract virtual bool CanUseAsCollectionInForeach(IType collectionType, ITreeNode context);
    public abstract virtual bool CanMoveToWhereQuery(IExpression whereCondition, ILocalVariable& ofTypeVariable, IExpression& updatedPreCondition, IExpression& updatedPostCondition);
}
public interface JetBrains.ReSharper.Feature.Services.LinqTools.IStructuralSearchMatchersCacheExtension {
    public abstract virtual IStructuralMatcher CreateExpressionMatcher(IStructuralSearchPattern pattern);
    public abstract virtual IStructuralMatcher CreateStatementMatcher(IStructuralSearchPattern pattern);
}
public class JetBrains.ReSharper.Feature.Services.LinqTools.LinqCache : object {
    public LinqMethod Where;
    public LinqMethod WhereWithIndex;
    public LinqMethod Select;
    public LinqMethod SelectWithIndex;
    public LinqMethod Skip;
    public LinqMethod SkipWhile;
    public LinqMethod SkipWhileWithIndex;
    public LinqMethod Take;
    public LinqMethod TakeLast;
    public LinqMethod TakeWhile;
    public LinqMethod TakeWhileWithIndex;
    public LinqMethod Cast;
    public LinqMethod OfType;
    public LinqMethod Count;
    public LinqMethod CountWithWhere;
    public LinqMethod LongCount;
    public LinqMethod LongCountWithWhere;
    public LinqMethod SumInt;
    public LinqMethod SumLong;
    public LinqMethod SumFloat;
    public LinqMethod SumDouble;
    public LinqMethod SumDecimal;
    public LinqMethod SumWithSelectInt;
    public LinqMethod SumWithSelectLong;
    public LinqMethod SumWithSelectFloat;
    public LinqMethod SumWithSelectDouble;
    public LinqMethod SumWithSelectDecimal;
    public LinqMethod OrderBy;
    public LinqMethod OrderByWithComparer;
    public LinqMethod OrderByDescending;
    public LinqMethod OrderByDescendingWithComparer;
    public LinqMethod MinInt;
    public LinqMethod MinLong;
    public LinqMethod MinFloat;
    public LinqMethod MinDouble;
    public LinqMethod MinDecimal;
    public LinqMethod MinBy;
    public LinqMethod MinByWithComparer;
    public LinqMethod MaxInt;
    public LinqMethod MaxLong;
    public LinqMethod MaxFloat;
    public LinqMethod MaxDouble;
    public LinqMethod MaxDecimal;
    public LinqMethod MaxBy;
    public LinqMethod MaxByWithComparer;
    public LinqMethod First;
    public LinqMethod Last;
    public LinqMethod FirstOrDefault;
    public LinqMethod FirstOrDefaultWithWhere;
    public LinqMethod LastOrDefault;
    public LinqMethod LastOrDefaultWithWhere;
    public LinqMethod Any;
    public LinqMethod AnyWithWhere;
    public LinqMethod All;
    public LinqMethod Contains;
    public LinqMethod ToList;
    public LinqMethod ToArray;
    public LinqMethod ToDictionary;
    public LinqMethod ToDictionaryWithComparer;
    public LinqMethod ToDictionaryWithElementSelector;
    public LinqMethod ToDictionaryWithElementSelectorAndComparer;
    public LinqMethod Aggregate;
    public LinqMethod Distinct;
    public LinqMethod DistinctWithComparer;
    public LinqMethod Append;
    public LinqMethod Concat;
    public LinqMethod Prepend;
    [CompilerGeneratedAttribute]
private bool <HasCompiledElementsOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiModule <Module>k__BackingField;
    [CompilerGeneratedAttribute]
private PredefinedType <PredefinedType>k__BackingField;
    [CompilerGeneratedAttribute]
private IClass <EnumerableClass>k__BackingField;
    [CompilerGeneratedAttribute]
private IClass <AsyncEnumerableClass>k__BackingField;
    [CompilerGeneratedAttribute]
private IClass <ListClass>k__BackingField;
    [CompilerGeneratedAttribute]
private IClass <DictionaryClass>k__BackingField;
    [CompilerGeneratedAttribute]
private IInterface <ICollectionInterface>k__BackingField;
    [CompilerGeneratedAttribute]
private IInterface <IListInterface>k__BackingField;
    [CompilerGeneratedAttribute]
private IMethod <ListAddMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private IMethod <ListToArrayMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private IMethod <DictionaryAddMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private IMethod <ICollectionAddMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private IMethod <StaticEqualsMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private IMethod <ObjectEqualsMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private IInterface <IEnumeratorInterface>k__BackingField;
    [CompilerGeneratedAttribute]
private IInterface <IAsyncEnumeratorInterface>k__BackingField;
    [CompilerGeneratedAttribute]
private IInterface <IEnumeratorNonGenericInterface>k__BackingField;
    [CompilerGeneratedAttribute]
private IMethod <IEnumerableGetEnumeratorMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private IMethod <IAsyncEnumerableGetAsyncEnumeratorMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private IMethod <IEnumerableNonGenericGetEnumeratorMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private IInterface <IEnumerableInterface>k__BackingField;
    [CompilerGeneratedAttribute]
private IInterface <IAsyncEnumerableInterface>k__BackingField;
    [CompilerGeneratedAttribute]
private IInterface <IEnumerableNonGenericInterface>k__BackingField;
    [CompilerGeneratedAttribute]
private IInterface <IEqualityComparerInterface>k__BackingField;
    [CompilerGeneratedAttribute]
private IInterface <IComparerInterface>k__BackingField;
    [CompilerGeneratedAttribute]
private IClass <MathClass>k__BackingField;
    public bool HasCompiledElementsOnly { get; }
    [NotNullAttribute]
public IPsiModule Module { get; }
    [NotNullAttribute]
public PredefinedType PredefinedType { get; }
    [CanBeNullAttribute]
public IClass EnumerableClass { get; }
    [CanBeNullAttribute]
public IClass AsyncEnumerableClass { get; }
    [CanBeNullAttribute]
public IClass ListClass { get; }
    [CanBeNullAttribute]
public IClass DictionaryClass { get; }
    [CanBeNullAttribute]
public IInterface ICollectionInterface { get; }
    [CanBeNullAttribute]
public IInterface IListInterface { get; }
    [CanBeNullAttribute]
public IMethod ListAddMethod { get; }
    [CanBeNullAttribute]
public IMethod ListToArrayMethod { get; }
    [CanBeNullAttribute]
public IMethod DictionaryAddMethod { get; }
    [CanBeNullAttribute]
public IMethod ICollectionAddMethod { get; }
    [CanBeNullAttribute]
public IMethod StaticEqualsMethod { get; }
    [CanBeNullAttribute]
public IMethod ObjectEqualsMethod { get; }
    [CanBeNullAttribute]
public IInterface IEnumeratorInterface { get; }
    [CanBeNullAttribute]
public IInterface IAsyncEnumeratorInterface { get; }
    [CanBeNullAttribute]
public IInterface IEnumeratorNonGenericInterface { get; }
    [CanBeNullAttribute]
public IMethod IEnumerableGetEnumeratorMethod { get; }
    [CanBeNullAttribute]
public IMethod IAsyncEnumerableGetAsyncEnumeratorMethod { get; }
    [CanBeNullAttribute]
public IMethod IEnumerableNonGenericGetEnumeratorMethod { get; }
    [CanBeNullAttribute]
public IInterface IEnumerableInterface { get; }
    [CanBeNullAttribute]
public IInterface IAsyncEnumerableInterface { get; }
    [CanBeNullAttribute]
public IInterface IEnumerableNonGenericInterface { get; }
    [CanBeNullAttribute]
public IInterface IEqualityComparerInterface { get; }
    [CanBeNullAttribute]
public IInterface IComparerInterface { get; }
    [CanBeNullAttribute]
public IClass MathClass { get; }
    public LinqCache(IPsiModule module);
    [CanBeNullAttribute]
[PureAttribute]
public IMethod GetCastMethod(bool isAsync);
    [CanBeNullAttribute]
[PureAttribute]
public IMethod GetOfTypeMethod(bool isAsync);
    [CanBeNullAttribute]
[PureAttribute]
public IMethod GetToListMethod(bool isAsync);
    [CanBeNullAttribute]
[PureAttribute]
public IMethod SumMethod(SumMethodType type, LinqMethodKind kind);
    [CanBeNullAttribute]
[PureAttribute]
public IMethod SumMethodWithSelect(SumMethodType type, LinqMethodKind kind);
    [CanBeNullAttribute]
[PureAttribute]
public IMethod MinMethod(MinMaxMethodType type, LinqMethodKind kind);
    [CanBeNullAttribute]
[PureAttribute]
public IMethod MaxMethod(MinMaxMethodType type, LinqMethodKind kind);
    [CompilerGeneratedAttribute]
public bool get_HasCompiledElementsOnly();
    [CompilerGeneratedAttribute]
public IPsiModule get_Module();
    [CompilerGeneratedAttribute]
public PredefinedType get_PredefinedType();
    [CompilerGeneratedAttribute]
public IClass get_EnumerableClass();
    [CompilerGeneratedAttribute]
public IClass get_AsyncEnumerableClass();
    [CompilerGeneratedAttribute]
public IClass get_ListClass();
    [CompilerGeneratedAttribute]
public IClass get_DictionaryClass();
    [CompilerGeneratedAttribute]
public IInterface get_ICollectionInterface();
    [CompilerGeneratedAttribute]
public IInterface get_IListInterface();
    [CompilerGeneratedAttribute]
public IMethod get_ListAddMethod();
    [CompilerGeneratedAttribute]
public IMethod get_ListToArrayMethod();
    [CompilerGeneratedAttribute]
public IMethod get_DictionaryAddMethod();
    [CompilerGeneratedAttribute]
public IMethod get_ICollectionAddMethod();
    [CompilerGeneratedAttribute]
public IMethod get_StaticEqualsMethod();
    [CompilerGeneratedAttribute]
public IMethod get_ObjectEqualsMethod();
    [CompilerGeneratedAttribute]
public IInterface get_IEnumeratorInterface();
    [CompilerGeneratedAttribute]
public IInterface get_IAsyncEnumeratorInterface();
    [CompilerGeneratedAttribute]
public IInterface get_IEnumeratorNonGenericInterface();
    [CompilerGeneratedAttribute]
public IMethod get_IEnumerableGetEnumeratorMethod();
    [CompilerGeneratedAttribute]
public IMethod get_IAsyncEnumerableGetAsyncEnumeratorMethod();
    [CompilerGeneratedAttribute]
public IMethod get_IEnumerableNonGenericGetEnumeratorMethod();
    [CompilerGeneratedAttribute]
public IInterface get_IEnumerableInterface();
    [CompilerGeneratedAttribute]
public IInterface get_IAsyncEnumerableInterface();
    [CompilerGeneratedAttribute]
public IInterface get_IEnumerableNonGenericInterface();
    [CompilerGeneratedAttribute]
public IInterface get_IEqualityComparerInterface();
    [CompilerGeneratedAttribute]
public IInterface get_IComparerInterface();
    [CompilerGeneratedAttribute]
public IClass get_MathClass();
    [CompilerGeneratedAttribute]
private IType <.ctor>g__TryGetGenericEnumerableTypeArgument|155_0(IType type, bool isAsync);
    [CompilerGeneratedAttribute]
internal static bool <.ctor>g__IsFunc2|155_1(IType type, IType typeArgument1, IType typeArgument2, <>c__DisplayClass155_0& );
    [CompilerGeneratedAttribute]
internal static bool <.ctor>g__IsFunc3|155_2(IType type, IType typeArgument1, IType typeArgument2, IType typeArgument3, <>c__DisplayClass155_0& );
    [CompilerGeneratedAttribute]
private bool <.ctor>g__IsEqualityComparer|155_3(IType type, IType typeArgument);
    [CompilerGeneratedAttribute]
private bool <.ctor>g__IsComparer|155_4(IType type, IType typeArgument);
    [CompilerGeneratedAttribute]
internal static bool <.ctor>g__IsAsyncFunc2|155_5(IType type, IType typeArgument1, IType typeArgument2, <>c__DisplayClass155_0& );
    [CompilerGeneratedAttribute]
internal static bool <.ctor>g__IsAsyncFunc3|155_6(IType type, IType typeArgument1, IType typeArgument2, IType typeArgument3, <>c__DisplayClass155_0& );
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.LinqTools.LinqCacheExtensions : object {
    [NotNullAttribute]
private static Key`1<CacheMap> ourKey;
    private static LinqCacheExtensions();
    [ExtensionAttribute]
[NotNullAttribute]
[MustUseReturnValueAttribute]
public static LinqCache GetLinqCache(IPsiModule module);
}
public class JetBrains.ReSharper.Feature.Services.LinqTools.LinqMethod : ValueType {
    [CanBeNullAttribute]
public IMethod SyncMethod;
    [CanBeNullAttribute]
public IMethod AsyncMethod;
    [CanBeNullAttribute]
public IMethod AsyncAwaitMethod;
    [CanBeNullAttribute]
public IMethod AsyncAwaitWithCancellationMethod;
    [CanBeNullAttribute]
[PureAttribute]
public IMethod Get(LinqMethodKind kind);
    [PureAttribute]
public static LinqMethodKind Kind(bool isAsync, bool hasAwait, bool withCancellation);
    [PureAttribute]
public bool HasAll(bool isAsync);
}
public enum JetBrains.ReSharper.Feature.Services.LinqTools.LinqMethodKind : Enum {
    public int value__;
    public static LinqMethodKind Sync;
    public static LinqMethodKind Async;
    public static LinqMethodKind AsyncWithAwait;
    public static LinqMethodKind AsyncWithAwaitAndCancellation;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.LinqTools.LinqToolsUtil : object {
    private static String[] StandardIdentifierPlaceholders;
    private static String[] StandardExpressionPlaceholders;
    private static String[] StandardStatementPlaceholders;
    private static String[] StandardStatementsPlaceholders;
    private static String[] StandardTypePlaceholders;
    private static LinqToolsUtil();
    [ExtensionAttribute]
public static ILinqToolsLanguageHelper LanguageHelper(ITreeNode node);
    [ExtensionAttribute]
public static ILinqToolsLanguageHelper LanguageHelper(PsiLanguageType language);
    [ExtensionAttribute]
public static IEnumerable`1<IStructuralSearchPattern> CreatePatterns(ILinqToolsLanguageHelper helper, IEnumerable`1<string> texts, IPlaceholder[] nonStandardPlaceholers);
    [ExtensionAttribute]
public static IStatementsRange ToStatementRange(IStatement statement);
    [ExtensionAttribute]
public static IStatementsRange SkipOneStatement(ILinqToolsLanguageHelper helper, IList`1<IStatement> statements);
    public static IEnumerable`1<ILocalVariable> VariablesUsed(IEnumerable`1<ILocalVariable> variables, IExpression expression);
    public static IEnumerable`1<ILocalVariable> VariablesUsed(IEnumerable`1<ILocalVariable> variables, IEnumerable`1<IStatement> statements);
    public static ILocalVariable SingleVariableUsed(ICollection`1<ILocalVariable> variables, IExpression expression);
    public static ILocalVariable SingleVariableUsed(ICollection`1<ILocalVariable> variables, IEnumerable`1<IStatement> statements);
    public static bool IsUsed(IDeclaredElement element, ITreeNode scope, Predicate`1<IReference> filter);
    public static bool IsUsed(IDeclaredElement element, IEnumerable`1<IStatement> statements, Predicate`1<IReference> filter);
    public static bool IsUsed(IDeclaredElement element, ISearchDomain searchDomain, Predicate`1<IReference> filter);
    public static bool IsUsedExcept(IDeclaredElement element, IStatement loop, IEnumerable`1<IStatement> statements);
    public static bool IsUsedExcept(IDeclaredElement element, IStatement loop, IReference reference);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LinqTools.LinqToolsUtil/<FetchRefOrOutParameters>d__19")]
public static IEnumerable`1<IParameter> FetchRefOrOutParameters(ITreeNode place);
    public static bool HasAwaitExpressions(IExpression expression);
    [ExtensionAttribute]
public static ITypeOwner AsLocal(IDeclaredElement element);
    public static bool IsLastExecutedStatement(IStatement statement, IExpression& valueReturned, IStatement& returnStatementToRemove);
    public static bool IsTheOnlyExecutedStatement(IStatement statement);
    public static bool IsLastExecutedStatement(IStatement statement, bool allowIfs, IExpression& valueReturned, IStatement& returnStatementToRemove);
    [ExtensionAttribute]
public static IDeclaredElement ReferenceExpressionTarget(IExpression expression);
    [ExtensionAttribute]
public static bool IsReferenceExpressionTo(IExpression expression, IDeclaredElement target);
    [ExtensionAttribute]
public static IDeclaredElement GetReferenceExpressionTarget(IStructuralMatchResult matchResult, string placeholderName);
    [ExtensionAttribute]
public static bool IsReferenceExpressionTo(IStructuralMatchResult matchResult, string placeholderName, IDeclaredElement target);
    [ExtensionAttribute]
public static bool IsForeachStatement(IStatement statement);
    [ExtensionAttribute]
public static bool IsForeachStatement(IStatement statement, IStatementsRange& body, ILocalVariable& iteratorVar, IExpression& collectionExpr, Boolean& isAsync);
    [ExtensionAttribute]
public static bool IsAsyncForeachStatement(IStatement statement);
    [ExtensionAttribute]
public static bool CanUseGetEnumeratorFromIEnumerable(IStatement statement, Boolean& usesGetEnumeratorFromIEnumerable);
    [ExtensionAttribute]
public static bool IsForStatement(IStatement statement, IStatementsRange& body);
    [ExtensionAttribute]
public static bool IsForStatement(IStatement statement);
    [ExtensionAttribute]
public static bool IsCastExpression(IExpression expression, IExpression& operand);
    [ExtensionAttribute]
public static bool IsCastExpressionOperand(IExpression expression, IExpression& castExpr);
    [ExtensionAttribute]
public static bool IsVariableAssignment(IStatement statement, ITypeOwner& variable, IExpression& valueAssigned);
    [ExtensionAttribute]
public static bool IsInvocation(IStatement statement, IMethod& targetMethod, IExpression& qualifier, IList`1& args);
    [ExtensionAttribute]
public static bool IsInvocation(IStatement statement, IMethod targetMethod, IExpression& qualifier, IList`1& args);
    [ExtensionAttribute]
public static bool IsInvocation(IExpression expression, IMethod& targetMethod, IExpression& qualifier, IList`1& args);
    [ExtensionAttribute]
public static bool IsInvocation(IExpression expression, IMethod targetMethod, IExpression& qualifier, IList`1& args);
    [ExtensionAttribute]
public static bool IsVariableAssignmentValue(IExpression expression, IStatement& statement, ITypeOwner& variable);
    [ExtensionAttribute]
public static IExpression InvertCondition(IExpression condition, bool applyCodeFormatter);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ITypeOwnerDeclaration SingleVariableDeclaration(IStatement declarationStatement, bool checkIsRegular);
    [ExtensionAttribute]
public static bool IsDefaultValue(ConstantValue value, IType type, ITreeNode context);
    [ExtensionAttribute]
public static IExpression GetInitializer(IDeclaration localVarDeclaration);
    public static bool CheckNoEscapes(IStatementsRange range, EscapeType escapeTypes);
    public static bool CheckNoEscapes(IStatement statement, EscapeType escapeTypes);
    public static bool CheckNoEscapes(IStatement statement, EscapeType escapeTypes, Predicate`1<IStatement> filter);
    [ExtensionAttribute]
public static bool IsImplicitlyTyped(ILocalVariable local);
    public static TResult PerformActionOnCopy(TLoop loop, Func`3<TLoop, CopyToPhysicalMap, TResult> action, TResult defaultResult);
    public static void RenameVariable(ITypeOwner variable, string newName);
    [ExtensionAttribute]
public static void SetTypeOrVar(ITypeOwnerDeclaration localVarDeclaration, IType type);
    [ExtensionAttribute]
public static IExpression CreateLambdaExpression(ILinqToolsLanguageHelper helper, IPsiModule module, bool isAsync, string argName, IExpression body);
    [ExtensionAttribute]
public static IExpression ReplaceBy(IExpression oldExpr, IExpression newExpr);
    [ExtensionAttribute]
public static IStatement ReplaceBy(IStatement oldStatement, IStatement newStatement);
    [ExtensionAttribute]
public static void SetInitializer(IDeclaration localVarDeclaration, IExpression value);
    public static void RenameVarRefs(ITypeOwner var, string newName, ITreeNode scope, IExpression& expr);
    [ExtensionAttribute]
public static IEnumerable`1<IStatement> Substatements(IStatement statement);
    public static bool UsedAsRefOutParameter(ILocalVariable arg, ITreeNode scope);
    public static IEnumerable DeclaredVariables(IExpression expression);
    public static bool CanUseInClosure(IExpression expression);
}
public enum JetBrains.ReSharper.Feature.Services.LinqTools.MinMaxMethodType : Enum {
    public int value__;
    public static MinMaxMethodType Int;
    public static MinMaxMethodType Long;
    public static MinMaxMethodType Float;
    public static MinMaxMethodType Double;
    public static MinMaxMethodType Decimal;
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.LinqTools.StructuralSearchMatchersCache : object {
    private Dictionary`2<IStructuralSearchPattern, ISequenceStructuralMatcher> myPatternToStatementMatcher;
    private Dictionary`2<IStructuralSearchPattern, IStructuralMatcher> myPatternToExpressionMatcher;
    private IEnumerable`1<IStructuralSearchMatchersCacheExtension> myExtensions;
    public StructuralSearchMatchersCache(IEnumerable`1<IStructuralSearchMatchersCacheExtension> extensions);
    public static StructuralSearchMatchersCache GetInstance(ISolution solution);
    public static IStructuralMatchResult MatchPatterns(IEnumerable`1<IStatement> statements, IEnumerable`1<IStructuralSearchPattern> patterns);
    public static IStructuralMatchResult MatchPatterns(IExpression expression, IEnumerable`1<IStructuralSearchPattern> patterns);
    private ISequenceStructuralMatcher StatementMatcherForPattern(IStructuralSearchPattern pattern);
    private IStructuralMatcher ExpressionMatcherForPattern(IStructuralSearchPattern pattern);
    public void DropMatcherForPattern(IStructuralSearchPattern pattern);
}
public enum JetBrains.ReSharper.Feature.Services.LinqTools.SumMethodType : Enum {
    public int value__;
    public static SumMethodType Int;
    public static SumMethodType Long;
    public static SumMethodType Float;
    public static SumMethodType Double;
    public static SumMethodType Decimal;
}
public class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ActionPartInfo : object {
    [CompilerGeneratedAttribute]
private IActionQuery <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ISequenceQuery> <AdditionalFilters>k__BackingField;
    public IActionQuery Query { get; }
    public IList`1<ISequenceQuery> AdditionalFilters { get; }
    public ActionPartInfo(IActionQuery query);
    public ActionPartInfo(IActionQuery query, IList`1<ISequenceQuery> additionalFilters);
    [CompilerGeneratedAttribute]
public IActionQuery get_Query();
    [CompilerGeneratedAttribute]
public IList`1<ISequenceQuery> get_AdditionalFilters();
}
internal abstract class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ActionQueries.AggregateLikeAdditiveResult : object {
    protected LinqCache Cache;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    public bool IsAsync { get; }
    public bool CanAnyAccessChangeValue { get; }
    public bool CanOverwriteDefaultValue { get; }
    protected AggregateLikeAdditiveResult(LinqCache cache, bool isAsync);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAsync();
    public sealed virtual bool get_CanAnyAccessChangeValue();
    public sealed virtual bool get_CanOverwriteDefaultValue();
    public sealed virtual bool IsDefaultVariableValue(IExpression value);
    public sealed virtual bool CanMergeWithAssignmentOrInitialization(IExpression value);
    public sealed virtual bool CanMoveDeclarationOrAssignment(IExpression value);
    public sealed virtual IStatement CreateAddValueStatement(ITypeOwner additiveVariable);
    public sealed virtual IStatement AddValueInDeclaration(ITypeOwnerDeclaration declaration);
    public sealed virtual IStatement AddValueInAssignment(IStatement assignment, ITypeOwner targetVar, IExpression valueExpr);
    protected abstract virtual IExpression GenerateExpression(IExpression seedExpr);
    public sealed virtual IStatement CreateSetValueStatement(ITypeOwner additiveVariable);
    public sealed virtual IStatement SetValueInDeclaration(ITypeOwnerDeclaration declaration);
    public sealed virtual IStatement SetValueInAssignment(IStatement assignment, ITypeOwner targetVar, IExpression valueExpr);
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ActionQueries.AggregateQuery : object {
    private ITypeOwner myResultVariable;
    private IExpression myAggregationExpression;
    [CompilerGeneratedAttribute]
private ILocalVariable <InputVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [NotNullAttribute]
public ILocalVariable InputVariable { get; }
    public bool IsAsync { get; }
    private ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.InputVariables { get; }
    private ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.ExpressionsInLambdas { get; }
    public ITypeOwner ResultVariable { get; }
    public string TestDump { get; }
    public AggregateQuery(ITypeOwner resultVariable, ILocalVariable inputVariable, IExpression aggregationExpression, bool isAsync);
    [CompilerGeneratedAttribute]
public sealed virtual ILocalVariable get_InputVariable();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAsync();
    public sealed virtual IStatementsRange ConvertLoop(IStatement loop, GenerateFunctionalQueryParams params);
    public sealed virtual bool CanIncludeWhere(LinqCache cache);
    public sealed virtual bool CanIncludeSelect(LinqCache cache);
    private sealed virtual override ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_InputVariables();
    private sealed virtual override ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_ExpressionsInLambdas();
    public ITypeOwner get_ResultVariable();
    public sealed virtual string get_TestDump();
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ActionQueries.AggregateQueryMatcher : object {
    public sealed virtual ActionPartInfo Match(IList`1<IStatement> statements, ICollection`1<ILocalVariable> workingVariables, ILocalVariable indexVariable, IStatement loop, LinqCache cache, bool isAsync);
}
internal abstract class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ActionQueries.AnyQueryBase : object {
    protected bool InverseResult;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    public bool IsAsync { get; }
    private ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.ExpressionsInLambdas { get; }
    public string TestDump { get; }
    public ILocalVariable InputVariable { get; }
    private ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.InputVariables { get; }
    protected AnyQueryBase(bool inverseResult, bool isAsync);
    public abstract virtual IStatementsRange ConvertLoop(IStatement loop, GenerateFunctionalQueryParams params);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAsync();
    private sealed virtual override ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_ExpressionsInLambdas();
    public abstract virtual string get_TestDump();
    public sealed virtual ILocalVariable get_InputVariable();
    private sealed virtual override ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_InputVariables();
    protected IExpression GenerateExpression(GenerateFunctionalQueryParams params);
    private static bool IsComparison(IExpression expression, ILocalVariable variable, LinqCache cache, IExpression& comparedWith);
    public sealed virtual bool CanIncludeWhere(LinqCache cache);
    public sealed virtual bool CanIncludeSelect(LinqCache cache);
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ActionQueries.AnyQueryMatcher : object {
    public sealed virtual ActionPartInfo Match(IList`1<IStatement> statements, ICollection`1<ILocalVariable> workingVariables, ILocalVariable indexVariable, IStatement loop, LinqCache cache, bool isAsync);
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ActionQueries.AssignAnyQuery : AnyQueryBase {
    private ITypeOwner myResultVariable;
    public string TestDump { get; }
    public AssignAnyQuery(ITypeOwner resultVariable, bool inverseResult, bool isAsync);
    public virtual IStatementsRange ConvertLoop(IStatement loop, GenerateFunctionalQueryParams params);
    public virtual string get_TestDump();
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ActionQueries.CountQuery : object {
    private ITypeOwner myCountVariable;
    private bool myIsLong;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    public bool IsAsync { get; }
    public ILocalVariable InputVariable { get; }
    private ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.InputVariables { get; }
    private ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.ExpressionsInLambdas { get; }
    public string TestDump { get; }
    public CountQuery(ITypeOwner countVariable, bool isLong, bool isAsync);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAsync();
    public sealed virtual ILocalVariable get_InputVariable();
    public sealed virtual IStatementsRange ConvertLoop(IStatement loop, GenerateFunctionalQueryParams params);
    private sealed virtual override ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_InputVariables();
    private sealed virtual override ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_ExpressionsInLambdas();
    public sealed virtual bool CanIncludeWhere(LinqCache cache);
    public sealed virtual bool CanIncludeSelect(LinqCache cache);
    public sealed virtual string get_TestDump();
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ActionQueries.CountQueryMatcher : object {
    public sealed virtual ActionPartInfo Match(IList`1<IStatement> statements, ICollection`1<ILocalVariable> workingVariables, ILocalVariable indexVariable, IStatement loop, LinqCache cache, bool isAsync);
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ActionQueries.FirstOrDefaultQuery : object {
    private ITypeOwner myResultVariable;
    private IStatement myReturnStatementToRemove;
    [CompilerGeneratedAttribute]
private ILocalVariable <InputVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [NotNullAttribute]
public ILocalVariable InputVariable { get; }
    public bool IsAsync { get; }
    private ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.InputVariables { get; }
    private ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.ExpressionsInLambdas { get; }
    public string TestDump { get; }
    public FirstOrDefaultQuery(ITypeOwner resultVariable, ILocalVariable inputVariable, bool isAsync);
    public FirstOrDefaultQuery(IStatement returnStatementToRemove, ILocalVariable inputVariable, bool isAsync);
    [CompilerGeneratedAttribute]
public sealed virtual ILocalVariable get_InputVariable();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAsync();
    public sealed virtual IStatementsRange ConvertLoop(IStatement loop, GenerateFunctionalQueryParams params);
    private sealed virtual override ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_InputVariables();
    private sealed virtual override ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_ExpressionsInLambdas();
    public sealed virtual bool CanIncludeWhere(LinqCache cache);
    public sealed virtual bool CanIncludeSelect(LinqCache cache);
    public sealed virtual string get_TestDump();
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ActionQueries.FirstOrDefaultQueryMatcher : object {
    public sealed virtual ActionPartInfo Match(IList`1<IStatement> statements, ICollection`1<ILocalVariable> workingVariables, ILocalVariable indexVariable, IStatement loop, LinqCache cache, bool isAsync);
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ActionQueries.IfAnyQuery : AnyQueryBase {
    private IStatementsRange myStatementsRangeToExecute;
    public string TestDump { get; }
    public IfAnyQuery(IStatementsRange statementsRangeToExecute, bool isAsync);
    public virtual IStatementsRange ConvertLoop(IStatement loop, GenerateFunctionalQueryParams params);
    public virtual string get_TestDump();
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ActionQueries.MinOrMaxQuery : object {
    private ITypeOwner myResultVariable;
    private MinMaxMethodType myMethodType;
    private bool myIsMax;
    [CompilerGeneratedAttribute]
private ILocalVariable <InputVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [NotNullAttribute]
public ILocalVariable InputVariable { get; }
    public bool IsAsync { get; }
    private ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.InputVariables { get; }
    private ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.ExpressionsInLambdas { get; }
    public string TestDump { get; }
    public MinOrMaxQuery(ITypeOwner resultVariable, ILocalVariable inputVariable, MinMaxMethodType methodType, bool isMax, bool isAsync);
    [CompilerGeneratedAttribute]
public sealed virtual ILocalVariable get_InputVariable();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAsync();
    public sealed virtual IStatementsRange ConvertLoop(IStatement loop, GenerateFunctionalQueryParams params);
    private sealed virtual override ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_InputVariables();
    private sealed virtual override ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_ExpressionsInLambdas();
    public sealed virtual bool CanIncludeWhere(LinqCache cache);
    public sealed virtual bool CanIncludeSelect(LinqCache cache);
    public sealed virtual string get_TestDump();
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ActionQueries.MinOrMaxQueryMatcher : object {
    public sealed virtual ActionPartInfo Match(IList`1<IStatement> statements, ICollection`1<ILocalVariable> workingVariables, ILocalVariable indexVariable, IStatement loop, LinqCache cache, bool isAsync);
    private static Nullable`1<MinMaxMethodType> MinMaxMethodType(IType type);
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ActionQueries.ReturnAnyQuery : AnyQueryBase {
    private IStatement myReturnStatementToRemove;
    public string TestDump { get; }
    public ReturnAnyQuery(bool inverseResult, IStatement returnStatementToRemove, bool isAsync);
    public virtual IStatementsRange ConvertLoop(IStatement loop, GenerateFunctionalQueryParams params);
    public virtual string get_TestDump();
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ActionQueries.SumQuery : object {
    private ITypeOwner mySumVariable;
    private SumMethodType mySumMethodType;
    [CompilerGeneratedAttribute]
private ILocalVariable <InputVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [NotNullAttribute]
public ILocalVariable InputVariable { get; }
    public bool IsAsync { get; }
    private ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.InputVariables { get; }
    private ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.ExpressionsInLambdas { get; }
    public string TestDump { get; }
    public SumQuery(ITypeOwner sumVariable, ILocalVariable inputVariable, SumMethodType sumMethodType, bool isAsync);
    [CompilerGeneratedAttribute]
public sealed virtual ILocalVariable get_InputVariable();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAsync();
    public sealed virtual IStatementsRange ConvertLoop(IStatement loop, GenerateFunctionalQueryParams params);
    private sealed virtual override ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_InputVariables();
    private sealed virtual override ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_ExpressionsInLambdas();
    public sealed virtual bool CanIncludeWhere(LinqCache cache);
    public sealed virtual bool CanIncludeSelect(LinqCache cache);
    public sealed virtual string get_TestDump();
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ActionQueries.SumQueryMatcher : object {
    public sealed virtual ActionPartInfo Match(IList`1<IStatement> statements, ICollection`1<ILocalVariable> workingVariables, ILocalVariable indexVariable, IStatement loop, LinqCache cache, bool isAsync);
    private static Nullable`1<SumMethodType> SumMethodType(IType type);
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ActionQueries.ToDictionaryQuery : object {
    private ITypeOwner myDictionaryVar;
    private IExpression myKeySelector;
    private IExpression myValueSelector;
    private IType myKeyType;
    private IType myValueType;
    private IExpression myComparer;
    [CompilerGeneratedAttribute]
private ILocalVariable <InputVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [NotNullAttribute]
public ILocalVariable InputVariable { get; }
    public bool IsAsync { get; }
    private ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.InputVariables { get; }
    private ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.ExpressionsInLambdas { get; }
    public string TestDump { get; }
    public ToDictionaryQuery(ITypeOwner dictionaryVar, ILocalVariable inputVariable, IExpression keySelector, IExpression valueSelector, IType keyType, IType valueType, IExpression comparer, bool isAsync);
    [CompilerGeneratedAttribute]
public sealed virtual ILocalVariable get_InputVariable();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAsync();
    public sealed virtual IStatementsRange ConvertLoop(IStatement loop, GenerateFunctionalQueryParams params);
    private sealed virtual override ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_InputVariables();
    private sealed virtual override ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_ExpressionsInLambdas();
    public sealed virtual bool CanIncludeWhere(LinqCache cache);
    public sealed virtual bool CanIncludeSelect(LinqCache cache);
    public sealed virtual string get_TestDump();
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ActionQueries.ToDictionaryQueryMatcher : object {
    public sealed virtual ActionPartInfo Match(IList`1<IStatement> statements, ICollection`1<ILocalVariable> workingVariables, ILocalVariable indexVariable, IStatement loop, LinqCache cache, bool isAsync);
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ActionQueries.ToListQuery : object {
    private ITypeOwner myListVariable;
    private bool myForceNewList;
    [CompilerGeneratedAttribute]
private ILocalVariable <InputVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [NotNullAttribute]
public ILocalVariable InputVariable { get; }
    public bool IsAsync { get; }
    private ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.InputVariables { get; }
    public ICollection`1<IExpression> ExpressionsInLambdas { get; }
    public string TestDump { get; }
    public ToListQuery(ITypeOwner listVariable, ILocalVariable inputVariable, bool forceNewList, bool isAsync);
    [CompilerGeneratedAttribute]
public sealed virtual ILocalVariable get_InputVariable();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAsync();
    public sealed virtual IStatementsRange ConvertLoop(IStatement loop, GenerateFunctionalQueryParams params);
    private sealed virtual override ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_InputVariables();
    public sealed virtual ICollection`1<IExpression> get_ExpressionsInLambdas();
    public sealed virtual bool CanIncludeWhere(LinqCache cache);
    public sealed virtual bool CanIncludeSelect(LinqCache cache);
    public sealed virtual string get_TestDump();
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ActionQueries.ToListQueryMatcher : object {
    public sealed virtual ActionPartInfo Match(IList`1<IStatement> statements, ICollection`1<ILocalVariable> workingVariables, ILocalVariable indexVariable, IStatement loop, LinqCache cache, bool isAsync);
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ActionQueries.YieldReturnQuery : object {
    private ILocalVariable myVariable;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    public bool IsAsync { get; }
    public ILocalVariable InputVariable { get; }
    private ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.InputVariables { get; }
    public ICollection`1<IExpression> ExpressionsInLambdas { get; }
    public string TestDump { get; }
    private YieldReturnQuery(ILocalVariable variable, bool isAsync);
    public static YieldReturnQuery TryCreate(ILocalVariable variable, IStatement loop, bool isAsync, LinqCache cache);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAsync();
    public sealed virtual IStatementsRange ConvertLoop(IStatement loop, GenerateFunctionalQueryParams params);
    private static YieldReturnType CalcReturnType(IStatement loop, bool isAsync, LinqCache cache, IType& elementType);
    public sealed virtual ILocalVariable get_InputVariable();
    private sealed virtual override ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_InputVariables();
    public sealed virtual ICollection`1<IExpression> get_ExpressionsInLambdas();
    public sealed virtual bool CanIncludeWhere(LinqCache cache);
    public sealed virtual bool CanIncludeSelect(LinqCache cache);
    public sealed virtual string get_TestDump();
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ActionQueries.YieldReturnQueryMatcher : object {
    public sealed virtual ActionPartInfo Match(IList`1<IStatement> statements, ICollection`1<ILocalVariable> workingVariables, ILocalVariable indexVariable, IStatement loop, LinqCache cache, bool isAsync);
    private static ITreeNode GetContainingReturnOwnerOrTop(ITreeNode node, ILinqToolsLanguageHelper helper);
    private static bool ContainsYieldReturnOrBreakStatement(ITreeNode node, IStatement exceptLoop, ILinqToolsLanguageHelper helper);
}
public class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.CopyRequiredException : Exception {
    public static bool ForceCopy;
    private static CopyRequiredException();
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.DictionaryAdditiveResult : object {
    private IExpression myEnumerable;
    private ILocalVariable myInputVar;
    private IExpression myKeySelector;
    private IExpression myValueSelector;
    private IType myKeyType;
    private IType myValueType;
    private IExpression myComparer;
    private LinqCache myCache;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    public bool IsAsync { get; }
    public bool CanAnyAccessChangeValue { get; }
    public bool CanOverwriteDefaultValue { get; }
    public DictionaryAdditiveResult(IExpression enumerable, ILocalVariable inputVar, IExpression keySelector, IExpression valueSelector, IType keyType, IType valueType, IExpression comparer, LinqCache cache, bool isAsync);
    public static bool IsNewDictionaryAssigned(ITypeOwner dictionaryVar, IStatement loopStatement, LinqCache cache, IType& keyType, IType& valueType, IExpression& comparer);
    public sealed virtual bool IsDefaultVariableValue(IExpression value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAsync();
    public sealed virtual bool get_CanAnyAccessChangeValue();
    public sealed virtual bool get_CanOverwriteDefaultValue();
    public sealed virtual bool CanMergeWithAssignmentOrInitialization(IExpression value);
    public sealed virtual bool CanMoveDeclarationOrAssignment(IExpression initializerValue);
    public sealed virtual IStatement CreateSetValueStatement(ITypeOwner additiveVariable);
    public sealed virtual IStatement CreateAddValueStatement(ITypeOwner additiveVariable);
    public sealed virtual IStatement SetValueInDeclaration(ITypeOwnerDeclaration declaration);
    public sealed virtual IStatement AddValueInDeclaration(ITypeOwnerDeclaration declaration);
    public sealed virtual IStatement SetValueInAssignment(IStatement assignment, ITypeOwner targetVar, IExpression valueExpr);
    public sealed virtual IStatement AddValueInAssignment(IStatement assignment, ITypeOwner targetVar, IExpression valueExpr);
    private IExpression CreateDictionaryExpression();
}
public static class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ForLoopUtil : object {
    public static ForToForeachInfo CheckCanConvertForToForeach(IStatement forLoop);
    public static IStatement ConvertForToForeach(IStatement loop, ForToForeachInfo info, Boolean& newTempVarIntroduced);
    private static bool IsWithinAnonymousMethod(ITreeNode element, IStatement statement);
    public static bool PreCheckForLoop(IStatement forLoop, LinqCache cache, IExpression& collectionExpr, IType& collectionType, IType& elementType, ILocalVariable& indexVar, ICollection`1& elementAccesses);
    public static bool DeclareTempVarAndReplaceElementAccesses(IStatement forLoop, IType elementType, IEnumerable`1<IExpression> elementAccesses, LinqCache cache, ILocalVariable& tempVar, IStatementsRange& statementsRange, IEnumerable`1& replacedAccesses, Boolean& newTempVarIntroduced, bool applyCodeFormatter);
    private static bool CollectionCanBeModified(IExpression collectionExpr, IStatement forLoop);
    private static bool CollectionIsUsed(IExpression collectionExpr, IStatementsRange forLoopBody);
    private static bool CollectElementAccesses(ICollection`1<IExpression> collection, ITreeNode root, IExpression collectionExpr, ILocalVariable indexVar, IType elementType);
}
public static class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.GenerateCode : object {
    public static void ConvertLoopToQuery(IStatement loop, IEnumerable`1<ISequenceQuery> queries, IActionQuery actionQuery, CopyToPhysicalMap copyToPhysicalMap, LinqCache cache);
    public static bool CanConvertLoopToLoop(SequencePartInfo sequencePartInfo, ILocalVariable& workingVariable);
    public static void ConvertLoopToLoop(IStatement loop, IList`1<ISequenceQuery> queries, ILocalVariable iteratorVariable, IStatementsRange restStatements, CopyToPhysicalMap copyToPhysicalMap, LinqCache cache);
    private static void RenameConflictingVars(IExpression& expression, ILocalVariable workingVariable);
    private static IExpression GenerateEnumerableExpression(List`1<ISequenceQuery> queries, ILocalVariable outputVariable, IActionQuery actionQuery, ITreeNode context, CopyToPhysicalMap copyToPhysicalMap, LinqCache cache, WhereAndSelectToIncludeInfo& whereAndSelectToIncludeInfoOut, IType& elementType);
    private static IExpression GenerateExpressionQueryCode(IList`1<INonFunctionalQuery> queries, IActionQuery actionQuery, ITreeNode context, CopyToPhysicalMap copyToPhysicalMap, LinqCache cache, WhereAndSelectToIncludeInfo& whereAndSelectToIncludeInfo);
    private static IExpression GenerateExpressionQueryCode1(IList`1<INonFunctionalQuery> queries, IActionQuery actionQuery, ITreeNode context, CopyToPhysicalMap copyToPhysicalMap, LinqCache cache, Nullable`1& whereToIncludeIntoNextQuery);
    private static IExpression GenerateExpressionQueryCode2(IList`1<INonFunctionalQuery> queries, IActionQuery actionQuery, ITreeNode context, LinqCache cache, Nullable`1& whereToIncludeIntoNextQuery);
    private static string ShiftParams(string s, int shift);
    private static void ClearFakeResolveToWorkingVariables(ITreeNode element, ICollection`1<ILocalVariable> workingVariables);
    private static ILocalVariable CalcSingleInputVariable(WhereQuery whereQuery, ILocalVariable inputVariableGiven);
    private static int CalcExpressionComplexity(IExpression expression);
    private static void RemoveRedundantSelects(IList`1<ISequenceQuery> queries);
}
public class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.GenerateFunctionalQueryParams : ValueType {
    [CompilerGeneratedAttribute]
private IExpression <EnumerableExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private IType <ElementType>k__BackingField;
    [CompilerGeneratedAttribute]
private CopyToPhysicalMap <CopyToPhysicalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private LinqCache <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private IExpression <WhereExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalVariable <WhereVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private IExpression <SelectExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalVariable <SelectInputVariable>k__BackingField;
    public IExpression EnumerableExpression { get; }
    public IType ElementType { get; }
    public CopyToPhysicalMap CopyToPhysicalMap { get; }
    public LinqCache Cache { get; }
    public IExpression WhereExpression { get; private set; }
    public ILocalVariable WhereVariable { get; private set; }
    public IExpression SelectExpression { get; private set; }
    public ILocalVariable SelectInputVariable { get; private set; }
    public GenerateFunctionalQueryParams(IExpression enumerableExpression, IType elementType, CopyToPhysicalMap copyToPhysicalMap, LinqCache cache);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IExpression get_EnumerableExpression();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IType get_ElementType();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public CopyToPhysicalMap get_CopyToPhysicalMap();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public LinqCache get_Cache();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IExpression get_WhereExpression();
    [CompilerGeneratedAttribute]
private void set_WhereExpression(IExpression value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ILocalVariable get_WhereVariable();
    [CompilerGeneratedAttribute]
private void set_WhereVariable(ILocalVariable value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IExpression get_SelectExpression();
    [CompilerGeneratedAttribute]
private void set_SelectExpression(IExpression value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ILocalVariable get_SelectInputVariable();
    [CompilerGeneratedAttribute]
private void set_SelectInputVariable(ILocalVariable value);
    public void SetWhereExpression(IExpression expression, ILocalVariable variable);
    public void SetSelectExpression(IExpression expression, ILocalVariable inputVariable);
}
public interface JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IActionQuery {
    [CanBeNullAttribute]
public ILocalVariable InputVariable { get; }
    public abstract virtual IStatementsRange ConvertLoop(IStatement loop, GenerateFunctionalQueryParams params);
    public abstract virtual ILocalVariable get_InputVariable();
    public abstract virtual bool CanIncludeWhere(LinqCache cache);
    public abstract virtual bool CanIncludeSelect(LinqCache cache);
}
internal interface JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IActionQueryMatcher {
    public abstract virtual ActionPartInfo Match(IList`1<IStatement> statements, ICollection`1<ILocalVariable> workingVariables, ILocalVariable indexVariable, IStatement loop, LinqCache cache, bool isAsync);
}
public interface JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IAdditiveResult {
    public bool IsAsync { get; }
    public bool CanAnyAccessChangeValue { get; }
    public bool CanOverwriteDefaultValue { get; }
    public abstract virtual bool get_IsAsync();
    public abstract virtual bool IsDefaultVariableValue(IExpression value);
    public abstract virtual bool get_CanAnyAccessChangeValue();
    public abstract virtual bool get_CanOverwriteDefaultValue();
    public abstract virtual bool CanMergeWithAssignmentOrInitialization(IExpression value);
    public abstract virtual bool CanMoveDeclarationOrAssignment(IExpression value);
    public abstract virtual IStatement CreateSetValueStatement(ITypeOwner additiveVariable);
    public abstract virtual IStatement CreateAddValueStatement(ITypeOwner additiveVariable);
    public abstract virtual IStatement SetValueInDeclaration(ITypeOwnerDeclaration declaration);
    public abstract virtual IStatement AddValueInDeclaration(ITypeOwnerDeclaration declaration);
    public abstract virtual IStatement SetValueInAssignment(IStatement assignment, ITypeOwner targetVar, IExpression valueExpr);
    public abstract virtual IStatement AddValueInAssignment(IStatement assignment, ITypeOwner targetVar, IExpression valueExpr);
}
public interface JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IFunctionalQuery {
}
internal interface JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IFunctionalSequenceQuery {
    [NotNullAttribute]
public ILocalVariable InputVariable { get; }
    [NotNullAttribute]
public ILocalVariable OutputVariable { get; }
    public abstract virtual IExpression GenerateCode(GenerateFunctionalQueryParams params);
    public abstract virtual ILocalVariable get_InputVariable();
    public abstract virtual ILocalVariable get_OutputVariable();
}
internal interface JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.INonFunctionalQuery {
    public ICollection`1<ILocalVariable> OutputVariables { get; }
    public abstract virtual string GenerateCode(bool isLastInQueryExpression, Object[]& formatParams);
    public abstract virtual ICollection`1<ILocalVariable> get_OutputVariables();
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IntegerAdditiveResult : object {
    private IExpression myValue;
    private IType myVariableType;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    public bool IsAsync { get; }
    public bool CanAnyAccessChangeValue { get; }
    public bool CanOverwriteDefaultValue { get; }
    public IntegerAdditiveResult(IExpression value, IType variableType, bool isAsync);
    public sealed virtual bool IsDefaultVariableValue(IExpression value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAsync();
    public sealed virtual bool get_CanAnyAccessChangeValue();
    public sealed virtual bool get_CanOverwriteDefaultValue();
    public sealed virtual bool CanMergeWithAssignmentOrInitialization(IExpression value);
    public sealed virtual bool CanMoveDeclarationOrAssignment(IExpression value);
    public sealed virtual IStatement CreateSetValueStatement(ITypeOwner additiveVariable);
    public sealed virtual IStatement CreateAddValueStatement(ITypeOwner additiveVariable);
    public sealed virtual IStatement SetValueInDeclaration(ITypeOwnerDeclaration declaration);
    public sealed virtual IStatement AddValueInDeclaration(ITypeOwnerDeclaration declaration);
    public sealed virtual IStatement SetValueInAssignment(IStatement assignment, ITypeOwner targetVar, IExpression valueExpr);
    public sealed virtual IStatement AddValueInAssignment(IStatement assignment, ITypeOwner targetVar, IExpression valueExpr);
}
public interface JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery {
    public ICollection`1<ILocalVariable> InputVariables { get; }
    public ICollection`1<IExpression> ExpressionsInLambdas { get; }
    public string TestDump { get; }
    public bool IsAsync { get; }
    public abstract virtual ICollection`1<ILocalVariable> get_InputVariables();
    public abstract virtual ICollection`1<IExpression> get_ExpressionsInLambdas();
    public abstract virtual string get_TestDump();
    public abstract virtual bool get_IsAsync();
}
public interface JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ISequenceQuery {
    public bool AffectsIndex { get; }
    public abstract virtual bool get_AffectsIndex();
}
internal interface JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ISequenceQueryMatcher {
    public abstract virtual SequenceQueryMatchResult Match(IList`1<IStatement> statements, ICollection`1<ILocalVariable> workingVariables, ILocalVariable indexVariable, LinqCache cache, Action action, bool isAsync);
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ListAdditiveResult : object {
    private IExpression myEnumerableExpression;
    private IType myListType;
    private IType myListElementType;
    private bool myForceNewList;
    private LinqCache myCache;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    public bool IsAsync { get; }
    public bool CanAnyAccessChangeValue { get; }
    public bool CanOverwriteDefaultValue { get; }
    public ListAdditiveResult(IExpression enumerableExpression, IType listElementType, bool forceNewList, LinqCache cache, bool isAsync);
    public sealed virtual bool IsDefaultVariableValue(IExpression value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAsync();
    public sealed virtual bool get_CanAnyAccessChangeValue();
    public sealed virtual bool get_CanOverwriteDefaultValue();
    public sealed virtual bool CanMergeWithAssignmentOrInitialization(IExpression value);
    public sealed virtual bool CanMoveDeclarationOrAssignment(IExpression initializerValue);
    public sealed virtual IStatement CreateSetValueStatement(ITypeOwner additiveVariable);
    public sealed virtual IStatement CreateAddValueStatement(ITypeOwner additiveVariable);
    public sealed virtual IStatement SetValueInDeclaration(ITypeOwnerDeclaration declaration);
    public sealed virtual IStatement AddValueInDeclaration(ITypeOwnerDeclaration declaration);
    public sealed virtual IStatement SetValueInAssignment(IStatement assignment, ITypeOwner targetVar, IExpression valueExpr);
    public sealed virtual IStatement AddValueInAssignment(IStatement assignment, ITypeOwner targetVar, IExpression valueExpr);
    private IExpression CreateToListExpression();
}
internal static class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.MatchActionPart : object {
    private static IActionQueryMatcher[] ourMatchers;
    private static MatchActionPart();
    public static ActionPartInfo Execute(SequencePartInfo sequencePartInfo, IStatement loop, LinqCache cache);
    private static bool IsParameterUsedInLambda(IActionQuery query, IParameter parameter);
}
public static class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.MatchAndConvert : object {
    private static ISequenceQueryMatcher[] ourSequenceQueryMatchers;
    private static MatchAndConvert();
    public static bool Match(IStatement loop, Action action, SequencePartInfo& sequencePartInfo, ActionPartInfo& actionPartInfo, Boolean& useAnotherGetEnumeratorMethod);
    private static bool DoExecute(IStatement loop, IStatement loopCopy, CopyToPhysicalMap copyToPhysicalMap, Action action, LinqCache cache, SequencePartInfo& sequencePartInfo, ActionPartInfo& actionPartInfo, Boolean& useAnotherGetEnumeratorMethod);
    private static MatchResult Match(IStatement loop, CopyToPhysicalMap copyToPhysicalMap, LinqCache cache, Action action);
    private static MatchResult MatchForeach(IStatement loop, IStatementsRange body, ILocalVariable iteratorVar, IExpression collectionExpr, LinqCache cache, Action action, bool isAsync);
    private static MatchResult MatchFor(IStatement loop, CopyToPhysicalMap copyToPhysicalMap, LinqCache cache, Action action);
    private static MatchResult ExtractQueries(IStatementsRange statements, ILocalVariable workingVariable, ILocalVariable indexVariable, IExpression collectionExpr, IType collectionType, IType elementType, IStatement loop, LinqCache cache, Action action, bool isAsync);
    private static IStatementsRange SkipBlocks(IStatementsRange statementsRange);
    private static SequenceQueryMatchResult ExtractSequenceQuery(IStatementsRange statementsRange, ICollection`1<ILocalVariable> workingVariables, ILocalVariable indexVariable, LinqCache cache, Action action, bool isAsync);
    private static bool CanChangeScopeOfQueryExpressions(SequenceQueryMatchResult matchResult);
    private static bool CanUseExpressionsInClosure(SequenceQueryMatchResult matchResult);
}
internal static class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ResultVarUtil : object {
    public static IStatementsRange ConvertLoopWithResult(IStatement loop, ITypeOwner resultVariable, IExpression resultExpression);
    public static IStatementsRange ConvertLoopWithAdditiveResult(IStatement loop, ITypeOwner additiveVariable, IAdditiveResult additiveResult);
    private static bool MoveVariableDeclarationToLoopIfPossible(ILocalVariable& variable, bool canMove, IStatement loop);
    private static bool MoveVariableDeclarationOrAssignmentToLoopIfPossible(IStatement& declarationOrAssignment, ITypeOwner variable, bool canMove, IStatement loop);
    public static bool IsDefaultValueAssigned(ITypeOwner local, IStatement atStatement);
    public static ConstantValue GetConstantValueAssigned(ITypeOwner local, IStatement atStatement);
    public static IExpression GetValueAssigned(ITypeOwner local, IStatement atStatement, bool canAnyAccessChangeValue);
}
public class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.SequencePartInfo : object {
    public IList`1<ISequenceQuery> Queries;
    public ICollection`1<ILocalVariable> WorkingVariables;
    [CanBeNullAttribute]
public ILocalVariable IndexVariable;
    public IStatementsRange RestPart;
    public SequencePartInfo(IList`1<ISequenceQuery> queries, ICollection`1<ILocalVariable> workingVariables, ILocalVariable indexVariable, IStatementsRange restPart);
    public void TestDump(TextWriter writer);
    private static string GetStatementsText(IStatementsRange statementsRange);
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.SequenceQueries.CastQuery : object {
    [CompilerGeneratedAttribute]
private ILocalVariable <InputVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalVariable <OutputVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    public ILocalVariable InputVariable { get; }
    public ILocalVariable OutputVariable { get; }
    public bool IsAsync { get; }
    private bool JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ISequenceQuery.AffectsIndex { get; }
    private ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.InputVariables { get; }
    private ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.ExpressionsInLambdas { get; }
    private string JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.TestDump { get; }
    public CastQuery(ILocalVariable inputVariable, ILocalVariable outputVariable, bool isAsync);
    [CompilerGeneratedAttribute]
public sealed virtual ILocalVariable get_InputVariable();
    [CompilerGeneratedAttribute]
public sealed virtual ILocalVariable get_OutputVariable();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAsync();
    public sealed virtual IExpression GenerateCode(GenerateFunctionalQueryParams params);
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ISequenceQuery.get_AffectsIndex();
    private sealed virtual override ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_InputVariables();
    private sealed virtual override ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_ExpressionsInLambdas();
    private sealed virtual override string JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_TestDump();
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.SequenceQueries.DistinctQuery : object {
    private IStatement mySetVarDecl;
    private IExpression myComparer;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalVariable <InputVariable>k__BackingField;
    public bool IsAsync { get; }
    public ILocalVariable InputVariable { get; }
    public ILocalVariable OutputVariable { get; }
    private ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.InputVariables { get; }
    private ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.ExpressionsInLambdas { get; }
    public bool AffectsIndex { get; }
    public string TestDump { get; }
    public DistinctQuery(ILocalVariable workingVariable, IStatement setVarDecl, IExpression comparer, bool isAsync);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAsync();
    public sealed virtual IExpression GenerateCode(GenerateFunctionalQueryParams params);
    [CompilerGeneratedAttribute]
public sealed virtual ILocalVariable get_InputVariable();
    public sealed virtual ILocalVariable get_OutputVariable();
    private sealed virtual override ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_InputVariables();
    private sealed virtual override ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_ExpressionsInLambdas();
    public sealed virtual bool get_AffectsIndex();
    public sealed virtual string get_TestDump();
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.SequenceQueries.DistinctQueryMatcher : object {
    public sealed virtual SequenceQueryMatchResult Match(IList`1<IStatement> statements, ICollection`1<ILocalVariable> workingVariables, ILocalVariable indexVariable, LinqCache cache, Action action, bool isAsync);
    private static IStructuralMatchResult MatchPatterns(IList`1<IStatement> statements, IStatementsRange& continuationStatements);
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.SequenceQueries.FromQuery : object {
    [CompilerGeneratedAttribute]
private ILocalVariable <WorkingVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private IExpression <Enumerable>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ILocalVariable> <InputVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceExplicitVariableType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ILocalVariable> <OutputVariables>k__BackingField;
    public ILocalVariable WorkingVariable { get; }
    public IExpression Enumerable { get; }
    public ICollection`1<ILocalVariable> InputVariables { get; }
    public bool ForceExplicitVariableType { get; }
    public bool IsAsync { get; }
    public ICollection`1<IExpression> ExpressionsInLambdas { get; }
    public ICollection`1<ILocalVariable> OutputVariables { get; }
    public bool AffectsIndex { get; }
    public string TestDump { get; }
    public FromQuery(ILocalVariable workingVariable, IExpression enumerable, bool forceExplicitVariableType, bool isAsync);
    public FromQuery(ILocalVariable workingVariable, IExpression enumerable, IEnumerable`1<ILocalVariable> inputVariables, bool isAsync);
    [CompilerGeneratedAttribute]
public ILocalVariable get_WorkingVariable();
    [CompilerGeneratedAttribute]
public IExpression get_Enumerable();
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<ILocalVariable> get_InputVariables();
    [CompilerGeneratedAttribute]
public bool get_ForceExplicitVariableType();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAsync();
    public sealed virtual ICollection`1<IExpression> get_ExpressionsInLambdas();
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<ILocalVariable> get_OutputVariables();
    public sealed virtual string GenerateCode(bool isLastInQueryExpression, Object[]& formatParams);
    public bool NeedsExplicitVariableType();
    public sealed virtual bool get_AffectsIndex();
    public sealed virtual string get_TestDump();
}
internal interface JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.SequenceQueries.ISelectQuery {
    [NotNullAttribute]
public IExpression Expression { get; }
    [NotNullAttribute]
public ILocalVariable ResultVariable { get; }
    public abstract virtual IExpression get_Expression();
    public abstract virtual ILocalVariable get_ResultVariable();
}
internal interface JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.SequenceQueries.IWhereQuery {
    public IExpression Condition { get; }
    public bool HasAwaitInCondition { get; }
    public abstract virtual IExpression get_Condition();
    public abstract virtual bool get_HasAwaitInCondition();
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.SequenceQueries.LetQuery : object {
    private IExpression myExpression;
    private ILocalVariable myResultVariable;
    [CompilerGeneratedAttribute]
private ICollection`1<ILocalVariable> <InputVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ILocalVariable> <OutputVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    public ICollection`1<ILocalVariable> InputVariables { get; }
    private ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.ExpressionsInLambdas { get; }
    public ICollection`1<ILocalVariable> OutputVariables { get; }
    public bool IsAsync { get; }
    public bool AffectsIndex { get; }
    public string TestDump { get; }
    public LetQuery(IExpression expression, ILocalVariable resultVariable, IEnumerable`1<ILocalVariable> inputVariables, bool applyCodeFormatter, bool isAsync);
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<ILocalVariable> get_InputVariables();
    private sealed virtual override ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_ExpressionsInLambdas();
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<ILocalVariable> get_OutputVariables();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAsync();
    public sealed virtual string GenerateCode(bool isLastInQueryExpression, Object[]& formatParams);
    public sealed virtual bool get_AffectsIndex();
    public sealed virtual string get_TestDump();
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.SequenceQueries.ModifyWorkingVariableMatcher : object {
    public sealed virtual SequenceQueryMatchResult Match(IList`1<IStatement> statements, ICollection`1<ILocalVariable> workingVariables, ILocalVariable indexVariable, LinqCache cache, Action action, bool isAsync);
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.SequenceQueries.NestedForeachMatcher : object {
    public sealed virtual SequenceQueryMatchResult Match(IList`1<IStatement> statements, ICollection`1<ILocalVariable> workingVariables, ILocalVariable indexVariable, LinqCache cache, Action action, bool isAsync);
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.SequenceQueries.OfTypeQuery : object {
    [CompilerGeneratedAttribute]
private ILocalVariable <InputVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalVariable <OutputVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    public ILocalVariable InputVariable { get; }
    public ILocalVariable OutputVariable { get; }
    public bool IsAsync { get; }
    private ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.InputVariables { get; }
    private ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.ExpressionsInLambdas { get; }
    public bool AffectsIndex { get; }
    public string TestDump { get; }
    public OfTypeQuery(ILocalVariable inputVariable, ILocalVariable outputVariable, bool isAsync);
    [CompilerGeneratedAttribute]
public sealed virtual ILocalVariable get_InputVariable();
    [CompilerGeneratedAttribute]
public sealed virtual ILocalVariable get_OutputVariable();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAsync();
    public sealed virtual IExpression GenerateCode(GenerateFunctionalQueryParams params);
    private sealed virtual override ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_InputVariables();
    private sealed virtual override ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_ExpressionsInLambdas();
    public sealed virtual bool get_AffectsIndex();
    public sealed virtual string get_TestDump();
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.SequenceQueries.OfTypeQueryMatcher : object {
    public sealed virtual SequenceQueryMatchResult Match(IList`1<IStatement> statements, ICollection`1<ILocalVariable> workingVariables, ILocalVariable indexVariable, LinqCache cache, Action action, bool isAsync);
    private static void MarkCastsAndUsages(ITreeNode root, ILocalVariable originalLocal, IType castType, Key`1<IExpression> key);
    private static void ReplaceMarkedExpressions(ITreeNode root, IExpression newExpr, Key`1<IExpression> key);
    private static bool MatchPatterns(IList`1<IStatement> statements, IStructuralMatchResult& matchResult, IStatementsRange& continuationStatements);
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.SequenceQueries.SelectAwaitQuery : object {
    [CompilerGeneratedAttribute]
private IExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalVariable <ResultVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalVariable <InputVariable>k__BackingField;
    public bool IsAsync { get; }
    public IExpression Expression { get; }
    public ILocalVariable ResultVariable { get; }
    public ILocalVariable InputVariable { get; }
    public ILocalVariable OutputVariable { get; }
    private ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.InputVariables { get; }
    private ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.ExpressionsInLambdas { get; }
    public bool AffectsIndex { get; }
    public string TestDump { get; }
    public SelectAwaitQuery(IExpression expression, ILocalVariable resultVariable, ILocalVariable inputVariable);
    public sealed virtual bool get_IsAsync();
    [CompilerGeneratedAttribute]
public sealed virtual IExpression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual ILocalVariable get_ResultVariable();
    [CompilerGeneratedAttribute]
public sealed virtual ILocalVariable get_InputVariable();
    public sealed virtual ILocalVariable get_OutputVariable();
    private sealed virtual override ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_InputVariables();
    private sealed virtual override ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_ExpressionsInLambdas();
    public sealed virtual bool get_AffectsIndex();
    public sealed virtual IExpression GenerateCode(GenerateFunctionalQueryParams params);
    public sealed virtual string get_TestDump();
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.SequenceQueries.SelectOrLetQueryMatcher : object {
    public sealed virtual SequenceQueryMatchResult Match(IList`1<IStatement> statements, ICollection`1<ILocalVariable> workingVariables, ILocalVariable indexVariable, LinqCache cache, Action action, bool isAsync);
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.SequenceQueries.SelectQuery : object {
    [CompilerGeneratedAttribute]
private IExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalVariable <ResultVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    private JetReadOnlyList`1<ILocalVariable> myInputVariables;
    public IExpression Expression { get; }
    public ILocalVariable ResultVariable { get; }
    public bool IsAsync { get; }
    public ICollection`1<ILocalVariable> InputVariables { get; }
    private ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.ExpressionsInLambdas { get; }
    public ICollection`1<ILocalVariable> OutputVariables { get; }
    public bool AffectsIndex { get; }
    public string TestDump { get; }
    public SelectQuery(IExpression expression, ILocalVariable resultVariable, IEnumerable`1<ILocalVariable> inputVariables, bool applyCodeFormatter, bool isAsync);
    [CompilerGeneratedAttribute]
public sealed virtual IExpression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual ILocalVariable get_ResultVariable();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAsync();
    public sealed virtual string GenerateCode(bool isLastInQueryExpression, Object[]& formatParams);
    public sealed virtual ICollection`1<ILocalVariable> get_InputVariables();
    private sealed virtual override ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_ExpressionsInLambdas();
    public sealed virtual ICollection`1<ILocalVariable> get_OutputVariables();
    public sealed virtual bool get_AffectsIndex();
    public sealed virtual string get_TestDump();
    public bool IsRedundant();
    public CastQuery AsCast();
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.SequenceQueries.SelectWithIndexQuery : object {
    [CompilerGeneratedAttribute]
private IExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalVariable <ResultVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalVariable <InputVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [NotNullAttribute]
private ILocalVariable myIndexVariable;
    private bool myHasAwait;
    public IExpression Expression { get; }
    public ILocalVariable ResultVariable { get; }
    public ILocalVariable InputVariable { get; }
    public bool IsAsync { get; }
    public ILocalVariable OutputVariable { get; }
    private ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.InputVariables { get; }
    private ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.ExpressionsInLambdas { get; }
    public bool AffectsIndex { get; }
    public string TestDump { get; }
    public SelectWithIndexQuery(IExpression expression, ILocalVariable resultVariable, ILocalVariable inputVariable, ILocalVariable indexVariable, bool applyCodeFormatter, bool isAsync, bool hasAwait);
    [CompilerGeneratedAttribute]
public sealed virtual IExpression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual ILocalVariable get_ResultVariable();
    [CompilerGeneratedAttribute]
public sealed virtual ILocalVariable get_InputVariable();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAsync();
    public sealed virtual IExpression GenerateCode(GenerateFunctionalQueryParams params);
    public sealed virtual ILocalVariable get_OutputVariable();
    private sealed virtual override ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_InputVariables();
    private sealed virtual override ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_ExpressionsInLambdas();
    public sealed virtual bool get_AffectsIndex();
    public sealed virtual string get_TestDump();
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.SequenceQueries.TakeWhileQuery : object {
    [CompilerGeneratedAttribute]
private ILocalVariable <InputVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    private IExpression myCondition;
    public ILocalVariable InputVariable { get; }
    public bool IsAsync { get; }
    private ILocalVariable JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IFunctionalSequenceQuery.OutputVariable { get; }
    private ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.InputVariables { get; }
    private ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.ExpressionsInLambdas { get; }
    public bool AffectsIndex { get; }
    public string TestDump { get; }
    private TakeWhileQuery(IExpression condition, ILocalVariable inputVariable, bool isAsync);
    [CompilerGeneratedAttribute]
public sealed virtual ILocalVariable get_InputVariable();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAsync();
    private sealed virtual override ILocalVariable JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IFunctionalSequenceQuery.get_OutputVariable();
    [CanBeNullAttribute]
public static TakeWhileQuery BuildInverse(IExpression inverseCondition, ILocalVariable inputVariable, bool applyCodeFormatter, bool isAsync);
    public sealed virtual IExpression GenerateCode(GenerateFunctionalQueryParams params);
    private sealed virtual override ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_InputVariables();
    private sealed virtual override ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_ExpressionsInLambdas();
    public sealed virtual bool get_AffectsIndex();
    public sealed virtual string get_TestDump();
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.SequenceQueries.TakeWhileQueryMatcher : object {
    public sealed virtual SequenceQueryMatchResult Match(IList`1<IStatement> statements, ICollection`1<ILocalVariable> workingVariables, ILocalVariable indexVariable, LinqCache cache, Action action, bool isAsync);
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.SequenceQueries.TakeWhileWithIndexQuery : object {
    [CompilerGeneratedAttribute]
private ILocalVariable <InputVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    private ILocalVariable myIndexVariable;
    private IExpression myCondition;
    public ILocalVariable InputVariable { get; }
    public bool IsAsync { get; }
    private ILocalVariable JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IFunctionalSequenceQuery.OutputVariable { get; }
    private ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.InputVariables { get; }
    private ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.ExpressionsInLambdas { get; }
    public bool AffectsIndex { get; }
    public string TestDump { get; }
    private TakeWhileWithIndexQuery(IExpression condition, ILocalVariable inputVariable, ILocalVariable indexVariable, bool isAsync);
    [CompilerGeneratedAttribute]
public sealed virtual ILocalVariable get_InputVariable();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAsync();
    private sealed virtual override ILocalVariable JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IFunctionalSequenceQuery.get_OutputVariable();
    [CanBeNullAttribute]
public static TakeWhileWithIndexQuery BuildInverse(IExpression inverseCondition, ILocalVariable inputVariable, ILocalVariable indexVariable, bool applyCodeFormatter, bool isAsync);
    public sealed virtual IExpression GenerateCode(GenerateFunctionalQueryParams params);
    private sealed virtual override ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_InputVariables();
    private sealed virtual override ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_ExpressionsInLambdas();
    public sealed virtual bool get_AffectsIndex();
    public sealed virtual string get_TestDump();
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.SequenceQueries.WhereAwaitQuery : object {
    [CompilerGeneratedAttribute]
private IExpression <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalVariable <InputVariable>k__BackingField;
    public IExpression Condition { get; }
    public bool IsAsync { get; }
    public bool HasAwaitInCondition { get; }
    public ILocalVariable InputVariable { get; }
    public ILocalVariable OutputVariable { get; }
    private ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.InputVariables { get; }
    private ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.ExpressionsInLambdas { get; }
    public bool AffectsIndex { get; }
    public string TestDump { get; }
    public WhereAwaitQuery(IExpression condition, ILocalVariable inputVariable);
    [CanBeNullAttribute]
public static WhereAwaitQuery BuildInverse(IExpression inverseCondition, ILocalVariable inputVariable, Action action);
    [CompilerGeneratedAttribute]
public sealed virtual IExpression get_Condition();
    public sealed virtual bool get_IsAsync();
    public sealed virtual bool get_HasAwaitInCondition();
    [CompilerGeneratedAttribute]
public sealed virtual ILocalVariable get_InputVariable();
    public sealed virtual ILocalVariable get_OutputVariable();
    private sealed virtual override ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_InputVariables();
    private sealed virtual override ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_ExpressionsInLambdas();
    public sealed virtual bool get_AffectsIndex();
    public sealed virtual IExpression GenerateCode(GenerateFunctionalQueryParams params);
    public sealed virtual string get_TestDump();
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.SequenceQueries.WhereQuery : object {
    [NotNullAttribute]
private JetReadOnlyList`1<ILocalVariable> myInputVariables;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private IExpression <Condition>k__BackingField;
    public bool IsAsync { get; }
    public IExpression Condition { get; }
    public bool HasAwaitInCondition { get; }
    public ICollection`1<ILocalVariable> InputVariables { get; }
    private ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.ExpressionsInLambdas { get; }
    public ICollection`1<ILocalVariable> OutputVariables { get; }
    public bool AffectsIndex { get; }
    public string TestDump { get; }
    public WhereQuery(IExpression condition, IEnumerable`1<ILocalVariable> inputVariables, bool isAsync);
    [CanBeNullAttribute]
public static WhereQuery BuildInverse(IExpression inverseCondition, IEnumerable`1<ILocalVariable> inputVariables, Action action, bool isAsync);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAsync();
    [CompilerGeneratedAttribute]
public sealed virtual IExpression get_Condition();
    public sealed virtual bool get_HasAwaitInCondition();
    public sealed virtual string GenerateCode(bool isLastInQueryExpression, Object[]& formatParams);
    public sealed virtual ICollection`1<ILocalVariable> get_InputVariables();
    private sealed virtual override ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_ExpressionsInLambdas();
    public sealed virtual ICollection`1<ILocalVariable> get_OutputVariables();
    public sealed virtual bool get_AffectsIndex();
    public sealed virtual string get_TestDump();
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.SequenceQueries.WhereQueryMatcher : object {
    public sealed virtual SequenceQueryMatchResult Match(IList`1<IStatement> statements, ICollection`1<ILocalVariable> workingVariables, ILocalVariable indexVariable, LinqCache cache, Action action, bool isAsync);
    private static bool AddWhereQuery(ILinqToolsLanguageHelper helper, WhereQueryMatchResult originalMatchResult, List`1<ISequenceQuery> queries, Boolean& ofTypeFound);
    private static WhereQueryMatchResult MatchOneWhere(IList`1<IStatement> statements, ICollection`1<ILocalVariable> workingVariables, ILocalVariable indexVariable, LinqCache cache, Action action, bool isAsync);
    private static IWhereQuery BuildWhereQuery(ILinqToolsLanguageHelper helper, IStructuralMatchResult matchResult, IEnumerable`1<IStatement> statements, ILocalVariable indexVariable, ICollection`1& workingVariables, bool inverseCondition, Action action, bool isAsync);
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.SequenceQueries.WhereWithIndexQuery : object {
    [CompilerGeneratedAttribute]
private IExpression <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalVariable <InputVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalVariable <IndexVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasAwaitInCondition>k__BackingField;
    public IExpression Condition { get; }
    public ILocalVariable InputVariable { get; }
    public ILocalVariable IndexVariable { get; }
    public bool IsAsync { get; }
    public bool HasAwaitInCondition { get; }
    public ILocalVariable OutputVariable { get; }
    private ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.InputVariables { get; }
    private ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.ExpressionsInLambdas { get; }
    public bool AffectsIndex { get; }
    public string TestDump { get; }
    public WhereWithIndexQuery(IExpression condition, ILocalVariable inputVariable, ILocalVariable indexVariable, bool isAsync, bool hasAwaitInCondition);
    [CanBeNullAttribute]
public static WhereWithIndexQuery BuildInverse(IExpression inverseCondition, ILocalVariable inputVariable, ILocalVariable indexVariable, Action action, bool isAsync, bool hasAwaitInCondition);
    [CompilerGeneratedAttribute]
public sealed virtual IExpression get_Condition();
    [CompilerGeneratedAttribute]
public sealed virtual ILocalVariable get_InputVariable();
    [CompilerGeneratedAttribute]
public ILocalVariable get_IndexVariable();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAsync();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasAwaitInCondition();
    public sealed virtual IExpression GenerateCode(GenerateFunctionalQueryParams params);
    public sealed virtual ILocalVariable get_OutputVariable();
    private sealed virtual override ICollection`1<ILocalVariable> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_InputVariables();
    private sealed virtual override ICollection`1<IExpression> JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.IQuery.get_ExpressionsInLambdas();
    public sealed virtual bool get_AffectsIndex();
    public sealed virtual string get_TestDump();
}
internal class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.SequenceQueryMatchResult : object {
    public IList`1<ISequenceQuery> Queries;
    public IStatementsRange RestStatements;
    public ICollection`1<ILocalVariable> WorkingVariables;
    public SequenceQueryMatchResult(ISequenceQuery query, IStatementsRange restStatements, ICollection`1<ILocalVariable> workingVariables);
    public SequenceQueryMatchResult(IList`1<ISequenceQuery> queries, IStatementsRange restStatements, ICollection`1<ILocalVariable> workingVariables);
}
internal static class JetBrains.ReSharper.Feature.Services.LinqTools.ToLinq.ToLinqUtil : object {
    [CanBeNullAttribute]
public static ISelectQuery CreateIntermediateSelect(IExpression valueExpr, ICollection`1<ILocalVariable> workingVariables, ILocalVariable indexVariable, bool isAsync);
    public static IExpression GenerateCastIfNeeded(IExpression enumerableExpression, ILocalVariable inputVar, IType requiredElementType, LinqCache cache, bool isAsync);
    public static void ChangeVariableTypeToMatchInitializer(ITypeOwnerDeclaration declaration, ILocalVariable declaredVariable, IExpression initializer, bool applyCodeFormatter);
}
public class JetBrains.ReSharper.Feature.Services.LinqTools.TreeNodeMarker`1 : TreeNodeMarker {
    public TreeNodeMarker`1(TElement element);
    public TElement FindMarkedNode(ITreeNode root);
    public IEnumerable`1<TElement> FindMarkedNodes(ITreeNode root);
    [NotNullAttribute]
public TElement Get(ITreeNode root);
    public void Dispose(ITreeNode root);
    [NotNullAttribute]
public TElement GetAndDispose(ITreeNode root);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Builder.CollectedFields : object {
    private DocumentRange myDocumentRange;
    private ICollection`1<TemplateField> myFields;
    public DocumentRange DocumentRange { get; }
    public ICollection`1<TemplateField> Fields { get; }
    public CollectedFields(DocumentRange documentRange);
    public DocumentRange get_DocumentRange();
    public ICollection`1<TemplateField> get_Fields();
    public void AddField(TemplateField field);
    public string SuggestFieldName(string baseName);
    private bool TryName(string name);
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Builder.IFieldEvaluatorFactory")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Builder.FieldEvaluatorFactoryAttribute : SolutionComponentAttribute {
    public FieldEvaluatorFactoryAttribute(Instantiation instantiation);
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Builder.IFieldEvaluator {
    public OptionalField[] Fields { get; }
    public abstract virtual OptionalField[] get_Fields();
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Builder.IFieldEvaluatorFactory {
    public abstract virtual IFieldEvaluator CreateFieldEvaluator(CollectedFields context);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Builder.TemplateBuilderResult : object {
    private ICollection`1<ITemplateContext> myContextCandidates;
    private IList`1<OptionalField> myFields;
    private Template myTemplate;
    public Template Template { get; }
    public IList`1<OptionalField> Fields { get; }
    public ICollection`1<ITemplateContext> ContextCandidates { get; }
    public TemplateBuilderResult(Template template, IList`1<OptionalField> fields, ICollection`1<ITemplateContext> contextCandidates);
    public Template get_Template();
    public IList`1<OptionalField> get_Fields();
    public ICollection`1<ITemplateContext> get_ContextCandidates();
    public string Apply(IList`1<OptionalField> optionalFields);
}
public abstract class JetBrains.ReSharper.Feature.Services.LiveTemplates.Builder.TextChangeBase : object {
    protected TextRange myRange;
    protected TextChangeBase(TextRange range);
    protected abstract virtual string GetNewText(string oldText);
    public void Map(TextRange range);
    private void Move(int offset);
    [NotNullAttribute]
public static string Apply(string text, IList`1<TextChangeBase> changes);
    [NotNullAttribute]
public static string Apply(string text, IList`1<TextChangeBase> changesToApply, IList`1<TextChangeBase> changesToMap);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.ErrorNodeFinder : object {
    private ITreeNode myStopper;
    private IErrorElement myError;
    private ITokenNode myWhitespaceNode;
    private bool myWhitespaceIsSet;
    public IErrorElement Error { get; }
    public ErrorNodeFinder(ITreeNode stopper);
    public IErrorElement get_Error();
    public TreeTextRange GetBigErrorRange();
    public bool FindLastError(ITreeNode node);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.FileContextAcceptor : ScopedTemplateAcceptorBase {
    public FileContextAcceptor(IProjectFile projectFile);
    public virtual string ToString();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.FileNameScopeProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.FileNameScopeProvider/<ProvideScopePoints>d__0")]
public sealed virtual IEnumerable`1<ITemplateScopePoint> ProvideScopePoints(TemplateAcceptanceContext context);
    public sealed virtual ITemplateScopePoint CreateScope(Guid scopeGuid, string typeName, IEnumerable`1<Pair`2<string, string>> customProperties);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.FileNameTemplateContext : TemplateContext {
    private string myFileMask;
    public IEnumerable`1<ITemplateScopePoint> ScopePoints { get; }
    public FileNameTemplateContext(string fileMask);
    public virtual IEnumerable`1<ITemplateScopePoint> get_ScopePoints();
    private IList`1<ITemplateScopePoint> CalcScopePoints();
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.InFileWithMask : InAnyFile {
    private static Guid DefaultUID;
    internal static string AttrMask;
    [CompilerGeneratedAttribute]
private string <FileMask>k__BackingField;
    public string PresentableShortName { get; }
    public string FileMask { get; }
    public InFileWithMask(string fileMask);
    private static InFileWithMask();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.InFileWithMask/<EnumerateCustomProperties>d__6")]
public virtual IEnumerable`1<Pair`2<string, string>> EnumerateCustomProperties();
    public virtual bool IsSubsetOf(ITemplateScopePoint other);
    [CompilerGeneratedAttribute]
public string get_FileMask();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.InProjectFile : InFileWithMask {
    private static Guid DefaultUID;
    private IProjectFile myProjectFile;
    public InProjectFile(IProjectFile projectFile);
    private static InProjectFile();
    public virtual Guid GetDefaultUID();
    public virtual bool IsSubsetOf(ITemplateScopePoint other);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool <IsSubsetOf>b__4_1(VirtualFileSystemPath file);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.InProjectReferences : InProjectWithReference {
    private static Guid ourDefaultUid;
    public InProjectReferences(ICollection`1<string> refSet);
    private static InProjectReferences();
    public virtual Guid GetDefaultUID();
    public virtual bool IsSubsetOf(ITemplateScopePoint other);
    [CompilerGeneratedAttribute]
private bool <IsSubsetOf>b__3_0(string r);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.InProjectWithReference : InAnyFile {
    public ICollection`1<string> RefSet;
    private static Guid ourDefaultUid;
    internal static string AttrMask;
    public string PresentableShortName { get; }
    public InProjectWithReference(string refMask);
    protected InProjectWithReference(ICollection`1<string> refSet);
    private static InProjectWithReference();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.InProjectWithReference/<EnumerateCustomProperties>d__8")]
public virtual IEnumerable`1<Pair`2<string, string>> EnumerateCustomProperties();
    public virtual bool IsSubsetOf(ITemplateScopePoint other);
    public virtual string ToString();
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.ITemplateContext {
    public IEnumerable`1<ITemplateScopePoint> ScopePoints { get; }
    public abstract virtual IEnumerable`1<ITemplateScopePoint> get_ScopePoints();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.ProjectReferenceScopeProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.ProjectReferenceScopeProvider/<ProvideScopePoints>d__0")]
public sealed virtual IEnumerable`1<ITemplateScopePoint> ProvideScopePoints(TemplateAcceptanceContext context);
    private static string CreateRefString(IEnumerable`1<string> refSet);
    public ITemplateScopePoint ReadFromXml(XmlElement scopeElement);
    public sealed virtual ITemplateScopePoint CreateScope(Guid scopeGuid, string typeName, IEnumerable`1<Pair`2<string, string>> customProperties);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.TemplateAcceptanceContext : UserDataHolder {
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectFile <ProjectFile>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectFolder <ProjectFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiSourceFile <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentOffset <CaretOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <SelectionRange>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressHardOperations>k__BackingField;
    [NotNullAttribute]
public ISolution Solution { get; }
    [CanBeNullAttribute]
public VirtualFileSystemPath Location { get; }
    [CanBeNullAttribute]
public IProjectFile ProjectFile { get; }
    [CanBeNullAttribute]
public IProjectFolder ProjectFolder { get; }
    [CanBeNullAttribute]
public IPsiSourceFile SourceFile { get; }
    public DocumentOffset CaretOffset { get; }
    public DocumentRange SelectionRange { get; }
    public bool SuppressHardOperations { get; }
    public TemplateAcceptanceContext(IProjectFile projectFile);
    public TemplateAcceptanceContext(ProjectFolderWithLocation projectFolder);
    public TemplateAcceptanceContext(ISolution solution, DocumentOffset caretOffset, DocumentRange selectionRange);
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_Location();
    [CompilerGeneratedAttribute]
public IProjectFile get_ProjectFile();
    [CompilerGeneratedAttribute]
public IProjectFolder get_ProjectFolder();
    [CompilerGeneratedAttribute]
public IPsiSourceFile get_SourceFile();
    [CompilerGeneratedAttribute]
public DocumentOffset get_CaretOffset();
    [CompilerGeneratedAttribute]
public DocumentRange get_SelectionRange();
    [CompilerGeneratedAttribute]
public bool get_SuppressHardOperations();
    [CanBeNullAttribute]
[PureAttribute]
public IProject GetProject();
    [CanBeNullAttribute]
[PureAttribute]
public IProjectFolder GetProjectFolder();
}
public abstract class JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.TemplateContext : object {
    public IEnumerable`1<ITemplateScopePoint> ScopePoints { get; }
    public abstract virtual IEnumerable`1<ITemplateScopePoint> get_ScopePoints();
}
[ActionAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "DumpNonlocalizedTemplates")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.DumpNonlocalizedTemplatesAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private static void CheckAndDumpValue(string value, TemplatesLocalizationManager localizationManager, StreamWriter writer);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.CustomLocationAutomation : SectionLocationAutomationBase {
    private ITemplateSectionAutomation myParentSection;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Folder>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <File>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Explanation>k__BackingField;
    public IProperty`1<string> Project { get; }
    public IProperty`1<string> Folder { get; }
    public IProperty`1<string> File { get; }
    public IProperty`1<string> Explanation { get; }
    public CustomLocationAutomation(Lifetime lifetime, string configString, ITemplateSectionAutomation parentSection);
    private void SomethingUpdated();
    private void UpdateExplanation();
    public virtual void InitializeDefaultValues();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_Project();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_Folder();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_File();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_Explanation();
    public virtual string GetSerializedConfig();
    private RelativeConfig GetCurrentConfig();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.CustomLocationSelector : object {
    public string Id { get; }
    public string Name { get; }
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.CustomLocationSelector/<SuggestFilenames>d__1")]
public sealed virtual IEnumerable`1<SuggestedSectionFile> SuggestFilenames(IEnumerable`1<ITemplateScopePoint> mainScopePoints, ProjectFolderWithLocation mainFolder, IProjectFile mainFile, string configString);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.CustomLocationSelector/<SuggestSimpleName>d__2")]
public sealed virtual IEnumerable`1<string> SuggestSimpleName(string filename, string configString);
    private static string ResolvePlaceholders(IProjectFile mainFile, string source);
    public static string ResolvePlaceholders(string source, VirtualFileSystemPath mainPath, string projectName, string relPath);
    private static string ResolvePlaceholders(string source, string name, string fullname, string projectName, string relPath);
    public sealed virtual ISectionLocationAutomation CreateAutomation(Lifetime lifetime, string selectorConfig, ITemplateSectionAutomation parentSection);
    public sealed virtual string get_Id();
    public sealed virtual string get_Name();
}
[ActionAttribute("Template", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FileTemplateActionText")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.DefaultHandler : object {
    private int myRelativeIndex;
    public DefaultHandler(int relativeIndex);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private Template GetTemplate(IDataContext context, String& description);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
public static class JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.FileTemplateProperties : object {
    public static Property`1<string> Extension;
    public static Property`1<string> FileName;
    public static Property`1<string> Category;
    public static Property`1<bool> ValidateFileName;
    private static FileTemplateProperties();
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.FileTemplatesManager : object {
    public static Key FileCreatedFromTemplateKey;
    private Lifetime myLifetime;
    private IActionManager myActionManager;
    private Lazy`1<IEnumerable`1<QuickListSupport>> myQuickListSupports;
    private IEnumerable`1<IFileTemplatesSupport> myTemplateSupporters;
    private ISettingsStore mySettingsStore;
    private StoredTemplatesProvider myStoredTemplatesProvider;
    private ChangeManager myChangeManager;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ISectionFilenameSelector> <FileNameSelectors>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <FileTemplateInProgress>k__BackingField;
    public static DataConstant`1<ICollection`1<Template>> First20FileTemplatesForProjectFolderDataConstant;
    private SequentialLifetimes myCachedProjectFolderSequence;
    private Tuple`2<ProjectFolderWithLocation, ICollection`1<Template>> myLastActionGroupUpdate;
    private object myLastActionGroupUpdateLock;
    public static FileTemplatesManager Instance { get; }
    public IEnumerable`1<IFileTemplatesSupport> FileTemplatesSupports { get; }
    public IEnumerable`1<ISectionFilenameSelector> FileNameSelectors { get; protected set; }
    public IEnumerable`1<QuickListSupport> QuickListSupports { get; }
    public IProperty`1<bool> FileTemplateInProgress { get; }
    public FileTemplatesManager(Lifetime lifetime, IActionManager actionManager, IParallelImmutableList`1<IScopeCategoryUIProvider> scopeCategoryUIProviders, IEnumerable`1<IFileTemplatesSupport> fileTemplateSupporters, ISettingsStore settingsStore, StoredTemplatesProvider storedTemplatesProvider, ChangeManager changeManager);
    private static FileTemplatesManager();
    public static FileTemplatesManager get_Instance();
    public IEnumerable`1<IFileTemplatesSupport> get_FileTemplatesSupports();
    [CompilerGeneratedAttribute]
public IEnumerable`1<ISectionFilenameSelector> get_FileNameSelectors();
    [CompilerGeneratedAttribute]
protected void set_FileNameSelectors(IEnumerable`1<ISectionFilenameSelector> value);
    public IEnumerable`1<QuickListSupport> get_QuickListSupports();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_FileTemplateInProgress();
    private void ResetLastActionGroupCache();
    public ICollection`1<Template> GetAllFileTemplatess();
    public ICollection`1<Template> GetFileTemplatesForActions(IDataContext ctx);
    [NotNullAttribute]
[ItemCanBeNullAttribute]
public virtual Task`1<IProjectFile> CreateFileFromTemplateAsync(string fileName, ProjectFolderWithLocation[] targetFolder, Template template, TargetFrameworkId targetFrameworkId, FileCreationParameters parameters, IFileCreationContext context, Action`1<IHotspotSession> init, JetHashSet`1<Guid> sectionsToSkip);
    public TemplateAcceptanceContext CreateAcceptanceContext(IDataContext dataContext);
    public Task`1<IProjectFile> CreateFileFromTemplateAsync(string fileName, ProjectFolderWithLocation targetFolder, Template template, TargetFrameworkId targetFrameworkId, FileCreationParameters parameters, IFileCreationContext context, Action`1<IHotspotSession> init, JetHashSet`1<Guid> sectionsToSkip);
}
public static class JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.FileTemplateUtil : object {
    public static DataConstant`1<IFileCreationContext> PROJECT_MODEL_FILTER_ELEMENT;
    public static DataConstant`1<ProjectFolderWithLocation[]> UNIQUE_FOLDERS_IN_CONTAINER;
    private static FileTemplateUtil();
    public static bool IsAvailable(IDataContext context, Template template);
    public static bool IsAvailableForProjectFolder(Template template, ProjectFolderWithLocation projectFolder);
    public static bool CanCreateFileFromTemplate(IDataContext context);
    [NotNullAttribute]
public static ProjectFolderWithLocation[] GetProjectFoldersFromContext(IDataContext context);
    private static ProjectFolderWithLocation[] GetProjectFolderWithLocationsImpl(IDataContext context);
    [CanBeNullAttribute]
public static ProjectFolderWithLocation TryUseFolderFromNormalProjectInsteadOfShared(ProjectFolderWithLocation folderWithLocation);
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.ISectionFilenameSelector {
    public string Id { get; }
    public string Name { get; }
    public abstract virtual IEnumerable`1<SuggestedSectionFile> SuggestFilenames(IEnumerable`1<ITemplateScopePoint> mainScopePoints, ProjectFolderWithLocation mainFolder, IProjectFile mainFile, string config);
    public abstract virtual IEnumerable`1<string> SuggestSimpleName(string filename, string config);
    public abstract virtual ISectionLocationAutomation CreateAutomation(Lifetime lifetime, string selectorConfig, ITemplateSectionAutomation parentSection);
    public abstract virtual string get_Id();
    public abstract virtual string get_Name();
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.ISectionLocationAutomation {
    public SimpleSignal Changed { get; }
    public abstract virtual SimpleSignal get_Changed();
    public abstract virtual string GetSerializedConfig();
    public abstract virtual void InitializeDefaultValues();
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.ITemplateSectionAutomation {
    public IProperty`1<string> MainFilename { get; }
    public abstract virtual IProperty`1<string> get_MainFilename();
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.ProjectFolderWithLocation : object {
    [CompilerGeneratedAttribute]
private IProjectFolder <Folder>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectFolder <ContextFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <Location>k__BackingField;
    [CanBeNullAttribute]
public IProjectFolder Folder { get; }
    [CanBeNullAttribute]
public IProjectFolder ContextFolder { get; }
    [NotNullAttribute]
public ISolution Solution { get; }
    [NotNullAttribute]
public VirtualFileSystemPath Location { get; }
    public ProjectFolderWithLocation(IProjectFolder folder);
    public ProjectFolderWithLocation(IProjectFolder folder, VirtualFileSystemPath location, ISolution solution, IProjectFolder contextFolder);
    [CompilerGeneratedAttribute]
public IProjectFolder get_Folder();
    [CompilerGeneratedAttribute]
public IProjectFolder get_ContextFolder();
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_Location();
    [NotNullAttribute]
public Func`3<Lifetime, DataContexts, IDataContext> ToDataContext();
    protected bool Equals(ProjectFolderWithLocation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.SectionLocationAutomationBase : AAutomation {
    [CompilerGeneratedAttribute]
private SimpleSignal <Changed>k__BackingField;
    public SimpleSignal Changed { get; }
    public SectionLocationAutomationBase(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public sealed virtual SimpleSignal get_Changed();
    public virtual string GetSerializedConfig();
    public virtual void InitializeDefaultValues();
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.SuggestedSectionFile : ValueType {
    public ProjectFolderWithLocation ProjectFolder;
    public string Filename;
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Formatting.ITemplateFormatter {
    public string EndMarker { get; }
    public bool SupportsShorteningQualifiedReferences { get; }
    public abstract virtual string get_EndMarker();
    public abstract virtual bool get_SupportsShorteningQualifiedReferences();
    public abstract virtual void BeforeFormatting(DocumentRange documentRange, ISolution solution);
    public abstract virtual void ShortenQualifiedReferences(DocumentRange documentRange, ISolution solution);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.BeforeHotspotUpdateEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Lifetime <UpdateLifetime>k__BackingField;
    public Lifetime UpdateLifetime { get; }
    public BeforeHotspotUpdateEventArgs(Lifetime updateLifetime);
    [CompilerGeneratedAttribute]
public Lifetime get_UpdateLifetime();
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.CurrentHotspotChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Hotspot <OldHotspot>k__BackingField;
    [CanBeNullAttribute]
public Hotspot OldHotspot { get; }
    public CurrentHotspotChangedEventArgs(Hotspot oldHotspot);
    [CompilerGeneratedAttribute]
public Hotspot get_OldHotspot();
}
[ActionAttribute("LiveTemplates.Accept", "")]
internal class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.DummyActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.Hotspot : UserDataHolder {
    [CanBeNullAttribute]
private IExpressionAdapter myExpression;
    [NotNullAttribute]
private List`1<Func`4<Hotspot, DocumentRange, string, string>> myTextProcessors;
    [NotNullAttribute]
private HotspotSessionBase myHotspotSession;
    [NotNullAttribute]
private List`1<IRangeMarker> myRangeMarkers;
    private int myInitialRange;
    private bool myEvaluated;
    [CompilerGeneratedAttribute]
private bool <KeepExistingText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipTextProcessor>k__BackingField;
    private bool IsUpdating { get; private set; }
    [CanBeNullAttribute]
public IRangeMarker DriverRangeMarker { get; }
    [NotNullAttribute]
public ICollection`1<IRangeMarker> PassiveRangeMarkers { get; }
    public bool KeepExistingText { get; }
    public string Name { get; }
    [CanBeNullAttribute]
public IHotspotExpression Expression { get; }
    [CanBeNullAttribute]
public IRangeMarker RangeMarker { get; }
    public string CurrentValue { get; }
    public bool IsStopAt { get; }
    [NotNullAttribute]
public IReadOnlyList`1<IRangeMarker> RangeMarkers { get; }
    [NotNullAttribute]
public IHotspotSession HotspotSession { get; }
    public bool IsExpandAndSkip { get; }
    public bool SkipTextProcessor { get; public set; }
    public Hotspot(HotspotInfo hotspotInfo, HotspotSessionBase hotspotSession);
    private bool get_IsUpdating();
    private void set_IsUpdating(bool value);
    public void AddTextProcessor(Func`4<Hotspot, DocumentRange, string, string> processor);
    private string ProcessText(DocumentRange range, string text);
    private void AddRange(DocumentRange range);
    public void Freeze();
    public void Unfreeze();
    public IRangeMarker get_DriverRangeMarker();
    public ICollection`1<IRangeMarker> get_PassiveRangeMarkers();
    [CompilerGeneratedAttribute]
public bool get_KeepExistingText();
    [CompilerGeneratedAttribute]
public string get_Name();
    public IHotspotExpression get_Expression();
    public IRangeMarker get_RangeMarker();
    public string get_CurrentValue();
    public bool get_IsStopAt();
    public IReadOnlyList`1<IRangeMarker> get_RangeMarkers();
    public IHotspotSession get_HotspotSession();
    public bool get_IsExpandAndSkip();
    [CompilerGeneratedAttribute]
public bool get_SkipTextProcessor();
    [CompilerGeneratedAttribute]
public void set_SkipTextProcessor(bool value);
    private void Expand();
    [CanBeNullAttribute]
public HotspotItems Evaluate();
    private static void InsertLookupItemValue(ILookupItem lookupItem, IRangeMarker rangeMarker);
    private void EvaluateToFieldName();
    public bool QuickEvaluate();
    [PureAttribute]
public DocumentRange GetExpressionRange();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.Hotspot/<ActivateAsync>d__49")]
public Task ActivateAsync();
    public bool IsRelated(DocumentChange documentChange);
    public bool IsValid();
    public void Update(DocumentChange documentChange);
    [CanBeNullAttribute]
public HotspotItems GetLookupItems();
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotContext : object {
    private DocumentRange myExpressionRange;
    private IHotspotSessionContext mySessionContext;
    private IHotspotSession myHotspotSession;
    public IHotspotSession HotspotSession { get; }
    public IHotspotSessionContext SessionContext { get; }
    public DocumentRange ExpressionRange { get; }
    public HotspotContext(IHotspotSessionContext hotspotSessionContext, DocumentRange expressionRange, IHotspotSession hotspotSession);
    public sealed virtual IHotspotSession get_HotspotSession();
    public sealed virtual IHotspotSessionContext get_SessionContext();
    public sealed virtual DocumentRange get_ExpressionRange();
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotInfo : object {
    [CompilerGeneratedAttribute]
private TemplateField <TemplateField>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<DocumentRange> <Ranges>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ITemplateScopePoint> <ScopePoints>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepExistingText>k__BackingField;
    [NotNullAttribute]
public TemplateField TemplateField { get; }
    [NotNullAttribute]
public IReadOnlyList`1<DocumentRange> Ranges { get; }
    [CanBeNullAttribute]
public IReadOnlyList`1<ITemplateScopePoint> ScopePoints { get; }
    public bool KeepExistingText { get; public set; }
    public HotspotInfo(TemplateField templateField, DocumentRange[] documentRanges);
    public HotspotInfo(TemplateField templateField, IEnumerable`1<DocumentRange> documentRanges);
    public HotspotInfo(TemplateField templateField, IEnumerable`1<DocumentRange> documentRanges, IEnumerable`1<ITemplateScopePoint> scopePoints);
    private HotspotInfo(ValueTuple`3<TemplateField, IEnumerable`1<DocumentRange>, IEnumerable`1<ITemplateScopePoint>> args);
    [PureAttribute]
[NotNullAttribute]
public static HotspotInfo FromExistingText(DocumentRange documentRange);
    [CompilerGeneratedAttribute]
public TemplateField get_TemplateField();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<DocumentRange> get_Ranges();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ITemplateScopePoint> get_ScopePoints();
    [CompilerGeneratedAttribute]
public bool get_KeepExistingText();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_KeepExistingText(bool value);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotInfo/<EnumerateHotspotAndExpressionRanges>d__18")]
[PureAttribute]
public IEnumerable`1<DocumentRange> EnumerateHotspotAndExpressionRanges();
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotItems : object {
    [CompilerGeneratedAttribute]
private LookupFocusBehaviour <FocusBehaviour>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ActLikeCompletion>k__BackingField;
    [NotNullAttribute]
public static HotspotItems Empty;
    [CompilerGeneratedAttribute]
private IList`1<ILookupItem> <Items>k__BackingField;
    public LookupFocusBehaviour FocusBehaviour { get; public set; }
    public bool ActLikeCompletion { get; public set; }
    [NotNullAttribute]
public IList`1<ILookupItem> Items { get; }
    public HotspotItems(ILookupItem item);
    public HotspotItems(IList`1<ILookupItem> items);
    public HotspotItems(IList`1<ILookupItem> items, LookupFocusBehaviour focusBehaviour);
    private static HotspotItems();
    [CompilerGeneratedAttribute]
public LookupFocusBehaviour get_FocusBehaviour();
    [CompilerGeneratedAttribute]
public void set_FocusBehaviour(LookupFocusBehaviour value);
    [CompilerGeneratedAttribute]
public bool get_ActLikeCompletion();
    [CompilerGeneratedAttribute]
public void set_ActLikeCompletion(bool value);
    [CompilerGeneratedAttribute]
public IList`1<ILookupItem> get_Items();
    public virtual void OnTyping(char c);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSession : HotspotSessionBase {
    [NotNullAttribute]
private ICommandProcessor myCommandProcessor;
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private IHotspotSessionUIHelper myUIHelper;
    [CanBeNullAttribute]
private HotspotItems myCurrentLookupItems;
    [CompilerGeneratedAttribute]
private Task`1<HotspotSessionUi> <CurrentHotspotSessionUI>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientId <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<HotspotSession, Hotspot> CurrentHotspotChanged;
    public ISignal`1<CurrentHotspotChangedEventArgs> CurrentHotspotChanged2;
    private bool myIsShutdownRequested;
    private bool myDone;
    [CanBeNullAttribute]
[ItemCanBeNullAttribute]
public Task`1<HotspotSessionUi> CurrentHotspotSessionUI { get; private set; }
    public ClientId ClientId { get; }
    [CanBeNullAttribute]
public ICollection`1<IRangeMarker> MirrorMarkers { get; }
    [CanBeNullAttribute]
public HotspotItems CurrentLookupItems { get; }
    public HotspotSession(ClientId clientId, IEnumerable`1<HotspotInfo> hotspots, IHotspotSessionContext executionContext, ICommandProcessor commandProcessor, IShellLocks locks);
    [CompilerGeneratedAttribute]
public Task`1<HotspotSessionUi> get_CurrentHotspotSessionUI();
    [CompilerGeneratedAttribute]
private void set_CurrentHotspotSessionUI(Task`1<HotspotSessionUi> value);
    [CompilerGeneratedAttribute]
public ClientId get_ClientId();
    public void AssertClientIdConsistency(string message);
    public ICollection`1<IRangeMarker> get_MirrorMarkers();
    [CompilerGeneratedAttribute]
public void add_CurrentHotspotChanged(Action`2<HotspotSession, Hotspot> value);
    [CompilerGeneratedAttribute]
public void remove_CurrentHotspotChanged(Action`2<HotspotSession, Hotspot> value);
    public void ExecuteTest(IDisposable disposeOnSessionFinish);
    public bool IsApplicable(ITextControl textControl);
    public void ExecuteAndForget(IDisposable disposeOnSessionFinish);
    [ItemCanBeNullAttribute]
public Task`1<HotspotSessionUi> ExecuteAsync(IDisposable disposeOnSessionFinish);
    public Task StartSessionAsync();
    public HotspotItems get_CurrentLookupItems();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSession/<GoToNextHotspotInternalAsync>d__27")]
protected virtual Task GoToNextHotspotInternalAsync(Task taskToAwait);
    private void RequestShutdown();
    public Task GoToPreviousHotspotAsync();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSession/<GoToPreviousHotspotInternalAsync>d__30")]
public Task GoToPreviousHotspotInternalAsync(Task taskToAwait);
    private void DocumentChanged(object sender, EventArgs`1<DocumentChange> args);
    private void BeforeDocumentChanged(object sender, EventArgs`1<DocumentChange> args);
    public Task WaitForNavigation();
    [CompilerGeneratedAttribute]
private void <ExecuteAsync>b__22_0(Task`1<HotspotSessionUi> _);
    [CompilerGeneratedAttribute]
private void <RequestShutdown>g__FinishSession|28_0();
    [CompilerGeneratedAttribute]
private void <RequestShutdown>b__28_1();
    [CompilerGeneratedAttribute]
private Task <RequestShutdown>b__28_2();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSession/<<RequestShutdown>b__28_3>d")]
[CompilerGeneratedAttribute]
private Task <RequestShutdown>b__28_3();
    [CompilerGeneratedAttribute]
private void <DocumentChanged>b__31_1();
    [CompilerGeneratedAttribute]
private void <DocumentChanged>b__31_4();
    [CompilerGeneratedAttribute]
private void <BeforeDocumentChanged>g__FinishSession|32_0();
    [CompilerGeneratedAttribute]
private void <BeforeDocumentChanged>b__32_1();
    [CompilerGeneratedAttribute]
private void <BeforeDocumentChanged>b__32_2();
}
public abstract class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionBase : object {
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
protected List`1<Hotspot> myHotspots;
    [CanBeNullAttribute]
protected Task CurrentHotspotNavigationTask;
    [CompilerGeneratedAttribute]
private IHotspotSessionContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private Hotspot <CurrentHotspot>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUpdating>k__BackingField;
    protected LifetimeDefinition LifetimeDef;
    [CompilerGeneratedAttribute]
private ISignal`1<HotspotSessionClosedEventArgs> <Closed>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<BeforeHotspotUpdateEventArgs> <BeforeHotspotUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler HotspotUpdated;
    private string myCachedText;
    private Dictionary`2<Hotspot, HotspotItems> myCachedItems;
    protected int CurrentHotspotIndex;
    [CompilerGeneratedAttribute]
private bool <IsFrozen>k__BackingField;
    public bool IsFinished { get; }
    public IHotspotSessionContext Context { get; }
    public Hotspot CurrentHotspot { get; protected set; }
    public bool IsUpdating { get; public set; }
    public IReadOnlyList`1<Hotspot> Hotspots { get; }
    public Lifetime Lifetime { get; }
    public ISignal`1<HotspotSessionClosedEventArgs> Closed { get; }
    public ISignal`1<BeforeHotspotUpdateEventArgs> BeforeHotspotUpdate { get; }
    public IEnumerable`1<IRangeMarker> AllDriverMarkers { get; }
    public bool IsFrozen { get; public set; }
    protected HotspotSessionBase(IEnumerable`1<HotspotInfo> hotspotInfos, IHotspotSessionContext executionContext, IShellLocks locks);
    public sealed virtual Task GoToNextHotspotAsync();
    protected abstract virtual Task GoToNextHotspotInternalAsync(Task taskToAwait);
    public sealed virtual bool get_IsFinished();
    public virtual void EndSession(TerminationType terminationType);
    public sealed virtual void NotifyDocumentIsUsed(IDocument document);
    public sealed virtual string GetVariableResult(string variableName);
    [CompilerGeneratedAttribute]
public sealed virtual IHotspotSessionContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual Hotspot get_CurrentHotspot();
    [CompilerGeneratedAttribute]
protected void set_CurrentHotspot(Hotspot value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsUpdating();
    [CompilerGeneratedAttribute]
public void set_IsUpdating(bool value);
    public sealed virtual IReadOnlyList`1<Hotspot> get_Hotspots();
    public sealed virtual Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<HotspotSessionClosedEventArgs> get_Closed();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<BeforeHotspotUpdateEventArgs> get_BeforeHotspotUpdate();
    [CompilerGeneratedAttribute]
public sealed virtual void add_HotspotUpdated(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_HotspotUpdated(EventHandler value);
    protected void OnHotspotUpdated();
    public sealed virtual IEnumerable`1<IRangeMarker> get_AllDriverMarkers();
    [CanBeNullAttribute]
[PureAttribute]
private Hotspot GetHotspot(string variableName);
    protected HotspotItems EvaluateHotspot(Hotspot hotspot);
    protected void SortHotspots();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionBase/<HaveNextHotspotAsync>d__47")]
protected Task`1<HaveNextHotspotResult> HaveNextHotspotAsync();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsFrozen();
    [CompilerGeneratedAttribute]
public void set_IsFrozen(bool value);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionClosedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private TerminationType <TerminationType>k__BackingField;
    public TerminationType TerminationType { get; }
    public HotspotSessionClosedEventArgs(TerminationType terminationType);
    [CompilerGeneratedAttribute]
public TerminationType get_TerminationType();
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionContext : object {
    [NotNullAttribute]
public static PropertyId`1<Template> TemplateId;
    [NotNullAttribute]
private HashSet`1<IDocument> myDocuments;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentOffset <StartOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private ILookupItemsOwner <LookupItemsOwner>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTextControlAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private ILookupResolveContext <LookupResolveContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionName>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyBag <Properties>k__BackingField;
    public ISolution Solution { get; }
    public DocumentOffset StartOffset { get; }
    public IReadOnlyCollection`1<IDocument> Documents { get; }
    public ILookupItemsOwner LookupItemsOwner { get; }
    public bool IsTextControlAllowed { get; }
    public ILookupResolveContext LookupResolveContext { get; }
    public string SessionName { get; }
    public PropertyBag Properties { get; }
    public HotspotSessionContext(ISolution solution, DocumentOffset startOffset, LookupItemsOwnerFactory ownerFactory, ILookupResolveContext lookupResolveContext, bool textControlAllowed, string sessionName);
    private static HotspotSessionContext();
    [CompilerGeneratedAttribute]
public sealed virtual ISolution get_Solution();
    [CompilerGeneratedAttribute]
public sealed virtual DocumentOffset get_StartOffset();
    public sealed virtual IReadOnlyCollection`1<IDocument> get_Documents();
    [CompilerGeneratedAttribute]
public sealed virtual ILookupItemsOwner get_LookupItemsOwner();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsTextControlAllowed();
    [CompilerGeneratedAttribute]
public sealed virtual ILookupResolveContext get_LookupResolveContext();
    [CompilerGeneratedAttribute]
public sealed virtual string get_SessionName();
    [CompilerGeneratedAttribute]
public sealed virtual PropertyBag get_Properties();
    public sealed virtual void EnsureDocumentIsUsed(IDocument document);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionController : object {
    private EscapeAction myEscapeAction;
    private Dictionary`2<IDocument, string> myInitialDocumentStates;
    private IRangeMarker myEndRangeMarker;
    private HotspotInfo[] myHotspotInfos;
    private DocumentOffset myInitialCaretOffset;
    public HotspotSessionController(HotspotInfo[] hotspotInfos, DocumentRange endRange, EscapeAction escapeAction, ISolution solution);
    public void Finalize(IHotspotSessionContext executionContext, TerminationType terminationType);
    public void Init(IHotspotSessionContext hotspotSessionContext, ITextControl textControl);
    [PureAttribute]
public DocumentRange GetJoinedFieldsRange(IDocument document);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionEx : object {
    [ExtensionAttribute]
public static void GoToNextHotspotSync(IHotspotSession session);
}
[ShellPerClientComponentAttribute("5", "10")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionExecutor : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
private UndoManager myUndoManager;
    [NotNullAttribute]
private IActionManager myActionManager;
    [NotNullAttribute]
private ISettingsStore mySettingsStore;
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private IExternalIntellisenseHost myExternalIntellisenseHost;
    [NotNullAttribute]
private IDocumentMarkupManager myDocumentMarkupManager;
    [NotNullAttribute]
private ICommandProcessor myCommandProcessor;
    [NotNullAttribute]
private IHotspotSessionUIHelper myUIHelper;
    [NotNullAttribute]
private IEnumerable`1<IHotspotSessionListener> myHotspotSessionListeners;
    [CompilerGeneratedAttribute]
private IProperty`1<HotspotSessionUi> <CurrentHotspotSessionUi>k__BackingField;
    [CompilerGeneratedAttribute]
private Task`1<HotspotSessionUi> <CurrentExecuteSessionTask>k__BackingField;
    [NotNullAttribute]
public static HotspotSessionExecutor InstanceForCurrentClient { get; }
    [ObsoleteAttribute("Use InstanceForCurrentClient")]
[NotNullAttribute]
public static HotspotSessionExecutor Instance { get; }
    [NotNullAttribute]
public IProperty`1<HotspotSessionUi> CurrentHotspotSessionUi { get; }
    [CanBeNullAttribute]
public HotspotSessionUi CurrentSession { get; }
    public Task`1<HotspotSessionUi> CurrentExecuteSessionTask { get; public set; }
    public HotspotSessionExecutor(Lifetime lifetime, UndoManager undoManager, IActionManager actionManager, ISettingsStore settingsStore, IShellLocks locks, IExternalIntellisenseHost externalIntellisenseHost, IDocumentMarkupManager documentMarkupManager, IEnumerable`1<IHotspotSessionListener> hotspotSessionListeners, ICommandProcessor commandProcessor, IHotspotSessionUIHelper uiHelper);
    public static HotspotSessionExecutor get_InstanceForCurrentClient();
    public static HotspotSessionExecutor get_Instance();
    public IDisposable EnsureTemplatesDontExecute(bool assert);
    [CompilerGeneratedAttribute]
public IProperty`1<HotspotSessionUi> get_CurrentHotspotSessionUi();
    public HotspotSessionUi get_CurrentSession();
    [CompilerGeneratedAttribute]
public Task`1<HotspotSessionUi> get_CurrentExecuteSessionTask();
    [CompilerGeneratedAttribute]
public void set_CurrentExecuteSessionTask(Task`1<HotspotSessionUi> value);
    private sealed virtual override void JetBrains.Application.Shell.IObsoleteTearDown.TearDown();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionExecutor/<ExecuteSessionAsync>d__26")]
[NotNullAttribute]
protected internal virtual Task`1<HotspotSessionUi> ExecuteSessionAsync(HotspotSession hotspotSession, IDisposable disposeOnSessionFinish);
    public static void ExecuteSessionSyncInFork(HotspotSession hotspotSession, IDisposable disposeOnSessionFinish);
    private void LiveTemplateSessionCancelled(object sender, EventArgs args);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionNonInteractive : HotspotSessionBase {
    private ICommandProcessor myCommandProcessor;
    private IThreading myLocks;
    private bool myDone;
    public HotspotSessionNonInteractive(Lifetime lifetime, IEnumerable`1<HotspotInfo> hotspotInfos, IHotspotSessionContext hotspotSessionContext, ICommandProcessor commandProcessor, IShellLocks locks);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionNonInteractive/<ExpandAsync>d__3")]
public Task ExpandAsync();
    private void DocumentChanged(object sender, EventArgs`1<DocumentChange> args);
    private void BeforeDocumentChanged(object sender, EventArgs`1<DocumentChange> args);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionNonInteractive/<GoToNextHotspotInternalAsync>d__7")]
protected virtual Task GoToNextHotspotInternalAsync(Task taskToAwait);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0();
    [CompilerGeneratedAttribute]
private void <DocumentChanged>b__4_1();
    [CompilerGeneratedAttribute]
private void <DocumentChanged>b__4_3();
    [CompilerGeneratedAttribute]
private void <BeforeDocumentChanged>b__5_0();
    [CompilerGeneratedAttribute]
private void <BeforeDocumentChanged>b__5_1();
}
[RegisterHighlighterAttribute("ReSharper LiveTemplates Current HotSpot")]
[RegisterHighlighterAttribute("ReSharper LiveTemplates Current HotSpot mirror")]
[RegisterHighlighterAttribute("ReSharper LiveTemplates Inactive HotSpot")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionUi : object {
    public static string CURRENT_HOTSPOT_HIGHLIGHTER;
    public static string CURRENT_HOTSPOT_MIRRORS_HIGHLIGHTER;
    public static string OTHER_HOTSPOTS_HIGHLIGHTER;
    private static string myHighlightersKey;
    private Lifetime myLifetime;
    [NotNullAttribute]
private LifetimeDefinition myLifetimeDefinition;
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private ILookupWindowManager myLookupWindowManager;
    [NotNullAttribute]
private ISettingsStore mySettingsStore;
    [NotNullAttribute]
private SequentialLifetimes myLookupSequence;
    [NotNullAttribute]
private SequentialLifetimes myHighlighterSequence;
    [NotNullAttribute]
private IDocumentMarkupManager myDocumentMarkupManager;
    [NotNullAttribute]
private ILookupResolveContext myLookupResolveContext;
    [NotNullAttribute]
private IHotspotSessionUIHelper myUIHelper;
    [CanBeNullAttribute]
private ILookup myLookup;
    [CompilerGeneratedAttribute]
private HotspotSession <HotspotSession>k__BackingField;
    [CompilerGeneratedAttribute]
private Task <InitializeTextControlsTask>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler Cancelled;
    public IListEvents`1<ITextControl> TextControls;
    [NotNullAttribute]
public HotspotSession HotspotSession { get; }
    internal Task InitializeTextControlsTask { get; }
    public HotspotSessionUi(Lifetime lifetime, IShellLocks locks, ILookupWindowManager lookupWindowManager, HotspotSession hotspotSession, IActionManager actionManager, ISettingsStore settingsStore, IEditorManager editorManager, IDocumentMarkupManager documentMarkupManager, DocumentManager documentManager, IExternalIntellisenseHost externalIntellisenseHost, ILookupResolveContext lookupResolveContext, UndoManager undoManager, IHotspotSessionUIHelper uiHelper);
    private static HotspotSessionUi();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionUi/<WaitForTextControlsAsync>d__16")]
public Task WaitForTextControlsAsync();
    [CompilerGeneratedAttribute]
public HotspotSession get_HotspotSession();
    [CompilerGeneratedAttribute]
internal Task get_InitializeTextControlsTask();
    [CompilerGeneratedAttribute]
public void add_Cancelled(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Cancelled(EventHandler value);
    private void BeforeTextControlDisposed(ITextControl tc);
    private void Detach(bool external, bool terminate);
    public void CloseSession();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionUi/<GoToNextHotspotAsync>d__30")]
private Task GoToNextHotspotAsync();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionUi/<GoToPreviousHotspotAsync>d__31")]
private Task GoToPreviousHotspotAsync();
    private void UpdateHighlighting();
    private void UpdateLookup();
    private void LookupOnItemCompleted(object sender, ILookupItem lookupItem, Suffix suffix, LookupItemInsertType lookupItemInsertType);
    private void ShowHint(IShellLocks locks);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionUi/<<GoToNextHotspotAsync>b__30_0>d")]
[CompilerGeneratedAttribute]
private Task <GoToNextHotspotAsync>b__30_0();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionUi/<<GoToPreviousHotspotAsync>b__31_0>d")]
[CompilerGeneratedAttribute]
private Task <GoToPreviousHotspotAsync>b__31_0();
    [CompilerGeneratedAttribute]
private void <UpdateHighlighting>b__32_0(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private void <LookupOnItemCompleted>b__34_0();
    [CompilerGeneratedAttribute]
private Task <LookupOnItemCompleted>b__34_1();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionUIHelper : object {
    [NotNullAttribute]
private IThreading myThreading;
    public HotspotSessionUIHelper(IThreading threading);
    public sealed virtual List`1<Task> InitializeAllTextControls(Lifetime sessionLifetime, IHotspotSessionContext context, IListEvents`1<ITextControl> textControls);
    public sealed virtual Task`1<ITextControl> OpenTextControlMainReadAsync(Lifetime lifetime, IDocument document, ISolution solution, TabActivation tabActivation);
    public sealed virtual void PumpMessagesIfNeeded();
    public sealed virtual SchedulerAwaiterWrapper ReturnToMainGuardIfNeeded(Lifetime lifetime);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionUIHelper/<DoWithProperAsync>d__6")]
public sealed virtual Task DoWithProperAsync(Func`1<Task> action);
    public sealed virtual void NoAwait(Func`1<Task> action);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionUIHelper/<OpenProjectFileAsync>d__8")]
public sealed virtual Task OpenProjectFileAsync(IProjectFile projectFile, OpenFileOptions openFileOptions);
    public sealed virtual Task`1<T> ExecuteMainRead(Lifetime lifetime, Func`1<Task`1<T>> action);
    public sealed virtual Task ExecuteMainRead(Lifetime lifetime, Func`1<Task> action);
}
public static class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionUiUtil : object {
    public static void UpdateHighlightings(IRangeMarker currentRangeMarker, ICollection`1<IRangeMarker> mirrorMarkers, IEnumerable`1<IRangeMarker> allDriverMarkers, IDocumentMarkupManager documentMarkupManager, string highlighterKey, string currentHotspotHighlighter, string currentHotspotMirrorHighlighter, string otherHotspotHighlighter, bool addHighlighterForCurrentRangeMarker, Lifetime lifetime, object highlightersUserData);
}
public static class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionUtils : object {
    public static void AcceptSession(IHotspotSession session, IHotspotSessionContext executionContext);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotsRegistry : object {
    [CompilerGeneratedAttribute]
private IPsiServices <psiServices>P;
    [NotNullAttribute]
private List`1<Entry> myEntries;
    [NotNullAttribute]
public IPsiServices PsiServices { get; }
    public int Count { get; }
    public HotspotsRegistry(IPsiServices psiServices);
    public IPsiServices get_PsiServices();
    public int get_Count();
    public void Register(IRangeMarker rangeMarker, IHotspotExpression hotspotExpression);
    public void Register(IEnumerable`1<ITreeNode> nodes, IHotspotExpression hotspotExpression);
    public void Register(ITreeNode node, IHotspotExpression hotspotExpression);
    public void CombineWith(HotspotsRegistry other);
    [NotNullAttribute]
[ItemNotNullAttribute]
[PureAttribute]
public HotspotInfo[] CreateHotspots();
    [PureAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public IReadOnlyList`1<THotspotExpression> DumpHotspotExpressions();
    [CompilerGeneratedAttribute]
private ITreeNodePointer`1<ITreeNode> <Register>b__8_0(ITreeNode node);
}
internal interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IExpressionAdapter {
    public IHotspotExpression Expression { get; }
    public bool IsExpandAndSkip { get; }
    public abstract virtual IHotspotExpression get_Expression();
    public abstract virtual bool get_IsExpandAndSkip();
    public abstract virtual void HandleExpansion(DocumentRange range);
    public abstract virtual string EvaluateQuickResult(DocumentRange range);
    [CanBeNullAttribute]
public abstract virtual HotspotItems GetLookupItems(DocumentRange range);
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext {
    [NotNullAttribute]
public IHotspotSession HotspotSession { get; }
    [NotNullAttribute]
public IHotspotSessionContext SessionContext { get; }
    public DocumentRange ExpressionRange { get; }
    public abstract virtual IHotspotSession get_HotspotSession();
    public abstract virtual IHotspotSessionContext get_SessionContext();
    public abstract virtual DocumentRange get_ExpressionRange();
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotExpression {
    public abstract virtual string EvaluateQuickResult(IHotspotContext context);
    public abstract virtual void HandleExpansion(IHotspotContext context);
    public abstract virtual HotspotItems GetLookupItems(IHotspotContext context);
    public abstract virtual string Serialize();
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotExpressionAdvanced {
    public abstract virtual IEnumerable`1<IRangeMarker> GetAdditionalRangeMarkers();
    public abstract virtual string GetPlaceholder(IDocument document);
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotService {
    public abstract virtual void AcceptSessionDocument(IHotspotSession hotspotSession, IDocument document);
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSession {
    [NotNullAttribute]
public IEnumerable`1<IRangeMarker> AllDriverMarkers { get; }
    [NotNullAttribute]
public IReadOnlyList`1<Hotspot> Hotspots { get; }
    [CanBeNullAttribute]
public Hotspot CurrentHotspot { get; }
    public bool IsFinished { get; }
    public bool IsFrozen { get; }
    public bool IsUpdating { get; }
    public IHotspotSessionContext Context { get; }
    public Lifetime Lifetime { get; }
    public ISignal`1<BeforeHotspotUpdateEventArgs> BeforeHotspotUpdate { get; }
    public ISignal`1<HotspotSessionClosedEventArgs> Closed { get; }
    public abstract virtual Task GoToNextHotspotAsync();
    public abstract virtual string GetVariableResult(string variableName);
    public abstract virtual IEnumerable`1<IRangeMarker> get_AllDriverMarkers();
    public abstract virtual IReadOnlyList`1<Hotspot> get_Hotspots();
    public abstract virtual Hotspot get_CurrentHotspot();
    public abstract virtual bool get_IsFinished();
    public abstract virtual bool get_IsFrozen();
    public abstract virtual bool get_IsUpdating();
    public abstract virtual IHotspotSessionContext get_Context();
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual ISignal`1<BeforeHotspotUpdateEventArgs> get_BeforeHotspotUpdate();
    public abstract virtual ISignal`1<HotspotSessionClosedEventArgs> get_Closed();
    [CompilerGeneratedAttribute]
public abstract virtual void add_HotspotUpdated(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_HotspotUpdated(EventHandler value);
    public abstract virtual void EndSession(TerminationType terminationType);
    public abstract virtual void NotifyDocumentIsUsed(IDocument document);
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSessionContext {
    [NotNullAttribute]
public ISolution Solution { get; }
    public DocumentOffset StartOffset { get; }
    [NotNullAttribute]
public IReadOnlyCollection`1<IDocument> Documents { get; }
    [NotNullAttribute]
public ILookupItemsOwner LookupItemsOwner { get; }
    public bool IsTextControlAllowed { get; }
    [NotNullAttribute]
public ILookupResolveContext LookupResolveContext { get; }
    public string SessionName { get; }
    public PropertyBag Properties { get; }
    public abstract virtual ISolution get_Solution();
    public abstract virtual DocumentOffset get_StartOffset();
    public abstract virtual IReadOnlyCollection`1<IDocument> get_Documents();
    public abstract virtual ILookupItemsOwner get_LookupItemsOwner();
    public abstract virtual bool get_IsTextControlAllowed();
    public abstract virtual ILookupResolveContext get_LookupResolveContext();
    public abstract virtual string get_SessionName();
    public abstract virtual PropertyBag get_Properties();
    public abstract virtual void EnsureDocumentIsUsed(IDocument document);
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSessionListener {
    public abstract virtual void OnClose(IHotspotSessionContext context);
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSessionUIHelper {
    public abstract virtual List`1<Task> InitializeAllTextControls(Lifetime sessionLifetime, IHotspotSessionContext context, IListEvents`1<ITextControl> textControls);
    public abstract virtual Task`1<ITextControl> OpenTextControlMainReadAsync(Lifetime lifetime, IDocument document, ISolution solution, TabActivation tabActivation);
    public abstract virtual void PumpMessagesIfNeeded();
    public abstract virtual SchedulerAwaiterWrapper ReturnToMainGuardIfNeeded(Lifetime lifetime);
    public abstract virtual Task DoWithProperAsync(Func`1<Task> action);
    public abstract virtual void NoAwait(Func`1<Task> action);
    public abstract virtual Task OpenProjectFileAsync(IProjectFile projectFile, OpenFileOptions openFileOptions);
    public abstract virtual Task`1<T> ExecuteMainRead(Lifetime lifetime, Func`1<Task`1<T>> action);
    public abstract virtual Task ExecuteMainRead(Lifetime lifetime, Func`1<Task> action);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.LiveTemplateHotspotSessionController : LiveTemplateSessionController {
    private ISolution mySolution;
    private DocumentManager myDocumentManager;
    private IRangeMarker myEndRangeMarker;
    private IRangeMarker mySelectionRangeMarker;
    private bool mySelectionRangeInverted;
    public LiveTemplateHotspotSessionController(Template template, ISolution solution);
    public void Finalize(IHotspotSessionContext executionContext, TerminationType terminationType);
    [NotNullAttribute]
public Func`1<IEnumerable`1<HotspotInfo>> Init(string actionName, ITextControl textControl, DocumentOffset& startOffset, DocumentOffset endOffset, ISolution solution, string alternativeText, List`1<Pair`2<DocumentRange, IList`1<IDeclaredElement>>> bindableReferences);
    [NotNullAttribute]
private static string GetAndRemoveSelectionText(ITextControl textControl, DocumentOffset& startOffset);
}
public abstract class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.LiveTemplateSessionController : object {
    [CompilerGeneratedAttribute]
private Template <Template>k__BackingField;
    public Template Template { get; }
    protected LiveTemplateSessionController(Template template);
    [CompilerGeneratedAttribute]
public Template get_Template();
}
internal class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.MacroImplementationAdapter : object {
    private IHotspotSession mySession;
    private IMacroImplementation myImplementation;
    private MacroCallExpressionNew myExpression;
    [CompilerGeneratedAttribute]
private bool <IsExpandAndSkip>k__BackingField;
    public IHotspotExpression Expression { get; }
    public bool IsExpandAndSkip { get; }
    public MacroImplementationAdapter(IHotspotSession session, IMacroImplementation implementation, MacroCallExpressionNew expression);
    public sealed virtual IHotspotExpression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsExpandAndSkip();
    public sealed virtual void HandleExpansion(DocumentRange range);
    public sealed virtual string EvaluateQuickResult(DocumentRange range);
    public sealed virtual HotspotItems GetLookupItems(DocumentRange range);
    [NotNullAttribute]
private IHotspotContext CreateExpressionContext(DocumentRange range);
}
internal class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.MutliDocumentNameExpression : object {
    private string mySuggestedName;
    private IRangeMarker myTargetMarker;
    private ISolution mySolution;
    public MutliDocumentNameExpression(string suggestedName, IReference reference);
    public sealed virtual void HandleExpansion(IHotspotContext context);
    public sealed virtual string Serialize();
    public sealed virtual object Clone();
    public virtual string EvaluateQuickResult(IHotspotContext context);
    public sealed virtual HotspotItems GetLookupItems(IHotspotContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.MutliDocumentNameExpression/<GetAdditionalRangeMarkers>d__9")]
public sealed virtual IEnumerable`1<IRangeMarker> GetAdditionalRangeMarkers();
    public sealed virtual string GetPlaceholder(IDocument document);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.NameSuggestionsExpression : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <Names>k__BackingField;
    [NotNullAttribute]
public IReadOnlyCollection`1<string> Names { get; }
    public NameSuggestionsExpression(String[] names);
    public NameSuggestionsExpression(List`1<string> names);
    public NameSuggestionsExpression(ICollection`1<string> names);
    public NameSuggestionsExpression(IReadOnlyCollection`1<string> names);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_Names();
    public sealed virtual string Serialize();
    public sealed virtual HotspotItems GetLookupItems(IHotspotContext context);
    public sealed virtual string EvaluateQuickResult(IHotspotContext context);
    public sealed virtual void HandleExpansion(IHotspotContext context);
    public sealed virtual object Clone();
}
internal class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.OldExpressionAdapter : object {
    private IHotspotSession myHotspotSession;
    [CompilerGeneratedAttribute]
private IHotspotExpression <Expression>k__BackingField;
    public IHotspotExpression Expression { get; }
    public bool IsExpandAndSkip { get; }
    public OldExpressionAdapter(IHotspotExpression expression, IHotspotSession hotspotSession);
    [CompilerGeneratedAttribute]
public sealed virtual IHotspotExpression get_Expression();
    public sealed virtual bool get_IsExpandAndSkip();
    public sealed virtual void HandleExpansion(DocumentRange range);
    public sealed virtual string EvaluateQuickResult(DocumentRange range);
    public sealed virtual HotspotItems GetLookupItems(DocumentRange range);
    [NotNullAttribute]
private IHotspotContext CreateExpressionContext(DocumentRange range);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.ReformatAndShortenBulkOperation : object {
    private IList`1<Pair`2<IRangeMarker, IList`1<IDeclaredElement>>> myBindableMarkedReferences;
    private Template myTemplate;
    private ISolution mySolution;
    private IRangeMarker myTemplateRangeMarker;
    private IDocument myDocument;
    private IEnumerable`1<IRangeMarker> myNonFormattableRanges;
    private RequirementsManager myRequirementManager;
    public ReformatAndShortenBulkOperation(Template template, ISolution solution, IDocument document, IRangeMarker templateRangeMarker, IList`1<Pair`2<IRangeMarker, IList`1<IDeclaredElement>>> bindableMarkedReferences);
    public void ExecuteBulkOperation(Action onAllDocumentsCommited);
    private void DoFormat(PsiLanguageType languageType, IDocument document, IPsiSourceFile sourceFile);
    private void DoBindReferences(IPsiServices psiServices);
    [CanBeNullAttribute]
public ITemplateFormatter GetTemplateFormatter(IPsiSourceFile& sourceFile, PsiLanguageType& languageType);
    public void SetNonFormattableMarkers(IEnumerable`1<IRangeMarker> nonFormattableMarkers);
    private static bool EndsWithWhitespace(IDocument document, DocumentRange rangeAfter, IPsiSourceFile sourceFile);
    [CompilerGeneratedAttribute]
private void <DoFormat>g__Format|9_0(DocumentRange range, CodeFormatProfile profile, bool formatSpacesAfter, <>c__DisplayClass9_0& );
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.SchedulerAwaiterWrapper : ValueType {
    private Nullable`1<SchedulerAwaiter> mySchedulerAwaiter;
    public bool IsCompleted { get; }
    public SchedulerAwaiterWrapper(SchedulerAwaiter schedulerAwaiter);
    public bool get_IsCompleted();
    public void GetResult();
    public SchedulerAwaiterWrapper GetAwaiter();
    public sealed virtual void OnCompleted(Action continuation);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.SimpleHotspotExpression : object {
    [NotNullAttribute]
private string myText;
    public SimpleHotspotExpression(string text);
    [NotNullAttribute]
public sealed virtual string EvaluateQuickResult(IHotspotContext context);
    public sealed virtual void HandleExpansion(IHotspotContext context);
    [NotNullAttribute]
public sealed virtual HotspotItems GetLookupItems(IHotspotContext context);
    public sealed virtual string Serialize();
    public sealed virtual object Clone();
}
public abstract class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.SuggestedNameTemplateExpression : object {
    [NotNullAttribute]
private string mySuggestedName;
    protected bool LookupSuggestedNameIfEmpty { get; }
    protected SuggestedNameTemplateExpression(string suggestedName);
    protected virtual bool get_LookupSuggestedNameIfEmpty();
    public sealed virtual string Serialize();
    public sealed virtual object Clone();
    public virtual string EvaluateQuickResult(IHotspotContext context);
    public virtual void HandleExpansion(IHotspotContext context);
    public sealed virtual HotspotItems GetLookupItems(IHotspotContext context);
    [NotNullAttribute]
protected abstract virtual IList`1<ILookupItem> GetLookupItemsImpl(IHotspotContext context);
}
public enum JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.TerminationType : Enum {
    public int value__;
    public static TerminationType Cancelled;
    public static TerminationType Terminated;
    public static TerminationType Finished;
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.TextHotspotExpression : object {
    [NotNullAttribute]
private IList`1<string> myText;
    private LookupFocusBehaviour myFocusBehavior;
    public TextHotspotExpression(IList`1<string> text, LookupFocusBehaviour focusBehavior);
    public sealed virtual string EvaluateQuickResult(IHotspotContext context);
    public sealed virtual void HandleExpansion(IHotspotContext context);
    public sealed virtual HotspotItems GetLookupItems(IHotspotContext context);
    public sealed virtual string Serialize();
    public sealed virtual object Clone();
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.ITemplatesLocalizationSource {
    public abstract virtual Type GetResourceType();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.LiveTemplates.LanguageCaseProvider : object {
    public virtual bool IsCaseSensitive();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.LiveTemplates.LiveTemplateExpandingCookie : SafeDisposable {
    private IShellLocks myLocks;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ForkedContentModelData`1<object> ourIsLiveTemplateExpanding;
    private static object ourIsExpanding;
    private static bool IsExpanding { get; private set; }
    private LiveTemplateExpandingCookie(IShellLocks locks);
    private static LiveTemplateExpandingCookie();
    private static bool get_IsExpanding();
    private static void set_IsExpanding(bool value);
    protected virtual void DisposeUnmanagedResources();
    [PureAttribute]
public static bool IsLiveTemplateExpanding(IShellLocks locks);
    [MustDisposeResourceAttribute]
public static IDisposable Create(IShellLocks locks);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.LiveTemplates.LiveTemplatesManager : object {
    [NotNullAttribute]
private ILanguageManager myLanguageManager;
    [NotNullAttribute]
private ICommandProcessor myCommandProcessor;
    [NotNullAttribute]
private IShellLocks myShellLocks;
    [NotNullAttribute]
private SettingsCacheManager mySettingsCacheManager;
    [NotNullAttribute]
private TextControlProperties myTextControlProperties;
    [NotNullAttribute]
private Dictionary`2<TemplateApplicability, TemplatesEnumerationCachedReader> myCacheReaders;
    [NotNullAttribute]
private SequentialLifetimes myCacheLifetimeSequence;
    private Lifetime myCacheLifetime;
    [NotNullAttribute]
private TemplateUsageCollector myTemplateUsageCollector;
    [NotNullAttribute]
public static LiveTemplatesManager Instance { get; }
    public LiveTemplatesManager(Lifetime lifetime, ICommandProcessor commandProcessor, IShellLocks shellLocks, ILanguageManager languageManager, StoredTemplatesProvider storedTemplatesProvider, SettingsCacheManager settingsCacheManager, TextControlProperties textControlProperties, TemplateUsageCollector templateUsageCollector);
    public static LiveTemplatesManager get_Instance();
    [NotNullAttribute]
public virtual string Normalize(string templateInitialText, IDocument document);
    public void ExpandTemplateInDocument(Template template, ISolution solution, DocumentOffset startOffset);
    [CanBeNullAttribute]
public HotspotSession CreateHotspotSessionFromTemplate(Template template, ISolution solution, ITextControl textControl, Nullable`1<DocumentOffset> startOffset, Nullable`1<TemplateAcceptanceInformation> acceptanceInformation);
    [CanBeNullAttribute]
public HotspotSession CreateHotspotSessionFromTemplate(string actionName, Template template, ISolution solution, ITextControl textControl, Nullable`1<DocumentOffset> startOffset, Nullable`1<TemplateAcceptanceInformation> acceptanceInformation);
    [CanBeNullAttribute]
public virtual HotspotSession CreateHotspotSessionFromTemplate(string actionName, Template template, ISolution solution, IDictionary`2<ITextControl, TemplateSection> textControlTexts, Nullable`1<DocumentOffset> startOffset, Nullable`1<TemplateAcceptanceInformation> acceptanceInformation);
    protected static Func`1<Func`1<bool>> InitializeHotSpot(string actionName, Template template, ISolution solution, LiveTemplateHotspotSessionController sessionController, ITextControl textControl, TemplateSection templateSection, IDictionary`2<ITextControl, TemplateSection> textControlTexts, Dictionary`2<TemplateField, HotspotInfo> hotspots, DocumentOffset startOffset, DocumentOffset endOffset);
    [NotNullAttribute]
[MustUseReturnValueAttribute]
public HotspotSession CreateHotspotSessionAtopExistingText(ISolution solution, DocumentOffset endCaretPosition, ITextControl textControl, EscapeAction escapeAction, HotspotInfo[] hotspotInfos);
    [NotNullAttribute]
[MustUseReturnValueAttribute]
public HotspotSession CreateHotspotSessionAtopExistingText(ISolution solution, DocumentRange endSelectionRange, ITextControl textControl, EscapeAction escapeAction, HotspotInfo[] hotspotInfos);
    public bool HasExpansionCandidatesWithoutCommit(ITextControl textControl, HashSet`1<PsiLanguageType> languageTypes);
    private static bool IsTemplateMatchesSomeLanguage(Template template, HashSet`1<PsiLanguageType> fileLanguages);
    [NotNullAttribute]
internal static IList`1<string> EnumeratePossiblePrefixes(IDocument document, int caretOffset);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.LiveTemplates.LiveTemplatesManager/<GetTemplatesInternal>d__24")]
[NotNullAttribute]
private IEnumerable`1<Template> GetTemplatesInternal(ISolution solution, ITextControl textControl, bool matchWholePrefix, TemplateApplicability applicability, ISpecificCodeCompletionContext completionContext);
    public IList`1<Template> GetCachedTemplates(TemplateApplicability applicability, Func`3<Lifetime, DataContexts, IDataContext> dataContext);
    [NotNullAttribute]
public IEnumerable`1<Template> GetTemplates(ISolution solution, ITextControl textControl);
    [NotNullAttribute]
public IEnumerable`1<Template> GetAvailableTemplates(ISolution solution, ITextControl textControl, bool matchPrefix, TemplateApplicability applicability, ISpecificCodeCompletionContext completionContext);
    [PureAttribute]
[NotNullAttribute]
[ObsoleteAttribute("Use overload with 'DocumentOffset' instead")]
public static string GetPrefix(IDocument document, int caretOffset);
    [PureAttribute]
[NotNullAttribute]
public static string GetPrefix(DocumentOffset documentOffset);
    [PureAttribute]
[NotNullAttribute]
[ObsoleteAttribute("Use overload with 'DocumentOffset' instead")]
public static string GetPrefix(IDocument document, int caretOffset, Char[] allowedChars);
    [PureAttribute]
[NotNullAttribute]
public static string GetPrefix(DocumentOffset caretOffset, Char[] allowedChars);
    public void ResetTemplatesCache();
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_0(PropertyChangedEventArgs`1<ITextControl> args);
    [CompilerGeneratedAttribute]
private void <ResetTemplatesCache>b__33_0(Lifetime lifetime);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.ConstantMacroParameter : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [NotNullAttribute]
public string Value { get; }
    public ConstantMacroParameter(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [NotNullAttribute]
public sealed virtual string GetText(IHotspotContext context);
    public sealed virtual IMacroParameterValueNew GetValue(Lifetime lifetime, IHotspotSession session);
    public sealed virtual object Clone();
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.ConstantMacroParameterValue : object {
    [NotNullAttribute]
private string myValue;
    public ConstantMacroParameterValue(string value);
    [NotNullAttribute]
public sealed virtual string GetValue();
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.DelegateMacroParameter : object {
    [NotNullAttribute]
private Func`1<string> myDelegate;
    public DelegateMacroParameter(Func`1<string> returnValue);
    public sealed virtual string GetValue();
}
[UsedImplicitlyAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.EverywhereImpl : MacroImplementationScopeProviderBase {
}
[ObsoleteAttribute("KILL ME PLEASE")]
[MacroDefinitionAttribute("guessElementType")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.GuessElementTypeMacroDef : TypeSuggestionMacroDefBase {
}
[ObsoleteAttribute("KILL ME PLEASE")]
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.GuessElementTypeMacroImpl : TypeSuggestionMacroImplBase {
    public GuessElementTypeMacroImpl(MacroParameterValueCollection arguments);
    protected virtual ICollection`1<IType> GuessTypes(string variable, IHotspotContext context);
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroCallExpression {
    [NotNullAttribute]
public IMacroDefinition Definition { get; }
    public bool CanBeEvaluatedWithoutCommit { get; }
    public string MacroName { get; }
    public abstract virtual IMacroDefinition get_Definition();
    public abstract virtual string GetPlaceholder(IDocument document, ISolution solution);
    public abstract virtual void AddParameter(IMacroParameterValue parameter);
    public abstract virtual bool get_CanBeEvaluatedWithoutCommit();
    public abstract virtual string get_MacroName();
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroDefinition {
    public ParameterInfo[] Parameters { get; }
    public bool CanBeEvaluatedWithoutCommit { get; }
    public abstract virtual ParameterInfo[] get_Parameters();
    public abstract virtual bool get_CanBeEvaluatedWithoutCommit();
    public abstract virtual string GetPlaceholder(IDocument document, ISolution solution, IEnumerable`1<IMacroParameterValue> parameters);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroImplementation {
    public abstract virtual bool HandleExpansion(IHotspotContext context);
    [CanBeNullAttribute]
public abstract virtual HotspotItems GetLookupItems(IHotspotContext context);
    public abstract virtual string EvaluateQuickResult(IHotspotContext context);
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroImplementationScopeProvider {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<ITemplateScopePoint> GetScopes();
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroParameterValue {
    [ObsoleteAttribute("GetValue shall be used instead")]
public abstract virtual string GetText(IHotspotContext context);
    public abstract virtual IMacroParameterValueNew GetValue(Lifetime lifetime, IHotspotSession session);
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroParameterValueNew {
    public abstract virtual string GetValue();
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroUtil {
    [CanBeNullAttribute]
public abstract virtual IReadOnlyList`1<IType> GetExpectedTypes(IHotspotContext context);
    [CanBeNullAttribute]
public abstract virtual IExpression AsExpression(string text, IHotspotContext context);
    [CanBeNullAttribute]
public abstract virtual ICollection`1<IType> GetElementTypes(IExpression collectionExpression);
    [NotNullAttribute]
public abstract virtual ILookupItem CreateDeclaredElementLookupItem(DeclaredElementInstance`1<ITypeOwner> element, IHotspotContext context);
}
[MacroDefinitionAttribute("getAlphaNumericFileNameWithoutExtension")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.AlphaNumericFileNameWithoutExtensionMacroDef : SimpleMacroDefinition {
    public static string Id;
    public bool CanBeEvaluatedWithoutCommit { get; }
    public virtual string GetPlaceholder(IDocument document, ISolution solution, IEnumerable`1<IMacroParameterValue> parameters);
    internal static string Evaluate(IPsiSourceFile sourceFile);
    public virtual bool get_CanBeEvaluatedWithoutCommit();
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.AlphaNumericFileNameWithoutExtensionMacroImpl : SimpleMacroImplementation {
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
}
[MacroDefinitionAttribute("getAlphaNumericMainFileNameWithoutExtension")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.AlphaNumericMainFileNameWithoutExtensionMacroDef : SimpleMacroDefinition {
    public bool CanBeEvaluatedWithoutCommit { get; }
    public virtual string GetPlaceholder(IDocument document, ISolution solution, IEnumerable`1<IMacroParameterValue> parameters);
    internal static string Evaluate(IPsiSourceFile sourceFile);
    public virtual bool get_CanBeEvaluatedWithoutCommit();
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.AlphaNumericMainFileNameWithoutExtensionMacroImpl : SimpleMacroImplementation {
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
}
[MacroDefinitionAttribute("arrayVariable")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.ArrayVariableMacroDef : SimpleMacroDefinition {
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.ArrayVariableMacroImpl : SimpleMacroImplementation {
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
    private static List`1<DeclaredElementInstance`1<ITypeOwner>> GetVariables(IHotspotContext hotspotContext);
}
public abstract class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.BaseCompletionMacroImpl : SimpleMacroImplementation {
    protected CodeCompletionType CompletionType { get; }
    protected abstract virtual CodeCompletionType get_CompletionType();
    public virtual bool HandleExpansion(IHotspotContext context);
}
[MacroDefinitionAttribute("complete")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.BasicCompletionMacroDef : SimpleMacroDefinition {
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.BasicCompletionMacroImpl : BaseCompletionMacroImpl {
    protected CodeCompletionType CompletionType { get; }
    protected virtual CodeCompletionType get_CompletionType();
}
[MacroDefinitionAttribute("fixedTypeName")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.BindToTypeMacroDef : SimpleMacroDefinition {
    public ParameterInfo[] Parameters { get; }
    public virtual ParameterInfo[] get_Parameters();
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.BindToTypeMacroImpl : SimpleMacroImplementation {
    private IMacroParameterValueNew myArgument;
    public BindToTypeMacroImpl(MacroParameterValueCollection arguments);
    public virtual string EvaluateQuickResult(IHotspotContext context);
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
}
[MacroDefinitionAttribute("capitalize")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.CapitalizeMacroDef : SimpleMacroDefinition {
    public ParameterInfo[] Parameters { get; }
    public virtual ParameterInfo[] get_Parameters();
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.CapitalizeMacroImpl : SimpleMacroImplementation {
    private IMacroParameterValueNew myArgument;
    public CapitalizeMacroImpl(MacroParameterValueCollection arguments);
    public virtual string EvaluateQuickResult(IHotspotContext context);
    private static string CapitalizeAlphanum(string s);
    private string Execute(string text);
}
[MacroDefinitionAttribute("clipboard")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.ClipboardContentsMacro : SimpleMacroDefinition {
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.ClipboardContentsMacroImpl : SimpleMacroImplementation {
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
}
[MacroDefinitionAttribute("constant")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.ConstantMacroDef : SimpleMacroDefinition {
    public ParameterInfo[] Parameters { get; }
    public virtual string GetPlaceholder(IDocument document, ISolution solution, IEnumerable`1<IMacroParameterValue> parameters);
    public virtual ParameterInfo[] get_Parameters();
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.ConstantMacroImpl : SimpleMacroImplementation {
    private IMacroParameterValueNew myParameter;
    public ConstantMacroImpl(MacroParameterValueCollection parameters);
    public virtual string EvaluateQuickResult(IHotspotContext context);
}
[MacroDefinitionAttribute("typeMember")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.ContainingTypeMemberNameMacroDef : SimpleMacroDefinition {
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.ContainingTypeMemberNameMacroImpl : SimpleMacroImplementation {
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
}
[MacroDefinitionAttribute("typeName")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.ContainingTypeNameMacroDef : SimpleMacroDefinition {
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.ContainingTypeNameMacroImpl : SimpleMacroImplementation {
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
}
[MacroDefinitionAttribute("typeRef")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.ContainingTypeRefMacroDef : SimpleMacroDefinition {
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.ContainingTypeRefMacroImpl : SimpleMacroImplementation {
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
}
[MacroDefinitionAttribute("context")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.ContextMacroDef : SimpleMacroDefinition {
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.ContextMacroImpl : SimpleMacroImplementation {
    private IHotspotSession mySession;
    public ContextMacroImpl(IHotspotSession session);
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
}
[MacroDefinitionAttribute("getCreationTime")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.CreatedDateTimeMacroDef : SimpleMacroDefinition {
    public ParameterInfo[] Parameters { get; }
    public virtual ParameterInfo[] get_Parameters();
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.CreatedDateTimeMacroImpl : SimpleMacroImplementation {
    private IMacroParameterValueNew myArgument;
    public CreatedDateTimeMacroImpl(MacroParameterValueCollection arguments);
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
    private static string Evaluate(IHotspotContext context, IMacroParameterValueNew argument);
}
[MacroDefinitionAttribute("getCurrentDate")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.CurrentDateMacroDef : SimpleMacroDefinition {
    public ParameterInfo[] Parameters { get; }
    public virtual ParameterInfo[] get_Parameters();
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.CurrentDateMacroImpl : SimpleMacroImplementation {
    private IMacroParameterValueNew myArgument;
    public CurrentDateMacroImpl(MacroParameterValueCollection arguments);
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
    private static string Evaluate(IMacroParameterValueNew argument);
}
[MacroDefinitionAttribute("getCurrentTime")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.CurrentDateTimeMacroDef : SimpleMacroDefinition {
    public ParameterInfo[] Parameters { get; }
    public virtual ParameterInfo[] get_Parameters();
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.CurrentDateTimeMacroImpl : SimpleMacroImplementation {
    private IMacroParameterValueNew myArgument;
    public CurrentDateTimeMacroImpl(MacroParameterValueCollection arguments);
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
    private static string Evaluate(IMacroParameterValueNew argument);
}
[MacroDefinitionAttribute("getCurrentNamespace")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.CurrentNamespaceMacroDef : SimpleMacroDefinition {
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.CurrentNamespaceMacroImpl : SimpleMacroImplementation {
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
    private static string Evaluate(IHotspotContext context);
}
[MacroDefinitionAttribute("decapitalize")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.DecapitalizeMacroDef : SimpleMacroDefinition {
    public ParameterInfo[] Parameters { get; }
    public virtual ParameterInfo[] get_Parameters();
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.DecapitalizeMacroImpl : SimpleMacroImplementation {
    private IMacroParameterValueNew myArgument;
    public DecapitalizeMacroImpl(MacroParameterValueCollection arguments);
    public virtual string EvaluateQuickResult(IHotspotContext context);
    private static string Execute(IMacroParameterValueNew argument);
}
[MacroDefinitionAttribute("getDefaultNamespace")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.DefaultNamespaceMacroDef : SimpleMacroDefinition {
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.DefaultNamespaceMacroImpl : SimpleMacroImplementation {
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
    private static string GetDefaultNamespace(IHotspotContext context);
}
[MacroDefinitionAttribute("fileDefaultNamespace")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.FileDefaultNamespaceMacroDef : SimpleMacroDefinition {
    public static string Id;
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.FileDefaultNamespaceMacroImpl : FileDefaultNamespaceMacroImplBase {
    public FileDefaultNamespaceMacroImpl(MacroParameterValueCollection arguments);
}
public abstract class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.FileDefaultNamespaceMacroImplBase : SimpleMacroImplementation {
    [CanBeNullAttribute]
protected IMacroParameterValueNew Argument;
    protected FileDefaultNamespaceMacroImplBase(MacroParameterValueCollection arguments);
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
    protected virtual string GetDefaultNamespace(IHotspotContext context);
}
[MacroDefinitionAttribute("getFileName")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.FileNameMacroDef : SimpleMacroDefinition {
    public bool CanBeEvaluatedWithoutCommit { get; }
    public virtual string GetPlaceholder(IDocument document, ISolution solution, IEnumerable`1<IMacroParameterValue> parameters);
    public virtual bool get_CanBeEvaluatedWithoutCommit();
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.FileNameMacroImpl : SimpleMacroImplementation {
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
    private static string Evaluate(IHotspotContext context);
}
[MacroDefinitionAttribute("getFileNameWithoutExtension")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.FileNameWithoutExtensionMacroDef : SimpleMacroDefinition {
    public bool CanBeEvaluatedWithoutCommit { get; }
    public virtual string GetPlaceholder(IDocument document, ISolution solution, IEnumerable`1<IMacroParameterValue> parameters);
    internal static string Evaluate(IPsiSourceFile sourceFile);
    public virtual bool get_CanBeEvaluatedWithoutCommit();
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.FileNameWithoutExtensionMacroImpl : SimpleMacroImplementation {
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
}
[MacroDefinitionAttribute("getFullUserName")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.FullUserNameMacroDef : SimpleMacroDefinition {
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.FullUserNameMacroImpl : SimpleMacroImplementation {
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
    [NotNullAttribute]
public static string GetDisplayUserName();
}
public abstract class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.GeneratorMacro : SimpleMacroImplementation {
    [NotNullAttribute]
protected string WorkflowKind { get; }
    [NotNullAttribute]
protected string CommandName { get; }
    [NotNullAttribute]
protected PsiLanguageType Language { get; }
    public virtual bool HandleExpansion(IHotspotContext context);
    public virtual string EvaluateQuickResult(IHotspotContext context);
    protected abstract virtual string get_WorkflowKind();
    protected abstract virtual string get_CommandName();
    protected abstract virtual PsiLanguageType get_Language();
}
[MacroDefinitionAttribute("guessExpectedElementType")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.GuessExpectedElementTypeMacroDef : SimpleMacroDefinition {
    public virtual string GetPlaceholder(IDocument document, ISolution solution, IEnumerable`1<IMacroParameterValue> parameters);
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.GuessExpectedElementTypeMacroImpl : SimpleMacroImplementation {
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
}
[MacroDefinitionAttribute("guessExpectedType")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.GuessExpectedTypeMacroDef : SimpleMacroDefinition {
    public ParameterInfo[] Parameters { get; }
    public virtual ParameterInfo[] get_Parameters();
    public virtual string GetPlaceholder(IDocument document, ISolution solution, IEnumerable`1<IMacroParameterValue> parameters);
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.GuessExpectedTypeMacroImpl : SimpleMacroImplementation {
    [CanBeNullAttribute]
private IEnumerable`1<IMacroParameterValueNew> myArguments;
    public GuessExpectedTypeMacroImpl(MacroParameterValueCollection arguments);
    public virtual string EvaluateQuickResult(IHotspotContext context);
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
}
[MacroDefinitionAttribute("guid")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.GuidMacroDef : SimpleMacroDefinition {
    public virtual string GetPlaceholder(IDocument document, ISolution solution, IEnumerable`1<IMacroParameterValue> parameters);
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.GuidMacroImpl : SimpleMacroImplementation {
    private static String[] ourGuidFormats;
    private static GuidMacroImpl();
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.ICodeCompletionMacroDefinition {
}
[MacroDefinitionAttribute("lineNumber")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.LineNumberMacroDef : SimpleMacroDefinition {
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.LineNumberMacroImpl : SimpleMacroImplementation {
    public virtual string EvaluateQuickResult(IHotspotContext context);
    private static string Evaluate(IHotspotContext context);
}
[MacroDefinitionAttribute("list")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.ListMacroDef : SimpleMacroDefinition {
    public ParameterInfo[] Parameters { get; }
    public virtual ParameterInfo[] get_Parameters();
    public virtual string GetPlaceholder(IDocument document, ISolution solution, IEnumerable`1<IMacroParameterValue> parameters);
    public static IEnumerable`1<string> ParseList(string list);
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.ListMacroImpl : SimpleMacroImplementation {
    private IMacroParameterValueNew myParameter;
    public ListMacroImpl(MacroParameterValueCollection parameters);
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
}
[MacroDefinitionAttribute("getOutputName")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.OutputNameMacroDef : SimpleMacroDefinition {
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.OutputNameMacroImpl : SimpleMacroImplementation {
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
    private static string Evaluate(IHotspotContext context);
}
[MacroDefinitionAttribute("parameterOfType")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.ParameterOfTypeMacroDef : SimpleMacroDefinition {
    public ParameterInfo[] Parameters { get; }
    public virtual ParameterInfo[] get_Parameters();
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.ParameterOfTypeMacroImpl : SimpleMacroImplementation {
    private IMacroParameterValueNew myArgument;
    public ParameterOfTypeMacroImpl(MacroParameterValueCollection arguments);
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
    [CanBeNullAttribute]
private static IEnumerable`1<DeclaredElementInstance`1<ITypeOwner>> GetParameters(IHotspotContext hotspotContext, IType type);
}
[MacroDefinitionAttribute("getProjectName")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.ProjectNameMacroDef : SimpleMacroDefinition {
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.ProjectNameMacroImpl : SimpleMacroImplementation {
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
    private static string Evaluate(IHotspotContext context);
}
[MacroDefinitionAttribute("completeSmart")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.SmartCompletionMacroDef : SimpleMacroDefinition {
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.SmartCompletionMacroImpl : BaseCompletionMacroImpl {
    protected CodeCompletionType CompletionType { get; }
    protected virtual CodeCompletionType get_CompletionType();
}
[MacroDefinitionAttribute("getSolutionName")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.SolutionNameMacroDef : SimpleMacroDefinition {
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.SolutionNameMacroImpl : SimpleMacroImplementation {
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
    private static string Evaluate(IHotspotContext context);
}
[MacroDefinitionAttribute("spacestounderstrokes")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.SpacesToUnderstrokesMacroDef : SimpleMacroDefinition {
    public ParameterInfo[] Parameters { get; }
    public virtual ParameterInfo[] get_Parameters();
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.SpacesToUnderstrokesMacroImpl : SimpleMacroImplementation {
    private IMacroParameterValueNew myArgument;
    public SpacesToUnderstrokesMacroImpl(MacroParameterValueCollection arguments);
    public virtual string EvaluateQuickResult(IHotspotContext context);
    private static string Execute(string text);
}
[MacroDefinitionAttribute("enumerableVariable")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.SuggestEnumerableVariableMacroDef : SimpleMacroDefinition {
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.SuggestEnumerableVariableMacroImpl : SimpleMacroImplementation {
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
    [CanBeNullAttribute]
private static VariablesList GetVariables(IHotspotContext hotspotContext);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.SuggestParameterNameExpression : object {
    private PsiLanguageType myLanguage;
    private INamesCollection myNamesCollection;
    private INamingLanguageService myService;
    public SuggestParameterNameExpression(INamesCollection namesCollection, PsiLanguageType language);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.SuggestParameterNameExpression/<GetAdditionalRangeMarkers>d__4")]
public sealed virtual IEnumerable`1<IRangeMarker> GetAdditionalRangeMarkers();
    public sealed virtual string GetPlaceholder(IDocument document);
    public sealed virtual void HandleExpansion(IHotspotContext context);
    public sealed virtual string EvaluateQuickResult(IHotspotContext context);
    public sealed virtual HotspotItems GetLookupItems(IHotspotContext context);
    public sealed virtual string Serialize();
    public sealed virtual object Clone();
    [CompilerGeneratedAttribute]
private TextLookupItem <GetLookupItems>b__8_0(string name);
}
[MacroDefinitionAttribute("suggestVariableName")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.SuggestVariableNameMacroDef : SimpleMacroDefinition {
}
public abstract class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.SuggestVariableNameMacroImplBase : SuggestVariableNameMacroImplBase {
    [CanBeNullAttribute]
private IEnumerable`1<IMacroParameterValueNew> myArguments;
    protected SuggestVariableNameMacroImplBase(MacroParameterValueCollection arguments);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.SuggestVariableNameMacroImplBase/<GenerateNames>d__2")]
protected virtual IEnumerable`1<Pair`2<string, bool>> GenerateNames(IHotspotContext context);
    [NotNullAttribute]
public IList`1<string> SuggestNames(IHotspotContext context);
    [NotNullAttribute]
protected abstract virtual IList`1<string> SuggestNamesForIdentifier(IIdentifier identifier);
}
[MacroDefinitionAttribute("variableOfType")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.SuggestVariableOfTypeMacroDef : SimpleMacroDefinition {
    public ParameterInfo[] Parameters { get; }
    public virtual ParameterInfo[] get_Parameters();
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.SuggestVariableOfTypeMacroImpl : SimpleMacroImplementation {
    private IMacroParameterValueNew myArgument;
    public SuggestVariableOfTypeMacroImpl(MacroParameterValueCollection arguments);
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
    [CanBeNullAttribute]
private static VariablesList GetVariables(IHotspotContext hotspotContext, IType type);
}
[MacroDefinitionAttribute("suggestVariableType")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.SuggestVariableTypeMacroDef : SimpleMacroDefinition {
}
[MacroDefinitionAttribute("completeType")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.TypeNameCompletionMacroDef : SimpleMacroDefinition {
    public ParameterInfo[] Parameters { get; }
    public virtual ParameterInfo[] get_Parameters();
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.TypeNameCompletionMacroImpl : BaseCompletionMacroImpl {
    private IMacroParameterValueNew myArgument;
    protected CodeCompletionType CompletionType { get; }
    public TypeNameCompletionMacroImpl(MacroParameterValueCollection arguments);
    protected virtual CodeCompletionType get_CompletionType();
    public virtual string EvaluateQuickResult(IHotspotContext context);
}
public abstract class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.TypeSuggestionMacroDefBase : SimpleMacroDefinition {
    public ParameterInfo[] Parameters { get; }
    public virtual ParameterInfo[] get_Parameters();
    public virtual string GetPlaceholder(IDocument document, ISolution solution, IEnumerable`1<IMacroParameterValue> parameters);
}
public abstract class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.TypeSuggestionMacroImplBase : SimpleMacroImplementation {
    [CanBeNullAttribute]
private IMacroParameterValueNew myArgument;
    protected TypeSuggestionMacroImplBase(MacroParameterValueCollection arguments);
    private ICollection`1<IType> CheckArgAndGuessTypes(IMacroParameterValueNew argument, IHotspotContext context);
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
    [CanBeNullAttribute]
protected abstract virtual ICollection`1<IType> GuessTypes(string variable, IHotspotContext context);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.TypeTemplateExpression : object {
    private PsiLanguageType myLanguage;
    private IPsiModule myModule;
    private IList`1<ITypePointer> myTypePointers;
    public TypeTemplateExpression(IEnumerable`1<IType> types, IPsiModule module, PsiLanguageType language);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.TypeTemplateExpression/<GetAdditionalRangeMarkers>d__4")]
public sealed virtual IEnumerable`1<IRangeMarker> GetAdditionalRangeMarkers();
    public sealed virtual string GetPlaceholder(IDocument document);
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotExpression.HandleExpansion(IHotspotContext context);
    public sealed virtual HotspotItems GetLookupItems(IHotspotContext context);
    public sealed virtual string Serialize();
    public sealed virtual string EvaluateQuickResult(IHotspotContext context);
    public sealed virtual object Clone();
}
[MacroDefinitionAttribute("getUpperCaseAlphaNumericFileName")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.UpperCaseAlphaNumericFileNameMacroDef : SimpleMacroDefinition {
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.UpperCaseAlphaNumericFileNameMacroImpl : SimpleMacroImplementation {
    private static Regex NonAlphaNumeric;
    private static UpperCaseAlphaNumericFileNameMacroImpl();
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
    private static string Evaluate(IHotspotContext context);
}
[MacroDefinitionAttribute("getUserName")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.UserNameMacroDef : SimpleMacroDefinition {
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.Implementations.UserNameMacroImpl : SimpleMacroImplementation {
    public virtual string EvaluateQuickResult(IHotspotContext context);
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
    private static string Evaluate();
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroCallExpressionNew : object {
    [NotNullAttribute]
private List`1<IMacroParameterValue> myParameters;
    [CompilerGeneratedAttribute]
private string <MacroName>k__BackingField;
    [CompilerGeneratedAttribute]
private IMacroDefinition <Definition>k__BackingField;
    [NotNullAttribute]
public IList`1<IMacroParameterValue> Parameters { get; }
    public string MacroName { get; }
    public IMacroDefinition Definition { get; }
    public bool CanBeEvaluatedWithoutCommit { get; }
    public MacroCallExpressionNew(IMacroDefinition definition);
    public IList`1<IMacroParameterValue> get_Parameters();
    [CompilerGeneratedAttribute]
public sealed virtual string get_MacroName();
    public sealed virtual string GetPlaceholder(IDocument document, ISolution solution);
    [CompilerGeneratedAttribute]
public sealed virtual IMacroDefinition get_Definition();
    public sealed virtual void AddParameter(IMacroParameterValue parameter);
    public sealed virtual bool get_CanBeEvaluatedWithoutCommit();
    public void SetParameterValue(int parameter, IMacroParameterValue val);
    public sealed virtual string Serialize();
    public sealed virtual object Clone();
    public sealed virtual string EvaluateQuickResult(IHotspotContext context);
    public sealed virtual void HandleExpansion(IHotspotContext context);
    public sealed virtual HotspotItems GetLookupItems(IHotspotContext context);
    public virtual IEnumerable`1<IMacroParameterValueNew> GetParameterValues(IHotspotSession session);
    public void AddParameters(IList`1<string> parameters);
    [CompilerGeneratedAttribute]
private string <Serialize>b__15_1(StringBuilder builder);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroCallExpressionWithArgs : MacroCallExpressionNew {
    private IMacroParameterValueNew[] myArgs;
    public MacroCallExpressionWithArgs(IMacroDefinition definition, IMacroParameterValueNew[] args);
    public virtual IEnumerable`1<IMacroParameterValueNew> GetParameterValues(IHotspotSession session);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroDefinition")]
[ComponentInstantiationAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroDefinitionAttribute : ShellComponentAttribute {
    protected static Instantiation MacroDefinitionInstantiation;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DescriptionResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LongDescriptionResourceName>k__BackingField;
    [NotNullAttribute]
public string Name { get; public set; }
    [NotNullAttribute]
public Type ResourceType { get; public set; }
    [NotNullAttribute]
public string DescriptionResourceName { get; public set; }
    [NotNullAttribute]
public string LongDescriptionResourceName { get; public set; }
    public MacroDefinitionAttribute(string name);
    public MacroDefinitionAttribute(string name, Instantiation instantiation);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Type get_ResourceType();
    [CompilerGeneratedAttribute]
public void set_ResourceType(Type value);
    [CompilerGeneratedAttribute]
public string get_DescriptionResourceName();
    [CompilerGeneratedAttribute]
public void set_DescriptionResourceName(string value);
    [CompilerGeneratedAttribute]
public string get_LongDescriptionResourceName();
    [CompilerGeneratedAttribute]
public void set_LongDescriptionResourceName(string value);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroImplementation")]
[ComponentInstantiationAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroImplementationAttribute : MacroImplementationAttributeBase {
    protected internal static Instantiation MacroImplementationInstantiation;
    [CompilerGeneratedAttribute]
private Type <ScopeProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExpandAndSkip>k__BackingField;
    public Type ScopeProvider { get; public set; }
    public bool IsExpandAndSkip { get; public set; }
    public MacroImplementationAttribute(Instantiation instantiation);
    public virtual IEnumerable`1<ITemplateScopePoint> GetScopes();
    [CompilerGeneratedAttribute]
public Type get_ScopeProvider();
    [CompilerGeneratedAttribute]
public void set_ScopeProvider(Type value);
    [CompilerGeneratedAttribute]
public bool get_IsExpandAndSkip();
    [CompilerGeneratedAttribute]
public void set_IsExpandAndSkip(bool value);
}
public abstract class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroImplementationAttributeBase : ShellComponentAttribute {
    [CompilerGeneratedAttribute]
private Type <Definition>k__BackingField;
    public Type Definition { get; public set; }
    protected MacroImplementationAttributeBase(Instantiation instantiation);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<ITemplateScopePoint> GetScopes();
    [CompilerGeneratedAttribute]
public Type get_Definition();
    [CompilerGeneratedAttribute]
public void set_Definition(Type value);
}
public abstract class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroImplementationScopeProviderBase : object {
    [NotNullAttribute]
private ITemplateScopePoint[] myScopes;
    protected MacroImplementationScopeProviderBase(ITemplateScopePoint[] scopes);
    public sealed virtual IEnumerable`1<ITemplateScopePoint> GetScopes();
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroLexerGenerated : object {
    private static int YY_F;
    private static int YY_NO_STATE;
    private static int YY_NOT_ACCEPT;
    private static int YY_START;
    private static int YY_END;
    private static int YY_NO_ANCHOR;
    private static int YY_BOL;
    private static int YY_EOF;
    protected TokenNodeType currTokenType;
    private int yy_buffer_index;
    private int yy_buffer_start;
    private int yy_buffer_end;
    private IBuffer yy_buffer;
    private int yy_eof_pos;
    private bool yy_at_bol;
    private int yy_lexical_state;
    protected static int YYINITIAL;
    private static Int32[] yy_state_dtrans;
    private static int YY_E_INTERNAL;
    private static int YY_E_MATCH;
    private static String[] yy_error_string;
    private static Int32[] yy_acpt;
    private static Int32[] yy_cmap;
    private static Int32[] yy_rmap;
    private static Int32[0...,0...] yy_nxt;
    public UInt32 LexerStateEx { get; }
    public object CurrentPosition { get; public set; }
    public TokenNodeType TokenType { get; }
    public int TokenStart { get; }
    public int TokenEnd { get; }
    public int LexemIndent { get; }
    public IBuffer Buffer { get; }
    public int EOFPos { get; }
    public MacroLexerGenerated(IBuffer buffer);
    public MacroLexerGenerated(IBuffer buffer, int startOffset, int endOffset);
    private static MacroLexerGenerated();
    protected TokenNodeType makeToken(TokenNodeType type);
    public sealed virtual void Start();
    public sealed virtual void Start(int startOffset, int endOffset, UInt32 state);
    public sealed virtual void Advance();
    public sealed virtual UInt32 get_LexerStateEx();
    public sealed virtual object get_CurrentPosition();
    public sealed virtual void set_CurrentPosition(object value);
    public sealed virtual TokenNodeType get_TokenType();
    public sealed virtual int get_TokenStart();
    public sealed virtual int get_TokenEnd();
    public sealed virtual int get_LexemIndent();
    public sealed virtual IBuffer get_Buffer();
    public sealed virtual int get_EOFPos();
    protected void locateToken();
    private void yybegin(int state);
    private void yy_move_end();
    private static bool yy_isnewline(char c);
    internal string yytext();
    private int yylength();
    private void yy_error(int code, bool fatal);
    public TokenNodeType _locateToken();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroManager : object {
    private IComponentContainer myContainerForFactoring;
    private IDictionary`2<Type, ICollection`1<IMacroImplementation>> myImplementations;
    private Dictionary`2<string, IMacroDefinition> myDefinitionsDictionary;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IMacroDefinition> <Definitions>k__BackingField;
    [NotNullAttribute]
public static MacroManager Instance { get; }
    public IEnumerable`1<IMacroDefinition> Definitions { get; }
    public MacroManager(IEnumerable`1<IMacroDefinition> macroDefinitions, IEnumerable`1<IMacroImplementation> macroImplementations, IComponentContainer containerForFactoring, ILogger logger);
    public static MacroManager get_Instance();
    [CompilerGeneratedAttribute]
public IEnumerable`1<IMacroDefinition> get_Definitions();
    [CanBeNullAttribute]
private static Type GetDefinitionType(IMacroImplementation impl);
    [CanBeNullAttribute]
private static MacroImplementationAttribute GetImplementationAttribute(Type implType);
    [CanBeNullAttribute]
public IMacroImplementation CreateImplementation(Lifetime lifetime, IMacroDefinition def, IEnumerable`1<ITemplateScopePoint> actualScopePoints, IHotspotSession session, IEnumerable`1<IMacroParameterValueNew> values);
    [CanBeNullAttribute]
public Type FindSuitableImplementation(IMacroDefinition definition, IEnumerable`1<ITemplateScopePoint> actualScopePoints);
    [CanBeNullAttribute]
private Type SelectSuitableImplementationType(IEnumerable`1<Type> implementations, IEnumerable`1<ITemplateScopePoint> actualScopePoints);
    [CanBeNullAttribute]
[PureAttribute]
public string GetMacroName(IMacroDefinition macro);
    [CanBeNullAttribute]
[PureAttribute]
public string GetMacroShortDescription(IMacroDefinition macro);
    [CanBeNullAttribute]
[PureAttribute]
public static MacroDefinitionAttribute GetAttribute(IMacroDefinition macro);
    [CanBeNullAttribute]
[PureAttribute]
public static MacroImplementationAttribute GetAttribute(IMacroImplementation macro);
    [CanBeNullAttribute]
[PureAttribute]
private static TAttribute GetAttribute(object macro);
    [CanBeNullAttribute]
[PureAttribute]
public IMacroDefinition GetMacroDefinition(string macroName);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroParameterValueCollection : List`1<IMacroParameterValueNew> {
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroParameterValueCollectionEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static MacroParameterValueCollection ToParameters(IEnumerable`1<IMacroParameterValueNew> parameterValues);
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
public static IMacroParameterValueNew OptionalFirstOrDefault(MacroParameterValueCollection parameterValueCollection);
}
public static class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroParser : object {
    public static IMacroCallExpression Parse(string expression);
    public static IMacroParameterValue ParseParameter(string parameter);
    private static void Advance(ILexer lexer);
    private static string GetString(ILexer lexer, string expression);
    [NotNullAttribute]
private static string LiteralToString(string literal);
    private static IMacroCallExpression ParseMacro(ILexer lexer, string expression);
    private static void ParseParameters(IMacroCallExpression macroCallExpression, ILexer lexer, string expression);
    private static IMacroParameterValue ParseParameterInternal(ILexer lexer, string expression);
    private static IMacroParameterValue ParseVariable(ILexer lexer, string expression);
}
internal class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroTokenNodeType : TokenNodeType {
    public static TokenNodeType COMMA;
    public static TokenNodeType DOT;
    public static TokenNodeType IDENTIFIER;
    public static TokenNodeType LBRACE;
    public static TokenNodeType LITERAL;
    public static TokenNodeType RBRACE;
    public static TokenNodeType WHITESPACE;
    public bool IsWhitespace { get; }
    public bool IsComment { get; }
    public bool IsStringLiteral { get; }
    public bool IsConstantLiteral { get; }
    public bool IsIdentifier { get; }
    public bool IsKeyword { get; }
    public string TokenRepresentation { get; }
    private MacroTokenNodeType(string s, int index);
    private static MacroTokenNodeType();
    public virtual bool get_IsWhitespace();
    public virtual bool get_IsComment();
    public virtual bool get_IsStringLiteral();
    public virtual bool get_IsConstantLiteral();
    public virtual bool get_IsIdentifier();
    public virtual bool get_IsKeyword();
    public virtual string get_TokenRepresentation();
    public virtual LeafElementBase Create(IBuffer buffer, TreeOffset startOffset, TreeOffset endOffset);
}
public static class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroUtil : object {
    [NotNullAttribute]
public static HotspotItems SimpleEvaluateResult(string text);
    [ObsoleteAttribute("Replace implementation with scope-specific implementation")]
[CanBeNullAttribute]
private static IMacroUtil GetMacroUtil(PsiLanguageType languageType);
    [ObsoleteAttribute("Replace implementation with scope-specific implementation")]
[CanBeNullAttribute]
public static IMacroUtil GetMacroUtil(IHotspotContext context);
    [NotNullAttribute]
public static PsiLanguageType GetLanguageType(IHotspotContext context);
    public static VariablesList GetVisibleVariables(IHotspotContext hotspotContext);
    [CanBeNullAttribute]
public static IFile GetFile(IHotspotContext hotspotContext);
    [CanBeNullAttribute]
public static string GetDefaultNamespaceBase(IHotspotContext context, PsiLanguageType languageType);
    private static string LookupDefaultNamespace(IProjectFolder folder, ICollection`1<IProjectFile> excludeItems, PsiLanguageType languageType);
    public static bool IsImplicitlyConvertibleTo(IType from, IType to, ITypeConversionRule conversionRule);
    public static IType AsType(string typeName, IHotspotContext hotspotContext);
}
public abstract class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroUtilBase : object {
    [CompilerGeneratedAttribute]
private PsiLanguageType <LanguageType>k__BackingField;
    protected PsiLanguageType LanguageType { get; }
    protected MacroUtilBase(PsiLanguageType language);
    [CompilerGeneratedAttribute]
protected PsiLanguageType get_LanguageType();
    public sealed virtual IReadOnlyList`1<IType> GetExpectedTypes(IHotspotContext context);
    public sealed virtual IExpression AsExpression(string text, IHotspotContext context);
    public virtual ICollection`1<IType> GetElementTypes(IExpression collectionExpression);
    public virtual ILookupItem CreateDeclaredElementLookupItem(DeclaredElementInstance`1<ITypeOwner> element, IHotspotContext context);
    [CanBeNullAttribute]
protected virtual IReadOnlyList`1<IType> GetExpectedConcreteTypes(ITreeNode element);
    [CanBeNullAttribute]
protected virtual IReadOnlyList`1<ExpectedType> GetExpectedTypes(ITreeNode element);
    public static bool PerformActionOnNode(IHotspotContext context, PsiLanguageType languageType, Action`1<T> action);
    protected abstract virtual IExpression CreateExpression(IPsiModule module, string text);
}
[UsedImplicitlyAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.ManagedPsiImpl : MacroImplementationScopeProviderBase {
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.ParameterInfo : object {
    [CompilerGeneratedAttribute]
private ParameterType <ParameterType>k__BackingField;
    public ParameterType ParameterType { get; }
    public ParameterInfo(ParameterType parameterType);
    [CompilerGeneratedAttribute]
public ParameterType get_ParameterType();
}
public enum JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.ParameterType : Enum {
    public int value__;
    public static ParameterType String;
    public static ParameterType Type;
    public static ParameterType VariableReference;
}
[UsedImplicitlyAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.PsiImpl : MacroImplementationScopeProviderBase {
}
public abstract class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.SimpleMacroDefinition : object {
    [NotNullAttribute]
public ParameterInfo[] Parameters { get; }
    public bool CanBeEvaluatedWithoutCommit { get; }
    public virtual ParameterInfo[] get_Parameters();
    public virtual bool get_CanBeEvaluatedWithoutCommit();
    public virtual string GetPlaceholder(IDocument document, ISolution solution, IEnumerable`1<IMacroParameterValue> parameters);
}
public abstract class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.SimpleMacroImplementation : object {
    public virtual bool HandleExpansion(IHotspotContext context);
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
    public virtual string EvaluateQuickResult(IHotspotContext context);
}
[MacroDefinitionAttribute("suggestIndexVariable")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.SuggestIndexVariableNameMacroDef : SimpleMacroDefinition {
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.SuggestIndexVariableNameMacroImpl : SuggestVariableNameMacroImplBase {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.SuggestIndexVariableNameMacroImpl/<GenerateNames>d__0")]
protected virtual IEnumerable`1<Pair`2<string, bool>> GenerateNames(IHotspotContext context);
}
public abstract class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.SuggestVariableNameMacroImplBase : SimpleMacroImplementation {
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
    private IList`1<string> GetNames(IHotspotContext context);
    [NotNullAttribute]
protected abstract virtual IEnumerable`1<Pair`2<string, bool>> GenerateNames(IHotspotContext context);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.VariableMacroParameter : object {
    [CompilerGeneratedAttribute]
private string <VariableName>k__BackingField;
    public string VariableName { get; }
    public VariableMacroParameter(string variableName);
    [CompilerGeneratedAttribute]
public string get_VariableName();
    public sealed virtual string GetText(IHotspotContext context);
    [NotNullAttribute]
public sealed virtual IMacroParameterValueNew GetValue(Lifetime lifetime, IHotspotSession session);
    public sealed virtual object Clone();
}
public static class JetBrains.ReSharper.Feature.Services.LiveTemplates.MaskListParser : object {
    private static Regex ourRegex;
    private static String[] ourStrings;
    private static MaskListParser();
    public static String[] GetMasks(string pattern);
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.QuickLists.IQuickListProvider {
    public QuickList QuickList { get; public set; }
    public abstract virtual QuickList get_QuickList();
    public abstract virtual void set_QuickList(QuickList value);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.QuickLists.QuickList : object {
    [CompilerGeneratedAttribute]
private JetHashSet`1<TemplateReference> <RemovedEntries>k__BackingField;
    [CompilerGeneratedAttribute]
private OrderedHashSet`1<TemplateReference> <TemplateReferences>k__BackingField;
    public JetHashSet`1<TemplateReference> RemovedEntries { get; }
    private OrderedHashSet`1<TemplateReference> TemplateReferences { get; }
    public TemplateReference Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    [CompilerGeneratedAttribute]
public JetHashSet`1<TemplateReference> get_RemovedEntries();
    [CompilerGeneratedAttribute]
private OrderedHashSet`1<TemplateReference> get_TemplateReferences();
    public sealed virtual int IndexOf(TemplateReference item);
    public sealed virtual void Insert(int index, TemplateReference item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual TemplateReference get_Item(int index);
    public sealed virtual void set_Item(int index, TemplateReference value);
    public sealed virtual void Add(TemplateReference item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TemplateReference item);
    public sealed virtual void CopyTo(TemplateReference[] array, int arrayIndex);
    public sealed virtual bool Remove(TemplateReference item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override IEnumerator`1<TemplateReference> System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Feature.Services.LiveTemplates.QuickLists.TemplateReference>.GetEnumerator();
    public sealed virtual IEnumerator GetEnumerator();
    public void Add(Template template);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.QuickLists.QuickListEx : object {
    private Guid myQuickListUID;
    private string myQuickListTitle;
    private QuickList myQuickList;
    public IList`1<TemplateReference> TemplateReferences { get; }
    public QuickList QuickList { get; }
    public QuickListEx(Guid uid, string quickListTitle);
    public IList`1<TemplateReference> get_TemplateReferences();
    public QuickList get_QuickList();
    public void SaveToStore(IContextBoundSettingsStore store);
    public void SetEntries(OneToSetMap`2<int, TemplateReference> map);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.QuickLists.TemplateReference : object {
    private Guid myUID;
    private Template myTemplate;
    private string myName;
    public Guid UID { get; }
    public string Name { get; public set; }
    [ObsoleteAttribute("I have no meaningful explanation why is it obsolete")]
public Template Template { get; }
    public TemplateReference(Guid guid, string name);
    public TemplateReference(Template template);
    public Guid get_UID();
    public string get_Name();
    public void set_Name(string value);
    public Template get_Template();
    public sealed virtual bool Equals(TemplateReference templateReference);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static TemplateReference CreateFromXml(XmlElement element);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.AtLineStart : InAnyFile {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    private static AtLineStart();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.DirectoryNameScopeProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.DirectoryNameScopeProvider/<ProvideScopePoints>d__0")]
public sealed virtual IEnumerable`1<ITemplateScopePoint> ProvideScopePoints(TemplateAcceptanceContext context);
    public ITemplateScopePoint ReadFromXml(XmlElement scopeElement);
    public sealed virtual ITemplateScopePoint CreateScope(Guid scopeGuid, string typeName, IEnumerable`1<Pair`2<string, string>> customProperties);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.Everywhere : TemplateScopePoint {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    private static Everywhere();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.EverywhereScopeProvider : ScopeProvider {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.EverywhereScopeProvider/<ProvideScopePoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> ProvideScopePoints(TemplateAcceptanceContext context);
    [CompilerGeneratedAttribute]
private ITemplateScopePoint <.ctor>b__0_0(string t);
    [CompilerGeneratedAttribute]
private ITemplateScopePoint <.ctor>b__0_1(string t);
}
internal class JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.FileMaskScopeBe : ScopeOptionsBeBase {
    private InFileWithMask myFileMask;
    private string myLastResult;
    public FileMaskScopeBe(InFileWithMask fileMask);
    public virtual BeControl GetBeControl(Lifetime lifetime);
    public virtual void Done();
    [CompilerGeneratedAttribute]
private void <GetBeControl>b__3_0(PropertyChangedEventArgs`1<string> args);
}
[ScopeCategoryUIProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.GlobalProjectScopeCategoryUIProviderBase : ScopeCategoryUIProvider {
    public string CategoryCaption { get; }
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.GlobalProjectScopeCategoryUIProviderBase/<BuildAllPoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> BuildAllPoints();
    public virtual IScopeOptionsUIBase CreateUI(ITemplateScopePoint point);
    public virtual string Present(ITemplateScopePoint point);
    public virtual string get_CategoryCaption();
    public virtual bool HaveOptionsUIFor(ITemplateScopePoint point);
}
[ScopeCategoryUIProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.GlobalScopeCategoryUIProviderBase : ScopeCategoryUIProvider {
    public string CategoryCaption { get; }
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.GlobalScopeCategoryUIProviderBase/<BuildAllPoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> BuildAllPoints();
    public virtual string get_CategoryCaption();
    public virtual IScopeOptionsUIBase CreateUI(ITemplateScopePoint point);
    public virtual string Present(ITemplateScopePoint point);
    public virtual bool HaveOptionsUIFor(ITemplateScopePoint point);
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.IMainScopePoint {
    public Guid QuickListUID { get; }
    public string QuickListTitle { get; }
    public abstract virtual Guid get_QuickListUID();
    public abstract virtual string get_QuickListTitle();
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.IMandatoryScopePoint {
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.InAnyFile : Everywhere {
    private static Guid DefaultUID;
    private static InAnyFile();
    public virtual Guid GetDefaultUID();
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.InAnyLanguageFile : InAnyFile {
    private static Guid DefaultUID;
    private static InAnyLanguageFile();
    public virtual Guid GetDefaultUID();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.InAnyLanguageFile/<GetExtensions>d__2")]
protected virtual IEnumerable`1<string> GetExtensions();
    public virtual bool IsSubsetOf(ITemplateScopePoint other);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.InAnyManagedFile : InAnyLanguageFile {
    private static Guid DefaultUID;
    private static InAnyManagedFile();
    public virtual Guid GetDefaultUID();
    public virtual bool IsSubsetOf(ITemplateScopePoint other);
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.InAnyManagedProject : InAnyProject {
    private static Guid DefaultUID;
    private static InAnyManagedProject();
    public virtual Guid GetDefaultUID();
    public virtual bool IsSubsetOf(ITemplateScopePoint other);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.InAnyProject : Everywhere {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    public string DefaultFileName { get; }
    public Guid QuickListUID { get; }
    public string QuickListTitle { get; }
    private static InAnyProject();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
    public virtual string get_DefaultFileName();
    public virtual Guid get_QuickListUID();
    public virtual string get_QuickListTitle();
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.InLanguageSpecificProject : InAnyProject {
    private static Guid DefaultUID;
    [CompilerGeneratedAttribute]
private ProjectLanguage <ProjectLanguage>k__BackingField;
    public ProjectLanguage ProjectLanguage { get; }
    public InLanguageSpecificProject(ProjectLanguage projectLanguage);
    private static InLanguageSpecificProject();
    public virtual Guid GetDefaultUID();
    [CompilerGeneratedAttribute]
public ProjectLanguage get_ProjectLanguage();
    public virtual bool IsSubsetOf(ITemplateScopePoint other);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.InProjectDirectories : InAnyProject {
    [CompilerGeneratedAttribute]
private RelativePath[] <Directories>k__BackingField;
    private static Guid ourDefaultGuid;
    internal static string AttrMask;
    public RelativePath[] Directories { get; }
    public string PresentableShortName { get; }
    public InProjectDirectories(string directories);
    public InProjectDirectories(RelativePath[] paths);
    private static InProjectDirectories();
    [CompilerGeneratedAttribute]
public RelativePath[] get_Directories();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
    public virtual bool IsSubsetOf(ITemplateScopePoint other);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.InProjectDirectories/<EnumerateCustomProperties>d__11")]
public virtual IEnumerable`1<Pair`2<string, string>> EnumerateCustomProperties();
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.InProjectDirectory : InProjectDirectories {
    private static Guid ourDefaultGuid;
    public InProjectDirectory(RelativePath directory);
    private static InProjectDirectory();
    public virtual Guid GetDefaultUID();
    public virtual bool IsSubsetOf(ITemplateScopePoint other);
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.IScopeCategoryUIProvider {
    public string CategoryCaption { get; }
    [CanBeNullAttribute]
public IMainScopePoint MainPoint { get; }
    [CanBeNullAttribute]
public IconId Icon { get; }
    public abstract virtual IEnumerable`1<ITemplateScopePoint> BuildAllPoints();
    public abstract virtual IEnumerable`1<ITemplateScopePoint> BuildDefaultScopes();
    public abstract virtual string get_CategoryCaption();
    public abstract virtual IMainScopePoint get_MainPoint();
    public abstract virtual IconId get_Icon();
    public abstract virtual IScopeOptionsUIBase CreateUI(ITemplateScopePoint point);
    public abstract virtual bool HaveOptionsUIFor(ITemplateScopePoint point);
    public abstract virtual string Present(ITemplateScopePoint point);
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.IScopeOptionsBeBase {
    public abstract virtual BeControl GetBeControl(Lifetime lifetime);
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.IScopeOptionsUIBase {
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnNewScopePoint(Action`1<ITemplateScopePoint> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnNewScopePoint(Action`1<ITemplateScopePoint> value);
    public abstract virtual void Done();
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.IScopeProvider {
    public abstract virtual IEnumerable`1<ITemplateScopePoint> ProvideScopePoints(TemplateAcceptanceContext context);
    [CanBeNullAttribute]
public abstract virtual ITemplateScopePoint CreateScope(Guid scopeGuid, string typeName, IEnumerable`1<Pair`2<string, string>> customProperties);
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.ITemplateScopePoint {
    public string Prefix { get; }
    public string PresentableShortName { get; }
    public PsiLanguageType RelatedLanguage { get; }
    public Guid UID { get; public set; }
    public abstract virtual bool IsSubsetOf(ITemplateScopePoint other);
    public abstract virtual string get_Prefix();
    [NotNullAttribute]
public abstract virtual string CalcPrefix(DocumentOffset caretOffset);
    public abstract virtual string get_PresentableShortName();
    public abstract virtual PsiLanguageType get_RelatedLanguage();
    public abstract virtual Guid get_UID();
    public abstract virtual void set_UID(Guid value);
    public abstract virtual Guid GetDefaultUID();
    public abstract virtual string GetTagName();
    public abstract virtual IEnumerable`1<Pair`2<string, string>> EnumerateCustomProperties();
}
internal class JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.ProjectReferenceScopeBe : ScopeOptionsBeBase {
    private InProjectWithReference myMask;
    private string myLastResult;
    public ProjectReferenceScopeBe(InProjectWithReference mask);
    public virtual BeControl GetBeControl(Lifetime lifetime);
    public virtual void Done();
    [CompilerGeneratedAttribute]
private void <GetBeControl>b__3_0(PropertyChangedEventArgs`1<string> args);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.ScopeCategoryManager : object {
    private Lazy`1<IEnumerable`1<IScopeCategoryUIProvider>> myProviders;
    private Lazy`1<Dictionary`2<IScopeCategoryUIProvider, ScopeCategoryUIProviderAttribute>> myCachedProvidersAttribute;
    public ScopeCategoryManager(IImmutableList`1<IScopeCategoryUIProvider> providers);
    private ScopeCategoryUIProviderAttribute GetProviderAttribute(IScopeCategoryUIProvider provider);
    public IEnumerable`1<IScopeCategoryUIProvider> FilterProviders(ScopeFilter filter);
    public IEnumerable`1<IScopeCategoryUIProvider> EnumerateProviders();
    public IScopeCategoryUIProvider GetSupportingProvider(ScopeFilter scopeFilter, ITemplateScopePoint scopePoint);
    public IEnumerable`1<IScopeCategoryUIProvider> GetCoveredProviders(ScopeFilter scopeFilter, ITemplateScopePoint scopePoint);
}
public abstract class JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.ScopeCategoryUIProvider : object {
    [CompilerGeneratedAttribute]
private IMainScopePoint <MainPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <Icon>k__BackingField;
    public string CategoryCaption { get; }
    public IMainScopePoint MainPoint { get; protected set; }
    public IconId Icon { get; }
    protected ScopeCategoryUIProvider(IconId iconName);
    public abstract virtual IEnumerable`1<ITemplateScopePoint> BuildAllPoints();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.ScopeCategoryUIProvider/<BuildDefaultScopes>d__2")]
public virtual IEnumerable`1<ITemplateScopePoint> BuildDefaultScopes();
    public abstract virtual string get_CategoryCaption();
    [CompilerGeneratedAttribute]
public sealed virtual IMainScopePoint get_MainPoint();
    [CompilerGeneratedAttribute]
protected void set_MainPoint(IMainScopePoint value);
    [CompilerGeneratedAttribute]
public virtual IconId get_Icon();
    public virtual IScopeOptionsUIBase CreateUI(ITemplateScopePoint point);
    public virtual bool HaveOptionsUIFor(ITemplateScopePoint point);
    public virtual string Present(ITemplateScopePoint point);
}
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.IScopeCategoryUIProvider")]
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.ScopeCategoryUIProviderAttribute : ShellComponentAttribute {
    [CompilerGeneratedAttribute]
private double <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private ScopeFilter <ScopeFilter>k__BackingField;
    public double Priority { get; public set; }
    public ScopeFilter ScopeFilter { get; public set; }
    public ScopeCategoryUIProviderAttribute(Instantiation instantiation);
    [CompilerGeneratedAttribute]
public double get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(double value);
    [CompilerGeneratedAttribute]
public ScopeFilter get_ScopeFilter();
    [CompilerGeneratedAttribute]
public void set_ScopeFilter(ScopeFilter value);
}
public abstract class JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.ScopedTemplateAcceptorBase : object {
    protected IList`1<ITemplateScopePoint> myScopePoints;
    protected ScopedTemplateAcceptorBase(TemplateAcceptanceContext context, IScopeProvider scopeProvider);
    public virtual bool Accepts(ITemplateContext templateContext);
    [CompilerGeneratedAttribute]
private IEnumerable`1<ITemplateScopePoint> <Accepts>b__2_0(ITemplateScopePoint templateScopePoint);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.ScopedTemplateContext : TemplateContext {
    private IList`1<ITemplateScopePoint> myScopePoints;
    public IEnumerable`1<ITemplateScopePoint> ScopePoints { get; }
    public string Present { get; }
    public ScopedTemplateContext(IEnumerable`1<ITemplateScopePoint> scopePoints);
    public virtual string ToString();
    public virtual IEnumerable`1<ITemplateScopePoint> get_ScopePoints();
    public string get_Present();
}
public enum JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.ScopeFilter : Enum {
    public int value__;
    public static ScopeFilter Language;
    public static ScopeFilter Project;
    public static ScopeFilter Default;
}
public abstract class JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.ScopeOptionsBeBase : object {
    [CompilerGeneratedAttribute]
private Action`1<ITemplateScopePoint> OnNewScopePoint;
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnNewScopePoint(Action`1<ITemplateScopePoint> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnNewScopePoint(Action`1<ITemplateScopePoint> value);
    public virtual void Done();
    public abstract virtual BeControl GetBeControl(Lifetime lifetime);
    protected void InvokeNewScopePoint(ITemplateScopePoint point);
}
public abstract class JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.ScopeProvider : object {
    protected ICollection`1<Func`2<string, ITemplateScopePoint>> Creators;
    public abstract virtual IEnumerable`1<ITemplateScopePoint> ProvideScopePoints(TemplateAcceptanceContext context);
    public virtual ITemplateScopePoint CreateScope(Guid scopeGuid, string typeName, IEnumerable`1<Pair`2<string, string>> customProperties);
    [CanBeNullAttribute]
private ITemplateScopePoint CreateByTypeName(string typeName);
    [CanBeNullAttribute]
protected ITemplateScopePoint TryToCreate(string typeName);
}
public abstract class JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.TemplateHighlightingProvider : object {
    public virtual string GetHighlightingAttributeId(TokenNodeType tokenType);
}
[ShellComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.TemplateScopeManager : object {
    private IEnumerable`1<IScopeProvider> myProviders;
    public static TemplateScopeManager Instance { get; }
    public TemplateScopeManager(IParallelImmutableList`1<IScopeProvider> providers);
    public static TemplateScopeManager get_Instance();
    public static IEnumerable`1<ITemplateScopePoint> EnumerateMatchedRealScopePoints(IEnumerable`1<ITemplateScopePoint> realScopePoints, IEnumerable`1<ITemplateScopePoint> allowedScopePoints, bool ensureMandatory);
    public IEnumerable`1<ITemplateScopePoint> EnumerateRealScopePoints(TemplateAcceptanceContext tac);
    public static bool TemplateIsAvailable(Template template, IEnumerable`1<ITemplateScopePoint> realScopePoints);
    public static bool ScopePointsHaveIntersections(IEnumerable`1<ITemplateScopePoint> sp1, IEnumerable`1<ITemplateScopePoint> sp2);
    public ITemplateScopePoint ReadFromStore(IContextBoundSettingsStore store, GuidIndex templateUidIndex, GuidIndex scopeUidIndex);
}
public abstract class JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.TemplateScopePoint : object {
    public static string AttrType;
    protected string myPrefix;
    protected ICollection`1<Type> AdditionalSuperTypes;
    [CompilerGeneratedAttribute]
private Guid <UID>k__BackingField;
    public string Prefix { get; }
    public string PresentableShortName { get; }
    public PsiLanguageType RelatedLanguage { get; }
    public Guid UID { get; public set; }
    public virtual bool IsSubsetOf(ITemplateScopePoint other);
    public sealed virtual string get_Prefix();
    public virtual string CalcPrefix(DocumentOffset caretOffset);
    public virtual string get_PresentableShortName();
    public virtual PsiLanguageType get_RelatedLanguage();
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_UID();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UID(Guid value);
    public abstract virtual Guid GetDefaultUID();
    public sealed virtual string GetTagName();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.TemplateScopePoint/<EnumerateCustomProperties>d__17")]
public virtual IEnumerable`1<Pair`2<string, string>> EnumerateCustomProperties();
}
[SettingsIndexedKeyAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.QuickListSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "QuicklistEntrySettingDescription", "JetBrains.Application.Settings.GuidIndex")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.EntrySettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "EntryNameSettingDescription")]
public string EntryName;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "EntryPositionSettingDescription")]
public int Position;
}
[SettingsIndexedKeyAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.TemplateSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "TemplateFieldSettingDescription", "System.String")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.FieldSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FieldExpressionSettingDescription")]
public string Expression;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "EditableOccurrenceSettingDescription")]
public int InitialRange;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "PositionInTheListSettingDescription")]
public int Order;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "EditableSectionSettingDescription")]
public GuidIndex InitialSection;
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "IntelliSenseHousekeepingSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.LiveTemplatesHousekeepingSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherHintWasShownSettingDescription")]
public bool HotspotSessionHintIsShown;
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.LiveTemplatesHousekeepingSettingsUpgrader : SettingTablesUpgrader {
    public LiveTemplatesHousekeepingSettingsUpgrader(ProductConfigurations productConfigurations);
    protected virtual void DoUpgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime, SettingsTableBase workspaceSettingsTable, SettingsTableBase globalSettingsTable);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Resources.Settings.PatternsAndTemplatesSettingsKey", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "LiveTemplatesLibrarySettingDescription")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.LiveTemplatesSettings : object {
}
public enum JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.Presence : Enum {
    public int value__;
    public static Presence Mandatory;
    public static Presence OptOut;
    public static Presence OptIn;
}
[SettingsIndexedKeyAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.LiveTemplatesSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "QuicklistSettingDescription", "JetBrains.Application.Settings.GuidIndex")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.QuickListSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ListNameSettingDescription")]
public string Name;
}
[SettingsIndexedKeyAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.TemplateSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "TemplateScopeSettingDescription", "JetBrains.Application.Settings.GuidIndex")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.ScopeSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ScopeTypeSettingDescription")]
public string Type;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "CustomPropertiesSettingDescription")]
public IIndexedEntry`2<string, string> CustomProperties;
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.SectionSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "PlainTextSectionSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.SectionPlainSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "TextSettingDescription")]
public string Text;
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.SectionSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ReferenceSectionSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.SectionReferenceSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "TemplateGuidSettingDescription")]
public GuidIndex TemplateUid;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "FieldsMappingSettingDescription")]
public IIndexedEntry`2<string, string> FieldMapping;
}
[SettingsIndexedKeyAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.TemplateSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "TemplateSectionSettingDescription", "JetBrains.Application.Settings.GuidIndex")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.SectionSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "SectionTypeSettingDescription")]
public TemplateSectionType Type;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "LocationSelectorNameSettingDescription")]
public string LocationSelectorName;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "LocationSelectorConfigSettingDescription")]
public string LocationSelectorConfig;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "PositionInTheListSettingDescription")]
public int Order;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "BuildActionSettingDescription")]
public string BuildAction;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "DependsOnMainFileSettingDescription")]
public bool DependsOnMain;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "TemplateSectionPresenceSettingDescription")]
public Presence Presence;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "TemplateSectionPresenceHintSettingDescription")]
public string PresenceHint;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "SectionMetadataPropertiesSettingDescription")]
public IIndexedEntry`2<string, string> Metadata;
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.StoredTemplatesProvider : object {
    private ISettingsStore mySettingsStore;
    public SimpleSignal ChangedSignal;
    public ISignal`1<CancelEventArgs`1<Template>> BeforeDeleteTemplateSignal;
    private SettingsKey mySettingsKey;
    public static StoredTemplatesProvider Instance { get; }
    public SettingsKey SettingsKey { get; }
    public StoredTemplatesProvider(Lifetime lifetime, ISettingsStore settingsStore);
    public static StoredTemplatesProvider get_Instance();
    public SettingsKey get_SettingsKey();
    protected void SomethingChanged();
    public virtual IEnumerable`1<Template> EnumerateTemplates(IContextBoundSettingsStore settingsStore, TemplateApplicability applicability, bool enabledOnly);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.StoredTemplatesProvider/<EnumerateTemplates>d__14")]
[NotNullAttribute]
public IEnumerable`1<Template> EnumerateTemplates(IContextBoundSettingsStore settingsStore, TemplateApplicability[] applicabilities, bool enabledOnly);
    [CanBeNullAttribute]
public QuickListEx LoadQuickList(IContextBoundSettingsStore store, Guid quickListUID);
    public bool IsTemplateIsDefinedInSettings(Guid uid, IContextBoundSettingsStore settingsStore);
    public static void DumpToFile(VirtualFileSystemPath pathFileStorage, ISettingsStore existingStore, IThreading threading, Action`1<IContextBoundSettingsStore> fSave);
    public bool ConfirmTemplateDelete(Template template);
    public void DeleteTemplate(Template template, IContextBoundSettingsStore store);
    [CanBeNullAttribute]
public Template GetTemplate(IContextBoundSettingsStore store, Guid guid);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.StoredTemplatesUtil : object {
    [ExtensionAttribute]
public static void SetIfChanged(IContextBoundSettingsStore store, Expression`1<Func`2<TKeyClass, TValueClass>> expression, TValueClass value, IDictionary`2<SettingsKey, object> mappingKeys);
}
public enum JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.TemplateApplicability : Enum {
    public int value__;
    public static TemplateApplicability Live;
    public static TemplateApplicability Surround;
    public static TemplateApplicability File;
}
[SettingsIndexedKeyAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.LiveTemplatesSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "SingleTemplateSettingDescription", "JetBrains.Application.Settings.GuidIndex")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.TemplateSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "TemplateShortcutSettingDescription")]
public string Shortcut;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "TemplateDescriptionSettingDescription")]
public string Description;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "TemplateTextSettingDescription")]
public string Text;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "SurroundMnemonicSettingDescription")]
public string Mnemonic;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "BuildActionSettingDescription")]
public string BuildAction;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "UITagSettingDescription")]
public string UITag;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ImageSettingDescription")]
public string Image;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "TemplateIsDisabledSettingDescription")]
public bool IsDisabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "TemplateIsBlessedToAppearInShortSelectionsSettingDescription")]
public bool IsBlessed;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ReformatAfterExpansionSettingDescription")]
public bool Reformat;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShortenQualifiedReferencesSettingDescription")]
public bool ShortenQualifiedReferences;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "IsInvisibleSettingDescription")]
public bool IsInvisible;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "KeywordWithTheSameNameIsRequiredForThisTemplateToAppearInCompletionSettingDescription")]
public bool IsKeywordRequired;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "GroupTemplateByUITagSettingDescription")]
public bool IsGroupedByUITag;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "CategoriesSettingDescription")]
public IIndexedEntry`2<string, string> Categories;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "CustomPropertiesSettingDescription")]
public IIndexedEntry`2<string, string> CustomProperties;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "MetadataPropertiesSettingDescription")]
public IIndexedEntry`2<string, string> Metadata;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "TemplateApplicabilitySettingDescription")]
public IIndexedEntry`2<TemplateApplicability, bool> Applicability;
}
public static class JetBrains.ReSharper.Feature.Services.LiveTemplates.SignalUtil : object {
    public static ISignal`1<TSignal> PropagateFromProperty(Lifetime lifetime, IProperty`1<TValue> untypedProperty, Func`2<TValue, ISignal`1<TSignal>> signalProducer);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ApplicabilityDescriptor : object {
    [CompilerGeneratedAttribute]
private string <DefaultTemplateText>k__BackingField;
    [CompilerGeneratedAttribute]
private ScopeFilter <ScopeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <TemplateImage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FamilyTitle>k__BackingField;
    public string DefaultTemplateText { get; public set; }
    public ScopeFilter ScopeFilter { get; public set; }
    [CanBeNullAttribute]
public IconId TemplateImage { get; public set; }
    public string FamilyTitle { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DefaultTemplateText();
    [CompilerGeneratedAttribute]
public void set_DefaultTemplateText(string value);
    [CompilerGeneratedAttribute]
public ScopeFilter get_ScopeFilter();
    [CompilerGeneratedAttribute]
public void set_ScopeFilter(ScopeFilter value);
    [CompilerGeneratedAttribute]
public IconId get_TemplateImage();
    [CompilerGeneratedAttribute]
public void set_TemplateImage(IconId value);
    [CompilerGeneratedAttribute]
public string get_FamilyTitle();
    [CompilerGeneratedAttribute]
public void set_FamilyTitle(string value);
}
[ShellComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.StoragesLegacyHacks : object {
    private IUIApplication myEnvironment;
    private Dictionary`2<TemplateApplicability, ApplicabilityDescriptor> myDescriptors;
    public StoragesLegacyHacks(IUIApplication environment);
    public ApplicabilityDescriptor GetDescriptor(TemplateApplicability applicability);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Support.AllFileScopeProvider : ScopeProvider {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Support.AllFileScopeProvider/<ProvideScopePoints>d__1")]
public virtual IEnumerable`1<ITemplateScopePoint> ProvideScopePoints(TemplateAcceptanceContext context);
    [CompilerGeneratedAttribute]
private ITemplateScopePoint <.ctor>b__0_0(string t);
}
[FileTemplatesAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Support.AllFileTemplatesSupport : object {
    public static IFileTemplatesSupport Instance;
    public string Name { get; }
    public IEnumerable`1<ITemplateScopePoint> ScopePoints { get; }
    private static AllFileTemplatesSupport();
    public sealed virtual string get_Name();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Support.AllFileTemplatesSupport/<get_ScopePoints>d__4")]
public sealed virtual IEnumerable`1<ITemplateScopePoint> get_ScopePoints();
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Support.FileTemplatesAttribute : ShellComponentAttribute {
    public FileTemplatesAttribute(Instantiation instantiation);
}
public interface JetBrains.ReSharper.Feature.Services.LiveTemplates.Support.IFileTemplatesSupport {
    public string Name { get; }
    public IEnumerable`1<ITemplateScopePoint> ScopePoints { get; }
    public abstract virtual string get_Name();
    public abstract virtual IEnumerable`1<ITemplateScopePoint> get_ScopePoints();
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Support.QuickListSupport : object {
    [CompilerGeneratedAttribute]
private IMainScopePoint <MainPoint>k__BackingField;
    private Predicate`1<ITemplateContext> myTemplateContextAcceptor;
    private Predicate`1<IEnumerable`1<ITemplateScopePoint>> myAcceptanceContextAcceptor;
    [NotNullAttribute]
public IMainScopePoint MainPoint { get; }
    public string Title { get; }
    public QuickListSupport(IMainScopePoint mainPoint);
    [CompilerGeneratedAttribute]
public IMainScopePoint get_MainPoint();
    [ObsoleteAttribute("Deprecated, use overload with scope points")]
public bool AcceptTemplateContext(ITemplateContext context);
    public bool AcceptAcceptanceContext(IEnumerable`1<ITemplateScopePoint> realScopePoints);
    [ObsoleteAttribute("Deprecated, use overload with scope points")]
public bool AcceptAcceptanceContext(TemplateAcceptanceContext context);
    public string get_Title();
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.SurroundTemplates.SupportedQuickList : object {
    private QuickListSupport myQuickListSupport;
    private QuickList myQuickList;
    public QuickListSupport QuickListSupport { get; }
    public QuickList QuickList { get; }
    public IMainScopePoint MainPoint { get; }
    public SupportedQuickList(QuickListSupport quickListSupport, QuickList quickList);
    public QuickListSupport get_QuickListSupport();
    public QuickList get_QuickList();
    public IMainScopePoint get_MainPoint();
    public virtual string ToString();
}
[ShellComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.SurroundTemplates.SurroundManager : object {
    private LiveTemplatesManager myLiveTemplatesManager;
    private TemplateScopeManager myTemplateScopeManager;
    public static SurroundManager Instance { get; }
    public SurroundManager(LiveTemplatesManager liveTemplatesManager, TemplateScopeManager templateScopeManager);
    public static SurroundManager get_Instance();
    public void Execute(Template surround, ISolution solution, ITextControl textControl);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.SurroundTemplates.SurroundManager/<GetSurroundTemplates>d__6")]
private IEnumerable`1<Template> GetSurroundTemplates(ICollection`1<ITemplateScopePoint> realScopePoints, IDictionary`2<Template, string> surroundMnemonics, Func`3<Lifetime, DataContexts, IDataContext> dataContext);
    public ICollection`1<SurroundTemplateItem> GetSurroundTemplates(TemplateAcceptanceContext context);
    public ICollection`1<SurroundTemplateItem> GetSurroundTemplates(ICollection`1<ITemplateScopePoint> realScopePoints, Func`3<Lifetime, DataContexts, IDataContext> dataContext);
}
[SolutionComponentAttribute("10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.SurroundTemplates.SurroundSelectionTypingTracker : object {
    [NotNullAttribute]
private Key`1<OvertypedTextInfo> ourOvertypedInfoKey;
    public SurroundSelectionTypingTracker(Lifetime lifetime, TextControlTypingHandlers typingHandlers, ClipboardManager clipboardManager);
    private void StoreSelectionText(ITextControl textControl);
    private void TypingHandler(ITypingContext typingContext);
    private void ClipboardCutHandler(IDataContext dataContext, DelegateExecute nextExecute);
    [PureAttribute]
private bool IsAllowedTyping(ITypingContext typingContext);
    [PureAttribute]
public bool HasOvertypedText(ITextControl textControl);
    [PureAttribute]
public ValueTuple`2<string, DocumentRange> TryGetOvertypedText(ITextControl textControl);
    public void ForgetText(ITextControl textControl);
}
public enum JetBrains.ReSharper.Feature.Services.LiveTemplates.TemplateAcceptanceInformation : Enum {
    public int value__;
    public static TemplateAcceptanceInformation LIVE;
    public static TemplateAcceptanceInformation SURROUND;
    public static TemplateAcceptanceInformation SURROUND_FROM_OVERTYPING;
    public static TemplateAcceptanceInformation FILE;
    public static TemplateAcceptanceInformation IGNORED;
}
[DefaultMemberAttribute("Item")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.Template : object {
    private Dictionary`2<string, string> myCustomProperties;
    public Dictionary`2<string, string> Metadata;
    public bool IsDisabled;
    private string myDescriptionRaw;
    private ICollection`1<TemplateApplicability> myApplicabilities;
    [CompilerGeneratedAttribute]
private Guid <UID>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<TemplateField> <Fields>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Categories>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<TemplateSection> <Sections>k__BackingField;
    [CompilerGeneratedAttribute]
private ITemplateContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Shortcut>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mnemonic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Reformat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShortenQualifiedReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildAction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UITag>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Invisible>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSaveUndesired>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Pair`2<DocumentRange, IList`1<IDeclaredElement>>> <BindableReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBlessed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsKeywordRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGroupedByUITag>k__BackingField;
    public Guid UID { get; public set; }
    public IEnumerable`1<TemplateApplicability> Applicabilities { get; public set; }
    [NotNullAttribute]
public IList`1<TemplateField> Fields { get; }
    [NotNullAttribute]
public ICollection`1<string> Categories { get; }
    public IList`1<TemplateSection> Sections { get; }
    [NotNullAttribute]
public string Item { get; public set; }
    [CanBeNullAttribute]
[ObsoleteAttribute("Collection of scope points shall be used instead")]
public ITemplateContext Context { get; public set; }
    [NotNullAttribute]
public string Text { get; public set; }
    [NotNullAttribute]
public string Shortcut { get; public set; }
    [NotNullAttribute]
public string Description { get; private set; }
    [CanBeNullAttribute]
public string Image { get; public set; }
    public string Mnemonic { get; public set; }
    [NotNullAttribute]
public string DescriptionRaw { get; public set; }
    public bool Reformat { get; public set; }
    public bool ShortenQualifiedReferences { get; public set; }
    public string BuildAction { get; public set; }
    public string UITag { get; public set; }
    public bool Invisible { get; }
    public IEnumerable`1<ITemplateScopePoint> ScopePoints { get; }
    private bool IsSaveUndesired { get; private set; }
    public List`1<Pair`2<DocumentRange, IList`1<IDeclaredElement>>> BindableReferences { get; public set; }
    public bool IsBlessed { get; public set; }
    public bool IsKeywordRequired { get; public set; }
    public bool IsGroupedByUITag { get; public set; }
    public Template(string shortcut, string description, string text, bool reformat, bool shortenQualifiedReferences, bool invisible, IEnumerable`1<TemplateApplicability> applicabilities);
    public Template(string text, IEnumerable`1<TemplateApplicability> applicabilities);
    [CompilerGeneratedAttribute]
public Guid get_UID();
    [CompilerGeneratedAttribute]
public void set_UID(Guid value);
    public IEnumerable`1<TemplateApplicability> get_Applicabilities();
    public void set_Applicabilities(IEnumerable`1<TemplateApplicability> value);
    public bool IsApplicable(TemplateApplicability applicability);
    [CompilerGeneratedAttribute]
public IList`1<TemplateField> get_Fields();
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Categories();
    [CompilerGeneratedAttribute]
public IList`1<TemplateSection> get_Sections();
    public string get_Item(string key);
    public void set_Item(string key, string value);
    [CompilerGeneratedAttribute]
public ITemplateContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(ITemplateContext value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Shortcut();
    [CompilerGeneratedAttribute]
public void set_Shortcut(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(string value);
    [CompilerGeneratedAttribute]
public string get_Mnemonic();
    [CompilerGeneratedAttribute]
public void set_Mnemonic(string value);
    public string get_DescriptionRaw();
    public void set_DescriptionRaw(string value);
    [CompilerGeneratedAttribute]
public bool get_Reformat();
    [CompilerGeneratedAttribute]
public void set_Reformat(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShortenQualifiedReferences();
    [CompilerGeneratedAttribute]
public void set_ShortenQualifiedReferences(bool value);
    [CompilerGeneratedAttribute]
public string get_BuildAction();
    [CompilerGeneratedAttribute]
public void set_BuildAction(string value);
    [CompilerGeneratedAttribute]
public string get_UITag();
    [CompilerGeneratedAttribute]
public void set_UITag(string value);
    [CompilerGeneratedAttribute]
public bool get_Invisible();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.Template/<get_ScopePoints>d__72")]
public IEnumerable`1<ITemplateScopePoint> get_ScopePoints();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.Template/<ProduceNames>d__75")]
private static IEnumerable`1<string> ProduceNames(string prefix);
    private static void UpdateFieldNames(BeforeAddRemoveIndexEventArgs`1<TemplateField> t);
    public void BindReferencedSections(IContextBoundSettingsStore store);
    [CompilerGeneratedAttribute]
private bool get_IsSaveUndesired();
    [CompilerGeneratedAttribute]
private void set_IsSaveUndesired(bool value);
    [CompilerGeneratedAttribute]
public List`1<Pair`2<DocumentRange, IList`1<IDeclaredElement>>> get_BindableReferences();
    [CompilerGeneratedAttribute]
public void set_BindableReferences(List`1<Pair`2<DocumentRange, IList`1<IDeclaredElement>>> value);
    [CompilerGeneratedAttribute]
public bool get_IsBlessed();
    [CompilerGeneratedAttribute]
public void set_IsBlessed(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsKeywordRequired();
    [CompilerGeneratedAttribute]
public void set_IsKeywordRequired(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsGroupedByUITag();
    [CompilerGeneratedAttribute]
public void set_IsGroupedByUITag(bool value);
    private void Validate();
    public Template Clone(TemplateCloneMode cloneMode);
    [CanBeNullAttribute]
public static Template ReadFromStore(Guid uid, IContextBoundSettingsStore settingsStore);
    public void SaveToStore(ISettingsStore ustore, IDataContext dc);
    public void SaveToStore(IContextBoundSettingsStore store);
    public void SetScopePoints(IEnumerable`1<ITemplateScopePoint> templateScopePoints);
    protected bool Equals(Template other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public enum JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.TemplateCloneMode : Enum {
    public int value__;
    public static TemplateCloneMode Copy;
    public static TemplateCloneMode CreateNew;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.TemplateEx : object {
    [ExtensionAttribute]
public static IEnumerable`1<LanguageService> LanguageServices(IEnumerable`1<ITemplateScopePoint> points);
    [ExtensionAttribute]
public static IEnumerable`1<ILexerFactory> LexerFactories(IEnumerable`1<ITemplateScopePoint> points);
    [ExtensionAttribute]
public static bool TagWith(Template template, string newTag);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.TemplateExpansionData : object {
    [CompilerGeneratedAttribute]
private ICollection`1<IRangeMarker> <RangesToRemove>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IRangeMarker> <SelectionTextRanges>k__BackingField;
    [CompilerGeneratedAttribute]
private OneToListMap`2<TemplateField, IRangeMarker> <HotspotRanges>k__BackingField;
    [CompilerGeneratedAttribute]
private OneToListMap`2<string, IRangeMarker> <PlaceholderSubstitutionRanges>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<TemplateField, IEnumerable`1<ITemplateScopePoint>> <HotSpotScopePoints>k__BackingField;
    [CompilerGeneratedAttribute]
private IRangeMarker <SelectionRange>k__BackingField;
    [CompilerGeneratedAttribute]
private IRangeMarker <EndRange>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SelectionRangeInverted>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public ICollection`1<IRangeMarker> RangesToRemove { get; }
    public ICollection`1<IRangeMarker> SelectionTextRanges { get; }
    public OneToListMap`2<TemplateField, IRangeMarker> HotspotRanges { get; }
    public OneToListMap`2<string, IRangeMarker> PlaceholderSubstitutionRanges { get; }
    public Dictionary`2<TemplateField, IEnumerable`1<ITemplateScopePoint>> HotSpotScopePoints { get; }
    public IRangeMarker SelectionRange { get; public set; }
    public IRangeMarker EndRange { get; public set; }
    public bool SelectionRangeInverted { get; public set; }
    public string Text { get; public set; }
    [CompilerGeneratedAttribute]
public ICollection`1<IRangeMarker> get_RangesToRemove();
    [CompilerGeneratedAttribute]
public ICollection`1<IRangeMarker> get_SelectionTextRanges();
    [CompilerGeneratedAttribute]
public OneToListMap`2<TemplateField, IRangeMarker> get_HotspotRanges();
    [CompilerGeneratedAttribute]
public OneToListMap`2<string, IRangeMarker> get_PlaceholderSubstitutionRanges();
    [CompilerGeneratedAttribute]
public Dictionary`2<TemplateField, IEnumerable`1<ITemplateScopePoint>> get_HotSpotScopePoints();
    [CompilerGeneratedAttribute]
public IRangeMarker get_SelectionRange();
    [CompilerGeneratedAttribute]
public void set_SelectionRange(IRangeMarker value);
    [CompilerGeneratedAttribute]
public IRangeMarker get_EndRange();
    [CompilerGeneratedAttribute]
public void set_EndRange(IRangeMarker value);
    [CompilerGeneratedAttribute]
public bool get_SelectionRangeInverted();
    [CompilerGeneratedAttribute]
public void set_SelectionRangeInverted(bool value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    public void ReplacePlaceholders();
    public void CalculateHotSpotsScopePoints(ISolution solution);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.TemplateField : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InitialRange>k__BackingField;
    [CompilerGeneratedAttribute]
private IHotspotExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <InitialSection>k__BackingField;
    [NotNullAttribute]
public string Name { get; public set; }
    public int InitialRange { get; public set; }
    [CanBeNullAttribute]
public IHotspotExpression Expression { get; public set; }
    public Guid InitialSection { get; public set; }
    public TemplateField(string name, IHotspotExpression expression, int initialRange);
    public TemplateField(string name, string expression, int initialRange);
    public TemplateField(string name, int initialRange);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_InitialRange();
    [CompilerGeneratedAttribute]
public void set_InitialRange(int value);
    [CompilerGeneratedAttribute]
public IHotspotExpression get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(IHotspotExpression value);
    [CompilerGeneratedAttribute]
public Guid get_InitialSection();
    [CompilerGeneratedAttribute]
public void set_InitialSection(Guid value);
    [NotNullAttribute]
public TemplateField Clone(IDictionary`2<Guid, Guid> sectionMapping);
    public virtual string ToString();
    public string GetPlaceholder(IDocument document, ISolution solution);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.TemplateImage : EnumPattern {
    [CompilerGeneratedAttribute]
private IconId <IconId>k__BackingField;
    private static ConcurrentDictionary`2<string, TemplateImage> ourImages;
    [UsedImplicitlyAttribute]
public static TemplateImage Live;
    [UsedImplicitlyAttribute]
public static TemplateImage Surround;
    [UsedImplicitlyAttribute]
public static TemplateImage File;
    private IconId IconId { get; }
    private TemplateImage(string name, IconId iconId);
    private static TemplateImage();
    [CompilerGeneratedAttribute]
private IconId get_IconId();
    [NotNullAttribute]
public static TemplateImage Register(string name, IconId iconId);
    [CanBeNullAttribute]
public static IconId GetImage(string name);
}
public static class JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.TemplateKeywords : object {
    public static string END_KEYWORD;
    public static string SELECTION_END_KEYWORD;
    public static string SELECTION_KEYWORD;
    public static string SELECTION_START_KEYWORD;
    public static List`1<string> KEYWORDS;
    private static TemplateKeywords();
}
public enum JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.TemplateKind : Enum {
    public int value__;
    public static TemplateKind LiveTemplate;
    public static TemplateKind Surround;
    public static TemplateKind FileTemplate;
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.TemplateLexer : object {
    [NotNullAttribute]
private IBuffer myOriginalBuffer;
    [CanBeNullAttribute]
private ILexer myLexer;
    [NotNullAttribute]
private IEnumerable`1<TextRange> myFieldRanges;
    [CanBeNullAttribute]
private IEnumerator`1<TextRange> myFieldRangesEnumerator;
    private bool myFieldRangesEnumeratorFinished;
    [CompilerGeneratedAttribute]
private TokenNodeType <TokenType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TokenStart>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TokenEnd>k__BackingField;
    public object CurrentPosition { get; public set; }
    public TokenNodeType TokenType { get; private set; }
    public int TokenStart { get; private set; }
    public int TokenEnd { get; private set; }
    public IBuffer Buffer { get; }
    public TemplateLexer(IBuffer buffer, ILexerFactory lexerFactory);
    public sealed virtual void Start();
    public sealed virtual void Advance();
    private void ReturnToken();
    private int MapEndOffset(int offset);
    private int MapStartOffset(int offset);
    private void Invalidate();
    public sealed virtual object get_CurrentPosition();
    public sealed virtual void set_CurrentPosition(object value);
    [CompilerGeneratedAttribute]
public sealed virtual TokenNodeType get_TokenType();
    [CompilerGeneratedAttribute]
private void set_TokenType(TokenNodeType value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TokenStart();
    [CompilerGeneratedAttribute]
private void set_TokenStart(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TokenEnd();
    [CompilerGeneratedAttribute]
private void set_TokenEnd(int value);
    public sealed virtual IBuffer get_Buffer();
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.TemplateReferenceSection : TemplateSection {
    [CompilerGeneratedAttribute]
private Guid <TemplateUid>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <FieldMapping>k__BackingField;
    public Guid TemplateUid { get; public set; }
    public IDictionary`2<string, string> FieldMapping { get; public set; }
    public virtual void SaveToStore(IContextBoundSettingsStore store, Dictionary`2<SettingsKey, object> sectionMapping, int sectionNo);
    public virtual TemplateSection Clone(TemplateCloneMode cloneMode);
    [CompilerGeneratedAttribute]
public Guid get_TemplateUid();
    [CompilerGeneratedAttribute]
public void set_TemplateUid(Guid value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_FieldMapping();
    [CompilerGeneratedAttribute]
public void set_FieldMapping(IDictionary`2<string, string> value);
}
public abstract class JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.TemplateSection : object {
    [CompilerGeneratedAttribute]
private Guid <UID>k__BackingField;
    [CompilerGeneratedAttribute]
private TemplateSectionType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocationSelectorName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocationSelectorConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DependsOnMain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildAction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PresenceHint>k__BackingField;
    [CompilerGeneratedAttribute]
private Presence <Presence>k__BackingField;
    public Dictionary`2<string, string> Metadata;
    public Guid UID { get; public set; }
    public TemplateSectionType Type { get; protected set; }
    public string LocationSelectorName { get; public set; }
    public string LocationSelectorConfig { get; public set; }
    public bool DependsOnMain { get; public set; }
    public string BuildAction { get; public set; }
    public string PresenceHint { get; public set; }
    public Presence Presence { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_UID();
    [CompilerGeneratedAttribute]
public void set_UID(Guid value);
    [CompilerGeneratedAttribute]
public TemplateSectionType get_Type();
    [CompilerGeneratedAttribute]
protected void set_Type(TemplateSectionType value);
    [CompilerGeneratedAttribute]
public string get_LocationSelectorName();
    [CompilerGeneratedAttribute]
public void set_LocationSelectorName(string value);
    [CompilerGeneratedAttribute]
public string get_LocationSelectorConfig();
    [CompilerGeneratedAttribute]
public void set_LocationSelectorConfig(string value);
    [CompilerGeneratedAttribute]
public bool get_DependsOnMain();
    [CompilerGeneratedAttribute]
public void set_DependsOnMain(bool value);
    [CompilerGeneratedAttribute]
public string get_BuildAction();
    [CompilerGeneratedAttribute]
public void set_BuildAction(string value);
    [CompilerGeneratedAttribute]
public string get_PresenceHint();
    [CompilerGeneratedAttribute]
public void set_PresenceHint(string value);
    [CompilerGeneratedAttribute]
public Presence get_Presence();
    [CompilerGeneratedAttribute]
public void set_Presence(Presence value);
    public virtual void SaveToStore(IContextBoundSettingsStore store, Dictionary`2<SettingsKey, object> sectionMapping, int sectionNo);
    public abstract virtual TemplateSection Clone(TemplateCloneMode cloneMode);
    protected void FillBaseData(TemplateSection originalSection, TemplateCloneMode cloneMode);
}
public enum JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.TemplateSectionType : Enum {
    public int value__;
    public static TemplateSectionType PlainText;
    public static TemplateSectionType TemplateReference;
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.TemplateTextSection : TemplateSection {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; public set; }
    public virtual void SaveToStore(IContextBoundSettingsStore store, Dictionary`2<SettingsKey, object> sectionMapping, int sectionNo);
    public virtual TemplateSection Clone(TemplateCloneMode cloneMode);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
}
public static class JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.TemplateTokenType : object {
    public static TokenNodeType VARIABLE_PLACEHOLDER;
    private static TemplateTokenType();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.TemplateUtil : object {
    private static Regex VariableRegex;
    private static TemplateUtil();
    [ExtensionAttribute]
public static string GetPresentableName(Template template);
    public static string CreateTemplatePresentableName(string shortcut, string description);
    [CanBeNullAttribute]
public static ITextControl GetOpenedTextControl(IDocument document, ISolution solution, Nullable`1<TextRange> setSelection);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.TemplateUtil/<GetTextControlAsync>d__3")]
[NotNullAttribute]
[ItemCanBeNullAttribute]
public static Task`1<ITextControl> GetTextControlAsync(IDocument document, ISolution solution, TabActivation activation, bool existingOnly, Nullable`1<TextRange> setSelection);
    public static IProjectFile GetProjectFile(IDocument document, ISolution solution);
    public static void ReplacePlaceholders(IEnumerable`1<KeyValuePair`2<TemplateField, IList`1<IRangeMarker>>> hotspotRanges, IDocument document, ISolution solution);
    [NotNullAttribute]
public static TemplateExpansionData GetHotspots(ICollection`1<TemplateField> templateFields, DocumentOffset startOffset, string text, ISolution solution);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ITextControl GetOpenedTextControl(IHotspotContext context);
    [ExtensionAttribute]
[NotNullAttribute]
public static IModuleReferenceResolveContext GetModuleContext(IHotspotContext context);
    [CanBeNullAttribute]
public static ITextControl GetOpenedTextControl(IHotspotSession hotspotSession);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.TemplatesLocalizationManager : object {
    [CompilerGeneratedAttribute]
private IParallelImmutableList`1<ITemplatesLocalizationSource> <sources>P;
    private IDictionary`2<string, string> myLocalizationCache;
    public TemplatesLocalizationManager(IParallelImmutableList`1<ITemplatesLocalizationSource> sources);
    [CanBeNullAttribute]
public string TryGetLocalizedString(string text);
    private string EscapeText(string text);
    public string GetLocalizedString(string text);
    public string GetLocalizationId(string text);
}
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.TemplateUsageCollector : CounterUsagesCollector {
    private EventLogGroup myGroup;
    private VarargEventId myTemplateExpandedEvent;
    private IList`1<string> myAllowedFileTemplateNames;
    private IList`1<string> myAllowedLiveOrSurroundTemplateNames;
    private StringEventField myTemplateNameField;
    private BooleanEventField myIsMultipleField;
    private StringEventField myFileTypeField;
    private EnumEventField`1<TemplateAcceptanceInformation> myLiveTemplateAcceptanceInformationField;
    public TemplateUsageCollector(FeatureUsageLogger featureUsageLogger, EventLogConfiguration eventLogConfiguration);
    public virtual EventLogGroup GetGroup();
    public void RegisterTemplateExpanded(Template template, IProjectFile projectFile, TemplateAcceptanceInformation acceptanceInformation);
}
public static class JetBrains.ReSharper.Feature.Services.LiveTemplates.Util.TemplateActionsUtil : object {
    [NotNullAttribute]
public static IList`1<TemplateLookupItem> GetLookupItems(ITextControl textControl, ISolution solution, bool showDescription, bool matchPrefix, TemplateApplicability applicability, ISpecificCodeCompletionContext completionContext);
}
public class JetBrains.ReSharper.Feature.Services.LiveTemplates.Util.TemplateLookupItem : object {
    [NotNullAttribute]
private Template myTemplate;
    [NotNullAttribute]
private RichText myDisplayName;
    [CanBeNullAttribute]
private RichText myTypeName;
    [CompilerGeneratedAttribute]
private bool <ExpandOnSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private LookupItemPlacement <Placement>k__BackingField;
    public bool ExpandOnSpace { get; public set; }
    public bool IsKeywordRequired { get; }
    [NotNullAttribute]
public Template Template { get; }
    public bool IgnoreSoftOnSpace { get; }
    public LookupItemPlacement Placement { get; }
    public bool CanShrink { get; }
    public RichText DisplayName { get; }
    public bool IsDynamic { get; }
    public int Identity { get; }
    public IconId Image { get; }
    public RichText DisplayTypeName { get; }
    public TemplateLookupItem(Template template, bool showDescription, TemplatesLocalizationManager localizationManager);
    [CompilerGeneratedAttribute]
public bool get_ExpandOnSpace();
    [CompilerGeneratedAttribute]
public void set_ExpandOnSpace(bool value);
    public bool get_IsKeywordRequired();
    public Template get_Template();
    public sealed virtual bool get_IgnoreSoftOnSpace();
    [CompilerGeneratedAttribute]
public sealed virtual LookupItemPlacement get_Placement();
    public sealed virtual bool AcceptIfOnlyMatched(LookupItemAcceptanceContext itemAcceptanceContext);
    public sealed virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    public sealed virtual DocumentRange GetVisualReplaceRange(DocumentRange nameRange);
    public sealed virtual bool get_CanShrink();
    public sealed virtual bool Shrink();
    public sealed virtual void Unshrink();
    public sealed virtual RichText get_DisplayName();
    public sealed virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    public sealed virtual bool get_IsDynamic();
    public sealed virtual int get_Identity();
    public sealed virtual IconId get_Image();
    public sealed virtual RichText get_DisplayTypeName();
}
public interface JetBrains.ReSharper.Feature.Services.Localization.ILocalizableManager {
    public abstract virtual Localizable IsLocalizable(IExpression expression);
    public abstract virtual bool ShouldAnalyzeVerbatimStrings(IContextBoundSettingsStore settingsStore);
}
public enum JetBrains.ReSharper.Feature.Services.Localization.Localizable : Enum {
    public int value__;
    public static Localizable Default;
    public static Localizable Yes;
    public static Localizable No;
}
public enum JetBrains.ReSharper.Feature.Services.Lookup.AnnotationsDisplayKind : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("Do not display")]
public static AnnotationsDisplayKind None;
    [LocalizedDescriptionAttribute("Display [NotNull] and [CanBeNull] only")]
public static AnnotationsDisplayKind Nullness;
    [LocalizedDescriptionAttribute("Display all")]
public static AnnotationsDisplayKind All;
}
public class JetBrains.ReSharper.Feature.Services.Lookup.CharSuffix : Suffix {
    [CompilerGeneratedAttribute]
private char <Presentation>k__BackingField;
    public bool HasPresentation { get; }
    public char Presentation { get; }
    public CharSuffix(char presentation);
    public virtual bool get_HasPresentation();
    [CompilerGeneratedAttribute]
public sealed virtual char get_Presentation();
    public virtual void Playback(ITextControl textControl);
}
public class JetBrains.ReSharper.Feature.Services.Lookup.CompletionHandler : MulticastDelegate {
    public CompletionHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ILookupItem lookupItem, Suffix suffix, LookupItemInsertType lookupItemInsertType);
    public virtual IAsyncResult BeginInvoke(object sender, ILookupItem lookupItem, Suffix suffix, LookupItemInsertType lookupItemInsertType, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class JetBrains.ReSharper.Feature.Services.Lookup.ContextTracker : object {
    public static Char[] LINE_BREAKS;
    [NotNullAttribute]
private ITextControl myTextControl;
    [NotNullAttribute]
private PrefixTextRule myPrefixTextRule;
    [NotNullAttribute]
private ILookupWindowManager myLookupWindowManager;
    [NotNullAttribute]
private IRangeMarker myRangeMarker;
    private int myInitialRelativeOffsetFromStart;
    private int myInitialRelativeOffsetFromEnd;
    private bool myDisallowChangesAfterInitialOffset;
    private bool myInitialPrefixIsShortest;
    private TextRange myOldTextRange;
    private bool myIsValid;
    public ISimpleSignal ContextChanged;
    [NotNullAttribute]
private ILogger myLogger;
    private IShellLocks myLocks;
    public bool IsValid { get; }
    public DocumentRange FullRange { get; }
    public ContextTracker(Lifetime lifetime, ITextControl textControl, DocumentRange textRange, PrefixTextRule prefixTextRule, ISolution solution, ILookupWindowManager lookupWindowManager, bool initialPrefixIsShortest, bool disallowChangesAfterInitialOffset);
    private static ContextTracker();
    public bool get_IsValid();
    public virtual Nullable`1<LookupItemAcceptanceContext> GetItemAcceptanceContext();
    public DocumentRange get_FullRange();
    private void Invalidate();
    private void UpdateOldTextRange();
    private void UpdateOldTextRangeIfValid();
    [CanBeNullAttribute]
private sealed virtual override object JetBrains.Application.changes.IChangeProvider.Execute(IChangeMap changeMap);
    private void OnDocumentChanged(DocumentChange documentChange);
}
public class JetBrains.ReSharper.Feature.Services.Lookup.DefaultSuffixFactory : object {
    public static ISuffixFactory Instance;
    private static DefaultSuffixFactory();
    public virtual Suffix CreateSuffixForLetter(char c);
    public virtual Suffix CreateSuffixForEnter();
    public virtual Suffix CreateSuffixForTab();
    public virtual Suffix CreateSuffixForForceInsert();
}
public class JetBrains.ReSharper.Feature.Services.Lookup.EnterSuffix : Suffix {
    [NotNullAttribute]
public static EnterSuffix Instance;
    public bool HasPresentation { get; }
    public bool IsEmpty { get; }
    public char Presentation { get; }
    private static EnterSuffix();
    public virtual bool get_HasPresentation();
    public virtual bool get_IsEmpty();
    public virtual char get_Presentation();
    public virtual void Playback(ITextControl textControl);
}
public class JetBrains.ReSharper.Feature.Services.Lookup.FeatureSuggestion.CodeCompletionSuggestion : object {
    [NotNullAttribute]
private ILookupWindowManager myLookupWindowManager;
    [NotNullAttribute]
private LifetimeDefinition myLifetimeDefinition;
    [CompilerGeneratedAttribute]
private RichText <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocumentationUrl>k__BackingField;
    public RichText Text { get; }
    public string DocumentationUrl { get; }
    public Lifetime Lifetime { get; }
    public CodeCompletionSuggestion(Lifetime suggesterLifetime, ILookupWindowManager lookupWindowManager, string tipText, string documentationUrl);
    [CompilerGeneratedAttribute]
public sealed virtual RichText get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DocumentationUrl();
    public sealed virtual Lifetime get_Lifetime();
    public virtual void Show();
    public virtual void Close();
}
public interface JetBrains.ReSharper.Feature.Services.Lookup.FeatureSuggestion.ICodeCompletionFeatureSuggestion {
    [NotNullAttribute]
public RichText Text { get; }
    [NotNullAttribute]
public string DocumentationUrl { get; }
    public abstract virtual RichText get_Text();
    public abstract virtual string get_DocumentationUrl();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Lookup.FeatureSuggestion.LookupEx : object {
    [ExtensionAttribute]
public static void AdviseLookupWindow(ILookupWindowManager lookupWindowManager, Lifetime lifetime, Action beforeShownAction, Action closedAction);
}
public class JetBrains.ReSharper.Feature.Services.Lookup.HeadlessLookupWindow : LookupBase {
    protected HeadlessLookupWindowManager myLookupWindowManager;
    private bool myIsShown;
    private LifetimeDefinition myShowLifetime;
    private LookupActions myActions;
    [CompilerGeneratedAttribute]
private ItemsHandler BeforeShownItemsUpdated;
    [CompilerGeneratedAttribute]
private EventHandler CurrentItemChanged;
    [CompilerGeneratedAttribute]
private FiltersChangedHandler ActiveFiltersChanged;
    [CompilerGeneratedAttribute]
private EventHandler BeforeWindowShown;
    [CompilerGeneratedAttribute]
private EventHandler BeforeWindowClosed;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs`1<char>> Typing;
    [CompilerGeneratedAttribute]
private EventHandler Closed;
    protected Lifetime ShowLifetime { get; }
    public List`1<ICompletionListFilter> ActiveFilters { get; public set; }
    public bool IsClosed { get; }
    public ILookupWindow Window { get; }
    public HeadlessLookupWindow(ITextControl textControl, ISolution solution, HeadlessLookupWindowManager lookupWindowManager, ILookupItemsSource lookupItemsSource, LookupWindowOptions options, ISpecificCompletionSorter sorter, IActionManager actionManager, TextControlTypingHandlers typingHandlers);
    protected Lifetime get_ShowLifetime();
    private void InitializeSelection(Lifetime lifetime, ILookupItemsSource lookupItemsSource);
    protected string GetSuffix();
    private void UpdateCurrentItems();
    [CompilerGeneratedAttribute]
public virtual void add_BeforeShownItemsUpdated(ItemsHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_BeforeShownItemsUpdated(ItemsHandler value);
    [CompilerGeneratedAttribute]
public virtual void add_CurrentItemChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_CurrentItemChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public virtual void add_ActiveFiltersChanged(FiltersChangedHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_ActiveFiltersChanged(FiltersChangedHandler value);
    [CompilerGeneratedAttribute]
public void add_BeforeWindowShown(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeforeWindowShown(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_BeforeWindowClosed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeforeWindowClosed(EventHandler value);
    protected virtual void SetSelection(LookupSelection value, bool doNotScrollIfPossible);
    public virtual LookupSelection GetSelection();
    [CompilerGeneratedAttribute]
public virtual void add_Typing(EventHandler`1<EventArgs`1<char>> value);
    [CompilerGeneratedAttribute]
public virtual void remove_Typing(EventHandler`1<EventArgs`1<char>> value);
    public virtual void Dispose();
    public virtual bool Complete(Suffix suffix, LookupItemInsertType completionType);
    public virtual void ShowLookup(Action continuation);
    public virtual void Close();
    public virtual void NotifyTyping(char c);
    public virtual List`1<ICompletionListFilter> get_ActiveFilters();
    public virtual void set_ActiveFilters(List`1<ICompletionListFilter> value);
    public virtual void WaitForCurrentItems();
    public virtual bool get_IsClosed();
    public virtual ILookupWindow get_Window();
    [CompilerGeneratedAttribute]
public virtual void add_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
private void <InitializeSelection>b__7_0();
    [CompilerGeneratedAttribute]
private void <InitializeSelection>b__7_1();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Lookup.HeadlessLookupWindowManager : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CanBeNullAttribute]
private HeadlessLookupWindow myLookupWindow;
    private bool myIsExternalDocumentChangeAllowed;
    private FontsManager myFontsManager;
    private IColorThemeManager myThemeManager;
    private TextControlTypingHandlers myTypingHandlers;
    private IActionManager myActionManager;
    [CompilerGeneratedAttribute]
private EventHandler AfterLookupWindowShown;
    [CompilerGeneratedAttribute]
private EventHandler BeforeLookupWindowShown;
    [CompilerGeneratedAttribute]
private EventHandler LookupWindowClosed;
    [CompilerGeneratedAttribute]
private IUIApplication <UIApplication>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs`1<ILookup>> BeforeLookupWindowClosed;
    internal bool Enabled { get; }
    public ILookup CurrentLookup { get; public set; }
    public bool IsShowing { get; }
    public bool IsExternalDocumentChangeAllowed { get; }
    public IUIApplication UIApplication { get; }
    public HeadlessLookupWindowManager(IUIApplication uiApplication, FontsManager fontsManager, IColorThemeManager themeManager, TextControlTypingHandlers typingHandlers, IActionManager actionManager);
    [CompilerGeneratedAttribute]
internal bool get_Enabled();
    public sealed virtual ILookup get_CurrentLookup();
    public sealed virtual void set_CurrentLookup(ILookup value);
    public virtual ILookup CreateLookup(ITextControl textControl, ILookupItemsSource lookupItems, ISolution solution, LookupWindowOptions options, ISpecificCompletionSorter sorter);
    public sealed virtual void UpdateLookup(ILookup lookup, ILookupItemsSource lookupItems, LookupWindowOptions windowOptions, RichTextBlock[] completionType, CodeCompletionType[] completionTypes);
    public sealed virtual void HideLookup();
    public sealed virtual void ShowProgressAnimation();
    public sealed virtual void HideProgressAnimation();
    public sealed virtual void ShowFeatureSuggestion(ICodeCompletionFeatureSuggestion featureSuggestion);
    public sealed virtual bool get_IsShowing();
    [CompilerGeneratedAttribute]
public sealed virtual void add_AfterLookupWindowShown(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AfterLookupWindowShown(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_BeforeLookupWindowShown(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_BeforeLookupWindowShown(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_LookupWindowClosed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_LookupWindowClosed(EventHandler value);
    public sealed virtual void Dispose();
    public void TearDown();
    public sealed virtual bool get_IsExternalDocumentChangeAllowed();
    [CompilerGeneratedAttribute]
public sealed virtual IUIApplication get_UIApplication();
    public sealed virtual IDisposable GetExternalDocumentChangeCookie();
    public sealed virtual JetFont GetLookupWindowFont(bool useCompletionVsFond);
    public sealed virtual ColorTheme GetColorScheme();
    [CompilerGeneratedAttribute]
public void add_BeforeLookupWindowClosed(EventHandler`1<EventArgs`1<ILookup>> value);
    [CompilerGeneratedAttribute]
public void remove_BeforeLookupWindowClosed(EventHandler`1<EventArgs`1<ILookup>> value);
    [CompilerGeneratedAttribute]
private void <GetExternalDocumentChangeCookie>b__37_0();
    [CompilerGeneratedAttribute]
private void <GetExternalDocumentChangeCookie>b__37_1();
}
public interface JetBrains.ReSharper.Feature.Services.Lookup.IItemsByLocation`1 {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual void Append(ItemsLocation location, TLookupItem item);
    public abstract virtual void Append(ItemsLocation location, IEnumerable`1<TLookupItem> items);
    [NotNullAttribute]
[PureAttribute]
public abstract virtual IReadOnlyList`1<TLookupItem> Get(ItemsLocation location);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<TLookupItem> AllItemsTopMixedBottom();
}
public interface JetBrains.ReSharper.Feature.Services.Lookup.ILookup {
    [NotNullAttribute]
public ITextControl TextControl { get; }
    [NotNullAttribute]
public IEnumerable`1<ILookupItem> Items { get; }
    [NotNullAttribute]
public IEnumerable`1<ILookupItem> FilteredItems { get; }
    public bool IsClosed { get; }
    [NotNullAttribute]
public List`1<ICompletionListFilter> ActiveFilters { get; public set; }
    [NotNullAttribute]
public string Prefix { get; }
    public ISolution Solution { get; }
    public abstract virtual ITextControl get_TextControl();
    public abstract virtual LookupSelection GetSelection();
    public abstract virtual IEnumerable`1<ILookupItem> get_Items();
    public abstract virtual IEnumerable`1<ILookupItem> get_FilteredItems();
    public abstract virtual bool get_IsClosed();
    public abstract virtual List`1<ICompletionListFilter> get_ActiveFilters();
    public abstract virtual void set_ActiveFilters(List`1<ICompletionListFilter> value);
    public abstract virtual string get_Prefix();
    public abstract virtual ISolution get_Solution();
    [CompilerGeneratedAttribute]
public abstract virtual void add_BeforeShownItemsUpdated(ItemsHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BeforeShownItemsUpdated(ItemsHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CurrentItemChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CurrentItemChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ItemCompleted(CompletionHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ItemCompleted(CompletionHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Typing(EventHandler`1<EventArgs`1<char>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Typing(EventHandler`1<EventArgs`1<char>> value);
    public abstract virtual bool Complete(Suffix suffix, LookupItemInsertType lookupItemInsertType);
    public abstract virtual void ShowLookup(Action continuation);
    public abstract virtual void Close();
    public abstract virtual LookupItemCompletor CreateCompletor(Suffix sufix, LookupItemInsertType insertType);
    public abstract virtual void NotifyTyping(char c);
    public abstract virtual CompletionAction IsCharacterAcceptable(char c);
    public abstract virtual bool HasContinuationInCurrentItemsList(char c);
    public abstract virtual IEnumerable`1<ILookupItem> GetContinuation(char c);
    public abstract virtual bool ApplyItemOnTyping(char c);
    public abstract virtual void WaitForCurrentItems();
    public abstract virtual void OnActiveFiltersChanged(IEnumerable`1<ICompletionListFilter> activeFilters);
}
public interface JetBrains.ReSharper.Feature.Services.Lookup.ILookupItemSelectionStrategy {
    [PureAttribute]
public abstract virtual LookupSelection GetSelection(FilteredLookupItems filteredItems, LookupSelection currentSelection, LookupSelectionKind lookupSelectionKind);
}
public interface JetBrains.ReSharper.Feature.Services.Lookup.ILookupItemsOwner {
    [CanBeNullAttribute]
public IDocument Document { get; }
    [CanBeNullAttribute]
public IPsiSourceFile SourceFile { get; }
    [NotNullAttribute]
public IContextBoundSettingsStore SettingsStore { get; }
    [NotNullAttribute]
public LookupItemsOwnerFactory Services { get; }
    public IdentifierMatchingStyle MatchingStyle { get; }
    public EditorBrowsableProcessingType EditorBrowsableProcessing { get; }
    public bool ShowSignatures { get; }
    public bool ShowTypes { get; }
    public ParenthesesInsertType ParenthesesInsertType { get; }
    public IntellisenseEnabledType IntellisenseEnabled { get; }
    public bool ParameterInfoAutopopupOn { get; }
    public abstract virtual IDocument get_Document();
    public abstract virtual IPsiSourceFile get_SourceFile();
    public abstract virtual IContextBoundSettingsStore get_SettingsStore();
    public abstract virtual LookupItemsOwnerFactory get_Services();
    public abstract virtual IdentifierMatchingStyle get_MatchingStyle();
    public abstract virtual EditorBrowsableProcessingType get_EditorBrowsableProcessing();
    public abstract virtual bool get_ShowSignatures();
    public abstract virtual bool get_ShowTypes();
    public abstract virtual ParenthesesInsertType get_ParenthesesInsertType();
    public abstract virtual IntellisenseEnabledType get_IntellisenseEnabled();
    public abstract virtual bool get_ParameterInfoAutopopupOn();
}
public interface JetBrains.ReSharper.Feature.Services.Lookup.ILookupItemsSource {
    [NotNullAttribute]
public IReadOnlyList`1<EvaluatedLookupItem> Items { get; }
    public DocumentRange CompletionRange { get; }
    public ILookupItemSelectionStrategy SelectionStrategy { get; }
    [NotNullAttribute]
public PrefixTextRule PrefixTextRule { get; }
    [NotNullAttribute]
public ILookupResolveContext LookupResolveContext { get; }
    public abstract virtual IReadOnlyList`1<EvaluatedLookupItem> get_Items();
    public abstract virtual DocumentRange get_CompletionRange();
    public abstract virtual ILookupItemSelectionStrategy get_SelectionStrategy();
    public abstract virtual PrefixTextRule get_PrefixTextRule();
    public abstract virtual ILookupResolveContext get_LookupResolveContext();
}
public interface JetBrains.ReSharper.Feature.Services.Lookup.ILookupResolveContext {
    [NotNullAttribute]
public abstract virtual IDisposable EnableInScope();
}
public interface JetBrains.ReSharper.Feature.Services.Lookup.ILookupServiceProvider {
    public abstract virtual string BuildQualifierText(DeclaredElementInstance declaredElementInstance, QualifierKind qualifierKind);
    public abstract virtual void BindToType(ISolution solution, ITextControl textControl, DocumentRange textRange, ITypePointer typePointer, IRangeMarker& caretPositionRangeMarker);
    public abstract virtual void BindToDeclaredElement(ISolution solution, IElementInstancePointer`1<T> instance, ITextControl textControl, DocumentRange range, IRangeMarker& caretPositionRangeMarker);
    public abstract virtual DocumentRange BindToDeclaredElements(ISolution solution, ICollection`1<IElementInstancePointer`1<T>> instances, ITextControl textControl, DocumentRange range, IRangeMarker& caretPositionRangeMarker);
}
public interface JetBrains.ReSharper.Feature.Services.Lookup.ILookupWindowManager {
    [CanBeNullAttribute]
public ILookup CurrentLookup { get; public set; }
    public bool IsShowing { get; }
    public bool IsExternalDocumentChangeAllowed { get; }
    public IUIApplication UIApplication { get; }
    public abstract virtual ILookup get_CurrentLookup();
    public abstract virtual void set_CurrentLookup(ILookup value);
    [NotNullAttribute]
public abstract virtual ILookup CreateLookup(ITextControl textControl, ILookupItemsSource lookupItems, ISolution solution, LookupWindowOptions windowOptions, ISpecificCompletionSorter sorter);
    public abstract virtual void UpdateLookup(ILookup lookup, ILookupItemsSource lookupItems, LookupWindowOptions windowOptions, RichTextBlock[] completionType, CodeCompletionType[] completionTypes);
    public abstract virtual void HideLookup();
    public abstract virtual void ShowProgressAnimation();
    public abstract virtual void HideProgressAnimation();
    public abstract virtual void ShowFeatureSuggestion(ICodeCompletionFeatureSuggestion featureSuggestion);
    public abstract virtual bool get_IsShowing();
    [CompilerGeneratedAttribute]
public abstract virtual void add_AfterLookupWindowShown(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AfterLookupWindowShown(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_BeforeLookupWindowShown(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BeforeLookupWindowShown(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_LookupWindowClosed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LookupWindowClosed(EventHandler value);
    public abstract virtual bool get_IsExternalDocumentChangeAllowed();
    public abstract virtual IUIApplication get_UIApplication();
    public abstract virtual IDisposable GetExternalDocumentChangeCookie();
    public abstract virtual JetFont GetLookupWindowFont(bool useCompletionVsFond);
    public abstract virtual ColorTheme GetColorScheme();
}
public interface JetBrains.ReSharper.Feature.Services.Lookup.ISuffixFactory {
    public abstract virtual Suffix CreateSuffixForLetter(char c);
    public abstract virtual Suffix CreateSuffixForEnter();
    public abstract virtual Suffix CreateSuffixForTab();
    public abstract virtual Suffix CreateSuffixForForceInsert();
}
public class JetBrains.ReSharper.Feature.Services.Lookup.ItemsByLocation`1 : object {
    [CanBeNullAttribute]
private List`1<TLookupItem> myTopItems;
    [CanBeNullAttribute]
private List`1<TLookupItem> myMixedItems;
    [CanBeNullAttribute]
private List`1<TLookupItem> myBottomItems;
    public int Count { get; }
    private ItemsByLocation`1(ItemsByLocation`1<TLookupItem> sourceItems);
    public sealed virtual int get_Count();
    public sealed virtual void Append(ItemsLocation location, TLookupItem item);
    public sealed virtual void Append(ItemsLocation location, IEnumerable`1<TLookupItem> items);
    public void Replace(ItemsLocation location, IEnumerable`1<TLookupItem> items);
    [PureAttribute]
public sealed virtual IReadOnlyList`1<TLookupItem> Get(ItemsLocation location);
    [PureAttribute]
public bool HasItems(ItemsLocation location);
    [NotNullAttribute]
[PureAttribute]
public ItemsByLocation`1<TLookupItem> Copy();
    [CanBeNullAttribute]
[PureAttribute]
private List`1<TLookupItem> GetList(ItemsLocation location);
    [NotNullAttribute]
[PureAttribute]
private List`1<TLookupItem> GetOrCreateList(ItemsLocation location);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Lookup.ItemsByLocation`1/<GetEnumerator>d__15")]
public sealed virtual IEnumerator`1<ItemsWithLocation<TLookupItem>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Lookup.ItemsByLocation`1/<AllItemsTopMixedBottom>d__17")]
public sealed virtual IEnumerable`1<TLookupItem> AllItemsTopMixedBottom();
}
public class JetBrains.ReSharper.Feature.Services.Lookup.ItemsHandler : MulticastDelegate {
    public ItemsHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, IEnumerable`1<MatchedLookupItem> items);
    public virtual IAsyncResult BeginInvoke(object sender, IEnumerable`1<MatchedLookupItem> items, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum JetBrains.ReSharper.Feature.Services.Lookup.ItemsLocation : Enum {
    public int value__;
    public static ItemsLocation Top;
    public static ItemsLocation Bottom;
    public static ItemsLocation Mixed;
}
public class JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters : object {
    private Lifetime myLifetime;
    private Dictionary`2<LayouterIds, ActiveLayouter> myActiveLayouters;
    private IContextBoundSettingsStore myBoundSettingsStore;
    [NotNullAttribute]
public ITextControl TextControl;
    internal bool OptionParameterInfoBelow { get; }
    internal LookupAndParameterInfoLayouters(Lifetime lifetime, ITextControl textControl, ISolution solution, ISettingsStore store);
    internal bool get_OptionParameterInfoBelow();
    [NotNullAttribute]
public IPopupLayouter CreateLookupLayouter(Lifetime lifetime, IAnchoringRect anchor);
    [NotNullAttribute]
public IPopupLayouter CreateLookupTooltipLayouter(Lifetime lifetime, IAnchoringRect anchor);
    [NotNullAttribute]
public IPopupLayouter CreateParameterInfoLayouter(Lifetime lifetime, IAnchoringRect anchor);
    protected ICollection`1<Anchoring2D> GetAvailDispositions(LayouterIds id);
    [NotNullAttribute]
protected IPopupLayouter CreateLayouter(Lifetime lifetime, LayouterIds id, IAnchoringRect anchor, bool bAllowNonStrictRecursion);
    protected void DirtyHackLookupAndParameterInfoDispositions();
    protected void UpdateLayout();
    [CompilerGeneratedAttribute]
private object <UpdateLayout>b__14_0();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager : object {
    private Lifetime myLifetime;
    private IThreading myThreading;
    private ISettingsStore mySettingsStore;
    private ISolution mySolution;
    private LayoutersForTextControls myTextControlsPropertyImpl;
    private Dictionary`2<ITextControl, LookupAndParameterInfoLayouters> myMapTextControlToLayouters;
    [NotNullAttribute]
public LayoutersForTextControls TextControls { get; }
    public LookupAndParameterInfoLayoutersManager(Lifetime lifetime, IThreading threading, ISettingsStore settingsStore, ISolution solution);
    public LayoutersForTextControls get_TextControls();
    private LookupAndParameterInfoLayouters GetForTextControl(ITextControl textcontrol);
}
public enum JetBrains.ReSharper.Feature.Services.Lookup.LookupCompletionStyle : Enum {
    public int value__;
    public static LookupCompletionStyle ApplyItemOnTypingAnyNonCharacter;
    public static LookupCompletionStyle ApplyItemOnTypingSpecificSymbol;
}
public enum JetBrains.ReSharper.Feature.Services.Lookup.LookupFocusBehaviour : Enum {
    public int value__;
    public static LookupFocusBehaviour Hard;
    public static LookupFocusBehaviour Soft;
    public static LookupFocusBehaviour SoftWhenEmpty;
    public static LookupFocusBehaviour HardAtStart;
}
[RegisterHighlighterAttribute("ReSharper Completion Replacement Range")]
public class JetBrains.ReSharper.Feature.Services.Lookup.LookupHighlightingTracker : object {
    private static string HighlightingKey;
    private ITextControl myTextControl;
    private ILookupItem myLookupItem;
    private ContextTracker myContextTracker;
    public static string CompletionReplacementID;
    private Lifetime myLifetime;
    [CanBeNullAttribute]
private SequentialLifetimes myHighlighterSequence;
    private IShellLocks myShellLocks;
    private IDocumentMarkupManager myDocumentMarkupManager;
    public LookupHighlightingTracker(Lifetime lifetime, ITextControl textControl, ILookupItem lookupItem, ContextTracker tracker, IShellLocks shellLocks, IDocumentMarkupManager documentMarkupManager);
    private static LookupHighlightingTracker();
    public void StartHighlighting();
    private void SetHighlighter(DocumentRange range);
    [PureAttribute]
private DocumentRange EvaluateTextRange();
    [CompilerGeneratedAttribute]
private void <StartHighlighting>b__10_0();
    [CompilerGeneratedAttribute]
private void <StartHighlighting>b__10_1();
}
public enum JetBrains.ReSharper.Feature.Services.Lookup.LookupItemInsertType : Enum {
    public int value__;
    public static LookupItemInsertType Insert;
    public static LookupItemInsertType Replace;
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Lookup.LookupItemsOwnerFactory : object {
    private CodeCompletionSettingsService myCodeCompletionSettings;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingsStore <SettingsStore>k__BackingField;
    [CompilerGeneratedAttribute]
private PsiIconManager <PsiIconManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaredElementDescriptionPresenter <DeclaredElementDescriptionPresenter>k__BackingField;
    [CompilerGeneratedAttribute]
private ILanguageManager <LanguageManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiServices <PsiServices>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentManager <DocumentManager>k__BackingField;
    [NotNullAttribute]
public ISolution Solution { get; }
    [NotNullAttribute]
public ISettingsStore SettingsStore { get; }
    [NotNullAttribute]
public PsiIconManager PsiIconManager { get; }
    [NotNullAttribute]
public IDeclaredElementDescriptionPresenter DeclaredElementDescriptionPresenter { get; }
    [NotNullAttribute]
public ILanguageManager LanguageManager { get; }
    [NotNullAttribute]
public IPsiServices PsiServices { get; }
    [NotNullAttribute]
public DocumentManager DocumentManager { get; }
    public LookupItemsOwnerFactory(ISolution solution, ISettingsStore settingsStore, PsiIconManager psiIconManager, IDeclaredElementDescriptionPresenter declaredElementDescriptionPresenter, ILanguageManager languageManager, DocumentManager documentManager, IPsiServices services, CodeCompletionSettingsService codeCompletionSettings);
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    [CompilerGeneratedAttribute]
public ISettingsStore get_SettingsStore();
    [CompilerGeneratedAttribute]
public PsiIconManager get_PsiIconManager();
    [CompilerGeneratedAttribute]
public IDeclaredElementDescriptionPresenter get_DeclaredElementDescriptionPresenter();
    [CompilerGeneratedAttribute]
public ILanguageManager get_LanguageManager();
    [CompilerGeneratedAttribute]
public IPsiServices get_PsiServices();
    [CompilerGeneratedAttribute]
public DocumentManager get_DocumentManager();
    [NotNullAttribute]
public ILookupItemsOwner CreateLookupItemsOwner(ISolution solution, IDocument document);
    [NotNullAttribute]
public ILookupItemsOwner CreateLookupItemsOwner(IDocument document, IContextBoundSettingsStore settingsStore, IPsiSourceFile sourceFile);
}
public enum JetBrains.ReSharper.Feature.Services.Lookup.LookupReplaceBehaviour : Enum {
    public int value__;
    public static LookupReplaceBehaviour AlwaysInsert;
    public static LookupReplaceBehaviour AlwaysReplace;
    public static LookupReplaceBehaviour EnterInsertsTabReplaces;
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Feature.Services.Lookup.LookupSelection : ValueType {
    [CompilerGeneratedAttribute]
private ILookupItem <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private LookupSelectionKind <Kind>k__BackingField;
    [CanBeNullAttribute]
public ILookupItem Item { get; }
    public LookupSelectionKind Kind { get; }
    public bool IsEmpty { get; }
    public LookupSelection(ILookupItem item, LookupSelectionKind kind);
    [CompilerGeneratedAttribute]
public ILookupItem get_Item();
    [CompilerGeneratedAttribute]
public LookupSelectionKind get_Kind();
    public bool get_IsEmpty();
    public sealed virtual bool Equals(LookupSelection other);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum JetBrains.ReSharper.Feature.Services.Lookup.LookupSelectionKind : Enum {
    public int value__;
    public static LookupSelectionKind Selected;
    public static LookupSelectionKind Focused;
}
public static class JetBrains.ReSharper.Feature.Services.Lookup.LookupUtil : object {
    private static DeclaredElementPresenterStyle ourPresenter;
    private static LookupUtil();
    [NotNullAttribute]
public static string GetParametersString(IDeclaredElement element, PsiLanguageType language);
    public static bool IsProperty(IDeclaredElement declaredElement);
    public static void ShowParameterInfo(ISolution solution, ITextControl textControl, ILookupItemsOwner owner);
    public static void ShowParameterInfo(ISolution solution, ITextControl textControl, DocumentRange range, IDeclaredElement signature, ILookupItemsOwner owner);
    public static void MoveParameterInfoOnTop(ISolution solution);
    [PureAttribute]
public static DocumentOffset GetEffectiveCaretOffset(ITextControl textControl);
    public static void AddContainerToDisplayName(PsiLanguageType languageType, RichText displayName, IDeclaredElement declaredElement);
    public static string GetContainer(PsiLanguageType languageType, IDeclaredElement declaredElement);
    public static void AddInformationText(RichText displayName, string text);
    public static void AddInformationText(RichText displayName, string text, TextStyle textStyle);
    [NotNullAttribute]
[PureAttribute]
public static RichText FormatLookupString(string text);
    [NotNullAttribute]
[PureAttribute]
public static RichText FormatLookupString(string text, JetRgbaColor color);
    [NotNullAttribute]
[PureAttribute]
public static RichText FormatTypeString(string text);
    public static void MarkAsNotImportant(RichText richText, TextRange textRange);
    public static void AddEmphasize(RichText richText, TextRange textRange);
    public static void StrikeOut(RichText richText);
    public static void InsertTailType(ITextControl textControl, DocumentOffset offset, TailType tailType, ISolution solution, bool emulateTypingOfSpace, PsiLanguageType language);
    private static void InsertTokens(ITextControl textControl, TokenNodeType[] tokens, DocumentOffset offset, BracketsBalanceEvaluator balanceEvaluator, ILexer tailLexer);
    private static bool IsNewLine(ILexer lexer, DocumentOffset offset);
    private static void InsertAsText(ITextControl editor, DocumentOffset offset, IEnumerable`1<TokenNodeType> tail);
    [NotNullAttribute]
private static string GetTokenPresentation(TokenNodeType tailItem);
    [NotNullAttribute]
public static IList`1<ILookupItem> SortByName(IReadOnlyCollection`1<ILookupItem> items);
    [NotNullAttribute]
public static IReadOnlyList`1<ILookupItem> SortByName(IReadOnlyCollection`1<T> items, Func`2<T, ILookupItem> selector);
    [CanBeNullAttribute]
public static MatchingResult MatchesPrefixSimple(string text, string prefix);
    public static void AssertDocumentRangeIsValid(DocumentRange range, object host);
    [CanBeNullAttribute]
public static LookupItemCompletor CreateCompletor(LookupItemAcceptanceContext itemAcceptanceContext, ILookupItem item, LookupItemInsertType lookupItemInsertType, ISolution solution, Suffix suffix, ITextControl textControl);
    public static DocumentRange BindRange(ISolution solution, ITextControl textControl, DocumentRange nameRange, ICollection`1<IElementInstancePointer`1<T>> pointers, PsiLanguageType languageType, IRangeMarker& caretPositionRangeMarker);
    public static void BindRange(ISolution solution, ITextControl textControl, DocumentRange nameRange, IElementInstancePointer`1<T> pointer, PsiLanguageType languageType, IRangeMarker& caretPositionRangeMarker);
    [CanBeNullAttribute]
[PureAttribute]
public static MatchingResult MatchPrefix(IdentifierMatcher identifierMatcher, string text);
    [NotNullAttribute]
[PureAttribute]
public static IdentifierMatcher CreateMatcher(string prefix, IdentifierMatchingStyle matchingStyle);
    [PureAttribute]
private static bool IsNotWorthShowingAnnotationAttribute(string shortName);
    [PureAttribute]
private static bool IsNullnessAnnotationAttribute(string shortName);
    [NotNullAttribute]
public static RichText GetAnnotations(PsiLanguageType languageType, IAttributesSet attributesSet, IPsiServices psiServices, AnnotationsDisplayKind annotationsDisplayKind, DeclaredElementPresenterTextStyles textStyles);
    [NotNullAttribute]
public static RichText GetAnnotations(PsiLanguageType languageType, IAttributesSet attributesSet, IPsiServices psiServices, AnnotationsDisplayKind annotationsDisplayKind, DeclaredElementPresenterTextStyles textStyles, Func`3<string, IAttributeInstance, bool> includeAttributePredicate);
    [CanBeNullAttribute]
public static RichTextBlock GetDescriptionForDeclaredElementLookupItem(ILookupItem lookupItem, ITextControl textControl, ISolution solution);
    [CanBeNullAttribute]
public static RichTextBlock GetDescriptionForDeclaredElementLookupItem(ILookupItem lookupItem, PsiLanguageType presentationLanguage);
    [CanBeNullAttribute]
public static RichTextBlock GetDescriptionForDeclaredElementLookupItem(DeclaredElementInstance declaredElementInstance, ILookupItem lookupItem, PsiLanguageType presentationLanguage);
    [CompilerGeneratedAttribute]
internal static bool <GetAnnotations>g__ExternalAnnotationMatchesNrtSignature|35_0(ICompiledElement compiledElement, NullableAnnotation annotation);
}
public class JetBrains.ReSharper.Feature.Services.Lookup.LookupWindowOptions : object {
    private LookupItemInsertType myCustomEnterInsertType;
    private LookupItemInsertType myCustomTabInsertType;
    [CompilerGeneratedAttribute]
private JetFont <LookupFont>k__BackingField;
    [CompilerGeneratedAttribute]
private LookupReplaceBehaviour <ReplaceBehaviour>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HighlightReplaceRange>k__BackingField;
    [CompilerGeneratedAttribute]
private LookupWindowRenderOptions <RenderOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NarrowList>k__BackingField;
    [CompilerGeneratedAttribute]
private LookupCompletionStyle <CompletionAcceptanceStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaseSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InitialPrefixIsShortest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LeftAlignTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowParameterInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private LookupFocusBehaviour <FocusBehaviour>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisallowChangesAfterInitialOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<char, CompletionAction> <CharsThatContinueCompletion>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ICompletionListFilter> <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDynamic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEmpty>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Multiplier>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemsLocation <ItemsLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAutomaticCompletion>k__BackingField;
    [CompilerGeneratedAttribute]
private ISuffixFactory <SuffixFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentifierMatchingStyle <IdentifierMatchingStyle>k__BackingField;
    public JetFont LookupFont { get; public set; }
    public LookupReplaceBehaviour ReplaceBehaviour { get; public set; }
    public bool HighlightReplaceRange { get; public set; }
    public LookupWindowRenderOptions RenderOptions { get; }
    public bool NarrowList { get; public set; }
    public LookupCompletionStyle CompletionAcceptanceStyle { get; public set; }
    public bool CaseSensitive { get; public set; }
    public bool InitialPrefixIsShortest { get; public set; }
    public bool LeftAlignTypes { get; public set; }
    public bool IsHelper { get; public set; }
    public bool ShowParameterInfo { get; public set; }
    public LookupFocusBehaviour FocusBehaviour { get; public set; }
    public bool DisallowChangesAfterInitialOffset { get; public set; }
    public Func`2<char, CompletionAction> CharsThatContinueCompletion { get; public set; }
    public IReadOnlyList`1<ICompletionListFilter> Filters { get; public set; }
    public bool IsDynamic { get; public set; }
    public bool IsEmpty { get; public set; }
    public int Multiplier { get; public set; }
    public ItemsLocation ItemsLocation { get; public set; }
    public bool IsAutomaticCompletion { get; public set; }
    public ISuffixFactory SuffixFactory { get; public set; }
    public IdentifierMatchingStyle IdentifierMatchingStyle { get; public set; }
    public LookupItemInsertType EnterInsertType { get; }
    public LookupItemInsertType TabInsertType { get; }
    public LookupWindowOptions(ILookupWindowManager lookupWindowManager, IContextBoundSettingsStore settingsStore, LookupItemInsertType customEnterInsertType, LookupItemInsertType customTabInsertType);
    [CompilerGeneratedAttribute]
public JetFont get_LookupFont();
    [CompilerGeneratedAttribute]
public void set_LookupFont(JetFont value);
    [CompilerGeneratedAttribute]
public LookupReplaceBehaviour get_ReplaceBehaviour();
    [CompilerGeneratedAttribute]
public void set_ReplaceBehaviour(LookupReplaceBehaviour value);
    [CompilerGeneratedAttribute]
public bool get_HighlightReplaceRange();
    [CompilerGeneratedAttribute]
public void set_HighlightReplaceRange(bool value);
    [CompilerGeneratedAttribute]
public LookupWindowRenderOptions get_RenderOptions();
    [CompilerGeneratedAttribute]
public bool get_NarrowList();
    [CompilerGeneratedAttribute]
public void set_NarrowList(bool value);
    [CompilerGeneratedAttribute]
public LookupCompletionStyle get_CompletionAcceptanceStyle();
    [CompilerGeneratedAttribute]
public void set_CompletionAcceptanceStyle(LookupCompletionStyle value);
    [CompilerGeneratedAttribute]
public bool get_CaseSensitive();
    [CompilerGeneratedAttribute]
public void set_CaseSensitive(bool value);
    [CompilerGeneratedAttribute]
public bool get_InitialPrefixIsShortest();
    [CompilerGeneratedAttribute]
public void set_InitialPrefixIsShortest(bool value);
    [CompilerGeneratedAttribute]
public bool get_LeftAlignTypes();
    [CompilerGeneratedAttribute]
public void set_LeftAlignTypes(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsHelper();
    [CompilerGeneratedAttribute]
public void set_IsHelper(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowParameterInfo();
    [CompilerGeneratedAttribute]
public void set_ShowParameterInfo(bool value);
    [CompilerGeneratedAttribute]
public LookupFocusBehaviour get_FocusBehaviour();
    [CompilerGeneratedAttribute]
public void set_FocusBehaviour(LookupFocusBehaviour value);
    [CompilerGeneratedAttribute]
public bool get_DisallowChangesAfterInitialOffset();
    [CompilerGeneratedAttribute]
public void set_DisallowChangesAfterInitialOffset(bool value);
    [CompilerGeneratedAttribute]
public Func`2<char, CompletionAction> get_CharsThatContinueCompletion();
    [CompilerGeneratedAttribute]
public void set_CharsThatContinueCompletion(Func`2<char, CompletionAction> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ICompletionListFilter> get_Filters();
    [CompilerGeneratedAttribute]
public void set_Filters(IReadOnlyList`1<ICompletionListFilter> value);
    [CompilerGeneratedAttribute]
public bool get_IsDynamic();
    [CompilerGeneratedAttribute]
public void set_IsDynamic(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsEmpty();
    [CompilerGeneratedAttribute]
public void set_IsEmpty(bool value);
    [CompilerGeneratedAttribute]
public int get_Multiplier();
    [CompilerGeneratedAttribute]
public void set_Multiplier(int value);
    [CompilerGeneratedAttribute]
public ItemsLocation get_ItemsLocation();
    [CompilerGeneratedAttribute]
public void set_ItemsLocation(ItemsLocation value);
    [CompilerGeneratedAttribute]
public bool get_IsAutomaticCompletion();
    [CompilerGeneratedAttribute]
public void set_IsAutomaticCompletion(bool value);
    [CompilerGeneratedAttribute]
public ISuffixFactory get_SuffixFactory();
    [CompilerGeneratedAttribute]
public void set_SuffixFactory(ISuffixFactory value);
    [CompilerGeneratedAttribute]
public IdentifierMatchingStyle get_IdentifierMatchingStyle();
    [CompilerGeneratedAttribute]
public void set_IdentifierMatchingStyle(IdentifierMatchingStyle value);
    public LookupItemInsertType get_EnterInsertType();
    public LookupItemInsertType get_TabInsertType();
    private CompletionAction DefaultCharsThatContinueCompletion(char c);
    [NotNullAttribute]
[PureAttribute]
public LookupWindowOptions Clone();
    public CompletionAction IsCharacterAcceptable(char c);
}
public class JetBrains.ReSharper.Feature.Services.Lookup.LookupWindowRenderOptions : object {
    public JetRgbaColor Background;
    public JetRgbaColor Border;
    public JetRgbaColor LookupScrollBarBackground;
    public JetRgbaColor LookupScrollBarThumb;
    public JetRgbaColor ItemBackground;
    public JetRgbaColor ItemForeground;
    public JetRgbaColor ItemBorder;
    public JetRgbaColor SelectedItemBackground;
    public JetRgbaColor SelectedItemForeground;
    public JetRgbaColor SelectedItemBorder;
    public JetRgbaColor HoverItemBackground;
    public JetRgbaColor HoverItemForeground;
    public JetRgbaColor HoverItemBorder;
    public JetRgbaColor NewItemColor;
    public LookupWindowRenderOptions(ColorTheme theme);
}
public class JetBrains.ReSharper.Feature.Services.Lookup.NoopSelectionStrategy : object {
    [NotNullAttribute]
public static ILookupItemSelectionStrategy Instance;
    private static NoopSelectionStrategy();
    public sealed virtual LookupSelection GetSelection(FilteredLookupItems filteredItems, LookupSelection currentSelection, LookupSelectionKind lookupSelectionKind);
}
public class JetBrains.ReSharper.Feature.Services.Lookup.NotResolvingLookupContext : object {
    [CompilerGeneratedAttribute]
private static ILookupResolveContext <Instance>k__BackingField;
    [NotNullAttribute]
public static ILookupResolveContext Instance { get; }
    private static NotResolvingLookupContext();
    [CompilerGeneratedAttribute]
public static ILookupResolveContext get_Instance();
    public sealed virtual IDisposable EnableInScope();
}
public class JetBrains.ReSharper.Feature.Services.Lookup.PsiLookupResolveContext : object {
    [CanBeNullAttribute]
private IPsiSourceFile mySourceFile;
    [NotNullAttribute]
private IModuleReferenceResolveContext myModuleReferenceResolveContext;
    public PsiLookupResolveContext(IPsiSourceFile sourceFile);
    [NotNullAttribute]
public static ILookupResolveContext TryCreate();
    public sealed virtual IDisposable EnableInScope();
}
public class JetBrains.ReSharper.Feature.Services.Lookup.SelectionStrategy : object {
    [NotNullAttribute]
private IReadOnlyCollection`1<ILookupItem> myOrder;
    [NotNullAttribute]
public IReadOnlyCollection`1<ILookupItem> Order { get; }
    public SelectionStrategy(IReadOnlyCollection`1<ILookupItem> fullList);
    public IReadOnlyCollection`1<ILookupItem> get_Order();
    public sealed virtual LookupSelection GetSelection(FilteredLookupItems filteredItems, LookupSelection currentSelection, LookupSelectionKind lookupSelectionKind);
}
public class JetBrains.ReSharper.Feature.Services.Lookup.SelectionStrategyForAlphabeticallySorting : object {
    [NotNullAttribute]
public static ILookupItemSelectionStrategy Instance;
    private static SelectionStrategyForAlphabeticallySorting();
    public sealed virtual LookupSelection GetSelection(FilteredLookupItems filteredItems, LookupSelection currentSelection, LookupSelectionKind lookupSelectionKind);
}
public class JetBrains.ReSharper.Feature.Services.Lookup.SelectionStrategyForRelevanceSorting : object {
    [NotNullAttribute]
public static ILookupItemSelectionStrategy Instance;
    private static SelectionStrategyForRelevanceSorting();
    public sealed virtual LookupSelection GetSelection(FilteredLookupItems filteredItems, LookupSelection currentSelection, LookupSelectionKind lookupSelectionKind);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntellisenseSettingsKey", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "LookupWindowSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.Lookup.Settings.LookupWindowSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "LookupWindowHeightSettingDescription")]
public int LookupHeight;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "NarrowDownLookupListOnTypingSettingDescription")]
public bool NarrowList;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowFunctionSignaturesSettingDescription")]
public bool ShowSignatures;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowTypesSettingDescription")]
public bool ShowTypes;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowFunctionSummarySettingDescription")]
public bool ShowSummary;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowCompletionTypeSettingDescription")]
public bool ShowCompletionType;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowAnnotationsSettingDescription")]
public AnnotationsDisplayKind ShowAnnotations;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "UseCompletionFontForLookupsSettingDescription")]
public bool UseCompletionFontForLookups;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "HighlightNewlyAddedItemsSettingDescription")]
public bool HighlightAddedItems;
}
[ObsoleteAttribute("Deprecated, use LookupWindowSettingsKey")]
public class JetBrains.ReSharper.Feature.Services.Lookup.SettingsUpgrade.LookupOptions : object {
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Property`1<int> LookupHeight;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Property`1<bool> NarrowList;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Property`1<bool> ShowSignatures;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Property`1<bool> ShowSummary;
    private static string TagName;
    public LookupOptions(IComponentSettingsProvider shellSettingsComponent, Lifetime lifetime);
    private sealed virtual override void JetBrains.Application.Configuration.IXmlReadable.ReadFromXml(XmlElement element);
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Lookup.SettingsUpgrade.LookupWindowSettingsUpgrade : object {
    public sealed virtual void Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
}
[ObsoleteAttribute("Deprecated, use LookupWindowSettingsKey")]
public class JetBrains.ReSharper.Feature.Services.Lookup.SettingsUpgrade.OldFontsManagerSettings : object {
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Property`1<bool> UseCompletionFontForLookups;
    public OldFontsManagerSettings(IComponentSettingsProvider shellSettingsComponent, Lifetime lifetime);
    public sealed virtual void ReadFromXml(XmlElement element);
}
public class JetBrains.ReSharper.Feature.Services.Lookup.StaticLookupItemsSource : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<EvaluatedLookupItem> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <CompletionRange>k__BackingField;
    [CompilerGeneratedAttribute]
private ILookupItemSelectionStrategy <SelectionStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private PrefixTextRule <PrefixTextRule>k__BackingField;
    [CompilerGeneratedAttribute]
private ILookupResolveContext <LookupResolveContext>k__BackingField;
    public IReadOnlyList`1<EvaluatedLookupItem> Items { get; }
    public DocumentRange CompletionRange { get; }
    public ILookupItemSelectionStrategy SelectionStrategy { get; }
    public PrefixTextRule PrefixTextRule { get; }
    public ILookupResolveContext LookupResolveContext { get; }
    public StaticLookupItemsSource(IReadOnlyList`1<ILookupItem> lookupItems, ILookupItemSelectionStrategy selectionStrategy, DocumentRange completionRange, ILookupResolveContext lookupResolveContext, PrefixTextRule prefixTextRule);
    public StaticLookupItemsSource(IReadOnlyList`1<EvaluatedLookupItem> lookupItems, ILookupItemSelectionStrategy selectionStrategy, DocumentRange completionRange, PrefixTextRule prefixTextRule, ILookupResolveContext lookupResolveContext);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<EvaluatedLookupItem> get_Items();
    [CompilerGeneratedAttribute]
public sealed virtual DocumentRange get_CompletionRange();
    [CompilerGeneratedAttribute]
public sealed virtual ILookupItemSelectionStrategy get_SelectionStrategy();
    [CompilerGeneratedAttribute]
public sealed virtual PrefixTextRule get_PrefixTextRule();
    [CompilerGeneratedAttribute]
public sealed virtual ILookupResolveContext get_LookupResolveContext();
}
public abstract class JetBrains.ReSharper.Feature.Services.Lookup.Suffix : object {
    [NotNullAttribute]
public static Suffix Empty;
    public bool HasPresentation { get; }
    public char Presentation { get; }
    public bool IsEmpty { get; }
    private static Suffix();
    public abstract virtual bool get_HasPresentation();
    public abstract virtual char get_Presentation();
    public abstract virtual void Playback(ITextControl textControl);
    public virtual bool get_IsEmpty();
}
public class JetBrains.ReSharper.Feature.Services.Lookup.TabSuffix : Suffix {
    [NotNullAttribute]
public static TabSuffix Instance;
    public bool HasPresentation { get; }
    public bool IsEmpty { get; }
    public char Presentation { get; }
    private static TabSuffix();
    public virtual bool get_HasPresentation();
    public virtual bool get_IsEmpty();
    public virtual char get_Presentation();
    public virtual void Playback(ITextControl textControl);
}
public static class JetBrains.ReSharper.Feature.Services.Lookup.Theming.LookupThemeColor : object {
    public static ThemeColor LookupWindowBackground;
    public static ThemeColor LookupWindowBorder;
    public static ThemeColor LookupItemBackground;
    public static ThemeColor LookupItemForeground;
    public static ThemeColor LookupItemBorder;
    public static ThemeColor LookupSelectedItemBackground;
    public static ThemeColor LookupSelectedItemForeground;
    public static ThemeColor LookupSelectedItemBorder;
    public static ThemeColor LookupHoverItemBackground;
    public static ThemeColor LookupHoverItemForeground;
    public static ThemeColor LookupHoverItemBorder;
    public static ThemeColor LookupMatchedTextForeground;
    public static ThemeColor NewItemColor;
    public static ThemeColor LookupScrollBarBackground;
    public static ThemeColor LookupScrollBarThumb;
    public static ThemeColor LookupScrollBarThumbHover;
    private static LookupThemeColor();
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Lookup.Theming.LookupThemeColorFiller : object {
    public virtual void FillColorTheme(ColorTheme t);
}
public class JetBrains.ReSharper.Feature.Services.Lookup.VariableComparer : object {
    public sealed virtual int Compare(ILookupItem x, ILookupItem y);
}
public enum JetBrains.ReSharper.Feature.Services.MatchingBrace.BraceMatchingPosition : Enum {
    public int value__;
    public static BraceMatchingPosition DISABLED;
    public static BraceMatchingPosition OUTER_SIDE;
    public static BraceMatchingPosition BOTH_SIDES;
}
public enum JetBrains.ReSharper.Feature.Services.MatchingBrace.BraceMatchingStyle : Enum {
    public int value__;
    public static BraceMatchingStyle COLOR;
    public static BraceMatchingStyle OUTLINE;
}
public interface JetBrains.ReSharper.Feature.Services.MatchingBrace.ISimpleMatchingBraceProvider {
    public abstract virtual bool IsLeftBracket(TokenNodeType tokenType);
    public abstract virtual bool IsRightBracket(TokenNodeType tokenType);
    public abstract virtual bool Match(TokenNodeType token1, TokenNodeType token2);
    public abstract virtual int Compare(TokenNodeType x, TokenNodeType y);
}
public class JetBrains.ReSharper.Feature.Services.MatchingBrace.MatchingBraceHighlightingInfo : object {
    public int Position1;
    public int Position2;
    public bool IsMatched;
    [CompilerGeneratedAttribute]
private Func`1<RichTextBlock> <InvisibleBraceHintProvider>k__BackingField;
    public Func`1<RichTextBlock> InvisibleBraceHintProvider { get; public set; }
    public MatchingBraceHighlightingInfo(int position1, int position2, bool isMatched);
    [CompilerGeneratedAttribute]
public Func`1<RichTextBlock> get_InvisibleBraceHintProvider();
    [CompilerGeneratedAttribute]
public void set_InvisibleBraceHintProvider(Func`1<RichTextBlock> value);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.MatchingBrace.MatchingBraceHighlightingProperties : object {
    public static Expression`1<Func`2<MatchingBraceHighlightingSettings, BraceMatchingStyle>> StyleExpression;
    public static Expression`1<Func`2<MatchingBraceHighlightingSettings, BraceMatchingPosition>> PositionExpression;
    public static Expression`1<Func`2<MatchingBraceHighlightingSettings, bool>> ShowMatchingBraceHeaderWithInlayHint;
    private static MatchingBraceHighlightingProperties();
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.Editor.EditorSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "MatchingBraceHighlightingSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.MatchingBrace.MatchingBraceHighlightingSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "MatchingBraceHighlightingStyleSettingDescription")]
public BraceMatchingStyle Style;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "MatchingBraceHighlightingPositionSettingDescription")]
public BraceMatchingPosition Position;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "MatchingBraceHighlightingSettingsShowMatchingBraceHeaderWithInlayHint")]
public bool ShowMatchingBraceHeaderWithInlayHint;
}
public static class JetBrains.ReSharper.Feature.Services.MatchingBrace.MatchingBraceUtil : object {
    public static bool IsPositionVisible(ITextControl textControl, int position);
    [CanBeNullAttribute]
public static RichTextBlock PrepareRichText(ITextControl textControl, ITreeNode construct, ITreeNode stopperNode, bool addStopperStyle);
    public static DocumentRange PrepareRange(IDocument document, ITreeNode construct, ITreeNode stopperNode);
}
public static class JetBrains.ReSharper.Feature.Services.MatchingBrace.XmlLikeMatchingBraceUtil : object {
    public static MatchingBraceHighlightingInfo TryHighlightToLeft(CachingLexer lexer, int caretPos, XmlLikeToLeftTokenProcessor processor, ISolution solution, ITextControl textControl, Func`4<ISolution, ITextControl, int, Func`1<RichTextBlock>> createInvisibleHint);
    public static MatchingBraceHighlightingInfo TryHighlightToRight(CachingLexer lexer, int caretPos, XmlLikeToRightTokenProcessor processor);
    private static bool CheckNames(CachingLexer lexer, int headerPos, int footerPos, XmlLikeTokenProcessor processor);
    public static string GetHeaderName(CachingLexer lexer, XmlLikeTokenProcessor processor);
}
public abstract class JetBrains.ReSharper.Feature.Services.MatchingBrace.XmlLikeTokenProcessor : object {
    private bool myIsMatched;
    private int myDeltha;
    protected Stack`1<Pair`2<State, string>> myStates;
    protected Stack`1<TokenNodeType> myTokens;
    public bool IsMatched { get; }
    protected TokenNodeType CurrentToken { get; }
    protected Pair`2<State, string> CurrentStatePair { get; }
    protected State CurrentState { get; }
    protected string CurrentTagName { get; }
    protected XmlLikeTokenProcessor(int deltha);
    public bool get_IsMatched();
    protected TokenNodeType get_CurrentToken();
    protected Pair`2<State, string> get_CurrentStatePair();
    protected State get_CurrentState();
    protected string get_CurrentTagName();
    public abstract virtual bool IsTagStart(TokenNodeType tokenType);
    public abstract virtual bool IsTagStart1(TokenNodeType tokenType);
    public abstract virtual bool IsTagEnd(TokenNodeType tokenType);
    public abstract virtual bool IsTagEnd1(TokenNodeType tokenType);
    public abstract virtual bool IsCommentStart(TokenNodeType tokenType);
    public abstract virtual bool IsCommentEnd(TokenNodeType tokenType);
    public abstract virtual bool IsPiStart(TokenNodeType tokenType);
    public abstract virtual bool IsPiEnd(TokenNodeType tokenType);
    public abstract virtual bool IsIdentifier(TokenNodeType tokenType);
    private static TokenNodeType GetNextToken(CachingLexer lexer, int direction);
    public static TokenNodeType GetPrevToken(CachingLexer lexer);
    public static TokenNodeType GetNextToken(CachingLexer lexer);
    protected virtual bool IsSkipToken(TokenNodeType token);
    private bool ProcessToken(TokenNodeType token, CachingLexer lexer);
    public bool Match(CachingLexer lexer, Int32& pos);
    protected abstract virtual TrailingTagAction GetTrailingAction(TokenNodeType originalToken, TokenNodeType token);
    protected abstract virtual void UpdateStacks(TokenNodeType token, TokenNodeType currentToken, State state, string tagName, CachingLexer lexer);
    protected abstract virtual bool TokenAllowed(TokenNodeType token, TokenNodeType currentToken, State state, string tagName);
    public bool CanStartHighlighting(TokenNodeType token);
}
public abstract class JetBrains.ReSharper.Feature.Services.MatchingBrace.XmlLikeToLeftTokenProcessor : XmlLikeTokenProcessor {
    protected virtual TrailingTagAction GetTrailingAction(TokenNodeType originalToken, TokenNodeType token);
    protected virtual void UpdateStacks(TokenNodeType token, TokenNodeType currentToken, State state, string tagName, CachingLexer lexer);
    protected virtual bool TokenAllowed(TokenNodeType token, TokenNodeType currentToken, State state, string tagName);
}
public abstract class JetBrains.ReSharper.Feature.Services.MatchingBrace.XmlLikeToRightTokenProcessor : XmlLikeTokenProcessor {
    protected virtual TrailingTagAction GetTrailingAction(TokenNodeType originalToken, TokenNodeType token);
    protected virtual void UpdateStacks(TokenNodeType token, TokenNodeType currentToken, State state, string tagName, CachingLexer lexer);
    protected virtual bool TokenAllowed(TokenNodeType token, TokenNodeType currentToken, State state, string tagName);
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.ActionsOnAllProjectReferencesActionGroup : object {
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.ReSharper.Feature.Services.Menu.ActionsOnProjectReferencesActionGroup : object {
    public ActionsOnProjectReferencesActionGroup(AnalyseActionsOnProjectReferencesActionGroup analyseActionsOnProjectReferencesActionGroup);
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.ActionsOnProjectReferencesTopActionGroup : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.AiAssistantGroup : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.AnalyseActionsOnProjectReferencesActionGroup : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.AnalyseContextualMenu : object {
}
[ActionGroupAttribute("ReSharper.Architecture", "1", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.ArchitectureMenu : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.CleanupCodeGroup : object {
}
[ActionGroupAttribute("2", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.ContextNavigateDecompiledGroup : object {
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.ReSharper.Feature.Services.Menu.ContextNavigateGroup : object {
    public ContextNavigateGroup(ContextNavigateOpenInGroup openIn, ContextNavigateDecompiledGroup decompiled);
}
[ActionGroupAttribute("1", "10")]
public class JetBrains.ReSharper.Feature.Services.Menu.ContextNavigateMenu : object {
    public ContextNavigateMenu(ContextNavigateGroup contextNavigateGroup);
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.ContextNavigateOpenInGroup : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.EditIntellisenseGroup : object {
}
[ActionGroupAttribute("ReSharper.Edit", "1", "10")]
public class JetBrains.ReSharper.Feature.Services.Menu.EditMenu : object {
    public EditMenu(EditIntellisenseGroup intellisenseGroup, Separator sep, GenerateGroup generateGroup, EditTemplatesGroup templatesGroup, Separator sep1, EditTextualGroup textualGroup, RearrangeCodeGroup rearrangeCode, Separator sep2, CleanupCodeGroup cleanup, Separator sep3, EditOthersGroup othersGroup);
}
[ActionGroupAttribute("2", "10")]
public class JetBrains.ReSharper.Feature.Services.Menu.EditorContextMenuActionGroup : object {
    public EditorContextMenuActionGroup(EditorContextMenuTopActionGroup tops, EditorContextMenuOthersActionGroup others);
}
[ActionGroupAttribute("2", "10")]
public class JetBrains.ReSharper.Feature.Services.Menu.EditorContextMenuOthersActionGroup : object {
    public EditorContextMenuOthersActionGroup(InspectMenu inspectMenu);
}
[ActionGroupAttribute("2", "10")]
public class JetBrains.ReSharper.Feature.Services.Menu.EditorContextMenuTopActionGroup : object {
    public EditorContextMenuTopActionGroup(AiAssistantGroup aiAssistant, Separator sep2, NavigateContextualGroup navigationsContextualShortGroup, Separator sep, FindUsagesContextualGroup usages, Separator sep1, RefactorContextualGroup refactorContext);
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.ReSharper.Feature.Services.Menu.EditOthersGroup : object {
    public EditOthersGroup(EditProjectItemPropertiesAction editProjectItemProperties);
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.EditTemplatesGroup : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.EditTextualGroup : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.EmbeddedArchitectureActionGroup : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.FindDependenciesGroup : object {
}
[ActionGroupAttribute("ReSharper.Find", "1", "10")]
public class JetBrains.ReSharper.Feature.Services.Menu.FindMenu : object {
    public FindMenu(FindUsagesGroup findUsagesGroup, Separator sep, FindDependenciesGroup findDependencies, Separator sep2, ResultListActionGroup resultListActionGroup);
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.FindUsagesContextualGroup : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.FindUsagesGroup : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.GenerateGroup : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.InspectCodeIssuesMenu : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.InspectContextActionGroup : object {
}
[ActionGroupAttribute("ReSharper.Inspect", "1", "10")]
public class JetBrains.ReSharper.Feature.Services.Menu.InspectMenu : object {
    public InspectMenu(AnalyseContextualMenu hierarchies, Separator sep, InspectCodeIssuesMenu codeIssues);
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.ReSharper.Feature.Services.Menu.IntoMainMenuCodeAwareFeaturesGroup : object {
    public IntoMainMenuCodeAwareFeaturesGroup(NavigateMenu navigate, FindMenu findMenu, EditMenu editMenu, RefactorMenu refactorMenu, InspectMenu inspectMenu, ArchitectureMenu architectureMenu, UnitTestsMenu unitTestsMenu);
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.LocateInActionGroup : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.NavigateBookmarksGroup : object {
}
[ActionGroupAttribute("2", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.NavigateContextualFullGroup : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.NavigateContextualGroup : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.NavigateContextualInMainMenuGroup : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.NavigateGlobalGroup : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.NavigateLocalGroup : object {
}
[ActionGroupAttribute("ReSharper.Navigate", "1", "10")]
public class JetBrains.ReSharper.Feature.Services.Menu.NavigateMenu : object {
    public NavigateMenu(NavigateGlobalGroup navigateGlobal, Separator sep1, NavigateContextualInMainMenuGroup navigateContextualInMainMenu, Separator sep2, NavigateLocalGroup navigateLocal, Separator sep3, NavigateRecentGroup navigateRecent, NavigateRelatedGroup navigateRelated, NavigateBookmarksGroup navigateBookmarks, NavigateSpecialGroup navigateSpecialGroup, Separator sep4, NavigateOthersGroup navigateOthers);
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.NavigateOthersGroup : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.NavigateRecentGroup : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.NavigateRelatedGroup : object {
}
[ActionGroupAttribute("2", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.NavigateSpecialGroup : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.RearrangeCodeGroup : object {
}
[ActionGroupAttribute("1", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.RefactorContextMenu : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.RefactorContextualGroup : object {
}
[ActionGroupAttribute("1", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.RefactorMenu : object {
}
[ActionGroupAttribute("ReSharper.Tools", "1", "10")]
public class JetBrains.ReSharper.Feature.Services.Menu.ToolsMenu : object {
    public ToolsMenu(ActionsTestGroup actionsTestGroup);
}
[ActionGroupAttribute("UnitTest.ContextMenu", "0", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.UnitTestContextMenuActionGroup : object {
}
[ActionGroupAttribute("ReSharper.UnitTests", "1", "16")]
public class JetBrains.ReSharper.Feature.Services.Menu.UnitTestsMenu : object {
}
public abstract class JetBrains.ReSharper.Feature.Services.Naming.AutoNaming.AutoNamingDefaultParameters`1 : object {
    public int MaxFileCountFromIndexManager { get; }
    public int MaxFileCountPerSpecificGroup { get; }
    public int CountOfElementsForSmallGroup { get; }
    public double EmptyPrefixMinimalCoverage { get; }
    public int MaxMethodRangeForParsing { get; }
    public virtual int GetMaxGroupLimitPerFile(T kind);
    public virtual int GetMaxGroupLimitPerProject(T kind);
    public virtual double GetMinimalCoverage(T kind);
    public virtual double GetMinimalCoverageForPrefix(T kind);
    public virtual double GetMinimalCoverageForPrefixForSmallGroup(T kind);
    public virtual double GetMinimalCoverageForRule(T kind);
    public virtual int GetMinimalCountOfElements(T kind);
    public virtual int get_MaxFileCountFromIndexManager();
    public virtual int get_MaxFileCountPerSpecificGroup();
    public virtual int get_CountOfElementsForSmallGroup();
    public virtual double get_EmptyPrefixMinimalCoverage();
    public virtual int get_MaxMethodRangeForParsing();
}
public abstract class JetBrains.ReSharper.Feature.Services.Naming.AutoNaming.AutoNamingDetectionBase`1 : object {
    [CompilerGeneratedAttribute]
private Signal`1<AutoNamingResult> <OnShowNotification>k__BackingField;
    [CompilerGeneratedAttribute]
private SimpleSignal <OnAutoNamingFinished>k__BackingField;
    protected IContextBoundSettingsStore ContextBoundSettingsStore;
    protected Lifetime Lifetime;
    protected IAutoNamingParameters`1<T> Parameters;
    protected NamingManager NamingManager;
    protected string Language;
    protected string SettingsHyperlink;
    protected Random Random;
    protected ILogger Logger;
    protected IShellLocks Locks;
    protected Dictionary`2<Guid, Dictionary`2<OWORD, OneToSetMap`2<T, string>>> ElementContainer;
    protected Dictionary`2<Guid, Dictionary`2<OWORD, int>> SequenceSizes;
    public Signal`1<AutoNamingResult> OnShowNotification { get; }
    public SimpleSignal OnAutoNamingFinished { get; }
    public AutoNamingDetectionBase`1(Lifetime lifetime, IShellLocks locks, ISettingsStore settingsStore, ISolution solution, NamingManager namingManager, IAutoNamingParameters`1<T> parameters, string language, string settingsHyperlink, Random random, ILogger logger);
    [CompilerGeneratedAttribute]
public sealed virtual Signal`1<AutoNamingResult> get_OnShowNotification();
    [CompilerGeneratedAttribute]
public sealed virtual SimpleSignal get_OnAutoNamingFinished();
    public abstract virtual bool CanStartAutoDetection();
    protected abstract virtual bool IsNotificationEnabled();
    protected abstract virtual void SetAutoDetectionAsCompleted();
    public abstract virtual void DisableNotification();
    public abstract virtual bool IsRuleDetectedFor(IDeclaredElement element);
    public abstract virtual void Disable();
    public abstract virtual void Enable();
    public abstract virtual bool IsAutoDetectedValuesEnabled();
    protected virtual OneToListMap`2<T, Tuple`2<NamingRule, float>> ClusterizeRules(OneToListMap`2<T, Tuple`2<NamingRule, float>> rules);
    protected abstract virtual void PatchPolicyFor(T kind, NamingPolicy policy);
    public virtual void Detect();
    public virtual void ClearElementsForDetection();
    public virtual void AddElementForDetection(Guid projectGuid, OWORD fileUniqueIdx, T groupKind, string identifier);
    public virtual void ShowNotification(AutoNamingResult result);
    public void ShowNotification();
    private void DetectInner();
    private List`1<AutoNamingGroups`1<T>> BuildProjectGroups();
    protected abstract virtual void ResetDetectedRules();
    protected abstract virtual bool IsAnyThingPatched();
    protected virtual OneToListMap`2<T, Tuple`2<NamingRule, float>> DetectRules(OneToSetMap`2<T, string> groups);
    protected virtual void PatchSettings(OneToSetMap`2<T, string> groups, OneToListMap`2<T, Tuple`2<NamingRule, float>> rulesPerGroup);
}
public class JetBrains.ReSharper.Feature.Services.Naming.AutoNaming.AutoNamingGroups`1 : object {
    private Random myRandom;
    [CompilerGeneratedAttribute]
private OneToSetMap`2<T, string> <Groups>k__BackingField;
    public OneToSetMap`2<T, string> Groups { get; }
    public AutoNamingGroups`1(Random random);
    [CompilerGeneratedAttribute]
public OneToSetMap`2<T, string> get_Groups();
    public void Merge(AutoNamingGroups`1<T> group, Func`2<T, int> getGroupLimit);
    public void Merge(OneToSetMap`2<T, string> group, Func`2<T, int> getGroupLimit);
}
public class JetBrains.ReSharper.Feature.Services.Naming.AutoNaming.AutoNamingResult : object {
    public string Language;
    public string PageHyperlink;
    public AutoNamingResult(string languageShortName, string pageHyperlink);
}
public interface JetBrains.ReSharper.Feature.Services.Naming.AutoNaming.IAutoNamingDetection {
    public SimpleSignal OnAutoNamingFinished { get; }
    public Signal`1<AutoNamingResult> OnShowNotification { get; }
    public abstract virtual SimpleSignal get_OnAutoNamingFinished();
    public abstract virtual Signal`1<AutoNamingResult> get_OnShowNotification();
    public abstract virtual void DisableNotification();
    public abstract virtual bool IsRuleDetectedFor(IDeclaredElement element);
    public abstract virtual void Disable();
    public abstract virtual void Enable();
    public abstract virtual bool IsAutoDetectedValuesEnabled();
}
public interface JetBrains.ReSharper.Feature.Services.Naming.AutoNaming.IAutoNamingParameters`1 {
    public double EmptyPrefixMinimalCoverage { get; }
    public int MaxFileCountFromIndexManager { get; }
    public int MaxFileCountPerSpecificGroup { get; }
    public int CountOfElementsForSmallGroup { get; }
    public int MaxMethodRangeForParsing { get; }
    public abstract virtual int GetMaxGroupLimitPerFile(T kind);
    public abstract virtual int GetMaxGroupLimitPerProject(T kind);
    public abstract virtual double GetMinimalCoverage(T kind);
    public abstract virtual double GetMinimalCoverageForPrefix(T kind);
    public abstract virtual double GetMinimalCoverageForPrefixForSmallGroup(T kind);
    public abstract virtual double GetMinimalCoverageForRule(T kind);
    public abstract virtual double get_EmptyPrefixMinimalCoverage();
    public abstract virtual int GetMinimalCountOfElements(T kind);
    public abstract virtual int get_MaxFileCountFromIndexManager();
    public abstract virtual int get_MaxFileCountPerSpecificGroup();
    public abstract virtual int get_CountOfElementsForSmallGroup();
    public abstract virtual int get_MaxMethodRangeForParsing();
}
internal static class JetBrains.ReSharper.Feature.Services.Naming.AutoNaming.NamingRuleDetectionUtil : object {
    public static List`1<Tuple`2<NamingRule, float>> DetectNamingRule(T kind, IAutoNamingParameters`1<T> parameters, ISet`1<string> names, NamingManager namingManager, ILogger logger);
    private static Dictionary`2<string, List`1<string>> GroupByPrefixes(ISet`1<string> names, List`1<string> prefixes);
    private static List`1<string> GetPossiblePrefixes(T kind, ISet`1<string> names, IAutoNamingParameters`1<T> parameters);
    private static string ExtractPossiblePrefix(string name);
}
[ZoneDefinitionAttribute]
public class JetBrains.ReSharper.Feature.Services.Naming.NamingImplZone : object {
}
public static class JetBrains.ReSharper.Feature.Services.Naming.UI.AbbreviationsUtil : object {
    public static string ReadFromSettings(IContextBoundSettingsStore settingsStore, Expression`1<Func`2<TKey, IIndexedEntry`2<string, string>>> abbreviationsSettingsKey);
    public static void ProcessChange(IContextBoundSettingsStore settingsStore, Expression`1<Func`2<TKey, IIndexedEntry`2<string, string>>> abbreviationsSettingsKey, string userValue);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Naming.UI.AbbreviationsUtil/<Parse>d__2")]
private static IEnumerable`1<string> Parse(string text);
}
public abstract class JetBrains.ReSharper.Feature.Services.Naming.UI.CustomNamingOptionsPage`1 : CustomNamingOptionsPageBase2 {
    private string myStoredAbbreviations;
    public string Abbreviations { get; public set; }
    protected CustomNamingOptionsPage`1(Lifetime lifetime, OptionsSettingsSmartContext settings, PsiLanguageType languageType, INamedElementsManager namedElementsManager, IThemedIconManager uiIconsComponent, Func`2<IElementKind, string> itemStringPresentationFunc);
    public virtual string get_Abbreviations();
    public virtual void set_Abbreviations(string value);
    [CanBeNullAttribute]
protected virtual NamingPolicy GetPolicy(string name);
    public virtual bool OnOk();
}
public abstract class JetBrains.ReSharper.Feature.Services.Naming.UI.CustomNamingOptionsPageBase2 : object {
    protected OptionsSettingsSmartContext Settings;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<CustomNamingRuleItem> <NamingRuleItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IThemedIconManager <UIIconsComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<OptionsFilterResult> <SearchFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public ObservableCollection`1<CustomNamingRuleItem> NamingRuleItems { get; }
    public string Abbreviations { get; public set; }
    public IThemedIconManager UIIconsComponent { get; public set; }
    public IProperty`1<OptionsFilterResult> SearchFilter { get; }
    public string Id { get; }
    private IEnumerable`1<NamingRuleItem> JetBrains.ReSharper.Feature.Services.Naming.UI.INamingPageBase.Items { get; }
    protected CustomNamingOptionsPageBase2(Lifetime lifetime, OptionsSettingsSmartContext settings, PsiLanguageType languageType, INamedElementsManager namedElementsManager, IThemedIconManager uiIconsComponent, Func`2<IElementKind, string> itemStringPresentationFunc);
    [CompilerGeneratedAttribute]
public ObservableCollection`1<CustomNamingRuleItem> get_NamingRuleItems();
    public abstract virtual string get_Abbreviations();
    public abstract virtual void set_Abbreviations(string value);
    [CompilerGeneratedAttribute]
public IThemedIconManager get_UIIconsComponent();
    [CompilerGeneratedAttribute]
public void set_UIIconsComponent(IThemedIconManager value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<OptionsFilterResult> get_SearchFilter();
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    public abstract virtual bool OnOk();
    public bool ValidatePage();
    private sealed virtual override OptionsPageKeywords JetBrains.Application.UI.Options.ISearchablePage.GetKeywords();
    private sealed virtual override void JetBrains.Application.UI.Options.ISearchablePage.HighLightKeyword(OptionsFilterResult text);
    protected abstract virtual NamingPolicy GetPolicy(string name);
    protected virtual void AddBaseLanguageElementKinds(IList`1<IElementKind> elementKinds, INamedElementsManager namedElementsManager);
    private sealed virtual override IEnumerable`1<string> JetBrains.Application.UI.Options.ISearchablePage.GetTagKeywordsForPage();
    private sealed virtual override IEnumerable`1<NamingRuleItem> JetBrains.ReSharper.Feature.Services.Naming.UI.INamingPageBase.get_Items();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0();
}
public class JetBrains.ReSharper.Feature.Services.Naming.UI.CustomNamingRuleItem : NamingRuleItem {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public CustomNamingRuleItem(Lifetime lifetime, string name, string entityKinds, NamingPolicy policy, StyleItemState state);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Naming.UI.DummyAdvancedNamingSettingsFormFactory : object {
    public sealed virtual IAdvancedNamingSettingsForm GetForm(OptionsSettingsSmartContext settings, PsiLanguageType language);
}
public class JetBrains.ReSharper.Feature.Services.Naming.UI.ElementKindPresenter : StructuredPresenter`2<TreeModelNode, IPresentableItem> {
    private void PresentObject(object value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
}
public class JetBrains.ReSharper.Feature.Services.Naming.UI.EnumPresenter`1 : StructuredPresenter`2<TreeModelNode, IPresentableItem> {
    private Func`2<ENUM_TYPE, string> myEnumPresenter;
    public EnumPresenter`1(Func`2<ENUM_TYPE, string> enumPresenter);
    private void PresentObject(object value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
}
public interface JetBrains.ReSharper.Feature.Services.Naming.UI.IAdvancedNamingSettingsForm {
    [CanBeNullAttribute]
public abstract virtual Form GetForm(NamingStylePageBase model);
}
public interface JetBrains.ReSharper.Feature.Services.Naming.UI.IAdvancedNamingSettingsFormFactory {
    [CanBeNullAttribute]
public abstract virtual IAdvancedNamingSettingsForm GetForm(OptionsSettingsSmartContext settings, PsiLanguageType language);
}
public interface JetBrains.ReSharper.Feature.Services.Naming.UI.INamingPageBase {
    public IEnumerable`1<NamingRuleItem> Items { get; }
    public abstract virtual IEnumerable`1<NamingRuleItem> get_Items();
}
public class JetBrains.ReSharper.Feature.Services.Naming.UI.NamingPolicyViewController : TreeViewController {
    public bool DragDropSupported { get; }
    public bool GuardActions { get; }
    public bool QuickSearchSupported { get; }
    public virtual bool ExpandNodeInitially(TreeModelNode modelNode);
    public virtual bool VisibilityState(TreeModelNode modelNode);
    public virtual bool get_DragDropSupported();
    public virtual bool get_GuardActions();
    public virtual bool get_QuickSearchSupported();
}
public class JetBrains.ReSharper.Feature.Services.Naming.UI.NamingRuleItem : AAutomation {
    [CompilerGeneratedAttribute]
private string <EntityKinds>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<NamingPolicy> <Policy>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<NamingPolicy> <PreviewPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<StyleItemState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Preview>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <ExtraPreview>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsAutoDetected>k__BackingField;
    public string EntityKinds { get; }
    public IProperty`1<NamingPolicy> Policy { get; }
    public IProperty`1<NamingPolicy> PreviewPolicy { get; }
    public IProperty`1<StyleItemState> State { get; }
    public IProperty`1<string> Preview { get; }
    public IProperty`1<string> ExtraPreview { get; }
    public IProperty`1<bool> IsAutoDetected { get; }
    public NamingRuleItem(Lifetime lifetime, string entityKinds, NamingPolicy policy, StyleItemState state);
    [CompilerGeneratedAttribute]
public string get_EntityKinds();
    [CompilerGeneratedAttribute]
public IProperty`1<NamingPolicy> get_Policy();
    [CompilerGeneratedAttribute]
public IProperty`1<NamingPolicy> get_PreviewPolicy();
    [CompilerGeneratedAttribute]
public IProperty`1<StyleItemState> get_State();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_Preview();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_ExtraPreview();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsAutoDetected();
    private void SetPreview();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0(BeforePropertyChangedEventArgs`1<NamingPolicy> value);
}
public class JetBrains.ReSharper.Feature.Services.Naming.UI.NamingRuleViewController : TreeViewController {
    public bool DragDropSupported { get; }
    public bool GuardActions { get; }
    public bool QuickSearchSupported { get; }
    public virtual bool ExpandNodeInitially(TreeModelNode modelNode);
    public virtual bool VisibilityState(TreeModelNode modelNode);
    public virtual bool get_DragDropSupported();
    public virtual bool get_GuardActions();
    public virtual bool get_QuickSearchSupported();
}
public abstract class JetBrains.ReSharper.Feature.Services.Naming.UI.NamingStylePage`1 : NamingStylePageBase {
    protected NamingStylePage`1(Lifetime lifetime, OptionsSettingsSmartContext settings, HighlightingSettingsManager manager, PsiLanguageType language, IThemedIconManager uiIconsComponent, IAdvancedNamingSettingsFormFactory advancedNamingSettingsFormFactory, IComponentContainer container, NamedElementKinds[] supportedElementKinds);
    protected virtual NamingPolicy GetPolicy(NamedElementKinds rule);
    protected virtual bool ApplyAutoDetectedSettings();
    protected virtual bool IsAnyRuleAutoDetected();
    protected virtual bool IsRuleAutoDetected(NamedElementKinds rule);
    public virtual bool OnOk();
    private void UpdateSettingFor(PredefinedEditItem predefinedEditItem);
    [CompilerGeneratedAttribute]
internal static void <.ctor>g__GetMostPriorityMountPoint|0_2(SettingsIndexedEntry entry, IContextBoundSettingsStoreImplementation context, ISettingsStorageMountPoint& result);
}
public abstract class JetBrains.ReSharper.Feature.Services.Naming.UI.NamingStylePageBase : object {
    [NotNullAttribute]
protected OptionsSettingsSmartContext OptionsSettingsSmartContext;
    [NotNullAttribute]
protected IContextBoundSettingsStore SettingsWithoutAutoDetectedValues;
    private NamedElementKinds[] mySupportedElementKinds;
    [CompilerGeneratedAttribute]
private IThemedIconManager <UIIconsComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private IAdvancedNamingSettingsForm <AdvancedNamingSettingsForm>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<PredefinedEditItem> <PredefinedEditItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<OptionsFilterResult> <SearchFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsNamingInspectionEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsAnyRuleWasAutoDetected>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ApplyAutoDetectedRules>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <AutoNamingSettingsVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AdvancedEventHandlersNamingStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<EditorConfigNotification> <EditorConfigNotification>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public IThemedIconManager UIIconsComponent { get; public set; }
    public IAdvancedNamingSettingsForm AdvancedNamingSettingsForm { get; public set; }
    public ObservableCollection`1<PredefinedEditItem> PredefinedEditItems { get; }
    public IProperty`1<OptionsFilterResult> SearchFilter { get; }
    public IProperty`1<bool> IsNamingInspectionEnabled { get; }
    public IProperty`1<bool> IsAnyRuleWasAutoDetected { get; }
    public IProperty`1<bool> ApplyAutoDetectedRules { get; }
    public IProperty`1<bool> AutoNamingSettingsVisible { get; }
    public bool AdvancedEventHandlersNamingStyle { get; protected set; }
    public IProperty`1<EditorConfigNotification> EditorConfigNotification { get; }
    public string Id { get; }
    private IEnumerable`1<NamingRuleItem> JetBrains.ReSharper.Feature.Services.Naming.UI.INamingPageBase.Items { get; }
    protected NamingStylePageBase(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, IThemedIconManager uiIconsComponent, HighlightingSettingsManager manager, IAdvancedNamingSettingsForm advancedNamingSettingsForm, IComponentContainer container, NamedElementKinds[] supportedElementKinds);
    private Severity GetEnabledValue(Severity initialValue, Severity defaultSeverity);
    [CompilerGeneratedAttribute]
public IThemedIconManager get_UIIconsComponent();
    [CompilerGeneratedAttribute]
public void set_UIIconsComponent(IThemedIconManager value);
    [CompilerGeneratedAttribute]
public IAdvancedNamingSettingsForm get_AdvancedNamingSettingsForm();
    [CompilerGeneratedAttribute]
public void set_AdvancedNamingSettingsForm(IAdvancedNamingSettingsForm value);
    [CompilerGeneratedAttribute]
public ObservableCollection`1<PredefinedEditItem> get_PredefinedEditItems();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<OptionsFilterResult> get_SearchFilter();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsNamingInspectionEnabled();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsAnyRuleWasAutoDetected();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ApplyAutoDetectedRules();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_AutoNamingSettingsVisible();
    [CompilerGeneratedAttribute]
public bool get_AdvancedEventHandlersNamingStyle();
    [CompilerGeneratedAttribute]
protected void set_AdvancedEventHandlersNamingStyle(bool value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public IProperty`1<EditorConfigNotification> get_EditorConfigNotification();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    public abstract virtual bool OnOk();
    private sealed virtual override OptionsPageKeywords JetBrains.Application.UI.Options.ISearchablePage.GetKeywords();
    private sealed virtual override void JetBrains.Application.UI.Options.ISearchablePage.HighLightKeyword(OptionsFilterResult text);
    protected abstract virtual NamingPolicy GetPolicy(NamedElementKinds rule);
    private sealed virtual override IEnumerable`1<string> JetBrains.Application.UI.Options.ISearchablePage.GetTagKeywordsForPage();
    private sealed virtual override IEnumerable`1<NamingRuleItem> JetBrains.ReSharper.Feature.Services.Naming.UI.INamingPageBase.get_Items();
    protected abstract virtual bool IsRuleAutoDetected(NamedElementKinds rule);
    protected abstract virtual bool IsAnyRuleAutoDetected();
    protected abstract virtual bool ApplyAutoDetectedSettings();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_3();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0(PropertyChangedEventArgs`1<bool> v);
}
public class JetBrains.ReSharper.Feature.Services.Naming.UI.PredefinedEditItem : NamingRuleItem {
    [CompilerGeneratedAttribute]
private NamedElementKinds <NamedElementKind>k__BackingField;
    public NamedElementKinds NamedElementKind { get; }
    public PredefinedEditItem(Lifetime lifetime, NamedElementKinds namedElementKind, NamingPolicy policy, StyleItemState state);
    [CompilerGeneratedAttribute]
public NamedElementKinds get_NamedElementKind();
}
public class JetBrains.ReSharper.Feature.Services.Naming.UI.PredefinedNamingRulePresenter : StructuredPresenter`2<TreeModelNode, IPresentableItem> {
    private void PresentObject(object value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
}
public class JetBrains.ReSharper.Feature.Services.Naming.UI.RuleWrapper : object {
    [CompilerGeneratedAttribute]
private bool <IsDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private NamingRule <Rule>k__BackingField;
    public bool IsDefault { get; public set; }
    public NamingRule Rule { get; public set; }
    public RuleWrapper(bool isDefault, NamingRule rule);
    [CompilerGeneratedAttribute]
public bool get_IsDefault();
    [CompilerGeneratedAttribute]
public void set_IsDefault(bool value);
    [CompilerGeneratedAttribute]
public NamingRule get_Rule();
    [CompilerGeneratedAttribute]
public void set_Rule(NamingRule value);
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.Naming.UI.RuleWrapperPresenter : StructuredPresenter`2<TreeModelNode, IPresentableItem> {
    private void PresentObject(object value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
}
public enum JetBrains.ReSharper.Feature.Services.Naming.UI.StyleItemState : Enum {
    public int value__;
    public static StyleItemState Default;
    public static StyleItemState Unchanged;
    public static StyleItemState Reset;
    public static StyleItemState Modified;
}
public class JetBrains.ReSharper.Feature.Services.Navigation.AssemblyAttributeNavigationData : object {
    [CompilerGeneratedAttribute]
private ICompiledNavigationTarget <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private CustomAttributeTargetPosition <TargetPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssembly <Assembly>k__BackingField;
    [NotNullAttribute]
public ICompiledNavigationTarget Target { get; }
    [NotNullAttribute]
public CustomAttributeTargetPosition TargetPosition { get; }
    [NotNullAttribute]
public IAssembly Assembly { get; }
    public AssemblyAttributeNavigationData(IAssembly assembly, ICompiledNavigationTarget target, CustomAttributeTargetPosition targetPosition);
    [CompilerGeneratedAttribute]
public ICompiledNavigationTarget get_Target();
    [CompilerGeneratedAttribute]
public CustomAttributeTargetPosition get_TargetPosition();
    [CompilerGeneratedAttribute]
public IAssembly get_Assembly();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.CallingFeatureContext : EnumPattern {
    public static CallingFeatureContext GlobalNavigation;
    public static CallingFeatureContext ContextNavigation;
    public CallingFeatureContext(string name);
    private static CallingFeatureContext();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.CompiledDeclaredElementNavigationTarget : object {
    [CompilerGeneratedAttribute]
private IDeclaredElement <Element>k__BackingField;
    [CanBeNullAttribute]
public IDeclaredElement Element { get; }
    public CompiledDeclaredElementNavigationTarget(IDeclaredElement element);
    [CompilerGeneratedAttribute]
public IDeclaredElement get_Element();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.CompiledElementNavigationInfo : object {
    [CompilerGeneratedAttribute]
private ICompiledElement <ElementToSearchIn>k__BackingField;
    [CompilerGeneratedAttribute]
private ICompiledNavigationTarget <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private ITargetPosition <TargetPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private CompiledElementNavigationInfo <OriginalNavigationInfo>k__BackingField;
    [NotNullAttribute]
public ICompiledElement ElementToSearchIn { get; }
    [CanBeNullAttribute]
public ICompiledNavigationTarget Target { get; }
    [NotNullAttribute]
public ITargetPosition TargetPosition { get; }
    [CanBeNullAttribute]
public CompiledElementNavigationInfo OriginalNavigationInfo { get; }
    public CompiledElementNavigationInfo(ICompiledElement whereToSearch, ICompiledNavigationTarget whatToSearch, ITargetPosition targetPosition, CompiledElementNavigationInfo originalNavigationInfo);
    [CompilerGeneratedAttribute]
public ICompiledElement get_ElementToSearchIn();
    [CompilerGeneratedAttribute]
public ICompiledNavigationTarget get_Target();
    [CompilerGeneratedAttribute]
public ITargetPosition get_TargetPosition();
    [CompilerGeneratedAttribute]
public CompiledElementNavigationInfo get_OriginalNavigationInfo();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Navigation.CompiledElementNavigationInfoExtensions : object {
    [ExtensionAttribute]
public static bool IsValidIndex(CompiledElementNavigationInfo navigationInfo);
    [ExtensionAttribute]
public static CompiledElementNavigationInfo ToNavigationInfo(ICompiledElement compiledElement);
    [ExtensionAttribute]
public static CompiledElementNavigationInfo ToNavigationInfo(ICompiledElement compiledElement, ICompiledElement originalCompiledElement);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.CompiledStringNavigationTarget : object {
    [CompilerGeneratedAttribute]
private string <Literal>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [NotNullAttribute]
public string Literal { get; }
    public int Offset { get; }
    public CompiledStringNavigationTarget(string literal, int offset);
    [CompilerGeneratedAttribute]
public string get_Literal();
    [CompilerGeneratedAttribute]
public int get_Offset();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.AsyncSearchResultViewController : object {
    private IAsyncFindResultView myActiveView;
    private SequentialLifetimes myViewsLifetimes;
    private Lifetime myExecutorLifetime;
    [CanBeNullAttribute]
private IAsyncSearchResult myAsyncResult;
    private LifetimeDefinition mySearchLifetimeDefinition;
    private LiveCombinedProgressIndicator myProgressIndicator;
    public IAsyncFindResultView ActiveView { get; }
    private IAsyncFindResultView ValidView { get; }
    public AsyncSearchResultViewController(Lifetime lifetime);
    public IAsyncFindResultView get_ActiveView();
    public void SwitchTo(IAsyncFindResultView view);
    private IAsyncFindResultView get_ValidView();
    public sealed virtual IProgressIndicator ProcessAsyncResults(LifetimeDefinition searchLifetimeDefinition, IAsyncSearchResult asyncResult);
    private void ProcessAsyncResultCurrentView();
    public sealed virtual bool CommitResults(ICollection`1<IOccurrence> results);
    [CompilerGeneratedAttribute]
private void <ProcessAsyncResults>b__12_0();
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.BaseContextSearch : HierarchyContextSearchBase {
    protected ReferencePreferenceKind ReferencePreferenceKind { get; }
    protected virtual SearchRequest CreateSearchRequestInternal(IDataContext dataContext, IDeclaredElement declaredElement);
    protected virtual ReferencePreferenceKind get_ReferencePreferenceKind();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ContextNavigation : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <Execution>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationActionGroup <ActionGroup>k__BackingField;
    public string Title { get; }
    public IconId Icon { get; }
    public string ActionId { get; }
    public Action Execution { get; }
    public NavigationActionGroup ActionGroup { get; }
    public ContextNavigation(string title, string actionId, NavigationActionGroup actionGroup, Action execution, IconId icon);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Title();
    [CompilerGeneratedAttribute]
public sealed virtual IconId get_Icon();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ActionId();
    [CompilerGeneratedAttribute]
public Action get_Execution();
    [CompilerGeneratedAttribute]
public sealed virtual NavigationActionGroup get_ActionGroup();
}
public abstract class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ContextNavigationActionBase`1 : ExtensibleAction`3<TContextNavigationProvider, ContextNavigation, NavigationActionGroup> {
    protected bool AssertsMenuItemsMnemonics { get; }
    protected RichText Caption { get; }
    protected bool ShowMenuWithOneItem { get; }
    protected virtual ICollection`1<TContextNavigationProvider> GetWorkflowProviders();
    protected virtual IconId GetGroupIcon(IDataContext dataContext);
    protected virtual void Execute(IDataContext context, ContextNavigation refactoringWorkflow);
    protected virtual bool IsAvailable(IDataContext context, ContextNavigation refactoringWorkflow);
    protected virtual bool IsEnabled(IDataContext context, ContextNavigation workflow);
    protected virtual bool get_AssertsMenuItemsMnemonics();
    protected virtual void ShowModal(IDataContext context, JetPopupMenu jetPopupMenu, LifetimeDefinition defMenu);
    protected virtual RichText get_Caption();
    protected virtual bool get_ShowMenuWithOneItem();
}
public static class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ContextNavigationLanguageUtil : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ContextNavigationLanguageUtil/<GetAvailableContextSearches>d__0`1")]
[NotNullAttribute]
public static IEnumerable`1<TContextSearch> GetAvailableContextSearches(IDataContext dataContext, IFeaturePartsContainer container);
}
[ShellComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ContextNavigationManager : object {
    private IEnumerable`1<INavigateFromHereProvider> myNavigateFromHereProviders;
    private IEnumerable`1<IContextSearchProvider> myContextSearchProviders;
    public static ContextNavigationManager Instance { get; }
    public ContextNavigationManager(IEnumerable`1<INavigateFromHereProvider> navigateFromHereProviders, IEnumerable`1<IContextSearchProvider> contextSearchProviders);
    public static ContextNavigationManager get_Instance();
    public IEnumerable`1<TNavigateFromHereProvider> GetNavigateFromHereProviders();
    public IEnumerable`1<TContextSearchProvider> GetContextSearchProviders();
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.INavigateFromHereProvider")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ContextNavigationProviderAttribute : ShellComponentAttribute {
    public ContextNavigationProviderAttribute(Instantiation instantiation);
}
public abstract class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ContextNavigationProviderBase`2 : object {
    private IFeaturePartsContainer myManager;
    [NotNullAttribute]
protected NavigationActionGroup ActionGroup { get; }
    protected ContextNavigationProviderBase`2(IFeaturePartsContainer manager);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ContextNavigationProviderBase`2/<CreateWorkflow>d__2")]
[CanBeNullAttribute]
public virtual IEnumerable`1<ContextNavigation> CreateWorkflow(IDataContext dataContext);
    public sealed virtual Action GetSearchesExecution(IDataContext dataContext, INavigationExecutionHost host);
    protected string GetActionId(IDataContext dataContext);
    protected abstract virtual string GetNavigationMenuTitle(IDataContext dataContext);
    protected abstract virtual NavigationActionGroup get_ActionGroup();
    protected abstract virtual void Execute(IDataContext dataContext, IEnumerable`1<TContextSearch> searches, INavigationExecutionHost host);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ContextNavigationUtil : object {
    private static ILogger ourLog;
    private static ContextNavigationUtil();
    [CanBeNullAttribute]
public static IDeclaredElement GetDeclaredElementFromOccurrence(IOccurrence occurrence);
    public static int CompareDeclaredElements(IDeclaredElement xElement, IDeclaredElement yElement);
    public static void HighlightResults(IDataContext dataContext, IEnumerable`1<DocumentRange> ranges, Nullable`1<DocumentRange> targetRange, string noResultsMessage);
    [CanBeNullAttribute]
public static TTreeNode GetSelectedLanguageSpecificTreeNode(IDataContext dataContext);
    public static IEnumerable`1<IDeclaredElement> GetCandidateElements(IDataContext context, ReferencePreferenceKind kind, bool includeSharedFiles);
    [ExtensionAttribute]
public static IList`1<IList`1<TElement>> SqueezeCandidatesByTarget(IEnumerable`1<TElement> elements, Func`2<TElement, Pair`2<VirtualFileSystemPath, TextRange>> getTargetFunc);
    public static Pair`2<VirtualFileSystemPath, TextRange> GetTarget(IDeclaredElement declaredElement);
    private static Pair`2<VirtualFileSystemPath, TextRange> GetTargetFromDeclaration(IDeclaredElement declaredElement);
    public static ICollection`1<DeclaredElementInstance> GetCandidateInstances(IDataContext dataContext, ReferencePreferenceKind kind, bool includeSharedFiles);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static TTreeNode GetSelectedTreeNode(IDataContext dataContext);
    public static bool CheckDefaultApplicability(IDataContext dataContext);
    [CompilerGeneratedAttribute]
internal static ICollection`1<DeclaredElementInstance> <GetCandidateInstances>g__GetCandidatesNoSharedFiles|9_0(<>c__DisplayClass9_0& );
}
public abstract class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ContextSearchActionBase`1 : object {
    private ILogger myLog;
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    protected virtual void Execute(IList`1<Pair`2<Action, TContextSearchProvider>> executes);
    protected virtual void Present(ActionPresentation presentation, ISolution solution, IList`1<Pair`2<Action, TContextSearchProvider>> executes);
    private static IList`1<Pair`2<Action, TContextSearchProvider>> GetExecutes(IDataContext dataContext);
    public static IEnumerable`1<TContextSearchProvider> GetProviders();
    public virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
public abstract class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ContextSearchesCollector`1 : object {
    private IFeaturePartsContainer myManager;
    protected IFeaturePartsContainer Manager { get; }
    protected ContextSearchesCollector`1(IFeaturePartsContainer manager);
    public virtual Action GetSearchesExecution(IDataContext dataContext, INavigationExecutionHost host);
    public virtual SearchesExecutionResult`1<TContextSearch> GetContextSearchRequests(IDataContext dataContext);
    public sealed virtual SearchesExecutionResult`1<TContextSearch> GetContextSearchRequests(IDataContext dataContext, Func`2<TContextSearch, bool> filter);
    protected abstract virtual void Execute(IDataContext context, IEnumerable`1<TContextSearch> searches, INavigationExecutionHost host);
    protected IFeaturePartsContainer get_Manager();
}
public abstract class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.DeclaredElementContextSearchBase`1 : RequestContextSearchBase`2<TSearchRequest, IDeclaredElement> {
    protected virtual IOccurrence Present(IDeclaredElement candidate);
    protected virtual IEnumerable`1<IDeclaredElement> GetElementCandidates(IDataContext context, ReferencePreferenceKind kind, bool updateOnly);
    protected virtual Pair`2<VirtualFileSystemPath, TextRange> GetElementTarget(IDeclaredElement candidate);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.DeclaredElementTypeUsageInfo : object {
    [NotNullAttribute]
private ISubstitution mySubstitution;
    [CompilerGeneratedAttribute]
private IDeclaredElement <DeclaredElement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreContext>k__BackingField;
    [NotNullAttribute]
public IDeclaredElement DeclaredElement { get; }
    public bool IsDeclaration { get; }
    [NotNullAttribute]
public ISubstitution Substitution { get; }
    public bool IgnoreContext { get; public set; }
    public DeclaredElementTypeUsageInfo(DeclaredElementInstance declaredElementInstance);
    public DeclaredElementTypeUsageInfo(IDeclaredElement declaredElement, bool isDeclaration);
    [CompilerGeneratedAttribute]
public IDeclaredElement get_DeclaredElement();
    [CompilerGeneratedAttribute]
public bool get_IsDeclaration();
    public ISubstitution get_Substitution();
    [CompilerGeneratedAttribute]
public bool get_IgnoreContext();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IgnoreContext(bool value);
    public sealed virtual bool Equals(DeclaredElementTypeUsageInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ShellFeaturePartAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.DefaultDeclarationSearch : DefaultDeclarationSearchBase {
}
public abstract class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.DefaultDeclarationSearchBase : TypeUsageContextSearchBase`1<SearchDeclarationsRequest> {
    protected virtual SearchDeclarationsRequest CreateSearchRequest(IDataContext dataContext, DeclaredElementTypeUsageInfo element, DeclaredElementTypeUsageInfo initialTarget);
    protected virtual SearchRequest CreateAggregateSearchRequest(IDataContext context, ICollection`1<DeclaredElementTypeUsageInfo> candidates);
    public virtual bool IsGotoDeclarationApplicable();
    public virtual bool IsGotoDeclarationApplicable(IDeclaredElement declaredElement);
    public sealed virtual SearchDeclarationsRequest GetDeclarationSearchRequest(IDeclaredElement declaredElement, Func`1<bool> checkCancelled);
    protected virtual SearchDeclarationsRequest GetDeclarationSearchRequest(DeclaredElementTypeUsageInfo elementInfo, Func`1<bool> checkCancelled);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.DefaultIgnoreSingleDeclarationPolicy : object {
    public virtual bool ShouldIgnoreSingleDeclaration(IDataContext context, IDeclaration declaration, TypeUsageContextSearchBase`1<TSearchRequest> typeUsageContextSearch);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.DefaultResultProcessor : object {
    private ISearchResultPresenter mySearchResultPresenter;
    private SearchRequest mySearchRequest;
    private INavigationExecutionHost myNavigationExecutionHost;
    public DefaultResultProcessor(ISearchResultPresenter searchResultPresenter, SearchRequest searchRequest, INavigationExecutionHost navigationExecutionHost);
    public sealed virtual void ShowError(IDataContext context, string message);
    public sealed virtual void ShowResults(IDataContext context, ICollection`1<IOccurrence> results, IAsyncFindResultView asyncFindResultView, bool useNavigationFeatures);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.DefaultSearchDomainContext : object {
    private ISolution mySolution;
    private SearchDomainFactory mySearchDomainFactory;
    private IProject myProject;
    private IProjectFile myProjectFile;
    private bool myIncludeExternalCodeByDefault;
    protected bool IncludeExternalCodeByDefault { get; protected set; }
    public DefaultSearchDomainContext(IDataContext dataContext);
    protected bool get_IncludeExternalCodeByDefault();
    protected void set_IncludeExternalCodeByDefault(bool value);
    public sealed virtual NamedSearchDomain GetDefaultDomain(bool sourcesOnly);
    public sealed virtual NamedSearchDomain[] GetUserSelectableVariants(bool sourcesOnly);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.EmptySearchDomainContext : object {
    public static ISearchDomainContext Instance;
    private static EmptySearchDomainContext();
    public sealed virtual NamedSearchDomain GetDefaultDomain(bool sourcesOnly);
    public sealed virtual NamedSearchDomain[] GetUserSelectableVariants(bool sourcesOnly);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.FindResultUsagesView : object {
    [CompilerGeneratedAttribute]
private IDataContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchRequest <SearchRequest>k__BackingField;
    [NotNullAttribute]
private ISearchResultPresenter mySearchResultPresentor;
    [NotNullAttribute]
private INavigationExecutionHost myNavigationExecutionHost;
    [CanBeNullAttribute]
private IAsyncOccurrenceBridge myAsyncOccurrenceBridge;
    public IDataContext Context { get; public set; }
    public SearchRequest SearchRequest { get; public set; }
    public bool IsAsyncSupport { get; }
    public FindResultUsagesView(IDataContext context, SearchRequest searchRequest, ISearchResultPresenter searchResultPresentor, INavigationExecutionHost navigationExecutionHost);
    [CompilerGeneratedAttribute]
public IDataContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(IDataContext value);
    [CompilerGeneratedAttribute]
public SearchRequest get_SearchRequest();
    [CompilerGeneratedAttribute]
public void set_SearchRequest(SearchRequest value);
    public bool get_IsAsyncSupport();
    public sealed virtual IProgressIndicator ProcessAsyncResults(LifetimeDefinition searchRequestExecutionLifetimeDefinition, IAsyncSearchResult asyncResult);
    public sealed virtual bool CommitResults(ICollection`1<IOccurrence> results);
    [CompilerGeneratedAttribute]
private IAsyncOccurrenceBrowserDescriptor <ProcessAsyncResults>b__14_0();
}
public static class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.FindUsagesActionPromise : object {
    public static string ActionId;
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.FindUsagesAsyncViewProviderBase : object {
    public virtual IAsyncFindResultViewFactory GetFactoryFindUsages(SearchRequest searchRequest, INavigationExecutionHost host, ISearchResultPresenter presenter);
    public virtual IAsyncFindResultViewFactory GetFactoryShowUsages(SearchRequest searchRequest, INavigationExecutionHost host, ISearchResultPresenter presenter);
}
public abstract class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.HierarchyContextSearchBase : DeclaredElementContextSearchBase`1<SearchRequest> {
    protected virtual IEnumerable`1<IDeclaredElement> GetElementCandidates(IDataContext context, ReferencePreferenceKind kind, bool updateOnly);
    protected virtual SearchRequest CreateSearchRequest(IDataContext dataContext, IDeclaredElement declaredElement, IDeclaredElement initialTarget);
    protected abstract virtual SearchRequest CreateSearchRequestInternal(IDataContext dataContext, IDeclaredElement declaredElement);
    protected virtual bool IsAvailableInternal(IDataContext dataContext);
}
public static class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.HierarchyContextSearchUtil : object {
    public static SearchRequest CreateSpecialSearchRequest(IDataContext dataContext, ReferencePreferenceKind referencePreferenceKind);
    public static bool Allow(IDeclaredElement declaredElement);
}
public abstract class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.HierarchyWithSubstitutionContextSearchBase : RequestContextSearchBase`2<SearchRequest, DeclaredElementInstance> {
    protected virtual IEnumerable`1<DeclaredElementInstance> GetElementCandidates(IDataContext context, ReferencePreferenceKind kind, bool updateOnly);
    protected virtual SearchRequest CreateSearchRequest(IDataContext dataContext, DeclaredElementInstance element, DeclaredElementInstance initialTarget);
    protected abstract virtual SearchRequest CreateSearchRequestInternal(IDataContext dataContext, DeclaredElementInstance element);
    protected virtual IOccurrence Present(DeclaredElementInstance candidate);
    protected virtual Pair`2<VirtualFileSystemPath, TextRange> GetElementTarget(DeclaredElementInstance candidate);
    protected virtual bool IsAvailableInternal(IDataContext dataContext);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.IAsyncFindResultView {
    public abstract virtual IProgressIndicator ProcessAsyncResults(LifetimeDefinition searchLifetimeDefinition, IAsyncSearchResult asyncResult);
    public abstract virtual bool CommitResults(ICollection`1<IOccurrence> results);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.IAsyncFindResultViewFactory {
    public abstract virtual IAsyncFindResultView CreateView(IDataContext context, Lifetime lifetime, IAsyncSearchResult asyncResult);
    public abstract virtual IFindResultResultProcessor CreateResultProcessor(IDataContext context, IAsyncSearchResult asyncResult, IFindResultResultProcessor defaultResultProcessor);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.IBaseContextSearch {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.IContextSearchProvider {
    [CanBeNullAttribute]
public abstract virtual Action GetSearchesExecution(IDataContext dataContext, INavigationExecutionHost host);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.IContextSearchSearchRequestProvider`1 {
    public abstract virtual SearchesExecutionResult`1<TContextSearch> GetContextSearchRequests(IDataContext dataContext, Func`2<TContextSearch, bool> filter);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.IDeclarationSearch {
    public abstract virtual bool IsGotoDeclarationApplicable();
    public abstract virtual bool IsGotoDeclarationApplicable(IDeclaredElement declaredElement);
    [CanBeNullAttribute]
public abstract virtual SearchDeclarationsRequest GetDeclarationSearchRequest(IDeclaredElement declaredElement, Func`1<bool> checkCancelled);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.IFindResultResultProcessor {
    public abstract virtual void ShowError(IDataContext context, string message);
    public abstract virtual void ShowResults(IDataContext context, ICollection`1<IOccurrence> results, IAsyncFindResultView asyncFindResultView, bool useNavigationFeatures);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.IFindUsagesProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.IGotoImplementationsProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.IGotoInheritorsProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.IIgnoreSingleDeclarationPolicy {
    public abstract virtual bool ShouldIgnoreSingleDeclaration(IDataContext context, IDeclaration declaration, TypeUsageContextSearchBase`1<TSearchRequest> typeUsageContextSearch);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.IImplementationContextSearch {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.IInheritorsContextSearch {
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ImplementationContextSearch : TypeUsageContextSearchBase`1<SearchImplementationsRequest> {
    protected virtual SearchImplementationsRequest CreateSearchRequest(IDataContext dataContext, DeclaredElementTypeUsageInfo element, DeclaredElementTypeUsageInfo initialTarget);
    protected virtual IEnumerable`1<DeclaredElementTypeUsageInfo> GetElementCandidates(IDataContext context, ReferencePreferenceKind kind, bool updateOnly);
    protected virtual bool ShouldIgnoreSingleDeclaration(IDataContext context, IDeclaration declaration);
    protected virtual Pair`2<VirtualFileSystemPath, TextRange> GetElementTarget(DeclaredElementTypeUsageInfo candidate);
    [CanBeNullAttribute]
private static IDeclaredType GetOriginQualifierType(IDataContext dataContext, IDeclaredElement initialTarget);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.IMultipleRequestContextSearch {
    public abstract virtual RequestContextSearchCandidateType GetCandidateType(ICollection`1<IRequestContextSearchCandidate> candidates);
    [CanBeNullAttribute]
public abstract virtual SearchRequest CreateSearchRequest(IDataContext context, ICollection`1<IRequestContextSearchCandidate> selectedCandidates);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.INavigateFromHereImportantProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.INavigateFromHereProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.INavigateToBaseProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.INavigateToExtendsList {
    public abstract virtual bool Navigate(ITypeElement sourceTypeElement, ITypeElement targetTypeElement);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.INavigationExecutionHost {
    public abstract virtual void ExecuteCandidates(IDataContext dataContext, IReadOnlyCollection`1<ICandidateExecutor> candidates, AllCandidatesExecutor allCandidatesExecutor, Nullable`1<OccurrencePresentationOptions> options);
    public abstract virtual void Navigate(IDataContext context, IOccurrence occurrence);
    public abstract virtual void ShowFindResults(Func`1<IOccurrenceBrowserDescriptor> descriptor);
    public abstract virtual void ShowContextPopupMenu(IDataContext context, ICollection`1<IOccurrence> occurrences, Func`1<IOccurrenceBrowserDescriptor> descriptorBuilder, OccurrencePresentationOptions options, bool skipMenuIfSingleEnabled, string title, Func`1<Pair`2<ICollection`1<ITypeElement>, TypeDependenciesOptions>> showOnDiagram, string warning);
    public abstract virtual void ShowGlobalPopupMenu(ISolution solution, ICollection`1<IOccurrence> occurrences, bool activate, PopupWindowContextSource windowContext, Func`1<IOccurrenceBrowserDescriptor> descriptorBuilder, OccurrencePresentationOptions options, bool skipMenuIfSingleEnabled, string title, Func`1<Pair`2<ICollection`1<ITypeElement>, TypeDependenciesOptions>> showOnDiagram);
    public abstract virtual bool ProcessImmediateResult(IDataContext context, ICollection`1<IOccurrence> results, ISearchResultPresenter searchResultPresenter, SearchRequest request, Action beforeProcess);
    public abstract virtual bool ProcessImmediateResultHierarchy(IDataContext context, ICollection`1<IOccurrence> results, ISearchResultPresenter presenter, SearchRequest request);
    public abstract virtual bool ProcessImmediateResultHighlightUsages(IDataContext context, ICollection`1<IOccurrence> results);
    public abstract virtual void ShowTooltip(IDataContext context, string message);
    [NotNullAttribute]
public abstract virtual IOccurrencePopupMenu ShowAsyncContextPopupMenu(IDataContext context, string title, OccurrencePresentationOptions options);
    public abstract virtual void ShowPopupMenu(JetPopupMenu menu, LifetimeDefinition menuLifetime, ShowWhen showWhen);
    [NotNullAttribute]
public abstract virtual IAsyncOccurrenceBridge CreateAsyncDescriptorBridge(LifetimeDefinition searchLifetimeDefinition, IDataContext context, string title, OccurrencePresentationOptions options, Func`1<IAsyncOccurrenceBrowserDescriptor> descriptorBuilder);
}
[ShellFeaturePartAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.InheritorsContextSearch : HierarchyWithSubstitutionContextSearchBase {
    protected ReferencePreferenceKind ReferencePreferenceKind { get; }
    protected IEqualityComparer`1<DeclaredElementInstance> Comparer { get; }
    protected virtual SearchRequest CreateSearchRequestInternal(IDataContext dataContext, DeclaredElementInstance element);
    protected virtual IEnumerable`1<DeclaredElementInstance> GetElementCandidates(IDataContext context, ReferencePreferenceKind kind, bool updateOnly);
    protected virtual ReferencePreferenceKind get_ReferencePreferenceKind();
    protected virtual Pair`2<VirtualFileSystemPath, TextRange> GetElementTarget(DeclaredElementInstance candidate);
    protected virtual IEqualityComparer`1<DeclaredElementInstance> get_Comparer();
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.IOverloadsContextSearch {
    public abstract virtual IEnumerable`1<DocumentRange> GetOverloadRanges(IDataContext dataContext);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.IRequestContextSearch {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IRequestContextSearchCandidate> GetCandidates(IDataContext context);
    [CanBeNullAttribute]
public abstract virtual SearchRequest CreateSearchRequest(IDataContext context, IRequestContextSearchCandidate selectedCandidate);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.IRequestContextSearchCandidate {
    public bool IsExecuteImmediately { get; }
    [NotNullAttribute]
public abstract virtual IOccurrence Present();
    public abstract virtual bool get_IsExecuteImmediately();
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.IRequestContextSearchCandidatesProvider`1 {
    public abstract virtual IEnumerable`1<ValueTuple`2<IRequestContextSearchCandidate, IRequestContextSearch>> GetCandidates(IDataContext dataContext, IEnumerable`1<IRequestContextSearch> contextSearches);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ISearchDomainContext {
    public abstract virtual NamedSearchDomain GetDefaultDomain(bool sourcesOnly);
    public abstract virtual NamedSearchDomain[] GetUserSelectableVariants(bool sourcesOnly);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ISearchResultPresenter {
    public abstract virtual void ProcessResults(IDataContext context, SearchRequest searchRequest, INavigationExecutionHost host, ICollection`1<IOccurrence> results, Func`1<IOccurrenceBrowserDescriptor> descriptorFactory);
    public abstract virtual bool ProcessImmediateResults(IDataContext context, SearchRequest searchRequest, INavigationExecutionHost host, ICollection`1<IOccurrence> results);
    public abstract virtual void ProcessMessage(IDataContext context, SearchRequest searchRequest, INavigationExecutionHost host, string message);
    public abstract virtual string GetNotFoundMessage(SearchRequest request);
    [NotNullAttribute]
public abstract virtual IOccurrenceBrowserDescriptor CreateSearchDescriptor(SearchRequest searchRequest, ICollection`1<IOccurrence> results);
    public abstract virtual bool ProcessRawResults(IDataContext context, ICollection`1<IOccurrence> results, INavigationExecutionHost navigationExecutionHost, SearchRequest searchRequest);
    [CanBeNullAttribute]
public abstract virtual IAsyncOccurrenceBrowserDescriptor TryCreateAsyncDescriptor(SearchRequest searchRequest);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.IShowUsagesProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ISpecialElementFinder {
    public ReferencePreferenceKind Kind { get; }
    public PreferLocationStyle LocationStyle { get; }
    [CanBeNullAttribute]
public abstract virtual object GetSearchTarget(IFile file, DocumentRange range, DocumentOffset caretOffset);
    public abstract virtual void FindOccurrences(object target, IFindResultConsumer`1<IOccurrence> consumer, IProgressIndicator progressIndicator, ISearchDomain scopeDomain);
    public abstract virtual string Present(object target);
    public abstract virtual string GetTitle();
    public abstract virtual ReferencePreferenceKind get_Kind();
    [NotNullAttribute]
public abstract virtual ISearchDomainContext GetSearchDomainContext(object target);
    public abstract virtual IEnumerable`1<DocumentRange> GetTargetRanges(object target, IProjectFile file);
    public abstract virtual PreferLocationStyle get_LocationStyle();
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ITypeDeclarationContextSearch {
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.LegacyFindResultsView : object {
    private Func`2<ICollection`1<IOccurrence>, IOccurrenceBrowserDescriptor> myDescriptorBuilder;
    private IContextNotificationHost myContextNotificationHost;
    private IFindResultsBrowser myFindResultsBrowser;
    public LegacyFindResultsView(ISolution solution, Func`2<ICollection`1<IOccurrence>, IOccurrenceBrowserDescriptor> descriptorBuilder);
    public IProgressIndicator CreateProgressIndicator(LifetimeDefinition lifetimeDefinition);
    public sealed virtual IProgressIndicator ProcessAsyncResults(LifetimeDefinition searchLifetimeDefinition, IAsyncSearchResult asyncResult);
    public sealed virtual bool CommitResults(ICollection`1<IOccurrence> results);
}
public abstract class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.MultipleDeclaredElementsContextSearchBase`1 : MultipleRequestContextSearchBase`2<TSearchRequest, IDeclaredElement> {
    protected virtual IOccurrence Present(IDeclaredElement candidate);
    protected virtual IEnumerable`1<IDeclaredElement> GetElementCandidates(IDataContext context, ReferencePreferenceKind kind, bool updateOnly);
    protected virtual Pair`2<VirtualFileSystemPath, TextRange> GetElementTarget(IDeclaredElement candidate);
}
public abstract class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.MultipleRequestContextSearchBase`2 : RequestContextSearchBase`2<TSearchRequest, TCandidate> {
    public virtual RequestContextSearchCandidateType GetCandidateType(ICollection`1<IRequestContextSearchCandidate> candidates);
    protected virtual ICollection`1<TCandidate> Promote(ICollection`1<TCandidate> elements);
    protected sealed virtual TSearchRequest CreateSearchRequest(IDataContext context, TCandidate element, TCandidate initialTarget);
    protected virtual SearchRequest CreateAggregateSearchRequest(IDataContext context, ICollection`1<TCandidate> initialTargets);
    private sealed virtual override SearchRequest JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.IMultipleRequestContextSearch.CreateSearchRequest(IDataContext context, ICollection`1<IRequestContextSearchCandidate> selectedCandidates);
    protected abstract virtual TSearchRequest CreateSearchRequest(IDataContext context, ICollection`1<TCandidate> elements, ICollection`1<TCandidate> initialTargets);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.NamedSearchDomain : object {
    private ISearchDomain mySearchDomain;
    private string myPresentableName;
    public ISearchDomain SearchDomain { get; }
    public string PresentableName { get; }
    public string PresentableNameWithBeControlAccelerators { get; }
    public string PresentableNameWithoutAccelerators { get; }
    public NamedSearchDomain(ISearchDomain searchDomain, string presentableName);
    public ISearchDomain get_SearchDomain();
    public string get_PresentableName();
    public string get_PresentableNameWithBeControlAccelerators();
    public string get_PresentableNameWithoutAccelerators();
}
public static class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.NavigateToExtendsListService : object {
    public static bool Navigate(ITypeElement sourceTypeElement, ITypeElement targetTypeElement);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.NavigationActionGroup : ExtensibleActionGroup {
    public static NavigationActionGroup Blessed;
    public static NavigationActionGroup Important;
    public static NavigationActionGroup APIs;
    public static NavigationActionGroup Decompiler;
    public static NavigationActionGroup UnitTests;
    public static NavigationActionGroup Other;
    private NavigationActionGroup(string name, float order);
    private static NavigationActionGroup();
}
public enum JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.PreferLocationStyle : Enum {
    public int value__;
    public static PreferLocationStyle None;
    public static PreferLocationStyle File;
    public static PreferLocationStyle Type;
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.RefreshFindResulstView : object {
    private IAsyncOccurrenceBrowserDescriptor myBrowserDescriptor;
    private ISolution mySolution;
    private OccurrenceAsyncBridge myOccurrenceAsyncBridge;
    public RefreshFindResulstView(ISolution solution, IAsyncOccurrenceBrowserDescriptor browserDescriptor);
    public sealed virtual IProgressIndicator ProcessAsyncResults(LifetimeDefinition searchLifetimeDefinition, IAsyncSearchResult asyncResult);
    public sealed virtual bool CommitResults(ICollection`1<IOccurrence> results);
    [CompilerGeneratedAttribute]
private IAsyncOccurrenceBrowserDescriptor <ProcessAsyncResults>b__4_0();
}
public abstract class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.RequestContextSearchBase`2 : object {
    private static ILogger ourLog;
    protected IEqualityComparer`1<TElement> Comparer { get; }
    protected bool IsExecuteImmediately { get; }
    protected ReferencePreferenceKind ReferencePreferenceKind { get; }
    private static RequestContextSearchBase`2();
    public virtual bool IsAvailable(IDataContext context);
    public virtual bool IsContextApplicable(IDataContext dataContext);
    protected abstract virtual IOccurrence Present(TElement candidate);
    protected virtual IEqualityComparer`1<TElement> get_Comparer();
    private sealed virtual override IEnumerable`1<IRequestContextSearchCandidate> JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.IRequestContextSearch.GetCandidates(IDataContext context);
    protected virtual Pair`2<VirtualFileSystemPath, TextRange> GetElementTarget(TElement candidate);
    protected virtual bool get_IsExecuteImmediately();
    [NotNullAttribute]
protected abstract virtual IEnumerable`1<TElement> GetElementCandidates(IDataContext context, ReferencePreferenceKind kind, bool updateOnly);
    public sealed virtual SearchRequest CreateSearchRequest(IDataContext context, IRequestContextSearchCandidate selectedCandidate);
    protected virtual SearchRequest CreateAggregateSearchRequest(IDataContext context, ICollection`1<TElement> initialTargets);
    protected abstract virtual TSearchRequest CreateSearchRequest(IDataContext context, TElement element, TElement initialTarget);
    protected virtual ReferencePreferenceKind get_ReferencePreferenceKind();
    protected virtual bool IsAvailableInternal(IDataContext context);
}
public enum JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.RequestContextSearchCandidateType : Enum {
    public int value__;
    public static RequestContextSearchCandidateType Default;
    public static RequestContextSearchCandidateType MutuallyExclusive;
    public static RequestContextSearchCandidateType ForceMultipleExecution;
}
public abstract class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.RequestContextSearchProvider`3 : ContextSearchesCollector`1<TContextSearch> {
    protected RequestContextSearchProvider`3(IFeaturePartsContainer manager);
    public sealed virtual IEnumerable`1<ValueTuple`2<IRequestContextSearchCandidate, IRequestContextSearch>> GetCandidates(IDataContext dataContext, IEnumerable`1<IRequestContextSearch> contextSearches);
    protected virtual void Execute(IDataContext context, IEnumerable`1<TContextSearch> searches, INavigationExecutionHost host);
    protected virtual void ProcessResults(IDataContext context, TSearchRequest searchRequest, INavigationExecutionHost host, ICollection`1<IOccurrence> occurrences, Func`1<IOccurrenceBrowserDescriptor> descriptorFactory);
    protected virtual bool ProcessImmediateResults(IDataContext context, SearchRequest searchRequest, INavigationExecutionHost host, ICollection`1<IOccurrence> occurrences);
    protected virtual void ProcessMessage(IDataContext context, SearchRequest searchRequest, INavigationExecutionHost host, string message);
    protected abstract virtual TSearchDescriptor CreateSearchDescriptor(TSearchRequest searchRequest, ICollection`1<IOccurrence> results);
    public virtual string GetNotFoundMessage(SearchRequest request);
    private void ExecuteSearchRequestInternal(IDataContext context, SearchRequest searchRequest, INavigationExecutionHost host);
    protected virtual void ExecuteSearchRequest(IDataContext context, SearchRequest searchRequest, INavigationExecutionHost host);
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ISearchResultPresenter.ProcessResults(IDataContext context, SearchRequest searchRequest, INavigationExecutionHost host, ICollection`1<IOccurrence> results, Func`1<IOccurrenceBrowserDescriptor> descriptorFactory);
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ISearchResultPresenter.ProcessImmediateResults(IDataContext context, SearchRequest searchRequest, INavigationExecutionHost host, ICollection`1<IOccurrence> occurrences);
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ISearchResultPresenter.ProcessMessage(IDataContext context, SearchRequest searchRequest, INavigationExecutionHost host, string message);
    private sealed virtual override IOccurrenceBrowserDescriptor JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ISearchResultPresenter.CreateSearchDescriptor(SearchRequest searchRequest, ICollection`1<IOccurrence> results);
    public virtual bool ProcessRawResults(IDataContext context, ICollection`1<IOccurrence> results, INavigationExecutionHost navigationExecutionHost, SearchRequest searchRequest);
    public sealed virtual IAsyncOccurrenceBrowserDescriptor TryCreateAsyncDescriptor(SearchRequest searchRequest);
    public IAsyncOccurrenceBrowserDescriptor TryCreateAsyncDescriptor(TSearchRequest searchRequest);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.SearchDomainContextProvider : object {
    [NotNullAttribute]
public virtual ISearchDomainContext GetSearchDomainContext(IDataContext dataContext);
}
public static class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.SearchDomainContextUtil : object {
    public static DataConstant`1<ISearchDomainContext> SearchDomainContextDataConstant;
    private static SearchDomainContextUtil();
    [NotNullAttribute]
public static ISearchDomainContext GetSearchDomainContext(IDataContext dataContext);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.SearchesExecutionResult`1 : object {
    private IDataContext myCapturedContext;
    private FinderModuleReferenceResolveContextProvider myCache;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<TContextSearch> <ContextSearches>k__BackingField;
    public IReadOnlyList`1<TContextSearch> ContextSearches { get; }
    public SearchesExecutionResult`1(IEnumerable`1<TContextSearch> contextSearches, IDataContext capturedContext, FinderModuleReferenceResolveContextProvider cache);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<TContextSearch> get_ContextSearches();
    public void DoWithCapturedContext(Action`2<IDataContext, IEnumerable`1<TContextSearch>> action);
    public T DoWithCapturedContext(Func`3<IDataContext, IEnumerable`1<TContextSearch>, T> action);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.SearchRequestExecuter : SearchRequestExecuterBase {
    [CanBeNullAttribute]
private IContextNotificationHost myContextNotificationHost;
    [CanBeNullAttribute]
private IAsyncFindResultViewFactory myAsyncFindResultViewFactory;
    [NotNullAttribute]
private IFindResultResultProcessor myResultProcessor;
    private IAsyncFindResultView myAsyncFindResultView;
    private LiveCombinedProgressIndicator myProgressIndicator;
    private LifetimeDefinition mySearchLifetimeDefinition;
    public SearchRequestExecuter(IDataContext context, SearchRequest searchRequest, ISearchResultPresenter searchResultPresenter, INavigationExecutionHost navigationExecutionHost, IAsyncFindResultViewFactory asyncFindResultViewFactory);
    protected virtual bool TryExecuteAsync();
    protected virtual void ProcessAsyncResults(Lifetime lifetime, IAsyncSearchResult asyncResult);
    protected virtual IProgressIndicator CreateProgressIndicator(LifetimeDefinition lifetimeDefinition);
    protected virtual void ShowError(string message);
    protected virtual void ShowResults(ICollection`1<IOccurrence> results, bool useNavigationFeatures);
    [CompilerGeneratedAttribute]
private void <CreateProgressIndicator>b__9_0();
}
public abstract class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.SearchRequestExecuterBase : object {
    [NotNullAttribute]
private SearchRequest mySearchRequest;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private SearchRequestExecuterEvents myEvents;
    [NotNullAttribute]
private IDataContext myContext;
    private LifetimeDefinition mySearchRequestLifetimeDefinition;
    private IProgressIndicator myProgressIndicator;
    private DocumentCaretMark myDocumentCaretMark;
    private ILogger myLogger;
    [CanBeNullAttribute]
private IDisposable myOperationPerfCookie;
    [NotNullAttribute]
protected SearchRequest SearchRequest { get; }
    [NotNullAttribute]
protected ISolution Solution { get; }
    [NotNullAttribute]
protected IDataContext Context { get; }
    public IFinderSearchRoot SearchRoot { get; }
    public IFinder Finder { get; }
    protected SearchRequestExecuterBase(IDataContext context, SearchRequest searchRequest);
    protected SearchRequest get_SearchRequest();
    protected ISolution get_Solution();
    protected IDataContext get_Context();
    public void Execute();
    protected virtual void ExecuteSync();
    protected virtual bool TryExecuteAsync();
    public virtual IFinderSearchRoot get_SearchRoot();
    public virtual IFinder get_Finder();
    protected abstract virtual void ProcessAsyncResults(Lifetime lifetime, IAsyncSearchResult asyncResult);
    protected abstract virtual IProgressIndicator CreateProgressIndicator(LifetimeDefinition lifetimeDefinition);
    private void ProcessError(string errorMessage);
    private void ProcessResults(ICollection`1<IOccurrence> results);
    protected abstract virtual void ShowError(string message);
    protected abstract virtual void ShowResults(ICollection`1<IOccurrence> results, bool caretAtTheSamePosition);
    [CompilerGeneratedAttribute]
private void <TryExecuteAsync>b__18_0();
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.SearchRequestExecuterEvents : object {
    private ISimpleSignal myRequestCompleted;
    private ISimpleSignal myRequestCompletedWithErrors;
    public ISimpleSignal RequestCompleted { get; }
    public ISimpleSignal RequestCompletedWithErrors { get; }
    public SearchRequestExecuterEvents(Lifetime lifetime);
    public ISimpleSignal get_RequestCompleted();
    public ISimpleSignal get_RequestCompletedWithErrors();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.SearchRequestNotificationModel : ContextNotificationModel {
    [NotNullAttribute]
private ProgressIndicator myProgressIndicator;
    [NotNullAttribute]
public ProgressIndicator ProgressIndicator { get; }
    public bool HasProgress { get; }
    public string Title { get; }
    public double Fraction { get; }
    public string Text { get; }
    public SearchRequestNotificationModel(LifetimeDefinition definition);
    public ProgressIndicator get_ProgressIndicator();
    public virtual void Cancel();
    public virtual bool get_HasProgress();
    public virtual string get_Title();
    public virtual double get_Fraction();
    public string get_Text();
}
[PsiSharedComponentAttribute]
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.SpecialElementFinderManager : object {
    private IEnumerable`1<ISpecialElementFinder> mySpecialFinders;
    public SpecialElementFinderManager(IEnumerable`1<ISpecialElementFinder> specialFinders);
    public static object GetSpecialSearchTarget(IDataContext context, ReferencePreferenceKind kind, ISpecialElementFinder& finder);
    [CanBeNullAttribute]
public static object GetSpecialSearchTarget(IDataContext context, ReferencePreferenceKind kind, ISpecialElementFinder& finder);
    [CanBeNullAttribute]
public static object GetSpecialSearchTarget(ISolution solution, IPsiSourceFile sourceFile, DocumentRange documentRange, DocumentOffset caretOffset, ReferencePreferenceKind kind, ISpecialElementFinder& finder);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.TextControlIndicatorToFindUsageFactory : object {
    private SearchRequest mySearchRequest;
    private INavigationExecutionHost myHost;
    private ISearchResultPresenter myPresentor;
    private object myLock;
    public TextControlIndicatorToFindUsageFactory(SearchRequest searchRequest, INavigationExecutionHost host, ISearchResultPresenter presentor);
    public virtual IAsyncFindResultView CreateView(IDataContext context, Lifetime lifetime, IAsyncSearchResult asyncResult);
    public virtual IFindResultResultProcessor CreateResultProcessor(IDataContext context, IAsyncSearchResult asyncResult, IFindResultResultProcessor defaultResultProcessor);
    private void SwitchToFindUsages(IDataContext context, Lifetime lifetime, AsyncSearchResultViewController strategy);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.TextControllProgressView : object {
    [CanBeNullAttribute]
private IContextNotificationHost myContextNotificationHost;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <UsagesFound>k__BackingField;
    public bool IsAsyncSupport { get; }
    [CanBeNullAttribute]
public IProperty`1<bool> UsagesFound { get; private set; }
    public TextControllProgressView(ISolution solution);
    public bool get_IsAsyncSupport();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_UsagesFound();
    [CompilerGeneratedAttribute]
private void set_UsagesFound(IProperty`1<bool> value);
    public IProgressIndicator CreateProgressIndicator(LifetimeDefinition lifetimeDefinition);
    public sealed virtual IProgressIndicator ProcessAsyncResults(LifetimeDefinition searchLifetimeDefinition, IAsyncSearchResult asyncResult);
    public sealed virtual bool CommitResults(ICollection`1<IOccurrence> results);
    [CompilerGeneratedAttribute]
private void <ProcessAsyncResults>b__9_0(IOccurrence _);
}
[ShellComponentAttribute("0")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.TooltipHelper : object {
    private ITextControlManager myTextControlManager;
    private IMainWindowPopupWindowContext myMainWindowPopupWindowContexts;
    private IUIApplication myUIApplication;
    private ITooltipManager myTooltipManager;
    public TooltipHelper(ITextControlManager textControlManager, IMainWindowPopupWindowContext mainWindowPopupWindowContexts, IUIApplication uiApplication, ITooltipManager tooltipManager);
    public bool TryShowTooltip(LifetimeDefinition lifetimeDefinition, RichText richText);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.TooltipProgressView : object {
    [CompilerGeneratedAttribute]
private LifetimeDefinition <ProgressLifetimeDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private LifetimeDefinition <TooltipLifetimeDefinition>k__BackingField;
    private TooltipHelper myTooltipHelper;
    private RichText myRichText;
    [NotNullAttribute]
public LifetimeDefinition ProgressLifetimeDefinition { get; }
    [NotNullAttribute]
public LifetimeDefinition TooltipLifetimeDefinition { get; }
    public TooltipProgressView(ISolution solution, Lifetime outerworldLifetime, RichText richText);
    [CompilerGeneratedAttribute]
public LifetimeDefinition get_ProgressLifetimeDefinition();
    [CompilerGeneratedAttribute]
public LifetimeDefinition get_TooltipLifetimeDefinition();
    public sealed virtual IProgressIndicator ProcessAsyncResults(LifetimeDefinition searchLifetimeDefinition, IAsyncSearchResult asyncResult);
    public sealed virtual bool CommitResults(ICollection`1<IOccurrence> results);
    [CompilerGeneratedAttribute]
private void <ProcessAsyncResults>b__9_0();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.TooltipToFindUsagesViewFactory : object {
    private SearchRequest mySearchRequest;
    private INavigationExecutionHost myHost;
    private ISearchResultPresenter myPresentor;
    private int myUsagesFound;
    public TooltipToFindUsagesViewFactory(SearchRequest searchRequest, INavigationExecutionHost host, ISearchResultPresenter presentor);
    public sealed virtual IAsyncFindResultView CreateView(IDataContext context, Lifetime lifetime, IAsyncSearchResult asyncResult);
    [NotNullAttribute]
private IAsyncFindResultView CreateViewSynchronized(IDataContext context, Lifetime lifetime, IAsyncSearchResult asyncResult);
    private void SwitchToFindUsages(IDataContext context, Lifetime lifetime, AsyncSearchResultViewController strategy);
    public sealed virtual IFindResultResultProcessor CreateResultProcessor(IDataContext context, IAsyncSearchResult asyncResult, IFindResultResultProcessor defaultResultProcessor);
}
[ShellFeaturePartAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.TypeDeclarationContextSearch : DeclaredElementContextSearchBase`1<SearchDeclarationsRequest> {
    protected ReferencePreferenceKind ReferencePreferenceKind { get; }
    protected virtual SearchDeclarationsRequest CreateSearchRequest(IDataContext dataContext, IDeclaredElement declaredElement, IDeclaredElement initialTarget);
    protected virtual ReferencePreferenceKind get_ReferencePreferenceKind();
    protected virtual bool IsAvailableInternal(IDataContext dataContext);
    protected virtual IEnumerable`1<IDeclaredElement> GetElementCandidates(IDataContext context, ReferencePreferenceKind kind, bool updateOnly);
    protected virtual ICollection`1<DeclaredElementInstance> DoGetCandidateInstances(IDataContext context, ReferencePreferenceKind kind, bool availableOnly);
    private static void FillDeclaredElementInstances(DeclaredElementInstance elementInstance, Dictionary`2<DeclaredElementInstance, int> container);
    private static void FillDeclaredElementInstances(IDeclaredType declaredType, Dictionary`2<DeclaredElementInstance, int> container, int level);
}
public abstract class JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.TypeUsageContextSearchBase`1 : RequestContextSearchBase`2<TSearchRequest, DeclaredElementTypeUsageInfo> {
    protected ReferencePreferenceKind ReferencePreferenceKind { get; }
    protected virtual bool IsAvailableInternal(IDataContext dataContext);
    protected virtual ReferencePreferenceKind get_ReferencePreferenceKind();
    protected virtual IEnumerable`1<DeclaredElementTypeUsageInfo> GetElementCandidates(IDataContext context, ReferencePreferenceKind kind, bool updateOnly);
    private IEnumerable`1<DeclaredElementTypeUsageInfo> GetElementCandidatesInternal(IDataContext context, ReferencePreferenceKind kind, bool includeSharedFiles);
    protected virtual IOccurrence Present(DeclaredElementTypeUsageInfo candidate);
    protected virtual bool ShouldIgnoreSingleDeclaration(IDataContext context, IDeclaration declaration);
    protected virtual Pair`2<VirtualFileSystemPath, TextRange> GetElementTarget(DeclaredElementTypeUsageInfo candidate);
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Feature.Services.Navigation.CustomHighlighting.AutomaticHighlightingHidingPolicy : Enum {
    public int value__;
    public static AutomaticHighlightingHidingPolicy None;
    public static AutomaticHighlightingHidingPolicy DocumentChange;
    public static AutomaticHighlightingHidingPolicy SelectionChange;
    public static AutomaticHighlightingHidingPolicy TextControlFocus;
    public static AutomaticHighlightingHidingPolicy NewRequestAdded;
    public static AutomaticHighlightingHidingPolicy FrameChanged;
    public static AutomaticHighlightingHidingPolicy Transient;
}
public enum JetBrains.ReSharper.Feature.Services.Navigation.CustomHighlighting.CustomHighlightingKind : Enum {
    public int value__;
    public static CustomHighlightingKind Target;
    public static CustomHighlightingKind ReadUsage;
    public static CustomHighlightingKind WriteUsage;
    public static CustomHighlightingKind Navigation;
    public static CustomHighlightingKind Other;
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Navigation.CustomHighlighting.CustomHighlightingManager : object {
    private static string Key;
    private Lifetime myLifetime;
    private IDocumentMarkupManager myDocumentMarkupManager;
    private IShellLocks myLocks;
    private IStatusBar myStatusBar;
    private ILogger myLogger;
    private ICollectionEvents`1<CustomHighlightingRequest> myActiveRequests;
    public CustomHighlightingManager(Lifetime lifetime, DocumentManager documentManager, IDocumentMarkupManager documentMarkupManager, IShellLocks locks, IActionManager actionman, ITextControlManager textman, ToolWindowManager toolman, ResultListManager resultlistman, IStatusBar statusBar, ILogger logger);
    private static CustomHighlightingManager();
    [NotNullAttribute]
public static CustomHighlightingManager GetInstance(ISolution solution);
    private void Init_KeepDocumentMarkupAlive(Lifetime lifetime);
    private void Init_Autohide(Lifetime lifetime, DocumentManager documentManager, IActionManager actionman, ITextControlManager textman, ToolWindowManager toolman);
    private void Init_ResultLists(Lifetime lifetime, ResultListManager resultlistman, ITextControlManager textman);
    public void Show(CustomHighlightingRequest request);
    public void Hide(CustomHighlightingRequest request);
    [NotNullAttribute]
public IEnumerable`1<CustomHighlightingRequest> EnumerateRequests(ITextControl textControl);
    [NotNullAttribute]
public IEnumerable`1<CustomHighlightingRequest> EnumerateRequests(IDocument document);
    [GuardAttribute("1")]
public void HideAll(IDocument document);
    [GuardAttribute("1")]
private void HideGuarded(IEnumerable`1<CustomHighlightingRequest> requests);
    [GuardAttribute("1")]
private void HideAllGuarded();
    [GuardAttribute("2")]
private void HideAllUnguarded();
    private void ShowHighlighters(CustomHighlightingRequest request);
    private void HideHighlighters(CustomHighlightingRequest request);
    [CanBeNullAttribute]
private IHighlighter GetNextHighlighterFromCaret(ITextControl textControl, IEnumerable`1<CustomHighlightingRequest> requests, LogicalDirection direction);
    [CompilerGeneratedAttribute]
private void <Init_KeepDocumentMarkupAlive>b__9_0(Lifetime lifeRequest, CustomHighlightingRequest request);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Navigation.CustomHighlighting.CustomHighlightingManagerEx : object {
    [ExtensionAttribute]
public static CustomHighlightingRequest Show(CustomHighlightingManager thіs, ITextControl textcontrol, IList`1<CustomHighlightingEntry> ranges, AutomaticHighlightingHidingPolicy hidePolicy, Nullable`1<CustomHighlightingRequestKind> maybeKind);
    [ExtensionAttribute]
public static CustomHighlightingRequest Show(CustomHighlightingManager thіs, IDocument document, IList`1<CustomHighlightingEntry> ranges, AutomaticHighlightingHidingPolicy hidePolicy, CustomHighlightingRequestKind kind);
    [ExtensionAttribute]
public static void HighlightResultList(CustomHighlightingManager thіs, ITextControl textControl, IEnumerable`1<DocumentRange> ranges);
    [ExtensionAttribute]
public static void Show(CustomHighlightingManager thіs, Lifetime lifetime, ITextControl textcontrol, IList`1<CustomHighlightingEntry> ranges, AutomaticHighlightingHidingPolicy hidepolicy);
    private static void Show_ScheduleHide(Lifetime lifetime, CustomHighlightingManager customHighlightingManager, JetWeakReference`1<CustomHighlightingRequest> weakRequest);
}
[RegisterHighlighterAttribute("ReSharper Navigation Highlight")]
[RegisterHighlighterAttribute("ReSharper Navigation Highlight Marker on Error Stripe")]
[RegisterHighlighterAttribute("ReSharper Read Usage")]
[RegisterHighlighterAttribute("ReSharper Read Usage Marker on Error Stripe")]
[RegisterHighlighterAttribute("ReSharper Write Usage")]
[RegisterHighlighterAttribute("ReSharper Write Usage Marker on Error Stripe")]
[RegisterHighlighterAttribute("ReSharper Highlight")]
[RegisterHighlighterAttribute("ReSharper Highlight Marker on Error Stripe")]
[RegisterHighlighterAttribute("ReSharper Highlight Target")]
[RegisterHighlighterAttribute("ReSharper Highlight Target Marker on Error Stripe")]
public static class JetBrains.ReSharper.Feature.Services.Navigation.CustomHighlighting.CustomHighlightingManagerIds : object {
    public static string OtherHighlighterID;
    public static string ReadHighlighterID;
    public static string TargetHighlighterID;
    public static string WriteHighlighterID;
    public static string NavigationHighlighterID;
    public static string OtherHighlighterErrorStripeID;
    public static string ReadHighlighterErrorStripeID;
    public static string TargetHighlighterErrorStripeID;
    public static string WriteHighlighterErrorStripeID;
    public static string NavigationHighlighterErrorStripeID;
}
public class JetBrains.ReSharper.Feature.Services.Navigation.CustomHighlighting.CustomHighlightingRequest : object {
    [NotNullAttribute]
public IDocument Document;
    [NotNullAttribute]
public ICollection`1<CustomHighlightingEntry> Entries;
    public AutomaticHighlightingHidingPolicy HidingPolicy;
    public CustomHighlightingRequestKind RequestKind;
    [NotNullAttribute]
internal IList`1<IHighlighter> ActiveHighlighters;
    [CanBeNullAttribute]
internal string StatusBarMessage;
    public CustomHighlightingRequest(IDocument document, ICollection`1<CustomHighlightingEntry> entries, AutomaticHighlightingHidingPolicy hidingPolicy, CustomHighlightingRequestKind requestKind, string statusBarMessage);
    public virtual string ToString();
}
public enum JetBrains.ReSharper.Feature.Services.Navigation.CustomHighlighting.CustomHighlightingRequestKind : Enum {
    public int value__;
    public static CustomHighlightingRequestKind HighlightOnly;
    public static CustomHighlightingRequestKind HighlightAndPublishResultList;
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Navigation.CustomHighlighting.HighlightUsagesService : object {
    private CustomHighlightingManager myCustomHighlightingManager;
    public HighlightUsagesService(CustomHighlightingManager customHighlightingManager);
    public virtual void ShowResults(CustomHighlightingRequest request);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.CustomHighlighting.IHighlightUsagesService {
    public abstract virtual void ShowResults(CustomHighlightingRequest request);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Navigation.DeclaredElementNavigationExtensions : object {
    [ExtensionAttribute]
public static void Navigate(IDeclaredElement target, bool transferFocus, PopupWindowContextSource windowContext, Nullable`1<OccurrencePresentationOptions> options, TabOptions tabOptions);
    [ExtensionAttribute]
public static ICollection`1<IOccurrence> GetNavigationDeclarations(IDeclaredElement target);
}
[ObsoleteAttribute("Try to use DeclaredElementNavigationService instead. INavigationPoint encapsulates the low-level navigation tool, not the high-level abstract entity")]
public class JetBrains.ReSharper.Feature.Services.Navigation.DeclaredElementNavigationPoint : object {
    private IDeclaredElement myDeclaredElement;
    public DeclaredElementNavigationPoint(IDeclaredElement declaredElement);
    public virtual Task`1<bool> Navigate(NavigationOptions options);
    public sealed virtual IconId GetPresentationImage();
    public sealed virtual RichText GetPresentationText();
    protected virtual void AppendContainer(RichText text, ITypeMember typeMember, PsiLanguageType language);
    public sealed virtual RichText GetSecondaryPresentationText();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Navigation.DeclaredElementNavigationService : object {
    private Lifetime myLifetime;
    private SolutionFeaturePartsContainer mySolutionFeaturePartsContainer;
    private IShellLocks myLocks;
    public DeclaredElementNavigationService(Lifetime lifetime, SolutionFeaturePartsContainer solutionFeaturePartsContainer, IUIApplication environment, IShellLocks locks);
    public virtual void Navigate(IDeclaredElement declaredElement, PopupWindowContextSource windowContext, bool transferFocus, Nullable`1<OccurrencePresentationOptions> options, TabOptions tabOptions);
    public sealed virtual ICollection`1<IOccurrence> GetDeclarations(IDeclaredElement declaredElement, Func`1<bool> checkCancelled);
    public sealed virtual void ExecuteCandidates(IEnumerable`1<IDeclaredElement> candidates, PopupWindowContextSource source, bool transferFocus);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Navigation.DefaultDeclaredElementNavigator : object {
    private static ILogger ourLog;
    private ISolution mySolution;
    private IFeaturePartsContainer myShellFeaturePartsContainer;
    public DefaultDeclaredElementNavigator(ISolution solution, IFeaturePartsContainer shellFeaturePartsContainer, ISettingsStore settingsStore);
    private static DefaultDeclaredElementNavigator();
    public virtual bool IsApplicable(IDeclaredElement declaredElement);
    public virtual void Navigate(IDeclaredElement declaredElement, PopupWindowContextSource windowContext, bool transferFocus, SolutionFeaturePartsContainer container, Nullable`1<OccurrencePresentationOptions> options, TabOptions tabOptions);
    protected virtual Comparer`1<IOccurrence> CreateComparer(SearchRequest request);
    public sealed virtual ICollection`1<IOccurrence> GetDeclarations(IDeclaredElement declaredElement, Func`1<bool> checkCancelled);
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Navigation.DefaultDeclaredElementPeeker : object {
    public bool IsAvailable { get; }
    public virtual bool get_IsAvailable();
    public virtual void Peek(IDeclaredElement declaredElement, ITextControl textControl);
}
[RelatedFilesProviderAttribute("JetBrains.ProjectModel.KnownProjectFileType", "16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.DefaultRelatedFilesProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Navigation.DefaultRelatedFilesProvider/<GetRelatedFiles>d__0")]
public virtual IEnumerable`1<RelatedFileOccurence> GetRelatedFiles(IProjectFile projectFile);
    [CanBeNullAttribute]
private static string GetRelationPresentation(IPathReference reference);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.ICanShowOnDiagramDescriptor {
    public TypeDependenciesOptions DiagrammingOptions { get; }
    public abstract virtual IEnumerable`1<ITypeElement> GetTypeElementsForDiagram();
    public abstract virtual bool HasTypeElementsForDiagram();
    public abstract virtual TypeDependenciesOptions get_DiagrammingOptions();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.IgnoredNodes : object {
    [NotNullAttribute]
private JetHashSet`1<object> myIgnoredValues;
    [NotNullAttribute]
private IProperty`1<bool> myShowIgnoredOccurrences;
    [NotNullAttribute]
private JetHashSet`1<object> myNonIgnoreableValues;
    [NotNullAttribute]
private IIgnoredNodesDescriptor myDescriptor;
    [NotNullAttribute]
private NoContentLockInsideReadWriteLock myRwLock;
    [NotNullAttribute]
private Predicate`1<object> myIsMeaningulValue;
    private bool myIndepentedParets;
    [CompilerGeneratedAttribute]
private IHaveVisibilityPresenter <Presenter>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <UpdatedSignal>k__BackingField;
    [NotNullAttribute]
public IHaveVisibilityPresenter Presenter { get; }
    public bool IgnoreNodesSupported { get; }
    [NotNullAttribute]
public ISimpleSignal UpdatedSignal { get; }
    public bool HasIgnoredOccurrences { get; }
    public IProperty`1<bool> ShowIgnoredOccurrences { get; }
    public IgnoredNodes(Lifetime lifetime, IHaveVisibilityPresenter presenter, IEnumerable`1<object> nonIgnoreableNodes, IIgnoredNodesDescriptor descriptor, NoContentLockInsideReadWriteLock rwlock, Predicate`1<object> isMeaningulValue, NavigationSettings settings, IEqualityComparer`1<object> comparer);
    [CompilerGeneratedAttribute]
public IHaveVisibilityPresenter get_Presenter();
    public virtual bool get_IgnoreNodesSupported();
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_UpdatedSignal();
    public sealed virtual bool get_HasIgnoredOccurrences();
    public sealed virtual IProperty`1<bool> get_ShowIgnoredOccurrences();
    public sealed virtual bool IsVisible(TreeModelNode node);
    public sealed virtual bool CanHide(object val);
    public sealed virtual void Hide(IEnumerable`1<object> values, IList`1<TreeModelNode> selectedNodes);
    public sealed virtual void UndoHide(IEnumerable`1<object> values, IList`1<TreeModelNode> selectedNodes);
    public void RequestFullUpdate();
    private void RequestUpdate(IEnumerable`1<object> affectedOccurrences, IList`1<TreeModelNode> selectedNodes);
    [CompilerGeneratedAttribute]
private bool <Hide>b__22_0(object s);
    [CompilerGeneratedAttribute]
private bool <UndoHide>b__23_0(object s);
    [CompilerGeneratedAttribute]
private IEnumerable`1<TreeModelNode> <RequestUpdate>b__25_0(object ao);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.IgnoredOccurrencedFilter : object {
    [NotNullAttribute]
private IIgnoredNodes myIgnoredNodes;
    private Predicate`1<object> myIsMeaningful;
    private List`1<IDependencyDefinition> myDependency;
    public IEnumerable`1<IDependencyDefinition> Dependencies { get; }
    public IgnoredOccurrencedFilter(Lifetime lifetime, IIgnoredNodes ignoredNodes, NoContentLockInsideReadWriteLock rwlock, ISimpleSignal updatedSignal, Predicate`1<object> isMeaningful);
    public sealed virtual IEnumerable`1<IDependencyDefinition> get_Dependencies();
    public sealed virtual LiveTreeModelFilterMatchResult Matches(ITreeModelNode node);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.IRestorableDescriptor {
    public bool ShouldBeUnloaded { get; }
    [NotNullAttribute]
public abstract virtual SearchRequestRestorePoint CreateRestorePoint();
    public abstract virtual bool get_ShouldBeUnloaded();
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.IRestorePoint {
    public RichText Presentation { get; }
    public abstract virtual RichText get_Presentation();
    public abstract virtual IOccurrenceBrowserDescriptor Restore();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.KindFiltersForFindUsages : OccurrenceFilters {
    private SearchDescriptor mySearchDescriptor;
    private ISettingsStore mySettingsStore;
    private OccurrenceKindManager myOccurrenceKindManager;
    public bool ShowNewView { get; }
    public KindFiltersForFindUsages(SearchDescriptor searchDescriptor, ISettingsStore settingsStore);
    public virtual bool get_ShowNewView();
    private void ItemsUpdated(NotifyCollectionChangedEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.LiveOccurrenceSorter : object {
    private IComparer`1<object> myTagComparer;
    public IEnumerable`1<IDependencyDefinition> Dependencies { get; }
    public LiveOccurrenceSorter(IComparer`1<object> tagComparer);
    public sealed virtual int Compare(ITreeModelNode xnode, ITreeModelNode ynode);
    private int CompareKind(OccurrenceKind x, OccurrenceKind y);
    public sealed virtual IEnumerable`1<IDependencyDefinition> get_Dependencies();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.MergeInSingleLineLiveFilter : object {
    private SearchDescriptor mySearchDescriptor;
    private OneToListMap`2<object, IOccurrence> myOneToListMap;
    private SpinWaitLock myLock;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDependencyDefinition> <Dependencies>k__BackingField;
    public IEnumerable`1<IDependencyDefinition> Dependencies { get; }
    public MergeInSingleLineLiveFilter(SearchDescriptor searchDescriptor);
    private void ItemsChanged(NotifyCollectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<IDependencyDefinition> get_Dependencies();
    public sealed virtual LiveTreeModelFilterMatchResult Matches(ITreeModelNode node);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.OccurrenceFilters : object {
    [NotNullAttribute]
private JetHashSet`1<OccurrenceKind> myFilter;
    [NotNullAttribute]
private JetHashSet`1<OccurrenceKind> myOccurrenceKinds;
    protected Dictionary`2<object, ICollection`1<OccurrenceKind>> OccurrenceKindCache;
    protected object Lock;
    [CanBeNullAttribute]
private IEnumerable`1<OccurrenceKind> myOccurrenceCache;
    [CompilerGeneratedAttribute]
private ISimpleSignal <FiltersChanged>k__BackingField;
    public ISimpleSignal FiltersChanged { get; }
    public IEnumerable`1<OccurrenceKind> Kinds { get; }
    public bool ShowNewView { get; }
    public IEnumerable`1<IDependencyDefinition> Dependencies { get; }
    public OccurrenceFilters(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public ISimpleSignal get_FiltersChanged();
    public void AddOccurenceKind(OccurrenceKind occurrenceKind);
    public sealed virtual IEnumerable`1<OccurrenceKind> get_Kinds();
    public virtual bool get_ShowNewView();
    public sealed virtual IEnumerable`1<IDependencyDefinition> get_Dependencies();
    public virtual bool AccessTypePresent(OccurrenceKind occurrenceKind);
    public virtual bool IsShownAccessType(OccurrenceKind occurrenceKind);
    public virtual bool IsShownOnlyAccessType(OccurrenceKind occurrenceKind);
    public virtual void ShowOnlyAccessType(OccurrenceKind occurrenceKind, bool show);
    public virtual void ShowAccessType(OccurrenceKind occurrenceKind, bool show);
    public virtual void ShowAccessTypes(IEnumerable`1<OccurrenceKind> kinds, bool show);
    public virtual void ShowAllAccessTypes();
    public virtual void ShowNoneAccessTypes();
    public virtual LiveTreeModelFilterMatchResult Matches(ITreeModelNode node);
    public void RegisterDataValue(object dataValue, ICollection`1<OccurrenceKind> occurrenceKinds);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.PsiChangeSearchDescriptorNotifier : object {
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private SearchDescriptorRegistrations myRegistrations;
    private DocumentManager myDocumentManager;
    private HashSet`1<IProjectFile> myBag;
    private object myLock;
    private GroupingEvent myUpdatePresentationGroupingEvent;
    [NotNullAttribute]
private SequentialLifetimes mySequentialLifetimes;
    private SynchronizationPoint mySyncPoint;
    public PsiChangeSearchDescriptorNotifier(Lifetime lifetime, ISolution solution, SearchDescriptorRegistrations registrations, ChangeManager changeManager, DocumentManager documentManager, SynchronizationPoints synchronizationPoints);
    private void HandleChanges(ChangeEventArgs args);
    private void StartUpdatePresentation();
    private void UpdatePresentation(Lifetime lifetime, List`1<SearchDescriptor> snapshot, IList`1<Action> invalidate);
    [CompilerGeneratedAttribute]
private void <StartUpdatePresentation>b__10_1();
    [CompilerGeneratedAttribute]
private void <StartUpdatePresentation>b__10_3(bool b);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.RichTextLiveTreeModelSorter : object {
    [NotNullAttribute]
public static RichTextLiveTreeModelSorter DefaultNoDependency;
    public IEnumerable`1<IDependencyDefinition> Dependencies { get; }
    private static RichTextLiveTreeModelSorter();
    public sealed virtual int Compare(ITreeModelNode x, ITreeModelNode y);
    public sealed virtual IEnumerable`1<IDependencyDefinition> get_Dependencies();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.SearchBasesDescriptor : SearchDescriptor {
    public TypeDependenciesOptions DiagrammingOptions { get; }
    public SearchBasesDescriptor(SearchRequest request, ICollection`1<IOccurrence> results);
    public virtual string GetResultsTitle(OccurrenceSection section);
    public virtual TypeDependenciesOptions get_DiagrammingOptions();
    protected virtual Func`2<SearchRequest, IOccurrenceBrowserDescriptor> GetDescriptorFactory();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.SearchDeclarationsDescriptor : SearchDescriptor {
    public SearchDeclarationsDescriptor(SearchRequest request, ICollection`1<IOccurrence> results);
    public virtual string GetResultsTitle(OccurrenceSection section);
    protected virtual Func`2<SearchRequest, IOccurrenceBrowserDescriptor> GetDescriptorFactory();
}
public abstract class JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.SearchDescriptor : LiveTreeModelBrowserDescriptor {
    private TimeSpan myNodeFactoryWaitTime;
    private SearchRequest myRequest;
    private RichTextLiveTreeModel myModel;
    private IPreviewSupportProvider myPreviewSupportProvider;
    private IProperty`1<bool> myMergeOccurrences;
    private ISimpleSignal myUpdated;
    private ISimpleSignal myStopSignal;
    private StructuredPresenter`2<TreeModelNode, IPresentableItem> myPresenter;
    [CompilerGeneratedAttribute]
private ISignal`1<NotifyCollectionChangedEventArgs> <ItemArrived>k__BackingField;
    private IEnumerable`1<ITypeElement> myTypeElementsForDiagram;
    private LiveTreeModelGrouping`1[] myGroupings;
    protected SectionGroupingProvider mySectionGroupingProvider;
    private BindableSetCollectionWithoutIndexTracking`1<object> myItems;
    private NavigationSettings myNavigationSettings;
    private List`1<object> mySearchTargetsOccurrences;
    private KindFiltersForFindUsages myKindFiltersForFindUsages;
    [NotNullAttribute]
private IUserDataHolder myUserDataHolder;
    private IgnoredNodes myIgnoredNodes;
    protected TreeSectionWithId mySearchTargetSection;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsUpdatingContent>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<OccurrenceSection> <OccurrenceSections>k__BackingField;
    public IEnumerable`1<IOccurrence> Items { get; }
    public IBindableCollection`1<object> BindableItems { get; }
    public ISignal`1<NotifyCollectionChangedEventArgs> ItemArrived { get; }
    public ISimpleSignal Updated { get; }
    public ISimpleSignal StopSignal { get; }
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> Presenter { get; }
    public LiveTreeGroupModel`1<object> TreeModel { get; }
    public IEnumerable`1<TreeGroupFeatureExtractor`1<object>> FlexibleGrouping { get; }
    public TypeDependenciesOptions DiagrammingOptions { get; }
    public ICollection SearchTargets { get; }
    public IEnumerable`1<object> SearchTargetOccurrences { get; }
    public SearchRequest Request { get; }
    public TreeModel Model { get; }
    public string ActionBarID { get; }
    public string ContextMenuID { get; }
    public bool QuickSearchSupported { get; }
    public bool KindFilterEnabled { get; public set; }
    public IProperty`1<bool> MergeOccurrencesProperty { get; }
    public bool MergeOccurrences { get; public set; }
    public IProperty`1<bool> IsUpdatingContent { get; }
    public IOccurrenceFilters Filters { get; }
    public PreviewSupport PreviewSupport { get; }
    public LiveTreeModelGrouping`1[] LiveGroupings { get; }
    protected LiveTreeModelGrouping`1[] Groupings { get; }
    public ICollection`1<OccurrenceSection> OccurrenceSections { get; public set; }
    public bool ShouldBeUnloaded { get; }
    public IUserDataHolder UserDataHolder { get; }
    public IIgnoredNodes IgnoredNodes { get; }
    protected SearchDescriptor(SearchRequest request, StructuredPresenter`2<TreeModelNode, IPresentableItem> customPresenter);
    protected SearchDescriptor(SearchRequest request, ICollection`1<IOccurrence> results, StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter);
    public sealed virtual IEnumerable`1<IOccurrence> get_Items();
    public sealed virtual IBindableCollection`1<object> get_BindableItems();
    [CompilerGeneratedAttribute]
public ISignal`1<NotifyCollectionChangedEventArgs> get_ItemArrived();
    public ISimpleSignal get_Updated();
    public sealed virtual ISimpleSignal get_StopSignal();
    public sealed virtual StructuredPresenter`2<TreeModelNode, IPresentableItem> get_Presenter();
    public virtual LiveTreeGroupModel`1<object> get_TreeModel();
    public virtual IEnumerable`1<TreeGroupFeatureExtractor`1<object>> get_FlexibleGrouping();
    protected virtual void SetGroupProviders(List`1<VolatileTreeGroupProvider<object>> groupProviders);
    protected virtual bool IsMeaningful(object o);
    protected virtual string GetResultTitleTemplate(OccurrenceSection section);
    private void ItemsChanged(object sender, NotifyCollectionChangedEventArgs e);
    [NotNullAttribute]
protected virtual List`1<object> CreateSearchTargetsOccurrences();
    public virtual IEnumerable`1<ITypeElement> GetTypeElementsForDiagram();
    public virtual bool AcceptOccurrence(object value);
    public virtual bool HasTypeElementsForDiagram();
    public virtual TypeDependenciesOptions get_DiagrammingOptions();
    public virtual ICollection get_SearchTargets();
    public virtual IEnumerable`1<object> get_SearchTargetOccurrences();
    public SearchRequest get_Request();
    public virtual TreeModel get_Model();
    public virtual string get_ActionBarID();
    public virtual string get_ContextMenuID();
    public virtual bool get_QuickSearchSupported();
    public virtual bool ExpandNodeInitially(TreeModelNode modelNode);
    public bool get_KindFilterEnabled();
    public void set_KindFilterEnabled(bool value);
    public IProperty`1<bool> get_MergeOccurrencesProperty();
    public sealed virtual bool get_MergeOccurrences();
    public sealed virtual void set_MergeOccurrences(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsUpdatingContent();
    public sealed virtual IOccurrenceFilters get_Filters();
    public virtual PreviewSupport get_PreviewSupport();
    public LiveTreeModelGrouping`1[] get_LiveGroupings();
    protected virtual LiveTreeModelGrouping`1[] get_Groupings();
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<OccurrenceSection> get_OccurrenceSections();
    [CompilerGeneratedAttribute]
public void set_OccurrenceSections(ICollection`1<OccurrenceSection> value);
    public virtual Nullable`1<bool> IsQuickSearchAccepted(TreeModelNode modelNode, string filter);
    public virtual IEnumerable`1<HighlightedRange> GetQuickSearchHighlightings(TreeModelNode modelNode, int column, string text, string quickSearchText);
    protected void SetResults(ICollection`1<IOccurrence> items, IProgressIndicator indicator, bool mergeItems);
    [CanBeNullAttribute]
protected virtual IComparer`1<object> CreateComparer();
    public void SetGrouping(LiveTreeModelGrouping`1<object> grouping);
    public sealed virtual IIdentityDescriptor GetIdentityDescriptor();
    public abstract virtual string GetResultsTitle(OccurrenceSection section);
    public void Clear();
    public virtual bool Search();
    public virtual SearchRequestRestorePoint CreateRestorePoint();
    public virtual bool get_ShouldBeUnloaded();
    protected abstract virtual Func`2<SearchRequest, IOccurrenceBrowserDescriptor> GetDescriptorFactory();
    public void OnUpdated();
    public void Stop();
    public sealed virtual IUserDataHolder get_UserDataHolder();
    public sealed virtual IIgnoredNodes get_IgnoredNodes();
    public sealed virtual void UpdateItem(ITreeModelNode treeModelNode);
    private sealed virtual override LifetimeDefinition JetBrains.ReSharper.Feature.Services.Tree.ISimpleOccurrenceBrowserDescriptor.get_LifetimeDefinition();
    [CompilerGeneratedAttribute]
private void <.ctor>b__26_1();
    [CompilerGeneratedAttribute]
private void <.ctor>b__26_2();
    [CompilerGeneratedAttribute]
private void <.ctor>b__26_3(Lifetime lt);
    [CompilerGeneratedAttribute]
private void <.ctor>b__26_5();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.SearchDescriptorNodeFactory : DefaultLiveTreeModelNodeFactory {
    private RichTextLiveTreeModel myModel;
    private Func`2<OccurrenceSection, string> myGetResultsTitle;
    [NotNullAttribute]
private IGroupingEventFactory myGroupingEventFactory;
    private DefaultLiveTreeModelNodeFactory myDefaultFactory;
    public SearchDescriptorNodeFactory(RichTextLiveTreeModel model, Func`2<OccurrenceSection, string> getResultsTitle, IFreeThreadedThrottlingGroupingEvent throttlingGroupingEvent, IGroupingEventFactory groupingEventFactory);
    public virtual ITreeModelNode CreateNode(object dataItem);
    public virtual CompositeRichTextLiveTreeNode CreateRoot();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.SearchDescriptorRegistrations : object {
    private ListEvents`1<SearchDescriptor> mySearchDescriptors;
    public ListEvents`1<SearchDescriptor> SearchDescriptors { get; }
    public SearchDescriptorRegistrations(Lifetime lifetime);
    public ListEvents`1<SearchDescriptor> get_SearchDescriptors();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.SearchImplementationsDescriptor : SearchDeclarationsDescriptor {
    public TypeDependenciesOptions DiagrammingOptions { get; }
    public SearchImplementationsDescriptor(SearchRequest request, ICollection`1<IOccurrence> results);
    public virtual string GetResultsTitle(OccurrenceSection section);
    public virtual TypeDependenciesOptions get_DiagrammingOptions();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.SearchInheritorsDescriptor : SearchDescriptor {
    public TypeDependenciesOptions DiagrammingOptions { get; }
    public SearchInheritorsDescriptor(SearchRequest request, ICollection`1<IOccurrence> results);
    public virtual string GetResultsTitle(OccurrenceSection section);
    public virtual TypeDependenciesOptions get_DiagrammingOptions();
    protected virtual Func`2<SearchRequest, IOccurrenceBrowserDescriptor> GetDescriptorFactory();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.SearchRequestRestorePoint : object {
    private Func`2<SearchRequest, IOccurrenceBrowserDescriptor> myDescriptorFactory;
    private SearchRequest myRequest;
    private RichText myPresentation;
    public RichText Presentation { get; }
    public SearchRequestRestorePoint(Func`2<SearchRequest, IOccurrenceBrowserDescriptor> descriptorFactory, SearchRequest request, RichText presentation);
    public sealed virtual RichText get_Presentation();
    public sealed virtual IOccurrenceBrowserDescriptor Restore();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.SearchResultCaches : object {
    [NotNullAttribute]
public static Key`1<IList`1<IRangeMarker>> RangeMarkersKey;
    private IPersistentIndexManager myPersistentIndex;
    private IPersistentSortedMap`2<string, IList`1<CachedOccurrence>> myMap;
    private WeakToStrongDictionary`2<SearchRequest, int> myTemporarySearchRequestMap;
    private int myCurrentRequestNum;
    private object myLock;
    public SearchResultCaches(ISolutionCaches caches, IPersistentIndexManager persistentIndex);
    private static SearchResultCaches();
    private string GetSerializationKey(SearchRequest request);
    [CanBeNullAttribute]
public ICollection`1<IOccurrence> TryGetCachedResult(SearchRequest request, UserDataHolder holder);
    public void TrySaveResults(SearchRequest request, IEnumerable`1<IOccurrence> items, UserDataHolder holder);
    [CanBeNullAttribute]
private IOccurrence TryRestoreOccurrence(CachedOccurrence cachedOccurrence, IRangeMarker marker);
    [CanBeNullAttribute]
public CachedOccurrence TryCreateFromOccurrence(ReferenceOccurrence occ);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.SearchTargetAlwaysVisibleFilter : object {
    private HashSet`1<object> mySearchTargets;
    public IEnumerable`1<IDependencyDefinition> Dependencies { get; }
    public SearchTargetAlwaysVisibleFilter(IEnumerable`1<object> searchTargets);
    public sealed virtual IEnumerable`1<IDependencyDefinition> get_Dependencies();
    public sealed virtual LiveTreeModelFilterMatchResult Matches(ITreeModelNode node);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.SearchUsagesDescriptor : SearchDescriptor {
    private Dictionary`2<Scope, string> myCachedTitles;
    public TypeDependenciesOptions DiagrammingOptions { get; }
    public SearchUsagesDescriptor(SearchRequest request, ICollection`1<IOccurrence> results);
    public virtual TypeDependenciesOptions get_DiagrammingOptions();
    public virtual string GetResultsTitle(OccurrenceSection section);
    protected virtual string GetScopeTitle(Scope scope);
    protected virtual string GetScopeTitleWithoutCache(Scope scope);
    protected virtual Func`2<SearchRequest, IOccurrenceBrowserDescriptor> GetDescriptorFactory();
    public virtual bool Navigate(TreeModelNode node, PopupWindowContextSource windowContext, bool transferFocus, TabOptions options);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.SectionGroupingProvider : object {
    private TreeSectionWithId myDefaultSection;
    private HashMap`2<object, TreeSectionWithId> myItemToSection;
    private UnlimitedCache`2<GroupingSectionId, TreeSectionWithId> mySection;
    private OccurrenceSectionsManager myOccurrenceSectionsManager;
    private TreeModelBrowserDescriptor myDescriptor;
    private object myLock;
    public IEnumerable`1<TreeSectionWithId> Sections { get; }
    public SectionGroupingProvider(ISolution solution, TreeSectionWithId defaultSection, TreeModelBrowserDescriptor descriptor);
    public IEnumerable`1<TreeSectionWithId> get_Sections();
    public void RegisterKey(object key, TreeSectionWithId value);
    public sealed virtual object ExtractGroupObject(object item);
    private object RegisterKeyDefault(IOccurrence occurrence);
    public static LiveTreeModelGrouping`1[] WrapGroupingsByProvider(ITreeGroupProvider`1<T> first, LiveTreeModelGrouping`1[] treeModelGroupings);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.SectionRichTextLiveTreeNode : CompositeRichTextLiveTreeNode {
    private ILogger myLogger;
    private TreeSectionWithId myID;
    private Func`2<OccurrenceSection, string> myGetResultsTitle;
    [NotNullAttribute]
private IGroupingEventFactory myGroupingEventFactory;
    private MultiBindingValue`2<int, RichText> mySectionTitle;
    public SectionRichTextLiveTreeNode(RichTextLiveTreeModel model, TreeSectionWithId id, Func`2<OccurrenceSection, string> getResultsTitle, IFreeThreadedThrottlingGroupingEvent throttlingGroupingEvent, IGroupingEventFactory groupingEventFactory);
    public virtual void Dispose();
    public virtual string ToString();
    protected virtual void CreateAggregators(IBindableView`1<IRichTextLiveTreeNode> filteredChildrenRaw);
    private void HandleNewSectionTitle();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.TreeSectionAlwaysVisibleFilter : object {
    public IEnumerable`1<IDependencyDefinition> Dependencies { get; }
    public sealed virtual IEnumerable`1<IDependencyDefinition> get_Dependencies();
    public sealed virtual LiveTreeModelFilterMatchResult Matches(ITreeModelNode node);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.UsageNotFoundFakeNode : TreeSeparator {
    public UsageNotFoundFakeNode(string title);
}
public abstract class JetBrains.ReSharper.Feature.Services.Navigation.ExecutionHosting.AllCandidatesExecutor : object {
    public abstract virtual void Execute();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Navigation.ExecutionHosting.CandidatesNavigator : object {
    private Lifetime myLifetime;
    private INavigationExecutionHost myNavigationExecutionHost;
    private JetPopupMenus myPopupMenus;
    private IMainWindowPopupWindowContext myPopupWindowContext;
    private OccurrencePresentationManager myOccurrencePresentationManager;
    private NavigationFilteringService myNavigationFilteringService;
    private static object ourSeparatorTag;
    private static OccurrencePresentationOptions ourFeatureSpecificPresentationOptions;
    public CandidatesNavigator(Lifetime lifetime, INavigationExecutionHost navigationExecutionHost, JetPopupMenus popupMenus, IMainWindowPopupWindowContext popupWindowContext, OccurrencePresentationManager occurrencePresentationManager, NavigationFilteringService navigationFilteringService);
    private static CandidatesNavigator();
    public IReadOnlyCollection`1<IDeclaredElementCandidateExecutor> Filter(IReadOnlyCollection`1<IDeclaredElementCandidateExecutor> candidates);
    public static void AdjustPresentation(IReadOnlyCollection`1<ICandidateExecutor> candidates);
    public void ExecuteCandidatesWithContext(IDataContext context, IReadOnlyCollection`1<ICandidateExecutor> candidates, AllCandidatesExecutor allCandidatesExecutor, OccurrencePresentationOptions presentationOptions);
    [CanBeNullAttribute]
private static IProjectFile TryGetProjectFile(IDeclaredElement element);
    public static IReadOnlyCollection`1<ICandidateExecutor> PatchCandidates(IDataContext dataContext, IReadOnlyCollection`1<ICandidateExecutor> candidates);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ExecutionHosting.DeclaredElementCandidateExecutor`1 : object {
    private Action`1<T> myExecutor;
    private T myElement;
    [CompilerGeneratedAttribute]
private OccurrencePresentationOptions <OccurrencePresentationOptions>k__BackingField;
    [NotNullAttribute]
public IDeclaredElement Element { get; }
    public OccurrencePresentationOptions OccurrencePresentationOptions { get; public set; }
    public bool IsEnabled { get; }
    public DeclaredElementCandidateExecutor`1(T element, Action`1<T> executor);
    public sealed virtual IDeclaredElement get_Element();
    [CompilerGeneratedAttribute]
public sealed virtual OccurrencePresentationOptions get_OccurrencePresentationOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OccurrencePresentationOptions(OccurrencePresentationOptions value);
    public sealed virtual bool get_IsEnabled();
    public sealed virtual IOccurrence Present();
    public sealed virtual void Execute();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Navigation.ExecutionHosting.DefaultNavigationExecutionHost : object {
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private ITooltipManager myTooltipManager;
    private NavigationSettings myNavigationSettings;
    private JetPopupMenus myJetPopupMenus;
    private IMainWindowPopupWindowContext myMainWindowPopupWindowContext;
    public DefaultNavigationExecutionHost(ISolution solution, ITooltipManager tooltipManager, NavigationSettings navigationSettings, JetPopupMenus jetPopupMenus, IMainWindowPopupWindowContext mainWindowPopupWindowContext);
    public static INavigationExecutionHost GetInstance(ISolution solution);
    private IModuleReferenceResolveContext FigureOutNavigationContext(IDataContext context);
    public virtual void Navigate(IDataContext context, IOccurrence occurrence);
    public virtual void ShowFindResults(Func`1<IOccurrenceBrowserDescriptor> func);
    public virtual void ShowContextPopupMenu(IDataContext context, ICollection`1<IOccurrence> occurrences, Func`1<IOccurrenceBrowserDescriptor> descriptorBuilder, OccurrencePresentationOptions options, bool skipMenuIfSingleEnabled, string title, Func`1<Pair`2<ICollection`1<ITypeElement>, TypeDependenciesOptions>> showOnDiagram, string warning);
    public virtual void ShowGlobalPopupMenu(ISolution solution, ICollection`1<IOccurrence> occurrences, bool activate, PopupWindowContextSource windowContext, Func`1<IOccurrenceBrowserDescriptor> descriptorBuilder, OccurrencePresentationOptions options, bool skipMenuIfSingleEnabled, string title, Func`1<Pair`2<ICollection`1<ITypeElement>, TypeDependenciesOptions>> showOnDiagram);
    public virtual bool ProcessImmediateResult(IDataContext context, ICollection`1<IOccurrence> results, ISearchResultPresenter searchResultPresenter, SearchRequest request, Action beforeProcess);
    protected virtual void ShowTooltipFromImmediateResult(IDataContext context, ISearchResultPresenter searchResultPresenter, SearchRequest request, IOccurrence occurrence);
    public virtual bool ProcessImmediateResultHierarchy(IDataContext context, ICollection`1<IOccurrence> results, ISearchResultPresenter presenter, SearchRequest request);
    public virtual bool ProcessImmediateResultHighlightUsages(IDataContext context, ICollection`1<IOccurrence> results);
    public virtual void ShowTooltip(IDataContext context, string message);
    public virtual IOccurrencePopupMenu ShowAsyncContextPopupMenu(IDataContext context, string title, OccurrencePresentationOptions options);
    public virtual void ShowPopupMenu(JetPopupMenu menu, LifetimeDefinition menuLifetime, ShowWhen showWhen);
    public virtual IAsyncOccurrenceBridge CreateAsyncDescriptorBridge(LifetimeDefinition searchLifetimeDefinition, IDataContext context, string title, OccurrencePresentationOptions options, Func`1<IAsyncOccurrenceBrowserDescriptor> descriptorBuilder);
    public virtual void ExecuteCandidates(IDataContext dataContext, IReadOnlyCollection`1<ICandidateExecutor> candidates, AllCandidatesExecutor allCandidatesExecutor, Nullable`1<OccurrencePresentationOptions> options);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ExecutionHosting.ICandidateExecutor {
    public bool IsEnabled { get; }
    public OccurrencePresentationOptions OccurrencePresentationOptions { get; public set; }
    public abstract virtual bool get_IsEnabled();
    public abstract virtual OccurrencePresentationOptions get_OccurrencePresentationOptions();
    public abstract virtual void set_OccurrencePresentationOptions(OccurrencePresentationOptions value);
    public abstract virtual IOccurrence Present();
    public abstract virtual void Execute();
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ExecutionHosting.IDeclaredElementCandidateExecutor {
    public IDeclaredElement Element { get; }
    public abstract virtual IDeclaredElement get_Element();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ExposingApies.ApiesMemberVisitor : object {
    protected object myLocker;
    protected ExposingApiesContext myContext;
    protected ExposingApiesContainer myContainer;
    private ISymbolScope mySymbolScope;
    private JetHashSet`1<IPsiSourceFile> mySourceFiles;
    private JetHashSet`1<IPsiModule> myExternalPsiModules;
    private List`1<Task> myTaskList;
    public ApiesMemberVisitor(ExposingApiesContext context, ExposingApiesContainer container, ISymbolScope symbolScope, IEnumerable`1<IPsiModule> externalPsiModules, JetHashSet`1<IPsiSourceFile> sourceFiles);
    public void Build(IProgressIndicator progressIndicator);
    private void ProcessNamespace(INamespace namespace, Lifetime lifetime, IProgressIndicator progressIndicator);
    private void ProcessTypeElements(INamespace namespace, IProgressIndicator progressIndicator);
    private void ProcessTypeElement(ITypeElement typeElement, bool hasSources);
    protected virtual void VisitTypeMember(bool hasSources, ITypeMember typeMember);
    [CompilerGeneratedAttribute]
private bool <ProcessTypeElements>b__10_0(IPsiSourceFile sourseFile);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ExposingApies.ConsumingApiesContainerBuilder : ApiesMemberVisitor {
    public ConsumingApiesContainerBuilder(ExposingApiesContext context, ExposingApiesContainer container, ISymbolScope symbolScope, IEnumerable`1<IPsiModule> externalPsiModules, JetHashSet`1<IPsiSourceFile> sourceFiles);
    protected virtual void VisitTypeMember(bool hasSources, ITypeMember typeMember);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ExposingApies.ExposingApiesContainer : object {
    private EntryComparer myComparer;
    private List`1<ExposingApiEntry> myEntries;
    public ExposingApiesContainer(IType sourseType);
    public sealed virtual IEnumerator`1<IExposingApiEntry> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void Sort();
    public void AddGenericMethod(IMethod method, IType type, Nullable`1<int> parameterNumber);
    public void AddMethod(IMethod method, IType type, Nullable`1<int> parameterNumber);
    public void AddProperty(IProperty property);
    public void AddField(IField field);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ExposingApies.ExposingApiesContainerBuilder : ApiesMemberVisitor {
    public ExposingApiesContainerBuilder(ExposingApiesContext context, ExposingApiesContainer container, ISymbolScope symbolScope, IEnumerable`1<IPsiModule> externalPsiModules, JetHashSet`1<IPsiSourceFile> sourceFiles);
    protected virtual void VisitTypeMember(bool hasSources, ITypeMember typeMember);
    protected IType TryGetMethodOutType(IMethod method, Nullable`1& parameterNumber);
    protected void AddMethod(IMethod method, IType type, Nullable`1<int> parameterNumber);
    protected bool CheckAccessContext(ITypeMember typeMember);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ExposingApies.ExposingApiesContext : object {
    private IType myType;
    private ISolution mySolution;
    private ITypeElement myTypeElement;
    private ITypeConversionRule myConversionRule;
    private IExposingApiesAccessValidator myAccessValidator;
    private PsiLanguageType myLanguageType;
    private bool myIsStatic;
    private ITreeNode myTreeNode;
    public IType Type { get; }
    public IPsiServices PsiServices { get; }
    public ITypeConversionRule ConversionRule { get; }
    public PsiLanguageType LanguageType { get; }
    public ISolution Solution { get; }
    public ITypeElement TypeElement { get; }
    public IExposingApiesAccessValidator AccessValidator { get; }
    public ITreeNode TreeNode { get; }
    public ExposingApiesContext(IType type, ITypeElement typeElement, ISolution solution, ITypeConversionRule conversionRule, IExposingApiesAccessValidator accessValidator, PsiLanguageType languageType, bool isStatic, ITreeNode treeNode);
    public IType get_Type();
    public IPsiServices get_PsiServices();
    public ITypeConversionRule get_ConversionRule();
    public PsiLanguageType get_LanguageType();
    public ISolution get_Solution();
    public ITypeElement get_TypeElement();
    public IExposingApiesAccessValidator get_AccessValidator();
    public ITreeNode get_TreeNode();
    public bool IsValid();
    public bool IsStaticType();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.ExposingApies.ExposingApiesFinder : object {
    public sealed virtual IEnumerable`1<IExposingApiEntry> SearchConsumingApies(IProgressIndicator progressIndicator, ExposingApiesContext context);
    public sealed virtual IEnumerable`1<IExposingApiEntry> SearchExposingApies(IProgressIndicator progressIndicator, ExposingApiesContext context);
}
internal class JetBrains.ReSharper.Feature.Services.Navigation.ExposingApies.ExposingApiesFinderStages : object {
    private ExposingApiesContext myContext;
    public ExposingApiesFinderStages(ExposingApiesContext context);
    public void SortExposingApies(ExposingApiesContainer container, IProgressIndicator progressIndicator);
    public void SearchExposingApies(ExposingApiesContainer container, IEnumerable`1<IPsiModule> externalPsiModules, IProgressIndicator progressIndicator);
    public ICollection`1<IPsiModule> SearchExternalPsiModules(IProgressIndicator progressIndicator);
    public ICollection`1<IPsiSourceFile> GetSourceFilesForCompatibleTypeElements(IEnumerable`1<ITypeElement> compatibleTypeElements, IProgressIndicator progressIndicator);
    private IEnumerable`1<string> GetTypeNames(ITypeElement typeElement);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ExposingApies.ExposingApiesOccurrence : DeclaredElementOccurrence {
    private int myParameterIndex;
    public bool UseParameter { get; }
    public int ParameterIndex { get; }
    public ExposingApiesOccurrence(IExposingApiEntry entry);
    public bool get_UseParameter();
    public int get_ParameterIndex();
    public virtual string DumpToString();
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.ExposingApies.ExposingApiesOccurrencePresenter : DeclaredElementOccurrencePresenter {
    public virtual bool IsApplicable(IOccurrence occurrence);
    protected virtual void DisplayMainText(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions options, IDeclaredElement declaredElement);
    public static void HighlightType(ExposingApiesOccurrence occurrence, RichText richText, DeclaredElementPresenterMarking marking);
    private static void HighlightType(RichText richText, TextRange range);
}
public static class JetBrains.ReSharper.Feature.Services.Navigation.ExposingApies.ExposingApiesTypeUtil : object {
    public static bool IsImplicitlyConvertibleTypes(IType sourceType, IType targetType, ITypeConversionRule conversionRule);
    private static bool IsEqualTypeGroup(IType sourceType, IType targetType);
    private static bool IsMathingDefaultConstraints(ITypeParameter typeParameter, IType type);
    private static bool IsMathingDefaultConstraints(ITypeParameter typeParameter1, ITypeParameter typeParameter2);
    public static int TypeDistance(IType sourceType, IType targetType);
    public static int TypeArgumentDistance(IType sourceType, IType targetType);
    public static bool CheckType(IType srcType, IType targetType, bool hasSources, ITypeConversionRule conversionRule, bool covariance);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ExposingApies.IExposingApiEntry {
    public IDeclaredElement DeclaredElement { get; }
    public IType Type { get; }
    public abstract virtual IDeclaredElement get_DeclaredElement();
    public abstract virtual IType get_Type();
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ExposingApies.IExposingApiesAccessValidator {
    public abstract virtual bool CheckAccess(ITypeMember typeMember);
    public abstract virtual bool IsValid();
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.Navigation.ExposingApies.IExposingApiesFinder {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IExposingApiEntry> SearchExposingApies(IProgressIndicator progressIndicator, ExposingApiesContext context);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IExposingApiEntry> SearchConsumingApies(IProgressIndicator progressIndicator, ExposingApiesContext context);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ExposingApies.IExposingApiesTypeMemberFinder {
    [CanBeNullAttribute]
public abstract virtual ITypeMember TryGetTypeMember(ITreeNode treeNode);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ExposingApies.IExposingApiParameterEntry {
    public int ParameterIndex { get; }
    public abstract virtual int get_ParameterIndex();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.FileLocationsBlacklist : object {
    private object myLock;
    private HashSet`1<VirtualFileSystemPath> myBlacklist;
    public sealed virtual void Add(VirtualFileSystemPath filePath);
    public sealed virtual void Remove(VirtualFileSystemPath filePath);
    public sealed virtual bool Contains(VirtualFileSystemPath filePath);
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Navigation.FileSystemPathDiffNavigator : object {
    public virtual void OpenDiff(FileSystemPathNavigationPoint oldPoint, FileSystemPathNavigationPoint newPoint);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.FileSystemPathNavigationPoint : object {
    private string myAssemblyName;
    private VirtualFileSystemPath myFile;
    private TextRange myTextRange;
    private string mySourceProviderName;
    private FileSystemPathNavigator myNavigator;
    private ProjectFileExtensions myProjectFileExtensions;
    private PsiProjectFileTypeCoordinator myPsiProjectFileTypeCoordinator;
    private IEditorManager myEditorManager;
    public TextRange TextRange { get; }
    public VirtualFileSystemPath File { get; }
    public FileSystemPathNavigationPoint(VirtualFileSystemPath file, string assemblyName, TextRange textRange, string sourceProviderName, FileSystemPathNavigator navigator, ProjectFileExtensions projectFileExtensions, PsiProjectFileTypeCoordinator psiProjectFileTypeCoordinator, IEditorManager editorManager);
    public sealed virtual TextRange get_TextRange();
    public VirtualFileSystemPath get_File();
    public sealed virtual Task`1<ITextControl> OpenTextControlAsync(NavigationOptions options);
    public sealed virtual Task`1<bool> Navigate(NavigationOptions options);
    public sealed virtual IconId GetPresentationImage();
    public sealed virtual RichText GetPresentationText();
    public sealed virtual RichText GetSecondaryPresentationText();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Navigation.FileSystemPathNavigator : object {
    private IEditorManager myEditorManager;
    private IShellLocks myShellLocks;
    private ProjectFileExtensions myProjectFileExtensions;
    private PsiProjectFileTypeCoordinator myPsiProjectFileTypeCoordinator;
    [CanBeNullAttribute]
private ISourceGeneratedFileManager mySourceGeneratedFileManager;
    public FileSystemPathNavigator(IEditorManager editorManager, IShellLocks shellLocks, ProjectFileExtensions projectFileExtensions, PsiProjectFileTypeCoordinator psiProjectFileTypeCoordinator, ISourceGeneratedFileManager sourceGeneratedFileManager);
    public Task`1<ITextControl> NavigateToFile(VirtualFileSystemPath file, int offset, TabOptions tabOptions, bool activate);
    public FileSystemPathNavigationPoint CreateNavigationPoint(VirtualFileSystemPath file, TextRange offset, string assemblyName, string providerPresentableName);
    [NotNullAttribute]
[ItemCanBeNullAttribute]
public Task`1<ITextControl> GetTextControlAsync(VirtualFileSystemPath file, DocOffset offset, TabOptions tabOptions, bool activate);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.FqnNavigation.Element : object {
    public ElementKind Kind;
    public string Fqn;
    public string AssemblyName;
    public Element(ElementKind kind, string fqn, string assemblyName);
}
public enum JetBrains.ReSharper.Feature.Services.Navigation.FqnNavigation.ElementKind : Enum {
    public int value__;
    public static ElementKind None;
    public static ElementKind Type;
    public static ElementKind Method;
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Navigation.FqnNavigation.FqnNavigator : object {
    private static string DebugId;
    private static TimeSpan ourOperationWaitTimeout;
    private ILogger myLogger;
    private SequentialLifetimes myOperationLifetime;
    private SequentialLifetimes myNavigationLifetime;
    private ISolution mySolution;
    private IThreading myMainThread;
    private IMainWindowPopupWindowContext myPopupWindowContext;
    [NotNullAttribute]
private IIsApplicationActiveState myIsApplicationActiveState;
    public FqnNavigator(Lifetime lifetime, ISolution solution, IThreading mainThread, IMainWindowPopupWindowContext popupWindowContext, IIsApplicationActiveState isApplicationActiveState);
    private static FqnNavigator();
    public int IsElementDeclared(Element element);
    public int NavigateTo(Element element, Nullable`1<IntPtr> windowHandleToFocus);
    private static IOccurrence FindFirstOccurrence(IDeclaredElement declaredElement);
    private void NavigateToOccurrence(IOccurrence occurrence);
    private StackTraceResolveState ResolveElement(Element element);
    public ValueTuple`2<IDeclaredElement, IPsiSourceFile> GetDeclaredElement(Element element, string docPath, string moduleName);
    [CanBeNullAttribute]
public IDeclaredElement GetDeclaredElement(Element element);
    private T ExecuteOnMainThread(string actionName, Func`1<T> action);
}
[OccurrenceSorterAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Navigation.GeneratedFilesOccurrenceSorter : object {
    private GenerateUtilsCache myGeneratedUtilsCache;
    public GeneratedFilesOccurrenceSorter(GenerateUtilsCache generatedUtilsCache);
    public sealed virtual IComparer`1<IOccurrence> TryCreateComparer(SearchRequest request);
    public bool IsApplicable(SearchRequest request);
    public int Compare(IOccurrence x, IOccurrence y);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoControllerNavigationFilter : object {
    [NotNullAttribute]
private NavigationFilterProvider myProvider;
    [NotNullAttribute]
private IList`1<IApplicableGotoProvider> myAllProviders;
    [NotNullAttribute]
protected Property`1<Func`2<IOccurrence, bool>> ItemsPassFilter;
    public Func`2<IOccurrence, bool> ItemsPassFilterValue { get; }
    public GotoControllerNavigationFilter(Lifetime lifetime, IShellLocks locks, NavigationFilterProvider provider, IEnumerable`1<IApplicableGotoProvider> allProviders);
    public virtual string PrepareFilters(string filterString, INavigationProviderFilter& filter, GotoContext context);
    public Func`2<IOccurrence, bool> get_ItemsPassFilterValue();
    public void RestrictItemsPassFilterForOccurrence(Func`2<IOccurrence, bool> funcAdd);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoEverythingController : GotoSearchController {
    protected int NonInstantItemsCount { get; }
    public int MenuItemsCountLimit { get; }
    private GotoEverythingController(Lifetime lifetime, GotoByNameModel model, IGotoControllerItemsProvider itemsProvider, ISolution solution, IMainWindowPopupWindowContext popupContext, Nullable`1<LibrariesFlag> librariesFlag);
    [NotNullAttribute]
public static GotoEverythingController CreateGotoEverythingController(Lifetime lifetime, ISolution solution, LibrariesFlag librariesFlag, IShellLocks locks, GotoByNameModel model, IMainWindowPopupWindowContext mainWindowPopupWindowContext);
    protected virtual OccurrencePresentationOptions GetPresentationOptions();
    public virtual bool IsSpecialString(String& filterString);
    protected virtual int get_NonInstantItemsCount();
    public virtual int get_MenuItemsCountLimit();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoExceptionClassController : GotoTypeController {
    public GotoExceptionClassController(Lifetime lifetime, ISolution solution, LibrariesFlag librariesFlag, IMainWindowPopupWindowContext mainWindowPopupWindowContext, GotoTypeItemsProvider gotoTypeItemsProvider);
    protected virtual OccurrencePresentationOptions GetPresentationOptions();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoFileController : GotoSearchController {
    [NotNullAttribute]
private GotoFileItemsProvider myFileItemsProvider;
    private GotoFileController(Lifetime lifetime, GotoByNameModel model, GotoFileItemsProvider itemsProvider, ISolution solution, IMainWindowPopupWindowContext popupContext, Nullable`1<LibrariesFlag> librariesFlag);
    [NotNullAttribute]
public static GotoFileController CreateGotoFileController(Lifetime lifetime, ISolution solution, IMainWindowPopupWindowContext popupWindowContext);
    public virtual bool IsSpecialString(String& filterString);
    protected virtual OccurrencePresentationOptions GetPresentationOptions();
    public void RestrictItemsPassFilter(Func`2<IProjectItem, bool> funcAdd);
    private static bool DefaultFileFilter(IOccurrence occurrence);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoMetadataTokenController : GotoSearchController {
    public GotoMetadataTokenController(Lifetime lifetime, IGotoControllerItemsProvider itemsProvider, ISolution solution, IMainWindowPopupWindowContext popupContext, Nullable`1<LibrariesFlag> librariesFlag);
    public static GotoMetadataTokenController CreateController(Lifetime lifetime, ISolution solution, LibrariesFlag librariesFlag, IShellLocks locks, bool enableMulticore, IMainWindowPopupWindowContext mainWindowPopupWindowContext);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoNamespaceController : GotoSearchController {
    [NotNullAttribute]
private GotoNamespaceItemsProvider myNsItemsProvider;
    public bool LibrariesFlagAutoSwitch { get; public set; }
    public GotoNamespaceController(Lifetime lifetime, GotoNamespaceItemsProvider itemsProvider, ISolution solution, IMainWindowPopupWindowContext popupContext, Nullable`1<LibrariesFlag> librariesFlag);
    [NotNullAttribute]
public static GotoNamespaceController CreateGotoNamespaceController(Lifetime lifetime, ISolution solution, LibrariesFlag librariesFlag, IShellLocks locks, IMainWindowPopupWindowContext mainWindowPopupWindowContext);
    public sealed virtual bool get_LibrariesFlagAutoSwitch();
    public sealed virtual void set_LibrariesFlagAutoSwitch(bool value);
    public sealed virtual void RestrictItemsPassFilter(Func`2<IDeclaredElement, bool> filter);
    private sealed virtual override GotoByNameModel JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.ICompletionGotoController.get_Model();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoSearchController : GotoByNameController {
    private static ILogger ourLog;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [NotNullAttribute]
protected IGotoControllerItemsProvider myItemsProvider;
    [CompilerGeneratedAttribute]
private IMainWindowPopupWindowContext <PopupWindowContext>k__BackingField;
    [CanBeNullAttribute]
private GotoControllerNavigationFilter myNavigationFilter;
    [CanBeNullAttribute]
private string myPreviousFilter;
    [CompilerGeneratedAttribute]
private GotoContext <GotoContext>k__BackingField;
    private bool myCachesAreReady;
    [NotNullAttribute]
private IPsiFiles myPsiFiles;
    private string myDefaultCaption;
    [NotNullAttribute]
private JetDispatcher myDispatcher;
    private static int GroupingInterval;
    [CompilerGeneratedAttribute]
private Property`1<bool> <IsCheckBoxCheckerVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TransferFocus>k__BackingField;
    private ICollection`1<IOccurrence> myHighlightedAsRecentItems;
    private IModuleReferenceResolveContext myResolveContext;
    [NotNullAttribute]
public ISolution Solution { get; }
    [NotNullAttribute]
protected IMainWindowPopupWindowContext PopupWindowContext { get; }
    [NotNullAttribute]
public IGotoControllerItemsProvider ItemsProvider { get; }
    public GotoContext GotoContext { get; private set; }
    [NotNullAttribute]
public Property`1<bool> IsCheckBoxCheckerVisible { get; }
    protected int NonInstantItemsCount { get; }
    public bool TransferFocus { get; public set; }
    public GotoSearchController(Lifetime lifetime, GotoByNameModel model, IGotoControllerItemsProvider itemsProvider, ISolution solution, IMainWindowPopupWindowContext popupContext, Nullable`1<LibrariesFlag> librariesFlag);
    private static GotoSearchController();
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    [CompilerGeneratedAttribute]
protected IMainWindowPopupWindowContext get_PopupWindowContext();
    public IGotoControllerItemsProvider get_ItemsProvider();
    [CompilerGeneratedAttribute]
public GotoContext get_GotoContext();
    [CompilerGeneratedAttribute]
private void set_GotoContext(GotoContext value);
    [CompilerGeneratedAttribute]
public Property`1<bool> get_IsCheckBoxCheckerVisible();
    protected virtual int get_NonInstantItemsCount();
    protected virtual void ScheduleAfterCommit();
    protected virtual void SpawnInterruptableActivity();
    private JetPopupMenuItem MakeMnemonicItem(INavigationFilterCompletionItem item);
    protected virtual IEnumerable`1<JetPopupMenuItem> TryProvideCustomItems(string filterString);
    protected virtual bool ExecuteItem(JetPopupMenuItem item, ISignal`1<bool> closeBeforeExecute);
    [CompilerGeneratedAttribute]
public virtual bool get_TransferFocus();
    [CompilerGeneratedAttribute]
public virtual void set_TransferFocus(bool value);
    protected virtual IDisposable SetNavigationContext();
    protected sealed virtual bool UpdateItems(string filterString, Func`3<IEnumerable`1<JetPopupMenuItem>, AddItemsBehavior, bool> itemsConsumer);
    public virtual bool IsSpecialString(String& filterString);
    protected virtual OccurrencePresentationOptions GetPresentationOptions();
    public virtual void ClearGotoContextCaches();
    public void SetHighlightedAsRecentItems(ICollection`1<IOccurrence> occurrences);
    protected virtual JetPopupMenuItem Describe(PresentableGotoItem item);
    protected virtual bool ShouldHighlightMatchingIndices();
    [CompilerGeneratedAttribute]
private void <.ctor>b__24_1();
    [CompilerGeneratedAttribute]
private void <ScheduleAfterCommit>b__27_0();
}
public abstract class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoSortedItemsProvider`1 : object {
    protected IIdentifierMatcherFactory IdentifierMatcherFactory;
    [CanBeNullAttribute]
private string mySkippedItemType;
    [NotNullAttribute]
protected GotoContext GotoContext;
    public GotoControllerNavigationFilter Filter { get; }
    public sealed virtual GotoControllerNavigationFilter get_Filter();
    protected void SetShowSkippedItemsCount(string itemTypeSingular);
    public sealed virtual void ConsumePresentableItems(GotoItemsProviderModel itemsModel, int itemsCount, GotoItemsConsumer itemsConsumer);
    public sealed virtual void ClearCaches();
    protected abstract virtual bool Matches(IIdentifierMatcher identifierMatcher, TItem item);
    public virtual OccurrencePresentationOptions GetPresentationOptions();
    protected abstract virtual IEnumerable`1<TItem> ProvideItems();
    protected abstract virtual PresentableGotoItem Describe(TItem item, IIdentifierMatcher identifierMatcher);
    [CompilerGeneratedAttribute]
private PresentableGotoItem <ConsumePresentableItems>b__7_0(TItem item);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoStringController : GotoSearchController {
    private GotoStringController(Lifetime lifetime, ISolution solution, LibrariesFlag librariesFlag, bool enableMulticore, IMainWindowPopupWindowContext mainWindowPopupWindowContext);
    public static GotoStringController Create(Lifetime lifetime, ISolution solution, LibrariesFlag librariesFlag, bool enableMulticore, IMainWindowPopupWindowContext mainWindowPopupWindowContext);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoSymbolController : GotoSearchController {
    public GotoSymbolController(Lifetime lifetime, ISolution solution, LibrariesFlag librariesFlag, IMainWindowPopupWindowContext mainWindowPopupWindowContext, IGotoControllerItemsProvider itemsProvider);
    public static GotoByNameModel CreateGotoSymbolModel(Lifetime lifetime, ISolution solution, IPsiModule project, LibrariesFlag librariesFlag, IShellLocks locks, bool enableMulticore, IMainWindowPopupWindowContext mainWindowPopupWindowContext);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoTextIntoGotoEverythingSettingsOwner : object {
    private IProperty`1<bool> myIsEnabled;
    public GotoTextIntoGotoEverythingSettingsOwner(Lifetime lifetime, ISettingsStore settingsStore);
    public bool GetValue();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoTypeController : GotoSearchController {
    [NotNullAttribute]
private GotoTypeItemsProvider myTypeItemsProvider;
    public bool LibrariesFlagAutoSwitch { get; public set; }
    public GotoTypeController(Lifetime lifetime, GotoByNameModel model, GotoTypeItemsProvider itemsProvider, ISolution solution, IMainWindowPopupWindowContext popupContext, Nullable`1<LibrariesFlag> librariesFlag);
    [NotNullAttribute]
public static GotoTypeController CreateGotoTypeController(Lifetime lifetime, ISolution solution, LibrariesFlag librariesFlag, IShellLocks locks, IMainWindowPopupWindowContext mainWindowPopupWindowContext);
    [NotNullAttribute]
public static GotoByNameModel CreateGotoTypeModel(Lifetime lifetime, ISolution solution, LibrariesFlag librariesFlag, IShellLocks locks, IMainWindowPopupWindowContext mainWindowPopupWindowContext);
    public sealed virtual bool get_LibrariesFlagAutoSwitch();
    public sealed virtual void set_LibrariesFlagAutoSwitch(bool value);
    protected virtual OccurrencePresentationOptions GetPresentationOptions();
    public sealed virtual void RestrictItemsPassFilter(Func`2<IDeclaredElement, bool> funcAdd);
    private sealed virtual override GotoByNameModel JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.ICompletionGotoController.get_Model();
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.IGotoControllerInitializer {
    public abstract virtual void Initialize(IDataContext context, GotoByNameController controller);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.IGotoStringChainedProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.IGotoStringInstantGotoProvider {
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.ClrNavigationFilterClassifier : object {
    public sealed virtual TypeNavigationFilterEnum Classify(IDeclaredElement element);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.IFilterDescriptor {
    public string Description { get; }
    public abstract virtual string get_Description();
    public abstract virtual bool IsAccepted(IDeclaredElement element);
    public abstract virtual bool IsAccepted(IPsiSourceFile file);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.IFilterDescriptorProvider {
    public abstract virtual bool IsApplicable(GotoContext context, IEnumerable`1<IApplicableGotoProvider> navProviders);
    public abstract virtual IEnumerable`1<INavigationFilterHelpItem> GetFiltersHelpItems(IEnumerable`1<IApplicableGotoProvider> providers, GotoContext context);
    [CanBeNullAttribute]
public abstract virtual IFilterDescriptor TryCreate(string key, string value, GotoContext context);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.IgnoredFileNavigationFilter : object {
    [CanBeNullAttribute]
private INavigationProviderFilter myFilter;
    private IgnoredElementsSearchProvider myIgnoredElements;
    public bool IsEnabled { get; }
    public string Description { get; }
    public IgnoredFileNavigationFilter(INavigationProviderFilter filter, IgnoredElementsSearchProvider ignoredElements);
    public sealed virtual bool Equals(INavigationProviderFilter other);
    public sealed virtual bool get_IsEnabled();
    public sealed virtual string get_Description();
    public sealed virtual bool HasEnabled();
    public sealed virtual T Get();
    public sealed virtual string Dump();
    public sealed virtual bool IsAccepted(IDeclaredElement element);
    public sealed virtual bool IsAccepted(IPsiSourceFile file);
    public sealed virtual IEnumerable`1<INavigationFilterCompletionItem> ProvideCompletion();
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.INavigationFilterClassifier {
    [CanBeNullAttribute]
public abstract virtual TypeNavigationFilterEnum Classify(IDeclaredElement element);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.INavigationFilterCompletionItem {
    public string Mnemonic { get; }
    public string Description { get; }
    public string ShortcutText { get; }
    public abstract virtual string get_Mnemonic();
    public abstract virtual string get_Description();
    public abstract virtual string get_ShortcutText();
    public abstract virtual string Complete();
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.INavigationFilterHelpItem {
    public string Mnemonic { get; }
    public string Description { get; }
    public string Scope { get; }
    public abstract virtual string get_Mnemonic();
    public abstract virtual string get_Description();
    public abstract virtual string get_Scope();
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.INavigationProviderFilter {
    public bool IsEnabled { get; }
    public string Description { get; }
    public abstract virtual bool get_IsEnabled();
    public abstract virtual string get_Description();
    public abstract virtual bool HasEnabled();
    [CanBeNullAttribute]
public abstract virtual T Get();
    public abstract virtual string Dump();
    public abstract virtual bool IsAccepted(IDeclaredElement element);
    public abstract virtual bool IsAccepted(IPsiSourceFile file);
    [CanBeNullAttribute]
public abstract virtual IEnumerable`1<INavigationFilterCompletionItem> ProvideCompletion();
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.IPathBaseFilterMarker {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.IProjectModelFilterMarker {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.ISupportNavigationProviderFilter {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.ISymbolBasedModelFilterMarker {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.ITypeBaseFilterMarker {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.IUnitTestFilterMarker {
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.NavigationFileterHelpItem : object {
    [CompilerGeneratedAttribute]
private string <Mnemonic>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    public string Mnemonic { get; }
    public string Description { get; }
    public string Scope { get; }
    public NavigationFileterHelpItem(string mnemonic, string description, string scope);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Mnemonic();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Scope();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.NavigationFilterCompletionItem : object {
    private string myCompletedText;
    [CompilerGeneratedAttribute]
private string <Mnemonic>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortcutText>k__BackingField;
    public string Mnemonic { get; }
    public string Description { get; }
    public string ShortcutText { get; }
    public NavigationFilterCompletionItem(string mnemonic, string description, string shortcutText, string completedText);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Mnemonic();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ShortcutText();
    public sealed virtual string Complete();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.NavigationFilterProvider : object {
    private IEnumerable`1<IFilterDescriptorProvider> myProviders;
    private NavigationFilterParser myNavigationFilterParser;
    private UsageStatistics myStatistics;
    public static Key`1<object> UsageCountedMark;
    public NavigationFilterProvider(IEnumerable`1<IFilterDescriptorProvider> providers, UsageStatistics statistics);
    private static NavigationFilterProvider();
    [CanBeNullAttribute]
public virtual INavigationProviderFilter TryCreateNavigationFilter(String& input, GotoContext context, IEnumerable`1<IApplicableGotoProvider> navProviders);
    private void TrackUsage(GotoContext context);
    [CanBeNullAttribute]
private OwnedFilterDesciptor TryCreateFilterDescriptor(string key, string value, GotoContext context, IEnumerable`1<IFilterDescriptorProvider> providers);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.NavigationProviderFilter : object {
    public static Key`1<INavigationProviderFilter> FilterKey;
    [NotNullAttribute]
public static NavigationProviderFilter Disabled;
    [CanBeNullAttribute]
private string myFilter;
    [CanBeNullAttribute]
private ICollection`1<IFilterDescriptor> myFilterDescriptors;
    [CanBeNullAttribute]
private IEnumerable`1<INavigationFilterCompletionItem> myCompletionItems;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    public bool IsEnabled { get; }
    public string Description { get; }
    public NavigationProviderFilter(IEnumerable`1<IFilterDescriptor> filterDescriptors, string filter, bool isEnabled, IEnumerable`1<INavigationFilterCompletionItem> completionItems);
    public NavigationProviderFilter(bool isEnabled);
    private static NavigationProviderFilter();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEnabled();
    public sealed virtual bool HasEnabled();
    public sealed virtual T Get();
    public sealed virtual string get_Description();
    public sealed virtual bool Equals(INavigationProviderFilter other);
    public bool Equals(NavigationProviderFilter other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual string Dump();
    public sealed virtual bool IsAccepted(IDeclaredElement element);
    public sealed virtual bool IsAccepted(IPsiSourceFile file);
    public sealed virtual IEnumerable`1<INavigationFilterCompletionItem> ProvideCompletion();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.NavigationProviderFilterExtensions : object {
    [ExtensionAttribute]
public static bool IsAccepted(INavigationScope scope, IPsiSourceFile file);
    [ExtensionAttribute]
public static bool IsAccepted(INavigationScope scope, IDeclaredElement element);
}
public abstract class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.PathBasedFilterDescriptor : object {
    private string myDescription;
    public string Description { get; }
    protected PathBasedFilterDescriptor(string description);
    public static PathBasedFilterDescriptorProjectItem ByFolder(string description, IProjectFolder folder);
    public static PathBasedFilterDescriptorDelegate ByDelegate(string description, Predicate`1<IPsiSourceFile> isAccepted);
    public sealed virtual string get_Description();
    public sealed virtual bool IsAccepted(IDeclaredElement element);
    public abstract virtual bool IsAccepted(IPsiSourceFile psiSourceFile);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.PathBasedFilterDescriptorProvider : object {
    public static Key`1<IProjectItem> CurrentProjectItem;
    private static string Separator;
    private static Key`1<IDictionary`2<string, IProjectFolder>> ourProjectFullPaths;
    private ISolution mySolution;
    public PathBasedFilterDescriptorProvider(ISolution solution);
    private static PathBasedFilterDescriptorProvider();
    public sealed virtual bool IsApplicable(GotoContext context, IEnumerable`1<IApplicableGotoProvider> navProviders);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.PathBasedFilterDescriptorProvider/<GetFiltersHelpItems>d__6")]
public sealed virtual IEnumerable`1<INavigationFilterHelpItem> GetFiltersHelpItems(IEnumerable`1<IApplicableGotoProvider> providers, GotoContext context);
    public sealed virtual IFilterDescriptor TryCreate(string key, string value, GotoContext context);
    [NotNullAttribute]
private IProjectFolder GetCurrentProjectFolder(GotoContext context);
    [CanBeNullAttribute]
private IFilterDescriptor TryCreateRelative(string value, IProjectFolder currentFolder);
    private IDictionary`2<string, IProjectFolder> CreateProjectPaths();
    public string CreateFilterForProjectElement(IProjectFolder selectedElement);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.PathMaskFilterDescriptorProvider : object {
    public sealed virtual bool IsApplicable(GotoContext context, IEnumerable`1<IApplicableGotoProvider> navProviders);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.PathMaskFilterDescriptorProvider/<GetFiltersHelpItems>d__1")]
public sealed virtual IEnumerable`1<INavigationFilterHelpItem> GetFiltersHelpItems(IEnumerable`1<IApplicableGotoProvider> providers, GotoContext context);
    private static IProject GetCurrentProject(GotoContext context);
    public sealed virtual IFilterDescriptor TryCreate(string key, string value, GotoContext context);
    private static IFilterDescriptor CreateByExtension(string filter);
    private IFilterDescriptor CreateByMask(string description, string value);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.TypeBasedFilterDescriptor : object {
    private TypeNavigationFilterEnum myItem;
    private IEnumerable`1<INavigationFilterClassifier> myClassifiers;
    public TypeNavigationFilterEnum Item { get; }
    public string Description { get; }
    public TypeBasedFilterDescriptor(TypeNavigationFilterEnum item, IEnumerable`1<INavigationFilterClassifier> classifiers);
    public TypeNavigationFilterEnum get_Item();
    public sealed virtual string get_Description();
    public sealed virtual bool IsAccepted(IDeclaredElement element);
    public sealed virtual bool IsAccepted(IPsiSourceFile file);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.TypeBasedFilterDescriptorProvider : object {
    private IEnumerable`1<INavigationFilterClassifier> myClassifiers;
    public IEnumerable`1<INavigationFilterClassifier> Classifiers { get; }
    public bool CanHaveValue { get; }
    public TypeBasedFilterDescriptorProvider(IEnumerable`1<INavigationFilterClassifier> classifiers);
    public IEnumerable`1<INavigationFilterClassifier> get_Classifiers();
    public bool get_CanHaveValue();
    public sealed virtual bool IsApplicable(GotoContext context, IEnumerable`1<IApplicableGotoProvider> navProviders);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.TypeBasedFilterDescriptorProvider/<GetFiltersHelpItems>d__7")]
public sealed virtual IEnumerable`1<INavigationFilterHelpItem> GetFiltersHelpItems(IEnumerable`1<IApplicableGotoProvider> providers, GotoContext context);
    public sealed virtual IFilterDescriptor TryCreate(string key, string value, GotoContext context);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Filters.TypeNavigationFilterEnum : EnumPattern {
    public static TypeNavigationFilterEnum File;
    public static TypeNavigationFilterEnum ProjectFile;
    public static TypeNavigationFilterEnum ProjectFolder;
    public static TypeNavigationFilterEnum Type;
    public static TypeNavigationFilterEnum Member;
    public static TypeNavigationFilterEnum Method;
    public static TypeNavigationFilterEnum Event;
    public static TypeNavigationFilterEnum Property;
    public static TypeNavigationFilterEnum Field;
    public static TypeNavigationFilterEnum UnitTestElement;
    public static TypeNavigationFilterEnum[] FileBasedTypes;
    public static TypeNavigationFilterEnum[] SymbolBasedTypes;
    [CompilerGeneratedAttribute]
private string <Mnemonic>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeNavigationFilterEnum <Parent>k__BackingField;
    public string Name { get; }
    [CanBeNullAttribute]
public string Mnemonic { get; }
    public TypeNavigationFilterEnum Parent { get; }
    public TypeNavigationFilterEnum(string name, string mnemonic, TypeNavigationFilterEnum parent);
    private static TypeNavigationFilterEnum();
    public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Mnemonic();
    [CompilerGeneratedAttribute]
public TypeNavigationFilterEnum get_Parent();
}
[ShellFeaturePartAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.GotoAction.GotoRecentActionProvider : object {
    private IActionManager myActionManager;
    private ActionDependenceHelper myActionDependenceHelper;
    private DataContextHolder myDataContextHolder;
    private ILazy`1<ActionsHistory> myActionsHistory;
    public GotoRecentActionProvider(IActionManager actionManager, ActionDependenceHelper actionDependenceHelper, DataContextHolder dataContextHolder, ILazy`1<ActionsHistory> actionsHistory);
    public sealed virtual IEnumerable`1<ValueTuple`2<IGotoActionItem, MatchingInfo>> GetMatchingActions(IIdentifierMatcher matcher, UserDataHolder searchContext, Func`1<bool> checkForInterrupt);
    private static int AdjustmentFunc(MatcherScore score);
}
[DebuggerDisplayAttribute("FullNavigationItemData : {ChainedMatchingInfo.Identifier}, Score: {myScore}")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.FullNavigationItemData : ValueType {
    private IApplicableGotoProvider myProvider;
    private MatchingInfo myMatchingInfo;
    private INavigationScope myScope;
    private int myScore;
    private int myOriginalPosition;
    [CanBeNullAttribute]
private IOccurrence myOccurrence;
    public INavigationScope Scope { get; }
    public MatchingInfo ChainedMatchingInfo { get; }
    public IApplicableGotoProvider NavigationProvider { get; }
    public int Score { get; }
    public int Position { get; }
    public FullNavigationItemData(MatchingInfo firstWordMatchingInfo, IApplicableGotoProvider provider, INavigationScope scope, IOccurrence occurrence);
    public INavigationScope get_Scope();
    public MatchingInfo get_ChainedMatchingInfo();
    public IApplicableGotoProvider get_NavigationProvider();
    public int get_Score();
    public int get_Position();
    public IEnumerable`1<IOccurrence> GetOccurrences(GotoContext gotoContext);
    public void SetScoreAndPosition(int score, int position);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.GotoEverythingItemsProvider : GotoItemsProviderBase`3<IGotoEverythingProvider, IChainedSearchEverythingProvider, IInstantGotoEverythingProvider> {
    private static String[] ourProjectModelDelimiters;
    private static String[] ourCodeModelDelimiters;
    private static char Dot;
    private GotoTextIntoGotoEverythingSettingsOwner myGotoTextIntoGotoEverything;
    public string DeclaredElementKindDisplayName { get; }
    protected bool InstantItemsAllowed { get; }
    public GotoEverythingItemsProvider(ISolution solution, Lifetime lifetime, bool enableMulticore);
    private static GotoEverythingItemsProvider();
    public virtual string get_DeclaredElementKindDisplayName();
    protected virtual bool get_InstantItemsAllowed();
    protected virtual ICollection`1<ChainedNavigationItemData> InitScopes(bool isSearchingInLibs, INavigationProviderFilter navfilter);
    protected virtual void ProcessSearch(int itemsCount, State<IGotoEverythingProvider, IChainedSearchEverythingProvider, IInstantGotoEverythingProvider> s, INavigationProviderFilter navfilter);
    protected virtual string GetWildcardFilter(string filterString);
    protected virtual List`1<string> AnalyzeFilterForWords(string filterString);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.GotoFileItemsProvider : GotoItemsProviderBase`3<IGotoFileProvider, IChainedProjectElementProvider, IInstantGotoFileProvider> {
    private static String[] Delimiters { get; }
    public GotoFileItemsProvider(ISolution solution, Lifetime lifetime, bool enableMulticore);
    protected virtual ICollection`1<ChainedNavigationItemData> InitScopes(bool isSearchingInLibs, INavigationProviderFilter navfilter);
    protected virtual List`1<string> AnalyzeFilterForWords(string filterString);
    private static String[] get_Delimiters();
    protected virtual string GetWildcardFilter(string filterString);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.GotoItemsConsumer : MulticastDelegate {
    public GotoItemsConsumer(object object, IntPtr method);
    public virtual void Invoke(IEnumerable`1<PresentableGotoItem> items, AddItemsBehavior addBehavior);
    public virtual IAsyncResult BeginInvoke(IEnumerable`1<PresentableGotoItem> items, AddItemsBehavior addBehavior, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.GotoItemSeparator : PresentableGotoItem {
    [CompilerGeneratedAttribute]
private string <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHeader>k__BackingField;
    public string Header { get; }
    public bool IsHeader { get; }
    public GotoItemSeparator(string header);
    [CompilerGeneratedAttribute]
public string get_Header();
    [CompilerGeneratedAttribute]
public bool get_IsHeader();
}
public abstract class JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.GotoItemsProviderBase : object {
    [CanBeNullAttribute]
public string DeclaredElementKindDisplayName { get; }
    public GotoControllerNavigationFilter Filter { get; }
    public virtual string get_DeclaredElementKindDisplayName();
    public virtual void ClearCaches();
    public abstract virtual GotoControllerNavigationFilter get_Filter();
    public abstract virtual void ConsumePresentableItems(GotoItemsProviderModel itemsModel, int itemsCount, GotoItemsConsumer itemsConsumer);
}
public abstract class JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.GotoItemsProviderBase`3 : GotoItemsProviderBase {
    protected ILogger Log;
    [NotNullAttribute]
private ILogger myPerfLogger;
    private static object ourLockObject;
    private bool myEnableMulticore;
    [NotNullAttribute]
protected GotoMerger myGotoMerger;
    [NotNullAttribute]
public ISolution Solution;
    [CanBeNullAttribute]
protected object ScopeData;
    private Tuple`2<int, ICollection`1<ChainedNavigationItemData>> myProvidedScopesData;
    private ChunkList`1<FullNavigationItemData> myPreviouslyObtainedNavigationData;
    private bool myPreviouslyObtainedSearchInLibs;
    private bool myLibrariesFlagAutoSwitch;
    private string myWholeFilterString;
    private IdentifierMatchingStyle myMatchingStyle;
    private bool myContainingScopeNotEmpty;
    [CanBeNullAttribute]
private string myPreviousFilter;
    [CanBeNullAttribute]
private INavigationProviderFilter myPreviousNavigationFilter;
    [CanBeNullAttribute]
private GotoControllerNavigationFilter myGotoControllerNavigationFilter;
    [NotNullAttribute]
private IgnoredElementsSearchProvider myIgnoredElements;
    [NotNullAttribute]
private IModuleReferenceResolveContext myResolveContext;
    [CompilerGeneratedAttribute]
private int <WordsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IIdentifierMatcherFactory <MatcherFactory>k__BackingField;
    public GotoControllerNavigationFilter Filter { get; }
    public bool IsSupportNavigationFilters { get; }
    public int WordsCount { get; private set; }
    public IIdentifierMatcherFactory MatcherFactory { get; protected set; }
    protected bool InstantItemsAllowed { get; }
    protected bool ShouldScoreDefaultResults { get; }
    public bool LibrariesFlagAutoSwitch { get; public set; }
    protected int InstantItemsLimit { get; }
    protected bool IsAutoWildcardNavigationFilter { get; }
    public GotoItemsProviderBase`3(ISolution solution, object scopeData, bool enableMulticore);
    private static GotoItemsProviderBase`3();
    public virtual GotoControllerNavigationFilter get_Filter();
    public bool get_IsSupportNavigationFilters();
    [CompilerGeneratedAttribute]
public int get_WordsCount();
    [CompilerGeneratedAttribute]
private void set_WordsCount(int value);
    [CompilerGeneratedAttribute]
public IIdentifierMatcherFactory get_MatcherFactory();
    [CompilerGeneratedAttribute]
protected void set_MatcherFactory(IIdentifierMatcherFactory value);
    [NotNullAttribute]
public GotoControllerNavigationFilter InitFilter(Lifetime lifetime, ISolution solution, Func`2<IOccurrence, bool> defaultFileFilter);
    public virtual void ConsumePresentableItems(GotoItemsProviderModel itemsModel, int itemsCount, GotoItemsConsumer itemsConsumer);
    protected virtual void ProcessSearch(int itemsCount, State<TGotoProvider, TGotoChainedProvider, TGotoInstantProvider> s, INavigationProviderFilter navfilter);
    private void ProcessSearchStep(int itemsCount, State<TGotoProvider, TGotoChainedProvider, TGotoInstantProvider> s, INavigationProviderFilter navfilter);
    private INavigationProviderFilter ProcessNavigationFilters(String& filterString, GotoContext context);
    protected virtual bool CanIgnoreSpacesInFilter(string filterString);
    private void MergeItems(List`1<PresentableGotoItem> instantItems, List`1<PresentableGotoItem> commonItems, List`1<PresentableGotoItem> instantWildcardItems);
    [CanBeNullAttribute]
protected virtual string GetWildcardFilter(string filterString);
    protected virtual bool get_InstantItemsAllowed();
    private List`1<PresentableGotoItem> GetInstantItems(IIdentifierMatcher wholeWordMatcher, GotoContext gotoContext, bool extendsFlag, INavigationProviderFilter filter);
    protected virtual bool get_ShouldScoreDefaultResults();
    private IList`1<ChainedNavigationItemData> ProcessNextSearchStep(IEnumerable`1<ChainedNavigationItemData> previousStepScopes, IIdentifierMatcher matcher, INavigationProviderFilter filter, GotoContext context);
    protected IEnumerable`1<PresentableGotoItem> GetOccurrencesOutOfMatchingInfos(Func`2<IOccurrence, bool> filter, int count, bool isSearchingInLibs, IEnumerable`1<FullNavigationItemData> pairsToDescribe, GotoContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.GotoItemsProviderBase`3/<GetPresentableGotoItems>d__48")]
private IEnumerable`1<PresentableGotoItem> GetPresentableGotoItems(IEnumerable`1<FullNavigationItemData> navigationItemDatas, Func`2<IOccurrence, bool> filter, LibrariesFlag searchFlag, GotoContext context);
    protected ChunkList`1<FullNavigationItemData> GetMatchingInfosOutOfScope(IEnumerable`1<ChainedNavigationItemData> matchingInfoScopeDatas, IIdentifierMatcher matcher, bool isSearchingInLibs, GotoContext context, Func`2<TGotoProvider, bool> providerFilter);
    public bool get_LibrariesFlagAutoSwitch();
    public void set_LibrariesFlagAutoSwitch(bool value);
    protected virtual int get_InstantItemsLimit();
    protected virtual bool get_IsAutoWildcardNavigationFilter();
    protected virtual List`1<string> AnalyzeFilterForWords(string filterString);
    protected abstract virtual ICollection`1<ChainedNavigationItemData> InitScopes(bool isSearchingInLibs, INavigationProviderFilter navfilter);
    protected virtual void SortOccurrences(List`1<PresentableGotoItem> items, string filterString);
    protected Comparison`1<PresentableGotoItem> GetOccurrenceComparison();
    protected virtual bool IsAcceptedByIgnoreFilter(IOccurrence occurrence);
    protected virtual IEnumerable`1<FullNavigationItemData> SortMatchingInfos(ChunkList`1<FullNavigationItemData> pairs, IEnumerable`1<string> words, IIdentifierMatcher matcher, string wildCardFilter);
    private static int ScoreMatchingInfo(FullNavigationItemData fullNavigationItemData, List`1<string> revertedWords, List`1<string> wildCardFilter);
    public virtual IEnumerable`1<IOccurrenceNavigationProvider> GetAllGotoProviders();
    protected virtual IEnumerable`1<TProvider> GetApplicableProviders(INavigationScope scope, IIdentifierMatcher matcher, GotoContext context);
    protected virtual bool AutoActivateAdvancedSearch(bool containingScopeNotEmpty, INavigationProviderFilter navfilter, GotoItemsProviderModel itemsModel);
    protected virtual void DeactivateAdvancedSearchIfNeeded(string filterString, Boolean& isSearchingInLibs, INavigationProviderFilter navfilter, GotoItemsProviderModel itemsModel);
    private Tuple`2<int, ICollection`1<ChainedNavigationItemData>> ProcessNewInput(string newInput, bool isSearchingInLibs, INavigationProviderFilter navfilter);
    private void ResetProvidedScopes(bool isSearchingInLibs, INavigationProviderFilter navfilter);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.GotoItemsProviderModel : object {
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private GotoContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCheckBoxChecked>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCheckerVisible>k__BackingField;
    public string Filter { get; }
    public string RawFilter { get; }
    public GotoContext Context { get; }
    public bool IsCheckBoxChecked { get; }
    public bool IsCheckerVisible { get; public set; }
    protected GotoItemsProviderModel(string filter, string rawFilter, GotoContext context, bool isCheckboxChecked);
    public static GotoItemsProviderModel Create(string filter, GotoContext context, bool isCheckboxChecked, bool isCheckerVisible);
    [CompilerGeneratedAttribute]
public string get_Filter();
    [CompilerGeneratedAttribute]
public string get_RawFilter();
    [CompilerGeneratedAttribute]
public GotoContext get_Context();
    [CompilerGeneratedAttribute]
public bool get_IsCheckBoxChecked();
    [CompilerGeneratedAttribute]
public virtual bool get_IsCheckerVisible();
    [CompilerGeneratedAttribute]
public virtual void set_IsCheckerVisible(bool value);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.GotoMetadataTokenItemsProvider : GotoItemsProviderBase`3<IGotoMetadataTokenProvider, IChainedSearchProvider, IInstantGotoProvider> {
    public GotoMetadataTokenItemsProvider(ISolution solution, bool enableMulticore);
    protected virtual ICollection`1<ChainedNavigationItemData> InitScopes(bool isSearchingInLibs, INavigationProviderFilter navfilter);
    protected virtual List`1<string> AnalyzeFilterForWords(string filterString);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.GotoNamespaceItemsProvider : GotoItemsProviderBase`3<IGotoNamespaceProvider, IChainedSearchProvider, IInstantGotoProvider> {
    public GotoNamespaceItemsProvider(ISolution solution, bool enableMulticore);
    protected virtual ICollection`1<ChainedNavigationItemData> InitScopes(bool isSearchingInLibs, INavigationProviderFilter navfilter);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.GotoStringItemProvider : GotoItemsProviderBase`3<IGotoStringProvider, IGotoStringChainedProvider, IGotoStringInstantGotoProvider> {
    public string DeclaredElementKindDisplayName { get; }
    public GotoStringItemProvider(ISolution solution, bool enableMulticore);
    public virtual string get_DeclaredElementKindDisplayName();
    protected virtual ICollection`1<ChainedNavigationItemData> InitScopes(bool isSearchingInLibs, INavigationProviderFilter navfilter);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.GotoSymbolItemsProvider : GotoItemsProviderBase`3<IGotoSymbolProvider, IChainedSymbolProvider, IInstantGotoProvider> {
    private static String[] ourCodeModelDelimiters;
    public string DeclaredElementKindDisplayName { get; }
    public GotoSymbolItemsProvider(Lifetime lifetime, ISolution solution, bool enableMulticore);
    private static GotoSymbolItemsProvider();
    protected virtual List`1<string> AnalyzeFilterForWords(string filterString);
    protected virtual ICollection`1<ChainedNavigationItemData> InitScopes(bool isSearchingInLibs, INavigationProviderFilter navfilter);
    public virtual string get_DeclaredElementKindDisplayName();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.GotoTypeItemsProvider : GotoItemsProviderBase`3<IGotoTypeProvider, IChainedNamespacesProvider, IInstantGotoProvider> {
    [NotNullAttribute]
private string myDeclaredElementKindDisplayName;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ActivateAdvancedSearch>k__BackingField;
    private static String[] ourCodeModelDelimiters;
    public string DeclaredElementKindDisplayName { get; }
    public Nullable`1<bool> ActivateAdvancedSearch { get; public set; }
    public GotoTypeItemsProvider(Lifetime lifetime, ISolution solution, string sDeclaredElementKindDisplayName, bool enableMulticore);
    private static GotoTypeItemsProvider();
    public virtual string get_DeclaredElementKindDisplayName();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ActivateAdvancedSearch();
    [CompilerGeneratedAttribute]
public void set_ActivateAdvancedSearch(Nullable`1<bool> value);
    protected virtual bool AutoActivateAdvancedSearch(bool containingScopeNotEmpty, INavigationProviderFilter navfilter, GotoItemsProviderModel itemsModel);
    protected virtual ICollection`1<ChainedNavigationItemData> InitScopes(bool isSearchingInLibs, INavigationProviderFilter navfilter);
    protected virtual List`1<string> AnalyzeFilterForWords(string filterString);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.IApplicableGotoControllerItemsProvider {
    public abstract virtual bool IsApplicable(GotoItemsProviderModel itemsModel);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.IGotoControllerItemsProvider {
    [CanBeNullAttribute]
public GotoControllerNavigationFilter Filter { get; }
    public abstract virtual GotoControllerNavigationFilter get_Filter();
    public abstract virtual void ConsumePresentableItems(GotoItemsProviderModel itemsModel, int itemsCount, GotoItemsConsumer itemsConsumer);
    public abstract virtual void ClearCaches();
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.IGotoItemsProviderDisplayKind {
    [CanBeNullAttribute]
public string DeclaredElementKindDisplayName { get; }
    public abstract virtual string get_DeclaredElementKindDisplayName();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.PresentableGotoItem : object {
    [CanBeNullAttribute]
private IOccurrence myOccurrence;
    [CanBeNullAttribute]
private MatchingInfo myMatchingInfo;
    private IApplicableGotoProvider myProvider;
    private bool myIsInstant;
    [CanBeNullAttribute]
public IOccurrence Occurrence { get; }
    public MatchingInfo MatchingInfo { get; }
    public IApplicableGotoProvider Provider { get; }
    public bool IsInstant { get; }
    public PresentableGotoItem(IOccurrence occurrence, MatchingInfo matchingInfo, IApplicableGotoProvider provider, bool isInstant);
    protected bool Equals(PresentableGotoItem other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public IOccurrence get_Occurrence();
    public MatchingInfo get_MatchingInfo();
    public IApplicableGotoProvider get_Provider();
    public bool get_IsInstant();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.ReactiveGotoItemsProviderModel : GotoItemsProviderModel {
    private IProperty`1<bool> myIsCheckerVisible;
    public bool IsCheckerVisible { get; public set; }
    public ReactiveGotoItemsProviderModel(string filter, string rawFilterString, IProperty`1<bool> isCheckerVisible, GotoContext context, bool isCheckboxChecked);
    public virtual bool get_IsCheckerVisible();
    public virtual void set_IsCheckerVisible(bool value);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.ItemProviders.SelfPresentableGotoItem : PresentableGotoItem {
    private Func`2<SelfPresentableGotoItem, JetPopupMenuItem> myPresenter;
    public SelfPresentableGotoItem(IOccurrence occurrence, MatchingInfo matchingInfo, Func`2<SelfPresentableGotoItem, JetPopupMenuItem> presenter, bool isInstant);
    [NotNullAttribute]
public JetPopupMenuItem Present();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.ChainedNavigationItemData : object {
    private INavigationScope myScopeData;
    [NotNullAttribute]
private MatchingInfo myMatchingInfo;
    [NotNullAttribute]
public MatchingInfo ChainedMatchingInfo { get; }
    public INavigationScope Scope { get; }
    public ChainedNavigationItemData(MatchingInfo firstWordMatchingInfo, INavigationScope scopeData);
    public MatchingInfo get_ChainedMatchingInfo();
    public INavigationScope get_Scope();
}
public static class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.ChainedScopesUtil : object {
    private static Key`1<ISymbolScope> ourSolutionKey;
    private static Key`1<ISymbolScope> ourSolutionAndLibrariesKey;
    private static Key`1<Dictionary`2<IPsiModule, Key`1<ISymbolScope>>> ourModulesScopes;
    private static object ourLockObject;
    private static ChainedScopesUtil();
    public static IEnumerable`1<ChainedNavigationItemData> GetNextCodeModelScope(IIdentifierMatcher matcher, INavigationScope containingScope, ISymbolScope cache, bool includeTypeElements);
    public static ISymbolScope GetDeclarationsCache(INavigationScope scope, ISolution solution, GotoContext gotoContext);
    public static bool CanNavigateToDeclaredElement(IClrDeclaredElement element);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.ChainedScopesUtil/<GetAllSubElements>d__7")]
public static IEnumerable`1<IClrDeclaredElement> GetAllSubElements(INamespace namespaceScope, ISymbolScope cache, bool inlcudeTypeElements);
    public static IEnumerable`1<ITypeElement> GetAllNestedTypes(INamespace ns, ISymbolScope cache);
    public static int CalculateChainedScore(MatchingInfo matchingInfo);
    public static int CompareMatchingInfo(int xScore, int yScore, MatchingInfo x, MatchingInfo y);
    private static int WordWeight(int wordNumber);
    [CompilerGeneratedAttribute]
internal static Key`1<ISymbolScope> <GetDeclarationsCache>g__GetKey|5_0(<>c__DisplayClass5_0& );
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.FileMemberNavigationScope : object {
    private IPsiSourceFile modreq(System.Runtime.CompilerServices.IsVolatile) myPrimarySourceFile;
    private Func`1 modreq(System.Runtime.CompilerServices.IsVolatile) mySecondaryFilesGetter;
    private LibrariesFlag modreq(System.Runtime.CompilerServices.IsVolatile) myExtendedSearchFlag;
    [CompilerGeneratedAttribute]
private INavigationProviderFilter <Filter>k__BackingField;
    public LibrariesFlag ExtendedSearchFlag { get; public set; }
    public INavigationProviderFilter Filter { get; }
    public FileMemberNavigationScope(IPsiSourceFile scopeData, LibrariesFlag extendsFlag, INavigationProviderFilter filter, Func`1<ICollection`1<IProjectFile>> secondayScopeData);
    [NotNullAttribute]
public IPsiSourceFile GetPrimarySourceFile();
    public Func`1<ICollection`1<IProjectFile>> GetSecondaryFilesGetter();
    public sealed virtual LibrariesFlag get_ExtendedSearchFlag();
    public sealed virtual void set_ExtendedSearchFlag(LibrariesFlag value);
    public sealed virtual ISolution GetSolution();
    [CompilerGeneratedAttribute]
public sealed virtual INavigationProviderFilter get_Filter();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.GotoByNameModelManager : object {
    private ISolution mySolution;
    public GotoByNameModelManager(ISolution solution);
    public static GotoByNameModelManager GetInstance(ISolution solution);
    [CanBeNullAttribute]
public SearchTextData GetSearchTextData(IDataContext context, GotoByNameController controller);
    public void ProcessModel(GotoByNameModel model, Lifetime lifetime, Type dataStoreKey);
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.GotoByNameStoreManagerBase : object {
    public virtual void StoreData(GotoByNameModel model, Lifetime lifetime, Type dataStoreKey);
    public virtual string GetStoredText(Type dataStoreKey);
    public virtual ICollection`1<IOccurrence> GetRecentOccurrences(Type dataStoreKey);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.GoToCamelCasePrefixMatcher : CamelCasePrefixMatcher {
    public GoToCamelCasePrefixMatcher(string prefix, bool appendEnding, bool bMatchBeginningOfStringOnly);
    public virtual string BuildRegexString(string prefix);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.GotoContext : UserDataHolder {
    [CompilerGeneratedAttribute]
private UserDataHolder <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawFilterString>k__BackingField;
    public UserDataHolder State { get; }
    public string RawFilterString { get; public set; }
    public GotoContext(UserDataHolder state);
    [CompilerGeneratedAttribute]
public UserDataHolder get_State();
    [CompilerGeneratedAttribute]
public string get_RawFilterString();
    [CompilerGeneratedAttribute]
public void set_RawFilterString(string value);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.GotoEverythingConstants : object {
    public static int InstantItemsLimit;
    public static int NonInstantItemsCount;
    public static int MenuItemsCountLimit;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.GoToHelper : object {
    private static Regex ourLineColumnPatterns;
    private static GoToHelper();
    [NullableContextAttribute("2")]
public static string GetFormatedSelectedText(ITextControl textControl);
    public static bool IsFileLinePattern(string filterString);
    public static Nullable`1<ValueTuple`3<string, Nullable`1<Int32`1<DocLine>>, Nullable`1<Int32`1<DocColumn>>>> ParseLinePattern(string filterString);
    public static List`1<string> TrySplitFilePattern(string filterString, String[] delimiters);
    [CompilerGeneratedAttribute]
internal static Nullable`1<int> <ParseLinePattern>g__TryParseInt|3_0(string input);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.GotoMenuItemUtil : object {
    public static string GetModuleName(IModule module, String& location, bool alwaysSpecifyVersion);
    public static string GetModuleName(IModule module, bool alwaysSpecifyVersion);
    public static bool IsDisambigNeeded(IModule module);
    private static void AppendDelimited(StringBuilder sb, string s);
    private static string FormatAssemblyVersion(AssemblyNameInfo assemblyName);
    public static JetPopupMenuItem CreateGroupHeader(string boldTitle);
    public static JetPopupMenuItem CreateSeparator();
    private static JetPopupMenuItem CreateGroupHeader(RichText richText);
    public static JetPopupMenuItem CreateDisabledItem(string title);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.GotoMerger : object {
    private static ILogger ourLog;
    private static int MergeDistance;
    private static int TopItemsToMerge;
    private MergeRule[] myAllMergeRules;
    private MergeRule[] myInstantAndCommonMergeRules;
    private static String[] ourExtensions;
    private static GotoMerger();
    public void MergeItems(List`1<PresentableGotoItem> topMatchingInfos);
    public void MergeInstantAndCommonItems(List`1<PresentableGotoItem> instantItems, List`1<PresentableGotoItem> commonItems);
    [CanBeNullAttribute]
private PresentableGotoItem MergeOccurrences(PresentableGotoItem upperOne, PresentableGotoItem lowerOne, IEnumerable`1<MergeRule> rules);
    protected virtual IEnumerable`1<MergeRule> GetInstantAndCommonItemsMergeRules();
    private PresentableGotoItem RecentFileOverType(PresentableGotoItem recentFile, PresentableGotoItem commonType);
    protected virtual IEnumerable`1<MergeRule> GetAllItemsMergeRules();
    protected static PresentableGotoItem DeclaredElementsInTheSameRange(PresentableGotoItem item1, PresentableGotoItem item2);
    protected static PresentableGotoItem RecentEditOverCommonEdit(PresentableGotoItem recentMethod, PresentableGotoItem method);
    protected static PresentableGotoItem InstantTypeOverRecentFile(PresentableGotoItem recentFile, PresentableGotoItem instantType);
    private static PresentableGotoItem RecentEditOverRecentMethod(PresentableGotoItem item1, PresentableGotoItem item2);
    protected static PresentableGotoItem RecentOrInstantFileOverFile(PresentableGotoItem recentFile, PresentableGotoItem file);
    protected static PresentableGotoItem RecentFileOverInstantFile(PresentableGotoItem recentFile, PresentableGotoItem file);
    protected static PresentableGotoItem InstantTypeOverType(PresentableGotoItem instantType, PresentableGotoItem commonType);
    protected static PresentableGotoItem UpperTypeOverLowerFile(PresentableGotoItem data1, PresentableGotoItem data2);
    protected static bool DiffersByExtension(PresentableGotoItem name, PresentableGotoItem nameWithExtension);
    protected static bool SameName(PresentableGotoItem recent, PresentableGotoItem instant);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.GotoProvidersManager : object {
    private IFeaturePartsContainer myFeaturePartContainer;
    public GotoProvidersManager(IFeaturePartsContainer container);
    public IEnumerable`1<TNavigationProvider> GetAllGotoProviders();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.GotoProvidersManagerExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<TNavigationProvider> GetApplicableNavigationProviders(GotoProvidersManager manager, INavigationScope scope, GotoContext gotoContext, IIdentifierMatcher matcher);
    [ExtensionAttribute]
public static IEnumerable`1<TNavigationProvider> GetAllGotoProvidersFilterOverridden(GotoProvidersManager manager);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.NamespaceNavigationScope : object {
    private INamespace modreq(System.Runtime.CompilerServices.IsVolatile) myNamespace;
    private LibrariesFlag modreq(System.Runtime.CompilerServices.IsVolatile) myExtendedSearchFlag;
    private ISolution mySolution;
    [CompilerGeneratedAttribute]
private INavigationProviderFilter <Filter>k__BackingField;
    public INamespace Namespace { get; }
    public LibrariesFlag ExtendedSearchFlag { get; public set; }
    public INavigationProviderFilter Filter { get; }
    public NamespaceNavigationScope(INamespace namespace, LibrariesFlag flag, ISolution solution, INavigationProviderFilter filter);
    public INamespace get_Namespace();
    public sealed virtual LibrariesFlag get_ExtendedSearchFlag();
    public sealed virtual void set_ExtendedSearchFlag(LibrariesFlag value);
    public sealed virtual ISolution GetSolution();
    [CompilerGeneratedAttribute]
public sealed virtual INavigationProviderFilter get_Filter();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.ProjectFileLineNavigationScope : object {
    [NotNullAttribute]
private IProjectFile myProjectFile;
    [CompilerGeneratedAttribute]
private Int32`1<DocLine> <DocumentLine>k__BackingField;
    [CompilerGeneratedAttribute]
private LibrariesFlag <ExtendedSearchFlag>k__BackingField;
    [CompilerGeneratedAttribute]
private INavigationProviderFilter <Filter>k__BackingField;
    [NotNullAttribute]
public IProjectFile ProjectFile { get; }
    public Int32`1<DocLine> DocumentLine { get; }
    public LibrariesFlag ExtendedSearchFlag { get; public set; }
    public INavigationProviderFilter Filter { get; }
    public ProjectFileLineNavigationScope(IProjectFile projectFile, LibrariesFlag flag, INavigationProviderFilter filter, Int32`1<DocLine> documentLine);
    public IProjectFile get_ProjectFile();
    [CompilerGeneratedAttribute]
public Int32`1<DocLine> get_DocumentLine();
    [CompilerGeneratedAttribute]
public sealed virtual LibrariesFlag get_ExtendedSearchFlag();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExtendedSearchFlag(LibrariesFlag value);
    public sealed virtual ISolution GetSolution();
    [CompilerGeneratedAttribute]
public sealed virtual INavigationProviderFilter get_Filter();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.ProjectModelNavigationScope : object {
    private IProjectModelElement modreq(System.Runtime.CompilerServices.IsVolatile) myProjectModelElement;
    private LibrariesFlag modreq(System.Runtime.CompilerServices.IsVolatile) myExtendedSearchFlag;
    [CompilerGeneratedAttribute]
private INavigationProviderFilter <Filter>k__BackingField;
    public IProjectModelElement ProjectItem { get; }
    public LibrariesFlag ExtendedSearchFlag { get; public set; }
    public INavigationProviderFilter Filter { get; }
    public ProjectModelNavigationScope(IProjectModelElement projectItem, LibrariesFlag flag, INavigationProviderFilter filter);
    public IProjectModelElement get_ProjectItem();
    public sealed virtual LibrariesFlag get_ExtendedSearchFlag();
    public sealed virtual void set_ExtendedSearchFlag(LibrariesFlag value);
    public sealed virtual ISolution GetSolution();
    [CompilerGeneratedAttribute]
public sealed virtual INavigationProviderFilter get_Filter();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.PsiModuleNavigationScope : object {
    private ISolution mySolution;
    [CompilerGeneratedAttribute]
private IPsiModule <Module>k__BackingField;
    [CompilerGeneratedAttribute]
private LibrariesFlag <ExtendedSearchFlag>k__BackingField;
    public IPsiModule Module { get; }
    public INavigationProviderFilter Filter { get; }
    public LibrariesFlag ExtendedSearchFlag { get; public set; }
    public PsiModuleNavigationScope(ISolution solution, IPsiModule module);
    [CompilerGeneratedAttribute]
public IPsiModule get_Module();
    public sealed virtual INavigationProviderFilter get_Filter();
    [CompilerGeneratedAttribute]
public sealed virtual LibrariesFlag get_ExtendedSearchFlag();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExtendedSearchFlag(LibrariesFlag value);
    public sealed virtual ISolution GetSolution();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.SolutionNavigationScope : object {
    private ISolution modreq(System.Runtime.CompilerServices.IsVolatile) myScopeData;
    private LibrariesFlag modreq(System.Runtime.CompilerServices.IsVolatile) myExtendedSearchFlag;
    [CompilerGeneratedAttribute]
private INavigationProviderFilter <Filter>k__BackingField;
    public LibrariesFlag ExtendedSearchFlag { get; public set; }
    [NotNullAttribute]
public INavigationProviderFilter Filter { get; }
    public SolutionNavigationScope(ISolution solution, bool extendsFlag, INavigationProviderFilter filter);
    public sealed virtual ISolution GetSolution();
    public sealed virtual LibrariesFlag get_ExtendedSearchFlag();
    public sealed virtual void set_ExtendedSearchFlag(LibrariesFlag value);
    [CompilerGeneratedAttribute]
public sealed virtual INavigationProviderFilter get_Filter();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.TextBasedNavigationScope : object {
    [CompilerGeneratedAttribute]
private LibrariesFlag <ExtendedSearchFlag>k__BackingField;
    [CompilerGeneratedAttribute]
private INavigationProviderFilter <Filter>k__BackingField;
    private ISolution mySolution;
    public LibrariesFlag ExtendedSearchFlag { get; public set; }
    public INavigationProviderFilter Filter { get; }
    public TextBasedNavigationScope(ISolution solution, bool extendedSearchFlag, INavigationProviderFilter filter);
    [CompilerGeneratedAttribute]
public sealed virtual LibrariesFlag get_ExtendedSearchFlag();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExtendedSearchFlag(LibrariesFlag value);
    [CompilerGeneratedAttribute]
public sealed virtual INavigationProviderFilter get_Filter();
    public sealed virtual ISolution GetSolution();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.TypeElementNavigationScope : object {
    private ITypeElement modreq(System.Runtime.CompilerServices.IsVolatile) myElement;
    private LibrariesFlag modreq(System.Runtime.CompilerServices.IsVolatile) myExtendedSearchFlag;
    [CompilerGeneratedAttribute]
private INavigationProviderFilter <Filter>k__BackingField;
    public ITypeElement TypeElement { get; }
    public LibrariesFlag ExtendedSearchFlag { get; public set; }
    public INavigationProviderFilter Filter { get; }
    public TypeElementNavigationScope(ITypeElement typeElement, LibrariesFlag flag, INavigationProviderFilter filter);
    public ITypeElement get_TypeElement();
    public sealed virtual LibrariesFlag get_ExtendedSearchFlag();
    public sealed virtual void set_ExtendedSearchFlag(LibrariesFlag value);
    public sealed virtual ISolution GetSolution();
    [CompilerGeneratedAttribute]
public sealed virtual INavigationProviderFilter get_Filter();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.ModelInitializers.GotoFileModelInitializer : object {
    public virtual void InitModel(Lifetime lifetime, GotoByNameModel model);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.ModelInitializers.GotoMetadataTokenModelInitializer : object {
    public sealed virtual void InitModel(Lifetime lifetime, GotoByNameModel model);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.ModelInitializers.GotoStringModelInitializer : object {
    public sealed virtual void InitModel(Lifetime lifetime, GotoByNameModel model);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.ModelInitializers.GotoSymbolModelInitializer : object {
    protected bool ShowCheckBox { get; }
    public virtual void InitModel(Lifetime lifetime, GotoByNameModel model);
    protected virtual bool get_ShowCheckBox();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.ModelInitializers.GotoTypeModelInitializer : object {
    protected bool ShowCheckBox { get; }
    public virtual void InitModel(Lifetime lifetime, GotoByNameModel model);
    protected virtual bool get_ShowCheckBox();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.ModelInitializers.GotoWordModelInitializer : object {
    protected bool ShowCheckBox { get; }
    public virtual void InitModel(Lifetime lifetime, GotoByNameModel model);
    protected virtual bool get_ShowCheckBox();
}
public abstract class JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.CachedGotoSymbolBase`1 : object {
    private Key`1<CachedPreviousResult<TCache>> myCachedPrevResultKey;
    private static Key`1<ResultListPool<MatchingInfo>> ourLocalResultListPoolKey;
    protected IShellLocks myLocks;
    protected CachedGotoSymbolBase`1(IShellLocks locks);
    private static CachedGotoSymbolBase`1();
    public virtual IEnumerable`1<MatchingInfo> FindMatchingInfos(IIdentifierMatcher matcher, INavigationScope scope, GotoContext gotoContext);
    protected abstract virtual TCache GetCache(INavigationScope scope, ISolution solution, GotoContext gotoContext);
    protected abstract virtual IEnumerable`1<string> GetNames(TCache cache, INavigationScope scope, GotoContext context);
    public abstract virtual IEnumerable`1<IOccurrence> GetOccurrencesByMatchingInfo(MatchingInfo navigationInfo, INavigationScope scope, GotoContext gotoContext);
    public virtual bool IsApplicable(INavigationScope scope, GotoContext gotoContext, IIdentifierMatcher matcher);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.ChainedProviders.IChainedNamespacesProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.ChainedProviders.IChainedProjectElementProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.ChainedProviders.IChainedSearchEverythingProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.ChainedProviders.IChainedSearchProvider {
    public abstract virtual IEnumerable`1<ChainedNavigationItemData> GetNextChainedScopes(GotoContext gotoContext, IIdentifierMatcher matcher, INavigationScope containingScope);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.ChainedProviders.IChainedSymbolProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IApplicableGotoProvider {
    public abstract virtual bool IsApplicable(INavigationScope scope, GotoContext gotoContext, IIdentifierMatcher matcher);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.ICacheScopeProvider {
    public abstract virtual LibrarySymbolScope GetCacheScope(INavigationScope scope);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IChainedOccurrencesProvider {
    public abstract virtual IEnumerable`1<Pair`2<IOccurrence, MatchingInfo>> FindOccurrences(IdentifierMatcher matcher, INavigationScope scope, LibrariesFlag includeLibraries, Func`1<bool> checkCancelled);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.ICompletionGotoController {
    public bool LibrariesFlagAutoSwitch { get; public set; }
    public GotoByNameModel Model { get; }
    public abstract virtual bool get_LibrariesFlagAutoSwitch();
    public abstract virtual void set_LibrariesFlagAutoSwitch(bool value);
    public abstract virtual GotoByNameModel get_Model();
    public abstract virtual void RestrictItemsPassFilter(Func`2<IDeclaredElement, bool> filter);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IGotoEverythingProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IGotoFileMemberProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IGotoFileProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IGotoMetadataTokenProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IGotoNamespaceProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IGotoProviderWithCache {
    public abstract virtual void PrecalculateCaches(INavigationScope scope, ISolution solution, GotoContext context);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IGotoProviderWithPriority {
    public Func`2<MatcherScore, int> ItemsPriorityFunc { get; }
    public abstract virtual Func`2<MatcherScore, int> get_ItemsPriorityFunc();
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IGotoRecentEditsProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IGotoRecentFilesProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IGotoRecentMethodsProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IGotoRecentProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IGotoStringProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IGotoSymbolProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IGotoTypeElementsMemberProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IGotoTypeMembersProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IGotoTypeProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IInstantGotoEverythingProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IInstantGotoFileProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IInstantGotoProvider {
    public abstract virtual IEnumerable`1<Pair`2<IOccurrence, MatchingInfo>> GetMatchingOccurrences(IIdentifierMatcher matcher, INavigationScope scope, GotoContext gotoContext);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IModelInitializer {
    public abstract virtual void InitModel(Lifetime lifetime, GotoByNameModel model);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.INavigationScope {
    public LibrariesFlag ExtendedSearchFlag { get; public set; }
    [CanBeNullAttribute]
public INavigationProviderFilter Filter { get; }
    public abstract virtual LibrariesFlag get_ExtendedSearchFlag();
    public abstract virtual void set_ExtendedSearchFlag(LibrariesFlag value);
    public abstract virtual ISolution GetSolution();
    public abstract virtual INavigationProviderFilter get_Filter();
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IOccurrenceNavigationProvider {
    public abstract virtual IEnumerable`1<MatchingInfo> FindMatchingInfos(IIdentifierMatcher matcher, INavigationScope scope, GotoContext gotoContext);
    public abstract virtual IEnumerable`1<IOccurrence> GetOccurrencesByMatchingInfo(MatchingInfo navigationInfo, INavigationScope scope, GotoContext gotoContext);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.ISortingOccurrenceNavigationProvider {
}
public enum JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.LibrariesFlag : Enum {
    public int value__;
    public static LibrariesFlag SolutionOnly;
    public static LibrariesFlag SolutionAndLibraries;
}
public abstract class JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.NonCachedFileMemberProvider`1 : object {
    public sealed virtual IEnumerable`1<MatchingInfo> FindMatchingInfos(IIdentifierMatcher matcher, INavigationScope scope, GotoContext gotoContext);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.NonCachedFileMemberProvider`1/<GetOccurrencesByMatchingInfo>d__1")]
public sealed virtual IEnumerable`1<IOccurrence> GetOccurrencesByMatchingInfo(MatchingInfo navigationInfo, INavigationScope scope, GotoContext gotoContext);
    public sealed virtual bool IsApplicable(INavigationScope scope, GotoContext gotoContext, IIdentifierMatcher matcher);
    protected virtual bool IsAvailable(IPsiSourceFile sourceFile);
    private static void ProcessAspect(bool isSecondary, IIdentifierMatcher matcher, Collection`1<MatchingInfo> result, FileMemberAspectsMap<TLanguageType> fileMemberAspectsMap, IGotoFileMemberAspect primaryAspect);
    private IEnumerable`1<IGotoFileMemberAspect> GetFileMemberAspects(IPsiSourceFile sourceFile);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.NonCachedFileMemberProvider`1/<GetSourceFilesMembers>d__6")]
private IEnumerable`1<IGotoFileMemberAspect> GetSourceFilesMembers(IEnumerable`1<IPsiSourceFile> sourceFiles);
    private static void BuildElements(IEnumerable`1<CodeStructureElement> elements, ICollection`1<IGotoFileMemberAspect> collector);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.ReSharperCacheScopeProvider : object {
    public virtual LibrarySymbolScope GetCacheScope(INavigationScope scope);
}
public enum JetBrains.ReSharper.Feature.Services.Navigation.Goto.Scope : Enum {
    public int value__;
    public static Scope Solution;
    public static Scope Libraries;
    public static Scope SolutionAndLibraries;
}
public class JetBrains.ReSharper.Feature.Services.Navigation.GotoCodeBlock.Actions.GotoCodeBlockActionBase : object {
    private bool myIsMoveToStart;
    private bool myIsWithSelection;
    public GotoCodeBlockActionBase(bool isMoveToStart, bool isWithSelection);
    public virtual bool ShouldFallBack(IDataContext context);
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private bool IsAvailable(IDataContext context);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
[ActionAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "MoveCaretToCodeBlockEndActionText")]
public class JetBrains.ReSharper.Feature.Services.Navigation.GotoCodeBlock.Actions.GotoCodeBlockEndAction : GotoCodeBlockActionBase {
}
[ActionAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "MoveCaretToCodeBlockEndWithSelectionActionText")]
public class JetBrains.ReSharper.Feature.Services.Navigation.GotoCodeBlock.Actions.GotoCodeBlockEndWithSelectionAction : GotoCodeBlockActionBase {
}
[ActionAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "MoveCaretToCodeBlockStartActionText")]
public class JetBrains.ReSharper.Feature.Services.Navigation.GotoCodeBlock.Actions.GotoCodeBlockStartAction : GotoCodeBlockActionBase {
}
[ActionAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "MoveCaretToCodeBlockStartWithSelectionActionText")]
public class JetBrains.ReSharper.Feature.Services.Navigation.GotoCodeBlock.Actions.GotoCodeBlockStartWithSelectionAction : GotoCodeBlockActionBase {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.GotoCodeBlock.ICodeBlockProvider {
    [PureAttribute]
public abstract virtual DocumentOffset TryGetCodeBlockStart(IFile file, DocumentOffset caretOffset);
    [PureAttribute]
public abstract virtual DocumentOffset TryGetCodeBlockEnd(IFile file, DocumentOffset caretOffset);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.HiddenAssemblyReferencesManager : object {
    public static string System;
    public static string PresentationFramework;
    public static string SystemXml;
    public static string SystemWindows;
    public static string mscorlib;
    private ISolution mySolution;
    public HiddenAssemblyReferencesManager(ISolution solution);
    public static HiddenAssemblyReferencesManager GetInstance(ISolution solution);
    public IEnumerable`1<IProjectToModuleReference> GetHiddenReferencedModules(IProject project);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.IAccumulateFilterOutStrategy {
    public abstract virtual Nullable`1<bool> FilterOut(ICollection`1<IOccurrence> previousResults, IOccurrence itemToFilter);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ICompiledNavigationTarget {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.IConflictDeclarationsContextSearch {
    public abstract virtual IList`1<INavigationPoint> SearchTargets(IDataContext dataContext);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.IContextSearch {
    public abstract virtual bool IsAvailable(IDataContext dataContext);
    public abstract virtual bool IsContextApplicable(IDataContext dataContext);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.IDeclaredElementNavigationPoint {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.IDeclaredElementNavigationService {
    public abstract virtual void Navigate(IDeclaredElement declaredElement, PopupWindowContextSource windowContext, bool transferFocus, Nullable`1<OccurrencePresentationOptions> options, TabOptions tabOptions);
    public abstract virtual ICollection`1<IOccurrence> GetDeclarations(IDeclaredElement declaredElement, Func`1<bool> checkCancelled);
    public abstract virtual void ExecuteCandidates(IEnumerable`1<IDeclaredElement> candidates, PopupWindowContextSource source, bool transferFocus);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.IDeclaredElementNavigator {
    public abstract virtual bool IsApplicable(IDeclaredElement declaredElement);
    public abstract virtual void Navigate(IDeclaredElement declaredElement, PopupWindowContextSource windowContext, bool transferFocus, SolutionFeaturePartsContainer container, Nullable`1<OccurrencePresentationOptions> options, TabOptions tabOptions);
    public abstract virtual ICollection`1<IOccurrence> GetDeclarations(IDeclaredElement declaredElement, Func`1<bool> checkCancelled);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.IDeclaredElementPeeker {
    public bool IsAvailable { get; }
    public abstract virtual bool get_IsAvailable();
    public abstract virtual void Peek(IDeclaredElement declaredElement, ITextControl textControl);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.IFileLocationsBlacklist {
    public abstract virtual void Add(VirtualFileSystemPath filePath);
    public abstract virtual void Remove(VirtualFileSystemPath filePath);
    public abstract virtual bool Contains(VirtualFileSystemPath filePath);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.IHiddenAssemblyReferenceProvider {
    public abstract virtual bool IsAvailable(IProject project);
    public abstract virtual IEnumerable`1<IProjectToModuleReference> GetHiddenReferencedModules(IProject project);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.INavigationFilter {
    public abstract virtual IEnumerable`1<IOccurrence> FilterOut(IEnumerable`1<IOccurrence> occurrences, NavigationContext context);
    public abstract virtual bool FilterOut(ICollection`1<IOccurrence> previousResults, IOccurrence itemToFilter);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.INavigationFilterFactory {
    public abstract virtual bool IsApplicable(CallingFeatureContext context);
    public abstract virtual INavigationFilter CreateFilter(NavigationContext context);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.INavigationPoint {
    public abstract virtual Task`1<bool> Navigate(NavigationOptions options);
    public abstract virtual IconId GetPresentationImage();
    [NotNullAttribute]
public abstract virtual RichText GetPresentationText();
    [CanBeNullAttribute]
public abstract virtual RichText GetSecondaryPresentationText();
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.IOccurrenceSorter {
    [CanBeNullAttribute]
public abstract virtual IComparer`1<IOccurrence> TryCreateComparer(SearchRequest request);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.IProjectFileNavigationPoint {
    public IProjectFile ProjectFile { get; }
    public abstract virtual IProjectFile get_ProjectFile();
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.IRelatedFilesProvider {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<RelatedFileOccurence> GetRelatedFiles(IProjectFile projectFile);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ISweaFindUsages {
    [CanBeNullAttribute]
public abstract virtual Predicate`1<IPsiSourceFile> GetChecker(IDeclaredElement element);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ITextNavigationPoint {
    public TextRange TextRange { get; }
    public abstract virtual TextRange get_TextRange();
    [NotNullAttribute]
[ItemCanBeNullAttribute]
public abstract virtual Task`1<ITextControl> OpenTextControlAsync(NavigationOptions options);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.LocalFileTextNavigationPoint : TextNavigationPoint {
    private ProjectFileTextRange myProjectFileTextRange;
    private TextRange myTextRange;
    [NonNegativeValueAttribute]
private int myMaxLength;
    private bool myShowFileName;
    [NotNullAttribute]
private IconId myIconId;
    private LocalFileTextNavigationPoint(ProjectFileTextRange target);
    public LocalFileTextNavigationPoint(IProjectFile projectFile, TextRange textRange, int maxPreviewStringLength, bool showFileName, IconId iconId);
    public virtual RichText GetPresentationText();
    public virtual RichText GetSecondaryPresentationText();
    public virtual IconId GetPresentationImage();
    private static string TrimAllWhitespace(string input);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.NavigationContext : UserDataHolder {
    private CallingFeatureContext myFeatureContext;
    [CanBeNullAttribute]
private TargetFrameworkId myPlatformId;
    [CompilerGeneratedAttribute]
private SearchRequest <SearchRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private GotoByNameController <GotoController>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IOccurrence> <AllResults>k__BackingField;
    [CanBeNullAttribute]
public SearchRequest SearchRequest { get; public set; }
    [CanBeNullAttribute]
public GotoByNameController GotoController { get; public set; }
    [NotNullAttribute]
public CallingFeatureContext CallingFeatureContext { get; }
    [CanBeNullAttribute]
public ICollection`1<IOccurrence> AllResults { get; public set; }
    [CanBeNullAttribute]
public TargetFrameworkId PlatformId { get; }
    public NavigationContext(CallingFeatureContext featureContext, TargetFrameworkId platformId, SearchRequest searchRequest, GotoByNameController gotoController, ICollection`1<IOccurrence> allResults);
    [CompilerGeneratedAttribute]
public SearchRequest get_SearchRequest();
    [CompilerGeneratedAttribute]
public void set_SearchRequest(SearchRequest value);
    [CompilerGeneratedAttribute]
public GotoByNameController get_GotoController();
    [CompilerGeneratedAttribute]
public void set_GotoController(GotoByNameController value);
    public CallingFeatureContext get_CallingFeatureContext();
    [CompilerGeneratedAttribute]
public ICollection`1<IOccurrence> get_AllResults();
    [CompilerGeneratedAttribute]
public void set_AllResults(ICollection`1<IOccurrence> value);
    public TargetFrameworkId get_PlatformId();
    [NotNullAttribute]
public static NavigationContext ContextFromPlatformId(TargetFrameworkId platformId);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Navigation.NavigationExtensions.CommonElementsNavigationExtensions : object {
    private static ILogger ourLog;
    private static CommonElementsNavigationExtensions();
    [ExtensionAttribute]
public static bool Navigate(IProjectModelElement projectModelElement, PopupWindowContextSource source, bool transferFocus);
    [ExtensionAttribute]
public static bool NavigateToSolutionExplorer(IProjectItem projectItem, PopupWindowContextSource source, bool transferFocus);
    [ExtensionAttribute]
public static bool NavigateToExternalSources(ICompiledElement compiledElement, PopupWindowContextSource source, bool transferFocus);
    [ExtensionAttribute]
public static bool NavigateToExternalSources(CompiledElementNavigationInfo compiledElementNavigationInfo, PopupWindowContextSource source, bool transferFocus);
    [ExtensionAttribute]
public static bool NavigateToVsObjectBrowser(ICompiledElement compiledElement, PopupWindowContextSource source, bool transferFocus);
    [ExtensionAttribute]
public static bool Navigate(AssemblyAttributeNavigationData assemblyAttributeNavigationData, PopupWindowContextSource source, bool transferFocus);
    [ExtensionAttribute]
public static bool Navigate(ProjectFileTextRange projectFileTextRange, PopupWindowContextSource source, bool transferFocus, TabOptions tabOptions);
    [ExtensionAttribute]
public static bool NavigateToNode(ITreeNode element, bool activate);
    [ExtensionAttribute]
public static bool NavigateToTreeNode(ITreeNode element, bool activate, PopupWindowContextSource source);
    [ExtensionAttribute]
public static IEnumerable`1<INavigationPoint> GetNavigationPoints(ITreeNode node);
    [ExtensionAttribute]
public static IEnumerable`1<INavigationPoint> GetNavigationPoints(ICompiledElement compiledElement);
    [ExtensionAttribute]
public static bool NavigateToReference(IReference reference, bool activate, PopupWindowContextSource source);
    [ExtensionAttribute]
[ObsoleteAttribute("Use overload with psi source file")]
public static bool Navigate(DocumentRange documentRange, ISolution solution, bool activate, PopupWindowContextSource source, TabOptions tabOptions);
    [ExtensionAttribute]
public static bool Navigate(IPsiSourceFile sourceFile, TextRange textRange, bool activate, TabOptions tabOptions, PopupWindowContextSource source);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Navigation.NavigationFilteringService : object {
    private SolutionFeaturePartsContainer mySolutionFeaturePartsContainer;
    public NavigationFilteringService(SolutionFeaturePartsContainer solutionFeaturePartsContainer);
    [NotNullAttribute]
public IEnumerable`1<IOccurrence> FilterOut(IEnumerable`1<IOccurrence> occurrences, NavigationContext navigationContext);
    [NotNullAttribute]
public ProviderBasedOccurrenceFilter GetAsyncFilter(NavigationContext navigationContext);
    [NotNullAttribute]
private List`1<INavigationFilter> GetAllFilters(NavigationContext context);
}
public abstract class JetBrains.ReSharper.Feature.Services.Navigation.NavigationManager : object {
    private IMainWindowPopupWindowContext myMainWindowPopupWindowContext;
    protected NavigationManager(DocumentManager documentManager, IMainWindowPopupWindowContext mainWindowPopupWindowContext);
    public static NavigationManager GetInstance(ISolution solution);
    public bool Navigate(TNavigationData target, NavigationOptions options);
    public bool Navigate(IEnumerable`1<TNavigationData> targets, NavigationOptions options);
    public bool Navigate(TNavigationData target, bool activate);
    public abstract virtual bool Navigate(INavigationPoint point, NavigationOptions options);
    public abstract virtual bool Navigate(IEnumerable`1<INavigationPoint> points, NavigationOptions options);
    public abstract virtual IEnumerable`1<INavigationPoint> GetNavigationPoints(TNavigationData target);
    private NavigationOptions GetNavigationOptions(bool activate, TabOptions tabOptions);
    [ObsoleteAttribute("Use extension method from JetBrains.ReSharper.Feature.Services.Navigation.Navigation.NavigationExtensions.CommonElementsNavigationExtensions class instead")]
public static bool NavigateToTreeNode(ITreeNode element, bool activate);
    [ObsoleteAttribute("Use extension method from JetBrains.ReSharper.Feature.Services.Navigation.Navigation.DeclaredElementNavigationExtensions class instead")]
public static bool NavigateToDeclaredElement(IDeclaredElement declaredElement, bool activate);
    [ObsoleteAttribute("Use extension method from JetBrains.ReSharper.Feature.Services.Navigation.Navigation.NavigationExtensions.CommonElementsNavigationExtensions class instead")]
public static bool NavigateToReference(IReference reference, bool activate);
    public abstract virtual bool HasBackwardNavigation();
    public abstract virtual bool HasForwardNavigation();
    public abstract virtual bool NavigateBackward();
    public abstract virtual bool NavigateForward();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Navigation.NavigationManagerImpl : NavigationManager {
    private static int HistoryLimit;
    private IList`1<Tuple`2<IRangeMarker, VirtualFileSystemPath>> myHistory;
    private Lifetime myLifetime;
    private IShellLocks myShellLocks;
    private DocumentManager myDocumentManager;
    private ITextControlManager myTextControlManager;
    private IEditorManager myEditorManager;
    private CustomHighlightingManager myCustomHighlightingManager;
    private SolutionFeaturePartsContainer myFeaturePartsContainer;
    private IFileLocationsBlacklist myFileLocationsBlacklist;
    private ILogger myLogger;
    private int myNextIndex;
    public NavigationManagerImpl(Lifetime lifetime, IShellLocks shellLocks, DocumentManager documentManager, ITextControlManager textControlManager, IEditorManager editorManager, CustomHighlightingManager customHighlightingManager, IMainWindowPopupWindowContext mainWindowPopupWindowContext, SolutionFeaturePartsContainer featurePartsContainer, IFileLocationsBlacklist fileLocationsBlacklist, ILogger logger);
    public virtual bool Navigate(INavigationPoint point, NavigationOptions options);
    public virtual bool Navigate(IEnumerable`1<INavigationPoint> points, NavigationOptions options);
    protected virtual bool PerformNavigate(INavigationPoint point, NavigationOptions options);
    private void PushHistory();
    private ProjectFileTextRange GetCurrentPosition();
    public virtual bool HasBackwardNavigation();
    public virtual bool HasForwardNavigation();
    public virtual bool NavigateBackward();
    private bool NavigateToInvalidProjectItem(VirtualFileSystemPath location, ProjectFileTextRange range, int currentIndex);
    public virtual bool NavigateForward();
    private bool GetBackwardNavigation(ProjectFileTextRange& fileTextRange, Int32& currentIndex, VirtualFileSystemPath& location);
    private bool GetForwardNavigation(ProjectFileTextRange& fileTextRange, Int32& currentIndex, VirtualFileSystemPath& location);
    protected bool Highlight(ICollection`1<INavigationPoint> points, NavigationOptions options);
    protected virtual bool ShowMenu(IEnumerable`1<INavigationPoint> points, NavigationOptions options);
    public virtual IEnumerable`1<INavigationPoint> GetNavigationPoints(TNavigationData target);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.NavigationOptions : object {
    [CompilerGeneratedAttribute]
private bool <Activate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Highlight>k__BackingField;
    [CompilerGeneratedAttribute]
private PopupWindowContextSource <PopupWindowContextSource>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Caption>k__BackingField;
    [CompilerGeneratedAttribute]
private FileView <FileView>k__BackingField;
    [CompilerGeneratedAttribute]
private TabOptions <TabOptions>k__BackingField;
    public bool Activate { get; private set; }
    public bool Highlight { get; private set; }
    [NotNullAttribute]
public PopupWindowContextSource PopupWindowContextSource { get; }
    public RichText Caption { get; }
    public FileView FileView { get; private set; }
    public TabOptions TabOptions { get; }
    private NavigationOptions(RichText caption, PopupWindowContextSource popupWindowContext, TabOptions tabOptions);
    public static NavigationOptions FromWindowContext(PopupWindowContextSource windowContext, RichText caption, bool activate, FileView fileView, TabOptions tabOptions);
    public static NavigationOptions FromWindowContext(PopupWindowContextSource windowContext, RichText caption, bool activate, TabOptions tabOptions);
    public static NavigationOptions FromDataContext(IDataContext dataContext, RichText caption);
    public static NavigationOptions FromWindowContext(PopupWindowContextSource windowContext, RichText caption);
    public static NavigationOptions FromDataContext(IDataContext dataContext, RichText caption, bool activate);
    [CompilerGeneratedAttribute]
public bool get_Activate();
    [CompilerGeneratedAttribute]
private void set_Activate(bool value);
    [CompilerGeneratedAttribute]
public bool get_Highlight();
    [CompilerGeneratedAttribute]
private void set_Highlight(bool value);
    [CompilerGeneratedAttribute]
public PopupWindowContextSource get_PopupWindowContextSource();
    [CompilerGeneratedAttribute]
public RichText get_Caption();
    [CompilerGeneratedAttribute]
public FileView get_FileView();
    [CompilerGeneratedAttribute]
private void set_FileView(FileView value);
    [CompilerGeneratedAttribute]
public TabOptions get_TabOptions();
    public static NavigationOptions Create(string caption, PopupWindowContextSource windowContext);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.NavigationProviders.ExternalSourceNavigationData : object {
    private VirtualFileSystemPath myFileSystemPath;
    private TextRange myTextRange;
    public TextRange TextRange { get; }
    public VirtualFileSystemPath FileSystemPath { get; }
    public ExternalSourceNavigationData(VirtualFileSystemPath fileSystemPath, TextRange textRange);
    public TextRange get_TextRange();
    public VirtualFileSystemPath get_FileSystemPath();
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.NavigationProviders.IAssemblyAttributeNavigationProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.NavigationProviders.IDefaultCompiledElementNavigationProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.NavigationProviders.IExternalSourceNavigationProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.NavigationProviders.INavigationProvider`1 {
    public abstract virtual bool IsApplicable(TNavigationData data);
    public abstract virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(TNavigationData target);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.NavigationProviders.IProjectFileTextRangeNavigationProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.NavigationProviders.IProjectModelElementNavigationProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.NavigationProviders.IPsiSourceFileRangeNavigationProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.NavigationProviders.ISolutionExplorerNavigationProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.NavigationProviders.IVsObjectBrowserNavigationProvider {
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.NavigationProviders.ProjectFileTextRangeNavigationProvider : object {
    public virtual bool IsApplicable(ProjectFileTextRange data);
    public virtual IEnumerable`1<INavigationPoint> CreateNavigationPoints(ProjectFileTextRange navigationRange);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Navigation.NavigationSorterService : object {
    private SolutionFeaturePartsContainer myPartsContainer;
    public NavigationSorterService(SolutionFeaturePartsContainer partsContainer);
    public Comparer`1<IOccurrence> CreateComparer(SearchRequest searchRequest);
    private static double GetPriority(IOccurrenceSorter s);
}
[ZoneDefinitionAttribute]
[ZoneDefinitionConfigurableFeatureAttribute("Navigation and Search", "All features related to navigation, search, hierarchies, diagramming, and decompiler", "False")]
[ZoneLicenseAttribute("3145720492160894540861205022590510994015486567574670580789")]
public class JetBrains.ReSharper.Feature.Services.Navigation.NavigationZone : object {
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.Navigation.IOccurrenceSorter")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.Feature.Services.Navigation.OccurrenceSorterAttribute : SolutionFeaturePartAttribute {
    [CompilerGeneratedAttribute]
private double <Priority>k__BackingField;
    public double Priority { get; public set; }
    public OccurrenceSorterAttribute(Instantiation instantiation);
    [CompilerGeneratedAttribute]
public double get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(double value);
}
public enum JetBrains.ReSharper.Feature.Services.Navigation.Options.DebuggerNavigationMode : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("According to Visual Studio option")]
public static DebuggerNavigationMode VisualStudio;
    [LocalizedDescriptionAttribute("Disabled")]
public static DebuggerNavigationMode Disabled;
    [LocalizedDescriptionAttribute("Local variables")]
public static DebuggerNavigationMode LocalVariables;
    [LocalizedDescriptionAttribute("Local variables and fields")]
public static DebuggerNavigationMode LocalVariablesFields;
    [LocalizedDescriptionAttribute("Local variables, fields, and properties")]
public static DebuggerNavigationMode All;
}
public enum JetBrains.ReSharper.Feature.Services.Navigation.Options.FindUsagesSweaMode : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("Assert result from Find Usages was suggested by SWA to search in.")]
public static FindUsagesSweaMode Assert;
    [LocalizedDescriptionAttribute("Disable Find Usages optimization")]
public static FindUsagesSweaMode Disabled;
    [LocalizedDescriptionAttribute("Search only in files from SWA")]
public static FindUsagesSweaMode Enabled;
}
public enum JetBrains.ReSharper.Feature.Services.Navigation.Options.GenericNavigationBehaviour : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("Show disambiguation popup")]
public static GenericNavigationBehaviour Disambig;
    [LocalizedDescriptionAttribute("Always search for open generic types")]
public static GenericNavigationBehaviour UseCommonCandidate;
    [LocalizedDescriptionAttribute("Always search for concrete generic type")]
public static GenericNavigationBehaviour UseSpecificCandidate;
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Options.GenericNavigationBehaviourSettingsOwner : object {
    private IProperty`1<GenericNavigationBehaviour> myGenericFindUsagesBehaviour;
    public GenericNavigationBehaviourSettingsOwner(Lifetime lifetime, ISettingsStore settingsStore);
    public GenericNavigationBehaviour GetGenericFindUsagesBehaviour();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Options.IgnoredElementsSearchProvider : object {
    private ISolution mySolution;
    private SettingsIndexedEntry mySettingsEntry;
    private SettingsIndexedEntry myMaskSettingsEntry;
    private IContextBoundSettingsStoreLive myContext;
    private JetHashSet`1<IProjectModelElement> myElementsToSkip;
    private JetHashSet`1<PathWildcard> myWildcards;
    public bool CanSkipAnything { get; }
    public IgnoredElementsSearchProvider(Lifetime lifetime, ISettingsStore settingsStore, ISolution solution, ISolutionLoadTasksScheduler solutionLoadTasks);
    public bool get_CanSkipAnything();
    public bool SkipProjectModelElement(IProjectModelElement element);
    public bool SkipOccurrence(IOccurrence occurrence);
    public bool SkipPath(VirtualFileSystemPath path);
    private void UpdateElementsToSkipHandler(SettingsStoreChangeArgs obj);
    private void Update();
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0();
}
public static class JetBrains.ReSharper.Feature.Services.Navigation.Options.SearchAndNavigationOptions : object {
    public static Expression`1<Func`2<SearchAndNavigationSettings, bool>> GotoSingleUsageImmediatelyExpression;
    public static Expression`1<Func`2<SearchAndNavigationSettings, bool>> GotoSingleHierarchyItemImmediatelyExpression;
    public static Expression`1<Func`2<SearchAndNavigationSettings, bool>> NavigateByControlClickExpression;
    public static Expression`1<Func`2<SearchAndNavigationSettings, bool>> NavigateByMiddleButtonExpression;
    public static Expression`1<Func`2<SearchAndNavigationSettings, bool>> NavigateByControlMiddleButtonExpression;
    public static Expression`1<Func`2<SearchAndNavigationSettings, bool>> NavigateByControlShiftClickExpression;
    public static Expression`1<Func`2<SearchAndNavigationSettings, bool>> NavigateByControlAltClickExpression;
    public static Expression`1<Func`2<SearchAndNavigationSettings, bool>> NavigateByControlAltMiddleClickExpression;
    public static Expression`1<Func`2<SearchAndNavigationSettings, bool>> AutoExpandResultsExpression;
    public static Expression`1<Func`2<SearchAndNavigationSettings, bool>> MergeOccurrencesExpression;
    public static Expression`1<Func`2<SearchAndNavigationSettings, bool>> ShowIgnoredOccurrencesExpression;
    public static Expression`1<Func`2<SearchAndNavigationSettings, int>> DefaultOccurrencesGroupingIndexExpression;
    public static Expression`1<Func`2<SearchAndNavigationSettings, bool>> EnableKindGroupingExpression;
    public static Expression`1<Func`2<SearchAndNavigationSettings, bool>> EnableGotoEverything;
    public static Expression`1<Func`2<SearchAndNavigationSettings, bool>> OpenPreviewTabForSelectedItemInFindResults;
    public static Expression`1<Func`2<SearchAndNavigationSettings, GenericNavigationBehaviour>> GenericFindUsagesBehaviour;
    public static Expression`1<Func`2<SearchAndNavigationSettings, SmartGotoDeclarationMode>> SmartGotoDeclarationPreference;
    public static Expression`1<Func`2<SearchAndNavigationSettings, FindUsagesSweaMode>> UseSwea;
    public static Expression`1<Func`2<SearchAndNavigationSettings, bool>> SaveRecentFilter;
    public static Expression`1<Func`2<SearchAndNavigationSettings, bool>> SaveExtendedSearch;
    public static Expression`1<Func`2<SearchAndNavigationSettings, bool>> MergeLocationsInRecentEdits;
    public static Expression`1<Func`2<SearchAndNavigationSettings, bool>> UsePredefinedGroupings;
    public static Expression`1<Func`2<SearchAndNavigationSettings, bool>> GotoTextInGotoEverything;
    public static Expression`1<Func`2<SearchAndNavigationSettings, DebuggerNavigationMode>> DebuggerMode;
    public static Expression`1<Func`2<SearchAndNavigationSettings, bool>> UseJpmGroupingsAndKind;
    public static Expression`1<Func`2<SearchAndNavigationSettings, int>> MaxLiveTabCount;
    public static Expression`1<Func`2<SearchAndNavigationSettings, int>> CachesCheckTime;
    public static Expression`1<Func`2<SearchAndNavigationSettings, int>> RecentFilesCount;
    public static Expression`1<Func`2<SearchAndNavigationSettings, int>> RecentEditsCount;
    public static Expression`1<Func`2<SearchAndNavigationSettings, IIndexedEntry`2<string, bool>>> FileAndDirsToSkip;
    public static Expression`1<Func`2<SearchAndNavigationSettings, IIndexedEntry`2<string, bool>>> FileMasksToSkip;
    public static Expression`1<Func`2<SearchAndNavigationSettings, IIndexedEntry`2<string, int>>> DefaultOccurrencesGroupingIndicesExpression;
    public static Expression`1<Func`2<SearchAndNavigationSettings, bool>> FuzzySearchInGotoText;
    public static Expression`1<Func`2<SearchAndNavigationSettings, bool>> UseReSharperMouseBackForwardNavigation;
    private static SearchAndNavigationOptions();
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "SearchAndNavigationSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Options.SearchAndNavigationSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherASingleItemInUsageListsShouldBeExecutedImmediatelySettingDescription")]
public bool GotoSingleUsageImmediately;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherASingleItemInHierarchyListsShouldBeExecutedImmediatelySettingDescription")]
public bool GotoSingleHierarchyItemImmediately;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherNavigationIsInvokedWithCtrlClickSettingDescription")]
public bool NavigateByControlClick;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherNavigationIsInvokedWithMiddleMouseButtonSettingDescription")]
public bool NavigateByMiddleButton;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherNavigationIsInvokedWithCtrlMiddleMouseButtonClickSettingDescription")]
public bool NavigateByControlMiddleButton;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherNavigationIsInvokedWithCtrlShiftClickSettingDescription")]
public bool NavigateByControlShiftClick;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherNavigationIsInvokedWithCtrlAltClickSettingDescription")]
public bool NavigateByControlAltClick;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherNavigationIsInvokedWithCtrlAltMiddleMouseButtonClickSettingDescription")]
public bool NavigateByControlAltMiddleClick;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherSearchResultsTreesAndSimilarTreesShouldBeExpandedByDefaultSettingDescription")]
public bool AutoExpandResults;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToMergeOccurrencesOnASingleLineSettingDescription")]
public bool MergeOccurrences;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToHideOrGrayOutIgnoredUsagesInFindUsagesValueTrackingEtcSettingDescription")]
public bool ShowIgnoredOccurrences;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherEnableGroupingByKindSettingDescription")]
public bool EnableKindGrouping;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "DefaultGroupingForOccurrencesSettingDescription")]
public int DefaultOccurrencesGroupingIndex;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "EnableSearchEverywhereSettingDescription")]
public bool EnableGotoEverything;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "IntegrateGoToTextIntoSearchEverywhereSettingDescription")]
public bool GotoTextInGotoEverything;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "RememberLastSearchSettingDescription")]
public bool SaveRecentFilter;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "RememberExtendedSearchPreferencesSettingDescription")]
public bool SaveExtendedSearch;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "OpenPreviewTabForSelectedItemInFindResultsWindowSettingDescription")]
public bool OpenPreviewTabForSelectedItemInFindResults;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FindGenericTypeUsagesBehaviourSettingDescription")]
public GenericNavigationBehaviour GenericFindUsagesBehaviour;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ChooseWhatHappensWhenYouInvokeTheGoToDeclarationCommandShortcutOrDoubleClickOnASymbolDeclarationSettingDescription")]
public SmartGotoDeclarationMode SmartGotoDeclarationPreference;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "EnableOrDisableSearchDomainReduceBySweaNeverShowThisOptionInUISettingDescription")]
public FindUsagesSweaMode UseSwea;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "UsePredefinedGroupingRulesSettingDescription")]
public bool UsePredefinedGroupings;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "UseNewKindGroupingAndFiltersSettingDescription")]
public bool UseJpmGroupingsAndKind;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "MergeItemsInRecentEditsSettingDescription")]
public bool MergeLocationsInRecentEdits;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "MaxLiveTabCountSettingDescription")]
public int MaxLiveTabCount;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "RunTrigramConsistencyProbabilityCheckerEveryNMsWhenInternalZoneIsActivatedSettingDescription")]
public int CachesCheckTime;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "RecentEditsCountSettingDescription")]
public int RecentEditsCount;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "RecentFilesCountSettingDescription")]
public int RecentFilesCount;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilesAndDirectoriesToSkipSettingDescription")]
public IIndexedEntry`2<string, bool> FileAndDirsToSkip;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilesAndDirectoriesMasksToSkipSettingDescription")]
public IIndexedEntry`2<string, bool> FileMasksToSkip;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "DefaultGroupingIndicesForOccurrencesSettingDescription")]
public IIndexedEntry`2<string, int> DefaultOccurrencesGroupingIndices;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FuzzyResultsInGoToTextSettingDescription")]
public bool FuzzySearchInGotoText;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "NavigateToActualTypeDuringDebuggingSettingDescription")]
public DebuggerNavigationMode DebuggerMode;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "UseReSharperNavigationHistoryForMouseSettingDescription")]
public bool UseReSharperMouseBackForwardNavigation;
}
public enum JetBrains.ReSharper.Feature.Services.Navigation.Options.SmartGotoDeclarationMode : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("Show 'Navigate To' menu")]
public static SmartGotoDeclarationMode NavigateTo;
    [LocalizedDescriptionAttribute("Show 'Usages of Symbol' popup")]
public static SmartGotoDeclarationMode GotoUsages;
    [LocalizedDescriptionAttribute("Iterate usages")]
public static SmartGotoDeclarationMode Revolver;
    [LocalizedDescriptionAttribute("Do nothing")]
public static SmartGotoDeclarationMode Nothing;
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Navigation.PathDeclaredElementNavigator : DefaultDeclaredElementNavigator {
    private FileSystemPathNavigator myFileSystemPathNavigator;
    public PathDeclaredElementNavigator(ISolution solution, IFeaturePartsContainer shellFeaturePartsContainer, ISettingsStore settingsStore, FileSystemPathNavigator fileSystemPathNavigator);
    public virtual bool IsApplicable(IDeclaredElement declaredElement);
    public virtual void Navigate(IDeclaredElement declaredElement, PopupWindowContextSource windowContext, bool transferFocus, SolutionFeaturePartsContainer container, Nullable`1<OccurrencePresentationOptions> options, TabOptions tabOptions);
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Navigation.PdbSourceFolderSubstitutionService : object {
    public virtual IEnumerable`1<VirtualFileSystemPath> GetFilePathsWithFolderSubstitution(VirtualFileSystemPath fsp);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ProjectFileNavigationPoint : object {
    private IProjectFile myTarget;
    public IProjectFile ProjectFile { get; }
    public bool IsValid { get; }
    public ProjectFileNavigationPoint(IProjectFile projectFile);
    public sealed virtual IProjectFile get_ProjectFile();
    public bool get_IsValid();
    public sealed virtual Task`1<bool> Navigate(NavigationOptions options);
    public sealed virtual IconId GetPresentationImage();
    public sealed virtual RichText GetPresentationText();
    public sealed virtual RichText GetSecondaryPresentationText();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ProviderBasedOccurrenceFilter : object {
    private List`1<INavigationFilter> myAllFilters;
    public ProviderBasedOccurrenceFilter(List`1<INavigationFilter> allFilters);
    public static ProviderBasedOccurrenceFilter CreateFilter(ISolution solution, NavigationContext navigationContext);
    public bool FilterOut(ICollection`1<IOccurrence> previousResults, IOccurrence newItem);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.PsiSourceFileRange : object {
    [CompilerGeneratedAttribute]
private IPsiSourceFile <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private TextRange <TextRange>k__BackingField;
    public IPsiSourceFile SourceFile { get; }
    public TextRange TextRange { get; }
    public PsiSourceFileRange(IPsiSourceFile sourceFile, TextRange textRange);
    [CompilerGeneratedAttribute]
public IPsiSourceFile get_SourceFile();
    [CompilerGeneratedAttribute]
public TextRange get_TextRange();
    public bool IsValid();
    [ConditionalAttribute("JET_MODE_ASSERT")]
public void AssertIsValid();
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.DeclaredElementsReferencedCodeContextSearch : MultipleDeclaredElementsContextSearchBase`1<SearchReferencedCodeRequest> {
    protected virtual SearchReferencedCodeRequest CreateSearchRequest(IDataContext context, ICollection`1<IDeclaredElement> elements, ICollection`1<IDeclaredElement> initialTargets);
    protected virtual IEnumerable`1<IDeclaredElement> GetElementCandidates(IDataContext context, ReferencePreferenceKind kind, bool updateOnly);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.DefaultSearchReferenceVisitor : object {
    public sealed virtual void Visit(ITreeNode element, Action`1<ICollection`1<IReference>> action);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.FindResultReferencedCode : FindResult {
    private IEnumerable`1<IPsiModule> myPsiModules;
    private IReference myReference;
    private ReferencedCodeKind myReferencedCodeKind;
    private IDeclaredElement myTargetElement;
    public ReferencedCodeKind Kind { get; }
    [NotNullAttribute]
public IEnumerable`1<IPsiModule> PsiModules { get; }
    [CanBeNullAttribute]
public IDeclaredElement TargetElement { get; }
    [CanBeNullAttribute]
public IReference Reference { get; }
    public FindResultReferencedCode(IReference reference, IDeclaredElement target, ReferencedCodeKind referencedCodeKind);
    public FindResultReferencedCode(IReference reference, IEnumerable`1<IPsiModule> psiModules, ReferencedCodeKind referencedCodeKind);
    public ReferencedCodeKind get_Kind();
    public IEnumerable`1<IPsiModule> get_PsiModules();
    public IDeclaredElement get_TargetElement();
    public IReference get_Reference();
    public static IEnumerable`1<IPsiModule> GetModules(IDeclaredElement target);
    [CanBeNullAttribute]
public static IPsiModule GetModule(IDeclaredElement target);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.IReferencedCodeContextSearch {
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.IReferencedCodeKindHolder {
    public ReferencedCodeKind Kind { get; }
    public IEnumerable`1<IPsiModule> ReferencedPsiModules { get; }
    public abstract virtual ReferencedCodeKind get_Kind();
    public abstract virtual IEnumerable`1<IPsiModule> get_ReferencedPsiModules();
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.IReferencedCodeSearchHelper {
    public abstract virtual bool RemoveNamespaceImport(ITreeNode importNamespaceNode);
    public abstract virtual ICollection`1<NamespaceImportData> GetNamespaceImportsList(IFile file);
    public abstract virtual ICollection`1<Pair`2<IReference, IDeclaredElement>> GetUpdatedTargets(IReference reference, IDeclaredElement target);
    public abstract virtual IDeclaredElement ProvideDeclaredElementsFromResolve(IReference reference, IResolveResult resolveResult);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ISearchReferenceVisitor {
    public abstract virtual void Visit(ITreeNode element, Action`1<ICollection`1<IReference>> action);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.NamespaceImportData : object {
    private IReference myReference;
    private INamespace myTargetNamespace;
    private NamespaceImportKind myNamespaceImportKind;
    private IPsiModule myTargetModule;
    [CanBeNullAttribute]
public IPsiModule TargetModule { get; }
    public IReference Reference { get; }
    [CanBeNullAttribute]
public INamespace TargetNamespace { get; }
    public NamespaceImportKind ImportKind { get; }
    public NamespaceImportData(IReference reference, INamespace targetNamespace, NamespaceImportKind kind);
    public NamespaceImportData(IReference reference, IPsiModule psiModule, NamespaceImportKind kind);
    public IPsiModule get_TargetModule();
    public IReference get_Reference();
    public INamespace get_TargetNamespace();
    public NamespaceImportKind get_ImportKind();
}
public enum JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.NamespaceImportKind : Enum {
    public int value__;
    public static NamespaceImportKind UsedImport;
    public static NamespaceImportKind RedundantImport;
    public static NamespaceImportKind ModuleSpecificImport;
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.NugetPackageNameEqualityComparer : object {
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<INugetPackageName> <Instance>k__BackingField;
    public static IEqualityComparer`1<INugetPackageName> Instance { get; }
    private static NugetPackageNameEqualityComparer();
    public sealed virtual bool Equals(INugetPackageName x, INugetPackageName y);
    public sealed virtual int GetHashCode(INugetPackageName obj);
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<INugetPackageName> get_Instance();
}
[ExtensionAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static class JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.NuGetUtil : object {
    [CanBeNullAttribute]
public static NuGetNupkg TryFindNuPkg(ISolution solution, IModule module);
    [CanBeNullAttribute]
public static NuGetNupkg TryFindNuPkg(ISolution solution, VirtualFileSystemPath nugetFile);
    [CanBeNullAttribute]
public static VirtualFileSystemPath TryFindNuPkgPath(ISolution solution, IModule module);
    [CanBeNullAttribute]
public static VirtualFileSystemPath TryFindNuPkgPath(ISolution solution, VirtualFileSystemPath nugetFile);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static NuGetNupkg FindNugetPackageParent(IModule module);
    [NotNullAttribute]
public static NuGetNupkg ReadNuPkg(ISolution solution, VirtualFileSystemPath nupkgPath);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ProjectReferencesSelection : object {
    private List`1<IProjectToModuleReference> myModuleReference;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<IProject, NugetId>> myPackageReference;
    public int Count { get; }
    public IEnumerable`1<IProjectToModuleReference> ProjectToModulesReferences { get; }
    public IEnumerable`1<IProjectToModuleReference> Modules { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<ValueTuple`2<IProject, NugetId>> PackagesReferences { get; }
    public ProjectReferencesSelection(IEnumerable`1<IProjectToModuleReference> projectReferencesToRemove);
    public int get_Count();
    public IEnumerable`1<IProjectToModuleReference> get_ProjectToModulesReferences();
    public IEnumerable`1<IProjectToModuleReference> get_Modules();
    public IEnumerable`1<ValueTuple`2<IProject, NugetId>> get_PackagesReferences();
    public void Add(IProjectToModuleReference reference);
    public void Add(IProject project, NugetId package);
    public void ReduceModulesToPackages();
    public bool Remove(IProjectToModuleReference item);
    public bool Remove(NugetId item);
    public void RemoveUnresolved();
    public void Reorder(IEnumerable`1<ValueTuple`2<IProject, NugetId>> neworder);
    public bool HasModule(IModule module);
    public virtual string ToString();
    public bool HasPackage(NugetId pkgid);
    public string DumpToString();
}
public enum JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeKind : Enum {
    public int value__;
    public static ReferencedCodeKind ExtensionMethodsRedundantImport;
    public static ReferencedCodeKind RedundantNamespaceImport;
    public static ReferencedCodeKind DirectUsage;
    public static ReferencedCodeKind RelatedUsage;
    public static ReferencedCodeKind ExtensionMethodStrongCall;
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeOccurrence : ReferenceOccurrence {
    private static OccurrenceKind ourHiddenReferencedCodeOccurrence;
    private IEnumerable`1<IPsiModule> myReferencedPsiModules;
    private ReferencedCodeKind myReferencedCodeKind;
    public ReferencedCodeKind Kind { get; }
    protected object MergeKey { get; }
    [NotNullAttribute]
public IEnumerable`1<IPsiModule> ReferencedPsiModules { get; }
    public ReferencedCodeOccurrence(IReference reference, IDeclaredElement referencedElement, IEnumerable`1<IPsiModule> psiModules, ReferencedCodeKind referencedCodeKind, OccurrenceType type);
    private static ReferencedCodeOccurrence();
    public sealed virtual ReferencedCodeKind get_Kind();
    protected virtual object get_MergeKey();
    public sealed virtual IEnumerable`1<IPsiModule> get_ReferencedPsiModules();
    private void CalculateOccurrenceKinds(ISolution solution);
    public virtual string DumpToString();
}
[OccurrenceProviderAttribute]
public class JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeOccurrenceProvider : object {
    public sealed virtual IOccurrence MakeOccurrence(FindResult findResult);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeSearcher : object {
    private IShellLocks myShellLocks;
    private AssemblyPsiModuleFactory myAssemblyPsiModuleFactory;
    private ISolution mySolution;
    private static object ourLockObj;
    private static ILogger ourLog;
    private ProductConfigurations myConfigurations;
    private IAssembly myMicrosoftCSharp;
    private IAssembly mySystemCore;
    private static string ourComImport;
    public ReferencedCodeSearcher(ISolution solution, IShellLocks shellLocks, AssemblyPsiModuleFactory assemblyPsiModuleFactory, ProductConfigurations configurations);
    private static ReferencedCodeSearcher();
    public static ReferencedCodeSearcher GetInstance(ISolution solution);
    public IEnumerable`1<IPsiSourceFile> ConvertToSourceFiles(IEnumerable`1<IProjectItem> projectItems);
    public void ConsumeReferencedCodeUsages(ICollection`1<IPsiSourceFile> targetSourceFiles, IFindResultConsumer`1<T> consumer, IProgressIndicator pi, bool processLibraries, bool useRetargeting, bool includeRelated);
    protected virtual bool ProcessReferences(ICollection`1<IPsiSourceFile> targetPsiSourceFiles, IFile file, IList`1<IReference> fileReferences, IFindResultConsumer`1<T> consumer, OneToSetMap`2<INamespace, IMethod> extensionMethodsCache, ISymbolScope symbolScope, bool processLibraries, bool useRetargeting, bool includeRelated);
    public static void SelectReferences(ICollection`1<IReference> fileReferences, List`1<IReference> selectedReferences, IFile file);
    private ProcessResult ProcessSingleReference(IReference reference, ReferencedCodeSearchingContext`1<T> searchingContext, IReferencedCodeSearchHelper referencedCodeSearchHelper, bool processLibraries);
    private static bool IsDeclaredElementSuitable(IDeclaredElement declaredElement, ReferencedCodeSearchingContext`1<T> searchingContext);
    private void UpdateRelatedElementsCache(ReferencedCodeSearchingContext`1<T> searchingContext, IDeclaredElement declaredElement, IReference reference);
    private bool ProcessNamespaceImports(ReferencedCodeSearchingContext`1<T> searchingContext);
    private static bool FromSameModule(IDeclaredElement de1, IDeclaredElement de2);
    private bool ConsumeNamespaceImportUsage(ReferencedCodeSearchingContext`1<T> searchingContext, NamespaceImportData data, IDeclaredElement relatedElement, IReference reference);
    private void UpdateRelatedElementsCacheForExtensionMethod(ReferencedCodeSearchingContext`1<T> searchingContext, IFunction extensionMethod);
    private bool ProcessDynamicCall(IFindResultConsumer`1<T> consumer, IReference reference);
    private ICollection`1<ITypeElement> FilterTypeElements(IEnumerable`1<ITypeElement> typeElements, ReferencedCodeSearchingContext`1<T> searchingContext);
    [ItemNotNullAttribute]
private IEnumerable`1<ITypeElement> GetRelatedElements(IDeclaredElement declaredElement, IReference reference);
    private bool MatchesMemberOverload(IFunction function, int argumentsCount);
    private void ProcessFunctions(JetHashSet`1<IType> relatedElements, IEnumerable`1<IFunction> functions);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeSearcher/<GetRelatedTypesForTypeElement>d__27")]
private static IEnumerable`1<IType> GetRelatedTypesForTypeElement(ITypeElement typeElement);
    private static void ProcessType(JetHashSet`1<IType> relatedTypes, IType type);
    private static bool IsSuitable(IDeclaredElement referenced, ICollection`1<IPsiSourceFile> closure);
}
internal class JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeSearchingContext`1 : object {
    private IFindResultConsumer`1<T> myConsumer;
    private OneToSetMap`2<INamespace, IMethod> myExtensionMethodsMap;
    private ICollection`1<NamespaceImportData> myImportedNamespaces;
    private bool myIncludeRelated;
    private JetHashSet`1<IDeclaredElement> myNotSuitableElements;
    private ICollection`1<IPsiSourceFile> myTargetTargetPsiSourceFiles;
    private OneToSetMap`2<IDeclaredElement, IDeclaredElement> myRelatedElementsMap;
    private ISymbolScope mySymbolScope;
    private JetHashSet`1<IDeclaredElement> mySuitableElements;
    private bool myUseRetargeting;
    private List`1<Tuple`2<IReference, IMethod>> myExtensionMethodsPerFile;
    private OneToSetMap`2<IType, IType> myRelatedITypesCache;
    private static object ourLock;
    private IFile myFile;
    public JetHashSet`1<IDeclaredElement> SuitableElements { get; }
    public JetHashSet`1<IDeclaredElement> NotSuitableElements { get; }
    public OneToSetMap`2<IDeclaredElement, IDeclaredElement> RelatedElementsMap { get; }
    public ICollection`1<NamespaceImportData> ImportedNamespaces { get; }
    public bool UseRetargeting { get; }
    public bool IncludeRelated { get; }
    public ICollection`1<IPsiSourceFile> TargetPsiSourceFiles { get; }
    public IFindResultConsumer`1<T> Consumer { get; }
    public List`1<Tuple`2<IReference, IMethod>> ExtensionMethodsPerFile { get; }
    public IFile File { get; }
    public OneToSetMap`2<IType, IType> RelatedITypesCache { get; }
    public ISymbolScope SymbolScope { get; }
    public ReferencedCodeSearchingContext`1(ISymbolScope symbolScope, OneToSetMap`2<INamespace, IMethod> extensionMethodsCache, ICollection`1<NamespaceImportData> importedNamespaces, bool useRetargeting, bool includeRelated, ICollection`1<IPsiSourceFile> targetPsiSourceFiles, IFindResultConsumer`1<T> consumer, IFile file);
    private static ReferencedCodeSearchingContext`1();
    public JetHashSet`1<IDeclaredElement> get_SuitableElements();
    public JetHashSet`1<IDeclaredElement> get_NotSuitableElements();
    public OneToSetMap`2<IDeclaredElement, IDeclaredElement> get_RelatedElementsMap();
    public ICollection`1<NamespaceImportData> get_ImportedNamespaces();
    public bool get_UseRetargeting();
    public bool get_IncludeRelated();
    public ICollection`1<IPsiSourceFile> get_TargetPsiSourceFiles();
    public IFindResultConsumer`1<T> get_Consumer();
    public List`1<Tuple`2<IReference, IMethod>> get_ExtensionMethodsPerFile();
    public IFile get_File();
    public OneToSetMap`2<IType, IType> get_RelatedITypesCache();
    public ISymbolScope get_SymbolScope();
    public ICollection`1<IMethod> GetCachedExtensionMethods(INamespace ns);
    [NotNullAttribute]
private IEnumerable`1<IMethod> GetExtensionMethodsOfNamespace(INamespace nameSpace);
}
[SolutionComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeService : object {
    private static ILogger ourLog;
    private ISolution mySolution;
    private ILanguageManager myLanguageManager;
    private OutputAssemblies myOutputAssemblies;
    public ReferencedCodeService(ISolution solution, ILanguageManager languageManager, OutputAssemblies outputAssemblies);
    private static ReferencedCodeService();
    public static ReferencedCodeService GetInstance(ISolution solution);
    public static bool IsImplicitlyReferencedModule(IModule referencedModule, IProject project);
    public static bool IsFacadeAssembly(IAssembly assembly, ISolution solution);
    public void RemoveSelectedReferences(ProjectReferencesSelection selection, IProgressIndicator progressIndicator);
    private static void RemoveAssemblyReferencesManagedByPackage(IProject project, NugetId packageNameId, IProjectModelTransactionCookie cookie);
    public bool RemoveRedundantUsages(IEnumerable`1<IReference> references, IProgressIndicator progress);
    public static List`1<T> GetRedundantImportsToRemove(IEnumerable`1<T> weakUsagesMap, IEnumerable`1<IModule> usedModules, IProject ownerProject, IEqualityComparer`1<IModule> modulesComparer);
    public bool ModulesHaveEqualOutput(IModule x, IModule y);
    public int ModuleOutputHashCode(IModule x);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeUtil : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeUtil/<GetForwardedAssemblyReferences>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<IProjectToModuleReference> GetForwardedAssemblyReferences(ICollection`1<IPsiModule> targetPsiModules, IProject project);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeUtil/<ToModules>d__1")]
[ExtensionAttribute]
public static IEnumerable`1<IModule> ToModules(IEnumerable`1<IPsiModule> psiModules);
    public static List`1<IModule> GetScope(IEnumerable`1<IProjectToModuleReference> assemblyReferencesToDelete);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferenceOccurrenceKindProvider : object {
    [NotNullAttribute]
private static OccurrenceKind[] ourRead;
    [NotNullAttribute]
private static OccurrenceKind[] ourWrite;
    [NotNullAttribute]
private static OccurrenceKind[] ourReadWrite;
    [NotNullAttribute]
private static OccurrenceKind[] ourInvocation;
    [NotNullAttribute]
private static OccurrenceKind[] ourNameCapture;
    [NotNullAttribute]
private static OccurrenceKind[] ourAttribute;
    [NotNullAttribute]
private static OccurrenceKind[] ourDocumentation;
    private static ReferenceOccurrenceKindProvider();
    [NotNullAttribute]
public sealed virtual ICollection`1<OccurrenceKind> GetOccurrenceKinds(IOccurrence occurrence);
    public sealed virtual IEnumerable`1<OccurrenceKind> GetAllPossibleOccurrenceKinds();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.RetargetedModulesEqualityComparer : object {
    private ReferencedCodeService myReferencedCodeService;
    public RetargetedModulesEqualityComparer(ISolution solution);
    public sealed virtual bool Equals(IModule x, IModule y);
    public sealed virtual int GetHashCode(IModule module);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.SearchReferencedCodeConsumer : SearchResultsConsumer {
    protected List`1<IPsiModule> ReferencedCodeScope;
    protected IEqualityComparer`1<IPsiModule> Comparer;
    private Func`2<FindResultReferencedCode, bool> myFilter;
    private static int MaxOccurrenceCount;
    private bool myTrackOverflow;
    private int myOccurrenceCount;
    public bool Overflow { get; }
    public SearchReferencedCodeConsumer(List`1<IModule> modulesClosure, IEqualityComparer`1<IPsiModule> comparer, Func`2<FindResultReferencedCode, bool> filter, TargetFrameworkId targetFrameworkId, bool trackOverflow);
    public bool get_Overflow();
    public virtual IOccurrence Build(FindResult result);
    public virtual FindExecution Merge(IOccurrence data);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.SearchReferencedCodeModuleThersholdConsumer : SearchReferencedCodeConsumer {
    private FilterByModule myFilterByModule;
    public IEnumerable`1<IModule> ThresholdedModules { get; }
    public SearchReferencedCodeModuleThersholdConsumer(List`1<IModule> modulesClosure, IEqualityComparer`1<IPsiModule> comparer, Func`2<FindResultReferencedCode, bool> filter, TargetFrameworkId targetFrameworkId, int thresholdByModule);
    public virtual IOccurrence Build(FindResult result);
    public IEnumerable`1<IModule> get_ThresholdedModules();
}
internal static class JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.SkippedTypes : object {
    private static JetHashSet`1<IClrTypeName> ourSkippedTypes;
    private static SkippedTypes();
    internal static bool IsSkippedType(IClrTypeName clrTypeName);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.TextualMergeLineAndModule : object {
    private ProjectModelElementEnvoy myElementEnvoy;
    private Int32`1<DocLine> myLine;
    private IModule myRelatedModule;
    public TextualMergeLineAndModule(ProjectModelElementEnvoy envoy, Int32`1<DocLine> line, IModule relatedModule);
    public bool Equals(TextualMergeLineAndModule other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.RelatedFileOccurence : object {
    [CompilerGeneratedAttribute]
private IProjectFile <AnchorFile>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectFile <RelatedFile>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetFrameworkId <RelatedFileTargetFrameworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelationKind>k__BackingField;
    [NotNullAttribute]
public IProjectFile AnchorFile { get; }
    [CanBeNullAttribute]
public IProjectFile RelatedFile { get; }
    [CanBeNullAttribute]
public TargetFrameworkId RelatedFileTargetFrameworkId { get; }
    [CanBeNullAttribute]
public string RelationKind { get; public set; }
    public RelatedFileOccurence(IProjectFile relatedFile, string relationKind, IProjectFile anchorFile, TargetFrameworkId relatedFileTargetFrameworkId);
    public RelatedFileOccurence(IPsiSourceFile relatedPsiSourceFile, IProjectFile anchorFile, string relationKind);
    [CompilerGeneratedAttribute]
public IProjectFile get_AnchorFile();
    [CompilerGeneratedAttribute]
public IProjectFile get_RelatedFile();
    [CompilerGeneratedAttribute]
public TargetFrameworkId get_RelatedFileTargetFrameworkId();
    [CompilerGeneratedAttribute]
public string get_RelationKind();
    [CompilerGeneratedAttribute]
public void set_RelationKind(string value);
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.Navigation.IRelatedFilesProvider")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.Feature.Services.Navigation.RelatedFilesProviderAttribute : ProjectFileTypeAttribute {
    public RelatedFilesProviderAttribute(Type Type, Instantiation instantiation);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Requests.AggregateSearchRequest`1 : SearchRequest {
    [CompilerGeneratedAttribute]
private ICollection`1<TSearchRequest> <Requests>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public ICollection`1<TSearchRequest> Requests { get; }
    public string Title { get; }
    public ISolution Solution { get; }
    public ICollection SearchTargets { get; }
    public AggregateSearchRequest`1(ICollection`1<TSearchRequest> requests);
    [CompilerGeneratedAttribute]
public ICollection`1<TSearchRequest> get_Requests();
    [CompilerGeneratedAttribute]
public virtual string get_Title();
    public virtual ISolution get_Solution();
    public virtual ICollection get_SearchTargets();
    public virtual ICollection`1<IOccurrence> Search(IProgressIndicator progressIndicator);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Requests.AsyncSearchResult : object {
    [NotNullAttribute]
private IProgressIndicator myProgressIndicator;
    [NotNullAttribute]
private ISearchResultsConsumer myConsumer;
    [NotNullAttribute]
private FinderAsyncCallback myCallback;
    [NotNullAttribute]
private LifetimeDefinition myLifetimeDefinition;
    [NotNullAttribute]
private List`1<IOccurrence> myResults;
    [NotNullAttribute]
private object myLock;
    [NotNullAttribute]
private Signal`1<IOccurrence> myNewOccurrence;
    public IEnumerable`1<IOccurrence> Results { get; }
    public bool IsCompleted { get; }
    [NotNullAttribute]
public ICollection`1<IOccurrence> ResultsAsCollection { get; }
    [NotNullAttribute]
public FinderAsyncCallback Callback { get; }
    [NotNullAttribute]
public IProgressIndicator ProgressIndicator { get; }
    public AsyncSearchResult(IProgressIndicator progressIndicator, ISearchResultsConsumer consumer, Action`1<ICollection`1<IOccurrence>> complete, Action`1<string> error);
    public IEnumerable`1<IOccurrence> get_Results();
    public sealed virtual void View(Lifetime lifetime, Action`1<IOccurrence> handler);
    public sealed virtual bool get_IsCompleted();
    public ICollection`1<IOccurrence> get_ResultsAsCollection();
    public FinderAsyncCallback get_Callback();
    public IProgressIndicator get_ProgressIndicator();
    private sealed virtual override IOccurrence JetBrains.ReSharper.Psi.Search.IFindResultConsumer<JetBrains.ReSharper.Feature.Services.Occurrences.IOccurrence>.Build(FindResult result);
    private sealed virtual override FindExecution JetBrains.ReSharper.Psi.Search.IFindResultConsumer<JetBrains.ReSharper.Feature.Services.Occurrences.IOccurrence>.Merge(IOccurrence data);
    public void Add(IOccurrence result);
    public void Add(IEnumerable`1<IOccurrence> results);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Requests.CompiledElementNavigationFilter : object {
    private OneToListMap`2<IDeclaredElement, IDeclaredElementOccurrence> myDeclaredElementsDictionary;
    private OneToListMap`2<IDeclaredElement, CompiledElementId> myCompiledElementsDictionary;
    private TargetFrameworkId myPlatformId;
    private static ILogger ourLogger;
    [NotNullAttribute]
private ICollection`1<AssemblyNameInfo> myTargetsAssemblyNames;
    public CompiledElementNavigationFilter(TargetFrameworkId platformId, IList`1<IDeclaredElement> targets);
    private static CompiledElementNavigationFilter();
    public sealed virtual IEnumerable`1<IOccurrence> FilterOut(IEnumerable`1<IOccurrence> occurrences, NavigationContext context);
    public sealed virtual bool FilterOut(ICollection`1<IOccurrence> previousResults, IOccurrence data);
    private bool FilterOut(IOccurrence data);
    [CompilerGeneratedAttribute]
private bool <FilterOut>b__7_0(IOccurrence occurrence);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Requests.CompiledElementsFilterFactory : object {
    public sealed virtual bool IsApplicable(CallingFeatureContext context);
    public sealed virtual INavigationFilter CreateFilter(NavigationContext context);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Requests.CompletedAsyncSearchResult : object {
    private ICollection`1<IOccurrence> myCollection;
    public bool IsCompleted { get; }
    public CompletedAsyncSearchResult(IEnumerable`1<IOccurrence> collection);
    public sealed virtual void View(Lifetime lifetime, Action`1<IOccurrence> handler);
    public sealed virtual bool get_IsCompleted();
}
public enum JetBrains.ReSharper.Feature.Services.Navigation.Requests.DeclarationSearchType : Enum {
    public int value__;
    public static DeclarationSearchType Default;
    public static DeclarationSearchType Smart;
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Requests.DeclaredElementFilterOutStrategy : object {
    [CanBeNullAttribute]
private HashSet`1<DeclaredElementOccurrenceSameRangeCriterion> myCriterions;
    private bool myIsValid;
    public sealed virtual Nullable`1<bool> FilterOut(ICollection`1<IOccurrence> previousResults, IOccurrence itemToFilter);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Requests.FilterBySubstitutionSearchResultsConsumer : object {
    private ISearchResultsConsumer myConsumer;
    private bool myAllowOpenTypes;
    private ICollection`1<DeclaredElementInstance> myTargets;
    public FilterBySubstitutionSearchResultsConsumer(ICollection`1<DeclaredElementInstance> elements, ISearchResultsConsumer consumer, bool allowOpenTypes);
    public virtual IOccurrence Build(FindResult result);
    public virtual FindExecution Merge(IOccurrence data);
    public virtual MergeResult MergeWithResult(IOccurrence data);
    public sealed virtual ICollection`1<IOccurrence> GetOccurrences();
    private bool FilterBySubstitution(FindResult result);
    private bool EqualSubstitutions(ITypeElement referenceOwner, ISubstitution referenceSubstitution, ITypeElement originOwner, ISubstitution originSubstitution);
    private bool EqualSubstitutions(IMethod referenceOwner, ISubstitution referenceSubstitution, IMethod originOwner, ISubstitution originSubstitution);
    private bool EqualTypes(IType referenceType, IType originType);
    private static bool ContainsOpenType(IDeclaredType thisType, IDeclaredType value);
    private static bool IsEqualTypeGroup(IType sourceType, IType targetType);
    [CompilerGeneratedAttribute]
internal static bool <.ctor>g__IsValidSubstitution|3_2(DeclaredElementInstance info);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Requests.GeneratedFilesFilter : object {
    [NotNullAttribute]
private GenerateUtilsCache myGeneratedUtilsCache;
    private NavigationContext myContext;
    public GeneratedFilesFilter(GenerateUtilsCache generatedUtilsCache, NavigationContext context);
    public sealed virtual bool FilterOut(ICollection`1<IOccurrence> previousResults, IOccurrence itemToFilter);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Navigation.Requests.GeneratedFilesFilter/<FilterOut>d__4")]
public sealed virtual IEnumerable`1<IOccurrence> FilterOut(IEnumerable`1<IOccurrence> occurrences, NavigationContext context);
}
[SolutionFeaturePartAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Requests.GeneratedFilesFilterFactory : object {
    private ISolution mySolution;
    private GenerateUtilsCache myGenerateUtilsCache;
    public GeneratedFilesFilterFactory(ISolution solution, GenerateUtilsCache generateUtilsCache);
    public sealed virtual bool IsApplicable(CallingFeatureContext context);
    public sealed virtual INavigationFilter CreateFilter(NavigationContext context);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Requests.GeneratedFilesOccurrenceHelper : object {
    public static bool IsOccurrenceFromGeneratedCode(IOccurrence occurrence, GenerateUtilsCache generatedUtilsCache);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Requests.IAsyncSearchRequest {
    public bool IsAsyncSupported { get; }
    public abstract virtual bool get_IsAsyncSupported();
    [CanBeNullAttribute]
public abstract virtual IAsyncSearchResult SearchAsync(IProgressIndicator progressIndicator, IFinder finder, Action`1<ICollection`1<IOccurrence>> complete, Action`1<string> error);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Requests.IAsyncSearchResult {
    public bool IsCompleted { get; }
    public abstract virtual void View(Lifetime lifetime, Action`1<IOccurrence> onAdd);
    public abstract virtual bool get_IsCompleted();
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Requests.IExternalInheritorsFinder {
    public abstract virtual ICollection`1<IOccurrence> FindInheritors(IDeclaredElement element, ICollection`1<IOccurrence> currentResults);
    public abstract virtual ICollection`1<IOccurrence> FindImplementations(IDeclaredElement element, ICollection`1<IOccurrence> currentResults);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Requests.ISearchRequestWithRoot {
    public IFinderSearchRoot Root { get; public set; }
    public abstract virtual IFinderSearchRoot get_Root();
    public abstract virtual void set_Root(IFinderSearchRoot value);
}
public interface JetBrains.ReSharper.Feature.Services.Navigation.Requests.ISearchResultsConsumer {
    [NotNullAttribute]
public abstract virtual ICollection`1<IOccurrence> GetOccurrences();
    public abstract virtual MergeResult MergeWithResult(IOccurrence data);
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Feature.Services.Navigation.Requests.MergeResult : ValueType {
    [CompilerGeneratedAttribute]
private FindExecution <FindExecution>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOccurrenceCommitted>k__BackingField;
    public FindExecution FindExecution { get; }
    public bool IsOccurrenceCommitted { get; }
    public MergeResult(FindExecution findExecution, bool isOccurrenceCommitted);
    [CompilerGeneratedAttribute]
public FindExecution get_FindExecution();
    [CompilerGeneratedAttribute]
public bool get_IsOccurrenceCommitted();
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.Feature.Services.Navigation.Requests.OccurrenceExtensions : object {
    [ExtensionAttribute]
internal static TextRange GetNavigationRange(IOccurrence occurrence);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Requests.RangeBasedFilterOutStrategy : object {
    private JetHashSet`1<Pair`2<VirtualFileSystemPath, TextRange>> myNavigationsSet;
    public sealed virtual Nullable`1<bool> FilterOut(ICollection`1<IOccurrence> previousResults, IOccurrence itemToFilter);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Requests.SameRangeNavigationFilter : object {
    private IAccumulateFilterOutStrategy[] myAccumulateFilters;
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Navigation.Requests.SameRangeNavigationFilter/<FilterOut>d__1")]
public sealed virtual IEnumerable`1<IOccurrence> FilterOut(IEnumerable`1<IOccurrence> occurrences, NavigationContext context);
    public sealed virtual bool FilterOut(ICollection`1<IOccurrence> previousResults, IOccurrence itemToFilter);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Requests.SameRangeNavigationFilterFactory : object {
    public sealed virtual bool IsApplicable(CallingFeatureContext context);
    public sealed virtual INavigationFilter CreateFilter(NavigationContext context);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Requests.SearchBasesRequest : SearchRequest {
    protected DeclaredElementEnvoy`1<IDeclaredElement> myTarget;
    private string myCachedTitle;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    public string Title { get; }
    public ISolution Solution { get; }
    public ICollection SearchTargets { get; }
    public SearchBasesRequest(IDeclaredElement declaredElement);
    public virtual string get_Title();
    [CompilerGeneratedAttribute]
public virtual ISolution get_Solution();
    public virtual ICollection get_SearchTargets();
    public virtual ICollection`1<IOccurrence> Search(IProgressIndicator progressIndicator);
    public virtual int CompareOccurrences(IOccurrence x, IOccurrence y);
    protected virtual ITaskExecutor CreateTaskExecutor();
    private static void SearchAllBaseElements(IFinder finder, IDeclaredElement declaredElement, IProgressIndicator pi, int level, bool inHiddenBase, Func`4<IDeclaredElement, int, bool, bool> fProcess);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Requests.SearchDeclarationsRequest : SearchRequest {
    [NotNullAttribute]
protected DeclaredElementEnvoy`1<IDeclaredElement> myTarget;
    [NotNullAttribute]
private ISolution mySolution;
    private string myCachedTitle;
    private Comparer`1<IOccurrence> myComparer;
    private static ILogger ourLog;
    [CompilerGeneratedAttribute]
private Func`1<bool> <CheckCancelled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private DeclarationSearchType <DeclarationSearchType>k__BackingField;
    public bool ShouldWaitForCaches { get; }
    public string Title { get; }
    public DeclaredElementEnvoy`1<IDeclaredElement> Target { get; }
    public ISolution Solution { get; }
    public ICollection SearchTargets { get; }
    [CanBeNullAttribute]
protected Func`1<bool> CheckCancelled { get; }
    internal bool IsDeclaration { get; }
    public DeclarationSearchType DeclarationSearchType { get; public set; }
    public SearchDeclarationsRequest(DeclaredElementTypeUsageInfo declaredElementInfo, Func`1<bool> checkCancelled);
    public SearchDeclarationsRequest(IDeclaredElement declaredElement, Func`1<bool> checkCancelled);
    private static SearchDeclarationsRequest();
    protected virtual ITaskExecutor CreateTaskExecutor();
    [NotNullAttribute]
protected virtual string GetTitle(IDeclaredElement declaredElement);
    public virtual bool get_ShouldWaitForCaches();
    public virtual string get_Title();
    public DeclaredElementEnvoy`1<IDeclaredElement> get_Target();
    public virtual ISolution get_Solution();
    public virtual ICollection get_SearchTargets();
    [CompilerGeneratedAttribute]
protected Func`1<bool> get_CheckCancelled();
    [CompilerGeneratedAttribute]
internal bool get_IsDeclaration();
    [CompilerGeneratedAttribute]
public DeclarationSearchType get_DeclarationSearchType();
    [CompilerGeneratedAttribute]
public void set_DeclarationSearchType(DeclarationSearchType value);
    public virtual ICollection`1<IOccurrence> Search(IProgressIndicator progressIndicator);
    protected virtual ISearchResultsConsumer CreateConsumer(IDeclaredElement declaredElement);
    public virtual int CompareOccurrences(IOccurrence o1, IOccurrence o2);
    public virtual IDeclaration GetDeclaration(DocumentEditorContext editorContext);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Requests.SearchDeclaredElementUsagesRequest : SearchUsagesRequest {
    public List`1<DeclaredElementEnvoy`1<IDeclaredElement>> InitialTargetEnvoys;
    protected List`1<DeclaredElementEnvoy`1<IDeclaredElement>> ElementEnvoys;
    [CompilerGeneratedAttribute]
private SearchPattern <SearchPattern>k__BackingField;
    private string myCachedTitle;
    [CompilerGeneratedAttribute]
private bool <SearchParametersOverloads>k__BackingField;
    [CompilerGeneratedAttribute]
private IFinderSearchRoot <Root>k__BackingField;
    public SearchPattern SearchPattern { get; }
    public string Title { get; }
    public ICollection SearchTargets { get; }
    public bool SearchParametersOverloads { get; public set; }
    public bool IsAsyncSupported { get; }
    public IFinderSearchRoot Root { get; public set; }
    public SearchDeclaredElementUsagesRequest(IDeclaredElement element, SearchPattern searchPattern, ISearchDomain searchDomain);
    public SearchDeclaredElementUsagesRequest(ICollection`1<IDeclaredElement> elements, SearchPattern searchPattern, ISearchDomain searchDomain);
    public SearchDeclaredElementUsagesRequest(ICollection`1<DeclaredElementInstance> elements, ICollection`1<DeclaredElementInstance> initialTargets, SearchPattern searchPattern, ISearchDomain searchDomain);
    [CompilerGeneratedAttribute]
public SearchPattern get_SearchPattern();
    public virtual string get_Title();
    public virtual ICollection get_SearchTargets();
    [CompilerGeneratedAttribute]
public bool get_SearchParametersOverloads();
    [CompilerGeneratedAttribute]
public void set_SearchParametersOverloads(bool value);
    public virtual bool get_IsAsyncSupported();
    public virtual ICollection`1<IOccurrence> Search(IProgressIndicator progressIndicator);
    public sealed virtual IAsyncSearchResult SearchAsync(IProgressIndicator progressIndicator, IFinder finder, Action`1<ICollection`1<IOccurrence>> complete, Action`1<string> error);
    protected virtual ISearchResultsConsumer CreateSearchResultsConsumer(ICollection`1<DeclaredElementInstance> searchElements, NavigationContext navigationContext);
    private ISearchDomain NarrowSearchDomain(ISearchDomain targetsDomain, List`1<DeclaredElementInstance> searchElementInstances);
    private static bool CanFilterBySubstitution(DeclaredElementInstance instance);
    private static void FindPossibleNames(IFinder finder, ISubstitution substitution, HashSet`1<string> possibleNames);
    protected virtual void SearchReferences(SearchReferencesContext context, IProgressIndicator progressIndicator, AsyncSearchResult result);
    protected virtual void SearchReferencesAsync(SearchReferencesContext context, IFinder finder, AsyncSearchResult result);
    [CanBeNullAttribute]
private SearchReferencesContext CreateSearchReferencesContext();
    private void AddOverriddenParameters(IList`1<IDeclaredElement> searchElements);
    protected virtual string GetTitle(IDeclaredElement declaredElement, ISubstitution substitution, SearchPattern searchPattern);
    [CompilerGeneratedAttribute]
public virtual IFinderSearchRoot get_Root();
    [CompilerGeneratedAttribute]
public virtual void set_Root(IFinderSearchRoot value);
    [CompilerGeneratedAttribute]
internal static bool <FindPossibleNames>g__ShouldAddPossibleNamesForTypeElementOf|24_0(IDeclaredType declaredType);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Requests.SearchDeclaredElementUsagesResultsConsumer : FilterBySubstitutionSearchResultsConsumer {
    public SearchDeclaredElementUsagesResultsConsumer(ICollection`1<DeclaredElementInstance> elements, ISolution solution, NavigationContext navigationContext);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Requests.SearchImplementationsRequest : SearchDeclarationsRequest {
    [NotNullAttribute]
private ISearchDomain mySearchDomain;
    [CanBeNullAttribute]
private DeclaredElementInstance myInstance;
    [CanBeNullAttribute]
private ITypeElement myOriginTypeElement;
    [CanBeNullAttribute]
private ISubstitution myOriginSubstitution;
    private static SearchTargetRole[] ourSearchTargetOrder;
    public SearchImplementationsRequest(IDeclaredElement declaredElement, ISearchDomain searchDomain);
    public SearchImplementationsRequest(DeclaredElementTypeUsageInfo declaredElementInfo, ISearchDomain searchDomain, ITypeElement originTypeElement, ISubstitution originSubstitution);
    private static SearchImplementationsRequest();
    protected virtual string GetTitle(IDeclaredElement declaredElement);
    protected virtual ITaskExecutor CreateTaskExecutor();
    protected virtual ISearchResultsConsumer CreateConsumer(IDeclaredElement declaredElement);
    public virtual ICollection`1<IOccurrence> Search(IProgressIndicator progressIndicator);
    public virtual int CompareOccurrences(IOccurrence x, IOccurrence y);
    private ICollection`1<IOccurrence> ProcessOverridable(IDeclaredElement declaredElement, IProgressIndicator indicator);
    private ICollection`1<IOccurrence> ProcessTypeElement(IDeclaredElement declaredElement, IProgressIndicator indicator);
    public virtual bool IsGotoDeclarationRequest();
    [CompilerGeneratedAttribute]
internal static int <CompareOccurrences>g__Rank|11_0(SearchTargetRole role);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Requests.SearchInheritorsRequest : SearchUsagesRequest {
    private ISolution mySolution;
    protected DeclaredElementEnvoy`1<IDeclaredElement> myTarget;
    private string myCachedTitle;
    [CanBeNullAttribute]
private DeclaredElementInstance myInstance;
    private static SearchTargetRole[] ourSearchTargetOrder;
    public string Title { get; }
    public ISolution Solution { get; }
    public ICollection SearchTargets { get; }
    public DeclaredElementEnvoy`1<IDeclaredElement> Target { get; }
    public SearchInheritorsRequest(DeclaredElementInstance declaredElementInstance, ISearchDomain searchDomain);
    public SearchInheritorsRequest(IDeclaredElement declaredElement, ISearchDomain searchDomain);
    private static SearchInheritorsRequest();
    public virtual string get_Title();
    protected string GetName(IDeclaredElement declaredElement);
    protected string GetRelation(IDeclaredElement declaredElement);
    protected virtual string GetKind(IDeclaredElement declaredElement);
    public virtual int CompareOccurrences(IOccurrence x, IOccurrence y);
    public virtual ISolution get_Solution();
    public virtual ICollection get_SearchTargets();
    public DeclaredElementEnvoy`1<IDeclaredElement> get_Target();
    public virtual ICollection`1<IOccurrence> Search(IProgressIndicator progressIndicator);
    private void ProcessOverridable(IFinder finder, IProgressIndicator indicator, ISearchResultsConsumer consumer);
    private void ProcessConstructor(IFinder finder, IProgressIndicator indicator, ISearchResultsConsumer consumer);
    private void FindConstructors(IFinder finder, IDeclaredElement targetConstructor, ITypeElement type, ISearchResultsConsumer consumer, IProgressIndicator indicator, InheritanceKind kind);
    private void ProcessTypeElement(IFinder finder, IProgressIndicator indicator, ISearchResultsConsumer consumer);
    private void ProcessDelegate(IFinder finder, IProgressIndicator indicator, ISearchResultsConsumer consumer);
    [CompilerGeneratedAttribute]
internal static int <CompareOccurrences>g__Rank|12_0(SearchTargetRole role);
}
public abstract class JetBrains.ReSharper.Feature.Services.Navigation.Requests.SearchReferencedCodeRequest : SearchRequest {
    private ISolution mySolution;
    public ISolution Solution { get; }
    protected SearchReferencedCodeRequest(ISolution solution);
    public virtual ISolution get_Solution();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Requests.SearchReferencesContext : object {
    [CompilerGeneratedAttribute]
private ISearchResultsConsumer <Consumer>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IDeclaredElement> <SearchElements>k__BackingField;
    [CompilerGeneratedAttribute]
private ISearchDomain <SearchDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IDeclaredElement> <InitialTargets>k__BackingField;
    public ISearchResultsConsumer Consumer { get; public set; }
    public ICollection`1<IDeclaredElement> SearchElements { get; public set; }
    public ISearchDomain SearchDomain { get; public set; }
    public ICollection`1<IDeclaredElement> InitialTargets { get; public set; }
    [CompilerGeneratedAttribute]
public ISearchResultsConsumer get_Consumer();
    [CompilerGeneratedAttribute]
public void set_Consumer(ISearchResultsConsumer value);
    [CompilerGeneratedAttribute]
public ICollection`1<IDeclaredElement> get_SearchElements();
    [CompilerGeneratedAttribute]
public void set_SearchElements(ICollection`1<IDeclaredElement> value);
    [CompilerGeneratedAttribute]
public ISearchDomain get_SearchDomain();
    [CompilerGeneratedAttribute]
public void set_SearchDomain(ISearchDomain value);
    [CompilerGeneratedAttribute]
public ICollection`1<IDeclaredElement> get_InitialTargets();
    [CompilerGeneratedAttribute]
public void set_InitialTargets(ICollection`1<IDeclaredElement> value);
}
public abstract class JetBrains.ReSharper.Feature.Services.Navigation.Requests.SearchRequest : object {
    private static ILogger ourLog;
    private static ILogger ourPerfLog;
    public string Title { get; }
    public ISolution Solution { get; }
    public ICollection SearchTargets { get; }
    public bool ShouldWaitForCaches { get; }
    private static SearchRequest();
    public abstract virtual string get_Title();
    public abstract virtual ISolution get_Solution();
    public abstract virtual ICollection get_SearchTargets();
    [CanBeNullAttribute]
public abstract virtual ICollection`1<IOccurrence> Search(IProgressIndicator progressIndicator);
    [CanBeNullAttribute]
public virtual ICollection`1<IOccurrence> Search();
    private void TraceResults(string title, ICollection`1<IOccurrence> occurrences, ICollection`1<IOccurrence> filtered);
    public virtual bool get_ShouldWaitForCaches();
    protected virtual ITaskExecutor CreateTaskExecutor();
    public virtual int CompareOccurrences(IOccurrence o1, IOccurrence o2);
    public virtual string GetNotFoundMessage();
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Requests.SearchResultsConsumer : object {
    [NotNullAttribute]
private JetHashSet`1<IOccurrence> myOccurrences;
    [CanBeNullAttribute]
private ProviderBasedOccurrenceFilter myFilter;
    [CanBeNullAttribute]
private Func`1<bool> myCheckCancelled;
    public SearchResultsConsumer(ProviderBasedOccurrenceFilter filter, Func`1<bool> checkCancelled);
    public virtual IOccurrence Build(FindResult result);
    public virtual FindExecution Merge(IOccurrence data);
    public virtual MergeResult MergeWithResult(IOccurrence data);
    public sealed virtual ICollection`1<IOccurrence> GetOccurrences();
}
public static class JetBrains.ReSharper.Feature.Services.Navigation.Requests.SearchResultsConsumerHelper : object {
    [CanBeNullAttribute]
public static TargetFrameworkId TryGetElementPlatformId(IClrDeclaredElement element);
    [CanBeNullAttribute]
public static TargetFrameworkId TryGetTypeMemberPlatformId(CachedTypeMemberBase typeMember);
    [CanBeNullAttribute]
public static TargetFrameworkId TryGetDeclaredElementPlatformId(IDeclaredElement declaredElement);
    [CanBeNullAttribute]
public static TargetFrameworkId TryGetCommonPlatformId(IEnumerable`1<IDeclaredElement> elements);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Requests.SearchSingleFileDeclaredElementRequest : SearchDeclaredElementUsagesRequest {
    [CompilerGeneratedAttribute]
private bool <IncludeOverridableMembers>k__BackingField;
    public bool IsAsyncSupported { get; }
    public bool IncludeOverridableMembers { get; public set; }
    public SearchSingleFileDeclaredElementRequest(ICollection`1<DeclaredElementInstance> elements, ICollection`1<DeclaredElementInstance> initialTargets, ISearchDomain searchDomain);
    public virtual bool get_IsAsyncSupported();
    [CompilerGeneratedAttribute]
public bool get_IncludeOverridableMembers();
    [CompilerGeneratedAttribute]
public void set_IncludeOverridableMembers(bool value);
    public virtual ICollection`1<IOccurrence> Search(IProgressIndicator progressIndicator);
    private ICollection`1<IOccurrence> FilterOccurrences(ICollection`1<IOccurrence> occurrences);
    protected virtual void SearchReferences(SearchReferencesContext context, IProgressIndicator progressIndicator, AsyncSearchResult result);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Requests.SearchSpecialUsagesRequest : SearchUsagesRequest {
    [NotNullAttribute]
private object myTarget;
    [CompilerGeneratedAttribute]
private ISpecialElementFinder <Finder>k__BackingField;
    public string Title { get; }
    public object Target { get; }
    [NotNullAttribute]
public ISpecialElementFinder Finder { get; }
    public ICollection SearchTargets { get; }
    public SearchSpecialUsagesRequest(ISpecialElementFinder finder, object target, ISolution solution, ISearchDomain searchDomain);
    public virtual string get_Title();
    public object get_Target();
    [CompilerGeneratedAttribute]
public ISpecialElementFinder get_Finder();
    public virtual ICollection get_SearchTargets();
    public virtual ICollection`1<IOccurrence> Search(IProgressIndicator progressIndicator);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Requests.SearchSymbolReferencedCodeRequest : SearchReferencedCodeRequest {
    private List`1<DeclaredElementEnvoy`1<IDeclaredElement>> myElementEnvoys;
    public ICollection SearchTargets { get; }
    public string Title { get; }
    public SearchSymbolReferencedCodeRequest(IEnumerable`1<IDeclaredElement> elementsToSearch, ISolution solution);
    public SearchSymbolReferencedCodeRequest(IDeclaredElement declaredElement);
    public virtual ICollection get_SearchTargets();
    public virtual string get_Title();
    public virtual ICollection`1<IOccurrence> Search(IProgressIndicator progressIndicator);
    private static void ProcessReferences(OneToListMap`2<IFile, IReference> map, IProgressIndicator progressIndicator, IList`1<IOccurrence> items, ICollection`1<IClrDeclaredElement> searchElements);
    private static bool IsSuitable(IClrDeclaredElement referenced, IEnumerable`1<IClrDeclaredElement> targets);
    private static bool IsSuitable(IClrDeclaredElement referenced, IClrDeclaredElement target);
}
public abstract class JetBrains.ReSharper.Feature.Services.Navigation.Requests.SearchUsagesRequest : SearchRequest {
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private ISearchDomain <SearchDomain>k__BackingField;
    public ISolution Solution { get; }
    public ISearchDomain SearchDomain { get; }
    protected SearchUsagesRequest(ISolution solution, ISearchDomain searchDomain);
    [CompilerGeneratedAttribute]
public virtual ISolution get_Solution();
    [CompilerGeneratedAttribute]
public ISearchDomain get_SearchDomain();
    [PureAttribute]
protected ISearchDomain CreateSearchDomain(IEnumerable`1<IDeclaredElement> targetElements, IEnumerable`1<IDeclaredElement> initialTargets);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Requests.SweaSearchResultConsumer : object {
    private ISearchResultsConsumer myDelegateConsumer;
    private ICollection`1<DeclaredElementInstance> mySearchElements;
    private Predicate`1<IPsiSourceFile> myChecker;
    private string myFirstSearchTargetPresentation;
    public SweaSearchResultConsumer(ISolution solution, ISearchResultsConsumer delegateConsumer, ICollection`1<DeclaredElementInstance> searchElements);
    public sealed virtual IOccurrence Build(FindResult result);
    public sealed virtual FindExecution Merge(IOccurrence data);
    public sealed virtual ICollection`1<IOccurrence> GetOccurrences();
    public sealed virtual MergeResult MergeWithResult(IOccurrence data);
}
public abstract class JetBrains.ReSharper.Feature.Services.Navigation.SearchDomainVisitorParallel : SearchDomainVisitor {
    private ISearchDomain myDomain;
    private IProgressIndicator myProgressIndicator;
    private bool myProcessingIsFinished;
    private ITaskBarrier myTaskBarrier;
    public bool ProcessingIsFinished { get; }
    protected SearchDomainVisitorParallel(ISearchDomain searchDomain, IProgressIndicator pi);
    public void Run();
    public virtual void VisitPsiSourceFile(IPsiSourceFile sourceFile);
    public virtual void VisitAssembly(IPsiAssembly assembly);
    public virtual void VisitElement(ITreeNode element);
    public virtual bool get_ProcessingIsFinished();
    protected abstract virtual bool ProcessProjectFile(IPsiSourceFile sourceFile);
    protected abstract virtual bool ProcessAssembly(IPsiAssembly assembly);
    protected abstract virtual bool ProcessElement(ITreeNode element);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "SearchSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.Navigation.SearchSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherAHintWasUsedForTheHighlightUsagesActionSettingDescription")]
public bool HighlightUsagesHintUsed;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToSearchForExtendingInterfacesSettingDescription")]
public bool SearchForExtendingInterfaces;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToSearchForDerivedTypesSettingDescription")]
public bool SearchForDerivedTypes;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToSearchForImplementationsSettingDescription")]
public bool SearchForImplementations;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToSearchForHidingMembersSettingDescription")]
public bool SearchForHiding;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToSearchForOverloadingMembersSettingDescription")]
public bool SearchForOverloading;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToSearchForInheritedMembersSettingDescription")]
public bool SearchForInheritedMembers;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToSearchForUsagesSettingDescription")]
public bool SearchForUsages;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToSearchForMemberUsagesSettingDescription")]
public bool SearchForMembersUsages;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToSearchForDelegateTargetsSettingDescription")]
public bool SearchForDelegateTargets;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToSearchForTextualOccurrencesSettingDescription")]
public bool SearchForTextualOccurrences;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToSearchForLateBoundReferencesSettingDescription")]
public bool SearchForLateBound;
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.SearchSettingsUpgrader : SettingTablesUpgrader {
    public SearchSettingsUpgrader(ProductConfigurations productConfigurations);
    protected virtual void DoUpgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime, SettingsTableBase workspaceSettingsTable, SettingsTableBase globalSettingsTable);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Settings.NavigationSettings : object {
    [NotNullAttribute]
public static DataConstant`1<object> DONT_NAVIGATE_IMMEDIATELY_TO_SINGLE_USAGE;
    [NotNullAttribute]
public static Key`1<IModuleReferenceResolveContext> EXPLICIT_NAVIGATION_CONTEXT;
    private IProperty`1<bool> myExpandResultExpression;
    private IProperty`1<FindUsagesSweaMode> myUseSwea;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <RecentFilesCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <RecentEditsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <MergeOnSingleLine>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ShowIgnoredOccurrence>k__BackingField;
    public bool AutoExpandResultsExpression { get; }
    public FindUsagesSweaMode UseSwea { get; }
    public IProperty`1<int> RecentFilesCount { get; }
    public IProperty`1<int> RecentEditsCount { get; }
    public IProperty`1<bool> MergeOnSingleLine { get; }
    public IProperty`1<bool> ShowIgnoredOccurrence { get; }
    public NavigationSettings(ISolution solution, ISettingsStore settingsStore, Lifetime lifetime, IThreading threading);
    private static NavigationSettings();
    public static NavigationSettings GetInstance(ISolution solution);
    public bool get_AutoExpandResultsExpression();
    public FindUsagesSweaMode get_UseSwea();
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_RecentFilesCount();
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_RecentEditsCount();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_MergeOnSingleLine();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ShowIgnoredOccurrence();
    public bool NavigateToSingleUsageImmediately(IContextBoundSettingsStore contextBoundSettingsStore, IDataContext dataContext);
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.Settings.SearchAndNavigationSettingsUpgrader : SettingTablesUpgrader {
    private static string MERGE_OCCURRENCES_SETTING_NAME;
    private static string GROUPBY_OCCURRENCES_SETTING_NAME;
    public SearchAndNavigationSettingsUpgrader(ProductConfigurations productConfigurations);
    protected virtual void DoUpgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime, SettingsTableBase workspaceSettingsTable, SettingsTableBase globalSettingsTable);
}
[RelatedFilesProviderAttribute("JetBrains.ProjectModel.KnownProjectFileType", "16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.SharedFilesProvider : object {
    public sealed virtual IEnumerable`1<RelatedFileOccurence> GetRelatedFiles(IProjectFile projectFile);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.SingleDomainSearchDomainContext : object {
    private string myDomainName;
    private ISearchDomain mySearchDomain;
    private ISolution mySolution;
    public SingleDomainSearchDomainContext(string domainName, ISearchDomain searchDomain, ISolution solution);
    public sealed virtual NamedSearchDomain GetDefaultDomain(bool sourcesOnly);
    public sealed virtual NamedSearchDomain[] GetUserSelectableVariants(bool sourcesOnly);
}
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.Feature.Services.Navigation.SpecialElementFinderAttribute : PsiSharedComponentAttribute {
    public SpecialElementFinderAttribute(Instantiation instantiation);
}
[RelatedFilesProviderAttribute("JetBrains.ProjectModel.KnownProjectFileType", "16")]
public class JetBrains.ReSharper.Feature.Services.Navigation.TargetFrameworkIdRelatedFilesProvider : object {
    public sealed virtual IEnumerable`1<RelatedFileOccurence> GetRelatedFiles(IProjectFile projectFile);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.TextNavigationPoint : object {
    private ProjectFileTextRange myTarget;
    private TargetFrameworkId myTargetFrameworkId;
    public IProjectFile ProjectFile { get; }
    public TextRange TextRange { get; }
    public bool IsValid { get; }
    public TextNavigationPoint(ProjectFileTextRange target);
    public TextNavigationPoint(IProjectFile projectFile, int offset);
    public IProjectFile get_ProjectFile();
    public sealed virtual TextRange get_TextRange();
    public bool get_IsValid();
    public sealed virtual Task`1<ITextControl> OpenTextControlAsync(NavigationOptions options);
    public sealed virtual Task`1<bool> Navigate(NavigationOptions options);
    public virtual IconId GetPresentationImage();
    public virtual RichText GetPresentationText();
    public virtual RichText GetSecondaryPresentationText();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Navigation.Utils.ConvertUtil : object {
    [CanBeNullAttribute]
public static IDeclaredElement GetDeclaredElementFromOccurrence(IOccurrence occurrence);
    public static int CompareRangeOccurrences(RangeOccurrence x, RangeOccurrence y);
    [ExtensionAttribute]
public static DeclaredElementOccurrence CreateOccurrence(IDeclaredElement targetElement);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Utils.DeclaredElementOccurrenceSameRangeCriterion : object {
    [NotNullAttribute]
private DeclaredElementOccurrence myOccurrence;
    private Nullable`1<TextRange> myRange;
    public DeclaredElementOccurrenceSameRangeCriterion(DeclaredElementOccurrence occurrence);
    protected bool Equals(DeclaredElementOccurrenceSameRangeCriterion other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private void CalculateRange();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Navigation.Utils.MainOccurrenceUtil : object {
    [ExtensionAttribute]
public static GroupingSectionId GetSectionId(OccurrenceType occurrenceType);
}
public class JetBrains.ReSharper.Feature.Services.Navigation.Utils.OccurrenceComparerNoReadLock : MultiTypeComparer {
    private int CompareProjectModelElementEnvoy(ProjectModelElementEnvoy x, ProjectModelElementEnvoy y);
    private int UnknownHowToCompare(object x, object y);
    private int CompareRangeOcurrence(RangeOccurrence x, RangeOccurrence y);
    private int CompareStringInCompiledElementOccurrence(StringInCompiledElementOccurrence x, StringInCompiledElementOccurrence y);
    private int CompareCompiledElementOccurrence(CompiledElementOccurrence x, CompiledElementOccurrence y);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Navigation.Utils.SubstitutionUtil : object {
    [ExtensionAttribute]
public static bool HasFillTypeParameters(DeclaredElementInstance instance);
    private static bool HasFillTypeParameters(IList`1<ITypeParameter> typeParameters, ISubstitution substitution);
    public static ICollection`1<DeclaredElementInstance> ApplyGenericNavigationBehaviour(IDataContext context, IEnumerable`1<DeclaredElementInstance> candidates);
    public static ICollection`1<T> ApplyGenericNavigationBehaviour(IDataContext context, IEnumerable`1<T> candidates, Func`2<T, ISubstitution> getSubstitution, Func`2<T, T> removeSubstitution);
}
public abstract class JetBrains.ReSharper.Feature.Services.Occurrences.AssemblyAttributeOccurrenceBase : object {
    private ProjectModelElementEnvoy myProjectModelElementEnvoy;
    private ISolution mySolution;
    private OccurrenceMergeContext myMergeContext;
    [CompilerGeneratedAttribute]
private CustomAttributeTargetPosition <TargetPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private OccurrencePresentationOptions <PresentationOptions>k__BackingField;
    public CustomAttributeTargetPosition TargetPosition { get; }
    public OccurrenceType OccurrenceType { get; }
    public bool IsValid { get; }
    public OccurrencePresentationOptions PresentationOptions { get; public set; }
    public OccurrenceMergeContext MergeContext { get; }
    protected AssemblyAttributeOccurrenceBase(IAssembly assembly, CustomAttributeTargetPosition targetPosition);
    [CompilerGeneratedAttribute]
public sealed virtual CustomAttributeTargetPosition get_TargetPosition();
    [CanBeNullAttribute]
protected abstract virtual ICompiledNavigationTarget GetNavigationTarget();
    public sealed virtual bool Navigate(ISolution solution, PopupWindowContextSource windowContext, bool transferFocus, TabOptions tabOptions);
    public sealed virtual string DumpToString();
    public sealed virtual ISolution GetSolution();
    public sealed virtual TextRange GetTextRange();
    public sealed virtual ProjectModelElementEnvoy GetProjectModelElementEnvoy();
    public sealed virtual DeclaredElementEnvoy`1<ITypeMember> GetTypeMember();
    public sealed virtual DeclaredElementEnvoy`1<ITypeElement> GetTypeElement();
    public sealed virtual DeclaredElementEnvoy`1<INamespace> GetNamespace();
    public sealed virtual OccurrenceType get_OccurrenceType();
    public sealed virtual bool get_IsValid();
    [CompilerGeneratedAttribute]
public sealed virtual OccurrencePresentationOptions get_PresentationOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PresentationOptions(OccurrencePresentationOptions value);
    public sealed virtual OccurrenceMergeContext get_MergeContext();
    protected abstract virtual bool IsTargetEqual(IAssemblyAttributeOccurrence other);
    public sealed virtual bool Equals(IAssemblyAttributeOccurrence other);
    public virtual bool Equals(object obj);
    protected abstract virtual int GetTargetHashCode();
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.ChainedCodeModelOccurrence : DeclaredElementOccurrence {
    private MatchingInfo myMatchingInfo;
    [NotNullAttribute]
public MatchingInfo MatchingInfo { get; }
    public ChainedCodeModelOccurrence(IDeclaredElement element, MatchingInfo matchingInfo, OccurrencePresentationOptions options);
    public MatchingInfo get_MatchingInfo();
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.ChainedProjectModelOccurrence : ProjectItemOccurrence {
    private MatchingInfo myMatchingInfo;
    [NotNullAttribute]
public MatchingInfo MatchingInfo { get; }
    public ChainedProjectModelOccurrence(IProjectItem item, MatchingInfo info);
    public MatchingInfo get_MatchingInfo();
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.ChainedRangeOccurrence : RangeOccurrence {
    private MatchingInfo myMatchingInfo;
    public MatchingInfo MatchingInfo { get; }
    public ChainedRangeOccurrence(IPsiSourceFile sourceFile, MatchingInfo matchingInfo, DocumentRange documentRange, OccurrencePresentationOptions options);
    public MatchingInfo get_MatchingInfo();
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.ChainedStyleProvider : object {
    private PreferLocationStyle myLocationStyle;
    public bool DisplayContainingElement { get; }
    public PreferLocationStyle LocationStyle { get; }
    public ChainedStyleProvider(PreferLocationStyle locationStyle);
    public sealed virtual bool get_DisplayContainingElement();
    public sealed virtual PreferLocationStyle get_LocationStyle();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.CommonOccurrenceKindProvider : object {
    private Dictionary`2<OccurrenceKind, IconId> myIconsMap;
    public sealed virtual IconId GetImageId(OccurrenceKind occurrenceKind);
    public sealed virtual int GetPriority(OccurrenceKind occurrenceKind);
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.CommonStyleProvider : object {
    private PreferLocationStyle myLocationStyle;
    public bool DisplayContainingElement { get; }
    public PreferLocationStyle LocationStyle { get; }
    public CommonStyleProvider(PreferLocationStyle locationStyle);
    public sealed virtual bool get_DisplayContainingElement();
    public sealed virtual PreferLocationStyle get_LocationStyle();
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.CompiledElementOccurrence : DeclaredElementOccurrence {
    [CompilerGeneratedAttribute]
private ITargetPosition <TargetPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaredElement <SearchTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private OccurrenceMergeContext <CompiledMergeContext>k__BackingField;
    [CanBeNullAttribute]
public ICompiledElement Element { get; }
    [NotNullAttribute]
public ITargetPosition TargetPosition { get; }
    [CanBeNullAttribute]
public IDeclaredElement SearchTarget { get; }
    public OccurrenceMergeContext MergeContext { get; }
    protected OccurrenceMergeContext CompiledMergeContext { get; protected set; }
    public CompiledElementOccurrence(ICompiledElement element, OccurrencePresentationOptions occurrencePresentationOptions, ITargetPosition targetPosition, IDeclaredElement searchTarget);
    public ICompiledElement get_Element();
    [CompilerGeneratedAttribute]
public ITargetPosition get_TargetPosition();
    [CompilerGeneratedAttribute]
public IDeclaredElement get_SearchTarget();
    private IDeclaredElement GetMergeKey(IDeclaredElement element);
    public virtual IDeclaredElementEnvoy GetTypeMember();
    public virtual OccurrenceMergeContext get_MergeContext();
    [CompilerGeneratedAttribute]
protected OccurrenceMergeContext get_CompiledMergeContext();
    [CompilerGeneratedAttribute]
protected void set_CompiledMergeContext(OccurrenceMergeContext value);
    public virtual bool Navigate(ISolution solution, PopupWindowContextSource windowContext, bool transferFocus, TabOptions tabOptions);
    public virtual string DumpToString();
}
public enum JetBrains.ReSharper.Feature.Services.Occurrences.ContainerDisplayStyle : Enum {
    public int value__;
    public static ContainerDisplayStyle Default;
    public static ContainerDisplayStyle NoContainer;
    public static ContainerDisplayStyle File;
    public static ContainerDisplayStyle Namespace;
    public static ContainerDisplayStyle ContainingType;
    public static ContainerDisplayStyle ContainingTypeWithArrow;
    public static ContainerDisplayStyle ContainingTypeWithOuterTypes;
}
public enum JetBrains.ReSharper.Feature.Services.Occurrences.ContextStyle : Enum {
    public int value__;
    public static ContextStyle Default;
    public static ContextStyle RecentFile;
    public static ContextStyle RecentMethod;
    public static ContextStyle GotoRecentEdit;
    public static ContextStyle Instant;
    public static ContextStyle GotoRecentlyNavigate;
    public static ContextStyle MultipleTargetFrameworks;
    public static ContextStyle SeveralProjectsWarning;
    public static ContextStyle Secondary;
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.CsharpSpecificOccurrenceKindIconsProvider : object {
    private Dictionary`2<OccurrenceKind, IconId> myIconsMap;
    public sealed virtual IconId GetImageId(OccurrenceKind declaredElement);
    public sealed virtual int GetPriority(OccurrenceKind occurrenceKind);
}
public static class JetBrains.ReSharper.Feature.Services.Occurrences.CSharpSpecificOccurrenceKinds : object {
    [NotNullAttribute]
public static OccurrenceKind TypeConversions;
    [NotNullAttribute]
public static OccurrenceKind TypeChecking;
    [NotNullAttribute]
public static OccurrenceKind UsagesInUsings;
    [NotNullAttribute]
public static OccurrenceKind StaticClassMemberAccess;
    [NotNullAttribute]
public static OccurrenceKind NestedClassAccess;
    [NotNullAttribute]
public static OccurrenceKind TypeofUsage;
    [NotNullAttribute]
public static OccurrenceKind DefaultUsage;
    [NotNullAttribute]
public static OccurrenceKind ConstantDeclartion;
    [NotNullAttribute]
public static OccurrenceKind EventDeclaration;
    [NotNullAttribute]
public static OccurrenceKind PropertyDeclaration;
    [NotNullAttribute]
public static OccurrenceKind OperatorDeclaration;
    [NotNullAttribute]
public static OccurrenceKind ParameterDeclaration;
    [NotNullAttribute]
public static OccurrenceKind ParameterNonExt;
    [NotNullAttribute]
public static OccurrenceKind ParameterExt;
    [NotNullAttribute]
public static OccurrenceKind CatchClause;
    [NotNullAttribute]
public static OccurrenceKind TypeArgument;
    [NotNullAttribute]
public static OccurrenceKind ConstraintUsage;
    [NotNullAttribute]
public static OccurrenceKind ReturnTypeUsage;
    [NotNullAttribute]
public static OccurrenceKind TupleComponent;
    private static CSharpSpecificOccurrenceKinds();
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.CustomRangeOccurrence : RangeOccurrence {
    protected bool CheckForLineOffsets { get; }
    public CustomRangeOccurrence(IPsiSourceFile sourceFile, DocumentRange documentRange, OccurrencePresentationOptions options);
    protected virtual bool get_CheckForLineOffsets();
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.Feature.Services.Occurrences.DeclaredElementExtensions : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
internal static IDeclaredElement GetContainingElement(IDeclaredElement declaredElement);
    [ExtensionAttribute]
internal static string GetFullPresentationName(IDeclaredElement declaredElement);
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.DeclaredElementInAssemblyAttributeOccurrence : AssemblyAttributeOccurrenceBase {
    [CompilerGeneratedAttribute]
private DeclaredElementEnvoy`1<IDeclaredElement> <TargetEnvoy>k__BackingField;
    [NotNullAttribute]
public DeclaredElementEnvoy`1<IDeclaredElement> TargetEnvoy { get; }
    public DeclaredElementInAssemblyAttributeOccurrence(IAssembly assembly, IDeclaredElement target, CustomAttributeTargetPosition targetPosition);
    [CompilerGeneratedAttribute]
public DeclaredElementEnvoy`1<IDeclaredElement> get_TargetEnvoy();
    protected virtual ICompiledNavigationTarget GetNavigationTarget();
    protected virtual bool IsTargetEqual(IAssemblyAttributeOccurrence other);
    protected virtual int GetTargetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.DeclaredElementInstanceOccurrence : DeclaredElementOccurrence {
    [CompilerGeneratedAttribute]
private ISubstitution <Substitution>k__BackingField;
    public ISubstitution Substitution { get; }
    public DeclaredElementInstanceOccurrence(DeclaredElementInstance element, OccurrenceType occurrenceKind);
    public DeclaredElementInstanceOccurrence(DeclaredElementInstance element, OccurrencePresentationOptions options, OccurrenceType occurrenceKind);
    [CompilerGeneratedAttribute]
public ISubstitution get_Substitution();
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.DeclaredElementInstanceOccurrencePresenter : DeclaredElementOccurrencePresenter {
    public virtual bool IsApplicable(IOccurrence occurrence);
    protected virtual void DisplayMainText(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions options, IDeclaredElement declaredElement);
    protected virtual void DisplayCustomContainerText(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions options, IDeclaredElement element);
}
[DebuggerDisplayAttribute("{DumpToString()}")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.DeclaredElementOccurrence : object {
    [NotNullAttribute]
private IDeclaredElementEnvoy myDisplayElement;
    [CanBeNullAttribute]
private IDeclaredElementEnvoy myOccurrenceElement;
    private IDeclaredElementEnvoy myNamespace;
    private IDeclaredElementEnvoy myTypeElement;
    private IDeclaredElementEnvoy myTypeMember;
    private ProjectModelElementEnvoy myProjectModelElement;
    private ISolution mySolution;
    private OccurrenceMergeContext myMergeContext;
    private static TextRange ourTextRange;
    [CompilerGeneratedAttribute]
private SearchTargetRole <SearchTargetRole>k__BackingField;
    [CompilerGeneratedAttribute]
private OccurrenceType <OccurrenceType>k__BackingField;
    [CompilerGeneratedAttribute]
private OccurrencePresentationOptions <PresentationOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private OccurrencePresentationOptions <NavigatePresentationOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiModule <CachedPsiModule>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectFile <CachedProjectItem>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CachedName>k__BackingField;
    private IDeclaredElementEnvoy JetBrains.ReSharper.Feature.Services.Occurrences.IDeclaredElementOccurrence.OccurrenceElement { get; }
    private IDeclaredElementEnvoy JetBrains.ReSharper.Feature.Services.Occurrences.IDeclaredElementOccurrence.DisplayElement { get; }
    [CanBeNullAttribute]
public IDeclaredElementEnvoy OccurrenceElement { get; }
    [NotNullAttribute]
public IDeclaredElementEnvoy DisplayElement { get; }
    public SearchTargetRole SearchTargetRole { get; public set; }
    public bool IsValid { get; }
    public OccurrenceType OccurrenceType { get; }
    public OccurrencePresentationOptions PresentationOptions { get; public set; }
    public OccurrencePresentationOptions NavigatePresentationOptions { get; public set; }
    public int Level { get; public set; }
    public OccurrenceMergeContext MergeContext { get; }
    [CanBeNullAttribute]
public IPsiModule CachedPsiModule { get; }
    [CanBeNullAttribute]
public IProjectFile CachedProjectItem { get; }
    internal string CachedName { get; }
    public DeclaredElementOccurrence(IDeclaredElement element, OccurrenceType occurrenceKind);
    public DeclaredElementOccurrence(IDeclaredElement element, OccurrencePresentationOptions options, OccurrenceType occurrenceKind);
    private static DeclaredElementOccurrence();
    private static IPsiSourceFile GetPsiSourceFile(IDeclaredElement elementForSourceFile);
    public static IDeclaredElement GetDisplayElement(IDeclaredElement element);
    private sealed virtual override IDeclaredElementEnvoy JetBrains.ReSharper.Feature.Services.Occurrences.IDeclaredElementOccurrence.get_OccurrenceElement();
    private sealed virtual override IDeclaredElementEnvoy JetBrains.ReSharper.Feature.Services.Occurrences.IDeclaredElementOccurrence.get_DisplayElement();
    public virtual IDeclaredElementEnvoy get_OccurrenceElement();
    public virtual IDeclaredElementEnvoy get_DisplayElement();
    [CompilerGeneratedAttribute]
public sealed virtual SearchTargetRole get_SearchTargetRole();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SearchTargetRole(SearchTargetRole value);
    public sealed virtual bool get_IsValid();
    public virtual IDeclaredElementEnvoy GetNamespace();
    public virtual bool Navigate(ISolution solution, PopupWindowContextSource windowContext, bool transferFocus, TabOptions tabOptions);
    public void AdjustLevel(int level, IDeclaredElement declaredElement);
    [CompilerGeneratedAttribute]
public sealed virtual OccurrenceType get_OccurrenceType();
    [NotNullAttribute]
public ProjectModelElementEnvoy GetProjectModelElementEnvoy();
    public sealed virtual ISolution GetSolution();
    public virtual TextRange GetTextRange();
    public virtual IDeclaredElementEnvoy GetTypeElement();
    public virtual IDeclaredElementEnvoy GetTypeMember();
    public virtual string DumpToString();
    [CompilerGeneratedAttribute]
public sealed virtual OccurrencePresentationOptions get_PresentationOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PresentationOptions(OccurrencePresentationOptions value);
    [CompilerGeneratedAttribute]
public OccurrencePresentationOptions get_NavigatePresentationOptions();
    [CompilerGeneratedAttribute]
public void set_NavigatePresentationOptions(OccurrencePresentationOptions value);
    [CompilerGeneratedAttribute]
public int get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(int value);
    public virtual OccurrenceMergeContext get_MergeContext();
    public void BindMergeContext(OccurrenceMergeContext mergeContext);
    [CompilerGeneratedAttribute]
public IPsiModule get_CachedPsiModule();
    [CompilerGeneratedAttribute]
public IProjectFile get_CachedProjectItem();
    [CompilerGeneratedAttribute]
internal string get_CachedName();
    public sealed virtual void ResetCache();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.DeclaredElementOccurrenceKindProvider : object {
    public static OccurrenceKind Class;
    public static OccurrenceKind Struct;
    public static OccurrenceKind Enum;
    public static OccurrenceKind Interface;
    public static OccurrenceKind TypeMember;
    public static OccurrenceKind Property;
    public static OccurrenceKind Accessor;
    public static OccurrenceKind Field;
    public static OccurrenceKind Event;
    public static OccurrenceKind Constructor;
    public static OccurrenceKind Method;
    public static OccurrenceKind Operator;
    public static OccurrenceKind Delegate;
    private static DeclaredElementOccurrenceKindProvider();
    public virtual ICollection`1<OccurrenceKind> GetOccurrenceKinds(IOccurrence occurrence);
    [CanBeNullAttribute]
public static OccurrenceKind GetKindForDeclaredElement(IDeclaredElement element);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Occurrences.DeclaredElementOccurrenceKindProvider/<GetAllPossibleOccurrenceKinds>d__15")]
public virtual IEnumerable`1<OccurrenceKind> GetAllPossibleOccurrenceKinds();
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.DeclaredElementOccurrencePresenter : object {
    public sealed virtual bool Present(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions options);
    protected virtual void AdjustContextStyle(IMenuItemDescriptor descriptor, OccurrencePresentationOptions options, IDeclaredElement declaredElement);
    protected virtual void DisplayLocationAndGlyph(IMenuItemDescriptor descriptor, OccurrencePresentationOptions options, IDeclaredElement element, DeclaredElementOccurrence declaredElementOccurrence, bool specifyVersion, Nullable`1<DocumentCoords> coords);
    protected virtual RichText GetModuleName(IModule module, bool alwaysSpecifyVersion, DeclaredElementOccurrence declaredElementOccurrence, String& disambiguation);
    protected virtual void DisplayCustomContainerText(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions options, IDeclaredElement element);
    protected virtual void DisplayCustomContainerText(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions options, IDeclaredElement element, ISubstitution substitution);
    protected virtual void DisplayMainText(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions options, IDeclaredElement declaredElement);
    protected virtual void DisplayMainText(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions options, IDeclaredElement declaredElement, ISubstitution substitution);
    protected virtual void DisplayRelatedFile(IMenuItemDescriptor descriptor, OccurrencePresentationOptions options, DeclaredElementOccurrence declaredElementOccurrence);
    public virtual bool IsApplicable(IOccurrence occurrence);
}
[OccurrenceProviderAttribute]
public class JetBrains.ReSharper.Feature.Services.Occurrences.DeclaredElementOccurrenceProvider : object {
    public sealed virtual IOccurrence MakeOccurrence(FindResult result);
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.DecompiledFileOccurrence : object {
    private VirtualFileSystemPath myFilePath;
    private TextRange myTextRange;
    private IMenuItemDescriptor myCachedPresentation;
    private ISolution mySolution;
    [CompilerGeneratedAttribute]
private OccurrencePresentationOptions <PresentationOptions>k__BackingField;
    public IMenuItemDescriptor CachedPresentation { get; }
    public TextRange TextRange { get; }
    public ProjectModelElementEnvoy ProjectModelElementEnvoy { get; }
    public DeclaredElementEnvoy`1<ITypeMember> TypeMember { get; }
    public DeclaredElementEnvoy`1<ITypeElement> TypeElement { get; }
    public DeclaredElementEnvoy`1<INamespace> Namespace { get; }
    public OccurrenceType OccurrenceType { get; }
    public bool IsValid { get; }
    public object MergeKey { get; }
    public IList`1<IOccurrence> MergedItems { get; }
    public OccurrencePresentationOptions PresentationOptions { get; public set; }
    public DecompiledFileOccurrence(VirtualFileSystemPath filePath, TextRange textRange, IMenuItemDescriptor cachedPresentation, ISolution solution);
    public IMenuItemDescriptor get_CachedPresentation();
    public TextRange get_TextRange();
    public ProjectModelElementEnvoy get_ProjectModelElementEnvoy();
    public DeclaredElementEnvoy`1<ITypeMember> get_TypeMember();
    public DeclaredElementEnvoy`1<ITypeElement> get_TypeElement();
    public DeclaredElementEnvoy`1<INamespace> get_Namespace();
    public sealed virtual ISolution GetSolution();
    public sealed virtual OccurrenceType get_OccurrenceType();
    public sealed virtual bool get_IsValid();
    public object get_MergeKey();
    public IList`1<IOccurrence> get_MergedItems();
    public sealed virtual bool Navigate(ISolution solution, PopupWindowContextSource windowContext, bool transferFocus, TabOptions tabOptions);
    public sealed virtual string DumpToString();
    [CompilerGeneratedAttribute]
public sealed virtual OccurrencePresentationOptions get_PresentationOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PresentationOptions(OccurrencePresentationOptions value);
}
[OccurrenceProviderAttribute]
public class JetBrains.ReSharper.Feature.Services.Occurrences.DefaultOccurrenceProvider : object {
    public sealed virtual IOccurrence MakeOccurrence(FindResult result);
    private static bool DoMakeOccurrence(DocumentRange documentRange, ISolution solution, IPsiSourceFile psiSourceFile, IProjectFile& projectFile);
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.ExternalSourceOccurrence : object {
    private VirtualFileSystemPath myFilePath;
    private TextRange myTextRange;
    private IMenuItemDescriptor myCachedPresentation;
    private ISolution mySolution;
    private OccurrenceMergeContext myMergeContext;
    [CompilerGeneratedAttribute]
private OccurrencePresentationOptions <PresentationOptions>k__BackingField;
    public IMenuItemDescriptor CachedPresentation { get; }
    public OccurrenceType OccurrenceType { get; }
    public bool IsValid { get; }
    public OccurrencePresentationOptions PresentationOptions { get; public set; }
    public OccurrenceMergeContext MergeContext { get; }
    public ExternalSourceOccurrence(VirtualFileSystemPath filePath, TextRange textRange, IMenuItemDescriptor cachedPresentation, ISolution solution);
    public IMenuItemDescriptor get_CachedPresentation();
    public sealed virtual ISolution GetSolution();
    public TextRange GetTextRange();
    public ProjectModelElementEnvoy GetProjectModelElementEnvoy();
    public DeclaredElementEnvoy`1<ITypeMember> GetTypeMember();
    public DeclaredElementEnvoy`1<ITypeElement> GetTypeElement();
    public DeclaredElementEnvoy`1<INamespace> GetNamespace();
    public sealed virtual OccurrenceType get_OccurrenceType();
    public sealed virtual bool get_IsValid();
    public sealed virtual bool Navigate(ISolution solution, PopupWindowContextSource windowContext, bool transferFocus, TabOptions tabOptions);
    public sealed virtual string DumpToString();
    [CompilerGeneratedAttribute]
public sealed virtual OccurrencePresentationOptions get_PresentationOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PresentationOptions(OccurrencePresentationOptions value);
    public OccurrenceMergeContext get_MergeContext();
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.FileMemberAspectOccurrence : RangeOccurrence {
    private IGotoFileMemberAspect myAspect;
    private PresentationState myState;
    public IGotoFileMemberAspect Aspect { get; }
    public PresentationState PresentationState { get; }
    protected object MergeKey { get; }
    public FileMemberAspectOccurrence(IPsiSourceFile sourceFile, IGotoFileMemberAspect aspect, PresentationState state, OccurrencePresentationOptions occurrencePresentationOptions);
    public IGotoFileMemberAspect get_Aspect();
    public PresentationState get_PresentationState();
    protected virtual object get_MergeKey();
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.FileSystemPathOccurrence : object {
    private VirtualFileSystemPath myPath;
    private ISolution mySolution;
    private OccurrenceMergeContext myMergeContext;
    [CompilerGeneratedAttribute]
private OccurrencePresentationOptions <PresentationOptions>k__BackingField;
    public OccurrenceType OccurrenceType { get; }
    public bool IsValid { get; }
    public OccurrencePresentationOptions PresentationOptions { get; public set; }
    public VirtualFileSystemPath Path { get; }
    public OccurrenceMergeContext MergeContext { get; }
    public FileSystemPathOccurrence(VirtualFileSystemPath path, ISolution solution);
    public sealed virtual ISolution GetSolution();
    public TextRange GetTextRange();
    public ProjectModelElementEnvoy GetProjectModelElementEnvoy();
    public DeclaredElementEnvoy`1<ITypeMember> GetTypeMember();
    public DeclaredElementEnvoy`1<ITypeElement> GetTypeElement();
    public DeclaredElementEnvoy`1<INamespace> GetNamespace();
    public sealed virtual OccurrenceType get_OccurrenceType();
    public sealed virtual bool get_IsValid();
    public sealed virtual bool Navigate(ISolution solution, PopupWindowContextSource windowContext, bool transferFocus, TabOptions tabOptions);
    public sealed virtual string DumpToString();
    [CompilerGeneratedAttribute]
public sealed virtual OccurrencePresentationOptions get_PresentationOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PresentationOptions(OccurrencePresentationOptions value);
    public VirtualFileSystemPath get_Path();
    public OccurrenceMergeContext get_MergeContext();
    protected bool Equals(FileSystemPathOccurrence other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.FuzzyTextOccurrence : TextOccurrence {
    public Int32[] MarkedIndices;
    public FuzzyTextOccurrence(IPsiSourceFile sourceFile, DocumentRange documentRange, OccurrencePresentationOptions presentationOptions, IEnumerable`1<int> markedIndices);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.GeneratedCodeOccurrenceKindsProvider : object {
    private static OccurrenceKindClassificationAxis ourGeneratedCodeClassificationAxis;
    [NotNullAttribute]
public static OccurrenceKind UsageFromGeneratedCodeKind;
    private GenerateUtilsCache myGenerateUtils;
    public GeneratedCodeOccurrenceKindsProvider(GenerateUtilsCache generateUtils);
    private static GeneratedCodeOccurrenceKindsProvider();
    public sealed virtual ICollection`1<OccurrenceKind> GetOccurrenceKinds(IOccurrence occurrence);
    public bool IsGenerated(IOccurrence occurrence);
    public sealed virtual IEnumerable`1<OccurrenceKind> GetAllPossibleOccurrenceKinds();
}
public enum JetBrains.ReSharper.Feature.Services.Occurrences.GlobalLocationStyle : Enum {
    public int value__;
    public static GlobalLocationStyle Default;
    public static GlobalLocationStyle None;
    public static GlobalLocationStyle File;
    public static GlobalLocationStyle RelatedFile;
    public static GlobalLocationStyle Type;
    public static GlobalLocationStyle Member;
    public static GlobalLocationStyle Icon;
}
public interface JetBrains.ReSharper.Feature.Services.Occurrences.IAssemblyAttributeOccurrence {
    [NotNullAttribute]
public CustomAttributeTargetPosition TargetPosition { get; }
    [NotNullAttribute]
public OccurrenceMergeContext MergeContext { get; }
    public abstract virtual CustomAttributeTargetPosition get_TargetPosition();
    [NotNullAttribute]
public abstract virtual ProjectModelElementEnvoy GetProjectModelElementEnvoy();
    [CanBeNullAttribute]
public abstract virtual DeclaredElementEnvoy`1<ITypeMember> GetTypeMember();
    [CanBeNullAttribute]
public abstract virtual DeclaredElementEnvoy`1<ITypeElement> GetTypeElement();
    [CanBeNullAttribute]
public abstract virtual DeclaredElementEnvoy`1<INamespace> GetNamespace();
    public abstract virtual TextRange GetTextRange();
    public abstract virtual OccurrenceMergeContext get_MergeContext();
}
public interface JetBrains.ReSharper.Feature.Services.Occurrences.IAsyncOccurrenceBridge {
    public Lifetime Lifetime { get; }
    public IProgressIndicator Indicator { get; }
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual IProgressIndicator get_Indicator();
    public abstract virtual void Close();
    public abstract virtual void CommitResults(ICollection`1<IOccurrence> results, Action beforeItemExecution);
    public abstract virtual void ProcessAsyncResult(Lifetime lifetime, IAsyncSearchResult asyncResult);
}
public interface JetBrains.ReSharper.Feature.Services.Occurrences.ICompareOccurrencesCache {
    [NotNullAttribute]
public abstract virtual string GetRangeOccurrenceText(RangeOccurrence rangeOccurrence, Func`2<RangeOccurrence, string> valueFactory);
}
public enum JetBrains.ReSharper.Feature.Services.Occurrences.IconDisplayStyle : Enum {
    public int value__;
    public static IconDisplayStyle Default;
    public static IconDisplayStyle NoIcon;
    public static IconDisplayStyle OccurrenceKind;
    public static IconDisplayStyle OccurrenceEntityType;
    public static IconDisplayStyle File;
}
public interface JetBrains.ReSharper.Feature.Services.Occurrences.IDeclaredElementOccurrence {
    [CanBeNullAttribute]
public IDeclaredElementEnvoy OccurrenceElement { get; }
    [NotNullAttribute]
public IDeclaredElementEnvoy DisplayElement { get; }
    public SearchTargetRole SearchTargetRole { get; public set; }
    public abstract virtual IDeclaredElementEnvoy get_OccurrenceElement();
    public abstract virtual IDeclaredElementEnvoy get_DisplayElement();
    public abstract virtual SearchTargetRole get_SearchTargetRole();
    public abstract virtual void set_SearchTargetRole(SearchTargetRole value);
}
public interface JetBrains.ReSharper.Feature.Services.Occurrences.IHaveDocumentRangeOccurrence {
    public string Line { get; }
    public TextRange OccurrenceRange { get; }
    public DocumentCoords DocumentCoords { get; }
    public abstract virtual string get_Line();
    public abstract virtual TextRange get_OccurrenceRange();
    public abstract virtual DocumentCoords get_DocumentCoords();
}
public interface JetBrains.ReSharper.Feature.Services.Occurrences.INavigatable {
    public abstract virtual bool Navigate(ISolution solution, PopupWindowContextSource windowContext, bool transferFocus, TabOptions tabOptions);
}
public interface JetBrains.ReSharper.Feature.Services.Occurrences.IOccurrence {
    public OccurrenceType OccurrenceType { get; }
    public bool IsValid { get; }
    public OccurrencePresentationOptions PresentationOptions { get; public set; }
    [CanBeNullAttribute]
public abstract virtual ISolution GetSolution();
    public abstract virtual OccurrenceType get_OccurrenceType();
    public abstract virtual bool get_IsValid();
    public abstract virtual string DumpToString();
    public abstract virtual OccurrencePresentationOptions get_PresentationOptions();
    public abstract virtual void set_PresentationOptions(OccurrencePresentationOptions value);
}
public interface JetBrains.ReSharper.Feature.Services.Occurrences.IOccurrenceKindIconProvider {
    [CanBeNullAttribute]
public abstract virtual IconId GetImageId(OccurrenceKind declaredElement);
    public abstract virtual int GetPriority(OccurrenceKind occurrenceKind);
}
public interface JetBrains.ReSharper.Feature.Services.Occurrences.IOccurrenceKindOwner {
    [NotNullAttribute]
public ICollection`1<OccurrenceKind> Kinds { get; }
    public abstract virtual ICollection`1<OccurrenceKind> get_Kinds();
}
public interface JetBrains.ReSharper.Feature.Services.Occurrences.IOccurrenceKindProvider {
    [CanBeNullAttribute]
public abstract virtual ICollection`1<OccurrenceKind> GetOccurrenceKinds(IOccurrence occurrence);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<OccurrenceKind> GetAllPossibleOccurrenceKinds();
}
public interface JetBrains.ReSharper.Feature.Services.Occurrences.IOccurrencePopupMenu {
    public bool IsAsyncSupport { get; }
    public Lifetime Lifetime { get; }
    [NotNullAttribute]
public IProgressIndicator ProgressIndicator { get; }
    [NotNullAttribute]
public ISimpleSignal SwitchToFindUsages { get; }
    public abstract virtual bool get_IsAsyncSupport();
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual IProgressIndicator get_ProgressIndicator();
    public abstract virtual ISimpleSignal get_SwitchToFindUsages();
    public abstract virtual void Add(IOccurrence occurrence);
    public abstract virtual void Close();
    public abstract virtual void CommitResults(ICollection`1<IOccurrence> results, Func`1<IOccurrenceBrowserDescriptor> descriptorBuilder, Func`1<Pair`2<ICollection`1<ITypeElement>, TypeDependenciesOptions>> diagramBuilder);
}
public interface JetBrains.ReSharper.Feature.Services.Occurrences.IOccurrencePresenter {
    public abstract virtual bool Present(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions occurrencePresentationOptions);
    public abstract virtual bool IsApplicable(IOccurrence occurrence);
}
public interface JetBrains.ReSharper.Feature.Services.Occurrences.IOccurrenceProvider {
    [CanBeNullAttribute]
public abstract virtual IOccurrence MakeOccurrence(FindResult findResult);
}
public interface JetBrains.ReSharper.Feature.Services.Occurrences.IOccurrenceStyleProvider {
    public bool DisplayContainingElement { get; }
    public PreferLocationStyle LocationStyle { get; }
    public abstract virtual bool get_DisplayContainingElement();
    public abstract virtual PreferLocationStyle get_LocationStyle();
}
public interface JetBrains.ReSharper.Feature.Services.Occurrences.ISemanticUsageProvider {
    [CanBeNullAttribute]
public abstract virtual ICollection`1<OccurrenceKind> GetOccurrenceKinds(IOccurrence occurrence);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<OccurrenceKind> GetAllPossibleOccurrenceKinds();
}
public interface JetBrains.ReSharper.Feature.Services.Occurrences.IStringOccurrence {
    [NotNullAttribute]
public string S { get; }
    [NotNullAttribute]
public string MatchedLine { get; }
    public TextRange MatchedRange { get; }
    public abstract virtual string get_S();
    public abstract virtual string get_MatchedLine();
    public abstract virtual TextRange get_MatchedRange();
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.MetadataTokenInCompiledElementOccurrence : CompiledElementOccurrence {
    [CompilerGeneratedAttribute]
private MetadataToken <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectModelElementEnvoy <TokenAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private MatchingInfo <AssemblyNameMatchingInfo>k__BackingField;
    public MetadataToken Token { get; }
    public ProjectModelElementEnvoy TokenAssembly { get; }
    [CanBeNullAttribute]
public MatchingInfo AssemblyNameMatchingInfo { get; }
    public MetadataTokenInCompiledElementOccurrence(MetadataToken token, IAssemblyPsiModule tokenAssembly, MatchingInfo assemblyNameMatchingInfo, ICompiledElement element, OccurrencePresentationOptions occurrencePresentationOptions);
    [CompilerGeneratedAttribute]
public MetadataToken get_Token();
    [CompilerGeneratedAttribute]
public ProjectModelElementEnvoy get_TokenAssembly();
    [CompilerGeneratedAttribute]
public MatchingInfo get_AssemblyNameMatchingInfo();
}
[DebuggerDisplayAttribute("{DumpToString()}")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.ModuleReferenceOccurrence : object {
    [CanBeNullAttribute]
private ProjectModelElementEnvoy myProjectModelElementEnvoy;
    [CanBeNullAttribute]
private IModule myReferencedModule;
    private bool myIsNested;
    private OccurrenceMergeContext myMergeContext;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private OccurrencePresentationOptions <PresentationOptions>k__BackingField;
    [NotNullAttribute]
public string Name { get; }
    [CanBeNullAttribute]
public IModule ReferencedModule { get; }
    [CanBeNullAttribute]
public IModule Owner { get; }
    [CanBeNullAttribute]
public IProjectToModuleReference Reference { get; }
    public OccurrenceType OccurrenceType { get; }
    public bool IsValid { get; }
    public OccurrencePresentationOptions PresentationOptions { get; public set; }
    public bool IsNested { get; }
    protected object MergeKey { get; }
    public OccurrenceMergeContext MergeContext { get; }
    public ModuleReferenceOccurrence(IProjectToModuleReference reference, bool isNested);
    public ModuleReferenceOccurrence(IProjectToModuleReference reference, OccurrencePresentationOptions presentationOptions, bool isNested);
    [CompilerGeneratedAttribute]
public string get_Name();
    public IModule get_ReferencedModule();
    public sealed virtual ISolution GetSolution();
    public TextRange GetTextRange();
    public ProjectModelElementEnvoy GetProjectModelElementEnvoy();
    public IModule get_Owner();
    public IProjectToModuleReference get_Reference();
    public DeclaredElementEnvoy`1<ITypeMember> GetTypeMember();
    public DeclaredElementEnvoy`1<ITypeElement> GetTypeElement();
    public DeclaredElementEnvoy`1<INamespace> GetNamespace();
    public sealed virtual OccurrenceType get_OccurrenceType();
    public sealed virtual bool get_IsValid();
    public sealed virtual bool Navigate(ISolution solution, PopupWindowContextSource windowContext, bool transferFocus, TabOptions tabOptions);
    public sealed virtual string DumpToString();
    [CompilerGeneratedAttribute]
public sealed virtual OccurrencePresentationOptions get_PresentationOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PresentationOptions(OccurrencePresentationOptions value);
    public bool get_IsNested();
    protected virtual object get_MergeKey();
    public OccurrenceMergeContext get_MergeContext();
    protected bool Equals(ModuleReferenceOccurrence other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceAsyncBridge : object {
    private static ILogger ourLog;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private IShellLocks myLocks;
    private Func`1<IAsyncOccurrenceBrowserDescriptor> myDescriptorBuilder;
    [NotNullAttribute]
private BlockingCollection`1<IOccurrence> myBlockingCollection;
    [NotNullAttribute]
private LifetimeDefinition myLifetimeDefinition;
    [NotNullAttribute]
private LifetimeDefinition mySearchLifetimeDefinition;
    private ISignal`1<bool> myEmptySignal;
    [CanBeNullAttribute]
private IProjectFile myCurrentProjectFile;
    private TextRange myCurrentTextRange;
    private bool myGotoSingleUsageImmediately;
    private int myFounedCount;
    [CanBeNullAttribute]
private IAsyncOccurrenceBrowserDescriptor myAsyncOccurrenceBrowserDescriptor;
    private object myLock;
    private ProgressIndicator myProgressIndicator;
    private IMainWindowPopupWindowContext myMainWindowPopupWindowContext;
    private bool myIsShown;
    [CompilerGeneratedAttribute]
private IProgressIndicator <Indicator>k__BackingField;
    public Lifetime Lifetime { get; }
    public IProgressIndicator Indicator { get; }
    public OccurrenceAsyncBridge(LifetimeDefinition searchLifetimeDefinition, IDataContext context, ISolution solution, Func`1<IAsyncOccurrenceBrowserDescriptor> descriptorBuilder, IMainWindowPopupWindowContext mainWindowPopupWindowContext, bool isShown);
    private static OccurrenceAsyncBridge();
    public sealed virtual Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public sealed virtual IProgressIndicator get_Indicator();
    private void ExecuteItem(object key);
    private void TryShowDescriptor();
    private void BindDescriptor(IAsyncOccurrenceBrowserDescriptor descriptor, LifetimeDefinition lifetimeDefinition, IShellLocks shellLocks, IProgressIndicatorModel progressIndicator);
    private void UpdateItems(IAsyncOccurrenceBrowserDescriptor descriptor, BlockingCollection`1<IOccurrence> collection, ISolution solution);
    private static void TryAddPending(IAsyncOccurrenceBrowserDescriptor descriptor, BlockingCollection`1<IOccurrence> collection);
    public void Add(IOccurrence occurrence);
    public void FinishAdding();
    public sealed virtual void ProcessAsyncResult(Lifetime lifetime, IAsyncSearchResult asyncResult);
    public sealed virtual void CommitResults(ICollection`1<IOccurrence> results, Action beforeItemExecution);
    public sealed virtual void Close();
    [CompilerGeneratedAttribute]
private void <.ctor>b__22_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__22_1();
    [CompilerGeneratedAttribute]
private void <.ctor>b__22_3();
    [CompilerGeneratedAttribute]
private void <.ctor>b__22_2();
    [CompilerGeneratedAttribute]
private void <TryShowDescriptor>g__ShowAsyncDescriptor|24_0();
    [CompilerGeneratedAttribute]
private void <ProcessAsyncResult>b__30_0(IOccurrence o);
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceEqualityComparer : object {
    public static OccurrenceEqualityComparer Instance;
    private static OccurrenceEqualityComparer();
    public sealed virtual bool Equals(IOccurrence x, IOccurrence y);
    private static bool CompareReferenceOccurrences(ReferenceOccurrence xReferenceOccurrence, ReferenceOccurrence yReferenceOccurrence);
    private static bool CompareDeclaredElementOccurrences(DeclaredElementOccurrence xDeclaredElementOccurrence, DeclaredElementOccurrence yDeclaredElementOccurrence);
    private static bool CompareRangeOccurrences(RangeOccurrence xRangeOccurrence, RangeOccurrence yRangeOccurrence);
    public sealed virtual int GetHashCode(IOccurrence occurrence);
    private static int GetReferenceOccurrenceHashCode(ReferenceOccurrence referenceOccurrence);
    private static int GetRangeOccurrenceHashCode(RangeOccurrence rangeOccurrence);
    private static int GetDeclaredElementOccurrenceHashCode(DeclaredElementOccurrence declaredElementOccurrence);
    private sealed virtual override bool System.Collections.Generic.IEqualityComparer<System.Object>.Equals(object x, object y);
    private sealed virtual override int System.Collections.Generic.IEqualityComparer<System.Object>.GetHashCode(object obj);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceFactory : object {
    private IEnumerable`1<IOccurrenceProvider> myProviders;
    public OccurrenceFactory(IEnumerable`1<IOccurrenceProvider> providers);
    [CanBeNullAttribute]
public IOccurrence MakeOccurrence(FindResult result);
}
public interface JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceInformation.IOccurrenceContextService {
    [CanBeNullAttribute]
public abstract virtual ITreeNode FindEnclosingContextNode(ITreeNode occurrenceNode);
}
public interface JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceInformation.IOccurrenceInformationProvider {
    [CanBeNullAttribute]
public abstract virtual IDeclaredElementEnvoy GetTypeMember(IOccurrence occurrence);
    [CanBeNullAttribute]
public abstract virtual IDeclaredElementEnvoy GetTypeElement(IOccurrence occurrence);
    [CanBeNullAttribute]
public abstract virtual IDeclaredElementEnvoy GetNamespace(IOccurrence occurrence);
    [NotNullAttribute]
public abstract virtual OccurrenceMergeContext GetMergeContext(IOccurrence occurrence);
    public abstract virtual TextRange GetTextRange(IOccurrence occurrence);
    [CanBeNullAttribute]
public abstract virtual ProjectModelElementEnvoy GetProjectModelElementEnvoy(IOccurrence occurrence);
    public abstract virtual SourceFilePtr GetSourceFilePtr(IOccurrence occurrence);
    public abstract virtual bool IsApplicable(IOccurrence occurrence);
}
public interface JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceInformation.IOccurrenceInformationProvider2 {
    public abstract virtual void SetTabOptions(TabOptions tabOptions, IOccurrence occurrence);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceInformation.OccurrenceExtensions : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static VirtualFileSystemPath GetFileSystemPath(IOccurrence occurrence);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IDeclaredElementEnvoy GetTypeMember(IOccurrence occurrence);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IDeclaredElementEnvoy GetTypeElement(IOccurrence occurrence);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IDeclaredElementEnvoy GetNamespace(IOccurrence occurrence);
    [ExtensionAttribute]
[NotNullAttribute]
public static OccurrenceMergeContext GetMergeContext(IOccurrence occurrence);
    [ExtensionAttribute]
public static TextRange GetTextRange(IOccurrence occurrence);
    [ExtensionAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null=>null")]
public static ProjectModelElementEnvoy GetProjectModelElementEnvoy(IOccurrence occurrence);
    [ExtensionAttribute]
public static SourceFilePtr GetSourceFilePtr(IOccurrence occurrence);
    [ExtensionAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null=>null")]
public static IProject TryGetProject(IOccurrence occurrence);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IModule TryGetTargetModule(ReferenceOccurrence occurrence);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProjectElement TryGetProjectElement(IOccurrence occurrence);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceInformation.OccurrenceInformationManager : object {
    private SolutionFeaturePartsContainer myContainer;
    private Lazy`1<List`1<IOccurrenceInformationProvider>> myOccurrenceInformationProviders;
    public OccurrenceInformationManager(SolutionFeaturePartsContainer container);
    private IOccurrenceInformationProvider GetOccurrenceInformationProvider(IOccurrence occurrence);
    private IOccurrenceInformationProvider2 GetOccurrenceInformationProvider2(IOccurrence occurrence);
    [CanBeNullAttribute]
public IDeclaredElementEnvoy GetTypeMember(IOccurrence occurrence);
    [CanBeNullAttribute]
public void SetTabOptions(TabOptions options, IOccurrence occurrence);
    [CanBeNullAttribute]
public IDeclaredElementEnvoy GetTypeElement(IOccurrence occurrence);
    [CanBeNullAttribute]
public IDeclaredElementEnvoy GetNamespace(IOccurrence occurrence);
    [NotNullAttribute]
public OccurrenceMergeContext GetMergeContext(IOccurrence occurrence);
    public TextRange GetTextRange(IOccurrence occurrence);
    [CanBeNullAttribute]
public ProjectModelElementEnvoy GetProjectModelElementEnvoy(IOccurrence occurrence);
    public SourceFilePtr GetSourceFilePtr(IOccurrence occurrence);
    [CompilerGeneratedAttribute]
private List`1<IOccurrenceInformationProvider> <.ctor>b__2_0();
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceInformation.OccurrenceMergeContext : object {
    public static OccurrenceMergeContext Empty;
    [CanBeNullAttribute]
private object myMergeKey;
    private ICollection`1<IOccurrence> myMergeItems;
    [CanBeNullAttribute]
public object MergeKey { get; }
    [NotNullAttribute]
public ICollection`1<IOccurrence> Items { get; }
    public OccurrenceMergeContext(object mergeKey);
    private static OccurrenceMergeContext();
    public object get_MergeKey();
    public ICollection`1<IOccurrence> get_Items();
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceInformation.Providers.AssemblyAttributeOccurrenceInfoProvider : object {
    public sealed virtual IDeclaredElementEnvoy GetTypeMember(IOccurrence occurrence);
    public sealed virtual IDeclaredElementEnvoy GetTypeElement(IOccurrence occurrence);
    public sealed virtual IDeclaredElementEnvoy GetNamespace(IOccurrence occurrence);
    public sealed virtual OccurrenceMergeContext GetMergeContext(IOccurrence occurrence);
    public sealed virtual TextRange GetTextRange(IOccurrence occurrence);
    public sealed virtual ProjectModelElementEnvoy GetProjectModelElementEnvoy(IOccurrence occurrence);
    public sealed virtual SourceFilePtr GetSourceFilePtr(IOccurrence occurrence);
    public sealed virtual bool IsApplicable(IOccurrence occurrence);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceInformation.Providers.DeclaredElementOccurrenceInfoProvider : object {
    public sealed virtual IDeclaredElementEnvoy GetTypeMember(IOccurrence occurrence);
    public sealed virtual IDeclaredElementEnvoy GetTypeElement(IOccurrence occurrence);
    public sealed virtual IDeclaredElementEnvoy GetNamespace(IOccurrence occurrence);
    public sealed virtual OccurrenceMergeContext GetMergeContext(IOccurrence occurrence);
    public sealed virtual TextRange GetTextRange(IOccurrence occurrence);
    public sealed virtual ProjectModelElementEnvoy GetProjectModelElementEnvoy(IOccurrence occurrence);
    public sealed virtual SourceFilePtr GetSourceFilePtr(IOccurrence occurrence);
    public sealed virtual bool IsApplicable(IOccurrence occurrence);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceInformation.Providers.ExternalSourceOccurrenceInfoProvider : object {
    public sealed virtual IDeclaredElementEnvoy GetTypeMember(IOccurrence occurrence);
    public sealed virtual IDeclaredElementEnvoy GetTypeElement(IOccurrence occurrence);
    public sealed virtual IDeclaredElementEnvoy GetNamespace(IOccurrence occurrence);
    public sealed virtual OccurrenceMergeContext GetMergeContext(IOccurrence occurrence);
    public sealed virtual TextRange GetTextRange(IOccurrence occurrence);
    public sealed virtual ProjectModelElementEnvoy GetProjectModelElementEnvoy(IOccurrence occurrence);
    public sealed virtual SourceFilePtr GetSourceFilePtr(IOccurrence occurrence);
    public sealed virtual bool IsApplicable(IOccurrence occurrence);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceInformation.Providers.FileSystemPathOccurrenceInfoProvider : object {
    public sealed virtual IDeclaredElementEnvoy GetTypeMember(IOccurrence occurrence);
    public sealed virtual IDeclaredElementEnvoy GetTypeElement(IOccurrence occurrence);
    public sealed virtual IDeclaredElementEnvoy GetNamespace(IOccurrence occurrence);
    public sealed virtual OccurrenceMergeContext GetMergeContext(IOccurrence occurrence);
    public sealed virtual TextRange GetTextRange(IOccurrence occurrence);
    public sealed virtual ProjectModelElementEnvoy GetProjectModelElementEnvoy(IOccurrence occurrence);
    public sealed virtual SourceFilePtr GetSourceFilePtr(IOccurrence occurrence);
    public sealed virtual bool IsApplicable(IOccurrence occurrence);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceInformation.Providers.ModuleReferenceOccurrenceInfoProvider : object {
    public sealed virtual IDeclaredElementEnvoy GetTypeMember(IOccurrence occurrence);
    public sealed virtual IDeclaredElementEnvoy GetTypeElement(IOccurrence occurrence);
    public sealed virtual IDeclaredElementEnvoy GetNamespace(IOccurrence occurrence);
    public sealed virtual OccurrenceMergeContext GetMergeContext(IOccurrence occurrence);
    public sealed virtual TextRange GetTextRange(IOccurrence occurrence);
    public sealed virtual ProjectModelElementEnvoy GetProjectModelElementEnvoy(IOccurrence occurrence);
    public sealed virtual SourceFilePtr GetSourceFilePtr(IOccurrence occurrence);
    public sealed virtual bool IsApplicable(IOccurrence occurrence);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceInformation.Providers.NugetPackageInformationProvider : object {
    public sealed virtual IDeclaredElementEnvoy GetTypeMember(IOccurrence occurrence);
    public sealed virtual IDeclaredElementEnvoy GetTypeElement(IOccurrence occurrence);
    public sealed virtual IDeclaredElementEnvoy GetNamespace(IOccurrence occurrence);
    public sealed virtual OccurrenceMergeContext GetMergeContext(IOccurrence occurrence);
    public sealed virtual TextRange GetTextRange(IOccurrence occurrence);
    public sealed virtual ProjectModelElementEnvoy GetProjectModelElementEnvoy(IOccurrence occurrence);
    public sealed virtual SourceFilePtr GetSourceFilePtr(IOccurrence occurrence);
    public sealed virtual bool IsApplicable(IOccurrence occurrence);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceInformation.Providers.ProjectItemOccurrenceInfoProvider : object {
    public sealed virtual IDeclaredElementEnvoy GetTypeMember(IOccurrence occurrence);
    public sealed virtual IDeclaredElementEnvoy GetTypeElement(IOccurrence occurrence);
    public sealed virtual IDeclaredElementEnvoy GetNamespace(IOccurrence occurrence);
    public sealed virtual OccurrenceMergeContext GetMergeContext(IOccurrence occurrence);
    public sealed virtual TextRange GetTextRange(IOccurrence occurrence);
    public sealed virtual ProjectModelElementEnvoy GetProjectModelElementEnvoy(IOccurrence occurrence);
    public sealed virtual SourceFilePtr GetSourceFilePtr(IOccurrence occurrence);
    public sealed virtual bool IsApplicable(IOccurrence occurrence);
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceInformation.Providers.RangeOccurrenceInfoProvider : object {
    public sealed virtual IDeclaredElementEnvoy GetTypeMember(IOccurrence occurrence);
    public sealed virtual IDeclaredElementEnvoy GetTypeElement(IOccurrence occurrence);
    public sealed virtual IDeclaredElementEnvoy GetNamespace(IOccurrence occurrence);
    public sealed virtual OccurrenceMergeContext GetMergeContext(IOccurrence occurrence);
    public sealed virtual TextRange GetTextRange(IOccurrence occurrence);
    public sealed virtual ProjectModelElementEnvoy GetProjectModelElementEnvoy(IOccurrence occurrence);
    public sealed virtual SourceFilePtr GetSourceFilePtr(IOccurrence occurrence);
    public sealed virtual bool IsApplicable(IOccurrence occurrence);
    public sealed virtual void SetTabOptions(TabOptions tabOptions, IOccurrence occurrence);
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceKind : ConvertableEnumPattern`1<OccurrenceKind> {
    public static OccurrenceKindClassificationAxis SemanticAxis;
    [NotNullAttribute]
public static OccurrenceKind Read;
    [NotNullAttribute]
public static OccurrenceKind Write;
    [NotNullAttribute]
public static OccurrenceKind ReadWrite;
    [NotNullAttribute]
public static OccurrenceKind Invocation;
    [NotNullAttribute]
public static OccurrenceKind NameCapture;
    [NotNullAttribute]
public static OccurrenceKind DocumentationReference;
    [NotNullAttribute]
public static OccurrenceKind Attribute;
    [NotNullAttribute]
public static OccurrenceKind VBHandlesClause;
    [NotNullAttribute]
public static OccurrenceKind InterfaceQualification;
    [NotNullAttribute]
public static OccurrenceKind ExtendedType;
    [NotNullAttribute]
public static OccurrenceKind CompilerRelatedUsage;
    [NotNullAttribute]
public static OccurrenceKind DirectUsage;
    [NotNullAttribute]
public static OccurrenceKind UnitTest;
    [NotNullAttribute]
public static OccurrenceKind BaseMethodCall;
    [NotNullAttribute]
public static OccurrenceKind LocalVariableDeclaration;
    [NotNullAttribute]
public static OccurrenceKind FieldTypeDeclaration;
    [NotNullAttribute]
public static OccurrenceKind NewInstanceCreation;
    [NotNullAttribute]
public static OccurrenceKind NewArrayCreation;
    [NotNullAttribute]
public static OccurrenceKind InComment;
    [NotNullAttribute]
public static OccurrenceKind InString;
    [NotNullAttribute]
public static OccurrenceKind InXMLDoc;
    [NotNullAttribute]
public static OccurrenceKind Initializer;
    [NotNullAttribute]
public static OccurrenceKind Other;
    [CompilerGeneratedAttribute]
private OccurrenceKindClassificationAxis <Axis>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPrimary>k__BackingField;
    [NotNullAttribute]
public OccurrenceKindClassificationAxis Axis { get; }
    public string Name { get; }
    public bool IsPrimary { get; }
    private OccurrenceKind(string name, OccurrenceKindClassificationAxis axis, bool isPrimary);
    private static OccurrenceKind();
    [NotNullAttribute]
public static OccurrenceKind GetOrCreate(string name, OccurrenceKindClassificationAxis axis, bool isPrimary);
    [NotNullAttribute]
public static OccurrenceKind CreateSemantic(string name, bool isPrimary);
    [CompilerGeneratedAttribute]
public OccurrenceKindClassificationAxis get_Axis();
    public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_IsPrimary();
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceKindClassificationAxis : EnumPattern {
    [NotNullAttribute]
public static OccurrenceKindClassificationAxis Semantic;
    [NotNullAttribute]
public static OccurrenceKindClassificationAxis UnitTesting;
    [NotNullAttribute]
public static OccurrenceKindClassificationAxis Other;
    [NotNullAttribute]
public static OccurrenceKindClassificationAxis Hidden;
    [CompilerGeneratedAttribute]
private HidePolicy <VisibilityPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public HidePolicy VisibilityPolicy { get; }
    public int Priority { get; }
    public bool IsVisible { get; }
    public OccurrenceKindClassificationAxis(string name, int priority, HidePolicy hidePolicy);
    private static OccurrenceKindClassificationAxis();
    [CompilerGeneratedAttribute]
public HidePolicy get_VisibilityPolicy();
    [CompilerGeneratedAttribute]
public int get_Priority();
    public bool get_IsVisible();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceKindManager : object {
    private IImmutableList`1<IOccurrenceKindProvider> myProviders;
    private static OccurrenceKind[] ourDefaultOccurrenceKinds;
    public OccurrenceKindManager(IImmutableList`1<IOccurrenceKindProvider> providers);
    private static OccurrenceKindManager();
    public static OccurrenceKindManager GetInstance(ISolution solution);
    [NotNullAttribute]
public ICollection`1<OccurrenceKind> GetOccurrenceKinds(IOccurrence occurrence);
    [NotNullAttribute]
internal ICollection`1<OccurrenceKind> GetOccurrenceKindsCore(IOccurrence occurrence);
    public ICollection`1<OccurrenceKind> GetAllOccurrenceKinds();
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceMarshaller : object {
    public sealed virtual void Marshal(UnsafeWriter writer, CachedOccurrence value);
    public sealed virtual CachedOccurrence Unmarshal(UnsafeReader reader);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrencePopupMenu : object {
    public static IconId IconShowInFindResults;
    private ISolution mySolution;
    protected IShellLocks myLocks;
    private static object ourEtcItemKey;
    private Lifetime myLifetime;
    protected IMainWindowPopupWindowContext myMainWindowPopupWindowContext;
    public OccurrencePopupMenu(ISolution solution, IShellLocks locks, Lifetime lifetime, IMainWindowPopupWindowContext mainWindowPopupWindowContext);
    private static OccurrencePopupMenu();
    public static OccurrencePopupMenu GetInstance(ISolution solution);
    public virtual void ShowMenuGlobal(ICollection`1<IOccurrence> items, OccurrencePopupMenuOptions options);
    private void AddDiagramButton(Func`1<Pair`2<ICollection`1<ITypeElement>, TypeDependenciesOptions>> showOnDiagram, JetPopupMenu menu);
    public virtual void ShowMenuFromTextControl(IDataContext context, ICollection`1<IOccurrence> items, OccurrencePopupMenuOptions options);
    private JetPopupMenuItem CreateEtcItem(bool isOverflow);
    private JetPopupMenuItem CreateWarning(string text);
    protected virtual void AddFindResultBrowserButton(Func`1<IOccurrenceBrowserDescriptor> descriptorBuilder, JetPopupMenu menu);
    protected virtual void ShowInFindResultsHandler(Func`1<TDescriptor> descriptorBuilder);
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrencePopupMenuOptions : object {
    public static int ITEMS_COUNT_LIMIT;
    public static int VIEWPORT_SIZE;
    [CompilerGeneratedAttribute]
private IconId <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItemsCountLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ViewportSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipMenuIfSingleEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationOptions <NavigationOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private OccurrencePresentationOptions <PresentationOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Warning>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<IOccurrenceBrowserDescriptor> <DescriptorBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<Pair`2<ICollection`1<ITypeElement>, TypeDependenciesOptions>> <ShowOnDiagram>k__BackingField;
    [CanBeNullAttribute]
public IconId Icon { get; }
    public string Title { get; }
    public int ItemsCountLimit { get; public set; }
    public int ViewportSize { get; public set; }
    public bool SkipMenuIfSingleEnabled { get; }
    [CanBeNullAttribute]
public NavigationOptions NavigationOptions { get; }
    public OccurrencePresentationOptions PresentationOptions { get; }
    [CanBeNullAttribute]
public string Warning { get; }
    [NotNullAttribute]
public Func`1<IOccurrenceBrowserDescriptor> DescriptorBuilder { get; }
    public Func`1<Pair`2<ICollection`1<ITypeElement>, TypeDependenciesOptions>> ShowOnDiagram { get; }
    public OccurrencePopupMenuOptions(string title, bool skipMenuIfSingleEnabled, OccurrencePresentationOptions presentationOptions, NavigationOptions navigationOptions, Func`1<IOccurrenceBrowserDescriptor> descriptorBuilder, Func`1<Pair`2<ICollection`1<ITypeElement>, TypeDependenciesOptions>> showOnDiagram, string warning, IconId icon);
    [CompilerGeneratedAttribute]
public IconId get_Icon();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public int get_ItemsCountLimit();
    [CompilerGeneratedAttribute]
public void set_ItemsCountLimit(int value);
    [CompilerGeneratedAttribute]
public int get_ViewportSize();
    [CompilerGeneratedAttribute]
public void set_ViewportSize(int value);
    [CompilerGeneratedAttribute]
public bool get_SkipMenuIfSingleEnabled();
    [CompilerGeneratedAttribute]
public NavigationOptions get_NavigationOptions();
    [CompilerGeneratedAttribute]
public OccurrencePresentationOptions get_PresentationOptions();
    [CompilerGeneratedAttribute]
public string get_Warning();
    [CompilerGeneratedAttribute]
public Func`1<IOccurrenceBrowserDescriptor> get_DescriptorBuilder();
    [CompilerGeneratedAttribute]
public Func`1<Pair`2<ICollection`1<ITypeElement>, TypeDependenciesOptions>> get_ShowOnDiagram();
}
[ShellComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrencePresentationManager : object {
    private static ILogger ourLog;
    private IFeaturePartsContainer myContainer;
    public static OccurrencePresentationManager Instance { get; }
    public OccurrencePresentationManager(IFeaturePartsContainer container);
    private static OccurrencePresentationManager();
    public static OccurrencePresentationManager get_Instance();
    [NotNullAttribute]
public IMenuItemDescriptor DescribeOccurrence(IOccurrence occurrence);
    [NotNullAttribute]
public IMenuItemDescriptor DescribeOccurrence(IOccurrence occurrence, OccurrencePresentationOptions featureSpecificPresentationOptions);
    public bool DescribeOccurrence(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions featureSpecificPresentationOptions);
    public static OccurrencePresentationOptions MergePresentationOptions(OccurrencePresentationOptions occurrenceSpecificOptions, OccurrencePresentationOptions featureOptions);
    public IMenuItemDescriptor DescribeOccurrenceWithMatchingChars(IOccurrence occurrence, OccurrencePresentationOptions options, MatchingInfo matchingInfo);
    public void DescribeOccurrence(IMenuItemDescriptor descriptor, IOccurrence occurrence);
    private IEnumerable`1<IOccurrencePresenter> GetApplicableSortedPresenters(IOccurrence occurrence);
    private static double GetPresenterPriority(IOccurrencePresenter presenter);
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrencePresentationOptions : ValueType {
    public TextDisplayStyle TextDisplayStyle;
    public IconDisplayStyle IconDisplayStyle;
    public ContainerDisplayStyle ContainerStyle;
    public GlobalLocationStyle LocationStyle;
    public ContextStyle ContextStyle;
    public TooltipStyle TooltipStyle;
    public static OccurrencePresentationOptions DefaultOptions;
    public OccurrencePresentationOptions(IconDisplayStyle iconStyle, TextDisplayStyle textStyle, ContainerDisplayStyle containerStyle, GlobalLocationStyle glyphStyle, ContextStyle contextStyle, TooltipStyle tooltipStyle);
    private static OccurrencePresentationOptions();
    public bool Equals(OccurrencePresentationOptions other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrencePresentationUtil : object {
    private static DeclaredElementPresenterStyle ourContainerPresenter;
    private static DeclaredElementPresenterStyle ourFullNestedStyle;
    private static DeclaredElementPresenterStyle ourTypeMemberStyle;
    private static int MAXMEMBERLENGTH;
    private static string ourSeparator;
    public static string TextContainerDelimiter;
    private static int MIN_LEFT_CROPPING_MARGIN;
    private static int MIN_RIGHT_CROPPING_MARGIN;
    private static int MaxMemberLength;
    private static TextStyle ourPrimaryStyle;
    private static TextStyle ourSecondaryStyle;
    private static IconId ourOtherImage;
    private static TextStyle ourTextStyle;
    private static OccurrencePresentationUtil();
    public static RichText GetCroppedRichText(IHaveDocumentRangeOccurrence value, bool showCoords, int context);
    [NotNullAttribute]
public static RichText GetRichText(RangeOccurrence value, bool showCoords, OccurrenceInformationManager informationManager);
    private static RichText ShowLineNumbersAndValidate(IHaveDocumentRangeOccurrence value, bool showLineNumbers, RichText richText, bool valid);
    private static string GetCroppedText(Int32& leftMargin, string line, TextRange range, int minLeftCroppingMargin, int minRightCroppingMargin);
    public static void MarkInvalid(RichText richText);
    public static string GetLocationText(RangeOccurrence occurrence, OccurrencePresentationOptions options);
    public static string GetFileLocation(RangeOccurrence occurrence);
    public static string GetTypeLocation(IOccurrence occurrence);
    [CanBeNullAttribute]
public static string ContainingElementName(IOccurrence occurrence);
    public static PresentableItemImage GetIcon(RangeOccurrence rangeOccurrence, OccurrencePresentationOptions options, ISolution solution);
    private static PresentableItemImage GetFileIcon(RangeOccurrence rangeOccurrence, PsiSourceFilePresentationService sourceFilePresentationService);
    public static PresentableItemImage GetOccurrenceKindImage(IOccurrence occurrence, ISolution solution);
    [NotNullAttribute]
public static IconId GetBreakpointIcon(IVsBreakpointDescriptor descriptor);
    private static int GetKindPriority(OccurrenceKind kind, IEnumerable`1<IOccurrenceKindIconProvider> occurrenceKindIconProviders);
    [ExtensionAttribute]
public static PresentableItemImage GetOccurrenceKindImage(OccurrenceKind occurrenceKind, ISolution solution);
    [CanBeNullAttribute]
private static IconId GetIconId(OccurrenceKind occurrenceKind, ISolution solution);
    public static string GetRangeOccurrenceDisplayText(RangeOccurrence occurrence, Nullable`1<OccurrencePresentationOptions> featureOptions, TextRange& suffixRange);
    public static bool IsSynthetic(RangeOccurrence occurrence);
    [CanBeNullAttribute]
public static string GetDeclaredElementText(IDeclaredElementEnvoy typeMemberEnvoy, IDeclaredElementEnvoy typeElementEnvoy, TextRange& suffixRange);
    public static void AppendRelatedFile(IMenuItemDescriptor descriptor, string relatedFileOrClassName);
    public static void PresentContainingType(IMenuItemDescriptor descriptor, IOccurrence occurrence);
    public static string GetPrimaryText(DeclaredElementOccurrence occurrence);
    public static string GetElementText(IDeclaredElement declaredElement);
    public static void PresentChainedProjectModelOccurrence(IMenuItemDescriptor descriptor, IProjectItem projectItem, MatchingInfo matchingInfo);
    public static RichText GetTokenPresentation(MetadataToken token);
    public static RichText GetStringInContainerPresentation(RichText container, IStringOccurrence stringOccurrence, TextStyle infoTextStyle);
    public static RichText GetStringPresentation(IStringOccurrence stringOccurrence, TextStyle infoTextStyle);
    public static int GetMatchingStringOffset(MatchingInfo matchingInfo);
    [NotNullAttribute]
public static string GetMatchedLine(string s, MatchingInfo matchingInfo, TextRange& matchedRange);
    private static string ReplaceCharsAndPreserveRange(string matchedLine, TextRange& range, Func`2<char, string> converter);
    private static string TryConvertValueToPresentationSequence(char arg);
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.Occurrences.IOccurrencePresenter")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrencePresenterAttribute : ShellFeaturePartAttribute {
    [CompilerGeneratedAttribute]
private double <Priority>k__BackingField;
    public double Priority { get; public set; }
    public OccurrencePresenterAttribute(Instantiation instantiation);
    [CompilerGeneratedAttribute]
public double get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(double value);
}
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.Occurrences.IOccurrenceProvider")]
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
[ComponentInstantiationAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceProviderAttribute : ShellComponentAttribute {
    protected static Instantiation OccurrenceProviderDefaultInstantiation;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public int Priority { get; public set; }
    public OccurrenceProviderAttribute(Instantiation instantiation);
    [CompilerGeneratedAttribute]
public int get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(int value);
    public static int GetTypePrioritySafe(Type type);
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceReferenceHash : object {
    [NotNullAttribute]
public static OccurrenceReferenceHash Instance;
    private static OccurrenceReferenceHash();
    public sealed virtual int GetHashCode(object obj);
    private sealed virtual override bool System.Collections.Generic.IEqualityComparer<System.Object>.Equals(object x, object y);
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceSyncPopupMenu : object {
    public static int VIEWPORT_SIZE;
    public static Key`1<object> ForceShowUsagesWindowKey;
    private static object ourEtcItemKey;
    private static TimeSpan ourShowMenuAfter;
    private static TimeSpan ourUpdateMenuEvery;
    private static IconId ourIconShowInFindResults;
    private static IconId ourIconShowOnDiagram;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private string myTitle;
    private OccurrencePresentationOptions myOptions;
    [NotNullAttribute]
private JetPopupMenu myMenu;
    [NotNullAttribute]
private RichTextWithProgressAutomation myCaptionAutomation;
    [NotNullAttribute]
private ConcurrentQueue`1<IOccurrence> myQueue;
    [NotNullAttribute]
private GroupingEvent myUpdateItemsEvent;
    [NotNullAttribute]
private ProgressIndicator myProgressIndicator;
    [NotNullAttribute]
private LifetimeDefinition myMenuLifetimeDefinition;
    [CanBeNullAttribute]
protected Func`1<IOccurrenceBrowserDescriptor> DescriptorBuilder;
    [CanBeNullAttribute]
private Func`1<Pair`2<ICollection`1<ITypeElement>, TypeDependenciesOptions>> myDiagramBuilder;
    [CanBeNullAttribute]
private IProjectFile myCurrentProjectFile;
    private TextRange myCurrentTextRange;
    private bool myGotoSingleUsageImmediately;
    private bool myMenuShowed;
    private JetPopupMenus myJetPopupMenus;
    private JetPopupMenuItem myDisabledEtcItem;
    private JetPopupMenuItem myEnabledEtcItem;
    private bool myIsEnabledEtcItem;
    private int myWriteLockTimestampBeforeShow;
    private IMainWindowPopupWindowContext myMainWindowPopupWindowContext;
    [CompilerGeneratedAttribute]
private ISimpleSignal <SwitchToFindUsages>k__BackingField;
    public ISimpleSignal SwitchToFindUsages { get; }
    public Lifetime Lifetime { get; }
    public IProgressIndicator ProgressIndicator { get; }
    public bool IsAsyncSupport { get; }
    public OccurrenceSyncPopupMenu(IDataContext context, ISolution solution, string title, OccurrencePresentationOptions options, IMainWindowPopupWindowContext mainWindowPopupWindowContext, JetPopupMenus jetPopupMenus);
    private static OccurrenceSyncPopupMenu();
    private JetPopupMenuItem CurrentEtcItem();
    private void DescribeItem(DescribeItemEventArgs e);
    private void ExecuteItem(object key);
    private void ShowMenu();
    private void UpdateMenuItems();
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_SwitchToFindUsages();
    public sealed virtual Lifetime get_Lifetime();
    public sealed virtual IProgressIndicator get_ProgressIndicator();
    public sealed virtual void Add(IOccurrence occurrence);
    public sealed virtual bool get_IsAsyncSupport();
    public sealed virtual void CommitResults(ICollection`1<IOccurrence> results, Func`1<IOccurrenceBrowserDescriptor> descriptorBuilder, Func`1<Pair`2<ICollection`1<ITypeElement>, TypeDependenciesOptions>> diagramBuilder);
    public sealed virtual void Close();
    private void ShowFindResults();
    private void ShowDiagram();
    private static JetPopupMenuItem CreateEtcItem(bool isEnabled);
    [CompilerGeneratedAttribute]
private void <.ctor>b__29_1(JetPopupMenuDoc _);
}
public enum JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceType : Enum {
    public int value__;
    public static OccurrenceType Occurrence;
    public static OccurrenceType LateBoundOccurrence;
    public static OccurrenceType TextualOccurrence;
    public static OccurrenceType FuzzyTextualOccurrence;
    public static OccurrenceType Compiled;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceUtil : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IDeclaredElement GetDeclaredElement(IOccurrence occurrence);
    public static int CompareOccurrences(IOccurrence x, IOccurrence y, Nullable`1<OccurrencePresentationOptions> options, ICompareOccurrencesCache cache);
    private static int CompareCompiledElementOccurrences(CompiledElementOccurrence xceo, CompiledElementOccurrence yceo);
    public static int CompareAssemblyAttributeOccurrences(IAssemblyAttributeOccurrence x, IAssemblyAttributeOccurrence y);
    [ObsoleteAttribute]
public static int CompareDeclaredElementOccurrences(DeclaredElementOccurrence x, DeclaredElementOccurrence y);
    public static int CompareDeclaredElementOccurrences(IDeclaredElementOccurrence x, IDeclaredElementOccurrence y);
    public static int CompareDeclaredElements(IDeclaredElement xDeclaredElement, IDeclaredElement yDeclaredElement);
    private static int CompareRangeOccurrences(RangeOccurrence x, RangeOccurrence y, Nullable`1<OccurrencePresentationOptions> options, ICompareOccurrencesCache cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Occurrences.OccurrenceUtil/<GetTypeElementsForDiagram>d__8`1")]
public static IEnumerable`1<ITypeElement> GetTypeElementsForDiagram(TSearchRequest searchRequest, ICollection`1<IOccurrence> occurrences);
}
[DebuggerDisplayAttribute("{DumpToString()}")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.PackageReferenceOccurrence : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RootPackage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SDK>k__BackingField;
    private NugetId myPackageId;
    private ProjectModelElementEnvoy myProjectEnvoy;
    private OccurrenceMergeContext myMergeContext;
    private bool myIsValid;
    [CompilerGeneratedAttribute]
private OccurrencePresentationOptions <PresentationOptions>k__BackingField;
    public Nullable`1<bool> RootPackage { get; }
    public bool SDK { get; }
    public OccurrenceType OccurrenceType { get; }
    public NugetId PackageId { get; }
    public bool IsValid { get; }
    public OccurrencePresentationOptions PresentationOptions { get; public set; }
    public OccurrenceMergeContext MergeContext { get; }
    public PackageReferenceOccurrence(IProject project, NugetId packageId, Nullable`1<bool> rootPackage, bool sdk);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RootPackage();
    [CompilerGeneratedAttribute]
public bool get_SDK();
    public sealed virtual ISolution GetSolution();
    public void Dispose();
    [CanBeNullAttribute]
public IProject GetProject();
    public sealed virtual OccurrenceType get_OccurrenceType();
    public NugetId get_PackageId();
    public sealed virtual bool get_IsValid();
    public sealed virtual bool Navigate(ISolution solution, PopupWindowContextSource windowContext, bool transferFocus, TabOptions tabOptions);
    public sealed virtual string DumpToString();
    [CompilerGeneratedAttribute]
public sealed virtual OccurrencePresentationOptions get_PresentationOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PresentationOptions(OccurrencePresentationOptions value);
    public OccurrenceMergeContext get_MergeContext();
}
[OccurrenceProviderAttribute]
internal class JetBrains.ReSharper.Feature.Services.Occurrences.PathDeclaredElementOccurrenceProvider : object {
    public sealed virtual IOccurrence MakeOccurrence(FindResult findResult);
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.Presentation.Presenters.ChainedCodeModelOccurrencePresenter : DeclaredElementOccurrencePresenter {
    public virtual bool IsApplicable(IOccurrence occurrence);
    protected virtual void DisplayMainText(IMenuItemDescriptor descriptor, IOccurrence declaredElementOccurrence, OccurrencePresentationOptions options, IDeclaredElement declaredElement);
    protected virtual string GetElementName(IDeclaredElement elementToProcess);
    protected virtual IDeclaredElement GetContainingElement(IDeclaredElement elementToProcess);
    private static RichText PresentChainedOverload(IDeclaredElement displayElement);
    protected virtual void DisplayCustomContainerText(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions options, IDeclaredElement element);
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.Presentation.Presenters.ChainedProjectModelOccurrencePresenter : ProjectItemOccurrencePresenter {
    protected virtual void PresentMainText(IMenuItemDescriptor descriptor, OccurrencePresentationOptions options, ProjectItemOccurrence projectItemOccurrence, IProjectItem projectItem);
    public virtual bool IsApplicable(IOccurrence occurrence);
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.Presentation.Presenters.ChainedRangeOccurrencePresenter : RangeOccurrencePresenter {
    public virtual bool Present(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions occurrencePresentationOptions);
    public virtual bool IsApplicable(IOccurrence occurrence);
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.Presentation.Presenters.CompiledElementOccurrencePresenter : DeclaredElementOccurrencePresenter {
    protected static TextStyle ourInfoTextStyle;
    private static CompiledElementOccurrencePresenter();
    public virtual bool IsApplicable(IOccurrence occurrence);
    protected virtual void DisplayMainText(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions options, IDeclaredElement declaredElement);
    protected static void AppendIndexInContainer(IMenuItemDescriptor descriptor, CompiledElementOccurrence compiledElementOccurrence);
    protected void DeclaredElementOccurrencePresenterDisplayMainText(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions options, IDeclaredElement declaredElement);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.Feature.Services.Occurrences.Presentation.Presenters.DeclaredElementExtensions : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
internal static IDeclaredElement GetContainingElement(IDeclaredElement declaredElement);
    [ExtensionAttribute]
internal static string GetFullPresentationName(IDeclaredElement declaredElement);
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.Presentation.Presenters.DecompiledFileOccurrencePresenter : object {
    public sealed virtual bool Present(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions occurrencePresentationOptions);
    public sealed virtual bool IsApplicable(IOccurrence occurrence);
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.Presentation.Presenters.FileMemberAspectOccurrencePresenter : object {
    public sealed virtual bool Present(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions options);
    public sealed virtual bool IsApplicable(IOccurrence occurrence);
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.Presentation.Presenters.MetadataTokenInCompiledElementOccurrencePresenter : DeclaredElementOccurrencePresenter {
    public virtual bool IsApplicable(IOccurrence occurrence);
    protected virtual void DisplayMainText(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions options, IDeclaredElement declaredElement);
    protected virtual RichText GetModuleName(IModule module, bool alwaysSpecifyVersion, DeclaredElementOccurrence declaredElementOccurrence, String& disambiguation);
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.Presentation.Presenters.ProjectItemOccurrencePresenter : object {
    public sealed virtual bool Present(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions options);
    private void PresentTooltip(IMenuItemDescriptor descriptor, OccurrencePresentationOptions options, ProjectItemOccurrence projectItemOccurrence, IProjectItem projectItem);
    protected virtual void PresentMainText(IMenuItemDescriptor descriptor, OccurrencePresentationOptions options, ProjectItemOccurrence projectItemOccurrence, IProjectItem projectItem);
    protected virtual void PresentLocation(IMenuItemDescriptor descriptor, OccurrencePresentationOptions options, IProjectItem projectItem, bool showSpecificVersion);
    public virtual bool IsApplicable(IOccurrence occurrence);
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.Presentation.Presenters.RecentEditsOccurrencePresenter : RangeOccurrencePresenter {
    public virtual bool Present(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions options);
    protected virtual RichText GetTooltip(RangeOccurrence rangeOccurrence, OccurrencePresentationOptions options);
    protected virtual void PresentLocation(IMenuItemDescriptor descriptor, OccurrencePresentationOptions options, IProjectItem projectItem);
    public virtual bool IsApplicable(IOccurrence occurrence);
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.Presentation.Presenters.StringInCompiledElementOccurrencePresenter : CompiledElementOccurrencePresenter {
    private static RichText GetAttributeForText(ITargetPosition targetPosition, RichText text);
    private static RichText GetParameterOfText(IParameter parameter, RichText text);
    public virtual bool IsApplicable(IOccurrence occurrence);
    protected virtual void DisplayMainText(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions options, IDeclaredElement declaredElement);
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.PreserveTextRangeBuffer : object {
    private StringBuilder myInput;
    private TextRange myRange;
    public TextRange Range { get; }
    public int Length { get; }
    public PreserveTextRangeBuffer(string input, TextRange range);
    public void Replace(char oldChar, char newChar);
    public string GetText();
    public TextRange get_Range();
    public int get_Length();
    public void Insert(int insertPosition, string value);
    public void Remove(int removeStartOffset, int length);
    public void Trim();
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.ProjectItemOccurrence : object {
    private ProjectModelElementEnvoy myProjectModelElementEnvoy;
    private ISolution mySolution;
    private OccurrenceMergeContext myMergeContext;
    [CompilerGeneratedAttribute]
private OccurrencePresentationOptions <PresentationOptions>k__BackingField;
    [CanBeNullAttribute]
public IProjectItem ProjectItem { get; }
    public OccurrenceType OccurrenceType { get; }
    public bool IsValid { get; }
    public OccurrencePresentationOptions PresentationOptions { get; public set; }
    public OccurrenceMergeContext MergeContext { get; }
    public ProjectItemOccurrence(IProjectItem projectItem, OccurrencePresentationOptions options);
    public ProjectItemOccurrence(IProjectItem item);
    public IProjectItem get_ProjectItem();
    public bool Equals(ProjectItemOccurrence other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual ISolution GetSolution();
    public TextRange GetTextRange();
    [NotNullAttribute]
public ProjectModelElementEnvoy GetProjectModelElementEnvoy();
    public DeclaredElementEnvoy`1<ITypeMember> GetTypeMember();
    public DeclaredElementEnvoy`1<ITypeElement> GetTypeElement();
    public DeclaredElementEnvoy`1<INamespace> GetNamespace();
    public sealed virtual OccurrenceType get_OccurrenceType();
    public sealed virtual bool get_IsValid();
    public sealed virtual bool Navigate(ISolution solution, PopupWindowContextSource windowContext, bool transferFocus, TabOptions tabOptions);
    public sealed virtual string DumpToString();
    [CompilerGeneratedAttribute]
public sealed virtual OccurrencePresentationOptions get_PresentationOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PresentationOptions(OccurrencePresentationOptions value);
    public OccurrenceMergeContext get_MergeContext();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.ProjectItemOccurrenceKindProvider : object {
    public static OccurrenceKind File;
    public static OccurrenceKind Folder;
    public static OccurrenceKind Project;
    private static ProjectItemOccurrenceKindProvider();
    public sealed virtual ICollection`1<OccurrenceKind> GetOccurrenceKinds(IOccurrence occurrence);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Occurrences.ProjectItemOccurrenceKindProvider/<GetAllPossibleOccurrenceKinds>d__4")]
public sealed virtual IEnumerable`1<OccurrenceKind> GetAllPossibleOccurrenceKinds();
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.RangeOccurrence : object {
    [CanBeNullAttribute]
private ProjectModelElementEnvoy myProjectElementEnvoy;
    [NotNullAttribute]
private IPsiSourceFile mySourceFile;
    private DocumentCoords myDocumentCoords;
    private string myLine;
    private TextRange myOccurrenceRange;
    private IRangeMarker myMarker;
    [CanBeNullAttribute]
private IDeclaredElementEnvoy myNamespace;
    [CanBeNullAttribute]
private IDeclaredElementEnvoy myTypeElement;
    [CanBeNullAttribute]
private IDeclaredElementEnvoy myTypeMember;
    public PsiLanguageType Language;
    private OccurrenceMergeContext myMergeContext;
    [CompilerGeneratedAttribute]
private OccurrencePresentationOptions <PresentationOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private OccurrenceType <OccurrenceType>k__BackingField;
    private TabOptions myTabOptions;
    public bool IsValid { get; }
    public TextRange OccurrenceRange { get; }
    public string Line { get; }
    public DocumentCoords DocumentCoords { get; }
    public OccurrencePresentationOptions PresentationOptions { get; public set; }
    public OccurrenceType OccurrenceType { get; }
    protected bool CheckForLineOffsets { get; }
    public IRangeMarker Marker { get; }
    [NotNullAttribute]
public IPsiSourceFile SourceFile { get; }
    protected object MergeKey { get; }
    public OccurrenceMergeContext MergeContext { get; }
    [NotNullAttribute]
public IPsiSourceFile CachedSourceFile { get; }
    protected bool ShouldBindContainingElementEnvoys { get; }
    public RangeOccurrence(IPsiSourceFile sourceFile, DocumentRange documentRange, OccurrenceType occurrenceType, OccurrencePresentationOptions options);
    public RangeOccurrence(IReference reference, IDeclaredElement target, OccurrenceType occurrenceType);
    protected RangeOccurrence(ITreeNode treeNode, OccurrenceType occurrenceKind);
    protected RangeOccurrence(IPsiSourceFile sourceFile, DocumentRange documentRange, OccurrencePresentationOptions options);
    public RangeOccurrence(IPsiSourceFile sourceFile, DocumentRange documentRange);
    public sealed virtual bool get_IsValid();
    public virtual bool Navigate(ISolution solution, PopupWindowContextSource windowContext, bool transferFocus, TabOptions tabOptions);
    public sealed virtual ISolution GetSolution();
    public TextRange GetTextRange();
    public DocumentRange GetDocumentRange();
    [CanBeNullAttribute]
public virtual IDeclaredElementEnvoy GetNamespace();
    [CanBeNullAttribute]
public virtual IDeclaredElementEnvoy GetTypeElement();
    [CanBeNullAttribute]
public virtual IDeclaredElementEnvoy GetTypeMember();
    [NotNullAttribute]
public virtual string GetDisplayNameText();
    public sealed virtual TextRange get_OccurrenceRange();
    public sealed virtual string get_Line();
    public sealed virtual DocumentCoords get_DocumentCoords();
    public virtual string DumpToString();
    [CompilerGeneratedAttribute]
public sealed virtual OccurrencePresentationOptions get_PresentationOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PresentationOptions(OccurrencePresentationOptions value);
    [CanBeNullAttribute]
public IProjectFile GetProjectFile();
    [CompilerGeneratedAttribute]
public sealed virtual OccurrenceType get_OccurrenceType();
    [CanBeNullAttribute]
public ProjectModelElementEnvoy GetProjectModelElementEnvoy();
    protected virtual bool get_CheckForLineOffsets();
    public IRangeMarker get_Marker();
    public IPsiSourceFile get_SourceFile();
    protected virtual object get_MergeKey();
    public OccurrenceMergeContext get_MergeContext();
    public void BindMergeContext(OccurrenceMergeContext mergeContext);
    public IPsiSourceFile get_CachedSourceFile();
    protected virtual bool get_ShouldBindContainingElementEnvoys();
    private void Initialize(ITreeNode treeNode, DocumentRange documentRange);
    private void Initialize(IPsiSourceFile sourceFile, DocumentRange documentRange);
    private bool Bind(IPsiSourceFile sourceFile, DocumentRange documentRange, ITreeNode node);
    [NotNullAttribute]
public IReference[] GetReferences();
    internal void SetTabOptions(TabOptions tabOptions);
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.RangeOccurrenceComparer : object {
    private PsiSourceFileComparer myPsiSourceFileComparer;
    public RangeOccurrenceComparer(IPsiSourceFile nearestPsiSourceFile);
    [CanBeNullAttribute]
private IPsiSourceFile GetPsiSourceFile(IOccurrence o);
    public sealed virtual int Compare(IOccurrence x, IOccurrence y);
}
public static class JetBrains.ReSharper.Feature.Services.Occurrences.RangeOccurrenceUtil : object {
    [ObsoleteAttribute("Use overload with DocumentRange")]
public static string GetTrimmedLinePossibleMultiline(IPsiSourceFile sourceFile, TextRange occurrenceInDocumentRange, ITreeNode node, TextRange& occurrenceInLineRange);
    public static string GetTrimmedLinePossibleMultiline(DocumentRange documentRange, ITreeNode node, TextRange& occurrenceInLineRange);
    [NotNullAttribute]
private static PreserveTextRangeBuffer FindContext(ITreeNode node, DocumentRange documentRange);
    [CanBeNullAttribute]
private static PreserveTextRangeBuffer TryFindMultilineContext(DocumentRange documentRange, ITreeNode node);
    private static Nullable`1<DocumentRange> TryFindContextNodeRange(ITreeNode node);
    public static string GetTrimmedLine(IDocument document, DocumentCoords coords, DocumentOffset occurrenceOffset, DocumentRange& lineRange);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.RdUsageListBase : object {
    private Lifetime myLifetime;
    private ISolution mySolution;
    private IconHostBase myIconHost;
    private IOccurrenceBrowserDescriptor myDescriptor;
    private bool myExtendHack;
    private StructuredPresenter`2<TreeModelNode, IPresentableItem> myPresenter;
    private ILogger myLogger;
    private List`1<IOccurrence> myOccurrences;
    private List`1<RdUsageBase> myUsages;
    private IMainWindowPopupWindowContext myMainWindowPopupWindowContext;
    [CompilerGeneratedAttribute]
private RdUsageList <Model>k__BackingField;
    private Stopwatch myTotalStopwatch;
    private Stopwatch myItemsStopwatch;
    private Stopwatch myIconsStopwatch;
    private Stopwatch myUpdateStopwatch;
    private Stopwatch myGroupingItemsStopwatch;
    private PresentableItem myPresentableItem;
    private FakeTreeModelNode myFakeNode;
    private PresentationState myPresentationState;
    private OccurrenceInformationManager myOccurrenceInformationManager;
    private IPsiFiles myPsiFiles;
    private GeneratedCodeOccurrenceKindsProvider myGeneratedCodeOccurrenceKindsProvider;
    public RdUsageList Model { get; }
    public RdUsageListBase(Lifetime lifetime, ISolution solution, IconHostBase iconHost, IMainWindowPopupWindowContext mainWindowPopupWindowContext, IReadOnlyList`1<IOccurrence> occurences, IOccurrenceBrowserDescriptor descriptor, bool extendHack);
    [CompilerGeneratedAttribute]
public RdUsageList get_Model();
    public void DumpTelemetryStats();
    public void AddUsages(IEnumerable`1<IOccurrence> occurrences, int count);
    private RdUsageBase DoCreateUsage(int index, IOccurrence occurrence);
    private TextRange GetRangeForOccurrenceSlow(IOccurrence occurrence, IProjectElement projectItem);
    private RdUsageBase CreateUsage(int index, IOccurrence occurrence);
    private List`1<RdUsageGroup> CreateGroups(IOccurrence occurrence);
    protected virtual RdDocumentId GetProjectItemId(IOccurrence occurrence, IProjectElement& item);
    private RdUsageBase CreateMergeableUsage(int index, IOccurrence occurrence);
    private static bool IsMergeableOccurrence(IOccurrence occurrence);
    private RdUsagePosition GetPositionModel(RangeOccurrence occurrence);
    private bool IsAccessedForReading(IOccurrence occurrence);
    private bool IsAccessedForWriting(IOccurrence occurrence);
    private IconModel GetIcon(RangeOccurrence occurrence);
    private void NavigateTo(RdUsageNavigationData data);
    private void NavigateToGroup(RdUsageGroupNavigationData data);
    private bool UpdateItem(int index);
    private bool Update(int index);
    private bool Update(RdUsageBase usage, IOccurrence occurrence);
    public void ClearUsages();
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.ReferenceOccurrence : RangeOccurrence {
    private ReferenceAccessType myAccessType;
    private DeclaredElementEnvoy`1<IDeclaredElement> myTargetEnvoy;
    protected ICollection`1<OccurrenceKind> OccurrenceKinds;
    private IReferencePointer myReferencePointer;
    [CanBeNullAttribute]
private ResolveErrorType myErrorType;
    public ResolveErrorType ResolveErrorType { get; }
    [CanBeNullAttribute]
public IDeclaredElement Target { get; }
    [CanBeNullAttribute]
public IReference PrimaryReference { get; }
    [NotNullAttribute]
public ICollection`1<OccurrenceKind> Kinds { get; }
    public ReferenceAccessType AccessType { get; }
    [CanBeNullAttribute]
protected IDeclaredElementEnvoy TargetEnvoy { get; }
    public ReferenceOccurrence(ITreeNode treeNode, OccurrenceType occurrenceType);
    public ReferenceOccurrence(ITreeNode treeNode, OccurrenceType occurrenceType, ICollection`1<OccurrenceKind> kinds);
    public ReferenceOccurrence(IReference reference, IDeclaredElement target, OccurrenceType occurrenceType);
    public ReferenceOccurrence(IReference reference, IDeclaredElement target, OccurrenceType occurrenceType, ReferenceAccessType accessType);
    protected static ReferenceAccessType GetReferenceAccessType(IReference reference, IDeclaredElement target);
    private void CalculateOccurrenceKinds(ISolution solution);
    public ResolveErrorType get_ResolveErrorType();
    public IDeclaredElement get_Target();
    public IReference get_PrimaryReference();
    public sealed virtual ICollection`1<OccurrenceKind> get_Kinds();
    public ReferenceAccessType get_AccessType();
    protected virtual IDeclaredElementEnvoy get_TargetEnvoy();
    public virtual string DumpToString();
    [CompilerGeneratedAttribute]
private bool <get_PrimaryReference>b__16_0(IReference reference);
}
[SolutionComponentAttribute("10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Occurrences.RiderUsageListProviderBase : object {
    private ISolution mySolution;
    private IconHostBase myIconHost;
    private IMainWindowPopupWindowContext myMainWindowPopupWindowContext;
    public RiderUsageListProviderBase(ISolution solution);
    public virtual RdUsageList ConvertOccurrences(Lifetime lifetime, IReadOnlyList`1<IOccurrence> occurrences, IOccurrenceBrowserDescriptor descriptor);
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.StringInAssemblyAttributeOccurrence : AssemblyAttributeOccurrenceBase {
    [CompilerGeneratedAttribute]
private string <S>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MatchedLine>k__BackingField;
    [CompilerGeneratedAttribute]
private TextRange <MatchedRange>k__BackingField;
    private int myOffset;
    public string S { get; }
    public string MatchedLine { get; }
    public TextRange MatchedRange { get; }
    public StringInAssemblyAttributeOccurrence(IAssembly assembly, string target, MatchingInfo matchingInfo, CustomAttributeTargetPosition targetPosition);
    [CompilerGeneratedAttribute]
public sealed virtual string get_S();
    [CompilerGeneratedAttribute]
public sealed virtual string get_MatchedLine();
    [CompilerGeneratedAttribute]
public sealed virtual TextRange get_MatchedRange();
    protected virtual ICompiledNavigationTarget GetNavigationTarget();
    protected virtual bool IsTargetEqual(IAssemblyAttributeOccurrence other);
    protected virtual int GetTargetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.StringInCompiledElementOccurrence : CompiledElementOccurrence {
    [CompilerGeneratedAttribute]
private string <S>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MatchedLine>k__BackingField;
    [CompilerGeneratedAttribute]
private TextRange <MatchedRange>k__BackingField;
    private int myOffset;
    public string S { get; }
    public string MatchedLine { get; }
    public TextRange MatchedRange { get; }
    public OccurrenceMergeContext MergeContext { get; }
    public StringInCompiledElementOccurrence(string s, MatchingInfo matchingInfo, ICompiledElement element, OccurrencePresentationOptions occurrencePresentationOptions, ITargetPosition targetPosition);
    [CompilerGeneratedAttribute]
public sealed virtual string get_S();
    [CompilerGeneratedAttribute]
public sealed virtual string get_MatchedLine();
    [CompilerGeneratedAttribute]
public sealed virtual TextRange get_MatchedRange();
    public virtual OccurrenceMergeContext get_MergeContext();
    public virtual bool Navigate(ISolution solution, PopupWindowContextSource windowContext, bool transferFocus, TabOptions tabOptions);
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.SubstitutionOccurrence : RangeOccurrence {
    [CompilerGeneratedAttribute]
private IType <SubstitutionType>k__BackingField;
    [NotNullAttribute]
public IType SubstitutionType { get; }
    protected object MergeKey { get; }
    public SubstitutionOccurrence(IType substitutionType, ITreeNode typeParameterUsage, IDeclaredElement target, IReference reference);
    [CompilerGeneratedAttribute]
public IType get_SubstitutionType();
    protected virtual object get_MergeKey();
}
public enum JetBrains.ReSharper.Feature.Services.Occurrences.TextDisplayStyle : Enum {
    public int value__;
    public static TextDisplayStyle Default;
    public static TextDisplayStyle NoText;
    public static TextDisplayStyle ContainingFile;
    public static TextDisplayStyle ContainingFileAndContext;
    public static TextDisplayStyle ContainingType;
    public static TextDisplayStyle IdentifierAndContext;
    public static TextDisplayStyle Context;
    public static TextDisplayStyle ChainedPME;
    public static TextDisplayStyle ChainedCME;
    public static TextDisplayStyle ChainedCMEWithSignature;
    public static TextDisplayStyle Identifier;
}
public class JetBrains.ReSharper.Feature.Services.Occurrences.TextOccurrence : RangeOccurrence {
    [CanBeNullAttribute]
private ICollection`1<OccurrenceKind> myKinds;
    public ICollection`1<OccurrenceKind> Kinds { get; }
    public TextOccurrence(IPsiSourceFile sourceFile, DocumentRange documentRange, OccurrencePresentationOptions presentationOptions, OccurrenceType occurrenceType);
    public sealed virtual ICollection`1<OccurrenceKind> get_Kinds();
}
public enum JetBrains.ReSharper.Feature.Services.Occurrences.TooltipStyle : Enum {
    public int value__;
    public static TooltipStyle Default;
    public static TooltipStyle None;
    public static TooltipStyle FullLine;
}
public abstract class JetBrains.ReSharper.Feature.Services.OnlineHelp.CompiledElementOnlineHelpProvider : object {
    public int Priority { get; }
    public bool ShouldValidate { get; }
    public sealed virtual Uri GetUrl(IDeclaredElement element);
    public virtual string GetPresentableName(IDeclaredElement element);
    public abstract virtual Uri GetUrl(ICompiledElement element);
    public abstract virtual int get_Priority();
    public abstract virtual bool get_ShouldValidate();
    public virtual bool IsAvailable(IDeclaredElement element);
}
public interface JetBrains.ReSharper.Feature.Services.OnlineHelp.IOnlineHelpProvider {
    public int Priority { get; }
    public bool ShouldValidate { get; }
    public abstract virtual Uri GetUrl(IDeclaredElement element);
    public abstract virtual string GetPresentableName(IDeclaredElement element);
    public abstract virtual int get_Priority();
    public abstract virtual bool get_ShouldValidate();
    public abstract virtual bool IsAvailable(IDeclaredElement element);
}
public abstract class JetBrains.ReSharper.Feature.Services.OnlineHelp.MsdnOnlineHelpProvider : CompiledElementOnlineHelpProvider {
    public int Priority { get; }
    public bool ShouldValidate { get; }
    public virtual Uri GetUrl(ICompiledElement element);
    public virtual int get_Priority();
    public virtual bool get_ShouldValidate();
    private static Uri GetMicrosoftUrl(ICompiledElement element, TargetFrameworkId targetFrameworkId, VirtualFileSystemPath assemblyLocation);
    public static Uri GetMicrosoftUrl(string searchableText, TargetFrameworkId targetFrameworkId);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.OnlineHelp.OnlineHelpActionHandler : object {
    private List`1<IOnlineHelpProvider> myOnlineHelpProviders;
    private static ILogger ourLogger;
    public double Priority { get; }
    public OnlineHelpActionHandler(IEnumerable`1<IOnlineHelpProvider> onlineHelpProviders);
    private static OnlineHelpActionHandler();
    public virtual double get_Priority();
    public sealed virtual bool IsAvailable(IDataContext context);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
    public sealed virtual bool Show(IDataContext context);
    private Uri FallbackToSearchEngine(IDeclaredElement[] elements);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Feature.Services.OnlineHelp.OnlineHelpActionHandler/<ValidateUrlAsync>d__9")]
protected virtual Task`1<bool> ValidateUrlAsync(IDataContext context, Uri url, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Feature.Services.OnlineHelp.OnlineHelpActionHandler/<ValidateUrlAsyncImpl>d__10")]
private static Task`1<bool> ValidateUrlAsyncImpl(IDataContext context, Uri url, ILogger logger);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "OnlineHelpSettingsDescription")]
public class JetBrains.ReSharper.Feature.Services.OnlineHelp.OnlineHelpSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "IsEnabledSettingDescription")]
public bool IsEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "SearchUrl")]
public string SearchUrl;
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.OnlineHelp.OnlineHelpSettingsUpgrader : object {
    private IContextBoundSettingsStore myStore;
    public sealed virtual void Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
    public sealed virtual void ReadFromXml(XmlElement element);
}
public abstract class JetBrains.ReSharper.Feature.Services.OnlineHelp.SearchEngineCompiledElementOnlineHelpProvider : CompiledElementOnlineHelpProvider {
    private IProperty`1<string> myUrlProperty;
    public static List`1<string> KnownSearchEngines;
    public int Priority { get; }
    public bool ShouldValidate { get; }
    protected SearchEngineCompiledElementOnlineHelpProvider(Lifetime lifetime, ISettingsStore store);
    private static SearchEngineCompiledElementOnlineHelpProvider();
    private static Uri GetSearchUrl(ICompiledElement element, string url);
    private static string GetSearchableText(ICompiledElement element);
    private static string GetPresentableName(ICompiledElement element);
    public static Uri GetUrl(string searchableText, string url);
    public virtual Uri GetUrl(ICompiledElement element);
    public virtual string GetPresentableName(IDeclaredElement element);
    public virtual int get_Priority();
    public virtual bool get_ShouldValidate();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.OnlineHelp.TypeDocUtil : object {
    [ExtensionAttribute]
[PureAttribute]
[CanBeNullAttribute]
public static string GetSearchableText(ICompiledElement compiledElement);
    [ExtensionAttribute]
public static string GetPresentableName(ICompiledElement compiledElement);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.OnSolutionCloseNotifier : object {
    public Signal`1<ISolution> SolutionIsAboutToClose;
    public OnSolutionCloseNotifier(Lifetime lifetime);
    public sealed virtual bool QuerySolutionClose(ISolution solution);
}
[OptionsPageAttribute("CodeEditing", "Code Editing", "")]
public class JetBrains.ReSharper.Feature.Services.OptionPages.CodeEditing.CodeEditingPage : AEmptyOptionsPage {
    public static string PID;
}
[OptionsPageAttribute("XmlDoc", "XML Doc Comments", "JetBrains.Application.Resources.IdeThemedIcons/XmlDocument")]
public class JetBrains.ReSharper.Feature.Services.OptionPages.CodeEditing.XmlDocPage : AEmptyOptionsPage {
    public static string PID;
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.OptionPages.CodeEditing.ZoneMarker : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.CodePreviewPreparator : object {
    [NullableAttribute("2")]
public KnownLanguage Language { get; }
    [NullableAttribute("2")]
public ProjectFileType ProjectFileType { get; }
    public bool PreviewCodeStyle { get; }
    protected virtual ITreeNode Parse(IParser parser, PreviewParseType parseType);
    protected virtual string GetFormattedResult(ITreeNode node, IContextBoundSettingsStore boundSettingsStore);
    protected virtual void ApplyCustomHighlighting(ISolution solution, IDocument document, ITreeNode node);
    protected static void AddHighlighter(IDocumentMarkup markupModel, ITokenNode tokenNode, string highlighterId);
    [NullableContextAttribute("2")]
public abstract virtual KnownLanguage get_Language();
    [NullableContextAttribute("2")]
public abstract virtual ProjectFileType get_ProjectFileType();
    public virtual bool get_PreviewCodeStyle();
    public int GetTabWidth(ISolution solution, IContextBoundSettingsStore boundSettingsStore);
    public void PrepareTextViaSourceFile(ISolution solution, IDocument document, string text, IContextBoundSettingsStore boundSettingsStore);
    public virtual void PrepareText(ISolution solution, IDocument document, string text, PreviewParseType type, IContextBoundSettingsStore boundSettingsStore);
    protected void PrepareTextViaSandbox(ISolution solution, IDocument document, string text, PreviewParseType type, IContextBoundSettingsStore boundSettingsStore);
    protected virtual void CreateSandbox(PreviewParseType previewParseType, ITreeNode node, IPsiModule psiModule);
    protected virtual IPsiModule CreatePsiModule(ISolution solution);
    protected virtual ITreeNode FormatPreview(PreviewParseType type, IContextBoundSettingsStore boundSettingsStore, ITreeNode node, LanguageService service, IPsiModule psiModule, ICodeFormatter codeFormatter);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute("8")]
public class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.CodePreviewPreparatorComponentAttribute : OptionsComponentAttribute {
    public CodePreviewPreparatorComponentAttribute(Instantiation instantiation);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.CodeStyleAvailabilityChecker : object {
    public virtual bool IsPreviewAvailable(ISolution solution);
}
public abstract class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.CodeStylePage : AAutomation {
    private ICodeStylePageSchema mySchema;
    private Lazy`1<double> myLazySeverityColumnWidth;
    private CodeStylePreview myPreview;
    private SequentialLifetimes myPreviewLifetimes;
    [CompilerGeneratedAttribute]
private IProperty`1<IAutomation> <PreviewViewModel>k__BackingField;
    [CompilerGeneratedAttribute]
private CodePreviewPreparator <PreviewPreparator>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private IUIApplication <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponentContainer <Container>k__BackingField;
    [CompilerGeneratedAttribute]
private IContextBoundSettingsStoreLive <SmartContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ICodeStyleEntry> <SelectedItem>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ShouldShowEditorConfigWarning>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ShouldShowAutoDetectAndConfigureFormattingTip>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <CurrentFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <ConfigFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<EditorConfigNotification> <EditorConfigNotification>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<OptionsFilterResult> <SearchFilter>k__BackingField;
    public IProperty`1<IAutomation> PreviewViewModel { get; }
    public CodePreviewPreparator PreviewPreparator { get; }
    public Lifetime Lifetime { get; }
    public IUIApplication Environment { get; }
    [NotNullAttribute]
public IComponentContainer Container { get; }
    public IContextBoundSettingsStoreLive SmartContext { get; }
    public IProperty`1<ICodeStyleEntry> SelectedItem { get; }
    public IProperty`1<bool> ShouldShowEditorConfigWarning { get; }
    public IProperty`1<bool> ShouldShowAutoDetectAndConfigureFormattingTip { get; }
    public IProperty`1<string> CurrentFileName { get; }
    public IProperty`1<string> ConfigFileName { get; }
    public IProperty`1<EditorConfigNotification> EditorConfigNotification { get; }
    public double SeverityColumnWidth { get; }
    public IEnumerable`1<ICodeStyleEntry> Items { get; }
    public IProperty`1<bool> IsLanguageSupportEnabled { get; }
    public bool IsAppliedOnCompletion { get; public set; }
    public bool IsCompletionSettingEnabled { get; }
    public bool ShowAutoDetectAndConfigureFormattingTip { get; }
    public string Id { get; }
    public IProperty`1<OptionsFilterResult> SearchFilter { get; }
    public ICommand GoToConfigureHelp { get; }
    public ICommand GoToAutodetectHelp { get; }
    public ICommand CloseConfigureTip { get; }
    public ICommand GoToEditorConfigOrg { get; }
    public ICommand RunAutodetection { get; }
    public ICommand GoToLanguageSupportEnable { get; }
    public string LanguageSupportIsDisabledText { get; }
    public string LanguageSupportPageId { get; }
    public string LanguageSupportPageName { get; }
    protected CodeStylePage(Lifetime lifetime, IContextBoundSettingsStoreLive smartContext, IUIApplication environment, ICodeStylePageSchema schema, CodeStylePreview preview, IComponentContainer container);
    [CompilerGeneratedAttribute]
public IProperty`1<IAutomation> get_PreviewViewModel();
    [CompilerGeneratedAttribute]
public CodePreviewPreparator get_PreviewPreparator();
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public IUIApplication get_Environment();
    [CompilerGeneratedAttribute]
public IComponentContainer get_Container();
    [CompilerGeneratedAttribute]
public IContextBoundSettingsStoreLive get_SmartContext();
    [CompilerGeneratedAttribute]
public IProperty`1<ICodeStyleEntry> get_SelectedItem();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ShouldShowEditorConfigWarning();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ShouldShowAutoDetectAndConfigureFormattingTip();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_CurrentFileName();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_ConfigFileName();
    [CompilerGeneratedAttribute]
public IProperty`1<EditorConfigNotification> get_EditorConfigNotification();
    public double get_SeverityColumnWidth();
    public IEnumerable`1<ICodeStyleEntry> get_Items();
    public IProperty`1<bool> get_IsLanguageSupportEnabled();
    public bool get_IsAppliedOnCompletion();
    public void set_IsAppliedOnCompletion(bool value);
    public bool get_IsCompletionSettingEnabled();
    public virtual bool get_ShowAutoDetectAndConfigureFormattingTip();
    public static ConfigFileOverrideInfo UpdateAccordingToEditorConfig(IContextBoundSettingsStore smartContext, IEnumerable`1<ICodeStyleEntry> items, int configFilePriorityIncluded, IDataContext dataContext, IComponentContainer container);
    private static string GetPresentableCurrentFile(IPsiSourceFile sourceFile);
    private static void UpdateOverridenEntries(ISolution solution, OneToListMultimap`2<SettingIndex, SettingSourceInfo> configEntries, IEnumerable`1<ICodeStyleEntry> items, IContextBoundSettingsStore ecSettings, IDictionary`2<SettingIndex, string> entriesWithComments, HashSet`1& set, int configFilePriorityIncluded);
    private bool AtLeastOnceHasSeverity(IEnumerable`1<ICodeStyleEntry> entries);
    public void HandleFocusedItem(ICodeStyleEntry item);
    private void UpdatePreview(ICodeStylePreviewData previewData);
    public abstract virtual string get_Id();
    private sealed virtual override bool JetBrains.Application.UI.Options.IOptionsPage.OnOk();
    private sealed virtual override OptionsPageKeywords JetBrains.Application.UI.Options.ISearchablePage.GetKeywords();
    private sealed virtual override void JetBrains.Application.UI.Options.ISearchablePage.HighLightKeyword(OptionsFilterResult text);
    private sealed virtual override IEnumerable`1<string> JetBrains.Application.UI.Options.ISearchablePage.GetTagKeywordsForPage();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<OptionsFilterResult> get_SearchFilter();
    public ICommand get_GoToConfigureHelp();
    public ICommand get_GoToAutodetectHelp();
    public ICommand get_CloseConfigureTip();
    public ICommand get_GoToEditorConfigOrg();
    public bool HasRealSolution();
    public ICommand get_RunAutodetection();
    protected void NavigateToPage(string pid);
    public ICommand get_GoToLanguageSupportEnable();
    public virtual string get_LanguageSupportIsDisabledText();
    public virtual string get_LanguageSupportPageId();
    public virtual string get_LanguageSupportPageName();
    public static void DoRunAutodetection(IDataContext dataContext);
    public static void DoEditEditorConfig(IComponentContainer componentContainer, Lifetime lifetime);
    private sealed virtual override IFilterDescriptor JetBrains.Application.UI.Options.ITreeGridViewFilterPage.GetFilter();
    [CompilerGeneratedAttribute]
private void <get_CloseConfigureTip>b__75_0();
    [CompilerGeneratedAttribute]
private void <get_GoToEditorConfigOrg>b__77_0();
    [CompilerGeneratedAttribute]
private void <get_RunAutodetection>b__80_0();
    [CompilerGeneratedAttribute]
private void <get_RunAutodetection>b__80_1();
    [CompilerGeneratedAttribute]
private void <get_GoToLanguageSupportEnable>b__83_0();
}
public abstract class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.CodeStylePageSchema : object {
    private IValueEditorViewModelFactory myItemViewModelFactory;
    private ISettingsToHide mySettingsToHide;
    public static string NL;
    private IEnumerable`1<ICodeStyleEntry> myEntries;
    private IProperty`1<bool> myIsLanguageSupportEnabled;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private IContextBoundSettingsStoreLive <SmartContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponentContainer <Container>k__BackingField;
    [CompilerGeneratedAttribute]
private ICalculatedSettingsSchema <CalculatedSettingsSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAppliedOnCompletion>k__BackingField;
    protected Lifetime Lifetime { get; }
    protected IContextBoundSettingsStoreLive SmartContext { get; }
    protected IComponentContainer Container { get; }
    protected ICalculatedSettingsSchema CalculatedSettingsSchema { get; }
    public string PageName { get; }
    public KnownLanguage Language { get; }
    public string LanguageName { get; }
    public IProperty`1<bool> IsLanguageSupportEnabled { get; }
    public bool IsCompletionSettingEnabled { get; }
    public IEnumerable`1<ICodeStyleEntry> Entries { get; }
    public bool IsAppliedOnCompletion { get; public set; }
    protected CodeStylePageSchema(Lifetime lifetime, IContextBoundSettingsStoreLive smartContext, IValueEditorViewModelFactory itemViewModelFactory, IComponentContainer container, ISettingsToHide settingsToHide);
    private static CodeStylePageSchema();
    [CompilerGeneratedAttribute]
protected Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
protected IContextBoundSettingsStoreLive get_SmartContext();
    [CompilerGeneratedAttribute]
protected IComponentContainer get_Container();
    [CompilerGeneratedAttribute]
protected ICalculatedSettingsSchema get_CalculatedSettingsSchema();
    public abstract virtual string get_PageName();
    public abstract virtual KnownLanguage get_Language();
    public sealed virtual string get_LanguageName();
    public sealed virtual IProperty`1<bool> get_IsLanguageSupportEnabled();
    public virtual bool get_IsCompletionSettingEnabled();
    public sealed virtual IEnumerable`1<ICodeStyleEntry> get_Entries();
    public abstract virtual CodePreviewPreparator GetCodePreviewPreparator();
    protected abstract virtual IEnumerable`1<ICodeStyleEntry> Describe();
    protected virtual IProperty`1<bool> BuildIsLanguageSupportEnabledProperty();
    protected ICodeStyleEntry Category(string categoryName, ICodeStyleEntry[] children);
    protected ICodeStyleEntry Category(string categoryName, string severity, ICodeStyleEntry[] children);
    [CompilerGeneratedAttribute]
public virtual bool get_IsAppliedOnCompletion();
    [CompilerGeneratedAttribute]
public virtual void set_IsAppliedOnCompletion(bool value);
    protected virtual ICodeStyleEntry ItemFor(Expression`1<Func`2<TKeyClass, TEntryMemberType>> settingsSelector, string description, string severity);
    protected virtual ICodeStyleEntry ItemFor(Expression`1<Func`2<TKeyClass, TEntryMemberType>> settingsSelector, ICodeStylePreviewData previewData, Func`5<IScalarSetting, Lifetime, IProperty`1<bool>, ISettingsEntryConstraints, IValueEditorViewModel> viewModelFactory, string severity, Expression`1<Func`2<TKeyClass, bool>> availableWhen, ISettingsEntryConstraints settingsEntryConstraints);
}
public abstract class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.CodeStylePageSchema`2 : CodeStylePageSchema {
    protected CodeStylePageSchema`2(Lifetime lifetime, IContextBoundSettingsStoreLive smartContext, IValueEditorViewModelFactory itemViewModelFactory, IComponentContainer container, ISettingsToHide settingsToHide);
    protected virtual ICodeStyleEntry ItemFor(Expression`1<Func`2<TKey, TEntryMemberType>> settingsSelector, string code, PreviewType previewType, PreviewParseType parseType, Action`1<IContextBoundSettingsStore> previewFixup, Func`5<IScalarSetting, Lifetime, IProperty`1<bool>, ISettingsEntryConstraints, IValueEditorViewModel> viewModelFactory, string severity, Expression`1<Func`2<TKey, bool>> availableWhen, ISettingsEntryConstraints settingsEntryConstraints);
    protected ICodeStyleEntry ItemWithCodePreviewFor(Expression`1<Func`2<TKeyClass, TEntryMemberType>> settingsSelector, string code, PreviewType previewType, PreviewParseType parseType, Action`1<IContextBoundSettingsStore> previewFixup, Func`5<IScalarSetting, Lifetime, IProperty`1<bool>, ISettingsEntryConstraints, IValueEditorViewModel> viewModelFactory, string severity, Expression`1<Func`2<TKeyClass, bool>> availableWhen, ISettingsEntryConstraints settingsEntryConstraints);
    protected virtual ICodeStyleEntry ItemFor(Expression`1<Func`2<TKey, TEntryMemberType>> settingsSelector, string description, string severity);
    public virtual CodePreviewPreparator GetCodePreviewPreparator();
}
public abstract class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.CodeStylePageSchemaPart`1 : CodeStylePageSchema {
    protected string PagePartName { get; }
    public string PageName { get; }
    protected CodeStylePageSchemaPart`1(Lifetime lifetime, IContextBoundSettingsStoreLive smartContext, IValueEditorViewModelFactory itemViewModelFactory, IComponentContainer container, ISettingsToHide settingsToHide);
    protected abstract virtual string get_PagePartName();
    public sealed virtual string get_PageName();
    public virtual CodePreviewPreparator GetCodePreviewPreparator();
    protected sealed virtual IEnumerable`1<ICodeStyleEntry> Describe();
    protected abstract virtual void DescribePart(SchemaBuilder builder);
}
public abstract class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.CodeStylePageSchemaWithParts`2 : CodeStylePageSchema`2<TPartKey, TPreview> {
    [NotNullAttribute]
private IEnumerable`1<CodeStylePageSchemaPart`1<TPreview>> myPageParts;
    protected CodeStylePageSchemaWithParts`2(Lifetime lifetime, IContextBoundSettingsStoreLive smartContext, IValueEditorViewModelFactory itemViewModelFactory, IComponentContainer container, ISettingsToHide settingsToHide, IEnumerable`1<CodeStylePageSchemaPart`1<TPreview>> pageParts);
    protected sealed virtual IEnumerable`1<ICodeStyleEntry> Describe();
    protected abstract virtual IEnumerable`1<ICodeStyleEntry> DescribeSelf();
    [CompilerGeneratedAttribute]
private bool <Describe>b__2_0(CodeStylePageSchemaPart`1<TPreview> it);
}
[OptionsComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.CodeStylePreview : AAutomation {
    private Lifetime myLifetime;
    private CodeStylePreviewViewModelFactory myCodeStylePreviewViewModelFactory;
    private IIdeInMemoryDocumentFactory myDocumentFactory;
    private FakeSolutionProvider myFakeSolutionProvider;
    private CodeStyleAvailabilityChecker myCodeStyleAvailabilityChecker;
    private ISolution mySolution;
    private ConcurrentDictionary`2<CodePreviewPreparator, IDocument> myInputDocuments;
    private ConcurrentDictionary`2<CodePreviewPreparator, IDocument> myOutputDocuments;
    private Dictionary`2<CodeStylePage, Property`1<IAutomation>> myPagesViewModels;
    public CodeStylePreview(Lifetime lifetime, CodeStylePreviewViewModelFactory codeStylePreviewViewModelFactory, IIdeInMemoryDocumentFactory documentFactory, FakeSolutionProvider fakeSolutionProvider, CodeStyleAvailabilityChecker codeStyleAvailabilityChecker, ISolution solution);
    public IProperty`1<IAutomation> GetPreviewForPage(CodeStylePage codeStylePage);
    public void UpdatePreview(CodeFormatterPreview previewData, IContextBoundSettingsStore boundSettingsStore, CodePreviewPreparator preparator, CodeStylePage codeStylePage);
    private IAutomation BindPreview(CodeFormatterPreview previewData, IContextBoundSettingsStore boundSettingsStore, CodePreviewPreparator preparator);
    private IDocument InitializeDocument(CodePreviewPreparator preparator);
    private IDocument CreateDocument(string documentText);
}
public class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.CodeStylePreviewData : ValueType {
    public static CodeStylePreviewData Empty;
    [CompilerGeneratedAttribute]
private PreviewParseType <Parse>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private PreviewType <Type>k__BackingField;
    public PreviewParseType Parse { get; public set; }
    public string Text { get; public set; }
    public PreviewType Type { get; public set; }
    public CodeStylePreviewData(PreviewType type, PreviewParseType parse, string text);
    private static CodeStylePreviewData();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public PreviewParseType get_Parse();
    [CompilerGeneratedAttribute]
public void set_Parse(PreviewParseType value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public PreviewType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(PreviewType value);
}
[OptionsComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.CodeStylePreviewViewModelFactory : object {
    private Lifetime myLifetime;
    private IShellLocks myLocks;
    private WindowFrame myWindowFrame;
    private IProjectFileTypeServices myProjectFileTypeServices;
    private ITextControlManager myTextControlManager;
    private ConcurrentDictionary`2<CodePreviewPreparator, TextControlAutomation> myCacheInputTextControls;
    private ConcurrentDictionary`2<CodePreviewPreparator, TextControlAutomation> myCacheOutputOrSingleTextControls;
    public CodeStylePreviewViewModelFactory(Lifetime lifetime, IShellLocks locks, WindowFrame windowFrame, IProjectFileTypeServices projectFileTypeServices, ITextControlManager textControlManager);
    public virtual IAutomation CreateCodePreview(ISolution solution, IDocument document, CodeFormatterPreview previewData, IContextBoundSettingsStore boundSettingsStore, CodePreviewPreparator preparator);
    public virtual IAutomation CreateDiffPreview(ISolution solution, IDocument inputDocument, IDocument outputDocument, CodeFormatterPreview previewData, IContextBoundSettingsStore boundSettingsStore, CodePreviewPreparator preparator);
    private void UpdateCodePreviewSettings(TextControlAutomation tcaut, CodePreviewPreparator preparator, IContextBoundSettingsStore boundSettingsStore, ISolution solution);
    public virtual IAutomation CreateDescriptionPreview(CodeFormatterPreview previewData);
    public virtual IAutomation CreateNonePreview();
    private TextControlAutomation InitializeTextControl(CodePreviewPreparator preparator, IDocument document);
    private void ReHighlightDocument(IDocumentMarkup model, ISyntaxAttributeHighlighting syntaxHighlighter, ITextControl textControl, TextRange textRange);
}
public interface JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.Constraints.ISettingsEntryConstraints {
}
public class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.Constraints.NumericSettingsEntryConstraints : object {
    public static NumericSettingsEntryConstraints Default;
    [CompilerGeneratedAttribute]
private int <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxValue>k__BackingField;
    public int MinValue { get; }
    public int MaxValue { get; }
    public NumericSettingsEntryConstraints(int minValue, int maxValue);
    private static NumericSettingsEntryConstraints();
    [CompilerGeneratedAttribute]
public int get_MinValue();
    [CompilerGeneratedAttribute]
public int get_MaxValue();
}
public class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.EditorConfigNotification : AAutomation {
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponentContainer <Container>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ShouldShowEditorConfigWarning>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<HelpId> <HelpTopicId>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <CurrentFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <ConfigFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ShouldShowEditorConfigEditLink>k__BackingField;
    public Lifetime Lifetime { get; }
    public IComponentContainer Container { get; }
    public IProperty`1<bool> ShouldShowEditorConfigWarning { get; }
    public IProperty`1<HelpId> HelpTopicId { get; }
    public IProperty`1<string> CurrentFileName { get; }
    public IProperty`1<string> ConfigFileName { get; }
    public IProperty`1<bool> ShouldShowEditorConfigEditLink { get; }
    public ICommand GoToEditorConfigOrg { get; }
    public ICommand EditEditorConfig { get; }
    public EditorConfigNotification(Lifetime lifetime, bool shouldShowEditorConfigWarning, string currentFileName, string configFileName, HelpId helpTopicId, bool shouldShowEditorConfigEditLink, IComponentContainer container);
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public IComponentContainer get_Container();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ShouldShowEditorConfigWarning();
    [CompilerGeneratedAttribute]
public IProperty`1<HelpId> get_HelpTopicId();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_CurrentFileName();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_ConfigFileName();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ShouldShowEditorConfigEditLink();
    public ICommand get_GoToEditorConfigOrg();
    public ICommand get_EditEditorConfig();
    [CompilerGeneratedAttribute]
private void <get_GoToEditorConfigOrg>b__23_0();
    [CompilerGeneratedAttribute]
private void <get_EditEditorConfig>b__25_0();
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute("8")]
public class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.FormattingSettingsPresentationComponentAttribute : OptionsComponentAttribute {
    public FormattingSettingsPresentationComponentAttribute(Instantiation instantiation);
}
public interface JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.ICodeStylePageSchema {
    public string PageName { get; }
    public KnownLanguage Language { get; }
    public string LanguageName { get; }
    public IProperty`1<bool> IsLanguageSupportEnabled { get; }
    public bool IsAppliedOnCompletion { get; public set; }
    public bool IsCompletionSettingEnabled { get; }
    public IEnumerable`1<ICodeStyleEntry> Entries { get; }
    public abstract virtual string get_PageName();
    public abstract virtual KnownLanguage get_Language();
    public abstract virtual string get_LanguageName();
    public abstract virtual IProperty`1<bool> get_IsLanguageSupportEnabled();
    public abstract virtual bool get_IsAppliedOnCompletion();
    public abstract virtual void set_IsAppliedOnCompletion(bool value);
    public abstract virtual bool get_IsCompletionSettingEnabled();
    public abstract virtual IEnumerable`1<ICodeStyleEntry> get_Entries();
    public abstract virtual CodePreviewPreparator GetCodePreviewPreparator();
}
public abstract class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.IndentStylePageSchema`2 : CodeStylePageSchema`2<TKey, TPreview> {
    public string PageName { get; }
    protected bool SupportsDeclarativeIndentEngine { get; }
    protected IndentStylePageSchema`2(Lifetime lifetime, IContextBoundSettingsStoreLive smartContext, IValueEditorViewModelFactory itemViewModelFactory, IComponentContainer container, ISettingsToHide settingsToHide);
    public virtual string get_PageName();
    protected virtual IEnumerable`1<ICodeStyleEntry> Describe();
    protected virtual Pair`2<string, PreviewParseType> GetPreviewForIndents();
    protected virtual Tuple`3<string, PreviewParseType, Action`1<IContextBoundSettingsStore>> GetPreviewForTabAlignStyle();
    protected virtual void Describe(SchemaBuilder<TKey, TPreview> builder);
    protected virtual void BuildFirstCategorySettings(SchemaBuilder<TKey, TPreview> builder);
    protected virtual bool IncludeAlignSettingsInFirstCategory();
    protected virtual bool get_SupportsDeclarativeIndentEngine();
    protected void BuildTabAlignStyleSetting(SchemaBuilder<TKey, TPreview> builder);
    protected void PreviewFixupTabs(IContextBoundSettingsStore store);
    protected virtual string FirstCategoryDescription();
}
internal class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.Interpreter`1 : LinqExpressionVisitor {
    private ISettingsSchema mySchema;
    private ParameterExpression myOriginal;
    private ParameterExpression myReplacement;
    private List`1<SettingsEntry> myDependencies;
    private Func`2<IContextBoundSettingsStore, bool> myCalculateValue;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsAvailable>k__BackingField;
    public IProperty`1<bool> IsAvailable { get; }
    public Interpreter`1(Lifetime lifetime, IContextBoundSettingsStore settingsStore, Expression`1<Func`2<T, bool>> expression);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsAvailable();
    internal virtual Expression VisitMemberAccess(MemberExpression m);
}
public interface JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.IValueEditorViewModelFactory {
    public abstract virtual IValueEditorViewModel CreateFor(IScalarSetting settingsEntry, Lifetime overrideLifetime, IProperty`1<bool> isEnabled, ISettingsEntryConstraints settingsEntryConstraints);
}
internal abstract class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.LinqExpressionVisitor : object {
    internal virtual Expression Visit(Expression exp);
    internal virtual MemberBinding VisitBinding(MemberBinding binding);
    internal virtual ElementInit VisitElementInitializer(ElementInit initializer);
    internal virtual Expression VisitUnary(UnaryExpression u);
    internal virtual Expression VisitBinary(BinaryExpression b);
    internal virtual Expression VisitTypeIs(TypeBinaryExpression b);
    internal virtual Expression VisitConstant(ConstantExpression c);
    internal virtual Expression VisitConditional(ConditionalExpression c);
    internal virtual Expression VisitParameter(ParameterExpression p);
    internal virtual Expression VisitMemberAccess(MemberExpression m);
    internal virtual Expression VisitMethodCall(MethodCallExpression m);
    internal virtual ReadOnlyCollection`1<Expression> VisitExpressionList(ReadOnlyCollection`1<Expression> original);
    internal virtual MemberAssignment VisitMemberAssignment(MemberAssignment assignment);
    internal virtual MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding binding);
    internal virtual MemberListBinding VisitMemberListBinding(MemberListBinding binding);
    internal virtual IEnumerable`1<MemberBinding> VisitBindingList(ReadOnlyCollection`1<MemberBinding> original);
    internal virtual IEnumerable`1<ElementInit> VisitElementInitializerList(ReadOnlyCollection`1<ElementInit> original);
    internal virtual Expression VisitLambda(LambdaExpression lambda);
    internal virtual NewExpression VisitNew(NewExpression nex);
    internal virtual Expression VisitMemberInit(MemberInitExpression init);
    internal virtual Expression VisitListInit(ListInitExpression init);
    internal virtual Expression VisitNewArray(NewArrayExpression na);
    internal virtual Expression VisitInvocation(InvocationExpression iv);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.NamespaceImportsPageBase`1 : BeSimpleOptionsPage {
    private IconHostBase myIconHost;
    protected PsiLanguageType Language { get; }
    protected Expression`1<Func`2<TSettingsKey, bool>> KeepNontrivialAlias { get; }
    protected Expression`1<Func`2<TSettingsKey, bool>> RemoveOnlyUnusedAliases { get; }
    protected Expression`1<Func`2<TSettingsKey, IIndexedEntry`2<string, string>>> KeepImports { get; }
    protected Expression`1<Func`2<TSettingsKey, IIndexedEntry`2<string, string>>> MandatoryImports { get; }
    protected Expression`1<Func`2<TSettingsKey, IIndexedEntry`2<string, string>>> NonRedundantNamespaces { get; }
    protected string NonTrivialAliasExample { get; }
    protected NamespaceImportsPageBase`1(Lifetime lifetime, OptionsPageContext optionsPageContext, IconHostBase iconHost, OptionsSettingsSmartContext optionsSettingsSmartContext);
    protected abstract virtual PsiLanguageType get_Language();
    protected abstract virtual Expression`1<Func`2<TSettingsKey, bool>> get_KeepNontrivialAlias();
    protected abstract virtual Expression`1<Func`2<TSettingsKey, bool>> get_RemoveOnlyUnusedAliases();
    protected abstract virtual Expression`1<Func`2<TSettingsKey, IIndexedEntry`2<string, string>>> get_KeepImports();
    protected abstract virtual Expression`1<Func`2<TSettingsKey, IIndexedEntry`2<string, string>>> get_MandatoryImports();
    protected abstract virtual Expression`1<Func`2<TSettingsKey, IIndexedEntry`2<string, string>>> get_NonRedundantNamespaces();
    protected abstract virtual string get_NonTrivialAliasExample();
    protected void Build();
    private void AddAliasOptimizationPolicyControls();
    private BeControl CreateNamespaceListControl(Expression`1<Func`2<TSettingsKey, IIndexedEntry`2<string, string>>> indexedEntry, string caption);
}
public enum JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.PreviewParseType : Enum {
    public int value__;
    public static PreviewParseType None;
    public static PreviewParseType File;
    public static PreviewParseType Member;
    public static PreviewParseType Statement;
}
public enum JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.PreviewType : Enum {
    public int value__;
    public static PreviewType None;
    public static PreviewType Description;
    public static PreviewType Code;
    public static PreviewType Diff;
}
[OptionsComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.ValueEditorViewModelFactory : object {
    private Lifetime myLifetime;
    private IContextBoundSettingsStoreLive mySmartContext;
    [NotNullAttribute]
private IThreading myThreading;
    public ValueEditorViewModelFactory(Lifetime lifetime, IContextBoundSettingsStoreLive smartContext, IThreading threading);
    public sealed virtual IValueEditorViewModel CreateFor(IScalarSetting settingsEntry, Lifetime overrideLifetime, IProperty`1<bool> isEnabled, ISettingsEntryConstraints settingsEntryConstraints);
    private IValueEditorViewModel TryAsBoolean(IScalarSetting settingsEntry, Lifetime lifetime, IProperty`1<bool> isEnabled);
    private IValueEditorViewModel TryAsString(IScalarSetting entry, Lifetime lifetime, IProperty`1<bool> isEnabled);
    private IValueEditorViewModel TryAsNumeric(IScalarSetting entry, Lifetime lifetime, IProperty`1<bool> isEnabled, ISettingsEntryConstraints settingsEntryConstraints);
    private IValueEditorViewModel TryAsEnum(IScalarSetting entry, Lifetime lifetime, IProperty`1<bool> isEnabled);
    private IValueEditorViewModel ThrowNotSupported(IScalarSetting entry);
}
public class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.ViewModels.CodeFormatterPreview : object {
    private Action`1<IContextBoundSettingsStore> myPreviewFixup;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private PreviewType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private PreviewParseType <Parse>k__BackingField;
    public string Text { get; public set; }
    public PreviewType Type { get; public set; }
    public PreviewParseType Parse { get; public set; }
    public CodeFormatterPreview(string text, PreviewType previewType, Action`1<IContextBoundSettingsStore> previewFixup, PreviewParseType parseType);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public PreviewType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(PreviewType value);
    [CompilerGeneratedAttribute]
public PreviewParseType get_Parse();
    [CompilerGeneratedAttribute]
public void set_Parse(PreviewParseType value);
    public void FixupSettingsForPreview(IContextBoundSettingsStore settingsStore);
}
public class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.ViewModels.CodeStyleItem : AAutomation {
    private Lazy`1<IValueEditorViewModel> myEditor;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IScalarSetting <SettingsEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private SeverityItem <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private ICodeStylePreviewData <PreviewData>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ICodeStyleEntry> <Children>k__BackingField;
    public string Description { get; }
    public IProperty`1<bool> IsAvailable { get; }
    public IScalarSetting SettingsEntry { get; }
    public IValueEditorViewModel Editor { get; }
    public SeverityItem Severity { get; }
    public ICodeStylePreviewData PreviewData { get; }
    public IEnumerable`1<ICodeStyleEntry> Children { get; }
    public CodeStyleItem(string description, SeverityItem severity, ICodeStylePreviewData previewData, ICodeStyleEntry[] children);
    public CodeStyleItem(IScalarSetting settingsEntry, Func`1<IValueEditorViewModel> editorGetter, SeverityItem severity, ICodeStylePreviewData previewData, ICodeStyleEntry[] children);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    public sealed virtual IProperty`1<bool> get_IsAvailable();
    [CompilerGeneratedAttribute]
public sealed virtual IScalarSetting get_SettingsEntry();
    public sealed virtual IValueEditorViewModel get_Editor();
    [CompilerGeneratedAttribute]
public sealed virtual SeverityItem get_Severity();
    [CompilerGeneratedAttribute]
public sealed virtual ICodeStylePreviewData get_PreviewData();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<ICodeStyleEntry> get_Children();
}
public interface JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.ViewModels.ICodeStyleEntry {
    [NotNullAttribute]
public string Description { get; }
    [CanBeNullAttribute]
public IProperty`1<bool> IsAvailable { get; }
    [CanBeNullAttribute]
public IScalarSetting SettingsEntry { get; }
    [CanBeNullAttribute]
public IValueEditorViewModel Editor { get; }
    [CanBeNullAttribute]
public SeverityItem Severity { get; }
    [NotNullAttribute]
public IEnumerable`1<ICodeStyleEntry> Children { get; }
    public abstract virtual string get_Description();
    public abstract virtual IProperty`1<bool> get_IsAvailable();
    public abstract virtual IScalarSetting get_SettingsEntry();
    public abstract virtual IValueEditorViewModel get_Editor();
    public abstract virtual SeverityItem get_Severity();
    public abstract virtual IEnumerable`1<ICodeStyleEntry> get_Children();
}
public interface JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.ViewModels.ICodeStylePreviewData {
}
public interface JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.ViewModels.IHavePreview {
    public ICodeStylePreviewData PreviewData { get; }
    public abstract virtual ICodeStylePreviewData get_PreviewData();
}
public class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.ViewModels.Preview.CodePreviewViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private TextControlAutomation <TextControl>k__BackingField;
    public TextControlAutomation TextControl { get; }
    public CodePreviewViewModel(TextControlAutomation decorator);
    [CompilerGeneratedAttribute]
public TextControlAutomation get_TextControl();
}
public class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.ViewModels.Preview.DescriptionPreviewViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public DescriptionPreviewViewModel(string description);
    [CompilerGeneratedAttribute]
public string get_Text();
}
public class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.ViewModels.Preview.DiffPreviewViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private TextControlAutomation <InputTextControl>k__BackingField;
    [CompilerGeneratedAttribute]
private TextControlAutomation <OutputTextControl>k__BackingField;
    public TextControlAutomation InputTextControl { get; }
    public TextControlAutomation OutputTextControl { get; }
    public DiffPreviewViewModel(TextControlAutomation inputDecorator, TextControlAutomation outputDecorator);
    [CompilerGeneratedAttribute]
public TextControlAutomation get_InputTextControl();
    [CompilerGeneratedAttribute]
public TextControlAutomation get_OutputTextControl();
}
public class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.ViewModels.Preview.NonePreviewViewModel : AAutomation {
}
public class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.ViewModels.SeverityItem : ObservableObject {
    [NotNullAttribute]
private ConfigurableSeverityItem myItem;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<SeverityOption> <SeverityOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Severity> <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <Reset>k__BackingField;
    public IProperty`1<string> Title { get; }
    [NotNullAttribute]
public string Description { get; }
    public ICollection`1<SeverityOption> SeverityOptions { get; }
    public IProperty`1<Severity> Value { get; }
    public IProperty`1<bool> IsDefault { get; }
    public IProperty`1<bool> IsEnabled { get; }
    public ICommand Reset { get; }
    public SeverityItem(Lifetime lifetime, IContextBoundSettingsStore settingsStore, ConfigurableSeverityItem item, bool isEnabled);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_Title();
    public string get_Description();
    [CompilerGeneratedAttribute]
public ICollection`1<SeverityOption> get_SeverityOptions();
    [CompilerGeneratedAttribute]
public IProperty`1<Severity> get_Value();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsDefault();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsEnabled();
    [CompilerGeneratedAttribute]
public ICommand get_Reset();
    private void GuardFromInvalidValue(BeforePropertyChangedEventArgs`1<Severity> e);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__21_0(Severity severity);
    [CompilerGeneratedAttribute]
private void <.ctor>b__21_1();
}
public class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.ViewModels.ValueEditors.BoolValueEditorViewModel : ValueEditorViewModelBase`1<bool> {
    public BoolValueEditorViewModel(Lifetime lifetime, IProperty`1<bool> isEnabled, IScalarSetting`1<bool> entry, IContextBoundSettingsStoreLive smartContext);
    public virtual void Toggle();
}
public class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.ViewModels.ValueEditors.EnumValueEditorViewModel : ValueEditorViewModelBase`1<object> {
    [CompilerGeneratedAttribute]
private Option[] <Items>k__BackingField;
    public Option[] Items { get; }
    public EnumValueEditorViewModel(Lifetime lifetime, IProperty`1<bool> isEnabled, IScalarSetting entry, IContextBoundSettingsStoreLive smartContext);
    [CompilerGeneratedAttribute]
public Option[] get_Items();
    private bool ShouldNotBeSkipped(FieldInfo field);
    private Option ToComboBoxItem(FieldInfo field);
    public virtual void Toggle();
    protected virtual string ConvertValueToString(object o);
    private int GetSelectedIndex();
}
public class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.ViewModels.ValueEditors.FlaggedEnumMemberViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private FieldInfo <Field>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsChecked>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsCheckedChanging>k__BackingField;
    public FieldInfo Field { get; }
    public string Name { get; }
    public IProperty`1<bool> IsChecked { get; }
    public IProperty`1<bool> IsCheckedChanging { get; }
    public FlaggedEnumMemberViewModel(Lifetime lifetime, FieldInfo fieldInfo, Func`2<object, bool> has, Action update);
    [CompilerGeneratedAttribute]
public FieldInfo get_Field();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsChecked();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsCheckedChanging();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.ViewModels.ValueEditors.FlaggedEnumValueEditorViewModel : ValueEditorViewModelBase`1<object> {
    [CompilerGeneratedAttribute]
private FlaggedEnumMemberViewModel[] <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsExpanded>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Text>k__BackingField;
    public FlaggedEnumMemberViewModel[] Items { get; }
    public IProperty`1<bool> IsExpanded { get; }
    public IProperty`1<string> Text { get; }
    public FlaggedEnumValueEditorViewModel(Lifetime lifetime, IProperty`1<bool> isEnabled, IScalarSetting entry, IContextBoundSettingsStoreLive smartContext);
    [CompilerGeneratedAttribute]
public FlaggedEnumMemberViewModel[] get_Items();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsExpanded();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_Text();
    public void UpdateValue();
    private string FConverter(object o);
    private bool ShouldNotBeSkipped(FieldInfo field);
    public bool Has(object value);
    public virtual void Toggle();
}
public interface JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.ViewModels.ValueEditors.IValueEditorViewModel {
    public ISimpleSignal ValueChanged { get; }
    [CanBeNullAttribute]
public IProperty`1<bool> IsEnabled { get; }
    [NotNullAttribute]
public IProperty`1<object> OverridenValue { get; }
    [NotNullAttribute]
public IProperty`1<string> WhereOverriden { get; }
    [NotNullAttribute]
public IProperty`1<string> Tooltip { get; }
    [NotNullAttribute]
public IProperty`1<bool> Highlight { get; }
    public abstract virtual ISimpleSignal get_ValueChanged();
    public abstract virtual IProperty`1<bool> get_IsEnabled();
    public abstract virtual IProperty`1<object> get_OverridenValue();
    public abstract virtual IProperty`1<string> get_WhereOverriden();
    public abstract virtual IProperty`1<string> get_Tooltip();
    public abstract virtual IProperty`1<bool> get_Highlight();
    public abstract virtual void Toggle();
    public abstract virtual void SetValue(object value);
}
public class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.ViewModels.ValueEditors.NumericValueEditorViewModel : ValueEditorViewModelBase`1<int> {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsFocused>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxValue>k__BackingField;
    public IProperty`1<bool> IsFocused { get; }
    public int MinValue { get; }
    public int MaxValue { get; }
    public NumericValueEditorViewModel(Lifetime lifetime, IProperty`1<bool> isEnabled, IScalarSetting`1<int> entry, IContextBoundSettingsStoreLive smartContext, NumericSettingsEntryConstraints constraints);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsFocused();
    [CompilerGeneratedAttribute]
public int get_MinValue();
    [CompilerGeneratedAttribute]
public int get_MaxValue();
    public virtual void Toggle();
}
public class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.ViewModels.ValueEditors.OrderedItemCollectionEditorViewModel : ValueEditorViewModelBase`1<string> {
    private Func`2<String[], string> myJoiner;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <SelectedIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private SignalCommand <MoveUpCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private SignalCommand <MoveDownCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsExpanded>k__BackingField;
    public ObservableCollection`1<string> Modifiers { get; }
    public IProperty`1<int> SelectedIndex { get; }
    public SignalCommand MoveUpCommand { get; }
    public SignalCommand MoveDownCommand { get; }
    public IProperty`1<bool> IsExpanded { get; }
    public OrderedItemCollectionEditorViewModel(Lifetime lifetime, IProperty`1<bool> isEnabled, IScalarSetting`1<string> entry, IContextBoundSettingsStoreLive smartContext, Func`2<string, String[]> splitter, Func`2<String[], string> joiner);
    [CompilerGeneratedAttribute]
public ObservableCollection`1<string> get_Modifiers();
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_SelectedIndex();
    [CompilerGeneratedAttribute]
public SignalCommand get_MoveUpCommand();
    [CompilerGeneratedAttribute]
public SignalCommand get_MoveDownCommand();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsExpanded();
    private void MoveUp();
    private void MoveDown();
    private void UpdateValue();
    public virtual void Toggle();
    public void UpdateValue(IEnumerable`1<string> items);
}
public class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.ViewModels.ValueEditors.SimpleStringValueEditorViewModel : ValueEditorViewModelBase`1<string> {
    [CompilerGeneratedAttribute]
private Property`1<bool> <IsFocused>k__BackingField;
    public Property`1<bool> IsFocused { get; }
    public SimpleStringValueEditorViewModel(Lifetime lifetime, IProperty`1<bool> isEnabled, IScalarSetting`1<string> entry, IContextBoundSettingsStoreLive smartContext);
    [CompilerGeneratedAttribute]
public Property`1<bool> get_IsFocused();
    public virtual void Toggle();
}
public abstract class JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.ViewModels.ValueEditors.ValueEditorViewModelBase`1 : AAutomation {
    [CompilerGeneratedAttribute]
private ISimpleSignal <ValueChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <WhereOverriden>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<object> <OverridenValue>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Tooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Highlight>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<T> <Value>k__BackingField;
    public ISimpleSignal ValueChanged { get; }
    [CanBeNullAttribute]
public IProperty`1<bool> IsEnabled { get; }
    public IProperty`1<string> WhereOverriden { get; }
    public IProperty`1<object> OverridenValue { get; }
    public IProperty`1<string> Tooltip { get; }
    public IProperty`1<bool> Highlight { get; }
    [NotNullAttribute]
public IProperty`1<T> Value { get; }
    protected ValueEditorViewModelBase`1(Lifetime lifetime, IProperty`1<bool> isEnabled, IScalarSetting settingsEntry, IContextBoundSettingsStoreLive smartContext);
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_ValueChanged();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<string> get_WhereOverriden();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<object> get_OverridenValue();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<string> get_Tooltip();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_Highlight();
    [CompilerGeneratedAttribute]
public IProperty`1<T> get_Value();
    protected void HandleValueChanged();
    public abstract virtual void Toggle();
    public sealed virtual void SetValue(object value);
    protected virtual string ConvertValueToString(object o);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_1();
}
[ZoneDefinitionAttribute]
public interface JetBrains.ReSharper.Feature.Services.OptionPages.ICodeEditingOptionsPageImplZone {
}
public interface JetBrains.ReSharper.Feature.Services.OptionPages.ISettingsToHide {
    public abstract virtual bool ShouldHide(SettingsEntry entry);
}
public interface JetBrains.ReSharper.Feature.Services.OptionPages.ISettingsToHideProvider {
    public abstract virtual IEnumerable`1<SettingsEntry> GetSettingsToHide();
}
public class JetBrains.ReSharper.Feature.Services.OptionPages.LanguageInjections.InjectionInfoGroupViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private string <GroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<InjectionInfoViewModel> <Items>k__BackingField;
    [NotNullAttribute]
public string GroupName { get; }
    [NotNullAttribute]
public List`1<InjectionInfoViewModel> Items { get; }
    public InjectionInfoGroupViewModel(string groupName, List`1<InjectionInfoViewModel> items);
    [CompilerGeneratedAttribute]
public string get_GroupName();
    [CompilerGeneratedAttribute]
public List`1<InjectionInfoViewModel> get_Items();
}
public class JetBrains.ReSharper.Feature.Services.OptionPages.LanguageInjections.InjectionInfoViewModel : ObservableObject {
    [CompilerGeneratedAttribute]
private InjectionInfo <InjectionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProvidedLanguageID>k__BackingField;
    public InjectionInfo InjectionInfo { get; }
    public string Source { get; }
    public string Summary { get; }
    public string Description { get; }
    public string ProvidedLanguageID { get; }
    public bool IsChecked { get; public set; }
    public InjectionInfoViewModel(InjectionInfo source, string summary, string description, string providedLanguageID);
    [CompilerGeneratedAttribute]
public InjectionInfo get_InjectionInfo();
    public string get_Source();
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public string get_ProvidedLanguageID();
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
}
public class JetBrains.ReSharper.Feature.Services.OptionPages.LanguageInjections.InjectionInfoViewModelToVisibilityConverter : object {
    [NotNullAttribute]
public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[OptionsPageAttribute("LanguageInjections", "Language Injections", "JetBrains.ReSharper.Resources.Resources.Icons.PsiFeaturesUnsortedThemedIcons/LangInjection")]
public class JetBrains.ReSharper.Feature.Services.OptionPages.LanguageInjections.LanguageInjectionsOptionPage : CustomSimpleOptionsPage {
    public static string PID;
    public LanguageInjectionsOptionPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, ISettingsOptimization settingsOptimization, ILogger logger, FakeSolutionProvider fakeSolutionProvider, ISolution solution);
}
public class JetBrains.ReSharper.Feature.Services.OptionPages.LanguageInjections.LanguageInjectionsOptionsViewModel : ObservableObject {
    [CompilerGeneratedAttribute]
private OptionsSettingsSmartContext <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingsOptimization <SettingsOptimization>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    public OptionsSettingsSmartContext Settings { get; public set; }
    public ISettingsOptimization SettingsOptimization { get; public set; }
    public ILogger Logger { get; public set; }
    public ISolution Solution { get; public set; }
    public Lifetime Lifetime { get; public set; }
    public LanguageInjectionsOptionsViewModel(OptionsSettingsSmartContext settings, ISettingsOptimization settingsOptimization, ILogger logger, ISolution solution, Lifetime lifetime);
    [CompilerGeneratedAttribute]
public OptionsSettingsSmartContext get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(OptionsSettingsSmartContext value);
    [CompilerGeneratedAttribute]
public ISettingsOptimization get_SettingsOptimization();
    [CompilerGeneratedAttribute]
public void set_SettingsOptimization(ISettingsOptimization value);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    [CompilerGeneratedAttribute]
public void set_Solution(ISolution value);
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public void set_Lifetime(Lifetime value);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.OptionPages.LanguageInjections.ZoneMarker : object {
}
[OptionsComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.OptionPages.SettingsToHide : object {
    private HashSet`1<SettingsEntry> mySet;
    public SettingsToHide(IEnumerable`1<ISettingsToHideProvider> providers);
    public sealed virtual bool ShouldHide(SettingsEntry entry);
}
public enum JetBrains.ReSharper.Feature.Services.Options.AutoformatType : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("None")]
public static AutoformatType None;
    [LocalizedDescriptionAttribute("Indent")]
public static AutoformatType Indent;
    [LocalizedDescriptionAttribute("Reformat")]
public static AutoformatType FullFormat;
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Options.DefaultEnableTypingAssistFeatures : object {
    public bool SmartIndentOnEnter { get; }
    public bool DumbIndentOnEnter { get; }
    public bool CloseTags { get; }
    public bool SmartDocComment { get; }
    public bool InsertAsteriskInBlockComments { get; }
    public bool ExperimentalCppTypingAssist { get; }
    public bool EmulateIdea { get; }
    public virtual bool get_SmartIndentOnEnter();
    public virtual bool get_DumbIndentOnEnter();
    public virtual bool get_CloseTags();
    public virtual bool get_SmartDocComment();
    public virtual bool get_InsertAsteriskInBlockComments();
    public virtual bool get_ExperimentalCppTypingAssist();
    public virtual bool get_EmulateIdea();
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Options.HostAutoFormatSettings : object {
    public static HostAutoFormatSettings Instance { get; }
    public bool PrettyListingIsEnabled { get; }
    public static HostAutoFormatSettings get_Instance();
    public virtual bool get_PrettyListingIsEnabled();
    public virtual void DisableAutoFormat(Lifetime lifetime, string moniker);
}
public interface JetBrains.ReSharper.Feature.Services.Options.IEnableTypingAssistFeatures {
    public bool SmartIndentOnEnter { get; }
    public bool DumbIndentOnEnter { get; }
    public bool CloseTags { get; }
    public bool SmartDocComment { get; }
    public bool InsertAsteriskInBlockComments { get; }
    public bool ExperimentalCppTypingAssist { get; }
    public bool EmulateIdea { get; }
    public abstract virtual bool get_SmartIndentOnEnter();
    public abstract virtual bool get_DumbIndentOnEnter();
    public abstract virtual bool get_CloseTags();
    public abstract virtual bool get_SmartDocComment();
    public abstract virtual bool get_InsertAsteriskInBlockComments();
    public abstract virtual bool get_ExperimentalCppTypingAssist();
    public abstract virtual bool get_EmulateIdea();
}
public enum JetBrains.ReSharper.Feature.Services.Options.SmartBackspaceMode : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("Disabled")]
public static SmartBackspaceMode OFF;
    [LocalizedDescriptionAttribute("To nearest indent position")]
public static SmartBackspaceMode INDENT;
    [LocalizedDescriptionAttribute("To proper indent position")]
public static SmartBackspaceMode AUTOINDENT;
}
public enum JetBrains.ReSharper.Feature.Services.Options.SmartBraceInsertType : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("None")]
public static SmartBraceInsertType DISABLED;
    [LocalizedDescriptionAttribute("On typing an opening brace")]
public static SmartBraceInsertType ON_LBRACE;
    [LocalizedDescriptionAttribute("On Enter after an opening brace")]
public static SmartBraceInsertType ON_ENTER;
}
public enum JetBrains.ReSharper.Feature.Services.Options.TabHandlingType : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("Use Visual Studio handler")]
public static TabHandlingType UseVisualStudio;
    [LocalizedDescriptionAttribute("Insert tab/space or increase indentation")]
public static TabHandlingType IncreaseIndent;
    [LocalizedDescriptionAttribute("Reindent (adjust indentation)")]
public static TabHandlingType ReindentLines;
}
public static class JetBrains.ReSharper.Feature.Services.Options.TypingAssistOptions : object {
    public static Expression`1<Func`2<TypingAssistSettings, bool>> SmartParenthEnabledExpression;
    public static Expression`1<Func`2<TypingAssistSettings, bool>> StringLiteralJoinEnabledExpression;
    public static Expression`1<Func`2<TypingAssistSettings, bool>> SurroundTypingEnabled;
    public static Expression`1<Func`2<TypingAssistSettings, SmartBraceInsertType>> BraceInsertTypeExpression;
    public static Expression`1<Func`2<TypingAssistSettings, bool>> CorrectCommonTyposExpression;
    public static Expression`1<Func`2<TypingAssistSettings, bool>> EnableStructuralRemove;
    public static Expression`1<Func`2<TypingAssistSettings, bool>> SmartIndentOnEnterExpression;
    public static Expression`1<Func`2<TypingAssistSettings, bool>> VirtualSpaceOnEnterExpression;
    public static Expression`1<Func`2<TypingAssistSettings, bool>> InsertAsteriskInBlockComments;
    public static Expression`1<Func`2<TypingAssistSettings, bool>> FormatBlockOnRBraceExpression;
    public static Expression`1<Func`2<TypingAssistSettings, bool>> FormatStatementOnSemicolonExpression;
    public static Expression`1<Func`2<TypingAssistSettings, bool>> HandleTab;
    public static Expression`1<Func`2<TypingAssistSettings, TabHandlingType>> TabHandlingType;
    public static Expression`1<Func`2<TypingAssistSettings, SmartBackspaceMode>> SmartBackspace;
    public static Expression`1<Func`2<TypingAssistSettings, AutoformatType>> FormatOnPasteExpression;
    public static Expression`1<Func`2<TypingAssistSettings, bool>> SkipClosingBracesOnTab;
    public static Expression`1<Func`2<TypingAssistSettings, bool>> SkipClosingBracesOnTabInStringLiterals;
    public static Expression`1<Func`2<TypingAssistSettings, bool>> SkipClosingBracesOnTabInIndentPosition;
    private static TypingAssistOptions();
}
[SettingsKeyAttribute("JetBrains.ReSharper.Resources.Settings.CodeEditingSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "TypingAssistanceSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.Options.TypingAssistSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "AutoInsertPairBracketsParenthesesAndQuotesSettingDescription")]
public bool SmartParenthEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "JoinConcatenatedStringsOnPlusSignRemovalDescription")]
public bool StringLiteralJoinEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "SurroundOnTypingWithSelectionSettingDescription")]
public bool SurroundTypingEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "AutoInsertClosingBraceSettingDescription")]
public SmartBraceInsertType BraceInsertType;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "CorrectCommonLanguageSpecificTyposSettingDescription")]
public bool CorrectCommonTypos;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "EnableStructuralRemoveSettingDescription")]
public bool EnableStructuralRemove;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "AutoFormatOnClosingBraceSettingDescription")]
public bool FormatBlockOnRBrace;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "AutoFormatOnSemicolonSettingDescription")]
public bool FormatStatementOnSemicolon;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "AutoFormatOnPasteSettingDescription")]
public AutoformatType FormatOnPaste;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "SmartIndentOnEnterSettingDescription")]
public bool SmartIndentOnEnter;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "InsertVirtualIndentOnEnterSettingDescription")]
public bool VirtualSpaceOnEnter;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "InsertOnEnterAfterSettingDescription")]
public bool InsertAsteriskInBlockComments;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "UseFormatterConfigurationForTabSettingDescription")]
public bool HandleTab;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "JumpOutsideOfClosingBracesWithTabWhenTypingSettingDescription")]
public bool SkipClosingBracesOnTab;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "JumpOutsideOfClosingBracesQuotesInStringLiteralsWithTabSettingDescription")]
public bool SkipClosingBracesOnTabInStringLiterals;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "JumpOutsideOfClosingBracesQuotesWithTabWhenTheCaretIsBeforeTheFirstSymbolOnTheLineSettingDescription")]
public bool SkipClosingBracesOnTabInIndentPosition;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhenTabIsPressedSettingDescription")]
public TabHandlingType TabHandlingType;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "BackspaceUnindentSettingDescription")]
public SmartBackspaceMode SmartBackspace;
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Options.Upgrade.TypingAssistSettingsUpgrader : SettingTablesUpgrader {
    private static string SMART_PARENTH_INSERT;
    private static string FORMAT_BLOCK_ON_RBRACE;
    private static string FORMAT_STATEMENT_ON_SEMICOLON;
    private static string SMART_BRACE_INSERT;
    private static string SMART_INDENT_ON_ENTER;
    public TypingAssistSettingsUpgrader(ProductConfigurations productConfigurations);
    protected virtual void DoUpgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime, SettingsTableBase workspaceSettingsTable, SettingsTableBase globalSettingsTable);
}
public class JetBrains.ReSharper.Feature.Services.OverridesSupport.HierarchyMember : object {
    [CompilerGeneratedAttribute]
private IOverridableMember <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HierarchyProblem> <HierarchyProblems>k__BackingField;
    public IOverridableMember Member { get; }
    public IList`1<HierarchyProblem> HierarchyProblems { get; public set; }
    public HierarchyMember(HierarchyProblem hierarchyProblem, IOverridableMember member);
    public HierarchyMember(IOverridableMember member);
    [CompilerGeneratedAttribute]
public IOverridableMember get_Member();
    [CompilerGeneratedAttribute]
public IList`1<HierarchyProblem> get_HierarchyProblems();
    [CompilerGeneratedAttribute]
public void set_HierarchyProblems(IList`1<HierarchyProblem> value);
    public bool Equals(HierarchyMember hierarchyMember);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class JetBrains.ReSharper.Feature.Services.OverridesSupport.HierarchyProblem : object {
    public IOverridableMember NonIncudedProblemSource { get; }
    public virtual IOverridableMember get_NonIncudedProblemSource();
}
public class JetBrains.ReSharper.Feature.Services.OverridesSupport.ImplementsMemberFromCompiledCode : HierarchyProblem {
    private IList`1<OverridableMemberInstance> myCompiledMembers;
    public IList`1<OverridableMemberInstance> CompiledMembers { get; }
    public IList`1<OverridableMemberInstance> get_CompiledMembers();
}
public class JetBrains.ReSharper.Feature.Services.OverridesSupport.ImplementsMemberProblem : HierarchyProblem {
    [CompilerGeneratedAttribute]
private OverridableMemberInstance <MemberInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private IClass <Class>k__BackingField;
    public OverridableMemberInstance MemberInstance { get; }
    public IClass Class { get; }
    public IOverridableMember NonIncudedProblemSource { get; }
    public ImplementsMemberProblem(OverridableMemberInstance memberInstance, IClass class);
    [CompilerGeneratedAttribute]
public OverridableMemberInstance get_MemberInstance();
    [CompilerGeneratedAttribute]
public IClass get_Class();
    public virtual IOverridableMember get_NonIncudedProblemSource();
}
public class JetBrains.ReSharper.Feature.Services.OverridesSupport.InterfaceIsQuasiImplementedProblem : HierarchyProblem {
    private IClass myJointClass;
    private OverridableMemberInstance myImplementingMember;
    public IClass JointClass { get; }
    public OverridableMemberInstance ImplementingMember { get; }
    public IOverridableMember NonIncudedProblemSource { get; }
    public InterfaceIsQuasiImplementedProblem(IClass jointClass, OverridableMemberInstance implementingMember);
    public IClass get_JointClass();
    public OverridableMemberInstance get_ImplementingMember();
    public virtual IOverridableMember get_NonIncudedProblemSource();
}
public class JetBrains.ReSharper.Feature.Services.OverridesSupport.IsImplementedInCompiledCode : HierarchyProblem {
    private IList`1<OverridableMemberInstance> myCompiledMembers;
    public IList`1<OverridableMemberInstance> CompiledMembers { get; }
    public IList`1<OverridableMemberInstance> get_CompiledMembers();
}
public class JetBrains.ReSharper.Feature.Services.OverridesSupport.OverridesFinder : object {
    private IOverridableMember myOverridableMember;
    private IFinder myFinder;
    [CompilerGeneratedAttribute]
private JetHashSet`1<HierarchyMember> <Overrides>k__BackingField;
    public JetHashSet`1<HierarchyMember> Overrides { get; }
    private OverridesFinder(IOverridableMember overridableMember);
    public static OverridesFinder CreateInstance(IOverridableMember overridableMember);
    [CompilerGeneratedAttribute]
public JetHashSet`1<HierarchyMember> get_Overrides();
    public void Find(IProgressIndicator pi);
    private void RemoveWrongProblems();
    private void IterateHierarchyDown(HierarchyMember superMember, SubProgressIndicator pi);
    private static void CheckForOtherSuperMembers(IOverridableMember overridableMember, HierarchyMember hierarchyMember);
    private HierarchyMember EnqueueImplementations(Queue`1<IOverridableMember> queue, IOverridableMember overridableMember, IProgressIndicator pi);
    private static IList`1<HierarchyMember> FindRootMembers(IOverridableMember member);
    private static void ProcessBasesAndEnqueueNotCompiled(IOverridableMember member, Queue`1<OverridableMemberInstance> intermediateMembers, ICollection`1<HierarchyMember> rootMembers);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.PackageChecker.IPackageCheckerPackagesProvider {
    public IEnumerable`1<INugetPackageName> Packages { get; }
    public ISignal`1<Unit> OnChanged { get; }
    public bool IsProjectPackages { get; }
    public abstract virtual IEnumerable`1<INugetPackageName> get_Packages();
    public abstract virtual ISignal`1<Unit> get_OnChanged();
    public abstract virtual bool get_IsProjectPackages();
}
[ZoneDefinitionAttribute]
[ZoneDefinitionConfigurableFeatureAttribute("Package Checker", "JetBrains-hosted online service for checking known vulnerabilities in installed NuGet packages", "False")]
public interface JetBrains.ReSharper.Feature.Services.PackageChecker.IPackageCheckerZone {
}
public interface JetBrains.ReSharper.Feature.Services.PackageChecker.IVulnerablePackagesTracker {
    public IReadOnlyDictionary`2<INugetPackageName, VulnerabilityReport[]> VulnerablePackages { get; }
    public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<VulnerabilityReportWithPackageName>> VulnerableMethodFqns { get; }
    public IReadOnlyCollection`1<string> VulnerableMethodShortNames { get; }
    public IProperty`1<bool> InSync { get; }
    public ISimpleSignal Changed { get; }
    public abstract virtual IReadOnlyDictionary`2<INugetPackageName, VulnerabilityReport[]> get_VulnerablePackages();
    public abstract virtual IReadOnlyDictionary`2<string, IReadOnlyCollection`1<VulnerabilityReportWithPackageName>> get_VulnerableMethodFqns();
    public abstract virtual IReadOnlyCollection`1<string> get_VulnerableMethodShortNames();
    public abstract virtual IProperty`1<bool> get_InSync();
    public abstract virtual ISimpleSignal get_Changed();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.PackageChecker.PackageCheckerNotificationUtils : object {
    public static VulnerabilitySeverity ToSeverity(double cvssScore);
    [ExtensionAttribute]
public static IconId ToIcon(VulnerabilitySeverity severity);
}
public class JetBrains.ReSharper.Feature.Services.PackageChecker.VulnerabilityReport : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Cve>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CvssScore>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <VulnerableMethodFqns>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <VulnerableMethodNames>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Title { get; public set; }
    public string Cve { get; public set; }
    public double CvssScore { get; public set; }
    public Uri Reference { get; public set; }
    public String[] VulnerableMethodFqns { get; public set; }
    public String[] VulnerableMethodNames { get; public set; }
    public VulnerabilityReport(string Title, string Cve, double CvssScore, Uri Reference, String[] VulnerableMethodFqns, String[] VulnerableMethodNames);
    [CompilerGeneratedAttribute]
protected VulnerabilityReport(VulnerabilityReport original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Cve();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Cve(string value);
    [CompilerGeneratedAttribute]
public double get_CvssScore();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CvssScore(double value);
    [CompilerGeneratedAttribute]
public Uri get_Reference();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Reference(Uri value);
    [CompilerGeneratedAttribute]
public String[] get_VulnerableMethodFqns();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_VulnerableMethodFqns(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_VulnerableMethodNames();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_VulnerableMethodNames(String[] value);
    public virtual bool Equals(VulnerabilityReport other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(VulnerabilityReport left, VulnerabilityReport right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(VulnerabilityReport left, VulnerabilityReport right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual VulnerabilityReport <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Title, String& Cve, Double& CvssScore, Uri& Reference, String[]& VulnerableMethodFqns, String[]& VulnerableMethodNames);
}
public class JetBrains.ReSharper.Feature.Services.PackageChecker.VulnerabilityReportWithPackageName : object {
    [CompilerGeneratedAttribute]
private INugetPackageName <PackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private VulnerabilityReport <Report>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public INugetPackageName PackageName { get; public set; }
    public VulnerabilityReport Report { get; public set; }
    public VulnerabilityReportWithPackageName(INugetPackageName PackageName, VulnerabilityReport Report);
    [CompilerGeneratedAttribute]
protected VulnerabilityReportWithPackageName(VulnerabilityReportWithPackageName original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public INugetPackageName get_PackageName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PackageName(INugetPackageName value);
    [CompilerGeneratedAttribute]
public VulnerabilityReport get_Report();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Report(VulnerabilityReport value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(VulnerabilityReportWithPackageName left, VulnerabilityReportWithPackageName right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(VulnerabilityReportWithPackageName left, VulnerabilityReportWithPackageName right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(VulnerabilityReportWithPackageName other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual VulnerabilityReportWithPackageName <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(INugetPackageName& PackageName, VulnerabilityReport& Report);
}
public enum JetBrains.ReSharper.Feature.Services.PackageChecker.VulnerabilitySeverity : Enum {
    public int value__;
    public static VulnerabilitySeverity Low;
    public static VulnerabilitySeverity Medium;
    public static VulnerabilitySeverity High;
    public static VulnerabilitySeverity Critical;
}
public class JetBrains.ReSharper.Feature.Services.ParameterInfo.AttributeInfoCandidate : ParameterInfoCandidate {
    [CompilerGeneratedAttribute]
private List`1<TypeMemberInstance> <PublicMembers>k__BackingField;
    public List`1<TypeMemberInstance> PublicMembers { get; }
    public AttributeInfoCandidate(ISolution solution, PsiLanguageType language, InvocationCandidate invocationCandidate, IDeclaredType attributeClass, int positionalParametersCount);
    public AttributeInfoCandidate(ISolution solution, PsiLanguageType language, InvocationCandidate invocationCandidate, List`1<TypeMemberInstance> publicProperties, int positionalParametersCount);
    [CompilerGeneratedAttribute]
public List`1<TypeMemberInstance> get_PublicMembers();
    [NotNullAttribute]
public static List`1<TypeMemberInstance> GetAssignableMembers(IDeclaredType attributeClass, IPsiModule module);
    private static bool CheckLegalParameterType(IType type, IPsiModule module);
    public virtual bool Equals(object obj);
    protected virtual DeclaredElementPresenterStyle GetStyles(ITypeMember typeMember);
    public virtual void GetParametersInfo(ParamPresentationInfo[]& paramInfos, Int32& paramsParameterIndex);
    protected virtual IList`1<string> GetParameterNames();
    protected virtual DeclaredElementPresenterStyle GetStyles(IParametersOwner parametersOwner);
    protected virtual RichText GetSignatureInternal(ParameterInfoSettings settings, TextRange[]& parameterRanges, TextRange& returnTypeRange, ExtensionMethodInfo& extensionMethodInfo, RichText[]& annotations);
    public virtual int GetHashCode();
}
public abstract class JetBrains.ReSharper.Feature.Services.ParameterInfo.CachingCandidate : object {
    private RichText mySignature;
    private TextRange[] myParameterRanges;
    private RichText[] myAnnotations;
    private IList`1<TextStyle> myParameterTextStyles;
    private Int32[] myMapToOriginalOrder;
    private ExtensionMethodInfo myExtensionMethodInfo;
    private String[] myCachedNamedArguments;
    private ParameterInfoSettings myCachedSettings;
    [CompilerGeneratedAttribute]
private bool <ShowExtendedInfo>k__BackingField;
    protected bool ShowExtendedInfo { get; }
    public bool IsFilteredOut { get; public set; }
    public int PositionalParameterCount { get; }
    public bool IsObsolete { get; }
    public RichTextBlock ObsoleteDescription { get; }
    protected int MaxNamedParameters { get; }
    [CompilerGeneratedAttribute]
protected bool get_ShowExtendedInfo();
    public sealed virtual RichText GetSignature(String[] namedArguments, ParameterInfoSettings settings, TextRange[]& parameterRanges, Int32[]& mapToOriginalOrder, ExtensionMethodInfo& extensionMethodInfo);
    protected abstract virtual bool IsValid();
    protected void ClearSignature();
    protected abstract virtual RichText GetSignatureInternal(String[] namedArguments, ParameterInfoSettings settings, TextRange[]& parameterRanges, TextRange& returnTypeRange, Int32[]& mapToOriginalOrder, ExtensionMethodInfo& extensionMethodInfo, RichText[]& annotations);
    [NotNullAttribute]
protected virtual RichText GetCandidateAnnotationsString(AnnotationsDisplayKind annotationsDisplayKind);
    public abstract virtual bool get_IsFilteredOut();
    public abstract virtual void set_IsFilteredOut(bool value);
    public abstract virtual int get_PositionalParameterCount();
    public abstract virtual void GetParametersInfo(ParamPresentationInfo[]& paramInfos, Int32& paramsParameterIndex);
    public abstract virtual RichTextBlock GetDescription(ParameterInfoSettings settings);
    public abstract virtual bool Matches(IDeclaredElement signature);
    public abstract virtual bool get_IsObsolete();
    public abstract virtual RichTextBlock get_ObsoleteDescription();
    public virtual IList`1<bool> GetParametersObsoleteFlags();
    public virtual IList`1<TextStyle> GetParameterStyles();
    protected virtual int get_MaxNamedParameters();
    protected static IList`1<Pair`2<string, int>> GetUsedNames(String[] namedArguments, Int32& firstNamed);
    protected abstract virtual IList`1<string> GetParameterNames();
    protected static int GetParameterPosition(IList`1<string> names, string name);
    private void FixAnnotations(RichText[]& annotations, Int32[] mapToOriginalOrder);
    protected virtual RichText SortSignature(String[] namedArguments, RichText signature, TextRange[]& parameterRanges, RichText[]& annotations, Int32[]& mapToOriginalOrder);
    private RichText ShortenSignature(RichText signature, TextRange[]& parameterRanges);
}
internal static class JetBrains.ReSharper.Feature.Services.ParameterInfo.EditorParameterInfoActionHandlers : object {
}
public class JetBrains.ReSharper.Feature.Services.ParameterInfo.EditorParameterInfoHandler : object {
    private static ILogger ourLogger;
    private static TimeSpan Delay;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private ITextControl myTextControl;
    [NotNullAttribute]
private IProperty`1<IParameterInfoContext> myContext;
    private SequentialLifetimes myRequestLifetimes;
    private IRangeMarker myLBoundRangeMarker;
    private static EditorParameterInfoHandler ourCurrentHandler;
    private DocumentOffset myExpectedLParenthOffset;
    private char myInvocationChar;
    private LifetimeDefinition myLifetimeDefinition;
    private Lifetime myLifetime;
    private IShellLocks myShellLocks;
    public ISolution Solution { get; }
    public IProperty`1<IParameterInfoContext> Context { get; }
    public ITextControl TextControl { get; }
    public HideFlags HideFlags { get; }
    private EditorParameterInfoHandler(ISolution solution, ITextControl textControl, DocumentOffset expectedLParenthOffset, char invocationChar);
    private static EditorParameterInfoHandler();
    public ISolution get_Solution();
    public sealed virtual IProperty`1<IParameterInfoContext> get_Context();
    public sealed virtual ITextControl get_TextControl();
    public sealed virtual HideFlags get_HideFlags();
    public sealed virtual PopupWindowContextSource CreatePopupWindowContext();
    public static void DoWithHandler(Lifetime lifetime, ISolution solution, ITextControl textControl, DocumentOffset expectedLParenthOffset, char invocationChar, Action`1<EditorParameterInfoHandler> doWithHandler, SynchronizationPoints syncPoints, Action onCancel);
    [NotNullAttribute]
private static AsyncExecutor CreateAsyncExecuter(Lifetime lifetime, ISolution solution, ITextControl textControl, DocumentOffset expectedLParenthOffset, char invocationChar, Action`1<EditorParameterInfoHandler> doWithHandler, Action onCancel, SynchronizationPoint syncPoint);
    private bool FinishInitialization();
    private void CanvasControl_OnLostFocus();
    public sealed virtual void Dispose();
    private void OnBeforeDocumentChanged(object sender, EventArgs`1<DocumentChange> args);
    private void AddRequest();
    private void OnChange();
    [CanBeNullAttribute]
public static IParameterInfoContext CreateContext(ISolution solution, DocumentOffset caretOffset, DocumentOffset expectedLParenthOffset, char invocationChar, ILanguageManager languageManager);
    public static bool CanCreateContextFast(ISolution solution, IDocument document, ILanguageManager languageManager);
    [CanBeNullAttribute]
private IParameterInfoContext GetParameterInfoContext(DocumentOffset caretOffset, DocumentOffset expectedLParenthOffset, char invocationChar);
    private IParameterInfoContext GetParameterInfoContext(DocumentOffset expectedLParenthOffset, char invocationChar);
    private void OnEscapePressed();
    private void CancelPressed();
    public static bool ShouldPopup(ITextControl control, char c, ISolution solution, ILanguageManager languageManager);
    [CompilerGeneratedAttribute]
private IPopupLayouter <CreatePopupWindowContext>b__16_0(Lifetime lifetimeLayouter);
    [CompilerGeneratedAttribute]
private void <.ctor>b__17_0();
    [CompilerGeneratedAttribute]
private void <FinishInitialization>b__20_0();
    [CompilerGeneratedAttribute]
private void <FinishInitialization>b__20_1();
    [CompilerGeneratedAttribute]
private void <AddRequest>b__26_0(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private void <AddRequest>b__26_2();
    [CompilerGeneratedAttribute]
private void <AddRequest>b__26_1();
    [CompilerGeneratedAttribute]
private void <OnChange>b__27_0(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private void <OnChange>b__27_1();
}
internal class JetBrains.ReSharper.Feature.Services.ParameterInfo.EditorPopupRequest : object {
    private static int ourTimeStamp;
    private int myTimestamp;
    private ITextControl myTextControl;
    private IRangeMarker myRangeMarker;
    private SynchronizationPoints mySynchronizationPoints;
    private Lifetime myLifetime;
    private ISolution mySolution;
    [CompilerGeneratedAttribute]
private ParameterInfoPopupController <Controller>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoRetry>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaredElement <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private char <InvocationChar>k__BackingField;
    public ParameterInfoPopupController Controller { get; }
    public bool DoRetry { get; public set; }
    public IDeclaredElement Signature { get; public set; }
    private char InvocationChar { get; public set; }
    public EditorPopupRequest(Lifetime lifetime, ISolution solution, ITextControl textControl, IRangeMarker rangeMarker, ParameterInfoPopupController controller, SynchronizationPoints synchronizationPoints);
    [CompilerGeneratedAttribute]
public ParameterInfoPopupController get_Controller();
    [CompilerGeneratedAttribute]
public bool get_DoRetry();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DoRetry(bool value);
    [CompilerGeneratedAttribute]
public IDeclaredElement get_Signature();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Signature(IDeclaredElement value);
    [CompilerGeneratedAttribute]
private char get_InvocationChar();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_InvocationChar(char value);
    public void Execute();
    private void QueueRequestOnController(int milliseconds);
    private void OnCommitted();
    private void CallNext();
    public sealed virtual int CompareTo(EditorPopupRequest other);
    [CompilerGeneratedAttribute]
private void <Execute>b__23_0();
    [CompilerGeneratedAttribute]
private void <Execute>b__23_1();
    [CompilerGeneratedAttribute]
private void <OnCommitted>b__25_0(EditorParameterInfoHandler editorParameterInfoHandler);
}
public class JetBrains.ReSharper.Feature.Services.ParameterInfo.ExtensionMethodInfo : object {
    public TextRange FirstParameterRange;
    public TextRange ThisKeywordRange;
    public static ExtensionMethodInfo NoExtension;
    public ExtensionMethodInfo(TextRange firstParameterRange, TextRange thisKeywordRange);
    private static ExtensionMethodInfo();
}
public interface JetBrains.ReSharper.Feature.Services.ParameterInfo.ICandidate {
    public bool IsFilteredOut { get; public set; }
    public int PositionalParameterCount { get; }
    public bool IsObsolete { get; }
    public RichTextBlock ObsoleteDescription { get; }
    public abstract virtual bool get_IsFilteredOut();
    public abstract virtual void set_IsFilteredOut(bool value);
    public abstract virtual int get_PositionalParameterCount();
    public abstract virtual RichText GetSignature(String[] namedArguments, ParameterInfoSettings settings, TextRange[]& parameterRanges, Int32[]& mapToOriginalOrder, ExtensionMethodInfo& extensionMethodInfo);
    public abstract virtual void GetParametersInfo(ParamPresentationInfo[]& paramInfos, Int32& paramsParameterIndex);
    [CanBeNullAttribute]
public abstract virtual RichTextBlock GetDescription(ParameterInfoSettings settings);
    public abstract virtual bool Matches(IDeclaredElement signature);
    public abstract virtual bool get_IsObsolete();
    public abstract virtual RichTextBlock get_ObsoleteDescription();
}
public interface JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContext {
    public String[] NamedArguments { get; public set; }
    public ICandidate DefaultCandidate { get; }
    public ICandidate[] Candidates { get; }
    public DocumentRange Range { get; }
    public Type ParameterListNodeType { get; }
    public ICollection`1<Type> ParameterNodeTypes { get; }
    public abstract virtual int GetArgument(ICandidate candidate);
    public abstract virtual String[] get_NamedArguments();
    public abstract virtual void set_NamedArguments(String[] value);
    public abstract virtual ICandidate get_DefaultCandidate();
    public abstract virtual ICandidate[] get_Candidates();
    public abstract virtual DocumentRange get_Range();
    public abstract virtual Type get_ParameterListNodeType();
    public abstract virtual ICollection`1<Type> get_ParameterNodeTypes();
}
public interface JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContextFactory {
    public PsiLanguageType Language { get; }
    public IEnumerable`1<char> ImportantChars { get; }
    public abstract virtual bool IsIntellisenseEnabled(ISolution solution, IContextBoundSettingsStore settingsStore);
    [CanBeNullAttribute]
public abstract virtual IParameterInfoContext CreateContext(ISolution solution, DocumentOffset caretOffset, DocumentOffset expectedLParenthOffset, char invocationChar, IContextBoundSettingsStore settingsStore);
    public abstract virtual PsiLanguageType get_Language();
    public abstract virtual bool ShouldPopup(DocumentOffset caretOffset, char c, ISolution solution, IContextBoundSettingsStore settingsStore);
    public abstract virtual IEnumerable`1<char> get_ImportantChars();
}
public interface JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoHandlerFactory {
    public abstract virtual void DoWithCreateHandler(IDataContext context, Action`1<IParameterInfoProvider> doWithHandler);
    public abstract virtual bool IsAvailableFast(IDataContext context);
}
public interface JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoIsDisabled {
    public IProperty`1<bool> IsDisabled { get; }
    public abstract virtual IProperty`1<bool> get_IsDisabled();
}
public interface JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoProvider {
    [NotNullAttribute]
public IProperty`1<IParameterInfoContext> Context { get; }
    public HideFlags HideFlags { get; }
    [NotNullAttribute]
public ITextControl TextControl { get; }
    public abstract virtual IProperty`1<IParameterInfoContext> get_Context();
    public abstract virtual HideFlags get_HideFlags();
    [NotNullAttribute]
public abstract virtual PopupWindowContextSource CreatePopupWindowContext();
    public abstract virtual ITextControl get_TextControl();
}
[ZoneDefinitionAttribute]
public interface JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoZone {
}
public class JetBrains.ReSharper.Feature.Services.ParameterInfo.ObjectInitializerCandidate : CachingCandidate {
    private ICollection`1<ISymbolInfo> myMembers;
    private RichTextBlock myDescription;
    private RichTextBlock myObsoleteDescription;
    [NotNullAttribute]
private PsiLanguageType myLanguageType;
    [NotNullAttribute]
private DeclaredElementPresenterTextStyles myTextStyles;
    [CompilerGeneratedAttribute]
private bool <IsFilteredOut>k__BackingField;
    public int MembersCount { get; }
    public bool IsFilteredOut { get; public set; }
    public int PositionalParameterCount { get; }
    public bool IsObsolete { get; }
    public RichTextBlock ObsoleteDescription { get; }
    public ObjectInitializerCandidate(ISolution solution, IType constructedType, ICollection`1<ISymbolInfo> memberInfos, PsiLanguageType languageType);
    public int get_MembersCount();
    [CompilerGeneratedAttribute]
public virtual bool get_IsFilteredOut();
    [CompilerGeneratedAttribute]
public virtual void set_IsFilteredOut(bool value);
    public virtual int get_PositionalParameterCount();
    public virtual RichTextBlock GetDescription(ParameterInfoSettings settings);
    public virtual bool Matches(IDeclaredElement signature);
    public virtual bool get_IsObsolete();
    public virtual RichTextBlock get_ObsoleteDescription();
    public virtual void GetParametersInfo(ParamPresentationInfo[]& paramInfos, Int32& paramsParameterIndex);
    public virtual IList`1<bool> GetParametersObsoleteFlags();
    protected virtual bool IsValid();
    protected virtual RichText GetSignatureInternal(String[] namedArguments, ParameterInfoSettings settings, TextRange[]& parameterRanges, TextRange& returnTypeRange, Int32[]& mapToOriginalOrder, ExtensionMethodInfo& extensionMethodInfo, RichText[]& annotations);
    protected virtual DeclaredElementPresenterStyle GetStyles(IDeclaredElement declaredElement);
    protected virtual IList`1<string> GetParameterNames();
    [CanBeNullAttribute]
public static ObjectInitializerCandidate Create(ISolution solution, IType constructedType, PsiLanguageType language, ISymbolFilter[] filters);
    [CompilerGeneratedAttribute]
private ParamPresentationInfo <GetParametersInfo>b__20_0(ISymbolInfo member);
}
[ActionAttribute("ParameterInfo.Show", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ParameterInformationActionText")]
[VsOverrideActionAttribute("({1496A755-94DE-11D0-8C3F-00C04FC2AAE2}:104)")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    [PureAttribute]
private static bool IsAvailableInternal(IDataContext context);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
public class JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoCandidate : CachingCandidate {
    [NotNullAttribute]
public PsiLanguageType Language;
    private InvocationCandidate myInvocationCandidate;
    private RichTextBlock myObsoleteDescription;
    private XmlNode myXmlDocNode;
    [CompilerGeneratedAttribute]
private bool <IsObsolete>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFilteredOut>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PositionalParameterCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private DeclaredElementPresenterTextStyles <TextStyles>k__BackingField;
    public bool IsObsolete { get; }
    public bool IsFilteredOut { get; public set; }
    public int PositionalParameterCount { get; }
    public RichTextBlock ObsoleteDescription { get; }
    public InvocationCandidate InvocationCandidate { get; }
    protected int MaxNamedParameters { get; }
    [NotNullAttribute]
protected ISolution Solution { get; }
    [NotNullAttribute]
protected DeclaredElementPresenterTextStyles TextStyles { get; }
    private XmlNode XmlDocNode { get; }
    public bool IsExtensionMethod { get; }
    protected ParameterInfoCandidate(ISolution solution, PsiLanguageType language, InvocationCandidate invocationCandidate, int positionalParameterCount);
    [CompilerGeneratedAttribute]
public virtual bool get_IsObsolete();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsFilteredOut();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsFilteredOut(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_PositionalParameterCount();
    public virtual RichTextBlock get_ObsoleteDescription();
    public InvocationCandidate get_InvocationCandidate();
    protected virtual int get_MaxNamedParameters();
    [CompilerGeneratedAttribute]
protected ISolution get_Solution();
    [CompilerGeneratedAttribute]
protected DeclaredElementPresenterTextStyles get_TextStyles();
    private XmlNode get_XmlDocNode();
    protected virtual TextRange GetThisKeywordRange(TextRange parameterRange, RichText richText);
    public bool get_IsExtensionMethod();
    public static Converter`2<InvocationCandidate, ICandidate> GetDefaultConverter(ISolution solution, PsiLanguageType language);
    [CanBeNullAttribute]
public static ICandidate[] CreateCandidates(ISolution solution, PsiLanguageType language, IEnumerable`1<InvocationCandidate> invocationCandidates);
    [CanBeNullAttribute]
public static ICandidate[] CreateCandidates(PsiLanguageType language, IEnumerable`1<InvocationCandidate> invocationCandidates, Converter`2<InvocationCandidate, ICandidate> creator);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool Matches(IDeclaredElement signature);
    public virtual RichTextBlock GetDescription(ParameterInfoSettings settings);
    public virtual void GetParametersInfo(ParamPresentationInfo[]& paramInfos, Int32& paramsParameterIndex);
    protected virtual IList`1<string> GetParameterNames();
    protected virtual RichText GetSignatureInternal(String[] namedArguments, ParameterInfoSettings settings, TextRange[]& parameterRanges, TextRange& returnTypeRange, Int32[]& mapToOriginalOrder, ExtensionMethodInfo& extensionMethodInfo, RichText[]& annotations);
    protected virtual RichText GetCandidateAnnotationsString(AnnotationsDisplayKind annotationsDisplayKind);
    protected virtual bool IsValid();
    protected virtual RichText GetSignatureInternal(ParameterInfoSettings settings, TextRange[]& parameterRanges, TextRange& returnTypeRange, ExtensionMethodInfo& extensionMethodInfo, RichText[]& annotations);
    private static RichText GetAnnotations(PsiLanguageType psiLanguageType, IAttributesSet attributesSet, IPsiServices psiServices, AnnotationsDisplayKind annotationsDisplayKind, DeclaredElementPresenterTextStyles textStyles);
    protected virtual bool PresentReturnType(IParametersOwner parametersOwner);
    protected virtual bool PresentParameterNames(IParametersOwner parametersOwner);
    protected virtual DeclaredElementPresenterStyle GetStyles(IParametersOwner parametersOwner);
    [CompilerGeneratedAttribute]
private ParamPresentationInfo <GetParametersInfo>b__39_0(IParameter parameter);
}
public class JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoContextBase : object {
    private ICandidate[] myCandidates;
    protected ParameterInfoSettings mySettings;
    [CompilerGeneratedAttribute]
private ICandidate <DefaultCandidate>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <NamedArguments>k__BackingField;
    private bool myIsSorted;
    [CompilerGeneratedAttribute]
private int <Argument>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <Range>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ParameterListNodeType>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<Type> <ParameterNodeTypes>k__BackingField;
    public ICandidate DefaultCandidate { get; }
    public String[] NamedArguments { get; public set; }
    public ICandidate[] Candidates { get; }
    public int Argument { get; public set; }
    public DocumentRange Range { get; }
    public Type ParameterListNodeType { get; }
    public ICollection`1<Type> ParameterNodeTypes { get; }
    public ParameterInfoContextBase(int parameter, ICandidate[] candidates, DocumentRange range, int selectedInvocable, Type parameterNodeListType, ParameterInfoSettings settings, Type[] parameterNodeTypes);
    [CompilerGeneratedAttribute]
public sealed virtual ICandidate get_DefaultCandidate();
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_NamedArguments();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NamedArguments(String[] value);
    public virtual ICandidate[] get_Candidates();
    [NotNullAttribute]
protected virtual string GetSortString(ICandidate candidate);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public int get_Argument();
    [CompilerGeneratedAttribute]
public void set_Argument(int value);
    public sealed virtual int GetArgument(ICandidate candidate);
    [CompilerGeneratedAttribute]
public sealed virtual DocumentRange get_Range();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ParameterListNodeType();
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<Type> get_ParameterNodeTypes();
    public void FilterOut(int candidateIndex);
    [CompilerGeneratedAttribute]
private int <get_Candidates>b__12_0(ICandidate x, ICandidate y);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoContextFactoryAttribute : LanguageAttribute {
    public ParameterInfoContextFactoryAttribute(Type Language, Instantiation instantiation);
}
public static class JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoContextUtil : object {
    public static bool EqualCandidates(IParameterInfoContext cntx1, IParameterInfoContext cntx2);
    public static bool EqualNamedArgs(String[] namedArgs1, String[] namedArgs2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoController : object {
    [NullableAttribute("1")]
private LifetimeDefinition myLifetimeDefinition;
    [NullableAttribute("1")]
private IContextBoundSettingsStore mySettingsStore;
    [NullableAttribute("1")]
private DefaultWinFormsControlViews myViews;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<ValueTuple`3<ParameterInfoViewModelBase, LifetimeDefinition, DocumentOffset>> myCurrentState;
    [CompilerGeneratedAttribute]
private IParameterInfoProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler Detached;
    public IParameterInfoProvider Provider { get; private set; }
    public bool HasMultipleSignatures { get; }
    private bool ShowAllCandidates { get; }
    [NullableContextAttribute("1")]
public ParameterInfoController(Lifetime parentLifetime, IParameterInfoProvider parameterInfoProvider, IUIApplication uiApplication, ITextControl textControl, DefaultWinFormsControlViews views);
    [CompilerGeneratedAttribute]
public IParameterInfoProvider get_Provider();
    [CompilerGeneratedAttribute]
private void set_Provider(IParameterInfoProvider value);
    public void Close();
    public bool get_HasMultipleSignatures();
    private bool get_ShowAllCandidates();
    public void ShowNextSignature();
    public void ShowPrevSignature();
    [CompilerGeneratedAttribute]
public void add_Detached(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Detached(EventHandler value);
    private void DetachHandler();
    public void Execute();
    private void UpdateContext(IParameterInfoContext context);
    [NullableContextAttribute("1")]
private void Closed(object sender, EventArgs e);
    public void SelectSignature(IDeclaredElement signature);
    internal ParameterInfoViewModelBase TryGetViewModelForTests();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <Execute>b__20_0(Lifetime _, IParameterInfoContext parameterInfoContext);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoHandlerFactory : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
private SynchronizationPoints mySynchronizationPoints;
    [NotNullAttribute]
private ILookupWindowManager myLookupWindowManager;
    public ParameterInfoHandlerFactory(Lifetime lifetime, SynchronizationPoints synchronizationPoints, ILookupWindowManager lookupWindowManager);
    public sealed virtual void DoWithCreateHandler(IDataContext context, Action`1<IParameterInfoProvider> doWithHandler);
    public sealed virtual bool IsAvailableFast(IDataContext context);
}
[SolutionComponentAttribute("10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoPopupController : object {
    private static int MAX_POPUP_REQUESTS;
    private IParameterInfoProvider myParameterInfoProvider;
    private IParameterInfoHandlerFactory myHandlerFactory;
    private DocumentManager myDocumentManager;
    private CodeCompletionSettingsService myCodeCompletionSettings;
    private ILookupWindowManager myLookupWindowManager;
    private IUIApplication myUiApplication;
    private IThreading myLocks;
    private ISolution mySolution;
    private Lifetime myLifetime;
    private IIntellisenseAvailabilityService myIntellisenseAvailabilityService;
    private DefaultWinFormsControlViews myViews;
    private SynchronizationPoints mySynchronizationPoints;
    private DataPerClientId`1<ControllerState> myState;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsActive>k__BackingField;
    public IProperty`1<bool> IsActive { get; }
    private bool IsParameterInfoShownInEditor { get; }
    public bool IsParameterInfoShownInCurrentContext { get; }
    public bool SupportsSignatureSwitching { get; }
    protected int ControllersCount { get; }
    public ParameterInfoPopupController(ISolution solution, Lifetime lifetime, TextControlTypingHandlers typingHandlers, ILookupWindowManager lookupWindowManager, IUIApplication uiApplication, IIntellisenseAvailabilityService intellisenseAvailabilityService, IParameterInfoHandlerFactory handlerFactory, DocumentManager documentManager, CodeCompletionSettingsService codeCompletionSettings, DefaultWinFormsControlViews views, SynchronizationPoints synchronizationPoints, IClientSessionManager clientSessionManager);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsActive();
    private bool get_IsParameterInfoShownInEditor();
    public bool get_IsParameterInfoShownInCurrentContext();
    public bool get_SupportsSignatureSwitching();
    [CanBeNullAttribute]
public IParameterInfoContext CreateContextForTests(ISolution solution, DocumentOffset caretOffset, DocumentOffset expectedLParenthOffset);
    private ParameterInfoController GetLastController();
    [CanBeNullAttribute]
internal ParameterInfoController TryGetLastController();
    [CanBeNullAttribute]
public ParameterInfoViewModelBase TryGetViewModelForTests();
    protected int get_ControllersCount();
    public void MoveParameterInfoOnTop();
    public void ShowDocForNextSignature();
    public void ShowDocForPreviousSignature();
    public void PopupParameterInfo(ISolution solution, ITextControl textControl, DocumentOffset expectedLParOffset, IDeclaredElement signature, bool isAutoPopup);
    private void PopupParameterInfoInEditor(ISolution solution, ITextControl textControl, IRangeMarker rangeMarker, IDeclaredElement signature, char invocationChar, bool isAutoPopup);
    internal void QueueRequest(TimeSpan interval, EditorPopupRequest editorPopupRequest);
    protected virtual void DoQueueRequest(TimeSpan interval);
    internal void ExecuteLastEditorPopupRequest();
    internal void ClearEditorPopupRequests();
    private void DeQueueAlarm();
    public void PopupParameterInfo(ISolution solution, ITextControl textControl);
    public void PopupParameterInfo(IDataContext context);
    public bool IsParameterInfoAvailableFast(IDataContext context);
    public void PopupParameterInfo(Lifetime lifetime, IParameterInfoProvider provider, ITextControl textControl);
    public void EmulateTyping(char c, ITextControl textControl);
    private void ControllerDetached(object sender, EventArgs e);
    private void LookupWindowShown(object sender, EventArgs e);
}
public class JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoSettings : object {
    [CompilerGeneratedAttribute]
private AnnotationsDisplayKind <ShowAnnotations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowExtendedInfo>k__BackingField;
    public AnnotationsDisplayKind ShowAnnotations { get; }
    public bool ShowExtendedInfo { get; }
    public ParameterInfoSettings(AnnotationsDisplayKind showAnnotations, bool showExtendedInfo);
    public ParameterInfoSettings(IContextBoundSettingsStore settingsStore);
    [CompilerGeneratedAttribute]
public AnnotationsDisplayKind get_ShowAnnotations();
    [CompilerGeneratedAttribute]
public bool get_ShowExtendedInfo();
    protected bool Equals(ParameterInfoSettings other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoViewModel : ParameterInfoViewModelBase {
    public ParameterInfoViewModel(LifetimeDefinition def, IParameterInfoProvider parameterInfoProvider, IContextBoundSettingsStore settingsStore);
    public virtual bool CanSelectSignature(int line);
}
public abstract class JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoViewModelBase : AAutomation {
    private IProperty`1<IParameterInfoContext> myContext;
    public ParameterInfoSettings Settings;
    [NotNullAttribute]
public IProperty`1<int> ActiveSignature;
    [NotNullAttribute]
public LifetimeDefinition LifetimeDefinition;
    [NotNullAttribute]
public IParameterInfoProvider ParameterInfoProvider;
    [CompilerGeneratedAttribute]
private EventHandler OnClose;
    private int CandidatesCount { get; }
    [NotNullAttribute]
public IProperty`1<IParameterInfoContext> Context { get; }
    protected ParameterInfoViewModelBase(LifetimeDefinition lifetimeDefinition, IParameterInfoProvider parameterInfoProvider, IContextBoundSettingsStore settingsStore);
    private int get_CandidatesCount();
    public IProperty`1<IParameterInfoContext> get_Context();
    [CompilerGeneratedAttribute]
public void add_OnClose(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_OnClose(EventHandler value);
    public void OnCloseHandler(object sender, EventArgs args);
    public void ShowPrevSignature();
    public void ShowNextSignature();
    public abstract virtual bool CanSelectSignature(int line);
    public bool HaveMultipleSignatures();
    [CompilerGeneratedAttribute]
private void <.ctor>b__13_0(BeforePropertyChangedEventArgs`1<int> e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__13_1(Lifetime lt, IParameterInfoContext context);
}
public class JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoViewModelWithLimitedNumberOfSignatures : ParameterInfoViewModel {
    [CompilerGeneratedAttribute]
private int <MaxCandidates>k__BackingField;
    public int MaxCandidates { get; }
    public ParameterInfoViewModelWithLimitedNumberOfSignatures(LifetimeDefinition def, IParameterInfoProvider parameterInfoProvider, int maxCandidates, IContextBoundSettingsStore settingsStore);
    [CompilerGeneratedAttribute]
public int get_MaxCandidates();
}
public class JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoViewModelWithOneCandidate : ParameterInfoViewModelBase {
    public ParameterInfoViewModelWithOneCandidate(LifetimeDefinition def, IParameterInfoProvider parameterInfoProvider, IContextBoundSettingsStore settingsStore);
    public virtual bool CanSelectSignature(int line);
}
public class JetBrains.ReSharper.Feature.Services.ParameterInfo.ParamPresentationInfo : object {
    [CanBeNullAttribute]
public RichText Name;
    [CanBeNullAttribute]
public RichTextBlock Description;
    [CanBeNullAttribute]
public string Direction;
}
public enum JetBrains.ReSharper.Feature.Services.ParameterInfo.Settings.ParameterInfoLocation : Enum {
    public int value__;
    public static ParameterInfoLocation Top;
    public static ParameterInfoLocation Bottom;
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntellisenseSettingsKey", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ParameterInfoSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.ParameterInfo.Settings.ParameterInfoSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowAllCandidatesInParameterInfoPopupSettingDescription")]
public bool ShowAllCandidates;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "LimitNumberOfCandidatesToSettingDescription")]
public bool LimitNumberOfCandidates;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "CandidatesLimitSettingDescription")]
public int MaxCandidates;
    [ObsoleteAttribute("No longer used")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowDelegatesUsingLambdaSyntaxSettingDescription")]
public bool DelegatesAsLambdas;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowExtendedInformationSettingDescription")]
public bool ShowExtendedInfo;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowAnnotationsSettingDescription")]
public AnnotationsDisplayKind ShowAnnotations;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "UseArrowsInsteadOfParameterInfoShortcutInParameterInfoPopupSettingDescription")]
public bool UseArrowsForSignatureNavigation;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "EnableAutomaticParameterInfoPopupSettingDescription")]
public bool AutopopupOn;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "AutomaticParameterInfoDelayInMillisecondsSettingDescription")]
public int AutopopupDelay;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "DefaultParameterInfoLocationSettingDescription")]
public ParameterInfoLocation ParameterInfoLocation;
}
[ObsoleteAttribute("Deprecated, use ParameterInfoSettingsKey")]
public class JetBrains.ReSharper.Feature.Services.ParameterInfo.SettingsUpgrade.ParameterInfoSettings : object {
    private static string TagName;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Property`1<bool> ShowOneCandidate;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Property`1<bool> DelegatesAsLambdas;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Property`1<bool> UseArrowsForSignatureNavigation;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Property`1<bool> AutopopupOn;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Property`1<int> AutopopupDelay;
    public ParameterInfoSettings(IComponentSettingsProvider shellSettingsComponent, Lifetime lifetime);
    private sealed virtual override void JetBrains.Application.Configuration.IXmlReadable.ReadFromXml(XmlElement element);
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.ParameterInfo.SettingsUpgrade.ParameterInfoSettingsUpgrade : object {
    public sealed virtual void Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
}
public static class JetBrains.ReSharper.Feature.Services.ParameterInfo.Theming.ParameterInfoThemeColor : object {
    public static ThemeColor ParameterInfoInactiveBackground;
    public static ThemeColor ParameterInfoInactiveForeground;
    public static ThemeColor ParameterInfoActiveBackground;
    public static ThemeColor ParameterInfoActiveForeground;
    public static ThemeColor ParameterInfoSeparator;
    public static ThemeColor ParameterInfoDottedBlockForeground;
    private static ParameterInfoThemeColor();
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.ParameterInfo.Theming.ParameterInfoThemeColorFiller : object {
    public virtual void FillColorTheme(ColorTheme t);
}
public class JetBrains.ReSharper.Feature.Services.ParameterInfo.TypeArgumentCandidate : CachingCandidate {
    private DeclaredElementPresenterTextStyles myTextStyles;
    private RichTextBlock myObsoleteDescription;
    [CanBeNullAttribute]
private XmlNode myXmlDocNode;
    [CompilerGeneratedAttribute]
private PsiLanguageType <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeParametersOwner <TypeElement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsObsolete>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFilteredOut>k__BackingField;
    [PublicAPIAttribute]
public PsiLanguageType Language { get; }
    [PublicAPIAttribute]
public ITypeParametersOwner TypeElement { get; }
    public bool IsObsolete { get; }
    private XmlNode XmlDocNode { get; }
    public bool IsFilteredOut { get; public set; }
    public int PositionalParameterCount { get; }
    public RichTextBlock ObsoleteDescription { get; }
    public TypeArgumentCandidate(ITypeParametersOwner typeElement, PsiLanguageType languageType);
    [CompilerGeneratedAttribute]
public PsiLanguageType get_Language();
    [CompilerGeneratedAttribute]
public ITypeParametersOwner get_TypeElement();
    [CompilerGeneratedAttribute]
public virtual bool get_IsObsolete();
    private XmlNode get_XmlDocNode();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool get_IsFilteredOut();
    [CompilerGeneratedAttribute]
public virtual void set_IsFilteredOut(bool value);
    public virtual int get_PositionalParameterCount();
    protected virtual bool IsValid();
    protected virtual RichText GetSignatureInternal(String[] namedArguments, ParameterInfoSettings settings, TextRange[]& parameterRanges, TextRange& returnTypeRange, Int32[]& mapToOriginalOrder, ExtensionMethodInfo& extensionMethodInfo, RichText[]& annotations);
    public virtual void GetParametersInfo(ParamPresentationInfo[]& paramInfos, Int32& paramsParameterIndex);
    private static IReadOnlyList`1<string> GetConstraintDescriptions(ITypeParameter typeParameter);
    public virtual RichTextBlock GetDescription(ParameterInfoSettings settings);
    public virtual bool Matches(IDeclaredElement signature);
    public bool Matches(int iParameter, IList`1<IType> typeArguments, ITypeConstraintsVerifier typeConstraintsVerifier);
    public virtual RichTextBlock get_ObsoleteDescription();
    protected virtual IList`1<string> GetParameterNames();
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.Feature.Services.ParameterNameHints.DeclaredElementExtensions : object {
    [ExtensionAttribute]
internal static bool TryGetResolveContext(IDeclaredElement declaredElement, IModuleReferenceResolveContext& context);
}
public class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ExclusionList.IndividualParameterMatcher : object {
    [CompilerGeneratedAttribute]
private Predicate`1<string> <matcher>P;
    public IndividualParameterMatcher(Predicate`1<string> matcher);
    public sealed virtual bool Match(String[] parameterNames, int index, string parametersOwnerName);
}
public interface JetBrains.ReSharper.Feature.Services.ParameterNameHints.ExclusionList.IParameterMatcher {
    public abstract virtual bool Match(String[] parameterNames, int index, string parametersOwnerName);
}
public interface JetBrains.ReSharper.Feature.Services.ParameterNameHints.ExclusionList.IParameterNameHintsExclusionListMatcher {
    public abstract virtual bool MatchParameterOwner(string parametersOwnerName, String[] parameterNames);
    public abstract virtual bool MatchParameter(String[] parameterNames, int index, string parametersOwnerName);
}
public interface JetBrains.ReSharper.Feature.Services.ParameterNameHints.ExclusionList.IParameterNameHintsExclusionListStore {
}
public interface JetBrains.ReSharper.Feature.Services.ParameterNameHints.ExclusionList.IParametersOwnerMatcher {
    public abstract virtual bool Match(string parametersOwnerName, String[] parameterNames);
}
public class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ExclusionList.NeighbourAwareParameterMather : object {
    [CompilerGeneratedAttribute]
private Predicate`1[] <matchers>P;
    public NeighbourAwareParameterMather(Predicate`1[] matchers);
    public sealed virtual bool Match(String[] parameterNames, int index, string parametersOwnerName);
}
public class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ExclusionList.OwnerAwareParameterMatcher : object {
    [CompilerGeneratedAttribute]
private Predicate`1<string> <parametersOwnerMatcher>P;
    [CompilerGeneratedAttribute]
private Predicate`1[] <parameterMatchers>P;
    public OwnerAwareParameterMatcher(Predicate`1<string> parametersOwnerMatcher, Predicate`1[] parameterMatchers);
    public sealed virtual bool Match(String[] parameterNames, int index, string parametersOwnerName);
}
public static class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ExclusionList.ParameterNameHintsExclusionListFormatDefinition : object {
    public static Regex Pattern;
    private static ParameterNameHintsExclusionListFormatDefinition();
}
public class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ExclusionList.ParameterNameHintsExclusionListMatcher : object {
    private IList`1<IParametersOwnerMatcher> myParameterOwnerMatchers;
    private IList`1<IParameterMatcher> myParameterMatchers;
    public ParameterNameHintsExclusionListMatcher(IEnumerable`1<string> entries);
    public sealed virtual bool MatchParameterOwner(string parametersOwnerName, String[] parameterNames);
    public sealed virtual bool MatchParameter(String[] parameterNames, int index, string parametersOwnerName);
    private void SaveMatcher(Match match);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ExclusionList.ParameterNameHintsExclusionListUtil : object {
    private static Func`2<IEnumerable`1<string>, IParameterNameHintsExclusionListMatcher> ourFactory;
    private static ParameterNameHintsExclusionListUtil();
    [ExtensionAttribute]
public static void AddExclusionListEntry(IInlayHintsExclusionListManager manager, PsiLanguageType languageType, IContextBoundSettingsStore settingsStore, string entry);
    [ExtensionAttribute]
public static IParameterNameHintsExclusionListMatcher GetMatcher(IInlayHintsExclusionListManager manager, PsiLanguageType languageType, IContextBoundSettingsStore settingsStore);
}
public class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ExclusionList.ParametersOwnerNameOnlyMatcher : object {
    [CompilerGeneratedAttribute]
private Predicate`1<string> <parametersOwnerMatcher>P;
    public ParametersOwnerNameOnlyMatcher(Predicate`1<string> parametersOwnerMatcher);
    public sealed virtual bool Match(string parametersOwnerName, String[] parameterNames);
}
public interface JetBrains.ReSharper.Feature.Services.ParameterNameHints.IParameterNameHintBulbActionsProvider {
}
public abstract class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ManagedLanguage.ExpressionNameMatcherBase : object {
    [CompilerGeneratedAttribute]
private NamingRulesCache <NamingRulesCache>k__BackingField;
    [CompilerGeneratedAttribute]
private INamingPolicyProvider <NamingPolicyProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private NameParser <NameParser>k__BackingField;
    [NotNullAttribute]
public NamingRulesCache NamingRulesCache { get; }
    [NotNullAttribute]
protected INamingPolicyProvider NamingPolicyProvider { get; }
    [NotNullAttribute]
protected NameParser NameParser { get; }
    protected ExpressionNameMatcherBase(NamingManager namingManager, INamingPolicyProvider namingPolicyProvider);
    [CompilerGeneratedAttribute]
public sealed virtual NamingRulesCache get_NamingRulesCache();
    [CompilerGeneratedAttribute]
protected INamingPolicyProvider get_NamingPolicyProvider();
    [CompilerGeneratedAttribute]
protected NameParser get_NameParser();
    public sealed virtual bool IsIntentionOfArgumentClear(string parameter, String[] parameterNameParts, IExpression expression);
    public abstract virtual bool IsIntentionOfArgumentClearFromExplicitConversion(string parameter, String[] parameterNameParts, IExpression expression);
    public abstract virtual bool IsIntentionOfArgumentClearFromReferencedElement(string parameter, String[] parameterNameParts, IExpression expression);
    public abstract virtual bool IsIntentionOfArgumentClearFromInvocation(string parameter, String[] parameterNameParts, IExpression expression);
    public abstract virtual IExpression GetExpression(IExpression expression, bool getThroughInvocation, bool getThroughCast);
}
public interface JetBrains.ReSharper.Feature.Services.ParameterNameHints.ManagedLanguage.ICustomManagedLanguageParameterNameHintsHighlightingProvider`1 {
    public abstract virtual IEnumerable`1<IHighlighting> GetHighlightings(ManagedLanguageParameterNameHintsHighlightingContextBase`1<T> context, IArgument[] argumentsOwner, IParametersOwner parametersOwner, Func`1<string> getQualifiedName, IParameter[] parameters, int offset, int count, Func`4<IParameter, IArgument, string, ParameterNameHintHighlighting> create, Action checkForInterrupt);
    public abstract virtual bool IsApplicable(ManagedLanguageParameterNameHintsHighlightingContextBase`1<T> context, IArgumentsOwner argumentsOwner, IParametersOwner parametersOwner);
}
public interface JetBrains.ReSharper.Feature.Services.ParameterNameHints.ManagedLanguage.IExpressionNameMatcher {
    public NamingRulesCache NamingRulesCache { get; }
    public abstract virtual NamingRulesCache get_NamingRulesCache();
    public abstract virtual bool IsIntentionOfArgumentClear(string parameter, String[] parameterNameParts, IExpression expression);
    public abstract virtual bool IsIntentionOfArgumentClearFromExplicitConversion(string parameter, String[] parameterNameParts, IExpression expression);
    public abstract virtual bool IsIntentionOfArgumentClearFromReferencedElement(string parameter, String[] parameterNameParts, IExpression expression);
    public abstract virtual bool IsIntentionOfArgumentClearFromInvocation(string parameter, String[] parameterNameParts, IExpression expression);
    public abstract virtual IExpression GetExpression(IExpression expression, bool getThroughInvocation, bool getThroughCast);
}
public abstract class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ManagedLanguage.ManagedLanguageOtherInlayHintsOptionsBase : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "VisibilityModeOfCodeAnnotationsHintsOnParameterDeclarationsSettingDescription")]
public PushToHintMode ShowCodeAnnotationsHintsOnParameterDeclarations;
}
public abstract class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ManagedLanguage.ManagedLanguageParameterNameHintsExclusionListPredefinedValues`1 : HaveDefaultSettings`1<T> {
    private static IEnumerable`1<ValueTuple`2<Guid, string>> ourDefaultExclusionList;
    protected ManagedLanguageParameterNameHintsExclusionListPredefinedValues`1(ISettingsSchema settingsSchema, ILogger logger);
    private static ManagedLanguageParameterNameHintsExclusionListPredefinedValues`1();
    public virtual void InitDefaultSettings(ISettingsStorageMountPoint mountPoint);
}
public abstract class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ManagedLanguage.ManagedLanguageParameterNameHintsHighlightingContextBase`1 : ParameterNameHintsHighlightingContextBase`1<T> {
    [CompilerGeneratedAttribute]
private bool <HideIfMethodIsAnnotatedAsStringFormatMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private ManagedLanguageParameterNameHintsHighlightingStrategy`1<T> <Strategy>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ICustomManagedLanguageParameterNameHintsHighlightingProvider`1<T>> <CustomProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideForParamsParameters>k__BackingField;
    public bool HideIfMethodIsAnnotatedAsStringFormatMethod { get; public set; }
    public ManagedLanguageParameterNameHintsHighlightingStrategy`1<T> Strategy { get; }
    public IEnumerable`1<ICustomManagedLanguageParameterNameHintsHighlightingProvider`1<T>> CustomProviders { get; }
    public bool HideForParamsParameters { get; }
    protected ManagedLanguageParameterNameHintsHighlightingContextBase`1(IContextBoundSettingsStore settingsContext, NameParser nameParser, INamingPolicyProvider namingPolicyProvider, IParameterNameHintsExclusionListMatcher matcher, ManagedLanguageParameterNameHintsHighlightingStrategy`1<T> strategy, IEnumerable`1<ICustomManagedLanguageParameterNameHintsHighlightingProvider`1<T>> customProviders, IExpressionNameMatcher expressionNameMatcher);
    [CompilerGeneratedAttribute]
public bool get_HideIfMethodIsAnnotatedAsStringFormatMethod();
    [CompilerGeneratedAttribute]
public void set_HideIfMethodIsAnnotatedAsStringFormatMethod(bool value);
    [CompilerGeneratedAttribute]
public ManagedLanguageParameterNameHintsHighlightingStrategy`1<T> get_Strategy();
    [CompilerGeneratedAttribute]
public IEnumerable`1<ICustomManagedLanguageParameterNameHintsHighlightingProvider`1<T>> get_CustomProviders();
    [CompilerGeneratedAttribute]
public bool get_HideForParamsParameters();
}
[HighlightingSourceAttribute]
public abstract class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ManagedLanguage.ManagedLanguageParameterNameHintsHighlightingProvider`1 : object {
    [NotNullAttribute]
public IEnumerable`1<IHighlighting> GetHighlightingsForConstructor(ManagedLanguageParameterNameHintsHighlightingContextBase`1<T> context, IArgumentsOwner argumentsOwner, IConstructor constructor, DocumentRange highlightingRange, Action checkForInterrupt);
    [NotNullAttribute]
public IEnumerable`1<IHighlighting> GetHighlightingsForMethod(ManagedLanguageParameterNameHintsHighlightingContextBase`1<T> context, IArgumentsOwner argumentsOwner, IParametersOwner method, int parametersOffset, DocumentRange highlightingRange, Action checkForInterrupt);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.ParameterNameHints.ManagedLanguage.ManagedLanguageParameterNameHintsHighlightingProvider`1/<DoGetHighlightings>d__2")]
private IEnumerable`1<IHighlighting> DoGetHighlightings(ManagedLanguageParameterNameHintsHighlightingContextBase`1<T> context, IArgumentsOwner argumentsOwner, IParametersOwner parametersOwner, int parametersOffset, DocumentRange highlightingRange, Action checkForInterrupt);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.ParameterNameHints.ManagedLanguage.ManagedLanguageParameterNameHintsHighlightingProvider`1/<GetSuppressedRanges>d__3")]
private IEnumerable`1<DocumentRange> GetSuppressedRanges(ManagedLanguageParameterNameHintsHighlightingContextBase`1<T> context, IExpression expression);
}
public abstract class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ManagedLanguage.ManagedLanguageParameterNameHintsHighlightingStrategy`1 : object {
    private static IEnumerable`1<string> ourWriterLikeMethodsNames;
    private static IEnumerable`1<string> ourEvidentAnonymousFunctionsNames;
    private static IEnumerable`1<string> ourEvidentPredicateNames;
    private static ManagedLanguageParameterNameHintsHighlightingStrategy`1();
    public abstract virtual RichText GetShortDescription(IParameter parameter, IArgument argument);
    public abstract virtual bool IsShouldBeIgnored(IArgument argument);
    public abstract virtual bool IsShouldBeIgnored(IExpression expression);
    public virtual bool IsShouldBeIgnored(IParametersOwner parametersOwner);
    public abstract virtual bool IsLast(IParameter parameter);
    public abstract virtual bool CanBeConsideredAsLiteral(IArgument argument, IExpression expression);
    public abstract virtual bool IsLambdaExpression(ParameterNameHintsHighlightingContext context, IExpression expression);
    public abstract virtual bool IsLambdaExpression(IExpression expression);
    public abstract virtual bool IsConstOrEnumMemberReference(ParameterNameHintsHighlightingContext context, IParameter parameter, IExpression expression);
    public abstract virtual bool IsUnclearCreationExpression(ParameterNameHintsHighlightingContext context, IExpression expression);
    public abstract virtual bool IsMethodInvocation(ParameterNameHintsHighlightingContext context, IExpression expression);
    public abstract virtual bool IsDefaultExpression(IExpression expression);
    public abstract virtual NamingRule GetParametersNamingRule(ParameterNameHintsHighlightingContext context, IPsiSourceFile sourceFile);
    public abstract virtual NamingRule GetParameterOwnerNamingRule(ParameterNameHintsHighlightingContext context, IPsiSourceFile sourceFile);
    public bool IsIntentionOfFirstParameterClearFromMethodName(ParameterNameHintsHighlightingContext context, ManagedLanguageParameterNameHintsHighlightingStrategy`1<T> strategy, IPsiSourceFile parametersOwnerSourceFile, IParametersOwner parametersOwner, string parameterName, String[] parameterNameParts);
    private static bool IsEvidentForWriterLikeMethods(IParametersOwner parametersOwner, IExpression expression);
    private static bool IsEvidentForAnonymousFunctions(string parameterName, IExpression expression);
    private static bool IsEvidentForBooleanType(string parameterName, IExpression expression);
    private static bool IsExceptionDescendantConstructor(IParametersOwner parametersOwner, IExpression expression);
    private static bool IsEvidentForExceptionsConstructors(string parameterName);
    public bool IsMissingDeclaration(IParameter parameter);
    public bool HasArgumentWithSameType(ParameterNameHintsHighlightingContext context, IArgument[] arguments, IArgument argument);
    public bool IsBuilderLike(ParameterNameHintsHighlightingContext context, IParametersOwner method, int parametersOffset);
    public bool IsSameNamedNumberedParameters(ParameterNameHintsHighlightingContext context, IParameter[] parameters, int parametersOffset);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.ParameterNameHints.ManagedLanguage.ManagedLanguageParameterNameHintsHighlightingStrategy`1/<GetDefaultHighlightings>d__27")]
public IEnumerable`1<IHighlighting> GetDefaultHighlightings(ManagedLanguageParameterNameHintsHighlightingContextBase`1<T> context, IArgument[] arguments, IParametersOwner parametersOwner, Func`1<string> getQualifiedName, IParameter[] parameters, int offset, int count, Func`4<IParameter, IArgument, string, ParameterNameHintHighlighting> create, Action checkForInterrupt);
    public abstract virtual DocumentRange GetSuppressionRange(IExpression expression);
    [CompilerGeneratedAttribute]
internal static void <GetDefaultHighlightings>g__DefineParameterNames|27_0(<>c__DisplayClass27_0& );
    [CompilerGeneratedAttribute]
internal static void <GetDefaultHighlightings>g__DefineParametersNamesParts|27_1(<>c__DisplayClass27_0& );
    [CompilerGeneratedAttribute]
internal static bool <GetDefaultHighlightings>g__IsParameterOwnerExcluded|27_2(<>c__DisplayClass27_0& );
}
[ObsoleteAttribute]
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ReSharperCVisualBasicNETParameterNameHintsSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ManagedLanguage.ManagedLanguageParameterNameHintsOptions : object {
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhichPatternsToUseToFilterInvocationsWhilePlacingHintsSettingDescription")]
public string BlackList;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowCodeAnnotationsHintsOnParameterDeclarationsSettingDescription")]
public bool ShowCodeAnnotationsHintsOnParameterDeclarations;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "HideParameterNameHintsForMethodsAnnotatedAsStringFormatMethodSettingDescription")]
public bool HideIfMethodIsAnnotatedAsStringFormatMethod;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "HideParameterNameHintsForParameterArraysSettingDescription")]
public bool HideForParametersArrays;
}
public abstract class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ManagedLanguage.ManagedLanguageParameterNameHintsOptionsBase : ParameterNameHintsOptionsBase {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "HideParameterNameHintsForParameterArraysSettingDescription")]
public bool HideForParamsParameters;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "HideParameterNameHintsForMethodsAnnotatedAsStringFormatMethodSettingDescription")]
public bool HideIfMethodIsAnnotatedAsStringFormatMethod;
}
public abstract class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ManagedLanguage.ManagedLanguageParameterNameHintsOptionsPage`1 : ParameterNameHintsOptionsPage`1<T> {
    protected ManagedLanguageParameterNameHintsOptionsPage`1(Lifetime lifetime, OptionsPageContext optionsPageContext, OptionsSettingsSmartContext optionsSettingsSmartContext, IconHostBase iconHost, LanguageManager languageManager, PsiLanguageType language);
    protected virtual void AddLanguageSpecificOptions();
}
public class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ManagedLanguage.ManagedParameterNameHintsOptionsMigration`1 : ParameterNameHintsOptionsMigration`1<T> {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.ParameterNameHints.ManagedLanguage.ManagedParameterNameHintsOptionsMigration`1/<GetEntriesToMigrate>d__0")]
public virtual IEnumerable`1<SettingsEntry> GetEntriesToMigrate(ISettingsSchema schema);
    public virtual void Migrate(IContextBoundSettingsStoreImplementation store);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<SettingsEntry> <>n__0(ISettingsSchema schema);
}
public class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ManagedLanguage.NamingRulesCache : object {
    private NamingManager myNamingManager;
    private ConcurrentDictionary`2<NamingRulesCacheKey, NamingRule> myNamingRules;
    public NamingRulesCache(NamingManager namingManager);
    public NamingRule GetNamingRule(NamedElementKinds namedElementKind, PsiLanguageType language, IPsiSourceFile sourceFile);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ManagedLanguage.ReferenceExtensions : object {
    [ExtensionAttribute]
public static ValueTuple`2<IParametersOwner, bool> ResolveSuitableParametersOwner(IReference reference, IArgumentsOwner argumentsOwner, ITypeConversionRule typeConversionRule);
    private static int Estimate(ExtensionInstance`1<IDeclaredElement> candidate, IArgumentsOwner argumentsOwner, ITypeConversionRule typeConversionRule, bool isExtensionCall);
}
public abstract class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ManagedLanguage.StringFormatMethodParameterNameHintsHighlightingProvider`1 : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.ParameterNameHints.ManagedLanguage.StringFormatMethodParameterNameHintsHighlightingProvider`1/<GetHighlightings>d__0")]
public sealed virtual IEnumerable`1<IHighlighting> GetHighlightings(ManagedLanguageParameterNameHintsHighlightingContextBase`1<T> context, IArgument[] arguments, IParametersOwner parametersOwner, Func`1<string> getQualifiedName, IParameter[] parameters, int offset, int count, Func`4<IParameter, IArgument, string, ParameterNameHintHighlighting> create, Action checkForInterrupt);
    public sealed virtual bool IsApplicable(ManagedLanguageParameterNameHintsHighlightingContextBase`1<T> context, IArgumentsOwner argumentsOwner, IParametersOwner parametersOwner);
    private IParameter GetStringFormatMethodParameter(IParametersOwner parametersOwner);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ParameterNameHintAdornmentProvider : object {
    private ISettingsStore mySettingsStore;
    private IInlayHintsExclusionListManager myExclusionListManager;
    private LanguageManager myLanguageManager;
    public ParameterNameHintAdornmentProvider(ISettingsStore settingsStore, IInlayHintsExclusionListManager exclusionListManager, LanguageManager languageManager);
    public sealed virtual bool IsValid(IHighlighter highlighter);
    public sealed virtual IAdornmentDataModel CreateDataModel(IHighlighter highlighter);
}
public abstract class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ParameterNameHintBulbActionsProvider`1 : object {
    public sealed virtual IEnumerable`1<IntentionAction> CreateChangeVisibilityActions(ISettingsStore settingsStore, IHighlighting highlighting, IAnchor anchor);
    public virtual IEnumerable`1<BulbMenuItem> CreateChangeVisibilityBulbMenuItems(ISettingsStore settingsStore, IHighlighting highlighting);
    public abstract virtual string GetOptionsPageId();
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IntraTextAdornments")]
[DaemonTooltipProviderAttribute("")]
[InlayHintContextActionStyleAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "ParameterNameHints_Text", "True")]
public class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ParameterNameHintContextActionHighlighting : object {
    private DocumentRange myRange;
    [CompilerGeneratedAttribute]
private string <ExclusionListPattern>k__BackingField;
    [CompilerGeneratedAttribute]
private PsiLanguageType <ExclusionListLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    public string ExclusionListPattern { get; }
    public PsiLanguageType ExclusionListLanguage { get; }
    public string MethodName { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public string TestOutput { get; }
    public ParameterNameHintContextActionHighlighting(DocumentRange range, PsiLanguageType exclusionListLanguage, string exclusionListPattern, string methodName);
    [CompilerGeneratedAttribute]
public string get_ExclusionListPattern();
    [CompilerGeneratedAttribute]
public PsiLanguageType get_ExclusionListLanguage();
    [CompilerGeneratedAttribute]
public string get_MethodName();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual string get_TestOutput();
}
[InlayHintContextActionProviderAttribute("JetBrains.ProjectModel.KnownProjectFileType", "16")]
public class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ParameterNameHintContextActionsProvider : InlayHintContextActionsProvider`1<ParameterNameHintContextActionHighlighting> {
    private ISettingsStore mySettingsStore;
    private IInlayHintsExclusionListManager myExclusionListManager;
    private LanguageManager myLanguageManager;
    public ParameterNameHintContextActionsProvider(ISettingsStore settingsStore, IInlayHintsExclusionListManager exclusionListManager, LanguageManager languageManager);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.ParameterNameHints.ParameterNameHintContextActionsProvider/<GetPerHighlightingActions>d__4")]
public virtual IEnumerable`1<IntentionAction> GetPerHighlightingActions(IEnumerable`1<IInlayHintContextActionHighlighting> highlightings, IAnchor configureAnchor, IAnchor configureParentAnchor);
    public virtual IEnumerable`1<IntentionAction> GetCommonActions(IEnumerable`1<IInlayHintContextActionHighlighting> highlightings, IAnchor configureAnchor);
    public virtual string GetOptionsPageId(IEnumerable`1<IInlayHintContextActionHighlighting> highlightings);
}
public class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ParameterNameHintDataModel : object {
    private ISettingsStore mySettingsStore;
    private IInlayHintsExclusionListManager myExclusionListManager;
    private IParameterNameHintBulbActionsProvider myBulbActionsProvider;
    private ParameterNameHintHighlighting myHighlighting;
    private List`1<BulbMenuItem> myContextMenuItems;
    [CompilerGeneratedAttribute]
private AdornmentData <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private IPresentableItem <ContextMenuTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TextRange> <SelectionRange>k__BackingField;
    public AdornmentData Data { get; }
    public IPresentableItem ContextMenuTitle { get; }
    public Nullable`1<TextRange> SelectionRange { get; }
    public IEnumerable`1<BulbMenuItem> ContextMenuItems { get; }
    public ParameterNameHintDataModel(ISettingsStore settingsStore, IInlayHintsExclusionListManager exclusionListManager, IParameterNameHintBulbActionsProvider bulbActionsProvider, ParameterNameHintHighlighting highlighting);
    [CompilerGeneratedAttribute]
public sealed virtual AdornmentData get_Data();
    private List`1<BulbMenuItem> GetContextMenuItems(ISettingsStore settingsStore, IInlayHintsExclusionListManager exclusionListManager);
    [CompilerGeneratedAttribute]
public sealed virtual IPresentableItem get_ContextMenuTitle();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<TextRange> get_SelectionRange();
    public sealed virtual IEnumerable`1<BulbMenuItem> get_ContextMenuItems();
    public sealed virtual void ExecuteNavigation(PopupWindowContextSource popupWindowContextSource);
}
[DaemonAdornmentProviderAttribute("JetBrains.ReSharper.Feature.Services.ParameterNameHints.ParameterNameHintAdornmentProvider")]
[DaemonTooltipProviderAttribute("JetBrains.ReSharper.Feature.Services.InlayHints.InlayHintTooltipProvider")]
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IntraTextAdornments")]
public class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ParameterNameHintHighlighting : object {
    private IPsiServices myPsiServices;
    private DocumentRange myRange;
    private RichText myDescription;
    [CompilerGeneratedAttribute]
private RichText <ShortDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private PsiLanguageType <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaredElementPointer`1<IDeclaredElement> <DeclaredElementPointer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlackListPattern>k__BackingField;
    [CompilerGeneratedAttribute]
private IInlayHintBulbActionsProvider <BulbActionsProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private PushToHintMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private TextRange <SelectionRange>k__BackingField;
    public RichText ShortDescription { get; }
    [NotNullAttribute]
public PsiLanguageType Language { get; }
    public RichText Description { get; }
    public string MethodName { get; }
    public IDeclaredElementPointer`1<IDeclaredElement> DeclaredElementPointer { get; }
    public string BlackListPattern { get; }
    public IInlayHintBulbActionsProvider BulbActionsProvider { get; }
    public PushToHintMode Mode { get; }
    public TextRange SelectionRange { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public string TestOutput { get; }
    public ParameterNameHintHighlighting(DocumentRange range, IDeclaredElement parameterDeclaration, string methodName, RichText shortDescription, PsiLanguageType language, string blackListPattern, PushToHintMode mode);
    public ParameterNameHintHighlighting(DocumentRange range, IDeclaredElement parameterDeclaration, string methodName, RichText description, RichText shortDescription, PsiLanguageType blackListLanguage, string blackListPattern, PushToHintMode mode);
    [CompilerGeneratedAttribute]
public RichText get_ShortDescription();
    [CompilerGeneratedAttribute]
public PsiLanguageType get_Language();
    public sealed virtual RichText get_Description();
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public IDeclaredElementPointer`1<IDeclaredElement> get_DeclaredElementPointer();
    [CompilerGeneratedAttribute]
public string get_BlackListPattern();
    [CompilerGeneratedAttribute]
public IInlayHintBulbActionsProvider get_BulbActionsProvider();
    [CompilerGeneratedAttribute]
public PushToHintMode get_Mode();
    [CompilerGeneratedAttribute]
public TextRange get_SelectionRange();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual string get_TestOutput();
}
public abstract class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ParameterNameHintsHighlightingContext : object {
    [CompilerGeneratedAttribute]
private PushToHintMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private NameParser <NameParser>k__BackingField;
    [CompilerGeneratedAttribute]
private NamingRulesCache <NamingRulesCache>k__BackingField;
    [CompilerGeneratedAttribute]
private INamingPolicyProvider <NamingPolicyProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IContextBoundSettingsStore <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private IParameterNameHintsExclusionListMatcher <ExclusionListMatcher>k__BackingField;
    [CompilerGeneratedAttribute]
private IExpressionNameMatcher <ExpressionNameMatcher>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideForNonLiterals>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideIfIntentionOfFirstParameterIsClearFromMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideForBuilderLikeMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideForMethodsWithSameNamedNumberedParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideIfIntentionOfArgumentIsClearFromUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowForNonLiteralsInCaseOfMultipleParametersWithSameType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowForConstantsAndEnumMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowForLambdaExpressions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowForUnclearCreationExpressions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowForMethodInvocations>k__BackingField;
    public PushToHintMode Mode { get; protected set; }
    public NameParser NameParser { get; protected set; }
    public NamingRulesCache NamingRulesCache { get; protected set; }
    public INamingPolicyProvider NamingPolicyProvider { get; protected set; }
    public IContextBoundSettingsStore Settings { get; protected set; }
    public IParameterNameHintsExclusionListMatcher ExclusionListMatcher { get; protected set; }
    public IExpressionNameMatcher ExpressionNameMatcher { get; protected set; }
    public bool HideForNonLiterals { get; protected set; }
    public bool HideIfIntentionOfFirstParameterIsClearFromMethodName { get; protected set; }
    public bool HideForBuilderLikeMethods { get; protected set; }
    public bool HideForMethodsWithSameNamedNumberedParameters { get; protected set; }
    public bool HideIfIntentionOfArgumentIsClearFromUsage { get; protected set; }
    public bool ShowForNonLiteralsInCaseOfMultipleParametersWithSameType { get; protected set; }
    public bool ShowForConstantsAndEnumMembers { get; protected set; }
    public bool ShowForLambdaExpressions { get; protected set; }
    public bool ShowForUnclearCreationExpressions { get; protected set; }
    public bool ShowForMethodInvocations { get; protected set; }
    [CompilerGeneratedAttribute]
public PushToHintMode get_Mode();
    [CompilerGeneratedAttribute]
protected void set_Mode(PushToHintMode value);
    [CompilerGeneratedAttribute]
public NameParser get_NameParser();
    [CompilerGeneratedAttribute]
protected void set_NameParser(NameParser value);
    [CompilerGeneratedAttribute]
public NamingRulesCache get_NamingRulesCache();
    [CompilerGeneratedAttribute]
protected void set_NamingRulesCache(NamingRulesCache value);
    [CompilerGeneratedAttribute]
public INamingPolicyProvider get_NamingPolicyProvider();
    [CompilerGeneratedAttribute]
protected void set_NamingPolicyProvider(INamingPolicyProvider value);
    [CompilerGeneratedAttribute]
public IContextBoundSettingsStore get_Settings();
    [CompilerGeneratedAttribute]
protected void set_Settings(IContextBoundSettingsStore value);
    [CompilerGeneratedAttribute]
public IParameterNameHintsExclusionListMatcher get_ExclusionListMatcher();
    [CompilerGeneratedAttribute]
protected void set_ExclusionListMatcher(IParameterNameHintsExclusionListMatcher value);
    [CompilerGeneratedAttribute]
public IExpressionNameMatcher get_ExpressionNameMatcher();
    [CompilerGeneratedAttribute]
protected Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ExpressionNameMatcher(IExpressionNameMatcher value);
    [CompilerGeneratedAttribute]
public bool get_HideForNonLiterals();
    [CompilerGeneratedAttribute]
protected void set_HideForNonLiterals(bool value);
    [CompilerGeneratedAttribute]
public bool get_HideIfIntentionOfFirstParameterIsClearFromMethodName();
    [CompilerGeneratedAttribute]
protected void set_HideIfIntentionOfFirstParameterIsClearFromMethodName(bool value);
    [CompilerGeneratedAttribute]
public bool get_HideForBuilderLikeMethods();
    [CompilerGeneratedAttribute]
protected void set_HideForBuilderLikeMethods(bool value);
    [CompilerGeneratedAttribute]
public bool get_HideForMethodsWithSameNamedNumberedParameters();
    [CompilerGeneratedAttribute]
protected void set_HideForMethodsWithSameNamedNumberedParameters(bool value);
    [CompilerGeneratedAttribute]
public bool get_HideIfIntentionOfArgumentIsClearFromUsage();
    [CompilerGeneratedAttribute]
protected void set_HideIfIntentionOfArgumentIsClearFromUsage(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowForNonLiteralsInCaseOfMultipleParametersWithSameType();
    [CompilerGeneratedAttribute]
protected void set_ShowForNonLiteralsInCaseOfMultipleParametersWithSameType(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowForConstantsAndEnumMembers();
    [CompilerGeneratedAttribute]
protected void set_ShowForConstantsAndEnumMembers(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowForLambdaExpressions();
    [CompilerGeneratedAttribute]
protected void set_ShowForLambdaExpressions(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowForUnclearCreationExpressions();
    [CompilerGeneratedAttribute]
protected void set_ShowForUnclearCreationExpressions(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowForMethodInvocations();
    [CompilerGeneratedAttribute]
protected void set_ShowForMethodInvocations(bool value);
}
public abstract class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ParameterNameHintsHighlightingContextBase`1 : ParameterNameHintsHighlightingContext {
    protected ParameterNameHintsHighlightingContextBase`1(IContextBoundSettingsStore settingsContext, NameParser nameParser, INamingPolicyProvider namingPolicyProvider, IParameterNameHintsExclusionListMatcher matcher, IExpressionNameMatcher expressionNameMatcher);
}
[ObsoleteAttribute]
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ReSharperGeneralParameterNameHintsSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ParameterNameHintsOptions : object {
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToShowParameterNameHintsSettingDescription")]
public bool ShowParameterNameHints;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToHideParameterNameHintsForBuilderLikeMethodsSettingDescription")]
public bool HideForBuilderLikeMethods;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToHideParameterNameHintsIfMethodParametersOnlyDifferByNumberedSuffixSettingDescription")]
public bool HideForMethodsWithSameNamedNumberedParameters;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToHideParameterNameHintsForNonLiteralsSettingDescription")]
public bool HideForNonLiterals;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToHideParameterNameHintIfIntentionOfArgumentIsClearFromUsageSettingDescription")]
public bool HideIfIntentionOfArgumentIsClearFromUsage;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToHideParameterNameHintIfIntentionOfFirstParameterIsClearFromMethodNameSettingDescription")]
public bool HideIfIntentionOfFirstParameterIsClearFromMethodName;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToShowParameterNameHintsForConstantsAndEnumerationMembersSettingDescription")]
public bool ShowForConstantsAndEnumMembers;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToShowParameterNameHintsForLambdaExpressionsAndAnonymousMethodsSettingDescription")]
public bool ShowForLambdaExpressions;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToShowParameterNameHintsForFunctionCallsAndMethodInvocationsSettingDescription")]
public bool ShowForMethodInvocations;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToShowParameterNameHintsForNonLiteralsInCaseOfMultipleParametersWithTheSameTypeSettingDescription")]
public bool ShowForNonLiteralsInCaseOfMultipleParametersWithSameName;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToShowParameterNameHintsForUnclearObjectCreationExpressionsSettingDescription")]
public bool ShowForUnclearCreationExpression;
}
public class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ParameterNameHintsOptionsAutoFixExclusionListMigration`1 : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.ParameterNameHints.ParameterNameHintsOptionsAutoFixExclusionListMigration`1/<GetEntriesToMigrate>d__0")]
public sealed virtual IEnumerable`1<SettingsEntry> GetEntriesToMigrate(ISettingsSchema schema);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.ParameterNameHints.ParameterNameHintsOptionsAutoFixExclusionListMigration`1/<GetKeysToMigrate>d__1")]
public sealed virtual IEnumerable`1<SettingsKey> GetKeysToMigrate(ISettingsSchema schema);
    public sealed virtual void Migrate(IContextBoundSettingsStoreImplementation store);
}
public abstract class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ParameterNameHintsOptionsBase : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "VisibilityModeOfParameterNameHintsSettingDescription")]
public PushToHintMode ShowParameterNameHints;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToHideParameterNameHintsForBuilderLikeMethodsSettingDescription")]
public bool HideForBuilderLikeMethods;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToHideParameterNameHintsIfMethodParametersOnlyDifferByNumberedSuffixSettingDescription")]
public bool HideForMethodsWithSameNamedNumberedParameters;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToHideParameterNameHintsForNonLiteralsSettingDescription")]
public bool HideForNonLiterals;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToHideParameterNameHintIfIntentionOfArgumentIsClearFromUsageSettingDescription")]
public bool HideIfIntentionOfArgumentIsClearFromUsage;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToHideParameterNameHintIfIntentionOfFirstParameterIsClearFromMethodNameSettingDescription")]
public bool HideIfIntentionOfFirstParameterIsClearFromMethodName;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToShowParameterNameHintsForConstantsAndEnumerationMembersSettingDescription")]
public bool ShowForConstantsAndEnumMembers;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToShowParameterNameHintsForLambdaExpressionsAndAnonymousMethodsSettingDescription")]
public bool ShowForLambdaExpressions;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToShowParameterNameHintsForFunctionCallsAndMethodInvocationsSettingDescription")]
public bool ShowForMethodInvocations;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToShowParameterNameHintsForNonLiteralsInCaseOfMultipleParametersWithTheSameTypeSettingDescription")]
public bool ShowForNonLiteralsInCaseOfMultipleParametersWithSameName;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToShowParameterNameHintsForUnclearObjectCreationExpressionsSettingDescription")]
public bool ShowForUnclearCreationExpression;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhichPatternsToUseToFilterInvocationsWhilePlacingHintsSettingDescription")]
public IIndexedEntry`2<Guid, string> ExclusionList;
}
public class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ParameterNameHintsOptionsMigration`1 : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.ParameterNameHints.ParameterNameHintsOptionsMigration`1/<GetEntriesToMigrate>d__0")]
public virtual IEnumerable`1<SettingsEntry> GetEntriesToMigrate(ISettingsSchema schema);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.ParameterNameHints.ParameterNameHintsOptionsMigration`1/<GetKeysToMigrate>d__1")]
public sealed virtual IEnumerable`1<SettingsKey> GetKeysToMigrate(ISettingsSchema schema);
    public virtual void Migrate(IContextBoundSettingsStoreImplementation store);
}
public abstract class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ParameterNameHintsOptionsPage`1 : InlayHintsOptionPageBase {
    protected ParameterNameHintsOptionsPage`1(Lifetime lifetime, OptionsPageContext optionsPageContext, OptionsSettingsSmartContext optionsSettingsSmartContext, IconHostBase iconHost, LanguageManager languageManager, PsiLanguageType language);
    protected abstract virtual void AddLanguageSpecificOptions();
    protected virtual void AddVisibilityOptions();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.ParameterNameHints.TreeNodeExtensions : object {
    [ExtensionAttribute]
public static bool HasValidDocumentRangeBounds(ITreeNode treeNode);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.ParameterNameHints.ZoneMarker : object {
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.PathTracker.PathReferenceTracker : object {
    private IThreading myInvocator;
    private UITaskExecutor myUITaskExecutor;
    private ISettingsStore myStore;
    private JetHashSet`1<string> myExcludeTrackingExtensions;
    private Lifetime myLifetime;
    private ISolution mySolution;
    public bool Enabled { get; public set; }
    public PathReferenceTracker(Lifetime lifetime, ISolution solution, IThreading invocator, UITaskExecutor uiTaskExecutor, ChangeManager changeManager, IProjectFileExtensions projectFileExtensions, ISettingsStore store);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    private void OnChange(ChangeEventArgs changeeventargs);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Resources.Settings.CodeEditingSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "TracksReferencesToFilesInStringValuesInsideSourceCodeSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.PathTracker.PathReferenceTrackerSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherTheFeatureIsEnabledSettingDescription")]
public bool IsEnabled;
}
public static class JetBrains.ReSharper.Feature.Services.PathTracker.PathReferenceTrackerSettingsAccessor : object {
    public static Expression`1<Func`2<PathReferenceTrackerSettings, bool>> IsEnabled;
    private static PathReferenceTrackerSettingsAccessor();
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.PathTracker.PathReferenceTrackerSettingsUpgrader : object {
    private IContextBoundSettingsStore myStore;
    private sealed virtual override void JetBrains.Application.Configuration.Upgrade.IGlobalSettingsUpgrader.Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
    private sealed virtual override void JetBrains.Application.Configuration.IXmlReadable.ReadFromXml(XmlElement element);
}
public enum JetBrains.ReSharper.Feature.Services.Pencils.FilterEnabled : Enum {
    public int value__;
    public static FilterEnabled Default;
    public static FilterEnabled On;
    public static FilterEnabled Off;
}
public interface JetBrains.ReSharper.Feature.Services.Pencils.Filters.ICustomPencilsFilter {
    public ISimpleSignal Changed { get; }
    public abstract virtual bool GetValue(IContextBoundSettingsStore source);
    public abstract virtual void SetValue(bool value, IContextBoundSettingsStore dest, IContextBoundSettingsStore oldValuesSource);
    public abstract virtual void CopyValue(IContextBoundSettingsStore source, IContextBoundSettingsStore dest);
    public abstract virtual void ResetValue(IContextBoundSettingsStore dest);
    public abstract virtual ISimpleSignal get_Changed();
}
public interface JetBrains.ReSharper.Feature.Services.Pencils.Filters.IInspectionFilter {
}
public interface JetBrains.ReSharper.Feature.Services.Pencils.Filters.IPencilsFilter {
    public string Id { get; }
    public string GroupId { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public IViewableProperty`1<bool> IsVisible { get; }
    public bool DefaultEnabled { get; }
    public string Kind { get; }
    public abstract virtual string get_Id();
    public abstract virtual string get_GroupId();
    public abstract virtual string get_DisplayName();
    public abstract virtual string get_Description();
    public abstract virtual IViewableProperty`1<bool> get_IsVisible();
    public abstract virtual bool get_DefaultEnabled();
    public abstract virtual string get_Kind();
    public abstract virtual bool Accept(HighlightingInfo info);
}
public interface JetBrains.ReSharper.Feature.Services.Pencils.Filters.IPencilsFiltersProvider {
    public abstract virtual IEnumerable`1<IPencilsFilter> GetFilters(Lifetime lifetime, ISolution solution, ISettingsStore store);
}
public interface JetBrains.ReSharper.Feature.Services.Pencils.Filters.ISettingOwnerFilter {
    public SettingsScalarEntry Entry { get; }
    public abstract virtual SettingsScalarEntry get_Entry();
}
public abstract class JetBrains.ReSharper.Feature.Services.Pencils.Filters.PencilsFilterBase : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DefaultEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IViewableProperty`1<bool> <IsVisible>k__BackingField;
    public string Id { get; }
    public string GroupId { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public bool DefaultEnabled { get; }
    public string Kind { get; }
    public IViewableProperty`1<bool> IsVisible { get; protected set; }
    public PencilsFilterBase(string id, string groupId, string displayName, string description, bool isVisible, bool isEnabledDefault);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual string get_GroupId();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DefaultEnabled();
    public abstract virtual string get_Kind();
    public virtual bool Accept(HighlightingInfo info);
    [CompilerGeneratedAttribute]
public sealed virtual IViewableProperty`1<bool> get_IsVisible();
    [CompilerGeneratedAttribute]
protected void set_IsVisible(IViewableProperty`1<bool> value);
    protected bool Equals(PencilsFilterBase other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class JetBrains.ReSharper.Feature.Services.Pencils.Filters.PencilsFilterSettingsBase`1 : PencilsFilterBase {
    [CompilerGeneratedAttribute]
private SettingsScalarEntry <Entry>k__BackingField;
    public SettingsScalarEntry Entry { get; }
    public PencilsFilterSettingsBase`1(string id, string groupId, string displayName, string description, bool isVisible, ISettingsStore store, Expression`1<Func`2<T, bool>> enabledSettings);
    [CompilerGeneratedAttribute]
public sealed virtual SettingsScalarEntry get_Entry();
}
public class JetBrains.ReSharper.Feature.Services.Pencils.PencilsConfiguration : object {
    public IViewableProperty`1<Severity> SeverityValue;
    public IViewableMap`2<string, bool> FiltersEnabled;
}
[SettingsKeyAttribute("JetBrains.ReSharper.Resources.Settings.CodeInspectionSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "HighlightingEyeSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.Pencils.PencilsConfigurationSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ActualSeveritySettingDescription")]
public Severity ActualSeverity;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterStateSettingDescription")]
public IIndexedEntry`2<string, FilterEnabled> FiltersState;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "StorageTypeSettingDescription")]
public PencilsStorage Storage;
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Pencils.PencilsManager : object {
    [NotNullAttribute]
public PencilsStore Storage;
    [NotNullAttribute]
private IShellLocks myShellLocks;
    [NotNullAttribute]
private HighlightingSettingsManager myHighlightingSettingsManager;
    [NotNullAttribute]
private OneToListMap`2<string, IPencilsFilter> myFilterIndex;
    [NotNullAttribute]
private PencilsConfiguration myPencilsConfiguration;
    [NotNullAttribute]
private Dictionary`2<string, string> myGroupToKind;
    public bool IsRider { get; }
    public PencilsManager(Lifetime lifetime, ISolution solution, PencilsStore storage, ISettingsStore settingsStore, IShellLocks shellLocks, IEnumerable`1<IPencilsFiltersProvider> pencilsFiltersProviders, HighlightingSettingsManager highlightingSettingsManager);
    public virtual bool get_IsRider();
    public bool IsHighlightingEnabled(HighlightingInfo highlightingInfo, IPsiSourceFile sourceFile, IContextBoundSettingsStore contextBoundSettingsStore);
    private ValueTuple`2<string, Severity> GetGroupKindAndSeverity(HighlightingInfo highlightingInfo, IPsiSourceFile sourceFile, IContextBoundSettingsStore contextBoundSettingsStore);
    [CanBeNullAttribute]
private string TryGetGroupId(IHighlighting highlighting);
    public void AddFilter(IPencilsFilter pencilsFilter);
    protected void RegisterFilter(IPencilsFilter filter);
}
public enum JetBrains.ReSharper.Feature.Services.Pencils.PencilsStorage : Enum {
    public int value__;
    public static PencilsStorage ThisComputer;
    public static PencilsStorage Solution;
}
[SolutionComponentAttribute("2")]
public class JetBrains.ReSharper.Feature.Services.Pencils.PencilsStore : object {
    [NotNullAttribute]
public static Expression`1<Func`2<PencilsConfigurationSettings, IIndexedEntry`2<string, FilterEnabled>>> FiltersState;
    public PencilsConfiguration ActualConfiguration;
    public IViewableProperty`1<PencilsStorage> StorageType;
    private Dictionary`2<string, IPencilsFilter> myFilters;
    public SimpleSignal Changed;
    private IContextBoundSettingsStore myTeamShared;
    private IContextBoundSettingsStore mySolutionPersonal;
    private IContextBoundSettingsStoreLive mySolutionSettings;
    [CompilerGeneratedAttribute]
private IContextBoundSettingsStore <ActualStorage>k__BackingField;
    private Lifetime myLifetime;
    private ISettingsStore mySettingsStore;
    private IShellLocks myShellLocks;
    private List`1<SettingsScalarEntry> myScalarSettingsEntries;
    private List`1<string> myIndexedSettingsEntries;
    private List`1<ICustomPencilsFilter> myCustomFilters;
    public IReadOnlyDictionary`2<string, IPencilsFilter> Filters { get; }
    protected IContextBoundSettingsStore ActualStorage { get; protected set; }
    public PencilsStore(Lifetime lifetime, ISolution solution, ISettingsStore settingsStore, SolutionSettings settings, SolutionSettingsStoragePersonal personal, SolutionSettingsStorageShared shared, GlobalPerProductStorage perProductStorage, IShellLocks shellLocks, ILogger logger);
    private static PencilsStore();
    public IReadOnlyDictionary`2<string, IPencilsFilter> get_Filters();
    [CompilerGeneratedAttribute]
protected IContextBoundSettingsStore get_ActualStorage();
    [CompilerGeneratedAttribute]
protected void set_ActualStorage(IContextBoundSettingsStore value);
    public void BindFilter(IPencilsFilter filter);
    private void BindSettingToProperty(SettingsEntry entry, Action updateValue);
    private bool GetSettingOwnerFilterEnabled(ISettingOwnerFilter filter);
    private bool GetFilterEnabled(IPencilsFilter filter);
    private Severity GetActualSeverity();
    public void LoadTeamShared();
    public void ShareWithTeam();
    private void CopyFromLayerToLayer(IContextBoundSettingsStore source, IContextBoundSettingsStore dest, bool copyDefault);
    public void SetFilterValue(IPencilsFilter filter, bool value);
    public void SetMinimalSeverityValue(Severity severity);
}
public interface JetBrains.ReSharper.Feature.Services.PostfixTemplates.Contexts.IPostfixTemplateContextFactory {
    [NotNullAttribute]
public abstract virtual String[] GetReparseStrings();
    [CanBeNullAttribute]
public abstract virtual PostfixTemplateContext TryCreate(ITreeNode position, PostfixTemplateExecutionContext executionContext);
}
public abstract class JetBrains.ReSharper.Feature.Services.PostfixTemplates.Contexts.PostfixExpressionContext : UserDataHolder {
    [CompilerGeneratedAttribute]
private PostfixTemplateContext <PostfixContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNode <Expression>k__BackingField;
    [NotNullAttribute]
public PostfixTemplateContext PostfixContext { get; }
    [NotNullAttribute]
public ITreeNode Expression { get; }
    public DocumentRange ExpressionDocumentRange { get; }
    protected PostfixExpressionContext(PostfixTemplateContext postfixContext, ITreeNode expression);
    [CompilerGeneratedAttribute]
public PostfixTemplateContext get_PostfixContext();
    [CompilerGeneratedAttribute]
public ITreeNode get_Expression();
    public DocumentRange get_ExpressionDocumentRange();
}
public class JetBrains.ReSharper.Feature.Services.PostfixTemplates.Contexts.PostfixExpressionContextImage : object {
    [NotNullAttribute]
private Type myExpressionType;
    private DocumentRange myExpressionRange;
    private int myExpressionIndex;
    public int ExpressionIndex { get; }
    public PostfixExpressionContextImage(PostfixExpressionContext context);
    public int get_ExpressionIndex();
    public bool MatchesByRangeAndType(PostfixExpressionContext context);
}
public abstract class JetBrains.ReSharper.Feature.Services.PostfixTemplates.Contexts.PostfixTemplateContext : object {
    [CanBeNullAttribute]
private IList`1<PostfixExpressionContext> myAllExpressions;
    [CompilerGeneratedAttribute]
private ITreeNode <Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiModule <PsiModule>k__BackingField;
    [CompilerGeneratedAttribute]
private PostfixTemplateExecutionContext <ExecutionContext>k__BackingField;
    [NotNullAttribute]
public ITreeNode Reference { get; }
    [NotNullAttribute]
public IPsiModule PsiModule { get; }
    [NotNullAttribute]
public PsiLanguageType Language { get; }
    [NotNullAttribute]
public PostfixTemplateExecutionContext ExecutionContext { get; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public IList`1<PostfixExpressionContext> AllExpressions { get; }
    protected PostfixTemplateContext(ITreeNode reference, PostfixTemplateExecutionContext executionContext);
    [CompilerGeneratedAttribute]
public ITreeNode get_Reference();
    [CompilerGeneratedAttribute]
public IPsiModule get_PsiModule();
    public abstract virtual PsiLanguageType get_Language();
    [CompilerGeneratedAttribute]
public PostfixTemplateExecutionContext get_ExecutionContext();
    public IList`1<PostfixExpressionContext> get_AllExpressions();
    [NotNullAttribute]
[ItemNotNullAttribute]
protected abstract virtual IEnumerable`1<PostfixExpressionContext> GetAllExpressionContexts();
    public virtual bool IsSemanticallyMakeSense();
    [NotNullAttribute]
public virtual PostfixExpressionContext FixExpression(PostfixExpressionContext context);
    [NotNullAttribute]
[PureAttribute]
public virtual string FixMatchingText(string templateName);
}
[PublicAPIAttribute]
public class JetBrains.ReSharper.Feature.Services.PostfixTemplates.Contexts.PostfixTemplateExecutionContext : object {
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextControl <TextControl>k__BackingField;
    [CompilerGeneratedAttribute]
private IContextBoundSettingsStore <SettingsStore>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReparseString>k__BackingField;
    [NotNullAttribute]
public ISolution Solution { get; private set; }
    [NotNullAttribute]
public ITextControl TextControl { get; private set; }
    [NotNullAttribute]
public IContextBoundSettingsStore SettingsStore { get; private set; }
    [NotNullAttribute]
public LiveTemplatesManager LiveTemplatesManager { get; }
    [NotNullAttribute]
public string ReparseString { get; private set; }
    public PostfixTemplateExecutionContext(ISolution solution, ITextControl textControl, IContextBoundSettingsStore settingsStore, string reparseString);
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    [CompilerGeneratedAttribute]
private void set_Solution(ISolution value);
    [CompilerGeneratedAttribute]
public ITextControl get_TextControl();
    [CompilerGeneratedAttribute]
private void set_TextControl(ITextControl value);
    [CompilerGeneratedAttribute]
public IContextBoundSettingsStore get_SettingsStore();
    [CompilerGeneratedAttribute]
private void set_SettingsStore(IContextBoundSettingsStore value);
    public LiveTemplatesManager get_LiveTemplatesManager();
    [NotNullAttribute]
public ILookupItemsOwner CreateLookupItemsOwner();
    [CompilerGeneratedAttribute]
public string get_ReparseString();
    [CompilerGeneratedAttribute]
private void set_ReparseString(string value);
}
[ShellComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.PostfixTemplates.ExpressionChooser : object {
    [NotNullAttribute]
private JetPopupMenus myPopupMenus;
    [NotNullAttribute]
private IThreading myThreading;
    [NotNullAttribute]
private IDocumentMarkupManager myMarkupManager;
    [NotNullAttribute]
private static string HighlightingKey;
    [NotNullAttribute]
private static string ChooserName;
    public ExpressionChooser(JetPopupMenus popupMenus, IThreading threading, IDocumentMarkupManager markupManager);
    private static ExpressionChooser();
    public virtual void Execute(Lifetime lifetime, ITextControl textControl, IList`1<PostfixExpressionContext> expressions, string postfixText, string chooserTitle, Action`1<int> continuation);
    [NotNullAttribute]
private static string PresentExpression(PostfixExpressionContext context, string postfixText, TextRange& range);
    private void UpdateHighlighting(ITextControl textControl, TextRange expressionRange);
}
public interface JetBrains.ReSharper.Feature.Services.PostfixTemplates.IPostfixTemplate {
    [NotNullAttribute]
public PsiLanguageType Language { get; }
    public abstract virtual PsiLanguageType get_Language();
    [NotNullAttribute]
public abstract virtual PostfixTemplateBehavior CreateBehavior(PostfixTemplateInfo info);
    [CanBeNullAttribute]
public abstract virtual PostfixTemplateInfo TryCreateInfo(PostfixTemplateContext context);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.PostfixTemplates.LookupItemExtensions : object {
    [ExtensionAttribute]
public static bool IsPostfixItem(ILookupItem item);
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.PostfixTemplates.IPostfixTemplate")]
[MeansImplicitUseAttribute]
[PublicAPIAttribute]
[ComponentInstantiationAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.PostfixTemplates.PostfixTemplateAttribute : ComponentAttribute {
    private static Instantiation PostfixTemplateDefaultInstantiation;
    [CompilerGeneratedAttribute]
private string <TemplateName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Example>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisabledByDefault>k__BackingField;
    [NotNullAttribute]
public string TemplateName { get; private set; }
    [NotNullAttribute]
public string Description { get; private set; }
    [NotNullAttribute]
public string Example { get; private set; }
    public bool DisabledByDefault { get; public set; }
    public PostfixTemplateAttribute(string templateName, string description, string example);
    public PostfixTemplateAttribute(string templateName, string description, string example, Instantiation instantiation);
    [CompilerGeneratedAttribute]
public string get_TemplateName();
    [CompilerGeneratedAttribute]
private void set_TemplateName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Example();
    [CompilerGeneratedAttribute]
private void set_Example(string value);
    [CompilerGeneratedAttribute]
public bool get_DisabledByDefault();
    [CompilerGeneratedAttribute]
public void set_DisabledByDefault(bool value);
}
public abstract class JetBrains.ReSharper.Feature.Services.PostfixTemplates.PostfixTemplateBehavior : LookupItemAspect`1<PostfixTemplateInfo> {
    private int myExpressionIndex;
    protected string ExpandCommandName { get; }
    protected string ExpressionSelectTitle { get; }
    public bool CanBeAcceptedWithoutCommit { get; }
    protected PostfixTemplateBehavior(PostfixTemplateInfo info);
    protected string get_ExpandCommandName();
    protected virtual string get_ExpressionSelectTitle();
    public sealed virtual bool get_CanBeAcceptedWithoutCommit();
    public sealed virtual bool AcceptIfOnlyMatched(LookupItemAcceptanceContext itemAcceptanceContext);
    public sealed virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    private DocumentRange GetPostfixRange(ITextControl textControl, DocumentRange nameRange);
    [CanBeNullAttribute]
protected abstract virtual ITreeNode ExpandPostfix(PostfixExpressionContext context);
    protected virtual void AfterComplete(ITextControl textControl, ITreeNode node, Suffix suffix);
    [NotNullAttribute]
private IList`1<PostfixExpressionContext> FindOriginalContexts(PostfixTemplateContext context);
}
public class JetBrains.ReSharper.Feature.Services.PostfixTemplates.PostfixTemplateInfo : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MatchingText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideInPreciseMode>k__BackingField;
    [CompilerGeneratedAttribute]
private PostfixTemplateExecutionContext <ExecutionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private PostfixTemplateTarget <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDynamic>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PostfixExpressionContextImage> <ExpressionContextImages>k__BackingField;
    [CompilerGeneratedAttribute]
private LookupItemPlacement <Placement>k__BackingField;
    public bool IsRiderAsync { get; }
    [NotNullAttribute]
public string Text { get; }
    [NotNullAttribute]
public string MatchingText { get; }
    public bool HideInPreciseMode { get; }
    [NotNullAttribute]
public PostfixTemplateExecutionContext ExecutionContext { get; }
    public PostfixTemplateTarget Target { get; }
    public bool IsDynamic { get; public set; }
    public int Identity { get; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public IList`1<PostfixExpressionContextImage> ExpressionContextImages { get; }
    public LookupItemPlacement Placement { get; }
    public PostfixTemplateInfo(string templateName, IEnumerable`1<PostfixExpressionContext> expressions, PostfixTemplateTarget target, bool availableInPreciseMode, string matchingText);
    public PostfixTemplateInfo(string templateName, PostfixExpressionContext expression, PostfixTemplateTarget target, bool availableInPreciseMode, string matchingText);
    public sealed virtual bool get_IsRiderAsync();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [CompilerGeneratedAttribute]
public string get_MatchingText();
    [CompilerGeneratedAttribute]
public bool get_HideInPreciseMode();
    [CompilerGeneratedAttribute]
public PostfixTemplateExecutionContext get_ExecutionContext();
    [CompilerGeneratedAttribute]
public PostfixTemplateTarget get_Target();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDynamic();
    [CompilerGeneratedAttribute]
public void set_IsDynamic(bool value);
    public sealed virtual int get_Identity();
    [CompilerGeneratedAttribute]
public IList`1<PostfixExpressionContextImage> get_ExpressionContextImages();
    [CompilerGeneratedAttribute]
public sealed virtual LookupItemPlacement get_Placement();
    public void add_TextChanged(Action`1<string> value);
    public void remove_TextChanged(Action`1<string> value);
}
public class JetBrains.ReSharper.Feature.Services.PostfixTemplates.PostfixTemplateMetadata : object {
    [CompilerGeneratedAttribute]
private IPostfixTemplate <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private PostfixTemplateAttribute <Annotation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SettingsKey>k__BackingField;
    [NotNullAttribute]
public IPostfixTemplate Template { get; }
    [NotNullAttribute]
public PostfixTemplateAttribute Annotation { get; }
    [NotNullAttribute]
public string SettingsKey { get; }
    public PostfixTemplateMetadata(IPostfixTemplate template, PostfixTemplateAttribute annotation, string providerKey);
    [CompilerGeneratedAttribute]
public IPostfixTemplate get_Template();
    [CompilerGeneratedAttribute]
public PostfixTemplateAttribute get_Annotation();
    [CompilerGeneratedAttribute]
public string get_SettingsKey();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.PostfixTemplates.PostfixTemplatesManager : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
private SettingsCacheManager mySettingsCacheManager;
    [NotNullAttribute]
private IList`1<PostfixTemplateMetadata> myPostfixTemplates;
    [NotNullAttribute]
private ISettingsStore mySettingsStore;
    [NotNullAttribute]
public IEnumerable`1<PostfixTemplateMetadata> AllRegisteredPostfixTemplates { get; }
    [NotNullAttribute]
private SettingsKey JetBrains.Application.Settings.Extentions.ICachedSettingsReader<System.Collections.Generic.IList<JetBrains.ReSharper.Feature.Services.PostfixTemplates.PostfixTemplateMetadata>>.KeyExposed { get; }
    public PostfixTemplatesManager(Lifetime lifetime, NestedComponentContainerLeafsAndHidesByPartAttribute`2<PostfixTemplateAttribute, ShellPartCatalogSet> templatesComponentContainer, SettingsCacheManager settingsCacheManager, ISettingsStore settingsStore);
    public IEnumerable`1<PostfixTemplateMetadata> get_AllRegisteredPostfixTemplates();
    [NotNullAttribute]
public IEnumerable`1<PostfixTemplateMetadata> GetEnabledTemplatesForLanguage(IContextBoundSettingsStore settingsStore, PostfixTemplateContext postfixTemplateContext);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.PostfixTemplates.PostfixTemplatesManager/<GetEnabledTemplatesForLanguage>d__8")]
[NotNullAttribute]
public IEnumerable`1<PostfixTemplateMetadata> GetEnabledTemplatesForLanguage(PsiLanguageType targetLanguage, ISolution solution);
    public bool HasExpansionCandidatesWithoutCommit(ITextControl textControl, HashSet`1<PsiLanguageType> languageTypes);
    [CanBeNullAttribute]
public PostfixTemplate GetTemplate(ISolution solution, ITextControl textControl);
    [NotNullAttribute]
private sealed virtual override IList`1<PostfixTemplateMetadata> JetBrains.Application.Settings.Extentions.ICachedSettingsReader<System.Collections.Generic.IList<JetBrains.ReSharper.Feature.Services.PostfixTemplates.PostfixTemplateMetadata>>.ReadData(Lifetime lifetime, IContextBoundSettingsStore store);
    private sealed virtual override SettingsKey JetBrains.Application.Settings.Extentions.ICachedSettingsReader<System.Collections.Generic.IList<JetBrains.ReSharper.Feature.Services.PostfixTemplates.PostfixTemplateMetadata>>.get_KeyExposed();
}
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.PostfixTemplates.PostfixTemplatesUsagesCollector : CounterUsagesCollector {
    private PostfixTemplatesManager myPostfixTemplatesManager;
    private EventLogGroup myGroup;
    private EventId1`1<string> myExpanded;
    public PostfixTemplatesUsagesCollector(FeatureUsageLogger featureUsageLogger, PostfixTemplatesManager postfixTemplatesManager);
    public void LogExpand(PostfixTemplateInfo info);
    public virtual EventLogGroup GetGroup();
}
public enum JetBrains.ReSharper.Feature.Services.PostfixTemplates.PostfixTemplateTarget : Enum {
    public int value__;
    public static PostfixTemplateTarget Expression;
    public static PostfixTemplateTarget Statement;
    public static PostfixTemplateTarget TypeUsage;
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.PostfixTemplates.PostfixTemplateValidationRule : CustomValidationRule {
    private PostfixTemplatesManager myPostfixTemplatesManager;
    public PostfixTemplateValidationRule(PostfixTemplatesManager postfixTemplatesManager);
    protected virtual ValidationResultType DoValidate(string data, EventContext context);
    public virtual bool AcceptRuleId(string ruleId);
}
public static class JetBrains.ReSharper.Feature.Services.PostfixTemplates.Settings.CodeCompletionSettingsAccessor : object {
    public static Expression`1<Func`2<CodeCompletionSettingsKey, ParenthesesInsertType>> ParenthesesInsertType;
    private static CodeCompletionSettingsAccessor();
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "PostfixTemplatesSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.PostfixTemplates.Settings.PostfixTemplatesSettings : object {
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "TemplateProvidersListDisabledEnabledListSettingDescription")]
public IIndexedEntry`2<string, bool> DisabledProviders;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowPostfixTemplatesInCodeCompletionSettingDescription")]
public bool ShowPostfixItemsInCodeCompletion;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowSourceTemplatesInCodeCompletionSettingDescription")]
public bool ShowSourceTemplatesInCodeCompletion;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "InsertBracesForEmbeddedStatementsSettingDescription")]
public bool UseBracesForEmbeddedStatements;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "InvokeParameterInfoFromTemplatesSettingDescription")]
public bool InvokeParameterInfoFromTemplates;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "SearchForOccurrencesInVarTemplateSettingDescription")]
public bool SearchOccurrencesFromIntroduceVarTemplates;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.PostfixTemplates.Settings.PostfixTemplatesSettingsAccessor : object {
    [NotNullAttribute]
public static Expression`1<Func`2<PostfixTemplatesSettings, IIndexedEntry`2<string, bool>>> DisabledProviders;
    [NotNullAttribute]
public static Expression`1<Func`2<PostfixTemplatesSettings, bool>> ShowPostfixItems;
    [NotNullAttribute]
public static Expression`1<Func`2<PostfixTemplatesSettings, bool>> ShowSourceTemplates;
    [NotNullAttribute]
public static Expression`1<Func`2<PostfixTemplatesSettings, bool>> BracesForStatements;
    [NotNullAttribute]
public static Expression`1<Func`2<PostfixTemplatesSettings, bool>> InvokeParameterInfo;
    [NotNullAttribute]
public static Expression`1<Func`2<PostfixTemplatesSettings, bool>> SearchVarOccurrences;
    private static PostfixTemplatesSettingsAccessor();
    [ExtensionAttribute]
public static TValue GetIndexedValue(IIndexedEntry`2<TKey, TValue> settings, TKey key, TValue defaultValue);
}
public static class JetBrains.ReSharper.Feature.Services.Presentation.DeclaredElementMenuItemFormatter : object {
    [NotNullAttribute]
private static DeclaredElementPresenterStyle StyleFullName;
    [NotNullAttribute]
private static DeclaredElementPresenterStyle StyleLocalName;
    [NotNullAttribute]
private static DeclaredElementPresenterStyle StyleMemberName;
    [NotNullAttribute]
public static DeclaredElementPresenterStyle ContainerPresentationStyle;
    private static DeclaredElementMenuItemFormatter();
    public static void Format(IDeclaredElement element, IMenuItemDescriptor descriptor, OccurrencePresentationOptions options, bool displayShortcut);
    public static void Format(IDeclaredElement element, ISubstitution substitution, IMenuItemDescriptor descriptor, OccurrencePresentationOptions options, bool displayShortcut);
    public static void Format(IDeclaredElement element, ISubstitution substitution, IMenuItemDescriptor descriptor, OccurrencePresentationOptions options, bool displayShortcut, DeclaredElementPresenterMarking& marking);
    public static RichText FormatText(IDeclaredElement element, PsiLanguageType language, DeclaredElementPresenterMarking& marking);
    public static RichText FormatText(IDeclaredElement element, ISubstitution substitution, PsiLanguageType language, DeclaredElementPresenterMarking& marking);
    public static IMenuItemDescriptor Format(IDeclaredElement declaredElement);
}
public static class JetBrains.ReSharper.Feature.Services.Presentation.ExpressionPresentationBuilder : object {
    public static IPresentableExpression BuildPresentableExpression(ITreeNode element);
    private static ReducibleTreeInnerNode Build(ITreeNode treeNode, ExpressionPresenterLanguageService service);
    private static void GetLayers(IList`1<IReducibleTreeNodeImpl> roots, List`1<IList`1<IReducibleTreeNodeImpl>> layers);
    private static IList`1<IList`1<IReducibleTreeNodeImpl>> GetLayers(IReducibleTreeNodeImpl root);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Presentation.ExpressionPresentationBuilder/<GetFrontNodes>d__4")]
private static IEnumerable`1<ITreeNode> GetFrontNodes(ITreeNode node, ExpressionPresenterLanguageService service);
}
public static class JetBrains.ReSharper.Feature.Services.Presentation.FindResultsBrowserUtil : object {
    public static void ShowResults(IOccurrenceBrowserDescriptor descriptor);
}
public class JetBrains.ReSharper.Feature.Services.Presentation.FindResultsIgnoreActionConstants : object {
    public static string Id;
}
[ToolWindowDescriptorAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Presentation.FindResultsToolWindowDescriptor : ToolWindowDescriptor {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Presentation.FindResultsToolWindowDescriptorEmptyContent : ToolWindowEmptyContentWithActionHint {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
private FindResultsToolWindowDescriptorEmptyContent(FindResultsToolWindowDescriptorEmptyContent original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(FindResultsToolWindowDescriptorEmptyContent left, FindResultsToolWindowDescriptorEmptyContent right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(FindResultsToolWindowDescriptorEmptyContent left, FindResultsToolWindowDescriptorEmptyContent right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ToolWindowEmptyContentWithActionHint other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(FindResultsToolWindowDescriptorEmptyContent other);
    [CompilerGeneratedAttribute]
public virtual AAutomationRecord <Clone>$();
}
public interface JetBrains.ReSharper.Feature.Services.Presentation.IExpressionPresentationProvider`1 {
    public int PresentationMaxLength { get; }
    public int PlaceholderLength { get; }
    public abstract virtual int get_PresentationMaxLength();
    public abstract virtual int get_PlaceholderLength();
    public abstract virtual int MesureText(string text);
    public abstract virtual TPresentationObject AppentLeafNode(TPresentationObject presentation, string text);
    public abstract virtual TPresentationObject AppendPlaceholder(TPresentationObject presentation);
    public abstract virtual TPresentationObject GetInitialObject();
}
public interface JetBrains.ReSharper.Feature.Services.Presentation.IFindResultsBrowser {
    public abstract virtual void ShowContent(IOccurrenceBrowserDescriptor descriptor);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Presentation.Impl.ExpressionPresenterLanguageService : object {
    public virtual bool CanReduce(ITreeNode node);
    public virtual bool IsGrouppingNode(ITreeNode node);
}
internal interface JetBrains.ReSharper.Feature.Services.Presentation.Impl.IReducibleTreeNode {
}
internal interface JetBrains.ReSharper.Feature.Services.Presentation.Impl.IReducibleTreeNodeImpl {
    public abstract virtual TPresentation ProcessForPresentation(TPresentation presentation, IExpressionPresentationProvider`1<TPresentation> provider);
    public abstract virtual int MesureNode(IExpressionPresentationProvider`1<TPresentation> provider, bool shorten);
}
internal class JetBrains.ReSharper.Feature.Services.Presentation.Impl.PresentableExpression : object {
    private IList`1<IList`1<IReducibleTreeNodeImpl>> myLayers;
    private ReducibleTreeInnerNode myNode;
    private bool myIsDirty;
    public PresentableExpression(ReducibleTreeInnerNode node, IList`1<IList`1<IReducibleTreeNodeImpl>> layers);
    private void PrepareNode(IExpressionPresentationProvider`1<TPresentation> provider);
    public sealed virtual TPresentation GetPresentation(IExpressionPresentationProvider`1<TPresentation> presentationProvider);
}
internal class JetBrains.ReSharper.Feature.Services.Presentation.Impl.ReducibleTreeInnerNode : object {
    private List`1<IReducibleTreeNodeImpl> myChildren;
    private bool myCanReduce;
    private bool myShorten;
    public List`1<IReducibleTreeNodeImpl> Children { get; }
    public ReducibleTreeInnerNode(bool canReduce);
    public void Append(IReducibleTreeNodeImpl node);
    public sealed virtual TPresentation ProcessForPresentation(TPresentation presentation, IExpressionPresentationProvider`1<TPresentation> provider);
    public sealed virtual int MesureNode(IExpressionPresentationProvider`1<TPresentation> provider, bool shorten);
    public List`1<IReducibleTreeNodeImpl> get_Children();
    public void MarkShorten();
    public void UnmarkShorten();
}
internal class JetBrains.ReSharper.Feature.Services.Presentation.Impl.ReducibleTreeLeafNode : object {
    private string myText;
    public ReducibleTreeLeafNode(string text);
    public sealed virtual TPresentation ProcessForPresentation(TPresentation presentation, IExpressionPresentationProvider`1<TPresentation> provider);
    public sealed virtual int MesureNode(IExpressionPresentationProvider`1<TPresentation> provider, bool shorten);
}
public interface JetBrains.ReSharper.Feature.Services.Presentation.IPresentableExpression {
    public abstract virtual TPresentation GetPresentation(IExpressionPresentationProvider`1<TPresentation> presentationProvider);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Presentation.PsiSourceFilePresentationService : object {
    [NotNullAttribute]
private PsiProjectFileTypeCoordinator myCoordinator;
    public PsiSourceFilePresentationService(PsiProjectFileTypeCoordinator coordinator);
    [CanBeNullAttribute]
public IconId GetIconId(IPsiSourceFile sourceFile);
}
[OccurrencePresenterAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Presentation.RangeOccurrencePresenter : object {
    public virtual bool IsApplicable(IOccurrence occurrence);
    public virtual bool Present(IMenuItemDescriptor descriptor, IOccurrence occurrence, OccurrencePresentationOptions options);
    protected virtual string GetLocationText(RangeOccurrence rangeOccurrence, OccurrencePresentationOptions options);
    protected virtual void PresentReferenceOccurrenceInternal(OccurrencePresentationOptions options, RangeOccurrence rangeOccurrence, IMenuItemDescriptor descriptor);
    protected virtual RichText GetTooltip(RangeOccurrence rangeOccurrence, OccurrencePresentationOptions options);
    protected virtual RichText GetDisplayText(OccurrencePresentationOptions options, RangeOccurrence rangeOccurrence);
    protected RichText GetContextDisplayText(OccurrencePresentationOptions options, RangeOccurrence rangeOccurrence, RichText displayText);
}
public class JetBrains.ReSharper.Feature.Services.Presentation.RichTextPresentationProvider : object {
    [NotNullAttribute]
private IExpressionPresentationStyle myStyle;
    private static string PlaceholderText;
    public int PresentationMaxLength { get; }
    public int PlaceholderLength { get; }
    public RichTextPresentationProvider(IExpressionPresentationStyle style);
    public sealed virtual int get_PresentationMaxLength();
    public sealed virtual int get_PlaceholderLength();
    public sealed virtual int MesureText(string text);
    public sealed virtual RichText AppentLeafNode(RichText presentation, string text);
    public sealed virtual RichText AppendPlaceholder(RichText presentation);
    public sealed virtual RichText GetInitialObject();
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Feature.Services.Project.DefaultFeaturesStartupMonitor : object {
    [CompilerGeneratedAttribute]
private IViewableProperty`1<bool> <FullStartupFinished>k__BackingField;
    public IViewableProperty`1<bool> FullStartupFinished { get; }
    public DefaultFeaturesStartupMonitor(ISolutionLoadTasksScheduler solutionLoadTasksScheduler);
    [CompilerGeneratedAttribute]
public sealed virtual IViewableProperty`1<bool> get_FullStartupFinished();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0();
}
[SolutionComponentAttribute("10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Project.FeaturesReadySignal : object {
    private static ILogger ourPerformanceLogger;
    public FeaturesReadySignal(Lifetime lifetime, FeaturesStartupMonitor featuresStartupMonitor);
    private static FeaturesReadySignal();
}
[SolutionComponentAttribute("10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Project.FeaturesStartupMonitor : object {
    private ViewableProperty`1<bool> myFullStartupFinished;
    public IViewableProperty`1<bool> FullStartupFinished { get; }
    public FeaturesStartupMonitor(Lifetime lifetime, IShellLocks locks, IProjectModelMonitor projectModelMonitor, IPsiCachesState cachesState);
    public sealed virtual IViewableProperty`1<bool> get_FullStartupFinished();
}
public interface JetBrains.ReSharper.Feature.Services.Project.IFeaturesStartupMonitor {
    [NotNullAttribute]
public IViewableProperty`1<bool> FullStartupFinished { get; }
    public abstract virtual IViewableProperty`1<bool> get_FullStartupFinished();
}
public interface JetBrains.ReSharper.Feature.Services.Project.ITargetPlatformCalculator {
    public abstract virtual TargetPlatform GetTargetPlatform(IProject project, TargetFrameworkId targetFrameworkId);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Project.TargetPlatformCalculator : object {
    [NotNullAttribute]
private AssemblyInfoDatabase myAssemblyInfoDatabase;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private OptimizedPersistentSortedMap`2<VirtualFileSystemPath, TargetPlatformCalculationResult> myMap;
    public TargetPlatformCalculator(Lifetime lifetime, IPersistentIndexManager persistentIndexManager, AssemblyInfoDatabase assemblyInfoDatabase, ILogger logger);
    public sealed virtual TargetPlatform GetTargetPlatform(IProject project, TargetFrameworkId targetFrameworkId);
    private TargetPlatform GetTargetPlatform(VirtualFileSystemPath assembly);
    private TargetPlatform GetTargetPlatformCore(IProject project, TargetFrameworkId targetFrameworkId);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Project.TargetPlatformCalculator/<ReferencedAssemblies>d__7")]
private IEnumerable`1<VirtualFileSystemPath> ReferencedAssemblies(IProject project, TargetFrameworkId targetFrameworkId);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Project.TargetPlatformCalculator/<ReferencedProjects>d__8")]
private IEnumerable`1<VirtualFileSystemPath> ReferencedProjects(IProject project, TargetFrameworkId targetFrameworkId);
}
public class JetBrains.ReSharper.Feature.Services.ProjectHierarchy.AssemblyReferencesModel : TreeDemandModel {
    private ICollection`1<ProjectModelElementEnvoy> myRoots;
    public AssemblyReferencesModel(ProjectModelElementEnvoy root);
    public AssemblyReferencesModel(ICollection`1<ProjectModelElementEnvoy> roots);
    protected virtual bool HasChildren(TreeModelNode modelNode);
    protected virtual IEnumerable GetChildren(TreeModelNode modelNode);
    public virtual void EndUpdate();
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.ProjectHierarchy.DefaultReferencesHierarchyNodeChecker : object {
    public sealed virtual bool CheckNode(TreeModelNode node);
    protected virtual bool CheckDataValue(object dataValue);
}
public interface JetBrains.ReSharper.Feature.Services.ProjectHierarchy.IProjectHierarchyManager {
    public abstract virtual TreeModel CreateModel(ProjectHierarchyViewStyle viewStyle, ProjectModelElementEnvoy projectModelElementEnvoy, bool showAssemblies);
    public abstract virtual bool IsViewStyleAvailable(ProjectHierarchyViewStyle style, IProjectModelElement projectModelElement);
    public abstract virtual ProjectHierarchyViewStyle GetDefaultStyle(ProjectHierarchyViewStyle viewStyle, IModule module);
}
public interface JetBrains.ReSharper.Feature.Services.ProjectHierarchy.IReferencesHierarchyNodeChecker {
    public abstract virtual bool CheckNode(TreeModelNode node);
}
public class JetBrains.ReSharper.Feature.Services.ProjectHierarchy.ProjectHierarchyDescriptor : TreeModelBrowserDescriptorPsi {
    private TreeModelBrowserPresenter myPresenter;
    private ProjectModelElementEnvoy myProjectModelElementEnvoy;
    private TreeModel myModel;
    private static IconId ourRecursionImage;
    private ProjectHierarchyViewStyle myViewStyle;
    private bool myShowAssemblies;
    private IProjectHierarchyManager myManager;
    public ProjectHierarchyViewStyle ViewStyle { get; public set; }
    public bool ShowAssemblies { get; public set; }
    public string ActionBarID { get; }
    public string ContextMenuID { get; }
    public ProjectModelElementEnvoy ProjectModelElementEnvoy { get; public set; }
    private IProjectModelElement ProjectModelElement { get; }
    public TreeModel Model { get; }
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> Presenter { get; }
    public bool QuickSearchSupported { get; }
    public ProjectHierarchyDescriptor(IModule module, IProjectHierarchyManager projectHierarchyManager);
    public ProjectHierarchyDescriptor(IModule module, IProjectHierarchyManager projectHierarchyManager, ProjectHierarchyViewStyle viewStyle);
    private static ProjectHierarchyDescriptor();
    private static Func`3<Lifetime, DataContexts, IDataContext> GetContext(IModule module);
    public ProjectHierarchyViewStyle get_ViewStyle();
    public void set_ViewStyle(ProjectHierarchyViewStyle value);
    public bool get_ShowAssemblies();
    public void set_ShowAssemblies(bool value);
    public virtual string get_ActionBarID();
    public virtual string get_ContextMenuID();
    private void MakeModel();
    public ProjectModelElementEnvoy get_ProjectModelElementEnvoy();
    public void set_ProjectModelElementEnvoy(ProjectModelElementEnvoy value);
    private void PresentAdorements(object value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    private IProjectModelElement get_ProjectModelElement();
    public virtual void Update(UpdateKind updateKind);
    private void UpdateTitle();
    public virtual TreeModel get_Model();
    public virtual StructuredPresenter`2<TreeModelNode, IPresentableItem> get_Presenter();
    public virtual bool Navigate(TreeModelNode node, PopupWindowContextSource windowContext, bool transferFocus, TabOptions options);
    public void RefreshStructure();
    public bool ViewStyleAvailable(ProjectHierarchyViewStyle style);
    public virtual bool get_QuickSearchSupported();
}
public class JetBrains.ReSharper.Feature.Services.ProjectHierarchy.ProjectHierarchyManager : object {
    public sealed virtual TreeModel CreateModel(ProjectHierarchyViewStyle viewStyle, ProjectModelElementEnvoy projectModelElementEnvoy, bool showAssemblies);
    public virtual bool IsViewStyleAvailable(ProjectHierarchyViewStyle style, IProjectModelElement projectModelElement);
    public virtual ProjectHierarchyViewStyle GetDefaultStyle(ProjectHierarchyViewStyle viewStyle, IModule module);
    protected virtual TreeModel MakeUsagesModel(ProjectModelElementEnvoy projectModelElementEnvoy, bool showAssemblies);
    protected virtual TreeModel MakeReferencesModel(ProjectModelElementEnvoy projectModelElementEnvoy, bool showAssemblies);
}
public abstract class JetBrains.ReSharper.Feature.Services.ProjectHierarchy.ProjectHierarchyModelBase : TreeDemandModel {
    private ProjectModelElementEnvoy myProjectModelElementEnvoy;
    public ProjectModelElementEnvoy ProjectModelElementEnvoy { get; }
    protected ProjectHierarchyModelBase(ProjectModelElementEnvoy projectModelElementEnvoy);
    public ProjectModelElementEnvoy get_ProjectModelElementEnvoy();
    protected virtual bool HasChildren(TreeModelNode modelNode);
    public virtual void EndUpdate();
}
[ActionAttribute("ProjectHierarchy.ViewStyle.References", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ReferencedProjectsActionText")]
public class JetBrains.ReSharper.Feature.Services.ProjectHierarchy.ProjectHierarchyReferencesAction : ProjectHierarchyStyleAction {
    protected ProjectHierarchyViewStyle ViewStyle { get; }
    protected virtual ProjectHierarchyViewStyle get_ViewStyle();
}
internal class JetBrains.ReSharper.Feature.Services.ProjectHierarchy.ProjectHierarchyReferencesModel : ProjectHierarchyModelBase {
    private bool myShowAssemblies;
    public ProjectHierarchyReferencesModel(ProjectModelElementEnvoy projectModelElementEnvoy, bool showAssemblies);
    protected virtual IEnumerable GetChildren(TreeModelNode modelNode);
}
public abstract class JetBrains.ReSharper.Feature.Services.ProjectHierarchy.ProjectHierarchyStyleAction : object {
    protected ProjectHierarchyViewStyle ViewStyle { get; }
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    protected abstract virtual ProjectHierarchyViewStyle get_ViewStyle();
    public sealed virtual void Execute(IDataContext context);
}
[ActionAttribute("ProjectHierarchy.ShowAssemblies", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowAssembliesActionText")]
public class JetBrains.ReSharper.Feature.Services.ProjectHierarchy.ProjectHierarchyToggleAssembliesAction : object {
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
}
[ActionAttribute("ProjectHierarchy.ViewStyle.Usages", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ReferencingProjectsActionText")]
public class JetBrains.ReSharper.Feature.Services.ProjectHierarchy.ProjectHierarchyUsagesAction : ProjectHierarchyStyleAction {
    protected ProjectHierarchyViewStyle ViewStyle { get; }
    protected virtual ProjectHierarchyViewStyle get_ViewStyle();
}
internal class JetBrains.ReSharper.Feature.Services.ProjectHierarchy.ProjectHierarchyUsagesModel : ProjectHierarchyModelBase {
    public ProjectHierarchyUsagesModel(ProjectModelElementEnvoy projectModelElementEnvoy);
    protected virtual IEnumerable GetChildren(TreeModelNode modelNode);
}
[SettingsKeyAttribute("JetBrains.Application.UI.Utils.UserInterfaceSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ProjectHierarchyViewSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.ProjectHierarchy.ProjectHierarchyViewSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ViewStyleSettingDescription")]
public ProjectHierarchyViewStyle ViewStyle;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowAssembliesSettingDescription")]
public bool ShowAssemblies;
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.ProjectHierarchy.ProjectHierarchyViewSettingsUpgrader : SettingTablesUpgrader {
    public ProjectHierarchyViewSettingsUpgrader(ProductConfigurations productConfigurations);
    protected virtual void DoUpgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime, SettingsTableBase workspaceSettingsTable, SettingsTableBase globalSettingsTable);
}
public enum JetBrains.ReSharper.Feature.Services.ProjectHierarchy.ProjectHierarchyViewStyle : Enum {
    public int value__;
    public static ProjectHierarchyViewStyle References;
    public static ProjectHierarchyViewStyle Usages;
}
[ActionAttribute("ProjectHierarchy.Update", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "RefreshActionText")]
public class JetBrains.ReSharper.Feature.Services.ProjectHierarchy.UpdateProjectHierarchyAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "ProjectHierarchyUpdateActionText")]
public class JetBrains.ReSharper.Feature.Services.ProjectHierarchy.UpdateTypeHierarchyAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.PropertiesExtender.SolutionWideInspectionsProjectPropertiesExtenderProvider : ProjectPropertiesExtenderProviderBase {
    public SolutionWideInspectionsProjectPropertiesExtenderProvider(Lifetime lifetime, IShellLocks locks, ISettingsStore settingsStore);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.PropertiesExtender.SolutionWideInspectionsProjectPropertiesExtenderProvider/<GetProjectPropertyDescriptors>d__1")]
protected virtual IEnumerable`1<PropertyDescriptor> GetProjectPropertyDescriptors(IProject project);
}
[UsedImplicitlyAttribute]
internal class JetBrains.ReSharper.Feature.Services.PropertiesExtender.SolutionWideInspectionsTypeConverter : StringConverter {
    public static string On;
    public static string InternalsOnly;
    public static string Off;
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.PropertiesExtender.SolutionWideProperty : object {
    [ExtensionAttribute]
public static SolutionWideInspectionsLevel GetSolutionWideProperty(IProject project);
    [ExtensionAttribute]
public static void SetSolutionWideProperty(IProject project, SolutionWideInspectionsLevel value);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Protocol.ProtocolExtensions : object {
    public static Key`1<Solution> ProtocolSolutionKey;
    private static ProtocolExtensions();
    [ExtensionAttribute]
public static bool HasProtocolSolution(ISolution solution);
    [ExtensionAttribute]
[NotNullAttribute]
public static Solution GetProtocolSolution(ISolution solution);
    [ExtensionAttribute]
[NotNullAttribute]
public static RdProjectId GetRdProjectId(ISolution solution);
}
[SolutionInstanceComponentAttribute("18")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Protocol.ProtocolSolutionInitializer : object {
    public ProtocolSolutionInitializer(ISolution solution);
}
public interface JetBrains.ReSharper.Feature.Services.Psi.IUnresolvedTypesChooser {
    public abstract virtual void AddUnresolvedTypes(string typeText, Dictionary`2<string, UnresolvedDeclaredType> result);
    [CanBeNullAttribute]
public abstract virtual IType Apply(string typeText, Dictionary`2<string, UnresolvedDeclaredType> boundTypes, bool allowNotResolved);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Feature.Services.Psi.PsiInSharedFilesUtil : object {
    private static ILogger ourLog;
    private static PsiInSharedFilesUtil();
    public static bool MayHaveCopiesInOtherContexts(ITreeNode treeNode);
    public static ICollection`1<DeclaredElementInstance> AppendDeclaredElementsInstancesFromSharedFiles(ICollection`1<DeclaredElementInstance> declaredElementsInstances);
    public static ICollection`1<IDeclaredElement> AppendDeclaredElementsFromSharedFiles(IEnumerable`1<IDeclaredElement> declaredElements, bool withContexts);
    public static ICollection`1<IDeclaredElement> AppendDeclaredElementsFromSharedFiles(IDeclaredElement declaredElement, bool withContexts);
    [NullableContextAttribute("2")]
public static bool MayHaveCopyInSharedProjectOrSharedFile(IPsiSourceFile sourceFile);
    private static bool MayHaveCopyInSharedProject(IPsiSourceFile sourceFile);
    private static bool MayHaveSharedFileCopyOtherProject(IPsiSourceFile sourceFile);
    private static bool IsInSharedFile(IPsiSourceFile sourceFile);
    private static IReadOnlyCollection`1<IProject> GetOtherContextsProjects(IPsiSourceFile sourceFile);
}
public abstract class JetBrains.ReSharper.Feature.Services.Psi.ReferencedCodeSearchHelperBase : object {
    protected ICollection`1<Pair`2<IReference, IDeclaredElement>> GetConversionOperators(IReference reference, IExpression expression);
}
public abstract class JetBrains.ReSharper.Feature.Services.Psi.TypeNameService : object {
    public abstract virtual Range GetRangeOfTypeNamePartAtPosition(string text, int position);
}
public class JetBrains.ReSharper.Feature.Services.Psi.UnresolvedDeclaredType : object {
    private string myShortName;
    private ITypeElement myResolution;
    private IList`1<ITypeElement> myCandidates;
    private int myArgsNumber;
    private ITreeNode myElement;
    public ICollection`1<ITypeElement> Candidates { get; }
    public ITypeElement Resolution { get; public set; }
    public UnresolvedDeclaredType(string shortName, int typeArgsNumber, ITreeNode context);
    public ICollection`1<ITypeElement> get_Candidates();
    public virtual string ToString();
    public ITypeElement get_Resolution();
    public void set_Resolution(ITypeElement value);
    public void SuggestTypeElements(string shortName, int typeArgsNumber, ITreeNode context);
    private static IEnumerable`1<IDeclaredElement> GetElementsInProject(IPsiModule module, string shortName);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.QuickDoc.CSharp.QuickDocAdditionalDataRulesProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.QuickDoc.CSharp.QuickDocAdditionalDataRulesProvider/<ProvideRules>d__0")]
public sealed virtual IEnumerable`1<IDataRule> ProvideRules();
    private static ICollection`1<DeclaredElementInstance> DeclaredElementInstancesFromVar(IDataContext context);
    [CanBeNullAttribute]
private static ICollection`1<DeclaredElementInstance> DeclaredElementInstancesFromReferences(IDataContext context);
    [CanBeNullAttribute]
private static ICollection`1<DeclaredElementInstance> DeclaredElementInstancesFromDeclaredElements(IDataContext context);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.QuickDoc.CSharp.ZoneMarker : object {
}
public abstract class JetBrains.ReSharper.Feature.Services.QuickDoc.Inheritdoc.ClrXmlDocBaseElementsProviderBase : object {
    public sealed virtual IReadOnlyCollection`1<IDeclaredElement> GetBaseElements(IDeclaredElement element);
    protected virtual bool ExcludeSuperType(IDeclaredType superType, ITypeElement currentType);
    [CanBeNullAttribute]
protected virtual IConstructor GetBaseConstructor(IConstructor constructor);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.QuickDoc.IQuickDockAdditionalDataRulesProvider {
    public abstract virtual IEnumerable`1<IDataRule> ProvideRules();
}
public interface JetBrains.ReSharper.Feature.Services.QuickDoc.IQuickDocPresenter {
    public abstract virtual QuickDocTitleAndText GetHtml(PsiLanguageType presentationLanguage);
    [CanBeNullAttribute]
public abstract virtual string GetId();
    [CanBeNullAttribute]
public abstract virtual IQuickDocPresenter Resolve(string id);
    public abstract virtual void OpenInEditor(string navigationId);
    public abstract virtual void ReadMore(string navigationId);
}
public interface JetBrains.ReSharper.Feature.Services.QuickDoc.IQuickDocProvider {
    public abstract virtual bool CanNavigate(IDataContext context);
    public abstract virtual void Resolve(IDataContext context, Action`2<IQuickDocPresenter, PsiLanguageType> resolved);
}
public interface JetBrains.ReSharper.Feature.Services.QuickDoc.IQuickDocService {
    public abstract virtual bool CanShowQuickDoc(IDataContext context);
    public abstract virtual void ResolveGoto(IDataContext context, Action`2<IQuickDocPresenter, PsiLanguageType> resolved);
}
public interface JetBrains.ReSharper.Feature.Services.QuickDoc.IXmlDocLinkAppender {
    [UsedImplicitlyAttribute]
public abstract virtual void AppendExternalDocumentationLink(Uri url, string shortName, XmlNode externalDocNode);
}
public class JetBrains.ReSharper.Feature.Services.QuickDoc.Presenters.QuickDocConstructorPresenter : QuickDocTypeMemberPresenter {
    [NotNullAttribute]
private DeclaredElementEnvoy`1<ITypeElement> myTypeElementEnvoy;
    private static string CONTAINING_TYPE_NAVIGATION_ID;
    public QuickDocConstructorPresenter(HelpSystem helpSystem, QuickDocTypeMemberProvider quickDocTypeMemberProvider, ITypeMember typeMember, ITypeElement containingTypeElement, IModuleReferenceResolveContext resolveContext, ISubstitution substitution);
    protected virtual RichText GetQuickDocText(PsiLanguageType presentationLanguage);
    [CanBeNullAttribute]
private XmlNode TryGetTypeDocumentation(ITypeElement typeElement);
    public virtual void OpenInEditor(string navigationId);
    public virtual void ReadMore(string navigationId);
}
public class JetBrains.ReSharper.Feature.Services.QuickDoc.Presenters.QuickDocDescriptionPresenter : object {
    private NavigationManager myNavigationManager;
    private ITheming myTheming;
    private IDeclaredElementDescriptionPresenter myDescriptionPresenter;
    [NotNullAttribute]
private DeclaredElementEnvoy`1<IDeclaredElement> myEnvoy;
    public QuickDocDescriptionPresenter(NavigationManager navigationManager, ITheming theming, IDeclaredElement element, IDeclaredElementDescriptionPresenter presenter);
    public sealed virtual QuickDocTitleAndText GetHtml(PsiLanguageType presentationLanguage);
    public sealed virtual string GetId();
    public sealed virtual IQuickDocPresenter Resolve(string id);
    public sealed virtual void OpenInEditor(string navigationId);
    public sealed virtual void ReadMore(string navigationId);
}
public class JetBrains.ReSharper.Feature.Services.QuickDoc.Presenters.QuickDocEmptyPresenter : object {
    public sealed virtual QuickDocTitleAndText GetHtml(PsiLanguageType presentationLanguage);
    public sealed virtual string GetId();
    public sealed virtual IQuickDocPresenter Resolve(string id);
    public sealed virtual void OpenInEditor(string navigationId);
    public sealed virtual void ReadMore(string navigationId);
}
public class JetBrains.ReSharper.Feature.Services.QuickDoc.Presenters.QuickDocLocalSymbolPresenter : object {
    private NavigationManager myNavigationManager;
    private QuickDocTypeMemberProvider myQuickDocTypeMemberProvider;
    [NotNullAttribute]
private DeclaredElementEnvoy`1<IClrDeclaredElement> myEnvoy;
    private ITheming myTheming;
    public QuickDocLocalSymbolPresenter(NavigationManager navigationManager, ITheming theming, QuickDocTypeMemberProvider quickDocTypeMemberProvider, IClrDeclaredElement element);
    public sealed virtual IQuickDocPresenter Resolve(string id);
    public sealed virtual QuickDocTitleAndText GetHtml(PsiLanguageType presentationLanguage);
    private XmlNode BuildEmptyNode(IDeclaredElement element);
    public sealed virtual string GetId();
    public sealed virtual void OpenInEditor(string navigationId);
    public sealed virtual void ReadMore(string navigationId);
}
public class JetBrains.ReSharper.Feature.Services.QuickDoc.Presenters.QuickDocTypeMemberPresenter : object {
    [NotNullAttribute]
protected HelpSystem myHelpSystem;
    [NotNullAttribute]
private QuickDocTypeMemberProvider myQuickDocTypeMemberProvider;
    [NotNullAttribute]
protected DeclaredElementEnvoy`1<ITypeMember> myEnvoy;
    [NotNullAttribute]
protected IModuleReferenceResolveContext myModuleReferenceResolveContext;
    [CompilerGeneratedAttribute]
private ElementLinkCollector <LinkCollector>k__BackingField;
    protected DeclaredElementPresenterStyle MSDN_STYLE;
    private static DeclaredElementPresenterStyle ourQualifiedTypeMemberNamePresenter;
    [NotNullAttribute]
private ElementLinkCollector LinkCollector { get; }
    public QuickDocTypeMemberPresenter(HelpSystem helpSystem, QuickDocTypeMemberProvider quickDocTypeMemberProvider, ITypeMember typeMember, IModuleReferenceResolveContext resolveContext, ISubstitution substitution);
    private static QuickDocTypeMemberPresenter();
    [CompilerGeneratedAttribute]
private ElementLinkCollector get_LinkCollector();
    public sealed virtual IQuickDocPresenter Resolve(string id);
    public sealed virtual QuickDocTitleAndText GetHtml(PsiLanguageType presentationLanguage);
    protected virtual RichText GetQuickDocText(PsiLanguageType presentationLanguage);
    public sealed virtual string GetId();
    public virtual void OpenInEditor(string navigationId);
    public virtual void ReadMore(string navigationId);
    private IPsiModule GetModule();
}
[QuickDocProviderAttribute("1")]
public class JetBrains.ReSharper.Feature.Services.QuickDoc.Providers.QuickDocDescriptionProvider : object {
    private ISolution mySolution;
    private NavigationManager myNavigationManager;
    private ITheming myTheming;
    private IDeclaredElementDescriptionPresenter myDescriptionPresenter;
    private DocumentManager myDocumentManager;
    public QuickDocDescriptionProvider(ISolution solution, NavigationManager navigationManager, ITheming theming, IDeclaredElementDescriptionPresenter descriptionPresenter, DocumentManager documentManager);
    public sealed virtual bool CanNavigate(IDataContext context);
    public sealed virtual void Resolve(IDataContext context, Action`2<IQuickDocPresenter, PsiLanguageType> resolved);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType14`2<IDeclaredElement, RichTextBlock> <Resolve>b__7_0(IDeclaredElement element);
    [CompilerGeneratedAttribute]
private QuickDocDescriptionPresenter <Resolve>b__7_2(<>f__AnonymousType14`2<IDeclaredElement, RichTextBlock> <>h__TransparentIdentifier0);
}
[QuickDocProviderAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.QuickDoc.Providers.QuickDocLocalSymbolProvider : object {
    private ISolution mySolution;
    private NavigationManager myNavigationManager;
    private DocumentManager myDocumentManager;
    private QuickDocTypeMemberProvider myQuickDocTypeMemberProvider;
    private ITheming myTheming;
    public QuickDocLocalSymbolProvider(ISolution solution, ITheming theming, NavigationManager navigationManager, DocumentManager documentManager, QuickDocTypeMemberProvider quickDocTypeMemberProvider);
    public sealed virtual bool CanNavigate(IDataContext context);
    public sealed virtual void Resolve(IDataContext context, Action`2<IQuickDocPresenter, PsiLanguageType> resolved);
}
[QuickDocProviderAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.QuickDoc.Providers.QuickDocTypeMemberProvider : object {
    private ISolution mySolution;
    private DocumentManager myDocumentManager;
    private HelpSystem myHelpSystem;
    public QuickDocTypeMemberProvider(ISolution solution, ITheming theming, NavigationManager navigationManager, DocumentManager documentManager, HelpSystem helpSystem, ILogger logger);
    public sealed virtual bool CanNavigate(IDataContext context);
    public sealed virtual void Resolve(IDataContext context, Action`2<IQuickDocPresenter, PsiLanguageType> resolved);
    public void Resolve(IDataContext context, Action`2<IQuickDocPresenter, PsiLanguageType> resolved, DeclaredElementInstance memberElementInstance, DeclaredElementInstance typeElementInstance);
    [NotNullAttribute]
private static ISubstitution RemoveIdentities(ISubstitution substitution);
    [CanBeNullAttribute]
public IQuickDocPresenter Resolve(string id, IPsiModule module);
    [CanBeNullAttribute]
public IQuickDocPresenter Resolve(IDeclaredElement element);
}
public class JetBrains.ReSharper.Feature.Services.QuickDoc.Providers.QuickDocXmlDocBearerProvider : object {
    [NotNullAttribute]
private QuickDocTypeMemberProvider myTypeMemberProvider;
    public QuickDocXmlDocBearerProvider(QuickDocTypeMemberProvider typeMemberProvider);
    public sealed virtual bool CanNavigate(IDataContext context);
    public sealed virtual void Resolve(IDataContext context, Action`2<IQuickDocPresenter, PsiLanguageType> resolved);
}
[QuickDocProviderAttribute("-500")]
public class JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocCandidatesProvider : object {
    private ISolution mySolution;
    private DocumentManager myDocumentManager;
    private HelpSystem myHelpSystem;
    private CandidatesNavigator myCandidatesNavigator;
    private QuickDocTypeMemberProvider myQuickDocTypeMemberProvider;
    public QuickDocCandidatesProvider(ISolution solution, ITheming theming, DocumentManager documentManager, NavigationManager navigationManager, HelpSystem helpSystem, CandidatesNavigator candidatesNavigator, QuickDocTypeMemberProvider quickDocTypeMemberProvider);
    public virtual bool CanNavigate(IDataContext context);
    public sealed virtual void Resolve(IDataContext context, Action`2<IQuickDocPresenter, PsiLanguageType> resolved);
}
public static class JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocDataConstants : object {
    [NotNullAttribute]
public static DataConstant`1<ICollection`1<DeclaredElementInstance>> DECLARED_ELEMENT_INSTANCES;
    private static QuickDocDataConstants();
}
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.QuickDoc.IQuickDocProvider")]
[MeansImplicitUseAttribute]
[AttributeUsageAttribute("4")]
[ComponentInstantiationAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocProviderAttribute : SolutionComponentAttribute {
    protected static Instantiation QuickDocProviderDefaultInstantiation;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public int Priority { get; }
    public QuickDocProviderAttribute(int priority, Instantiation instantiation);
    public QuickDocProviderAttribute(int priority);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Priority();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocService : object {
    private ISolution mySolution;
    private IEnumerable`1<IQuickDocProvider> myProviders;
    protected DataContexts DataContexts;
    private Lifetime myLifetime;
    private IEnumerable`1<IQuickDockAdditionalDataRulesProvider> myDataRulesProviders;
    public QuickDocService(Lifetime lifetime, ISolution solution, DataContexts dataContexts, IOrderedImmutableList`2<IQuickDocProvider, QuickDocProviderAttribute> providers, IEnumerable`1<IQuickDockAdditionalDataRulesProvider> dataRulesProviders);
    public sealed virtual bool CanShowQuickDoc(IDataContext context);
    public sealed virtual void ResolveGoto(IDataContext context, Action`2<IQuickDocPresenter, PsiLanguageType> resolved);
    protected virtual IDataContext ExtendDataContext(Lifetime lifetime, IDataContext context);
}
[SettingsKeyAttribute("JetBrains.Application.UI.Utils.UserInterfaceSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "QuickDocViewSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WidthSettingDescription")]
public double Width;
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocTitleAndText : ValueType {
    public static QuickDocTitleAndText Empty;
    [CanBeNullAttribute]
public RichText Text;
    [CanBeNullAttribute]
public RichText Title;
    public QuickDocTitleAndText(RichText text, RichText title);
    private static QuickDocTitleAndText();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.QuickDoc.Render.CommonXmlDocHeaderPresenter : object {
    private PsiLanguageType myLanguage;
    public CommonXmlDocHeaderPresenter(PsiLanguageType language);
    public virtual void Present(RichText header, DeclaredElementInstance declaredElementInstance, IPsiModule module, CrefManager crefManager, DeclaredElementPresenterTextStyles styles, ElementLinkCollector linkCollector, ITreeNode context);
    public virtual void Present(StringBuilder header, IDeclaredElement declaredElement, IPsiModule module, CrefManager crefManager);
    public sealed virtual void Present(RichText header, IDeclaredElement declaredElement, IPsiModule module, CrefManager crefManager, DeclaredElementPresenterTextStyles styles);
}
public abstract class JetBrains.ReSharper.Feature.Services.QuickDoc.Render.CrefManager : object {
    public abstract virtual RichText Process(string cref, RichText linkText, bool addHyperlink, IPsiModule module, PsiLanguageType languageType);
    [CanBeNullAttribute]
public virtual RichText Create(IDeclaredElement element);
}
public class JetBrains.ReSharper.Feature.Services.QuickDoc.Render.ElementLinkCollector : object {
    [CompilerGeneratedAttribute]
private IList`1<DeclaredElementEnvoy`1<IDeclaredElement>> <Elements>k__BackingField;
    private IList`1<DeclaredElementEnvoy`1<IDeclaredElement>> Elements { get; }
    [CompilerGeneratedAttribute]
private IList`1<DeclaredElementEnvoy`1<IDeclaredElement>> get_Elements();
    public int CreateLinkId(IDeclaredElement element, ISubstitution substitution);
    [CanBeNullAttribute]
public DeclaredElementEnvoy`1<IDeclaredElement> GetEnvoyById(int id);
}
public abstract class JetBrains.ReSharper.Feature.Services.QuickDoc.Render.HtmlAttributesPresenterBase : object {
    private PsiLanguageType myLanguage;
    private IHtmlEnumPresenter myEnumPresenter;
    protected HtmlAttributesPresenterBase(PsiLanguageType language, IHtmlEnumPresenter enumPresenter);
    public sealed virtual void PresentForTypeMember(RichText output, HTMLBuilder builder, IAttributesSet attributesOwner, string target);
    public sealed virtual void PresentForTypeMember(RichText output, HTMLBuilder builder, IAttributesSet attributesOwner, DeclaredElementPresenterTextStyles styles, string target);
    [ObsoleteAttribute("Please, use overload with DeclaredElementPresenterStyle", "True")]
public sealed virtual void PresentForParameter(RichText output, HTMLBuilder builder, IAttributesSet attributesOwner);
    public sealed virtual void PresentForParameter(RichText output, HTMLBuilder builder, IAttributesSet attributesOwner, DeclaredElementPresenterTextStyles style);
    [NotNullAttribute]
protected virtual IList`1<IAttributeInstance> GetAttributes(IAttributesSet attributesOwner);
    private void FormatAttributes(RichText header, HTMLBuilder builder, IAttributesSet attributesOwner, bool shortForm, DeclaredElementPresenterTextStyles styles, string target);
    private static void ApplyAttributeHighlighting(RichText shortName, DeclaredElementPresenterTextStyles styles);
    protected virtual void PresentTarget(RichText header, string target);
    private void FormatAttributeValue(RichText builder, AttributeValue value, TypePresentationStyle typePresentationStyle, bool isParamArray);
    [NotNullAttribute]
private static RichText ShortAttributeName(RichText attributeName);
    protected abstract virtual string GetNew();
    protected abstract virtual string GetTypeOf();
    protected abstract virtual string GetNull();
    protected abstract virtual string GetAttributePropertyAssignChar();
    protected abstract virtual string GetAttributeOpenChar();
    protected abstract virtual string GetAttributeCloseChar();
    protected abstract virtual IHtmlTypePresenter GetTypePresenter();
    protected abstract virtual string GetNewLine();
    protected abstract virtual string GetArrayBrackets();
}
public abstract class JetBrains.ReSharper.Feature.Services.QuickDoc.Render.HtmlEnumPresenterBase : object {
    protected PsiLanguageType myLanguage;
    protected HtmlEnumPresenterBase(PsiLanguageType language);
    public sealed virtual RichText Present(IField element, TypePresentationStyle typePresentationStyle);
    protected abstract virtual TextStyle SelectTextStyle(ITreeNode node, DeclaredElementPresenterTextStyles styles);
    public sealed virtual RichText Present(ConstantValue value, TypePresentationStyle typePresentationStyle);
    protected virtual RichText PresentEnum(ConstantValue constantValue, bool isFieldDeclaration, TypePresentationStyle typePresentationStyle);
    protected abstract virtual ITreeNode ExtractTreeNode(IField element);
    protected abstract virtual string TryGetXmlDocId(ITreeNode child);
    protected RichText MemberHyperlink(IDeclaredElement member, DeclaredElementPresenterTextStyles styles);
}
public interface JetBrains.ReSharper.Feature.Services.QuickDoc.Render.IHtmlAttributesPresenter {
    public abstract virtual void PresentForTypeMember(RichText output, HTMLBuilder builder, IAttributesSet attributesOwner, DeclaredElementPresenterTextStyles styles, string target);
    public abstract virtual void PresentForParameter(RichText output, HTMLBuilder builder, IAttributesSet attributesOwner, DeclaredElementPresenterTextStyles style);
    [ObsoleteAttribute("Please, use the overload with DeclaredElementPresenterTextStyles", "True")]
public abstract virtual void PresentForTypeMember(RichText output, HTMLBuilder builder, IAttributesSet attributesOwner, string target);
    [ObsoleteAttribute("Please, use overload with DeclaredElementPresenterStyle", "True")]
public abstract virtual void PresentForParameter(RichText output, HTMLBuilder builder, IAttributesSet attributesOwner);
}
public interface JetBrains.ReSharper.Feature.Services.QuickDoc.Render.IHtmlEnumPresenter {
    [CanBeNullAttribute]
public abstract virtual RichText Present(IField element, TypePresentationStyle typePresentationStyle);
    [CanBeNullAttribute]
public abstract virtual RichText Present(ConstantValue value, TypePresentationStyle typePresentationStyle);
}
public interface JetBrains.ReSharper.Feature.Services.QuickDoc.Render.IHtmlTypePresenter {
    public abstract virtual void PresentName(RichText builder, IType type, TypePresentationStyle typePresentationStyle, ElementLinkCollector linkCollector);
}
public interface JetBrains.ReSharper.Feature.Services.QuickDoc.Render.IXmlDocHeaderPresenter {
    public abstract virtual void Present(RichText header, DeclaredElementInstance declaredElementInstance, IPsiModule module, CrefManager crefManager, DeclaredElementPresenterTextStyles styles, ElementLinkCollector linkCollector, ITreeNode context);
    [ObsoleteAttribute("Please, use the overload with DeclaredElementInstance", "True")]
public abstract virtual void Present(RichText header, IDeclaredElement declaredElement, IPsiModule module, CrefManager crefManager, DeclaredElementPresenterTextStyles styles);
    [ObsoleteAttribute("Please, use the overload with rich text. The presentation might contain syntax highlighting, which is lost in this overload.", "True")]
public abstract virtual void Present(StringBuilder header, IDeclaredElement declaredElement, IPsiModule module, CrefManager crefManager);
}
public interface JetBrains.ReSharper.Feature.Services.QuickDoc.Render.IXmlDocHtmlRenderer {
    public abstract virtual void AddHyperlinkAttributes(string uri, Dictionary`2<string, object> attributes);
    public abstract virtual void BuildFullBody(HTMLBuilder builder, RichText output, Action`2<HTMLBuilder, RichText> appendHtmlBody, NavigationStyle navigationStyle, string navigationId);
    public abstract virtual void BuildHead(RichText builder);
    public abstract virtual void OpenAttributesRegion(RichText header, string regionTitle);
    public abstract virtual void OpenCollapsedRegion(RichText header, string regionTitle, string regionName);
    public abstract virtual void CloseCollapsedRegion(RichText output);
    public abstract virtual void OpenCut(RichText output, string regionId);
    public abstract virtual void CloseCut(RichText output);
    public abstract virtual void OpenOutline(RichText output);
    public abstract virtual void OpenDefinition(RichText output);
    public abstract virtual void CloseDefinition(RichText output, bool hasComment);
    public abstract virtual void OpenContainer(RichText output);
    public abstract virtual void CloseContainer(RichText output);
    public abstract virtual void OpenSignature(RichText output);
    public abstract virtual void CloseSignature(RichText output);
    public abstract virtual void OpenSections(RichText output);
    public abstract virtual void CloseSections(RichText output);
    public abstract virtual void CloseAttributesRegion(RichText output);
    public abstract virtual bool IsParameterListToLong(int length);
}
public interface JetBrains.ReSharper.Feature.Services.QuickDoc.Render.IXmlDocLocator {
    public abstract virtual IDocCommentBlock FindCommentNode(IFile file, DocumentRange range);
}
public interface JetBrains.ReSharper.Feature.Services.QuickDoc.Render.IXmlDocSection {
    public RichText Body { get; }
    public bool Collapsed { get; }
    public string Name { get; }
    public string Tag { get; }
    public bool IsEmpty { get; }
    public abstract virtual RichText get_Body();
    public abstract virtual bool get_Collapsed();
    public abstract virtual string get_Name();
    public abstract virtual string get_Tag();
    public abstract virtual bool get_IsEmpty();
    public abstract virtual RichText GetText(HTMLBuilder htmlBuilder);
}
public interface JetBrains.ReSharper.Feature.Services.QuickDoc.Render.IXmlDocSectionWithItems {
    public abstract virtual void AddItem(RichText name, RichText description, string direction);
}
public class JetBrains.ReSharper.Feature.Services.QuickDoc.Render.ParamSection : TableSection {
    private List`1<Item> myItems;
    public bool IsEmpty { get; }
    public ParamSection(string tag, string name);
    public virtual bool get_IsEmpty();
    protected virtual RichText GetTextInternal();
    public sealed virtual void AddItem(RichText name, RichText description, string direction);
}
public class JetBrains.ReSharper.Feature.Services.QuickDoc.Render.Section : object {
    [CompilerGeneratedAttribute]
private RichText <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Collapsed>k__BackingField;
    public RichText Body { get; }
    public string Name { get; }
    public string Tag { get; }
    public bool Collapsed { get; }
    public bool IsEmpty { get; }
    public Section(string tag, string name, bool collapsed);
    [CompilerGeneratedAttribute]
public sealed virtual RichText get_Body();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Tag();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Collapsed();
    public virtual bool get_IsEmpty();
    public virtual RichText GetText(HTMLBuilder htmlBuilder);
    protected virtual RichText GetTextInternal();
}
public class JetBrains.ReSharper.Feature.Services.QuickDoc.Render.TableSection : Section {
    public TableSection(string tag, string name, bool collapsed);
    protected virtual RichText GetTextInternal();
}
public static class JetBrains.ReSharper.Feature.Services.QuickDoc.Render.Tags : object {
    public static string Attention;
    public static string Authors;
    public static string Param;
    public static string Retval;
    public static string TypeParam;
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.QuickDoc.Render.WebBrowserControlHtmlRenderer : object {
    public static string GOTO_LINK;
    public static string READMORE_LINK;
    public virtual void AddHyperlinkAttributes(string uri, Dictionary`2<string, object> attributes);
    public virtual void BuildHead(RichText builder);
    public virtual void OpenAttributesRegion(RichText header, string regionTitle);
    public virtual void OpenCollapsedRegion(RichText header, string regionTitle, string regionName);
    public virtual void CloseCollapsedRegion(RichText header);
    public virtual void CloseCut(RichText header);
    public virtual void OpenOutline(RichText header);
    public virtual void OpenDefinition(RichText output);
    public virtual void CloseDefinition(RichText header, bool hasComment);
    public virtual void OpenContainer(RichText header);
    public virtual void CloseContainer(RichText header);
    public virtual void OpenSignature(RichText header);
    public virtual void CloseSignature(RichText header);
    public virtual void OpenSections(RichText header);
    public virtual void CloseSections(RichText output);
    public virtual void CloseAttributesRegion(RichText header);
    public virtual bool IsParameterListToLong(int length);
    public virtual void OpenCut(RichText header, string regionId);
    public virtual void BuildFullBody(HTMLBuilder builder, RichText output, Action`2<HTMLBuilder, RichText> appendHtmlBody, NavigationStyle navigationStyle, string navigationId);
    [NotNullAttribute]
public static RichText Scripts(RichText builder);
    [NotNullAttribute]
public static RichText Navigation(RichText builder, NavigationStyle navigationStyle, string navigationId);
}
[ShellComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.QuickDoc.Render.XmlDocHtmlPresenter : object {
    [CanBeNullAttribute]
protected ITheming Theming;
    [NotNullAttribute]
protected XmlDocSectionFactory Factory;
    private static string ourXmlIdHyperlinkProtoSchemePrefix;
    public bool ShouldAddUnboundedTextToSummary { get; }
    public XmlDocHtmlPresenter(ITheming theming, XmlDocSectionFactory factory);
    private static XmlDocHtmlPresenter();
    public bool get_ShouldAddUnboundedTextToSummary();
    [ObsoleteAttribute("Use the overload with element instance instead", "True")]
public virtual RichText Run(XmlNode node, IPsiModule module, IDeclaredElement declaredElement, PsiLanguageType languageType, NavigationStyle navigationStyle, CrefManager crefManager);
    public virtual RichText Run(XmlNode node, IPsiModule module, DeclaredElementInstance declaredElementInstance, PsiLanguageType languageType, NavigationStyle navigationStyle, CrefManager crefManager, string navigationId, ElementLinkCollector linkCollector, ITreeNode context);
    public virtual string RunWithoutTheming(XmlNode node, IPsiModule module, IDeclaredElement declaredElement, PsiLanguageType languageType, NavigationStyle navigationStyle, CrefManager crefManager);
    [NotNullAttribute]
public RichText AppendBody(HTMLBuilder builder, RichText output, XmlNode node, IPsiModule module, IDeclaredElement declaredElement, PsiLanguageType languageType, CrefManager crefManager);
    public static string UriToXmlDocId(Uri uri);
    public static string UriToXmlDocId(string hyperlink);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.QuickDoc.Render.XmlDocHtmlUtil : object {
    public static string XmlIdHyperlinkProtoScheme;
    public static string XmlIdHyperlinkProtoSchemeWithDelimiter;
    public static CrefManager CrefManager;
    public static string START_HEAD_MARKER;
    public static string END_HEAD_MARKER;
    private static XmlDocHtmlUtil();
    public static RichText Hyperlink(RichText name, string xmlDocId, string tooltip);
    public static RichText Hyperlink(RichText name, ITypeElement element, ElementLinkCollector linkCollector, string tooltip);
    public static RichText Hyperlink(RichText name, ITypeElement element, ElementLinkCollector linkCollector, object attributes);
    [NotNullAttribute]
public static RichText Hyperlink(RichText name, string xmlDocId, object attributes);
    public static RichText GenerateHyperlink(RichText name, string uri, object attributes);
    [ExtensionAttribute]
public static RichText OpenSections(RichText header);
    [ExtensionAttribute]
public static RichText CloseSections(RichText header);
    public static bool IsStringLengthToBigToQuickDoc(int length);
    public static RichText BuildHtml(Action`2<HTMLBuilder, RichText> appendHtmlBody, NavigationStyle navigationStyle, ITheming theming, string navigationId);
    [ExtensionAttribute]
public static RichText FullHtml(RichText builder, Action`1<RichText> headBuilder, Action`1<RichText> bodyBuilder, ITheming theming);
    [ExtensionAttribute]
[PureAttribute]
public static RichText ToColoredHtmlSpan(RichText builder);
    public static int CalculateActualLastStringLength(string signature);
    [CompilerGeneratedAttribute]
internal static bool <CalculateActualLastStringLength>g__HasSubstring|19_0(string haystack, int position, string needle);
}
internal enum JetBrains.ReSharper.Feature.Services.QuickDoc.Render.XmlDocListType : Enum {
    public int value__;
    public static XmlDocListType TABLE;
    public static XmlDocListType BULLET;
    public static XmlDocListType NUMBER;
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.QuickDoc.Render.XmlDocSectionFactory : object {
    private List`1<Pair`2<string, Pair`2<string, bool>>> mySections;
    public sealed virtual int Compare(string tag1, string tag2);
    private int IndexOf(string tag);
    public IXmlDocSection Create(string tag, bool mayBeCollapsed);
    [CanBeNullAttribute]
protected virtual IXmlDocSection CreateSection(string tag, string name, bool collapsed);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.QuickDoc.XmlDocImagesProvider : object {
    private Lazy`1<XmlDocImages> myImages;
    public VirtualFileSystemPath InlineCollapsPath { get; }
    public VirtualFileSystemPath InlineExpandPath { get; }
    public string InlineCollapsPathJS { get; }
    public string InlineExpandPathJS { get; }
    public XmlDocImagesProvider(Lifetime lifetime, IThemedIconManager iconman);
    public virtual VirtualFileSystemPath get_InlineCollapsPath();
    public virtual VirtualFileSystemPath get_InlineExpandPath();
    public virtual string get_InlineCollapsPathJS();
    public virtual string get_InlineExpandPathJS();
    public static XmlDocImagesProvider GetInstance();
}
public abstract class JetBrains.ReSharper.Feature.Services.QuickDoc.XmlDocLink.CompiledElementXmlDocLinkAppender : object {
    private DeclaredElementDescriptionPresenter myPresenter;
    private List`1<CompiledElementOnlineHelpProvider> myOnlineHelpProviders;
    private static ILogger ourLogger;
    public CompiledElementXmlDocLinkAppender(DeclaredElementDescriptionPresenter presenter);
    private static CompiledElementXmlDocLinkAppender();
    public void AppendExternalDocumentationLink(CompiledElementBase element, XmlNode externalDocNode);
    public sealed virtual void AppendExternalDocumentationLink(Uri url, string shortName, XmlNode externalDocNode);
    private ExternalDocLink GetBestExternalDocumentationLink(CompiledElementBase element, XmlNode externalDocNode);
}
public class JetBrains.ReSharper.Feature.Services.QuickDoc.XmlDocLink.ExternalDocLink : object {
    [CompilerGeneratedAttribute]
private Uri <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    public Uri Url { get; }
    public string ShortName { get; }
    public ExternalDocLink(Uri url, string shortName);
    [CompilerGeneratedAttribute]
public Uri get_Url();
    [CompilerGeneratedAttribute]
public string get_ShortName();
}
[ActionAttribute("Dump Highlightings and Quickfixes Summary")]
public class JetBrains.ReSharper.Feature.Services.QuickFixes.Internal.DumpHighlightingsInfoAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.QuickFixes.Internal.ZoneMarker : object {
}
public interface JetBrains.ReSharper.Feature.Services.QuickFixes.IQuickFix {
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public abstract virtual bool IsAvailable(IUserDataHolder cache);
}
public interface JetBrains.ReSharper.Feature.Services.QuickFixes.IQuickFixes {
    public abstract virtual bool CouldHavePopupQuickFix(IHighlighting highlighting);
    [NotNullAttribute]
public abstract virtual ICollection`1<IQuickFix> CreateAllQuickFixes(IHighlighting highlighting);
    [NotNullAttribute]
public abstract virtual ICollection`1<IQuickFix> CreateQuickFixes(IHighlighting highlighting, IReadOnlyCollection`1<Type> quickFixTypes);
    [NotNullAttribute]
public abstract virtual ICollection`1<IQuickFix> CreateAvailableQuickFixes(IHighlighting highlighting, IUserDataHolder cache);
    [NotNullAttribute]
public abstract virtual Type[] GetHighlightingTypesForQuickFix(Type quickFixType);
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IEnumerable`1<IntentionAction> CreateCustomWarningActions(IHighlighting highlighting, ISolution solution, DocumentRange highlightingRange);
    [CanBeNullAttribute]
public abstract virtual IQuickFix InstantiateQuickfix(IHighlighting highlighting, Type quickFixType, int quickFixIndex);
    public abstract virtual string GetWarningTitle(IHighlighting highlighting);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IntentionAction> CreateHighlightingGroupActions(IReadOnlyList`1<IHighlighting> highlightings, IDocument document, ISolution solution);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.QuickFixes.IQuickFixesProvider {
    public IEnumerable`1<Type> Dependencies { get; }
    public abstract virtual IEnumerable`1<Type> get_Dependencies();
    public abstract virtual void Register(IQuickFixesRegistrar qf);
}
public interface JetBrains.ReSharper.Feature.Services.QuickFixes.IQuickFixesRegistrar {
    public abstract virtual void RegisterQuickFix(Lifetime lifetime, Type highlightingType, Type quickFixType);
    public abstract virtual void RegisterQuickFix(Lifetime lifetime, Func`2<THighlighting, IQuickFix> creator, Type quickFixType);
}
public abstract class JetBrains.ReSharper.Feature.Services.QuickFixes.ModernQuickFixBase : ModernBulbActionBase {
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public abstract virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual BulbActionCommandSequence GetCommandSequence();
    [ConditionalAttribute("JET_MODE_ASSERT")]
private void AssertIsAvailable();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.QuickFixes.ModernScopedNonIncrementalQuickFixBase : ModernScopedQuickFixWithCustomExecutor {
    public bool IsReanalysisRequired { get; }
    public ITreeNode ReanalysisDependencyRoot { get; }
    public ITreeNode ContextNode { get; }
    public virtual bool get_IsReanalysisRequired();
    public virtual ITreeNode get_ReanalysisDependencyRoot();
    public sealed virtual ITreeNode get_ContextNode();
    [NullableContextAttribute("1")]
protected sealed virtual ScopedActionExecutor GetScopedQuickFixExecutor(ISolution solution, IScopedFixingStrategy fixingStrategy, PsiLanguageType languageType);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.QuickFixes.ModernScopedQuickFixBase : ModernScopedQuickFixWithCustomExecutor {
    public bool IsReanalysisRequired { get; }
    public ITreeNode ReanalysisDependencyRoot { get; }
    public ITreeNode ContextNode { get; }
    public virtual bool get_IsReanalysisRequired();
    public virtual ITreeNode get_ReanalysisDependencyRoot();
    public sealed virtual ITreeNode get_ContextNode();
    [NullableContextAttribute("1")]
protected sealed virtual ScopedActionExecutor GetScopedQuickFixExecutor(ISolution solution, IScopedFixingStrategy fixingStrategy, PsiLanguageType languageType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.QuickFixes.ModernScopedQuickFixWithCustomExecutor : ModernScopedBulbAction {
    public static Key`1<Scope> ScopeKey;
    public FileCollectorInfo FileCollectorInfo { get; }
    private static ModernScopedQuickFixWithCustomExecutor();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [NullableContextAttribute("2")]
[PureAttribute]
protected abstract virtual ITreeNode TryGetContextTreeNode();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    private sealed virtual override IBulbActionCommand JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Actions.IModernManualScopedAction.ExecuteAction(ISolution solution, Scope scope, IHighlighting sourceHighlighting, IProgressIndicator progress);
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.Intentions.Scoped.QuickFixes.IManualScopedQuickFix.CanHandleHighlighting(ISolution solution, IHighlighting highlighting);
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
    protected abstract virtual ScopedActionExecutor GetScopedQuickFixExecutor(ISolution solution, IScopedFixingStrategy fixingStrategy, PsiLanguageType languageType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.QuickFixes.IQuickFix")]
public class JetBrains.ReSharper.Feature.Services.QuickFixes.MutuallyExclusiveActionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ActionType>k__BackingField;
    public Type ActionType { get; }
    public MutuallyExclusiveActionAttribute(Type actionType);
    [CompilerGeneratedAttribute]
public Type get_ActionType();
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.QuickFixes.IQuickFix")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.Feature.Services.QuickFixes.QuickFixAttribute : PartAttribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.QuickFixes.QuickFixBase : BulbActionBase {
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public abstract virtual bool IsAvailable(IUserDataHolder cache);
    public virtual void Execute(ISolution solution, ITextControl textControl);
    [ConditionalAttribute("JET_MODE_ASSERT")]
private void AssertIsAvailable();
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Feature.Services.QuickFixes.QuickFixInfo : ValueType {
    [NotNullAttribute]
public Func`2<IHighlighting, IQuickFix> Factory;
    [NotNullAttribute]
public Type QuickFixType;
    public bool IsPopup;
    private static Type ourIPopupQuickFixType;
    public QuickFixInfo(Func`2<IHighlighting, IQuickFix> factory, Type quickFixType);
    private static QuickFixInfo();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.QuickFixes.QuickFixTable : object {
    private static ILogger ourLog;
    private static Type ourIHighlightingType;
    [NotNullAttribute]
protected IProjectFileTypeServices myProjectFileTypeServices;
    [NotNullAttribute]
protected HighlightingSettingsManager myHighlightingSettingsManager;
    [NotNullAttribute]
private OneToListMap`2<Type, QuickFixInfo> myHighlightingToQuickFixTable;
    [NotNullAttribute]
private OneToListMap`2<Type, Type> myQuickFixToHighlightingTable;
    [NotNullAttribute]
private OneToListMap`2<Type, Type> myHighlightingToBaseHighlightingTable;
    [NotNullAttribute]
private Task myRegister;
    public QuickFixTable(Lifetime lifetime, IThreading threading, ShellPartCatalogSet catalogSet, IProjectFileTypeServices projectFileTypeServices, HighlightingSettingsManager highlightingSettingsManager, IParallelImmutableList`1<IQuickFixesProvider> quickFixesProviders);
    private static QuickFixTable();
    public sealed virtual ICollection`1<IQuickFix> CreateAllQuickFixes(IHighlighting highlighting);
    public sealed virtual ICollection`1<IQuickFix> CreateQuickFixes(IHighlighting highlighting, IReadOnlyCollection`1<Type> quickFixTypes);
    public sealed virtual Type[] GetHighlightingTypesForQuickFix(Type quickFixType);
    public sealed virtual ICollection`1<IQuickFix> CreateAvailableQuickFixes(IHighlighting highlighting, IUserDataHolder cache);
    public sealed virtual bool CouldHavePopupQuickFix(IHighlighting highlighting);
    public sealed virtual IEnumerable`1<IntentionAction> CreateCustomWarningActions(IHighlighting highlighting, ISolution solution, DocumentRange highlightingRange);
    public sealed virtual IEnumerable`1<IntentionAction> CreateHighlightingGroupActions(IReadOnlyList`1<IHighlighting> highlightings, IDocument document, ISolution solution);
    public sealed virtual string GetWarningTitle(IHighlighting highlighting);
    [NotNullAttribute]
private IEnumerable`1<QuickFixInfo> GetHighlightingQuickFixesInfo(Type highlightingType);
    public sealed virtual IQuickFix InstantiateQuickfix(IHighlighting highlighting, Type quickFixType, int quickFixIndex);
    [CanBeNullAttribute]
private static IQuickFix InstantiateQuickfix(IHighlighting highlighting, QuickFixInfo info);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.QuickFixes.QuickFixTable/<GetHighlightingTypesFromConstructors>d__20")]
[ItemNotNullAttribute]
private static IEnumerable`1<Type> GetHighlightingTypesFromConstructors(Type quickFixType);
    private void WaitForRegistration();
    public void Dump(TextWriter writer);
    [CompilerGeneratedAttribute]
private IEnumerable`1<QuickFixInfo> <GetHighlightingQuickFixesInfo>b__17_1(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.QuickFixes.Scoped.CustomHighlightingsAndFixesSetStrategy : object {
    private HashSet`1<Type> myHighlightingTypes;
    private HashSet`1<Type> myQuickFixTypes;
    public bool IncludeAnalyzersWithoutHighlightingTypesDefined { get; }
    public CustomHighlightingsAndFixesSetStrategy(IReadOnlyCollection`1<Type> highlightingTypes, IReadOnlyCollection`1<Type> quickFixTypes);
    public sealed virtual bool get_IncludeAnalyzersWithoutHighlightingTypesDefined();
    public sealed virtual IReadOnlyCollection`1<IHighlighting> TryGetHighlightings();
    public sealed virtual IReadOnlyCollection`1<Type> GetHighlightingTypes();
    public sealed virtual IReadOnlyCollection`1<Type> GetQuickFixTypes();
    public sealed virtual bool IsEnabled(IHighlighting highlighting);
    public sealed virtual bool IsEnabled(IQuickFix quickFix);
    public sealed virtual bool IsEnabled(ISimpleScopedBulbAction bulbAction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Feature.Services.QuickFixes.Scoped.FilteringResults : ValueType {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ScopedApplyFile> <DefinitelyHaveIssue>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ScopedApplyFile> <CanHaveIssue>k__BackingField;
    public IReadOnlyList`1<ScopedApplyFile> DefinitelyHaveIssue { get; public set; }
    public IReadOnlyList`1<ScopedApplyFile> CanHaveIssue { get; public set; }
    public FilteringResults(IReadOnlyList`1<ScopedApplyFile> DefinitelyHaveIssue, IReadOnlyList`1<ScopedApplyFile> CanHaveIssue);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ScopedApplyFile> get_DefinitelyHaveIssue();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DefinitelyHaveIssue(IReadOnlyList`1<ScopedApplyFile> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ScopedApplyFile> get_CanHaveIssue();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CanHaveIssue(IReadOnlyList`1<ScopedApplyFile> value);
    [PureAttribute]
public static FilteringResults FromOriginal(IReadOnlyList`1<ScopedApplyFile> unfilteredFiles);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(FilteringResults left, FilteringResults right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(FilteringResults left, FilteringResults right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(FilteringResults other);
    [CompilerGeneratedAttribute]
public void Deconstruct(IReadOnlyList`1& DefinitelyHaveIssue, IReadOnlyList`1& CanHaveIssue);
}
[NullableContextAttribute("2")]
public interface JetBrains.ReSharper.Feature.Services.QuickFixes.Scoped.IScopedFixingReanalysisInfo {
    public bool IsReanalysisRequired { get; }
    public ITreeNode ReanalysisDependencyRoot { get; }
    public ITreeNode ContextNode { get; }
    public abstract virtual bool get_IsReanalysisRequired();
    public abstract virtual ITreeNode get_ReanalysisDependencyRoot();
    public abstract virtual ITreeNode get_ContextNode();
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.QuickFixes.Scoped.IScopedFixingStrategy {
    public bool IncludeAnalyzersWithoutHighlightingTypesDefined { get; }
    public abstract virtual bool get_IncludeAnalyzersWithoutHighlightingTypesDefined();
    public abstract virtual IReadOnlyCollection`1<IHighlighting> TryGetHighlightings();
    public abstract virtual IReadOnlyCollection`1<Type> GetHighlightingTypes();
    public abstract virtual IReadOnlyCollection`1<Type> GetQuickFixTypes();
    public abstract virtual bool IsEnabled(IHighlighting highlighting);
    public abstract virtual bool IsEnabled(IQuickFix quickFix);
    public abstract virtual bool IsEnabled(ISimpleScopedBulbAction bulbAction);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.QuickFixes.Scoped.IScopedHighlightingFinder {
    public abstract virtual IReadOnlyList`1<IHighlighting> FindHighlightingsInFile(IPsiSourceFile sourceFile, Scope scope, IContextBoundSettingsStore settingsStore, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.QuickFixes.Scoped.ISolutionAnalysisCompletionService {
    public abstract virtual bool IsEnabled();
    public abstract virtual void WaitForGlobalAnalysisToComplete(IProgressIndicator progress);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.QuickFixes.Scoped.ISolutionAnalysisInspectionResultsFileFilter {
    public abstract virtual FilteringResults FilterFilesWithoutIssues(IReadOnlyList`1<ScopedApplyFile> filesToProcess, IReadOnlyCollection`1<Type> highlightingTypes, IReadOnlyCollection`1<IHighlighting> highlightings, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.QuickFixes.Scoped.ISolutionAnalysisInspectionResultsFilteringProvider {
    [PureAttribute]
public abstract virtual ISolutionAnalysisInspectionResultsFileFilter GetFileFilter(ISolution solution);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.QuickFixes.Scoped.MultiQuickFixStrategy : ScopedFixingStrategyBase {
    private HashSet`1<Type> myQuickFixTypes;
    private HashSet`1<Type> myHighlightingTypes;
    public MultiQuickFixStrategy(ISolution solution, IEnumerable`1<Type> quickFixTypes);
    public virtual IReadOnlyCollection`1<Type> GetHighlightingTypes();
    public virtual IReadOnlyCollection`1<Type> GetQuickFixTypes();
    public virtual bool IsEnabled(IHighlighting highlighting);
    public virtual bool IsEnabled(IQuickFix quickFix);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.QuickFixes.Scoped.OptimizedScopedFixingStrategy : object {
    [CompilerGeneratedAttribute]
private HashSet`1<Type> <highlightingTypesSubset>P;
    [CompilerGeneratedAttribute]
private IScopedFixingStrategy <underlyingStrategy>P;
    public IScopedFixingStrategy UnderlyingStrategy { get; }
    public bool IncludeAnalyzersWithoutHighlightingTypesDefined { get; }
    public OptimizedScopedFixingStrategy(HashSet`1<Type> highlightingTypesSubset, IScopedFixingStrategy underlyingStrategy);
    public IScopedFixingStrategy get_UnderlyingStrategy();
    public sealed virtual bool get_IncludeAnalyzersWithoutHighlightingTypesDefined();
    public sealed virtual IReadOnlyCollection`1<IHighlighting> TryGetHighlightings();
    public sealed virtual IReadOnlyCollection`1<Type> GetHighlightingTypes();
    public sealed virtual IReadOnlyCollection`1<Type> GetQuickFixTypes();
    public sealed virtual bool IsEnabled(IHighlighting highlighting);
    public sealed virtual bool IsEnabled(IQuickFix quickFix);
    public sealed virtual bool IsEnabled(ISimpleScopedBulbAction bulbAction);
}
public interface JetBrains.ReSharper.Feature.Services.QuickFixes.Scoped.Popups.IScopedPopupBulbAction {
    [NotNullAttribute]
public abstract virtual string GetScopedPopupText(IBulbAction bulbAction);
    [CanBeNullAttribute]
public abstract virtual Action`1<ITextControl> ExecuteAction(ISolution solution, Scope scope, IHighlighting highlighting, IProgressIndicator singleFileProgress);
}
public class JetBrains.ReSharper.Feature.Services.QuickFixes.Scoped.Popups.ScopedPopupAction : BulbActionBase {
    [NotNullAttribute]
private IScopedPopupBulbAction myScopedPopup;
    [NotNullAttribute]
private IBulbAction myBulbAction;
    [NotNullAttribute]
private IProjectFile myProjectFile;
    public string Text { get; }
    public ScopedPopupAction(IScopedPopupBulbAction scopedPopup, IBulbAction bulbAction, IProjectFile projectFile);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual Action`1<ITextControl> ExecuteAfterPsiTransaction(ISolution solution, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.QuickFixes.Scoped.SameBulbActionAndQuickFixTypesStrategy`1 : SameQuickFixTypeStrategy {
    public SameBulbActionAndQuickFixTypesStrategy`1(ISimpleScopedBulbAction quickFix, ISolution solution);
    public virtual bool IsEnabled(ISimpleScopedBulbAction bulbAction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.QuickFixes.Scoped.SameQuickFixSameHighlightingTypeStrategy : ScopedFixingStrategyBase {
    [CompilerGeneratedAttribute]
private Type <sourceHighlightingType>P;
    private Type mySourceQuickFixType;
    public SameQuickFixSameHighlightingTypeStrategy(Type sourceHighlightingType, ISimpleScopedBulbAction quickFix);
    public sealed virtual IReadOnlyCollection`1<Type> GetHighlightingTypes();
    public virtual IReadOnlyCollection`1<Type> GetQuickFixTypes();
    public virtual bool IsEnabled(IHighlighting highlighting);
    public virtual bool IsEnabled(IQuickFix quickFix);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.QuickFixes.Scoped.SameQuickFixTypeEqualDataStrategy`1 : SameQuickFixTypeStrategy {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<TQuickFix, object> <dataRule>P;
    private object mySourceEqualityData;
    public SameQuickFixTypeEqualDataStrategy`1(Func`2<TQuickFix, object> dataRule, TQuickFix quickFix, ISolution solution);
    public virtual bool IsEnabled(IQuickFix quickFix);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.QuickFixes.Scoped.SameQuickFixTypeStrategy : ScopedFixingStrategyBase {
    private Type mySourceQuickFixType;
    private HashSet`1<Type> myHighlightingTypes;
    public SameQuickFixTypeStrategy(ISimpleScopedBulbAction quickFix, ISolution solution);
    public sealed virtual IReadOnlyCollection`1<Type> GetHighlightingTypes();
    public virtual IReadOnlyCollection`1<Type> GetQuickFixTypes();
    public virtual bool IsEnabled(IHighlighting highlighting);
    public virtual bool IsEnabled(IQuickFix quickFix);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.QuickFixes.Scoped.ScopedFixingStrategyBase : object {
    [CompilerGeneratedAttribute]
private bool <IncludeAnalyzersWithoutHighlightingTypesDefined>k__BackingField;
    public bool IncludeAnalyzersWithoutHighlightingTypesDefined { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeAnalyzersWithoutHighlightingTypesDefined();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IncludeAnalyzersWithoutHighlightingTypesDefined(bool value);
    public abstract virtual bool IsEnabled(IHighlighting highlighting);
    public virtual bool IsEnabled(IQuickFix quickFix);
    public virtual bool IsEnabled(ISimpleScopedBulbAction bulbAction);
    public virtual IReadOnlyCollection`1<IHighlighting> TryGetHighlightings();
    public abstract virtual IReadOnlyCollection`1<Type> GetHighlightingTypes();
    public abstract virtual IReadOnlyCollection`1<Type> GetQuickFixTypes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.QuickFixes.Scoped.ScopedNonIncrementalQuickFixExecutor : ScopedActionExecutor {
    private IScopedFixingStrategy myFixingStrategy;
    private AnalysisInfo myAnalysisInfo;
    private IQuickFixes myQuickFixes;
    private HashSet`1<Type> myQuickFixTypes;
    private IFileSkipChecker myFileSkipChecker;
    [NullableAttribute("2")]
private ISolutionAnalysisInspectionResultsFileFilter myFileFilter;
    public ScopedNonIncrementalQuickFixExecutor(ISolution solution, IScopedFixingStrategy fixingStrategy, PsiLanguageType languageFilter, bool isCleanup);
    private Predicate`1<IElementProblemAnalyzer> GetAnalyzersFilter(HashSet`1<Type> highlightingTypes);
    [PureAttribute]
private HashSet`1<IDaemonStage> GetEnabledStages(HashSet`1<Type> highlightingTypes);
    public void ExecuteInSingleFile(IPsiSourceFile sourceFile, IRangeMarker rangeMarker, IContextBoundSettingsStore settingsStore, IProgressIndicator progress);
    private static bool IsGlobalHighlighting(Type highlightingType, ISolution solution);
    protected virtual bool CheckShouldSkipSourceFile(IPsiSourceFile sourceFile);
    protected virtual FilesToProcess FilterWithSolutionAnalysisResults(IReadOnlyList`1<ScopedApplyFile> filesToProcess, IProgressIndicator progress);
    protected virtual void EnsureGlobalAnalysisIsCompletedIfNecessary(IProgressIndicator progress);
    protected virtual bool CanExcludeFilesFast(IContextBoundSettingsStore contextBoundSettingsStore, FilesToProcess filesToProcess);
    protected virtual FilesToProcess ExcludeFilesFast(FilesToProcess filteredFiles, Scope scope, IProgressIndicator progress);
    protected sealed virtual bool AnalyzeInScope(IPsiSourceFile sourceFile, Scope scope, IContextBoundSettingsStore settingsStore, IProgressIndicator sourceFileProgress);
    protected sealed virtual void ExecuteInScope(Scope scope, ScopedApplyFile scopedApplyFile, IProgressIndicator sourceFileProgress);
    private void ExecuteInScopeCore(Scope scope, ScopedApplyFile scopedApplyFile, IProgressIndicator sourceFileProgress, IRangeMarker rangeMarker, IContextBoundSettingsStore settingsStore);
    protected virtual bool ProcessHighlightings(IReadOnlyList`1<HighlightingInfo> highlightings, ScopedApplyFile scopedApplyFile, IProgressIndicator progressForInterrupt);
    protected List`1<HighlightingInfo> CollectHighlightingsFromDaemon(Scope scope, ScopedApplyFile scopedApplyFile, IProgressIndicator progressForInterrupt, IRangeMarker rangeMarker, IContextBoundSettingsStore settingsStore);
    private List`1<HighlightingInfo> FilterHighlightingsByDaemonResultsInDifferentContexts(List`1<HighlightingInfo> primaryHighlightings, Scope scope, ScopedApplyFile scopedApplyFile, IProgressIndicator progressForInterrupt, IRangeMarker rangeMarker, IContextBoundSettingsStore settingsStore);
    private Nullable`1<ScopedFixInstance> TryCreateScopedFixInstance(IHighlighting highlighting, IUserDataHolder quickFixCache, IProgressIndicator progressForInterrupt);
    private bool ApplyQuickFixes(IReadOnlyList`1<HighlightingInfo> highlightings, IProgressIndicator progressForInterrupt);
    protected sealed virtual bool AnalyzeInPsiScope(Scope scope, ITreeNode psiScope, IContextBoundSettingsStore settingsStore, IProgressIndicator psiScopeProgress);
    protected sealed virtual void ExecuteInPsiScope(Scope scope, ITreeNode psiScope, ScopedApplyFile scopedApplyFile, IProgressIndicator psiScopeProgress);
    public sealed virtual IReadOnlyList`1<IHighlighting> FindHighlightingsInFile(IPsiSourceFile sourceFile, Scope scope, IContextBoundSettingsStore settingsStore, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
private bool <CollectHighlightingsFromDaemon>b__21_0(HighlightingInfo h);
    [CompilerGeneratedAttribute]
private bool <FilterHighlightingsByDaemonResultsInDifferentContexts>g__HasHighlightingsOfTheSameRangeAndSameTypeAndQuickFixAvailable|22_2(HighlightingInfo primaryInfo, <>c__DisplayClass22_0& , <>c__DisplayClass22_1& );
    [CompilerGeneratedAttribute]
internal static bool <ApplyQuickFixes>g__IsInsideGeneratedCodeRegion|24_2(ScopedFixInstance scopedFixInstance, <>c__DisplayClass24_1& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.QuickFixes.Scoped.ScopedQuickFixExecutor : ScopedIntentionExecutor {
    private IScopedFixingStrategy myFixingStrategy;
    private ElementProblemAnalyzerRegistrar myElementProblemAnalyzerRegistrar;
    private ConcurrentDictionary`2<Type, bool> myEnabledElementProblemAnalyzers;
    private IQuickFixes myQuickFixes;
    private IFileSkipChecker myFileSkipChecker;
    private IReadOnlyCollection`1<Type> myHighlightingTypes;
    [NullableAttribute("2")]
private ISolutionAnalysisInspectionResultsFileFilter myFileFilter;
    [CompilerGeneratedAttribute]
private bool <IsCleanup>k__BackingField;
    public bool IsCleanup { get; }
    public ScopedQuickFixExecutor(ISolution solution, IScopedFixingStrategy fixingStrategy, PsiLanguageType languageFilter, bool isCleanup);
    [CompilerGeneratedAttribute]
public bool get_IsCleanup();
    protected sealed virtual IScopedTreeProcessor GetTreeProcessor(Scope scope, ITreeNode psiScope, IContextBoundSettingsStore psiScopeSettingsStore, IProgressIndicator psiScopeProgress);
    private ScopedQuickFixTreeProcessor CreateScopedQuickFixTreeProcessor(ITreeNode psiScope, IContextBoundSettingsStore psiScopeSettingsStore, IProgressIndicator psiScopeProgress);
    public IElementAnalyzerDispatcher CreateDispatcher(ElementProblemAnalyzerData analyzerData);
    internal void ResetFixingStrategy(IScopedFixingStrategy strategy);
    private bool ShouldRunAnalyzer(IElementProblemAnalyzer analyzer);
    protected virtual bool CheckShouldSkipSourceFile(IPsiSourceFile sourceFile);
    protected virtual FilesToProcess FilterWithSolutionAnalysisResults(IReadOnlyList`1<ScopedApplyFile> filesToProcess, IProgressIndicator progress);
    [PureAttribute]
public bool CanHandleHighlighting(IHighlighting highlighting);
    public sealed virtual IReadOnlyList`1<IHighlighting> FindHighlightingsInFile(IPsiSourceFile sourceFile, Scope scope, IContextBoundSettingsStore settingsStore, IProgressIndicator progress);
    private void FindHighlightingsInPsiScope(Scope scope, ITreeNode psiScope, IContextBoundSettingsStore settingsStore, IProgressIndicator psiScopeProgress, List`1<IHighlighting> highlightings);
    [CompilerGeneratedAttribute]
private bool <ShouldRunAnalyzer>g__IsEnabledInternal|15_0(<>c__DisplayClass15_0& );
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.QuickFixes.ScopedNonIncrementalQuickFixBase : ScopedQuickFixWithCustomExecutor {
    public bool IsReanalysisRequired { get; }
    public ITreeNode ReanalysisDependencyRoot { get; }
    public ITreeNode ContextNode { get; }
    public virtual bool get_IsReanalysisRequired();
    public virtual ITreeNode get_ReanalysisDependencyRoot();
    public sealed virtual ITreeNode get_ContextNode();
    [NullableContextAttribute("1")]
protected sealed virtual ScopedActionExecutor GetScopedQuickFixExecutor(ISolution solution, IScopedFixingStrategy fixingStrategy, PsiLanguageType languageType);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.QuickFixes.ScopedQuickFixBase : ScopedQuickFixWithCustomExecutor {
    public bool IsReanalysisRequired { get; }
    public ITreeNode ReanalysisDependencyRoot { get; }
    public ITreeNode ContextNode { get; }
    public virtual bool get_IsReanalysisRequired();
    public virtual ITreeNode get_ReanalysisDependencyRoot();
    public sealed virtual ITreeNode get_ContextNode();
    [NullableContextAttribute("1")]
protected sealed virtual ScopedActionExecutor GetScopedQuickFixExecutor(ISolution solution, IScopedFixingStrategy fixingStrategy, PsiLanguageType languageType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.QuickFixes.ScopedQuickFixWithCustomExecutor : ScopedBulbAction {
    public static Key`1<Scope> ScopeKey;
    public FileCollectorInfo FileCollectorInfo { get; }
    private static ScopedQuickFixWithCustomExecutor();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [NullableContextAttribute("2")]
[PureAttribute]
protected abstract virtual ITreeNode TryGetContextTreeNode();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    private sealed virtual override Action`1<ITextControl> JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Actions.IManualScopedAction.ExecuteAction(ISolution solution, Scope scope, IHighlighting sourceHighlighting, IProgressIndicator progress);
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.Intentions.Scoped.QuickFixes.IManualScopedQuickFix.CanHandleHighlighting(ISolution solution, IHighlighting highlighting);
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
    protected abstract virtual ScopedActionExecutor GetScopedQuickFixExecutor(ISolution solution, IScopedFixingStrategy fixingStrategy, PsiLanguageType languageType);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.Editor.EditorSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "QuickInfoSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.QuickInfo.QuickInfoSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "EnableReSharperQuickInfoSettingDescription")]
public bool EnableQuickInfo;
}
public static class JetBrains.ReSharper.Feature.Services.QuickInfo.QuickInfoSettingsAccessor : object {
    public static Expression`1<Func`2<QuickInfoSettings, bool>> EnableQuickInfo;
    private static QuickInfoSettingsAccessor();
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Feature.Services.RearrangeCode.Direction : Enum {
    public UInt32 value__;
    public static Direction Up;
    public static Direction Down;
    public static Direction Left;
    public static Direction Right;
    public static Direction LeftRight;
    public static Direction UpDown;
    public static Direction All;
    public static Direction Any;
}
[ShellServiceAttribute("144")]
public class JetBrains.ReSharper.Feature.Services.RearrangeCode.ElementRearranger : object {
    [NotNullAttribute]
private IImmutableList`1<IRearrangeableElementType> myElementTypes;
    private static Direction[] ourDirections;
    public ElementRearranger(IImmutableList`1<IRearrangeableElementType> elementTypes);
    private static ElementRearranger();
    [NotNullAttribute]
private List`1<ValueTuple`2<IRearrangeable, int>> GetMovableElements(PsiEditorView psiEditorView);
    [NotNullAttribute]
public IList`1<IRearrangeable> GetApplicableElements(Direction direction, PsiEditorView psiEditorView);
    private static bool CanMoveInDirection(Direction direction, IRearrangeable rearrangeable);
    private static bool IsLeafElement(IRearrangeable rearrangeable, int level, DocumentRange documentRange, List`1<ValueTuple`2<IRearrangeable, int>> movableElements);
    public void ExecuteMove(IRearrangeable rearrangeableElement, Direction direction, ISolution solution, ITextControl textControl);
}
public interface JetBrains.ReSharper.Feature.Services.RearrangeCode.IRearrangeable {
    [NotNullAttribute]
public string Title { get; }
    public DocumentRange Range { get; }
    public Direction SupportedDirections { get; }
    public abstract virtual string get_Title();
    public abstract virtual DocumentRange get_Range();
    public abstract virtual Direction get_SupportedDirections();
    public abstract virtual bool CanMove(Direction direction);
    public abstract virtual ValueTuple`2<DocumentRange, ITreeRange> Move(Direction direction);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.RearrangeCode.IRearrangeableElementType {
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual IRearrangeable CreateElement(IPsiDocumentRangeView psiDocumentRangeView);
}
public class JetBrains.ReSharper.Feature.Services.RearrangeCode.RearrangeableDelegatedElement`2 : RearrangeableElementAppendRemove`2<TElement, TParent> {
    private TParent myParent;
    private Func`2<TParent, ICollection`1<TElement>> myFChildren;
    private Action`2<TParent, TElement> myFRemoveChild;
    private Func`4<TParent, TElement, TElement, TElement> myFAddBefore;
    private Func`4<TParent, TElement, TElement, TElement> myFAddAfter;
    protected TParent Parent { get; }
    public RearrangeableDelegatedElement`2(string title, Direction directionType, TElement element, TParent parent, Func`2<TParent, ICollection`1<TElement>> fChildren, Action`2<TParent, TElement> fRemoveChild, Func`4<TParent, TElement, TElement, TElement> fAddBefore, Func`4<TParent, TElement, TElement, TElement> fAddAfter);
    protected virtual TParent get_Parent();
    protected virtual IEnumerable`1<TElement> GetChildren(TParent parent);
    protected virtual void RemoveChild(TParent parent, TElement child);
    protected virtual TElement AddBefore(TParent parent, TElement child, TElement anchor);
    protected virtual TElement AddAfter(TParent parent, TElement child, TElement anchor);
}
public abstract class JetBrains.ReSharper.Feature.Services.RearrangeCode.RearrangeableElement : object {
    public string Title { get; }
    public DocumentRange Range { get; }
    [NotNullAttribute]
protected ITreeNode Element { get; }
    public Direction SupportedDirections { get; }
    public abstract virtual string get_Title();
    public virtual DocumentRange get_Range();
    protected abstract virtual ITreeNode get_Element();
    public abstract virtual Direction get_SupportedDirections();
    public abstract virtual bool CanMove(Direction direction);
    private sealed virtual override ValueTuple`2<DocumentRange, ITreeRange> JetBrains.ReSharper.Feature.Services.RearrangeCode.IRearrangeable.Move(Direction direction);
    protected virtual DocumentRange GetRangeOfElement(ITreeNode element);
    [CanBeNullAttribute]
protected abstract virtual ITreeNode MoveUnderPsiTransaction(Direction direction);
}
public abstract class JetBrains.ReSharper.Feature.Services.RearrangeCode.RearrangeableElementAppendRemove`2 : RearrangeableSingleElementBase`1<TElement> {
    [NotNullAttribute]
protected TElement Element { get; }
    protected TParent Parent { get; }
    protected RearrangeableElementAppendRemove`2(TElement element, string title, Direction directionType);
    protected TElement get_Element();
    protected abstract virtual TParent get_Parent();
    protected abstract virtual IEnumerable`1<TElement> GetChildren(TParent parent);
    protected virtual IEnumerable`1<TElement> GetSiblings();
    protected virtual ITreeNode MoveUnderPsiTransaction(Direction direction);
    protected abstract virtual void RemoveChild(TParent parent, TElement child);
    [NotNullAttribute]
protected abstract virtual TElement AddBefore(TParent parent, TElement child, TElement anchor);
    [NotNullAttribute]
protected abstract virtual TElement AddAfter(TParent parent, TElement child, TElement anchor);
}
public abstract class JetBrains.ReSharper.Feature.Services.RearrangeCode.RearrangeableElementSwap`1 : RearrangeableSingleElementBase`1<TElement> {
    [NotNullAttribute]
protected TElement Element { get; }
    protected RearrangeableElementSwap`1(TElement element, string title, Direction directionType);
    protected TElement get_Element();
    protected virtual ITreeNode MoveUnderPsiTransaction(Direction direction);
    [NotNullAttribute]
protected virtual TElement Swap(TElement child, TElement target);
}
[MeansImplicitUseAttribute]
[AttributeUsageAttribute("4")]
public class JetBrains.ReSharper.Feature.Services.RearrangeCode.RearrangeableElementTypeAttribute : ShellComponentAttribute {
    public static int DEFAULT_LEVEL;
    public static int HUMBLE_LEVEL;
    [CompilerGeneratedAttribute]
private int <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Internal>k__BackingField;
    public int Level { get; public set; }
    public bool Internal { get; public set; }
    public RearrangeableElementTypeAttribute(Instantiation instantiation);
    [CompilerGeneratedAttribute]
public int get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(int value);
    [CompilerGeneratedAttribute]
public bool get_Internal();
    [CompilerGeneratedAttribute]
public void set_Internal(bool value);
}
public class JetBrains.ReSharper.Feature.Services.RearrangeCode.RearrangeableLines : object {
    private Int32`1<DocLine> myStartLine;
    private Int32`1<DocLine> myEndLine;
    private ISolution mySolution;
    private IDocument myDocument;
    public string Title { get; }
    public DocumentRange Range { get; }
    public Direction SupportedDirections { get; }
    public RearrangeableLines(Int32`1<DocLine> startLine, Int32`1<DocLine> endLine, ISolution solution, IDocument document);
    public sealed virtual string get_Title();
    public sealed virtual DocumentRange get_Range();
    public sealed virtual Direction get_SupportedDirections();
    public sealed virtual bool CanMove(Direction direction);
    public sealed virtual ValueTuple`2<DocumentRange, ITreeRange> Move(Direction direction);
    private DocumentRange GetLineRange(Int32`1<DocLine> line);
}
public abstract class JetBrains.ReSharper.Feature.Services.RearrangeCode.RearrangeableLogicalItemBase`1 : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ILogicalItem<THolder>> <SelectedItems>k__BackingField;
    [CompilerGeneratedAttribute]
private THolder <Holder>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ILogicalItem<THolder>> <HolderItems>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeRange <TreeRange>k__BackingField;
    [NotNullAttribute]
protected IReadOnlyList`1<ILogicalItem<THolder>> SelectedItems { get; }
    [NotNullAttribute]
protected THolder Holder { get; }
    [NotNullAttribute]
protected IReadOnlyList`1<ILogicalItem<THolder>> HolderItems { get; }
    [NotNullAttribute]
protected ITreeRange TreeRange { get; }
    public Direction SupportedDirections { get; }
    public string Title { get; }
    public DocumentRange Range { get; }
    protected RearrangeableLogicalItemBase`1(IReadOnlyList`1<ILogicalItem<THolder>> selectedItems, THolder holder, IReadOnlyList`1<ILogicalItem<THolder>> holderItems);
    [CompilerGeneratedAttribute]
protected IReadOnlyList`1<ILogicalItem<THolder>> get_SelectedItems();
    [CompilerGeneratedAttribute]
protected THolder get_Holder();
    [CompilerGeneratedAttribute]
protected IReadOnlyList`1<ILogicalItem<THolder>> get_HolderItems();
    [CompilerGeneratedAttribute]
protected ITreeRange get_TreeRange();
    public abstract virtual Direction get_SupportedDirections();
    public virtual string get_Title();
    public sealed virtual DocumentRange get_Range();
    public abstract virtual bool CanMove(Direction direction);
    public sealed virtual ValueTuple`2<DocumentRange, ITreeRange> Move(Direction direction);
    public abstract virtual ValueTuple`2<DocumentRange, ITreeRange> MoveUnderPsiTransaction(Direction direction);
}
public class JetBrains.ReSharper.Feature.Services.RearrangeCode.RearrangeableSimpleSwap`1 : RearrangeableElementSwap`1<TElement> {
    private IEnumerable`1<TElement> mySiblings;
    public RearrangeableSimpleSwap`1(TElement element, string title, Direction directionType, IEnumerable`1<TElement> siblings);
    protected virtual IEnumerable`1<TElement> GetSiblings();
}
public abstract class JetBrains.ReSharper.Feature.Services.RearrangeCode.RearrangeableSingleElementBase`1 : RearrangeableElement {
    private Direction myDirectionType;
    [CompilerGeneratedAttribute]
private TElement <TypedElement>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [NotNullAttribute]
protected TElement TypedElement { get; }
    public string Title { get; }
    protected ITreeNode Element { get; }
    public Direction SupportedDirections { get; }
    internal Direction PrevDirection { get; }
    internal Direction NextDirection { get; }
    protected RearrangeableSingleElementBase`1(TElement element, string title, Direction directionType);
    [CompilerGeneratedAttribute]
protected TElement get_TypedElement();
    [CompilerGeneratedAttribute]
public virtual string get_Title();
    protected virtual ITreeNode get_Element();
    public virtual Direction get_SupportedDirections();
    internal Direction get_PrevDirection();
    internal Direction get_NextDirection();
    public virtual bool CanMove(Direction direction);
    [NotNullAttribute]
protected virtual IEnumerable`1<TElement> GetRealChildren();
    [NotNullAttribute]
[ItemNotNullAttribute]
protected abstract virtual IEnumerable`1<TElement> GetSiblings();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.AnyChangeManager : object {
    [CompilerGeneratedAttribute]
private EventHandler AnythingChanged;
    [CompilerGeneratedAttribute]
private ISimpleSignal <AnythingChangedSignal>k__BackingField;
    public ISimpleSignal AnythingChangedSignal { get; }
    public AnyChangeManager(Lifetime lifetime, ISolution solution, DocumentManager documentManager, IDocumentStorageHelpers documentOperations, ChangeManager changeManager);
    [CompilerGeneratedAttribute]
public void add_AnythingChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AnythingChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public ISimpleSignal get_AnythingChangedSignal();
}
internal class JetBrains.ReSharper.Feature.Services.Refactorings.AsyncWorkflowExecuter : object {
    private AsyncCommitService myAsyncCommitService;
    private Lifetime myLifetime;
    private Queue`1<IRefactoringOperation> myRequests;
    private IShellLocks myShellLocks;
    private List`1<IAsyncWorkflow> myRunningWorkflows;
    private static AsyncWorkflowExecuter myInstance;
    private AsyncWorkflowExecuter(ISolution solution, Lifetime lifetime);
    public static AsyncWorkflowExecuter GetInstance(ISolution solution, Lifetime lifetime);
    private sealed virtual override Action JetBrains.ReSharper.Psi.IAsyncCommitClient.BeforeCommit();
    private sealed virtual override void JetBrains.ReSharper.Psi.IAsyncCommitClient.OnInterrupt();
    private void ActivityInterrupt(IRefactoringOperation request);
    public void Run(IAsyncWorkflow workflow, WorkflowExecuter executer);
    public void Cancel(IRefactoringWorkflow workflow);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0();
    [CompilerGeneratedAttribute]
private void <JetBrains.ReSharper.Psi.IAsyncCommitClient.BeforeCommit>b__8_0();
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.BackgroundTaskInitializer : object {
    private IShellLocks myLocks;
    private BackgroundTaskModel myTask;
    private RiderBackgroundTask myRiderTask;
    private string myHeader;
    private string myDescription;
    private double myProgress;
    private BackgroundTaskInitializer(RiderBackgroundTask riderTask, IShellLocks locks);
    public static BackgroundTaskModel CreateAndInit(RiderBackgroundTask riderTask, IShellLocks locks);
    private void Init();
    private void Advise(GroupingEvent gevent);
    private void Advise(GroupingEvent gevent, IProperty`1<T> property, Action`1<T> set);
    private void Fire();
    private BackgroundTaskModel CreateBackgroundTask();
    private GroupingEvent CreateGevent(Lifetime lifetime, double updateInterval, string name);
    [CompilerGeneratedAttribute]
private void <Init>b__5_0(Lifetime _);
    [CompilerGeneratedAttribute]
private void <Advise>b__9_0(string value);
    [CompilerGeneratedAttribute]
private void <Advise>b__9_1(double value);
    [CompilerGeneratedAttribute]
private void <Advise>b__9_2(string value);
    [CompilerGeneratedAttribute]
private void <Advise>b__9_3(double value);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.BeRefactoringForm : object {
    private BeDialog myDialog;
    private BeSpacer myTaskContentValue;
    [CompilerGeneratedAttribute]
private BeGrid <MainContent>k__BackingField;
    [CompilerGeneratedAttribute]
private BeGrid <Footer>k__BackingField;
    private BeButton myBack;
    private BeButton myNext;
    private BeControl myRefactoringFooter;
    private LifetimeDefinition myCurrentTaskLifetimeDefinition;
    private BeRefactoringFormState myCurrentState;
    private BeButton myCancel;
    [CompilerGeneratedAttribute]
private BeRefactoringProgress <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasContent>k__BackingField;
    private BeGrid MainContent { get; }
    private BeGrid Footer { get; }
    public BeRefactoringProgress Progress { get; public set; }
    public bool HasContent { get; private set; }
    [CompilerGeneratedAttribute]
private BeGrid get_MainContent();
    [CompilerGeneratedAttribute]
private BeGrid get_Footer();
    [CompilerGeneratedAttribute]
public BeRefactoringProgress get_Progress();
    [CompilerGeneratedAttribute]
public void set_Progress(BeRefactoringProgress value);
    [CompilerGeneratedAttribute]
public bool get_HasContent();
    [CompilerGeneratedAttribute]
private void set_HasContent(bool value);
    public static BeRefactoringProgress GetProgressBar();
    public void SetTask(Lifetime lifetime, IProgressIndicatorModel indicator);
    private AbstractProgress CreateProgress(LifetimeDefinition lifetimeDefinition, IProgressIndicatorModel pi);
    public void SetContent(IRefactoringPage page, Lifetime pageLifetime, bool hasBack);
    public BeDialog GetDialog(string title, Lifetime lifetime, WorkflowExecuter executer, Action`1<BeDialog> init);
    public void Finish();
    [CompilerGeneratedAttribute]
private void <SetTask>g__SetProgress|23_0(<>c__DisplayClass23_0& );
}
[SolutionComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.BeRefactoringFormModificator : object {
    private DocumentSettings myDocumentSettings;
    public BeRefactoringFormModificator(DocumentSettings documentSettings);
    public virtual BeControl GetFooter(IRefactoringWorkflow workflow);
}
public enum JetBrains.ReSharper.Feature.Services.Refactorings.BeRefactoringFormState : Enum {
    public int value__;
    public static BeRefactoringFormState INITIAL;
    public static BeRefactoringFormState PAGE;
    public static BeRefactoringFormState TASK;
}
public enum JetBrains.ReSharper.Feature.Services.Refactorings.Buggy.BuggyBehavior : Enum {
    public int value__;
    public static BuggyBehavior NoBugs;
    public static BuggyBehavior ThrowsException;
    public static BuggyBehavior ReturnsFalse;
    public static BuggyBehavior Cancelled;
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Buggy.BuggyConflictsSearcher : object {
    private BuggyTestDriver myDriver;
    [CompilerGeneratedAttribute]
private ConflictSearchResult <LastResult>k__BackingField;
    public ConflictSearchResult LastResult { get; private set; }
    public BuggyConflictsSearcher(BuggyTestDriver driver);
    public sealed virtual ConflictSearchResult SearchConflicts(IProgressIndicator progressIndicator, bool canPerformRefactoring);
    [CompilerGeneratedAttribute]
public sealed virtual ConflictSearchResult get_LastResult();
    [CompilerGeneratedAttribute]
private void set_LastResult(ConflictSearchResult value);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Buggy.BuggyPage : object {
    private BuggyTestDriver myDriver;
    private IProperty`1<bool> JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.ContinueEnabled { get; }
    private string JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.Description { get; }
    private string JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.Title { get; }
    private bool JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.DoNotShow { get; }
    public BuggyPage(BuggyTestDriver driver);
    private sealed virtual override IProperty`1<bool> JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.get_ContinueEnabled();
    private sealed virtual override string JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.get_Description();
    private sealed virtual override string JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.get_Title();
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.get_DoNotShow();
    private sealed virtual override IRefactoringPage JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.Commit(IProgressIndicator pi);
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.Initialize(IProgressIndicator pi);
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.RefreshContents(IProgressIndicator pi);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Buggy.BuggyTestDriver : SimpleWorkflowHost {
    [CompilerGeneratedAttribute]
private bool <DrivenConflictsSearch>k__BackingField;
    private BuggyBehavior myExecuteBuggyBehavior;
    private BuggyBehavior myCommitFirstPageBuggyBehavior;
    private BuggyBehavior myInitializeFirstPageBuggyBehavior;
    private BuggyBehavior myPreExecuteBuggyBehavior;
    private bool myHasConflicts;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private StringBuilder <ExecutionTrace>k__BackingField;
    public bool DrivenConflictsSearch { get; }
    public ISolution Solution { get; }
    public bool HasConflicts { get; }
    public StringBuilder ExecutionTrace { get; }
    public BuggyTestDriver(bool hasConflicts, bool drivenConflictsSearch, BuggyBehavior executeBuggyBehavior, BuggyBehavior commitFirstPageBuggyBehavior, BuggyBehavior initializeFirstPageBuggyBehavior, BuggyBehavior preExecuteBuggyBehavior, ISolution solution);
    [CompilerGeneratedAttribute]
public bool get_DrivenConflictsSearch();
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    public virtual bool get_HasConflicts();
    [CompilerGeneratedAttribute]
public StringBuilder get_ExecutionTrace();
    public IRefactoringPage GetFirstPage();
    public bool Execute(IRefactoringDriver driver);
    public bool PreExecute();
    public IRefactoringPage CommitFirstPage();
    public bool InitializeFirstPage();
    public virtual IRefactoringPage CreateConflictsPage(WorkflowExecuter executer, IEnumerable`1<IConflict> conflicts);
    public bool PostExecute();
    public void SuccessfulFinish();
    public void UnsuccessfulFinish();
    private bool RunWithBehavior(BuggyBehavior behavior, bool failTransaction);
    public string PresentOptions();
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Buggy.BuggyTestRefactoring : object {
    private BuggyTestDriver myDriver;
    private IRefactoringDriver myRefactoringDriver;
    public BuggyTestRefactoring(BuggyTestDriver driver, IRefactoringDriver refactoringDriver);
    public sealed virtual bool Execute(IProgressIndicator pi);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Buggy.BuggyTestWorkflow : DrivenRefactoringWorkflow {
    private BuggyTestDriver myDriver;
    public IConflictSearcher ConflictSearcher { get; }
    public RefactoringActionGroup ActionGroup { get; }
    public IRefactoringPage FirstPendingRefactoringPage { get; }
    public bool MightModifyManyDocuments { get; }
    public string Title { get; }
    public bool HasUI { get; }
    public HelpId HelpKeyword { get; }
    public BuggyTestWorkflow(BuggyTestDriver driver, string actionId);
    public virtual IConflictSearcher get_ConflictSearcher();
    public virtual RefactoringActionGroup get_ActionGroup();
    public virtual IRefactoringPage get_FirstPendingRefactoringPage();
    public virtual bool get_MightModifyManyDocuments();
    public virtual string get_Title();
    public virtual bool get_HasUI();
    public virtual HelpId get_HelpKeyword();
    public virtual bool Initialize(IDataContext context);
    public virtual bool IsAvailable(IDataContext context);
    public virtual void SuccessfulFinish(IProgressIndicator pi);
    public virtual bool PreExecute(IProgressIndicator progressIndicator);
    public virtual bool PostExecute(IProgressIndicator pi);
    public virtual void UnsuccessfulFinish(IProgressIndicator pi);
    public virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.BulkFixWorkflowHost : SimpleWorkflowHost {
    private IProperty`1<bool> JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.ContinueEnabled { get; }
    private string JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.Description { get; }
    private string JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.Title { get; }
    private bool JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.DoNotShow { get; }
    public virtual IRefactoringPage CreateConflictsPage(WorkflowExecuter executer, IEnumerable`1<IConflict> conflicts);
    private sealed virtual override IProperty`1<bool> JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.get_ContinueEnabled();
    private sealed virtual override string JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.get_Description();
    private sealed virtual override string JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.get_Title();
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.get_DoNotShow();
    private sealed virtual override IRefactoringPage JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.Commit(IProgressIndicator pi);
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.Initialize(IProgressIndicator pi);
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.RefreshContents(IProgressIndicator pi);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.CachingLanguageSpecificImpl`1 : object {
    private ILanguageManager myLanguageManager;
    private Dictionary`2<PsiLanguageType, TLanguageSpecificInterface> myImpl;
    public TLanguageSpecificInterface Item { get; }
    public CachingLanguageSpecificImpl`1(ILanguageManager languageManager);
    public TLanguageSpecificInterface get_Item(PsiLanguageType language);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.CheckUsagesDescriptor : CheckUsagesDescriptorBase {
    public TreeModel Model { get; }
    public CheckUsagesDescriptor(DrivenRefactoringWorkflow workflow);
    public virtual TreeModel get_Model();
}
public abstract class JetBrains.ReSharper.Feature.Services.Refactorings.CheckUsagesDescriptorBase : OccurrenceBrowserDescriptor {
    private DrivenRefactoringWorkflow myWorkflow;
    public CheckUsagesDescriptorBase(DrivenRefactoringWorkflow workflow);
    public void SetOccurrences(IUsagesProvider usagesProvider);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.Conflict : object {
    private List`1<IConflictPart> myNavigationPoints;
    [CanBeNullAttribute]
private string myGroupName;
    [CompilerGeneratedAttribute]
private ConflictSeverity <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private IConflictData <ConflictData>k__BackingField;
    [CompilerGeneratedAttribute]
private ConflictType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<Conflict> <ConflictComparer>k__BackingField;
    public string GroupName { get; public set; }
    public ConflictSeverity Severity { get; }
    public IConflictData ConflictData { get; }
    public ConflictType Type { get; private set; }
    public bool IsValid { get; }
    public string Description { get; }
    public static IEqualityComparer`1<Conflict> ConflictComparer { get; }
    private Conflict(ISolution solution, string text, ConflictSeverity severity, ConflictType type, Object[] parms);
    private Conflict(ISolution solution, string text, ConflictSeverity severity, ConflictType type, IConflictData conflictData, Object[] parms);
    private static Conflict();
    public string get_GroupName();
    public void set_GroupName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ConflictSeverity get_Severity();
    [CompilerGeneratedAttribute]
public sealed virtual IConflictData get_ConflictData();
    [CompilerGeneratedAttribute]
public ConflictType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(ConflictType value);
    public sealed virtual bool get_IsValid();
    public sealed virtual string get_Description();
    private string Evaluator(Match match, Object[] parms, ISolution solution);
    public BeControl GetControl(IIconHost iconHost, Lifetime lifetime);
    public static Conflict Create(string description, ConflictSeverity severity, Object[] parms);
    public static Conflict Create(ISolution solution, string description, ConflictSeverity severity, Object[] parms);
    public static Conflict Create(ISolution solution, string text, ConflictSeverity severity, DocumentRange range, ConflictType type);
    public static Conflict Create(string text, ConflictSeverity severity, IOccurrence occurrence, ConflictType type);
    private static Conflict Create(ISolution solution, string text, ConflictSeverity severity, ConflictType type, Object[] parms);
    private static Conflict Create(ISolution solution, string text, ConflictSeverity severity, ConflictType type, IConflictData conflictData, Object[] parms);
    public static Conflict Create(string description, ConflictSeverity severity, string customGroupText);
    public static Conflict Create(IDeclaredElement declaredElement, ConflictType conflictType, ConflictSeverity severity, string tag);
    [PureAttribute]
public static Conflict Create(IDeclaredElement declaredElement, string conflictDescription, ConflictSeverity severity, ConflictType conflictType, IConflictData conflictData);
    public static Conflict Create(ITreeNode element, ConflictType conflictType, ConflictSeverity severity, string tag);
    public static Conflict Create(ITreeNode element, string text, ConflictSeverity severity, ConflictType conflictType, IConflictData conflictData);
    public static Conflict Create(IReference element, ConflictType conflictType, ConflictSeverity severity, string tag);
    public static Conflict Create(IReference element, string text, ConflictSeverity severity, ConflictType conflictType, IConflictData conflictData);
    public static Conflict HierarchyConflict(string description, IDeclaredElement first, IDeclaredElement second, ConflictSeverity severity);
    public static Conflict UnsupportedLanguage(ITreeNode element, string presentation, string additionalDescription, ConflictSeverity severity);
    public static Conflict UnsupportedLanguage(IDeclaredElement element, string presentation, string additionalDescription);
    public IEnumerable`1<IOccurrence> GetOccurrences(ISolution solution);
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<Conflict> get_ConflictComparer();
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.ConflictData.IConflictData {
    [CanBeNullAttribute]
public abstract virtual TResult Accept(IConflictDataVisitor`1<TResult> visitor);
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.ConflictData.IConflictDataVisitor`1 {
    public abstract virtual TResult Visit(UnsupportedLanguageConflictData unsupportedLanguageConflictData);
    public abstract virtual TResult Visit(IncompatibleLanguagesConflictData incompatibleLanguagesConflictData);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.ConflictData.IncompatibleLanguagesConflictData : object {
    [CompilerGeneratedAttribute]
private PsiLanguageType <DeclarationLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private PsiLanguageType <UsageLanguage>k__BackingField;
    public PsiLanguageType DeclarationLanguage { get; }
    public PsiLanguageType UsageLanguage { get; }
    public IncompatibleLanguagesConflictData(PsiLanguageType declarationLanguage, PsiLanguageType usageLanguage);
    [CompilerGeneratedAttribute]
public PsiLanguageType get_DeclarationLanguage();
    [CompilerGeneratedAttribute]
public PsiLanguageType get_UsageLanguage();
    public sealed virtual TResult Accept(IConflictDataVisitor`1<TResult> visitor);
    public virtual int GetHashCode();
    public virtual bool Equals(object other);
    private bool Equals(IncompatibleLanguagesConflictData other);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.ConflictData.UnsupportedLanguageConflictData : object {
    [CompilerGeneratedAttribute]
private PsiLanguageType <Language>k__BackingField;
    public PsiLanguageType Language { get; }
    public UnsupportedLanguageConflictData(PsiLanguageType language);
    [CompilerGeneratedAttribute]
public PsiLanguageType get_Language();
    public sealed virtual TResult Accept(IConflictDataVisitor`1<TResult> visitor);
    public virtual int GetHashCode();
    public virtual bool Equals(object other);
    private bool Equals(UnsupportedLanguageConflictData other);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.ConflictSearchResult : object {
    [CompilerGeneratedAttribute]
private bool <Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PerformedRefactoring>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IConflict> <Conflicts>k__BackingField;
    public static ConflictSearchResult Empty;
    public bool Failed { get; private set; }
    public bool PerformedRefactoring { get; }
    [NotNullAttribute]
public IEnumerable`1<IConflict> Conflicts { get; }
    public ConflictSearchResult(IEnumerable`1<IConflict> conflicts);
    public ConflictSearchResult(bool performedRefactoring, IEnumerable`1<IConflict> conflicts);
    private static ConflictSearchResult();
    [CompilerGeneratedAttribute]
public bool get_Failed();
    [CompilerGeneratedAttribute]
private void set_Failed(bool value);
    [CompilerGeneratedAttribute]
public bool get_PerformedRefactoring();
    [CompilerGeneratedAttribute]
public IEnumerable`1<IConflict> get_Conflicts();
    public static ConflictSearchResult CreateFailedResult();
}
public enum JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.ConflictSeverity : Enum {
    public int value__;
    public static ConflictSeverity Warning;
    public static ConflictSeverity Error;
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.ConflictsPageHolder : object {
    public sealed virtual IRefactoringPage CreateConflictsPage(Lifetime lifetime, ISolution solution, IEnumerable`1<IConflict> conflicts);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.ConflictsRefactoringPage : SingleBeRefactoringPage {
    private IEnumerable`1<IConflict> myConflicts;
    [CanBeNullAttribute]
private ISolution mySolution;
    private static string TitleString;
    [CompilerGeneratedAttribute]
private string <PageDescription>k__BackingField;
    public string PageDescription { get; }
    public ConflictsRefactoringPage(IEnumerable`1<IConflict> conflicts, Lifetime lifetime, ISolution solution);
    private static ConflictsRefactoringPage();
    [CompilerGeneratedAttribute]
public virtual string get_PageDescription();
    public virtual BeControl GetPageContent();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IOccurrence> <GetPageContent>b__7_0(Conflict c);
}
public enum JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.ConflictType : Enum {
    public int value__;
    public static ConflictType DEFAULT_CONFLICT;
    public static ConflictType TEXT_ONLY;
    public static ConflictType INVALID;
    [LocalizedDescriptionAttribute("Conflict with {0}")]
public static ConflictType DEFAULT_ELEMENT_CONFLICT;
    [LocalizedDescriptionAttribute("{0} with the same name already exists.")]
public static ConflictType SAME_NAME_CONFLICT;
    [LocalizedDescriptionAttribute("{0} cannot be updated correctly")]
public static ConflictType CANNOT_UPDATE_USAGE_CONFLICT;
    [LocalizedDescriptionAttribute("{0} cannot be removed.")]
public static ConflictType CANNOT_REMOVE;
    [LocalizedDescriptionAttribute("{0} cannot be deleted safely.")]
public static ConflictType CANNOT_DELETE_SAFELY;
    [LocalizedDescriptionAttribute("{0} cannot be inlined.")]
public static ConflictType CANNOT_INLINE_USAGE_CONFLICT;
    [LocalizedDescriptionAttribute("Access rights for {0} will be extended.")]
public static ConflictType WILL_BE_MADE_PUBLIC;
    [LocalizedDescriptionAttribute("{0} will be removed.")]
public static ConflictType WILL_BE_REMOVED;
    [LocalizedDescriptionAttribute("{0} will not be accessible.")]
public static ConflictType NOT_ACCESSIBLE;
    public static ConflictType HIERARCHY_CONFLICT;
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.DrivenRefactoringConflictSearcher : object {
    private DrivenRefactoringWorkflow myWorkflow;
    [CompilerGeneratedAttribute]
private ConflictSearchResult <LastResult>k__BackingField;
    public ConflictSearchResult LastResult { get; private set; }
    public DrivenRefactoringConflictSearcher(DrivenRefactoringWorkflow workflow);
    public sealed virtual ConflictSearchResult SearchConflicts(IProgressIndicator pi, bool canPerformRefactoring);
    [CompilerGeneratedAttribute]
public sealed virtual ConflictSearchResult get_LastResult();
    [CompilerGeneratedAttribute]
private void set_LastResult(ConflictSearchResult value);
}
public abstract class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.HierarchyConflict : object {
    [CanBeNullAttribute]
public abstract virtual IConflict CreateConflict(HierarchyConflictTextProviderBase textProvider);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.HierarchyConflictConsumer : object {
    private List`1<HierarchyConflict> myHierarchyConflicts;
    public List`1<HierarchyConflict> MyHierarchyConflicts { get; }
    public List`1<HierarchyConflict> get_MyHierarchyConflicts();
    public bool AddConflictsForHierarchyMember(HierarchyMember member);
}
public abstract class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.HierarchyConflictTextProviderBase : object {
    public string OverriedFromCompiledCode(string kindName);
    public string ImplementsFromCompiledInterface(string kindName);
    public string OverriddenInCompiledCode(string kindName);
    public string ImplementedInCompiledCode(string kindName);
    public abstract virtual string WillAlsoOverride();
    public abstract virtual string WillAlsoImplement();
    public abstract virtual string QuasiImplements();
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.IConflict {
    public bool IsValid { get; }
    public string Description { get; }
    public ConflictSeverity Severity { get; }
    [CanBeNullAttribute]
public IConflictData ConflictData { get; }
    public abstract virtual bool get_IsValid();
    public abstract virtual string get_Description();
    public abstract virtual ConflictSeverity get_Severity();
    public abstract virtual IConflictData get_ConflictData();
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.IConflictSearcher {
    [NotNullAttribute]
public ConflictSearchResult LastResult { get; }
    [NotNullAttribute]
public abstract virtual ConflictSearchResult SearchConflicts(IProgressIndicator progressIndicator, bool canPerformRefactoring);
    public abstract virtual ConflictSearchResult get_LastResult();
}
internal class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.NavigationPoints.ActionNavigationPoint : object {
    private Action myAction;
    private ISolution mySolution;
    [CompilerGeneratedAttribute]
private Conflict <Conflict>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConflictText>k__BackingField;
    [CompilerGeneratedAttribute]
private OccurrencePresentationOptions <PresentationOptions>k__BackingField;
    public Conflict Conflict { get; }
    public string ConflictText { get; }
    public OccurrenceType OccurrenceType { get; }
    public bool IsValid { get; }
    public OccurrencePresentationOptions PresentationOptions { get; public set; }
    public ActionNavigationPoint(Action action, ISolution solution, string conflictText, Conflict conflict);
    [CompilerGeneratedAttribute]
public sealed virtual Conflict get_Conflict();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConflictText();
    public sealed virtual bool Navigate(ISolution solution, PopupWindowContextSource windowContext, bool transferFocus, TabOptions tabOptions);
    public sealed virtual ISolution GetSolution();
    public sealed virtual OccurrenceType get_OccurrenceType();
    public sealed virtual bool get_IsValid();
    public sealed virtual string DumpToString();
    [CompilerGeneratedAttribute]
public sealed virtual OccurrencePresentationOptions get_PresentationOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PresentationOptions(OccurrencePresentationOptions value);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.NavigationPoints.CompiledDeclaredElementNavigationPoint : CompiledElementOccurrence {
    [CompilerGeneratedAttribute]
private Conflict <Conflict>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConflictText>k__BackingField;
    public Conflict Conflict { get; }
    public string ConflictText { get; }
    public CompiledDeclaredElementNavigationPoint(ICompiledElement navigationObject, string conflictText, Conflict conflict);
    [CompilerGeneratedAttribute]
public sealed virtual Conflict get_Conflict();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConflictText();
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.NavigationPoints.ConflictPart : object {
    [CompilerGeneratedAttribute]
private string <ConflictText>k__BackingField;
    public string ConflictText { get; }
    public ConflictPart(string conflictText);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConflictText();
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.NavigationPoints.ConflictTextOccurrence : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    private ISolution mySolution;
    [CompilerGeneratedAttribute]
private OccurrenceType <OccurrenceType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private OccurrencePresentationOptions <PresentationOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Conflict <Conflict>k__BackingField;
    public string Text { get; }
    public OccurrenceType OccurrenceType { get; }
    public bool IsValid { get; }
    public OccurrencePresentationOptions PresentationOptions { get; public set; }
    public Conflict Conflict { get; }
    public ConflictTextOccurrence(string text, ISolution solution, Conflict conflict);
    [CompilerGeneratedAttribute]
public string get_Text();
    public sealed virtual bool Navigate(ISolution solution, PopupWindowContextSource windowContext, bool transferFocus, TabOptions tabOptions);
    public sealed virtual ISolution GetSolution();
    [CompilerGeneratedAttribute]
public sealed virtual OccurrenceType get_OccurrenceType();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsValid();
    public sealed virtual string DumpToString();
    [CompilerGeneratedAttribute]
public sealed virtual OccurrencePresentationOptions get_PresentationOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PresentationOptions(OccurrencePresentationOptions value);
    [CompilerGeneratedAttribute]
public sealed virtual Conflict get_Conflict();
}
[SolutionFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.NavigationPoints.ConflictTextOccurrenceInfoProvider : object {
    public sealed virtual IDeclaredElementEnvoy GetTypeMember(IOccurrence occurrence);
    public sealed virtual IDeclaredElementEnvoy GetTypeElement(IOccurrence occurrence);
    public sealed virtual IDeclaredElementEnvoy GetNamespace(IOccurrence occurrence);
    public sealed virtual OccurrenceMergeContext GetMergeContext(IOccurrence occurrence);
    public sealed virtual TextRange GetTextRange(IOccurrence occurrence);
    public sealed virtual ProjectModelElementEnvoy GetProjectModelElementEnvoy(IOccurrence occurrence);
    public sealed virtual SourceFilePtr GetSourceFilePtr(IOccurrence occurrence);
    public sealed virtual bool IsApplicable(IOccurrence occurrence);
}
internal class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.NavigationPoints.DeclaredElementNavigationPoint : DeclaredElementOccurrence {
    [CompilerGeneratedAttribute]
private Conflict <Conflict>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConflictText>k__BackingField;
    public Conflict Conflict { get; public set; }
    public string ConflictText { get; public set; }
    public DeclaredElementNavigationPoint(IDeclaredElement navigationObject, string conflictText, Conflict conflict);
    [CompilerGeneratedAttribute]
public sealed virtual Conflict get_Conflict();
    [CompilerGeneratedAttribute]
public void set_Conflict(Conflict value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConflictText();
    [CompilerGeneratedAttribute]
public void set_ConflictText(string value);
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.NavigationPoints.IConflictOccurrence {
    public Conflict Conflict { get; }
    public abstract virtual Conflict get_Conflict();
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.NavigationPoints.IConflictPart {
    public string ConflictText { get; }
    public abstract virtual string get_ConflictText();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.NavigationPoints.NavigationPoint : object {
    [ExtensionAttribute]
public static BeControl GetControl(IConflictPart part, Lifetime lifetime);
    public static IConflictPart Create(object parms, string conflictText, ISolution solution, Conflict conflict);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.NavigationPoints.NavigationPointEx : object {
    [ExtensionAttribute]
public static IProjectItem TryGetProjectItem(Conflict conflict);
    [ExtensionAttribute]
public static IDeclaredElement TryGetDeclaredElement(IConflictOccurrence conflict);
}
internal class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.NavigationPoints.ProjectItemNavigationPoint : ProjectItemOccurrence {
    [CompilerGeneratedAttribute]
private Conflict <Conflict>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConflictText>k__BackingField;
    public Conflict Conflict { get; }
    public string ConflictText { get; }
    public ProjectItemNavigationPoint(IProjectItem navigationObject, string conflictText, Conflict conflict);
    [CompilerGeneratedAttribute]
public sealed virtual Conflict get_Conflict();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConflictText();
}
internal class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.NavigationPoints.RangeNavigationPoint : RangeOccurrence {
    [CompilerGeneratedAttribute]
private Conflict <Conflict>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConflictText>k__BackingField;
    public Conflict Conflict { get; }
    public string ConflictText { get; }
    public RangeNavigationPoint(DocumentRange navigationObject, ISolution solution, string conflictText, Conflict conflict);
    [CompilerGeneratedAttribute]
public sealed virtual Conflict get_Conflict();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConflictText();
}
internal class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.NavigationPoints.RangeOccurrenceNavigationPoint : RangeOccurrence {
    [CompilerGeneratedAttribute]
private string <ConflictText>k__BackingField;
    [CompilerGeneratedAttribute]
private Conflict <Conflict>k__BackingField;
    public string ConflictText { get; }
    public Conflict Conflict { get; }
    public RangeOccurrenceNavigationPoint(RangeOccurrence navigationObject, string conflictText, Conflict conflict);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConflictText();
    [CompilerGeneratedAttribute]
public sealed virtual Conflict get_Conflict();
}
internal class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.NavigationPoints.ReferenceNavigationPoint : ReferenceOccurrence {
    private IReference myNavigationObject;
    [CompilerGeneratedAttribute]
private Conflict <Conflict>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConflictText>k__BackingField;
    public Conflict Conflict { get; }
    public string ConflictText { get; }
    public ReferenceNavigationPoint(IReference navigationObject, string conflictText, Conflict conflict);
    [CompilerGeneratedAttribute]
public sealed virtual Conflict get_Conflict();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConflictText();
    public IDeclaredElement TryGetDeclaredElement();
}
internal class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.NavigationPoints.TreeNodeNavigationPoint : RangeOccurrence {
    private ITreeNode myNavigationObject;
    [CompilerGeneratedAttribute]
private Conflict <Conflict>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConflictText>k__BackingField;
    public Conflict Conflict { get; }
    public string ConflictText { get; }
    public TreeNodeNavigationPoint(ITreeNode navigationObject, string conflictText, Conflict conflict);
    [CompilerGeneratedAttribute]
public sealed virtual Conflict get_Conflict();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConflictText();
    public IDeclaredElement TryGetDeclaredElement();
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.Occurrences.ConflictDeclaredElementTypeOccurrence : DeclaredElementOccurrence {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private ConflictSeverity <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private ConflictType <Type>k__BackingField;
    public string Text { get; }
    public ConflictSeverity Severity { get; }
    public ConflictType Type { get; }
    public ConflictDeclaredElementTypeOccurrence(ConflictType conflictType, string conflictText, IDeclaredElement declaredElement, ConflictSeverity severity);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual ConflictSeverity get_Severity();
    [CompilerGeneratedAttribute]
public sealed virtual ConflictType get_Type();
    protected bool Equals(ConflictDeclaredElementTypeOccurrence other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.Occurrences.ConflictOccurrencesDescriptor : OccurrenceBrowserDescriptor {
    private ConflictPresenter myConflictPresenter;
    [CompilerGeneratedAttribute]
private bool <QuickSearchSupported>k__BackingField;
    public TreeModel Model { get; }
    public bool QuickSearchSupported { get; }
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> Presenter { get; }
    public ConflictOccurrencesDescriptor(ISolution solution, Lifetime lifetime, List`1<IOccurrence> occurrences);
    public virtual TreeModel get_Model();
    [CompilerGeneratedAttribute]
public virtual bool get_QuickSearchSupported();
    public virtual bool ExpandNodeInitially(TreeModelNode modelNode);
    protected virtual IEqualityComparer`1<object> CreateEqualityComparer();
    protected virtual IComparer`1<TreeModelNode> CreateComparer();
    public virtual StructuredPresenter`2<TreeModelNode, IPresentableItem> get_Presenter();
}
internal class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.Occurrences.ConflictPresenter : OccurrenceBrowserPresenter {
    public ConflictPresenter(ISolution solution, IOccurrenceBrowserPresenterContext context);
    private void PresentConflictText(ConflictTextOccurrence value, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    private void PresentConflict(IConflict value, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    private void PresentConflictType(IConflictTypeOccurrence value, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.Occurrences.ConflictsGroupingProvider : OccurrenceBrowserGroupingProvider {
    private static TreeModelGrouping`1[] ourGroupings;
    private static ConflictsGroupingProvider();
    public virtual ICollection`1<TreeModelGrouping`1<IOccurrence>> GetGroupings(TreeModelBrowserDescriptorBase descriptor);
    public virtual bool IsApplicable(TreeModelBrowserDescriptorBase descriptor);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.Occurrences.ConflictTypeGroupComparer : OccurrenceComparer {
    private static ConflictTypeGroupComparer ourInstance;
    private ConflictTypeGroupComparer(ISolution solution);
    [NotNullAttribute]
public static ConflictTypeGroupComparer GetInstance(ISolution solution, Lifetime lifetimeDefinitionLifetime);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.Occurrences.ConflictTypeOccurrence : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private ConflictSeverity <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private ConflictType <Type>k__BackingField;
    public string Text { get; }
    public ConflictSeverity Severity { get; }
    public ConflictType Type { get; }
    public ConflictTypeOccurrence(ConflictType type, string conflictText, ConflictSeverity severity);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual ConflictSeverity get_Severity();
    [CompilerGeneratedAttribute]
public sealed virtual ConflictType get_Type();
    protected bool Equals(ConflictTypeOccurrence other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.Occurrences.IConflictTypeOccurrence {
    public ConflictType Type { get; }
    public string Text { get; }
    public ConflictSeverity Severity { get; }
    public abstract virtual ConflictType get_Type();
    public abstract virtual string get_Text();
    public abstract virtual ConflictSeverity get_Severity();
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.Reporting.ConflictDataStatisticEntryEnricher : object {
    public sealed virtual JObject Visit(UnsupportedLanguageConflictData unsupportedLanguageConflictData);
    public sealed virtual JObject Visit(IncompatibleLanguagesConflictData incompatibleLanguagesConflictData);
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.Reporting.IRefactoringConflictsReporter {
    public abstract virtual void ReportConflicts(string refactoringName, IConflict[] conflicts);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Conflicts.Reporting.RefactoringConflictsReporter : object {
    private JArray myRefactoringConflicts;
    private JObject myLog;
    private ConflictDataStatisticEntryEnricher myEnricher;
    public void ProcessSolutionStatistics(JObject log);
    public sealed virtual void ReportConflicts(string refactoringName, IConflict[] conflicts);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.ConstructionUtil : object {
    [NullableAttribute("2")]
private IRefactoringDriver myDriver;
    [NullableContextAttribute("2")]
private ConstructionUtil(IRefactoringDriver driver);
    public static ConstructionUtil Get(PsiLanguageType languageType);
    public static ConstructionUtil GetInstance(IRefactoringDriver driver);
    public virtual ITypeElement AddClassBefore(string className, IDeclaration tag, bool topLevel, bool isClass);
    public virtual ITypeElement AddClassBeforeFromMember(string className, ITypeMember typeMember, bool topLevel, bool isClass);
    public virtual bool CanChangeAccessRights(IDeclaredElement declaredElement);
    public virtual void SetAccessRights(IDeclaredElement owner, AccessRights rights);
    public virtual IDeclaration AddTypeParameter(ITypeElement class, string name, ITypeParameter originalTypeParameter);
    public virtual ITypeParameter AddTypeParameter(IDeclaration declaration, string shortName);
    public virtual IDeclaration AddField(ITypeElement class, NameRoot name, IType type, IDeclaration tag, AccessRights accessRights, JetHashSet`1<string> namesSet);
    public virtual IDeclaration AddProperty(ITypeElement class, IDeclaration fieldDeclaration, NameRoot basicName, IDeclaration tag, bool isWritable, AccessRights accessRights, JetHashSet`1<string> namesSet);
    public virtual IDeclaration AddEmptyConstructor(ITypeElement class, IDeclaration tag);
    public virtual void InitElementInConstructor(IDeclaration constructorDecl, IDeclaration field, IParameter name);
    public virtual void InitElementInConstructor(IDeclaration constructorDecl, IDeclaration field, string name, DefaultValue defaultValue);
    public virtual IParameter AddFirstParameter(IParametersOwner owner, string name, IDeclaredType type);
    public virtual void RemoveParameter(IParametersOwner owner, IParameter parameter);
    public virtual void ChangeToOrFromExtension(IMethod method, bool addThis, IRefactoringDriver driver);
    public virtual ITypeMember AddTypeMemberDeclaration(ITypeElement element, IDeclaration declaration, IDeclaration tag, bool after);
    public virtual bool TryProcessMultiDeclarationForResolve(IRecursiveElementProcessor processor, IDeclaration declaration);
    public virtual void RemoveTypeMember(ITypeMemberDeclaration member);
    public virtual void RemoveFunction(IDeclaration element);
    public string GetUniqueName(NameRoot root, ISolution solution, PsiLanguageType language, JetHashSet`1<string> namesSet, NamedElementKinds kind, IPsiSourceFile sourceFile);
    protected virtual bool IsInCollection(JetHashSet`1<string> namesSet, string fieldName);
    protected virtual void AddToCollection(JetHashSet`1<string> namesSet, string fieldName);
    public virtual IParameter AddLastParameter(IParametersOwner owner, string name, IType type);
    public virtual IDeclaration AddAutoProperty(ITypeElement class, IType type, NameRoot basicName, IDeclaration tag, bool isWritable, AccessRights accessRights, JetHashSet`1<string> namesSet);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.ConstructorsMap : object {
    [NotNullAttribute]
private IRefactoringDriver myDriver;
    [NotNullAttribute]
private Dictionary`2<PsiLanguageType, ConstructionUtil> myMap;
    [NotNullAttribute]
public ConstructionUtil Item { get; }
    public ConstructorsMap(IRefactoringDriver driver);
    public ConstructionUtil get_Item(PsiLanguageType language);
}
public static class JetBrains.ReSharper.Feature.Services.Refactorings.DataModels.IconsUtil : object {
    [CanBeNullAttribute]
public static IconId GetDeclaredElementIcon(IDeclaredElement declaredElement);
    [CanBeNullAttribute]
public static IconModel GetDeclaredElementIconModel(IDeclaredElement declaredElement);
    public static IconId GetOverridableMemberIcon(IOverridableMember overridableMember);
    public static IconId GetTreeNodeIcon(ReferenceAccessType accessType);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.DataModels.RefactoringsDefaultModels.DeclaredElementNode : object {
    [CanBeNullAttribute]
private IDeclaredElementPointer`1<IDeclaredElement> myPointer;
    [CanBeNullAttribute]
private IDeclaredElement myDeclaredElement;
    [CompilerGeneratedAttribute]
private List`1<ITreeGridNode> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Included>k__BackingField;
    [CanBeNullAttribute]
public IDeclaredElement DeclaredElement { get; }
    public List`1<ITreeGridNode> Children { get; public set; }
    public bool Included { get; public set; }
    public DeclaredElementNode(IDeclaredElement element);
    public IDeclaredElement get_DeclaredElement();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<ITreeGridNode> get_Children();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Children(List`1<ITreeGridNode> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Included();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Included(bool value);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.DataModels.RefactoringsDefaultModels.InvalidElementPointerException : Exception {
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.DataModels.RefactoringsDefaultModels.ITreeGridNode {
    public List`1<ITreeGridNode> Children { get; public set; }
    public bool Included { get; public set; }
    public abstract virtual List`1<ITreeGridNode> get_Children();
    public abstract virtual void set_Children(List`1<ITreeGridNode> value);
    public abstract virtual bool get_Included();
    public abstract virtual void set_Included(bool value);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.DataModels.RefactoringsDefaultModels.ParameterElement : DeclaredElementNode {
    private IconId myParameterIcon;
    [CompilerGeneratedAttribute]
private IParameter <Parameter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private DefaultValue <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterModifier <Modifier>k__BackingField;
    public IParameter Parameter { get; }
    public int Index { get; public set; }
    public string Name { get; protected set; }
    public IType Type { get; protected set; }
    public DefaultValue DefaultValue { get; }
    public ParameterModifier Modifier { get; public set; }
    public ParameterElement(IParameter parameter);
    [CompilerGeneratedAttribute]
public IParameter get_Parameter();
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public IType get_Type();
    [CompilerGeneratedAttribute]
protected void set_Type(IType value);
    [CompilerGeneratedAttribute]
public DefaultValue get_DefaultValue();
    [CompilerGeneratedAttribute]
public ParameterModifier get_Modifier();
    [CompilerGeneratedAttribute]
public void set_Modifier(ParameterModifier value);
    protected virtual BeControl GetKindDescriptions(Lifetime lifetime);
    public virtual List`1<BeControl> GetLine(Lifetime lifetime, IPsiSourceFile psiSourceFile, Action previewUpdate);
    public virtual List`1<BeControl> GetLine(Lifetime lifetime);
    public ValueTuple`2<StringBuilder, StringBuilder> GetModifiersFormatString();
    protected ValueTuple`2<StringBuilder, StringBuilder> GetModifiersFormatString(IParameter parameter);
}
public enum JetBrains.ReSharper.Feature.Services.Refactorings.DataModels.RefactoringsDefaultModels.ParameterModifier : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("ref")]
public static ParameterModifier Ref;
    [LocalizedDescriptionAttribute("out")]
public static ParameterModifier Out;
    [LocalizedDescriptionAttribute("")]
public static ParameterModifier None;
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.DataModels.RefactoringsDefaultModels.TreeNodeNode : object {
    [CompilerGeneratedAttribute]
private ITreeNode <treeNode>P;
    private ITreeNodePointer`1<ITreeNode> myPointer;
    [CompilerGeneratedAttribute]
private ReferenceAccessType <AccessType>k__BackingField;
    [CompilerGeneratedAttribute]
private IReference <Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ITreeGridNode> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Included>k__BackingField;
    public ReferenceAccessType AccessType { get; protected set; }
    [CanBeNullAttribute]
public IReference Reference { get; protected set; }
    [CanBeNullAttribute]
public ITreeNode TreeNode { get; }
    public List`1<ITreeGridNode> Children { get; public set; }
    public bool Included { get; public set; }
    public TreeNodeNode(ITreeNode treeNode);
    public TreeNodeNode(IReference reference, bool keepReference);
    [CompilerGeneratedAttribute]
public ReferenceAccessType get_AccessType();
    [CompilerGeneratedAttribute]
protected void set_AccessType(ReferenceAccessType value);
    [CompilerGeneratedAttribute]
public IReference get_Reference();
    [CompilerGeneratedAttribute]
protected void set_Reference(IReference value);
    public ITreeNode get_TreeNode();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<ITreeGridNode> get_Children();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Children(List`1<ITreeGridNode> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Included();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Included(bool value);
}
public static class JetBrains.ReSharper.Feature.Services.Refactorings.DataModels.StringToPsiUtil : object {
    [NullableContextAttribute("2")]
[PureAttribute]
public static ITypeElement TryGetTypeElement(string targetText, PsiLanguageType psiLanguageType, ISolution solution, IPsiModule psiModule);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.DataTuple : Tuple`2<string, object> {
    public DataTuple(string name, object value);
}
public abstract class JetBrains.ReSharper.Feature.Services.Refactorings.DrivenRefactoringBase`1 : object {
    [NotNullAttribute]
private TWorkflow myWorkflow;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
protected IRefactoringDriver myDriver;
    [NotNullAttribute]
public IRefactoringDriver Driver { get; }
    [NotNullAttribute]
public ISolution Solution { get; }
    [NotNullAttribute]
public TWorkflow Workflow { get; }
    protected DrivenRefactoringBase`1(TWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public IRefactoringDriver get_Driver();
    public ISolution get_Solution();
    public TWorkflow get_Workflow();
    public abstract virtual bool Execute(IProgressIndicator pi);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.Refactorings.DrivenRefactoringWorkflow : RefactoringWorkflowBase {
    private DrivenRefactoringConflictSearcher myDrivenConflictSearcher;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ActionId>k__BackingField;
    [CompilerGeneratedAttribute]
private RefactoringDriverStorage <Storage>k__BackingField;
    [NullableAttribute("2")]
public string ActionId { get; }
    public RefactoringDriverStorage Storage { get; }
    [NullableAttribute("2")]
public IconId Icon { get; }
    public IPsiServices PsiServices { get; }
    [NullableAttribute("2")]
public IConflictSearcher ConflictSearcher { get; }
    public bool HasUI { get; }
    protected DrivenRefactoringWorkflow(ISolution solution, string actionId);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_ActionId();
    [CompilerGeneratedAttribute]
public RefactoringDriverStorage get_Storage();
    [NullableContextAttribute("2")]
public virtual IconId get_Icon();
    public abstract virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
    public IPsiServices get_PsiServices();
    public virtual bool Validate();
    public virtual bool Execute(IProgressIndicator progressIndicator);
    public virtual bool PostExecute(IProgressIndicator pi);
    public virtual bool PreExecute(IProgressIndicator pi);
    [NullableContextAttribute("2")]
public virtual IConflictSearcher get_ConflictSearcher();
    public virtual bool get_HasUI();
}
public abstract class JetBrains.ReSharper.Feature.Services.Refactorings.DrivenRefactoringWorkflow2`1 : DrivenRefactoringWorkflow {
    [NotNullAttribute]
private ConcurrentDictionary`2<PsiLanguageType, TLanguageService> myData;
    [CanBeNullAttribute]
private TLanguageService myDefaultValue;
    [NotNullAttribute]
public ILanguageMapOfWorkflow`1<TLanguageService> Helper { get; }
    private TLanguageService JetBrains.ReSharper.Feature.Services.Refactorings.ILanguageMapOfWorkflow<TLanguageService>.Item { get; }
    protected DrivenRefactoringWorkflow2`1(ISolution solution, string actionId);
    public ILanguageMapOfWorkflow`1<TLanguageService> get_Helper();
    private sealed virtual override TLanguageService JetBrains.ReSharper.Feature.Services.Refactorings.ILanguageMapOfWorkflow<TLanguageService>.get_Item(PsiLanguageType language);
    protected abstract virtual TLanguageService CreateUnsupportedHelper();
    [CanBeNullAttribute]
protected abstract virtual TLanguageService CreateHelper(IRefactoringLanguageService service);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Refactorings.EventBusExtensions : object {
    [ExtensionAttribute]
public static void RefactoringDetails(IEventBus bus, IRefactoringWorkflow workflow, DataTuple[] properties);
}
[ActionAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "RefactoringsDeferredRenameActionText")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.ExecuteDeferredRenameAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public abstract class JetBrains.ReSharper.Feature.Services.Refactorings.ExtensibleRefactoringAction`1 : ExtensibleAction`3<TRefactoringWorkflowProvider, IRefactoringWorkflow, RefactoringActionGroup> {
    protected bool AssertsMenuItemsMnemonics { get; }
    protected bool ShowMenuWithOneItem { get; }
    protected virtual IconId GetGroupIcon(IDataContext dataContext);
    protected virtual ICollection`1<TRefactoringWorkflowProvider> GetWorkflowProviders();
    protected virtual void Execute(IDataContext context, IRefactoringWorkflow refactoringWorkflow);
    protected virtual bool IsAvailable(IDataContext context, IRefactoringWorkflow refactoringWorkflow);
    protected virtual bool IsEnabled(IDataContext context, IRefactoringWorkflow workflow);
    protected virtual bool get_AssertsMenuItemsMnemonics();
    protected virtual bool get_ShowMenuWithOneItem();
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.FunctionWrapper`1 : object {
    private Func`2<IProgressIndicator, TReturn> myAction;
    private WorkflowExecuter myExecuter;
    [CompilerGeneratedAttribute]
private TReturn <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FailedInternal>k__BackingField;
    public TReturn Result { get; private set; }
    public bool FailedInternal { get; private set; }
    public FunctionWrapper`1(Func`2<IProgressIndicator, TReturn> action, WorkflowExecuter executer);
    [CompilerGeneratedAttribute]
public TReturn get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(TReturn value);
    [CompilerGeneratedAttribute]
public bool get_FailedInternal();
    [CompilerGeneratedAttribute]
private void set_FailedInternal(bool value);
    public void ExecuteAction(IProgressIndicator pi);
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.IActionResult {
    public string ResultText { get; }
    public bool IsFinished { get; }
    public bool IsAggressive { get; }
    public bool Continue { get; }
    public string Title { get; }
    public IProperty`1<int> StartedSearchesNumber { get; public set; }
    public abstract virtual string get_ResultText();
    public abstract virtual bool get_IsFinished();
    public abstract virtual bool get_IsAggressive();
    public abstract virtual bool get_Continue();
    public abstract virtual string get_Title();
    public abstract virtual IProperty`1<int> get_StartedSearchesNumber();
    public abstract virtual void set_StartedSearchesNumber(IProperty`1<int> value);
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.IAsyncWorkflow {
    public RefactoringNotificationModel Model { get; }
    public IActionResult ActionResult { get; }
    public abstract virtual RefactoringNotificationModel get_Model();
    public abstract virtual IActionResult get_ActionResult();
    public abstract virtual void PreExecuteAsync();
    public abstract virtual bool ShouldBeCancelled(IRefactoringWorkflow refactoringWorkflow);
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.IConflictsPageHolder {
    public abstract virtual IRefactoringPage CreateConflictsPage(Lifetime lifetime, ISolution solution, IEnumerable`1<IConflict> conflicts);
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.IDataModel {
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.IDataProvider {
    public bool NonInteractive { get; }
    public abstract virtual bool get_NonInteractive();
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.IDrivenRefactoringExec {
    public abstract virtual void SetExecuter(IRefactoringExecuter executer);
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.IEditorUIRefactoringPage {
    public bool CanShowEditorUI { get; }
    public abstract virtual bool get_CanShowEditorUI();
    public abstract virtual void ShowEditorUI(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CommitEditorUIForm(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CommitEditorUIForm(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CancelEditorUIForm(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CancelEditorUIForm(EventHandler value);
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.IFrontendTextOccurrenceRenameMarker {
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.IInitialDataModel`2 {
    public abstract virtual TDataModel GetDataModel(TUserDataModel userDataModel);
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.IInplaceRenameLanguageSpecifics {
    public abstract virtual bool SuggestRenameOnRenamingReference(IReference reference);
    public abstract virtual bool SuggestRenameOnRenamingTreeNode(TreeTextRange treeRange, ITreeNode node);
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.ReSharper.Feature.Services.Refactorings.ILanguageMapOfWorkflow`1 {
    [NotNullAttribute]
public TWorkflowExec Item { get; }
    public abstract virtual TWorkflowExec get_Item(PsiLanguageType language);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Resources.Settings.CodeStyleSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "IntroduceLocalVariableRefactoringSettingsRegardingTheUseOfThevarKeywordRatherThanExplicitTypeSettingDescription")]
[ObsoleteAttribute("Use language-specific code style settings")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.IntroduceVariableUseVarSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "IntroduceVariablesWithvarTypeWhenTheTypeIsEvidentFromTheAssignedValueEGNewClauseSettingDescription")]
public bool UseVarForIntroduceVariableRefactoringEvident;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "IntroduceVariablesWithvarTypeWhenTheTypeIsNOTEvidentFromTheAssignedValueSettingDescription")]
public bool UseVarForIntroduceVariableRefactoring;
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringActionHostProvider {
    public IProperty`1<bool> IsApplicable { get; }
    public abstract virtual void ExecuteRefactoring(IDataContext context, IRefactoringWorkflow workflow);
    public abstract virtual IProperty`1<bool> get_IsApplicable();
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringDataConstantsService {
    public abstract virtual bool IsNameNodeSelected(ITreeNode node, DocumentRange documentRange);
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringDriver {
    public abstract virtual void AddConflict(IConflict conflict);
    public abstract virtual void AddLateConflict(Func`1<IConflict> conflict, string id);
    [CanBeNullAttribute]
public abstract virtual IList`1<IReference> Get(Key key);
    [CanBeNullAttribute]
public abstract virtual IList`1<IReference> Get(Key key, Func`1<IList`1<IReference>> generator);
    public abstract virtual void Set(Key key, IList`1<IReference> references);
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringExec {
    [NotNullAttribute]
unknown IRefactoringDriver RefactoringDriver {public set; }
    public abstract virtual void set_RefactoringDriver(IRefactoringDriver value);
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringExecuter {
    public abstract virtual bool Execute(IProgressIndicator pi);
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringLanguageService {
    public abstract virtual bool IsAvailable();
}
internal interface JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringOperation {
    public abstract virtual void Run();
    public abstract virtual void Complete();
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage {
    [NotNullAttribute]
public IProperty`1<bool> ContinueEnabled { get; }
    public string Description { get; }
    public string Title { get; }
    public bool DoNotShow { get; }
    public abstract virtual IProperty`1<bool> get_ContinueEnabled();
    public abstract virtual string get_Description();
    public abstract virtual string get_Title();
    public abstract virtual bool get_DoNotShow();
    public abstract virtual bool Initialize(IProgressIndicator pi);
    public abstract virtual bool RefreshContents(IProgressIndicator pi);
    public abstract virtual IRefactoringPage Commit(IProgressIndicator pi);
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringWorkflow {
    public ISolution Solution { get; }
    [CanBeNullAttribute]
public IConflictSearcher ConflictSearcher { get; }
    public IRefactoringPage FirstPendingRefactoringPage { get; }
    public bool MightModifyManyDocuments { get; }
    public bool HasUI { get; }
    public HelpId HelpKeyword { get; }
    [CanBeNullAttribute]
public IEventBus EventBus { get; public set; }
    public Lifetime WorkflowExecuterLifetime { get; public set; }
    public bool RequiresSolutionTransaction { get; }
    public IUIApplication Environment { get; }
    public abstract virtual ISolution get_Solution();
    public abstract virtual IConflictSearcher get_ConflictSearcher();
    public abstract virtual IRefactoringPage get_FirstPendingRefactoringPage();
    public abstract virtual bool get_MightModifyManyDocuments();
    public abstract virtual bool get_HasUI();
    public abstract virtual HelpId get_HelpKeyword();
    public abstract virtual IEventBus get_EventBus();
    public abstract virtual void set_EventBus(IEventBus value);
    public abstract virtual Lifetime get_WorkflowExecuterLifetime();
    public abstract virtual void set_WorkflowExecuterLifetime(Lifetime value);
    public abstract virtual bool get_RequiresSolutionTransaction();
    public abstract virtual IUIApplication get_Environment();
    public abstract virtual bool IsAvailable(IDataContext context);
    public abstract virtual bool Initialize(IDataContext context);
    public abstract virtual bool PreExecute(IProgressIndicator progressIndicator);
    public abstract virtual bool Execute(IProgressIndicator progressIndicator);
    public abstract virtual bool PostExecute(IProgressIndicator pi);
    public abstract virtual void SuccessfulFinish(IProgressIndicator pi);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SuccessfullyFinished(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SuccessfullyFinished(EventHandler value);
    public abstract virtual void UnsuccessfulFinish(IProgressIndicator pi);
    [CompilerGeneratedAttribute]
public abstract virtual void add_UnsuccessfullyFinished(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_UnsuccessfullyFinished(EventHandler value);
    public abstract virtual bool RefreshData();
    [NotNullAttribute]
[PureAttribute]
public abstract virtual TComponent GetComponent();
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual TComponent TryGetComponent();
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringWorkflowProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringWorkflowWithCustomLifetime {
    public Lifetime CustomLifetime { get; }
    public abstract virtual Lifetime get_CustomLifetime();
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.ISubRefactoringHost {
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.ITextOccurrenceRenameMarker {
    public string NewName { get; public set; }
    public bool Included { get; public set; }
    public string OldName { get; }
    public TextRange OldNameRange { get; }
    public abstract virtual string get_NewName();
    public abstract virtual void set_NewName(string value);
    public abstract virtual bool get_Included();
    public abstract virtual void set_Included(bool value);
    public abstract virtual string get_OldName();
    public abstract virtual TextRange get_OldNameRange();
    public abstract virtual IDocument GetDocument();
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.IUsagesProvider {
    public abstract virtual IList`1<RefactoringDeclarationOccurrence> GetDeclarationOccurrences(DrivenRefactoringWorkflow workflow);
    public abstract virtual IList`1<RefactoringReferenceOccurrence> GetReferenceOccurrences(DrivenRefactoringWorkflow workflow);
    public abstract virtual void CommitCheckedOccurrences(IEnumerable`1<RefactoringReferenceOccurrence> checkedOccurrences, IEnumerable`1<RefactoringDeclarationOccurrence> getCheckedDeclarations);
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.IViewModel {
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.IWorkflowExec {
    public bool IsLanguageSupported { get; }
    public abstract virtual bool get_IsLanguageSupported();
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.IWorkflowHost {
    public abstract virtual void Initialize(WorkflowExecuter executer);
    public abstract virtual bool ShowPage(IRefactoringPage page, bool hasBack);
    [NotNullAttribute]
public abstract virtual ITaskExecutor CreateTaskExecutor(string taskName);
    [CanBeNullAttribute]
public abstract virtual IRefactoringPage CreateConflictsPage(WorkflowExecuter executer, IEnumerable`1<IConflict> conflicts);
    public abstract virtual ITaskExecutor CreateFinalizeTaskExecuter();
    public abstract virtual void ShowMessage(string text, string title);
    public abstract virtual void DisposePage(IRefactoringPage pages);
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.IWorkflowWithModel`1 {
    public TUserDataModel DataProvider { get; public set; }
    public abstract virtual void set_DataProvider(TUserDataModel value);
    public abstract virtual TUserDataModel get_DataProvider();
}
[DefaultMemberAttribute("Item")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.LanguageMapOfRefactoring`1 : object {
    private Dictionary`2<PsiLanguageType, T> myData;
    public T Item { get; }
    public T Item { get; }
    public LanguageMapOfRefactoring`1(Creator<T> creator, T defaultValue, IRefactoringDriver refactoringDriver);
    [DebuggerStepThroughAttribute]
public T get_Item(PsiLanguageType language);
    [DebuggerStepThroughAttribute]
public T get_Item(IReference reference);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.MultiSectionalCheckUsagesDescriptor : CheckUsagesDescriptorBase {
    private TreeSectionModel myTreeSectionModel;
    public TreeModel Model { get; }
    public MultiSectionalCheckUsagesDescriptor(DrivenRefactoringWorkflow workflow);
    public virtual TreeModel get_Model();
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.NameSuggestions.ExtractMethodNameSuggestionContext : object {
    [CompilerGeneratedAttribute]
private ITreeRangePointer <SelectedRange>k__BackingField;
    [CompilerGeneratedAttribute]
private NamingPolicy <NamingPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private NamedElementKinds <ElementKind>k__BackingField;
    [CompilerGeneratedAttribute]
private PsiLanguageType <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiSourceFile <SourceFile>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public ITreeRangePointer SelectedRange { get; public set; }
    public NamingPolicy NamingPolicy { get; public set; }
    public NamedElementKinds ElementKind { get; public set; }
    public PsiLanguageType Language { get; public set; }
    public IPsiSourceFile SourceFile { get; public set; }
    public ExtractMethodNameSuggestionContext(ITreeRangePointer SelectedRange, NamingPolicy NamingPolicy, NamedElementKinds ElementKind, PsiLanguageType Language, IPsiSourceFile SourceFile);
    [CompilerGeneratedAttribute]
protected ExtractMethodNameSuggestionContext(ExtractMethodNameSuggestionContext original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ITreeRangePointer get_SelectedRange();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SelectedRange(ITreeRangePointer value);
    [CompilerGeneratedAttribute]
public NamingPolicy get_NamingPolicy();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NamingPolicy(NamingPolicy value);
    [CompilerGeneratedAttribute]
public NamedElementKinds get_ElementKind();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ElementKind(NamedElementKinds value);
    [CompilerGeneratedAttribute]
public PsiLanguageType get_Language();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Language(PsiLanguageType value);
    [CompilerGeneratedAttribute]
public IPsiSourceFile get_SourceFile();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SourceFile(IPsiSourceFile value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ExtractMethodNameSuggestionContext left, ExtractMethodNameSuggestionContext right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ExtractMethodNameSuggestionContext left, ExtractMethodNameSuggestionContext right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ExtractMethodNameSuggestionContext other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual ExtractMethodNameSuggestionContext <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(ITreeRangePointer& SelectedRange, NamingPolicy& NamingPolicy, NamedElementKinds& ElementKind, PsiLanguageType& Language, IPsiSourceFile& SourceFile);
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.NameSuggestions.IExtractMethodNameSuggestionSupplier {
    public abstract virtual bool IsAvailable();
    [NotNullAttribute]
public abstract virtual IconId GetSuggestionIcon();
    public abstract virtual RenameSuggestionType GetRenameSuggestionType();
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual Task`1<List`1<string>> GetSuggestionsAsync(Lifetime lifetime, ExtractMethodNameSuggestionContext context);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Refactorings.RdViewModelExtensions : object {
    [ExtensionAttribute]
public static void BindToLocalProtocol(IRdBindable rdModel, Lifetime lifetime);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringActionGroup : ExtensibleActionGroup {
    public static RefactoringActionGroup Blessed;
    public static RefactoringActionGroup IntroduceEntity;
    public static RefactoringActionGroup EditHierarchy;
    public static RefactoringActionGroup Convert;
    public static RefactoringActionGroup Unsorted;
    private RefactoringActionGroup(string name, float order);
    private static RefactoringActionGroup();
}
public static class JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringActionUtil : object {
    public static void ExecuteRefactoringWithUserData(IDataContext context, TWorkflow refactoringWorkflow, TUserDataModel userDataModel);
    public static void ExecuteRefactoring(IDataContext context, IRefactoringWorkflow refactoringWorkflow);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringDataConstants : object {
    public static DataConstant`1<IDeclaredElement> DeclaredElementWithoutSelection;
    private LanguageManager myLanguageManager;
    public RefactoringDataConstants(Lifetime lifetime, IActionManager actionManager, LanguageManager languageManager);
    private static RefactoringDataConstants();
    private IDeclaredElement GetDeclaredElementWithoutSelection(IDataContext context);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringDeclarationOccurrence : ReferenceOccurrence {
    [CompilerGeneratedAttribute]
private IDeclaration <Declaration>k__BackingField;
    public IDeclaration Declaration { get; }
    public RefactoringDeclarationOccurrence(IDeclaration declaration);
    [CompilerGeneratedAttribute]
public IDeclaration get_Declaration();
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringDetailsArgs : object {
    [CompilerGeneratedAttribute]
private RefactoringId <RefactoringId>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Properties>k__BackingField;
    public RefactoringId RefactoringId { get; }
    public Dictionary`2<string, object> Properties { get; }
    public RefactoringDetailsArgs(RefactoringId refactoringId, DataTuple[] properties);
    [CompilerGeneratedAttribute]
public RefactoringId get_RefactoringId();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Properties();
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringDriver : object {
    [NotNullAttribute]
private RefactoringDriverStorage myStorage;
    public RefactoringDriver(RefactoringDriverStorage storage);
    public sealed virtual void AddConflict(IConflict conflict);
    public sealed virtual void AddLateConflict(Func`1<IConflict> conflict, string id);
    public sealed virtual IList`1<IReference> Get(Key key, Func`1<IList`1<IReference>> generator);
    public sealed virtual IList`1<IReference> Get(Key key);
    public sealed virtual void Set(Key key, IList`1<IReference> references);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringDriverStorage : object {
    [NotNullAttribute]
private Dictionary`2<Key, IList`1<IReference>> myReferences;
    [NotNullAttribute]
private Dictionary`2<Key, IList`1<TextOccurrenceRenameMarker>> myTextOccurrences;
    public bool HasTextOccurrences { get; }
    public bool get_HasTextOccurrences();
    public void Get(Key key, IList`1& references);
    public void Get(Key key, IList`1& textOccurrenceMarkers);
    public void Invalidate();
    public void Put(Key key, IList`1<IReference> references);
    public void Put(Key key, IList`1<TextOccurrenceRenameMarker> textOccurrences);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringDriverWithConflicts : object {
    [NotNullAttribute]
private HashSet`1<IConflict> myConflicts;
    [NotNullAttribute]
private List`1<Func`1<IConflict>> myLateConflicts;
    [CompilerGeneratedAttribute]
private RefactoringDriverStorage <Storage>k__BackingField;
    public IEnumerable`1<IConflict> Conflicts { get; }
    public bool ShouldDisplay { get; }
    [NotNullAttribute]
public RefactoringDriverStorage Storage { get; }
    public bool HasConflicts { get; }
    public RefactoringDriverWithConflicts(RefactoringDriverStorage storage);
    public IEnumerable`1<IConflict> get_Conflicts();
    public bool get_ShouldDisplay();
    [CompilerGeneratedAttribute]
public RefactoringDriverStorage get_Storage();
    public bool get_HasConflicts();
    public sealed virtual void AddConflict(IConflict conflict);
    public sealed virtual void AddLateConflict(Func`1<IConflict> conflict, string id);
    public sealed virtual IList`1<IReference> Get(Key key, Func`1<IList`1<IReference>> generator);
    public sealed virtual IList`1<IReference> Get(Key key);
    public sealed virtual void Set(Key key, IList`1<IReference> references);
}
public static class JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringEvents : object {
    public static EventId`1<RefactoringId> RefactoringEvent;
    public static EventId`1<RefactoringId> RefactoringStarted;
    public static EventId`1<RefactoringId> RefactoringFinished;
    public static EventId`1<RefactoringId> RefactoringTransactionEvents;
    public static EventId`1<RefactoringId> RefactoringTransactionBegin;
    public static EventId`1<RefactoringId> RefactoringTransactionCommit;
    public static EventId`1<RefactoringId> RefactoringFinishedWithConflict;
    public static EventId`1<RefactoringId> ReApplyRefactoringAfterConflict;
    public static EventId`1<RefactoringTransactionResult> RefactoringTransactionResult;
    public static EventId`1<RefactoringDetailsArgs> RefactoringDetails;
    private static RefactoringEvents();
}
public abstract class JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringExecBase`2 : object {
    [CompilerGeneratedAttribute]
private TWorkflow <Workflow>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private IRefactoringDriver <Driver>k__BackingField;
    [CompilerGeneratedAttribute]
private TExecuter <Executer>k__BackingField;
    [NotNullAttribute]
public TWorkflow Workflow { get; }
    [NotNullAttribute]
public ISolution Solution { get; }
    [NotNullAttribute]
public IRefactoringDriver Driver { get; private set; }
    public TExecuter Executer { get; private set; }
    public IRefactoringDriver RefactoringDriver { get; public set; }
    protected RefactoringExecBase`2(TWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    [CompilerGeneratedAttribute]
public TWorkflow get_Workflow();
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    [CompilerGeneratedAttribute]
public IRefactoringDriver get_Driver();
    [CompilerGeneratedAttribute]
private void set_Driver(IRefactoringDriver value);
    [CompilerGeneratedAttribute]
public TExecuter get_Executer();
    [CompilerGeneratedAttribute]
private void set_Executer(TExecuter value);
    public IRefactoringDriver get_RefactoringDriver();
    public sealed virtual void set_RefactoringDriver(IRefactoringDriver value);
    public sealed virtual void SetExecuter(IRefactoringExecuter refactoring);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringId : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public int Id { get; }
    public string Title { get; }
    public RefactoringId(int id, string title);
    [NotNullAttribute]
public static RefactoringId FromWorkflow(IRefactoringWorkflow workflow);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public string get_Title();
    public bool Equals(RefactoringId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringNotificationModel : ContextNotificationModel {
    private IActionResult myActionResult;
    private IProperty`1<double> myFraction;
    private IProperty`1<string> myResultText;
    [CompilerGeneratedAttribute]
private IProperty`1<Action> <CallBack>k__BackingField;
    public double Fraction { get; }
    public string Title { get; }
    public string Text { get; }
    public double TitleExtraWidth { get; }
    public bool HasProgress { get; }
    public IProperty`1<Action> CallBack { get; }
    public RefactoringNotificationModel(IActionResult actionResult, LifetimeDefinition lifetimeDefinition, IThreading threading);
    public virtual double get_Fraction();
    public virtual string get_Title();
    public string get_Text();
    public virtual double get_TitleExtraWidth();
    public virtual bool get_HasProgress();
    [CompilerGeneratedAttribute]
public IProperty`1<Action> get_CallBack();
    public virtual void Execute();
    protected virtual void FillActions();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0();
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringReferenceOccurrence : ReferenceOccurrence {
    [CompilerGeneratedAttribute]
private IReference <Reference>k__BackingField;
    public IReference Reference { get; }
    public RefactoringReferenceOccurrence(IReference reference);
    [CompilerGeneratedAttribute]
public IReference get_Reference();
}
[ShellComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringsManager : object {
    private IEnumerable`1<IRefactoringWorkflowProvider> myProviders;
    public static RefactoringsManager Instance { get; }
    public RefactoringsManager(IEnumerable`1<IRefactoringWorkflowProvider> providers);
    public static RefactoringsManager get_Instance();
    public IEnumerable`1<TWorkflowProvider> GetWorkflowProviders();
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ReSharperRefactoringSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringsMruSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToUseInlineRenameEverywhereSettingDescription")]
public bool UseInline;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToSuggestRenameInCompletionSettingDescription")]
public bool UseCompletion;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "UseWpfRefactoringFormSettingDescription")]
public bool UseNewForm;
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringToolWindowManager : object {
    [CompilerGeneratedAttribute]
private Lifetime <lifetime>P;
    [CompilerGeneratedAttribute]
private ILazy`1<ToolWindowManager> <toolWindowManager>P;
    private bool myToolWindowsAllowed;
    public RefactoringToolWindowManager(Lifetime lifetime, ILazy`1<ToolWindowManager> toolWindowManager);
    public void Show(IAutomation stage, string title);
    public static RefactoringToolWindowManager GetInstance(ISolution solution);
    public void TerminateSession();
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringTransactionResult : RefactoringId {
    [CompilerGeneratedAttribute]
private TransactionCommitResult <Result>k__BackingField;
    public TransactionCommitResult Result { get; }
    public RefactoringTransactionResult(int id, string title, TransactionCommitResult result);
    [CompilerGeneratedAttribute]
public TransactionCommitResult get_Result();
    [NotNullAttribute]
public static RefactoringTransactionResult FromWorkflow(IRefactoringWorkflow workflow, TransactionCommitResult result);
}
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringUsagesCollector : CounterUsagesCollector {
    private EventLogGroup myGroup;
    private EventId1`1<Type> myExecuted;
    public RefactoringUsagesCollector(FeatureUsageLogger featureUsageLogger);
    public virtual EventLogGroup GetGroup();
    public void LogExecute(IRefactoringWorkflow refactoringWorkflow, ISolution solution);
}
[ToolWindowDescriptorAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWindowDescriptor : ToolWindowDescriptor {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWorkflowBase : object {
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private IUIApplication <Environment>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IEventBus <EventBus>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifetime <WorkflowExecuterLifetime>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler SuccessfullyFinished;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler UnsuccessfullyFinished;
    public ISolution Solution { get; }
    public IUIApplication Environment { get; }
    [NullableAttribute("2")]
public IEventBus EventBus { get; public set; }
    public Lifetime WorkflowExecuterLifetime { get; public set; }
    public HelpId HelpKeyword { get; }
    [NullableAttribute("2")]
public IConflictSearcher ConflictSearcher { get; }
    [NullableAttribute("2")]
public IRefactoringPage FirstPendingRefactoringPage { get; }
    public bool MightModifyManyDocuments { get; }
    public bool RequiresSolutionTransaction { get; }
    public bool HasUI { get; }
    public string Title { get; }
    [NullableAttribute("2")]
public IconId Icon { get; }
    [NullableAttribute("2")]
public string ActionId { get; }
    public RefactoringActionGroup ActionGroup { get; }
    protected RefactoringWorkflowBase(ISolution solution);
    [CompilerGeneratedAttribute]
public sealed virtual ISolution get_Solution();
    [CompilerGeneratedAttribute]
public sealed virtual IUIApplication get_Environment();
    public sealed virtual TComponent GetComponent();
    public sealed virtual TComponent TryGetComponent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IEventBus get_EventBus();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_EventBus(IEventBus value);
    [CompilerGeneratedAttribute]
public virtual Lifetime get_WorkflowExecuterLifetime();
    [CompilerGeneratedAttribute]
public virtual void set_WorkflowExecuterLifetime(Lifetime value);
    public abstract virtual HelpId get_HelpKeyword();
    [NullableContextAttribute("2")]
public abstract virtual IConflictSearcher get_ConflictSearcher();
    [NullableContextAttribute("2")]
public abstract virtual IRefactoringPage get_FirstPendingRefactoringPage();
    public abstract virtual bool get_MightModifyManyDocuments();
    public abstract virtual bool Execute(IProgressIndicator progressIndicator);
    public abstract virtual bool PostExecute(IProgressIndicator pi);
    public abstract virtual bool Initialize(IDataContext context);
    public virtual bool get_RequiresSolutionTransaction();
    public abstract virtual bool IsAvailable(IDataContext context);
    public abstract virtual bool PreExecute(IProgressIndicator progressIndicator);
    public abstract virtual bool get_HasUI();
    public abstract virtual string get_Title();
    [NullableContextAttribute("2")]
public abstract virtual IconId get_Icon();
    [NullableContextAttribute("2")]
public abstract virtual string get_ActionId();
    public abstract virtual RefactoringActionGroup get_ActionGroup();
    public virtual void SuccessfulFinish(IProgressIndicator pi);
    public void NotifyRefactoringFinished();
    public virtual void UnsuccessfulFinish(IProgressIndicator pi);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_SuccessfullyFinished(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_SuccessfullyFinished(EventHandler value);
    protected virtual void OnSuccessfullyFinished();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_UnsuccessfullyFinished(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_UnsuccessfullyFinished(EventHandler value);
    protected virtual void OnUnsuccessfullyFinished();
    public virtual bool RefreshData();
    public virtual TOccurrence ShowOccurrences(TOccurrence[] occurrences, IDataContext context, CustomHighlightingKind kind, string id);
    protected virtual override void Finalize();
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringWorkflowProvider")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWorkflowProviderAttribute : ShellComponentAttribute {
    public RefactoringWorkflowProviderAttribute(Instantiation instantiation);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.RiderBackgroundTask : object {
    private static string DefaultTitle;
    private static int DefautlUpdateInterval;
    protected Action CancelAction;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PermanentHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DescriptionFromProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PermanentDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<double> <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIndeterminate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCancelable>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UpdateInterval>k__BackingField;
    public string Title { get; protected set; }
    public IProperty`1<string> Header { get; protected set; }
    public string PermanentHeader { get; protected set; }
    public IProperty`1<string> Description { get; protected set; }
    public bool DescriptionFromProgress { get; protected set; }
    public string PermanentDescription { get; protected set; }
    public IProperty`1<double> Progress { get; protected set; }
    public bool IsIndeterminate { get; protected set; }
    public bool IsCancelable { get; protected set; }
    public int UpdateInterval { get; protected set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
protected void set_Title(string value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_Header();
    [CompilerGeneratedAttribute]
protected void set_Header(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public string get_PermanentHeader();
    [CompilerGeneratedAttribute]
protected void set_PermanentHeader(string value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_Description();
    [CompilerGeneratedAttribute]
protected void set_Description(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_DescriptionFromProgress();
    [CompilerGeneratedAttribute]
protected void set_DescriptionFromProgress(bool value);
    [CompilerGeneratedAttribute]
public string get_PermanentDescription();
    [CompilerGeneratedAttribute]
protected void set_PermanentDescription(string value);
    [CompilerGeneratedAttribute]
public IProperty`1<double> get_Progress();
    [CompilerGeneratedAttribute]
protected void set_Progress(IProperty`1<double> value);
    [CompilerGeneratedAttribute]
public bool get_IsIndeterminate();
    [CompilerGeneratedAttribute]
protected void set_IsIndeterminate(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCancelable();
    [CompilerGeneratedAttribute]
protected void set_IsCancelable(bool value);
    [CompilerGeneratedAttribute]
public int get_UpdateInterval();
    [CompilerGeneratedAttribute]
protected void set_UpdateInterval(int value);
    public void Cancel();
    public static RiderBackgroundTask FromProgressIndicator(IProgressIndicatorModel indicator);
    public RiderBackgroundTask Build();
    public RiderBackgroundTask WithTitle(string title);
    public RiderBackgroundTask WithHeader(IProperty`1<string> header);
    public RiderBackgroundTask WithHeader(string header);
    public RiderBackgroundTask WithDescription(IProperty`1<string> description);
    public RiderBackgroundTask WithDescription(string description);
    public RiderBackgroundTask WithDescriptionFromProgress();
    public RiderBackgroundTask WithProgress(IProperty`1<double> progress);
    public RiderBackgroundTask AsIndeterminate();
    public RiderBackgroundTask AsCancelable(Action cancel);
    public RiderBackgroundTask AsNonCancelable();
    public RiderBackgroundTask WithUpdateInterval(int updateInterval);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.SimpleWorkflowHost : object {
    [CanBeNullAttribute]
private WorkflowExecuter myExecuter;
    protected bool IsDisposed;
    public bool HasConflicts { get; }
    public sealed virtual void Dispose();
    public virtual bool get_HasConflicts();
    public sealed virtual void Initialize(WorkflowExecuter executer);
    public virtual bool ShowPage(IRefactoringPage page, bool hasBack);
    public virtual ITaskExecutor CreateTaskExecutor(string taskName);
    public virtual IRefactoringPage CreateConflictsPage(WorkflowExecuter executer, IEnumerable`1<IConflict> conflicts);
    public sealed virtual ITaskExecutor CreateFinalizeTaskExecuter();
    public sealed virtual void ShowMessage(string text, string title);
    public sealed virtual void DisposePage(IRefactoringPage pages);
}
public abstract class JetBrains.ReSharper.Feature.Services.Refactorings.SingleBeRefactoringPage : object {
    private Property`1<bool> myContinueEnabled;
    private AbstractPage myRdModel;
    private BeControl myContent;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public IAutomation Model { get; }
    public AbstractPage RdModel { get; }
    public BeRefactoringsPage BeModel { get; }
    public Lifetime Lifetime { get; }
    public IProperty`1<bool> ContinueEnabled { get; }
    public bool DoNotShow { get; }
    public string Description { get; protected set; }
    public string PageDescription { get; }
    public string Title { get; protected set; }
    protected SingleBeRefactoringPage(Lifetime lifetime);
    public IAutomation get_Model();
    public AbstractPage get_RdModel();
    public BeRefactoringsPage get_BeModel();
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    public virtual bool RefreshContents(IProgressIndicator pi);
    public sealed virtual IProperty`1<bool> get_ContinueEnabled();
    public virtual bool get_DoNotShow();
    [CompilerGeneratedAttribute]
public virtual string get_Description();
    [CompilerGeneratedAttribute]
protected virtual void set_Description(string value);
    public virtual string get_PageDescription();
    [CompilerGeneratedAttribute]
public virtual string get_Title();
    [CompilerGeneratedAttribute]
protected virtual void set_Title(string value);
    public virtual bool Initialize(IProgressIndicator progressIndicator);
    public virtual void Commit();
    public virtual IRefactoringPage Commit(IProgressIndicator pi);
    public virtual AbstractPage GetModel();
    public abstract virtual BeControl GetPageContent();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.SolutionWatcher : object {
    [CompilerGeneratedAttribute]
private Action Closed;
    public static SolutionWatcher GetInstance(ISolution solution);
    [CompilerGeneratedAttribute]
public void add_Closed(Action value);
    [CompilerGeneratedAttribute]
public void remove_Closed(Action value);
    private sealed virtual override void System.IDisposable.Dispose();
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.Specific.IChangeSignatureWorkflowProvider {
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.Specific.IExtractSuperclassWorkflowProvider {
}
public abstract class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.InlineWorkflowProvider : object {
    public static string ACTION_ID;
    protected static string ActionId { get; }
    public abstract virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
    protected static string get_ActionId();
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.IntroduceVariableData : object {
    [CompilerGeneratedAttribute]
private ITreeNode <SourceExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ITreeNode> <Usages>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeconstruction <Deconstruction>k__BackingField;
    [NotNullAttribute]
public ITreeNode SourceExpression { get; }
    [NotNullAttribute]
public List`1<ITreeNode> Usages { get; }
    [CanBeNullAttribute]
public IDeconstruction Deconstruction { get; public set; }
    public IntroduceVariableData(ITreeNode sourceExpression, List`1<ITreeNode> usages);
    [CompilerGeneratedAttribute]
public ITreeNode get_SourceExpression();
    [CompilerGeneratedAttribute]
public List`1<ITreeNode> get_Usages();
    [CompilerGeneratedAttribute]
public IDeconstruction get_Deconstruction();
    [CompilerGeneratedAttribute]
public void set_Deconstruction(IDeconstruction value);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.IntroduceVariableResult : object {
    [CompilerGeneratedAttribute]
private HotspotsRegistry <HotspotsRegistry>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNodePointer`1<ITreeNode> <CaretTargetPointer>k__BackingField;
    [NotNullAttribute]
public HotspotsRegistry HotspotsRegistry { get; }
    [CanBeNullAttribute]
public ITreeNodePointer`1<ITreeNode> CaretTargetPointer { get; }
    public IntroduceVariableResult(HotspotsRegistry hotspotsRegistry, ITreeNodePointer`1<ITreeNode> caretTargetPointer);
    [CompilerGeneratedAttribute]
public HotspotsRegistry get_HotspotsRegistry();
    [CompilerGeneratedAttribute]
public ITreeNodePointer`1<ITreeNode> get_CaretTargetPointer();
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.IntroFieldData : object {
    [CompilerGeneratedAttribute]
private AccessRights <AccessRights>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InitCurrent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InitField>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InitConstructors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InitConstant>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Readonly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Static>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasUI>k__BackingField;
    public AccessRights AccessRights { get; public set; }
    public bool InitCurrent { get; public set; }
    public bool InitField { get; public set; }
    public bool InitConstructors { get; public set; }
    public bool InitConstant { get; public set; }
    public bool Readonly { get; public set; }
    public bool Static { get; public set; }
    public string Name { get; public set; }
    public bool HasUI { get; public set; }
    [CompilerGeneratedAttribute]
public AccessRights get_AccessRights();
    [CompilerGeneratedAttribute]
public void set_AccessRights(AccessRights value);
    [CompilerGeneratedAttribute]
public bool get_InitCurrent();
    [CompilerGeneratedAttribute]
public void set_InitCurrent(bool value);
    [CompilerGeneratedAttribute]
public bool get_InitField();
    [CompilerGeneratedAttribute]
public void set_InitField(bool value);
    [CompilerGeneratedAttribute]
public bool get_InitConstructors();
    [CompilerGeneratedAttribute]
public void set_InitConstructors(bool value);
    [CompilerGeneratedAttribute]
public bool get_InitConstant();
    [CompilerGeneratedAttribute]
public void set_InitConstant(bool value);
    [CompilerGeneratedAttribute]
public bool get_Readonly();
    [CompilerGeneratedAttribute]
public void set_Readonly(bool value);
    [CompilerGeneratedAttribute]
public bool get_Static();
    [CompilerGeneratedAttribute]
public void set_Static(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_HasUI();
    [CompilerGeneratedAttribute]
public void set_HasUI(bool value);
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.Specific.IPushDownWorkflowProvider {
}
public abstract class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.MoveWorkflowProvider : object {
    public static string ACTION_ID;
    protected static string ActionId { get; }
    public abstract virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
    protected static string get_ActionId();
}
[PublicAPIAttribute]
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.AtomicRename : AtomicRenameBase {
    [NotNullAttribute]
private IDeclaredElementPointer`1<IDeclaredElement> myOriginalElementPointer;
    private bool myDoNotShowBindingConflicts;
    [NotNullAttribute]
private List`1<IReference> myNewReferences;
    [NotNullAttribute]
private List`1<IDeclaration> myDeclarations;
    [CanBeNullAttribute]
private List`1<IDeclaredElementPointer`1<IDeclaredElement>> mySecondaryElements;
    [CanBeNullAttribute]
private DeclaredElementEnvoy`1<IDeclaredElement> myDeclaredElementEnvoy;
    [CanBeNullAttribute]
private IDeclaredElementPointer`1<IDeclaredElement> myNewElementPointer;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OldName>k__BackingField;
    public IDeclaredElement NewDeclaredElement { get; }
    public string NewName { get; }
    public string OldName { get; }
    public IDeclaredElement PrimaryDeclaredElement { get; }
    [NotNullAttribute]
public IList`1<IDeclaredElement> SecondaryDeclaredElements { get; }
    public AtomicRename(IDeclaredElement declaredElement, string newName, bool doNotShowBindingConflicts);
    public virtual IDeclaredElement get_NewDeclaredElement();
    [CompilerGeneratedAttribute]
public virtual string get_NewName();
    [CompilerGeneratedAttribute]
public virtual string get_OldName();
    public virtual IDeclaredElement get_PrimaryDeclaredElement();
    public virtual IList`1<IDeclaredElement> get_SecondaryDeclaredElements();
    public virtual void ReloadDeclaredElement();
    public virtual void Rename(IRenameRefactoring executer, IProgressIndicator pi, bool hasConflictsWithDeclarations, IRefactoringDriver driver);
    private static DeclaredElementInstance GetSubst(IDeclaredElement element, IRenameRefactoring executer);
    [CanBeNullAttribute]
private static IDeclaredElement UpdateSecondaryElement(IDeclaredElement element, IDeclaredElement newDeclaredElement, IRenameRefactoring executor);
    private void BuildDeclarations();
}
public abstract class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.AtomicRenameBase : object {
    public IDeclaredElement NewDeclaredElement { get; }
    public string NewName { get; }
    public string OldName { get; }
    public IDeclaredElement PrimaryDeclaredElement { get; }
    [CanBeNullAttribute]
public IList`1<IDeclaredElement> SecondaryDeclaredElements { get; }
    public abstract virtual IDeclaredElement get_NewDeclaredElement();
    public abstract virtual string get_NewName();
    public abstract virtual string get_OldName();
    public abstract virtual IDeclaredElement get_PrimaryDeclaredElement();
    public abstract virtual IList`1<IDeclaredElement> get_SecondaryDeclaredElements();
    public virtual bool PreExecute(IProgressIndicator pi);
    public virtual void PrepareToRename(IRenameRefactoring executer, IProgressIndicator pi, bool hasConflictsWithDeclarations, IRefactoringDriver driver);
    public abstract virtual void Rename(IRenameRefactoring executer, IProgressIndicator pi, bool hasConflictsWithDeclarations, IRefactoringDriver driver);
    [CanBeNullAttribute]
public virtual IRefactoringPage CreateRenamesConfirmationPage(IRenameWorkflow renameWorkflow, IProgressIndicator pi);
    public virtual void ReloadDeclaredElement();
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.AtomicRenamesFactory : object {
    public virtual bool IsApplicable(IDeclaredElement declaredElement);
    public virtual RenameAvailabilityCheckResult CheckRenameAvailability(IDeclaredElement declaredElement);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.AtomicRenamesFactory/<CreateAtomicRenames>d__2")]
public virtual IEnumerable`1<AtomicRenameBase> CreateAtomicRenames(IDeclaredElement declaredElement, string newName, bool doNotAddBindingConflicts);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.CustomRenameModel : object {
    [CompilerGeneratedAttribute]
private bool <RenameFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RenameDependantFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanBeEmpty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ChangeTextOccurrences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <QuickRename>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Inline>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RenameDerived>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasUI>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CreateRenameConfirmationPage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Bulk>k__BackingField;
    public bool RenameFile { get; public set; }
    public bool RenameDependantFiles { get; public set; }
    public bool CanBeEmpty { get; public set; }
    public bool ChangeTextOccurrences { get; public set; }
    public bool QuickRename { get; public set; }
    public bool Inline { get; public set; }
    public bool RenameDerived { get; public set; }
    public bool HasUI { get; public set; }
    public bool CreateRenameConfirmationPage { get; public set; }
    public bool Bulk { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_RenameFile();
    [CompilerGeneratedAttribute]
public void set_RenameFile(bool value);
    [CompilerGeneratedAttribute]
public bool get_RenameDependantFiles();
    [CompilerGeneratedAttribute]
public void set_RenameDependantFiles(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanBeEmpty();
    [CompilerGeneratedAttribute]
public void set_CanBeEmpty(bool value);
    [CompilerGeneratedAttribute]
public bool get_ChangeTextOccurrences();
    [CompilerGeneratedAttribute]
public void set_ChangeTextOccurrences(bool value);
    [CompilerGeneratedAttribute]
public bool get_QuickRename();
    [CompilerGeneratedAttribute]
public void set_QuickRename(bool value);
    [CompilerGeneratedAttribute]
public bool get_Inline();
    [CompilerGeneratedAttribute]
public void set_Inline(bool value);
    [CompilerGeneratedAttribute]
public bool get_RenameDerived();
    [CompilerGeneratedAttribute]
public void set_RenameDerived(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasUI();
    [CompilerGeneratedAttribute]
public void set_HasUI(bool value);
    [CompilerGeneratedAttribute]
public bool get_CreateRenameConfirmationPage();
    [CompilerGeneratedAttribute]
public void set_CreateRenameConfirmationPage(bool value);
    [CompilerGeneratedAttribute]
public bool get_Bulk();
    [CompilerGeneratedAttribute]
public void set_Bulk(bool value);
    public virtual BeControl GetSpecific(Lifetime lifetime, Action update);
    public virtual ISearchDomain GetCustomDomain();
    public virtual void Commit();
    public virtual IEnumerable`1<FileRename> GetFileRenamesToExecute(IEnumerable`1<FileRename> fileRenames);
    public virtual BeControl GetSpecificForFileRename(bool needConfirmation);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.FileRename : object {
    [CompilerGeneratedAttribute]
private IProjectItem <ProjectItem>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaredElement <DeclaredElement>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewExtensionWithDot>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AlwaysMustBeRenamed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BindedReferencesCanBeResolvedBeforeFileRename>k__BackingField;
    private IReferencePointer[] myReferences;
    public IProjectItem ProjectItem { get; }
    public IPsiServices PsiServices { get; }
    public IDeclaredElement DeclaredElement { get; }
    public string NewName { get; }
    public string NewExtensionWithDot { get; public set; }
    public bool AlwaysMustBeRenamed { get; }
    public bool BindedReferencesCanBeResolvedBeforeFileRename { get; public set; }
    public FileRename(IPathDeclaredElement pathDeclaredElement, IProjectItem projectItem, string name, bool alwaysRename);
    public FileRename(IPsiServices psiServices, IProjectItem projectItem, string name, bool alwaysRename);
    [CompilerGeneratedAttribute]
public IProjectItem get_ProjectItem();
    public IPsiServices get_PsiServices();
    [CompilerGeneratedAttribute]
public IDeclaredElement get_DeclaredElement();
    [CompilerGeneratedAttribute]
public string get_NewName();
    [CompilerGeneratedAttribute]
public string get_NewExtensionWithDot();
    [CompilerGeneratedAttribute]
public void set_NewExtensionWithDot(string value);
    [CompilerGeneratedAttribute]
public bool get_AlwaysMustBeRenamed();
    [CompilerGeneratedAttribute]
public bool get_BindedReferencesCanBeResolvedBeforeFileRename();
    [CompilerGeneratedAttribute]
public void set_BindedReferencesCanBeResolvedBeforeFileRename(bool value);
    protected bool Equals(FileRename other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void SearchReferences(ISearchDomain searchDomain, IProgressIndicator pi);
    public virtual void DoRename(IProgressIndicator pi, Action`1<IConflict> onConflict);
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.IFileRenameProvider")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.FileRenameProviderAttribute : ShellComponentAttribute {
    public FileRenameProviderAttribute(Instantiation instantiation);
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.IAtomicRenameFactory {
    public abstract virtual bool IsApplicable(IDeclaredElement declaredElement);
    public abstract virtual RenameAvailabilityCheckResult CheckRenameAvailability(IDeclaredElement element);
    public abstract virtual IEnumerable`1<AtomicRenameBase> CreateAtomicRenames(IDeclaredElement declaredElement, string newName, bool doNotAddBindingConflicts);
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.IFileRenameProvider {
    public abstract virtual IEnumerable`1<FileRename> GetFileRenames(IDeclaredElement declaredElement, string name);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.ImplementsFromCompiledCode : HierarchyConflict {
    private IDeclaredElementPointer`1<IOverridableMember> myMemberPointer;
    private IDeclaredElementPointer`1<IOverridableMember> myCompiledMemberPointer;
    public ImplementsFromCompiledCode(IOverridableMember member, OverridableMemberInstance compiledElement);
    public virtual IConflict CreateConflict(HierarchyConflictTextProviderBase textProvider);
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.INamingProjection {
    public abstract virtual bool CheckNameIsValid(string name);
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.INamingProjectionProvider {
    public abstract virtual INamingProjection GetProjection(IDeclaredElement element, IReference reference);
    public abstract virtual bool IsApplicable(IDeclaredElement element, IReference reference);
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.IPrimaryDeclaredElementForRenameProvider {
    [CanBeNullAttribute]
public abstract virtual IDeclaredElement GetPrimaryDeclaredElement(IDeclaredElement declaredElement, IReference reference);
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.IRenameRefactoring {
    public IRenameWorkflow Workflow { get; }
    public abstract virtual IRenameWorkflow get_Workflow();
}
public interface JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.IRenameWorkflow {
    public CachingLanguageSpecificImpl`1<RenameHelperBase> LanguageSpecific { get; }
    public abstract virtual IList`1<IReference> GetElementReferences(IDeclaredElement declaredElement);
    public abstract virtual CachingLanguageSpecificImpl`1<RenameHelperBase> get_LanguageSpecific();
    public abstract virtual void SetHierarchyConflicts(List`1<HierarchyConflict> conflicts);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.IsImplementedInCompiledCodeConflict : HierarchyConflict {
    private IDeclaredElementPointer`1<IOverridableMember> myMemberPointer;
    private IDeclaredElementPointer`1<IOverridableMember> myCompiledMemberPointer;
    public IsImplementedInCompiledCodeConflict(IOverridableMember member, OverridableMemberInstance compiledElement);
    public virtual IConflict CreateConflict(HierarchyConflictTextProviderBase textProvider);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.MainRenameDataProvider : object {
    private string myNewName;
    private Dictionary`2<IDeclaredElementPointer`1<IDeclaredElement>, string> myDictionary;
    private RenameRefactoringService myRenameRefactoringService;
    private bool myCanBeLocal;
    [CompilerGeneratedAttribute]
private CustomRenameModel <Model>k__BackingField;
    public ICollection`1<IDeclaredElement> Constant { get; }
    public CustomRenameModel Model { get; public set; }
    public bool CanBeLocal { get; public set; }
    public MainRenameDataProvider(Dictionary`2<IDeclaredElement, string> dictionary);
    public MainRenameDataProvider(IDeclaredElement element, string newName);
    public MainRenameDataProvider(string newName);
    public ICollection`1<IDeclaredElement> get_Constant();
    [CompilerGeneratedAttribute]
public CustomRenameModel get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(CustomRenameModel value);
    public bool get_CanBeLocal();
    public void set_CanBeLocal(bool value);
    public string GetName(IDeclaredElement element);
    public IList`1<AtomicRenameBase> GetBaseNameChange();
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.NotIncludedRoots : HierarchyConflict {
    private IDeclaredElementPointer`1<IOverridableMember> myMemberPointer;
    private IDeclaredElementPointer`1<IOverridableMember> myImplementedMemberPointer;
    public NotIncludedRoots(HierarchyMember hierarchyMember, ImplementsMemberProblem implementsMemberProblem);
    public virtual IConflict CreateConflict(HierarchyConflictTextProviderBase textProvider);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.PathDeclaredElementAtomicRename : AtomicRenameBase {
    private IDeclaredElementPointer`1<IDeclaredElement> myOriginalElementPointer;
    private string myNewName;
    private string myOldName;
    public IDeclaredElement NewDeclaredElement { get; }
    public string NewName { get; }
    public string OldName { get; }
    public IDeclaredElement PrimaryDeclaredElement { get; }
    public IList`1<IDeclaredElement> SecondaryDeclaredElements { get; }
    public PathDeclaredElementAtomicRename(IDeclaredElement declaredElement, string newName);
    public virtual IDeclaredElement get_NewDeclaredElement();
    public virtual string get_NewName();
    public virtual string get_OldName();
    public virtual IDeclaredElement get_PrimaryDeclaredElement();
    public virtual IList`1<IDeclaredElement> get_SecondaryDeclaredElements();
    public virtual void Rename(IRenameRefactoring executer, IProgressIndicator pi, bool hasConflictsWithDeclarations, IRefactoringDriver driver);
    protected virtual void DoRename(IPathDeclaredElement declaredElement, IProgressIndicator pi, IRefactoringDriver driver);
}
[ShellFeaturePartAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.PathDeclaredElementAtomicRenameFactory : AtomicRenamesFactory {
    public virtual bool IsApplicable(IDeclaredElement element);
    public virtual RenameAvailabilityCheckResult CheckRenameAvailability(IDeclaredElement element);
    private bool CanRenameFile(IPathDeclaredElement pathDeclaredElement);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.PathDeclaredElementAtomicRenameFactory/<CreateAtomicRenames>d__3")]
public virtual IEnumerable`1<AtomicRenameBase> CreateAtomicRenames(IDeclaredElement declaredElement, string newName, bool doNotAddBindingConflicts);
}
[FileRenameProviderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.PathDeclaredElementFileRenameProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.PathDeclaredElementFileRenameProvider/<GetFileRenames>d__0")]
public virtual IEnumerable`1<FileRename> GetFileRenames(IDeclaredElement declaredElement, string name);
    private IEnumerable`1<IProjectItem> GetProjectItems(IDeclaredElement declaredElement);
    private FileRename CreateRename(IPathDeclaredElement pathElement, IProjectItem projectItem, RelativePath fileName);
}
[RenamePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.PathPrimaryElementsForRenameProvider : PathPrimaryElementsForRenameProviderBase {
    protected virtual bool IsApplicable(IProjectItem projectItem);
    protected virtual IPathDeclaredElement CreateElement(IPathDeclaredElement pathElement);
}
public abstract class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.PathPrimaryElementsForRenameProviderBase : object {
    public sealed virtual IDeclaredElement GetPrimaryDeclaredElement(IDeclaredElement element, IReference reference);
    protected abstract virtual bool IsApplicable(IProjectItem projectItem);
    protected abstract virtual IPathDeclaredElement CreateElement(IPathDeclaredElement pathElement);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.QuasiImplements : HierarchyConflict {
    private IDeclaredElementPointer`1<IOverridableMember> myMemberPointer;
    private IDeclaredElementPointer`1<IOverridableMember> myImplementedMemberPointer;
    public QuasiImplements(IOverridableMember member, OverridableMemberInstance compiledElement);
    public virtual IConflict CreateConflict(HierarchyConflictTextProviderBase textProvider);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.RenameAvailabilityCheckResult : EnumPattern {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public static RenameAvailabilityCheckResult CanBeRenamed;
    public static RenameAvailabilityCheckResult CanNotBeRenamed;
    public static RenameAvailabilityCheckResult IsCompiledElement;
    public static RenameAvailabilityCheckResult HasNonSourceMembers;
    public static RenameAvailabilityCheckResult IsOperator;
    public static RenameAvailabilityCheckResult IsVirtualElement;
    public static RenameAvailabilityCheckResult UnsupportedLanguage;
    public static RenameAvailabilityCheckResult IsDelegate;
    public string Message { get; }
    protected RenameAvailabilityCheckResult(string name, string presentation);
    private static RenameAvailabilityCheckResult();
    [CompilerGeneratedAttribute]
public string get_Message();
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.RenameDataProvider : object {
    private string myNewName;
    private Dictionary`2<IDeclaredElement, string> myDictionary;
    private RenameRefactoringService myRenameRefactoringService;
    private bool myCanBeLocal;
    [CompilerGeneratedAttribute]
private int <Usages>k__BackingField;
    [CompilerGeneratedAttribute]
private CustomRenameModel <Model>k__BackingField;
    public int Usages { get; public set; }
    public ICollection`1<IDeclaredElement> Constant { get; }
    public CustomRenameModel Model { get; public set; }
    public bool CanBeLocal { get; public set; }
    public RenameDataProvider(Dictionary`2<IDeclaredElement, string> dictionary);
    public RenameDataProvider(IDeclaredElement element, string newName);
    public RenameDataProvider(string newName);
    [CompilerGeneratedAttribute]
public int get_Usages();
    [CompilerGeneratedAttribute]
public void set_Usages(int value);
    public ICollection`1<IDeclaredElement> get_Constant();
    [CompilerGeneratedAttribute]
public CustomRenameModel get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(CustomRenameModel value);
    public bool get_CanBeLocal();
    public void set_CanBeLocal(bool value);
    public string GetName(IDeclaredElement element);
    public IList`1<AtomicRenameBase> GetBaseNameChange();
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.RenameFileHelper : object {
    public virtual bool RenameDependantFiles();
    public virtual IReadOnlyCollection`1<IProjectFile> GetAllFilesToRename(IProjectFile projectFile);
    public virtual bool HasExternalTypeToRenameInFile(string fullPath);
    public virtual RefactoringResult ExecuteCustomLanguageRefactoring(RenameFileRefactoringData renameFileRefactoringData);
    public virtual void HandleProjectModelCommands(ISolution solution, List`1<RdProjectModelCommand> projectModelCommands, IProgressIndicator progressIndicator);
    public IReadOnlyCollection`1<IProjectFile> GetAllProjectFiles(IPathDeclaredElement pathDeclaredElement);
    public IReadOnlyCollection`1<IProjectItem> GetAllProjectItems(IPathDeclaredElement pathDeclaredElement);
    public virtual bool CanRenameFile(IProjectItem projectItem);
    public virtual IEnumerable`1<TextOccurrenceRenameMarker> CollectFrontendUsages(IDeclaredElement element, string newName, bool changeTextOccurrences, ISolution solution);
    public virtual void RenameFrontendUsages(IEnumerable`1<TextOccurrenceRenameMarker> usagesToRename, IEnumerable`1<FileRename> fileRenames, ISolution solution);
    public virtual void ExecuteSingleFileCustomTools(ISolution solution, IProjectFile projectFile);
    public virtual void SendProjectElementRenamedEvent(ISolution solution, IProjectFile projectFile);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.RenameHelperBase : object {
    public static RenameHelperBase Instance;
    public bool CanRenameMultipleLocal { get; }
    public bool IsLanguageSupported { get; }
    private static RenameHelperBase();
    public virtual bool get_CanRenameMultipleLocal();
    public virtual IRefactoringPage GetPageAfterInitial(IRenameWorkflow renameWorkflow);
    public virtual IRefactoringPage GetInitialPage(IRenameWorkflow renameWorkflow);
    public virtual CustomRenameModel GetOptionsModel(IDeclaredElement primaryDeclaredElement, IReference reference, Lifetime lifetime);
    public virtual bool CanHavePageAfterInitial();
    public virtual bool IsCheckResolvedTo(IReference newReference, IDeclaredElement newDeclaredElement);
    protected static bool SimpleCheckResolvedTo(IReference newReference, IDeclaredElement newDeclaredElement);
    public virtual IList`1<IConflictSearcher> AdditionalConflictsSearchers(IDeclaredElement element, string newName);
    public virtual IEnumerable`1<AtomicRenameBase> GetAtomicRenamesForHierarchy(IDeclaredElement declaredElement, IRenameWorkflow workflow, string newName, IProgressIndicator pi);
    public virtual void AdditionalReferenceProcessing(IDeclaredElement newTarget, IReference reference, ICollection`1<IReference> newReferences);
    public virtual IReference TransformProjectedInitializer(IReference reference);
    public virtual DeclaredElementInstance GetSubst(IDeclaredElement element);
    [CanBeNullAttribute]
public virtual IDeclaredElement UpdateSecondaryElement(IDeclaredElement element, IDeclaredElement newDeclaredElement);
    [CanBeNullAttribute]
public virtual SuspiciousReferencesSearchProcessor CreateSuspiciousReferenceSearchProcessor(ITreeNode root, SuspiciousReferenceSearchContext context);
    public virtual void JoinTransformAnonymous(IReference reference);
    public virtual bool IsAlias(IDeclaredElement element);
    [NotNullAttribute]
public virtual IEnumerable`1<IDeclaredElement> GetOverloads(IDeclaredElement element);
    public virtual IEnumerable`1<IDeclaredElement> GetSecondaryElements(IDeclaredElement declaredElement, string newName);
    protected static void AddAccessors(IProperty property, LocalList`1& result);
    [CanBeNullAttribute]
public virtual IEnumerable`1<IReference> GetCustomUsages(IDeclaredElement declaredElement);
    public virtual bool IsLocalRename(IDeclaredElement primevalDeclaredElement);
    public virtual bool CheckLocalRenameSameDocument(IDeclaredElement primevalDeclaredElement);
    public virtual void AddExtraNames(INamesCollection suggestion, IDeclaredElement declaredElement);
    public virtual IReference BindReferenceToNamespace(IReference reference, INamespace ns);
    public virtual IRefactoringPage GetPageBeforeInitial(IRenameWorkflow renameWorkflow);
    public virtual OneToSetMap`2<IDeclaredElementPointer`1<IDeclaredElement>, IReferencePointer> GetSuspiciousReferences(IDeclaredElement element);
    public virtual bool IsValidName(IDeclaredElement primaryDeclaredElement, DeclaredElementType declaredElementType, string newName);
    public virtual bool IsValidName(IDeclaration declaration, DeclaredElementType declaredElementType, string newName);
    public virtual bool RenameInReferencesInThisLanguageFirst(PsiLanguageType psiLanguageType);
    [CanBeNullAttribute]
public virtual IEnumerable`1<IDeclaration> GetCustomDeclarations(IDeclaredElement declaredElement);
    public virtual void ExecuteLocalRenameHotspotSession(ISolution solution, ITextControl textControl, HotspotInfo fieldInfo, Action`1<HotspotInfo> createAndExecuteHotspotSession);
    public virtual bool AlwaysIncludeExtraElements();
    public virtual IEnumerable`1<IDeclaredElement> GetDynamicDeclaredElements(IFindResultReference reference);
    public virtual bool CanBeRenamedInplace(IDeclaredElement element);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.RenameHelperBase/<GetReferences>d__36")]
public virtual IEnumerable`1<IReference> GetReferences(IGrouping`2<ITypeMemberDeclaration, IDeclaration> element);
    public virtual DocumentRange GetNameDocumentRangeForRename(IDeclaration declaration, string initialName);
    public virtual DocumentRange GetNameDocumentRangeForRename(IReference reference, string initialName);
    private static DocumentRange GetNameDocumentRangeForRename(string initialName, DocumentRange range);
    public virtual bool IsInvalidReferenceToRename(IReference reference);
    public virtual bool IsInvalidDeclarationToRename(IDeclaration declaration);
    public virtual bool ShouldSkipReferenceInRename(IReference reference);
    public virtual IEnumerable`1<IDeclaredElement> GetSecondaryElementsToInlineRename(IDeclaredElement declaredElement);
    public virtual IList`1<RenameWorkflowPopupOccurrence> GetPopupOccurences(IDeclaredElement declaredElement);
    public virtual bool DoNotProcess(IPsiSourceFile sourceFile, IRenameWorkflow workflow, IDeclaredElement dataModelInitialDeclaredElement);
    public virtual bool get_IsLanguageSupported();
    public virtual IEnumerable`1<IPsiSourceFile> GetFilesContainingFileName(IWordIndex wordIndex, VirtualFileSystemPath path);
    public virtual bool ShouldFindSuspiciousReferences();
    public virtual void SetName(IDeclaration declaration, string newName, IRenameRefactoring refactoring);
    public virtual IReference BindReference(IReference reference, IDeclaredElement declaredElement, ISubstitution substSubstitution);
    public virtual IEnumerable`1<IDeclaredElement> GetTypesWithSameNameInFile(IPsiSourceFile sourceFile, string fileNameBeforeFirstDot);
    [CanBeNullAttribute]
public virtual string GetNestedNameInFileRename(string nestedName, string oldParentName, string newParentName);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.RenameOptionsModel : object {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <RenameFile>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <FindDynamics>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <FindStructurallyCompatible>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ChangeTextOccurrences>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <UISearchTextOccurrences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Inline>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RenameDerived>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasUI>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Bulk>k__BackingField;
    public IProperty`1<bool> RenameFile { get; public set; }
    public IProperty`1<bool> FindDynamics { get; public set; }
    public IProperty`1<bool> FindStructurallyCompatible { get; public set; }
    public IProperty`1<bool> ChangeTextOccurrences { get; public set; }
    public IProperty`1<bool> UISearchTextOccurrences { get; public set; }
    public bool Inline { get; public set; }
    public bool RenameDerived { get; public set; }
    public bool HasUI { get; public set; }
    public bool Bulk { get; public set; }
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_RenameFile();
    [CompilerGeneratedAttribute]
public void set_RenameFile(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_FindDynamics();
    [CompilerGeneratedAttribute]
public void set_FindDynamics(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_FindStructurallyCompatible();
    [CompilerGeneratedAttribute]
public void set_FindStructurallyCompatible(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ChangeTextOccurrences();
    [CompilerGeneratedAttribute]
public void set_ChangeTextOccurrences(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_UISearchTextOccurrences();
    [CompilerGeneratedAttribute]
public void set_UISearchTextOccurrences(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_Inline();
    [CompilerGeneratedAttribute]
public void set_Inline(bool value);
    [CompilerGeneratedAttribute]
public bool get_RenameDerived();
    [CompilerGeneratedAttribute]
public void set_RenameDerived(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasUI();
    [CompilerGeneratedAttribute]
public void set_HasUI(bool value);
    [CompilerGeneratedAttribute]
public bool get_Bulk();
    [CompilerGeneratedAttribute]
public void set_Bulk(bool value);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.RenamePartAttribute : ShellComponentAttribute {
    public RenamePartAttribute(Instantiation instantiation);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.RenameRefactoringService : object {
    public static DataConstant`1<ICollection`1<IDeclaredElement>> PRIMEVAL_DECLARED_ELEMENTS_TO_RENAME;
    private LanguageManager myLanguageManager;
    private ProductConfigurations myConfigurations;
    private IFeaturePartsContainer myFeatureParts;
    private IEnumerable`1<IPrimaryDeclaredElementForRenameProvider> myPrimaryDeclaredElementForRenameProviders;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileRenameProvider> <FileRenameProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsCompletionRenameEnabled>k__BackingField;
    public static DataConstant`1<RenameDataProvider> RenameDataProvider;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsInlineRenameEnabled>k__BackingField;
    public static RenameRefactoringService Instance { get; }
    public IEnumerable`1<IFileRenameProvider> FileRenameProviders { get; }
    public IProperty`1<bool> IsCompletionRenameEnabled { get; }
    public IProperty`1<bool> IsInlineRenameEnabled { get; }
    public RenameRefactoringService(LanguageManager languageManager, ProductConfigurations configurations, IEnumerable`1<IFileRenameProvider> fileRenameProviders, IFeaturePartsContainer featureParts, IEnumerable`1<IPrimaryDeclaredElementForRenameProvider> primaryDeclaredElementForRenameProviders, ISettingsStore settingsStore, IActionManager actionManager, Lifetime lifetime);
    private static RenameRefactoringService();
    public static RenameRefactoringService get_Instance();
    [CompilerGeneratedAttribute]
public IEnumerable`1<IFileRenameProvider> get_FileRenameProviders();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsCompletionRenameEnabled();
    public static ConflictSearchResult RenameFromContext(IDataContext context);
    private static IRefactoringWorkflow CreateWorkflow(IDataContext context);
    public RenameHelperBase GetRenameService(PsiLanguageType psiLanguageType);
    private bool AreLocal(ICollection`1<IDeclaredElement> primevalDeclaredElements);
    public IEnumerable`1<AtomicRenameBase> CreateAtomicRenames(IDeclaredElement element, string newName, bool doNotAddBindingConflicts);
    public IEnumerable`1<AtomicRenameBase> CreateAtomicRenamesWithShared(IDeclaredElement element, string newName, bool doNotAddBindingConflicts);
    public bool UseSharedElements(IDeclaredElement element);
    public IEnumerable`1<AtomicRenameBase> CreateAtomicRenames(Dictionary`2<IDeclaredElement, string> dictionary, bool doNotAddBindingConflicts);
    private IEnumerable`1<IAtomicRenameFactory> GetApplicableFactories(IDeclaredElement element);
    [CanBeNullAttribute]
public IDeclaredElement GetPrimevalDeclaredElement(IDeclaredElement element, IReference reference);
    public RenameAvailabilityCheckResult CheckRenameAvailability(IDeclaredElement element);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsInlineRenameEnabled();
    public bool CheckGlobalInlineRenameAvailability(IDataContext dataContext);
    [NotNullAttribute]
private ICollection`1<IDeclaredElement> GetPrimevalDeclaredElementsToRename(IDataContext context);
    public bool CheckLocalRenameAvailability(IDataContext context);
    public static void RenameFromDrivenContext(IRefactoringDriver driver, ISolution solution, RenameDataProvider dataProvider, ITextControl textControl, IProgressIndicator pi);
    public static string Rename(ISolution solution, RenameDataProvider dataProvider, ITextControl textControl);
    [CanBeNullAttribute]
public static ConflictSearchResult RenameAndGetConflicts(ISolution solution, RenameDataProvider dataProvider, ITextControl textControl);
    [CanBeNullAttribute]
private static IDataContext GetDataContext(ISolution solution, RenameDataProvider renameDataProvider, LifetimeDefinition lifetimeDefinition, ITextControl textControl);
    public INamingProjection GetNamingProjection(IDeclaredElement element, IReference reference);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.RenameSuggestion : object {
    [CompilerGeneratedAttribute]
private RenameSuggestionType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private PsiLanguageType <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Suggestion>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public RenameSuggestionType Type { get; public set; }
    public PsiLanguageType Language { get; public set; }
    public string Suggestion { get; public set; }
    public RenameSuggestion(RenameSuggestionType Type, PsiLanguageType Language, string Suggestion);
    [CompilerGeneratedAttribute]
protected RenameSuggestion(RenameSuggestion original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public RenameSuggestionType get_Type();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Type(RenameSuggestionType value);
    [CompilerGeneratedAttribute]
public PsiLanguageType get_Language();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Language(PsiLanguageType value);
    [CompilerGeneratedAttribute]
public string get_Suggestion();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Suggestion(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RenameSuggestion left, RenameSuggestion right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RenameSuggestion left, RenameSuggestion right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(RenameSuggestion other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual RenameSuggestion <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(RenameSuggestionType& Type, PsiLanguageType& Language, String& Suggestion);
}
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.RenameSuggestionsUsageCollector : CounterUsagesCollector {
    private String[] myAllowedLanguages;
    private EventLogGroup myGroup;
    [CompilerGeneratedAttribute]
private EventId2`2<RenameSuggestionType, string> <ShowRenameSuggestionsEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private EventId2`2<RenameSuggestionType, string> <UseRenameSuggestionsEvent>k__BackingField;
    private EventId2`2<RenameSuggestionType, string> ShowRenameSuggestionsEvent { get; }
    private EventId2`2<RenameSuggestionType, string> UseRenameSuggestionsEvent { get; }
    public RenameSuggestionsUsageCollector(FeatureUsageLogger featureUsageLogger);
    public virtual EventLogGroup GetGroup();
    [CompilerGeneratedAttribute]
private EventId2`2<RenameSuggestionType, string> get_ShowRenameSuggestionsEvent();
    [CompilerGeneratedAttribute]
private EventId2`2<RenameSuggestionType, string> get_UseRenameSuggestionsEvent();
    public void RegisterShowSuggestions(ISolution solution, RenameSuggestionType suggestionType, string language);
    public void RegisterSelectSuggestion(ISolution solution, RenameSuggestionType suggestionType, string language);
}
public enum JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.RenameSuggestionType : Enum {
    public int value__;
    public static RenameSuggestionType IDESuggestion;
    public static RenameSuggestionType AISuggestion;
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.RenameWorkflowPopupOccurrence : WorkflowPopupMenuOccurrence`1<DocumentRange> {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDeclaredElementPointer`1<IDeclaredElement>> <Elements>k__BackingField;
    public IEnumerable`1<IDeclaredElementPointer`1<IDeclaredElement>> Elements { get; }
    public RenameWorkflowPopupOccurrence(string name, string description, IList`1<IDeclaredElement> declaredElements);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IDeclaredElementPointer`1<IDeclaredElement>> get_Elements();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.SuspiciousReferenceSearchContext : object {
    [CompilerGeneratedAttribute]
private HashSet`1<string> <Names>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<IDeclaredElement> <ElementsToRename>k__BackingField;
    [CompilerGeneratedAttribute]
private IFilteringReferenceProviderFactory <ReferenceProviderFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`3<IReference, IDeclaredElement, ISubstitution> <Consumer>k__BackingField;
    public HashSet`1<string> Names { get; }
    public HashSet`1<IDeclaredElement> ElementsToRename { get; }
    public IFilteringReferenceProviderFactory ReferenceProviderFactory { get; }
    public Action`3<IReference, IDeclaredElement, ISubstitution> Consumer { get; }
    public SuspiciousReferenceSearchContext(HashSet`1<string> names, HashSet`1<IDeclaredElement> elementsToRename, IFilteringReferenceProviderFactory referenceProviderFactory, Action`3<IReference, IDeclaredElement, ISubstitution> consumer);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_Names();
    [CompilerGeneratedAttribute]
public HashSet`1<IDeclaredElement> get_ElementsToRename();
    [CompilerGeneratedAttribute]
public IFilteringReferenceProviderFactory get_ReferenceProviderFactory();
    [CompilerGeneratedAttribute]
public Action`3<IReference, IDeclaredElement, ISubstitution> get_Consumer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.SuspiciousReferencesSearchProcessor : NamedThingsSearchSourceFileProcessor {
    [CompilerGeneratedAttribute]
private SuspiciousReferenceSearchContext <Context>k__BackingField;
    public SuspiciousReferenceSearchContext Context { get; }
    public SuspiciousReferencesSearchProcessor(ITreeNode root, SuspiciousReferenceSearchContext context);
    [CompilerGeneratedAttribute]
public SuspiciousReferenceSearchContext get_Context();
    protected virtual FindExecution ProcessReference(IReference reference);
    protected virtual bool CanBeSuspicious(IReference reference, IDeclaredElement declaredElement);
    protected virtual bool PreFilterReference(IReference reference);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.SuspiciousReferencesSearchService : object {
    public virtual IEnumerable`1<string> GetPossibleReferenceNames(IDeclaredElement declaredElement, string newName);
    public virtual ISearchDomain TryGetAdditionalSearchDomain(IDeclaredElement declaredElement, string newName);
    public virtual IEnumerable`1<Type> GetCustomReferenceTypesToIgnore();
    public virtual object TryGetKey(IDeclaredElement declaredElement, string newName);
    public virtual bool CanContainSuspiciousReferences(IPsiSourceFile sourceFile, object key);
}
public abstract class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.RenameWorkflowProvider : object {
    public static string ACTION_ID;
    protected static string ActionId { get; }
    public abstract virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
    protected static string get_ActionId();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.SafeDeleteFolderLanguageSpecific : object {
    public bool IsLanguageSupported { get; }
    public virtual bool get_IsLanguageSupported();
    public virtual IList`1<IDeclaredElement> GetExternalDeclaredElements(IFile file);
    public virtual IEnumerable`1<ITreeNode> GetUsingsFromFile(IFile file, IList`1<INamespace> namespaces);
    public virtual void RemoveUsing(ITreeNode element);
}
public abstract class JetBrains.ReSharper.Feature.Services.Refactorings.Specific.SafeDeleteWorkflowProvider : object {
    public static string ACTION_ID;
    protected static string ActionId { get; }
    public abstract virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
    protected static string get_ActionId();
}
public static class JetBrains.ReSharper.Feature.Services.Refactorings.SubRefactoringWorkflowProcessor : object {
    public static void Execute(DrivenRefactoringWorkflow workflow, IRefactoringDriver driver, IDataContext context, IProgressIndicator pi);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.TextOccurrenceRenameMarker : RangeOccurrence {
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Included>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OldName>k__BackingField;
    public TextRange OldNameRange { get; }
    public string NewName { get; public set; }
    public bool Included { get; public set; }
    public string OldName { get; public set; }
    public TextOccurrenceRenameMarker(FindResultText occurrence, string newName);
    private TextOccurrenceRenameMarker(IPsiSourceFile sourceFile, DocumentRange documentRange, string newName);
    public sealed virtual TextRange get_OldNameRange();
    public sealed virtual IDocument GetDocument();
    [CompilerGeneratedAttribute]
public sealed virtual string get_NewName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NewName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Included();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Included(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_OldName();
    [CompilerGeneratedAttribute]
public void set_OldName(string value);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.WorkflowExecuter : object {
    [CanBeNullAttribute]
private ITextControl myTextControl;
    [CanBeNullAttribute]
private IDisposable myTextControlLockCookie;
    private Action myUnsubscribeSolutionWatch;
    private Action myReleaseWriteLockHandler;
    private Action myUnsubscribeAnyChangeWatch;
    private ISolution mySolution;
    private IWorkflowHost myHost;
    private IEventBus myEventBus;
    private IRefactoringWorkflow myWorkflow;
    private LifetimeDefinition myLifetimeDefinition;
    private Stack`1<IRefactoringPage> myPages;
    private IRefactoringPage myConflictsPage;
    private bool myNeedUpdateOnActivation;
    private bool myIsDisposed;
    private RefactoringId myRefactoringId;
    [CompilerGeneratedAttribute]
private static IProperty`1<bool> <RunningRefactoring>k__BackingField;
    public static IProperty`1<bool> RunningRefactoring { get; }
    public IRefactoringWorkflow Workflow { get; }
    public Lifetime Lifetime { get; }
    public ISolution Solution { get; }
    private WorkflowExecuter(IRefactoringWorkflow workflow, ISolution solution, IWorkflowHost host, IEventBus eventBus);
    private static WorkflowExecuter();
    [CompilerGeneratedAttribute]
public static IProperty`1<bool> get_RunningRefactoring();
    public IRefactoringWorkflow get_Workflow();
    public Lifetime get_Lifetime();
    public ISolution get_Solution();
    public static void ExecuteBatch(IDataContext context, IRefactoringWorkflow workflow);
    public static void ExecuteBulkFix(IDataContext context, IRefactoringWorkflow workflow);
    public static void ExecuteWithCustomHost(IDataContext context, IRefactoringWorkflow refactoringWorkflow, IWorkflowHost host);
    public void UnlockTextControl();
    public void UpdateOnActivation();
    public void MoveToPreviousPage();
    public ConflictSearchResult RefreshConflicts();
    public bool MoveToNextPage();
    private bool FirstPage();
    private void LockTextControl();
    private void RemoveLockAfterWriteLock(object sender, BeforeAcquiringWriteLockEventArgs e);
    private void MarkChanged(object sender, EventArgs e);
    public void StartRefactoring();
    private bool InitializeWorkflow(IDataContext dataContext);
    private void SubscribeSolutionWatch();
    private void DisposeOnSolutionClose();
    private bool NextPage(IRefactoringPage currentPage);
    private bool InitPage(IRefactoringPage page);
    private bool RunWithProgress(Func`2<IProgressIndicator, TResult> action, string taskName, TResult& result);
    private bool ProcessTransactionResult(TransactionCommitResult transactionResult);
    private bool TryExecuteRefactoring();
    [NotNullAttribute]
public IModuleReferenceResolveContext GetResolveContext();
    private bool ExecuteRefactoring(Boolean& result);
    public sealed virtual void Dispose();
    private void Unsubscribe();
    [CompilerGeneratedAttribute]
private bool <UpdateOnActivation>g__RefreshAction|29_0(IProgressIndicator indicator);
    [CompilerGeneratedAttribute]
private bool <InitPage>b__42_3(IProgressIndicator pi);
    [CompilerGeneratedAttribute]
private bool <ProcessTransactionResult>b__44_0(IProgressIndicator pi);
    [CompilerGeneratedAttribute]
private bool <ProcessTransactionResult>b__44_1(IProgressIndicator pi);
    [CompilerGeneratedAttribute]
private bool <ExecuteRefactoring>b__47_0(IProgressIndicator pi);
    [CompilerGeneratedAttribute]
private void <Dispose>b__48_0();
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.WorkflowOccurrences.SimplePopupOccurrence : WorkflowPopupMenuOccurrence`1<ITreeNode> {
    public SimplePopupOccurrence(RichText name, RichText description);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.WorkflowOccurrences.TreeNodePopupOccurrence : WorkflowPopupMenuOccurrence`1<ITreeNode> {
    public TreeNodePopupOccurrence(RichText name, RichText description, IList`1<ITreeNode> usages);
    public TreeNodePopupOccurrence(string name, string description, ITreeNode treeNode);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Refactorings.WorkflowOccurrences.WorkflowPopupMenu : object {
    private CustomHighlightingManager myHighlightingManager;
    public WorkflowPopupMenu(ISolution solution);
    public virtual T ShowPopup(Lifetime lifetime, T[] occurrences, CustomHighlightingKind kind, ITextControl textControl, PopupWindowContextSource popupWindowContext, string id);
    private CustomHighlightingRequest GetHighlightingRequest(ITextControl textControl, IEnumerable`1<DocumentRange> elements, CustomHighlightingKind kind, bool unhighlightOnDocumentChange);
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.WorkflowOccurrences.WorkflowPopupMenuOccurrence`1 : WorkflowPopupMenuOccurrenceBase {
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <Entities>k__BackingField;
    public IEnumerable`1<T> Entities { get; }
    public WorkflowPopupMenuOccurrence`1(RichText name, RichText description, IList`1<T> usages, Func`2<T, DocumentRange[]> ranges, IconId icon);
    public WorkflowPopupMenuOccurrence`1(RichText name, RichText description, IList`1<T> usages, Func`2<T, DocumentRange> ranges, IconId icon);
    public WorkflowPopupMenuOccurrence`1(RichText name, RichText description, IEnumerable`1<T> usages, IEnumerable`1<DocumentRange> ranges, IconId icon);
    public WorkflowPopupMenuOccurrence`1(RichText name, RichText description, T usage, Func`2<T, DocumentRange[]> ranges, IconId icon);
    public WorkflowPopupMenuOccurrence`1(RichText name, RichText description, T usage, IconId icon);
    [CompilerGeneratedAttribute]
public IEnumerable`1<T> get_Entities();
}
public class JetBrains.ReSharper.Feature.Services.Refactorings.WorkflowOccurrences.WorkflowPopupMenuOccurrenceBase : object {
    [CompilerGeneratedAttribute]
private RichText <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<DocumentRange> <Ranges>k__BackingField;
    public RichText Name { get; protected set; }
    public RichText Description { get; protected set; }
    [CanBeNullAttribute]
public IconId Icon { get; protected set; }
    [CanBeNullAttribute]
public IEnumerable`1<DocumentRange> Ranges { get; protected set; }
    [CompilerGeneratedAttribute]
public RichText get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(RichText value);
    [CompilerGeneratedAttribute]
public RichText get_Description();
    [CompilerGeneratedAttribute]
protected void set_Description(RichText value);
    [CompilerGeneratedAttribute]
public IconId get_Icon();
    [CompilerGeneratedAttribute]
protected void set_Icon(IconId value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<DocumentRange> get_Ranges();
    [CompilerGeneratedAttribute]
protected void set_Ranges(IEnumerable`1<DocumentRange> value);
}
public class JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons : object {
}
public class JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons : object {
}
public class JetBrains.ReSharper.Feature.Services.Resources.CodeCompletionThemedIcons : object {
}
[ActionGroupAttribute("CodeEntityFeatures", "0", "10")]
public class JetBrains.ReSharper.Feature.Services.resources.CodeEntityFeaturesActionGroup : object {
    public CodeEntityFeaturesActionGroup(NavigateContextualGroup navigateContextualFull, Separator sep0, FindUsagesContextualGroup findUsages, Separator sep, RefactorContextualGroup refactorContextual, Separator sep1, UnitTestContextMenuActionGroup unitTestContextMenuActionGroup);
}
public static class JetBrains.ReSharper.Feature.Services.Resources.CodeInsightsThemedIcons : object {
}
public class JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons : object {
}
public class JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons : object {
}
public class JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons : object {
}
public class JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons : object {
}
public class JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons : object {
}
[ActionGroupAttribute("GraphContextMenu", "0", "16")]
public class JetBrains.ReSharper.Feature.Services.resources.GraphContextMenuActionGroup : object {
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Feature.Services.Resources.GroupingStrings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string None { get; }
    public static string Type { get; }
    public static string Class { get; }
    public static string TypeAndMember { get; }
    public static string Namespace { get; }
    public static string NamespaceAndMember { get; }
    public static string NamespaceAndClass { get; }
    public static string NamespaceAndType { get; }
    public static string NamespaceTypeAndMember { get; }
    public static string Member { get; }
    public static string DirectoryAndFile { get; }
    public static string ProjectAndType { get; }
    public static string ProjectTypeAndMember { get; }
    public static string ProjectStructure { get; }
    public static string ProjectAndFolder { get; }
    public static string ProjectAndFolderAndFile { get; }
    public static string ProjectAndDirectory { get; }
    public static string ProjectFolderAndNamespace { get; }
    public static string ProjectAndNamespace { get; }
    public static string ProjectAndNamespaceAndClass { get; }
    public static string Project { get; }
    public static string Directory { get; }
    public static string File { get; }
    public static string Module { get; }
    public static string ModuleAndType { get; }
    public static string ModuleNamespaceAndType { get; }
    public static string OwnedProject { get; }
    public static string IssueCategory { get; }
    public static string IssueType { get; }
    public static string IssueCategoryAndIssueType { get; }
    public static string IssueCategoryAndFile { get; }
    public static string IssueCategoryAndProjectStructure { get; }
    public static string IssueTypeAndFile { get; }
    public static string IssueCategoryIssueTypeAndFile { get; }
    public static string IssueCategoryAndIssueSeverity { get; }
    public static string IssueCategoryIssueSeverityAndFile { get; }
    public static string IssueSeverity { get; }
    public static string IssueSeverityAndFile { get; }
    public static string IssueSeverityAndIssueCategory { get; }
    public static string IssueSeverityIssueCategoryAndFile { get; }
    public static string Tag { get; }
    public static string Kind { get; }
    private static GroupingStrings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_None();
    public static string get_Type();
    public static string get_Class();
    public static string get_TypeAndMember();
    public static string get_Namespace();
    public static string get_NamespaceAndMember();
    public static string get_NamespaceAndClass();
    public static string get_NamespaceAndType();
    public static string get_NamespaceTypeAndMember();
    public static string get_Member();
    public static string get_DirectoryAndFile();
    public static string get_ProjectAndType();
    public static string get_ProjectTypeAndMember();
    public static string get_ProjectStructure();
    public static string get_ProjectAndFolder();
    public static string get_ProjectAndFolderAndFile();
    public static string get_ProjectAndDirectory();
    public static string get_ProjectFolderAndNamespace();
    public static string get_ProjectAndNamespace();
    public static string get_ProjectAndNamespaceAndClass();
    public static string get_Project();
    public static string get_Directory();
    public static string get_File();
    public static string get_Module();
    public static string get_ModuleAndType();
    public static string get_ModuleNamespaceAndType();
    public static string get_OwnedProject();
    public static string get_IssueCategory();
    public static string get_IssueType();
    public static string get_IssueCategoryAndIssueType();
    public static string get_IssueCategoryAndFile();
    public static string get_IssueCategoryAndProjectStructure();
    public static string get_IssueTypeAndFile();
    public static string get_IssueCategoryIssueTypeAndFile();
    public static string get_IssueCategoryAndIssueSeverity();
    public static string get_IssueCategoryIssueSeverityAndFile();
    public static string get_IssueSeverity();
    public static string get_IssueSeverityAndFile();
    public static string get_IssueSeverityAndIssueCategory();
    public static string get_IssueSeverityIssueCategoryAndFile();
    public static string get_Tag();
    public static string get_Kind();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.resources.IconsForIconThemeSelectionSamplePsiServices : object {
    private IEnumerable`1<IconId> JetBrains.Application.UI.Icons.Settings.IIconsForIconThemeSelectionSample.SampleIcons { get; }
    private sealed virtual override IEnumerable`1<IconId> JetBrains.Application.UI.Icons.Settings.IIconsForIconThemeSelectionSample.get_SampleIcons();
}
[ActionGroupAttribute("2", "16")]
public class JetBrains.ReSharper.Feature.Services.resources.IgnoreItemActionGroup : object {
}
public interface JetBrains.ReSharper.Feature.Services.Resources.IUsagesPublisher {
    public abstract virtual void Subscribe(Lifetime lifetime, IEnumerable`1<IDeclaredElement> relatedDeclaredElements, IProperty`1<bool> property);
    public abstract virtual bool IsSubscribed(IProperty`1<bool> property);
}
public class JetBrains.ReSharper.Feature.Services.Resources.LocalHistoryThemedIcons : object {
}
[ActionGroupAttribute("OccurrenceBrowser.ContextMenu", "0", "10")]
public class JetBrains.ReSharper.Feature.Services.resources.OccurrenceBrowserContextMenuActionGroup : object {
    public OccurrenceBrowserContextMenuActionGroup(TreeModelBrowserSelectionActionGroup selectionActionGroup);
}
public class JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons : object {
}
public class JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons : object {
}
public class JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons : object {
}
public class JetBrains.ReSharper.Feature.Services.Resources.SkipItemsDialogThemedIcons : object {
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Feature.Services.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string ActionWasInterrupted_Text { get; }
    public static string AllInstancesOfThisTypeAreEqualToEach_Text { get; }
    public static string ActualSeveritySettingDescription { get; }
    public static string AggregateFilterStateSettingDescription { get; }
    public static string AllowCleanupOnSaveForSharedFilesSettingDescription { get; }
    public static string AllowDragNdropSettingDescription { get; }
    public static string AllowNewGroupingOfCleanupContextActionsSettingDescription { get; }
    public static string AnalysisModeSettingDescription { get; }
    public static string ArchitectureActionGroupText { get; }
    public static string ArchitectureViewSettingsSettingDescription { get; }
    public static string ASearchReplacePatternSettingDescription { get; }
    public static string AssemblyExplorerSettingsSettingDescription { get; }
    public static string Classes_Text { get; }
    public static string CodeInsights_Text { get; }
    public static string CodeSmell_Text { get; }
    public static string ColorPickerHighlighting_Text { get; }
    public static string CQRSValidationPageTitle { get; }
    public static string CreateLocalVariableOfType { get; }
    public static string CreateMethod_Text { get; }
    public static string Delegates_Text { get; }
    public static string DiscardTypeNameHints_Text { get; }
    public static string Enums_Text { get; }
    public static string Events_Text { get; }
    public static string ExpandLiveTemplate_Text { get; }
    public static string FeatureStatistics_Text { get; }
    public static string FileAnnotations_Text { get; }
    public static string GutterMarks_Text { get; }
    public static string IdentifierHighlightings_Text { get; }
    public static string InterLineAdornments_Text { get; }
    public static string IntraTextAdornments_Text { get; }
    public static string Fields_Text { get; }
    public static string Interfaces_Text { get; }
    public static string InternalSymbols_Text { get; }
    public static string Keywords_Text { get; }
    public static string LoadingSuggestions_Text { get; }
    public static string LocalVariables_Text { get; }
    public static string Methods_Text { get; }
    public static string MissingConstructHints_Text { get; }
    public static string MustDisposeResourceHints_Text { get; }
    public static string Namespaces_Text { get; }
    public static string OtherOptionPageTitle { get; }
    public static string Parameters_Text { get; }
    public static string PragmaDescriptionHints_Text { get; }
    public static string PrivateSymbols_Text { get; }
    public static string Properties_Text { get; }
    public static string ProtectedSymbols_Text { get; }
    public static string PublicSymbols_Text { get; }
    public static string ReferenceProjectOrAssemblyName_Text { get; }
    public static string PushToHintLongTapDuration_IntOption_Text { get; }
    public static string ProjectHighlightings_Text { get; }
    public static string WheaterToCheckCompiledCode { get; }
    public static string ResourcesDisposePointsHints_Text { get; }
    public static string ShortNameForAutoDetectedSettingsLayer { get; }
    public static string AutoFormatOnClosingBraceSettingDescription { get; }
    public static string AutoFormatOnPasteSettingDescription { get; }
    public static string AutoFormatOnSemicolonSettingDescription { get; }
    public static string AutoInsertClosingBraceSettingDescription { get; }
    public static string AutoInsertPairBracketsParenthesesAndQuotesSettingDescription { get; }
    public static string DisposeAnalysisModeSettingDescription { get; }
    public static string EnableVisualStudioQuickActionsRetrieval_Text { get; }
    public static string FeatureSuggestion_Text { get; }
    public static string FindResults_Text { get; }
    public static string HasDefaultConstructor_Text { get; }
    public static string AllowsByRefLikeTypes_Text { get; }
    public static string InspectionResults_Text { get; }
    public static string JoinConcatenatedStringsOnPlusSignRemovalDescription { get; }
    public static string AutomaticallyCompleteItemsInImportCompletionSettingDescription { get; }
    public static string AutomaticallyCompleteItemsInSmartCompletionSettingDescription { get; }
    public static string AutomaticallyCompleteItemsInSymbolCompletionSettingDescription { get; }
    public static string AutomaticCodeCompletionSettingDescription { get; }
    public static string AutomaticParameterInfoDelayInMillisecondsSettingDescription { get; }
    public static string AutomaticPopupDelayInMillisecondsSettingDescription { get; }
    public static string AutoOpenSettingDescription { get; }
    public static string BackspaceUnindentSettingDescription { get; }
    public static string BagOfRawSettingsSettingDescription { get; }
    public static string BatterySaverModeLevelTurnedOffSettingDescription { get; }
    public static string BookmarkCoordsInAFileSettingDescription { get; }
    public static string BookmarkFileIdSettingDescription { get; }
    public static string BookmarkOwnerSettingDescription { get; }
    public static string BookmarksSettingsSettingDescription { get; }
    public static string BrowseStackTraceActionText { get; }
    public static string BuildActionSettingDescription { get; }
    public static string CandidatesLimitSettingDescription { get; }
    public static string CategoriesSettingDescription { get; }
    public static string ChangeWrappingOfWordsActionText { get; }
    public static string CheckWhetherSymbolIsObsoleteSettingDescription { get; }
    public static string ChooseWhatHappensWhenYouInvokeTheGoToDeclarationCommandShortcutOrDoubleClickOnASymbolDeclarationSettingDescription { get; }
    public static string CleanupAllConfigurationsTargetFrameworksOnSaveSettingDescription { get; }
    public static string CleanupOnSaveFileMaskSettingDescription { get; }
    public static string ClearFiltersActionText { get; }
    public static string ClearSelectionActionText { get; }
    public static string CodeCleanupCategory_TypeScriptSpecific { get; }
    public static string CodeCleanupGroup_Copyright { get; }
    public static string CodeCleanupGroup_ExternalTools { get; }
    public static string CodeCleanupGroup_OptimizeImports { get; }
    public static string CodeCleanupGroup_Rearrange { get; }
    public static string CodeCleanupGroup_RedundanciesOptimizations { get; }
    public static string CodeCleanupGroup_Reformat { get; }
    public static string CodeCleanupGroup_SyntaxStyle { get; }
    public static string CodeCleanupSettingsSettingDescription { get; }
    public static string CodeCleanupTask_CSMakeAutoPropertyGetOnly { get; }
    public static string CodeCleanupTask_CSMakeFieldReadonly { get; }
    public static string CodeCleanupTask_VBMakeFieldReadonly { get; }
    public static string CodeCleanupTask_RemoveCodeRedundanciesVB { get; }
    public static string CodeCleanupTask_VBFormatDocComments { get; }
    public static string CodeCleanupTask_VBOptimizeImports { get; }
    public static string CodeCleanupTask_VBReformatCode { get; }
    public static string CodeCleanupTask_VBShortenReferences { get; }
    public static string CodeCompletionPerformanceSettingsSettingDescription { get; }
    public static string CodeCompletionSettingsSettingDescription { get; }
    public static string CodeEditingOptionPageTitle { get; }
    public static string CodeInspectionOptionPageTitle { get; }
    public static string ColorForMatchesOfThePatternSettingDescription { get; }
    public static string ColorUsageHighlightingEnabledSettingDescription { get; }
    public static string CommentSettingDescription { get; }
    public static string CompleteOnSpaceSettingDescription { get; }
    public static string CompletionFiltersSettingsSettingDescription { get; }
    public static string ContextActionsEnabledDisabledStatusEachContextActionIsEnabledByDefaultSettingDescription { get; }
    public static string ContextActionsSettingDescription { get; }
    public static string ControlsThemeSelectionForSourceCodeSymbolIconsSettingDescription { get; }
    public static string CorrectCommonLanguageSpecificTyposSettingDescription { get; }
    public static string CouplingCalculationIsTurnedOnSettingDescription { get; }
    public static string CurrentModeSettingDescription { get; }
    public static string CustomFilterStateSettingDescription { get; }
    public static string CustomIconToDisplayForTheMatchSettingDescription { get; }
    public static string CustomProfilesCollectionSettingDescription { get; }
    public static string CustomPropertiesSettingDescription { get; }
    public static string DebuggerSettingsSettingDescription { get; }
    public static string DefaultGroupingForOccurrencesSettingDescription { get; }
    public static string DefaultGroupingForToDoItemsSettingDescription { get; }
    public static string DefaultGroupingIndicesForOccurrencesSettingDescription { get; }
    public static string DefaultIntervalBetweenSuggestionsInSecondsSettingDescription { get; }
    public static string DefaultParameterInfoLocationSettingDescription { get; }
    public static string DependsOnMainFileSettingDescription { get; }
    public static string Structs_Text { get; }
    public static string SolutionWideAnalysisErrors_Text { get; }
    public static string TemplateSectionPresenceSettingDescription { get; }
    public static string TemplateSectionPresenceHintSettingDescription { get; }
    public static string DisableAllTipsActionText { get; }
    public static string NotNullableType_Text { get; }
    public static string EditableOccurrenceSettingDescription { get; }
    public static string EditableSectionSettingDescription { get; }
    public static string EditActionGroupText { get; }
    public static string EditorBrowsableProcessingSettingDescription { get; }
    public static string EnableAutomaticParameterInfoPopupSettingDescription { get; }
    public static string EnableAutomaticReSharperIntelliSensePopupSettingDescription { get; }
    public static string EnableFiltersSettingDescription { get; }
    public static string EnableOrDisableSearchDomainReduceBySweaNeverShowThisOptionInUISettingDescription { get; }
    public static string EnableReSharperQuickInfoSettingDescription { get; }
    public static string EnableSearchEverywhereSettingDescription { get; }
    public static string EnableStructuralRemoveSettingDescription { get; }
    public static string EnterActionSettingDescription { get; }
    public static string EnterKeyActionSettingDescription { get; }
    public static string EntryNameSettingDescription { get; }
    public static string EntryPositionSettingDescription { get; }
    public static string ExecuteActionText { get; }
    public static string ExecuteRefactoringActionGroupText { get; }
    public static string ExplorerActionBarActionGroupText { get; }
    public static string EXtendSelectionActionText { get; }
    public static string ExternalSourcesNavigationOptionsSettingDescription { get; }
    public static string FeatureSuggestionManagerSettingsSettingDescription { get; }
    public static string FieldExpressionSettingDescription { get; }
    public static string FieldsMappingSettingDescription { get; }
    public static string FileMasksToSkipSettingDescription { get; }
    public static string FilesAndDirectoriesMasksToSkipSettingDescription { get; }
    public static string FilesAndDirectoriesToSkipSettingDescription { get; }
    public static string FilesAndFoldersToSkipSettingDescription { get; }
    public static string FilesExcludedFromCodeAnalysisSettingDescription { get; }
    public static string FileTemplateActionText { get; }
    public static string FilterClassesActionText { get; }
    public static string FilterClassesInvertActionText { get; }
    public static string FilterCustomActionText { get; }
    public static string FilterCustomInvertActionText { get; }
    public static string FilterDelegatesActionText { get; }
    public static string FilterDelegatesInvertActionText { get; }
    public static string FilterEnumsActionText { get; }
    public static string FilterEnumsInvertActionText { get; }
    public static string FilterEventActionText { get; }
    public static string FilterEventInvertActionText { get; }
    public static string FilterExtensionMethodsActionText { get; }
    public static string FilterExtensionMethodsInvertActionText { get; }
    public static string FilterFieldsActionText { get; }
    public static string FilterFieldsInvertActionText { get; }
    public static string FilterInterfacesActionText { get; }
    public static string FilterInterfacesInvertActionText { get; }
    public static string FilterInternalSymbolsActionText { get; }
    public static string FilterInternalSymbolsInvertActionText { get; }
    public static string FilterKeywordsActionText { get; }
    public static string FilterKeywordsInvertActionText { get; }
    public static string FilterLivePostfixTemplatesActionText { get; }
    public static string FilterLivePostfixTemplatesInvertActionText { get; }
    public static string FilterLocalVariablesActionText { get; }
    public static string FilterLocalVariablesInvertActionText { get; }
    public static string FilterMethodsActionText { get; }
    public static string FilterMethodsInvertActionText { get; }
    public static string FilterNamespacesActionText { get; }
    public static string FilterNamespacesInvertActionText { get; }
    public static string FilterParametersActionText { get; }
    public static string FilterParametersInvertActionText { get; }
    public static string FilterPrivateSymbolsActionText { get; }
    public static string FilterPrivateSymbolsInvertActionText { get; }
    public static string FilterPropertiesActionText { get; }
    public static string FilterPropertiesInvertActionText { get; }
    public static string FilterProtectedSymbolsActionText { get; }
    public static string FilterProtectedSymbolsInvertActionText { get; }
    public static string FilterPublicSymbolsActionText { get; }
    public static string FilterPublicSymbolsInvertActionText { get; }
    public static string FilterStateSettingDescription { get; }
    public static string FilterStructsActionText { get; }
    public static string FilterStructsInvertActionText { get; }
    public static string FindActionGroupText { get; }
    public static string FindGenericTypeUsagesBehaviourSettingDescription { get; }
    public static string FirstTimeNavigationDialogHasBeenShownSettingDescription { get; }
    public static string ForceCompletionOfItemActionText { get; }
    public static string FormatAfterReplaceSettingDescription { get; }
    public static string FuzzyResultsInGoToTextSettingDescription { get; }
    public static string GeneralSettingsAppliedToATextEditorSettingDescription { get; }
    public static string GroupBySettingDescription { get; }
    public static string GroupTemplateByUITagSettingDescription { get; }
    public static string HideParameterNameHintsForMethodsAnnotatedAsStringFormatMethodSettingDescription { get; }
    public static string HideParameterNameHintsForParameterArraysSettingDescription { get; }
    public static string HideVisualStudioLightBulbSettingDescription { get; }
    public static string HideVisualStudioSquigglesSettingDescription { get; }
    public static string HighlightConditionElementsSettingDescription { get; }
    public static string PrimaryParametersCaptureHighlightingEnabled { get; }
    public static string HighlightContextExitsSettingDescription { get; }
    public static string HighlightingEyeSettingsSettingDescription { get; }
    public static string HighlightingLevelForRecentlyUnmodifiedCodeFromSettingDescription { get; }
    public static string HighlightingSettingsSettingDescription { get; }
    public static string HighlightingSeveritySettingDescription { get; }
    public static string HighlightNewlyAddedItemsSettingDescription { get; }
    public static string HighlightRelatedAsyncAwaitKeywordsSettingDescription { get; }
    public static string HighlightUsagesOfTheElementUnderCaretInCSettingDescription { get; }
    public static string HowTheCodeIsGeneratedByTheGenerateFeatureSettingDescription { get; }
    public static string IdentifierHighlightingEnabledSettingDescription { get; }
    public static string IgnoreAdditionalUnmatchedContentSettingDescription { get; }
    public static string IgnoreBracesInSingleStatementBlocksSettingDescription { get; }
    public static string IgnoreCConditionalAccessSignSettingDescription { get; }
    public static string IgnoreEmptyStatementsSettingDescription { get; }
    public static string IgnoreIndependentModeSettingDescription { get; }
    public static string IgnoreParenthesesInExpressionsSettingDescription { get; }
    public static string ImageSettingDescription { get; }
    public static string InlayHintsGeneralOptionsPage_Default_Visibility { get; }
    public static string InlayHintsGeneralOptionsPage_Enable_Inlay_Hints { get; }
    public static string InlayHintsGeneralOptionsPage_Enable_Inlay_Hints_in__NET_languages { get; }
    public static string InlayHintsGeneralOptionsPage_Name { get; }
    public static string InlayHintsGeneralOptionsPage_Push_To_Hint { get; }
    public static string InlayHintsGeneralOptionsPage_Push_To_Hint_Help { get; }
    public static string InlayHintsGeneralOptionsPage_Push_To_Hint_Help_Rider { get; }
    public static string InlayHintsGeneralOptionsPage_Push_To_Hint_Rider { get; }
    public static string InlayHintsGeneralOptionsPage_FixAlignmentForInlayHints { get; }
    public static string InlayHintsGeneralOptionsPage_Enable_VirtualFormatter { get; }
    public static string InlayHintsGeneralOptionsPage_Use_Virtual_Indent_Settings { get; }
    public static string InlayHintsGeneralOptionsPage_Virtual_Indent_Settings_Open { get; }
    public static string InlayHintsOptionPageTitle { get; }
    public static string InsertBracesForEmbeddedStatementsSettingDescription { get; }
    public static string InsertOnEnterAfterSettingDescription { get; }
    public static string InsertVirtualIndentOnEnterSettingDescription { get; }
    public static string InspectActionGroupText { get; }
    public static string InspectionSeveritiesSettingDescription { get; }
    public static string IntegerArithmeticAnalysisModeSettingDescription { get; }
    public static string IntegrateGoToTextIntoSearchEverywhereSettingDescription { get; }
    public static string IncrementalDaemonStagesOptimizationSettingDescription { get; }
    public static string IntelliSenseEnablingSettingsSetSettingDescription { get; }
    public static string IntelliSenseGloballyEnabledSettingDescription { get; }
    public static string IntelliSenseHousekeepingSettingsSettingDescription { get; }
    public static string IntelliSenseSettingsSettingDescription { get; }
    public static string IntroduceLocalVariableRefactoringSettingsRegardingTheUseOfThevarKeywordRatherThanExplicitTypeSettingDescription { get; }
    public static string IntroduceVariablesWithvarTypeWhenTheTypeIsEvidentFromTheAssignedValueEGNewClauseSettingDescription { get; }
    public static string IntroduceVariablesWithvarTypeWhenTheTypeIsNOTEvidentFromTheAssignedValueSettingDescription { get; }
    public static string InvokeParameterInfoFromTemplatesSettingDescription { get; }
    public static string IsAReplacePatternSettingDescription { get; }
    public static string IsEnabledSettingDescription { get; }
    public static string Refactoring_Text { get; }
    public static string ReferenceType_Text { get; }
    public static string SearchUrl { get; }
    public static string IsInvisibleSettingDescription { get; }
    public static string IsLengthOfParsedLinesLimitedSettingDescription { get; }
    public static string JumpOutsideOfClosingBracesQuotesInStringLiteralsWithTabSettingDescription { get; }
    public static string JumpOutsideOfClosingBracesQuotesWithTabWhenTheCaretIsBeforeTheFirstSymbolOnTheLineSettingDescription { get; }
    public static string JumpOutsideOfClosingBracesWithTabWhenTypingSettingDescription { get; }
    public static string KeywordWithTheSameNameIsRequiredForThisTemplateToAppearInCompletionSettingDescription { get; }
    public static string LanguageInjectionsOptionPageTitle { get; }
    public static string LanguageSettingDescription { get; }
    public static string LimitNumberOfCandidatesToSettingDescription { get; }
    public static string ListNameSettingDescription { get; }
    public static string LiveTemplatesLibrarySettingDescription { get; }
    public static string LocationSelectorConfigSettingDescription { get; }
    public static string LocationSelectorNameSettingDescription { get; }
    public static string LockExternalSourcesFilesLocatedOnLocalMachineSettingDescription { get; }
    public static string LookupWindowHeightSettingDescription { get; }
    public static string LookupWindowSettingsSettingDescription { get; }
    public static string MakeUseOfSolutionWideAnalysisResultsWhenApplyingQuickFixesInScopeSettingDescription { get; }
    public static string MatchAllCatchClausesWithOutWithoutExceptionFiltersSettingDescription { get; }
    public static string MatchAllMembersWithOrWithoutModifiersSettingDescription { get; }
    public static string MatchAllSymbolsWithOrWithoutAttributesSettingDescription { get; }
    public static string MatchCaseSensitivelySettingDescription { get; }
    public static string MatchCExpressionBodiesAndSimilarPlainOldRegularMethodBodiesSettingDescription { get; }
    public static string MatchInCommentsSettingDescription { get; }
    public static string MatchingBraceHighlightingPositionSettingDescription { get; }
    public static string MatchingBraceHighlightingSettingsShowMatchingBraceHeaderWithInlayHint { get; }
    public static string MatchingBraceHighlightingSettingsSettingDescription { get; }
    public static string MatchingBraceHighlightingStyleSettingDescription { get; }
    public static string MatchInIdentifiersSettingDescription { get; }
    public static string MatchInStringsSettingDescription { get; }
    public static string MatchMethodParametersWiththisrefOroutSettingDescription { get; }
    public static string MatchVoidWithTypePlaceholderSettingDescription { get; }
    public static string MaxLengthOfLinesToBeParsedSettingDescription { get; }
    public static string MaxLiveTabCountSettingDescription { get; }
    public static string MergeItemsInRecentEditsSettingDescription { get; }
    public static string MergeVisualStudioLightBulbActionsIntoReSharperBulbSettingDescription { get; }
    public static string MessagePatternForTracePointSettingDescription { get; }
    public static string MetadataPropertiesSettingDescription { get; }
    public static string MoveCaretToCodeBlockEndActionText { get; }
    public static string MoveCaretToCodeBlockEndWithSelectionActionText { get; }
    public static string MoveCaretToCodeBlockStartActionText { get; }
    public static string MoveCaretToCodeBlockStartWithSelectionActionText { get; }
    public static string MRUSettingsForTheGenerateDialogSettingDescription { get; }
    public static string NameOfThePatternSettingDescription { get; }
    public static string NarrowDownLookupListOnTypingSettingDescription { get; }
    public static string NavigateActionGroupText { get; }
    public static string NavigateToActualTypeDuringDebuggingSettingDescription { get; }
    public static string NavigationModeSettingDescription { get; }
    public static string NextFilterActionText { get; }
    public static string NonCompletingCharactersSettingDescription { get; }
    public static string OnlineHelpSettingsDescription { get; }
    public static string SearchEngineSectionDescription { get; }
    public static string OnlineHelpSettingsComment { get; }
    public static string OnlyRunCleanupOnChangedPartsOfFileSettingDescription { get; }
    public static string OnlyRunCleanupOnChangedPartsOfRecentlyModifiedFileSettingDescription { get; }
    public static string OpenPreviewTabForSelectedItemInFindResultsWindowSettingDescription { get; }
    public static string OpenSettingsActionText { get; }
    public static string OtherSettingDescription { get; }
    public static string PaintItemsInTodoExplorerSettingDescription { get; }
    public static string ParallelCodeAnalysisWhenApplyingQuickFixesAndContextActionsInScopeSettingDescription { get; }
    public static string ParameterInformationActionText { get; }
    public static string ParameterInfoSettingsSettingDescription { get; }
    public static string ParenthesesInsertionTypeSettingDescription { get; }
    public static string PerformFullCleanupIfPartialImpossible { get; }
    public static string PeriodToConsiderFilesRecentlyModifiedDaysSettingDescription { get; }
    public static string PeriodToTrackRecentlyModifiedFilesSettingDescription { get; }
    public static string PlaceholderSettingDescription { get; }
    public static string PlainTextSectionSettingDescription { get; }
    public static string PositionInTheListSettingDescription { get; }
    public static string PostfixTemplatesSettingsSettingDescription { get; }
    public static string PreCommitDelayMsSettingDescription { get; }
    public static string PreviousFilterActionText { get; }
    public static string ProfileSubstitutionSettingDescription { get; }
    public static string ProfileToUseForSilentCleanupSettingDescription { get; }
    public static string ProjectHierarchyUpdateActionText { get; }
    public static string ProjectHierarchyViewSettingsSettingDescription { get; }
    public static string PropertiesSettingDescription { get; }
    public static string QuickDocViewSettingsSettingDescription { get; }
    public static string QuickInfoSettingsSettingDescription { get; }
    public static string QuicklistEntrySettingDescription { get; }
    public static string QuicklistSettingDescription { get; }
    public static string ReadSettingsFromEditorconfigAndProjectSettingsSettingDescription { get; }
    public static string RecentEditsCountSettingDescription { get; }
    public static string RecentFilesCountSettingDescription { get; }
    public static string RecentlyUsedProfileSettingDescription { get; }
    public static string RecentSearchSettingDescription { get; }
    public static string RefactorFilesActionGroupText { get; }
    public static string RefactorActionGroupText { get; }
    public static string RefactoringsDeferredRenameActionText { get; }
    public static string ReferencedProjectsActionText { get; }
    public static string ReferenceSectionSettingDescription { get; }
    public static string ReferencingProjectsActionText { get; }
    public static string ReformatAfterExpansionSettingDescription { get; }
    public static string RefreshActionText { get; }
    public static string RegularExpressionSettingDescription { get; }
    public static string RememberExtendedSearchPreferencesSettingDescription { get; }
    public static string RememberFilterStateSettingDescription { get; }
    public static string RememberLastSearchSettingDescription { get; }
    public static string ReplaceCommentSettingDescription { get; }
    public static string ReplaceKeywordsWithLiveTemplatesSettingDescription { get; }
    public static string InsertSpacingAfterKeywordsWhenRequired { get; }
    public static string AdditionalAliasItemsToCorrectCommonErrorsDescription { get; }
    public static string ReplacePatternSettingDescription { get; }
    public static string ReSharperCVisualBasicNETParameterNameHintsSettingsSettingDescription { get; }
    public static string ReSharperGeneralInlayHintsSettingsSettingDescription { get; }
    public static string ReSharperGeneralParameterNameHintsSettingsSettingDescription { get; }
    public static string ReSharperGeneralTypeConversionHintsSettingsSettingDescription { get; }
    public static string ReSharperGeneralTypeNameHintsSettingsSettingDescription { get; }
    public static string ReSharperRefactoringSettingsSettingDescription { get; }
    public static string RunCleanupWhenSavingFileSettingDescription { get; }
    public static string RunLongAnalysesLikeValueAnalysisInControlFlowInSolutionWideAnalysisSettingDescription { get; }
    public static string RunTrigramConsistencyProbabilityCheckerEveryNMsWhenInternalZoneIsActivatedSettingDescription { get; }
    public static string SaveAfterCleanupIfCleaningUpTheWholeFileSettingDescription { get; }
    public static string ScopeTypeSettingDescription { get; }
    public static string SearchAndNavigationSettingsSettingDescription { get; }
    public static string SearchForOccurrencesInVarTemplateSettingDescription { get; }
    public static string SearchForWebFilesThatCanAffectPerformanceSettingDescription { get; }
    public static string SearchPatternSettingDescription { get; }
    public static string SearchSettingsSettingDescription { get; }
    public static string SearchWithPatternSettingsSettingDescription { get; }
    public static string SectionMetadataPropertiesSettingDescription { get; }
    public static string SectionTypeSettingDescription { get; }
    public static string SelectAllActionText { get; }
    public static string SelectsTheIconThemeToUseWhenRenderingSourceCodeSymbolIconsSettingDescription { get; }
    public static string SelectTargetPart_Text { get; }
    public static string SendThisCodeToJetBrainsActionText { get; }
    public static string SessionToolbarActionGroupText { get; }
    public static string ShortenQualifiedReferencesSettingDescription { get; }
    public static string ShortenReferencesSettingDescription { get; }
    public static string ShowAllCandidatesInParameterInfoPopupSettingDescription { get; }
    public static string ShowAnnotationsSettingDescription { get; }
    public static string ShowAssembliesActionText { get; }
    public static string ShowAssembliesSettingDescription { get; }
    public static string ShowCImportPopupSettingDescription { get; }
    public static string ShowCodeAnnotationsHintsOnParameterDeclarationsSettingDescription { get; }
    public static string ShowCompletionTypeSettingDescription { get; }
    public static string ShowConfirmationDialogBeforeAddingReferenceSettingDescription { get; }
    public static string ShowDelegatesUsingLambdaSyntaxSettingDescription { get; }
    public static string ShowExtendedInformationSettingDescription { get; }
    public static string ShowFiltersSettingDescription { get; }
    public static string ShowFunctionSignaturesSettingDescription { get; }
    public static string ShowFunctionSummarySettingDescription { get; }
    public static string ShowGutterNavigationMarksForImplementedAndOverriddenMembersSettingDescription { get; }
    public static string ShowImportTypeMethodUsingPopupSettingDescription { get; }
    public static string ShowIndentGuidesSettingDescription { get; }
    public static string ShowMethodSeparatorsSettingDescription { get; }
    public static string ShowMissingConstructsAsEditorHintsSettingDescription { get; }
    public static string ShowNonPublicCompiledItemsInGoToResultsSettingDescription { get; }
    public static string ShowNotImportedTypesAndExtensionMethodsInCodeCompletionSuggestionsSettingDescription { get; }
    public static string ShowPostfixTemplatesInCodeCompletionSettingDescription { get; }
    public static string ShowResourceDisposePointsAsEditorHintsSettingDescription { get; }
    public static string ShowSourceTemplatesInCodeCompletionSettingDescription { get; }
    public static string ShowToDoItemsInGeneratedCodeSettingDescription { get; }
    public static string ShowTypesSettingDescription { get; }
    public static string ShowUnusedGlobalUsingsSettingDescription { get; }
    public static string ShowGlobalImportsSettingDescription { get; }
    public static string ShowUnusedTypeMembersInEditorSettingDescription { get; }
    public static string StackTraceExplorer_Text { get; }
    public static string UseReSharperNavigationHistoryForMouseSettingDescription { get; }
    public static string VirtualIndentingOptionsPage_Name { get; }
    public static string VsLightBulbDisplayModeSettingDescription { get; }
    public static string ShowVisualStudioLightBulbActionsInSubmenuSettingDescription { get; }
    public static string DisableVsLightBulbActionsFilteringSettingDescription { get; }
    public static string SHrinkSelectionActionText { get; }
    public static string SingleTemplateSettingDescription { get; }
    public static string SmartBehaviorInBasicCompletionSettingDescription { get; }
    public static string SmartIndentOnEnterSettingDescription { get; }
    public static string SmartlyMatchAssociativeExpressionsSettingDescription { get; }
    public static string SolveSingleWordsSettingDescription { get; }
    public static string SortingSettingDescription { get; }
    public static string SpecifiesWhetherToOverrideVSIntelliSenseWithReSharperIntelliSenseForSymbolCodeCompletionAutomaticCodeCompletionAndParameterInfoSettingDescription { get; }
    public static string StackTraceExplorerOptionPageTitle { get; }
    public static string StackTraceExplorerSettingsSettingDescription { get; }
    public static string StackTracesActionText { get; }
    public static string StandardOccurrenceBrowserContextMenuActionGroupText { get; }
    public static string StorageTypeSettingDescription { get; }
    public static string StringHighlightingEnabledSettingDescription { get; }
    public static string StructuralNavigationBackwardActionText { get; }
    public static string StructuralNavigationForwardActionText { get; }
    public static string SuggestersStateSettingDescription { get; }
    public static string SuppressionKeySettingDescription { get; }
    public static string SurroundMnemonicSettingDescription { get; }
    public static string SurroundOnTypingWithSelectionSettingDescription { get; }
    public static string TabActionSettingDescription { get; }
    public static string TabKeyActionSettingDescription { get; }
    public static string TabNavigationBehaviorSettingDescription { get; }
    public static string TemplateApplicabilitySettingDescription { get; }
    public static string TemplateDescriptionSettingDescription { get; }
    public static string TemplateFieldSettingDescription { get; }
    public static string TemplateGuidSettingDescription { get; }
    public static string TemplateIsBlessedToAppearInShortSelectionsSettingDescription { get; }
    public static string TemplateIsDisabledSettingDescription { get; }
    public static string TemplateProvidersListDisabledEnabledListSettingDescription { get; }
    public static string TemplateScopeSettingDescription { get; }
    public static string TemplateSectionSettingDescription { get; }
    public static string TemplateShortcutSettingDescription { get; }
    public static string TemplateTextSettingDescription { get; }
    public static string TextSettingDescription { get; }
    public static string ThirdPartyCodeOptionPageTitle { get; }
    public static string ThirdPartyFileMasksSettingDescription { get; }
    public static string ThirdPartyFilesAndFoldersSettingDescription { get; }
    public static string TipsOptionsActionGroupText { get; }
    public static string ToDoGroupingSettingsSettingDescription { get; }
    public static string ToDoItemsSettingsSettingDescription { get; }
    public static string ToDoPatternsSettingDescription { get; }
    public static string ToolsActionGroupText { get; }
    public static string ToRightAnalysisSettingDescription { get; }
    public static string TrackRecentlyModifiedPartsOfFileOtherwiseTrackWholeFilesSettingDescription { get; }
    public static string TracksReferencesToFilesInStringValuesInsideSourceCodeSettingDescription { get; }
    public static string TreatPostfixAndPrefixOperatorAsEquivalentSettingDescription { get; }
    public static string TreatReversedBinaryExpressionsAsEquivalentSettingDescription { get; }
    public static string TypeConstraints_Text { get; }
    public static string TypeConstraint_Text { get; }
    public static string TypeImportOptionPageTitle { get; }
    public static string TypeSettingDescription { get; }
    public static string TypeToFilter_CueBannerText { get; }
    public static string TypingAssistanceSettingsSettingDescription { get; }
    public static string UITagSettingDescription { get; }
    public static string UnitTestsActionGroupText { get; }
    public static string UnmanagedType_Text { get; }
    public static string URLPatternSettingDescription { get; }
    public static string UseArrowsInsteadOfParameterInfoShortcutInParameterInfoPopupSettingDescription { get; }
    public static string UseAssemblyExplorerInsteadOfObjectBrowserByDefaultSettingDescription { get; }
    public static string RainbowOnLanguagesSettingDescription { get; }
    public static string UseCamelHumpsForSelectingAndNavigatingBetweenWordsSettingDescription { get; }
    public static string UseCompletionFontForLookupsSettingDescription { get; }
    public static string UseFormatterConfigurationForTabSettingDescription { get; }
    public static string UseMiddleMatchingInCompletionListSettingDescription { get; }
    public static string UseNewKindGroupingAndFiltersSettingDescription { get; }
    public static string UsePredefinedGroupingRulesSettingDescription { get; }
    public static string UseSmartCompletionToShowAll_Text { get; }
    public static string UseTabShiftTabKeysForNavigationInCodeSettingDescription { get; }
    public static string UseWpfRefactoringFormSettingDescription { get; }
    public static string ValueAnalysisModeSettingDescription { get; }
    public static string ValueType_Text { get; }
    public static string ViewStyleSettingDescription { get; }
    public static string VisibilityModeOfCodeAnnotationsHintsOnParameterDeclarationsSettingDescription { get; }
    public static string VisibilityModeOfMethodReturnTypeNameHintsSettingDescription { get; }
    public static string VisibilityModeOfParameterNameHintsSettingDescription { get; }
    public static string VisibilityModeOfTypeConversionHintsSettingDescription { get; }
    public static string VisibilityModeOfTypeNameHintsForImplicitlyTypedVariablesSettingDescription { get; }
    public static string VisualStudioSquigglesRoslynAnalyzersAreNotRenderedByVisualStudioItselfButInsteadThoseOfThemWhichAreNotRedundantInPresenceOfReSharperSuchAsCustomAnalyzerSetsAreProcessedTogetherWithReSharperAnalysisResultsSuppressVsSquigglesMustBeOffToTakeEffectSettingDescription { get; }
    public static string WhenTabIsPressedSettingDescription { get; }
    public static string WhetherAHintWasUsedForTheHighlightUsagesActionSettingDescription { get; }
    public static string WhetherASingleItemInHierarchyListsShouldBeExecutedImmediatelySettingDescription { get; }
    public static string WhetherASingleItemInUsageListsShouldBeExecutedImmediatelySettingDescription { get; }
    public static string WhetherEnableGroupingByKindSettingDescription { get; }
    public static string WhetherHintWasShownSettingDescription { get; }
    public static string WhetherNavigationIsInvokedWithCtrlAltClickSettingDescription { get; }
    public static string WhetherNavigationIsInvokedWithCtrlAltMiddleMouseButtonClickSettingDescription { get; }
    public static string WhetherNavigationIsInvokedWithCtrlClickSettingDescription { get; }
    public static string WhetherNavigationIsInvokedWithCtrlMiddleMouseButtonClickSettingDescription { get; }
    public static string WhetherNavigationIsInvokedWithCtrlShiftClickSettingDescription { get; }
    public static string WhetherNavigationIsInvokedWithMiddleMouseButtonSettingDescription { get; }
    public static string WhetherSearchResultsTreesAndSimilarTreesShouldBeExpandedByDefaultSettingDescription { get; }
    public static string WhetherTheFeatureIsEnabledSettingDescription { get; }
    public static string WhetherToConsiderNonNullableReferenceTypesAsNotHoldingnullValuesWithoutRuntimeChecksEnforcingItSettingDescription { get; }
    public static string WhetherToGroupItemsToGenerateByTypeSettingDescription { get; }
    public static string WhetherToHideMethodReturnTypeNameHintsForSingleAndOneLineInvocationChainsSettingDescription { get; }
    public static string WhetherToHideOrGrayOutIgnoredUsagesInFindUsagesValueTrackingEtcSettingDescription { get; }
    public static string WhetherToHideParameterNameHintIfIntentionOfArgumentIsClearFromUsageSettingDescription { get; }
    public static string WhetherToHideParameterNameHintIfIntentionOfFirstParameterIsClearFromMethodNameSettingDescription { get; }
    public static string WhetherToHideParameterNameHintsForBuilderLikeMethodsSettingDescription { get; }
    public static string WhetherToHideParameterNameHintsForNonLiteralsSettingDescription { get; }
    public static string WhetherToHideParameterNameHintsIfMethodParametersOnlyDifferByNumberedSuffixSettingDescription { get; }
    public static string WhetherToHideReturnTypeNameHintForTheLastInvocationWhenTheHintIsIrrelevantSettingDescription { get; }
    public static string WhetherToHideTypeNameHintIfTheTypeIsEvidentFromTheVariableNameSettingDescription { get; }
    public static string WhetherToHideTypeNameHintsForLambdaExpressionParametersIfTheTypeIsEvidentSettingDescription { get; }
    public static string WhetherToHighlightUsagesOfTheElementUnderCaretInCSettingDescription { get; }
    public static string WhetherToHighlightUsagesOfTheElementUnderCaretSettingDescription { get; }
    public static string WhetherToIncludePropertyFieldAndVariableAccessorsInTheInvocationChainSettingDescription { get; }
    public static string WhetherToJoinHintsForSequencesOfMethodInvocationsWithTheSameReturnTypesSettingDescription { get; }
    public static string WhetherToMergeOccurrencesOnASingleLineSettingDescription { get; }
    public static string WhetherToSearchForDelegateTargetsSettingDescription { get; }
    public static string WhetherToSearchForDerivedTypesSettingDescription { get; }
    public static string WhetherToSearchForExtendingInterfacesSettingDescription { get; }
    public static string WhetherToSearchForHidingMembersSettingDescription { get; }
    public static string WhetherToSearchForImplementationsSettingDescription { get; }
    public static string WhetherToSearchForInheritedMembersSettingDescription { get; }
    public static string WhetherToSearchForLateBoundReferencesSettingDescription { get; }
    public static string WhetherToSearchForMemberUsagesSettingDescription { get; }
    public static string WhetherToSearchForOverloadingMembersSettingDescription { get; }
    public static string WhetherToSearchForTextualOccurrencesSettingDescription { get; }
    public static string WhetherToSearchForUsagesSettingDescription { get; }
    public static string WhetherToShowIconsInsteadOfTypeConversionDetailsSettingDescription { get; }
    public static string WhetherToShowInlayHintsSettingDescription { get; }
    public static string WhetherToShowMethodReturnTypeNameHintsSettingDescription { get; }
    public static string WhetherToShowParameterNameHintsForConstantsAndEnumerationMembersSettingDescription { get; }
    public static string WhetherToShowParameterNameHintsForFunctionCallsAndMethodInvocationsSettingDescription { get; }
    public static string WhetherToShowParameterNameHintsForLambdaExpressionsAndAnonymousMethodsSettingDescription { get; }
    public static string WhetherToShowParameterNameHintsForNonLiteralsInCaseOfMultipleParametersWithTheSameTypeSettingDescription { get; }
    public static string WhetherToShowParameterNameHintsForUnclearObjectCreationExpressionsSettingDescription { get; }
    public static string WhetherToShowParameterNameHintsSettingDescription { get; }
    public static string WhetherToShowTypeConversionHintsForParticularOperatorsSettingDescription { get; }
    public static string WhetherToShowTypeConversionHintsForUserDefinedAndNonSystemConversionsOnlySettingDescription { get; }
    public static string WhetherToShowTypeNameHintsForFunctionReturnTypesSettingDescription { get; }
    public static string WhetherToShowTypeNameHintsForImplicitlyTypedVariablesOnlyIfTheTypeIsEvidentSettingDescription { get; }
    public static string WhetherToShowTypeNameHintsForImplicitlyTypedVariablesSettingDescription { get; }
    public static string WhetherToShowTypeNameHintsForLambdaExpressionParametersSettingDescription { get; }
    public static string WhetherToShowTypeNameHintsForLambdaReturnTypesSettingDescription { get; }
    public static string WhetherToShowTypeNameHintsForPatternMatchingExpressionsSettingDescription { get; }
    public static string WhetherToShowTypeNameHintsForQueryRangeVariablesInLINQQueriesSettingDescription { get; }
    public static string WhetherToShowTypeNameHintsInDependentCCodeSettingDescription { get; }
    public static string WhetherToSortItemsToGenerateByNameSettingDescription { get; }
    public static string WhetherToSuggestRenameInCompletionSettingDescription { get; }
    public static string WhetherToUseCompactTypeNamePresentationSettingDescription { get; }
    public static string WhetherToUseInlineRenameEverywhereSettingDescription { get; }
    public static string WhetherToUseSolutionWideAnalysisResultsToSpeedUpFindUsagesSettingDescription { get; }
    public static string WhichModeToUseToShowCombinedHintsSettingDescription { get; }
    public static string WhichPatternsToUseToFilterInvocationsWhilePlacingHintsSettingDescription { get; }
    public static string WidthSettingDescription { get; }
    public static string WrapLinesSettingDescription { get; }
    public static string XMLDocCommentsOptionPageTitle { get; }
    public static string XmlDocumentRepresentingAssemblyExplorerStateSettingDescription { get; }
    public static string FilterOccurrencesMenuAction_Text { get; }
    public static string HighlightingSettings_IncludeWarningsInSwea_Description { get; }
    public static string HighlightingSettings_SweaWarningsMode_Description { get; }
    public static string HighlightingSettings_SweaResourceConsumption_Description { get; }
    public static string HighlightingSettings_UsageCheckingInspectionLevel_Description { get; }
    public static string InlayHintsGeneralOptionsPage_InlayHintsGeneralOptionsPage_VirtualFormatterTooltip { get; }
    public static string InlayHintsGeneralOptionsPage_InlayHintsGeneralOptionsPage_Show_real_whitespaces_on_top_of_virtual { get; }
    public static string HereYouCanSpecifyFilesFileMasksAndFolders_Text_Text { get; }
    public static string NoteThatThesePreferencesOnlyApplyTo_Text_Text { get; }
    public static string FilesAndFoldersAreSpecifiedRelative_Text_Text { get; }
    public static string SearchForWebFilesThatCanAffectPerformance_BoolOption { get; }
    public static string ToEditTheListOfSkippedFilesAndFolders_Text { get; }
    public static string SkippedCode_Header_Text { get; }
    public static string AllFilesSpecifiedHereWillBeFullyIgnored_Text_Text { get; }
    public static string LibraryCode_Header_Text { get; }
    public static string ReSharperWillRecognizeSymbolsDeclared_Text_Text { get; }
    public static string ImportsOptimization_Header_Text { get; }
    public static string ImportsOptimization_RemoveOnlyUnusedCheckBox_Text { get; }
    public static string ImportsOptimization_RemoveOnlyUnusedCheckBox_Tooltip { get; }
    public static string ImportsOptimization_KeepNonTrivialOption_Text { get; }
    public static string ImportsOptimization_KeepNonTrivialOption_Tooltip { get; }
    public static string AutomaticLanguageAndReferenceInjections_Header_Text { get; }
    public static string LanguageAndReferenceInjectionsProvide_Text_Text { get; }
    public static string ForExampleACStringCanBeRecognizedAs_Text_Text { get; }
    public static string AutoOpenExternalStackTraces_BoolOption_Text { get; }
    public static string AutoOpenStackTraceCopiedOutsideOfVisual_BoolOption_ToolTip { get; }
    public static string WrapLongLines_BoolOption_Text { get; }
    public static string WrapLinesLongerThanMaximumLineLength_BoolOption_ToolTip { get; }
    public static string SkipParsingOfLongLines_BoolOption_Text { get; }
    public static string MaximumLineLength_IntOption_Text { get; }
    public static string ImportFeatures_Header_Text { get; }
    public static string ShowThe_ImportMissingReferencesPopup_BoolOption_Text { get; }
    public static string ShowImportItemsInBasicCodeCompletion_BoolOption_Text { get; }
    public static string Filtering_Header_Text { get; }
    public static string ExcludeTheFollowingTypesMembersFrom_Text { get; }
    public static string EnforceFullTypeNameQualificationWhen_Text { get; }
    public static string PrefixAndSuffixWildcardsAreSupported_Text { get; }
    public static string HideParameterNameHintsForParameterArrays_BoolOption_Text { get; }
    public static string HideParameterNameHintsForMethodsAnnotated_BoolOption_Text { get; }
    public static string HideForNonLiterals_BoolOption_Text { get; }
    public static string ShowForConstantsAndEnumerationMembers_BoolOption_Text { get; }
    public static string ShowForLambdaExpressionsAndAnonymous_BoolOption_Text { get; }
    public static string ShowForUnclearObjectCreation_BoolOption_Text { get; }
    public static string ShowForMethodInvocations_BoolOption_Text { get; }
    public static string ShowForNonLiteralsInCaseOfMultipleParameters_BoolOption_Text { get; }
    public static string HideForBuilderLikeMethods_BoolOption_Text { get; }
    public static string HideIfMethodParametersOnlyDifferByNumbered_BoolOption_Text { get; }
    public static string HideIfIntentionOfFirstParameterIsClear_BoolOption_Text { get; }
    public static string HideIfIntentionOfArgumentIsClearFrom_BoolOption_Text { get; }
    public static string NoParameterNameHintsWillBeShownForMethods_ExclusionListControl_Text { get; }
    public static string ValueMustBeInFormMethodNameArgument_ExclusionListControl_Text { get; }
    public static string YouCanSetTheDefaultVisibilityOfInlay_RichText_Text { get; }
    public static string Editor_Rider_Settings_Root_Text { get; }
    public static string Environment_ReSharper_Settings_Root_Text { get; }
    public static string Settings_Rider_Settings_Text { get; }
    public static string Options_ReSharper_Settings_Text { get; }
    public static string Visibility_Combo_Options_Text { get; }
    public static string ThisWillCloseTheOptionsDialogAndRun_Caption { get; }
    public static string ThisWillCloseTheOptionsDialogAndOpen_Caption { get; }
    public static string BasedOnStyle_Text { get; }
    public static string HideOptionsThatCoincideWithTheChosen_Text { get; }
    public static string Export_Settings_Text { get; }
    public static string ShowAdditionalOptions_Caption { get; }
    public static string ExportSettingsThatHaveDefaultValues_Text { get; }
    public static string RemoveExistingPropertiesWithAmbiguous_Text { get; }
    public static string OnlyExport_ChangedProperties_Text { get; }
    public static string ExportStandardEditorconfigProperties_Text { get; }
    public static string ExportCrossEditorLanguageSpecificProperties_Text { get; }
    public static string ExportJetBrainsRiderReSharperSpecificInspections_Text { get; }
    public static string ExportJetBrainsRiderReSharperSpecificCodeStyle_Text { get; }
    public static string SpaceAround_Text { get; }
    public static string SectionFileMask_Text { get; }
    public static string ChangesAndConflictsPreview_Text { get; }
    public static string Export_Text { get; }
    public static string Enabled_Text { get; }
    public static string Disabled_Text { get; }
    public static string From__Text { get; }
    public static string ActiveConfigurationFiles_Text { get; }
    public static string IndentSettingsFor_Text { get; }
    public static string UseRecommendedSettings_Text { get; }
    public static string OverriddenBy__Text { get; }
    public static string VisualStudio_Text { get; }
    public static string ReSharper_Text { get; }
    public static string Autodetection_Text { get; }
    public static string FileMaskEGXmlHtml_Text { get; }
    public static string ReferencedAssembliesDelimitedWith_Text { get; }
    public static string InvalidPageContent_Text { get; }
    public static string _Back_Text { get; }
    public static string _Next_Text { get; }
    public static string Cancel_Text { get; }
    public static string DiscardOutVariable { get; }
    public static string ToEnable_UndoOpenAllFilesWithChanges_Text { get; }
    public static string ChangeStateOfTextBox_Text { get; }
    public static string Select_Text { get; }
    public static string InvalidDeclaredElement_Text { get; }
    public static string ConflictsWereFound_Text { get; }
    public static string _HasFoundThatTheRefactoringHasSomeConflicts_Text { get; }
    public static string SectionShouldnTBeEmpty_Text { get; }
    public static string ValueCannotBeEmpty_Text { get; }
    public static string IdentifierIsNotValid_Text { get; }
    public static string PathContainsInvalidCharacters_Text { get; }
    public static string FileShouldHave_Extension_Text { get; }
    public static string ExtensionIsNotValidAcceptedExtensions_Text { get; }
    public static string FolderDoesnTExist_Text { get; }
    public static string FileDoesnTExist_Text { get; }
    public static string FileCannotBeCreated_Text { get; }
    public static string FileDoesnTExist__Text { get; }
    public static string ValueShouldBeDifferentFromInitial_Text { get; }
    public static string TypeWithThisNameAlreadyExists_Text { get; }
    public static string NamespaceWithThisNameAlreadyExists_Text { get; }
    public static string TypeWithThisNameAlreadyExistsInNamespace_Text { get; }
    public static string TypeWithThisNameDoesnTExist_Text { get; }
    public static string TypeMemberWithThisNameAlreadyExists_Text { get; }
    public static string FileExistsOnDiskButIsNotIncludedInProject_Text { get; }
    public static string Global_Text { get; }
    public static string Everywhere_Text { get; }
    public static string InFilesMatching__Text { get; }
    public static string References__Text { get; }
    public static string RestrictToTheStartOfTheLine_Text { get; }
    public static string AnyProject_Text { get; }
    public static string AtLineStart_Text { get; }
    public static string _Files_Text { get; }
    public static string InAnyOfGivenProjectDirectoriesRelative_Text { get; }
    public static string CodeCleanup_Text { get; }
    public static string CodeCleanup_Profile { get; }
    public static string CodeCleanup_BuiltInProfile { get; }
    public static string CodeCleanup_Builtin_Profile_Name_FULL { get; }
    public static string CodeCleanup_Builtin_Profile_Name_CODE_STYLE { get; }
    public static string CodeCleanup_Builtin_Profile_Name_REFORMAT { get; }
    public static string SettingsDetectionAlreadyInProgressPlease_Text { get; }
    public static string DetectSettings_Text { get; }
    public static string DetectingSettings_Text { get; }
    public static string DetectingFrom__Text { get; }
    public static string ChoosingSettings_Text { get; }
    public static string ChoosingBestValues_Text { get; }
    public static string ReSharperWillAddAReferenceTo__Text { get; }
    public static string FailedToReferenceModuleProbablyReference_Text { get; }
    public static string FailedToModifyDocuments_Text { get; }
    public static string ActionCancelled_Text { get; }
    public static string CannotPerformThisActionMostLikelyBecause_Text { get; }
    public static string EscapePastedText_Text { get; }
    public static string InContainerName_Text { get; }
    public static string RecursiveReferences__ToolTip { get; }
    public static string Analyzing_Text { get; }
    public static string CanTCalculateChildren_Text { get; }
    public static string CodeAnnotationHints_Text { get; }
    public static string GoToPrevHighlight_Text { get; }
    public static string GoToNextHighlight_Text { get; }
    public static string DaemonProcess__Text { get; }
    public static string AnalysisOf__Text { get; }
    public static string TheItemHasNoText_Text { get; }
    public static string ProcessingTypeElements_Text { get; }
    public static string InvalidPath__Text { get; }
    public static string PathIsNotValid_Text { get; }
    public static string ExportTo__Caption { get; }
    public static string SaveSettingsTo__Text { get; }
    public static string ExportTo__Text { get; }
    public static string ErrorWritingTo_AccessIsDeniedPlease_Text { get; }
    public static string ErrorWritingTo__Text { get; }
    public static string _FilesFor__Text { get; }
    public static string Uncertain_Text { get; }
    public static string Tab_Key_In_Formatting_Text { get; }
    public static string _Spaces_In_Formatting_Text { get; }
    public static string NoOptionsWereImportedProbablyDueToIncorrect_Text { get; }
    public static string ErrorReadingClangFormatFile___Text { get; }
    public static string Generate_Text { get; }
    public static string Generation_Text { get; }
    public static string TheEmptyMaskWillNotBeSaved_Text { get; }
    public static string TheFollowingCharactersAreNotAllowed_Text { get; }
    public static string WildcardSymbolMustBePlacedAtTheStart_Text { get; }
    public static string TheInvalidMaskWillNotBeSaved_Text { get; }
    public static string CalculatingNodePresentation { get; }
    public static string TurnOffEverywhere_Text { get; }
    public static string Configure_Text { get; }
    public static string ConfigureInlayHints_Text { get; }
    public static string ChangeVisibility_Text { get; }
    public static string TurnOffAllInlayHints_Text { get; }
    public static string ProcessingFiles_Text { get; }
    public static string Scope_Intention_Text { get; }
    public static string ApplyingInScope_Text { get; }
    public static string ApplyingInScope1Match_Text { get; }
    public static string ApplyingInScope_Matches_Text { get; }
    public static string CollectingFilesToProcess_Text { get; }
    public static string ExcludingFiles_Text { get; }
    public static string ProcessingFile___Text { get; }
    public static string AnalyzingInParallel_Threads_Text { get; }
    public static string AnalyzingFile_Of___Text { get; }
    public static string Applied1TimeElapsed__Text { get; }
    public static string Applied_TimesElapsed__Text { get; }
    public static string SearchingFor_Usages_Text { get; }
    public static string InSolution_Text { get; }
    public static string CollectingProjectFiles_Text { get; }
    public static string ProcessingProject___Text { get; }
    public static string PressTabOrEnterToMoveToNextField_Text { get; }
    public static string DefaultLiveTemplates_Text { get; }
    public static string DefaultSurroundTemplates_Text { get; }
    public static string DefaultFileTemplates_Text { get; }
    public static string Constructor_Caption { get; }
    public static string GenerateConstructors_Caption { get; }
    public static string SelectConstructorsFromBaseTypeAndMembers_Text { get; }
    public static string Deconstructor_Caption { get; }
    public static string GenerateDeconstructorMethod_Caption { get; }
    public static string SelectMembersToDeconstructFromObject_Text { get; }
    public static string DelegatingMembers_Caption { get; }
    public static string DelegateToFieldsMembers_Caption { get; }
    public static string SelectMembersOfFieldsOrPropertiesTo_Text { get; }
    public static string DisposePattern_Caption { get; }
    public static string ImplementDisposePattern_Caption { get; }
    public static string SelectAndSortMembersToDispose_Text { get; }
    public static string EqualityCoMparer_Caption { get; }
    public static string GenerateEqualityComparer_Caption { get; }
    public static string SelectMembersToParticipateInEquality_Text { get; }
    public static string EqualityMembers_Caption { get; }
    public static string GenerateEqualityMembers_Caption { get; }
    public static string SelectMembersToParticipateInEqualityOperations_Text { get; }
    public static string EventSubscriptions_Caption { get; }
    public static string GenerateEventSubscriptions_Caption { get; }
    public static string SelectEventsWhichShouldBeHandledBySubscribers_Text { get; }
    public static string FormattingMembers_Caption { get; }
    public static string GenerateFormattingMembers_Caption { get; }
    public static string SelectMembersToParticipateInFormatting_Text { get; }
    public static string MIssingMembers_Caption { get; }
    public static string ImplementMissingMembers_Caption { get; }
    public static string SelectMembersOfBaseTypesToImplement_Text { get; }
    public static string OverridingMembers_Caption { get; }
    public static string OverrideMembers_Caption { get; }
    public static string PArtialMethods_Caption { get; }
    public static string GeneratePartialMethods_Caption { get; }
    public static string SelectPartialMethodsToImplement_Text { get; }
    public static string Properties_Caption { get; }
    public static string GenerateProperties_Caption { get; }
    public static string SelectMembersWhichShouldBeExposedVia_Text { get; }
    public static string ReadOnlyProperties_Caption { get; }
    public static string GenerateReadOnlyProperties_Caption { get; }
    public static string RelaTionalComparer_Caption { get; }
    public static string GenerateRelationalComparer_Caption { get; }
    public static string SelectAndSortMembersToParticipateIn_Text { get; }
    public static string RelationalMembers_Caption { get; }
    public static string GenerateRelationalMembers_Caption { get; }
    public static string InspectThis_Text { get; }
    public static string InspectThis_Action_Name_Text { get; }
    public static string CompilerWarning___Text { get; }
    public static string Inspection__Text { get; }
    public static string InFile_Text { get; }
    public static string InProject_Text { get; }
    public static string InFolder_Text { get; }
    public static string NavigationMenu_Text { get; }
    public static string Search_Text { get; }
    public static string SearchingFor__Text { get; }
    public static string ThisIsTheOnlyUsage_Text { get; }
    public static string _WereNotFound_Text { get; }
    public static string SearchingForUsagesEscToOpenFindResults_Text { get; }
    public static string SelectTarget_Text { get; }
    public static string NoDeclarationsFound_Text { get; }
    public static string SomethingWentWrongIfTheProblemReoccurs_Text { get; }
    public static string RestoringSavedResults_Text { get; }
    public static string ThisIsTheOnlyUsageInThisFile_Text { get; }
    public static string ProcessNamespaces_Text { get; }
    public static string Namespace__Text { get; }
    public static string AllCandidates_Text { get; }
    public static string SearchConsumingAPIs_Text { get; }
    public static string SortingExposingAPIs_Text { get; }
    public static string SortingExposingAPIsFor__Text { get; }
    public static string AnalysingFilesFor__Text { get; }
    public static string ScanningFile__Text { get; }
    public static string SearchEverywhere_Text { get; }
    public static string EnterTypeName_Text { get; }
    public static string EnterActionName_Text { get; }
    public static string PreparingTheListOfItemsPleaseWait_Text { get; }
    public static string CurrentFolder_Text { get; }
    public static string ParentFolder_Text { get; }
    public static string In_Folder_Text { get; }
    public static string File_Text { get; }
    public static string Project_Text { get; }
    public static string ProjectFolder_Text { get; }
    public static string Type_Text { get; }
    public static string Member_Text { get; }
    public static string Method_Text { get; }
    public static string Event_Text { get; }
    public static string Property_Text { get; }
    public static string Field_Text { get; }
    public static string UnitTest_Text { get; }
    public static string FileMask__Text { get; }
    public static string Extension__Text { get; }
    public static string FileExtensionCsVbXml_Text { get; }
    public static string FileMaskClCsClaSVb_Text { get; }
    public static string CurrentProject_Text { get; }
    public static string GoToText_Text { get; }
    public static string EnterFileOrFolderName_Text { get; }
    public static string ShowInSolutionExplorer_Text { get; }
    public static string EnterMetadataToken_Text { get; }
    public static string EnterString_Text { get; }
    public static string SomeStringsMayBeMissingAtTheMoment_Text { get; }
    public static string INcludeLibraryTypes_Text { get; }
    public static string NoSymbolsFoundInSolution_Text { get; }
    public static string EnterSymbolName_Text { get; }
    public static string SomeSymbolsMayBeMissingAtTheMoment_Text { get; }
    public static string SomeTypesMayBeMissingAtTheMoment_Text { get; }
    public static string MIddleMatch_Text { get; }
    public static string SomeFilesMayBeMissingAtTheMoment_Text { get; }
    public static string EnterWord_Text { get; }
    public static string NoDestinationsFound_Text { get; }
    public static string ProcessingReferences_Text { get; }
    public static string RemovingAssemblyReferences_Text { get; }
    public static string RemovingNuGetPackages_Text { get; }
    public static string RemovingRedundantImportDirectives_Text { get; }
    public static string _AndOthers_Text { get; }
    public static string Base_Of__Text { get; }
    public static string Type_Symbol_Kind_Text { get; }
    public static string DeclarationsOf___Text { get; }
    public static string GoToDeclaration_Text { get; }
    public static string ProjectItemNavigation_Caption { get; }
    public static string CompiledElementNavigation_Caption { get; }
    public static string ObjectBrowserNavigation_Caption { get; }
    public static string AssemblyInfoNavigation_Caption { get; }
    public static string TextRangeNavigation_Text { get; }
    public static string Navigate_Text { get; }
    public static string DerivedInterfacesOf___Text { get; }
    public static string DerivedTypesOf__Text { get; }
    public static string ImplementationsOf__Text { get; }
    public static string Derived_Text { get; }
    public static string Implementing_Text { get; }
    public static string Overriding_Text { get; }
    public static string __Of__Text { get; }
    public static string ScanningAssembly__Text { get; }
    public static string ScanningAnElement_Text { get; }
    public static string ShowOnDiagram_Text { get; }
    public static string ShowMoreItems_Text { get; }
    public static string TooManyItemsListTruncated_Text { get; }
    public static string ShowInFindResults_Text { get; }
    public static string InvalidElement_Text { get; }
    public static string Breakpoint_ToolTip { get; }
    public static string _InUnitTests_ToolTip { get; }
    public static string UsagesAndDerivedInterfacesOf__Text { get; }
    public static string UsagesAndDerivedTypesOf__Text { get; }
    public static string ImplementationsAndDerivedInterfaces_Text { get; }
    public static string UsagesImplementationsAndDerivedInterfaces_Text { get; }
    public static string UsagesAndImplementationsOf__Text { get; }
    public static string UsagesOf_Members_Text { get; }
    public static string UsagesOf_AndItsMembers_Text { get; }
    public static string UsagesOf___Text { get; }
    public static string AndOthers_Text { get; }
    public static string TypeConversions_Text { get; }
    public static string TypeChecking_Text { get; }
    public static string UsagesInUsings_Text { get; }
    public static string StaticClassMemberAccess_Text { get; }
    public static string NestedClassAccess_Text { get; }
    public static string UsageInTypeof_Text { get; }
    public static string UsageInDefault_Text { get; }
    public static string ConstantDeclaration_Text { get; }
    public static string EventDeclaration_Text { get; }
    public static string PropertyDeclaration_Text { get; }
    public static string ConversionOperator_Text { get; }
    public static string ParameterDeclaration_Text { get; }
    public static string ParameterDeclarationNonExtension_Text { get; }
    public static string ParameterDeclarationExtensionThisParameter_Text { get; }
    public static string CatchClause_Text { get; }
    public static string TypeArgument_Text { get; }
    public static string UsageInConstraint_Text { get; }
    public static string MethodReturnType_Text { get; }
    public static string TupleElement_Text { get; }
    public static string Class_Text { get; }
    public static string Struct_Text { get; }
    public static string Enum_Text { get; }
    public static string Interface_Text { get; }
    public static string TypeMember_Text { get; }
    public static string Accessor_Text { get; }
    public static string Constructor_Text { get; }
    public static string Operator_Text { get; }
    public static string Delegate_Text { get; }
    public static string UsageInGeneratedCode_Text { get; }
    public static string SemanticUsage_Text { get; }
    public static string UnitTesting_Text { get; }
    public static string Other_Text { get; }
    public static string Hidden_Text { get; }
    public static string GeneratedCodeClassificationAxis_Text { get; }
    public static string Folder_Text { get; }
    public static string PleaseOpenASolution_Text { get; }
    public static string HideFor__Text { get; }
    public static string ParameterNameHints_Text { get; }
    public static string TupleComponentNameHints_Text { get; }
    public static string InterceptedCallHints_Text { get; }
    public static string InterceptsLocationHint_ContextMenuTitle { get; }
    public static string NavigateToInterceptedLocationHintAction_Text { get; }
    public static string NavigateToInterceptorHintAction_Text { get; }
    public static string NavigateToInterceptedLocationHintAction_InvalidPositionInFile_Popup_Text { get; }
    public static string NavigateToInterceptedLocationHintAction_FileNotFound_Popup_Text { get; }
    public static string ImplicitJumpBeforeLocalFunctionHint_Text { get; }
    public static string DeconstructionPatternComponentNameHints_Text { get; }
    public static string NavigateToDeclaration_Text { get; }
    public static string HideForThisMethod_Text { get; }
    public static string UpdateReferencesTo__Text { get; }
    public static string UpdatePathReferences_Text { get; }
    public static string ReparseForPostfixTemplates_Text { get; }
    public static string ReferencesOf__Text { get; }
    public static string UsagesOf__Text { get; }
    public static string FolderDoesNotExistAndWillBeCreated_Text { get; }
    public static string FolderDoesNotExistAndCannotBeCreated_Text { get; }
    public static string TopLevelProjectMustBeSpecified_Text { get; }
    public static string InvalidPath_Text { get; }
    public static string FileDoesNotExistAndWillBeCreated_Text { get; }
    public static string FileDoesNotExistAndCannotBeCreatedAs_Text { get; }
    public static string _ContainsInvalidCharacter__Text { get; }
    public static string FileName_Text { get; }
    public static string SelectFolders_Caption { get; }
    public static string SomeSelected_sAreNotPartOfSolutionAnd_Text { get; }
    public static string Add__Caption { get; }
    public static string SomeSelected_WereAlreadyPresentInThe_Text { get; }
    public static string SelectAnItemToRemove_Text { get; }
    public static string Folder_PathItemsToView_Caption { get; }
    public static string File_PathItemsToView_Caption { get; }
    public static string TheStringMustNotBeEmpty_Text { get; }
    public static string FileMasksWildcardsAreSupported_Caption { get; }
    public static string NamespacesThatShouldNotBeRemoved_Caption { get; }
    public static string NamespacesThatShouldAlwaysBeImported_Caption { get; }
    public static string NamespacesThatShouldNeverBeRemovedFrom_Caption { get; }
    public static string FilesAndFolders_Caption { get; }
    public static string OverridesAndImplements_ToolTip { get; }
    public static string Implements_ToolTip { get; }
    public static string Overrides_ToolTip { get; }
    public static string SelectExpression_Text { get; }
    public static string PreparingDataForRefactoring_Text { get; }
    public static string RefactoringSucceeded_Text { get; }
    public static string ExecutingRefactoring_Text { get; }
    public static string ExecuteRefactoring_Text { get; }
    public static string RefactoringFailed_Caption { get; }
    public static string UnsuccessfulFinish_Text { get; }
    public static string RefreshContent_Text { get; }
    public static string RefactoringCannotRecoverDueToChanges_Text { get; }
    public static string RefreshingConflicts_Text { get; }
    public static string ProcessingData_Text { get; }
    public static string TextOccurrences_Text { get; }
    public static string DisableWrappingOfWords_Text { get; }
    public static string EnableWrappingOfWords_Text { get; }
    public static string MatchesFor__Text { get; }
    public static string PredefinedTODOPatterns_Text { get; }
    public static string Libraries_Text { get; }
    public static string HideAllUsages_Text { get; }
    public static string ShowAllUsages_Text { get; }
    public static string BuildingTree_Text { get; }
    public static string _ForAssembly___Text { get; }
    public static string AttributesOfAssembly___Text { get; }
    public static string Number__Text { get; }
    public static string _ForAssembly__Text { get; }
    public static string AttributesOfAssembly__Text { get; }
    public static string AttributeFor_Text { get; }
    public static string _AttributeFor_Text { get; }
    public static string UsageInAccessor_Text { get; }
    public static string UsageInMethod_Text { get; }
    public static string UsageInProperty_Text { get; }
    public static string Usage_Text { get; }
    public static string RenameThisOverload_Text { get; }
    public static string RenameAllOverloads_Text { get; }
    public static string RenameInitialElementOnly_Text { get; }
    public static string RenameInitialElementAndAllItsOverloads_Text { get; }
    public static string _InProject__Text { get; }
    public static string Item_Plural { get; }
    public static string EnterFolderName_Text { get; }
    public static string Error_Caption { get; }
    public static string ImportingAnnotationsToProject_Text { get; }
    public static string CouldNotLocateReSharperAnnotationsIn_Text { get; }
    public static string Select__Caption { get; }
    public static string SelectFolder_Text { get; }
    public static string SelectFile_Text { get; }
    public static string ExpandingNode_Text { get; }
    public static string TypeNameHints_Text { get; }
    public static string ChangeVisibilityFor__Caption { get; }
    public static string NavigateToThe_OperatorDeclaration_Text { get; }
    public static string TypeConversionHints_Text { get; }
    public static string Default_Text { get; }
    public static string Generated_Text { get; }
    public static string RelatedSymbols_Text { get; }
    public static string RelatedUsages_Text { get; }
    public static string Dynamic_Text { get; }
    public static string Documentation_Text { get; }
    public static string DynamicSmart_Text { get; }
    public static string DynamicOther_Text { get; }
    public static string Other_Text_Section { get; }
    public static string DependentCode_Text_Section { get; }
    public static string MacroBodyUsage_Text_Section { get; }
    public static string Textual_Text { get; }
    public static string TextualFuzzy_Text { get; }
    public static string Compiled_Text { get; }
    public static string ConflictsWillAppear_Text { get; }
    public static string Initial_Text { get; }
    public static string SearchTarget_Text { get; }
    public static string NoUsagesFound_Caption { get; }
    public static string FollowingProblemsWillAppear_Text { get; }
    public static string ExtensionForObjects_Text { get; }
    public static string NoBasesFound_Text { get; }
    public static string Base_Plural { get; }
    public static string Found__InLibraries_Text { get; }
    public static string Displaying_Of_Found_InLibraries_Text { get; }
    public static string Found___Text { get; }
    public static string Displaying_Of_Found__Text { get; }
    public static string Declaration_Plural { get; }
    public static string In_Scope_Text { get; }
    public static string Found____Text { get; }
    public static string Displaying_Of_Found___Text { get; }
    public static string No_Found__Text { get; }
    public static string Usages_Text { get; }
    public static string Usage_Form_Text { get; }
    public static string DynamicUsages_Text { get; }
    public static string DynamicUsage_Text { get; }
    public static string TextualOccurrences_Text { get; }
    public static string TextualOccurrence_Text { get; }
    public static string TextualOccurrenceFuzzy_Text { get; }
    public static string TextualOccurrencesFuzzy_Text { get; }
    public static string PossibleDynamicUsages_Text { get; }
    public static string PossibleDynamicUsage_Text { get; }
    public static string PossibleUsages_Text { get; }
    public static string PossibleUsage_Text { get; }
    public static string DependentCodeUsages_Text { get; }
    public static string DependentCodeUsage_Text { get; }
    public static string MacroBodyUsages_Text { get; }
    public static string MacroBodyUsage_Text { get; }
    public static string RelatedSymbols_Form_Text { get; }
    public static string RelatedSymbol_Text { get; }
    public static string RelatedSymbolsUsages_Text { get; }
    public static string RelatedSymbolsUsage_Text { get; }
    public static string UsagesInDocumentation_Text { get; }
    public static string UsageInDocumentation_Text { get; }
    public static string UsagesInGeneratedCode_Text { get; }
    public static string UsageInGeneratedCode_Form_Text { get; }
    public static string NoImplementationsFound_Text { get; }
    public static string ImplementationsInLibraries_Text { get; }
    public static string ImplementationInLibraries_Text { get; }
    public static string Implementations_Text { get; }
    public static string Implementation_Text { get; }
    public static string NoInheritorsFound_Text { get; }
    public static string InheritorsInLibraries_Text { get; }
    public static string InheritorInLibraries_Text { get; }
    public static string Inheritor_Text { get; }
    public static string Inheritors_Text { get; }
    public static string Implements_N_Text { get; }
    public static string Overrides_N_Text { get; }
    public static string Hides_N_Text { get; }
    public static string AnalysisIsNotAvailableForTheFile__Text { get; }
    public static string AnalysisIsSwitchedOffForTheFile__Text { get; }
    public static string AnalysisIsSuspendedForTheFile__Text { get; }
    public static string AnalysisIsNotAvailable_Text { get; }
    public static string AnalysisIsNotSupported_Text { get; }
    public static string AnalysisIsNotAvailableForTheFileFileNoPsi_Text { get; }
    public static string AnalysisIsNotAvailableForTheFileFileNoCodeModel_Text { get; }
    public static string AnalysisIsNotAvailableForTheFileNoError_Text { get; }
    public static string AnalysisIsNotAvailableForTheFileWithExplanation__Text { get; }
    public static string CodeAnalysisHasBeenPausedDuringCaches_Text { get; }
    public static string CodeAnalysisHasBeenPausedBecauseAverage_Text { get; }
    public static string CodeAnalysisHasBeenPausedBecauseDocument_Text { get; }
    public static string CodeAnalysisHasBeenPausedDuringExternal_Text { get; }
    public static string FileLanguageIsUnknown_Text { get; }
    public static string CodeCleanupInProgress_Text { get; }
    public static string ScopedRefactoringActionIsBeingApplied_Text { get; }
    public static string PressEscapeToRemoveHighlighting_Text { get; }
    public static string ThereIsNoMatchesInMethodWithTheSame_Text { get; }
    public static string Found1MatchInMethodWithTheSameSignature_Text { get; }
    public static string Found_MatchesInMethodWithTheSameSignature_Text { get; }
    public static string RoleDerived_Text { get; }
    public static string RoleAttribute_Text { get; }
    public static string Result_Text { get; }
    public static string String_Text { get; }
    public static string Symbol_Text { get; }
    public static string Type_Goto_Target_Text { get; }
    public static string NoName_Text { get; }
    public static string CannotBind0FileReferenceToFile__Text { get; }
    public static string Conflict_Text { get; }
    public static string _Language_Of0_IsNotSupportedByTheRefactoring_Text { get; }
    public static string DeclaredElement_Text { get; }
    public static string UnableToSetAccessRightsTo__Text { get; }
    public static string UnableToAddTypeParameterTo__Text { get; }
    public static string _Language_Of_IsNotSupportedByTheRefactoring_Text { get; }
    public static string Element_Text { get; }
    public static string UnableToAddFieldTo__Text { get; }
    public static string UnableToCreatePropertyFor__Text { get; }
    public static string UnableToAddConstructorTo__Text { get; }
    public static string UnableToAddParameterTo__Text { get; }
    public static string UnableToRemoveParameterFrom__Text { get; }
    public static string UnableToAddRemoveThisModifierTo__Text { get; }
    public static string UnableToAddDeclarationTo__Text { get; }
    public static string UnableToCreatePropertyIn__Text { get; }
    public static string _Overrides_FromCompiledCode_Text { get; }
    public static string _Implements_CompiledInterface_Text { get; }
    public static string _IsOverriddenBy_InCompiledCode_Text { get; }
    public static string _IsImplementedBy_InCompiledCode_Text { get; }
    public static string UnableToAddClassBefore__Text { get; }
    public static string InvalidFile_Text { get; }
    public static string Line_Column__Text { get; }
    public static string InThisFileLn__Text { get; }
    public static string In_Ln__Text { get; }
    public static string CanTFindFile_Text { get; }
    public static string CanTFindDocument_Text { get; }
    public static string NavigationFailed_Text { get; }
    public static string PresentationFailed_Text { get; }
    public static string DoNotShow_Text { get; }
    public static string Hint_Text { get; }
    public static string Suggestion_Text { get; }
    public static string Warning_Text { get; }
    public static string Error_Text { get; }
    public static string Usage__Text { get; }
    public static string UsageOf__Text { get; }
    public static string SearchScope_Solution_Text { get; }
    public static string SearchScope_Libraries_Text { get; }
    public static string SearchScope_SolutionAndLibraries_Text { get; }
    public static string SearchScope_CurrentProject_Text { get; }
    public static string SearchScope_CurrentFile_Text { get; }
    public static string SearchScope_Empty_Text { get; }
    public static string AddFiles_Button_Text { get; }
    public static string AddFolders_Button_Text { get; }
    public static string Remove_Button_Text { get; }
    public static string AccessRightsForWillBeExtended_DescriptionText { get; }
    public static string CannotBeDeletedSafely_DescriptionText { get; }
    public static string CannotBeInlined_DescriptionText { get; }
    public static string CannotBeRemoved_DescriptionText { get; }
    public static string CannotBeUpdatedCorrectly_DescriptionText { get; }
    public static string ConflictWith_DescriptionText { get; }
    public static string Out_DescriptionText { get; }
    public static string Ref_DescriptionText { get; }
    public static string ShowGoogleTranslate_DescriptionText { get; }
    public static string ShowRelated_DescriptionText { get; }
    public static string UsedBy_DescriptionText { get; }
    public static string Used_DescriptionText { get; }
    public static string WillBeRemoved_DescriptionText { get; }
    public static string WillNotBeAccessible_DescriptionText { get; }
    public static string WithTheSameNameAlreadyExists_DescriptionText { get; }
    public static string _Description_Text { get; }
    public static string AccordingToVisualStudioOption_Description_Text { get; }
    public static string Alphabetically_Description_Text { get; }
    public static string AlwaysSearchForConcreteGenericType_Description_Text { get; }
    public static string AlwaysSearchForOpenGenericTypes_Description_Text { get; }
    public static string AssertResultFromFindUsagesWasSuggestedBySWAToSearchIn_Description_Text { get; }
    public static string ByRelevance_Description_Text { get; }
    public static string Disabled_Description_Text { get; }
    public static string DisableFindUsagesOptimization_Description_Text { get; }
    public static string DisplayAll_Description_Text { get; }
    public static string DisplayNotNullAndCanBeNullOnly_Description_Text { get; }
    public static string DoNotDisplay_Description_Text { get; }
    public static string DoNothing_Description_Text { get; }
    public static string Edit_Description_Text { get; }
    public static string Error_Description_Text { get; }
    public static string ExpectedType_Description_Text { get; }
    public static string ExpectedTypeAndInheritors_Description_Text { get; }
    public static string Indent_Description_Text { get; }
    public static string Information_Description_Text { get; }
    public static string InsertTabSpaceOrIncreaseIndentation_Description_Text { get; }
    public static string IterateUsages_Description_Text { get; }
    public static string LocalVariables_Description_Text { get; }
    public static string LocalVariablesFieldsAndProperties_Description_Text { get; }
    public static string LocalVariablesAndFields_Description_Text { get; }
    public static string None_Description_Text { get; }
    public static string OnEnterAfterAnOpeningBrace_Description_Text { get; }
    public static string OnTypingAnOpeningBrace_Description_Text { get; }
    public static string Question_Description_Text { get; }
    public static string Reformat_Description_Text { get; }
    public static string ReindentAdjustIndentation_Description_Text { get; }
    public static string SearchOnlyInFilesFromSWA_Description_Text { get; }
    public static string ShowNavigateToMenu_Description_Text { get; }
    public static string ShowUsagesOfSymbolPopup_Description_Text { get; }
    public static string ShowDisambiguationPopup_Description_Text { get; }
    public static string ShowHintForFirstInvocationInSequence_Description_Text { get; }
    public static string ShowHintForLastInvocationInSequence_Description_Text { get; }
    public static string ToNearestIndentPosition_Description_Text { get; }
    public static string ToProperIndentPosition_Description_Text { get; }
    public static string UseVisualStudioHandler_Description_Text { get; }
    public static string Warning_Description_Text { get; }
    public static string TheSettingIsOverriddenIn_RNwithAValue_Text { get; }
    public static string Browse_Text { get; }
    public static string InlayHints_Text { get; }
    public static string ParameterNamesForArgumentsTypeInfoFor_Text { get; }
    public static string NoPreview_Text { get; }
    public static string AllowAlignmentEvenIfConstructIsLocated_Text { get; }
    public static string GroupBy_Label_Text { get; }
    public static string GroupUsages_Tooltip_Text { get; }
    public static string ReadAccess_Occurence_Kind_Text { get; }
    public static string WriteAccess_Occurence_Kind_Text { get; }
    public static string ReadWriteAccess_Occurence_Kind_Text { get; }
    public static string Invocation_Occurence_Kind_Text { get; }
    public static string NameCapture_Occurence_Kind_Text { get; }
    public static string DocumentationReference_Occurence_Kind_Text { get; }
    public static string AttributeReference_Occurence_Kind_Text { get; }
    public static string VisualBasicHandlesClause_Occurence_Kind_Text { get; }
    public static string InterfaceQualification_Occurence_Kind_Text { get; }
    public static string BaseType_Occurence_Kind_Text { get; }
    public static string IndirectUsage_Occurence_Kind_Text { get; }
    public static string DirectUsage_Occurence_Kind_Text { get; }
    public static string UnitTest_Occurence_Kind_Text { get; }
    public static string BaseMethodCall_Occurence_Kind_Text { get; }
    public static string LocalVariableDeclaration_Occurence_Kind_Text { get; }
    public static string FieldDeclaration_Occurence_Kind_Text { get; }
    public static string NewInstanceCreation_Occurence_Kind_Text { get; }
    public static string NewArrayCreation_Occurence_Kind_Text { get; }
    public static string InComment_Occurence_Kind_Text { get; }
    public static string InString_Occurence_Kind_Text { get; }
    public static string InXMLDoc_Occurence_Kind_Text { get; }
    public static string Initializer_Occurence_Kind_Text { get; }
    public static string Other_Occurence_Kind_Text { get; }
    public static string SourceGeneratedFiles_Text { get; }
    public static string N_Items_Text { get; }
    public static string One_Item_Text { get; }
    public static string RelevantStackTraceAutoOpenedFromThe_Text { get; }
    public static string ReSharperNoticedTheClipboardContains_Text { get; }
    public static string TabShiftTabCanMoveSelectionBetweenCode_Text { get; }
    public static string YouVeJustUsedReSharperStructuralNavigation_Text { get; }
    public static string For_KindName_UsageScope_Text { get; }
    public static string ApplySmartPasteBehaviorPopupContextAction_Description { get; }
    public static string ApplySmartPasteBehaviorPopupContextAction_Name { get; }
    public static string UserSpecifiedSourceFilePropertiesIgnore_Text { get; }
    public static string UserSpecifiedSourceFilePropertiesNonUser_Text { get; }
    public static string UserSpecifiedSourceFilePropertiesForceUser_Text { get; }
    public static string TabsAndIndents_Text { get; }
    public static string AnalyzesCodeAndGuessesTypeOfElementOfACollectionMacroDefinition_Description { get; }
    public static string AnalyzesCodeAndGuessesTypeOfElementOfACollectionMacroDefinition_LongDescription { get; }
    public static string CapitalizesStringValueIEChangesCaseOfTheFirstLetterToUpperMacroDefinition_Description { get; }
    public static string CapitalizesStringValueIEChangesCaseOfTheFirstLetterToUpperMacroDefinition_LongDescription { get; }
    public static string ChangesSpacesToIEDoSomethingUsefulIntoDoSomethingUsefulMacroDefinition_Description { get; }
    public static string ChangesSpacesToIEDoSomethingUsefulIntoDoSomethingUsefulMacroDefinition_LongDescription { get; }
    public static string DisplaysTheSpecifiedListOfValuesMacroDefinition_Description { get; }
    public static string DisplaysTheSpecifiedListOfValuesMacroDefinition_LongDescription { get; }
    public static string EvaluatesCurrentDateMacroDefinition_Description { get; }
    public static string EvaluatesCurrentDateMacroDefinition_LongDescription { get; }
    public static string EvaluatesCurrentDateTimeMacroDefinition_Description { get; }
    public static string EvaluatesCurrentDateTimeMacroDefinition_LongDescription { get; }
    public static string EvaluatesCurrentFileNameMacroDefinition_Description { get; }
    public static string EvaluatesCurrentFileNameMacroDefinition_LongDescription { get; }
    public static string EvaluatesCurrentProjectNameMacroDefinition_Description { get; }
    public static string EvaluatesCurrentProjectNameMacroDefinition_LongDescription { get; }
    public static string EvaluatesCurrentSolutionNameMacroDefinition_Description { get; }
    public static string EvaluatesCurrentSolutionNameMacroDefinition_LongDescription { get; }
    public static string EvaluatesCurrentUserNameMacroDefinition_Description { get; }
    public static string EvaluatesCurrentUserNameMacroDefinition_LongDescription { get; }
    public static string EvaluatesFileCreationDateAndTimeMacroDefinition_Description { get; }
    public static string EvaluatesFileCreationDateAndTimeMacroDefinition_LongDescription { get; }
    public static string EvaluatesFullNameOfTheCurrentUserMacroDefinition_Description { get; }
    public static string EvaluatesFullNameOfTheCurrentUserMacroDefinition_LongDescription { get; }
    public static string EvaluatesNameOfTheContainingNamespaceMacroDefinition_Description { get; }
    public static string EvaluatesNameOfTheContainingNamespaceMacroDefinition_LongDescription { get; }
    public static string EvaluatesOutputAssemblyNameForTheCurrentProjectMacroDefinition_Description { get; }
    public static string EvaluatesOutputAssemblyNameForTheCurrentProjectMacroDefinition_LongDescription { get; }
    public static string EvaluatesToCurrentTextualClipboardContentMacroDefinition_Description { get; }
    public static string EvaluatesToCurrentTextualClipboardContentMacroDefinition_LongDescription { get; }
    public static string EvaluatesToNumberOfTheLineMacroIsEvaluatedAtMacroDefinition_Description { get; }
    public static string EvaluatesToNumberOfTheLineMacroIsEvaluatedAtMacroDefinition_LongDescription { get; }
    public static string EvaluatesToReferenceOfTheMostInnerContainingTypeMacroDefinition_Description { get; }
    public static string EvaluatesToReferenceOfTheMostInnerContainingTypeMacroDefinition_LongDescription { get; }
    public static string EvaluatesToShortNameOfTheMostInnerContainingTypeMacroDefinition_Description { get; }
    public static string EvaluatesToShortNameOfTheMostInnerContainingTypeMacroDefinition_LongDescription { get; }
    public static string EvaluatesToShortNameOfTheMostInnerContainingTypeMemberEGMethodOrPropertyMacroDefinition_Description { get; }
    public static string EvaluatesToShortNameOfTheMostInnerContainingTypeMemberEGMethodOrPropertyMacroDefinition_LongDescription { get; }
    public static string EvaluatesToTheSelectedTypeNameMacroDefinition_Description { get; }
    public static string EvaluatesToTheSelectedTypeNameMacroDefinition_LongDescription { get; }
    public static string EvaluatesToTheSpecifiedConstantValueMacroDefinition_Description { get; }
    public static string EvaluatesToTheSpecifiedConstantValueMacroDefinition_LongDescription { get; }
    public static string GeneratesNewGloballyUniqueIdentifierGUIDMacroDefinition_Description { get; }
    public static string GeneratesNewGloballyUniqueIdentifierGUIDMacroDefinition_LongDescription { get; }
    public static string GetsDefaultNamespaceForTheCurrentFileMacroDefinition_Description { get; }
    public static string GetsDefaultNamespaceForTheCurrentFileMacroDefinition_LongDescription { get; }
    public static string GetsDefaultNamespaceForTheCurrentProjectMacroDefinition_Description { get; }
    public static string GetsDefaultNamespaceForTheCurrentProjectMacroDefinition_LongDescription { get; }
    public static string GuessElementTypeIfACollectionTypeIsExpectedAtThisPointMacroDefinition_Description { get; }
    public static string GuessElementTypeIfACollectionTypeIsExpectedAtThisPointMacroDefinition_LongDescription { get; }
    public static string GuessTypeExpectedAtThisPointMacroDefinition_Description { get; }
    public static string GuessTypeExpectedAtThisPointMacroDefinition_LongDescription { get; }
    public static string ProvidesListOfItemsDescribingCurrentContextThisIncludesFileNameMacroDefinition_Description { get; }
    public static string ProvidesListOfItemsDescribingCurrentContextThisIncludesFileNameMacroDefinition_LongDescription { get; }
    public static string ShowBasicCodeCompletionListAtThePointWhereTheVariableIsEvaluatedMacroDefinition_Description { get; }
    public static string ShowBasicCodeCompletionListAtThePointWhereTheVariableIsEvaluatedMacroDefinition_LongDescription { get; }
    public static string ShowSmartCodeCompletionListAtThePointWhereTheVariableIsEvaluatedMacroDefinition_Description { get; }
    public static string ShowSmartCodeCompletionListAtThePointWhereTheVariableIsEvaluatedMacroDefinition_LongDescription { get; }
    public static string ShowTypeCompletionListAtThePointWhereTheVariableIsEvaluatedMacroDefinition_Description { get; }
    public static string ShowTypeCompletionListAtThePointWhereTheVariableIsEvaluatedMacroDefinition_LongDescription { get; }
    public static string SuggestsNonUsedNameWhichCanBeUsedForAnIndexVariableAtTheEvaluationPointMacroDefinition_Description { get; }
    public static string SuggestsNonUsedNameWhichCanBeUsedForAnIndexVariableAtTheEvaluationPointMacroDefinition_LongDescription { get; }
    public static string SuggestsParametersOfTheSpecifiedTypeMacroDefinition_Description { get; }
    public static string SuggestsParametersOfTheSpecifiedTypeMacroDefinition_LongDescription { get; }
    public static string SuggestsVariablesOfTheSpecifiedTypeMacroDefinition_Description { get; }
    public static string SuggestsVariablesOfTheSpecifiedTypeMacroDefinition_LongDescription { get; }
    public static string SuggestsVariableWhichTypeIsArrayTypeMacroDefinition_Description { get; }
    public static string SuggestsVariableWhichTypeIsArrayTypeMacroDefinition_LongDescription { get; }
    public static string SuggestsVisibleVariableThatCanBeEnumeratedThatIsMacroDefinition_Description { get; }
    public static string SuggestsVisibleVariableThatCanBeEnumeratedThatIsMacroDefinition_LongDescription { get; }
    public static string SuggestTypeForANewVariableDeclaredInTheTemplateMacroDefinition_Description { get; }
    public static string SuggestTypeForANewVariableDeclaredInTheTemplateMacroDefinition_LongDescription { get; }
    public static string WhenExecutedInVariableDeclarationWhereVariableNameShouldStandMacroDefinition_Description { get; }
    public static string WhenExecutedInVariableDeclarationWhereVariableNameShouldStandMacroDefinition_LongDescription { get; }
    public static string DecapitalizesStringValueIEChangesCaseOfTheFirstLetterToLowerMacroDefinition_Description { get; }
    public static string DecapitalizesStringValueIEChangesCaseOfTheFirstLetterToLowerMacroDefinition_LongDescription { get; }
    public static string EvaluatesCurrentFileNameInUpperCaseWithAllNonAlphanumericReplacedWithUnderscoresMacroDefinition_Description { get; }
    public static string EvaluatesCurrentFileNameInUpperCaseWithAllNonAlphanumericReplacedWithUnderscoresMacroDefinition_LongDescription { get; }
    public static string EvaluatesCurrentFileNameWithoutExtensionMacroDefinition_Description { get; }
    public static string EvaluatesCurrentFileNameWithoutExtensionMacroDefinition_LongDescription { get; }
    public static string EvaluatesCurrentFileNameWithoutExtensionWithAllNonAlphanumericReplacedWithUnderscoresMacroDefinition_Description { get; }
    public static string EvaluatesCurrentFileNameWithoutExtensionWithAllNonAlphanumericReplacedWithUnderscoresMacroDefinition_LongDescription { get; }
    public static string EvaluatesPrimaryFileNameWithoutExtensionWithAllNonAlphanumericReplacedWithUnderscoresMacroDefinition_Description { get; }
    public static string EvaluatesPrimaryFileNameWithoutExtensionWithAllNonAlphanumericReplacedWithUnderscoresMacroDefinition_LongDescription { get; }
    public static string RedundanciesInCode_Text { get; }
    public static string LanguageUsageOpportunities_Text { get; }
    public static string CodeNotification_Text { get; }
    public static string CommonPracticesAndCodeImprovements_Text { get; }
    public static string ConstraintsViolations_Text { get; }
    public static string PotentialCodeQualityIssues_Text { get; }
    public static string RedundanciesInSymbolDeclarations_Text { get; }
    public static string CompilerWarnings_Text { get; }
    public static string NUnit_Text { get; }
    public static string Xunit_Text { get; }
    public static string NotRunnableTests_Text { get; }
    public static string SyntaxStyle_Text { get; }
    public static string Formatting_Text { get; }
    public static string StructuralSearchPatterns_Text { get; }
    public static string StrictModeViolations_Text { get; }
    public static string UnrealEngine_Text { get; }
    public static string UnrealBuildSystem_Text { get; }
    public static string UnrealHeaderTool_Text { get; }
    public static string NETCore_Text { get; }
    public static string Security_Text { get; }
    public static string HideForThe_Operator_Text { get; }
    public static string TypeConversionHintsExclusionListSettingDescription { get; }
    public static string In_RelatedFile_Text { get; }
    public static string _InAttribute_Text { get; }
    public static string _ElementIn_Container_Text { get; }
    public static string Parameter_Of__Text { get; }
    public static string Parameter__Text { get; }
    public static string FileNotFound_Text { get; }
    public static string NotDotNetAssemblyFile_Text { get; }
    public static string InvalidPEHeaderRrIOError_Text { get; }
    public static string OneOrMultipleItemsDoesnTExist_Text { get; }
    public static string ReferencedCode_Text { get; }
    public static string ReferencedCodeIn__Text { get; }
    public static string ReferencedCodeIn__TitleMoreThanOneTargets { get; }
    public static string EmptySearch_Text { get; }
    public static string AssemblyReferencePresentationText { get; }
    public static string EntityFramework_Text { get; }
    public static string RiderExceptionBreakpointInsertionPoint_Text { get; }
    public static string Method_Highlighter_Display_Name { get; }
    public static string Type_Highlighter_Display_Name { get; }
    public static string Hyperlink_Highlighter_Display_Name { get; }
    public static string SuspiciousText_Highlighter_Display_Name { get; }
    public static string Path_Highlighter_Display_Name { get; }
    public static string DumpNonlocalizedTemplates { get; }
    public static string CompiledElementXmlDocLinkAppender_AppendExternalDocumentationLink_ { get; }
    public static string CompiledElementXmlDocLinkAppender_AppendExternalDocumentationLink_On { get; }
    public static string ReSharperTextToDeleteInConfigFile_Text { get; }
    public static string ReSharperTextToInsertInConfigFile_Text { get; }
    public static string ReSharperConfigFileConflictWarning_Text { get; }
    public static string Other_Highlighter_Group_Text { get; }
    public static string ActiveInProject_Text { get; }
    public static string InactiveInProject_Text { get; }
    public static string ProjectIndependent_Text { get; }
    public static string DeferredCacheProgressBar_Start_Calculating_asset_index { get; }
    public static string DeferredCacheProgressBar_Start_Processing_assets__Of__Text { get; }
    public static string BreakpointPresentationProperty_Text { get; }
    public static string BreakpointPresentationLocalFunction_Text { get; }
    public static string BreakpointPresentationMethod_Text { get; }
    public static string BreakpointPresentationConstructor_Text { get; }
    public static string BreakpointPresentationLambdaExpression_Text { get; }
    public static string StringComparison_Text { get; }
    public static string ComparerNamePrefix_Text { get; }
    public static string EventHandlerPrefix_Text { get; }
    public static string UseSystemHashCodeToImplementGetHashCode_Text { get; }
    public static string ExactlyTheSameTypeAsThis_Text { get; }
    public static string ExactlyOfType__Text { get; }
    public static string EqualOrSubtypeOf__Text { get; }
    public static string Ordinal_Text { get; }
    public static string OrdinalIgnoreCase_Text { get; }
    public static string CurrentCulture_Text { get; }
    public static string CurrentCultureIgnoreCase_Text { get; }
    public static string InvariantCulture_Text { get; }
    public static string InvariantCultureIgnoreCase_Text { get; }
    public static string CqrsValidationGeneralSettingsTitle { get; }
    public static string CqsSettingsTitle { get; }
    public static string CqrsSettingsTitle { get; }
    public static string EnableCqrsDescription { get; }
    public static string WhetherToSearchCqrsByNameDescription { get; }
    public static string WhetherToSearchCqrsByNameTitle { get; }
    public static string HighlightMarksDescription { get; }
    public static string WhetherToSearchCqrsByAnnotationTitle { get; }
    public static string EnabledCqrsNamingRecommendationDescription { get; }
    public static string EnabledWarningOnUsageDescription { get; }
    public static string EnableDebugMarksHighlightingDescription { get; }
    public static string EnableCqrsDeclarationRecommendationsDescription { get; }
    public static string EnableBothContextAnalysisTitle { get; }
    public static string EnableBothContextAnalysisDescription { get; }
    public static string EnabledBothContextOnDeclarationsDescription { get; }
    public static string CqrsRequiresSwaMainText { get; }
    public static string CqrsRequiresSwaButtonText { get; }
    public static string CustomCqrsSuffixSettingsDescription { get; }
    public static string CqrsCustomSuffixesComment { get; }
    public static string CqrsSettingsKeyDescription { get; }
    public static string CqrsCommandSuffixDescription { get; }
    public static string CqrsQuerySuffixDescription { get; }
    public static string CqrsSuffixValidationError { get; }
    public static string CqrsEqualSuffixesError { get; }
    public static string CqrsCommandHandlerSuffixDescription { get; }
    public static string CqrsQueryHandlerSuffixDescription { get; }
    public static string CqrsCommandMethodSuffixDescription { get; }
    public static string CqrsQueryMethodSuffixDescription { get; }
    public static string GenerateOption_ExposeViaStaticProperty_Text { get; }
    public static string GenerateOption_FieldsCanBeNull_Text { get; }
    public static string GenerateOption_AllowChildClassesToOverrideDisposePatternMethods_Text { get; }
    public static string GenerateOption_ClassHasUnmanagedResources_Text { get; }
    public static string GenerateOption_OverloadEqualityOperators_Text { get; }
    public static string GenerateOption_IMplementIEquatableTInterface_Text { get; }
    public static string GenerateOption_OverloadRelationalOperators_Text { get; }
    public static string GenerateOption_ImplementIComparableInterface_Text { get; }
    public static string GenerateOption_ComparandTypeCheck_Text { get; }
    public static string GenerateOption_Replace_Text { get; }
    public static string GenerateOption_Skip_Text { get; }
    public static string GenerateOption_SideBySide_Text { get; }
    public static string GenerateOption__AlreadyExists_Text { get; }
    public static string GenerateOption__AlreadyExist_Plural_Text { get; }
    public static string GenerateOption_StringComparison_Text { get; }
    public static string DefaultWrapperForNamingRule { get; }
    public static string ToggleIntellisenseSupportedRangesHighlightingAction_Text { get; }
    public static string HideIntellisenseSupportedRanges_Text { get; }
    public static string ShowIntellisenseSupportedRanges_Text { get; }
    public static string ClickToNavigate_Text { get; }
    public static string GoToFileMembers_Text { get; }
    public static string ShowFileStructure_Text { get; }
    public static string HideFor_OperatorDeclaration_Text { get; }
    public static string GenerateOption_DisposableInterface_Text { get; }
    public static string DisposableInterface_BothInterfaces_Text { get; }
    public static string ReleaseManagedResourcesHere_TodoText { get; }
    public static string ReleaseUnmanagedResourcesHere_TodoText { get; }
    public static string CopyColorValue_Action_Text { get; }
    public static string ColorUsage_Text { get; }
    public static string DataFlow_Text { get; }
    public static string StacktraceHighlighterGroup { get; }
    public static string EntityFrameworkEntityAdornment_ContextMenu_ShowERDAction_Text { get; }
    public static string EntityFrameworkEntityAdornment_ContextMenu_Title_Text { get; }
    public static string EntityFrameworkEntityAdornment_Description_Text { get; }
    public static string EntityFrameworkEntityAdornment_Text { get; }
    public static string EntityFrameworkEntityAdornment_ContextMenu_TurnOffAdornment_Text { get; }
    public static string OverridenBy__Text { get; }
    public static string InactiveCodeUsage_Text_Section { get; }
    public static string InactiveCodeUsages_Text { get; }
    public static string InactiveCodeUsage_Text { get; }
    public static string SolutionWideInspectionsDisplayName_Text { get; }
    public static string SolutionWideInspectionsDescription_Text { get; }
    public static string CommonContextActionGroupName_Text { get; }
    public static string XmlDocSection_Summary_Text { get; }
    public static string XmlDocSection_Value_Text { get; }
    public static string XmlDocSection_Params_Text { get; }
    public static string XmlDocSection_TypeParams_Text { get; }
    public static string XmlDocSection_Returns_Text { get; }
    public static string XmlDocSection_Attention_Text { get; }
    public static string XmlDocSection_Authors_Text { get; }
    public static string XmlDocSection_RetValues_Text { get; }
    public static string XmlDocSection_Exceptions_Text { get; }
    public static string XmlDocSection_Permission_Text { get; }
    public static string XmlDocSection_Remarks_Text { get; }
    public static string XmlDocSection_Example_Text { get; }
    public static string XmlDocSection_SeeAlso_Text { get; }
    public static string XmlDocSection_Permissions_Text { get; }
    public static string XmlDocSection_Compatibility_Text { get; }
    public static string XmlDocSection_Footer_Text { get; }
    public static string NoSearchResultsAvailable_Text { get; }
    public static string NoInspectionResults_Text { get; }
    public static string DumpPsiModulesActionText { get; }
    public static string ToRunAnInspection_Text { get; }
    public static string NoStackTracesAvailable_Text { get; }
    public static string StackTrace_Text { get; }
    public static string DumpPSISourceFilePropertiesActionText { get; }
    public static string SqlSettingsDescription { get; }
    public static string FilesAndFoldersSqlDialectsDescription { get; }
    public static string GlobalSqlDialectSettingName { get; }
    public static string SolutionSqlDialectSettingName { get; }
    public static string GlobalSqlDialectSettingLabel { get; }
    public static string SolutionSqlDialectSettingLabel { get; }
    public static string ShowSyntaxErrorsSqlSetting { get; }
    public static string ShowCodeInspectionsSqlSetting { get; }
    public static string HighlightSyntaxSqlSetting { get; }
    public static string OverrideVisualStudioSyntaxSqlSetting { get; }
    public static string HideVisualStudioCodeInspectionsSqlSetting { get; }
    public static string FilesAndFoldersSqlDialectsTable_Path { get; }
    public static string FilesAndFoldersSqlDialectsTable_Dialect { get; }
    public static string SqlGeneralSettingsPageName { get; }
    public static string SqlDialectsSettingsPageName { get; }
    public static string ShowDialectNotSelectedWarningSetting { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_ActionWasInterrupted_Text();
    public static string get_AllInstancesOfThisTypeAreEqualToEach_Text();
    public static string get_ActualSeveritySettingDescription();
    public static string get_AggregateFilterStateSettingDescription();
    public static string get_AllowCleanupOnSaveForSharedFilesSettingDescription();
    public static string get_AllowDragNdropSettingDescription();
    public static string get_AllowNewGroupingOfCleanupContextActionsSettingDescription();
    public static string get_AnalysisModeSettingDescription();
    public static string get_ArchitectureActionGroupText();
    public static string get_ArchitectureViewSettingsSettingDescription();
    public static string get_ASearchReplacePatternSettingDescription();
    public static string get_AssemblyExplorerSettingsSettingDescription();
    public static string get_Classes_Text();
    public static string get_CodeInsights_Text();
    public static string get_CodeSmell_Text();
    public static string get_ColorPickerHighlighting_Text();
    public static string get_CQRSValidationPageTitle();
    public static string get_CreateLocalVariableOfType();
    public static string get_CreateMethod_Text();
    public static string get_Delegates_Text();
    public static string get_DiscardTypeNameHints_Text();
    public static string get_Enums_Text();
    public static string get_Events_Text();
    public static string get_ExpandLiveTemplate_Text();
    public static string get_FeatureStatistics_Text();
    public static string get_FileAnnotations_Text();
    public static string get_GutterMarks_Text();
    public static string get_IdentifierHighlightings_Text();
    public static string get_InterLineAdornments_Text();
    public static string get_IntraTextAdornments_Text();
    public static string get_Fields_Text();
    public static string get_Interfaces_Text();
    public static string get_InternalSymbols_Text();
    public static string get_Keywords_Text();
    public static string get_LoadingSuggestions_Text();
    public static string get_LocalVariables_Text();
    public static string get_Methods_Text();
    public static string get_MissingConstructHints_Text();
    public static string get_MustDisposeResourceHints_Text();
    public static string get_Namespaces_Text();
    public static string get_OtherOptionPageTitle();
    public static string get_Parameters_Text();
    public static string get_PragmaDescriptionHints_Text();
    public static string get_PrivateSymbols_Text();
    public static string get_Properties_Text();
    public static string get_ProtectedSymbols_Text();
    public static string get_PublicSymbols_Text();
    public static string get_ReferenceProjectOrAssemblyName_Text();
    public static string get_PushToHintLongTapDuration_IntOption_Text();
    public static string get_ProjectHighlightings_Text();
    public static string get_WheaterToCheckCompiledCode();
    public static string get_ResourcesDisposePointsHints_Text();
    public static string get_ShortNameForAutoDetectedSettingsLayer();
    public static string get_AutoFormatOnClosingBraceSettingDescription();
    public static string get_AutoFormatOnPasteSettingDescription();
    public static string get_AutoFormatOnSemicolonSettingDescription();
    public static string get_AutoInsertClosingBraceSettingDescription();
    public static string get_AutoInsertPairBracketsParenthesesAndQuotesSettingDescription();
    public static string get_DisposeAnalysisModeSettingDescription();
    public static string get_EnableVisualStudioQuickActionsRetrieval_Text();
    public static string get_FeatureSuggestion_Text();
    public static string get_FindResults_Text();
    public static string get_HasDefaultConstructor_Text();
    public static string get_AllowsByRefLikeTypes_Text();
    public static string get_InspectionResults_Text();
    public static string get_JoinConcatenatedStringsOnPlusSignRemovalDescription();
    public static string get_AutomaticallyCompleteItemsInImportCompletionSettingDescription();
    public static string get_AutomaticallyCompleteItemsInSmartCompletionSettingDescription();
    public static string get_AutomaticallyCompleteItemsInSymbolCompletionSettingDescription();
    public static string get_AutomaticCodeCompletionSettingDescription();
    public static string get_AutomaticParameterInfoDelayInMillisecondsSettingDescription();
    public static string get_AutomaticPopupDelayInMillisecondsSettingDescription();
    public static string get_AutoOpenSettingDescription();
    public static string get_BackspaceUnindentSettingDescription();
    public static string get_BagOfRawSettingsSettingDescription();
    public static string get_BatterySaverModeLevelTurnedOffSettingDescription();
    public static string get_BookmarkCoordsInAFileSettingDescription();
    public static string get_BookmarkFileIdSettingDescription();
    public static string get_BookmarkOwnerSettingDescription();
    public static string get_BookmarksSettingsSettingDescription();
    public static string get_BrowseStackTraceActionText();
    public static string get_BuildActionSettingDescription();
    public static string get_CandidatesLimitSettingDescription();
    public static string get_CategoriesSettingDescription();
    public static string get_ChangeWrappingOfWordsActionText();
    public static string get_CheckWhetherSymbolIsObsoleteSettingDescription();
    public static string get_ChooseWhatHappensWhenYouInvokeTheGoToDeclarationCommandShortcutOrDoubleClickOnASymbolDeclarationSettingDescription();
    public static string get_CleanupAllConfigurationsTargetFrameworksOnSaveSettingDescription();
    public static string get_CleanupOnSaveFileMaskSettingDescription();
    public static string get_ClearFiltersActionText();
    public static string get_ClearSelectionActionText();
    public static string get_CodeCleanupCategory_TypeScriptSpecific();
    public static string get_CodeCleanupGroup_Copyright();
    public static string get_CodeCleanupGroup_ExternalTools();
    public static string get_CodeCleanupGroup_OptimizeImports();
    public static string get_CodeCleanupGroup_Rearrange();
    public static string get_CodeCleanupGroup_RedundanciesOptimizations();
    public static string get_CodeCleanupGroup_Reformat();
    public static string get_CodeCleanupGroup_SyntaxStyle();
    public static string get_CodeCleanupSettingsSettingDescription();
    public static string get_CodeCleanupTask_CSMakeAutoPropertyGetOnly();
    public static string get_CodeCleanupTask_CSMakeFieldReadonly();
    public static string get_CodeCleanupTask_VBMakeFieldReadonly();
    public static string get_CodeCleanupTask_RemoveCodeRedundanciesVB();
    public static string get_CodeCleanupTask_VBFormatDocComments();
    public static string get_CodeCleanupTask_VBOptimizeImports();
    public static string get_CodeCleanupTask_VBReformatCode();
    public static string get_CodeCleanupTask_VBShortenReferences();
    public static string get_CodeCompletionPerformanceSettingsSettingDescription();
    public static string get_CodeCompletionSettingsSettingDescription();
    public static string get_CodeEditingOptionPageTitle();
    public static string get_CodeInspectionOptionPageTitle();
    public static string get_ColorForMatchesOfThePatternSettingDescription();
    public static string get_ColorUsageHighlightingEnabledSettingDescription();
    public static string get_CommentSettingDescription();
    public static string get_CompleteOnSpaceSettingDescription();
    public static string get_CompletionFiltersSettingsSettingDescription();
    public static string get_ContextActionsEnabledDisabledStatusEachContextActionIsEnabledByDefaultSettingDescription();
    public static string get_ContextActionsSettingDescription();
    public static string get_ControlsThemeSelectionForSourceCodeSymbolIconsSettingDescription();
    public static string get_CorrectCommonLanguageSpecificTyposSettingDescription();
    public static string get_CouplingCalculationIsTurnedOnSettingDescription();
    public static string get_CurrentModeSettingDescription();
    public static string get_CustomFilterStateSettingDescription();
    public static string get_CustomIconToDisplayForTheMatchSettingDescription();
    public static string get_CustomProfilesCollectionSettingDescription();
    public static string get_CustomPropertiesSettingDescription();
    public static string get_DebuggerSettingsSettingDescription();
    public static string get_DefaultGroupingForOccurrencesSettingDescription();
    public static string get_DefaultGroupingForToDoItemsSettingDescription();
    public static string get_DefaultGroupingIndicesForOccurrencesSettingDescription();
    public static string get_DefaultIntervalBetweenSuggestionsInSecondsSettingDescription();
    public static string get_DefaultParameterInfoLocationSettingDescription();
    public static string get_DependsOnMainFileSettingDescription();
    public static string get_Structs_Text();
    public static string get_SolutionWideAnalysisErrors_Text();
    public static string get_TemplateSectionPresenceSettingDescription();
    public static string get_TemplateSectionPresenceHintSettingDescription();
    public static string get_DisableAllTipsActionText();
    public static string get_NotNullableType_Text();
    public static string get_EditableOccurrenceSettingDescription();
    public static string get_EditableSectionSettingDescription();
    public static string get_EditActionGroupText();
    public static string get_EditorBrowsableProcessingSettingDescription();
    public static string get_EnableAutomaticParameterInfoPopupSettingDescription();
    public static string get_EnableAutomaticReSharperIntelliSensePopupSettingDescription();
    public static string get_EnableFiltersSettingDescription();
    public static string get_EnableOrDisableSearchDomainReduceBySweaNeverShowThisOptionInUISettingDescription();
    public static string get_EnableReSharperQuickInfoSettingDescription();
    public static string get_EnableSearchEverywhereSettingDescription();
    public static string get_EnableStructuralRemoveSettingDescription();
    public static string get_EnterActionSettingDescription();
    public static string get_EnterKeyActionSettingDescription();
    public static string get_EntryNameSettingDescription();
    public static string get_EntryPositionSettingDescription();
    public static string get_ExecuteActionText();
    public static string get_ExecuteRefactoringActionGroupText();
    public static string get_ExplorerActionBarActionGroupText();
    public static string get_EXtendSelectionActionText();
    public static string get_ExternalSourcesNavigationOptionsSettingDescription();
    public static string get_FeatureSuggestionManagerSettingsSettingDescription();
    public static string get_FieldExpressionSettingDescription();
    public static string get_FieldsMappingSettingDescription();
    public static string get_FileMasksToSkipSettingDescription();
    public static string get_FilesAndDirectoriesMasksToSkipSettingDescription();
    public static string get_FilesAndDirectoriesToSkipSettingDescription();
    public static string get_FilesAndFoldersToSkipSettingDescription();
    public static string get_FilesExcludedFromCodeAnalysisSettingDescription();
    public static string get_FileTemplateActionText();
    public static string get_FilterClassesActionText();
    public static string get_FilterClassesInvertActionText();
    public static string get_FilterCustomActionText();
    public static string get_FilterCustomInvertActionText();
    public static string get_FilterDelegatesActionText();
    public static string get_FilterDelegatesInvertActionText();
    public static string get_FilterEnumsActionText();
    public static string get_FilterEnumsInvertActionText();
    public static string get_FilterEventActionText();
    public static string get_FilterEventInvertActionText();
    public static string get_FilterExtensionMethodsActionText();
    public static string get_FilterExtensionMethodsInvertActionText();
    public static string get_FilterFieldsActionText();
    public static string get_FilterFieldsInvertActionText();
    public static string get_FilterInterfacesActionText();
    public static string get_FilterInterfacesInvertActionText();
    public static string get_FilterInternalSymbolsActionText();
    public static string get_FilterInternalSymbolsInvertActionText();
    public static string get_FilterKeywordsActionText();
    public static string get_FilterKeywordsInvertActionText();
    public static string get_FilterLivePostfixTemplatesActionText();
    public static string get_FilterLivePostfixTemplatesInvertActionText();
    public static string get_FilterLocalVariablesActionText();
    public static string get_FilterLocalVariablesInvertActionText();
    public static string get_FilterMethodsActionText();
    public static string get_FilterMethodsInvertActionText();
    public static string get_FilterNamespacesActionText();
    public static string get_FilterNamespacesInvertActionText();
    public static string get_FilterParametersActionText();
    public static string get_FilterParametersInvertActionText();
    public static string get_FilterPrivateSymbolsActionText();
    public static string get_FilterPrivateSymbolsInvertActionText();
    public static string get_FilterPropertiesActionText();
    public static string get_FilterPropertiesInvertActionText();
    public static string get_FilterProtectedSymbolsActionText();
    public static string get_FilterProtectedSymbolsInvertActionText();
    public static string get_FilterPublicSymbolsActionText();
    public static string get_FilterPublicSymbolsInvertActionText();
    public static string get_FilterStateSettingDescription();
    public static string get_FilterStructsActionText();
    public static string get_FilterStructsInvertActionText();
    public static string get_FindActionGroupText();
    public static string get_FindGenericTypeUsagesBehaviourSettingDescription();
    public static string get_FirstTimeNavigationDialogHasBeenShownSettingDescription();
    public static string get_ForceCompletionOfItemActionText();
    public static string get_FormatAfterReplaceSettingDescription();
    public static string get_FuzzyResultsInGoToTextSettingDescription();
    public static string get_GeneralSettingsAppliedToATextEditorSettingDescription();
    public static string get_GroupBySettingDescription();
    public static string get_GroupTemplateByUITagSettingDescription();
    public static string get_HideParameterNameHintsForMethodsAnnotatedAsStringFormatMethodSettingDescription();
    public static string get_HideParameterNameHintsForParameterArraysSettingDescription();
    public static string get_HideVisualStudioLightBulbSettingDescription();
    public static string get_HideVisualStudioSquigglesSettingDescription();
    public static string get_HighlightConditionElementsSettingDescription();
    public static string get_PrimaryParametersCaptureHighlightingEnabled();
    public static string get_HighlightContextExitsSettingDescription();
    public static string get_HighlightingEyeSettingsSettingDescription();
    public static string get_HighlightingLevelForRecentlyUnmodifiedCodeFromSettingDescription();
    public static string get_HighlightingSettingsSettingDescription();
    public static string get_HighlightingSeveritySettingDescription();
    public static string get_HighlightNewlyAddedItemsSettingDescription();
    public static string get_HighlightRelatedAsyncAwaitKeywordsSettingDescription();
    public static string get_HighlightUsagesOfTheElementUnderCaretInCSettingDescription();
    public static string get_HowTheCodeIsGeneratedByTheGenerateFeatureSettingDescription();
    public static string get_IdentifierHighlightingEnabledSettingDescription();
    public static string get_IgnoreAdditionalUnmatchedContentSettingDescription();
    public static string get_IgnoreBracesInSingleStatementBlocksSettingDescription();
    public static string get_IgnoreCConditionalAccessSignSettingDescription();
    public static string get_IgnoreEmptyStatementsSettingDescription();
    public static string get_IgnoreIndependentModeSettingDescription();
    public static string get_IgnoreParenthesesInExpressionsSettingDescription();
    public static string get_ImageSettingDescription();
    public static string get_InlayHintsGeneralOptionsPage_Default_Visibility();
    public static string get_InlayHintsGeneralOptionsPage_Enable_Inlay_Hints();
    public static string get_InlayHintsGeneralOptionsPage_Enable_Inlay_Hints_in__NET_languages();
    public static string get_InlayHintsGeneralOptionsPage_Name();
    public static string get_InlayHintsGeneralOptionsPage_Push_To_Hint();
    public static string get_InlayHintsGeneralOptionsPage_Push_To_Hint_Help();
    public static string get_InlayHintsGeneralOptionsPage_Push_To_Hint_Help_Rider();
    public static string get_InlayHintsGeneralOptionsPage_Push_To_Hint_Rider();
    public static string get_InlayHintsGeneralOptionsPage_FixAlignmentForInlayHints();
    public static string get_InlayHintsGeneralOptionsPage_Enable_VirtualFormatter();
    public static string get_InlayHintsGeneralOptionsPage_Use_Virtual_Indent_Settings();
    public static string get_InlayHintsGeneralOptionsPage_Virtual_Indent_Settings_Open();
    public static string get_InlayHintsOptionPageTitle();
    public static string get_InsertBracesForEmbeddedStatementsSettingDescription();
    public static string get_InsertOnEnterAfterSettingDescription();
    public static string get_InsertVirtualIndentOnEnterSettingDescription();
    public static string get_InspectActionGroupText();
    public static string get_InspectionSeveritiesSettingDescription();
    public static string get_IntegerArithmeticAnalysisModeSettingDescription();
    public static string get_IntegrateGoToTextIntoSearchEverywhereSettingDescription();
    public static string get_IncrementalDaemonStagesOptimizationSettingDescription();
    public static string get_IntelliSenseEnablingSettingsSetSettingDescription();
    public static string get_IntelliSenseGloballyEnabledSettingDescription();
    public static string get_IntelliSenseHousekeepingSettingsSettingDescription();
    public static string get_IntelliSenseSettingsSettingDescription();
    public static string get_IntroduceLocalVariableRefactoringSettingsRegardingTheUseOfThevarKeywordRatherThanExplicitTypeSettingDescription();
    public static string get_IntroduceVariablesWithvarTypeWhenTheTypeIsEvidentFromTheAssignedValueEGNewClauseSettingDescription();
    public static string get_IntroduceVariablesWithvarTypeWhenTheTypeIsNOTEvidentFromTheAssignedValueSettingDescription();
    public static string get_InvokeParameterInfoFromTemplatesSettingDescription();
    public static string get_IsAReplacePatternSettingDescription();
    public static string get_IsEnabledSettingDescription();
    public static string get_Refactoring_Text();
    public static string get_ReferenceType_Text();
    public static string get_SearchUrl();
    public static string get_IsInvisibleSettingDescription();
    public static string get_IsLengthOfParsedLinesLimitedSettingDescription();
    public static string get_JumpOutsideOfClosingBracesQuotesInStringLiteralsWithTabSettingDescription();
    public static string get_JumpOutsideOfClosingBracesQuotesWithTabWhenTheCaretIsBeforeTheFirstSymbolOnTheLineSettingDescription();
    public static string get_JumpOutsideOfClosingBracesWithTabWhenTypingSettingDescription();
    public static string get_KeywordWithTheSameNameIsRequiredForThisTemplateToAppearInCompletionSettingDescription();
    public static string get_LanguageInjectionsOptionPageTitle();
    public static string get_LanguageSettingDescription();
    public static string get_LimitNumberOfCandidatesToSettingDescription();
    public static string get_ListNameSettingDescription();
    public static string get_LiveTemplatesLibrarySettingDescription();
    public static string get_LocationSelectorConfigSettingDescription();
    public static string get_LocationSelectorNameSettingDescription();
    public static string get_LockExternalSourcesFilesLocatedOnLocalMachineSettingDescription();
    public static string get_LookupWindowHeightSettingDescription();
    public static string get_LookupWindowSettingsSettingDescription();
    public static string get_MakeUseOfSolutionWideAnalysisResultsWhenApplyingQuickFixesInScopeSettingDescription();
    public static string get_MatchAllCatchClausesWithOutWithoutExceptionFiltersSettingDescription();
    public static string get_MatchAllMembersWithOrWithoutModifiersSettingDescription();
    public static string get_MatchAllSymbolsWithOrWithoutAttributesSettingDescription();
    public static string get_MatchCaseSensitivelySettingDescription();
    public static string get_MatchCExpressionBodiesAndSimilarPlainOldRegularMethodBodiesSettingDescription();
    public static string get_MatchInCommentsSettingDescription();
    public static string get_MatchingBraceHighlightingPositionSettingDescription();
    public static string get_MatchingBraceHighlightingSettingsShowMatchingBraceHeaderWithInlayHint();
    public static string get_MatchingBraceHighlightingSettingsSettingDescription();
    public static string get_MatchingBraceHighlightingStyleSettingDescription();
    public static string get_MatchInIdentifiersSettingDescription();
    public static string get_MatchInStringsSettingDescription();
    public static string get_MatchMethodParametersWiththisrefOroutSettingDescription();
    public static string get_MatchVoidWithTypePlaceholderSettingDescription();
    public static string get_MaxLengthOfLinesToBeParsedSettingDescription();
    public static string get_MaxLiveTabCountSettingDescription();
    public static string get_MergeItemsInRecentEditsSettingDescription();
    public static string get_MergeVisualStudioLightBulbActionsIntoReSharperBulbSettingDescription();
    public static string get_MessagePatternForTracePointSettingDescription();
    public static string get_MetadataPropertiesSettingDescription();
    public static string get_MoveCaretToCodeBlockEndActionText();
    public static string get_MoveCaretToCodeBlockEndWithSelectionActionText();
    public static string get_MoveCaretToCodeBlockStartActionText();
    public static string get_MoveCaretToCodeBlockStartWithSelectionActionText();
    public static string get_MRUSettingsForTheGenerateDialogSettingDescription();
    public static string get_NameOfThePatternSettingDescription();
    public static string get_NarrowDownLookupListOnTypingSettingDescription();
    public static string get_NavigateActionGroupText();
    public static string get_NavigateToActualTypeDuringDebuggingSettingDescription();
    public static string get_NavigationModeSettingDescription();
    public static string get_NextFilterActionText();
    public static string get_NonCompletingCharactersSettingDescription();
    public static string get_OnlineHelpSettingsDescription();
    public static string get_SearchEngineSectionDescription();
    public static string get_OnlineHelpSettingsComment();
    public static string get_OnlyRunCleanupOnChangedPartsOfFileSettingDescription();
    public static string get_OnlyRunCleanupOnChangedPartsOfRecentlyModifiedFileSettingDescription();
    public static string get_OpenPreviewTabForSelectedItemInFindResultsWindowSettingDescription();
    public static string get_OpenSettingsActionText();
    public static string get_OtherSettingDescription();
    public static string get_PaintItemsInTodoExplorerSettingDescription();
    public static string get_ParallelCodeAnalysisWhenApplyingQuickFixesAndContextActionsInScopeSettingDescription();
    public static string get_ParameterInformationActionText();
    public static string get_ParameterInfoSettingsSettingDescription();
    public static string get_ParenthesesInsertionTypeSettingDescription();
    public static string get_PerformFullCleanupIfPartialImpossible();
    public static string get_PeriodToConsiderFilesRecentlyModifiedDaysSettingDescription();
    public static string get_PeriodToTrackRecentlyModifiedFilesSettingDescription();
    public static string get_PlaceholderSettingDescription();
    public static string get_PlainTextSectionSettingDescription();
    public static string get_PositionInTheListSettingDescription();
    public static string get_PostfixTemplatesSettingsSettingDescription();
    public static string get_PreCommitDelayMsSettingDescription();
    public static string get_PreviousFilterActionText();
    public static string get_ProfileSubstitutionSettingDescription();
    public static string get_ProfileToUseForSilentCleanupSettingDescription();
    public static string get_ProjectHierarchyUpdateActionText();
    public static string get_ProjectHierarchyViewSettingsSettingDescription();
    public static string get_PropertiesSettingDescription();
    public static string get_QuickDocViewSettingsSettingDescription();
    public static string get_QuickInfoSettingsSettingDescription();
    public static string get_QuicklistEntrySettingDescription();
    public static string get_QuicklistSettingDescription();
    public static string get_ReadSettingsFromEditorconfigAndProjectSettingsSettingDescription();
    public static string get_RecentEditsCountSettingDescription();
    public static string get_RecentFilesCountSettingDescription();
    public static string get_RecentlyUsedProfileSettingDescription();
    public static string get_RecentSearchSettingDescription();
    public static string get_RefactorFilesActionGroupText();
    public static string get_RefactorActionGroupText();
    public static string get_RefactoringsDeferredRenameActionText();
    public static string get_ReferencedProjectsActionText();
    public static string get_ReferenceSectionSettingDescription();
    public static string get_ReferencingProjectsActionText();
    public static string get_ReformatAfterExpansionSettingDescription();
    public static string get_RefreshActionText();
    public static string get_RegularExpressionSettingDescription();
    public static string get_RememberExtendedSearchPreferencesSettingDescription();
    public static string get_RememberFilterStateSettingDescription();
    public static string get_RememberLastSearchSettingDescription();
    public static string get_ReplaceCommentSettingDescription();
    public static string get_ReplaceKeywordsWithLiveTemplatesSettingDescription();
    public static string get_InsertSpacingAfterKeywordsWhenRequired();
    public static string get_AdditionalAliasItemsToCorrectCommonErrorsDescription();
    public static string get_ReplacePatternSettingDescription();
    public static string get_ReSharperCVisualBasicNETParameterNameHintsSettingsSettingDescription();
    public static string get_ReSharperGeneralInlayHintsSettingsSettingDescription();
    public static string get_ReSharperGeneralParameterNameHintsSettingsSettingDescription();
    public static string get_ReSharperGeneralTypeConversionHintsSettingsSettingDescription();
    public static string get_ReSharperGeneralTypeNameHintsSettingsSettingDescription();
    public static string get_ReSharperRefactoringSettingsSettingDescription();
    public static string get_RunCleanupWhenSavingFileSettingDescription();
    public static string get_RunLongAnalysesLikeValueAnalysisInControlFlowInSolutionWideAnalysisSettingDescription();
    public static string get_RunTrigramConsistencyProbabilityCheckerEveryNMsWhenInternalZoneIsActivatedSettingDescription();
    public static string get_SaveAfterCleanupIfCleaningUpTheWholeFileSettingDescription();
    public static string get_ScopeTypeSettingDescription();
    public static string get_SearchAndNavigationSettingsSettingDescription();
    public static string get_SearchForOccurrencesInVarTemplateSettingDescription();
    public static string get_SearchForWebFilesThatCanAffectPerformanceSettingDescription();
    public static string get_SearchPatternSettingDescription();
    public static string get_SearchSettingsSettingDescription();
    public static string get_SearchWithPatternSettingsSettingDescription();
    public static string get_SectionMetadataPropertiesSettingDescription();
    public static string get_SectionTypeSettingDescription();
    public static string get_SelectAllActionText();
    public static string get_SelectsTheIconThemeToUseWhenRenderingSourceCodeSymbolIconsSettingDescription();
    public static string get_SelectTargetPart_Text();
    public static string get_SendThisCodeToJetBrainsActionText();
    public static string get_SessionToolbarActionGroupText();
    public static string get_ShortenQualifiedReferencesSettingDescription();
    public static string get_ShortenReferencesSettingDescription();
    public static string get_ShowAllCandidatesInParameterInfoPopupSettingDescription();
    public static string get_ShowAnnotationsSettingDescription();
    public static string get_ShowAssembliesActionText();
    public static string get_ShowAssembliesSettingDescription();
    public static string get_ShowCImportPopupSettingDescription();
    public static string get_ShowCodeAnnotationsHintsOnParameterDeclarationsSettingDescription();
    public static string get_ShowCompletionTypeSettingDescription();
    public static string get_ShowConfirmationDialogBeforeAddingReferenceSettingDescription();
    public static string get_ShowDelegatesUsingLambdaSyntaxSettingDescription();
    public static string get_ShowExtendedInformationSettingDescription();
    public static string get_ShowFiltersSettingDescription();
    public static string get_ShowFunctionSignaturesSettingDescription();
    public static string get_ShowFunctionSummarySettingDescription();
    public static string get_ShowGutterNavigationMarksForImplementedAndOverriddenMembersSettingDescription();
    public static string get_ShowImportTypeMethodUsingPopupSettingDescription();
    public static string get_ShowIndentGuidesSettingDescription();
    public static string get_ShowMethodSeparatorsSettingDescription();
    public static string get_ShowMissingConstructsAsEditorHintsSettingDescription();
    public static string get_ShowNonPublicCompiledItemsInGoToResultsSettingDescription();
    public static string get_ShowNotImportedTypesAndExtensionMethodsInCodeCompletionSuggestionsSettingDescription();
    public static string get_ShowPostfixTemplatesInCodeCompletionSettingDescription();
    public static string get_ShowResourceDisposePointsAsEditorHintsSettingDescription();
    public static string get_ShowSourceTemplatesInCodeCompletionSettingDescription();
    public static string get_ShowToDoItemsInGeneratedCodeSettingDescription();
    public static string get_ShowTypesSettingDescription();
    public static string get_ShowUnusedGlobalUsingsSettingDescription();
    public static string get_ShowGlobalImportsSettingDescription();
    public static string get_ShowUnusedTypeMembersInEditorSettingDescription();
    public static string get_StackTraceExplorer_Text();
    public static string get_UseReSharperNavigationHistoryForMouseSettingDescription();
    public static string get_VirtualIndentingOptionsPage_Name();
    public static string get_VsLightBulbDisplayModeSettingDescription();
    public static string get_ShowVisualStudioLightBulbActionsInSubmenuSettingDescription();
    public static string get_DisableVsLightBulbActionsFilteringSettingDescription();
    public static string get_SHrinkSelectionActionText();
    public static string get_SingleTemplateSettingDescription();
    public static string get_SmartBehaviorInBasicCompletionSettingDescription();
    public static string get_SmartIndentOnEnterSettingDescription();
    public static string get_SmartlyMatchAssociativeExpressionsSettingDescription();
    public static string get_SolveSingleWordsSettingDescription();
    public static string get_SortingSettingDescription();
    public static string get_SpecifiesWhetherToOverrideVSIntelliSenseWithReSharperIntelliSenseForSymbolCodeCompletionAutomaticCodeCompletionAndParameterInfoSettingDescription();
    public static string get_StackTraceExplorerOptionPageTitle();
    public static string get_StackTraceExplorerSettingsSettingDescription();
    public static string get_StackTracesActionText();
    public static string get_StandardOccurrenceBrowserContextMenuActionGroupText();
    public static string get_StorageTypeSettingDescription();
    public static string get_StringHighlightingEnabledSettingDescription();
    public static string get_StructuralNavigationBackwardActionText();
    public static string get_StructuralNavigationForwardActionText();
    public static string get_SuggestersStateSettingDescription();
    public static string get_SuppressionKeySettingDescription();
    public static string get_SurroundMnemonicSettingDescription();
    public static string get_SurroundOnTypingWithSelectionSettingDescription();
    public static string get_TabActionSettingDescription();
    public static string get_TabKeyActionSettingDescription();
    public static string get_TabNavigationBehaviorSettingDescription();
    public static string get_TemplateApplicabilitySettingDescription();
    public static string get_TemplateDescriptionSettingDescription();
    public static string get_TemplateFieldSettingDescription();
    public static string get_TemplateGuidSettingDescription();
    public static string get_TemplateIsBlessedToAppearInShortSelectionsSettingDescription();
    public static string get_TemplateIsDisabledSettingDescription();
    public static string get_TemplateProvidersListDisabledEnabledListSettingDescription();
    public static string get_TemplateScopeSettingDescription();
    public static string get_TemplateSectionSettingDescription();
    public static string get_TemplateShortcutSettingDescription();
    public static string get_TemplateTextSettingDescription();
    public static string get_TextSettingDescription();
    public static string get_ThirdPartyCodeOptionPageTitle();
    public static string get_ThirdPartyFileMasksSettingDescription();
    public static string get_ThirdPartyFilesAndFoldersSettingDescription();
    public static string get_TipsOptionsActionGroupText();
    public static string get_ToDoGroupingSettingsSettingDescription();
    public static string get_ToDoItemsSettingsSettingDescription();
    public static string get_ToDoPatternsSettingDescription();
    public static string get_ToolsActionGroupText();
    public static string get_ToRightAnalysisSettingDescription();
    public static string get_TrackRecentlyModifiedPartsOfFileOtherwiseTrackWholeFilesSettingDescription();
    public static string get_TracksReferencesToFilesInStringValuesInsideSourceCodeSettingDescription();
    public static string get_TreatPostfixAndPrefixOperatorAsEquivalentSettingDescription();
    public static string get_TreatReversedBinaryExpressionsAsEquivalentSettingDescription();
    public static string get_TypeConstraints_Text();
    public static string get_TypeConstraint_Text();
    public static string get_TypeImportOptionPageTitle();
    public static string get_TypeSettingDescription();
    public static string get_TypeToFilter_CueBannerText();
    public static string get_TypingAssistanceSettingsSettingDescription();
    public static string get_UITagSettingDescription();
    public static string get_UnitTestsActionGroupText();
    public static string get_UnmanagedType_Text();
    public static string get_URLPatternSettingDescription();
    public static string get_UseArrowsInsteadOfParameterInfoShortcutInParameterInfoPopupSettingDescription();
    public static string get_UseAssemblyExplorerInsteadOfObjectBrowserByDefaultSettingDescription();
    public static string get_RainbowOnLanguagesSettingDescription();
    public static string get_UseCamelHumpsForSelectingAndNavigatingBetweenWordsSettingDescription();
    public static string get_UseCompletionFontForLookupsSettingDescription();
    public static string get_UseFormatterConfigurationForTabSettingDescription();
    public static string get_UseMiddleMatchingInCompletionListSettingDescription();
    public static string get_UseNewKindGroupingAndFiltersSettingDescription();
    public static string get_UsePredefinedGroupingRulesSettingDescription();
    public static string get_UseSmartCompletionToShowAll_Text();
    public static string get_UseTabShiftTabKeysForNavigationInCodeSettingDescription();
    public static string get_UseWpfRefactoringFormSettingDescription();
    public static string get_ValueAnalysisModeSettingDescription();
    public static string get_ValueType_Text();
    public static string get_ViewStyleSettingDescription();
    public static string get_VisibilityModeOfCodeAnnotationsHintsOnParameterDeclarationsSettingDescription();
    public static string get_VisibilityModeOfMethodReturnTypeNameHintsSettingDescription();
    public static string get_VisibilityModeOfParameterNameHintsSettingDescription();
    public static string get_VisibilityModeOfTypeConversionHintsSettingDescription();
    public static string get_VisibilityModeOfTypeNameHintsForImplicitlyTypedVariablesSettingDescription();
    public static string get_VisualStudioSquigglesRoslynAnalyzersAreNotRenderedByVisualStudioItselfButInsteadThoseOfThemWhichAreNotRedundantInPresenceOfReSharperSuchAsCustomAnalyzerSetsAreProcessedTogetherWithReSharperAnalysisResultsSuppressVsSquigglesMustBeOffToTakeEffectSettingDescription();
    public static string get_WhenTabIsPressedSettingDescription();
    public static string get_WhetherAHintWasUsedForTheHighlightUsagesActionSettingDescription();
    public static string get_WhetherASingleItemInHierarchyListsShouldBeExecutedImmediatelySettingDescription();
    public static string get_WhetherASingleItemInUsageListsShouldBeExecutedImmediatelySettingDescription();
    public static string get_WhetherEnableGroupingByKindSettingDescription();
    public static string get_WhetherHintWasShownSettingDescription();
    public static string get_WhetherNavigationIsInvokedWithCtrlAltClickSettingDescription();
    public static string get_WhetherNavigationIsInvokedWithCtrlAltMiddleMouseButtonClickSettingDescription();
    public static string get_WhetherNavigationIsInvokedWithCtrlClickSettingDescription();
    public static string get_WhetherNavigationIsInvokedWithCtrlMiddleMouseButtonClickSettingDescription();
    public static string get_WhetherNavigationIsInvokedWithCtrlShiftClickSettingDescription();
    public static string get_WhetherNavigationIsInvokedWithMiddleMouseButtonSettingDescription();
    public static string get_WhetherSearchResultsTreesAndSimilarTreesShouldBeExpandedByDefaultSettingDescription();
    public static string get_WhetherTheFeatureIsEnabledSettingDescription();
    public static string get_WhetherToConsiderNonNullableReferenceTypesAsNotHoldingnullValuesWithoutRuntimeChecksEnforcingItSettingDescription();
    public static string get_WhetherToGroupItemsToGenerateByTypeSettingDescription();
    public static string get_WhetherToHideMethodReturnTypeNameHintsForSingleAndOneLineInvocationChainsSettingDescription();
    public static string get_WhetherToHideOrGrayOutIgnoredUsagesInFindUsagesValueTrackingEtcSettingDescription();
    public static string get_WhetherToHideParameterNameHintIfIntentionOfArgumentIsClearFromUsageSettingDescription();
    public static string get_WhetherToHideParameterNameHintIfIntentionOfFirstParameterIsClearFromMethodNameSettingDescription();
    public static string get_WhetherToHideParameterNameHintsForBuilderLikeMethodsSettingDescription();
    public static string get_WhetherToHideParameterNameHintsForNonLiteralsSettingDescription();
    public static string get_WhetherToHideParameterNameHintsIfMethodParametersOnlyDifferByNumberedSuffixSettingDescription();
    public static string get_WhetherToHideReturnTypeNameHintForTheLastInvocationWhenTheHintIsIrrelevantSettingDescription();
    public static string get_WhetherToHideTypeNameHintIfTheTypeIsEvidentFromTheVariableNameSettingDescription();
    public static string get_WhetherToHideTypeNameHintsForLambdaExpressionParametersIfTheTypeIsEvidentSettingDescription();
    public static string get_WhetherToHighlightUsagesOfTheElementUnderCaretInCSettingDescription();
    public static string get_WhetherToHighlightUsagesOfTheElementUnderCaretSettingDescription();
    public static string get_WhetherToIncludePropertyFieldAndVariableAccessorsInTheInvocationChainSettingDescription();
    public static string get_WhetherToJoinHintsForSequencesOfMethodInvocationsWithTheSameReturnTypesSettingDescription();
    public static string get_WhetherToMergeOccurrencesOnASingleLineSettingDescription();
    public static string get_WhetherToSearchForDelegateTargetsSettingDescription();
    public static string get_WhetherToSearchForDerivedTypesSettingDescription();
    public static string get_WhetherToSearchForExtendingInterfacesSettingDescription();
    public static string get_WhetherToSearchForHidingMembersSettingDescription();
    public static string get_WhetherToSearchForImplementationsSettingDescription();
    public static string get_WhetherToSearchForInheritedMembersSettingDescription();
    public static string get_WhetherToSearchForLateBoundReferencesSettingDescription();
    public static string get_WhetherToSearchForMemberUsagesSettingDescription();
    public static string get_WhetherToSearchForOverloadingMembersSettingDescription();
    public static string get_WhetherToSearchForTextualOccurrencesSettingDescription();
    public static string get_WhetherToSearchForUsagesSettingDescription();
    public static string get_WhetherToShowIconsInsteadOfTypeConversionDetailsSettingDescription();
    public static string get_WhetherToShowInlayHintsSettingDescription();
    public static string get_WhetherToShowMethodReturnTypeNameHintsSettingDescription();
    public static string get_WhetherToShowParameterNameHintsForConstantsAndEnumerationMembersSettingDescription();
    public static string get_WhetherToShowParameterNameHintsForFunctionCallsAndMethodInvocationsSettingDescription();
    public static string get_WhetherToShowParameterNameHintsForLambdaExpressionsAndAnonymousMethodsSettingDescription();
    public static string get_WhetherToShowParameterNameHintsForNonLiteralsInCaseOfMultipleParametersWithTheSameTypeSettingDescription();
    public static string get_WhetherToShowParameterNameHintsForUnclearObjectCreationExpressionsSettingDescription();
    public static string get_WhetherToShowParameterNameHintsSettingDescription();
    public static string get_WhetherToShowTypeConversionHintsForParticularOperatorsSettingDescription();
    public static string get_WhetherToShowTypeConversionHintsForUserDefinedAndNonSystemConversionsOnlySettingDescription();
    public static string get_WhetherToShowTypeNameHintsForFunctionReturnTypesSettingDescription();
    public static string get_WhetherToShowTypeNameHintsForImplicitlyTypedVariablesOnlyIfTheTypeIsEvidentSettingDescription();
    public static string get_WhetherToShowTypeNameHintsForImplicitlyTypedVariablesSettingDescription();
    public static string get_WhetherToShowTypeNameHintsForLambdaExpressionParametersSettingDescription();
    public static string get_WhetherToShowTypeNameHintsForLambdaReturnTypesSettingDescription();
    public static string get_WhetherToShowTypeNameHintsForPatternMatchingExpressionsSettingDescription();
    public static string get_WhetherToShowTypeNameHintsForQueryRangeVariablesInLINQQueriesSettingDescription();
    public static string get_WhetherToShowTypeNameHintsInDependentCCodeSettingDescription();
    public static string get_WhetherToSortItemsToGenerateByNameSettingDescription();
    public static string get_WhetherToSuggestRenameInCompletionSettingDescription();
    public static string get_WhetherToUseCompactTypeNamePresentationSettingDescription();
    public static string get_WhetherToUseInlineRenameEverywhereSettingDescription();
    public static string get_WhetherToUseSolutionWideAnalysisResultsToSpeedUpFindUsagesSettingDescription();
    public static string get_WhichModeToUseToShowCombinedHintsSettingDescription();
    public static string get_WhichPatternsToUseToFilterInvocationsWhilePlacingHintsSettingDescription();
    public static string get_WidthSettingDescription();
    public static string get_WrapLinesSettingDescription();
    public static string get_XMLDocCommentsOptionPageTitle();
    public static string get_XmlDocumentRepresentingAssemblyExplorerStateSettingDescription();
    public static string get_FilterOccurrencesMenuAction_Text();
    public static string get_HighlightingSettings_IncludeWarningsInSwea_Description();
    public static string get_HighlightingSettings_SweaWarningsMode_Description();
    public static string get_HighlightingSettings_SweaResourceConsumption_Description();
    public static string get_HighlightingSettings_UsageCheckingInspectionLevel_Description();
    public static string get_InlayHintsGeneralOptionsPage_InlayHintsGeneralOptionsPage_VirtualFormatterTooltip();
    public static string get_InlayHintsGeneralOptionsPage_InlayHintsGeneralOptionsPage_Show_real_whitespaces_on_top_of_virtual();
    public static string get_HereYouCanSpecifyFilesFileMasksAndFolders_Text_Text();
    public static string get_NoteThatThesePreferencesOnlyApplyTo_Text_Text();
    public static string get_FilesAndFoldersAreSpecifiedRelative_Text_Text();
    public static string get_SearchForWebFilesThatCanAffectPerformance_BoolOption();
    public static string get_ToEditTheListOfSkippedFilesAndFolders_Text();
    public static string get_SkippedCode_Header_Text();
    public static string get_AllFilesSpecifiedHereWillBeFullyIgnored_Text_Text();
    public static string get_LibraryCode_Header_Text();
    public static string get_ReSharperWillRecognizeSymbolsDeclared_Text_Text();
    public static string get_ImportsOptimization_Header_Text();
    public static string get_ImportsOptimization_RemoveOnlyUnusedCheckBox_Text();
    public static string get_ImportsOptimization_RemoveOnlyUnusedCheckBox_Tooltip();
    public static string get_ImportsOptimization_KeepNonTrivialOption_Text();
    public static string get_ImportsOptimization_KeepNonTrivialOption_Tooltip();
    public static string get_AutomaticLanguageAndReferenceInjections_Header_Text();
    public static string get_LanguageAndReferenceInjectionsProvide_Text_Text();
    public static string get_ForExampleACStringCanBeRecognizedAs_Text_Text();
    public static string get_AutoOpenExternalStackTraces_BoolOption_Text();
    public static string get_AutoOpenStackTraceCopiedOutsideOfVisual_BoolOption_ToolTip();
    public static string get_WrapLongLines_BoolOption_Text();
    public static string get_WrapLinesLongerThanMaximumLineLength_BoolOption_ToolTip();
    public static string get_SkipParsingOfLongLines_BoolOption_Text();
    public static string get_MaximumLineLength_IntOption_Text();
    public static string get_ImportFeatures_Header_Text();
    public static string get_ShowThe_ImportMissingReferencesPopup_BoolOption_Text();
    public static string get_ShowImportItemsInBasicCodeCompletion_BoolOption_Text();
    public static string get_Filtering_Header_Text();
    public static string get_ExcludeTheFollowingTypesMembersFrom_Text();
    public static string get_EnforceFullTypeNameQualificationWhen_Text();
    public static string get_PrefixAndSuffixWildcardsAreSupported_Text();
    public static string get_HideParameterNameHintsForParameterArrays_BoolOption_Text();
    public static string get_HideParameterNameHintsForMethodsAnnotated_BoolOption_Text();
    public static string get_HideForNonLiterals_BoolOption_Text();
    public static string get_ShowForConstantsAndEnumerationMembers_BoolOption_Text();
    public static string get_ShowForLambdaExpressionsAndAnonymous_BoolOption_Text();
    public static string get_ShowForUnclearObjectCreation_BoolOption_Text();
    public static string get_ShowForMethodInvocations_BoolOption_Text();
    public static string get_ShowForNonLiteralsInCaseOfMultipleParameters_BoolOption_Text();
    public static string get_HideForBuilderLikeMethods_BoolOption_Text();
    public static string get_HideIfMethodParametersOnlyDifferByNumbered_BoolOption_Text();
    public static string get_HideIfIntentionOfFirstParameterIsClear_BoolOption_Text();
    public static string get_HideIfIntentionOfArgumentIsClearFrom_BoolOption_Text();
    public static string get_NoParameterNameHintsWillBeShownForMethods_ExclusionListControl_Text();
    public static string get_ValueMustBeInFormMethodNameArgument_ExclusionListControl_Text();
    public static string get_YouCanSetTheDefaultVisibilityOfInlay_RichText_Text();
    public static string get_Editor_Rider_Settings_Root_Text();
    public static string get_Environment_ReSharper_Settings_Root_Text();
    public static string get_Settings_Rider_Settings_Text();
    public static string get_Options_ReSharper_Settings_Text();
    public static string get_Visibility_Combo_Options_Text();
    public static string get_ThisWillCloseTheOptionsDialogAndRun_Caption();
    public static string get_ThisWillCloseTheOptionsDialogAndOpen_Caption();
    public static string get_BasedOnStyle_Text();
    public static string get_HideOptionsThatCoincideWithTheChosen_Text();
    public static string get_Export_Settings_Text();
    public static string get_ShowAdditionalOptions_Caption();
    public static string get_ExportSettingsThatHaveDefaultValues_Text();
    public static string get_RemoveExistingPropertiesWithAmbiguous_Text();
    public static string get_OnlyExport_ChangedProperties_Text();
    public static string get_ExportStandardEditorconfigProperties_Text();
    public static string get_ExportCrossEditorLanguageSpecificProperties_Text();
    public static string get_ExportJetBrainsRiderReSharperSpecificInspections_Text();
    public static string get_ExportJetBrainsRiderReSharperSpecificCodeStyle_Text();
    public static string get_SpaceAround_Text();
    public static string get_SectionFileMask_Text();
    public static string get_ChangesAndConflictsPreview_Text();
    public static string get_Export_Text();
    public static string get_Enabled_Text();
    public static string get_Disabled_Text();
    public static string get_From__Text();
    public static string get_ActiveConfigurationFiles_Text();
    public static string get_IndentSettingsFor_Text();
    public static string get_UseRecommendedSettings_Text();
    public static string get_OverriddenBy__Text();
    public static string get_VisualStudio_Text();
    public static string get_ReSharper_Text();
    public static string get_Autodetection_Text();
    public static string get_FileMaskEGXmlHtml_Text();
    public static string get_ReferencedAssembliesDelimitedWith_Text();
    public static string get_InvalidPageContent_Text();
    public static string get__Back_Text();
    public static string get__Next_Text();
    public static string get_Cancel_Text();
    public static string get_DiscardOutVariable();
    public static string get_ToEnable_UndoOpenAllFilesWithChanges_Text();
    public static string get_ChangeStateOfTextBox_Text();
    public static string get_Select_Text();
    public static string get_InvalidDeclaredElement_Text();
    public static string get_ConflictsWereFound_Text();
    public static string get__HasFoundThatTheRefactoringHasSomeConflicts_Text();
    public static string get_SectionShouldnTBeEmpty_Text();
    public static string get_ValueCannotBeEmpty_Text();
    public static string get_IdentifierIsNotValid_Text();
    public static string get_PathContainsInvalidCharacters_Text();
    public static string get_FileShouldHave_Extension_Text();
    public static string get_ExtensionIsNotValidAcceptedExtensions_Text();
    public static string get_FolderDoesnTExist_Text();
    public static string get_FileDoesnTExist_Text();
    public static string get_FileCannotBeCreated_Text();
    public static string get_FileDoesnTExist__Text();
    public static string get_ValueShouldBeDifferentFromInitial_Text();
    public static string get_TypeWithThisNameAlreadyExists_Text();
    public static string get_NamespaceWithThisNameAlreadyExists_Text();
    public static string get_TypeWithThisNameAlreadyExistsInNamespace_Text();
    public static string get_TypeWithThisNameDoesnTExist_Text();
    public static string get_TypeMemberWithThisNameAlreadyExists_Text();
    public static string get_FileExistsOnDiskButIsNotIncludedInProject_Text();
    public static string get_Global_Text();
    public static string get_Everywhere_Text();
    public static string get_InFilesMatching__Text();
    public static string get_References__Text();
    public static string get_RestrictToTheStartOfTheLine_Text();
    public static string get_AnyProject_Text();
    public static string get_AtLineStart_Text();
    public static string get__Files_Text();
    public static string get_InAnyOfGivenProjectDirectoriesRelative_Text();
    public static string get_CodeCleanup_Text();
    public static string get_CodeCleanup_Profile();
    public static string get_CodeCleanup_BuiltInProfile();
    public static string get_CodeCleanup_Builtin_Profile_Name_FULL();
    public static string get_CodeCleanup_Builtin_Profile_Name_CODE_STYLE();
    public static string get_CodeCleanup_Builtin_Profile_Name_REFORMAT();
    public static string get_SettingsDetectionAlreadyInProgressPlease_Text();
    public static string get_DetectSettings_Text();
    public static string get_DetectingSettings_Text();
    public static string get_DetectingFrom__Text();
    public static string get_ChoosingSettings_Text();
    public static string get_ChoosingBestValues_Text();
    public static string get_ReSharperWillAddAReferenceTo__Text();
    public static string get_FailedToReferenceModuleProbablyReference_Text();
    public static string get_FailedToModifyDocuments_Text();
    public static string get_ActionCancelled_Text();
    public static string get_CannotPerformThisActionMostLikelyBecause_Text();
    public static string get_EscapePastedText_Text();
    public static string get_InContainerName_Text();
    public static string get_RecursiveReferences__ToolTip();
    public static string get_Analyzing_Text();
    public static string get_CanTCalculateChildren_Text();
    public static string get_CodeAnnotationHints_Text();
    public static string get_GoToPrevHighlight_Text();
    public static string get_GoToNextHighlight_Text();
    public static string get_DaemonProcess__Text();
    public static string get_AnalysisOf__Text();
    public static string get_TheItemHasNoText_Text();
    public static string get_ProcessingTypeElements_Text();
    public static string get_InvalidPath__Text();
    public static string get_PathIsNotValid_Text();
    public static string get_ExportTo__Caption();
    public static string get_SaveSettingsTo__Text();
    public static string get_ExportTo__Text();
    public static string get_ErrorWritingTo_AccessIsDeniedPlease_Text();
    public static string get_ErrorWritingTo__Text();
    public static string get__FilesFor__Text();
    public static string get_Uncertain_Text();
    public static string get_Tab_Key_In_Formatting_Text();
    public static string get__Spaces_In_Formatting_Text();
    public static string get_NoOptionsWereImportedProbablyDueToIncorrect_Text();
    public static string get_ErrorReadingClangFormatFile___Text();
    public static string get_Generate_Text();
    public static string get_Generation_Text();
    public static string get_TheEmptyMaskWillNotBeSaved_Text();
    public static string get_TheFollowingCharactersAreNotAllowed_Text();
    public static string get_WildcardSymbolMustBePlacedAtTheStart_Text();
    public static string get_TheInvalidMaskWillNotBeSaved_Text();
    public static string get_CalculatingNodePresentation();
    public static string get_TurnOffEverywhere_Text();
    public static string get_Configure_Text();
    public static string get_ConfigureInlayHints_Text();
    public static string get_ChangeVisibility_Text();
    public static string get_TurnOffAllInlayHints_Text();
    public static string get_ProcessingFiles_Text();
    public static string get_Scope_Intention_Text();
    public static string get_ApplyingInScope_Text();
    public static string get_ApplyingInScope1Match_Text();
    public static string get_ApplyingInScope_Matches_Text();
    public static string get_CollectingFilesToProcess_Text();
    public static string get_ExcludingFiles_Text();
    public static string get_ProcessingFile___Text();
    public static string get_AnalyzingInParallel_Threads_Text();
    public static string get_AnalyzingFile_Of___Text();
    public static string get_Applied1TimeElapsed__Text();
    public static string get_Applied_TimesElapsed__Text();
    public static string get_SearchingFor_Usages_Text();
    public static string get_InSolution_Text();
    public static string get_CollectingProjectFiles_Text();
    public static string get_ProcessingProject___Text();
    public static string get_PressTabOrEnterToMoveToNextField_Text();
    public static string get_DefaultLiveTemplates_Text();
    public static string get_DefaultSurroundTemplates_Text();
    public static string get_DefaultFileTemplates_Text();
    public static string get_Constructor_Caption();
    public static string get_GenerateConstructors_Caption();
    public static string get_SelectConstructorsFromBaseTypeAndMembers_Text();
    public static string get_Deconstructor_Caption();
    public static string get_GenerateDeconstructorMethod_Caption();
    public static string get_SelectMembersToDeconstructFromObject_Text();
    public static string get_DelegatingMembers_Caption();
    public static string get_DelegateToFieldsMembers_Caption();
    public static string get_SelectMembersOfFieldsOrPropertiesTo_Text();
    public static string get_DisposePattern_Caption();
    public static string get_ImplementDisposePattern_Caption();
    public static string get_SelectAndSortMembersToDispose_Text();
    public static string get_EqualityCoMparer_Caption();
    public static string get_GenerateEqualityComparer_Caption();
    public static string get_SelectMembersToParticipateInEquality_Text();
    public static string get_EqualityMembers_Caption();
    public static string get_GenerateEqualityMembers_Caption();
    public static string get_SelectMembersToParticipateInEqualityOperations_Text();
    public static string get_EventSubscriptions_Caption();
    public static string get_GenerateEventSubscriptions_Caption();
    public static string get_SelectEventsWhichShouldBeHandledBySubscribers_Text();
    public static string get_FormattingMembers_Caption();
    public static string get_GenerateFormattingMembers_Caption();
    public static string get_SelectMembersToParticipateInFormatting_Text();
    public static string get_MIssingMembers_Caption();
    public static string get_ImplementMissingMembers_Caption();
    public static string get_SelectMembersOfBaseTypesToImplement_Text();
    public static string get_OverridingMembers_Caption();
    public static string get_OverrideMembers_Caption();
    public static string get_PArtialMethods_Caption();
    public static string get_GeneratePartialMethods_Caption();
    public static string get_SelectPartialMethodsToImplement_Text();
    public static string get_Properties_Caption();
    public static string get_GenerateProperties_Caption();
    public static string get_SelectMembersWhichShouldBeExposedVia_Text();
    public static string get_ReadOnlyProperties_Caption();
    public static string get_GenerateReadOnlyProperties_Caption();
    public static string get_RelaTionalComparer_Caption();
    public static string get_GenerateRelationalComparer_Caption();
    public static string get_SelectAndSortMembersToParticipateIn_Text();
    public static string get_RelationalMembers_Caption();
    public static string get_GenerateRelationalMembers_Caption();
    public static string get_InspectThis_Text();
    public static string get_InspectThis_Action_Name_Text();
    public static string get_CompilerWarning___Text();
    public static string get_Inspection__Text();
    public static string get_InFile_Text();
    public static string get_InProject_Text();
    public static string get_InFolder_Text();
    public static string get_NavigationMenu_Text();
    public static string get_Search_Text();
    public static string get_SearchingFor__Text();
    public static string get_ThisIsTheOnlyUsage_Text();
    public static string get__WereNotFound_Text();
    public static string get_SearchingForUsagesEscToOpenFindResults_Text();
    public static string get_SelectTarget_Text();
    public static string get_NoDeclarationsFound_Text();
    public static string get_SomethingWentWrongIfTheProblemReoccurs_Text();
    public static string get_RestoringSavedResults_Text();
    public static string get_ThisIsTheOnlyUsageInThisFile_Text();
    public static string get_ProcessNamespaces_Text();
    public static string get_Namespace__Text();
    public static string get_AllCandidates_Text();
    public static string get_SearchConsumingAPIs_Text();
    public static string get_SortingExposingAPIs_Text();
    public static string get_SortingExposingAPIsFor__Text();
    public static string get_AnalysingFilesFor__Text();
    public static string get_ScanningFile__Text();
    public static string get_SearchEverywhere_Text();
    public static string get_EnterTypeName_Text();
    public static string get_EnterActionName_Text();
    public static string get_PreparingTheListOfItemsPleaseWait_Text();
    public static string get_CurrentFolder_Text();
    public static string get_ParentFolder_Text();
    public static string get_In_Folder_Text();
    public static string get_File_Text();
    public static string get_Project_Text();
    public static string get_ProjectFolder_Text();
    public static string get_Type_Text();
    public static string get_Member_Text();
    public static string get_Method_Text();
    public static string get_Event_Text();
    public static string get_Property_Text();
    public static string get_Field_Text();
    public static string get_UnitTest_Text();
    public static string get_FileMask__Text();
    public static string get_Extension__Text();
    public static string get_FileExtensionCsVbXml_Text();
    public static string get_FileMaskClCsClaSVb_Text();
    public static string get_CurrentProject_Text();
    public static string get_GoToText_Text();
    public static string get_EnterFileOrFolderName_Text();
    public static string get_ShowInSolutionExplorer_Text();
    public static string get_EnterMetadataToken_Text();
    public static string get_EnterString_Text();
    public static string get_SomeStringsMayBeMissingAtTheMoment_Text();
    public static string get_INcludeLibraryTypes_Text();
    public static string get_NoSymbolsFoundInSolution_Text();
    public static string get_EnterSymbolName_Text();
    public static string get_SomeSymbolsMayBeMissingAtTheMoment_Text();
    public static string get_SomeTypesMayBeMissingAtTheMoment_Text();
    public static string get_MIddleMatch_Text();
    public static string get_SomeFilesMayBeMissingAtTheMoment_Text();
    public static string get_EnterWord_Text();
    public static string get_NoDestinationsFound_Text();
    public static string get_ProcessingReferences_Text();
    public static string get_RemovingAssemblyReferences_Text();
    public static string get_RemovingNuGetPackages_Text();
    public static string get_RemovingRedundantImportDirectives_Text();
    public static string get__AndOthers_Text();
    public static string get_Base_Of__Text();
    public static string get_Type_Symbol_Kind_Text();
    public static string get_DeclarationsOf___Text();
    public static string get_GoToDeclaration_Text();
    public static string get_ProjectItemNavigation_Caption();
    public static string get_CompiledElementNavigation_Caption();
    public static string get_ObjectBrowserNavigation_Caption();
    public static string get_AssemblyInfoNavigation_Caption();
    public static string get_TextRangeNavigation_Text();
    public static string get_Navigate_Text();
    public static string get_DerivedInterfacesOf___Text();
    public static string get_DerivedTypesOf__Text();
    public static string get_ImplementationsOf__Text();
    public static string get_Derived_Text();
    public static string get_Implementing_Text();
    public static string get_Overriding_Text();
    public static string get___Of__Text();
    public static string get_ScanningAssembly__Text();
    public static string get_ScanningAnElement_Text();
    public static string get_ShowOnDiagram_Text();
    public static string get_ShowMoreItems_Text();
    public static string get_TooManyItemsListTruncated_Text();
    public static string get_ShowInFindResults_Text();
    public static string get_InvalidElement_Text();
    public static string get_Breakpoint_ToolTip();
    public static string get__InUnitTests_ToolTip();
    public static string get_UsagesAndDerivedInterfacesOf__Text();
    public static string get_UsagesAndDerivedTypesOf__Text();
    public static string get_ImplementationsAndDerivedInterfaces_Text();
    public static string get_UsagesImplementationsAndDerivedInterfaces_Text();
    public static string get_UsagesAndImplementationsOf__Text();
    public static string get_UsagesOf_Members_Text();
    public static string get_UsagesOf_AndItsMembers_Text();
    public static string get_UsagesOf___Text();
    public static string get_AndOthers_Text();
    public static string get_TypeConversions_Text();
    public static string get_TypeChecking_Text();
    public static string get_UsagesInUsings_Text();
    public static string get_StaticClassMemberAccess_Text();
    public static string get_NestedClassAccess_Text();
    public static string get_UsageInTypeof_Text();
    public static string get_UsageInDefault_Text();
    public static string get_ConstantDeclaration_Text();
    public static string get_EventDeclaration_Text();
    public static string get_PropertyDeclaration_Text();
    public static string get_ConversionOperator_Text();
    public static string get_ParameterDeclaration_Text();
    public static string get_ParameterDeclarationNonExtension_Text();
    public static string get_ParameterDeclarationExtensionThisParameter_Text();
    public static string get_CatchClause_Text();
    public static string get_TypeArgument_Text();
    public static string get_UsageInConstraint_Text();
    public static string get_MethodReturnType_Text();
    public static string get_TupleElement_Text();
    public static string get_Class_Text();
    public static string get_Struct_Text();
    public static string get_Enum_Text();
    public static string get_Interface_Text();
    public static string get_TypeMember_Text();
    public static string get_Accessor_Text();
    public static string get_Constructor_Text();
    public static string get_Operator_Text();
    public static string get_Delegate_Text();
    public static string get_UsageInGeneratedCode_Text();
    public static string get_SemanticUsage_Text();
    public static string get_UnitTesting_Text();
    public static string get_Other_Text();
    public static string get_Hidden_Text();
    public static string get_GeneratedCodeClassificationAxis_Text();
    public static string get_Folder_Text();
    public static string get_PleaseOpenASolution_Text();
    public static string get_HideFor__Text();
    public static string get_ParameterNameHints_Text();
    public static string get_TupleComponentNameHints_Text();
    public static string get_InterceptedCallHints_Text();
    public static string get_InterceptsLocationHint_ContextMenuTitle();
    public static string get_NavigateToInterceptedLocationHintAction_Text();
    public static string get_NavigateToInterceptorHintAction_Text();
    public static string get_NavigateToInterceptedLocationHintAction_InvalidPositionInFile_Popup_Text();
    public static string get_NavigateToInterceptedLocationHintAction_FileNotFound_Popup_Text();
    public static string get_ImplicitJumpBeforeLocalFunctionHint_Text();
    public static string get_DeconstructionPatternComponentNameHints_Text();
    public static string get_NavigateToDeclaration_Text();
    public static string get_HideForThisMethod_Text();
    public static string get_UpdateReferencesTo__Text();
    public static string get_UpdatePathReferences_Text();
    public static string get_ReparseForPostfixTemplates_Text();
    public static string get_ReferencesOf__Text();
    public static string get_UsagesOf__Text();
    public static string get_FolderDoesNotExistAndWillBeCreated_Text();
    public static string get_FolderDoesNotExistAndCannotBeCreated_Text();
    public static string get_TopLevelProjectMustBeSpecified_Text();
    public static string get_InvalidPath_Text();
    public static string get_FileDoesNotExistAndWillBeCreated_Text();
    public static string get_FileDoesNotExistAndCannotBeCreatedAs_Text();
    public static string get__ContainsInvalidCharacter__Text();
    public static string get_FileName_Text();
    public static string get_SelectFolders_Caption();
    public static string get_SomeSelected_sAreNotPartOfSolutionAnd_Text();
    public static string get_Add__Caption();
    public static string get_SomeSelected_WereAlreadyPresentInThe_Text();
    public static string get_SelectAnItemToRemove_Text();
    public static string get_Folder_PathItemsToView_Caption();
    public static string get_File_PathItemsToView_Caption();
    public static string get_TheStringMustNotBeEmpty_Text();
    public static string get_FileMasksWildcardsAreSupported_Caption();
    public static string get_NamespacesThatShouldNotBeRemoved_Caption();
    public static string get_NamespacesThatShouldAlwaysBeImported_Caption();
    public static string get_NamespacesThatShouldNeverBeRemovedFrom_Caption();
    public static string get_FilesAndFolders_Caption();
    public static string get_OverridesAndImplements_ToolTip();
    public static string get_Implements_ToolTip();
    public static string get_Overrides_ToolTip();
    public static string get_SelectExpression_Text();
    public static string get_PreparingDataForRefactoring_Text();
    public static string get_RefactoringSucceeded_Text();
    public static string get_ExecutingRefactoring_Text();
    public static string get_ExecuteRefactoring_Text();
    public static string get_RefactoringFailed_Caption();
    public static string get_UnsuccessfulFinish_Text();
    public static string get_RefreshContent_Text();
    public static string get_RefactoringCannotRecoverDueToChanges_Text();
    public static string get_RefreshingConflicts_Text();
    public static string get_ProcessingData_Text();
    public static string get_TextOccurrences_Text();
    public static string get_DisableWrappingOfWords_Text();
    public static string get_EnableWrappingOfWords_Text();
    public static string get_MatchesFor__Text();
    public static string get_PredefinedTODOPatterns_Text();
    public static string get_Libraries_Text();
    public static string get_HideAllUsages_Text();
    public static string get_ShowAllUsages_Text();
    public static string get_BuildingTree_Text();
    public static string get__ForAssembly___Text();
    public static string get_AttributesOfAssembly___Text();
    public static string get_Number__Text();
    public static string get__ForAssembly__Text();
    public static string get_AttributesOfAssembly__Text();
    public static string get_AttributeFor_Text();
    public static string get__AttributeFor_Text();
    public static string get_UsageInAccessor_Text();
    public static string get_UsageInMethod_Text();
    public static string get_UsageInProperty_Text();
    public static string get_Usage_Text();
    public static string get_RenameThisOverload_Text();
    public static string get_RenameAllOverloads_Text();
    public static string get_RenameInitialElementOnly_Text();
    public static string get_RenameInitialElementAndAllItsOverloads_Text();
    public static string get__InProject__Text();
    public static string get_Item_Plural();
    public static string get_EnterFolderName_Text();
    public static string get_Error_Caption();
    public static string get_ImportingAnnotationsToProject_Text();
    public static string get_CouldNotLocateReSharperAnnotationsIn_Text();
    public static string get_Select__Caption();
    public static string get_SelectFolder_Text();
    public static string get_SelectFile_Text();
    public static string get_ExpandingNode_Text();
    public static string get_TypeNameHints_Text();
    public static string get_ChangeVisibilityFor__Caption();
    public static string get_NavigateToThe_OperatorDeclaration_Text();
    public static string get_TypeConversionHints_Text();
    public static string get_Default_Text();
    public static string get_Generated_Text();
    public static string get_RelatedSymbols_Text();
    public static string get_RelatedUsages_Text();
    public static string get_Dynamic_Text();
    public static string get_Documentation_Text();
    public static string get_DynamicSmart_Text();
    public static string get_DynamicOther_Text();
    public static string get_Other_Text_Section();
    public static string get_DependentCode_Text_Section();
    public static string get_MacroBodyUsage_Text_Section();
    public static string get_Textual_Text();
    public static string get_TextualFuzzy_Text();
    public static string get_Compiled_Text();
    public static string get_ConflictsWillAppear_Text();
    public static string get_Initial_Text();
    public static string get_SearchTarget_Text();
    public static string get_NoUsagesFound_Caption();
    public static string get_FollowingProblemsWillAppear_Text();
    public static string get_ExtensionForObjects_Text();
    public static string get_NoBasesFound_Text();
    public static string get_Base_Plural();
    public static string get_Found__InLibraries_Text();
    public static string get_Displaying_Of_Found_InLibraries_Text();
    public static string get_Found___Text();
    public static string get_Displaying_Of_Found__Text();
    public static string get_Declaration_Plural();
    public static string get_In_Scope_Text();
    public static string get_Found____Text();
    public static string get_Displaying_Of_Found___Text();
    public static string get_No_Found__Text();
    public static string get_Usages_Text();
    public static string get_Usage_Form_Text();
    public static string get_DynamicUsages_Text();
    public static string get_DynamicUsage_Text();
    public static string get_TextualOccurrences_Text();
    public static string get_TextualOccurrence_Text();
    public static string get_TextualOccurrenceFuzzy_Text();
    public static string get_TextualOccurrencesFuzzy_Text();
    public static string get_PossibleDynamicUsages_Text();
    public static string get_PossibleDynamicUsage_Text();
    public static string get_PossibleUsages_Text();
    public static string get_PossibleUsage_Text();
    public static string get_DependentCodeUsages_Text();
    public static string get_DependentCodeUsage_Text();
    public static string get_MacroBodyUsages_Text();
    public static string get_MacroBodyUsage_Text();
    public static string get_RelatedSymbols_Form_Text();
    public static string get_RelatedSymbol_Text();
    public static string get_RelatedSymbolsUsages_Text();
    public static string get_RelatedSymbolsUsage_Text();
    public static string get_UsagesInDocumentation_Text();
    public static string get_UsageInDocumentation_Text();
    public static string get_UsagesInGeneratedCode_Text();
    public static string get_UsageInGeneratedCode_Form_Text();
    public static string get_NoImplementationsFound_Text();
    public static string get_ImplementationsInLibraries_Text();
    public static string get_ImplementationInLibraries_Text();
    public static string get_Implementations_Text();
    public static string get_Implementation_Text();
    public static string get_NoInheritorsFound_Text();
    public static string get_InheritorsInLibraries_Text();
    public static string get_InheritorInLibraries_Text();
    public static string get_Inheritor_Text();
    public static string get_Inheritors_Text();
    public static string get_Implements_N_Text();
    public static string get_Overrides_N_Text();
    public static string get_Hides_N_Text();
    public static string get_AnalysisIsNotAvailableForTheFile__Text();
    public static string get_AnalysisIsSwitchedOffForTheFile__Text();
    public static string get_AnalysisIsSuspendedForTheFile__Text();
    public static string get_AnalysisIsNotAvailable_Text();
    public static string get_AnalysisIsNotSupported_Text();
    public static string get_AnalysisIsNotAvailableForTheFileFileNoPsi_Text();
    public static string get_AnalysisIsNotAvailableForTheFileFileNoCodeModel_Text();
    public static string get_AnalysisIsNotAvailableForTheFileNoError_Text();
    public static string get_AnalysisIsNotAvailableForTheFileWithExplanation__Text();
    public static string get_CodeAnalysisHasBeenPausedDuringCaches_Text();
    public static string get_CodeAnalysisHasBeenPausedBecauseAverage_Text();
    public static string get_CodeAnalysisHasBeenPausedBecauseDocument_Text();
    public static string get_CodeAnalysisHasBeenPausedDuringExternal_Text();
    public static string get_FileLanguageIsUnknown_Text();
    public static string get_CodeCleanupInProgress_Text();
    public static string get_ScopedRefactoringActionIsBeingApplied_Text();
    public static string get_PressEscapeToRemoveHighlighting_Text();
    public static string get_ThereIsNoMatchesInMethodWithTheSame_Text();
    public static string get_Found1MatchInMethodWithTheSameSignature_Text();
    public static string get_Found_MatchesInMethodWithTheSameSignature_Text();
    public static string get_RoleDerived_Text();
    public static string get_RoleAttribute_Text();
    public static string get_Result_Text();
    public static string get_String_Text();
    public static string get_Symbol_Text();
    public static string get_Type_Goto_Target_Text();
    public static string get_NoName_Text();
    public static string get_CannotBind0FileReferenceToFile__Text();
    public static string get_Conflict_Text();
    public static string get__Language_Of0_IsNotSupportedByTheRefactoring_Text();
    public static string get_DeclaredElement_Text();
    public static string get_UnableToSetAccessRightsTo__Text();
    public static string get_UnableToAddTypeParameterTo__Text();
    public static string get__Language_Of_IsNotSupportedByTheRefactoring_Text();
    public static string get_Element_Text();
    public static string get_UnableToAddFieldTo__Text();
    public static string get_UnableToCreatePropertyFor__Text();
    public static string get_UnableToAddConstructorTo__Text();
    public static string get_UnableToAddParameterTo__Text();
    public static string get_UnableToRemoveParameterFrom__Text();
    public static string get_UnableToAddRemoveThisModifierTo__Text();
    public static string get_UnableToAddDeclarationTo__Text();
    public static string get_UnableToCreatePropertyIn__Text();
    public static string get__Overrides_FromCompiledCode_Text();
    public static string get__Implements_CompiledInterface_Text();
    public static string get__IsOverriddenBy_InCompiledCode_Text();
    public static string get__IsImplementedBy_InCompiledCode_Text();
    public static string get_UnableToAddClassBefore__Text();
    public static string get_InvalidFile_Text();
    public static string get_Line_Column__Text();
    public static string get_InThisFileLn__Text();
    public static string get_In_Ln__Text();
    public static string get_CanTFindFile_Text();
    public static string get_CanTFindDocument_Text();
    public static string get_NavigationFailed_Text();
    public static string get_PresentationFailed_Text();
    public static string get_DoNotShow_Text();
    public static string get_Hint_Text();
    public static string get_Suggestion_Text();
    public static string get_Warning_Text();
    public static string get_Error_Text();
    public static string get_Usage__Text();
    public static string get_UsageOf__Text();
    public static string get_SearchScope_Solution_Text();
    public static string get_SearchScope_Libraries_Text();
    public static string get_SearchScope_SolutionAndLibraries_Text();
    public static string get_SearchScope_CurrentProject_Text();
    public static string get_SearchScope_CurrentFile_Text();
    public static string get_SearchScope_Empty_Text();
    public static string get_AddFiles_Button_Text();
    public static string get_AddFolders_Button_Text();
    public static string get_Remove_Button_Text();
    public static string get_AccessRightsForWillBeExtended_DescriptionText();
    public static string get_CannotBeDeletedSafely_DescriptionText();
    public static string get_CannotBeInlined_DescriptionText();
    public static string get_CannotBeRemoved_DescriptionText();
    public static string get_CannotBeUpdatedCorrectly_DescriptionText();
    public static string get_ConflictWith_DescriptionText();
    public static string get_Out_DescriptionText();
    public static string get_Ref_DescriptionText();
    public static string get_ShowGoogleTranslate_DescriptionText();
    public static string get_ShowRelated_DescriptionText();
    public static string get_UsedBy_DescriptionText();
    public static string get_Used_DescriptionText();
    public static string get_WillBeRemoved_DescriptionText();
    public static string get_WillNotBeAccessible_DescriptionText();
    public static string get_WithTheSameNameAlreadyExists_DescriptionText();
    public static string get__Description_Text();
    public static string get_AccordingToVisualStudioOption_Description_Text();
    public static string get_Alphabetically_Description_Text();
    public static string get_AlwaysSearchForConcreteGenericType_Description_Text();
    public static string get_AlwaysSearchForOpenGenericTypes_Description_Text();
    public static string get_AssertResultFromFindUsagesWasSuggestedBySWAToSearchIn_Description_Text();
    public static string get_ByRelevance_Description_Text();
    public static string get_Disabled_Description_Text();
    public static string get_DisableFindUsagesOptimization_Description_Text();
    public static string get_DisplayAll_Description_Text();
    public static string get_DisplayNotNullAndCanBeNullOnly_Description_Text();
    public static string get_DoNotDisplay_Description_Text();
    public static string get_DoNothing_Description_Text();
    public static string get_Edit_Description_Text();
    public static string get_Error_Description_Text();
    public static string get_ExpectedType_Description_Text();
    public static string get_ExpectedTypeAndInheritors_Description_Text();
    public static string get_Indent_Description_Text();
    public static string get_Information_Description_Text();
    public static string get_InsertTabSpaceOrIncreaseIndentation_Description_Text();
    public static string get_IterateUsages_Description_Text();
    public static string get_LocalVariables_Description_Text();
    public static string get_LocalVariablesFieldsAndProperties_Description_Text();
    public static string get_LocalVariablesAndFields_Description_Text();
    public static string get_None_Description_Text();
    public static string get_OnEnterAfterAnOpeningBrace_Description_Text();
    public static string get_OnTypingAnOpeningBrace_Description_Text();
    public static string get_Question_Description_Text();
    public static string get_Reformat_Description_Text();
    public static string get_ReindentAdjustIndentation_Description_Text();
    public static string get_SearchOnlyInFilesFromSWA_Description_Text();
    public static string get_ShowNavigateToMenu_Description_Text();
    public static string get_ShowUsagesOfSymbolPopup_Description_Text();
    public static string get_ShowDisambiguationPopup_Description_Text();
    public static string get_ShowHintForFirstInvocationInSequence_Description_Text();
    public static string get_ShowHintForLastInvocationInSequence_Description_Text();
    public static string get_ToNearestIndentPosition_Description_Text();
    public static string get_ToProperIndentPosition_Description_Text();
    public static string get_UseVisualStudioHandler_Description_Text();
    public static string get_Warning_Description_Text();
    public static string get_TheSettingIsOverriddenIn_RNwithAValue_Text();
    public static string get_Browse_Text();
    public static string get_InlayHints_Text();
    public static string get_ParameterNamesForArgumentsTypeInfoFor_Text();
    public static string get_NoPreview_Text();
    public static string get_AllowAlignmentEvenIfConstructIsLocated_Text();
    public static string get_GroupBy_Label_Text();
    public static string get_GroupUsages_Tooltip_Text();
    public static string get_ReadAccess_Occurence_Kind_Text();
    public static string get_WriteAccess_Occurence_Kind_Text();
    public static string get_ReadWriteAccess_Occurence_Kind_Text();
    public static string get_Invocation_Occurence_Kind_Text();
    public static string get_NameCapture_Occurence_Kind_Text();
    public static string get_DocumentationReference_Occurence_Kind_Text();
    public static string get_AttributeReference_Occurence_Kind_Text();
    public static string get_VisualBasicHandlesClause_Occurence_Kind_Text();
    public static string get_InterfaceQualification_Occurence_Kind_Text();
    public static string get_BaseType_Occurence_Kind_Text();
    public static string get_IndirectUsage_Occurence_Kind_Text();
    public static string get_DirectUsage_Occurence_Kind_Text();
    public static string get_UnitTest_Occurence_Kind_Text();
    public static string get_BaseMethodCall_Occurence_Kind_Text();
    public static string get_LocalVariableDeclaration_Occurence_Kind_Text();
    public static string get_FieldDeclaration_Occurence_Kind_Text();
    public static string get_NewInstanceCreation_Occurence_Kind_Text();
    public static string get_NewArrayCreation_Occurence_Kind_Text();
    public static string get_InComment_Occurence_Kind_Text();
    public static string get_InString_Occurence_Kind_Text();
    public static string get_InXMLDoc_Occurence_Kind_Text();
    public static string get_Initializer_Occurence_Kind_Text();
    public static string get_Other_Occurence_Kind_Text();
    public static string get_SourceGeneratedFiles_Text();
    public static string get_N_Items_Text();
    public static string get_One_Item_Text();
    public static string get_RelevantStackTraceAutoOpenedFromThe_Text();
    public static string get_ReSharperNoticedTheClipboardContains_Text();
    public static string get_TabShiftTabCanMoveSelectionBetweenCode_Text();
    public static string get_YouVeJustUsedReSharperStructuralNavigation_Text();
    public static string get_For_KindName_UsageScope_Text();
    public static string get_ApplySmartPasteBehaviorPopupContextAction_Description();
    public static string get_ApplySmartPasteBehaviorPopupContextAction_Name();
    public static string get_UserSpecifiedSourceFilePropertiesIgnore_Text();
    public static string get_UserSpecifiedSourceFilePropertiesNonUser_Text();
    public static string get_UserSpecifiedSourceFilePropertiesForceUser_Text();
    public static string get_TabsAndIndents_Text();
    public static string get_AnalyzesCodeAndGuessesTypeOfElementOfACollectionMacroDefinition_Description();
    public static string get_AnalyzesCodeAndGuessesTypeOfElementOfACollectionMacroDefinition_LongDescription();
    public static string get_CapitalizesStringValueIEChangesCaseOfTheFirstLetterToUpperMacroDefinition_Description();
    public static string get_CapitalizesStringValueIEChangesCaseOfTheFirstLetterToUpperMacroDefinition_LongDescription();
    public static string get_ChangesSpacesToIEDoSomethingUsefulIntoDoSomethingUsefulMacroDefinition_Description();
    public static string get_ChangesSpacesToIEDoSomethingUsefulIntoDoSomethingUsefulMacroDefinition_LongDescription();
    public static string get_DisplaysTheSpecifiedListOfValuesMacroDefinition_Description();
    public static string get_DisplaysTheSpecifiedListOfValuesMacroDefinition_LongDescription();
    public static string get_EvaluatesCurrentDateMacroDefinition_Description();
    public static string get_EvaluatesCurrentDateMacroDefinition_LongDescription();
    public static string get_EvaluatesCurrentDateTimeMacroDefinition_Description();
    public static string get_EvaluatesCurrentDateTimeMacroDefinition_LongDescription();
    public static string get_EvaluatesCurrentFileNameMacroDefinition_Description();
    public static string get_EvaluatesCurrentFileNameMacroDefinition_LongDescription();
    public static string get_EvaluatesCurrentProjectNameMacroDefinition_Description();
    public static string get_EvaluatesCurrentProjectNameMacroDefinition_LongDescription();
    public static string get_EvaluatesCurrentSolutionNameMacroDefinition_Description();
    public static string get_EvaluatesCurrentSolutionNameMacroDefinition_LongDescription();
    public static string get_EvaluatesCurrentUserNameMacroDefinition_Description();
    public static string get_EvaluatesCurrentUserNameMacroDefinition_LongDescription();
    public static string get_EvaluatesFileCreationDateAndTimeMacroDefinition_Description();
    public static string get_EvaluatesFileCreationDateAndTimeMacroDefinition_LongDescription();
    public static string get_EvaluatesFullNameOfTheCurrentUserMacroDefinition_Description();
    public static string get_EvaluatesFullNameOfTheCurrentUserMacroDefinition_LongDescription();
    public static string get_EvaluatesNameOfTheContainingNamespaceMacroDefinition_Description();
    public static string get_EvaluatesNameOfTheContainingNamespaceMacroDefinition_LongDescription();
    public static string get_EvaluatesOutputAssemblyNameForTheCurrentProjectMacroDefinition_Description();
    public static string get_EvaluatesOutputAssemblyNameForTheCurrentProjectMacroDefinition_LongDescription();
    public static string get_EvaluatesToCurrentTextualClipboardContentMacroDefinition_Description();
    public static string get_EvaluatesToCurrentTextualClipboardContentMacroDefinition_LongDescription();
    public static string get_EvaluatesToNumberOfTheLineMacroIsEvaluatedAtMacroDefinition_Description();
    public static string get_EvaluatesToNumberOfTheLineMacroIsEvaluatedAtMacroDefinition_LongDescription();
    public static string get_EvaluatesToReferenceOfTheMostInnerContainingTypeMacroDefinition_Description();
    public static string get_EvaluatesToReferenceOfTheMostInnerContainingTypeMacroDefinition_LongDescription();
    public static string get_EvaluatesToShortNameOfTheMostInnerContainingTypeMacroDefinition_Description();
    public static string get_EvaluatesToShortNameOfTheMostInnerContainingTypeMacroDefinition_LongDescription();
    public static string get_EvaluatesToShortNameOfTheMostInnerContainingTypeMemberEGMethodOrPropertyMacroDefinition_Description();
    public static string get_EvaluatesToShortNameOfTheMostInnerContainingTypeMemberEGMethodOrPropertyMacroDefinition_LongDescription();
    public static string get_EvaluatesToTheSelectedTypeNameMacroDefinition_Description();
    public static string get_EvaluatesToTheSelectedTypeNameMacroDefinition_LongDescription();
    public static string get_EvaluatesToTheSpecifiedConstantValueMacroDefinition_Description();
    public static string get_EvaluatesToTheSpecifiedConstantValueMacroDefinition_LongDescription();
    public static string get_GeneratesNewGloballyUniqueIdentifierGUIDMacroDefinition_Description();
    public static string get_GeneratesNewGloballyUniqueIdentifierGUIDMacroDefinition_LongDescription();
    public static string get_GetsDefaultNamespaceForTheCurrentFileMacroDefinition_Description();
    public static string get_GetsDefaultNamespaceForTheCurrentFileMacroDefinition_LongDescription();
    public static string get_GetsDefaultNamespaceForTheCurrentProjectMacroDefinition_Description();
    public static string get_GetsDefaultNamespaceForTheCurrentProjectMacroDefinition_LongDescription();
    public static string get_GuessElementTypeIfACollectionTypeIsExpectedAtThisPointMacroDefinition_Description();
    public static string get_GuessElementTypeIfACollectionTypeIsExpectedAtThisPointMacroDefinition_LongDescription();
    public static string get_GuessTypeExpectedAtThisPointMacroDefinition_Description();
    public static string get_GuessTypeExpectedAtThisPointMacroDefinition_LongDescription();
    public static string get_ProvidesListOfItemsDescribingCurrentContextThisIncludesFileNameMacroDefinition_Description();
    public static string get_ProvidesListOfItemsDescribingCurrentContextThisIncludesFileNameMacroDefinition_LongDescription();
    public static string get_ShowBasicCodeCompletionListAtThePointWhereTheVariableIsEvaluatedMacroDefinition_Description();
    public static string get_ShowBasicCodeCompletionListAtThePointWhereTheVariableIsEvaluatedMacroDefinition_LongDescription();
    public static string get_ShowSmartCodeCompletionListAtThePointWhereTheVariableIsEvaluatedMacroDefinition_Description();
    public static string get_ShowSmartCodeCompletionListAtThePointWhereTheVariableIsEvaluatedMacroDefinition_LongDescription();
    public static string get_ShowTypeCompletionListAtThePointWhereTheVariableIsEvaluatedMacroDefinition_Description();
    public static string get_ShowTypeCompletionListAtThePointWhereTheVariableIsEvaluatedMacroDefinition_LongDescription();
    public static string get_SuggestsNonUsedNameWhichCanBeUsedForAnIndexVariableAtTheEvaluationPointMacroDefinition_Description();
    public static string get_SuggestsNonUsedNameWhichCanBeUsedForAnIndexVariableAtTheEvaluationPointMacroDefinition_LongDescription();
    public static string get_SuggestsParametersOfTheSpecifiedTypeMacroDefinition_Description();
    public static string get_SuggestsParametersOfTheSpecifiedTypeMacroDefinition_LongDescription();
    public static string get_SuggestsVariablesOfTheSpecifiedTypeMacroDefinition_Description();
    public static string get_SuggestsVariablesOfTheSpecifiedTypeMacroDefinition_LongDescription();
    public static string get_SuggestsVariableWhichTypeIsArrayTypeMacroDefinition_Description();
    public static string get_SuggestsVariableWhichTypeIsArrayTypeMacroDefinition_LongDescription();
    public static string get_SuggestsVisibleVariableThatCanBeEnumeratedThatIsMacroDefinition_Description();
    public static string get_SuggestsVisibleVariableThatCanBeEnumeratedThatIsMacroDefinition_LongDescription();
    public static string get_SuggestTypeForANewVariableDeclaredInTheTemplateMacroDefinition_Description();
    public static string get_SuggestTypeForANewVariableDeclaredInTheTemplateMacroDefinition_LongDescription();
    public static string get_WhenExecutedInVariableDeclarationWhereVariableNameShouldStandMacroDefinition_Description();
    public static string get_WhenExecutedInVariableDeclarationWhereVariableNameShouldStandMacroDefinition_LongDescription();
    public static string get_DecapitalizesStringValueIEChangesCaseOfTheFirstLetterToLowerMacroDefinition_Description();
    public static string get_DecapitalizesStringValueIEChangesCaseOfTheFirstLetterToLowerMacroDefinition_LongDescription();
    public static string get_EvaluatesCurrentFileNameInUpperCaseWithAllNonAlphanumericReplacedWithUnderscoresMacroDefinition_Description();
    public static string get_EvaluatesCurrentFileNameInUpperCaseWithAllNonAlphanumericReplacedWithUnderscoresMacroDefinition_LongDescription();
    public static string get_EvaluatesCurrentFileNameWithoutExtensionMacroDefinition_Description();
    public static string get_EvaluatesCurrentFileNameWithoutExtensionMacroDefinition_LongDescription();
    public static string get_EvaluatesCurrentFileNameWithoutExtensionWithAllNonAlphanumericReplacedWithUnderscoresMacroDefinition_Description();
    public static string get_EvaluatesCurrentFileNameWithoutExtensionWithAllNonAlphanumericReplacedWithUnderscoresMacroDefinition_LongDescription();
    public static string get_EvaluatesPrimaryFileNameWithoutExtensionWithAllNonAlphanumericReplacedWithUnderscoresMacroDefinition_Description();
    public static string get_EvaluatesPrimaryFileNameWithoutExtensionWithAllNonAlphanumericReplacedWithUnderscoresMacroDefinition_LongDescription();
    public static string get_RedundanciesInCode_Text();
    public static string get_LanguageUsageOpportunities_Text();
    public static string get_CodeNotification_Text();
    public static string get_CommonPracticesAndCodeImprovements_Text();
    public static string get_ConstraintsViolations_Text();
    public static string get_PotentialCodeQualityIssues_Text();
    public static string get_RedundanciesInSymbolDeclarations_Text();
    public static string get_CompilerWarnings_Text();
    public static string get_NUnit_Text();
    public static string get_Xunit_Text();
    public static string get_NotRunnableTests_Text();
    public static string get_SyntaxStyle_Text();
    public static string get_Formatting_Text();
    public static string get_StructuralSearchPatterns_Text();
    public static string get_StrictModeViolations_Text();
    public static string get_UnrealEngine_Text();
    public static string get_UnrealBuildSystem_Text();
    public static string get_UnrealHeaderTool_Text();
    public static string get_NETCore_Text();
    public static string get_Security_Text();
    public static string get_HideForThe_Operator_Text();
    public static string get_TypeConversionHintsExclusionListSettingDescription();
    public static string get_In_RelatedFile_Text();
    public static string get__InAttribute_Text();
    public static string get__ElementIn_Container_Text();
    public static string get_Parameter_Of__Text();
    public static string get_Parameter__Text();
    public static string get_FileNotFound_Text();
    public static string get_NotDotNetAssemblyFile_Text();
    public static string get_InvalidPEHeaderRrIOError_Text();
    public static string get_OneOrMultipleItemsDoesnTExist_Text();
    public static string get_ReferencedCode_Text();
    public static string get_ReferencedCodeIn__Text();
    public static string get_ReferencedCodeIn__TitleMoreThanOneTargets();
    public static string get_EmptySearch_Text();
    public static string get_AssemblyReferencePresentationText();
    public static string get_EntityFramework_Text();
    public static string get_RiderExceptionBreakpointInsertionPoint_Text();
    public static string get_Method_Highlighter_Display_Name();
    public static string get_Type_Highlighter_Display_Name();
    public static string get_Hyperlink_Highlighter_Display_Name();
    public static string get_SuspiciousText_Highlighter_Display_Name();
    public static string get_Path_Highlighter_Display_Name();
    public static string get_DumpNonlocalizedTemplates();
    public static string get_CompiledElementXmlDocLinkAppender_AppendExternalDocumentationLink_();
    public static string get_CompiledElementXmlDocLinkAppender_AppendExternalDocumentationLink_On();
    public static string get_ReSharperTextToDeleteInConfigFile_Text();
    public static string get_ReSharperTextToInsertInConfigFile_Text();
    public static string get_ReSharperConfigFileConflictWarning_Text();
    public static string get_Other_Highlighter_Group_Text();
    public static string get_ActiveInProject_Text();
    public static string get_InactiveInProject_Text();
    public static string get_ProjectIndependent_Text();
    public static string get_DeferredCacheProgressBar_Start_Calculating_asset_index();
    public static string get_DeferredCacheProgressBar_Start_Processing_assets__Of__Text();
    public static string get_BreakpointPresentationProperty_Text();
    public static string get_BreakpointPresentationLocalFunction_Text();
    public static string get_BreakpointPresentationMethod_Text();
    public static string get_BreakpointPresentationConstructor_Text();
    public static string get_BreakpointPresentationLambdaExpression_Text();
    public static string get_StringComparison_Text();
    public static string get_ComparerNamePrefix_Text();
    public static string get_EventHandlerPrefix_Text();
    public static string get_UseSystemHashCodeToImplementGetHashCode_Text();
    public static string get_ExactlyTheSameTypeAsThis_Text();
    public static string get_ExactlyOfType__Text();
    public static string get_EqualOrSubtypeOf__Text();
    public static string get_Ordinal_Text();
    public static string get_OrdinalIgnoreCase_Text();
    public static string get_CurrentCulture_Text();
    public static string get_CurrentCultureIgnoreCase_Text();
    public static string get_InvariantCulture_Text();
    public static string get_InvariantCultureIgnoreCase_Text();
    public static string get_CqrsValidationGeneralSettingsTitle();
    public static string get_CqsSettingsTitle();
    public static string get_CqrsSettingsTitle();
    public static string get_EnableCqrsDescription();
    public static string get_WhetherToSearchCqrsByNameDescription();
    public static string get_WhetherToSearchCqrsByNameTitle();
    public static string get_HighlightMarksDescription();
    public static string get_WhetherToSearchCqrsByAnnotationTitle();
    public static string get_EnabledCqrsNamingRecommendationDescription();
    public static string get_EnabledWarningOnUsageDescription();
    public static string get_EnableDebugMarksHighlightingDescription();
    public static string get_EnableCqrsDeclarationRecommendationsDescription();
    public static string get_EnableBothContextAnalysisTitle();
    public static string get_EnableBothContextAnalysisDescription();
    public static string get_EnabledBothContextOnDeclarationsDescription();
    public static string get_CqrsRequiresSwaMainText();
    public static string get_CqrsRequiresSwaButtonText();
    public static string get_CustomCqrsSuffixSettingsDescription();
    public static string get_CqrsCustomSuffixesComment();
    public static string get_CqrsSettingsKeyDescription();
    public static string get_CqrsCommandSuffixDescription();
    public static string get_CqrsQuerySuffixDescription();
    public static string get_CqrsSuffixValidationError();
    public static string get_CqrsEqualSuffixesError();
    public static string get_CqrsCommandHandlerSuffixDescription();
    public static string get_CqrsQueryHandlerSuffixDescription();
    public static string get_CqrsCommandMethodSuffixDescription();
    public static string get_CqrsQueryMethodSuffixDescription();
    public static string get_GenerateOption_ExposeViaStaticProperty_Text();
    public static string get_GenerateOption_FieldsCanBeNull_Text();
    public static string get_GenerateOption_AllowChildClassesToOverrideDisposePatternMethods_Text();
    public static string get_GenerateOption_ClassHasUnmanagedResources_Text();
    public static string get_GenerateOption_OverloadEqualityOperators_Text();
    public static string get_GenerateOption_IMplementIEquatableTInterface_Text();
    public static string get_GenerateOption_OverloadRelationalOperators_Text();
    public static string get_GenerateOption_ImplementIComparableInterface_Text();
    public static string get_GenerateOption_ComparandTypeCheck_Text();
    public static string get_GenerateOption_Replace_Text();
    public static string get_GenerateOption_Skip_Text();
    public static string get_GenerateOption_SideBySide_Text();
    public static string get_GenerateOption__AlreadyExists_Text();
    public static string get_GenerateOption__AlreadyExist_Plural_Text();
    public static string get_GenerateOption_StringComparison_Text();
    public static string get_DefaultWrapperForNamingRule();
    public static string get_ToggleIntellisenseSupportedRangesHighlightingAction_Text();
    public static string get_HideIntellisenseSupportedRanges_Text();
    public static string get_ShowIntellisenseSupportedRanges_Text();
    public static string get_ClickToNavigate_Text();
    public static string get_GoToFileMembers_Text();
    public static string get_ShowFileStructure_Text();
    public static string get_HideFor_OperatorDeclaration_Text();
    public static string get_GenerateOption_DisposableInterface_Text();
    public static string get_DisposableInterface_BothInterfaces_Text();
    public static string get_ReleaseManagedResourcesHere_TodoText();
    public static string get_ReleaseUnmanagedResourcesHere_TodoText();
    public static string get_CopyColorValue_Action_Text();
    public static string get_ColorUsage_Text();
    public static string get_DataFlow_Text();
    public static string get_StacktraceHighlighterGroup();
    public static string get_EntityFrameworkEntityAdornment_ContextMenu_ShowERDAction_Text();
    public static string get_EntityFrameworkEntityAdornment_ContextMenu_Title_Text();
    public static string get_EntityFrameworkEntityAdornment_Description_Text();
    public static string get_EntityFrameworkEntityAdornment_Text();
    public static string get_EntityFrameworkEntityAdornment_ContextMenu_TurnOffAdornment_Text();
    public static string get_OverridenBy__Text();
    public static string get_InactiveCodeUsage_Text_Section();
    public static string get_InactiveCodeUsages_Text();
    public static string get_InactiveCodeUsage_Text();
    public static string get_SolutionWideInspectionsDisplayName_Text();
    public static string get_SolutionWideInspectionsDescription_Text();
    public static string get_CommonContextActionGroupName_Text();
    public static string get_XmlDocSection_Summary_Text();
    public static string get_XmlDocSection_Value_Text();
    public static string get_XmlDocSection_Params_Text();
    public static string get_XmlDocSection_TypeParams_Text();
    public static string get_XmlDocSection_Returns_Text();
    public static string get_XmlDocSection_Attention_Text();
    public static string get_XmlDocSection_Authors_Text();
    public static string get_XmlDocSection_RetValues_Text();
    public static string get_XmlDocSection_Exceptions_Text();
    public static string get_XmlDocSection_Permission_Text();
    public static string get_XmlDocSection_Remarks_Text();
    public static string get_XmlDocSection_Example_Text();
    public static string get_XmlDocSection_SeeAlso_Text();
    public static string get_XmlDocSection_Permissions_Text();
    public static string get_XmlDocSection_Compatibility_Text();
    public static string get_XmlDocSection_Footer_Text();
    public static string get_NoSearchResultsAvailable_Text();
    public static string get_NoInspectionResults_Text();
    public static string get_DumpPsiModulesActionText();
    public static string get_ToRunAnInspection_Text();
    public static string get_NoStackTracesAvailable_Text();
    public static string get_StackTrace_Text();
    public static string get_DumpPSISourceFilePropertiesActionText();
    public static string get_SqlSettingsDescription();
    public static string get_FilesAndFoldersSqlDialectsDescription();
    public static string get_GlobalSqlDialectSettingName();
    public static string get_SolutionSqlDialectSettingName();
    public static string get_GlobalSqlDialectSettingLabel();
    public static string get_SolutionSqlDialectSettingLabel();
    public static string get_ShowSyntaxErrorsSqlSetting();
    public static string get_ShowCodeInspectionsSqlSetting();
    public static string get_HighlightSyntaxSqlSetting();
    public static string get_OverrideVisualStudioSyntaxSqlSetting();
    public static string get_HideVisualStudioCodeInspectionsSqlSetting();
    public static string get_FilesAndFoldersSqlDialectsTable_Path();
    public static string get_FilesAndFoldersSqlDialectsTable_Dialect();
    public static string get_SqlGeneralSettingsPageName();
    public static string get_SqlDialectsSettingsPageName();
    public static string get_ShowDialectNotSelectedWarningSetting();
}
public class JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons : object {
}
public class JetBrains.ReSharper.Feature.Services.Resources.TreeProgressThemedIcons : object {
}
[PsiComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Resources.UsagesPublisherStub : object {
    public virtual void Subscribe(Lifetime lifetime, IEnumerable`1<IDeclaredElement> relatedDeclaredElements, IProperty`1<bool> property);
    public virtual bool IsSubscribed(IProperty`1<bool> property);
}
public abstract class JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.DotSelection`1 : SelectedRangeBase`1<TFile> {
    protected bool SelectBetterToken;
    protected bool UseCamelHumps;
    private bool myAppendInjectedPsi;
    public ISelectedRange Parent { get; }
    protected DotSelection`1(TFile fileNode, TreeOffset offset, bool selectBetterToken, bool useCamelHumps, bool appendInjectedPsi);
    public virtual ISelectedRange get_Parent();
    protected virtual bool IsPrevTokenBetter(ITokenNode prevToken, ITokenNode tokenNode);
    protected abstract virtual ISelectedRange GetParentInternal(ITokenNode tokenNode);
    protected abstract virtual ISelectedRange CreateTokenPartSelection(ITokenNode tokenNode, TreeTextRange treeTextRange);
    protected abstract virtual ISelectedRange CreateTreeNodeSelection(ITokenNode tokenNode);
    protected abstract virtual bool IsWordToken(ITokenNode token);
    protected abstract virtual bool IsLiteralToken(ITokenNode token);
    protected abstract virtual bool IsSpaceToken(ITokenNode token);
    protected abstract virtual bool IsNewLineToken(ITokenNode token);
}
[ActionAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "EXtendSelectionActionText")]
[VsOverrideActionAttribute("({1496A755-94DE-11D0-8C3F-00C04FC2AAE2}:90)")]
[VsOverrideActionAttribute("({1496A755-94DE-11D0-8C3F-00C04FC2AAE2}:940)")]
public class JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.ExtendSelectionAction : object {
    public sealed virtual bool ShouldFallBack(IDataContext context);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
    private static bool ExtractTextControlAndSourceFile(IDataContext context, ITextControl& textControl, IPsiSourceFile& psiSourceFile);
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.ExtendToTheWholeLinePolicy : Enum {
    public int value__;
    public static ExtendToTheWholeLinePolicy DO_NOT_EXTEND;
    public static ExtendToTheWholeLinePolicy EXTEND_LEFT_SPACES;
    public static ExtendToTheWholeLinePolicy EXTEND_RIGHT_SPACES;
    public static ExtendToTheWholeLinePolicy EXTEND_IF_ALL_SPACES_AROUND;
    public static ExtendToTheWholeLinePolicy EXTEND_TAIL_EVEN_IF_NO_SPACES_BEFORE;
    public static ExtendToTheWholeLinePolicy EXTEND_HEAD_EVEN_IF_NO_SPACES_AFTER;
}
public interface JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.IDotSelectionEmbracingConstructProvider {
    public abstract virtual ISelectedRange GetSelectedRange(ITextControl textControl, IPsiSourceFile sourceFile, DocumentOffset documentOffset);
}
public interface JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.ISelectedRange {
    public DocumentRange Range { get; }
    [CanBeNullAttribute]
public ISelectedRange Parent { get; }
    public ExtendToTheWholeLinePolicy ExtendToWholeLine { get; }
    public abstract virtual DocumentRange get_Range();
    public abstract virtual ISelectedRange get_Parent();
    public abstract virtual ExtendToTheWholeLinePolicy get_ExtendToWholeLine();
    [CanBeNullAttribute]
public abstract virtual ITreeRange TryGetTreeRange();
}
public interface JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.ISelectedTreeRange {
    public TreeTextRange TreeRange { get; }
    public abstract virtual TreeTextRange get_TreeRange();
}
public interface JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.ISelectEmbracingConstructProvider {
    public abstract virtual bool IsAvailable(IPsiSourceFile sourceFile);
    public abstract virtual ISelectedRange GetSelectedRange(IPsiSourceFile sourceFile, DocumentRange documentRange);
}
public class JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.NestedPsiWrapperSelection`1 : object {
    [NotNullAttribute]
private TFile myFileNode;
    [NotNullAttribute]
private IFile myNestedPsiFile;
    private ITreeNode myPsiContainer;
    [NotNullAttribute]
private ISelectedRange myNestedSelectedRange;
    [NotNullAttribute]
private Func`3<TFile, ITreeNode, ISelectedRange> myCreateTreeNodeSelection;
    public ExtendToTheWholeLinePolicy ExtendToWholeLine { get; }
    public TreeTextRange TreeRange { get; }
    public DocumentRange Range { get; }
    public ISelectedRange Parent { get; }
    public NestedPsiWrapperSelection`1(TFile fileNode, ITreeNode psiContainer, IFile nestedPsiFile, ISelectedRange nestedSelectedRange, Func`3<TFile, ITreeNode, ISelectedRange> createTreeNodeSelection);
    public sealed virtual ExtendToTheWholeLinePolicy get_ExtendToWholeLine();
    public sealed virtual TreeTextRange get_TreeRange();
    public sealed virtual DocumentRange get_Range();
    public sealed virtual ISelectedRange get_Parent();
    public sealed virtual ITreeRange TryGetTreeRange();
}
public abstract class JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.SelectedRangeBase : object {
    [CompilerGeneratedAttribute]
private IFile <FileNode>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <Range>k__BackingField;
    protected IFile FileNode { get; }
    public ISelectedRange Parent { get; }
    public DocumentRange Range { get; }
    public ExtendToTheWholeLinePolicy ExtendToWholeLine { get; }
    protected SelectedRangeBase(IFile fileNode, DocumentRange documentRange);
    [CompilerGeneratedAttribute]
protected IFile get_FileNode();
    public abstract virtual ISelectedRange get_Parent();
    [CompilerGeneratedAttribute]
public virtual DocumentRange get_Range();
    public virtual ExtendToTheWholeLinePolicy get_ExtendToWholeLine();
    public virtual ITreeRange TryGetTreeRange();
}
public abstract class JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.SelectedRangeBase`1 : SelectedRangeBase {
    protected TFile FileNode { get; }
    protected SelectedRangeBase`1(TFile fileNode, DocumentRange documentRange);
    protected TFile get_FileNode();
}
public static class JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.SelectEmbracingConstructAlgorithm : object {
    public static ValueTuple`2<DocumentRange, ISelectedRange> Execute(IPsiSourceFile sourceFile, DocumentRange currentSelectedRange, ISelectEmbracingConstructProvider provider);
    public static DocumentRange ExtendSelectionToWholeLines(DocumentRange documentRange, ExtendToTheWholeLinePolicy extensionPolicy);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.SelectEmbracingConstructTracker : object {
    [NotNullAttribute]
private static Key`1<SelectionController> KEY;
    private static SelectEmbracingConstructTracker();
    public void ExtendSelection(ITextControl textControl, ISolution solution, DocumentRange rangeToSelect, ISelectedRange selectionElement);
    public void ShrinkSelection(ITextControl textControl);
    [PureAttribute]
public bool CanShrinkSelection(ITextControl textControl);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.SelectEmbracingConstructUtil : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ISelectEmbracingConstructProvider TryGetSelectEmbracingConstructProvider(ILanguageManager languageManager, IPsiSourceFile sourceFile, PsiLanguageType language);
    public static bool NewNodesBetterThenOldNodes(ITreeNode newFirst, ITreeNode newLast, ITreeNode first, ITreeNode last);
    public static Pair`2<ITreeNode, ITreeNode> TryFindCommentsRange(ITreeNode comment, Func`2<ITreeNode, bool> isWhitespace, Func`2<ITreeNode, bool> isNewLine);
    public static Pair`2<ITreeNode, ITreeNode> TryFindRangeSeparatedByEmptyLines(ITreeNode first, ITreeNode last, Func`2<ITreeNode, bool> isExpectedNode, Func`2<ITreeNode, bool> isExpectedSeparator, Func`2<ITreeNode, bool> isWhitespace, Func`2<ITreeNode, bool> isNewLine);
    public static Pair`2<ITreeNode, ITreeNode> TryBuildNodeWithSeparator(ITreeNode node, Func`2<ITreeNode, bool> isExpectedSeparator, Func`2<ITreeNode, bool> isWhitespace, Func`2<ITreeNode, bool> isNewLine, Func`2<ITreeNode, bool> isComment);
    private static Pair`2<ITreeNode, ITreeNode> TryAddFollowingSeparator(ITreeNode firstNode, Func`2<ITreeNode, bool> isExpectedSeparator, Func`2<ITreeNode, bool> isWhitespace, Func`2<ITreeNode, bool> isNewLine, Func`2<ITreeNode, bool> isComment);
    private static Pair`2<ITreeNode, ITreeNode> TryAddNodePrecedingSeparator(ITreeNode lastNode, Func`2<ITreeNode, bool> isExpectedSeparator, Func`2<ITreeNode, bool> isWhitespace, Func`2<ITreeNode, bool> isNewLine, Func`2<ITreeNode, bool> isComment);
    public static Pair`2<ITreeNode, ITreeNode> TryFindRangeInsideBraces(ITreeNode lBrace, ITreeNode rBrace, Func`2<ITreeNode, bool> isWhitespace);
    public static Pair`2<ITreeNode, ITreeNode> TryFindAllSiblings(ITreeNode first, ITreeNode last, Func`2<ITreeNode, bool> isExpectedNode, Func`2<ITreeNode, bool> isDelimiter, Func`2<ITreeNode, bool> isWhitespace);
    public static Pair`2<ITreeNode, ITreeNode> TryFindAllNonWhitespaceChildren(ITreeNode parent, Func`2<ITreeNode, bool> isWhitespace);
}
[ActionAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "SHrinkSelectionActionText")]
public class JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.ShrinkSelectionAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public abstract class JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.TokenPartSelection`1 : SelectedRangeBase`1<TFile> {
    [CompilerGeneratedAttribute]
private ITokenNode <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeTextRange <TreeRange>k__BackingField;
    public ITokenNode Token { get; }
    public TreeTextRange TreeRange { get; }
    public ExtendToTheWholeLinePolicy ExtendToWholeLine { get; }
    protected TokenPartSelection`1(TFile fileNode, TreeTextRange treeTextRange, ITokenNode token);
    [CompilerGeneratedAttribute]
public ITokenNode get_Token();
    [CompilerGeneratedAttribute]
public sealed virtual TreeTextRange get_TreeRange();
    public virtual ITreeRange TryGetTreeRange();
    public virtual ExtendToTheWholeLinePolicy get_ExtendToWholeLine();
    private static TreeTextRange GetParentRange(StringSlice text, TreeTextRange range, Predicate`1<char> isAcceptableChar);
    private static bool ShouldExtendRange(StringSlice text, TreeTextRange range, Predicate`1<char> isAcceptableChar);
    private static TreeTextRange ExtendRangeToTheLeft(StringSlice text, TreeTextRange range, Predicate`1<char> isAcceptableChar);
    private static TreeTextRange ExtendRangeToTheRight(StringSlice text, TreeTextRange range, Predicate`1<char> isAcceptableChar);
    public static TreeTextRange GetLocalParent(StringSlice text, TreeTextRange range);
}
public abstract class JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.TreeNodeSelection`1 : SelectedRangeBase`1<TFile> {
    [CompilerGeneratedAttribute]
private ITreeNode <TreeNode>k__BackingField;
    protected ITreeNode TreeNode { get; }
    public TreeTextRange TreeRange { get; }
    protected TreeNodeSelection`1(TFile fileNode, ITreeNode node);
    [CompilerGeneratedAttribute]
protected ITreeNode get_TreeNode();
    public virtual TreeTextRange get_TreeRange();
    public virtual ITreeRange TryGetTreeRange();
}
public abstract class JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.TreeRangeSelection`1 : SelectedRangeBase`1<TFile> {
    private Func`2<ITreeNode, TreeOffset> myFirstOffsetFunc;
    private Func`2<ITreeNode, TreeOffset> myLastOffsetFunc;
    [CompilerGeneratedAttribute]
private ITreeNode <FirstNode>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNode <LastNode>k__BackingField;
    protected ITreeNode FirstNode { get; }
    protected ITreeNode LastNode { get; }
    public TreeTextRange TreeRange { get; }
    protected TreeRangeSelection`1(TFile fileNode, ITreeNode first, ITreeNode last);
    protected TreeRangeSelection`1(TFile fileNode, ITreeNode first, ITreeNode last, Func`2<ITreeNode, TreeOffset> firstOffsetFunc, Func`2<ITreeNode, TreeOffset> lastOffsetFunc);
    [CompilerGeneratedAttribute]
protected ITreeNode get_FirstNode();
    [CompilerGeneratedAttribute]
protected ITreeNode get_LastNode();
    public virtual TreeTextRange get_TreeRange();
    public virtual ITreeRange TryGetTreeRange();
}
public interface JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.WithSecondaryPsi.ISelectEmbracingConstructProviderWithSecondaryPsi`1 {
    public abstract virtual ISelectedRange CreateDotSelectedRange(TFile primaryFile, TreeOffset treeOffset, bool selectBetterToken, bool appendInjectedPsi);
    public abstract virtual ISelectedRange CreateElementSelectedRange(ITreeNode node);
    public abstract virtual IWrapperRange CreateWrapperRange(IDocument document, TFile primaryFile, ISelectedRange primaryRange, ISelectedTreeRange codeBehindRange, IFile secondaryFile);
}
public interface JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.WithSecondaryPsi.IWrapperRange {
}
public abstract class JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.WithSecondaryPsi.SelectEmbracingConstructProviderWithSecondaryPsiWithSecondaryPsiBase`2 : object {
    private ISettingsStore mySettingsStore;
    protected SelectEmbracingConstructProviderWithSecondaryPsiWithSecondaryPsiBase`2(ISettingsStore settingsStore);
    protected bool DoUseCamelHumps(ITreeNode treeNode);
    public virtual bool IsAvailable(IPsiSourceFile sourceFile);
    public sealed virtual ISelectedRange GetSelectedRange(IPsiSourceFile sourceFile, DocumentRange documentRange);
    private static ISelectedTreeRange FindPartitionedRange(IPsiSourceFile sourceFile, DocumentRange documentRange, ISelectEmbracingConstructProvider provider, ITokenNode tokenInPrimaryFile, IFile secondaryFile);
    private ISelectedRange GetPrimarySelectedRange(TFile primaryFile, DocumentRange documentRange);
    private static TreeOffset FindOffsetWithinToken(ITokenNode tokenNode, int offsetWithin);
    private static ISelectedTreeRange GetCodeBehindRange(ITreeNode token, ISelectEmbracingConstructProvider provider, IPsiSourceFile sourceFile, DocumentRange documentRange, IFile secondaryFile);
    [CanBeNullAttribute]
private static TFile GetPrimaryPsi(IPsiSourceFile sourceFile);
    public abstract virtual ISelectedRange CreateDotSelectedRange(TFile primaryFile, TreeOffset treeOffset, bool selectBetterToken, bool appendInjectedPsi);
    public abstract virtual ISelectedRange CreateElementSelectedRange(ITreeNode node);
    public abstract virtual IWrapperRange CreateWrapperRange(IDocument document, TFile primaryFile, ISelectedRange primaryRange, ISelectedTreeRange codeBehindRange, IFile secondaryFile);
}
public abstract class JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.WithSecondaryPsi.WrapperRange`1 : object {
    private IDocument myDocument;
    private TFile myPrimaryFile;
    private IFile mySecondaryFile;
    private Pair`2<ISelectedRange, TextRange> myPrimaryPair;
    private Pair`2<ISelectedTreeRange, TextRange> mySecondaryPair;
    private bool myIsPrimaryRangeUsed;
    public ISelectedRange Parent { get; }
    public DocumentRange Range { get; }
    public ExtendToTheWholeLinePolicy ExtendToWholeLine { get; }
    protected WrapperRange`1(IDocument document, ISelectedRange primarySelection, ISelectedTreeRange secondarySelection, TFile primaryFile, IFile secondaryFile);
    protected abstract virtual bool IsSpecialToken(TokenNodeType tokenNodeType);
    public sealed virtual ISelectedRange get_Parent();
    public sealed virtual DocumentRange get_Range();
    public sealed virtual ExtendToTheWholeLinePolicy get_ExtendToWholeLine();
    public sealed virtual ITreeRange TryGetTreeRange();
}
internal static class JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.WithSecondaryPsi.WrapperRangeUtil : object {
    public static RangesComparison ComareRanges(TextRange primaryRange, TextRange secondaryRange);
    public static Pair`2<Pair`2<ISelectedRange, TextRange>, Pair`2<ISelectedTreeRange, TextRange>> FixRanges(ISelectedRange primaryRange, ISelectedTreeRange secondaryRange, IFile primaryFile, IFile secondaryFile, IDocument document, Func`2<TokenNodeType, bool> isSpecialToken);
    public static Pair`2<ISelectedTreeRange, TextRange> GetValidSecondaryRange(ISelectedTreeRange secondaryRange, IFile secondaryFile, IFile primaryFile, Func`2<TokenNodeType, bool> isSpecialToken, IDocument document);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class JetBrains.ReSharper.Feature.Services.src.Explanatory.CodeInspectionWikiResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CodeInspectionWiki { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CodeInspectionWiki();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.StackTraces.AutoStackTraceExplorer : object {
    public static ActivityDescriptor StatisticsKey;
    public AutoStackTraceExplorer(Lifetime lifetime, StackTraceOptions stackTraceOptions, IStackTraceManager stackTraceManager, IShellLocks threading, IIsApplicationActiveState applicationActiveState, UsageStatistics usageStatistics);
    private static AutoStackTraceExplorer();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.StackTraces.AutoStackTraceExplorerExplainer : object {
    [NotNullAttribute]
private IFeatureSuggestionNotificationProvider myNotificationProvider;
    [NotNullAttribute]
private IUsageStatisticsCounters myUsageStatisticsCounters;
    [NotNullAttribute]
private IShellLocks myThreading;
    [NotNullAttribute]
private IActionManager myActionManager;
    [NotNullAttribute]
private OptionsManager myOptionsManager;
    [NotNullAttribute]
private IProperty`1<bool> myDisableMe;
    [NotNullAttribute]
private IActionDefWithId myExploreStackTraceAction;
    public IFeatureSuggestionAspect[] Aspects { get; }
    public AutoStackTraceExplorerExplainer(Lifetime lifetime, IFeatureSuggestionNotificationProvider notificationProvider, IUsageStatisticsCounters usageStatisticsCounters, IShellLocks threading, IActionManager actionManager, OptionsManager optionsManager);
    public sealed virtual IFeatureSuggestionAspect[] get_Aspects();
    public sealed virtual IProperty`1<IFeatureSuggestion> Subscribe(Lifetime lifetime, FeatureSuggestionMode mode);
    private void ExplainAutoStackTraceMode(Lifetime lifetime, IProperty`1<IFeatureSuggestion> suggestion);
    private void GoToOptions();
    [CompilerGeneratedAttribute]
private void <GoToOptions>b__12_0();
}
public static class JetBrains.ReSharper.Feature.Services.StackTraces.DeclaredElementsSerializer : object {
    private static char Separator;
    public static string SerializeElements(IEnumerable`1<IClrDeclaredElement> elements);
    public static string SerializeDeclaredElement(IClrDeclaredElement element);
    private static string GetXmlDocId(IDeclaredElement declaredElement);
    [CanBeNullAttribute]
private static IPsiModule ResolvePsiModule(string id, ISolution solution);
    public static IDeclaredElement[] DeserializeAllResolvableElements(string data, ISolution solution);
    public static IDeclaredElement DeserializeDeclaredElement(ISolution solution, string part);
}
[ActionAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "BrowseStackTraceActionText")]
public class JetBrains.ReSharper.Feature.Services.StackTraces.ExploreStackTraceAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private static string FetchTextFromClipboard();
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
internal class JetBrains.ReSharper.Feature.Services.StackTraces.ExploreStackTraceServer : MarshalByRefObject {
    public static string ChannelUrl;
    private int System.Collections.Generic.ICollection<System.String>.Count { get; }
    private bool System.Collections.Generic.ICollection<System.String>.IsReadOnly { get; }
    public virtual object InitializeLifetimeService();
    private sealed virtual override void System.Collections.Generic.ICollection<System.String>.Add(string item);
    private static void ExploreStackTrace(string text);
    private sealed virtual override IEnumerator`1<string> System.Collections.Generic.IEnumerable<System.String>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<System.String>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.String>.Contains(string item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.String>.CopyTo(String[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.String>.Remove(string item);
    private sealed virtual override int System.Collections.Generic.ICollection<System.String>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.String>.get_IsReadOnly();
}
public interface JetBrains.ReSharper.Feature.Services.StackTraces.IStackTraceManager {
    public abstract virtual void Open(string stackTraceText, string tabTitle);
    [GuardAttribute("1")]
public abstract virtual string RenderHtml(string text, bool scaffolding);
    [GuardAttribute("1")]
public abstract virtual string BuildHtml(string text, StackTraceNode node, bool scaffolding);
    public abstract virtual void OpenWithoutNormalization(string stackTraceText);
}
public interface JetBrains.ReSharper.Feature.Services.StackTraces.IStackTraceResolver {
    public abstract virtual IReadOnlyList`1<StackTraceCandidateResolutionBase> GetNodeResolutions(IdentifierNode node);
    public abstract virtual IReadOnlyList`1<ProjectFileTextRange> GetNavigationsToCodeWithElement(IDeclaredElement element, IdentifierNode node, CompositeNode rootNode);
}
public interface JetBrains.ReSharper.Feature.Services.StackTraces.IStackTraceWpfBuilderWithResolve {
    public IEnumerable`1<Block> Blocks { get; }
    public string BareText { get; }
    public abstract virtual IEnumerable`1<Block> get_Blocks();
    public abstract virtual string get_BareText();
}
[OptionsPageAttribute("StackTraceExplorerOptions", "Stack Trace Explorer", "JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons/StackTraceExplorerToolWindow")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.StackTraces.Options.StackTraceExplorerOptionsPage : SimpleOptionsPage {
    public static string PID;
    public StackTraceExplorerOptionsPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext);
}
[ProtocolHandlerAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.StackTraces.OrdinalFileProtocolHandler : StackTraceProtocolHandlerBase {
    public OrdinalFileProtocolHandler(SolutionsManager solutionManager, IThreading threading);
    protected virtual void Navigate(ISolution solution, string uri);
}
[ProtocolHandlerAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.StackTraces.ProjectFileProtocolHandler : StackTraceProtocolHandlerBase {
    public ProjectFileProtocolHandler(SolutionsManager solutionManager, IThreading threading);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Feature.Services.StackTraces.ProjectFileProtocolHandler/<Navigate>d__1")]
protected virtual void Navigate(ISolution solution, string uri);
    private static Task`1<ITextControl> GetTextControl(ISolution solution, string persistentId, ValueTuple`2<int, int> coordsOneBased);
}
public class JetBrains.ReSharper.Feature.Services.StackTraces.ResolvedMethod : object {
    [CompilerGeneratedAttribute]
private IFunction <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private TextRange <TypeRange>k__BackingField;
    [CompilerGeneratedAttribute]
private TextRange <MethodNameRange>k__BackingField;
    public IFunction Method { get; public set; }
    public TextRange TypeRange { get; public set; }
    public TextRange MethodNameRange { get; public set; }
    [CompilerGeneratedAttribute]
public IFunction get_Method();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Method(IFunction value);
    [CompilerGeneratedAttribute]
public TextRange get_TypeRange();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TypeRange(TextRange value);
    [CompilerGeneratedAttribute]
public TextRange get_MethodNameRange();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MethodNameRange(TextRange value);
}
[ActionAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "StackTracesActionText")]
public class JetBrains.ReSharper.Feature.Services.StackTraces.ShowStackTraceExplorerAction : ActivateToolWindowActionHandler`1<StackTraceToolWindowDescriptor> {
}
[ActionAttribute("StackTraceExplorer.ActionBar.WordWrappingAction", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ChangeWrappingOfWordsActionText")]
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.ActionBar.StackTraceChangeWrappingAction : object {
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
}
[ActionAttribute("StackTraceExplorer.ActionBar.ConfigureAction", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "OpenSettingsActionText")]
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.ActionBar.StackTraceConfigureAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionGroupAttribute("StackTraceExplorer.ActionBar", "1", "10")]
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.ActionBar.StackTraceExplorerActionBar : object {
    public StackTraceExplorerActionBar(TreeModelBrowserPreviousAction treeModelBrowserPreviousAction, TreeModelBrowserNextAction treeModelBrowserNextAction, Separator separator1, StackTraceChangeWrappingAction stackTraceChangeWrappingAction, Separator separator2, StackTraceConfigureAction stackTraceConfigureAction, Separator separator3);
}
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.Nodes.CompositeNode : StackTraceNode {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<StackTraceNode> <Nodes>k__BackingField;
    public IReadOnlyList`1<StackTraceNode> Nodes { get; }
    public CompositeNode(TextRange range, IReadOnlyList`1<StackTraceNode> nodes);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<StackTraceNode> get_Nodes();
    public virtual void Accept(StackTraceVisitor visitor);
    public virtual void Dump(TextWriter writer);
    protected bool Equals(CompositeNode other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public int SearchForNode(StackTraceNode node);
}
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.Nodes.IdentifierNode : StackTraceNode {
    private string myAdditionalName;
    private StackTraceNode[] myTypeParameters;
    [CanBeNullAttribute]
[ItemNotNullAttribute]
private ParameterNode[] myParameterList;
    [CompilerGeneratedAttribute]
private StackTraceNode[] <ClrNotations>k__BackingField;
    [CompilerGeneratedAttribute]
private StackTraceResolveState <ResolveState>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentifierType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentifierNode <Qualifier>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TypeParametersCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ArrayDimension>k__BackingField;
    public StackTraceNode[] ClrNotations { get; public set; }
    public StackTraceResolveState ResolveState { get; }
    public IdentifierType Type { get; public set; }
    public string Name { get; }
    public IdentifierNode Context { get; }
    public string AdditionalName { get; }
    [CanBeNullAttribute]
public IdentifierNode Qualifier { get; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public StackTraceNode[] TypeParameters { get; public set; }
    [CanBeNullAttribute]
[ItemNotNullAttribute]
public ParameterNode[] ParameterList { get; public set; }
    public bool ParameterListExists { get; }
    public int TypeParametersCount { get; public set; }
    public string FullName { get; public set; }
    public int ArrayDimension { get; public set; }
    public IdentifierNode(string name, string nameWithQualifiers, TextRange range, IdentifierType type, IdentifierNode qualifier);
    [CompilerGeneratedAttribute]
public StackTraceNode[] get_ClrNotations();
    [CompilerGeneratedAttribute]
public void set_ClrNotations(StackTraceNode[] value);
    [CompilerGeneratedAttribute]
public StackTraceResolveState get_ResolveState();
    [CompilerGeneratedAttribute]
public IdentifierType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(IdentifierType value);
    public virtual void Accept(StackTraceVisitor visitor);
    [CompilerGeneratedAttribute]
public string get_Name();
    public IdentifierNode get_Context();
    public string get_AdditionalName();
    [CompilerGeneratedAttribute]
public IdentifierNode get_Qualifier();
    public StackTraceNode[] get_TypeParameters();
    public void set_TypeParameters(StackTraceNode[] value);
    public ParameterNode[] get_ParameterList();
    public void set_ParameterList(ParameterNode[] value);
    public bool get_ParameterListExists();
    [CompilerGeneratedAttribute]
public int get_TypeParametersCount();
    [CompilerGeneratedAttribute]
public void set_TypeParametersCount(int value);
    private bool Equals(IdentifierNode other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
public void set_FullName(string value);
    [CompilerGeneratedAttribute]
public int get_ArrayDimension();
    [CompilerGeneratedAttribute]
public void set_ArrayDimension(int value);
    private void DumpQualifier(TextWriter writer);
    public virtual void Dump(TextWriter writer);
}
public enum JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.Nodes.ParameterKind : Enum {
    public int value__;
    public static ParameterKind ByVal;
    public static ParameterKind ByRef;
    public static ParameterKind Pointer;
}
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.Nodes.ParameterNode : StackTraceNode {
    [CompilerGeneratedAttribute]
private ParameterKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentifierNode <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private TextNode <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private TextNode <Value>k__BackingField;
    public ParameterKind Kind { get; }
    public IdentifierNode Type { get; }
    public TextNode Name { get; }
    public TextNode Value { get; }
    public ParameterNode(TextRange range, IdentifierNode type, TextNode name, ParameterKind kind, TextNode value);
    [CompilerGeneratedAttribute]
public ParameterKind get_Kind();
    [CompilerGeneratedAttribute]
public IdentifierNode get_Type();
    [CompilerGeneratedAttribute]
public TextNode get_Name();
    [CompilerGeneratedAttribute]
public TextNode get_Value();
    public virtual void Accept(StackTraceVisitor visitor);
    public virtual void Dump(TextWriter writer);
}
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.Nodes.PathNode : StackTraceNode {
    [CompilerGeneratedAttribute]
private bool <IsFileLink>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Link>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    public bool IsFileLink { get; public set; }
    public string LocalName { get; public set; }
    public string Path { get; public set; }
    public string Link { get; public set; }
    public int Line { get; public set; }
    public int Column { get; public set; }
    public PathNode(TextRange range, string path, string localName, bool isFileLink);
    public static PathNode CreatePathNode(TextRange range, StringBuilder path, StringBuilder localName, bool isFileLink);
    private static string CleanPath(string path);
    [CompilerGeneratedAttribute]
public bool get_IsFileLink();
    [CompilerGeneratedAttribute]
public void set_IsFileLink(bool value);
    [CompilerGeneratedAttribute]
public string get_LocalName();
    [CompilerGeneratedAttribute]
public void set_LocalName(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Link();
    [CompilerGeneratedAttribute]
public void set_Link(string value);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(int value);
    [CompilerGeneratedAttribute]
public int get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(int value);
    public virtual void Accept(StackTraceVisitor visitor);
    public virtual void Dump(TextWriter writer);
}
public enum JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.Nodes.Resolve.NodeState : Enum {
    public int value__;
    public static NodeState NotChecked;
    public static NodeState NoReferences;
    public static NodeState OnlyNamespaces;
    public static NodeState MainReferenceDoesNotExist;
    public static NodeState MainReferenceExists;
}
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.Nodes.Resolve.StackTraceResolveState : object {
    [CompilerGeneratedAttribute]
private NodeState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IClrDeclaredElement> <Candidates>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaredElement <MainCandidate>k__BackingField;
    public NodeState State { get; private set; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public IReadOnlyList`1<IClrDeclaredElement> NavigatableCandidates { get; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public IReadOnlyList`1<IClrDeclaredElement> Candidates { get; private set; }
    [CanBeNullAttribute]
public IDeclaredElement MainCandidate { get; private set; }
    [CompilerGeneratedAttribute]
public NodeState get_State();
    [CompilerGeneratedAttribute]
private void set_State(NodeState value);
    public IReadOnlyList`1<IClrDeclaredElement> get_NavigatableCandidates();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IClrDeclaredElement> get_Candidates();
    [CompilerGeneratedAttribute]
private void set_Candidates(IReadOnlyList`1<IClrDeclaredElement> value);
    [CompilerGeneratedAttribute]
public IDeclaredElement get_MainCandidate();
    [CompilerGeneratedAttribute]
private void set_MainCandidate(IDeclaredElement value);
    private void SetCandidates(IEnumerable`1<IClrDeclaredElement> resultCandidates, IClrDeclaredElement mainCandidate);
    public void SetCandidates(IReadOnlyList`1<IClrDeclaredElement> resultCandidates);
    public void SetAsSuspicious();
}
public abstract class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.Nodes.StackTraceNode : object {
    [CompilerGeneratedAttribute]
private TextRange <Range>k__BackingField;
    [CompilerGeneratedAttribute]
private TextRange <RangeOfArea>k__BackingField;
    [CompilerGeneratedAttribute]
private StackTraceNode <Parent>k__BackingField;
    public TextRange Range { get; private set; }
    public TextRange RangeOfArea { get; public set; }
    public StackTraceNode Parent { get; public set; }
    protected StackTraceNode(TextRange range);
    [CompilerGeneratedAttribute]
public TextRange get_Range();
    [CompilerGeneratedAttribute]
private void set_Range(TextRange value);
    [CompilerGeneratedAttribute]
public TextRange get_RangeOfArea();
    [CompilerGeneratedAttribute]
public void set_RangeOfArea(TextRange value);
    [CompilerGeneratedAttribute]
public StackTraceNode get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(StackTraceNode value);
    public void UnionRange(TextRange range);
    public void UnionRangeOfArea(TextRange range);
    public abstract virtual void Accept(StackTraceVisitor visitor);
    public abstract virtual void Dump(TextWriter writer);
}
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.Nodes.TextNode : StackTraceNode {
    private string myText;
    public string Text { get; }
    public TextNode(TextRange range, string text);
    public virtual void Accept(StackTraceVisitor visitor);
    public string get_Text();
    public virtual void Dump(TextWriter writer);
}
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.Parsers.StackTraceParser : object {
    private int myCurrentOffsetOfEndLine;
    private ISolution mySolution;
    private StackTraceLexer myLexer;
    private StackTracePathResolverCache myCache;
    private StackTraceProcessingOptions myProcessingOptions;
    private String[] myInvalidPathChars;
    private ILogger myLogger;
    private Regex myUnityLogPathRegex;
    private List`1<StackTraceNode> myResultNodes;
    [CompilerGeneratedAttribute]
private State <State>k__BackingField;
    [CompilerGeneratedAttribute]
private StackTraceOptionsState <Options>k__BackingField;
    public State State { get; private set; }
    public StackTraceOptionsState Options { get; }
    public StackTraceParser(string text, ISolution solution, StackTracePathResolverCache cache, StackTraceOptionsState options, StackTraceProcessingOptions processingOptions);
    [CompilerGeneratedAttribute]
public State get_State();
    [CompilerGeneratedAttribute]
private void set_State(State value);
    [CompilerGeneratedAttribute]
public StackTraceOptionsState get_Options();
    public CompositeNode Parse();
    public CompositeNode Parse(int start, int end, StackTraceUpdateTokenCache cache);
    public StackTraceUpdateTokenCache GetInterruptedStateCache();
    private void PrepareParser(int start, StackTraceUpdateTokenCache cache);
    private void SkipLongLines();
    [CanBeNullAttribute]
private StackTraceNode GetNextElement();
    [CanBeNullAttribute]
private IdentifierNode ParseIdentifier(string start, int startIndex, bool isParameter);
    private bool ParseParameters(ParameterNode[]& parameterList, String& name);
    [CanBeNullAttribute]
private TextNode GetName();
    [CanBeNullAttribute]
private TextNode ParseStringConstant();
    [CanBeNullAttribute]
private TextNode ParseNumericConstant();
    private TextNode CreateNonEmptyTextNode(int start, int end);
    private bool GetGenericTypes(List`1& typeParameters, String& fullName);
    private bool CalculateArrayDimension(Int32& dimension, String& name);
    private bool CheckForBuiltInGeneric(string name, Int32& numberOfParameters, String& trueName);
    private string ChangeDefaultStruct(string name);
    private void SkipWhiteSpace(string fullName);
    [CanBeNullAttribute]
private TextNode ParseParameterValue();
    [CanBeNullAttribute]
private PathNode ParsePath();
    private bool PreprocessUnityLogPath(PathNode node);
    private void ParseCoordinates(PathNode node);
    [CompilerGeneratedAttribute]
private PathNode <ParsePath>g__CreateNode|35_0(<>c__DisplayClass35_0& );
    [CompilerGeneratedAttribute]
private PathNode <ParsePath>g__CreateNodeWithRange|35_1(int begin, int end, <>c__DisplayClass35_0& );
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.Parsers.StackTraceProcessingOptions : Enum {
    public UInt32 value__;
    public static StackTraceProcessingOptions Default;
    public static StackTraceProcessingOptions IgnoreUnresolvedElements;
    public static StackTraceProcessingOptions IgnoreNonMethodsCalls;
    public static StackTraceProcessingOptions IgnoreMultiResolvedItems;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.StackTraceControlAutomation : AAutomation {
    [NullableAttribute("2")]
public ThemeColor Background;
    public ICollectionEvents`1<WindowFrame> HostingWindowFrames;
    public IProperty`1<bool> IsHoveringHyperlink;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IProperty`1<TextControlAutomation> TextControl;
    public IAutomation Toolbar;
    public StackTraceControlAutomation(Lifetime lifetime, bool isNormalizeText, string text, StackTraceSessionFactory factory, IProperty`1<bool> wordWrapOverride, IActionBarManager actionBarManager, ThemeColor background);
}
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.StackTraceEscapeActionHandler : EscapeActionHandlerBase {
    private StackTraceLocalResultsBrowser myBrowser;
    public StackTraceEscapeActionHandler(IActionManager actionManager, StackTraceLocalResultsBrowser browser);
    protected virtual bool IsAvailable(IDataContext dataContext);
    protected virtual void Execute(IDataContext dataContext);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Resources.Settings.CodeEditingSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "StackTraceExplorerSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.StackTraceExplorerSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "SolveSingleWordsSettingDescription")]
public bool SolveSingleWords;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ToRightAnalysisSettingDescription")]
public bool ToRightAnalysis;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WrapLinesSettingDescription")]
public bool WrapLines;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "IsLengthOfParsedLinesLimitedSettingDescription")]
public bool IsLengthOfParsedLinesLimited;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "MaxLengthOfLinesToBeParsedSettingDescription")]
public int MaxLengthOfParsedLines;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "AutoOpenSettingDescription")]
public bool AutoOpen;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.StackTraceHighlighterUtil : object {
    [ExtensionAttribute]
[PureAttribute]
[CanBeNullAttribute]
public static string TryGetAttributeId(IdentifierNode node);
    [ExtensionAttribute]
[PureAttribute]
private static bool IsMethodLike(IdentifierNode node);
    [PureAttribute]
[CanBeNullAttribute]
public static string GetLink(IClrDeclaredElement[] elements);
}
[RegisterHighlighterGroupAttribute("Stack Trace", "Stacktrace", "1")]
[RegisterHighlighterAttribute("ReSharper Stack Trace Method")]
[RegisterHighlighterAttribute("ReSharper Stack Trace Type")]
[RegisterHighlighterAttribute("ReSharper Stack Trace Path")]
[RegisterHighlighterAttribute("ReSharper Stack Trace Suspicious Text")]
[RegisterHighlighterAttribute("ReSharper Stack Trace Hyperlink")]
[RegisterHighlighterAttribute("Rider Exception Breakpoint Insertion Point")]
public static class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.StackTraceHighlightingAttributeIds : object {
    public static string METHOD;
    public static string TYPE;
    public static string PATH;
    public static string SUSPICIOUS_TEXT;
    public static string HYPERLINK;
    public static string BREAKPOINT_INSERTION_POINT;
}
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.StackTraceHighlightTextReadActivity : InterruptableReadActivity {
    private StackTraceHighlightVisitor myHighlightVisitor;
    private List`1<Tuple`2<TextRange, string>> myToHighlight;
    private IDocumentMarkup myMarkup;
    private StackTraceParser myParser;
    private StackTraceUpdateStateToken myStackTraceUpdateStateToken;
    private IShellLocks myLocks;
    private StackTraceUpdateManager myManager;
    private Lifetime myLifetime;
    private int myStartOffset;
    private int myEndOffset;
    private int myEndOfDocumentIndex;
    private int myBatchToHighlightLength;
    private int myTimeLengthBetweenBatchHighlights;
    private int myTimeDelayToStartInterruptedActivity;
    [CanBeNullAttribute]
private CompositeNode myParserResult;
    protected string ThreadName { get; }
    public StackTraceHighlightTextReadActivity(ISolution solution, StackTraceUpdateStateToken stackTraceUpdateStateToken, StackTraceUpdateManager manager, StackTracePathResolverCache resolverCache, IDocumentMarkup markup, Lifetime lifetime, IShellLocks shellLocks, StackTraceOptions options, InterruptionSet checkForInterrupt);
    protected virtual void Start();
    protected virtual void Work();
    protected virtual void Finish();
    private void HighlightNodes();
    protected virtual string get_ThreadName();
    protected virtual void OnInterrupt();
    [CompilerGeneratedAttribute]
private void <OnInterrupt>b__22_0();
}
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.StackTraceHighlightVisitor : StackTraceVisitor {
    private List`1<Tuple`2<TextRange, string>> myNewToHighlight;
    public StackTraceHighlightVisitor(List`1<Tuple`2<TextRange, string>> toHighLight);
    public virtual void VisitResolvedNode(IdentifierNode node);
    public virtual void VisitResolvedPath(PathNode node);
    public virtual void VisitText(TextNode node);
    public virtual void VisitParameter(ParameterNode node);
}
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.StackTraceLinkTreeVisitor : StackTraceVisitor {
    private StackTraceNode myResult;
    private int myRangeToFound;
    public StackTraceNode GetLinkFromTree(CompositeNode node, int ind);
    public virtual void VisitResolvedNode(IdentifierNode node);
    public virtual void VisitResolvedPath(PathNode node);
    public virtual void VisitText(TextNode node);
    public virtual void VisitParameter(ParameterNode node);
    public virtual void VisitCompositeNode(CompositeNode node);
}
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.StackTraceLocalResultsBrowser : object {
    private IDocumentMarkup myMarkup;
    private List`1<IHighlighter> myHighlighters;
    private int myCurrentListIndex;
    private IProjectFile myProjectFile;
    private TargetFrameworkId myTargetFrameworkId;
    private LifetimeDefinition myLifetimeDefinition;
    private IActionManager myActionManager;
    private IMainWindowPopupWindowContext myPopupWindowContext;
    private string myMessage;
    private IStatusBar myStatusBar;
    private SequentialLifetimes myEscapeLifetimes;
    private bool myHighlightersAreActive;
    public bool HighlightersAreActive { get; private set; }
    public StackTraceLocalResultsBrowser(Lifetime lifetime, IDocumentMarkupManager manager, IActionManager actionManager, IMainWindowPopupWindowContext popupWindowContext, IReadOnlyList`1<ProjectFileTextRange> ranges, string message, bool fromFirst);
    public bool get_HighlightersAreActive();
    private void set_HighlightersAreActive(bool value);
    public void RemoveHighlighters();
    private void Initialize(IReadOnlyList`1<ProjectFileTextRange> ranges);
    private void ShowHighlighters();
    private int GetNextIndex();
    private int GetPreviousIndex();
    public bool HaveNext();
    public bool HavePrevious();
    public void Terminate();
    public void GoNext();
    public void GoPrevious();
    [CompilerGeneratedAttribute]
private void <set_HighlightersAreActive>b__15_0(Lifetime lt);
    [CompilerGeneratedAttribute]
private IHighlighter <Initialize>b__17_0(ProjectFileTextRange rg);
    [CompilerGeneratedAttribute]
private IHighlighter <ShowHighlighters>b__18_0(IHighlighter hl);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.StackTraceOptions : object {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ToRightAnalysis>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <SolveSingleWords>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <WrapLines>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsLengthOfParsedLinesLimited>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <MaxLengthOfParsedLines>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <AutoOpen>k__BackingField;
    [NotNullAttribute]
public IProperty`1<bool> ToRightAnalysis { get; }
    [NotNullAttribute]
public IProperty`1<bool> SolveSingleWords { get; }
    [NotNullAttribute]
public IProperty`1<bool> WrapLines { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsLengthOfParsedLinesLimited { get; }
    [NotNullAttribute]
public IProperty`1<int> MaxLengthOfParsedLines { get; }
    [NotNullAttribute]
public IProperty`1<bool> AutoOpen { get; }
    public StackTraceOptions(ISettingsStore settingsStore, Lifetime lifetime);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ToRightAnalysis();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_SolveSingleWords();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_WrapLines();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsLengthOfParsedLinesLimited();
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_MaxLengthOfParsedLines();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_AutoOpen();
    public StackTraceOptionsState GetState();
}
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.StackTraceOptionsState : ValueType {
    [CompilerGeneratedAttribute]
private bool <SolveSingleWords>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WrapLines>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLengthOfParsedLinesLimited>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxLengthOfParsedLines>k__BackingField;
    public bool SolveSingleWords { get; public set; }
    public bool WrapLines { get; public set; }
    public bool IsLengthOfParsedLinesLimited { get; public set; }
    public int MaxLengthOfParsedLines { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_SolveSingleWords();
    [CompilerGeneratedAttribute]
public void set_SolveSingleWords(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_WrapLines();
    [CompilerGeneratedAttribute]
public void set_WrapLines(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsLengthOfParsedLinesLimited();
    [CompilerGeneratedAttribute]
public void set_IsLengthOfParsedLinesLimited(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_MaxLengthOfParsedLines();
    [CompilerGeneratedAttribute]
public void set_MaxLengthOfParsedLines(int value);
}
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.StackTracePathResolver : object {
    private static ILogger ourLogger;
    private static StackTracePathResolver();
    public static void ResolvePath(PathNode node, StackTracePathResolverCache cache, ISolution solution);
    [CanBeNullAttribute]
public static IProjectFile TryResolveProjectFile(StackTracePathResolverCache cache, string path, string fileNameWithExtension);
    private static int GetCommonShortNamesCount(VirtualFileSystemPath path1, VirtualFileSystemPath path2);
}
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.StackTraceSession : object {
    private static string RESULT_NOT_READY_YET_MESSAGE;
    private IShellLocks myLocks;
    private ICollectionEvents`1<ITextControl> myTextControls;
    public TextControlAutomation TextControlAutomation;
    public IDocument Document;
    private IDocumentMarkup myMarkup;
    private ISolution mySolution;
    private Lifetime myLifetime;
    [CompilerGeneratedAttribute]
private CompositeNode <RootNode>k__BackingField;
    private StackTraceUpdateManager myUpdateManager;
    private string myText;
    private SequentialLifetimes myHyperlinkLifetimes;
    private SequentialLifetimes myHotKeyNavigationLifetimes;
    [ItemCanBeNullAttribute]
private IProperty`1<StackTraceNode> myCurrentUnderlinedNode;
    private int myCurrentGlobalRangeIndex;
    private StackTraceLocalResultsBrowser myLocalResultsBrowser;
    private StackTracePathResolverCache myPathResolverCache;
    private IMainWindowPopupWindowContext myMainWindowPopupWindowContext;
    private IActionManager myActionManager;
    private CandidatesNavigator myCandidatesNavigator;
    private LinkNavigator myLinkNavigator;
    private IDocumentMarkupManager myMarkupManager;
    private bool myIsNormalizeText;
    [CanBeNullAttribute]
public CompositeNode RootNode { get; private set; }
    public IProperty`1<bool> IsHoveringHyperlink { get; }
    public ICollectionEvents`1<ITextControl> TextControls { get; }
    public StackTraceSession(Lifetime lifetime, IDocument document, IShellLocks locks, ICollectionEvents`1<ITextControl> textcontrols, TextControlAutomation textControlAutomation, IDocumentMarkupManager documentMarkupManager, ISolution solution, StackTraceOptions options, IWindowsHookManager hookManager, StackTracePathResolverCache pathResolverCache, IMainWindowPopupWindowContext mainWindowPopupWindowContext, IActionManager actionManager, CandidatesNavigator candidatesNavigator, LinkNavigator linkNavigator, bool isNormalizeText);
    [CompilerGeneratedAttribute]
public CompositeNode get_RootNode();
    [CompilerGeneratedAttribute]
private void set_RootNode(CompositeNode value);
    public IProperty`1<bool> get_IsHoveringHyperlink();
    public ICollectionEvents`1<ITextControl> get_TextControls();
    public static string PrepareAreaToParse(string parsedPart, bool isNormalize);
    public void SetText(string text, int endIndexOfAreaToParse);
    public void AppendPlainText(string text);
    public void AppendText(string text);
    private void OnNewParserRoot(CompositeNode root);
    private void ForceUpdate();
    private void OnDocumentChanged(object sender, EventArgs`1<DocumentChange> args);
    private void OnMouseClick(ITextControl tc);
    private void HideCustomHighlighters();
    private void OnMouseMove(TextControlMouseEventArgs newEvent, GroupingEvent hyperlinkGroupingEvent, IProperty`1<Nullable`1<int>> docOffsetHyperlinkLastHoverPosition);
    private void HighlightHyperlink(IProperty`1<Nullable`1<int>> hyperlinkLastHoverPosition);
    private void UnderlineNode(StackTraceNode node);
    private void RemoveHyperlink();
    private void RemoveHotkeyHyperlink();
    private void AddHyperlinkHighlighter(StackTraceNode node);
    private void AddHyperlinkHighlighterForHotkeyNavigation(StackTraceNode node);
    private static bool IsControlPressed();
    private static bool IsShiftPressed();
    public sealed virtual Action GoToNextLocation(Lifetime lifetimeExec, IDataContext context, ActionPresentation presentation);
    public sealed virtual Action GoToPrevLocation(Lifetime lifetimeExec, IDataContext context, ActionPresentation presentation);
    private void ForceNavigationToNode(StackTraceNode nodeToNavigate, bool toNext);
    private int GetIndexOfNextItem(CompositeNode rootNode);
    private int GetIndexOfPreviousItem(CompositeNode rootNode);
    private void ClearLocalResults();
    [CompilerGeneratedAttribute]
private void <.ctor>b__30_4();
    [CompilerGeneratedAttribute]
private void <.ctor>b__30_5();
    [CompilerGeneratedAttribute]
private void <ForceUpdate>b__36_0();
    [CompilerGeneratedAttribute]
private void <OnDocumentChanged>b__37_0();
    [CompilerGeneratedAttribute]
private void <GoToNextLocation>b__49_0();
    [CompilerGeneratedAttribute]
private void <GoToNextLocation>b__49_1();
    [CompilerGeneratedAttribute]
private void <GoToPrevLocation>b__50_0();
    [CompilerGeneratedAttribute]
private void <GoToPrevLocation>b__50_1();
}
internal class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.StacktraceSettingsNamesProvider : PrefixBasedSettingsNamesProvider {
    public static string STACKTRACE_GROUP_PREFIX;
}
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.StackTraceUpdateManager : object {
    private ISolution mySolution;
    private Lifetime myLifetime;
    private IShellLocks myLocks;
    private StackTraceOptions myOptions;
    private IDocumentMarkup myMarkup;
    private StackTracePathResolverCache myPathResolverCache;
    private List`1<StackTraceUpdateStateToken> myUpdatesQueue;
    private int myRequestIdCounter;
    private static ILogger ourLog;
    [CompilerGeneratedAttribute]
private Signal`1<CompositeNode> <NewRootReceivedSignal>k__BackingField;
    public Signal`1<CompositeNode> NewRootReceivedSignal { get; }
    public StackTraceUpdateManager(ISolution solution, Lifetime lifetime, IShellLocks locks, StackTraceOptions options, IDocumentMarkup markup, StackTracePathResolverCache pathResolverCache);
    private static StackTraceUpdateManager();
    [CompilerGeneratedAttribute]
public Signal`1<CompositeNode> get_NewRootReceivedSignal();
    public void CancelAllRequests();
    public void AddRequest(int startOffset, int endOffset, bool needToRunParser);
    private StackTraceUpdateStateToken GetNextRequestToRun();
    public void StartNextRequest(StackTraceUpdateStateToken token);
    public void StartNextRequest();
    public void FinishRequest(StackTraceUpdateStateToken stackTraceUpdateStateToken);
    public bool IsProcessingUpdates();
    public void OnNewRootReceived(CompositeNode root);
}
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.StackTraceUpdateStateToken : object {
    [CompilerGeneratedAttribute]
private int <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NeedToRunParser>k__BackingField;
    private StackTraceUpdateManager myManager;
    private IShellLocks myLocks;
    [CompilerGeneratedAttribute]
private IProperty`1<UpdateStatus> <StatusProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private StackTraceUpdateTokenCache <Cache>k__BackingField;
    public int ID { get; }
    public int StartOffset { get; }
    public int EndOffset { get; }
    public bool NeedToRunParser { get; }
    public UpdateStatus Status { get; }
    public IProperty`1<UpdateStatus> StatusProperty { get; }
    public StackTraceUpdateTokenCache Cache { get; private set; }
    public StackTraceUpdateStateToken(Lifetime lifetime, int id, int startOffset, int endOffset, bool needToRunParser, StackTraceUpdateManager manager, IShellLocks locks);
    [CompilerGeneratedAttribute]
public int get_ID();
    [CompilerGeneratedAttribute]
public int get_StartOffset();
    [CompilerGeneratedAttribute]
public int get_EndOffset();
    [CompilerGeneratedAttribute]
public bool get_NeedToRunParser();
    public UpdateStatus get_Status();
    [CompilerGeneratedAttribute]
public IProperty`1<UpdateStatus> get_StatusProperty();
    [CompilerGeneratedAttribute]
public StackTraceUpdateTokenCache get_Cache();
    [CompilerGeneratedAttribute]
private void set_Cache(StackTraceUpdateTokenCache value);
    public void Start();
    public void FinishStartHighlightings();
    public void Finish();
    public void Reject();
    public bool Interrupt(StackTraceUpdateTokenCache cache);
}
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.StackTraceUpdateTokenCache : object {
    [CompilerGeneratedAttribute]
private State <ParserState>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<StackTraceNode> <IntermediateResult>k__BackingField;
    public State ParserState { get; }
    public List`1<StackTraceNode> IntermediateResult { get; }
    public StackTraceUpdateTokenCache(State parserState, List`1<StackTraceNode> intermediateResult);
    [CompilerGeneratedAttribute]
public State get_ParserState();
    [CompilerGeneratedAttribute]
public List`1<StackTraceNode> get_IntermediateResult();
}
public abstract class JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.StackTraceVisitor : object {
    public abstract virtual void VisitResolvedNode(IdentifierNode node);
    public abstract virtual void VisitResolvedPath(PathNode node);
    public abstract virtual void VisitText(TextNode node);
    public abstract virtual void VisitParameter(ParameterNode node);
    public virtual void VisitCompositeNode(CompositeNode node);
}
public enum JetBrains.ReSharper.Feature.Services.StackTraces.StackTrace.UpdateStatus : Enum {
    public int value__;
    public static UpdateStatus Prepare;
    public static UpdateStatus Working;
    public static UpdateStatus Interrupted;
    public static UpdateStatus Finished;
    public static UpdateStatus HighlightingOccurrences;
    public static UpdateStatus Rejected;
}
public abstract class JetBrains.ReSharper.Feature.Services.StackTraces.StackTraceBuilderWithResolveBase : StackTraceBuilderBase {
    private MethodNode myCurrentMethod;
    private IList`1<ResolvedMethod> myResolvedCurrentMethod;
    private ParameterNode myCurrentParameter;
    private Dictionary`2<MethodNode, IList`1<ResolvedMethod>> myResolvedMethodCache;
    private Dictionary`2<IdentifierNode, ITypeElement[]> myResolvedIdentifiers;
    public StackTraceBuilderWithResolveBase(ISolution solution, StackTracePathResolverCache pathResolverCache, string text);
    private IDisposable Link(IClrDeclaredElement[] elements);
    protected virtual void AppendIdentifierName(IdentifierNode node);
    private static int GetParameterIndex(MethodNode method, ParameterNode parameter);
    public virtual void VisitMethod(MethodNode node);
    private void RenderMethodName(MethodNode node);
    public virtual void VisitParameter(ParameterNode node);
}
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTraceCandidateResolution : StackTraceCandidateResolutionBase {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<StackTraceCandidateResolutionBase> <ContextResolutions>k__BackingField;
    private bool myIsFullyResolved;
    public IReadOnlyList`1<StackTraceCandidateResolutionBase> ContextResolutions { get; }
    public StackTraceCandidateResolution(IClrDeclaredElement candidate, IReadOnlyList`1<StackTraceCandidateResolutionBase> contextResolutions);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<StackTraceCandidateResolutionBase> get_ContextResolutions();
    public virtual bool IsFullyResolved();
}
public abstract class JetBrains.ReSharper.Feature.Services.StackTraces.StackTraceCandidateResolutionBase : object {
    [CompilerGeneratedAttribute]
private IClrDeclaredElement <Candidate>k__BackingField;
    public IClrDeclaredElement Candidate { get; }
    protected StackTraceCandidateResolutionBase(IClrDeclaredElement candidate);
    [CompilerGeneratedAttribute]
public IClrDeclaredElement get_Candidate();
    public abstract virtual bool IsFullyResolved();
}
internal class JetBrains.ReSharper.Feature.Services.StackTraces.StackTraceCopyTracker : object {
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private ReadonlyToken myReadonlyToken;
    private int myClipboardHash;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <StackTrace>k__BackingField;
    [NotNullAttribute]
public IProperty`1<string> StackTrace { get; }
    public StackTraceCopyTracker(Lifetime lifetime, IShellLocks locks, IIsApplicationActiveState applicationActiveState);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_StackTrace();
    private static bool ContainsStackTraceMark(string text);
    private void CheckIfStackTraceHasReferencesToSolutionSymbols(Lifetime lifetime, string stackTrace);
    private void TryCheckStackTrace(Lifetime lifetime, string stackTrace, int retryCount);
    private static bool IsApplicationActivated(PropertyChangedEventArgs`1<bool> isActiveChangedArgs);
}
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTraceHtmlBuilderWithResolve : StackTraceBuilderWithResolveBase {
    protected StringBuilder Result;
    private static string HtmlDoctype;
    private static string StackTraceCss;
    public static string LinkEmuCss;
    public static string LinkEmuScript;
    public string Html { get; }
    public StackTraceHtmlBuilderWithResolve(string text, ISolution solution, StackTracePathResolverCache pathResolverCache);
    public void BuildHeader();
    public void BuildFooter();
    public string get_Html();
    protected virtual IDisposable Link(string href);
    protected virtual IDisposable LinkEmuLink(string href);
    protected virtual IDisposable Colorize(string color);
    protected virtual void Append(string text);
    protected virtual void AppendQuoted(string text);
    protected static string EscapeHtmlString(string s);
    private static string LinesToHtml(string line);
    protected virtual void AppendQuotedNodeText(StackTraceNode node);
    protected virtual void LinkGenerated(string uri, IProjectFile file, int line, int col);
    protected virtual void AppendPath(string path, int line, int column);
    [CompilerGeneratedAttribute]
private void <Link>b__10_0();
    [CompilerGeneratedAttribute]
private void <LinkEmuLink>b__11_0();
    [CompilerGeneratedAttribute]
private void <Colorize>b__12_0();
}
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTraceLeafResolution : StackTraceCandidateResolutionBase {
    public StackTraceLeafResolution(IClrDeclaredElement candidate);
    public virtual bool IsFullyResolved();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTraceManager : object {
    [CompilerGeneratedAttribute]
private Lifetime <myLifetime>P;
    [CompilerGeneratedAttribute]
private StackTracePathResolverCache <myPathResolverCache>P;
    [CompilerGeneratedAttribute]
private ISolution <mySolution>P;
    [CompilerGeneratedAttribute]
private ILazy`1<IPsiFiles> <myPsiFiles>P;
    [CompilerGeneratedAttribute]
private ILazy`1<ToolWindowManager> <myToolWindowManager>P;
    [CompilerGeneratedAttribute]
private ILazy`1<StackTraceSessionFactory> <myStackTraceSessionFactory>P;
    [CompilerGeneratedAttribute]
private ILazy`1<IActionBarManager> <myActionBarManager>P;
    [CompilerGeneratedAttribute]
private ILazy`1<StackTraceOptions> <myOptions>P;
    public static DataConstant`1<ITextControl> ACTIVE_STACK_TRACE_TEXT_CONTROL;
    public static DataConstant`1<StackTraceSession> SESSION;
    public static string HighlighterKey;
    public StackTraceManager(Lifetime myLifetime, StackTracePathResolverCache myPathResolverCache, ISolution mySolution, ILazy`1<IPsiFiles> myPsiFiles, ILazy`1<ToolWindowManager> myToolWindowManager, ILazy`1<StackTraceSessionFactory> myStackTraceSessionFactory, ILazy`1<IActionBarManager> myActionBarManager, ILazy`1<StackTraceOptions> myOptions);
    private static StackTraceManager();
    [GuardAttribute("1")]
public sealed virtual string BuildHtml(string text, StackTraceNode node, bool scaffolding);
    public virtual void Open(string stackTraceText, string tabTitle);
    public virtual void OpenWithoutNormalization(string stackTraceText);
    [GuardAttribute("1")]
public sealed virtual string RenderHtml(string text, bool scaffolding);
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTraceNavigationInfo : ValueType {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ProjectFileTextRange> <TextRanges>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NotNullAttribute]
public IReadOnlyList`1<ProjectFileTextRange> TextRanges { get; }
    [NotNullAttribute]
public string Message { get; }
    public StackTraceNavigationInfo(IReadOnlyList`1<ProjectFileTextRange> textRanges, string message);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ProjectFileTextRange> get_TextRanges();
    [CompilerGeneratedAttribute]
public string get_Message();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.StackTraces.StackTraceOldResolveHelper : object {
    private static Regex ourTypeArgsRegex;
    private static Regex ourLambdaMethodNameRegex;
    private static StackTraceOldResolveHelper();
    [ExtensionAttribute]
public static IEnumerable`1<ITypeElement> ResolveType(IdentifierNode node, ISolution solution);
    private static IEnumerable`1<ITypeElement> ResolveType(IEnumerable`1<string> components, ISolution solution);
    private static IEnumerable`1<IClrDeclaredElement> GetNestedElements(ISymbolScope symbolScope, IDeclaredElement element, string shortName);
    private static IEnumerable`1<IClrDeclaredElement> GetNestedElementsByClrName(ISymbolScope symbolScope, IDeclaredElement element, string nestedName);
    public static String[] GetTypeComponenets(IdentifierNode typeNode);
    public static bool IsTypeParametersCountMatched(ITypeMember typeMember, IdentifierNode node);
    private static int GetMethodStartOffset(MethodNode node);
    [ExtensionAttribute]
public static IList`1<ResolvedMethod> Resolve(MethodNode node, ISolution solution);
    public static string GetLambdaMethodName(string shortName);
    private static int QualifierLength(IEnumerable`1<string> comps);
    private static bool IsInterfaceQualificationMatched(ITypeMember member, string interfaceQualifier);
    private static string GetTypeShortName(string typeSpec);
    private static string GetTypeShortName(IType type);
}
public abstract class JetBrains.ReSharper.Feature.Services.StackTraces.StackTraceProtocolHandlerBase : ProtocolHandler {
    private SolutionsManager mySolutionManager;
    [CompilerGeneratedAttribute]
private IThreading <Threading>k__BackingField;
    public IThreading Threading { get; }
    protected StackTraceProtocolHandlerBase(SolutionsManager solutionManager, IThreading threading);
    [CompilerGeneratedAttribute]
public IThreading get_Threading();
    protected virtual void NavigateNakedLink(string link, object host);
    protected abstract virtual void Navigate(ISolution solution, string hyperlink);
    protected static Nullable`1<ValueTuple`2<string, ValueTuple`2<int, int>>> ParsePathRef(string spec);
    protected static DocOffset MakeValidCaretOffset(ValueTuple`2<int, int> coordsOneBased, IDocument document);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.StackTraces.StackTraceResolveHelper : object {
    public static StackTraceNavigationInfo GetNavigationsToCodeWithElement(IDeclaredElement element, IdentifierNode node, ISolution solution, CompositeNode rootNode);
    [ExtensionAttribute]
public static void ResolveCandidates(IdentifierNode identifierNode, ISolution solution);
    private static void FillResolveStates(IReadOnlyList`1<StackTraceCandidateResolutionBase> candidateResolutions, IdentifierNode identifierNode);
    private static bool IsSystemNamespace(INamespace ns);
    private static bool IsSystemEntity(IClrDeclaredElement declaredElement);
    private static IReadOnlyList`1<IClrDeclaredElement> MergeDuplicatingSystemEntities(IReadOnlyList`1<IClrDeclaredElement> identifierResolveCandidates);
    private static void FillResolveStates(IReadOnlyList`1<StackTraceCandidateResolutionBase> candidateResolutions, int level, IReadOnlyList`1<List`1<IClrDeclaredElement>> state);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTraceSessionFactory : object {
    private IDocumentMarkupManager myDocumentMarkupManager;
    private ISolution mySolution;
    private IShellLocks myLocks;
    private ITextControlManager myTextControlManager;
    private StackTraceOptions myOptions;
    private IIdeInMemoryDocumentFactory myIdeDocumentFactory;
    private IWindowsHookManager myHookManager;
    private StackTracePathResolverCache myPathResolverCache;
    private IMainWindowPopupWindowContext myMainWindowPopupWindowContext;
    private IActionManager myActionManager;
    private CandidatesNavigator myCandidatesNavigator;
    private LinkNavigator myLinkNavigator;
    private LifetimeDefinition myListLifetimeDefinition;
    private LifetimeDefinition myTextControlActivationLifetimeDefinition;
    private IRunningDocuments myRunDocs;
    private ResultListManager myResultListManager;
    public StackTraceSessionFactory(IDocumentMarkupManager documentMarkupManager, IShellLocks locks, ITextControlManager textControlManager, ISolution solution, StackTraceOptions options, IIdeInMemoryDocumentFactory ideDocumentFactory, IWindowsHookManager hookManager, StackTracePathResolverCache pathResolverCache, IMainWindowPopupWindowContext mainWindowPopupWindowContext, IActionManager actionManager, CandidatesNavigator candidatesNavigator, LinkNavigator linkNavigator, IRunningDocuments runDocs, ResultListManager resultListManager);
    [NotNullAttribute]
public StackTraceSession CreateStackTraceSession(Lifetime lifetime, string text, WindowFrame frame);
    [NotNullAttribute]
public StackTraceSession CreateStackTraceSessionCore(Lifetime lifetime, string text, bool isNormalizeText, WindowFrame frame, IProperty`1<bool> wordWrapOverride);
    public StackTraceSession CreateStackTraceSessionWithoutNormalization(WindowFrame frame, Lifetime lifetime, string text, IProperty`1<bool> wordWrap);
    private TextControlAutomation CreateTextControl(Lifetime lifetime, IDocument document, IProperty`1<bool> wordWrap, WindowFrame frame);
    private IDocument CreateDocument(Lifetime lifetime, string text, bool isNormalizeText);
    private void PushResultList(StackTraceSession session, ResultListManager resultListManager, Lifetime lifetime);
    private void PushActiveStackTraceTextControl(ITextControl textControl, Lifetime lifetime);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.StackTraces.StackTraceTextRecognitionUtil : object {
    public static int MinStackTraceLength;
    public static int MaxStackTraceLength;
    public static bool ContainsStackTraceHeuristically(string text);
    private static int FindLineBreak(string text, int startIndex);
    [ExtensionAttribute]
private static bool IsNewLineCharacter(char character);
    private static TextRange FindStartingPreposition(string text, int startIndex);
    private static bool AreWordsEqual(string text, TextRange first, TextRange second);
    private static bool IsTextInRangeSimilarToStackTrace(string text, TextRange range);
    private static TextRange FindQualifiedIdentifier(string text, TextRange range);
    private static bool ContainsParentheses(string text, TextRange range);
}
[ToolWindowDescriptorAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTraceToolWindowDescriptor : ToolWindowDescriptor {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Feature.Services.StackTraces.StackTraceToolWindowEmptyContent : ToolWindowEmptyContentWithActionHint {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
private StackTraceToolWindowEmptyContent(StackTraceToolWindowEmptyContent original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(StackTraceToolWindowEmptyContent left, StackTraceToolWindowEmptyContent right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(StackTraceToolWindowEmptyContent left, StackTraceToolWindowEmptyContent right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ToolWindowEmptyContentWithActionHint other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(StackTraceToolWindowEmptyContent other);
    [CompilerGeneratedAttribute]
public virtual AAutomationRecord <Clone>$();
}
public static class JetBrains.ReSharper.Feature.Services.StackTraces.StackTraceTypeKeywords : object {
    public static Dictionary`2<string, IClrTypeName> TypeKeywords;
    private static StackTraceTypeKeywords();
}
public class JetBrains.ReSharper.Feature.Services.StackTraces.StackTraceWpfBuilderWithResolve : StackTraceBuilderWithResolveBase {
    private LinkNavigator myLinkNavigator;
    private List`1<Block> myBlocks;
    private List`1<Inline> myBlockInlines;
    private List`1<Inline> mySpanInlines;
    private Span myCurrentSpan;
    private StringBuilder myCurrentText;
    private StringBuilder myFullText;
    private Brush myBrush;
    private Lifetime myLifetime;
    private Color myExpectedBackground;
    private bool myAutocontrast;
    private Dictionary`2<string, Brush> myBrushes;
    public string BareText { get; }
    public IEnumerable`1<Block> Blocks { get; }
    public StackTraceWpfBuilderWithResolve(Lifetime lifetime, ISolution solution, LinkNavigator linkNavigator, StackTracePathResolverCache pathResolverCache, string text);
    public StackTraceWpfBuilderWithResolve(Lifetime lifetime, ISolution solution, LinkNavigator linkNavigator, StackTracePathResolverCache pathResolverCache, string text, Color expectedBackground);
    private StackTraceWpfBuilderWithResolve(Lifetime lifetime, ISolution solution, LinkNavigator linkNavigator, StackTracePathResolverCache pathResolverCache, string text, Color expectedBackground, bool autocontrast);
    public sealed virtual string get_BareText();
    public sealed virtual IEnumerable`1<Block> get_Blocks();
    private void FinishText();
    private void FinishSpan();
    private void FinishBlock();
    protected virtual void AppendQuotedNodeText(StackTraceNode node);
    protected virtual void LinkGenerated(string uri, IProjectFile file, int line, int col);
    protected virtual void AppendPath(string path, int line, int column);
    protected virtual IDisposable Colorize(string color);
    private void Uncolorize();
    protected virtual IDisposable Link(string href);
    protected virtual IDisposable LinkEmuLink(string href);
    private void RemoveUnderLine(object sender);
    private void Underline(object sender);
    private void Navigate(string href);
    protected virtual void Append(string text);
    protected virtual void AppendQuoted(string text);
}
[ProtocolHandlerAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.StackTraces.XmlDocProtocolHandler : StackTraceProtocolHandlerBase {
    private IActionManager myActionManager;
    public XmlDocProtocolHandler(SolutionsManager solutionManager, IThreading threading, IActionManager actionManager);
    protected virtual void Navigate(ISolution solution, string uri);
}
public interface JetBrains.ReSharper.Feature.Services.StickyLines.Processor.IStickyLinesProcessor {
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.StickyLines.Processor.IStickyLinesProcessorFactory {
    public abstract virtual IStickyLinesProcessor CreateProcessor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.StickyLines.Processor.StickyLinesConsumer : object {
    [CompilerGeneratedAttribute]
private Action`1<StickyLineInfo> <processor>P;
    public StickyLinesConsumer(Action`1<StickyLineInfo> processor);
    [NullableContextAttribute("2")]
public void AddStickyScrollRegion(DocumentRange range, string debugText);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.StickyLines.StickyLineInfo : object {
    [CompilerGeneratedAttribute]
private DocumentRange <Range>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugText>k__BackingField;
    public DocumentRange Range { get; }
    public string DebugText { get; }
    public StickyLineInfo(DocumentRange range, string debugText);
    [CompilerGeneratedAttribute]
public DocumentRange get_Range();
    [CompilerGeneratedAttribute]
public string get_DebugText();
}
[ActionAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "StructuralNavigationBackwardActionText")]
public class JetBrains.ReSharper.Feature.Services.StructuralNavigation.Actions.StructuralNavigationBackwardAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
[ActionAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "StructuralNavigationForwardActionText")]
public class JetBrains.ReSharper.Feature.Services.StructuralNavigation.Actions.StructuralNavigationForwardAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
public abstract class JetBrains.ReSharper.Feature.Services.StructuralNavigation.Actions.TabNavigationActionBase : OverridingActionHandler {
    public ActionHandlerPriority Priority { get; }
    protected bool IsBackward { get; }
    protected TabNavigationActionBase(string actionId);
    public virtual ActionHandlerPriority get_Priority();
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext context);
    protected abstract virtual void Navigate(StructuralNavigationManager manager, ITextControl textControl, ISolution solution, Action fallbackAction);
    public static bool ShouldFallback(ISolution solution, ITextControl textControl, IDataContext context, bool forBackwardAction);
    protected abstract virtual bool get_IsBackward();
    private static Nullable`1<LineEndCaretPositionKind> GetLineEndKind(CachingLexer lexer, ITextControl textControl, DocumentRange selection);
    private static bool IsCaretWithinCommentOrStringLiteral(CachingLexer lexer, ISolution solution, DocumentRange selection);
}
public class JetBrains.ReSharper.Feature.Services.StructuralNavigation.Actions.TabNavigationBackwardAction : TabNavigationActionBase {
    protected bool IsBackward { get; }
    protected virtual void Navigate(StructuralNavigationManager manager, ITextControl textControl, ISolution solution, Action fallbackAction);
    protected virtual bool get_IsBackward();
}
public class JetBrains.ReSharper.Feature.Services.StructuralNavigation.Actions.TabNavigationForwardAction : TabNavigationActionBase {
    protected bool IsBackward { get; }
    protected virtual void Navigate(StructuralNavigationManager manager, ITextControl textControl, ISolution solution, Action fallbackAction);
    protected virtual bool get_IsBackward();
}
internal class JetBrains.ReSharper.Feature.Services.StructuralNavigation.BackwardOrCurrentStructuralNavigationContext : BackwardStructuralNavigationContext {
    private DocumentRange myCurrentSelection;
    [CanBeNullAttribute]
private IStructuralNavigationItem myPreviousItem;
    public BackwardOrCurrentStructuralNavigationContext(DocumentRange currentSelection, ITreeNode currentNode, IStructuralNavigationItemValidator additionalValidator);
    public virtual void TryAddResult(IStructuralNavigationItem item);
    public virtual void FinishTraverse();
}
internal class JetBrains.ReSharper.Feature.Services.StructuralNavigation.BackwardStructuralNavigationContext : StructuralNavigationContextBase {
    public BackwardStructuralNavigationContext(DocumentRange currentSelection, ITreeNode currentNode, IStructuralNavigationItemValidator additionalValidator);
    protected BackwardStructuralNavigationContext(IStructuralNavigationItemValidator[] validators, ITreeNode currentNode);
    public virtual IEnumerator`1<ITreeNode> EnumerateNodes();
    public virtual void TryAddMultipleResults(IStructuralNavigationItem[] items);
}
internal class JetBrains.ReSharper.Feature.Services.StructuralNavigation.BackwardStructuralNavigationController : object {
    private DocumentRange myCurrentSelection;
    private bool myAcceptCurrentSelection;
    public BackwardStructuralNavigationController(DocumentRange currentSelection, bool acceptCurrentSelection);
    public sealed virtual ITreeNode GetAdjustedNode(ITreeNode treeNode);
    public sealed virtual DocumentOffset GetOffset(DocumentRange textRange);
    public sealed virtual bool IsAvailableForOffset(DocumentOffset fileOffset);
    public sealed virtual IEnumerable`1<DocumentRange> GetIntersectingRanges(IFile file);
    public sealed virtual bool IsNavigationDisabled(ITreeNode treeNode, bool isSelectedByFallbackAction);
    public sealed virtual IStructuralNavigationItem GetNavigationItem(IStructuralNavigationAlgorithm algorithm, ITreeNode treeNode, IStructuralNavigationItemValidatorProvider additionalValidatorsProvider);
    public sealed virtual IStructuralNavigationItem SelectBestRange(IEnumerable`1<IStructuralNavigationItem> candidates);
}
public class JetBrains.ReSharper.Feature.Services.StructuralNavigation.BackwardStructuralNavigationItemValidator : object {
    private DocumentRange myCurrentSelection;
    private bool myAcceptCurrentSelection;
    public BackwardStructuralNavigationItemValidator(DocumentRange currentSelection, bool acceptCurrentSelection);
    public sealed virtual bool IsItemAccepted(IStructuralNavigationItem item);
}
public abstract class JetBrains.ReSharper.Feature.Services.StructuralNavigation.CLikeLanguageStructuralNavigationStringTokenDisablerBase : object {
    public virtual bool IsKnownToken(TokenNodeType tokenNodeType, ProjectFileType projectFileType);
    public virtual bool IsWithinStringLiteralContent(CachingLexer lexer, TextRange selectedRange);
    public virtual bool IsWithinCommentBody(ILexer lexer, TextRange selectedRange);
    protected abstract virtual bool IsStringLiteralToken(TokenNodeType tokenNodeType);
    protected abstract virtual bool IsEndOfLineComment(TokenNodeType tokenNodeType);
    protected abstract virtual bool IsBlockComment(TokenNodeType tokenNodeType);
    [CanBeNullAttribute]
protected abstract virtual string GetStringLiteralStartBorder(TokenNodeType tokenNodeType, CachingLexer lexer);
    [CanBeNullAttribute]
protected abstract virtual string GetStringLiteralEndBorder(TokenNodeType tokenNodeType, CachingLexer lexer);
}
public interface JetBrains.ReSharper.Feature.Services.StructuralNavigation.Data.IStructuralNavigationItem {
    [PureAttribute]
public abstract virtual DocumentRange GetDocumentRange();
    [CanBeNullAttribute]
public abstract virtual ITreeRange TryGetTreeRange();
    [PureAttribute]
public abstract virtual int CalculateVirtualOffset(int tabSize);
}
public class JetBrains.ReSharper.Feature.Services.StructuralNavigation.Data.StructuralNavigationDocumentRange : object {
    private DocumentRange myDocumentRange;
    public StructuralNavigationDocumentRange(DocumentRange documentRange);
    public sealed virtual DocumentRange GetDocumentRange();
    public sealed virtual ITreeRange TryGetTreeRange();
    public virtual int CalculateVirtualOffset(int tabSize);
}
public class JetBrains.ReSharper.Feature.Services.StructuralNavigation.Data.StructuralNavigationTreeNode`1 : object {
    private bool myUseUnquotedRange;
    [CompilerGeneratedAttribute]
private TNode <Node>k__BackingField;
    [NotNullAttribute]
public TNode Node { get; }
    public StructuralNavigationTreeNode`1(TNode node, bool useUnquotedRange);
    [CompilerGeneratedAttribute]
public TNode get_Node();
    public virtual DocumentRange GetDocumentRange();
    public virtual ITreeRange TryGetTreeRange();
    public sealed virtual int CalculateVirtualOffset(int tabSize);
}
public class JetBrains.ReSharper.Feature.Services.StructuralNavigation.Data.StructuralNavigationTreeRange : object {
    [NotNullAttribute]
private ITreeRange myTreeRange;
    public StructuralNavigationTreeRange(ITreeRange treeRange);
    public StructuralNavigationTreeRange(ITreeNode first, ITreeNode last);
    public sealed virtual DocumentRange GetDocumentRange();
    public sealed virtual ITreeRange TryGetTreeRange();
    public sealed virtual int CalculateVirtualOffset(int tabSize);
}
public class JetBrains.ReSharper.Feature.Services.StructuralNavigation.Data.StructuralNavigationTreeTextRange : object {
    [NotNullAttribute]
private IFile myContainingFile;
    private TreeTextRange myTreeTextRange;
    public StructuralNavigationTreeTextRange(IFile containingFile, TreeTextRange treeTextRange);
    public StructuralNavigationTreeTextRange(IFile containingFile, TreeOffset offset);
    public sealed virtual DocumentRange GetDocumentRange();
    public sealed virtual ITreeRange TryGetTreeRange();
    public sealed virtual int CalculateVirtualOffset(int tabSize);
}
public class JetBrains.ReSharper.Feature.Services.StructuralNavigation.Data.StructuralNavigationVirtualRange : StructuralNavigationDocumentRange {
    private string myIndentingSample;
    private int myVirtualTabsCount;
    public StructuralNavigationVirtualRange(DocumentRange documentRange);
    public StructuralNavigationVirtualRange(DocumentRange documentRange, string indentingSample);
    public StructuralNavigationVirtualRange(DocumentRange documentRange, string indentingSample, int virtualTabsCount);
    public virtual int CalculateVirtualOffset(int tabSize);
}
internal class JetBrains.ReSharper.Feature.Services.StructuralNavigation.ForwardStructuralNavigationContext : StructuralNavigationContextBase {
    public ForwardStructuralNavigationContext(ITreeNode currentNode, DocumentRange currentSelection, IStructuralNavigationItemValidator additionalValidator);
    public virtual IEnumerator`1<ITreeNode> EnumerateNodes();
    public virtual void TryAddMultipleResults(IStructuralNavigationItem[] items);
}
internal class JetBrains.ReSharper.Feature.Services.StructuralNavigation.ForwardStructuralNavigationController : object {
    private DocumentRange myCurrentSelection;
    public ForwardStructuralNavigationController(DocumentRange currentSelection);
    public sealed virtual ITreeNode GetAdjustedNode(ITreeNode treeNode);
    public sealed virtual DocumentOffset GetOffset(DocumentRange textRange);
    public sealed virtual bool IsAvailableForOffset(DocumentOffset fileOffset);
    public sealed virtual IEnumerable`1<DocumentRange> GetIntersectingRanges(IFile file);
    public sealed virtual bool IsNavigationDisabled(ITreeNode treeNode, bool isSelectedByFallbackAction);
    public sealed virtual IStructuralNavigationItem GetNavigationItem(IStructuralNavigationAlgorithm algorithm, ITreeNode treeNode, IStructuralNavigationItemValidatorProvider additionalValidatorsProvider);
    public sealed virtual IStructuralNavigationItem SelectBestRange(IEnumerable`1<IStructuralNavigationItem> candidates);
}
public class JetBrains.ReSharper.Feature.Services.StructuralNavigation.ForwardStructuralNavigationItemValidator : object {
    private DocumentRange myCurrentSelection;
    public ForwardStructuralNavigationItemValidator(DocumentRange currentSelection);
    public sealed virtual bool IsItemAccepted(IStructuralNavigationItem item);
}
public interface JetBrains.ReSharper.Feature.Services.StructuralNavigation.IStructuralNavigationAlgorithm {
    [CanBeNullAttribute]
public abstract virtual IStructuralNavigationItem MoveToNext(StructuralNavigationContextBase context);
    [CanBeNullAttribute]
public abstract virtual IStructuralNavigationItem MoveToPrev(StructuralNavigationContextBase context);
}
internal interface JetBrains.ReSharper.Feature.Services.StructuralNavigation.IStructuralNavigationController {
    public abstract virtual ITreeNode GetAdjustedNode(ITreeNode treeNode);
    public abstract virtual DocumentOffset GetOffset(DocumentRange textRange);
    [CanBeNullAttribute]
public abstract virtual IStructuralNavigationItem GetNavigationItem(IStructuralNavigationAlgorithm algorithm, ITreeNode treeNode, IStructuralNavigationItemValidatorProvider additionalValidatorProvider);
    [CanBeNullAttribute]
public abstract virtual IStructuralNavigationItem SelectBestRange(IEnumerable`1<IStructuralNavigationItem> candidates);
    public abstract virtual bool IsAvailableForOffset(DocumentOffset fileOffset);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<DocumentRange> GetIntersectingRanges(IFile file);
    public abstract virtual bool IsNavigationDisabled(ITreeNode treeNode, bool isSelectedByFallbackAction);
}
public interface JetBrains.ReSharper.Feature.Services.StructuralNavigation.IStructuralNavigationDisabler {
    public abstract virtual bool IsForwardDisabled(ITreeNode treeNode, DocumentRange selectedRange, bool isSelectedByFallbackAction);
    public abstract virtual bool IsBackwardDisabled(ITreeNode treeNode, DocumentRange selectedRange, bool isSelectedByFallbackAction);
}
public interface JetBrains.ReSharper.Feature.Services.StructuralNavigation.IStructuralNavigationItemValidator {
    public abstract virtual bool IsItemAccepted(IStructuralNavigationItem item);
}
public interface JetBrains.ReSharper.Feature.Services.StructuralNavigation.IStructuralNavigationItemValidatorProvider {
    [CanBeNullAttribute]
public abstract virtual IStructuralNavigationItemValidator GetValidator(IFile file, DocumentRange currentSelection, bool acceptCurrentSelection);
}
public interface JetBrains.ReSharper.Feature.Services.StructuralNavigation.IStructuralNavigationTokenDisabler {
    public abstract virtual bool IsKnownToken(TokenNodeType tokenNodeType, ProjectFileType projectFileType);
    public abstract virtual bool IsWithinStringLiteralContent(CachingLexer lexer, TextRange selectedRange);
    public abstract virtual bool IsWithinCommentBody(ILexer lexer, TextRange selectedRange);
}
public abstract class JetBrains.ReSharper.Feature.Services.StructuralNavigation.StructuralNavigationContextBase : object {
    [NotNullAttribute]
private IStructuralNavigationItemValidator[] myValidators;
    [CompilerGeneratedAttribute]
private IStructuralNavigationItem <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNode <TraverseStartNode>k__BackingField;
    [CanBeNullAttribute]
public IStructuralNavigationItem Result { get; protected set; }
    [NotNullAttribute]
public ITreeNode TraverseStartNode { get; }
    protected StructuralNavigationContextBase(IStructuralNavigationItemValidator[] validators, ITreeNode currentNode);
    [CompilerGeneratedAttribute]
public IStructuralNavigationItem get_Result();
    [CompilerGeneratedAttribute]
protected void set_Result(IStructuralNavigationItem value);
    [CompilerGeneratedAttribute]
public ITreeNode get_TraverseStartNode();
    public abstract virtual IEnumerator`1<ITreeNode> EnumerateNodes();
    public abstract virtual void TryAddMultipleResults(IStructuralNavigationItem[] items);
    public virtual void FinishTraverse();
    public virtual void TryAddResult(IStructuralNavigationItem item);
    [ContractAnnotationAttribute("null => false")]
protected bool IsItemAccepted(IStructuralNavigationItem item);
}
[IsReadOnlyAttribute]
internal class JetBrains.ReSharper.Feature.Services.StructuralNavigation.StructuralNavigationInfo : ValueType {
    [CompilerGeneratedAttribute]
private IStructuralNavigationItem <NavigationItem>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasNavigateableLanguages>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldFallback>k__BackingField;
    [CanBeNullAttribute]
public IStructuralNavigationItem NavigationItem { get; }
    public DocumentRange Selection { get; }
    public bool HasNavigateableLanguages { get; }
    public bool ShouldFallback { get; }
    public StructuralNavigationInfo(bool hasNavigateableLanguages, bool shouldFallback);
    public StructuralNavigationInfo(IStructuralNavigationItem navigationItem, bool hasNavigateableLanguages, bool shouldFallback);
    [CompilerGeneratedAttribute]
public IStructuralNavigationItem get_NavigationItem();
    public DocumentRange get_Selection();
    [CompilerGeneratedAttribute]
public bool get_HasNavigateableLanguages();
    [CompilerGeneratedAttribute]
public bool get_ShouldFallback();
    [PureAttribute]
public int GetVirtualOffset(ITextControl textControl);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.StructuralNavigation.StructuralNavigationManager : object {
    [NotNullAttribute]
public static string TabStatisticsKey;
    [NotNullAttribute]
private UsageStatistics myUsageStatistics;
    [NotNullAttribute]
private IExternalIntellisenseHost myExternalIntellisenseHost;
    [NotNullAttribute]
private VsStructuralNavigationDisabler myVsStructuralNavigationDisabler;
    [NotNullAttribute]
private StructuralNavigationUsagesCollector myUsagesCollector;
    [NotNullAttribute]
private Property`1<bool> myIsSelectedByTabNavigation;
    [NotNullAttribute]
private Property`1<bool> myIsSelectedByFallbackAction;
    public bool IsSelectedByTabNavigation { get; private set; }
    public bool IsSelectedByFallbackAction { get; private set; }
    public IProperty`1<bool> IsSelectedByTabNavigationLive { get; }
    public IProperty`1<bool> IsSelectedByFallbackActionLive { get; }
    public bool CycleSelection { get; }
    public StructuralNavigationManager(Lifetime lifetime, IActionManager actionManager, UsageStatistics usageStatistics, ContextManager contextManager, ITextControlManager textControlManager, IExternalIntellisenseHost externalIntellisenseHost, VsStructuralNavigationDisabler vsStructuralNavigationDisabler, StructuralNavigationUsagesCollector usagesCollector);
    public bool IsDisabledByIntellisense(ITextControl textControl);
    public virtual bool get_IsSelectedByTabNavigation();
    private void set_IsSelectedByTabNavigation(bool value);
    public virtual bool get_IsSelectedByFallbackAction();
    private void set_IsSelectedByFallbackAction(bool value);
    public IProperty`1<bool> get_IsSelectedByTabNavigationLive();
    public IProperty`1<bool> get_IsSelectedByFallbackActionLive();
    public virtual bool get_CycleSelection();
    public void MoveToNext(ITextControl textControl, ISolution solution, Action fallbackAction, StructuralNavigationTrigger trigger);
    public void MoveToPrev(ITextControl textControl, ISolution solution, Action fallbackAction, StructuralNavigationTrigger trigger);
    private StructuralNavigationInfo TryGetNavigationInfo(IStructuralNavigationController controller, ITextControl textControl, ISolution solution);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.StructuralNavigation.StructuralNavigationManager/<ScrollToNearest>d__24")]
[NotNullAttribute]
private static IEnumerable`1<ValueTuple`2<DocumentRange, IFile>> ScrollToNearest(IEnumerable`1<IFile> files, IStructuralNavigationController controller, int caretOffset);
    private void SetNewSelection(StructuralNavigationInfo navigationInfo, ISolution solution, ITextControl textControl, StructuralNavigationTrigger trigger, bool denormalizeRange);
    private void SubscribeSelectionFlagReset(ITextControlManager textControlManager, Lifetime lt);
    [CompilerGeneratedAttribute]
private void <SubscribeSelectionFlagReset>b__26_0(PropertyChangedEventArgs`1<IEquatableList`1<TextControlPosRange>> args);
    [CompilerGeneratedAttribute]
private void <SubscribeSelectionFlagReset>b__26_1(PropertyChangedEventArgs`1<ITextControlPos> args);
    [CompilerGeneratedAttribute]
private void <SubscribeSelectionFlagReset>g__Reset|26_2();
}
public static class JetBrains.ReSharper.Feature.Services.StructuralNavigation.StructuralNavigationSharedTreeUtil : object {
    [CanBeNullAttribute]
public static IStructuralNavigationItem GetWhitespaceItemInBraces(ITreeNode lBrace, ITreeNode rBrace);
}
public enum JetBrains.ReSharper.Feature.Services.StructuralNavigation.StructuralNavigationTrigger : Enum {
    public int value__;
    public static StructuralNavigationTrigger Tab;
    public static StructuralNavigationTrigger CustomShortcut;
}
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.StructuralNavigation.StructuralNavigationUsagesCollector : CounterUsagesCollector {
    private EventLogGroup myGroup;
    private EventId myExecutedEvent;
    public StructuralNavigationUsagesCollector(FeatureUsageLogger featureUsageLogger);
    public virtual EventLogGroup GetGroup();
    public void LogInvoked(ISolution solution);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.StructuralNavigation.TabNavigationExplainer : object {
    [NotNullAttribute]
private ISettingsStore mySettingsStore;
    [NotNullAttribute]
private IUsageStatisticsCounters myUsageStatisticsCounters;
    [NotNullAttribute]
private IFeatureSuggestionNotificationProvider myNotificationProvider;
    [NotNullAttribute]
private IThreading myThreading;
    [NotNullAttribute]
private OptionsManager myOptionsManager;
    [NotNullAttribute]
private Property`1<bool> myDisableMe;
    public IFeatureSuggestionAspect[] Aspects { get; }
    public TabNavigationExplainer(Lifetime lifetime, ISettingsStore settingsStore, IUsageStatisticsCounters usageStatisticsCounters, IFeatureSuggestionNotificationProvider notificationProvider, IThreading threading, OptionsManager optionsManager);
    public sealed virtual IFeatureSuggestionAspect[] get_Aspects();
    public sealed virtual IProperty`1<IFeatureSuggestion> Subscribe(Lifetime lifetime, FeatureSuggestionMode mode);
    private void ExplainTabNavigation(Lifetime lifetime, IProperty`1<IFeatureSuggestion> suggestion);
    private void GoToOptions();
    [CompilerGeneratedAttribute]
private void <GoToOptions>b__11_0();
}
public class JetBrains.ReSharper.Feature.Services.StructuralNavigation.TokenTypeBasedStructuralNavigationItemValidator : object {
    protected IFile CurrentFile;
    protected DocumentRange TrimmedCurrentSelection;
    protected bool AcceptCurrentSelection;
    protected bool TrimNotMeaningful;
    protected NodeTypeSet TokenNodeTypesToTrim;
    public TokenTypeBasedStructuralNavigationItemValidator(IFile file, DocumentRange currentSelection, bool acceptCurrentSelection, bool trimNotMeaningful, TokenNodeType[] tokenNodeTypesToTrim);
    protected DocumentRange GetTrimmedDocumentRange(DocumentRange range);
    protected virtual bool CanBeTrimmed(ITokenNode tokenNode);
    public sealed virtual bool IsItemAccepted(IStructuralNavigationItem item);
    protected virtual bool IsItemAccepted(DocumentRange range);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.StructuralNavigation.VsStructuralNavigationDisabler : object {
    public virtual bool IsDisabled(ITextControl textControl);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.StructuralNavigation.ZoneMarker : object {
}
public interface JetBrains.ReSharper.Feature.Services.StructuralRemove.IStructuralRemoveProvider {
    [PureAttribute]
public abstract virtual StructuralRemoveRanges TryCreate(ITreeRange treeRange);
}
public enum JetBrains.ReSharper.Feature.Services.StructuralRemove.StructuralRemoveAction : Enum {
    public int value__;
    public static StructuralRemoveAction Delete;
    public static StructuralRemoveAction Backspace;
    public static StructuralRemoveAction Cut;
    public static StructuralRemoveAction WordDeleteToEnd;
    public static StructuralRemoveAction WordDeleteToStart;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.StructuralRemove.StructuralRemoveManager : object {
    [CompilerGeneratedAttribute]
private ISolution <solution>P;
    [CompilerGeneratedAttribute]
private LastTypingAction <lastTypingAction>P;
    [CompilerGeneratedAttribute]
private ILanguageManager <languageManager>P;
    [CompilerGeneratedAttribute]
private ICommandProcessor <commandProcessor>P;
    [CompilerGeneratedAttribute]
private UsageStatistics <usageStatistics>P;
    [CompilerGeneratedAttribute]
private DocumentCommandProcessor <documentCommandProcessor>P;
    [CompilerGeneratedAttribute]
private ILogger <logger>P;
    private static Key`1<Boxed`1<StructuralRemoveRanges>> ourRangesKey;
    private static string StructuralSelectionActionKey;
    private static string StructuralRemoveActionKey;
    public StructuralRemoveManager(ISolution solution, LastTypingAction lastTypingAction, ILanguageManager languageManager, ICommandProcessor commandProcessor, UsageStatistics usageStatistics, DocumentCommandProcessor documentCommandProcessor, ILogger logger);
    private static StructuralRemoveManager();
    [NullableContextAttribute("2")]
[PureAttribute]
public StructuralRemoveRanges GetRemoveRangesFor(ITreeRange treeRange);
    public bool TryHandleRemove(ITextControl textControl, IActionContext actionContext, StructuralRemoveAction removeAction);
    private bool ExecuteStructuralRemove(ITextControl textControl, IActionContext actionContext, StructuralRemoveAction removeAction, DocumentRange selectionRange, DocumentRange removeRange, StructuralSelectionInfo structuralSelectionInfo);
    [PureAttribute]
private static bool IsKeyAction(StructuralRemoveAction action);
    [PureAttribute]
private static bool IsBackspaceAction(StructuralRemoveAction action);
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.StructuralSelection.IStructuralSelectionHandler.HandleSelection(ITreeRange treeRange, UserDataHolder precomputedData);
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Feature.Services.StructuralRemove.StructuralRemoveRanges : ValueType {
    [CompilerGeneratedAttribute]
private DocumentRange <BackspaceRange>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <DeleteRange>k__BackingField;
    public static StructuralRemoveRanges Invalid;
    public DocumentRange BackspaceRange { get; }
    public DocumentRange DeleteRange { get; }
    public bool IsValid { get; }
    public StructuralRemoveRanges(DocumentRange removalRange);
    public StructuralRemoveRanges(DocumentRange backspaceRange, DocumentRange deleteRange);
    private static StructuralRemoveRanges();
    [CompilerGeneratedAttribute]
public DocumentRange get_BackspaceRange();
    [CompilerGeneratedAttribute]
public DocumentRange get_DeleteRange();
    public bool get_IsValid();
    [PureAttribute]
public static StructuralRemoveRanges FromInterchangeable(DocumentRange backspaceRange, DocumentRange deleteRange);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.StructuralRemove.ZoneMarker : object {
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.AndMatcher : object {
    private IElementMatcher[] myMatchers;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public AndMatcher(IElementMatcher[] matchers);
    public AndMatcher(IEnumerable`1<IElementMatcher> matchers);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual IEnumerable`1<string> get_Words();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.AnyTypeMatcher : object {
    [NotNullAttribute]
public static AnyTypeMatcher Instance;
    public string ShortName { get; }
    private static AnyTypeMatcher();
    public sealed virtual bool MatchType(ITreeNode element, IMatchingContext context);
    public sealed virtual bool MatchType(ITreeNode element, IType elementType, IMatchingContext context);
    public sealed virtual string get_ShortName();
}
[DebuggerDisplayAttribute("{DebuggerRepresentation}")]
public abstract class JetBrains.ReSharper.Feature.Services.StructuralSearch.ElementMatcherBase`1 : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NotNullAttribute]
private List`1<ValueTuple`2<IElementMatcher, Func`2<TTreeNode, ITreeNode>>> myChildren;
    [CompilerGeneratedAttribute]
private ITypeMatcher <TypeMatcher>k__BackingField;
    [CanBeNullAttribute]
protected ITypeMatcher TypeMatcher { get; protected set; }
    public IEnumerable`1<string> Words { get; }
    public IEnumerable`1<IElementMatcher> Children { get; }
    [NotNullAttribute]
private string DebuggerRepresentation { get; }
    [CompilerGeneratedAttribute]
protected ITypeMatcher get_TypeMatcher();
    [CompilerGeneratedAttribute]
protected void set_TypeMatcher(ITypeMatcher value);
    public virtual IEnumerable`1<string> get_Words();
    public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    private string get_DebuggerRepresentation();
    public virtual bool Match(ITreeNode element, IMatchingContext context);
    [NotNullAttribute]
protected IElementMatcher AddMatcher(TTreeNode expression, Func`2<TTreeNode, T2> elementsGetter);
    [NotNullAttribute]
protected IElementMatcher AddMatcher(TTreeNode expression, Func`2<TTreeNode, T2> elementsGetter, Func`3<T2, T2, bool> comparer);
    [NotNullAttribute]
protected IElementMatcher AddMatcher(IElementMatcher matcher, Func`2<TTreeNode, ITreeNode> propertyGetter);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Finding.StructuralSearchDomainSearcher`1 : SearchDomainVisitorParallel {
    private IStructuralSearcher mySearcher;
    private IFindResultConsumer`1<TResult> myConsumer;
    public StructuralSearchDomainSearcher`1(ISearchDomain searchDomain, IStructuralSearcher searcher, IFindResultConsumer`1<TResult> consumer, IProgressIndicator pi);
    protected virtual bool ProcessProjectFile(IPsiSourceFile sourceFile);
    protected virtual bool ProcessAssembly(IPsiAssembly assembly);
    protected virtual bool ProcessElement(ITreeNode element);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Finding.StructuralSearchOccurrence : RangeOccurrence {
    private IStructuralMatchResult myResult;
    public IStructuralMatchResult Result { get; }
    public StructuralSearchOccurrence(IStructuralMatchResult result);
    public IStructuralMatchResult get_Result();
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Finding.StructuralSearchRequest : SearchRequest {
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private ISearchDomain mySearchDomain;
    [NotNullAttribute]
private IStructuralSearchPattern myPattern;
    [NotNullAttribute]
private string myPresentation;
    [NotNullAttribute]
private DocumentManager myDocumentManager;
    [NotNullAttribute]
private SearchDomainFactory mySearchDomainFactory;
    public string Title { get; }
    public ISolution Solution { get; }
    public ICollection SearchTargets { get; }
    [NotNullAttribute]
public IStructuralSearchPattern Pattern { get; }
    [NotNullAttribute]
public ISearchDomain SearchDomain { get; }
    public StructuralSearchRequest(ISolution solution, DocumentManager documentManager, SearchDomainFactory searchDomainFactory, ISearchDomain searchDomain, IStructuralSearchPattern structuralSearchPattern);
    public virtual string get_Title();
    public virtual ISolution get_Solution();
    public virtual ICollection get_SearchTargets();
    public virtual ICollection`1<IOccurrence> Search(IProgressIndicator progressIndicator);
    [CanBeNullAttribute]
public IList`1<IStructuralMatchResult> SearchReplaceTargets(IProgressIndicator progressIndicator);
    private bool DoSearch(IProgressIndicator progressIndicator, IFindResultConsumer`1<TResult> consumer);
    public IStructuralSearchPattern get_Pattern();
    public ISearchDomain get_SearchDomain();
    [NotNullAttribute]
private static ISearchDomain NarrowSearchDomain(ISolution solution, ISearchDomain domain, SearchDomainFactory factory, IReadOnlyCollection`1<string> words, IReadOnlyCollection`1<string> extendedWords);
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.IElementMatcher {
    [NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<IElementMatcher> Children { get; }
    [NotNullAttribute]
[ItemCanBeNullAttribute]
public IEnumerable`1<string> Words { get; }
    [MustUseReturnValueAttribute]
public abstract virtual bool Match(ITreeNode element, IMatchingContext context);
    public abstract virtual IEnumerable`1<IElementMatcher> get_Children();
    public abstract virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.IllegalPlaceholderException : StructuralSearchException {
    [CompilerGeneratedAttribute]
private TextRange <Range>k__BackingField;
    public TextRange Range { get; }
    public IllegalPlaceholderException(string msg, TextRange range);
    [CompilerGeneratedAttribute]
public TextRange get_Range();
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.IMatchingContext {
    [CanBeNullAttribute]
public ITreeNode MatchedElement { get; public set; }
    [CanBeNullAttribute]
public abstract virtual object GetMatchedElement(string placeholderName);
    [CanBeNullAttribute]
public abstract virtual IList`1<object> GetAllMatchedElements(string placeholderName);
    [CanBeNullAttribute]
public abstract virtual IType GetMatchedType(string placeholderName);
    public abstract virtual ITreeNode get_MatchedElement();
    public abstract virtual void set_MatchedElement(ITreeNode value);
    public abstract virtual void RegisterTypeMatcher(ITypeMatcher matcher, ITreeNode element);
    [CanBeNullAttribute]
public abstract virtual IMatchingContext ExecuteDelayedMatchers();
    public abstract virtual bool MatchPlaceholder(IPlaceholderMatcher matcher, ITreeNode element, Func`2<ITreeNode, bool> additionalCheck);
    public abstract virtual bool MatchPlaceholder(ISequencePlaceholderMatcher matcher, IEnumerable`1<ITreeNode> element, Func`2<IEnumerable`1<ITreeNode>, bool> additionalCheck);
    public abstract virtual bool MatchPlaceholder(IPlaceholderMatcher matcher, ITreeNode element, IElementMatcher additionalCheck);
    public abstract virtual bool MatchPlaceholder(IPlaceholderTypeMatcher matcher, ITreeNode element, IType elementType, ITypeConversionRule typeConversionRule);
    [MustUseReturnValueAttribute]
public abstract virtual bool CheckAllVariants(ITreeNode element, Func`3[] match);
    [MustUseReturnValueAttribute]
public abstract virtual bool CheckVariant(Func`2<IMatchingContext, bool> match);
    public abstract virtual void PutData(Key`1<T> key, T value);
    [CanBeNullAttribute]
public abstract virtual T GetData(Key`1<T> key);
    [PureAttribute]
public abstract virtual bool IsMatchedImplicitly(ITreeNode treeNode);
    public abstract virtual void AddImplicitMatch(IElementMatcher elementMatcher);
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.IMetaPlaceholder {
}
public static class JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.AssociativeMatcherUtil : object {
    public static IStructuralMatchResult MatchExpressionWithParentContext(ITreeNode node, IList`1<ITreeNode> operands, IEnumerable`1<IElementMatcher> matchers, IMatchingContext contextVariant, Func`2<ITreeNode, ICollection`1<ITreeNode>> getOperands, StructuralSearchPatternParams params);
    public static IStructuralMatchResult MatchExpression(ITreeNode node, IList`1<ITreeNode> operands, IEnumerable`1<IElementMatcher> matchers, IMatchingContext context, Func`2<ITreeNode, ICollection`1<ITreeNode>> getOperands, StructuralSearchPatternParams params);
    private static IStructuralMatchResult DoMatchExpression(ITreeNode node, IList`1<ITreeNode> operands, IEnumerable`1<IElementMatcher> matchers, IMatchingContext context, Func`2<ITreeNode, ICollection`1<ITreeNode>> getOperands, StructuralSearchPatternParams params);
    private static ICollection`1<Pair`2<IElementMatcher, ITreeNode>> Match(IList`1<ITreeNode> operands, IMatchingContext context, IEnumerable`1<IElementMatcher> matchers, BipartiteGraph`2& graph, List`1& matchedOperands);
    public static List`1<ITreeNode> MatchExpression(IList`1<ITreeNode> operands, IEnumerable`1<IElementMatcher> matchers, IMatchingContext context, Func`2<ITreeNode, ICollection`1<ITreeNode>> getOperands);
    private static Pair`2<ITreeNode, Nullable`1<ValueCollection<ITreeNode, ITreeNode>>> ExtractParent(IEnumerable`1<ITreeNode> nodes, ITreeNode leaf, Func`2<ITreeNode, ICollection`1<ITreeNode>> getOperands);
    public static bool MatchUnorderedSequence(IList`1<ITreeNode> operands, IEnumerable`1<IElementMatcher> allMatchers, IMatchingContext context, bool allowUnmatched);
    private static bool TryMatchRecurse(BipartiteGraph`2<ISequencePlaceholderMatcher, ITreeNode> graph, List`1<IElementMatcher> result, IList`1<ITreeNode> operands, bool allowUnmatched, int recurseLevel);
    private static bool CheckSequenceMatchingResult(BipartiteGraph`2<ISequencePlaceholderMatcher, ITreeNode> graph, List`1<IElementMatcher> result);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.FindResultStructural : FindResultText {
    private IStructuralMatchResult myMatchResult;
    public IStructuralMatchResult MatchResult { get; }
    public FindResultStructural(IFile file, DocumentRange range, IStructuralMatchResult matchResult);
    public IStructuralMatchResult get_MatchResult();
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.IStructuralSearchPatternValidator {
    [CanBeNullAttribute]
public abstract virtual IPatternLexerErrorResult Validate(IStructuralSearchPattern pattern);
    public abstract virtual void AddKeywordHighlighters(IStructuralSearchPattern pattern, string text, ISsrKeywordsHighlighterProvider highlighterProvider);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.MatchingContext : object {
    private List`1<MatchingContextVariant> myVariants;
    private ITreeNode myMatchedElement;
    private ReadOnlyMatchingContext myReadOnlyMatchingContext;
    [NotNullAttribute]
private List`1<MatchingContextVariant> Variants { get; private set; }
    public ITreeNode MatchedElement { get; public set; }
    protected MatchingContext(ITreeNode matchedElement, MatchingContextVariant contextVariant);
    private List`1<MatchingContextVariant> get_Variants();
    private void set_Variants(List`1<MatchingContextVariant> value);
    [NotNullAttribute]
public static MatchingContext CreateFromParentContext(ITreeNode matchedElement, IMatchingContext parentContext);
    public sealed virtual void RegisterTypeMatcher(ITypeMatcher matcher, ITreeNode element);
    public sealed virtual IMatchingContext ExecuteDelayedMatchers();
    public sealed virtual bool MatchPlaceholder(IPlaceholderMatcher placeholderMatcher, ITreeNode element, Func`2<ITreeNode, bool> additionalCheck);
    public sealed virtual bool MatchPlaceholder(ISequencePlaceholderMatcher placeholderMatcher, IEnumerable`1<ITreeNode> elements, Func`2<IEnumerable`1<ITreeNode>, bool> additionalCheck);
    public sealed virtual bool MatchPlaceholder(IPlaceholderMatcher placeholderMatcher, ITreeNode element, IElementMatcher additionalCheck);
    public sealed virtual bool MatchPlaceholder(IPlaceholderTypeMatcher matcher, ITreeNode element, IType elementType, ITypeConversionRule typeConversionRule);
    public sealed virtual bool CheckAllVariants(ITreeNode element, Func`3[] variants);
    public sealed virtual bool CheckVariant(Func`2<IMatchingContext, bool> match);
    public sealed virtual void PutData(Key`1<T> key, T value);
    public sealed virtual T GetData(Key`1<T> key);
    public sealed virtual bool IsMatchedImplicitly(ITreeNode treeNode);
    public sealed virtual void AddImplicitMatch(IElementMatcher elementMatcher);
    private void Clear();
    public sealed virtual object GetMatchedElement(string placeholderName);
    public sealed virtual IList`1<object> GetAllMatchedElements(string placeholderName);
    public sealed virtual IType GetMatchedType(string placeholderName);
    public sealed virtual ITreeNode get_MatchedElement();
    public sealed virtual void set_MatchedElement(ITreeNode value);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.MatchingContextVariant : object {
    private Dictionary`2<string, IPlaceholderMatcher> myPlaceholderMatchers;
    private Dictionary`2<string, List`1<object>> myElementMatches;
    private IList`1<Pair`2<ITypeMatcher, ITreeNode>> myTypeMatchers;
    private JetHashSet`1<IElementMatcher> myMatchedImplicitly;
    private UserDataHolder myDataHolder;
    [CompilerGeneratedAttribute]
private bool <Valid>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNode <MatchedElement>k__BackingField;
    public bool Valid { get; private set; }
    public ITreeNode MatchedElement { get; public set; }
    public MatchingContextVariant(ITreeNode element);
    [CompilerGeneratedAttribute]
public bool get_Valid();
    [CompilerGeneratedAttribute]
private void set_Valid(bool value);
    public sealed virtual void RegisterTypeMatcher(ITypeMatcher matcher, ITreeNode element);
    public sealed virtual IMatchingContext ExecuteDelayedMatchers();
    [CanBeNullAttribute]
private IMatchingContext CheckDelayedMatchers();
    public sealed virtual bool MatchPlaceholder(IPlaceholderMatcher placeholderMatcher, ITreeNode element, Func`2<ITreeNode, bool> additionalCheck);
    public sealed virtual bool MatchPlaceholder(ISequencePlaceholderMatcher placeholderMatcher, IEnumerable`1<ITreeNode> elements, Func`2<IEnumerable`1<ITreeNode>, bool> additionalCheck);
    public sealed virtual bool MatchPlaceholder(IPlaceholderMatcher matcher, ITreeNode element, IElementMatcher additionalCheck);
    public sealed virtual bool MatchPlaceholder(IPlaceholderTypeMatcher matcher, ITreeNode element, IType elementType, ITypeConversionRule typeConversionRule);
    public sealed virtual bool CheckAllVariants(ITreeNode element, Func`3[] variants);
    public sealed virtual bool CheckVariant(Func`2<IMatchingContext, bool> match);
    public sealed virtual void PutData(Key`1<T> key, T value);
    public sealed virtual T GetData(Key`1<T> key);
    public sealed virtual bool IsMatchedImplicitly(ITreeNode treeNode);
    public sealed virtual void AddImplicitMatch(IElementMatcher elementMatcher);
    private void AddPlaceholderMatch(IPlaceholderMatcher placeholderMatcher, object element);
    private void AddElementMatch(string placeholderName, object element);
    private void AddPlaceholderMatch(IPlaceholderTypeMatcher placeholderMatcher, object element);
    public sealed virtual object GetMatchedElement(string placeholderName);
    public sealed virtual IList`1<object> GetAllMatchedElements(string placeholderName);
    public sealed virtual IType GetMatchedType(string placeholderName);
    [CompilerGeneratedAttribute]
public sealed virtual ITreeNode get_MatchedElement();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MatchedElement(ITreeNode value);
    [NotNullAttribute]
public MatchingContextVariant Clone();
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.MetaPlaceholderMatcher : object {
    private string myName;
    public string PlaceholderName { get; }
    public int MinimalOccurrences { get; }
    public int MaximalOccurrences { get; }
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public MetaPlaceholderMatcher(string name);
    public sealed virtual string get_PlaceholderName();
    public sealed virtual IElementMatcher CreatePlaceholderMatcher(ITreeNode element);
    public sealed virtual int get_MinimalOccurrences();
    public sealed virtual int get_MaximalOccurrences();
    public sealed virtual ISequenceMatcher`1<ITreeNode> CreatePlaceholderMatcher(ICollection`1<ITreeNode> elements);
    public sealed virtual bool Match(IEnumerable`1<ITreeNode> elements, IMatchingContext context);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.MetaPlaceholderMatcher/<get_Children>d__13")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual IEnumerable`1<string> get_Words();
}
public abstract class JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.PlaceholderBase : object {
    [NotNullAttribute]
private string myName;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public string Name { get; public set; }
    public string Description { get; }
    public String[] ReplacingText { get; }
    public ICollection`1<string> Words { get; }
    protected PlaceholderBase(string name);
    public sealed virtual string get_Name();
    public void set_Name(string value);
    public abstract virtual string get_Description();
    public abstract virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
    public abstract virtual String[] get_ReplacingText();
    public virtual ICollection`1<string> get_Words();
    public abstract virtual PlaceholderInfo ToPlaceholderInfo();
    public abstract virtual IPlaceholder Clone();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override object System.ICloneable.Clone();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected void OnPropertyChanged(string propertyName);
}
public abstract class JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.PlaceholderMatcherBase : object {
    private string myPlaceholderName;
    public string PlaceholderName { get; }
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    protected PlaceholderMatcherBase(IPlaceholder placeholder);
    public sealed virtual string get_PlaceholderName();
    public abstract virtual IElementMatcher CreatePlaceholderMatcher(ITreeNode element);
    public abstract virtual bool Match(ITreeNode element, IMatchingContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.PlaceholderMatcherBase/<get_Children>d__7")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.PlaceholderReplacement : ValueType {
    private IPlaceholder myPlaceholder;
    private object myReplacement;
    public IPlaceholder Placeholder { get; }
    public object Replacement { get; }
    public PlaceholderReplacement(IPlaceholder placeholder, object replacement);
    public IPlaceholder get_Placeholder();
    public object get_Replacement();
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.SelectionMatcher : object {
    private bool myIsSelStart;
    private IElementMatcher myChildMatcher;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public SelectionMatcher(bool isSelStart, IElementMatcher childMatcher);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.SelectionMatcher/<get_Children>d__5")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.SelectionMatcher/<get_Words>d__7")]
public sealed virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.SelectionPlaceholder : PlaceholderBase {
    public static Key`1<ITreeNode> SelectionStartKey;
    public static Key`1<ITreeNode> SelectionEndKey;
    [CompilerGeneratedAttribute]
private bool <IsSelStart>k__BackingField;
    public bool IsSelStart { get; }
    public string Description { get; }
    public String[] ReplacingText { get; }
    public SelectionPlaceholder(string name, bool isSelStart);
    private static SelectionPlaceholder();
    [CompilerGeneratedAttribute]
public bool get_IsSelStart();
    public virtual string get_Description();
    public virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
    public virtual String[] get_ReplacingText();
    public virtual PlaceholderInfo ToPlaceholderInfo();
    public virtual IPlaceholder Clone();
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.SelectionPlaceholderMatcher : object {
    private bool myIsSelStart;
    private IPlaceholderMatcher myChildMatcher;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public string PlaceholderName { get; }
    public SelectionPlaceholderMatcher(bool isSelStart, IPlaceholderMatcher childMatcher);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.SelectionPlaceholderMatcher/<get_Children>d__5")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.SelectionPlaceholderMatcher/<get_Words>d__7")]
public sealed virtual IEnumerable`1<string> get_Words();
    public sealed virtual string get_PlaceholderName();
    public sealed virtual IElementMatcher CreatePlaceholderMatcher(ITreeNode element);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.SelectionSequencePlaceholderMatcher : object {
    private bool myIsSelStart;
    private ISequencePlaceholderMatcher myChildMatcher;
    private ISequencePlaceholderMatchChecker myChildMatchChecker;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public string PlaceholderName { get; }
    public int MinimalOccurrences { get; }
    public int MaximalOccurrences { get; }
    public bool ShouldCheckForMatching { get; }
    public SelectionSequencePlaceholderMatcher(bool isSelStart, ISequencePlaceholderMatcher childMatcher);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.SelectionSequencePlaceholderMatcher/<get_Children>d__6")]
public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.SelectionSequencePlaceholderMatcher/<get_Words>d__8")]
public sealed virtual IEnumerable`1<string> get_Words();
    public sealed virtual string get_PlaceholderName();
    public sealed virtual IElementMatcher CreatePlaceholderMatcher(ITreeNode element);
    public sealed virtual int get_MinimalOccurrences();
    public sealed virtual int get_MaximalOccurrences();
    public sealed virtual ISequenceMatcher`1<ITreeNode> CreatePlaceholderMatcher(ICollection`1<ITreeNode> elements);
    public sealed virtual bool Match(IEnumerable`1<ITreeNode> elements, IMatchingContext context);
    public sealed virtual bool get_ShouldCheckForMatching();
    public sealed virtual bool VerifyMatchSafely(IList`1<T> elements, IMatchingContext context, int fromElement, int count);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.SequenceMatchingContext`1 : MatchingContext {
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <Elements>k__BackingField;
    public IEnumerable`1<T> Elements { get; }
    public SequenceMatchingContext`1(IEnumerable`1<T> elements);
    private SequenceMatchingContext`1(IEnumerable`1<T> elements, MatchingContextVariant parentContext);
    [CompilerGeneratedAttribute]
public IEnumerable`1<T> get_Elements();
    public static SequenceMatchingContext`1<T> CreateFromParentContext(IEnumerable`1<T> elements, IMatchingContext parentContext);
}
public abstract class JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.SequencePlaceholderBase : PlaceholderBase {
    private int myMinimalOccurrences;
    private int myMaximalOccurrences;
    private static string MINIMAL_OCCURRENCES_ATTRIBUTE;
    private static string MAXIMAL_OCCURRENCES_ATTRIBUTE;
    public int MaximalOccurrences { get; public set; }
    public int MinimalOccurrences { get; public set; }
    public bool MinimalOccurrencesEnabled { get; public set; }
    public bool MaximalOccurrencesEnabled { get; public set; }
    protected string TagName { get; }
    protected string EntityName { get; }
    public string Description { get; }
    protected SequencePlaceholderBase(string name, int minimalOccurrences, int maximalOccurrences);
    protected SequencePlaceholderBase(PlaceholderInfo placeholderInfo);
    public sealed virtual int get_MaximalOccurrences();
    public void set_MaximalOccurrences(int value);
    public sealed virtual int get_MinimalOccurrences();
    public void set_MinimalOccurrences(int value);
    public bool get_MinimalOccurrencesEnabled();
    public void set_MinimalOccurrencesEnabled(bool value);
    public bool get_MaximalOccurrencesEnabled();
    public void set_MaximalOccurrencesEnabled(bool value);
    protected abstract virtual string get_TagName();
    protected abstract virtual string get_EntityName();
    public virtual string get_Description();
    public virtual PlaceholderInfo ToPlaceholderInfo();
    public bool Equals(SequencePlaceholderBase other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.SequencePlaceholderMatcherBase : PlaceholderMatcherBase {
    private int myMinimalOccurrences;
    private int myMaximalOccurrences;
    public int MinimalOccurrences { get; }
    public int MaximalOccurrences { get; }
    protected SequencePlaceholderMatcherBase(ISequencePlaceholder placeholder);
    public abstract virtual ISequenceMatcher`1<ITreeNode> CreatePlaceholderMatcher(ICollection`1<ITreeNode> enumerable);
    public sealed virtual int get_MinimalOccurrences();
    public sealed virtual int get_MaximalOccurrences();
    public virtual bool Match(IEnumerable`1<ITreeNode> elements, IMatchingContext context);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.SequenceStructuralMatcher`1 : object {
    [CompilerGeneratedAttribute]
private StructuralSearchPatternParams <Params>k__BackingField;
    [CompilerGeneratedAttribute]
private SequenceMatcher`1<T> <Matcher>k__BackingField;
    protected StructuralSearchPatternParams Params { get; }
    protected SequenceMatcher`1<T> Matcher { get; }
    public IReadOnlyCollection`1<string> Words { get; }
    public SequenceStructuralMatcher`1(SequenceMatcher`1<T> matcher, StructuralSearchPatternParams params);
    [CompilerGeneratedAttribute]
protected StructuralSearchPatternParams get_Params();
    [CompilerGeneratedAttribute]
protected SequenceMatcher`1<T> get_Matcher();
    public sealed virtual bool QuickMatch(ITreeNode element, IMatchingContext context);
    public sealed virtual IReadOnlyCollection`1<string> get_Words();
    public sealed virtual IReadOnlyCollection`1<string> GetExtendedWords(ISolution solution);
    public sealed virtual IStructuralMatchResult Match(IList`1<T> elements);
    public sealed virtual IStructuralMatchResult Match(IList`1<TTreeNode> elements);
    public virtual IStructuralMatchResult Match(ITreeNode element);
    public virtual IStructuralMatchResult Match(ITreeNode element, IMatchingContext context);
    [CanBeNullAttribute]
protected ITreeNode NextSignificantElement(ITreeNode element);
    protected virtual bool IsFilteredNode(ITreeNode element);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.StructuralMatchResult : object {
    [NotNullAttribute]
public static IStructuralMatchResult NOT_MATCHED;
    private IMatchingContext myContext;
    private DocumentRange myMatchRange;
    [CompilerGeneratedAttribute]
private StructuralSearchPatternParams <Params>k__BackingField;
    public bool Matched { get; }
    public ITreeNode MatchedElement { get; }
    public IMatchingContext Context { get; }
    public StructuralSearchPatternParams Params { get; }
    private StructuralMatchResult(IMatchingContext context, DocumentRange matchRange, StructuralSearchPatternParams params);
    private static StructuralMatchResult();
    public sealed virtual bool get_Matched();
    public sealed virtual ITreeNode GetMatchedElement(string placeholderName);
    public sealed virtual ITreeRange GetMatchedTreeRange(string placeholderName);
    public sealed virtual T GetMatchedElement(string placeholderName);
    public sealed virtual IEnumerable GetMatchedElementList(string placeholderName);
    public sealed virtual IList`1<T> GetAllMatchedElements(string placeholderName);
    public sealed virtual IType GetMatchedType(string placeholderName);
    public sealed virtual object GetMatch(string placeholderName);
    public sealed virtual DocumentRange GetDocumentRange();
    public sealed virtual ITreeNode get_MatchedElement();
    public sealed virtual IMatchingContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual StructuralSearchPatternParams get_Params();
    public sealed virtual bool IsMatchedImplicitly(ITreeNode treeNode);
    [NotNullAttribute]
public static IStructuralMatchResult Get(IMatchingContext context, DocumentRange range, StructuralSearchPatternParams params);
    [NotNullAttribute]
public static IStructuralMatchResult GetSequenceContext(SequenceMatchingContext`1<TTreeNode> context, DocumentRange range, StructuralSearchPatternParams params);
}
public abstract class JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.StructuralSearchPatternPresenterBase : object {
    private static Regex ourSpacesRegex;
    private IStructuralSearchPattern myPattern;
    protected StructuralSearchPatternPresenterBase(IStructuralSearchPattern pattern);
    private static StructuralSearchPatternPresenterBase();
    private string SubstitutePlaceholders(string text, IStructuralMatchResult result);
    protected abstract virtual string GetListReplacement(IEnumerable enumerable);
    protected abstract virtual ReplacePatternLexerResult ParsePattern(string text, IDictionary`2<string, IPlaceholder> placeholders);
    private static string GetPresentation(string pattern);
    public sealed virtual string GetSearchPresentation();
    public sealed virtual string GetSearchPresentation(IStructuralMatchResult result);
    public sealed virtual string GetSearchCommentPresentation();
    public sealed virtual string GetSearchCommentPresentation(IStructuralMatchResult result);
    public sealed virtual string GetReplacePresentation();
    public sealed virtual string GetReplacePresentation(IStructuralMatchResult result);
    public sealed virtual string GetReplaceCommentPresentation();
    public sealed virtual string GetReplaceCommentPresentation(IStructuralMatchResult result);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.StructuralSearchPatternValidator : object {
    private IStructuralSearchPatternBuilder[] myBuilders;
    public StructuralSearchPatternValidator(IStructuralSearchPatternBuilder[] builders);
    public virtual IPatternLexerErrorResult Validate(IStructuralSearchPattern pattern);
    public sealed virtual void AddKeywordHighlighters(IStructuralSearchPattern pattern, string text, ISsrKeywordsHighlighterProvider highlighterProvider);
    private IPatternLexerResult TryParse(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
    public IPatternLexerResult TryParseReplacePattern(string replacePattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.UnknownPlaceholder : object {
    [NotNullAttribute]
private string myName;
    private static String[] ourReplacingText;
    private IPlaceholder myReplacementCandidate;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public string Name { get; }
    public string Description { get; }
    public IPlaceholder ReplacementCandidate { get; public set; }
    public String[] ReplacingText { get; }
    public ICollection`1<string> Words { get; }
    public UnknownPlaceholder(string name);
    private static UnknownPlaceholder();
    public sealed virtual PlaceholderInfo ToPlaceholderInfo();
    public sealed virtual IPlaceholder Clone();
    private sealed virtual override object System.ICloneable.Clone();
    public sealed virtual string get_Name();
    public sealed virtual string get_Description();
    public sealed virtual IPlaceholder get_ReplacementCandidate();
    public sealed virtual void set_ReplacementCandidate(IPlaceholder value);
    public sealed virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
    public virtual String[] get_ReplacingText();
    public sealed virtual ICollection`1<string> get_Words();
    public bool Equals(UnknownPlaceholder other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.IPatternFromCodeCreator {
    [NotNullAttribute]
public abstract virtual IStructuralSearchPattern CreatePattern(ISolution solution, DocumentRange selection);
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.IPatternLexerErrorResult {
    public string ErrorMessage { get; }
    public TextRange ErrorRange { get; }
    public abstract virtual string get_ErrorMessage();
    public abstract virtual TextRange get_ErrorRange();
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.IPatternLexerResult {
    public PlaceholderUsagesCollection Placeholders { get; }
    public ITreeNode Element { get; }
    public RangeTranslator RangeTranslator { get; }
    public abstract virtual PlaceholderUsagesCollection get_Placeholders();
    public abstract virtual ITreeNode get_Element();
    public abstract virtual RangeTranslator get_RangeTranslator();
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.IPlaceholder {
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public string Description { get; }
    [NotNullAttribute]
public String[] ReplacingText { get; }
    [NotNullAttribute]
public ICollection`1<string> Words { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Description();
    [NotNullAttribute]
public abstract virtual IPlaceholderMatcher CreateMatcher(StructuralSearchPatternParams params);
    public abstract virtual String[] get_ReplacingText();
    public abstract virtual ICollection`1<string> get_Words();
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual PlaceholderInfo ToPlaceholderInfo();
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.IPlaceholderMatcher {
    public string PlaceholderName { get; }
    public abstract virtual string get_PlaceholderName();
    [CanBeNullAttribute]
public abstract virtual IElementMatcher CreatePlaceholderMatcher(ITreeNode element);
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.IPlaceholderTypeMatcher {
    [NotNullAttribute]
public string PlaceholderName { get; }
    public bool ExactType { get; }
    public abstract virtual string get_PlaceholderName();
    [CanBeNullAttribute]
public abstract virtual IType GetPlaceholderType(ITreeNode element);
    [CanBeNullAttribute]
public abstract virtual IType GetElementType(ITreeNode element);
    public abstract virtual bool get_ExactType();
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.ISequenceMatcher`1 {
    public abstract virtual bool Match(IEnumerable`1<T> elements, IMatchingContext context);
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.ISequencePlaceholder {
    public int MaximalOccurrences { get; }
    public int MinimalOccurrences { get; }
    public abstract virtual int get_MaximalOccurrences();
    public abstract virtual int get_MinimalOccurrences();
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.ISequencePlaceholderMatchChecker {
    public bool ShouldCheckForMatching { get; }
    public abstract virtual bool get_ShouldCheckForMatching();
    [MustUseReturnValueAttribute]
public abstract virtual bool VerifyMatchSafely(IList`1<T> elements, IMatchingContext context, int fromElement, int count);
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.ISequencePlaceholderMatcher {
    public int MinimalOccurrences { get; }
    public int MaximalOccurrences { get; }
    public abstract virtual int get_MinimalOccurrences();
    public abstract virtual int get_MaximalOccurrences();
    [CanBeNullAttribute]
public abstract virtual ISequenceMatcher`1<ITreeNode> CreatePlaceholderMatcher(ICollection`1<ITreeNode> elements);
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.ISequenceStructuralMatcher {
    [NotNullAttribute]
public abstract virtual IStructuralMatchResult Match(IList`1<T> elements);
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.ISequenceStructuralMatcher`1 {
    [NotNullAttribute]
public abstract virtual IStructuralMatchResult Match(IList`1<T> elements);
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.IStructuralMatcher {
    [NotNullAttribute]
[ItemNotNullAttribute]
public IReadOnlyCollection`1<string> Words { get; }
    [NotNullAttribute]
public abstract virtual IStructuralMatchResult Match(ITreeNode element);
    [NotNullAttribute]
public abstract virtual IStructuralMatchResult Match(ITreeNode element, IMatchingContext context);
    [MustUseReturnValueAttribute]
public abstract virtual bool QuickMatch(ITreeNode element, IMatchingContext context);
    public abstract virtual IReadOnlyCollection`1<string> get_Words();
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IReadOnlyCollection`1<string> GetExtendedWords(ISolution solution);
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.IStructuralMatchResult {
    public bool Matched { get; }
    [CanBeNullAttribute]
public ITreeNode MatchedElement { get; }
    [CanBeNullAttribute]
public IMatchingContext Context { get; }
    [CanBeNullAttribute]
public StructuralSearchPatternParams Params { get; }
    public abstract virtual bool get_Matched();
    [CanBeNullAttribute]
public abstract virtual ITreeNode GetMatchedElement(string placeholderName);
    [CanBeNullAttribute]
public abstract virtual ITreeRange GetMatchedTreeRange(string placeholderName);
    [CanBeNullAttribute]
public abstract virtual T GetMatchedElement(string placeholderName);
    [CanBeNullAttribute]
public abstract virtual IEnumerable GetMatchedElementList(string placeholderName);
    [CanBeNullAttribute]
public abstract virtual IType GetMatchedType(string placeholderName);
    [CanBeNullAttribute]
public abstract virtual IList`1<T> GetAllMatchedElements(string placeholderName);
    [CanBeNullAttribute]
public abstract virtual object GetMatch(string placeholderName);
    [PureAttribute]
public abstract virtual DocumentRange GetDocumentRange();
    public abstract virtual ITreeNode get_MatchedElement();
    public abstract virtual IMatchingContext get_Context();
    public abstract virtual StructuralSearchPatternParams get_Params();
    [PureAttribute]
public abstract virtual bool IsMatchedImplicitly(ITreeNode treeNode);
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.IStructuralSearchActionManager {
    public abstract virtual void EditCustomPattern(CustomPattern pattern);
    public abstract virtual void DoSearch(ISolution solution, SearchDomainFactory searchDomainFactory, ISearchDomain searchDomain, IStructuralSearchPattern pattern);
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.IStructuralSearcher {
    [NotNullAttribute]
public PsiLanguageType Language { get; }
    public abstract virtual PsiLanguageType get_Language();
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.IStructuralSearcherFactory {
    public bool IsInternal { get; }
    public bool SupportsIgnoreUnmatched { get; }
    public bool SupportsShortenReferences { get; }
    public abstract virtual bool get_IsInternal();
    public abstract virtual bool get_SupportsIgnoreUnmatched();
    public abstract virtual bool get_SupportsShortenReferences();
    [NotNullAttribute]
[PureAttribute]
public abstract virtual IStructuralSearchPattern CreatePattern();
    [NotNullAttribute]
[PureAttribute]
public abstract virtual IStructuralSearchPattern CreatePattern(string pattern, IPlaceholder[] placeholders);
    [NotNullAttribute]
[PureAttribute]
public abstract virtual IStructuralSearchPattern CreatePattern(ISolution solution, DocumentRange selection);
    public abstract virtual void Replace(IStructuralSearchPattern pattern, IStructuralMatchResult result);
    public abstract virtual void Replace(IEnumerable`1<IStructuralMatchResult> targets, IStructuralSearchPattern pattern);
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.IStructuralSearchPattern {
    [CanBeNullAttribute]
public string SearchPattern { get; public set; }
    [NotNullAttribute]
public StructuralSearchPatternParams Params { get; public set; }
    [NotNullAttribute]
public IDictionary`2<string, IPlaceholder> Placeholders { get; public set; }
    [CanBeNullAttribute]
public string SuppressionKey { get; public set; }
    [CanBeNullAttribute]
public string Comment { get; public set; }
    [NotNullAttribute]
public PsiLanguageType Language { get; }
    [CanBeNullAttribute]
public string ReplacePattern { get; public set; }
    [CanBeNullAttribute]
public string ReplaceComment { get; public set; }
    public bool FormatAfterReplace { get; public set; }
    public bool ShortenReferences { get; public set; }
    [NotNullAttribute]
public IStructuralSearchPatternPresenter Presenter { get; }
    public abstract virtual string get_SearchPattern();
    public abstract virtual void set_SearchPattern(string value);
    public abstract virtual StructuralSearchPatternParams get_Params();
    public abstract virtual void set_Params(StructuralSearchPatternParams value);
    public abstract virtual IDictionary`2<string, IPlaceholder> get_Placeholders();
    public abstract virtual void set_Placeholders(IDictionary`2<string, IPlaceholder> value);
    public abstract virtual void ReadPlaceholders(IEnumerable`1<PlaceholderInfo> placeholderInfos);
    public abstract virtual string get_SuppressionKey();
    public abstract virtual void set_SuppressionKey(string value);
    public abstract virtual string get_Comment();
    public abstract virtual void set_Comment(string value);
    [NotNullAttribute]
public abstract virtual IStructuralSearchPattern AddPatternPlaceholder(string name, string pattern, bool isShared);
    [NotNullAttribute]
public abstract virtual IStructuralSearchPattern AddOrPatternPlaceholder(string name, bool isShared, String[] patterns);
    [CanBeNullAttribute]
public abstract virtual IStructuralMatcher CreateMatcher();
    [CanBeNullAttribute]
public abstract virtual IStructuralMatcher CreateMatcher(IStructuralSearchPatternBuilder builder);
    public abstract virtual PsiLanguageType get_Language();
    public abstract virtual string get_ReplacePattern();
    public abstract virtual void set_ReplacePattern(string value);
    public abstract virtual string get_ReplaceComment();
    public abstract virtual void set_ReplaceComment(string value);
    public abstract virtual bool get_FormatAfterReplace();
    public abstract virtual void set_FormatAfterReplace(bool value);
    public abstract virtual bool get_ShortenReferences();
    public abstract virtual void set_ShortenReferences(bool value);
    public abstract virtual IStructuralSearchPatternPresenter get_Presenter();
    [NotNullAttribute]
public abstract virtual IStructuralSearchPatternValidator GetValidator();
    public abstract virtual bool GuessPlaceholders();
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.IStructuralSearchPatternBuilder {
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual IStructuralMatcher CreateMatcher(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
    [NotNullAttribute]
[PureAttribute]
public abstract virtual IPatternLexerResult ParsePattern(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.IStructuralSearchPatternPresenter {
    [NotNullAttribute]
public abstract virtual string GetSearchPresentation();
    [NotNullAttribute]
public abstract virtual string GetSearchPresentation(IStructuralMatchResult result);
    [NotNullAttribute]
public abstract virtual string GetSearchCommentPresentation();
    [NotNullAttribute]
public abstract virtual string GetSearchCommentPresentation(IStructuralMatchResult result);
    [NotNullAttribute]
public abstract virtual string GetReplacePresentation();
    [NotNullAttribute]
public abstract virtual string GetReplacePresentation(IStructuralMatchResult result);
    [NotNullAttribute]
public abstract virtual string GetReplaceCommentPresentation();
    [NotNullAttribute]
public abstract virtual string GetReplaceCommentPresentation(IStructuralMatchResult result);
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.IStructuralSearchPlaceholderGuesser {
    [CanBeNullAttribute]
public abstract virtual IPlaceholder Guess(ITreeNode node, string name);
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.ITypeMatcher {
    [CanBeNullAttribute]
public string ShortName { get; }
    [MustUseReturnValueAttribute]
public abstract virtual bool MatchType(ITreeNode element, IMatchingContext context);
    [MustUseReturnValueAttribute]
public abstract virtual bool MatchType(ITreeNode element, IType elementType, IMatchingContext context);
    public abstract virtual string get_ShortName();
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.ITypeMatcherCanContainOther {
    public abstract virtual void RegisterContainingTypePlaceholderMatches(Action`2<string, ITreeNode> register, ITreeNode element);
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.IUnknownPlaceholder {
    [CanBeNullAttribute]
public IPlaceholder ReplacementCandidate { get; public set; }
    public abstract virtual IPlaceholder get_ReplacementCandidate();
    public abstract virtual void set_ReplacementCandidate(IPlaceholder value);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.ListAnyOrderMatcher`1 : object {
    private IEnumerable`1<IElementMatcher> myMatchers;
    private Func`2<ITreeNode, IEnumerable`1<T>> myElementsGetter;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public ListAnyOrderMatcher`1(IEnumerable`1<IElementMatcher> matchers, Func`2<ITreeNode, IEnumerable`1<T>> elementsGetter);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.StructuralSearch.ListAnyOrderMatcher`1/<get_Words>d__7")]
public sealed virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.MatcherNotImplementedException : Exception {
    private Type myElementType;
    public string Message { get; }
    public MatcherNotImplementedException(Type type);
    public virtual string get_Message();
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.NullMatcher : object {
    public static IElementMatcher Instance;
    [NotNullAttribute]
public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    private static NullMatcher();
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.OrMatcher : object {
    private IElementMatcher[] myMatchers;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public OrMatcher(IElementMatcher[] matchers);
    public OrMatcher(IEnumerable`1<IElementMatcher> matchers);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.StructuralSearch.OrMatcher/<get_Words>d__7")]
public sealed virtual IEnumerable`1<string> get_Words();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.OrPatternMatcher : object {
    private IList`1<IElementMatcher> myMatchers;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public OrPatternMatcher(IElementMatcher[] matchers);
    public OrPatternMatcher(IEnumerable`1<IElementMatcher> matchers);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual IEnumerable`1<string> get_Words();
    public virtual string ToString();
}
public static class JetBrains.ReSharper.Feature.Services.StructuralSearch.PatternFromCodeCreatorHelper : object {
    public static string UnshiftAndTrim(string original);
}
public abstract class JetBrains.ReSharper.Feature.Services.StructuralSearch.PatternLexer : object {
    [NotNullAttribute]
private PlaceholderUsagesCollection myPlaceholderUsages;
    [NotNullAttribute]
private StringBuilder myText;
    public static Regex PlaceholderRegex;
    public static Regex PlaceholderWithArgsRegex;
    public static Regex MetaPlaceholderRegex;
    public static Regex SelectionStartRegex;
    public static Regex SelectionEndRegex;
    private static Char[] PlaceholderTrimChars;
    public PlaceholderUsagesCollection PlaceholderUsages { get; }
    public string ProcessedText { get; }
    protected LanguageService LanguageService { get; }
    protected bool MetaPlaceholderSupported { get; }
    private static PatternLexer();
    public PlaceholderUsagesCollection get_PlaceholderUsages();
    public string get_ProcessedText();
    public void ReplacePlaceholders(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params, bool createUnknownPlaceholders, bool deleteUnusedPlaceholders, int realShift);
    [NotNullAttribute]
protected virtual string GetPlaceHolderName(string name);
    [CanBeNullAttribute]
protected virtual IPlaceholder TryParsePlaceholder(string name);
    protected virtual IUnknownPlaceholder CreateUnknownPlaceholder(string name);
    protected abstract virtual LanguageService get_LanguageService();
    protected abstract virtual bool get_MetaPlaceholderSupported();
    protected abstract virtual IMetaPlaceholder GetMetaPlaceholder(string name);
    private void ReplacePlaceholder(Capture match, IPlaceholder plh, Int32& shift, Dictionary`2<IPlaceholder, List`1<PlaceholderUsage>> placeholdersUsed, int realShift);
    public virtual IPatternLexerResult TryParsePattern(string pattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params, Func`2<IParser, ITreeNode> createElement, int realShift, bool createUnknownPlaceholders, bool deleteUnusedPlaceholders);
    protected virtual bool IsErrorElementBeforeOffset(IErrorElement errorElement, TreeOffset offset);
    private static IPatternLexerResult CreateErrorResultFromErrorElement(IErrorElement errorElement, ITreeNode element, RangeTranslator rangeTranslator);
    private static IErrorElement GetFirstErrorElement(ITreeNode element);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.PatternLexerErrorResult : object {
    [CompilerGeneratedAttribute]
private ITreeNode <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private RangeTranslator <RangeTranslator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private TextRange <ErrorRange>k__BackingField;
    public PlaceholderUsagesCollection Placeholders { get; }
    public ITreeNode Element { get; }
    public RangeTranslator RangeTranslator { get; }
    public string ErrorMessage { get; }
    public TextRange ErrorRange { get; }
    public PatternLexerErrorResult(string error);
    public PatternLexerErrorResult(string error, TextRange errorRange, ITreeNode element, RangeTranslator rangeTranslator);
    public sealed virtual PlaceholderUsagesCollection get_Placeholders();
    [CompilerGeneratedAttribute]
public sealed virtual ITreeNode get_Element();
    [CompilerGeneratedAttribute]
public sealed virtual RangeTranslator get_RangeTranslator();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public sealed virtual TextRange get_ErrorRange();
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.PatternLexerException : StructuralSearchException {
    public PatternLexerException(string message);
    public PatternLexerException(string message, Exception inner);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.PatternLexerMissingPlaceholderErrorResult : PatternLexerErrorResult {
    public PatternLexerMissingPlaceholderErrorResult(string error);
    public PatternLexerMissingPlaceholderErrorResult(string error, TextRange errorRange, ITreeNode element, RangeTranslator rangeTranslator);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.PatternLexerResult : object {
    [CompilerGeneratedAttribute]
private ITreeNode <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private PlaceholderUsagesCollection <Placeholders>k__BackingField;
    [CompilerGeneratedAttribute]
private RangeTranslator <RangeTranslator>k__BackingField;
    public ITreeNode Element { get; }
    public PlaceholderUsagesCollection Placeholders { get; protected set; }
    public RangeTranslator RangeTranslator { get; }
    public PatternLexerResult(ITreeNode element, PlaceholderUsagesCollection placeholders, RangeTranslator rangeTranslator);
    [CompilerGeneratedAttribute]
public sealed virtual ITreeNode get_Element();
    [CompilerGeneratedAttribute]
public sealed virtual PlaceholderUsagesCollection get_Placeholders();
    [CompilerGeneratedAttribute]
protected void set_Placeholders(PlaceholderUsagesCollection value);
    [CompilerGeneratedAttribute]
public sealed virtual RangeTranslator get_RangeTranslator();
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.PatternMatcherBuilderParams : object {
    private StructuralSearchPatternParams myParams;
    [CompilerGeneratedAttribute]
private PlaceholderUsagesCollection <PlaceholderUsages>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipSelectionStart>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipSelectionEnd>k__BackingField;
    public StructuralSearchPatternParams Params { get; }
    public PlaceholderUsagesCollection PlaceholderUsages { get; public set; }
    public bool SkipSelectionStart { get; public set; }
    public bool SkipSelectionEnd { get; public set; }
    public PatternMatcherBuilderParams(StructuralSearchPatternParams params);
    public StructuralSearchPatternParams get_Params();
    [CompilerGeneratedAttribute]
public PlaceholderUsagesCollection get_PlaceholderUsages();
    [CompilerGeneratedAttribute]
public void set_PlaceholderUsages(PlaceholderUsagesCollection value);
    [CompilerGeneratedAttribute]
public bool get_SkipSelectionStart();
    [CompilerGeneratedAttribute]
public void set_SkipSelectionStart(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipSelectionEnd();
    [CompilerGeneratedAttribute]
public void set_SkipSelectionEnd(bool value);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Patterns.CodeTemplatePattern : CustomPattern {
    [CompilerGeneratedAttribute]
private string <SuppressionKey>k__BackingField;
    public bool CanBeEdited { get; }
    public string SuppressionKey { get; public set; }
    public virtual bool get_CanBeEdited();
    [CompilerGeneratedAttribute]
public sealed virtual string get_SuppressionKey();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SuppressionKey(string value);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Patterns.CustomPattern : object {
    [CompilerGeneratedAttribute]
private Severity <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FormatAfterReplace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShortenReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private IStructuralSearchPattern <Pattern>k__BackingField;
    public bool CanBeEdited { get; }
    public Severity Severity { get; public set; }
    public bool FormatAfterReplace { get; public set; }
    public bool ShortenReferences { get; public set; }
    public IStructuralSearchPattern Pattern { get; public set; }
    public virtual bool get_CanBeEdited();
    [CompilerGeneratedAttribute]
public sealed virtual Severity get_Severity();
    [CompilerGeneratedAttribute]
public void set_Severity(Severity value);
    [CompilerGeneratedAttribute]
public bool get_FormatAfterReplace();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FormatAfterReplace(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShortenReferences();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ShortenReferences(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IStructuralSearchPattern get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(IStructuralSearchPattern value);
    public bool Equals(CustomPattern other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Patterns.CustomPatternMatcherManager : object {
    private Lifetime myLifetime;
    private ILanguageManager myLanguageManager;
    public CustomPatternMatcherManager(Lifetime lifetime, ILanguageManager languageManager);
    public IEnumerable`1<KeyValuePair`2<ICustomPattern, IStructuralMatcher>> GetMatchersFor(PsiLanguageType language, IProject project);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Patterns.CustomPatternMatchersCachedReader : object {
    private KnownLanguage myLanguage;
    private StructuralSearchMatcherManager myMatcherManager;
    private ILanguages myLanguages;
    private IStructuralSearcherFactory myStructuralSearcherFactory;
    private SettingsIndexedKey myPatternKey;
    public SettingsKey KeyExposed { get; }
    public CustomPatternMatchersCachedReader(Lifetime lifetime, ISettingsStore settingsStore, KnownLanguage language, StructuralSearchMatcherManager matcherManager, ILanguages languages, IStructuralSearcherFactory structuralSearcherFactory);
    public sealed virtual IEnumerable`1<KeyValuePair`2<ICustomPattern, IStructuralMatcher>> ReadData(Lifetime lifetime, IContextBoundSettingsStore store);
    public sealed virtual SettingsKey get_KeyExposed();
    private IEnumerable`1<ICustomPattern> GetPatterns(IContextBoundSettingsStore store);
    private bool IsPatternLanguage(IDictionary`2<SettingsKey, object> patternKeyIndices, IContextBoundSettingsStore store);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType17`2<ICustomPattern, IStructuralMatcher> <ReadData>b__6_0(ICustomPattern customPattern);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Patterns.CustomPatternSettingsUtil : object {
    public static void WriteCustomPattern(IContextBoundSettingsStore settingsStore, GuidIndex guid, ICustomPattern pattern);
    [CanBeNullAttribute]
public static CustomPattern ReadCustomPattern(IContextBoundSettingsStore contextBoundSettingsStore, Dictionary`2<SettingsKey, object> patternKeyIndices, ILanguages languages, StructuralSearchEngine engine);
    [CanBeNullAttribute]
public static CustomPattern ReadCustomPattern(IContextBoundSettingsStore contextBoundSettingsStore, Dictionary`2<SettingsKey, object> patternKeyIndices, IStructuralSearcherFactory structuralSearcherFactory);
    [NotNullAttribute]
private static CustomPattern ReadCustomPatternRelatedData(IContextBoundSettingsStore settingsStore, Dictionary`2<SettingsKey, object> patternKeyIndices, IStructuralSearchPattern searchPattern);
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.Patterns.ICodeTemplatePattern {
    public string SuppressionKey { get; }
    public abstract virtual string get_SuppressionKey();
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.Patterns.ICustomPattern {
    [CanBeNullAttribute]
public IStructuralSearchPattern Pattern { get; }
    public bool CanBeEdited { get; }
    public Severity Severity { get; }
    public abstract virtual IStructuralSearchPattern get_Pattern();
    public abstract virtual bool get_CanBeEdited();
    public abstract virtual Severity get_Severity();
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.Patterns.IPredefinedCustomPatternsSource {
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IEnumerable`1<IPredefinedPattern> GetPatterns();
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSearch.Patterns.IPredefinedPattern {
    [CanBeNullAttribute]
public string ConfigurableSeverityId { get; }
    [CanBeNullAttribute]
public string CompoundItemName { get; }
    [CanBeNullAttribute]
public string GroupName { get; }
    [CanBeNullAttribute]
public IStructuralSearchPatternBuilder Builder { get; }
    public abstract virtual string get_ConfigurableSeverityId();
    public abstract virtual string get_CompoundItemName();
    public abstract virtual string get_GroupName();
    public abstract virtual IStructuralSearchPatternBuilder get_Builder();
    public abstract virtual bool CheckContext(ITreeNode context);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Patterns.PredefinedPattern : CustomPattern {
    [CompilerGeneratedAttribute]
private string <ConfigurableSeverityId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompoundItemName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private IStructuralSearchPatternBuilder <Builder>k__BackingField;
    public bool CanBeEdited { get; }
    public string ConfigurableSeverityId { get; public set; }
    public string CompoundItemName { get; public set; }
    public string GroupName { get; public set; }
    public IStructuralSearchPatternBuilder Builder { get; public set; }
    public virtual bool get_CanBeEdited();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConfigurableSeverityId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ConfigurableSeverityId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CompoundItemName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CompoundItemName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_GroupName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_GroupName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IStructuralSearchPatternBuilder get_Builder();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Builder(IStructuralSearchPatternBuilder value);
    public virtual bool CheckContext(ITreeNode context);
    public bool Equals(PredefinedPattern other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public static class JetBrains.ReSharper.Feature.Services.StructuralSearch.Patterns.SsrPatternSettingsUtil : object {
    [CanBeNullAttribute]
public static IStructuralSearchPattern ReadSsrPattern(IContextBoundSettingsStore settingsStore, Dictionary`2<SettingsKey, object> patternKeyIndices, ILanguages languages, StructuralSearchEngine engine);
    [CanBeNullAttribute]
public static IStructuralSearchPattern ReadSsrPattern(IContextBoundSettingsStore settingsStore, Dictionary`2<SettingsKey, object> patternKeyIndices, IStructuralSearcherFactory structuralSearcherFactory);
    public static void WriteSsrPattern(IContextBoundSettingsStore settingsStore, Dictionary`2<SettingsKey, object> keyIndices, IStructuralSearchPattern pattern);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Patterns.StructuralSearchMatcherManager : object {
    private Dictionary`2<IStructuralSearchPattern, IStructuralMatcher> myPatternCompilationCache;
    public IStructuralMatcher GetOrCreateMatcher(IStructuralSearchPattern pattern, IStructuralSearchPatternBuilder builder);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.PlaceholderInfo : object {
    public string Type;
    public string Name;
    public Dictionary`2<string, string> Properties;
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.PlaceholderUsage : object {
    private IPlaceholder myPlaceholder;
    [CompilerGeneratedAttribute]
private TreeTextRange <Range>k__BackingField;
    [CompilerGeneratedAttribute]
private TextRange <OriginalRange>k__BackingField;
    [CompilerGeneratedAttribute]
private IPlaceholderMatcher <Matcher>k__BackingField;
    public IPlaceholder Placeholder { get; }
    public TreeTextRange Range { get; public set; }
    public TextRange OriginalRange { get; }
    public IPlaceholderMatcher Matcher { get; public set; }
    public PlaceholderUsage(IPlaceholder placeholder, int start, int end, int originalStart, int originalEnd);
    public IPlaceholder get_Placeholder();
    [CompilerGeneratedAttribute]
public TreeTextRange get_Range();
    [CompilerGeneratedAttribute]
public void set_Range(TreeTextRange value);
    [CompilerGeneratedAttribute]
public TextRange get_OriginalRange();
    [CompilerGeneratedAttribute]
public IPlaceholderMatcher get_Matcher();
    [CompilerGeneratedAttribute]
public void set_Matcher(IPlaceholderMatcher value);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.PlaceholderUsagesCollection : object {
    private JetBinaryTree`2<TreeTextRange, PlaceholderUsage> myPlaceholderUsages;
    public sealed virtual IEnumerator`1<PlaceholderUsage> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void Add(PlaceholderUsage usage);
    public void AddRange(IEnumerable`1<PlaceholderUsage> usages);
    private IEnumerable`1<PlaceholderUsage> FindCoveredRanges(TreeTextRange rangeToCompare);
    public PlaceholderUsage Find(TreeTextRange range);
    public IEnumerable`1<PlaceholderUsage> FindPlaceholdersInside(TreeTextRange range);
    public SelectionPlaceholder FindSelectionPlaceholder(TreeTextRange range, bool skipStart, bool skipEnd);
    public void Clear();
    public bool HasUsage(IPlaceholder value);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.ReplacePatternLexer : PatternLexer {
    protected LanguageService LanguageService { get; }
    protected bool MetaPlaceholderSupported { get; }
    protected virtual LanguageService get_LanguageService();
    protected virtual bool get_MetaPlaceholderSupported();
    protected virtual IMetaPlaceholder GetMetaPlaceholder(string name);
    public ReplacePatternLexerResult ParsePattern(string replacePattern, IDictionary`2<string, IPlaceholder> placeholders, StructuralSearchPatternParams params);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.ReplacePatternLexerErrorResult : PatternLexerErrorResult {
    public ReplacePatternLexerErrorResult(string error, TextRange errorRange, ITreeNode element, RangeTranslator rangeTranslator);
    public ReplacePatternLexerErrorResult(IPatternLexerErrorResult errorResult);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.ReplacePatternLexerResult : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private PlaceholderUsagesCollection <Placeholders>k__BackingField;
    public string Text { get; }
    public PlaceholderUsagesCollection Placeholders { get; }
    public ReplacePatternLexerResult(string text, PlaceholderUsagesCollection placeholders);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public PlaceholderUsagesCollection get_Placeholders();
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.SequenceMatcher`1 : object {
    private Func`2<ITreeNode, IEnumerable`1<T>> myElementsGetter;
    private IEnumerable`1<IElementMatcher> myMatchers;
    [CompilerGeneratedAttribute]
private bool <AllowUnmatched>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowUnmatchedAtTheEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeepAnalysis>k__BackingField;
    public bool AllowUnmatched { get; public set; }
    public bool AllowUnmatchedAtTheEnd { get; public set; }
    public bool DeepAnalysis { get; public set; }
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public SequenceMatcher`1(IEnumerable`1<IElementMatcher> matchers);
    public SequenceMatcher`1(IEnumerable`1<IElementMatcher> matchers, Func`2<ITreeNode, IEnumerable`1<T>> elementsGetter);
    public SequenceMatcher`1(ITreeNode element, Func`2<ITreeNode, IEnumerable`1<T>> elementsGetter, Func`2<ITreeNode, IElementMatcher> getMatcher);
    [CompilerGeneratedAttribute]
public bool get_AllowUnmatched();
    [CompilerGeneratedAttribute]
public void set_AllowUnmatched(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowUnmatchedAtTheEnd();
    [CompilerGeneratedAttribute]
public void set_AllowUnmatchedAtTheEnd(bool value);
    [CompilerGeneratedAttribute]
public bool get_DeepAnalysis();
    [CompilerGeneratedAttribute]
public void set_DeepAnalysis(bool value);
    protected virtual bool MoveToNextElement(IEnumerator`1<T> elementsEnumerator, T& currentElement);
    protected bool CanSkip(T element);
    public virtual bool CountedAsOccurrence(T element);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.StructuralSearch.SequenceMatcher`1/<MatchRecursive>d__20")]
protected IEnumerable`1<Int32[]> MatchRecursive(IList`1<T> elements, IList`1<IElementMatcher> matchers, IMatchingContext context, int currentMatcher, int currentElement, Int32[] maxElementIndicesForMatchers, Boolean[] countedAsOccurrence);
    private int MatchSingleMatcher(IList`1<T> elements, IMatchingContext context, int currentElement, Boolean[] countedAsOccurrence, int elementsCount, IElementMatcher matcher);
    public bool MatchAllVariants(IEnumerable`1<T> elements, IMatchingContext context);
    public sealed virtual bool Match(IEnumerable`1<T> elements, IMatchingContext context);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    public bool MatchFirst(ITreeNode element);
    public sealed virtual IEnumerable`1<string> get_Words();
}
[SettingsIndexedKeyAttribute("JetBrains.ReSharper.Feature.Services.StructuralSearch.Settings.CustomPatternSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "PlaceholderSettingDescription", "System.String")]
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Settings.CustomPatternPlaceholderSettings : PlaceholderSettings {
}
[SettingsIndexedKeyAttribute("JetBrains.ReSharper.Feature.Services.StructuralSearch.Settings.StructuralSearchSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ASearchReplacePatternSettingDescription", "JetBrains.Application.Settings.GuidIndex")]
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Settings.CustomPatternSettings : StructuralSearchPatternSettings {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "HighlightingSeveritySettingDescription")]
public Severity Severity;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "SuppressionKeySettingDescription")]
public string SuppressionKey;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "CommentSettingDescription")]
public string Comment;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ReplaceCommentSettingDescription")]
public string ReplaceComment;
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Settings.PlaceholderSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "TypeSettingDescription")]
public string Type;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "PropertiesSettingDescription")]
public IIndexedEntry`2<string, string> Properties;
}
[SettingsIndexedKeyAttribute("JetBrains.ReSharper.Feature.Services.StructuralSearch.Settings.RecentSearchSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "PlaceholderSettingDescription", "System.String")]
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Settings.RecentSearchPlaceholderSettings : PlaceholderSettings {
}
[SettingsIndexedKeyAttribute("JetBrains.ReSharper.Feature.Services.StructuralSearch.Settings.StructuralSearchSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "RecentSearchSettingDescription", "System.String")]
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Settings.RecentSearchSettings : StructuralSearchPatternSettings {
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Settings.StructuralSearchPatternSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "LanguageSettingDescription")]
public string LanguageName;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "SearchPatternSettingDescription")]
public string SearchPattern;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "IgnoreBracesInSingleStatementBlocksSettingDescription")]
public bool IgnoreBracesInSingleStatementBlocks;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "TreatReversedBinaryExpressionsAsEquivalentSettingDescription")]
public TreatBinaryExpressionsEquivalent TreatReversedBinaryExpressionsEquivalent;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "SmartlyMatchAssociativeExpressionsSettingDescription")]
public bool SmartMatchAssociativeExpressions;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "IgnoreParenthesesInExpressionsSettingDescription")]
public bool IgnoreParanthesisInExpressions;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "IgnoreEmptyStatementsSettingDescription")]
public bool IgnoreEmptyStatements;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "TreatPostfixAndPrefixOperatorAsEquivalentSettingDescription")]
public bool TreatPostfixAndPrefixOperatorEquivalent;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "MatchAllMembersWithOrWithoutModifiersSettingDescription")]
public bool MatchAllMembersWithoutModifiers;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "MatchAllSymbolsWithOrWithoutAttributesSettingDescription")]
public bool MatchAllSymbolsWithoutAttributes;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "MatchMethodParametersWiththisrefOroutSettingDescription")]
public bool MatchMethodParameterWithThisRefOut;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "MatchVoidWithTypePlaceholderSettingDescription")]
public bool TypePlaceholderMatchesVoid;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "MatchAllCatchClausesWithOutWithoutExceptionFiltersSettingDescription")]
public bool MatchCatchClauseWithoutExceptionFilter;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "MatchCExpressionBodiesAndSimilarPlainOldRegularMethodBodiesSettingDescription")]
public bool MatchExpressionBodyAndRegularBody;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "IgnoreCConditionalAccessSignSettingDescription")]
public bool IgnoreConditionalAccess;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "IgnoreAdditionalUnmatchedContentSettingDescription")]
public bool IgnoreUnmatchedContent;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "IsAReplacePatternSettingDescription")]
public bool IsReplacePattern;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ReplacePatternSettingDescription")]
public string ReplacePattern;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "FormatAfterReplaceSettingDescription")]
public bool FormatAfterReplace;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShortenReferencesSettingDescription")]
public bool ShortenReferences;
}
[SettingsKeyAttribute("JetBrains.ReSharper.Resources.Settings.PatternsAndTemplatesSettingsKey", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "SearchWithPatternSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.Settings.StructuralSearchSettings : object {
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.SimpleMatcher`2 : object {
    private TValue myProp;
    [NotNullAttribute]
private Func`2<TSource, TValue> myPropGetter;
    [CanBeNullAttribute]
private Func`3<TValue, TValue, bool> myComparer;
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public SimpleMatcher`2(TSource element, Func`2<TSource, TValue> propGetter);
    public SimpleMatcher`2(TSource element, Func`2<TSource, TValue> propGetter, Func`3<TValue, TValue, bool> comparer);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual IEnumerable`1<string> get_Words();
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.StructuralFinder : object {
    private IStructuralMatcher myStructuralSearchMatcher;
    private List`1<IStructuralMatchResult> myMatchResults;
    private MatchingContext myContext;
    private IReadOnlyCollection`1<string> myWords;
    public bool ProcessingIsFinished { get; }
    public IEnumerable`1<IStructuralMatchResult> MatchResults { get; }
    public StructuralFinder(IStructuralMatcher structuralSearchMatcher);
    public sealed virtual bool InteriorShouldBeProcessed(ITreeNode element);
    public sealed virtual bool get_ProcessingIsFinished();
    public IEnumerable`1<IStructuralMatchResult> get_MatchResults();
    public sealed virtual void ProcessBeforeInterior(ITreeNode element);
    public sealed virtual void ProcessAfterInterior(ITreeNode element);
}
public abstract class JetBrains.ReSharper.Feature.Services.StructuralSearch.StructuralMatcher : object {
    [NotNullAttribute]
private IElementMatcher myMatcher;
    [CanBeNullAttribute]
private HashSet`1<string> myWords;
    protected StructuralSearchPatternParams ourParams;
    [NotNullAttribute]
protected IElementMatcher Matcher { get; }
    public IReadOnlyCollection`1<string> Words { get; }
    protected StructuralMatcher(IElementMatcher matcher, StructuralSearchPatternParams params);
    public sealed virtual IStructuralMatchResult Match(ITreeNode element);
    public virtual IStructuralMatchResult Match(ITreeNode element, IMatchingContext context);
    public sealed virtual bool QuickMatch(ITreeNode element, IMatchingContext context);
    protected IElementMatcher get_Matcher();
    public sealed virtual IReadOnlyCollection`1<string> get_Words();
    public abstract virtual IReadOnlyCollection`1<string> GetExtendedWords(ISolution solution);
    [NotNullAttribute]
internal static HashSet`1<string> GetWords(IElementMatcher matcher, HashSet`1<string> result);
}
[PsiSharedComponentAttribute]
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.StructuralSearchEngine : object {
    private ILanguageManager myLanguageManager;
    private ILanguages myLanguages;
    public StructuralSearchEngine(Lifetime lifetime, ILanguageManager languageManager, ILanguages languages);
    [NotNullAttribute]
public IStructuralSearcherFactory GetFactory(PsiLanguageType language);
    public IStructuralSearcherFactory TryGetFactory(PsiLanguageType language);
    public bool IsAvailableFor(PsiLanguageType language);
    public IEnumerable`1<PsiLanguageType> GetNonInternalLanguages();
    [CompilerGeneratedAttribute]
private bool <GetNonInternalLanguages>b__6_0(PsiLanguageType l);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.StructuralSearcher : object {
    private IStructuralMatcher myStructuralMatcher;
    private PsiLanguageType myLanguage;
    private DocumentManager myDocumentManager;
    public PsiLanguageType Language { get; }
    public StructuralSearcher(DocumentManager documentManager, PsiLanguageType language, IStructuralMatcher matcher);
    public sealed virtual PsiLanguageType get_Language();
    public sealed virtual bool ProcessProjectItem(IPsiSourceFile sourceFile, IFindResultConsumer`1<TResult> consumer);
    public sealed virtual bool ProcessElement(ITreeNode element, IFindResultConsumer`1<TResult> consumer);
    [CompilerGeneratedAttribute]
private bool <ProcessProjectItem>b__6_0(PsiLanguageType languageType);
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.Feature.Services.StructuralSearch.IStructuralSearcherFactory")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.StructuralSearcherFactoryAttribute : LanguageAttribute {
    public StructuralSearcherFactoryAttribute(Type Language, Instantiation instantiation);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.StructuralSearchException : Exception {
    public StructuralSearchException(string message, Exception innerException);
    public StructuralSearchException(string message);
}
public abstract class JetBrains.ReSharper.Feature.Services.StructuralSearch.StructuralSearchPatternBase : object {
    [CompilerGeneratedAttribute]
private string <SearchPattern>k__BackingField;
    [CompilerGeneratedAttribute]
private StructuralSearchPatternParams <Params>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, IPlaceholder> <Placeholders>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SuppressionKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplacePattern>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplaceComment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FormatAfterReplace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShortenReferences>k__BackingField;
    public string SearchPattern { get; public set; }
    public StructuralSearchPatternParams Params { get; public set; }
    public IDictionary`2<string, IPlaceholder> Placeholders { get; public set; }
    public string SuppressionKey { get; public set; }
    public string Comment { get; public set; }
    public string ReplacePattern { get; public set; }
    public string ReplaceComment { get; public set; }
    public bool FormatAfterReplace { get; public set; }
    public bool ShortenReferences { get; public set; }
    public IStructuralSearchPatternPresenter Presenter { get; }
    public PsiLanguageType Language { get; }
    protected StructuralSearchPatternBase(string searchPattern, StructuralSearchPatternParams params, IDictionary`2<string, IPlaceholder> placeholders);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SearchPattern();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SearchPattern(string value);
    [CompilerGeneratedAttribute]
public sealed virtual StructuralSearchPatternParams get_Params();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Params(StructuralSearchPatternParams value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, IPlaceholder> get_Placeholders();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Placeholders(IDictionary`2<string, IPlaceholder> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SuppressionKey();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SuppressionKey(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Comment();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Comment(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ReplacePattern();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReplacePattern(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ReplaceComment();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReplaceComment(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_FormatAfterReplace();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FormatAfterReplace(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShortenReferences();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShortenReferences(bool value);
    public abstract virtual IStructuralSearchPatternPresenter get_Presenter();
    public abstract virtual PsiLanguageType get_Language();
    public abstract virtual IStructuralSearchPattern AddPatternPlaceholder(string name, string pattern, bool isShared);
    public abstract virtual IStructuralSearchPattern AddOrPatternPlaceholder(string name, bool isShared, String[] patterns);
    public abstract virtual void ReadPlaceholders(IEnumerable`1<PlaceholderInfo> placeholderInfos);
    public abstract virtual IStructuralMatcher CreateMatcher();
    public abstract virtual IStructuralMatcher CreateMatcher(IStructuralSearchPatternBuilder builder);
    public abstract virtual IStructuralSearchPatternValidator GetValidator();
    public abstract virtual bool GuessPlaceholders();
    public abstract virtual IStructuralSearchPattern Clone();
    private sealed virtual override object System.ICloneable.Clone();
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.StructuralSearchPatternParams : object {
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool IgnoreBracesInSingleStatementBlocks;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public TreatBinaryExpressionsEquivalent TreatReversedBinaryExpressionsEquivalent;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool SmartMatchAssociativeExpressions;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool IgnoreParanthesisInExpressions;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool IgnoreEmptyStatements;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool TreatPostfixAndPrefixOperatorEquivalent;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool MatchAllMembersWithoutModifiers;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool MatchAllSymbolsWithoutAttributes;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool MatchMethodParameterWithThisRefOut;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool TypePlaceholderMatchesVoid;
    public bool MatchCatchClauseWithoutExceptionFilter;
    public bool MatchExpressionBodyAndRegularBody;
    public bool IgnoreConditionalAccess;
    public bool IgnoreLiteralExpressionForms;
    public bool IgnoreUnmatchedContent;
    public bool AllowPlaceholderArgumentsParsing;
    [NotNullAttribute]
public static StructuralSearchPatternParams CreateParams(bool matchSimilar, bool ignoreUnmatchedContent, TreatBinaryExpressionsEquivalent binaryExpressions);
    protected bool Equals(StructuralSearchPatternParams other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum JetBrains.ReSharper.Feature.Services.StructuralSearch.TreatBinaryExpressionsEquivalent : Enum {
    public int value__;
    public static TreatBinaryExpressionsEquivalent Never;
    public static TreatBinaryExpressionsEquivalent Always;
    public static TreatBinaryExpressionsEquivalent Smart;
}
public abstract class JetBrains.ReSharper.Feature.Services.StructuralSearch.TypeMatcherBase`1 : object {
    [CanBeNullAttribute]
private List`1<ITypeMatcher> myTypeArgumentMatchers;
    public string ShortName { get; }
    [CanBeNullAttribute]
protected List`1<ITypeMatcher> TypeArgumentMatchers { get; }
    [CanBeNullAttribute]
protected string TypeName { get; }
    protected TypeMatcherBase`1(List`1<ITypeMatcher> typeArgumentMatchers);
    public sealed virtual bool MatchType(ITreeNode element, IMatchingContext context);
    public sealed virtual bool MatchType(ITreeNode element, IType elementType, IMatchingContext context);
    public sealed virtual string get_ShortName();
    protected virtual bool MatchType(ITreeNode element, IType type, IType elementType, IMatchingContext context);
    protected virtual bool CheckEmptySubstitution(ISubstitution substitution);
    protected List`1<ITypeMatcher> get_TypeArgumentMatchers();
    protected virtual bool MatchTypeWithPlaceholder(ITreeNode element, IType elementType, IMatchingContext context);
    private bool DoCheckSubstitution(ISubstitution subst, ITypeElement elDeclaredTypeElement, ITreeNode element, IMatchingContext context);
    protected virtual bool CheckSubstitution(ISubstitution subst, ITypeElement elDeclaredTypeElement, ITreeNode element, IMatchingContext context);
    protected abstract virtual string get_TypeName();
    [CanBeNullAttribute]
protected abstract virtual IType GetOriginalType(ITreeNode context);
    [CanBeNullAttribute]
protected abstract virtual IType GetElementType(TTreeNode element);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSearch.UnorderedSetMatcher : object {
    private IEnumerable`1<IElementMatcher> myMatchers;
    [CompilerGeneratedAttribute]
private bool <AllowUnmatched>k__BackingField;
    public bool AllowUnmatched { get; public set; }
    public IEnumerable`1<IElementMatcher> Children { get; }
    public IEnumerable`1<string> Words { get; }
    public UnorderedSetMatcher(IEnumerable`1<IElementMatcher> matchers);
    [CompilerGeneratedAttribute]
public bool get_AllowUnmatched();
    [CompilerGeneratedAttribute]
public void set_AllowUnmatched(bool value);
    public sealed virtual bool Match(IEnumerable`1<ITreeNode> elements, IMatchingContext context);
    public sealed virtual bool Match(ITreeNode element, IMatchingContext context);
    public sealed virtual IEnumerable`1<IElementMatcher> get_Children();
    public sealed virtual IEnumerable`1<string> get_Words();
}
public interface JetBrains.ReSharper.Feature.Services.StructuralSelection.IStructuralSelectionHandler {
    public abstract virtual void HandleSelection(ITreeRange treeRange, UserDataHolder precomputedData);
}
public class JetBrains.ReSharper.Feature.Services.StructuralSelection.StructuralSelectionInfo : object {
    [CompilerGeneratedAttribute]
private UserDataHolder <PrecomputedData>k__BackingField;
    [NotNullAttribute]
public UserDataHolder PrecomputedData { get; }
    [CompilerGeneratedAttribute]
public UserDataHolder get_PrecomputedData();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.StructuralSelection.StructuralSelectionManager : object {
    [NotNullAttribute]
private IEnumerable`1<IStructuralSelectionHandler> mySelectionHandlers;
    private static string StructuralSelectionActionKey;
    public StructuralSelectionManager(IEnumerable`1<IStructuralSelectionHandler> selectionHandlers);
    [CanBeNullAttribute]
public StructuralSelectionInfo TryConstructStructuralSelectionInfo(ITreeRange treeRange);
    public void OnStructuralSelectionSet(IDocument document, ITreeRange treeRange);
    public void OnStructuralSelectionSet(IDocument document, StructuralSelectionInfo selectionInfo);
}
[SettingsKeyAttribute("JetBrains.Application.Icons.Settings.ThemedIconSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ControlsThemeSelectionForSourceCodeSymbolIconsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "SelectsTheIconThemeToUseWhenRenderingSourceCodeSymbolIconsSettingDescription")]
public PsiSymbolIconThemeSelection PsiSymbolIconThemeSelection;
}
public static class JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect : object {
    [NotNullAttribute]
public static IconThemeAspect SymbolsIdea;
    [NotNullAttribute]
public static IconThemeAspect SymbolsVs08;
    [NotNullAttribute]
public static IconThemeAspect SymbolsVs11Color;
    [NotNullAttribute]
public static IconThemeAspect SymbolsVs11Gray;
    [NotNullAttribute]
public static IconThemeAspect SymbolsVs11GrayDark;
    private static PsiSymbolIconThemeAspect();
}
public enum JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSelection : Enum {
    public int value__;
    public static PsiSymbolIconThemeSelection Automatic;
    public static PsiSymbolIconThemeSelection SymbolsVs08;
    public static PsiSymbolIconThemeSelection SymbolsIdea;
    public static PsiSymbolIconThemeSelection SymbolsVs11Gray;
    public static PsiSymbolIconThemeSelection SymbolsVs11Color;
    public static PsiSymbolIconThemeSelection SymbolsVs11GrayDark;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSettingsLoader : object {
    private IProperty`1<IconThemeAspect[]> mySuggestedIconTheme;
    public IProperty`1<IconThemeAspect[]> AutoSelectOverride;
    private static ILogger Logger;
    private IProperty`1<IconThemeAspect[]> JetBrains.Application.UI.Icons.Settings.IThemedIconThemeOracle.SuggestedIconTheme { get; }
    public PsiSymbolIconThemeSettingsLoader(Lifetime lifetime, ISettingsStore store, IThreading threading, IProperty`1<IconThemeAspect[]> propAutoSelectOverride);
    private static PsiSymbolIconThemeSettingsLoader();
    private static IconThemeAspect[] OverrideAutosAndToAspects(PsiSymbolIconThemeSelection selPsi, IconThemeAspect[] selGeneric);
    private sealed virtual override IProperty`1<IconThemeAspect[]> JetBrains.Application.UI.Icons.Settings.IThemedIconThemeOracle.get_SuggestedIconTheme();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Text.ContentTrigramIndex : TrigramIndex {
    private int myMaxFileSize;
    public ContentTrigramIndex(Lifetime lifetime, IPersistentIndexManager persistentIndexManager, IPsiFilesCache psiFilesCache, IShellLocks locks, PerformanceThresholds performanceThresholds);
    protected virtual bool IsApplicable(IPsiSourceFile sourceFile);
}
public interface JetBrains.ReSharper.Feature.Services.Text.ITrigramIndex {
    public abstract virtual bool IsAcceptableFromCaches(IPsiSourceFile sourceFile);
    public abstract virtual bool IsAcceptable(IPsiSourceFile sourceFile);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IPsiSourceFile> GetFilesContainingAnyQuery(IEnumerable`1<string> queries, bool ensureIsWord);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IPsiSourceFile> GetFilesContainingQueries(IEnumerable`1<string> queries, bool ensureIsWord);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IPsiSourceFile> GetFilesContainingQuery(string query, bool ensureIsWord);
    [CanBeNullAttribute]
public abstract virtual IEnumerable`1<ValueTuple`2<IPsiSourceFile, int>> GetEntriesNumberForFiles(string query);
}
public interface JetBrains.ReSharper.Feature.Services.Text.ITrigramIndexBuilder {
    public abstract virtual Int32[] Build(IPsiSourceFile sourceFile);
    public abstract virtual Int32[] Build(IDocument document, string displayName);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Text.SourcesTrigramIndex : TrigramIndex {
    public SourcesTrigramIndex(Lifetime lifetime, IPersistentIndexManager persistentIndexManager, IPsiFilesCache psiFilesCache, IShellLocks locks);
    protected virtual bool IsApplicable(IPsiSourceFile sourceFile);
    [ObsoleteAttribute("Use 'GetFilesContainingAllSubwords(string query) ")]
public virtual ICollection`1<IPsiSourceFile> GetFilesContainingWord(string word);
    [ObsoleteAttribute("Use 'GetFilesContainingAnySubword(IEnumerable<string> queries)' ")]
public virtual ICollection`1<IPsiSourceFile> GetFilesContainingWords(IEnumerable`1<string> words);
    [ObsoleteAttribute("Use 'CanContainAllSubwords(IPsiSourceFile sourceFile, string text)' ")]
public virtual bool CanContainWord(IPsiSourceFile sourceFile, string word);
    [ObsoleteAttribute("Use 'GetSubwords(string text)' ")]
public sealed virtual IEnumerable`1<string> GetWords(string buffer);
    [ObsoleteAttribute("Use 'GetSubwordsFromFileName(FileSystemPath path)' ")]
public virtual IEnumerable`1<string> GetWordsFromFileName(VirtualFileSystemPath path);
    public virtual ICollection`1<IPsiSourceFile> GetFilesContainingAllSubwords(string query);
    public virtual ICollection`1<IPsiSourceFile> GetFilesContainingAnySubword(IEnumerable`1<string> queries);
    public virtual bool CanContainAllSubwords(IPsiSourceFile sourceFile, string text);
    public virtual IEnumerable`1<string> GetSubwords(string text);
    public virtual IEnumerable`1<string> GetSubwordsFromFileName(VirtualFileSystemPath path);
    public virtual IEnumerable`1<IPsiSourceFile> GetFilesContainingAllWords(IEnumerable`1<string> queries);
    public virtual IEnumerable`1<IPsiSourceFile> GetFilesContainingAnyWords(IEnumerable`1<string> queries);
}
public abstract class JetBrains.ReSharper.Feature.Services.Text.TrigramIndex : SimpleICache`1<Int32[]> {
    private static ILogger ourLog;
    private TrigramIndexBuilder myDefaultBuilder;
    [NotNullAttribute]
private ILogger myLogger;
    protected TrigramIndex(Lifetime lifetime, IPersistentIndexManager persistentIndexManager, IPsiFilesCache psiFilesCache, IShellLocks locks);
    private static TrigramIndex();
    public sealed virtual bool IsAcceptableFromCaches(IPsiSourceFile sourceFile);
    public virtual bool IsAcceptable(IPsiSourceFile sourceFile);
    public virtual void MarkAsDirty(IPsiSourceFile sourceFile);
    protected virtual void RemoveFromDirty(IPsiSourceFile sourceFile);
    public virtual object Build(IPsiSourceFile sourceFile, bool isStartup);
    public object Build(IDocument document, string displayName);
    public object Build(IBuffer buffer, string displayName);
    [NotNullAttribute]
public static TrigramToken[] ToTokensArray(string s);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Text.TrigramIndex/<GetFilesContainingAnyQuery>d__13")]
public sealed virtual IEnumerable`1<IPsiSourceFile> GetFilesContainingAnyQuery(IEnumerable`1<string> queries, bool ensureIsWord);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Text.TrigramIndex/<GetFilesContainingQueries>d__14")]
public sealed virtual IEnumerable`1<IPsiSourceFile> GetFilesContainingQueries(IEnumerable`1<string> queries, bool ensureIsWord);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Text.TrigramIndex/<GetFilesContainingQuery>d__15")]
public sealed virtual IEnumerable`1<IPsiSourceFile> GetFilesContainingQuery(string query, bool ensureIsWord);
    public IDictionary`2<TKey, List`1<IPsiSourceFile>> GetFilesContainingAnyQuery(IEnumerable`1<ValueTuple`2<TKey, IEnumerable`1<string>>> queriesPerKey, int maxOccurrencesPerKey);
    protected static QueryType GetQueryType(int queryLength);
    protected static bool ContainsQuery(UnsafeIntArray trigramEntryData, QueryType trigramComparer, string query, bool ensureIsWord, TrigramToken[] queryHashes);
    private static bool CheckIsWord(char queryStart, char queryEnd, int wordLength, TrigramIndexEntryReader trigramIndexEntryReader);
    protected static int CountEntriesForQueryTrigrams(UnsafeIntArray trigramEntryData, TrigramToken[] queryHashes);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Text.TrigramIndex/<GetEntriesNumberForFiles>d__22")]
public sealed virtual IEnumerable`1<ValueTuple`2<IPsiSourceFile, int>> GetEntriesNumberForFiles(string query);
}
public class JetBrains.ReSharper.Feature.Services.Text.TrigramIndexBuilder : object {
    private ILogger myLogger;
    private IPsiFilesCache myPsiFilesCache;
    public TrigramIndexBuilder(IPsiFilesCache psiFilesCache, ILogger logger);
    public virtual Int32[] Build(IPsiSourceFile sourceFile);
    private Int32[] BuildInner(IBuffer sourceFileBuffer, ICollection`1<CachedPsiFile> cachedFiles, string displayName, IPsiSourceFile sourceFile, string buildId);
    public virtual Int32[] Build(IDocument document, string displayName);
    public virtual Int32[] Build(IBuffer buffer, string displayName);
}
public class JetBrains.ReSharper.Feature.Services.Text.TrigramIndexEntryBuilder : ValueType {
    private static int BufferL1Length;
    private static int BufferL1AllocSize;
    private static int LookupL2Length;
    private static int LookupL2AllocSize;
    internal static int HeaderLength;
    internal static int HeaderAllocSize;
    private static int L1Offset;
    private static int L2Offset;
    private static int HeaderOffset;
    private static int Trigrams32Offset;
    public int Trigram32Count;
    public int Trigram16Count;
    private Cookie myUnsafeWriterCookie;
    private UnsafeWriter myUnsafeWriter;
    public TrigramIndexEntryBuilder(Cookie unsafeWriterCookie);
    public void Add(TrigramToken trigramToken);
    public UnsafeIntArray Build();
}
[DefaultMemberAttribute("Item")]
public class JetBrains.ReSharper.Feature.Services.Text.TrigramIndexEntryReader : ValueType {
    internal static int HeaderLength;
    private UnsafeIntArray myEntryData;
    private int my32BitTrigramsCount;
    private int my16BitTrigramsCount;
    private int my16BitTrigramsSectorLength;
    private int my32BitTrigramsSectorLength;
    private int my16BitTrigramsShift;
    private int my32BitTrigramsShift;
    private int myTotalCount;
    public int Length { get; }
    public int Count { get; }
    public int Item { get; }
    public TrigramIndexEntryReader(UnsafeIntArray entryData);
    public int get_Length();
    public int get_Count();
    public int get_Item(int index);
    public bool ContainsAll(TrigramToken[] sortedShortTrigramHashes, int left, int right);
    private bool ContainsAll(TrigramToken[] sortedShortTrigramHashes, int leftIndex, int rightIndex, int leftSearchIndex, int rightSearchIndex);
    public bool Contains(int queryTrigramHash);
    public bool ContainsTwin(int queryTwingramHash);
    public bool Contains(char queryCharacter);
    private int BinarySearch(int left, int right, int trigramHash);
    private int BinarySearchTwin(int left, int right, int twingramHash, bool isShortSector);
}
public class JetBrains.ReSharper.Feature.Services.Text.Trigrams.BufferTrigramSource : ValueType {
    private IBuffer myBuffer;
    public IBuffer Buffer { get; }
    public BufferTrigramSource(IBuffer query);
    public IBuffer get_Buffer();
    internal BufferTrigramTokenStream GetTokenStream();
    public BufferTrigramTokenStream GetEnumerator();
    private sealed virtual override IEnumerator`1<TrigramToken> System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Feature.Services.Text.Trigrams.TrigramToken>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class JetBrains.ReSharper.Feature.Services.Text.Trigrams.BufferTrigramTokenStream : ValueType {
    private IBuffer mySource;
    private int myCurrentIndex;
    private int myMaxIndex;
    private TrigramToken myCurrent;
    private CachedStreamChar myCachedA;
    private CachedStreamChar myCachedB;
    private CachedStreamChar myWordStartCharacter;
    private int myWordStartIndex;
    private bool myIsInWord;
    private bool myHasAdditionalToken;
    private TrigramToken myAdditionalToken;
    public TrigramToken Current { get; private set; }
    private object System.Collections.IEnumerator.Current { get; }
    internal BufferTrigramTokenStream(IBuffer source);
    public sealed virtual TrigramToken get_Current();
    private void set_Current(TrigramToken value);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual void Dispose();
}
internal class JetBrains.ReSharper.Feature.Services.Text.Trigrams.CachedStreamChar : ValueType {
    private char myCharacter;
    private bool myIsIdentifierFirst;
    private bool myIsIdentifierSecond;
    internal bool IsIdentifierFirst { get; }
    internal bool IsIdentifierSecond { get; }
    public CachedStreamChar(char character);
    public static int op_Implicit(CachedStreamChar cachedChar);
    public static char op_Implicit(CachedStreamChar cachedChar);
    public static CachedStreamChar op_Implicit(char character);
    internal bool get_IsIdentifierFirst();
    internal bool get_IsIdentifierSecond();
}
public class JetBrains.ReSharper.Feature.Services.Text.Trigrams.StringTokenStream : ValueType {
    private string mySource;
    private int myCurrentIndex;
    private int myMaxIndex;
    private TrigramToken myCurrent;
    private char myCachedA;
    private char myCachedB;
    public TrigramToken Current { get; private set; }
    private object System.Collections.IEnumerator.Current { get; }
    internal StringTokenStream(string source);
    public sealed virtual TrigramToken get_Current();
    private void set_Current(TrigramToken value);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual void Dispose();
}
[DebuggerDisplayAttribute("Code: {_hash}")]
public class JetBrains.ReSharper.Feature.Services.Text.Trigrams.TrigramToken : ValueType {
    public static char NullCharacter;
    private static int RightQuarterMask;
    private static int RightHalfMask;
    private static UInt32 LeftHalfMask;
    private static int ShortHashTwinMask;
    private static UInt32 FullHashTwinMask;
    private static UInt32 Full31BitHashFlag;
    private int _hash;
    public int Hash { get; }
    public TrigramToken(char a, char b, char c);
    private TrigramToken(char a, char b, int c);
    public int get_Hash();
    [PureAttribute]
public bool IsShort();
    [PublicAPIAttribute]
public sealed virtual bool Equals(TrigramToken other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(TrigramToken left, TrigramToken right);
    public static bool op_Inequality(TrigramToken left, TrigramToken right);
    public static int op_Explicit(TrigramToken token);
    public virtual string ToString();
    public static bool IsShort(int queryTrigramHash);
    public static bool IsShort(int iA, int iB, int iC);
    public static int ExtractTwinHash(int trigramTokenHash, bool isShortTrigram);
    public static int GetTwinHash(char a, char b, bool isShortTrigram);
    public static char ExtractLastCharacter(int trigramTokenHash);
    public static TrigramToken CreateWordMarker(char fistLetter, char lastLetter, int lenght);
    private static int CalculateLaftPartHashCode(int iA, int iB, bool isShortHash);
    private static int CalculateFullHashCode(int iA, int iB, int iC);
    public sealed virtual int CompareTo(TrigramToken other);
}
internal class JetBrains.ReSharper.Feature.Services.Text.WordIndexUtil : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Text.WordIndexUtil/<SplitToSubwords>d__0")]
internal static IEnumerable`1<string> SplitToSubwords(string buffer);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Text.WordIndexUtil/<SplitToSubwords>d__1")]
internal static IEnumerable`1<string> SplitToSubwords(IEnumerable`1<string> buffers);
    internal static bool IsIdentifierFirstLetter(char c);
    internal static bool IsIdentifierSecondLetter(char c);
    internal static bool IsUnderscoreOrDigit(char c);
    [ConditionalAttribute("JET_MODE_ASSERT")]
public static void AssertSimpleWords(List`1<string> queriesList);
    [ConditionalAttribute("JET_MODE_ASSERT")]
public static void AssertSimpleWord(string query);
    public static bool IsSimpleWord(string query);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Feature.Services.TextControl.CollapsedRegionsHelper : object {
    [PureAttribute]
public abstract virtual bool IsVisible(TextRange textRange);
    public abstract virtual void Dispose();
    [PureAttribute]
public static CollapsedRegionsHelper Create(ITextControl textControl);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.TextControl.InvisibleTextControlsTracker : object {
    private static Key`1<DateTimeHolder> TEXT_CONTROL_BECAME_INVISIBLE_TIMESTAMP;
    private static int ourTimestampTracker;
    private SortedList`2<long, ITextControl> myInvisibleTextControls;
    public IList`1<ITextControl> InvisibleTextControls { get; }
    public InvisibleTextControlsTracker(Lifetime lifetime, IThreading locks, ITextControlManager textControlManager);
    private static InvisibleTextControlsTracker();
    public IList`1<ITextControl> get_InvisibleTextControls();
}
[ShellComponentAttribute("4")]
public class JetBrains.ReSharper.Feature.Services.TextControl.SelectionUndoableActionHandler : object {
    private static ILogger ourLog;
    public SelectionUndoableActionHandler(Lifetime lifetime, DocumentCommandProcessor commandProcessor, RunningTextControls textControls, IRunningDocuments runningDocuments);
    private static SelectionUndoableActionHandler();
}
public abstract class JetBrains.ReSharper.Feature.Services.TextControl.SimpleTextControlOverridingAction : OverridingActionHandler {
    public ActionHandlerPriority Priority { get; }
    protected SimpleTextControlOverridingAction(String[] baseActionIds);
    public virtual ActionHandlerPriority get_Priority();
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public abstract virtual void Execute(IDataContext context, ITextControl textControl);
}
public static class JetBrains.ReSharper.Feature.Services.TextControl.TextControlActionsEmulation : object {
    private static string TabIndentText;
    private static string ourIndentText;
    private static TextControlActionsEmulation();
    public static DocumentOffset GetPreviousCodePointOffset(DocumentOffset offset);
    public static DocumentOffset GetNextCodePointOffset(DocumentOffset offset);
    private static bool IsSurrogatePair(IBuffer buffer, int offset);
    private static void DeleteSelection(ITextControl textControl);
}
public class JetBrains.ReSharper.Feature.Services.TodoItems.ClrTodoItem : TodoItemBase {
    [CompilerGeneratedAttribute]
private string <BoundElementName>k__BackingField;
    [CompilerGeneratedAttribute]
private TodoItemBinding <Binding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaseSensitiveBinding>k__BackingField;
    [CanBeNullAttribute]
public string BoundElementName { get; private set; }
    public TodoItemBinding Binding { get; private set; }
    public bool CaseSensitiveBinding { get; private set; }
    public ClrTodoItem(Guid patternId, string text, TextRange textRange, TextRange tagRange, IPsiSourceFile sourceFile, PsiLanguageType language);
    [CompilerGeneratedAttribute]
public string get_BoundElementName();
    [CompilerGeneratedAttribute]
private void set_BoundElementName(string value);
    [CompilerGeneratedAttribute]
public TodoItemBinding get_Binding();
    [CompilerGeneratedAttribute]
private void set_Binding(TodoItemBinding value);
    [CompilerGeneratedAttribute]
public bool get_CaseSensitiveBinding();
    [CompilerGeneratedAttribute]
private void set_CaseSensitiveBinding(bool value);
    public virtual IDeclaredElementEnvoy GetNamespaceEnvoy(ISymbolCache symbolCache);
    public virtual IDeclaredElementEnvoy GetTypeElementEnvoy(ISymbolCache symbolCache);
    internal void Bind(TodoItemBinding binding, string name, bool caseSensitive);
    public virtual UpdateKind UpdateFrom(ITodoItem updated);
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.TodoItems.ClrTodoManager : SimpleICache`1<List`1<ITodoItem>> {
    private object myLock;
    private Lifetime myLifetime;
    private ISolution mySolution;
    private IShellLocks myLocks;
    private PsiProjectFileTypeCoordinator myProjectFileTypeCoordinator;
    private ILanguageManager myLanguageManager;
    private IPrimaryTodoManager myPrimaryTodoManager;
    [CompilerGeneratedAttribute]
private SimpleSignal <SettingsChanged>k__BackingField;
    private HashSet`1<IPsiSourceFile> myCurrentUpdatedFiles;
    [CompilerGeneratedAttribute]
private Signal`1<IEnumerable`1<IPsiSourceFile>> <FilesWereUpdated>k__BackingField;
    private GroupingEvent myUpdatedEvent;
    public SimpleSignal SettingsChanged { get; }
    public Signal`1<IEnumerable`1<IPsiSourceFile>> FilesWereUpdated { get; }
    public object Lock { get; }
    public ChunkHashMap`2<IPsiSourceFile, List`1<ITodoItem>> AllItems { get; }
    public ISolution Solution { get; }
    public ICollection`1<IPsiSourceFile> DirtyFiles { get; }
    public ClrTodoManager(Lifetime lifetime, IShellLocks locks, ISolution solution, PsiProjectFileTypeCoordinator projectFileTypeCoordinator, ILanguageManager languageManager, IPersistentIndexManager persistentIndexManager, ClrTodoItemMarshaller todoItemMarshaller);
    [CompilerGeneratedAttribute]
public sealed virtual SimpleSignal get_SettingsChanged();
    [CompilerGeneratedAttribute]
public sealed virtual Signal`1<IEnumerable`1<IPsiSourceFile>> get_FilesWereUpdated();
    public sealed virtual void SetPrimaryTodoManager(IPrimaryTodoManager manager);
    public virtual object get_Lock();
    public sealed virtual void Update();
    public virtual ChunkHashMap`2<IPsiSourceFile, List`1<ITodoItem>> get_AllItems();
    public sealed virtual ISolution get_Solution();
    public virtual IEnumerable`1<ITodoItem> GetItemsForFile(IPsiSourceFile sourceFile);
    protected virtual void OnUpdated(IPsiSourceFile file);
    public virtual void MergeLoaded(object data);
    protected virtual bool IsApplicable(IPsiSourceFile sourceFile);
    public virtual bool UpToDate(IPsiSourceFile sourceFile);
    [CanBeNullAttribute]
public object Build(IPsiSourceFile sourceFile);
    public virtual object Build(IPsiSourceFile sourceFile, bool isStartup);
    public virtual void Merge(IPsiSourceFile sourceFile, object builtPart);
    public virtual void Drop(IPsiSourceFile sourceFile);
    [CanBeNullAttribute]
private List`1<ITodoItem> ProcessSourceFile(IPsiSourceFile sourceFile);
    private static void BindItems(IPsiSourceFile sourceFile, IEnumerable`1<ITodoItem> items);
    [NotNullAttribute]
private List`1<ITodoItem> FindItems(IPsiSourceFile sourceFile, TodoRegexMatcher[] matchers);
    private static Pair`2<TodoItemBinding, string> FindBinding(ITypeAndNamespaceHolderDeclaration declaration, TreeTextRange range, Pair`2<TodoItemBinding, string> parent);
    private static Pair`2<TodoItemBinding, string> FindNestedTypeBinding(IEnumerable`1<ITypeDeclaration> declarations, TreeTextRange range, Pair`2<TodoItemBinding, string> parent);
    private static void BindPsiData(ClrTodoItem item, IFile psiFile, IPsiSourceFile sourceFile);
    public sealed virtual ICollection`1<IPsiSourceFile> get_DirtyFiles();
    [CompilerGeneratedAttribute]
private void <.ctor>b__15_2();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.TodoItems.DefaultTodoContentsProvider : object {
    public virtual Nullable`1<TextRange> GetTokenContentsRange(string documentText, TextRange tokenRange, TokenNodeType tokenType);
}
public interface JetBrains.ReSharper.Feature.Services.TodoItems.IPrimaryTodoManager {
    [NotNullAttribute]
public IEnumerable`1<ChunkHashMap`2<IPsiSourceFile, List`1<ITodoItem>>> AllItems { get; }
    [NotNullAttribute]
public TodoRegexMatcher[] Matchers { get; }
    [NotNullAttribute]
public abstract virtual IDisposable Lock();
    public abstract virtual IEnumerable`1<ChunkHashMap`2<IPsiSourceFile, List`1<ITodoItem>>> get_AllItems();
    public abstract virtual TodoRegexMatcher[] get_Matchers();
}
public interface JetBrains.ReSharper.Feature.Services.TodoItems.ITodoContentsProvider {
    public abstract virtual Nullable`1<TextRange> GetTokenContentsRange(string documentText, TextRange tokenRange, TokenNodeType tokenType);
}
public interface JetBrains.ReSharper.Feature.Services.TodoItems.ITodoExplorer {
    public bool CanLocateItems { get; }
    public abstract virtual void Locate(ITodoItem item);
    public abstract virtual bool get_CanLocateItems();
}
public interface JetBrains.ReSharper.Feature.Services.TodoItems.ITodoItem {
    public Guid PatternId { get; public set; }
    [NotNullAttribute]
public string Text { get; public set; }
    public TextRange TextRange { get; public set; }
    public TextRange TagRange { get; public set; }
    [NotNullAttribute]
public IPsiSourceFile SourceFile { get; }
    [NotNullAttribute]
public PsiLanguageType LanguageType { get; }
    public abstract virtual Guid get_PatternId();
    public abstract virtual void set_PatternId(Guid value);
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual TextRange get_TextRange();
    public abstract virtual void set_TextRange(TextRange value);
    public abstract virtual TextRange get_TagRange();
    public abstract virtual void set_TagRange(TextRange value);
    public abstract virtual IPsiSourceFile get_SourceFile();
    public abstract virtual PsiLanguageType get_LanguageType();
    public abstract virtual UpdateKind UpdateFrom(ITodoItem todoItem);
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual IDeclaredElementEnvoy GetTypeElementEnvoy(ISymbolCache symbolCache);
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual IDeclaredElementEnvoy GetNamespaceEnvoy(ISymbolCache symbolCache);
}
public interface JetBrains.ReSharper.Feature.Services.TodoItems.ITodoItemBuilder {
    [NotNullAttribute]
[PureAttribute]
public abstract virtual ITodoItem BuildFrom(Guid patternId, string matchedText, TextRange matchedRange, TextRange tagRange);
}
public interface JetBrains.ReSharper.Feature.Services.TodoItems.ITodoItemHyperlinkProvider {
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual TodoItemHyperlink TryGetTodoItemHyperlinkAt(DocumentOffset documentOffset);
}
public interface JetBrains.ReSharper.Feature.Services.TodoItems.ITodoManager {
    [NotNullAttribute]
public ISolution Solution { get; }
    [NotNullAttribute]
public Signal`1<IEnumerable`1<IPsiSourceFile>> FilesWereUpdated { get; }
    [NotNullAttribute]
public SimpleSignal SettingsChanged { get; }
    public abstract virtual ISolution get_Solution();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<ITodoItem> GetItemsForFile(IPsiSourceFile sourceFile);
    public abstract virtual Signal`1<IEnumerable`1<IPsiSourceFile>> get_FilesWereUpdated();
    public abstract virtual SimpleSignal get_SettingsChanged();
}
public interface JetBrains.ReSharper.Feature.Services.TodoItems.ITodoManagerFileService {
    public abstract virtual void EnumerateTokens(IPsiSourceFile sourceFile, List`1<ITodoItem> items, IJetReadonlyList`1<ITodoContentsProvider> providers, TodoRegexMatcher[] matchers, ITodoItemBuilder itemBuilder);
}
public interface JetBrains.ReSharper.Feature.Services.TodoItems.ITodoManagerParticipant {
    [NotNullAttribute]
public object Lock { get; }
    [NotNullAttribute]
public ChunkHashMap`2<IPsiSourceFile, List`1<ITodoItem>> AllItems { get; }
    public abstract virtual object get_Lock();
    public abstract virtual ChunkHashMap`2<IPsiSourceFile, List`1<ITodoItem>> get_AllItems();
    public abstract virtual void SetPrimaryTodoManager(IPrimaryTodoManager manager);
    public abstract virtual void MarkAsDirty(IPsiSourceFile sourceFile);
    public abstract virtual void Update();
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.TodoItems.ITodoPatternStorage {
    public abstract virtual IEnumerable`1<TodoRegexMatcher> GetMatchersForContext(Func`3<Lifetime, DataContexts, IDataContext> context);
    public abstract virtual IEnumerable`1<TodoRegexMatcher> GetMatchersForContext(IContextBoundSettingsStore contextBoundSettingsStore);
    public abstract virtual void AdvisePatternsChange(Lifetime lifetime, Action action);
    public abstract virtual Pair`2<bool, int> UpdateHash();
}
[PsiComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.TodoItems.marshallers.ClrTodoItemMarshaller : TodoItemMarshallerBase {
    public ClrTodoItemMarshaller(IPersistentIndexManager persistentIndexManager, TodoPatternStorage patternStorage, ILanguages languages);
    public virtual void Marshal(UnsafeWriter writer, ITodoItem todoItem);
    public virtual ITodoItem Unmarshal(UnsafeReader reader);
    protected virtual ITodoItem CreateTodoItem(IPsiSourceFile sourceFile, Guid patternId, string text, TextRange textRange, TextRange tagRange, PsiLanguageType language);
}
public abstract class JetBrains.ReSharper.Feature.Services.TodoItems.marshallers.TodoItemMarshallerBase : object {
    protected IPersistentIndexManager myPersistentIndexManager;
    protected TodoPatternStorage myPatternStorage;
    protected ILanguages myLanguages;
    protected TodoItemMarshallerBase(IPersistentIndexManager persistentIndexManager, TodoPatternStorage patternStorage, ILanguages languages);
    public virtual void Marshal(UnsafeWriter writer, ITodoItem item);
    [CanBeNullAttribute]
public virtual ITodoItem Unmarshal(UnsafeReader reader);
    [NotNullAttribute]
protected abstract virtual ITodoItem CreateTodoItem(IPsiSourceFile sourceFile, Guid patternId, string text, TextRange textRange, TextRange tagRange, PsiLanguageType language);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.TodoItems.MultiplexingTodoManager : object {
    [NotNullAttribute]
private ITodoPatternStorage myPatternStorage;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private ITodoManagerParticipant[] myManagers;
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private ISettingsCache myMatchersPerSolutionCache;
    [CompilerGeneratedAttribute]
private Signal`1<IEnumerable`1<IPsiSourceFile>> <FilesWereUpdated>k__BackingField;
    [CompilerGeneratedAttribute]
private SimpleSignal <SettingsChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private SettingsKey <KeyExposed>k__BackingField;
    public ISolution Solution { get; }
    public IEnumerable`1<ChunkHashMap`2<IPsiSourceFile, List`1<ITodoItem>>> AllItems { get; }
    public Signal`1<IEnumerable`1<IPsiSourceFile>> FilesWereUpdated { get; }
    public SimpleSignal SettingsChanged { get; }
    public SettingsKey KeyExposed { get; }
    public TodoRegexMatcher[] Matchers { get; }
    public MultiplexingTodoManager(Lifetime lifetime, IShellLocks locks, ISettingsStore settings, SettingsCacheManager settingsCacheManager, ISolution solution, ITodoPatternStorage patternStorage, IEnumerable`1<ITodoManagerParticipant> participants);
    public sealed virtual ISolution get_Solution();
    public sealed virtual IEnumerable`1<ChunkHashMap`2<IPsiSourceFile, List`1<ITodoItem>>> get_AllItems();
    public sealed virtual IDisposable Lock();
    public sealed virtual IEnumerable`1<ITodoItem> GetItemsForFile(IPsiSourceFile sourceFile);
    [CompilerGeneratedAttribute]
public sealed virtual Signal`1<IEnumerable`1<IPsiSourceFile>> get_FilesWereUpdated();
    [CompilerGeneratedAttribute]
public sealed virtual SimpleSignal get_SettingsChanged();
    private void RescanSolution();
    private void InvalidateFor(IPsiSourceFile sourceFile);
    public sealed virtual TodoRegexMatcher[] ReadData(Lifetime lifetime, IContextBoundSettingsStore store);
    [CompilerGeneratedAttribute]
public sealed virtual SettingsKey get_KeyExposed();
    public sealed virtual TodoRegexMatcher[] get_Matchers();
    [CompilerGeneratedAttribute]
private void <Lock>b__11_0();
    [CompilerGeneratedAttribute]
private void <Lock>b__11_1();
    [CompilerGeneratedAttribute]
private void <RescanSolution>b__19_0();
}
[SettingsKeyAttribute("JetBrains.Application.UI.Utils.UserInterfaceSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ToDoGroupingSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.TodoItems.TodoGroupingSettings : object {
    public static Expression`1<Func`2<TodoGroupingSettings, int>> DefaultGroupingIndexExpression;
    public static Expression`1<Func`2<TodoGroupingSettings, bool>> ShowInGeneratedCodeExpression;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "DefaultGroupingForToDoItemsSettingDescription")]
public int GroupingIndex;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ShowToDoItemsInGeneratedCodeSettingDescription")]
public bool ShowInGeneratedCode;
    private static TodoGroupingSettings();
}
public enum JetBrains.ReSharper.Feature.Services.TodoItems.TodoIconStyle : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("None")]
public static TodoIconStyle None;
    [LocalizedDescriptionAttribute("Edit")]
public static TodoIconStyle Edit;
    [LocalizedDescriptionAttribute("Error")]
public static TodoIconStyle Error;
    [LocalizedDescriptionAttribute("Information")]
public static TodoIconStyle Info;
    [LocalizedDescriptionAttribute("Question")]
public static TodoIconStyle Question;
    [LocalizedDescriptionAttribute("Warning")]
public static TodoIconStyle Warning;
    [LocalizedDescriptionAttribute("Warning")]
public static TodoIconStyle Low;
    [LocalizedDescriptionAttribute("Error")]
public static TodoIconStyle High;
    [LocalizedDescriptionAttribute("Information")]
public static TodoIconStyle Normal;
}
public abstract class JetBrains.ReSharper.Feature.Services.TodoItems.TodoItemBase : object {
    [CompilerGeneratedAttribute]
private Guid <PatternId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private TextRange <TextRange>k__BackingField;
    [CompilerGeneratedAttribute]
private TextRange <TagRange>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiSourceFile <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private PsiLanguageType <LanguageType>k__BackingField;
    public Guid PatternId { get; public set; }
    public string Text { get; public set; }
    public TextRange TextRange { get; public set; }
    public TextRange TagRange { get; public set; }
    public IPsiSourceFile SourceFile { get; private set; }
    public PsiLanguageType LanguageType { get; }
    protected TodoItemBase(Guid patternId, string text, TextRange textRange, TextRange tagRange, IPsiSourceFile sourceFile, PsiLanguageType language);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_PatternId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PatternId(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public sealed virtual TextRange get_TextRange();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TextRange(TextRange value);
    [CompilerGeneratedAttribute]
public sealed virtual TextRange get_TagRange();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TagRange(TextRange value);
    [CompilerGeneratedAttribute]
public sealed virtual IPsiSourceFile get_SourceFile();
    [CompilerGeneratedAttribute]
private void set_SourceFile(IPsiSourceFile value);
    [CompilerGeneratedAttribute]
public sealed virtual PsiLanguageType get_LanguageType();
    public virtual string ToString();
    public abstract virtual IDeclaredElementEnvoy GetTypeElementEnvoy(ISymbolCache symbolCache);
    public abstract virtual IDeclaredElementEnvoy GetNamespaceEnvoy(ISymbolCache symbolCache);
    public virtual UpdateKind UpdateFrom(ITodoItem updatedItem);
}
public enum JetBrains.ReSharper.Feature.Services.TodoItems.TodoItemBinding : Enum {
    public int value__;
    public static TodoItemBinding None;
    public static TodoItemBinding Type;
    public static TodoItemBinding Namespace;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.TodoItems.TodoItemExtensions : object {
    [ExtensionAttribute]
[PureAttribute]
public static DocumentRange GetMatchedTextDocumentRange(ITodoItem item);
    [ExtensionAttribute]
[PureAttribute]
public static DocumentRange GetTagDocumentRange(ITodoItem item);
}
public class JetBrains.ReSharper.Feature.Services.TodoItems.TodoItemHyperlink : object {
    [NotNullAttribute]
private ISolution mySolution;
    private DocumentRange myRange;
    [CompilerGeneratedAttribute]
private Uri <TodoUri>k__BackingField;
    [NotNullAttribute]
public Uri TodoUri { get; }
    public TodoItemHyperlink(ISolution solution, Uri todoUri, DocumentRange range);
    [CompilerGeneratedAttribute]
public Uri get_TodoUri();
    public sealed virtual DocumentRange GetDocumentRange();
    public sealed virtual IHighlighter CreateHighlighter(ITextControl textControl);
    public sealed virtual void Navigate(IDataContext dataContext);
    [CompilerGeneratedAttribute]
private void <Navigate>b__8_0();
}
public abstract class JetBrains.ReSharper.Feature.Services.TodoItems.TodoItemHyperlinkProviderBase : object {
    public KeyStateMasks ActivationKeys { get; }
    public sealed virtual IHyperlink CreateHyperlink(IDataContext context);
    public abstract virtual TodoItemHyperlink TryGetTodoItemHyperlinkAt(DocumentOffset documentOffset);
    public sealed virtual KeyStateMasks get_ActivationKeys();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.TodoItems.TodoManagerFileService : object {
    private PsiLanguageType myLanguage;
    public TodoManagerFileService(PsiLanguageType language);
    public virtual void EnumerateTokens(IPsiSourceFile sourceFile, List`1<ITodoItem> items, IJetReadonlyList`1<ITodoContentsProvider> providers, TodoRegexMatcher[] matchers, ITodoItemBuilder itemBuilder);
    private void EnumerateTokens(ILexer lexer, List`1<ITodoItem> items, IJetReadonlyList`1<ITodoContentsProvider> providers, TodoRegexMatcher[] matchers, ITodoItemBuilder itemBuilder, Func`2<TextRange, TextRange> docRangeTranslator);
    protected static void ProcessMatchesFromToken(ILexer lexer, string documentText, List`1<ITodoItem> items, IJetReadonlyList`1<ITodoContentsProvider> providers, TodoRegexMatcher[] matchers, ITodoItemBuilder itemBuilder, Func`2<TextRange, TextRange> docRangeTranslator, TokenNodeType tokenType);
    private static void ProcessMatches(IReadOnlyList`1<TodoRegexMatch> matches, TodoRegexMatcher matcher, Func`2<TextRange, TextRange> translator, ITodoItemBuilder builder, List`1<ITodoItem> items);
}
[SettingsIndexedKeyAttribute("JetBrains.ReSharper.Feature.Services.TodoItems.TodoSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ToDoPatternsSettingDescription", "JetBrains.Application.Settings.GuidIndex")]
public class JetBrains.ReSharper.Feature.Services.TodoItems.TodoPatternsSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "NameOfThePatternSettingDescription")]
public string Name;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "RegularExpressionSettingDescription")]
[RegexPatternAttribute]
public string Pattern;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "URLPatternSettingDescription")]
public string UrlPattern;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "MatchCaseSensitivelySettingDescription")]
public bool CaseSensitive;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "MatchInCommentsSettingDescription")]
public bool MatchComments;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "MatchInStringsSettingDescription")]
public bool MatchStrings;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "MatchInIdentifiersSettingDescription")]
public bool MatchIdentifiers;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ColorForMatchesOfThePatternSettingDescription")]
public JetRgbaColor Color;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "CustomIconToDisplayForTheMatchSettingDescription")]
public TodoIconStyle TodoIconStyle;
    public bool Equals(TodoPatternsSettings other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.TodoItems.TodoPatternsSettingsUpgrader : object {
    private static bool ReadBoolean(XmlElement item, string name, bool defaultValue);
    public sealed virtual void Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.TodoItems.TodoPatternStorage : object {
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private ISettingsStore mySettingsStore;
    [NotNullAttribute]
private ISettingsOptimization mySettingsOptimization;
    [NotNullAttribute]
private SettingsIndexedKey mySchemaKey;
    [NotNullAttribute]
private Dictionary`2<Pair`2<string, bool>, Regex> myRegexes;
    [NotNullAttribute]
private List`1<Action> myChangePatternsHandlers;
    private int myCurrentHash;
    public TodoPatternStorage(Lifetime lifetime, ILogger logger, ISettingsStore settingsStore, ISettingsOptimization settingsOptimization);
    public sealed virtual IEnumerable`1<TodoRegexMatcher> GetMatchersForContext(Func`3<Lifetime, DataContexts, IDataContext> context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.TodoItems.TodoPatternStorage/<GetMatchersForContext>d__9")]
public sealed virtual IEnumerable`1<TodoRegexMatcher> GetMatchersForContext(IContextBoundSettingsStore contextBoundSettingsStore);
    public sealed virtual void AdvisePatternsChange(Lifetime lifetime, Action action);
    public sealed virtual Pair`2<bool, int> UpdateHash();
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_0();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.TodoItems.TodoPatternStorageDefault : HaveDefaultSettings`1<TodoPatternsSettings> {
    [NotNullAttribute]
public static string NotImplementedPatternName;
    [NotNullAttribute]
public static string BugPatternName;
    [NotNullAttribute]
public static string TodoPatternName;
    public string Name { get; }
    public TodoPatternStorageDefault(ISettingsSchema settingsSchema, ILogger logger);
    public virtual string get_Name();
    public virtual void InitDefaultSettings(ISettingsStorageMountPoint mountPoint);
}
public class JetBrains.ReSharper.Feature.Services.TodoItems.TodoRegexMatch : ValueType {
    private string myText;
    private int myOffset;
    private TextRange myTagRange;
    public string Text { get; }
    public int Offset { get; }
    public TextRange TagRange { get; }
    public TodoRegexMatch(string text, int offset, TextRange tagRange);
    public string get_Text();
    public int get_Offset();
    public TextRange get_TagRange();
}
public class JetBrains.ReSharper.Feature.Services.TodoItems.TodoRegexMatcher : object {
    private Guid myId;
    [NotNullAttribute]
private Regex myRegularExpression;
    [NotNullAttribute]
private string myUrlPattern;
    private TodoIconStyle myStyle;
    [NotNullAttribute]
private string myName;
    private bool myMatchComments;
    private bool myMatchStringLiterals;
    private bool myMatchIdentifiers;
    [CanBeNullAttribute]
private String[] mySubstringPattern;
    public Guid Id { get; }
    [NotNullAttribute]
public string Name { get; }
    public bool MatchComments { get; }
    public bool MatchStringLiterals { get; }
    public bool MatchIdentifiers { get; }
    public TodoIconStyle Style { get; }
    public TodoRegexMatcher(Guid id, Regex regularExpression, string urlPattern, TodoIconStyle style, string name, bool matchComments, bool matchStringLiterals, bool matchIdentifiers);
    public Guid get_Id();
    public string get_Name();
    public bool get_MatchComments();
    public bool get_MatchStringLiterals();
    public bool get_MatchIdentifiers();
    public TodoIconStyle get_Style();
    public bool ShouldProcessToken(TokenNodeType type);
    [NotNullAttribute]
[PureAttribute]
public IReadOnlyList`1<TodoRegexMatch> GetMatches(string input, TextRange range);
    [CanBeNullAttribute]
[PureAttribute]
public Uri TryGetTodoUri(string matchedText);
    public bool CanMatchFast(string text);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Resources.Settings.PatternsAndTemplatesSettingsKey", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ToDoItemsSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.TodoItems.TodoSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "PaintItemsInTodoExplorerSettingDescription")]
public bool PaintItemsInToDoExplorer;
}
[SolutionInstanceComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Tree.AllowPresentableItemImageCache : object {
    public AllowPresentableItemImageCache(Lifetime lifetime);
}
public abstract class JetBrains.ReSharper.Feature.Services.Tree.Async.AsyncLiveTreeModel : RichTextLiveTreeModel {
    private List`1<NodeWithAsyncChildren> myCurrentSimilarNodes;
    private SequentialLifetimes myCurrentSimilarNodesLifetimes;
    [NotNullAttribute]
private ILogger myLogger;
    protected IFreeThreadedThrottlingGroupingEvent myThrottlingGroupingEvent;
    protected IShellLocks myLocks;
    private ITreeModelAdapter myTreeModelAdapter;
    protected bool ReadLockRequiresToResetChildren { get; }
    protected AsyncLiveTreeModel(Lifetime lifetime, ReadWriteLock rwLock, StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, ITreeModelAdapter treeModelAdapter, IShellLocks locks, IFreeThreadedThrottlingGroupingEventFactory freeThreadedThrottlingGroupingEventFactory, INodeChildrenUpdaterFactory nodeChildrenUpdaterFactory);
    protected AsyncLiveTreeModel(Lifetime lifetime, ReadWriteLock rwLock, StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, ITreeModelAdapter treeModelAdapter, IShellLocks locks, IFreeThreadedThrottlingGroupingEventFactory freeThreadedThrottlingGroupingEventFactory, ILiveTreeModelComparer sorter, INodeChildrenUpdaterFactory nodeChildrenUpdaterFactory);
    protected virtual bool get_ReadLockRequiresToResetChildren();
    protected virtual ITreeModelNode InitializeRoot();
    public void ReinitializeChildren(NodeWithAsyncChildren node);
    public Task Expand(ICollection`1<NodeWithAsyncChildren> items, ISubProgressAggregator progress, bool runSynchronous);
    protected virtual Task WireExpandContinuation(Task task, Action`1<Task> continuation);
    private static NodeChangesSnapshot GetChangesSnapshot(IEnumerable`1<NodePendingChange> changes);
    public void SelectedItemChanged(NodeWithAsyncChildren selectedNode);
    protected virtual ITreeModelNode CreateNode(object dataItem);
    protected virtual ITreeModelNode CreateMeaningfullNode(RichTextLiveTreeModel model, WrappedNodeValue val, IFreeThreadedThrottlingGroupingEvent throttlingGroupingEvent);
    private void ResetChildren(IEnumerable`1<NodeWithChildren> nodesWithChildren);
    private List`1<NodeWithAsyncChildren> HighlightNodes(Lifetime lifetime, NodeWithAsyncChildren selectedNode);
    private void CleanCurrentHighlightings(Lifetime lifetime, ISet`1<NodeWithAsyncChildren> skip);
    private static void TraverseAllNodes(Lifetime lifetime, ITreeModelNode node, Action`1<ITreeModelNode> action);
    private static void TraverseChildrenRawNodes(ITreeModelNode node, Action`1<ITreeModelNode> action);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_0();
}
public abstract class JetBrains.ReSharper.Feature.Services.Tree.Async.AsyncLiveTreeModelBrowserDescriptor : LiveTreeModelBrowserDescriptor {
    protected IShellLocks myLocks;
    private List`1<NodeWithAsyncChildren> myNodesToEvaluate;
    private StructuredPresenter`2<TreeModelNode, IPresentableItem> myPresenter;
    private PresenterAsyncDecorator myPresenterAsyncDecorator;
    protected AsyncLiveTreeModel myTreeModel;
    protected ITreeModelAdapter myTreeModelAdapter;
    public ISignal`1<IEnumerable`1<NodeWithAsyncChildren>> CollapseNodesSignal;
    public SimpleSignal DisableAutoExpandSingleChildSignal;
    private bool myExpandingAll;
    [CompilerGeneratedAttribute]
private SubProgressAggregator <ProgressAggregator>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsUpdatingContent>k__BackingField;
    public LiveTreeGroupModel`1<object> TreeModel { get; }
    public TreeModel Model { get; }
    public ITreeModelAdapter TreeModelAdapter { get; }
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> Presenter { get; }
    public bool QuickSearchSupported { get; }
    public FilteringMode FilteringMode { get; }
    public SubProgressAggregator ProgressAggregator { get; }
    public IProperty`1<bool> IsUpdatingContent { get; }
    protected AsyncLiveTreeModelBrowserDescriptor(Lifetime lifetime, ISolution solution, ITreeModelAdapter treeModelAdapter, StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter);
    public virtual LiveTreeGroupModel`1<object> get_TreeModel();
    public virtual TreeModel get_Model();
    public ITreeModelAdapter get_TreeModelAdapter();
    public virtual StructuredPresenter`2<TreeModelNode, IPresentableItem> get_Presenter();
    public virtual bool get_QuickSearchSupported();
    public virtual FilteringMode get_FilteringMode();
    [CompilerGeneratedAttribute]
public SubProgressAggregator get_ProgressAggregator();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsUpdatingContent();
    protected abstract virtual AsyncLiveTreeModel CreateAsyncLiveTreeModel();
    public virtual Nullable`1<bool> IsQuickSearchAccepted(TreeModelNode modelNode, string filter);
    public void OnExpanded(object item);
    public void OnExpandingAll();
    public void OnExpandedAll();
    protected abstract virtual void WrapEvaluateNodes(Action evaluateNodes);
    protected virtual void EvaluateNodes(ICollection`1<NodeWithAsyncChildren> nodesToEvaluate);
    protected virtual void ExpandRequestedNodes(ICollection`1<NodeWithAsyncChildren> nodesToEvaluate);
    protected virtual void HandleExpandNodeFailed(ICollection`1<NodeWithAsyncChildren> nodesToEvaluate);
    public void SelectedItemChanged(NodeWithAsyncChildren node);
}
public class JetBrains.ReSharper.Feature.Services.Tree.Async.AsyncTreeNodesEqualityComparer : object {
    [NotNullAttribute]
private ITreeModelAdapter myTreeModelAdapter;
    public AsyncTreeNodesEqualityComparer(ITreeModelAdapter treeModelAdapter);
    public sealed virtual bool Equals(ITreeModelNode x, ITreeModelNode y);
    public sealed virtual int GetHashCode(ITreeModelNode obj);
    [CanBeNullAttribute]
public object ExtractDataValue(ITreeModelNode node);
}
public abstract class JetBrains.ReSharper.Feature.Services.Tree.Async.DelegateDescriptorBase : object {
    private TreeModeBrowserDescriptorWithPreview myDescriptor;
    [CompilerGeneratedAttribute]
private ISimpleSignal <NeedUpdate>k__BackingField;
    public ISimpleSignal NeedUpdate { get; }
    protected DelegateDescriptorBase(Lifetime lifetime, TreeModeBrowserDescriptorWithPreview descriptor);
    public sealed virtual bool Navigate(TreeModelNode node, PopupWindowContextSource windowContext, bool transferFocus, TabOptions options);
    public sealed virtual void PreviewUpdate(IPreviewControl previewControl, TreeModelNode modelNode);
    public abstract virtual bool CustomizeActionBar(IActionBar bar);
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_NeedUpdate();
}
public interface JetBrains.ReSharper.Feature.Services.Tree.Async.IDelegateDescriptor {
    public ISimpleSignal NeedUpdate { get; }
    public abstract virtual bool Navigate(TreeModelNode node, PopupWindowContextSource windowContext, bool transferFocus, TabOptions options);
    public abstract virtual void PreviewUpdate(IPreviewControl previewControl, TreeModelNode modelNode);
    public abstract virtual bool CustomizeActionBar(IActionBar bar);
    public abstract virtual ISimpleSignal get_NeedUpdate();
}
public class JetBrains.ReSharper.Feature.Services.Tree.Async.ImageCollectionViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private PresentableItemImageCollection <Images>k__BackingField;
    public PresentableItemImageCollection Images { get; }
    public ImageCollectionViewModel(PresentableItemImageCollection images);
    [CompilerGeneratedAttribute]
public PresentableItemImageCollection get_Images();
}
public class JetBrains.ReSharper.Feature.Services.Tree.Async.NodePendingChange : object {
    [CompilerGeneratedAttribute]
private object <ModificationObject>k__BackingField;
    [CanBeNullAttribute]
public object ModificationObject { get; }
    public NodePendingChange(object modificationObject);
    [CompilerGeneratedAttribute]
public object get_ModificationObject();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.Tree.Async.NodeWithAsyncChildren : CompositeRichTextLiveTreeNode {
    private ICollection`1<NodePendingChange> myPendingChanges;
    private bool myEvaluated;
    [CompilerGeneratedAttribute]
private WrappedNodeValue <WrappedNodeValue>k__BackingField;
    public WrappedNodeValue WrappedNodeValue { get; }
    public bool Evaluated { get; public set; }
    public NodeWithAsyncChildren(RichTextLiveTreeModel model, object dataItem, IFreeThreadedThrottlingGroupingEvent throttlingGroupingEvent);
    [CompilerGeneratedAttribute]
public WrappedNodeValue get_WrappedNodeValue();
    public bool get_Evaluated();
    public void set_Evaluated(bool value);
    public IEnumerable`1<NodePendingChange> ResetChanges();
    public void AddChange(NodePendingChange change);
}
public class JetBrains.ReSharper.Feature.Services.Tree.Async.NodeWithAttachedChild : object {
    [CompilerGeneratedAttribute]
private ITreeModelNode <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeModelNode <Child>k__BackingField;
    public ITreeModelNode Node { get; }
    public ITreeModelNode Child { get; }
    public NodeWithAttachedChild(ITreeModelNode node, ITreeModelNode child);
    [CompilerGeneratedAttribute]
public ITreeModelNode get_Node();
    [CompilerGeneratedAttribute]
public ITreeModelNode get_Child();
}
public class JetBrains.ReSharper.Feature.Services.Tree.Async.NodeWithChildren : object {
    [CompilerGeneratedAttribute]
private ITreeModelNode <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<NodeWithAsyncChildren> <RecursiveNodesForAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<NodeWithAttachedChild> <NodesForAddWithPossibleChildren>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ITreeModelNode> <NodesForAddWithoutPossibleChildren>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ITreeModelNode> <NodesToRemove>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Reset>k__BackingField;
    [NotNullAttribute]
public ITreeModelNode Node { get; }
    [NotNullAttribute]
public ICollection`1<NodeWithAsyncChildren> RecursiveNodesForAdd { get; }
    [NotNullAttribute]
public ICollection`1<NodeWithAttachedChild> NodesForAddWithPossibleChildren { get; }
    [NotNullAttribute]
public ICollection`1<ITreeModelNode> NodesForAddWithoutPossibleChildren { get; }
    [NotNullAttribute]
public ICollection`1<ITreeModelNode> NodesToRemove { get; }
    public bool Reset { get; }
    public NodeWithChildren(ITreeModelNode node, ICollection`1<NodeWithAsyncChildren> recursiveNodesForAdd, ICollection`1<NodeWithAttachedChild> nodesForAddWithPossibleChildren, ICollection`1<ITreeModelNode> nodesForAddWithoutPossibleChildren, ICollection`1<ITreeModelNode> nodesToRemove, bool reset);
    [CompilerGeneratedAttribute]
public ITreeModelNode get_Node();
    [CompilerGeneratedAttribute]
public ICollection`1<NodeWithAsyncChildren> get_RecursiveNodesForAdd();
    [CompilerGeneratedAttribute]
public ICollection`1<NodeWithAttachedChild> get_NodesForAddWithPossibleChildren();
    [CompilerGeneratedAttribute]
public ICollection`1<ITreeModelNode> get_NodesForAddWithoutPossibleChildren();
    [CompilerGeneratedAttribute]
public ICollection`1<ITreeModelNode> get_NodesToRemove();
    [CompilerGeneratedAttribute]
public bool get_Reset();
}
public class JetBrains.ReSharper.Feature.Services.Tree.Async.RecursiveNodeValue : object {
    [CompilerGeneratedAttribute]
private object <DataValue>k__BackingField;
    public object DataValue { get; }
    public RecursiveNodeValue(object dataValue);
    [CompilerGeneratedAttribute]
public object get_DataValue();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Tree.Async.TreeModelNodeUtil : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static object GetMeaningfulDataValue(TreeModelNode node);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static object GetMeaningfulDataValue(ITreeModelNode node);
}
internal class JetBrains.ReSharper.Feature.Services.Tree.Async.TreeNodeByValueEqualityComparer : object {
    private sealed virtual override bool System.Collections.Generic.IEqualityComparer<System.Object>.Equals(object x, object y);
    private sealed virtual override int System.Collections.Generic.IEqualityComparer<System.Object>.GetHashCode(object obj);
}
public class JetBrains.ReSharper.Feature.Services.Tree.Async.WrappedNodeValue : object {
    [CompilerGeneratedAttribute]
private object <OriginalValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Lifetime> <HighlightedLifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<WrappedNodeValue> <OriginalValueComparer>k__BackingField;
    public object OriginalValue { get; public set; }
    [CanBeNullAttribute]
public Nullable`1<Lifetime> HighlightedLifetime { get; public set; }
    public static IEqualityComparer`1<WrappedNodeValue> OriginalValueComparer { get; }
    public WrappedNodeValue(object originalValue);
    private static WrappedNodeValue();
    [CompilerGeneratedAttribute]
public object get_OriginalValue();
    [CompilerGeneratedAttribute]
public void set_OriginalValue(object value);
    [CompilerGeneratedAttribute]
public Nullable`1<Lifetime> get_HighlightedLifetime();
    [CompilerGeneratedAttribute]
public void set_HighlightedLifetime(Nullable`1<Lifetime> value);
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<WrappedNodeValue> get_OriginalValueComparer();
}
internal class JetBrains.ReSharper.Feature.Services.Tree.Async.WrappedPresenter : StructuredPresenter`2<TreeModelNode, IPresentableItem> {
    private StructuredPresenter`2<TreeModelNode, IPresentableItem> myOriginalPresenter;
    private IProperty`1<JetRgbaColor> myHighlightBackground;
    private IProperty`1<JetRgbaColor> myHighlightForeground;
    public WrappedPresenter(StructuredPresenter`2<TreeModelNode, IPresentableItem> originalPresenter, IProperty`1<JetRgbaColor> highlightBackground, IProperty`1<JetRgbaColor> highlightForeground);
    public virtual void UpdateItem(object value, TreeModelNode structureElement, IPresentableItem item, PresentationState state);
}
public class JetBrains.ReSharper.Feature.Services.Tree.CachingPresenter : StructuredPresenter`2<TreeModelNode, IPresentableItem> {
    private StructuredPresenter`2<TreeModelNode, IPresentableItem> myPresenter;
    private Dictionary`2<TreeModelNode, IPresentableItem> myCache;
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> Presenter { get; }
    public CachingPresenter(StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter);
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> get_Presenter();
    public void Set(Dictionary`2<TreeModelNode, IPresentableItem> presentations);
    public virtual void UpdateItem(object value, TreeModelNode structureElement, IPresentableItem item, PresentationState state);
    public void Invalidate(TreeModelNode toModel);
    public void Clear();
    public TreeModelNode[] GetCachedNodes();
}
public class JetBrains.ReSharper.Feature.Services.Tree.CalculatingNodeValue : object {
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.Tree.CalculatingNodeValueWithProgress : CalculatingNodeValue {
    [CompilerGeneratedAttribute]
private double <Fraction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StepName>k__BackingField;
    public double Fraction { get; public set; }
    public string Name { get; public set; }
    public string StepName { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Fraction();
    [CompilerGeneratedAttribute]
public void set_Fraction(double value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_StepName();
    [CompilerGeneratedAttribute]
public void set_StepName(string value);
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.Tree.CheckedRichTextLiveTreeModel : LiveTreeGroupModel`2<object, CheckedRichTextLiveTreeNode> {
    private StructuredPresenter`2<TreeModelNode, IPresentableItem> myPresenter;
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> Presenter { get; }
    protected bool ShouldUpdateItemOnItemAdded { get; }
    public CheckedRichTextLiveTreeModel(Lifetime lifetime, ReadWriteLock lock, IThreading threading, StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, IEqualityComparer`1<object> dataValueComparer, ILiveTreeModelComparer sorter);
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> get_Presenter();
    protected virtual bool IsMeaningfulItem(object item);
    protected virtual bool get_ShouldUpdateItemOnItemAdded();
    protected virtual ITreeModelNode CreateNode(object dataItem);
    protected virtual CheckedRichTextLiveTreeNode InitializeTypedRoot();
    protected virtual void OnChildAdded(ITreeModelNode parent, ITreeModelNode child);
    protected virtual void OnChildRemoved(ITreeModelNode parent, ITreeModelNode child);
    public virtual void EvaluateNodeViewModel(ITreeModelNode node);
    public void SetAll(bool value);
}
public class JetBrains.ReSharper.Feature.Services.Tree.CheckedRichTextLiveTreeNode : LiveTreeNode`1<CheckedRichTextLiveTreeNode> {
    [CanBeNullAttribute]
private ICheckedRichTextTreeNodeViewModel myViewModel;
    [CompilerGeneratedAttribute]
private bool <ShowChildrenCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCheckable>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<Nullable`1<bool>> <IsChecked>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<int> <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<int> <RawCount>k__BackingField;
    public Nullable`1<bool> OldCheckedValue;
    public int CheckedChildren;
    public int UnCheckedChildren;
    public int UpdateStateCounter;
    [CompilerGeneratedAttribute]
private IRichTextTreeNodeViewModel <ViewModel>k__BackingField;
    public bool ShowChildrenCount { get; }
    public bool IsCheckable { get; }
    public IBindable`1<Nullable`1<bool>> IsChecked { get; }
    private Nullable`1<bool> JetBrains.Application.UI.Controls.ICheckable.IsChecked { get; private set; }
    public IBindable`1<int> Count { get; private set; }
    public IBindable`1<int> RawCount { get; private set; }
    public IRichTextTreeNodeViewModel ViewModel { get; }
    public CheckedRichTextLiveTreeNode(CheckedRichTextLiveTreeModel model, ICheckedRichTextTreeNodeViewModel viewModel, object dataItem, bool showChildrenCount);
    public CheckedRichTextLiveTreeNode(CheckedRichTextLiveTreeModel model, IRichTextTreeNodeViewModel viewModel, object dataItem);
    [CompilerGeneratedAttribute]
public bool get_ShowChildrenCount();
    [CompilerGeneratedAttribute]
public bool get_IsCheckable();
    [CompilerGeneratedAttribute]
public IBindable`1<Nullable`1<bool>> get_IsChecked();
    private sealed virtual override Nullable`1<bool> JetBrains.Application.UI.Controls.ICheckable.get_IsChecked();
    private sealed virtual override void JetBrains.Application.UI.Controls.ICheckable.set_IsChecked(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<int> get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(IBindable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<int> get_RawCount();
    [CompilerGeneratedAttribute]
private void set_RawCount(IBindable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual IRichTextTreeNodeViewModel get_ViewModel();
    internal void OnNodeAdded();
    internal void OnNodeChanged(object sender, PropertyChangedEventArgs e);
    internal void OnNodeRemoved();
    public virtual void UpdateParentState();
    [CompilerGeneratedAttribute]
private void <.ctor>b__25_1();
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Tree.CodePreview.CodePanelPreviewControlFactoryStub : object {
    public virtual ICodePanelPreviewControl CreateCodePanel();
}
public interface JetBrains.ReSharper.Feature.Services.Tree.CodePreview.ICodePanelPreviewControl {
    public abstract virtual void Show(TextRange documentTextRange, IProjectFile projectFile, IList`1<DocumentRange> highlightedRanges, bool adjustRangeUsingPsi);
    public abstract virtual void Show(TextRange documentTextRange, IPsiSourceFile sourceFile, IList`1<DocumentRange> highlightedRanges, bool adjustRangeUsingPsi);
    public abstract virtual void Show(IDeclaredElementEnvoy declaredElement, IList`1<DocumentRange> highlightedRanges);
    public abstract virtual void Show(IDeclaredElement declaredElement, IList`1<DocumentRange> highlightedRanges);
    public abstract virtual void Show(IProjectFile projectFile, IList`1<DocumentRange> highlightedRanges);
    public abstract virtual void ShowDefaultMessage();
}
public interface JetBrains.ReSharper.Feature.Services.Tree.CodePreview.ICodePanelPreviewControlFactory {
    public abstract virtual ICodePanelPreviewControl CreateCodePanel();
}
public interface JetBrains.ReSharper.Feature.Services.Tree.CodePreview.IPreviewRangeBuilder {
    public abstract virtual IEnumerable`1<DocumentRange> BuildRanges(ITreeNode node);
    public abstract virtual IEnumerable`1<DocumentRange> BuildRanges(IDeclaredElement declaredElement);
}
public interface JetBrains.ReSharper.Feature.Services.Tree.CodePreview.IPreviewSupportProvider {
    public PreviewSupport PreviewSupport { get; }
    public abstract virtual PreviewSupport get_PreviewSupport();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Tree.CodePreview.PreviewSupportProvider : object {
    public PreviewSupport PreviewSupport { get; }
    public virtual PreviewSupport get_PreviewSupport();
}
public class JetBrains.ReSharper.Feature.Services.Tree.CompositeRichTextLiveTreeNode : LiveTreeNode`1<IRichTextLiveTreeNode> {
    private Lazy`1<IRichTextTreeNodeViewModel> myViewModel;
    private Lazy`1<IEnumerable`1<ISuspendable>> mySuspendableAggregators;
    protected IFreeThreadedThrottlingGroupingEvent myThrottlingGroupingEvent;
    [CompilerGeneratedAttribute]
private IBindable`1<int> <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<int> <RawCount>k__BackingField;
    public IBindable`1<int> Count { get; private set; }
    public IBindable`1<int> RawCount { get; private set; }
    public IRichTextTreeNodeViewModel ViewModel { get; }
    public bool IsSuspended { get; }
    public CompositeRichTextLiveTreeNode(RichTextLiveTreeModel model, object dataItem, IFreeThreadedThrottlingGroupingEvent throttlingGroupingEvent);
    protected virtual IRichTextTreeNodeViewModel CreateViewModel();
    [CompilerGeneratedAttribute]
public virtual IBindable`1<int> get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(IBindable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual IBindable`1<int> get_RawCount();
    [CompilerGeneratedAttribute]
private void set_RawCount(IBindable`1<int> value);
    public sealed virtual IRichTextTreeNodeViewModel get_ViewModel();
    public virtual void Dispose();
    public sealed virtual bool get_IsSuspended();
    public sealed virtual void Suspend();
    public sealed virtual void Resume();
    public virtual string ToString();
    protected virtual void InitAggregators(IBindableView`1<IRichTextLiveTreeNode> filteredChildrenRaw);
    protected virtual IEnumerable`1<ISuspendable> GetAggreagors();
    protected virtual void CreateAggregators(IBindableView`1<IRichTextLiveTreeNode> filteredChildrenRaw);
    private static int GetChildrenCount(IRichTextLiveTreeNode node);
    private static int GetChildrenRawCount(IRichTextLiveTreeNode node);
}
public class JetBrains.ReSharper.Feature.Services.Tree.DefaultLiveTreeModelNodeFactory : object {
    protected RichTextLiveTreeModel myRichTextLiveTreeModel;
    protected IFreeThreadedThrottlingGroupingEvent myThrottlingGroupingEvent;
    private Func`2<object, bool> myIsMeaningful;
    public DefaultLiveTreeModelNodeFactory(RichTextLiveTreeModel richTextLiveTreeModel, IFreeThreadedThrottlingGroupingEvent throttlingGroupingEvent);
    public virtual ITreeModelNode CreateNode(object dataItem);
    public virtual CompositeRichTextLiveTreeNode CreateRoot();
}
public class JetBrains.ReSharper.Feature.Services.Tree.ErrorNodeValue : object {
}
public class JetBrains.ReSharper.Feature.Services.Tree.ExternalLibrariesNodeValue : object {
    private static Key`1<ExternalLibrariesNodeValue> NodeValueKey;
    private ProjectModelElementEnvoy mySolution;
    public bool IsValid { get; }
    private ExternalLibrariesNodeValue(ISolution solution);
    private static ExternalLibrariesNodeValue();
    public bool get_IsValid();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void Present(TreeModelBrowserPresenter presenter, TreeModelNode modelNode, IPresentableItem item, PresentationState state);
    public static ExternalLibrariesNodeValue GetInstance(ISolution solution);
}
public class JetBrains.ReSharper.Feature.Services.Tree.FlexibleGroupingViewModel : AAutomation {
    private Lifetime myLifetime;
    private BindableCollection`1<ToggleCheckBoxViewModel> myCheckBoxes;
    private SimpleSignal mySignalCommand;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Title>k__BackingField;
    public IProperty`1<string> Title { get; }
    public ISimpleSignal CommitSignal { get; }
    public BindableCollection`1<ToggleCheckBoxViewModel> CheckBoxes { get; }
    public FlexibleGroupingViewModel(Lifetime lifetime, string title);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_Title();
    public ISimpleSignal get_CommitSignal();
    public BindableCollection`1<ToggleCheckBoxViewModel> get_CheckBoxes();
    public ToggleCheckBoxViewModel Add(string title, bool isChecked);
}
public class JetBrains.ReSharper.Feature.Services.Tree.FreeThreadedThrottlingAggregatorAny : FreeThreadedThrottlingAggregatorWithDefaultValue`2<IRichTextLiveTreeNode, bool> {
    [NotNullAttribute]
private IBindableView`1<IRichTextLiveTreeNode> mySourceCollection;
    [NotNullAttribute]
private Func`2<IRichTextLiveTreeNode, bool> myGetter;
    public FreeThreadedThrottlingAggregatorAny(IBindableView`1<IRichTextLiveTreeNode> sourceCollection, Func`2<IRichTextLiveTreeNode, bool> getter, IFreeThreadedThrottlingGroupingEvent refreshEvent);
    protected virtual bool EvaluateValue();
}
public class JetBrains.ReSharper.Feature.Services.Tree.FreeThreadedThrottlingAggregatorAverage : FreeThreadedThrottlingAggregatorWithDefaultValue`2<IRichTextLiveTreeNode, double> {
    [NotNullAttribute]
private IBindableView`1<IRichTextLiveTreeNode> mySourceCollection;
    [NotNullAttribute]
private Func`2<IRichTextLiveTreeNode, double> myGetter;
    public FreeThreadedThrottlingAggregatorAverage(IBindableView`1<IRichTextLiveTreeNode> sourceCollection, Func`2<IRichTextLiveTreeNode, double> getter, IFreeThreadedThrottlingGroupingEvent refreshEvent);
    protected virtual double EvaluateValue();
}
public class JetBrains.ReSharper.Feature.Services.Tree.FreeThreadedThrottlingAggregatorIntSum : FreeThreadedThrottlingAggregatorWithDefaultValue`2<IRichTextLiveTreeNode, int> {
    [NotNullAttribute]
private IBindableView`1<IRichTextLiveTreeNode> mySourceCollection;
    [NotNullAttribute]
private Func`2<IRichTextLiveTreeNode, int> myGetter;
    public FreeThreadedThrottlingAggregatorIntSum(IBindableView`1<IRichTextLiveTreeNode> sourceCollection, Func`2<IRichTextLiveTreeNode, int> getter, IFreeThreadedThrottlingGroupingEvent refreshEvent);
    public virtual string ToString();
    protected virtual int EvaluateValue();
}
public class JetBrains.ReSharper.Feature.Services.Tree.GroupingManagement.DefaultGroupingIndex : object {
    public static void Set(ITreeViewController descriptor, int value, ISettingsStore settingsStore);
    public static int Get(ISettingsStore settingsStore, ITreeViewController descriptor, int maxValue);
}
public class JetBrains.ReSharper.Feature.Services.Tree.GroupingManagement.DelegateExtractor`1 : object {
    private Func`2<TOut, object> myConverter;
    public DelegateExtractor`1(Func`2<TOut, object> converter);
    public sealed virtual object ExtractGroupObject(TOut item);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Tree.GroupingManagement.GroupingManager : object {
    private IFeaturePartsContainer myContainer;
    public GroupingManager(IFeaturePartsContainer container);
    public static GroupingManager GetInstance(ISolution solution);
    public IEnumerable`1<TreeModelGrouping`1<TItem>> GetGroupings(TreeModelBrowserDescriptorBase descriptor);
    [NotNullAttribute]
public IEnumerable`1<LiveTreeModelGrouping`1<TOut>> GetLiveGroupings(TreeModelBrowserDescriptorBase descriptor);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Tree.GroupingManagement.GroupingManager/<GetFlexibleGrouping>d__5`2")]
[CanBeNullAttribute]
public IEnumerable`1<TreeGroupFeatureExtractor`1<TOut>> GetFlexibleGrouping(TreeModelBrowserDescriptorBase descriptor);
}
public interface JetBrains.ReSharper.Feature.Services.Tree.GroupingManagement.IFlexibleGroupingProvider`1 {
    public abstract virtual IEnumerable`1<TreeGroupFeatureExtractor`1<T>> GetGroupings(TreeModelBrowserDescriptorBase descriptor);
    public abstract virtual bool IsApplicable(TreeModelBrowserDescriptorBase descriptor);
}
public interface JetBrains.ReSharper.Feature.Services.Tree.GroupingManagement.IGroupingProvider`1 {
    public abstract virtual ICollection`1<TreeModelGrouping`1<T>> GetGroupings(TreeModelBrowserDescriptorBase descriptor);
    public abstract virtual bool IsApplicable(TreeModelBrowserDescriptorBase descriptor);
}
public interface JetBrains.ReSharper.Feature.Services.Tree.GroupingManagement.ILiveGroupingProvider`1 {
    public abstract virtual IEnumerable`1<LiveTreeModelGrouping`1<T>> GetGroupings(TreeModelBrowserDescriptorBase descriptor);
    public abstract virtual bool IsApplicable(TreeModelBrowserDescriptorBase descriptor);
}
public class JetBrains.ReSharper.Feature.Services.Tree.GroupingManagement.ItemsGroupingResult`1 : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<TItem> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private object <GroupDataValue>k__BackingField;
    public IEnumerable`1<TItem> Items { get; }
    [CanBeNullAttribute]
public object GroupDataValue { get; }
    public ItemsGroupingResult`1(IEnumerable`1<TItem> items, object groupDataValue);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TItem> get_Items();
    [CompilerGeneratedAttribute]
public object get_GroupDataValue();
}
public interface JetBrains.ReSharper.Feature.Services.Tree.GroupingManagement.ITreeGroupItemCollectionProvider`1 {
    public abstract virtual IEnumerable`1<ItemsGroupingResult`1<TItem>> ProcessItems(IEnumerable`1<TItem> items);
}
public interface JetBrains.ReSharper.Feature.Services.Tree.IAsyncOccurrenceBrowserDescriptor {
    public IProperty`1<bool> IsBusy { get; }
    public IProperty`1<Nullable`1<double>> Progress { get; }
    public NoContentLockInsideReadWriteLock RwLock { get; }
    public IBindableCollection`1<object> BindableItems { get; }
    public ISimpleSignal StopSignal { get; }
    public abstract virtual IProperty`1<bool> get_IsBusy();
    public abstract virtual IProperty`1<Nullable`1<double>> get_Progress();
    public abstract virtual NoContentLockInsideReadWriteLock get_RwLock();
    public abstract virtual IBindableCollection`1<object> get_BindableItems();
    public abstract virtual ISimpleSignal get_StopSignal();
}
public class JetBrains.ReSharper.Feature.Services.Tree.IdentityManagement.DefaultIdentityDescriptor : object {
    public sealed virtual bool Equals(IIdentityDescriptor other);
}
public interface JetBrains.ReSharper.Feature.Services.Tree.IdentityManagement.IIdentityDescriptor {
}
public interface JetBrains.ReSharper.Feature.Services.Tree.IExportableDescriptor {
    public abstract virtual void ExportTreeView(ExportTreeViewFormat format, IEnumerable`1<TreeModelNode> selection, Stream output, IProgressIndicator progress, bool recursively);
}
public interface JetBrains.ReSharper.Feature.Services.Tree.IHaveVisibilityPresenter {
    public ITreeModelNodeVisibilityPresentor TreeModelNodeVisibilityPresentor { get; public set; }
    public abstract virtual ITreeModelNodeVisibilityPresentor get_TreeModelNodeVisibilityPresentor();
    public abstract virtual void set_TreeModelNodeVisibilityPresentor(ITreeModelNodeVisibilityPresentor value);
}
public interface JetBrains.ReSharper.Feature.Services.Tree.IIgnoredNodes {
    public bool IgnoreNodesSupported { get; }
    public bool HasIgnoredOccurrences { get; }
    public IProperty`1<bool> ShowIgnoredOccurrences { get; }
    public ISimpleSignal UpdatedSignal { get; }
    public abstract virtual bool get_IgnoreNodesSupported();
    public abstract virtual bool get_HasIgnoredOccurrences();
    public abstract virtual IProperty`1<bool> get_ShowIgnoredOccurrences();
    public abstract virtual ISimpleSignal get_UpdatedSignal();
    public abstract virtual bool CanHide(object val);
    public abstract virtual void Hide(IEnumerable`1<object> values, IList`1<TreeModelNode> selectedNodes);
    public abstract virtual void UndoHide(IEnumerable`1<object> values, IList`1<TreeModelNode> selectedNodes);
}
public interface JetBrains.ReSharper.Feature.Services.Tree.IIgnoredNodesDescriptor {
    public TreeModel Model { get; }
    public IIgnoredNodes IgnoredNodes { get; }
    public abstract virtual TreeModel get_Model();
    public abstract virtual IIgnoredNodes get_IgnoredNodes();
    public abstract virtual void UpdateItem(ITreeModelNode treeModelNode);
}
public interface JetBrains.ReSharper.Feature.Services.Tree.ILiveTreeModelNodeFactory {
    public abstract virtual ITreeModelNode CreateNode(object dataItem);
    public abstract virtual CompositeRichTextLiveTreeNode CreateRoot();
}
public interface JetBrains.ReSharper.Feature.Services.Tree.IModelWithMeaningfulItems {
    public abstract virtual bool IsMeaningfulItem(object item);
}
public interface JetBrains.ReSharper.Feature.Services.Tree.IOccurrenceBrowserDescriptor {
    public IEnumerable`1<IOccurrence> Items { get; }
    public ICollection`1<OccurrenceSection> OccurrenceSections { get; }
    public bool MergeOccurrences { get; public set; }
    public abstract virtual IEnumerable`1<IOccurrence> get_Items();
    public abstract virtual ICollection`1<OccurrenceSection> get_OccurrenceSections();
    public abstract virtual IIdentityDescriptor GetIdentityDescriptor();
    public abstract virtual bool get_MergeOccurrences();
    public abstract virtual void set_MergeOccurrences(bool value);
}
public interface JetBrains.ReSharper.Feature.Services.Tree.IOccurrenceBrowserPresenterContext {
    public ITheming Theming { get; }
    public OccurrenceInformationManager OccurrenceInformationManager { get; }
    public abstract virtual ITheming get_Theming();
    public abstract virtual OccurrenceInformationManager get_OccurrenceInformationManager();
}
public interface JetBrains.ReSharper.Feature.Services.Tree.IOccurrenceFilters {
    public bool ShowNewView { get; }
    public IEnumerable`1<OccurrenceKind> Kinds { get; }
    public abstract virtual bool get_ShowNewView();
    public abstract virtual bool AccessTypePresent(OccurrenceKind occurrenceKind);
    public abstract virtual bool IsShownAccessType(OccurrenceKind occurrenceKind);
    public abstract virtual bool IsShownOnlyAccessType(OccurrenceKind occurrenceKind);
    public abstract virtual void ShowOnlyAccessType(OccurrenceKind occurrenceKind, bool show);
    public abstract virtual void ShowAccessType(OccurrenceKind occurrenceKind, bool show);
    public abstract virtual void ShowAccessTypes(IEnumerable`1<OccurrenceKind> kinds, bool show);
    public abstract virtual void ShowAllAccessTypes();
    public abstract virtual IEnumerable`1<OccurrenceKind> get_Kinds();
    public abstract virtual void ShowNoneAccessTypes();
}
public interface JetBrains.ReSharper.Feature.Services.Tree.IOccurrenceFiltersDescriptor {
    public IOccurrenceFilters Filters { get; }
    public abstract virtual IOccurrenceFilters get_Filters();
}
public interface JetBrains.ReSharper.Feature.Services.Tree.IRichTextLiveTreeNode {
    public IBindable`1<int> Count { get; }
    public IBindable`1<int> RawCount { get; }
    [CanBeNullAttribute]
public IRichTextTreeNodeViewModel ViewModel { get; }
    public abstract virtual IBindable`1<int> get_Count();
    public abstract virtual IBindable`1<int> get_RawCount();
    public abstract virtual IRichTextTreeNodeViewModel get_ViewModel();
}
public interface JetBrains.ReSharper.Feature.Services.Tree.IRichTextTreeNodeViewModel {
    public bool Evaluated { get; public set; }
    [NotNullAttribute]
public IBindable`1<RichText> RichText { get; }
    public abstract virtual bool get_Evaluated();
    public abstract virtual void set_Evaluated(bool value);
    public abstract virtual IBindable`1<RichText> get_RichText();
}
public interface JetBrains.ReSharper.Feature.Services.Tree.ISimpleOccurrenceBrowserDescriptor {
    public LifetimeDefinition LifetimeDefinition { get; }
    [NotNullAttribute]
public IUserDataHolder UserDataHolder { get; }
    public abstract virtual LifetimeDefinition get_LifetimeDefinition();
    public abstract virtual IUserDataHolder get_UserDataHolder();
}
public interface JetBrains.ReSharper.Feature.Services.Tree.ITreeModelNodeVisibilityPresentor {
    public abstract virtual bool IsVisible(TreeModelNode node);
}
public abstract class JetBrains.ReSharper.Feature.Services.Tree.LiveTreeModelBrowserDescriptor : TreeModeBrowserDescriptorWithPreview {
    [NotNullAttribute]
protected IThreading Threading;
    protected ILogger myLogger;
    [CanBeNullAttribute]
private ActionComboBox myComboBox;
    protected ISettingsStore mySettingsStore;
    private NoContentLockInsideReadWriteLock myRwLock;
    [CanBeNullAttribute]
private LiveTreeModelGrouping`1<object> mySelectedGrouping;
    private FlexibleGroupingViewModel myFlexibleGroupingViewModel;
    protected ISettingsStore SettingsStore { get; }
    public LiveTreeGroupModel`1<object> TreeModel { get; }
    protected LiveTreeModelGrouping`1[] Groupings { get; }
    public NoContentLockInsideReadWriteLock RwLock { get; }
    protected int DefaultGroupingIndex { get; protected set; }
    [CanBeNullAttribute]
public IEnumerable`1<TreeGroupFeatureExtractor`1<object>> FlexibleGrouping { get; }
    public string ActionBarID { get; }
    protected LiveTreeModelBrowserDescriptor(ISolution solution);
    protected ISettingsStore get_SettingsStore();
    public abstract virtual LiveTreeGroupModel`1<object> get_TreeModel();
    protected virtual LiveTreeModelGrouping`1[] get_Groupings();
    public sealed virtual NoContentLockInsideReadWriteLock get_RwLock();
    public virtual bool Navigate(TreeModelNode node, PopupWindowContextSource windowContext, bool transferFocus, TabOptions options);
    protected virtual int get_DefaultGroupingIndex();
    protected virtual void set_DefaultGroupingIndex(int value);
    public virtual IEnumerable`1<TreeGroupFeatureExtractor`1<object>> get_FlexibleGrouping();
    public virtual bool CustomizeActionBar(IActionBar bar);
    private void InsertPredifinedGroupings(IActionBar bar);
    protected virtual void ExecuteGroupChangeCommitted(object sender, EventArgs e);
    private void GroupChangeCommitted();
    protected virtual void SetGroupProviders(List`1<VolatileTreeGroupProvider<object>> groupProviders);
    public virtual bool QuickSearchMatches(TreeModelNode modelNode, string quickSearchText);
    public virtual string get_ActionBarID();
    public sealed virtual IPresentableItem[] GetCellPresentations(TreeModelNode treeModelNode);
    public virtual bool AcceptOccurrence(object value);
    [CompilerGeneratedAttribute]
private void <CustomizeActionBar>b__22_1();
}
public class JetBrains.ReSharper.Feature.Services.Tree.LiveTreeNodeCountConverter : object {
    public static IValueConverter Instance;
    private static LiveTreeNodeCountConverter();
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public abstract class JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.AsyncCommitClientBase : object {
    private Lifetime myLifetime;
    private IGroupingEvent myRefreshEvent;
    private IShellLocks myLocks;
    protected AsyncCommitClientBase(Lifetime lifetime, IGroupingEvent refreshEvent, IShellLocks locks);
    public sealed virtual Action BeforeCommit();
    public sealed virtual void OnInterrupt();
    protected abstract virtual void Run();
    private void BeforeCommitImpl();
}
public class JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.AsyncNodeChildrenUpdaterFactoryWithContentReadLock`1 : object {
    [NotNullAttribute]
private IGroupingEventFactory myGroupingEventFactory;
    [NotNullAttribute]
private IMainThreadExecutor myMainThreadExecutor;
    [NotNullAttribute]
private Func`3<T, ITreeModel, T> myTempNodeFactory;
    [CanBeNullAttribute]
private IShellLocks myShellLocks;
    public AsyncNodeChildrenUpdaterFactoryWithContentReadLock`1(IGroupingEventFactory groupingEventFactory, IMainThreadExecutor mainThreadExecutor, Func`3<T, ITreeModel, T> tempNodeFactory);
    public AsyncNodeChildrenUpdaterFactoryWithContentReadLock`1(IGroupingEventFactory groupingEventFactory, IShellLocks shellLocks, Func`3<T, ITreeModel, T> tempNodeFactory);
    public sealed virtual INodeChildrenUpdater Create(Lifetime lifetime, ISync bgWriteLock, ReadWriteLock uiLock, GroupingEventProlongation prolongationPolicy);
    public sealed virtual ReadWriteLock CreateUILock(ReadWriteLock bgWriteLock);
}
public class JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.AsyncNodeChildrenUpdaterWithContentReadLock`1 : AsyncNodeChildrenUpdater`1<TNode> {
    public AsyncNodeChildrenUpdaterWithContentReadLock`1(Lifetime lifetime, IMainThreadExecutor mainThreadExecutor, ISync bgWriteLock, ReadWriteLock uiLock, IGroupingEventFactory groupingEventFactory, Func`3<TNode, ITreeModel, TNode> tempNodeFactory, GroupingEventProlongation prolongationPolicy, IActivityTimeoutTracker activityTimeoutTracker);
    protected virtual void UpdateChangedChildrenCollections();
}
[ActionAttribute("CheckedTreeModelBrowser.ClearSelection", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ClearSelectionActionText")]
public class JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.CheckedTreeModelBrowserClearSelectionAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("CheckedTreeModelBrowser.SelectAll", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "SelectAllActionText")]
public class JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.CheckedTreeModelBrowserSelectAllAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.DelegateMenuActionViewModel : object {
    [NotNullAttribute]
private IMenuActionViewModel myViewModel;
    public IProperty`1<IconId> Icon { get; }
    public IProperty`1<bool> IsOpened { get; }
    public IProperty`1<PopupWindowContextSource> PopupWindowContext { get; }
    public IProperty`1<ICommand> Command { get; }
    public DelegateMenuActionViewModel(IMenuActionViewModel viewModel);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual IProperty`1<IconId> get_Icon();
    public sealed virtual IProperty`1<bool> get_IsOpened();
    public sealed virtual IProperty`1<PopupWindowContextSource> get_PopupWindowContext();
    public sealed virtual IProperty`1<ICommand> get_Command();
}
public abstract class JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.FilterMenuActionViewModelBase : AAutomation {
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private SequentialLifetimes myMenuLifetime;
    [CompilerGeneratedAttribute]
private IProperty`1<IconId> <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsOpened>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<PopupWindowContextSource> <PopupWindowContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ICommand> <Command>k__BackingField;
    public IProperty`1<IconId> Icon { get; }
    public IProperty`1<bool> IsOpened { get; }
    public IProperty`1<PopupWindowContextSource> PopupWindowContext { get; }
    public IProperty`1<ICommand> Command { get; }
    protected bool ShouldCloseMenuOnExecute { get; }
    protected FilterMenuActionViewModelBase(Lifetime lifetime, IShellLocks locks);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IconId> get_Icon();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsOpened();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<PopupWindowContextSource> get_PopupWindowContext();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<ICommand> get_Command();
    public void ShowMenu();
    protected abstract virtual bool get_ShouldCloseMenuOnExecute();
    [NotNullAttribute]
[ItemNotNullAttribute]
[PureAttribute]
protected abstract virtual IReadOnlyList`1<IFilterMenuItem> CreateMenuItems();
    private void InitializeMenu(JetPopupMenu menu, Lifetime lifetime);
    private void RefreshMenu(JetPopupMenu menu);
    [CompilerGeneratedAttribute]
private void <ShowMenu>b__15_0();
}
[ActionAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "FilterOccurrencesMenuAction_Text")]
public class JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.FilterOccurrencesMenuAction : object {
    private static Key`1<OccurrenceFiltersMenuActionViewModel> ourViewModelKey;
    private static FilterOccurrencesMenuAction();
    public sealed virtual bool Update(IDataContext context, AutomationProviderActionPresentation presentation);
    [CanBeNullAttribute]
private static OccurrenceFiltersMenuActionViewModel GetOrCreateViewModel(IDataContext context);
    public sealed virtual bool Execute(IDataContext context);
}
public class JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.HideAllUsagesMenuItem : object {
    public static string Title;
    [NotNullAttribute]
private IOccurrenceFilters myFilters;
    public HideAllUsagesMenuItem(IOccurrenceFilters filters);
    private static HideAllUsagesMenuItem();
    public sealed virtual void Execute();
    public sealed virtual void Describe(IMenuItemDescriptor descriptor);
}
public interface JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.IFilterMenuItem {
    public abstract virtual void Execute();
    public abstract virtual void Describe(IMenuItemDescriptor descriptor);
}
public interface JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.IMenuActionViewModel {
    [NotNullAttribute]
public IProperty`1<IconId> Icon { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsOpened { get; }
    [NotNullAttribute]
public IProperty`1<PopupWindowContextSource> PopupWindowContext { get; }
    [NotNullAttribute]
public IProperty`1<ICommand> Command { get; }
    public abstract virtual IProperty`1<IconId> get_Icon();
    public abstract virtual IProperty`1<bool> get_IsOpened();
    public abstract virtual IProperty`1<PopupWindowContextSource> get_PopupWindowContext();
    public abstract virtual IProperty`1<ICommand> get_Command();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.NodeChildrenUpdaterFactoryForRichTextLiveModelHolder : object {
    [NotNullAttribute]
private IGroupingEventFactory myGroupingEventFactory;
    [NotNullAttribute]
private IShellLocks myShellLocks;
    public NodeChildrenUpdaterFactoryForRichTextLiveModelHolder(IGroupingEventFactory groupingEventFactory, IShellLocks shellLocks);
    public virtual INodeChildrenUpdaterFactory CreateFactory();
}
public class JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.OccurrenceFiltersMenuActionViewModel : FilterMenuActionViewModelBase {
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private IOccurrenceFilters myFilters;
    protected bool ShouldCloseMenuOnExecute { get; }
    public OccurrenceFiltersMenuActionViewModel(Lifetime lifetime, ISolution solution, IOccurrenceFilters descriptorFilters);
    protected virtual bool get_ShouldCloseMenuOnExecute();
    protected virtual IReadOnlyList`1<IFilterMenuItem> CreateMenuItems();
}
public class JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.OccurrenceKindFilterMenuItem : object {
    private OccurrenceKind myKind;
    private IOccurrenceFilters myFilters;
    private PresentableItemImage myKindImage;
    public OccurrenceKindFilterMenuItem(OccurrenceKind kind, IOccurrenceFilters filters, PresentableItemImage kindImage);
    public sealed virtual void Execute();
    public sealed virtual void Describe(IMenuItemDescriptor descriptor);
}
public class JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.PresenterAsyncDecorator : object {
    private static IconId[] ourProgressIcons;
    private static IconId ourWaitingIcon;
    private static PresenterAsyncDecorator();
    public void Decorate(StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter);
    private void PresentProgressNodeValue(CalculatingNodeValueWithProgress value, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    private void PresentAsyncNodeValue(CalculatingNodeValue value, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    private void PresentErrorNodeValue(ErrorNodeValue value, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
}
public class JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.RichTextLiveTreeNodeTempNodeFactory : object {
    public static IRichTextLiveTreeNode CreateTempNode(IRichTextLiveTreeNode parent, ITreeModel model);
}
public class JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.SeparatorFilterMenuItem : object {
    public sealed virtual void Execute();
    public sealed virtual void Describe(IMenuItemDescriptor descriptor);
}
public class JetBrains.ReSharper.Feature.Services.Tree.NewGroupingTree.ShowAllUsagesMenuItem : object {
    public static string Title;
    [NotNullAttribute]
private IOccurrenceFilters myFilters;
    public ShowAllUsagesMenuItem(IOccurrenceFilters filters);
    private static ShowAllUsagesMenuItem();
    public sealed virtual void Execute();
    public sealed virtual void Describe(IMenuItemDescriptor descriptor);
}
public abstract class JetBrains.ReSharper.Feature.Services.Tree.OccurrenceBrowserDescriptor : TreeModeBrowserDescriptorWithPreview {
    private OccurrenceBrowserPresenter myPresenter;
    private JetHashSet`1<OccurrenceKind> myFilter;
    private JetHashSet`1<OccurrenceKind> myOccurrenceKinds;
    private Dictionary`2<GroupingSectionId, OccurrenceSection> myOccurrenceSections;
    private JetHashSet`1<object> myIgnoredValues;
    private ComboBox myGroupsCombo;
    private TreeModelGrouping`1<IOccurrence> myActiveGrouping;
    private List`1<TreeModelGrouping`1<IOccurrence>> myGroupings;
    private IProperty`1<bool> myShowIgnoredOccurrences;
    private bool myMergeOccurrences;
    protected ICollection`1<IOccurrence> myItems;
    [CanBeNullAttribute]
private PsiIconManager myPsiIconManager;
    private IEnumerable`1<OccurrenceKind> myAllOccurrenceKinds;
    private OccurrenceKindManager myOccurrenceKindManager;
    private ISettingsStore mySettingsStore;
    private NavigationSettings myNavigationSettings;
    private IUserDataHolder myUserDataHolder;
    [CompilerGeneratedAttribute]
private ISimpleSignal <UpdatedSignal>k__BackingField;
    private static int MaximumQuantityAutoExpandResults;
    public ISimpleSignal UpdatedSignal { get; }
    public IOccurrenceFilters Filters { get; }
    public bool IgnoreNodesSupported { get; }
    public bool VisibilitySupported { get; }
    public IEnumerable`1<IOccurrence> Items { get; }
    public ICollection`1<OccurrenceSection> OccurrenceSections { get; }
    protected bool DrawElementExtensions { get; protected set; }
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> Presenter { get; }
    public string ActionBarID { get; }
    public string ContextMenuID { get; }
    public TreeModelGrouping`1<IOccurrence> ActiveGrouping { get; }
    public bool MergeOccurrences { get; public set; }
    public IProperty`1<bool> ShowIgnoredOccurrences { get; }
    protected int DefaultGroupingIndex { get; protected set; }
    protected bool EnableKindGrouping { get; protected set; }
    public List`1<TreeModelGrouping`1<IOccurrence>> Groupings { get; }
    public IEnumerable`1<OccurrenceKind> Kinds { get; }
    public bool ShowNewView { get; }
    public IIgnoredNodes IgnoredNodes { get; }
    public bool QuickSearchSupported { get; }
    public bool HasIgnoredOccurrences { get; }
    public IUserDataHolder UserDataHolder { get; }
    protected OccurrenceBrowserDescriptor(ISolution solution);
    public virtual bool VisibilityState(TreeModelNode modelNode);
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_UpdatedSignal();
    public sealed virtual bool CanHide(object val);
    public sealed virtual void Hide(IEnumerable`1<object> values, IList`1<TreeModelNode> selectedNodes);
    public sealed virtual void UndoHide(IEnumerable`1<object> values, IList`1<TreeModelNode> selectedNodes);
    public sealed virtual IOccurrenceFilters get_Filters();
    private void RemoveFromHideList(IEnumerable`1<IOccurrence> occurrences);
    public virtual bool get_IgnoreNodesSupported();
    public sealed virtual bool IsVisible(TreeModelNode node);
    public sealed virtual bool get_VisibilitySupported();
    protected virtual ICollection`1<OccurrenceKind> GetAllOccurrenceKinds();
    public sealed virtual IEnumerable`1<IOccurrence> get_Items();
    public sealed virtual ICollection`1<OccurrenceSection> get_OccurrenceSections();
    protected bool get_DrawElementExtensions();
    protected void set_DrawElementExtensions(bool value);
    public virtual bool ExpandNodeInitially(TreeModelNode modelNode);
    public virtual StructuredPresenter`2<TreeModelNode, IPresentableItem> get_Presenter();
    public virtual string get_ActionBarID();
    public virtual string get_ContextMenuID();
    public TreeModelGrouping`1<IOccurrence> get_ActiveGrouping();
    public sealed virtual bool get_MergeOccurrences();
    public sealed virtual void set_MergeOccurrences(bool value);
    public sealed virtual IProperty`1<bool> get_ShowIgnoredOccurrences();
    protected virtual int get_DefaultGroupingIndex();
    protected virtual void set_DefaultGroupingIndex(int value);
    protected virtual bool get_EnableKindGrouping();
    protected virtual void set_EnableKindGrouping(bool value);
    public List`1<TreeModelGrouping`1<IOccurrence>> get_Groupings();
    private void BuildFilter();
    public sealed virtual void ShowAllAccessTypes();
    public sealed virtual void ShowNoneAccessTypes();
    public sealed virtual void ShowOnlyAccessType(OccurrenceKind occurrenceKind, bool show);
    public virtual Nullable`1<bool> IsQuickSearchAccepted(TreeModelNode modelNode, string filter);
    public sealed virtual void ShowAccessType(OccurrenceKind occurrenceKind, bool show);
    public sealed virtual void ShowAccessTypes(IEnumerable`1<OccurrenceKind> kinds, bool show);
    public sealed virtual bool IsShownAccessType(OccurrenceKind occurrenceKind);
    public sealed virtual bool IsShownOnlyAccessType(OccurrenceKind occurrenceKind);
    private bool ShouldShowOccurrence(IEnumerable`1<OccurrenceKind> occurrenceKinds);
    private bool ShouldShowOccurrenceKind(OccurrenceKind occurrenceKind);
    public sealed virtual IEnumerable`1<OccurrenceKind> get_Kinds();
    public sealed virtual bool get_ShowNewView();
    public sealed virtual bool AccessTypePresent(OccurrenceKind occurrenceKind);
    public virtual IEnumerable`1<TreeModelNode> GetDefaultNodes(TreeModel model);
    public virtual bool AcceptOccurrence(object value);
    public virtual bool CustomizeActionBar(IActionBar bar);
    protected virtual void GroupChangeCommitted(object sender, EventArgs e);
    public void SetGrouping(TreeModelGrouping`1<IOccurrence> grouping);
    protected void Regroup();
    protected virtual void CreateGroupings(List`1<TreeModelGrouping`1<IOccurrence>> groupings);
    private void SetResults(ICollection`1<IOccurrence> items, bool mergeKinds);
    protected virtual void SetResults(ICollection`1<IOccurrence> items, IProgressIndicator indicator, bool mergeKinds);
    private void SetResultWithCookie(ICollection`1<IOccurrence> items, IProgressIndicator indicator);
    protected virtual IEqualityComparer`1<object> CreateEqualityComparer();
    protected virtual IComparer`1<TreeModelNode> CreateComparer();
    protected virtual void FillSections(ICollection`1<IOccurrence> items);
    protected List`1<GroupingSectionId> GetContainingSection(IOccurrence item);
    protected virtual ICollection`1<OccurrenceKind> GetOccurrenceKinds(IOccurrence occurrence);
    public virtual IIdentityDescriptor GetIdentityDescriptor();
    public sealed virtual IIgnoredNodes get_IgnoredNodes();
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.Tree.IIgnoredNodesDescriptor.UpdateItem(ITreeModelNode treeModelNode);
    public static void SortSections(List`1<OccurrenceSection> values);
    public virtual bool get_QuickSearchSupported();
    public sealed virtual bool get_HasIgnoredOccurrences();
    public sealed virtual IUserDataHolder get_UserDataHolder();
    public virtual bool Navigate(TreeModelNode node, PopupWindowContextSource windowContext, bool transferFocus, TabOptions options);
    private sealed virtual override LifetimeDefinition JetBrains.ReSharper.Feature.Services.Tree.ISimpleOccurrenceBrowserDescriptor.get_LifetimeDefinition();
    [CompilerGeneratedAttribute]
private void <.ctor>b__17_0(PropertyChangedEventArgs`1<bool> a);
    [CompilerGeneratedAttribute]
private void <CustomizeActionBar>b__82_0();
    [CompilerGeneratedAttribute]
private void <CustomizeActionBar>b__82_1();
    [CompilerGeneratedAttribute]
private void <CustomizeActionBar>b__82_2();
    [CompilerGeneratedAttribute]
private void <CustomizeActionBar>b__82_3();
    [CompilerGeneratedAttribute]
private void <GroupChangeCommitted>b__83_0();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Tree.OccurrenceBrowserDescriptorExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static TreeModelBrowserDescriptor AsTree(IOccurrenceBrowserDescriptor me);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Tree.OccurrenceBrowserGroupingProvider : object {
    private static TreeModelGrouping`1[] ourGroupings;
    private static TreeGroupFeatureExtractor`1[] ourFlexibleGroupings;
    private static OccurrenceBrowserGroupingProvider();
    public virtual ICollection`1<TreeModelGrouping`1<IOccurrence>> GetGroupings(TreeModelBrowserDescriptorBase descriptor);
    private sealed virtual override IEnumerable`1<TreeGroupFeatureExtractor`1<IOccurrence>> JetBrains.ReSharper.Feature.Services.Tree.GroupingManagement.IFlexibleGroupingProvider<JetBrains.ReSharper.Feature.Services.Occurrences.IOccurrence>.GetGroupings(TreeModelBrowserDescriptorBase descriptor);
    public virtual bool IsApplicable(TreeModelBrowserDescriptorBase descriptor);
    private static bool IsExtSource(IProjectItem projectItem);
    private static CascadeGroup CreateCascadeExtSource(IProjectItem projectItem);
}
public class JetBrains.ReSharper.Feature.Services.Tree.OccurrenceBrowserGroupingProviderUtil : object {
    [NotNullAttribute]
[PureAttribute]
public static List`1<ProjectModelElementEnvoy> CreateCascade(IProjectItem item, bool skipSourceItem);
}
public class JetBrains.ReSharper.Feature.Services.Tree.OccurrenceBrowserPresenter : TreeModelBrowserPresenter {
    private ISolution mySolution;
    private ITheming myTheming;
    private OccurrenceInformationManager myOccurrenceInformationManager;
    [CompilerGeneratedAttribute]
private ITreeModelNodeVisibilityPresentor <TreeModelNodeVisibilityPresentor>k__BackingField;
    protected ISolution Solution { get; }
    protected OccurrenceInformationManager OccurrenceInformationManager { get; }
    public ITreeModelNodeVisibilityPresentor TreeModelNodeVisibilityPresentor { get; public set; }
    [ObsoleteAttribute("use themed constructor")]
public OccurrenceBrowserPresenter(ISolution solution);
    public OccurrenceBrowserPresenter(ISolution solution, IOccurrenceBrowserPresenterContext occurrenceBrowserPresenterContext);
    protected ISolution get_Solution();
    protected OccurrenceInformationManager get_OccurrenceInformationManager();
    [CompilerGeneratedAttribute]
public sealed virtual ITreeModelNodeVisibilityPresentor get_TreeModelNodeVisibilityPresentor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TreeModelNodeVisibilityPresentor(ITreeModelNodeVisibilityPresentor value);
    private void PresentFileSystemPathOccurrence(FileSystemPathOccurrence value, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    private void PresentAssemblyAttributeOccurrence(IAssemblyAttributeOccurrence value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    public virtual void UpdateItem(object value, TreeModelNode structureElement, IPresentableItem item, PresentationState state);
    private void UpdateTextColor(TreeModelNode structureElement, IPresentableItem item);
    private void PresentProjectItemOccurrence(ProjectItemOccurrence value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    private void PresentDeclaredElementOccurrence(IDeclaredElementOccurrence value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    private void PresentCompiledElementOccurrence(CompiledElementOccurrence value, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
    private bool NeedToPresentCompiledElementOccurrence(CompiledElementOccurrence value, TreeModelNode structureElement);
    private void DefaultPresentCompiledOccurrence(DeclaredElementOccurrence value, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
    private void PresentStringInCompiledElementOccurrence(StringInCompiledElementOccurrence value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    private void PresentTextualOccurrence(RangeOccurrence value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    private void PresentBaseOccurrence(IOccurrence occurrence, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    public virtual void PresentRangeOccurrence(IPresentableItem item, RangeOccurrence rangeOccurrence);
    private void PresentOccurrenceKind(OccurrenceKind value, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    private void PresentSourceGeneratedStructureElement(SourceGeneratedStructureElement value, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    protected virtual object Unwrap(object value);
    protected virtual void HighlightDeclaredElement(IDeclaredElement declaredElement, PsiLanguageType languageType, IPresentableItem item, TreeModelNode modelNode, DeclaredElementPresenterMarking marking);
    private static void Highlight(DeclaredElementOccurrence occurrence, IDeclaredElement declaredElement, IPresentableItem item, DeclaredElementPresenterMarking marking);
    private static void Highlight(IDeclaredElementEnvoy displayElement, IDeclaredElementEnvoy occurrenceElement, SearchTargetRole role, IPresentableItem item, DeclaredElementPresenterMarking marking);
}
public class JetBrains.ReSharper.Feature.Services.Tree.OccurrenceBrowserPresenterContext : object {
    [CompilerGeneratedAttribute]
private ITheming <Theming>k__BackingField;
    [CompilerGeneratedAttribute]
private OccurrenceInformationManager <OccurrenceInformationManager>k__BackingField;
    [NotNullAttribute]
public ITheming Theming { get; }
    [NotNullAttribute]
public OccurrenceInformationManager OccurrenceInformationManager { get; }
    public OccurrenceBrowserPresenterContext(ITheming theming, OccurrenceInformationManager occurrenceInformationManager);
    [CompilerGeneratedAttribute]
public sealed virtual ITheming get_Theming();
    [CompilerGeneratedAttribute]
public sealed virtual OccurrenceInformationManager get_OccurrenceInformationManager();
}
public static class JetBrains.ReSharper.Feature.Services.Tree.OccurrenceDescriptorConstants : object {
    public static int OccurrenceUnloadThreshold;
}
public class JetBrains.ReSharper.Feature.Services.Tree.PresentableDeclaredElementEnvoy : object {
    [NotNullAttribute]
private IDeclaredElementEnvoy myEnvoy;
    private bool myShowModuleName;
    public bool ShowModuleName { get; }
    private string JetBrains.ReSharper.Psi.IDeclaredElementEnvoy.Text { get; }
    public PresentableDeclaredElementEnvoy(IDeclaredElementEnvoy envoy, bool showModuleName);
    public bool get_ShowModuleName();
    private sealed virtual override IDeclaredElement JetBrains.ReSharper.Psi.IDeclaredElementEnvoy.GetValidDeclaredElement();
    private sealed virtual override DeclaredElementInstance JetBrains.ReSharper.Psi.IDeclaredElementEnvoy.GetValidDeclaredElementInstance();
    private sealed virtual override string JetBrains.ReSharper.Psi.IDeclaredElementEnvoy.get_Text();
    private sealed virtual override void JetBrains.ReSharper.Psi.IDeclaredElementEnvoy.Present(StructuredPresenter`2<TStructureElement, IPresentableItem> presenter, TStructureElement structureElement, IPresentableItem item, PresentationState state);
    public sealed virtual void ResetCache();
    private bool Equals(PresentableDeclaredElementEnvoy other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.Tree.RichTextLiveTreeModel : LiveTreeGroupModel`2<object, IRichTextLiveTreeNode> {
    [NotNullAttribute]
protected IFreeThreadedThrottlingGroupingEventFactory myFreeThreadedThrottlingGroupingEventFactory;
    private StructuredPresenter`2<TreeModelNode, IPresentableItem> myPresenter;
    private Func`2<object, bool> myIsMeaningful;
    [CompilerGeneratedAttribute]
private ILiveTreeModelNodeFactory <Factory>k__BackingField;
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> Presenter { get; }
    public Func`2<object, bool> IsMeaningful { get; }
    public ILiveTreeModelNodeFactory Factory { get; public set; }
    protected bool ShouldUpdateItemOnItemAdded { get; }
    public RichTextLiveTreeModel(Lifetime lifetime, ReadWriteLock lock, IThreading threading, IFreeThreadedThrottlingGroupingEventFactory freeThreadedThrottlingGroupingEventFactory, StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter, IEqualityComparer`1<object> dataValueComparer, ILiveTreeModelComparer sorter, ILiveTreeModelFilter filter, Func`2<object, bool> isMeaningful, INodeChildrenUpdaterFactory nodeChildrenUpdaterFactory);
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> get_Presenter();
    public Func`2<object, bool> get_IsMeaningful();
    [CompilerGeneratedAttribute]
public ILiveTreeModelNodeFactory get_Factory();
    [CompilerGeneratedAttribute]
public void set_Factory(ILiveTreeModelNodeFactory value);
    public void UpdateItem(ITreeModelNode child);
    protected virtual bool get_ShouldUpdateItemOnItemAdded();
    protected virtual bool IsMeaningfulItem(object item);
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.Tree.IModelWithMeaningfulItems.IsMeaningfulItem(object item);
    protected virtual ITreeModelNode CreateNode(object dataItem);
    protected virtual IRichTextLiveTreeNode InitializeTypedRoot();
    protected virtual void OnChildAdded(ITreeModelNode parent, ITreeModelNode child);
    protected virtual void OnChildRemoved(ITreeModelNode parent, ITreeModelNode child);
    public virtual void EvaluateNodeViewModel(ITreeModelNode node);
}
public class JetBrains.ReSharper.Feature.Services.Tree.RichTextLiveTreeNode : LeafLiveTreeNode`1<IRichTextLiveTreeNode> {
    private static BindableConstant`1<int> ourCount;
    private Lazy`1<IRichTextTreeNodeViewModel> myViewModel;
    public IBindable`1<int> Count { get; }
    public IBindable`1<int> RawCount { get; }
    public IRichTextTreeNodeViewModel ViewModel { get; }
    public RichTextLiveTreeNode(RichTextLiveTreeModel model, object dataItem);
    private static RichTextLiveTreeNode();
    public virtual IBindable`1<int> get_Count();
    public virtual IBindable`1<int> get_RawCount();
    protected virtual IRichTextTreeNodeViewModel CreateViewModel();
    public sealed virtual IRichTextTreeNodeViewModel get_ViewModel();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.Tree.RichTextTreeNodeViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private bool <Evaluated>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<RichText> <RichText>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<IconId> <EntityIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private PresentableItemImageCollection <Images>k__BackingField;
    public bool Evaluated { get; public set; }
    public IBindable`1<RichText> RichText { get; }
    public IBindable`1<IconId> EntityIcon { get; }
    private RichText JetBrains.Application.UI.Controls.Utils.IPresentableItem.RichText { get; private set; }
    public PresentableItemImageCollection Images { get; }
    public RichTextTreeNodeViewModel(IBindable`1<RichText> richText);
    public sealed virtual void Clear();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Evaluated();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Evaluated(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<RichText> get_RichText();
    [CompilerGeneratedAttribute]
public IBindable`1<IconId> get_EntityIcon();
    private sealed virtual override RichText JetBrains.Application.UI.Controls.Utils.IPresentableItem.get_RichText();
    private sealed virtual override void JetBrains.Application.UI.Controls.Utils.IPresentableItem.set_RichText(RichText value);
    [CompilerGeneratedAttribute]
public sealed virtual PresentableItemImageCollection get_Images();
    public sealed virtual void NotifyImageCollectionChanged();
}
public class JetBrains.ReSharper.Feature.Services.Tree.SectionsManagement.GroupingSectionId : EnumPattern {
    public static GroupingSectionId DefaultSection;
    public static GroupingSectionId GeneratedCodeUsagesSection;
    public static GroupingSectionId RelatedElementsSection;
    public static GroupingSectionId RelatedElementsUsagesSection;
    public static GroupingSectionId LateBoundUsagesSection;
    public static GroupingSectionId DocumentationUsagesSection;
    public static GroupingSectionId SmartDynamicSection;
    public static GroupingSectionId OtherDynamicSection;
    public static GroupingSectionId DependentCodeSection;
    public static GroupingSectionId MacroBodyUsageSection;
    public static GroupingSectionId InactiveCodeUsageSection;
    public static GroupingSectionId OtherSection;
    public static GroupingSectionId TextualUsagesSection;
    public static GroupingSectionId FuzzyTextualUsagesSection;
    public static GroupingSectionId CompiledUsagesSection;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public int Priority { get; }
    public string Name { get; }
    public GroupingSectionId(string name, int priority);
    private static GroupingSectionId();
    [CompilerGeneratedAttribute]
public int get_Priority();
    public string get_Name();
}
public interface JetBrains.ReSharper.Feature.Services.Tree.SectionsManagement.IOccurrenceSectionProvider {
    public abstract virtual bool IsApplicable(IOccurrenceBrowserDescriptor descriptor);
    public abstract virtual ICollection`1<TreeSection> GetTreeSections(IOccurrenceBrowserDescriptor descriptor);
    public abstract virtual ICollection`1<GroupingSectionId> GetGroupSectionId(IOccurrence occurrence, IOccurrenceBrowserDescriptor descriptor);
}
public class JetBrains.ReSharper.Feature.Services.Tree.SectionsManagement.OccurrenceSection : object {
    [CompilerGeneratedAttribute]
private TreeGroupModel`1<IOccurrence> <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FilteredCount>k__BackingField;
    [CompilerGeneratedAttribute]
private GroupingSectionId <SectionName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IOccurrence> <Items>k__BackingField;
    public TreeGroupModel`1<IOccurrence> Model { get; public set; }
    public int TotalCount { get; public set; }
    public int FilteredCount { get; public set; }
    public GroupingSectionId SectionName { get; }
    public List`1<IOccurrence> Items { get; public set; }
    public OccurrenceSection(GroupingSectionId sectionType);
    [CompilerGeneratedAttribute]
public TreeGroupModel`1<IOccurrence> get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(TreeGroupModel`1<IOccurrence> value);
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
public void set_TotalCount(int value);
    [CompilerGeneratedAttribute]
public int get_FilteredCount();
    [CompilerGeneratedAttribute]
public void set_FilteredCount(int value);
    [CompilerGeneratedAttribute]
public GroupingSectionId get_SectionName();
    [CompilerGeneratedAttribute]
public List`1<IOccurrence> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(List`1<IOccurrence> value);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Tree.SectionsManagement.OccurrenceSectionProvider : object {
    public virtual bool IsApplicable(IOccurrenceBrowserDescriptor descriptor);
    public virtual ICollection`1<TreeSection> GetTreeSections(IOccurrenceBrowserDescriptor descriptor);
    public virtual ICollection`1<GroupingSectionId> GetGroupSectionId(IOccurrence occurrence, IOccurrenceBrowserDescriptor descriptor);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Tree.SectionsManagement.OccurrenceSectionsManager : object {
    private IFeaturePartsContainer myFeatureParts;
    public OccurrenceSectionsManager(IFeaturePartsContainer featureParts);
    public static OccurrenceSectionsManager GetInstance(ISolution solution);
    public List`1<TreeSection> GetTreeSectionsFromOccurrenceSections(IOccurrenceBrowserDescriptor descriptor);
    public IEnumerable`1<GroupingSectionId> GetGroupingSectionIds(IOccurrence occurrence, IOccurrenceBrowserDescriptor descriptor);
    public GroupingSectionId GetSingleGroupingSectionId(IOccurrence occurrence, IOccurrenceBrowserDescriptor descriptor);
    private IEnumerable`1<IOccurrenceSectionProvider> GetApplicableProviders(IOccurrenceBrowserDescriptor descriptor);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Tree.SectionsManagement.SearchDescriptorSectionProvider : OccurrenceSectionProvider {
    public static GroupingSectionId ObjectExtensions;
    private static SearchDescriptorSectionProvider();
    public virtual bool IsApplicable(IOccurrenceBrowserDescriptor descriptor);
    public virtual ICollection`1<TreeSection> GetTreeSections(IOccurrenceBrowserDescriptor descriptor);
    public virtual ICollection`1<GroupingSectionId> GetGroupSectionId(IOccurrence occurrence, IOccurrenceBrowserDescriptor descriptor);
}
public class JetBrains.ReSharper.Feature.Services.Tree.SectionsManagement.TreeSectionWithId : TreeSection {
    private string myTitle;
    [CompilerGeneratedAttribute]
private GroupingSectionId <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStop>k__BackingField;
    public string Title { get; }
    public GroupingSectionId ID { get; }
    public bool IsStop { get; }
    public TreeSectionWithId(TreeModel model, GroupingSectionId id, bool isStopGroupingNode);
    public TreeSectionWithId(TreeModel model, GroupingSectionId id, string title, bool isStopGroupingNode);
    public virtual string get_Title();
    public void UpdateTitle(string newtitle);
    [CompilerGeneratedAttribute]
public GroupingSectionId get_ID();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsStop();
    public sealed virtual int CompareTo(TreeSectionWithId other);
    protected bool Equals(TreeSectionWithId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.Tree.SourceGeneratedStructureElement : object {
    public ElementKind Kind;
    [NotNullAttribute]
public string Name;
    [NotNullAttribute]
public string TargetFramework;
    [CanBeNullAttribute]
public ProjectFileType FileType;
    public SourceFilePtr SourceFilePtr;
    private SourceGeneratedStructureElement(ElementKind kind, string name, ProjectFileType fileType, SourceFilePtr ptr, string targetFrameworkId);
    [NotNullAttribute]
public static SourceGeneratedStructureElement CreateFile(ElementKind kind, string path, ProjectFileType fileType, SourceFilePtr ptr, string targetFrameworkId);
    [NotNullAttribute]
public static SourceGeneratedStructureElement CreateGroup(ElementKind kind, string name);
    public bool Navigate(PopupWindowContextSource windowContext, bool transferFocus, TabOptions options);
    private bool Equals(SourceGeneratedStructureElement other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Tree.SyncHelper : object {
    [ExtensionAttribute]
public static SyncCookie InterruptableUsing(ISync sync);
}
public class JetBrains.ReSharper.Feature.Services.Tree.ToggleCheckBoxViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<bool> <IsChecked>k__BackingField;
    [CompilerGeneratedAttribute]
private SignalCommand <SignalCommand>k__BackingField;
    public string Title { get; }
    public Property`1<bool> IsChecked { get; }
    public SignalCommand SignalCommand { get; }
    public ToggleCheckBoxViewModel(Lifetime lifetime, FlexibleGroupingViewModel vm, string title, bool isCheked);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public Property`1<bool> get_IsChecked();
    [CompilerGeneratedAttribute]
public SignalCommand get_SignalCommand();
}
public abstract class JetBrains.ReSharper.Feature.Services.Tree.TreeModeBrowserDescriptorWithPreview : TreeModelBrowserDescriptorPsi {
    public PreviewSupport PreviewSupport { get; }
    protected TreeModeBrowserDescriptorWithPreview(ISolution solution);
    public virtual IPreviewControl PreviewCreateControl(Lifetime lifetime);
    public virtual PreviewSupport get_PreviewSupport();
    public virtual void PreviewUpdate(IPreviewControl previewControl, TreeModelNode modelNode);
    protected virtual void ShowPreviewForEnvoy(ICodePanelPreviewControl panel, IOccurrence occurrence, IProjectFile projectFile, List`1<DocumentRange> documentRanges);
    private static IList`1<DocumentRange> GetSubtreeDocumentRanges(TreeModelNode modelNode);
    private static void FillMergedSubtreeDocumentRanges(IOccurrence occurrence, ICollection`1<DocumentRange> documentRanges);
    private static void FillSubtreeDocumentRanges(IOccurrence occurrence, ICollection`1<DocumentRange> documentRanges);
    public virtual bool Navigate(TreeModelNode node, PopupWindowContextSource windowContext, bool transferFocus, TabOptions options);
}
public abstract class JetBrains.ReSharper.Feature.Services.Tree.TreeModelBrowserDescriptorPsi : TreeModelBrowserDescriptor {
    private IIdentifierMatcher myMatcher;
    protected TreeModelBrowserDescriptorPsi(ISolution solution, IUIApplication uiApplication, IActionManager actionManager);
    public virtual bool Navigate(TreeModelNode node, PopupWindowContextSource windowContext, bool transferFocus, TabOptions options);
    protected virtual IIdentifierMatcher GetMatcher(string filter);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Tree.TreeModelBrowserDescriptorPsi/<GetQuickSearchHighlightings>d__4")]
public virtual IEnumerable`1<HighlightedRange> GetQuickSearchHighlightings(TreeModelNode modelNode, int column, string text, string quickSearchText);
    public virtual bool QuickSearchMatches(TreeModelNode modelNode, string quickSearchText);
}
public class JetBrains.ReSharper.Feature.Services.Tree.TreeModelBrowserPresenter : StructuredPresenter`2<TreeModelNode, IPresentableItem> {
    public static DeclaredElementPresenterStyle FullNestedStyle;
    public static DeclaredElementPresenterStyle KindExtensionsStyle;
    public static DeclaredElementPresenterStyle EnumMemberStyle;
    public static DeclaredElementPresenterStyle TypeMemberStyle;
    public static DeclaredElementPresenterStyle TypeMemberStyleWithContainer;
    public static DeclaredElementPresenterStyle TypeMemberStyleWithFqContainer;
    public static DeclaredElementPresenterStyle TypeElementUnderNaturalParent;
    public static DeclaredElementPresenterStyle TypeElementQualifyAfter;
    public static DeclaredElementPresenterStyle TypeElementQualifyBefore;
    public static TextStyle DefaultTextStyle;
    public static TextStyle BoldTextStyle;
    public static TextStyle OccurrenceCountTextStyle;
    public static TextStyle FrameworkTextStyle;
    private bool myShowOccurrenceCount;
    private DeclaredElementPresenterStyle myTypeElementStyle;
    private DeclaredElementPresenterStyle myTypeMemberStyleWithContainer;
    private DeclaredElementPresenterStyle myTypeMemberStyleWithFqContainer;
    [CompilerGeneratedAttribute]
private bool <DrawElementExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GrayInternalOrPrivate>k__BackingField;
    private static DeclaredElementPresenterStyle ourQualifiedNamePresenter;
    public bool PostfixTypeQualification { get; public set; }
    [ObsoleteAttribute("Using this property smells, it has chance to break presentation for other presenters")]
public bool PostfixMemberQualification { get; public set; }
    public bool DrawElementExtensions { get; public set; }
    public bool GrayInternalOrPrivate { get; public set; }
    public bool ShowOccurrenceCount { get; public set; }
    private static TreeModelBrowserPresenter();
    public bool get_PostfixTypeQualification();
    public void set_PostfixTypeQualification(bool value);
    public bool get_PostfixMemberQualification();
    public void set_PostfixMemberQualification(bool value);
    [CompilerGeneratedAttribute]
public bool get_DrawElementExtensions();
    [CompilerGeneratedAttribute]
public void set_DrawElementExtensions(bool value);
    [CompilerGeneratedAttribute]
public bool get_GrayInternalOrPrivate();
    [CompilerGeneratedAttribute]
public void set_GrayInternalOrPrivate(bool value);
    public virtual void UpdateItem(object value, TreeModelNode structureElement, IPresentableItem item, PresentationState state);
    private void UpdateItemWithReadlock(object value, TreeModelNode structureElement, IPresentableItem item, PresentationState state);
    protected virtual PsiLanguageType GetPresentationLanguage(IDeclaredElement value);
    protected static void MarkInvalid(RichText richText);
    protected bool IsNodeEqualToParent(TreeModelNode modelNode, object childValue);
    protected virtual bool IsNodeParentNatural(TreeModelNode modelNode, object childValue);
    protected virtual bool IsNaturalParent(object parentValue, object childValue);
    [CanBeNullAttribute]
protected virtual object Unwrap(object value);
    protected virtual void PresentProjectItemEnvoy(ProjectModelElementEnvoy value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    protected virtual void PresentExternalLibraries(ExternalLibrariesNodeValue value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    protected void PresentDeclaredElementEnvoy(IDeclaredElementEnvoy value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    protected virtual void PresentDeclaredElementInstance(DeclaredElementInstance value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    protected void PresentDeclaredElement(IDeclaredElement value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    protected virtual void PresentDeclaredElement(IDeclaredElement value, ISubstitution substitution, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    protected virtual void SetStyleForContainer(IPresentableItem item, TreeModelNode modelNode, DeclaredElementPresenterMarking marking, TreeModelBrowserStyles treeModelBrowserStyles);
    protected virtual void PresentObject(object value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    protected virtual void PresentSection(TreeSection value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    protected virtual void PresentSeparator(TreeSeparator value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    protected virtual void PresentModuleReference(IProjectToModuleReference value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    protected virtual void PresentAssemblyReference(IAssemblyToAssemblyReference value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    protected virtual void PresentAssembly(IAssembly value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    protected virtual void PresentProjectItem(IProjectItem value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    public static RichText GetPresentableProjectPath(IProjectItem projectItem, IProjectFolder relativeTo);
    protected virtual void PresentNamespace(INamespace value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    protected void PresentTypeElement(ITypeElement value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    protected virtual void PresentTypeElement(ITypeElement value, ISubstitution substitution, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    protected virtual bool IsParentNodeProjectItem(TreeModelNode modelNode);
    protected void PresentTypeMember(ITypeMember value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    protected virtual void PresentTypeMember(ITypeMember value, ISubstitution substitution, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    protected virtual void AddTypeMemberInfo(ITypeMember typeMember, IPresentableItem item, TreeModelNode modelNode);
    protected virtual DeclaredElementPresenterStyle GetTypeMemberStyle(ITypeMember typeMember, TreeModelNode modelNode);
    protected virtual void SetStyleForTypeRange(IPresentableItem item, TreeModelNode modelNode, DeclaredElementPresenterMarking marking, TreeModelBrowserStyles treeModelBrowserStyles);
    private void PresentParameter(IParameter value, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    private void MarkInternalOrPrivate(IAccessRightsOwner accessRightsOwner, IPresentableItem item, TreeModelBrowserStyles treeModelBrowserStyles);
    protected virtual void AppendMetadataToken(ICompiledElement compiledElement, IPresentableItem item);
    protected void PresentTypeOwner(ITypeOwner value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    protected virtual void PresentTypeOwner(ITypeOwner value, ISubstitution substitution, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    protected virtual void PresentSpecialElement(Pair`2<object, ISpecialElementFinder> value, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
    private static void AppendInitializer(RichText richText, IDeclaredElement value);
    protected virtual void HighlightDeclaredElement(IDeclaredElement declaredElement, PsiLanguageType languageType, IPresentableItem item, TreeModelNode modelNode, DeclaredElementPresenterMarking marking);
    public bool get_ShowOccurrenceCount();
    public void set_ShowOccurrenceCount(bool value);
    protected virtual void AppendOccurrencesCount(IPresentableItem item, TreeModelNode node);
    protected void AppendOccurrencesCount(IPresentableItem item, TreeModelNode node, string itemText);
    protected virtual void PresentFileSystemPath(VirtualFileSystemPath value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
    protected virtual void PresentFileSystemPath(FileSystemPath value, IPresentableItem item, TreeModelNode modelNode, PresentationState state);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Tree.TreeModelBrowserStyles : object {
    [CompilerGeneratedAttribute]
private TextStyle <AdditionalInfoTextStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private TextStyle <TypeTextStyle>k__BackingField;
    public TextStyle AdditionalInfoTextStyle { get; protected set; }
    public TextStyle TypeTextStyle { get; protected set; }
    public TreeModelBrowserStyles(Lifetime lifetime, ITheming theming);
    protected TreeModelBrowserStyles(Lifetime lifetime, ITheming theming, bool invalidateStylesOnThemeChange);
    [CompilerGeneratedAttribute]
public virtual TextStyle get_AdditionalInfoTextStyle();
    [CompilerGeneratedAttribute]
protected virtual void set_AdditionalInfoTextStyle(TextStyle value);
    [CompilerGeneratedAttribute]
public virtual TextStyle get_TypeTextStyle();
    [CompilerGeneratedAttribute]
protected virtual void set_TypeTextStyle(TextStyle value);
    public virtual void SetStyleForInternalOrPrivateNode(IPresentableItem item);
    private void InvalidateStyles(bool darkTheme);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_0(PropertyChangedEventArgs`1<bool> v);
}
[ShellComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Tree.TreeModelBrowserViewContext : object {
    [CompilerGeneratedAttribute]
private IUIApplication <UiApplication>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionBarManager <ActionBarManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ResultListManager <ResultListManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IWindowsHookManager <HookManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IFrameFocusHelper <FrameFocusHelper>k__BackingField;
    [NotNullAttribute]
public IUIApplication UiApplication { get; }
    [NotNullAttribute]
public IActionBarManager ActionBarManager { get; }
    [NotNullAttribute]
public ResultListManager ResultListManager { get; }
    [NotNullAttribute]
public IWindowsHookManager HookManager { get; }
    [NotNullAttribute]
public IFrameFocusHelper FrameFocusHelper { get; }
    public TreeModelBrowserViewContext(IUIApplication uiApplication, IActionBarManager actionBarManager, ResultListManager resultListManager, IWindowsHookManager hookManager, IFrameFocusHelper frameFocusHelper);
    [CompilerGeneratedAttribute]
public IUIApplication get_UiApplication();
    [CompilerGeneratedAttribute]
public IActionBarManager get_ActionBarManager();
    [CompilerGeneratedAttribute]
public ResultListManager get_ResultListManager();
    [CompilerGeneratedAttribute]
public IWindowsHookManager get_HookManager();
    [CompilerGeneratedAttribute]
public IFrameFocusHelper get_FrameFocusHelper();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Tree.TreeModelBrowserViewSolutionContext : object {
    [CompilerGeneratedAttribute]
private OccurrenceInformationManager <OccurrenceInformationManager>k__BackingField;
    [NotNullAttribute]
public OccurrenceInformationManager OccurrenceInformationManager { get; }
    public TreeModelBrowserViewSolutionContext(OccurrenceInformationManager occurrenceInformationManager);
    [CompilerGeneratedAttribute]
public OccurrenceInformationManager get_OccurrenceInformationManager();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Tree.TreeModelNodeVisibilityExtensions : object {
    [ExtensionAttribute]
public static void MakeGrayIfNotVisble(ITreeModelNodeVisibilityPresentor presentor, IPresentableItem item, TreeModelNode structureElement);
}
public class JetBrains.ReSharper.Feature.Services.Tree.TreePsiBrowser.TreeGridCachingPresenter : StructuredPresenter`2<TreeModelNode, IPresentableItem> {
    private StructuredPresenter`2<TreeModelNode, IPresentableItem> myPresenter;
    private Dictionary`2<CacheEntry, IPresentableItem> myCache;
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> Presenter { get; }
    public TreeGridCachingPresenter(StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter);
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> get_Presenter();
    public virtual void UpdateItem(object value, TreeModelNode structureElement, IPresentableItem item, PresentationState state);
    public void UpdateItems(Action onEachIteration);
    public void Invalidate(IEnumerable`1<TreeModelNode> invalidNodes);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Feature.Services.Tree.TreePsiBrowser.TreeModelBrowserDataRules : object {
    private IPsiServices myPsiServices;
    public TreeModelBrowserDataRules(IPsiServices psiServices, IActionManager actionManager, Lifetime lifetime);
    private static IProjectModelElement[] TreeModelNodesToProjectElements(IDataContext context);
    private ICollection`1<IDeclaredElement> TreeModelNodesToDeclaredElements(IDataContext context);
    private IDeclaredElement GetDeclaredElement(TreeModelNode modelNode);
    private static IProjectModelElement GetProjectModelElement(TreeModelNode modelNode);
}
public interface JetBrains.ReSharper.Feature.Services.TypeConversionHints.ITypeConversionHintsExclusionListMatcher {
    public abstract virtual bool Match(string operator);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.TypeConversionHints.TypeConversionHintAdornmentProvider : object {
    [NotNullAttribute]
private ISettingsStore mySettingsStore;
    [NotNullAttribute]
private TypeConversionHintsExclusionListStore myExclusionListStore;
    public TypeConversionHintAdornmentProvider(ISettingsStore settingsStore, TypeConversionHintsExclusionListStore exclusionListStore);
    public sealed virtual bool IsValid(IHighlighter highlighter);
    public sealed virtual IAdornmentDataModel CreateDataModel(IHighlighter highlighter);
}
public abstract class JetBrains.ReSharper.Feature.Services.TypeConversionHints.TypeConversionHintBulbActionsProvider`1 : object {
    public sealed virtual IEnumerable`1<IntentionAction> CreateChangeVisibilityActions(ISettingsStore settingsStore, IHighlighting highlighting, IAnchor anchor);
    public sealed virtual IEnumerable`1<BulbMenuItem> CreateChangeVisibilityBulbMenuItems(ISettingsStore settingsStore, IHighlighting highlighting);
    public abstract virtual string GetOptionsPageId();
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IntraTextAdornments")]
[DaemonTooltipProviderAttribute("")]
[InlayHintContextActionStyleAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "TypeConversionHints_Text", "True")]
public class JetBrains.ReSharper.Feature.Services.TypeConversionHints.TypeConversionHintContextActionHighlighting : object {
    private DocumentRange myRange;
    [CompilerGeneratedAttribute]
private IInlayHintBulbActionsProvider <BulbActionsProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDeclaredElementPointer`1<IConversionOperator>> <ConversionOperators>k__BackingField;
    [NotNullAttribute]
public IInlayHintBulbActionsProvider BulbActionsProvider { get; }
    [NotNullAttribute]
public IEnumerable`1<IDeclaredElementPointer`1<IConversionOperator>> ConversionOperators { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public string TestOutput { get; }
    public TypeConversionHintContextActionHighlighting(DocumentRange range, IInlayHintBulbActionsProvider bulbActionsProvider, ICSharpTypeConversionRule conversionRule, IEnumerable`1<IDeclaredElementPointer`1<IConversionOperator>> conversionOperators);
    public TypeConversionHintContextActionHighlighting(TypeConversionHintContextActionHighlighting another, DocumentRange range);
    [CompilerGeneratedAttribute]
public IInlayHintBulbActionsProvider get_BulbActionsProvider();
    [CompilerGeneratedAttribute]
public IEnumerable`1<IDeclaredElementPointer`1<IConversionOperator>> get_ConversionOperators();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual string get_TestOutput();
    private string Dump();
}
[InlayHintContextActionProviderAttribute("JetBrains.ProjectModel.KnownProjectFileType", "16")]
public class JetBrains.ReSharper.Feature.Services.TypeConversionHints.TypeConversionHintContextActionsProvider : InlayHintContextActionsProvider`1<TypeConversionHintContextActionHighlighting> {
    private ISettingsStore mySettingsStore;
    private TypeConversionHintsExclusionListStore myExclusionListStore;
    public TypeConversionHintContextActionsProvider(ISettingsStore settingsStore, TypeConversionHintsExclusionListStore exclusionListStore);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.TypeConversionHints.TypeConversionHintContextActionsProvider/<GetPerHighlightingActions>d__3")]
public virtual IEnumerable`1<IntentionAction> GetPerHighlightingActions(IEnumerable`1<IInlayHintContextActionHighlighting> highlightings, IAnchor configureAnchor, IAnchor configureParentAnchor);
    public virtual IEnumerable`1<IntentionAction> GetCommonActions(IEnumerable`1<IInlayHintContextActionHighlighting> highlightings, IAnchor configureAnchor);
    public virtual string GetOptionsPageId(IEnumerable`1<IInlayHintContextActionHighlighting> highlightings);
}
public class JetBrains.ReSharper.Feature.Services.TypeConversionHints.TypeConversionHintDataModel : object {
    [NotNullAttribute]
private ISettingsStore mySettingsStore;
    [NotNullAttribute]
private TypeConversionHintHighlighting myHighlighting;
    [CanBeNullAttribute]
private IEnumerable`1<BulbMenuItem> myContextMenuItems;
    [NotNullAttribute]
private IInlayHintBulbActionsProvider myBulbActionsProvider;
    [CanBeNullAttribute]
private IDeclaredElement myNavigationTargetElement;
    [NotNullAttribute]
private IInlayHintsExclusionListStore myExclusionListStore;
    [CompilerGeneratedAttribute]
private AdornmentData <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private IPresentableItem <ContextMenuTitle>k__BackingField;
    private bool myNavigationIsSelectable;
    public AdornmentData Data { get; }
    public IPresentableItem ContextMenuTitle { get; }
    [NotNullAttribute]
public IEnumerable`1<BulbMenuItem> ContextMenuItems { get; }
    public Nullable`1<TextRange> SelectionRange { get; }
    public TypeConversionHintDataModel(ISettingsStore settingsStore, TypeConversionHintHighlighting highlighting, IInlayHintBulbActionsProvider bulbActionsProvider, IInlayHintsExclusionListStore exclusionListStore);
    [CompilerGeneratedAttribute]
public sealed virtual AdornmentData get_Data();
    [CompilerGeneratedAttribute]
public sealed virtual IPresentableItem get_ContextMenuTitle();
    public sealed virtual IEnumerable`1<BulbMenuItem> get_ContextMenuItems();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.TypeConversionHints.TypeConversionHintDataModel/<CreateBulbMenuItems>d__16")]
[NotNullAttribute]
private IEnumerable`1<BulbMenuItem> CreateBulbMenuItems();
    public sealed virtual void ExecuteNavigation(PopupWindowContextSource popupWindowContextSource);
    private void ExecuteHiding(IConversionOperator conversionOperator);
    public sealed virtual Nullable`1<TextRange> get_SelectionRange();
    [CompilerGeneratedAttribute]
private IDeclaredElementPointer`1<IConversionOperator> <CreateBulbMenuItems>b__16_0(TypeConversionInfo i);
}
[DaemonAdornmentProviderAttribute("JetBrains.ReSharper.Feature.Services.TypeConversionHints.TypeConversionHintAdornmentProvider")]
[DaemonTooltipProviderAttribute("JetBrains.ReSharper.Feature.Services.InlayHints.InlayHintTooltipProvider")]
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IntraTextAdornments")]
public class JetBrains.ReSharper.Feature.Services.TypeConversionHints.TypeConversionHintHighlighting : object {
    private DocumentRange myRange;
    private ITypeConversionHintsExclusionListMatcher myExclusionListMatcher;
    public static double DefaultOrder;
    [CompilerGeneratedAttribute]
private Dictionary`2<TypeConversionInfo, string> <ConvertedExpressionsAsText>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<TypeConversionInfo> <ConversionsInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<TypeConversionInfo, IDeclaredElementPointer`1<IConversionOperator>> <DeclaredElementPointers>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private PushToHintMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private TextRange <SelectionRange>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeConversionRule <ConversionRule>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private IInlayHintBulbActionsProvider <BulbActionsProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <Icon>k__BackingField;
    public Dictionary`2<TypeConversionInfo, string> ConvertedExpressionsAsText { get; }
    public HashSet`1<TypeConversionInfo> ConversionsInfo { get; }
    public Dictionary`2<TypeConversionInfo, IDeclaredElementPointer`1<IConversionOperator>> DeclaredElementPointers { get; }
    public double Order { get; }
    public PushToHintMode Mode { get; }
    public TextRange SelectionRange { get; }
    public ITypeConversionRule ConversionRule { get; }
    public RichText Description { get; public set; }
    public RichText Text { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public IInlayHintBulbActionsProvider BulbActionsProvider { get; }
    public IconId Icon { get; }
    public string TestOutput { get; }
    public TypeConversionHintHighlighting(DocumentRange range, TextRange selectionRange, TypeConversionInfo conversionInfo, RichText text, PushToHintMode mode, IInlayHintBulbActionsProvider bulbActionsProvider, string convertedExpressionAsString, ITypeConversionRule conversionRule, RichText description, ITypeConversionHintsExclusionListMatcher exclusionListMatcher, IconId iconId, double order);
    [CompilerGeneratedAttribute]
public Dictionary`2<TypeConversionInfo, string> get_ConvertedExpressionsAsText();
    [CompilerGeneratedAttribute]
public HashSet`1<TypeConversionInfo> get_ConversionsInfo();
    [CompilerGeneratedAttribute]
public Dictionary`2<TypeConversionInfo, IDeclaredElementPointer`1<IConversionOperator>> get_DeclaredElementPointers();
    public void ClearContent();
    [CompilerGeneratedAttribute]
public double get_Order();
    [CompilerGeneratedAttribute]
public PushToHintMode get_Mode();
    [CompilerGeneratedAttribute]
public TextRange get_SelectionRange();
    [CompilerGeneratedAttribute]
public ITypeConversionRule get_ConversionRule();
    [CompilerGeneratedAttribute]
public sealed virtual RichText get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(RichText value);
    [CompilerGeneratedAttribute]
public RichText get_Text();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    [CompilerGeneratedAttribute]
public IInlayHintBulbActionsProvider get_BulbActionsProvider();
    public sealed virtual bool IsValid();
    [CompilerGeneratedAttribute]
public IconId get_Icon();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual string get_TestOutput();
    public void AddConversionInfo(TypeConversionInfo conversionInfo, string convertedExpressionAsText);
}
public class JetBrains.ReSharper.Feature.Services.TypeConversionHints.TypeConversionHintHighlightingContext`1 : object {
    [CompilerGeneratedAttribute]
private bool <ShowTypeConversionHintsOnlyForUserDefinedConversions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowTypeConversionHintsInSimplifiedMode>k__BackingField;
    [CompilerGeneratedAttribute]
private PushToHintMode <ShowTypeConversionHintsMode>k__BackingField;
    public bool ShowTypeConversionHintsOnlyForUserDefinedConversions { get; }
    public bool ShowTypeConversionHintsInSimplifiedMode { get; }
    public PushToHintMode ShowTypeConversionHintsMode { get; }
    protected TypeConversionHintHighlightingContext`1(IContextBoundSettingsStore context);
    [CompilerGeneratedAttribute]
public bool get_ShowTypeConversionHintsOnlyForUserDefinedConversions();
    [CompilerGeneratedAttribute]
public bool get_ShowTypeConversionHintsInSimplifiedMode();
    [CompilerGeneratedAttribute]
public PushToHintMode get_ShowTypeConversionHintsMode();
}
public static class JetBrains.ReSharper.Feature.Services.TypeConversionHints.TypeConversionHintsExclusionListMatcherUtil : object {
    public static Regex RegexPattern;
    private static TypeConversionHintsExclusionListMatcherUtil();
    [NotNullAttribute]
public static Predicate`1<string> CreatePredicate(string pattern);
    [CompilerGeneratedAttribute]
internal static Regex <CreatePredicate>g__CreateRegexByPattern|1_1(string pattern);
}
public abstract class JetBrains.ReSharper.Feature.Services.TypeConversionHints.TypeConversionHintsExclusionListStore : InlayHintsExclusionListStore {
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "ReSharper General Type Conversion Hints settings")]
public abstract class JetBrains.ReSharper.Feature.Services.TypeConversionHints.TypeConversionHintsOptions : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "VisibilityModeOfTypeConversionHintsSettingDescription")]
public PushToHintMode ShowTypeConversionHints;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToShowTypeConversionHintsForUserDefinedAndNonSystemConversionsOnlySettingDescription")]
public bool ShowOnlyUserDefinedConversions;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToShowIconsInsteadOfTypeConversionDetailsSettingDescription")]
public bool ShowHintsInSimplifiedMode;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "TypeConversionHintsExclusionListSettingDescription")]
public IIndexedEntry`2<Guid, string> ExclusionList;
}
public static class JetBrains.ReSharper.Feature.Services.TypeConversionHints.TypeConversionHintUtil : object {
    private static int MaxLengthOfSourceInTooltip;
    public static string CutExpressionForTooltip(string expression);
    public static bool IsHintAcceptableImplicitConversion(Conversion conversion);
    [CanBeNullAttribute]
public static string GetOperatorPresentableName(IConversionOperator conversionOperator);
    [CanBeNullAttribute]
public static string GetConversionPattern(TypeConversionInfo typeConversionInfo);
    [CanBeNullAttribute]
public static string GetConversionPattern(IConversionOperator conversionOperator);
    private static string CreateConversionPattern(string from, string to);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.TypeConversionHints.ZoneMarker : object {
}
public interface JetBrains.ReSharper.Feature.Services.TypeNameHints.ITypeNameHintHighlighting {
    public TypeNameHintKind Kind { get; }
    public abstract virtual TypeNameHintKind get_Kind();
}
public enum JetBrains.ReSharper.Feature.Services.TypeNameHints.MethodReturnTypeNameHintsJoinMode : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("Show hint for last invocation in sequence")]
public static MethodReturnTypeNameHintsJoinMode ShowHintForLastInvocation;
    [LocalizedDescriptionAttribute("Show hint for first invocation in sequence")]
public static MethodReturnTypeNameHintsJoinMode ShowHintForFirstInvocation;
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.TypeNameHints.TypeNameHintAdornmentProvider : object {
    private ISettingsStore mySettingsStore;
    public TypeNameHintAdornmentProvider(ISettingsStore settingsStore);
    public sealed virtual bool IsValid(IHighlighter highlighter);
    public sealed virtual IAdornmentDataModel CreateDataModel(IHighlighter highlighter);
}
public abstract class JetBrains.ReSharper.Feature.Services.TypeNameHints.TypeNameHintBulbActionsProvider`1 : object {
    public sealed virtual IEnumerable`1<IntentionAction> CreateChangeVisibilityActions(ISettingsStore settingsStore, IHighlighting highlighting, IAnchor anchor);
    public sealed virtual IEnumerable`1<BulbMenuItem> CreateChangeVisibilityBulbMenuItems(ISettingsStore settingsStore, IHighlighting highlighting);
    public abstract virtual string GetOptionsPageId();
    protected abstract virtual ValueTuple`2<Expression`1<Func`2<T, PushToHintMode>>, string> GetOptionData(TypeNameHintKind kind);
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IntraTextAdornments")]
[DaemonTooltipProviderAttribute("")]
[InlayHintContextActionStyleAttribute("JetBrains.ReSharper.Feature.Services.Resources.Strings", "TypeNameHints_Text", "True")]
public class JetBrains.ReSharper.Feature.Services.TypeNameHints.TypeNameHintContextActionHighlighting : object {
    [CompilerGeneratedAttribute]
private TypeNameHintKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private IInlayHintBulbActionsProvider <BulbActionsProvider>k__BackingField;
    private DocumentRange myRange;
    private string myAdditionalTestOutput;
    public TypeNameHintKind Kind { get; }
    public IInlayHintBulbActionsProvider BulbActionsProvider { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public string TestOutput { get; }
    public TypeNameHintContextActionHighlighting(DocumentRange range, TypeNameHintKind kind, IInlayHintBulbActionsProvider bulbActionsProvider, string additionalTestOutput);
    [CompilerGeneratedAttribute]
public TypeNameHintKind get_Kind();
    [CompilerGeneratedAttribute]
public IInlayHintBulbActionsProvider get_BulbActionsProvider();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual string get_TestOutput();
}
[InlayHintContextActionProviderAttribute("JetBrains.ProjectModel.KnownProjectFileType", "16")]
public class JetBrains.ReSharper.Feature.Services.TypeNameHints.TypeNameHintContextActionsProvider : InlayHintContextActionsProvider`1<TypeNameHintContextActionHighlighting> {
    private ISettingsStore mySettingsStore;
    public TypeNameHintContextActionsProvider(ISettingsStore settingsStore);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.TypeNameHints.TypeNameHintContextActionsProvider/<GetPerHighlightingActions>d__2")]
public virtual IEnumerable`1<IntentionAction> GetPerHighlightingActions(IEnumerable`1<IInlayHintContextActionHighlighting> highlightings, IAnchor configureAnchor, IAnchor configureParentAnchor);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.TypeNameHints.TypeNameHintContextActionsProvider/<GetCommonActions>d__3")]
public virtual IEnumerable`1<IntentionAction> GetCommonActions(IEnumerable`1<IInlayHintContextActionHighlighting> highlightings, IAnchor configureAnchor);
    public virtual string GetOptionsPageId(IEnumerable`1<IInlayHintContextActionHighlighting> highlightings);
}
public class JetBrains.ReSharper.Feature.Services.TypeNameHints.TypeNameHintDataModel : object {
    private ISettingsStore mySettingsStore;
    private TypeNameHintHighlighting myHighlighting;
    private IInlayHintBulbActionsProvider myBulbActionsProvider;
    private List`1<BulbMenuItem> myContextMenuItems;
    [CompilerGeneratedAttribute]
private AdornmentData <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private IPresentableItem <ContextMenuTitle>k__BackingField;
    public AdornmentData Data { get; }
    public IPresentableItem ContextMenuTitle { get; }
    public IEnumerable`1<BulbMenuItem> ContextMenuItems { get; }
    public Nullable`1<TextRange> SelectionRange { get; }
    public TypeNameHintDataModel(ISettingsStore settingsStore, TypeNameHintHighlighting highlighting, IInlayHintBulbActionsProvider bulbActionsProvider);
    [CompilerGeneratedAttribute]
public sealed virtual AdornmentData get_Data();
    [CompilerGeneratedAttribute]
public sealed virtual IPresentableItem get_ContextMenuTitle();
    public sealed virtual IEnumerable`1<BulbMenuItem> get_ContextMenuItems();
    private List`1<BulbMenuItem> CreateBulbMenuItems();
    public sealed virtual void ExecuteNavigation(PopupWindowContextSource popupWindowContextSource);
    public sealed virtual Nullable`1<TextRange> get_SelectionRange();
    [CompilerGeneratedAttribute]
private void <CreateBulbMenuItems>b__13_0();
}
[DaemonAdornmentProviderAttribute("JetBrains.ReSharper.Feature.Services.TypeNameHints.TypeNameHintAdornmentProvider")]
[DaemonTooltipProviderAttribute("JetBrains.ReSharper.Feature.Services.InlayHints.InlayHintTooltipProvider")]
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds/IntraTextAdornments")]
public class JetBrains.ReSharper.Feature.Services.TypeNameHints.TypeNameHintHighlighting : object {
    private PsiLanguageType myLanguageType;
    private IPsiServices myPsiServices;
    private DocumentRange myRange;
    private RichText myDescription;
    [CompilerGeneratedAttribute]
private ITypePointer <TypePointer>k__BackingField;
    [CompilerGeneratedAttribute]
private TextRange <SelectionRange>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeNameHintKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private PushToHintMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private IInlayHintBulbActionsProvider <BulbActionsProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <Icon>k__BackingField;
    public ITypePointer TypePointer { get; public set; }
    public TextRange SelectionRange { get; }
    public RichText Description { get; }
    public RichText Text { get; }
    public string ToolTip { get; }
    public TypeNameHintKind Kind { get; }
    public PushToHintMode Mode { get; }
    public IInlayHintBulbActionsProvider BulbActionsProvider { get; }
    public string ErrorStripeToolTip { get; }
    public IconId Icon { get; }
    public string TestOutput { get; }
    public TypeNameHintHighlighting(PsiLanguageType languageType, DocumentRange range, TextRange selectionRange, IType type, RichText text, TypeNameHintKind kind, PushToHintMode mode, IInlayHintBulbActionsProvider bulbActionsProvider);
    [CompilerGeneratedAttribute]
public ITypePointer get_TypePointer();
    [CompilerGeneratedAttribute]
public void set_TypePointer(ITypePointer value);
    [CompilerGeneratedAttribute]
public TextRange get_SelectionRange();
    public sealed virtual RichText get_Description();
    [CompilerGeneratedAttribute]
public RichText get_Text();
    public sealed virtual string get_ToolTip();
    [CompilerGeneratedAttribute]
public sealed virtual TypeNameHintKind get_Kind();
    [CompilerGeneratedAttribute]
public PushToHintMode get_Mode();
    [CompilerGeneratedAttribute]
public IInlayHintBulbActionsProvider get_BulbActionsProvider();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual bool IsValid();
    [CompilerGeneratedAttribute]
public IconId get_Icon();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual string get_TestOutput();
}
public abstract class JetBrains.ReSharper.Feature.Services.TypeNameHints.TypeNameHintHighlightingContext`1 : object {
    [CompilerGeneratedAttribute]
private bool <HideTypeNameHintsWhenTypeNameIsEvidentFromVariableName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCompactTypePresentation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideTypeNameHintsForImplicitlyTypedVariablesWhenTypeIsEvident>k__BackingField;
    [CompilerGeneratedAttribute]
private PushToHintMode <ShowTypeNameHintsForImplicitlyTypedVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideForLastInvocation>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodReturnTypeNameHintsJoinMode <ReturnTypeNameHintsJoinMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <JoinHintsForMethodsWithSameReturnTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideForSingleAndOneLineInvocations>k__BackingField;
    [CompilerGeneratedAttribute]
private PushToHintMode <ShowMethodReturnTypeNameHints>k__BackingField;
    public bool HideTypeNameHintsWhenTypeNameIsEvidentFromVariableName { get; }
    public bool UseCompactTypePresentation { get; }
    public bool HideTypeNameHintsForImplicitlyTypedVariablesWhenTypeIsEvident { get; }
    public PushToHintMode ShowTypeNameHintsForImplicitlyTypedVariables { get; }
    public bool HideForLastInvocation { get; }
    public MethodReturnTypeNameHintsJoinMode ReturnTypeNameHintsJoinMode { get; }
    public bool JoinHintsForMethodsWithSameReturnTypes { get; }
    public bool HideForSingleAndOneLineInvocations { get; }
    public PushToHintMode ShowMethodReturnTypeNameHints { get; }
    protected TypeNameHintHighlightingContext`1(IContextBoundSettingsStore settingsContext);
    [CompilerGeneratedAttribute]
public bool get_HideTypeNameHintsWhenTypeNameIsEvidentFromVariableName();
    [CompilerGeneratedAttribute]
public bool get_UseCompactTypePresentation();
    [CompilerGeneratedAttribute]
public bool get_HideTypeNameHintsForImplicitlyTypedVariablesWhenTypeIsEvident();
    [CompilerGeneratedAttribute]
public PushToHintMode get_ShowTypeNameHintsForImplicitlyTypedVariables();
    [CompilerGeneratedAttribute]
public bool get_HideForLastInvocation();
    [CompilerGeneratedAttribute]
public MethodReturnTypeNameHintsJoinMode get_ReturnTypeNameHintsJoinMode();
    [CompilerGeneratedAttribute]
public bool get_JoinHintsForMethodsWithSameReturnTypes();
    [CompilerGeneratedAttribute]
public bool get_HideForSingleAndOneLineInvocations();
    [CompilerGeneratedAttribute]
public PushToHintMode get_ShowMethodReturnTypeNameHints();
}
public enum JetBrains.ReSharper.Feature.Services.TypeNameHints.TypeNameHintKind : Enum {
    public int value__;
    public static TypeNameHintKind MethodReturnType;
    public static TypeNameHintKind ImplicitlyTypedVariable;
    public static TypeNameHintKind PatternMatchingExpression;
    public static TypeNameHintKind LambdaExpressionParameter;
    public static TypeNameHintKind LinqRangeVariable;
    public static TypeNameHintKind FunctionReturnType;
    public static TypeNameHintKind LambdaReturnType;
    public static TypeNameHintKind TargetTypedNewExpression;
}
public static class JetBrains.ReSharper.Feature.Services.TypeNameHints.TypeNameHintKindExtensions : object {
}
public class JetBrains.ReSharper.Feature.Services.TypeNameHints.TypeNameHintsMigration`1 : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.TypeNameHints.TypeNameHintsMigration`1/<GetEntriesToMigrate>d__0")]
public virtual IEnumerable`1<SettingsEntry> GetEntriesToMigrate(ISettingsSchema schema);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.TypeNameHints.TypeNameHintsMigration`1/<GetKeysToMigrate>d__1")]
public sealed virtual IEnumerable`1<SettingsKey> GetKeysToMigrate(ISettingsSchema schema);
    public virtual void Migrate(IContextBoundSettingsStoreImplementation store);
}
[ObsoleteAttribute]
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "ReSharperGeneralTypeNameHintsSettingsSettingDescription")]
public class JetBrains.ReSharper.Feature.Services.TypeNameHints.TypeNameHintsOptions : object {
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToShowMethodReturnTypeNameHintsSettingDescription")]
public bool ShowMethodReturnTypeNameHints;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToHideMethodReturnTypeNameHintsForSingleAndOneLineInvocationChainsSettingDescription")]
public bool HideForSingleAndOneLineInvocations;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToJoinHintsForSequencesOfMethodInvocationsWithTheSameReturnTypesSettingDescription")]
public bool JoinHintsForMethodsWithSameReturnTypes;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhichModeToUseToShowCombinedHintsSettingDescription")]
public MethodReturnTypeNameHintsJoinMode MethodReturnTypeNameHintsJoinMode;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToHideReturnTypeNameHintForTheLastInvocationWhenTheHintIsIrrelevantSettingDescription")]
public bool HideForLastInvocation;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToIncludePropertyFieldAndVariableAccessorsInTheInvocationChainSettingDescription")]
public bool IncludePropertyFieldAndVariableAccessorsInChain;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToShowTypeNameHintsForImplicitlyTypedVariablesSettingDescription")]
public bool ShowTypeNameHintsForImplicitlyTypedVariables;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToShowTypeNameHintsForImplicitlyTypedVariablesOnlyIfTheTypeIsEvidentSettingDescription")]
public bool HideTypeNameHintsForImplicitlyTypedVariablesWhenTypeIsEvident;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToShowTypeNameHintsForPatternMatchingExpressionsSettingDescription")]
public bool ShowTypeNameHintsForPatternMatchingExpressions;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToShowTypeNameHintsForLambdaExpressionParametersSettingDescription")]
public bool ShowTypeNameHintsForLambdaExpressionParameters;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToHideTypeNameHintsForLambdaExpressionParametersIfTheTypeIsEvidentSettingDescription")]
public bool HideTypeNameHintsForLambdaExpressionParametersWhenEvident;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToShowTypeNameHintsForQueryRangeVariablesInLINQQueriesSettingDescription")]
public bool ShowTypeNameHintsForLinqQueryRangeVariables;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToHideTypeNameHintIfTheTypeIsEvidentFromTheVariableNameSettingDescription")]
public bool HideTypeNameHintsWhenTypeNameIsEvidentFromVariableName;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToUseCompactTypeNamePresentationSettingDescription")]
public bool UseCompactTypeNamePresentation;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToShowTypeNameHintsForFunctionReturnTypesSettingDescription")]
public bool ShowTypeNameHintsForFunctionReturnTypes;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToShowTypeNameHintsForLambdaReturnTypesSettingDescription")]
public bool ShowTypeNameHintsForLambdaReturnTypes;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToShowTypeNameHintsInDependentCCodeSettingDescription")]
public bool ShowTypeNameHintsInDependentCode;
}
public abstract class JetBrains.ReSharper.Feature.Services.TypeNameHints.TypeNameHintsOptionsBase : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "VisibilityModeOfMethodReturnTypeNameHintsSettingDescription")]
public PushToHintMode ShowMethodReturnTypeNameHints;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToHideMethodReturnTypeNameHintsForSingleAndOneLineInvocationChainsSettingDescription")]
public bool HideForSingleAndOneLineInvocations;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToJoinHintsForSequencesOfMethodInvocationsWithTheSameReturnTypesSettingDescription")]
public bool JoinHintsForMethodsWithSameReturnTypes;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhichModeToUseToShowCombinedHintsSettingDescription")]
public MethodReturnTypeNameHintsJoinMode MethodReturnTypeNameHintsJoinMode;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToHideReturnTypeNameHintForTheLastInvocationWhenTheHintIsIrrelevantSettingDescription")]
public bool HideForLastInvocation;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "VisibilityModeOfTypeNameHintsForImplicitlyTypedVariablesSettingDescription")]
public PushToHintMode ShowTypeNameHintsForImplicitlyTypedVariables;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToShowTypeNameHintsForImplicitlyTypedVariablesOnlyIfTheTypeIsEvidentSettingDescription")]
public bool HideTypeNameHintsForImplicitlyTypedVariablesWhenTypeIsEvident;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToHideTypeNameHintIfTheTypeIsEvidentFromTheVariableNameSettingDescription")]
public bool HideTypeNameHintsWhenTypeNameIsEvidentFromVariableName;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Feature.Services.Resources.Strings", "WhetherToUseCompactTypeNamePresentationSettingDescription")]
public bool UseCompactTypeNamePresentation;
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.TypeNameHints.ZoneMarker : object {
}
public enum JetBrains.ReSharper.Feature.Services.TypeSuggestion.ConstnessOption : Enum {
    public int value__;
    public static ConstnessOption ConstOnly;
    public static ConstnessOption CanBeConst;
    public static ConstnessOption NoConst;
}
public static class JetBrains.ReSharper.Feature.Services.TypeSuggestion.DelegateTypeSuggestion : object {
    [NotNullAttribute]
public static IEnumerable`1<IType> TryCreate(IEnumerable`1<IParameter> parameters, IType returnType, ISubstitution substitution, ITreeNode context, bool isAsync);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.TypeSuggestion.DelegateTypeSuggestion/<FindStandardDelegateTypes>d__1")]
[PureAttribute]
[NotNullAttribute]
private static IEnumerable`1<IType> FindStandardDelegateTypes(IType[] typeArguments, bool useActionType, ITreeNode context);
}
public class JetBrains.ReSharper.Feature.Services.TypeSuggestion.ExpressionTypeSuggestion : object {
    [CompilerGeneratedAttribute]
private IList`1<IType> <PossibleTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private ConstnessOption <Constness>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitTypingOption <ImplicitTyping>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ImplicitTypingIsPreffered>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTargetTyped>k__BackingField;
    [NotNullAttribute]
public IList`1<IType> PossibleTypes { get; }
    public ConstnessOption Constness { get; }
    public ImplicitTypingOption ImplicitTyping { get; }
    public bool ImplicitTypingIsPreffered { get; }
    public bool IsTargetTyped { get; }
    [NotNullAttribute]
public IType DefaultType { get; }
    private ExpressionTypeSuggestion(IList`1<IType> possibleTypes, ConstnessOption constness, ImplicitTypingOption implicitTyping, bool implicitTypingIsPreffered, bool isTargetTyped);
    [CompilerGeneratedAttribute]
public IList`1<IType> get_PossibleTypes();
    [CompilerGeneratedAttribute]
public ConstnessOption get_Constness();
    [CompilerGeneratedAttribute]
public ImplicitTypingOption get_ImplicitTyping();
    [CompilerGeneratedAttribute]
public bool get_ImplicitTypingIsPreffered();
    [CompilerGeneratedAttribute]
public bool get_IsTargetTyped();
    public IType get_DefaultType();
    [NotNullAttribute]
[PureAttribute]
public ExpressionTypeSuggestion EnforceExplicitType();
    [NotNullAttribute]
[PureAttribute]
public ExpressionTypeSuggestion EnforceAnnotation(NullableAnnotation annotation, ICSharpTreeNode context);
    [NotNullAttribute]
[PureAttribute]
public ExpressionTypeSuggestion EraseNullableAnnotations();
    [NotNullAttribute]
[PureAttribute]
public static ExpressionTypeSuggestion Create(ITreeNode initializerExpression, IReadOnlyList`1<IExpression> expressions, ITreeNode context);
    [NotNullAttribute]
[PureAttribute]
public static ExpressionTypeSuggestion Create(IList`1<IType> possibleTypes, ITreeNode usageContext);
    public static IType GetOrSuggestIType(IExpression expression);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.TypeSuggestion.ExpressionTypeSuggestionService : object {
    [PureAttribute]
public virtual ImplicitTypingOption SuggestImplicitTypingOption(ITreeNode initializerNode);
    [PureAttribute]
public virtual bool IsTargetTyped(ITreeNode initializerNode);
    [PureAttribute]
public virtual bool SuggestImplicitTypingPrefference(ITreeNode initializerNode, IType defaultSuggestedType);
    [NotNullAttribute]
[PureAttribute]
public virtual IList`1<IType> SuggestPossibleTypes(ITreeNode initializerNode, IReadOnlyList`1<IExpression> expressions, ConstnessOption& constKind);
    [NotNullAttribute]
[PureAttribute]
protected IList`1<IType> ComputePossibleTypes(ITreeNode initializerNode, IReadOnlyList`1<IExpression> expressions, ITypeConversionRule conversionRule, ConstnessOption& constKind, Func`2<IExpression, IExpressionType> calculateExpressionType);
    [NotNullAttribute]
protected static IEnumerable`1<IExpressionType> ExpandMultitypes(IExpressionType type);
    [NotNullAttribute]
public virtual IList`1<IType> SuggestITypeForExpressionType(IExpression expression);
}
public enum JetBrains.ReSharper.Feature.Services.TypeSuggestion.ImplicitTypingOption : Enum {
    public int value__;
    public static ImplicitTypingOption ImplicitOnly;
    public static ImplicitTypingOption CanBeImplicit;
    public static ImplicitTypingOption ExplicitOnly;
}
internal class JetBrains.ReSharper.Feature.Services.TypingActionInfo.TypingActionData : UserDataHolder {
    [NotNullAttribute]
public string ActionName;
    [CanBeNullAttribute]
public object ExtraData;
    [NotNullAttribute]
public static Key`1<TypingActionData> PreviousActionKey;
    [NotNullAttribute]
public static Key`1<TypingActionData> CurrentActionKey;
    public TypingActionData(string actionName, object extraData);
    private static TypingActionData();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Feature.Services.TypingAssist.ActionContext : object {
    [NotNullAttribute]
private DelegateExecute myHandler;
    [NotNullAttribute]
private Lazy`1<EnsureWritableResult> myLazyModificationCookie;
    [CompilerGeneratedAttribute]
private IDataContext <DataContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActionId>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextControl <TextControl>k__BackingField;
    public IDataContext DataContext { get; }
    public string ActionId { get; }
    public ITextControl TextControl { get; }
    public ActionContext(Lifetime lifetime, string actionId, ITextControl textControl, DelegateExecute handler, IDataContext dataContext);
    [CompilerGeneratedAttribute]
public sealed virtual IDataContext get_DataContext();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ActionId();
    [CompilerGeneratedAttribute]
public sealed virtual ITextControl get_TextControl();
    public sealed virtual void CallNext();
    public sealed virtual EnsureWritableResult EnsureWritable();
}
public abstract class JetBrains.ReSharper.Feature.Services.TypingAssist.BracketMatcher : object {
    [NotNullAttribute]
private Pair`2[] myBrackets;
    [NotNullAttribute]
private Dictionary`2<TokenNodeType, int> myDirection;
    [NotNullAttribute]
private Stack`1<TokenNodeType> myStack;
    protected BracketMatcher(Pair`2[] brackets);
    [PureAttribute]
public int Direction(TokenNodeType type);
    public bool FindMatchingBracket(CachingLexer cachingLexer);
    public bool FindMatchingBracket(CachingLexer cachingLexer, Int32& pos);
    [PureAttribute]
public bool IsStackEmpty();
    public bool ProceedStack(TokenNodeType tokenType, bool failIfRightOnEmpty);
    private bool TryCollapse(TokenNodeType tokenType, TokenNodeType peekedTokenType);
}
public class JetBrains.ReSharper.Feature.Services.TypingAssist.GenericBracketMatcher : BracketMatcher {
    public GenericBracketMatcher(Pair`2[] brackets);
}
public interface JetBrains.ReSharper.Feature.Services.TypingAssist.IActionContext {
    public string ActionId { get; }
    public IDataContext DataContext { get; }
    public abstract virtual string get_ActionId();
    public abstract virtual IDataContext get_DataContext();
}
public class JetBrains.ReSharper.Feature.Services.TypingAssist.IndentTypingHelper`1 : object {
    private TypingAssistLanguageBase`1<TLanguage> myAssist;
    public IndentTypingHelper`1(TypingAssistLanguageBase`1<TLanguage> assist);
    public virtual bool ShouldKeepPreviousIndent(TokenNodeType tokenNodeType);
    public virtual bool DoNotIndent(TokenNodeType tokenNodeType);
    protected virtual bool ShouldUseExtraStub(TokenNodeType tokenNodeType);
    protected virtual string GetExtraStub(CachingLexer lexer, DocOffset offset, ITextControl textControl);
    protected virtual void ModifySettings(Lifetime lifetime);
    public bool DoSmartIndentOnEnterImpl(ITextControl textControl);
    protected virtual bool ProcessSmartIndentOnEnter(ITextControl textControl, bool newLineEncountered, CachingLexer lexer, Int32& offset1, Int32& virtualOffset1);
}
public interface JetBrains.ReSharper.Feature.Services.TypingAssist.ISecondaryTypingAssist {
}
public interface JetBrains.ReSharper.Feature.Services.TypingAssist.ISecondaryTypingAssistWithBraces {
    public abstract virtual Pair`2<ITreeRange, ITreeRangePointer> GetRangeToFormatAfterRBrace(ITextControl textControl);
}
public interface JetBrains.ReSharper.Feature.Services.TypingAssist.ITypingAssistManager {
    public abstract virtual void AddTypingHandler(Lifetime lifetime, char ch, ITypingHandler typingHandler, Func`2<ITypingContext, bool> action, Predicate`1<ITypingContext> checker);
    public abstract virtual void AddActionHandler(Lifetime lifetime, string actionId, ITypingHandler typingHandler, Func`2<IActionContext, bool> action, Predicate`1<IActionContext> checker, ActionHandlerPriority priority);
}
public interface JetBrains.ReSharper.Feature.Services.TypingAssist.ITypingContextWithOptionalLastHandlerSubstitution {
    public abstract virtual void SubstituteLastHandler(Action`1<ITypingContext> handler);
}
public interface JetBrains.ReSharper.Feature.Services.TypingAssist.ITypingHandler {
    public abstract virtual bool QuickCheckAvailability(ITextControl textControl, IPsiSourceFile psiSourceFile);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.TypingAssist.LastTypingAction : object {
    public static string SelectionChangedWithUserNavigationAction;
    [NotNullAttribute]
private DocumentManager myDocumentManager;
    [NotNullAttribute]
private ILogger myLogger;
    public LastTypingAction(Lifetime lifetime, ITextControlManager textControlManager, ITypingAssistManager typingAssistManager, TextControlTypingHandlers textControlTypingHandlers, DocumentManager documentManager, ChangeManager changeManager, ILogger logger);
    private bool HandleUserNavigation(IActionContext actionContext);
    private void SubscribeTextControlSelectionChange(Lifetime lifetime, ITextControl textControl);
    private void OnDocumentChange(ChangeEventArgs args);
    private void HandleTyping(ITypingContext typingContext);
    [PureAttribute]
public bool IsPreviousTypingAction(IDocument document, string actionName);
    [PureAttribute]
public Nullable`1<ValueTuple`2<string, object>> GetPreviousTypingAction(IDocument document);
    [PureAttribute]
public Nullable`1<ValueTuple`2<string, object>> GetCurrentTypingAction(IDocument document);
    public void ClearCurrentTypingAction(IDocument document);
    public void SetLastTypingAction(IDocument document, string actionName, object extraData);
}
public class JetBrains.ReSharper.Feature.Services.TypingAssist.LatencyDistributionRecord : object {
    [CompilerGeneratedAttribute]
private LatencyDistributionRecordKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private LatencyRecord <TotalLatency>k__BackingField;
    private IDictionary`2<string, LatencyRecord> myActionLatencyRecords;
    public LatencyDistributionRecordKey Key { get; public set; }
    public LatencyRecord TotalLatency { get; public set; }
    public LatencyDistributionRecord(LatencyDistributionRecordKey key);
    [CompilerGeneratedAttribute]
public LatencyDistributionRecordKey get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(LatencyDistributionRecordKey value);
    [CompilerGeneratedAttribute]
public LatencyRecord get_TotalLatency();
    [CompilerGeneratedAttribute]
public void set_TotalLatency(LatencyRecord value);
    public void Update(string action, int latencyInMs);
}
public class JetBrains.ReSharper.Feature.Services.TypingAssist.LatencyDistributionRecordKey : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <details>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Name { get; public set; }
    public string details { get; public set; }
    public LatencyDistributionRecordKey(string Name, string details);
    [CompilerGeneratedAttribute]
protected LatencyDistributionRecordKey(LatencyDistributionRecordKey original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_details();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_details(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(LatencyDistributionRecordKey left, LatencyDistributionRecordKey right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(LatencyDistributionRecordKey left, LatencyDistributionRecordKey right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(LatencyDistributionRecordKey other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual LatencyDistributionRecordKey <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Name, String& details);
}
public class JetBrains.ReSharper.Feature.Services.TypingAssist.LatencyRecord : object {
    [CompilerGeneratedAttribute]
private long <TotalLatency>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxLatency>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <Samples>k__BackingField;
    private bool myIsSamplesSorted;
    public long TotalLatency { get; private set; }
    public int MaxLatency { get; private set; }
    private List`1<int> Samples { get; }
    public long AverageLatency { get; }
    [CompilerGeneratedAttribute]
public long get_TotalLatency();
    [CompilerGeneratedAttribute]
private void set_TotalLatency(long value);
    [CompilerGeneratedAttribute]
public int get_MaxLatency();
    [CompilerGeneratedAttribute]
private void set_MaxLatency(int value);
    [CompilerGeneratedAttribute]
private List`1<int> get_Samples();
    public long get_AverageLatency();
    public void Update(int latencyInMs);
    public int Percentile(int n);
}
public class JetBrains.ReSharper.Feature.Services.TypingAssist.PairedTags.RestoreChangedTagEscapeHandler : EscapeActionHandlerBase {
    private Key`1<TagMarkers> myDataKey;
    private IEnsureWritableHandler myEnsureWritableHandler;
    private DocumentManager myDocumentManager;
    private ICommandProcessor myCommandProcessor;
    public RestoreChangedTagEscapeHandler(Key`1<TagMarkers> dataKey, IEnsureWritableHandler ensureWritableHandler, DocumentManager documentManager, ICommandProcessor commandProcessor, IActionManager actionManager);
    protected virtual bool IsAvailable(IDataContext dataContext);
    protected virtual void Execute(IDataContext dataContext);
}
public class JetBrains.ReSharper.Feature.Services.TypingAssist.PairedTags.TagMarkers : object {
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChangedTagName>k__BackingField;
    [CompilerGeneratedAttribute]
private IRangeMarker <FirstTagNameRange>k__BackingField;
    [CompilerGeneratedAttribute]
private IRangeMarker <SecondTagNameRange>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ChangeTrackerCancelled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FirstTagIsHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CaretPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsProcessingCommand>k__BackingField;
    public string TagName { get; public set; }
    public string ChangedTagName { get; public set; }
    public IRangeMarker FirstTagNameRange { get; public set; }
    public IRangeMarker SecondTagNameRange { get; public set; }
    public bool ChangeTrackerCancelled { get; public set; }
    public bool FirstTagIsHeader { get; public set; }
    public int CaretPosition { get; public set; }
    public bool IsProcessingCommand { get; public set; }
    public TagMarkers(string tagName, IRangeMarker firstTagNameRange, IRangeMarker secondTagNameRange, bool changeTrackerCancelled, bool firstTagIsHeader);
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
public void set_TagName(string value);
    [CompilerGeneratedAttribute]
public string get_ChangedTagName();
    [CompilerGeneratedAttribute]
public void set_ChangedTagName(string value);
    [CompilerGeneratedAttribute]
public IRangeMarker get_FirstTagNameRange();
    [CompilerGeneratedAttribute]
public void set_FirstTagNameRange(IRangeMarker value);
    [CompilerGeneratedAttribute]
public IRangeMarker get_SecondTagNameRange();
    [CompilerGeneratedAttribute]
public void set_SecondTagNameRange(IRangeMarker value);
    [CompilerGeneratedAttribute]
public bool get_ChangeTrackerCancelled();
    [CompilerGeneratedAttribute]
public void set_ChangeTrackerCancelled(bool value);
    [CompilerGeneratedAttribute]
public bool get_FirstTagIsHeader();
    [CompilerGeneratedAttribute]
public void set_FirstTagIsHeader(bool value);
    [CompilerGeneratedAttribute]
public int get_CaretPosition();
    [CompilerGeneratedAttribute]
public void set_CaretPosition(int value);
    [CompilerGeneratedAttribute]
public bool get_IsProcessingCommand();
    [CompilerGeneratedAttribute]
public void set_IsProcessingCommand(bool value);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.TypingAssist.SkippingTypingAssist : object {
    [NotNullAttribute]
private static Key`1<String[]> ourStringsToSkipKey;
    [NotNullAttribute]
private DocumentManager myDocumentManager;
    public SkippingTypingAssist(Lifetime lifetime, ITextControlManager textControlManager, TextControlTypingHandlers textControlTypingHandlers, DocumentManager documentManager, ChangeManager changeManager);
    private static SkippingTypingAssist();
    private static void SubscribeTextControlSelectionChange(Lifetime lifetime, ITextControl textControl);
    private void OnDocumentChange(ChangeEventArgs args);
    private void HandleTyping(ITypingContext typingContext);
    [PureAttribute]
public bool ShouldSkip(IDocument document, char typedChar);
    public static bool HandleCharTyped(IDocument document, char typedChar);
    public static void SetCharsToSkip(IDocument document, string charsToSkip);
    public static void SetStringsToSkip(IDocument document, String[] stringsToSkip);
}
public abstract class JetBrains.ReSharper.Feature.Services.TypingAssist.TypingAssistBase : object {
    public static string SmartBackspaceCommandID;
    public static string SmartDeleteCommandID;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingsStore <SettingsStore>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommandProcessor <CommandProcessor>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiServices <PsiServices>k__BackingField;
    [NotNullAttribute]
private CachingLexerService myCachingLexerService;
    [NotNullAttribute]
private IExternalIntellisenseHost myExternalIntellisenseHost;
    [NotNullAttribute]
protected SkippingTypingAssist SkippingTypingAssist;
    [NotNullAttribute]
protected LastTypingAction LastTypingAction;
    [NotNullAttribute]
protected StructuralRemoveManager StructuralRemoveManager;
    [NotNullAttribute]
public ILogger Logger;
    [NotNullAttribute]
public ISolution Solution { get; }
    [NotNullAttribute]
public ISettingsStore SettingsStore { get; }
    [NotNullAttribute]
public ICommandProcessor CommandProcessor { get; }
    [NotNullAttribute]
public IPsiServices PsiServices { get; }
    protected TypingAssistBase(TypingAssistDependencies dependencies);
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    [CompilerGeneratedAttribute]
public ISettingsStore get_SettingsStore();
    [CompilerGeneratedAttribute]
public ICommandProcessor get_CommandProcessor();
    [CompilerGeneratedAttribute]
public IPsiServices get_PsiServices();
    public TEntry GetTypingAssistOption(ITextControl textControl, Expression`1<Func`2<TSettings, TEntry>> expression);
    [NotNullAttribute]
public IEnableTypingAssistFeatures EnabledFeatures();
    protected TEntry GetTypingAssistOption(ITextControl textControl, Expression`1<Func`2<TypingAssistSettings, TEntry>> expression);
    [PureAttribute]
public virtual int TextControlToLexer(ITextControl textControl, DocOffset offset);
    [PureAttribute]
public virtual DocOffset LexerToTextControl(ITextControl textControl, int offset);
    public virtual bool IsTypingAssistAvailable(ITextControl textControl);
    protected bool IsIntellisenseSupported(ITextControl textControl);
    protected bool IsNoExternalCompletionActive(ITextControl textControl);
    protected virtual bool AllowCpuIntensiveAssists(ITextControl textControl);
    public bool CheckAllowCpuIntensiveAssists(ITextControl textControl);
    [CanBeNullAttribute]
public virtual CachingLexer GetCachingLexer(ITextControl textControl);
    protected string GetNewLineText(IPsiSourceFile psiSourceFile);
    public static int CalcVirtualOffset(string indent, FormatSettingsKeyBase settings);
    public void CalcVirtualOffsetFromIndent(ITextControl textControl, ICodeFormatter codeFormatter, int indentPos, Int32& caretOffset, Int32& virtualOffset, Int32& deleteFrom);
    [CanBeNullAttribute]
public ICodeFormatter GetMainCodeFormatter(ITextControl textControl);
    public bool DoActionAndConvertIndentToVirtual(ITextControl textControl, ICodeFormatter codeFormatter, Func`1<int> doAction);
    [CanBeNullAttribute]
protected virtual string GetIndentBeforeToken(ITextControl textControl, CachingLexer lexer);
    [NotNullAttribute]
protected virtual string GetLineTextBeforeOffset(ITextControl textControl, int lexerOffset);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.TypingAssist.TypingAssistDependencies : object {
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingsStore <SettingsStore>k__BackingField;
    [CompilerGeneratedAttribute]
private CachingLexerService <CachingLexerService>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommandProcessor <CommandProcessor>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiServices <PsiServices>k__BackingField;
    [CompilerGeneratedAttribute]
private IExternalIntellisenseHost <ExternalIntellisenseHost>k__BackingField;
    [CompilerGeneratedAttribute]
private SkippingTypingAssist <SkippingTypingAssist>k__BackingField;
    [CompilerGeneratedAttribute]
private LastTypingAction <LastTypingAction>k__BackingField;
    [CompilerGeneratedAttribute]
private StructuralRemoveManager <StructuralRemoveManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypingAssistManager <TypingAssistManager>k__BackingField;
    [NotNullAttribute]
public ISolution Solution { get; }
    [NotNullAttribute]
public ISettingsStore SettingsStore { get; }
    [NotNullAttribute]
public CachingLexerService CachingLexerService { get; }
    [NotNullAttribute]
public ICommandProcessor CommandProcessor { get; }
    [NotNullAttribute]
public IPsiServices PsiServices { get; }
    [NotNullAttribute]
public IExternalIntellisenseHost ExternalIntellisenseHost { get; }
    [NotNullAttribute]
public SkippingTypingAssist SkippingTypingAssist { get; }
    [NotNullAttribute]
public LastTypingAction LastTypingAction { get; }
    [NotNullAttribute]
public StructuralRemoveManager StructuralRemoveManager { get; }
    [NotNullAttribute]
public ILogger Logger { get; }
    [NotNullAttribute]
public ITypingAssistManager TypingAssistManager { get; }
    public TypingAssistDependencies(ISolution solution, ISettingsStore settingsStore, CachingLexerService cachingLexerService, ICommandProcessor commandProcessor, IPsiServices psiServices, IExternalIntellisenseHost externalIntellisenseHost, SkippingTypingAssist skippingTypingAssist, LastTypingAction lastTypingAction, StructuralRemoveManager structuralRemoveManager, ILogger logger, ITypingAssistManager typingAssistManager);
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    [CompilerGeneratedAttribute]
public ISettingsStore get_SettingsStore();
    [CompilerGeneratedAttribute]
public CachingLexerService get_CachingLexerService();
    [CompilerGeneratedAttribute]
public ICommandProcessor get_CommandProcessor();
    [CompilerGeneratedAttribute]
public IPsiServices get_PsiServices();
    [CompilerGeneratedAttribute]
public IExternalIntellisenseHost get_ExternalIntellisenseHost();
    [CompilerGeneratedAttribute]
public SkippingTypingAssist get_SkippingTypingAssist();
    [CompilerGeneratedAttribute]
public LastTypingAction get_LastTypingAction();
    [CompilerGeneratedAttribute]
public StructuralRemoveManager get_StructuralRemoveManager();
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public ITypingAssistManager get_TypingAssistManager();
}
public abstract class JetBrains.ReSharper.Feature.Services.TypingAssist.TypingAssistForCLikeLanguage`1 : TypingAssistLanguageBase`1<TLanguage> {
    protected static string DotAccessSkippingParenthesisTypingAssist;
    protected static string DotPatternColonReplacementAssist;
    public static string BlockCommentEnd;
    public static string BlockDocCommentStart;
    public static string BlockCommentStart;
    protected TokenNodeType LBRACE { get; }
    protected TokenNodeType RBRACE { get; }
    protected TokenNodeType LBRACKET { get; }
    protected TokenNodeType RBRACKET { get; }
    protected TokenNodeType LPARENTH { get; }
    protected TokenNodeType RPARENTH { get; }
    protected TokenNodeType WHITE_SPACE { get; }
    protected TokenNodeType NEW_LINE { get; }
    protected TokenNodeType END_OF_LINE_COMMENT { get; }
    protected TokenNodeType C_STYLE_COMMENT { get; }
    protected TokenNodeType PLUS { get; }
    protected TokenNodeType SEMICOLON { get; }
    protected TokenNodeType DOT { get; }
    protected NodeTypeSet STRING_LITERALS { get; }
    protected NodeTypeSet ACCESS_CHAIN_TOKENS { get; }
    protected TypingAssistForCLikeLanguage`1(TypingAssistDependencies dependencies);
    protected abstract virtual TokenNodeType get_LBRACE();
    protected abstract virtual TokenNodeType get_RBRACE();
    protected abstract virtual TokenNodeType get_LBRACKET();
    protected abstract virtual TokenNodeType get_RBRACKET();
    protected abstract virtual TokenNodeType get_LPARENTH();
    protected abstract virtual TokenNodeType get_RPARENTH();
    protected abstract virtual TokenNodeType get_WHITE_SPACE();
    protected abstract virtual TokenNodeType get_NEW_LINE();
    protected abstract virtual TokenNodeType get_END_OF_LINE_COMMENT();
    protected abstract virtual TokenNodeType get_C_STYLE_COMMENT();
    protected abstract virtual TokenNodeType get_PLUS();
    protected abstract virtual TokenNodeType get_SEMICOLON();
    protected abstract virtual TokenNodeType get_DOT();
    protected abstract virtual NodeTypeSet get_STRING_LITERALS();
    protected abstract virtual NodeTypeSet get_ACCESS_CHAIN_TOKENS();
    [CanBeNullAttribute]
protected ITreeRange FormatIfTypesMatch(ITreeNode node, Func`2<TNode, ITreeNode> getLBrace, Func`2<TNode, ITreeNode> getRBrace, Func`2<TNode, ITreeNode> getWhatToFormat);
    protected abstract virtual bool IsLBrace(ITextControl textControl, ITreeNode node);
    protected abstract virtual bool IsRBrace(ITextControl textControl, ITreeNode node);
    protected abstract virtual bool IsSemicolon(ITextControl textControl, ITreeNode node);
    protected void DoFormatStatementOnSemicolon(ITextControl textControl);
    protected virtual IDisposable ModifyFormatterSettingsForAutoformatOnSemicolon();
    protected virtual void ApplyCodeStyleBeforeFormattingOnSemicolon(ITreeNode tokenNode);
    protected virtual void InsertLeftBrace(ITypingContext typingContext);
    protected virtual bool NeedSkipCloseBracket(ITextControl textControl, CachingLexer lexer, char charTyped);
    protected virtual bool IsTypingSmartLBraceHandlerAvailable(ITypingContext context);
    protected virtual bool HandleLeftBraceTyped(ITypingContext typingContext);
    private bool HandleSurroundWithBraces(ITypingContext typingContext);
    private bool HandleSurroundWithParenth(ITypingContext typingContext);
    protected bool HandleSurroundTyping(ITypingContext typingContext, char lChar, char rChar, TokenNodeType lTokenType, TokenNodeType rTokenType);
    protected bool HandleRightBracketTyped(ITypingContext typingContext);
    protected abstract virtual bool IsLBrace(ITextControl textControl, CachingLexer lexer);
    protected void MoveRBrace(ITextControl textControl, DocumentOffset documentOffsetForRBrace, int lBracePos, IDocument document, string rBraceText);
    protected virtual bool IsCustomLParenth(ITextControl textControl, CachingLexer lexer);
    protected virtual bool IsCustomTokenSuitableForCloseParenth(TokenNodeType nextTokenType, ITextControl textControl, CachingLexer lexer);
    protected abstract virtual bool IsTokenSuitableForCloseBracket(TokenNodeType nextTokenType);
    protected bool HandleLeftBracketOrParenthTyped(ITypingContext typingContext);
    protected virtual bool ShouldSkipToken(CachingLexer lexer);
    protected abstract virtual bool IsRBrace(ITextControl textControl, CachingLexer lexer);
    protected bool CheckSpecialRightBraceCase(ITextControl textControl, Int32& pos);
    private bool FormatAfterStringSplitted(ITextControl textControl, int charPos, string textInserted);
    protected virtual bool IsNewLineToken(CachingLexer lexer);
    protected virtual DeleteNewLineInfo<TLanguage> DeleteOrBackspaceNewLineChecker(CachingLexer lexer, TextRange range, int lineBreakPosition);
    protected bool DoHandleDelPressed(ITextControl textControl);
    [NotNullAttribute]
protected abstract virtual BracketMatcher CreateBracketMatcher();
    protected bool DoHandleBackspacePressed(ITextControl textControl);
    [PureAttribute]
protected virtual bool IsStringLiteralToken(TokenNodeType tokenType);
    protected virtual int VerbatimOffset(TokenNodeType tokenType);
    [PureAttribute]
protected virtual ValueTuple`2<string, string> GetRegularStringLiteralOwnerBorders(CachingLexer lexer);
    [PureAttribute]
protected virtual ValueTuple`2<string, string> GetCurrentStringLiteralBorders(CachingLexer lexer);
    protected virtual int GetValidSplitOffset(IDocument document, string str, CachingLexer lexer, int offset);
    protected bool DoHandleEnterInStringPressed(ITextControl textControl);
    protected bool SkipToStringLiteral(CachingLexer lexer, int delta);
    protected virtual bool DoHandleDeletingPlus(ITextControl textControl, int charPos, bool backspace);
    protected bool DoHandleDelOnStringsConcat(ITextControl textControl);
    protected bool DoHandleBackspaceOnStringsConcat(ITextControl textControl);
    protected abstract virtual bool GetPreferWrapBeforeOpSignSetting(IContextBoundSettingsStore settingsStore);
    protected virtual bool FindMatchingBrace(ITextControl textControl, CachingLexer lexer, Int32& rBracePos);
    protected virtual bool FindNodesForBraces(ITextControl textControl, IFile file, int lBracePos, int rBracePos, ITokenNode& lBraceNode, ITokenNode& rBraceNode, TreeOffset& lBraceTreePos, TreeOffset& rBraceTreePos);
    protected virtual bool TryReparseAndFormatOnEnterAfterNonCLBrace(ITextControl textControl, IFile file, int lBracePos, int rBracePos);
    protected virtual bool TryReparseAndFormatOnEnterBeforeNonCRBrace(ITextControl textControl, IFile file, int lBracePos, int rBracePos);
    protected abstract virtual bool DoReformatForSmartEnter(ITextControl textControl, TreeOffset lBraceTreePos, TreeOffset rBraceTreePos, int charPos, ITokenNode lBraceNode, ITokenNode rBraceNode, bool afterLBrace, IFile file, bool oneLine);
    protected bool DoHandleEnterAfterLBracePressed(ITextControl textControl);
    protected bool DoHandleEnterBeforeRBracePressed(ITextControl textControl);
    protected abstract virtual bool IsNodeSuitableAsSemicolonFormatParent(ITreeNode node);
    [CanBeNullAttribute]
protected abstract virtual ITreeNode GetParentForFormatOnSemicolon(ITreeNode node);
    protected bool HandleSemicolonTyped(ITypingContext typingContext);
    protected virtual NodeTypeSet GetQuoteCorrespondingTokenType(char c);
    protected abstract virtual bool CheckThatCLikeLineEndsInOpenStringLiteral(ITextControl textControl, CachingLexer lexer, int lineEndPos, char c, NodeTypeSet correspondingTokenType, bool isStringWithAt, Int32& charPos, bool defaultReturnValue);
    protected abstract virtual bool IsNextCharDoesNotStartNewLiteral(ITypingContext typingContext, CachingLexer lexer, int charPos, IBuffer buffer);
    protected abstract virtual bool IsStopperTokenForStringLiteral(TokenNodeType tokenType);
    protected bool HandleQuoteTyped(ITypingContext typingContext);
    protected virtual bool CheckThatLexerInInterpolatedString(CachingLexer lexer, int charPos);
    [NotNullAttribute]
protected abstract virtual BracketMatcher CreateBraceMatcher();
    protected virtual bool NeedAutoInsertCloseBracket(ITextControl textControl, CachingLexer lexer, Func`1<BracketMatcher> createBracketMatcher);
    private bool NeedAutoInsertCloseBracket(ITextControl textControl, CachingLexer cachingLexer);
    private bool AreBracketsBalanced(CachingLexer lexer);
    protected virtual bool AutoInsertRBrace(ITextControl textControl, CachingLexer lexer);
    protected virtual bool AutoInsertRBraceInString(ITextControl textControl, CachingLexer lexer, int charPos);
    protected virtual bool SkipRBraceInString(ITextControl textControl, CachingLexer lexer, int charPos);
    protected abstract virtual bool GetAutoInsertDataForRBrace(ITextControl textControl, ITokenNode rBraceToken, TreeTextRange treeLBraceRange, DocumentOffset lBracePos, int position, IDocument document, DocumentOffset& positionForRBrace, String& rBraceText, IFile& file);
    [CanBeNullAttribute]
protected TResultNodeType FindNextNodeOnSameLine(IFile file, DocumentOffset pos);
    protected virtual void FormatNonCLikeRBrace(ITextControl textControl, IFile file, int offset, CodeFormatProfile profile);
    protected virtual void FormatCustomRBrace(ITextControl textControl, ITokenNode tokenNode, CodeFormatProfile profile);
    public abstract virtual Pair`2<ITreeRange, ITreeRangePointer> GetRangeToFormatAfterRBrace(ITextControl textControl);
    protected bool HandleRightBraceTyped(ITypingContext typingContext);
    protected bool HandleDotTyped(ITypingContext typingContext);
    protected virtual bool RevertDotAccessTypoCorrectionActionIfNeeded(ITypingContext typingContext);
    protected virtual bool HandlePatternColonReplacement(ITypingContext typingContext);
    protected virtual bool HandleAccessChainTypoCorrection(ITypingContext typingContext, char accessKind, Nullable`1<char> prevCharToSkip);
    protected bool HandleTokenRightAfterSemicolon(ITypingContext typingContext, ITextControl textControl);
    protected virtual bool AreChainedMethodCallsAligned(ITextControl textControl);
    private void TypeOrdinaryChar(ITypingContext typingContext);
    private void EscapeTokenFromEmptyParentheses(ITypingContext typingContext);
    protected virtual void ExecuteAutoCompletion(ITextControl textControl, char typedChar);
    private void BringTokenAfterStatementSemicolonInside(ITypingContext typingContext);
    protected void SkipPrevWhitespaces(CachingLexer lexer, Int32& charPos);
    protected void SkipPrevWhitespaces(CachingLexer lexer);
    protected void SkipNextWhitespaces(CachingLexer lexer);
    [PureAttribute]
private static bool CheckCaretInsideEmptyParenthesesByText(ITextControl textControl, Nullable`1<char> prevCharToSkip);
    [PureAttribute]
private static bool CheckCaretRightAfterSemicolon(ITextControl textControl);
    public static bool StartsWithAsterisk(string line);
    protected bool DoHandleEnterInMultilineCommentPressed(ITextControl textControl);
    private static int SkipPrevWhitespaces(int pos, string text);
    [CompilerGeneratedAttribute]
private BracketMatcher <NeedSkipCloseBracket>b__39_1(TokenNodeType _);
}
public abstract class JetBrains.ReSharper.Feature.Services.TypingAssist.TypingAssistLanguageBase`1 : TypingAssistBase {
    protected TypingAssistLanguageBase`1(TypingAssistDependencies dependencies);
    protected virtual IFile CommitPsi(ITextControl textControl);
    protected virtual IFile CommitPsiOnly(ITextControl textControl);
    protected void CommitPsiOnlyAndProceedWithDirtyCaches(ITextControl textControl, Action`1<IFile> action);
    public virtual T CommitPsiOnlyAndProceedWithDirtyCaches(ITextControl textControl, Func`2<IFile, T> action);
    [NotNullAttribute]
public ICodeFormatter GetCodeFormatter(ITreeNode node);
    protected abstract virtual bool IsSupported(ITextControl textControl);
    protected bool IsActionHandlerAvailable(IActionContext context);
    protected virtual bool IsCpuIntensiveHandlerAvailable(IActionContext context);
    protected bool IsTypingHandlerAvailable(ITypingContext context);
    protected bool IsMultiSelectionTypingHandlerAvailable(ITypingContext context);
    protected bool IsTypingTypoCorrectionHandlerAvailable(ITypingContext context);
    protected bool IsTypingSmartParenthesisHandlerAvailable(ITypingContext context);
    protected bool IsTypingSmartParenthesisMultiSelectionHandlerAvailable(ITypingContext context);
    protected virtual bool IsTypingSmartLBraceHandlerAvailable(ITypingContext context);
    protected bool IsFormatStatementOnSemicolonAvailable(ITypingContext context);
    protected bool IsCorrectCommonTyposAvailable(ITypingContext context);
    protected void FormatRange(ITreeRange rangeToFormat, ITreeRangePointer caretPointer, ITextControl textControl);
    protected bool CheckAndDeleteSelectionIfNeeded(ITextControl textControl, Func`2<DocumentRange, bool> checker);
    [NotNullAttribute]
protected virtual IndentTypingHelper`1<TLanguage> GetIndentTypingHelper();
    public bool DoIndentOnEnter(ITextControl textControl);
    public bool DoDumbIndentOnEnter(ITextControl textControl);
    protected bool ReindentTheLine(ITypingContext context, char afterCharOnNewLine);
    protected virtual DeleteNewLineInfo<TLanguage> DeleteOrBackspaceNewLineChecker(CachingLexer lexer, TextRange range, int lineBreakPosition);
    public bool HandleDeleteOrBackspaceNewLine(ITextControl textControl, bool backspace, Func`4<CachingLexer, TextRange, int, DeleteNewLineInfo<TLanguage>> checker, int position, IDisposable command);
    private bool DeleteAllNewLinesInBlock(ITextControl textControl, DeleteNewLineInfo<TLanguage> info, TextRange lineBreakAndIndentRange, TextRange lineBreakRange, TextRange[] ranges, string text, bool backspace, IDisposable command);
    private bool DeleteOneNewLine(ITextControl textControl, CachingLexer lexer, bool allowSmartness, bool backspace, TextRange rangeToDelete, TextRange lineBreakRange);
    public bool HandleDeleteNewLine(ITextControl textControl, Func`2<CachingLexer, bool> isNewLine, bool allowSmartness);
    public virtual bool ShouldDoCustomBackspaceSmartUnindent(TokenNodeType tokenNodeType);
    public virtual bool DoCustomBackspaceSmartUnindent(IActionContext context);
    protected bool HandleUnindentOnBackspace(IActionContext context);
    private int InsertSpaceSeparatorIfRequired(TokenNodeType left, TokenNodeType right, ITextControl textControl, IDocument document, int startPos);
    protected bool HandleTabOrTabLeftPressed(IActionContext context, Action`4<FormatSettingsKeyBase, string, ITextControl, DocumentOffset> indentLineFromBlock, IndentSingleLineHandler indentSingleLine, bool isBackward);
    public virtual bool HandleTabPressed(IActionContext context);
    public bool HandleTabLeftPressed(IActionContext context);
    protected virtual bool HandleEmacsTabPressed(IActionContext context);
    protected bool DoHandleEnterInLineCommentPressed(ITextControl textControl, string lineCommentStart, string docCommentStart, Func`2<TokenNodeType, bool> isLineComment);
    private static void TrimWhitespaceInLineCommentOnEnter(IDocument document, CachingLexer lexer, Int32& caretPosition);
    protected virtual bool NeedAutoInsertCloseBracket(ITextControl textControl, CachingLexer lexer, Func`1<BracketMatcher> createBracketMatcher);
    protected bool HandleLeftBracketTyped(ITypingContext typingContext, Func`2<CachingLexer, bool> isLeftBracket, Func`1<BracketMatcher> createBracketMatcher, Func`2<ITypingContext, bool> surroundWithBrackets, Func`3<TokenNodeType, CachingLexer, bool> nextTokenSuitableForCloseBracket, Func`1<string> getRightBracketText);
    protected bool HandleSurroundTyping(ITypingContext typingContext, char lChar, char rChar, TokenNodeType lTokenType, TokenNodeType rTokenType, Func`2<TokenNodeType, bool> shouldNotSurround);
    protected virtual void FormatSurrounded(bool before, ITextControl textControl, TokenNodeType lTokenType, TokenNodeType rTokenType, DocumentRange textRange);
    protected bool HandleRightBracketTyped(ITypingContext typingContext, Func`2<ITypingContext, bool> surroundWithBrackets, Func`2<TokenNodeType, bool> skipToken, Func`2<CachingLexer, bool> needSkipRightBracket);
    protected virtual bool NeedSkipCloseBracket(ITextControl textControl, CachingLexer lexer, char charTyped, IDictionary`2<char, Tuple`2<TokenNodeType, TokenNodeType>> bracketTypesForTypedChar, Func`3<TokenNodeType, TokenNodeType, bool> stopSearchingLeftBracket, Func`2<TokenNodeType, BracketMatcher> createBracketMatcher);
    protected bool DoHandleBackspacePressed(ITextControl textControl, Func`2<TokenNodeType, bool> isStringLiteralToken, Func`1<BracketMatcher> createBracketMatcher);
    protected virtual bool HandleBackspaceInString(ITextControl textControl, CachingLexer lexer);
    protected virtual Nullable`1<StringVerbatimity> TryGetStringVerbatimity(CachingLexer lexer);
    protected static bool EscapesNextChar(int charPos, IBuffer buffer);
    protected void SurroundSelectionWithQuotes(ITextControl textControl, Func`2<DocLineColumnRange, bool> makeVerbatim);
    protected bool AutoInsertRBraceInStringInterpolation(ITextControl textControl, CachingLexer lexer, int charPos, NodeTypeSet autoCloseBraceSet, NodeTypeSet skipCloseBraceSet, TokenNodeType rightBrace);
    protected void PerformUndoableCaretMove(ITextControl textControl, DocOffset newPosition, DocOffset oldPosition);
    protected void PerformSeparateUndoableStep(ITextControl textControl, string actionName, Action action);
    [CompilerGeneratedAttribute]
internal static void <HandleDeleteOrBackspaceNewLine>g__SkipWhitespaces|25_0(int direction, Int32& pos, <>c__DisplayClass25_0& );
    [CompilerGeneratedAttribute]
internal static bool <HandleDeleteOrBackspaceNewLine>g__SkipLinebreak|25_1(int direction, Int32& pos, <>c__DisplayClass25_0& );
    [CompilerGeneratedAttribute]
internal static bool <AutoInsertRBraceInStringInterpolation>g__IsEscapedCurlyBrace|50_0(<>c__DisplayClass50_0& );
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.TypingAssist.TypingAssistManager : object {
    [NotNullAttribute]
private IActionManager myActionManager;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private List`1<TypingHandler> myTypingHandlers;
    [NotNullAttribute]
private List`1<ActionHandler> myActionHandlers;
    [NotNullAttribute]
private Dictionary`2<string, ExternalActionHandler> myExternalActionHandlers;
    public TypingAssistManager(Lifetime lifetime, ISolution solution, TextControlTypingHandlers typingHandlers, IActionManager actionManager, ILogger logger);
    private void Type(ITypingContext typingContext);
    private void ActionExecute(ITextControl textControl, IDataContext dataContext, string actionId, DelegateExecute nextExecute);
    private void Handle(TContext context, IEnumerable`1<THandler> handlers, Func`4<int, IReadOnlyList`1<THandler>, TContext, TContext> chainedContextFactory);
    public sealed virtual void AddTypingHandler(Lifetime lifetime, char c, ITypingHandler typingHandler, Func`2<ITypingContext, bool> action, Predicate`1<ITypingContext> checker);
    public sealed virtual void AddActionHandler(Lifetime lifetime, string actionId, ITypingHandler typingHandler, Func`2<IActionContext, bool> action, Predicate`1<IActionContext> checker, ActionHandlerPriority priority);
    [CompilerGeneratedAttribute]
private ITypingContext <Type>b__7_0(int index, IReadOnlyList`1<TypingHandler> handlers, ITypingContext ctx);
    [CompilerGeneratedAttribute]
private IActionContext <ActionExecute>b__8_0(int index, IReadOnlyList`1<ActionHandler> handlers, IActionContext ctx);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.TypingAssist.TypingAssistStatisticsAggregator : object {
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private IClientSessionManager <ClientSessionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextControlManager <TextControlManager>k__BackingField;
    [CompilerGeneratedAttribute]
private TypingAssistStatisticsCounterCollector <CounterCollector>k__BackingField;
    [CompilerGeneratedAttribute]
private IShellLocks <Locks>k__BackingField;
    private Dictionary`2<EventGroup, int> myLatencyLogger;
    private object myLock;
    private Dictionary`2<string, TypedKey> myActions;
    private ISolution Solution { get; }
    private IClientSessionManager ClientSessionManager { get; }
    private ITextControlManager TextControlManager { get; }
    private TypingAssistStatisticsCounterCollector CounterCollector { get; }
    private IShellLocks Locks { get; }
    public TypingAssistStatisticsAggregator(ISolution solution, IClientSessionManager clientSessionManager, ITextControlManager textControlManager, Lifetime lifetime, ILogger logger, TypingAssistStatisticsCounterCollector counterCollector, TextControlTypingHandlers textControlTypingHandlers, ActionEvents actionEvents, IShellLocks locks);
    [CompilerGeneratedAttribute]
private ISolution get_Solution();
    [CompilerGeneratedAttribute]
private IClientSessionManager get_ClientSessionManager();
    [CompilerGeneratedAttribute]
private ITextControlManager get_TextControlManager();
    [CompilerGeneratedAttribute]
private TypingAssistStatisticsCounterCollector get_CounterCollector();
    [CompilerGeneratedAttribute]
private IShellLocks get_Locks();
    private void ReportEvents();
    private void RegisterAction(ActionExecutedEventArgs args);
    [NullableContextAttribute("2")]
private void RegisterTypedKey(ITextControl textControl, TypedKey typedKey, TimeSpan latency);
    private TypedKey CharToTypedKey(char c);
    public void RegisterTyping(TypingEventArgs args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.TypingAssist.TypingAssistStatisticsCounterCollector : CounterUsagesCollector {
    private static Int32[] ourLatencyBounds;
    [CompilerGeneratedAttribute]
private EventLogGroup <Group>k__BackingField;
    private StringEventField myExtensionField;
    private EnumEventField`1<TypedKey> myTypedKey;
    private IntEventField myCount;
    private RoundedIntEventField myFileSizeField;
    [CompilerGeneratedAttribute]
private BoundedIntEventField <LatencyGroupField>k__BackingField;
    [CompilerGeneratedAttribute]
private VarargEventId <Invocation>k__BackingField;
    private EventLogGroup Group { get; }
    public BoundedIntEventField LatencyGroupField { get; public set; }
    public VarargEventId Invocation { get; public set; }
    public TypingAssistStatisticsCounterCollector(FeatureUsageLogger featureUsageLogger);
    private static TypingAssistStatisticsCounterCollector();
    public virtual EventLogGroup GetGroup();
    [CompilerGeneratedAttribute]
private EventLogGroup get_Group();
    [CompilerGeneratedAttribute]
public BoundedIntEventField get_LatencyGroupField();
    [CompilerGeneratedAttribute]
public void set_LatencyGroupField(BoundedIntEventField value);
    [CompilerGeneratedAttribute]
public VarargEventId get_Invocation();
    [CompilerGeneratedAttribute]
public void set_Invocation(VarargEventId value);
    public void RegisterInvocation(ISolution solution, TypedKey key, int fileSize, string extension, int latency, int count);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.TypingAssist.TypingAssistUtils : object {
    public static Key`1<ProjectFileType> TypingAssistCommitAction;
    public static string TabCommandID;
    private static TypingAssistUtils();
    [ExtensionAttribute]
[PureAttribute]
public static bool IsSupported(TypingAssistBase typingAssist, ITextControl textControl);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IFile CommitPsi(TypingAssistBase typingAssist, ITextControl textControl);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IFile CommitPsiOnly(TypingAssistBase typingAssist, ITextControl textControl);
    [ExtensionAttribute]
public static T CommitPsiOnlyAndProceedWithDirtyCaches(TypingAssistBase typingAssist, ITextControl textControl, Func`2<IFile, T> action);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static ITreeRangePointer CreateRangePointer(ITokenNode tokenNode);
    [PureAttribute]
public static bool IsBlockOfCodeSelected(ITextControl textControl, DocumentRange selection);
    public static bool CheckTabNavigation(ISolution solution, ITextControl textControl, IDataContext dataContext, bool forBackwardAction);
    public static bool HandleTabOrTabLeftPressed(ISolution solution, ICommandProcessor commandProcessor, ITextControl textControl, Action`4<FormatSettingsKeyBase, string, ITextControl, DocumentOffset> indentLineFromBlock, IndentSingleLineHandler indentSingleLine, TabOnSelectionProcessing tabOnSelectionProcessing);
    public static void DoTransactionSavingSelection(ISolution solution, ITextControl textControl, IDocument document, Action action);
    public static HashSet`1<Int32`1<DocLine>> GetLinesInSelection(ITextControl textControl, IDocument document);
    public static DocumentOffset IncreaseLineIndentOnSingleLine(FormatSettingsKeyBase formatterSettings, int colCount, DocumentOffset caretPosition, string textBeforeCaret, ITextControl textControl);
    public static void IncreaseLineIndentOnLineFromBlockSelection(FormatSettingsKeyBase formatterSettings, string indent, ITextControl textControl, DocumentOffset lineStartOffset);
    public static DocumentOffset DecreaseIndentOnSingleLine(FormatSettingsKeyBase formatterSettings, int colCount, DocumentOffset caretPosition, string textBeforeCaret, ITextControl textControl);
    public static void DecreaseIndentOnLineFromBlockSelection(FormatSettingsKeyBase formatterSettings, string indent, ITextControl textControl, DocumentOffset lineStartOffset);
    internal static DocumentOffset DecreaseIndent(string indent, int indentToDelete, FormatSettingsKeyBase formatterSettings, ITextControl textControl, DocumentOffset offset);
    public static bool ForceHandleTabLeftPressed(ISolution solution, ITextControl textControl);
    [PureAttribute]
public static bool IsCaretOnIndenting(ITextControl textControl, DocumentRange selection);
    [NotNullAttribute]
public static string GetTextBeforeCaret(ITextControl textControl, DocumentRange selection);
    public static NonCommittedPsiActionCookie`1<TLanguage> ExecutePsiActionWithDirtyCaches(ISolution solution, ITextControl textControl);
}
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.TypingAssist.TypingPerformanceCollector : CounterUsagesCollector {
    private EventLogGroup myGroup;
    private IntEventField myLatencyMaxField;
    private IntEventField myLatency90Field;
    private StringEventField myFileTypeField;
    private EventId3`3<int, int, string> myLatencyMeasuredEvent;
    private static EventsRateWindowThrottle ourThrottle;
    public TypingPerformanceCollector(FeatureUsageLogger featureUsageLogger);
    private static TypingPerformanceCollector();
    public virtual EventLogGroup GetGroup();
    public void LogTyping(IProjectFile projectFile);
    public void LogCurrentLatency(int maxLatency, int latency90Percentile, string ext);
}
[SolutionComponentAttribute("20")]
public class JetBrains.ReSharper.Feature.Services.TypingAssist.TypingStatisticsAggregator : object {
    [CanBeNullAttribute]
private ITextControl myCurrentTextControl;
    [CanBeNullAttribute]
private LatencyDistributionRecord myLatencyDistributionRecord;
    private TypingPerformanceCollector myTypingPerformanceCollector;
    public TypingStatisticsAggregator(Lifetime lifetime, TextControlTypingHandlers textControlTypingHandlers, TypingPerformanceCollector typingPerformanceCollector, ITextControlManager textControlManager);
    private void LogCurrentLatencyAndReset();
    private void LogCurrentLatency();
    private void LogTyping();
    private void ProcessTyping(TypingEventArgs args);
    private void ProcessTypedKey(ITextControl textControl, char character, TimeSpan latency);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0(Lifetime controlLifetime, ITextControl control);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.TypingAssist.ZoneMarker : object {
}
public class JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.DefaultColorScheme : object {
    public static DefaultColorScheme Instance;
    private Dictionary`2<string, Color> myColors;
    private static DefaultColorScheme();
    public sealed virtual Color GetColor(string name);
}
public class JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.FontInfo : object {
    [CompilerGeneratedAttribute]
private string <FontName>k__BackingField;
    [CompilerGeneratedAttribute]
private float <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private JetFontStyles <FontStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private EffectStyle <Effect>k__BackingField;
    [NotNullAttribute]
public string FontName { get; }
    public float FontSize { get; }
    public JetFontStyles FontStyle { get; }
    public EffectStyle Effect { get; }
    public FontInfo(string fontName, float fontSize, JetFontStyles fontStyle, EffectStyle effect);
    [CompilerGeneratedAttribute]
public string get_FontName();
    [CompilerGeneratedAttribute]
public float get_FontSize();
    [CompilerGeneratedAttribute]
public JetFontStyles get_FontStyle();
    [CompilerGeneratedAttribute]
public EffectStyle get_Effect();
    public sealed virtual bool Equals(FontInfo obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.FormattedText : object {
    private IList`1<TextLine> myLines;
    public IList`1<TextLine> Lines { get; }
    public FormattedText(IList`1<TextLine> lines);
    public IList`1<TextLine> get_Lines();
}
public static class JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.FormattedTextDecorator : object {
    public static FormattedText Decorate(FormattedText text, ITextDecorator textDecorator);
}
public interface JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.IActiveText {
    public IColorScheme ColorScheme { get; public set; }
    public FormattedText Content { get; public set; }
    public Font DefaultFont { get; public set; }
    public abstract virtual IColorScheme get_ColorScheme();
    public abstract virtual void set_ColorScheme(IColorScheme value);
    public abstract virtual FormattedText get_Content();
    public abstract virtual void set_Content(FormattedText value);
    public abstract virtual void Paint(PaintEventArgs paintEventArgs);
    public abstract virtual int CalculateHeight(Graphics graphics, int width);
    public abstract virtual Font get_DefaultFont();
    public abstract virtual void set_DefaultFont(Font value);
    public abstract virtual void NotifyMouseMove(MouseEventArgs mouseEventArgs);
    public abstract virtual string GetAnchor(Point point);
}
public interface JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.IColorScheme {
    public abstract virtual Color GetColor(string name);
}
public interface JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.IFormattedTextProvider {
    public FormattedText FormattedText { get; }
    public abstract virtual FormattedText get_FormattedText();
}
public class JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.Impl.ActiveText : object {
    private FormattedText myContent;
    private TextMarkup myMarkup;
    private Point myClipOffset;
    private Font myDefaultFont;
    private IColorScheme myColorScheme;
    private IFontsManager myFontsManager;
    public Font DefaultFont { get; public set; }
    public IColorScheme ColorScheme { get; public set; }
    public FormattedText Content { get; public set; }
    public ActiveText(IFontsManager fontsManager);
    public sealed virtual Font get_DefaultFont();
    public sealed virtual void set_DefaultFont(Font value);
    public sealed virtual IColorScheme get_ColorScheme();
    public sealed virtual void set_ColorScheme(IColorScheme value);
    public sealed virtual FormattedText get_Content();
    public sealed virtual void set_Content(FormattedText value);
    public sealed virtual void Paint(PaintEventArgs paintEventArgs);
    private Color GetColor(string colorName);
    private TextPart GetAnchorPart(Point point);
    public sealed virtual int CalculateHeight(Graphics graphics, int width);
    public sealed virtual void NotifyMouseMove(MouseEventArgs mouseEventArgs);
    public sealed virtual string GetAnchor(Point point);
    private void BuildMarkup(Size size, Graphics graphics);
}
internal class JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.Impl.FontCache : object {
    private Graphics myGraphics;
    private Font myDefaultFont;
    private Dictionary`2<FontInfo, FontWrapper> myFonts;
    private IFontsManager myFontsManager;
    public FontCache(Graphics graphics, IFontsManager fontsManager);
    public FontCache(Graphics graphics, Font defaultFont, IFontsManager fontsManager);
    public FontWrapper GetFont(FontInfo fontInfo);
    private Font CreateFont(FontInfo fontInfo);
    public sealed virtual void Dispose();
}
internal class JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.Impl.FontWrapper : object {
    private Graphics myGraphics;
    private Font myFont;
    private Dictionary`2<char, SizeF> mySizesCache;
    public Font Font { get; }
    public FontWrapper(Font font, Graphics graphics);
    public Font get_Font();
    public SizeF GetCharacterSize(char c);
    public sealed virtual void Dispose();
}
internal class JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.Impl.MarkupBuilder : object {
    private FormattedText myFormattedText;
    private FontCache myCache;
    private Size mySize;
    private ArrayList myLines;
    private ArrayList myParts;
    private float myX;
    private float myY;
    private StringBuilder myPartText;
    private TextPart myPart;
    private float myLineHeight;
    private float myPartWidth;
    private float myPartWidthUntilBreak;
    private StringBuilder myPartTextUntilBreak;
    private FontWrapper myFont;
    public MarkedLine[] Lines { get; }
    public MarkupBuilder(FormattedText formattedText, FontCache cache, Size size);
    public MarkedLine[] get_Lines();
    private void BuildMarkup();
    private static bool IsBreakpointChar(char c);
    private void SaveBreakState();
    private bool CommitUntilBreakPoint();
    private void ClearLine();
    private void CommitLine();
    private void ClearPart();
    private bool CommitPart();
}
internal class JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.Impl.TextMarkup : object {
    private FormattedText myFormattedText;
    private Size mySize;
    private FontCache myCache;
    private MarkedLine[] myLines;
    public FormattedText FormattedText { get; }
    public FontCache Cache { get; }
    public MarkedLine[] Lines { get; }
    public Size Size { get; }
    public float Height { get; }
    public TextMarkup(FormattedText formattedText, Graphics graphics, Size size, Font defaultFont, IFontsManager fontsManager);
    public FormattedText get_FormattedText();
    public FontCache get_Cache();
    public MarkedLine[] get_Lines();
    public Size get_Size();
    public float get_Height();
    public MarkedPart FindPartAt(Point point);
}
public class JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.TextLine : object {
    private IList`1<TextPart> myParts;
    public IList`1<TextPart> Parts { get; }
    public TextLine(IList`1<TextPart> parts);
    public IList`1<TextPart> get_Parts();
}
public class JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.TextPart : object {
    private FontInfo myFontInfo;
    private string myForeColor;
    private string myBackColor;
    private string myText;
    private string myAnchor;
    public string Text { get; }
    public FontInfo FontInfo { get; }
    public string ForeColor { get; }
    public string BackColor { get; }
    public string Anchor { get; }
    public TextPart(FontInfo fontInfo, string foreColor, string backColor, string text, string anchor);
    public TextPart(FontInfo fontInfo, string foreColor, string backColor, string text);
    public string get_Text();
    public FontInfo get_FontInfo();
    public string get_ForeColor();
    public string get_BackColor();
    public string get_Anchor();
}
public class JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.XMLFormatter : object {
    private ArrayList myLines;
    private ArrayList myParts;
    private string myCurrentPartText;
    private JetFontStyles myCurrentPartStyle;
    private EffectStyle myCurrentPartEffect;
    private string myCurrentPartBackColor;
    private string myCurrentPartForeColor;
    private string myCurrentRef;
    public FormattedText FormatXML(string xml);
    public FormattedText FormatXML(StringBuilder xml);
    private void VisitTag(XmlElement element);
    private void VisitItalic(XmlElement element);
    private void VisitFont(XmlElement element);
    private void VisitUnderline(XmlElement element);
    private void VisitBold(XmlElement element);
    private void VisitAnchor(XmlElement element);
    private void VisitInterior(XmlElement element);
    private void CommitLine();
    private void CommitPart();
}
public class JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.XMLFormatterWPF : object {
    private string myCurrentPartText;
    private string myCurrentPartBackColor;
    private string myCurrentPartForeColor;
    private string myCurrentRef;
    private TextBlock myTextElement;
    private LinkNavigator myLinkNavigator;
    private object myNavigationHost;
    public TextBlock FormatXML(string xml, object navigationHost);
    public TextBlock FormatXML(StringBuilder xml);
    private void VisitTag(XmlElement element);
    private void VisitItalic(XmlElement element);
    private void VisitFont(XmlElement element);
    private void VisitUnderline(XmlElement element);
    private void VisitBold(XmlElement element);
    private void VisitAnchor(XmlElement element);
    private void VisitInterior(XmlElement element);
    private Inline CommitPart();
}
internal class JetBrains.ReSharper.Feature.Services.UI.ActiveText.DefaultNodeHostProvider : object {
    public static DefaultNodeHostProvider Instance;
    private static DefaultNodeHostProvider();
    public sealed virtual object GetHost(object tag);
}
public interface JetBrains.ReSharper.Feature.Services.UI.ActiveText.INodeHostProvider {
    public abstract virtual object GetHost(object tag);
}
[ShellComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.UI.ActiveText.LinkNavigator : object {
    private ProtocolSpecific myProtocolSpecific;
    public LinkNavigator(ProtocolSpecific protocolSpecific);
    public void Navigate(string link, object host);
    private static string GetProtocol(string link);
}
public interface JetBrains.ReSharper.Feature.Services.UI.AsyncTreeBrowser.ITreeModelAdapter {
    public object RootNode { get; }
    public abstract virtual object get_RootNode();
    public abstract virtual ICollection GetOutgoing(object node);
    public abstract virtual bool CanHaveChildren(object node);
    public abstract virtual bool IsOutgoingBuilt(object node);
    public abstract virtual bool SemanticCompare(object firstNode, object secondNode);
    public abstract virtual bool RecursionPreventionCompare(object firstNode, object secondNode);
    public abstract virtual Task BuildOutgoingAsync(object parentNode, IProgressIndicator progressIndicator, bool runSynchronous);
}
public class JetBrains.ReSharper.Feature.Services.UI.AsyncTreeBrowser.TreeAsyncModel : TreeModelBase {
    private ITreeModelAdapter myModelAdapter;
    [CompilerGeneratedAttribute]
private RecursionPreventionStyle <RecursionPrevention>k__BackingField;
    public Action`2<object, EventArgs`1<TreeModelNode>> OnExpandFailed;
    public ITreeModelAdapter ModelAdapter { get; }
    public RecursionPreventionStyle RecursionPrevention { get; public set; }
    public TreeAsyncModel(ITreeModelAdapter modelAdapter);
    public TreeAsyncModel(IEqualityComparer`1<object> equalityComparer, ITreeModelAdapter modelAdapter);
    protected virtual void PerformUpdate();
    public ITreeModelAdapter get_ModelAdapter();
    [CompilerGeneratedAttribute]
public RecursionPreventionStyle get_RecursionPrevention();
    [CompilerGeneratedAttribute]
public void set_RecursionPrevention(RecursionPreventionStyle value);
    protected virtual TreeModelNode CreateNode(TreeModelNode parent, object value);
    private void BuildRoot();
    private void PopulateChildren(TreeModelNode node, IEnumerable list);
    private void ExpandFailed(AsyncTreeNode asyncTreeNode);
    public static bool IsProgressData(object firstNode);
}
public static class JetBrains.ReSharper.Feature.Services.UI.AsyncTreeBrowser.TreeModelAdapterUtil : object {
    public static Task WrapSyncActivityIntoTask(Action action);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ActionAttribute("Show UI Controls...")]
public class JetBrains.ReSharper.Feature.Services.UI.Automation.BeControlsDemo.BeControlsDemoAction : object {
    protected RichText Caption { get; }
    protected RichText get_Caption();
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
internal class JetBrains.ReSharper.Feature.Services.UI.Automation.BeControlsDemo.BeControlsUITestModel : object {
    [CompilerGeneratedAttribute]
private Property`1<TestPurposesEnum2> <EnumProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<int> <IntProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <BoolProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <StringProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IListEvents`1<TestModelTreeElement> <SingleSelectionTableElements>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<TestModelTreeElement> <MultiSelectionTableElements>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<TestModelTreeElement> <TreeGridElements>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<TestElementWithString> <MutableSpanElements>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<TestModelTreeElement> <FileLayoutElements>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<TestModelListElement> <HugeTreeGridElements>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<TestWinformAssemblyImitation> <AssemblyImitations>k__BackingField;
    public Property`1<TestPurposesEnum2> EnumProperty { get; }
    public Property`1<int> IntProperty { get; }
    public IProperty`1<bool> BoolProperty { get; }
    public IProperty`1<string> StringProperty { get; }
    public IListEvents`1<TestModelTreeElement> SingleSelectionTableElements { get; }
    public ListEvents`1<TestModelTreeElement> MultiSelectionTableElements { get; }
    public ListEvents`1<TestModelTreeElement> TreeGridElements { get; }
    public ListEvents`1<TestElementWithString> MutableSpanElements { get; }
    public ListEvents`1<TestModelTreeElement> FileLayoutElements { get; }
    public ListEvents`1<TestModelListElement> HugeTreeGridElements { get; }
    public ListEvents`1<TestWinformAssemblyImitation> AssemblyImitations { get; public set; }
    public BeControlsUITestModel(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public Property`1<TestPurposesEnum2> get_EnumProperty();
    [CompilerGeneratedAttribute]
public Property`1<int> get_IntProperty();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_BoolProperty();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_StringProperty();
    [CompilerGeneratedAttribute]
public IListEvents`1<TestModelTreeElement> get_SingleSelectionTableElements();
    [CompilerGeneratedAttribute]
public ListEvents`1<TestModelTreeElement> get_MultiSelectionTableElements();
    [CompilerGeneratedAttribute]
public ListEvents`1<TestModelTreeElement> get_TreeGridElements();
    [CompilerGeneratedAttribute]
public ListEvents`1<TestElementWithString> get_MutableSpanElements();
    [CompilerGeneratedAttribute]
public ListEvents`1<TestModelTreeElement> get_FileLayoutElements();
    [CompilerGeneratedAttribute]
public ListEvents`1<TestModelListElement> get_HugeTreeGridElements();
    [CompilerGeneratedAttribute]
public ListEvents`1<TestWinformAssemblyImitation> get_AssemblyImitations();
    [CompilerGeneratedAttribute]
public void set_AssemblyImitations(ListEvents`1<TestWinformAssemblyImitation> value);
    private void InitWinformsImitations(Lifetime lifetime);
    private void FillFileLayoutElements(Lifetime lifetime);
    public TestModelTreeElement GetIntanceElementForTree(Lifetime lifetime);
    public TestModelListElement GetHugeIntanceElementForList(int i, Lifetime lifetime);
}
internal class JetBrains.ReSharper.Feature.Services.UI.Automation.BeControlsDemo.ChildTestModelTreeElement : TestModelTreeElement {
    [CompilerGeneratedAttribute]
private Property`1<TestPurposesEnum> <EnumProperty2>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Expanded>k__BackingField;
    public Property`1<TestPurposesEnum> EnumProperty2 { get; }
    public IProperty`1<bool> Expanded { get; }
    public ChildTestModelTreeElement(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public Property`1<TestPurposesEnum> get_EnumProperty2();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_Expanded();
}
public static class JetBrains.ReSharper.Feature.Services.UI.Automation.BeControlsDemo.DemoActionBeControls : object {
    private static string LongText;
    private static BeGrid GetEditableControlsTab(Lifetime lifetime, BeControlsUITestModel beControlsUITestModel, ISolution solution, IShellLocks myLocks, IIconHost myIconHost);
    private static BeControl GetMutableGridsTab(Lifetime lifetime, BeControlsUITestModel beControlsUITestModel, IconHostBase iconHostBase);
    private static BeGrid GetButtonsTab(Lifetime lifetime, IconHostBase iconHostBase, BeControlsUITestModel model, IDialogHost dialogHost, ICommonFileDialogs dialogs, ITextAttributesKeyProvider textAttributesKeyProvider);
    private static BeDialog GetWinformsTest(Lifetime& lifetime, BeControlsUITestModel model, Property`1<string> userValue, IDialogHost host, ICommonFileDialogs dialogs, IIconHost iconHost);
    private static BeDialog GetDialogSizesCheck(Lifetime& lifetime, BeControlsUITestModel model, Property`1<string> userValue, IDialogHost host);
    private static BeDialog GetDialog(Lifetime lifetime, BeControlsUITestModel model, Property`1<string> userValue, ITextAttributesKeyProvider textAttributesKeyProvider);
    private static BeDialog GetDialog1(Lifetime lifetime, BeControlsUITestModel model, Property`1<string> userValue);
    private static BeDialog GetPathSelectionDialog(Lifetime lifetime, BeControlsUITestModel model, Property`1<string> userValue, ICommonFileDialogs dialogs);
    private static BeToggleButton AddBeIconToggleButton(Lifetime lifetime, IconHostBase iconHostBase);
    private static BeControl GetPathSelectors(Lifetime lifetime, IconHostBase iconHostBase, ICommonFileDialogs dialogs);
    private static BeScrollablePanel GetComboControlsTab(Lifetime lifetime, BeControlsUITestModel beControlsUITestModel, IconHostBase iconHostBase, IDialogHost host, ICommonFileDialogs dialogs);
    private static BeControl GetLabelsTab(Lifetime lifetime, IconHostBase iconHostBase);
    private static RichTextModel GetModelRichText();
    public static void ShowDialog(IDataContext context);
    public static void ShowToolWindow(IDataContext context);
    private static BeSplitControl GetContent(IDataContext context, Lifetime lifetime);
    private static BeGrid GetMiscControlsTab(Lifetime lifetime, BeControlsUITestModel beControlsUITestModel, IDialogHost dialogHost);
    private static BeControl GetCustomControlsTab(Lifetime lifetime, IIconHost iconHost);
    private static BeControl GetResultPanel(BeControlsUITestModel beControlsUITestModel, BeTabbedControl tabbedControl, Lifetime lifetime);
    private static BeButton GetDebugButton(Lifetime lifetime, IDialogHost host, ValueTuple`2[] properties);
    private static BeControl GetBeVirtualizedDataGridTab(Lifetime lifetime);
    private static BeControl GetPsiDependentControls(Lifetime lifetime, ITextControlManager manager, ISolution solution, ITextAttributesKeyProvider textAttributesKeyProvider);
    private static BeControl GetStyleControlTab(Lifetime lifetime);
    private static BeControl GetTogglesTab(Lifetime lifetime, BeControlsUITestModel testModel, IconHostBase iconHostBase);
    private static BeControl GetCheckBoxesTab(Lifetime lifetime, BeControlsUITestModel beControlsUITestModel, IconHostBase iconHostBase);
    private static BeControl GetRadioButtonsTab(Lifetime lifetime, BeControlsUITestModel beControlsUITestModel, IconHostBase iconHostBase);
    private static BeGrid GetToggleButtonTab(Lifetime lifetime, BeControlsUITestModel beControlsUITestModel, IconHostBase iconHostBase);
    private static BeGrid GetRadioGroupsTab(Lifetime lifetime, BeControlsUITestModel beControlsUITestModel);
    private static BeGrid GetToolbarsTab(IconHostBase iconHostBase, IActionDefs defs, Lifetime lt, IDialogHost dialogHost);
    private static BeControl GetBeTreeGridTab(Lifetime lifetime, BeControlsUITestModel beControlsUITestModel, IconHostBase iconHostBase, IDialogHost dialogHost, ActionDefs actionDefs, ActionGroupHost actionHost);
    private static BeControl GetTreeTab(Lifetime lifetime, BeControlsUITestModel beControlsUITestModel, IDialogHost dialogHost, IconHostBase iconHostBase, ActionDefs actionDefs, ActionGroupHost actionHost);
    private static BeControl GetFileLayoutsTab(Lifetime lifetime, IconHostBase iconHostBase, BeControlsUITestModel beControlsUITestModel);
    private static BeControl GetAlignmentsTab(Lifetime lifetime, IconHostBase iconHostBase, BeControlsUITestModel beControlsUITestModel);
    private static BeControl GetHugeTreeTab(Lifetime lifetime, BeControlsUITestModel beControlsUITestModel);
    private static BeGrid GetMultiSelectionList(BeControlsUITestModel beControlsUITestModel, Lifetime lifetime, IconHostBase iconHostBase);
    private static BeGrid GetSingleSelectionList(BeControlsUITestModel beControlsUITestModel, Lifetime lifetime, IconHostBase iconHost);
    [CompilerGeneratedAttribute]
internal static string <GetRadioGroupsTab>g__Convert|28_0(string s, RadioButtonProperties p);
    [CompilerGeneratedAttribute]
internal static string <GetRadioGroupsTab>g__Present|28_1(bool arg, RadioButtonProperties p);
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.ReSharper.Feature.Services.UI.Automation.BeControlsDemo.DemoActionGroupActions : object {
    public DemoActionGroupActions(YourFirstDemoActionWithoutDataContextAction yourAction);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.UI.Automation.BeControlsDemo.DemoBeControlsDataConstants : object {
    [NotNullAttribute]
public static DataConstant`1<IDialogHost> DialogHost;
    private static DemoBeControlsDataConstants();
    [ExtensionAttribute]
[PureAttribute]
public static IDataRule CreateDataRule(DataConstant`1<T> constant, Func`2<IDataContext, T> value);
}
[RegisterHighlighterAttribute("DemoAction.Highlighted")]
internal static class JetBrains.ReSharper.Feature.Services.UI.Automation.BeControlsDemo.DemoHighlighterAttributes : object {
    internal static string HighlightedTextAttributeId;
}
internal class JetBrains.ReSharper.Feature.Services.UI.Automation.BeControlsDemo.FileLayoutData : object {
}
internal class JetBrains.ReSharper.Feature.Services.UI.Automation.BeControlsDemo.LazyChildTestModelTreeElement : TestModelTreeElement {
    [CompilerGeneratedAttribute]
private Property`1<TestPurposesEnum> <EnumProperty2>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <StringProperty>k__BackingField;
    public Property`1<TestPurposesEnum> EnumProperty2 { get; }
    public IProperty`1<string> StringProperty { get; }
    public LazyChildTestModelTreeElement(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public Property`1<TestPurposesEnum> get_EnumProperty2();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_StringProperty();
}
internal class JetBrains.ReSharper.Feature.Services.UI.Automation.BeControlsDemo.LoadingNode : TestModelTreeElement {
    public string Text;
    public static LoadingNode Instance { get; }
    private LoadingNode(Lifetime lifetime);
    public static LoadingNode get_Instance();
}
internal enum JetBrains.ReSharper.Feature.Services.UI.Automation.BeControlsDemo.ShowRelated : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("Show google translate")]
public static ShowRelated GOOGLE_TRANSLATE;
    [LocalizedDescriptionAttribute("Show related")]
public static ShowRelated RELATED;
    public static ShowRelated NONE;
    public static ShowRelated RECENT;
}
internal class JetBrains.ReSharper.Feature.Services.UI.Automation.BeControlsDemo.StringToTranslate : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Translated>k__BackingField;
    public Dictionary`2<string, string> Translated { get; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Translated();
}
internal class JetBrains.ReSharper.Feature.Services.UI.Automation.BeControlsDemo.TestElementWithString : object {
    [CompilerGeneratedAttribute]
private IProperty`1<string> <MyProp>k__BackingField;
    public IProperty`1<string> MyProp { get; }
    public TestElementWithString(Lifetime lt, string s);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_MyProp();
}
internal class JetBrains.ReSharper.Feature.Services.UI.Automation.BeControlsDemo.TestModelListElement : TreeGridElement {
    [CompilerGeneratedAttribute]
private Property`1<int> <IntProperty>k__BackingField;
    public Property`1<int> IntProperty { get; }
    public TestModelListElement(int i, Lifetime lifetime);
    [CompilerGeneratedAttribute]
public Property`1<int> get_IntProperty();
}
public class JetBrains.ReSharper.Feature.Services.UI.Automation.BeControlsDemo.TestModelToolsetImitation : object {
    [CompilerGeneratedAttribute]
private IListEvents`1<TestTableLine> <TableElements>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <SelectedPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<TestTableLine> <TableElement>k__BackingField;
    public IListEvents`1<TestTableLine> TableElements { get; }
    public IProperty`1<string> SelectedPath { get; }
    public IProperty`1<TestTableLine> TableElement { get; public set; }
    public TestModelToolsetImitation(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public IListEvents`1<TestTableLine> get_TableElements();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_SelectedPath();
    [CompilerGeneratedAttribute]
public IProperty`1<TestTableLine> get_TableElement();
    [CompilerGeneratedAttribute]
public void set_TableElement(IProperty`1<TestTableLine> value);
}
internal class JetBrains.ReSharper.Feature.Services.UI.Automation.BeControlsDemo.TestModelTreeElement : TreeGridElement {
    [CompilerGeneratedAttribute]
private Property`1<TestPurposesEnum2> <EnumProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<int> <IntProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <BoolProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <StringProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IListEvents`1<TestModelTreeElement> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Nullable`1<bool>> <IncludedProperty>k__BackingField;
    public Property`1<TestPurposesEnum2> EnumProperty { get; }
    public Property`1<int> IntProperty { get; }
    public IProperty`1<bool> BoolProperty { get; }
    public IProperty`1<string> StringProperty { get; }
    public IListEvents`1<TestModelTreeElement> Children { get; }
    public IProperty`1<Nullable`1<bool>> IncludedProperty { get; }
    public TestModelTreeElement(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public Property`1<TestPurposesEnum2> get_EnumProperty();
    [CompilerGeneratedAttribute]
public Property`1<int> get_IntProperty();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_BoolProperty();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_StringProperty();
    [CompilerGeneratedAttribute]
public IListEvents`1<TestModelTreeElement> get_Children();
    [CompilerGeneratedAttribute]
public IProperty`1<Nullable`1<bool>> get_IncludedProperty();
}
internal enum JetBrains.ReSharper.Feature.Services.UI.Automation.BeControlsDemo.TestPurposesEnum : Enum {
    public int value__;
    [IconAttribute("JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/Edit")]
[LocalizedDescriptionAttribute("First value")]
public static TestPurposesEnum FirstValue;
    [IconAttribute("JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/Error")]
[LocalizedDescriptionAttribute("Second value")]
public static TestPurposesEnum SecondValue;
    [IconAttribute("JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/Warning")]
[LocalizedDescriptionAttribute("Third value")]
public static TestPurposesEnum ThirdValue;
}
internal enum JetBrains.ReSharper.Feature.Services.UI.Automation.BeControlsDemo.TestPurposesEnum2 : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("First valueWERKLJWEOIRJWELRJWEKLRJKLJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ")]
public static TestPurposesEnum2 FirstValue;
    [LocalizedDescriptionAttribute("Second valueFirst valueWERKLJWEOIRJWELRJWEKLRJKLJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ")]
public static TestPurposesEnum2 SecondValue;
    [LocalizedDescriptionAttribute("Third valueFirst valueWERKLJWEOIRJWELRJWEKLRJKLJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ")]
public static TestPurposesEnum2 ThirdValue;
}
internal class JetBrains.ReSharper.Feature.Services.UI.Automation.BeControlsDemo.TestResxData : object {
    [CompilerGeneratedAttribute]
private ListEvents`1<string> <Languages>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<StringToTranslate> <StringsToTranslate>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ShowRelated> <Related>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<StringToTranslate> <Current>k__BackingField;
    public ListEvents`1<string> Languages { get; }
    public ListEvents`1<StringToTranslate> StringsToTranslate { get; }
    public IProperty`1<ShowRelated> Related { get; }
    public IProperty`1<StringToTranslate> Current { get; }
    public TestResxData(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public ListEvents`1<string> get_Languages();
    [CompilerGeneratedAttribute]
public ListEvents`1<StringToTranslate> get_StringsToTranslate();
    [CompilerGeneratedAttribute]
public IProperty`1<ShowRelated> get_Related();
    [CompilerGeneratedAttribute]
public IProperty`1<StringToTranslate> get_Current();
}
public class JetBrains.ReSharper.Feature.Services.UI.Automation.BeControlsDemo.TestTableLine : object {
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Value>k__BackingField;
    public IProperty`1<string> Name { get; }
    public IProperty`1<string> Value { get; }
    public TestTableLine(Lifetime lifetime, string initialName, string initialValue);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_Name();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_Value();
}
internal class JetBrains.ReSharper.Feature.Services.UI.Automation.BeControlsDemo.TestWinformAssemblyImitation : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<TestWinformTypeImitation> <TypeImitations>k__BackingField;
    public string Title { get; }
    public string Description { get; }
    public ListEvents`1<TestWinformTypeImitation> TypeImitations { get; }
    public TestWinformAssemblyImitation(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public ListEvents`1<TestWinformTypeImitation> get_TypeImitations();
}
internal class JetBrains.ReSharper.Feature.Services.UI.Automation.BeControlsDemo.TestWinformTypeImitation : object {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<TestWinformTypeImitation> <Children>k__BackingField;
    public string Description { get; }
    public RichText Title { get; }
    public IList`1<TestWinformTypeImitation> Children { get; public set; }
    public TestWinformTypeImitation(Lifetime lifetime, int i);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public RichText get_Title();
    [CompilerGeneratedAttribute]
public IList`1<TestWinformTypeImitation> get_Children();
    [CompilerGeneratedAttribute]
public void set_Children(IList`1<TestWinformTypeImitation> value);
}
internal class JetBrains.ReSharper.Feature.Services.UI.Automation.BeControlsDemo.TreeTabDataRuleProvider : BeTreeGridDataRuleProvider`1<TestModelTreeElement> {
    private IDialogHost myHost;
    public TreeTabDataRuleProvider(IDialogHost host);
    protected virtual IEnumerable`1<IDataRule> GetTreeDataRules();
    [CompilerGeneratedAttribute]
private IDialogHost <GetTreeDataRules>b__2_0(IDataContext v);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ActionGroupAttribute("0", "10")]
public class JetBrains.ReSharper.Feature.Services.UI.Automation.BeControlsDemo.UITestInternalMenu : object {
    public UITestInternalMenu(BeControlsDemoAction action);
}
[ActionAttribute("Blah...")]
public class JetBrains.ReSharper.Feature.Services.UI.Automation.BeControlsDemo.YourFirstDemoActionWithoutDataContextAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.ReSharper.Feature.Services.UI.Automation.BePsiControls : object {
    public static BeGrid GetPathSelectionElement(IPathControlData`1<T> data, Lifetime lifetime, IconHostBase iconHost, IDialogHost dialogHost, IProjectFolder folder, T control, Action`1<FileSystemPath> processNewPath, string description, ValidationStyle validationStyle);
    private static BeDialog GetDialog(Lifetime lifetime, IProperty`1<FileSystemPath> pathProperty, IProjectFolder startFolder, BrowsePathOptions dataPathChooser);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.UI.Automation.BePsiCreationExtensions : object {
    [ExtensionAttribute]
public static BeControl GetBeCheckBoxFromTreeNode(ITreeNode treeNode, Lifetime lifetime, IProperty`1<Nullable`1<bool>> isChecked, IconId iconId, bool enabled);
    [ExtensionAttribute]
public static BeLabel GetBeLabelFromDeclaredElement(IDeclaredElement declaredElement, Lifetime lifetime, bool enabled);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ISolution GetSolution(BeUsagesPanel panel);
    [ExtensionAttribute]
public static IOccurrence GetOccurrence(RdUsageBase usage, ISolution solution);
    [ExtensionAttribute]
public static BeUsagesPanel GetBeUsagesPanel(IOccurrenceBrowserDescriptor descriptor, ISolution solution, Lifetime lifetime, IReadOnlyList`1<IOccurrence> occurrences, string id, bool extendHack, CheckBoxesState checkBoxesState);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.UI.Automation.BeTreeGridPresenters : object {
    public static BeGrid LineFromTreeNode(Lifetime lifetime, T element, ITreeNode treeNode, ListNodeProperties listnodeproperties, Func`1<RichText> getText, IconId iconId);
    private static void Run(Action navigate);
    public static BeControl LineFromDeclaredElement(Lifetime lifetime, T element, ListNodeProperties listnodeproperties, IDeclaredElement declaredElement, IDeclaration declarationToNavigate);
    [ExtensionAttribute]
public static void SubscribeNavigation(ListNodeProperties listnodeproperties, Lifetime lifetime, IDeclaredElement declaredElement, IDeclaration declarationToNavigate);
    public static BeGrid LineFromProjectItem(Lifetime lifetime, ListNodeProperties listnodeproperties, IProjectItem projectItem);
    public static BeGrid LineFromProjectItem(Lifetime lifetime, ListNodeProperties listNodeProperties, IProjectItem projectItem, Func`2<IProjectItem, BeGrid> linePresenter);
    private static BeControl GetLinePresentation(IDeclaredElementPointer`1<IDeclaredElement> pointer);
    public static BeControl GetLinePresentation(IDeclaredElement declaredElement);
    public static ValueTuple`2<IconId, RichText> GetDeclaredElementPresentation(IDeclaredElement declaredElement);
    private static BeGrid GetLinePresentation(ITreeNodePointer`1<ITreeNode> pointer, Func`1<RichText> getText, IconId icon);
    public static BeGrid GetLinePresentation(IProjectItem projectItem);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.UI.Automation.CompletionBeTextBoxExtensions : object {
    private static int MaxSuggestionsTimeoutMilliseconds;
    public static bool CanInitCompletion { get; }
    [ExtensionAttribute]
public static BeTextBox WithTypeCompletion(BeTextBox model, ISolution solution, Lifetime lifetime, PsiLanguageType language, bool alltypes, Predicate`1<IDeclaredElement> extraFilter);
    [ExtensionAttribute]
public static BeTextBox WithNamespaceCompletion(BeTextBox model, ISolution solution, Lifetime lifetime, PsiLanguageType language);
    public static bool get_CanInitCompletion();
    [ExtensionAttribute]
public static BeTextBox WithNameCompletion(BeTextBox model, Lifetime lifetime, ISolution solution, PsiLanguageType language, IEnumerable`1<NameRoot> roots, NamingPolicy namingPolicy, IEnumerable`1<string> namesToExclude, AsyncNameItemsSupplier supplier);
    [ExtensionAttribute]
public static BeTextBox WithSimpleCompletion(BeTextBox model, Lifetime lifetime, IEnumerable`1<string> initialItems);
    [ExtensionAttribute]
public static BeTextBox WithSimpleCompletion(BeTextBox model, Lifetime lifetime, Func`2<string, IEnumerable`1<JetPopupMenuItem>> getItems, Action`1<InOutEventArgs`2<JetPopupMenuItem, string>> translateItem, AsyncNameItemsSupplier supplier, ISolution solution, PsiLanguageType language);
    [ExtensionAttribute]
public static BeTextBox WithSimpleCompletion(BeTextBox model, Lifetime lifetime, Func`2<string, IEnumerable`1<string>> getItems, AsyncNameItemsSupplier supplier, ISolution solution, PsiLanguageType language);
    [ExtensionAttribute]
public static BeTextBox WithSimpleKeyCompletion(BeTextBox model, Lifetime lifetime, Func`2<string, IEnumerable`1<ValueTuple`2<string, string>>> getItems);
    private static void InitCompletionWithCustomTranslate(BeTextBox model, Lifetime lifetime, CompletionPickerSettings completionPickerSettings, IShellLocks shellLocks, TranslateItemFunc fTranslateItem);
    private static void InitCompletion(BeTextBox model, Lifetime lifetime, CompletionPickerSettings completionPickerSettings, IShellLocks shellLocks, AsyncNameItemsSupplier supplier, ISolution solution, PsiLanguageType language);
    private static void UpdateCompletions(IShellLocks shellLocks, BeTextBox model, Lifetime lifetime, CompletionPickerSettings completionPickerSettings, CompletionPickerSettings settingsAsync, Func`2<JetPopupMenuItem, string> fTranslateItem);
    [ExtensionAttribute]
private static IEnumerable`1<JetPopupMenuItem> GetMenuItems(IEnumerable`1<string> items, IconId iconId);
    private static string GetFilterText(BeTextBox model, CompletionPickerSettings settings, int caretPosition);
    private static void InitCompletions(Lifetime lifetime, IShellLocks shellLocks, BeTextBox model, IconHostBase iconHost, IEnumerable`1<CompletionPickerSettings> completionsItems, Func`2<JetPopupMenuItem, string> fTranslateItem);
    private static string TranslateItem(CompletionPickerSettings model, JetPopupMenuItem menuItem);
    private static List`1<BeCompletionElement> ToRiderList(IconHostBase iconHost, IEnumerable`1<IGrouping`2<string, JetPopupMenuItem>> popupMenuItems, Func`2<JetPopupMenuItem, string> fTranslateItem);
    [ExtensionAttribute]
public static BeTextBox WithFolderCompletion(BeTextBox model, ISolution solution, Lifetime lifetime);
    [ExtensionAttribute]
public static BeTextBox WithSolutionRelativePathCompletion(BeTextBox model, ISolution solution, Lifetime lifetime);
    [ExtensionAttribute]
public static BeTextBox WithProjectItemCompletion(BeTextBox model, ISolution solution, Lifetime lifetime, PsiLanguageType language, IList`1<IProjectModelElement> rootElements, Func`2<IProjectFile, bool> suggestionFilter, Func`4<string, string, int, string> completionItemToTextConverter, Func`3<string, int, string> textToCompletionItemFilterConverter);
    private static bool CheckExtension(string name, string newFileExtension);
    [ExtensionAttribute]
public static BeTextBox WithFileCompletion(BeTextBox model, ISolution solution, Lifetime lifetime, string extensionWithDot, VirtualFileSystemPath folderLocation);
    [ExtensionAttribute]
public static BeTextBox WithFileCompletion(BeTextBox model, ISolution solution, Lifetime lifetime, FileSystemPath folderLocation, PsiLanguageType[] languages);
    private static void InitFileChooser(BeTextBox model, Lifetime lifetime, FileChooser fileChooser, IShellLocks shellLocks, FileSystemPath parentFolderLocation);
    [CompilerGeneratedAttribute]
internal static void <WithSimpleKeyCompletion>g__TranslateItem|10_1(InOutEventArgs`2<JetPopupMenuItem, string> item);
}
internal enum JetBrains.ReSharper.Feature.Services.UI.Automation.ConflictOptions : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("Show google translate")]
[IconAttribute("JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/Error")]
public static ConflictOptions GOOGLE_TRANSLATE;
    [IconAttribute("JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/Warning")]
[LocalizedDescriptionAttribute("Show related")]
public static ConflictOptions RELATED;
    [IconAttribute("JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/Create")]
public static ConflictOptions NONE;
}
internal enum JetBrains.ReSharper.Feature.Services.UI.Automation.DependenciesInMember : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("Used")]
public static DependenciesInMember USED;
    [LocalizedDescriptionAttribute("Used by")]
public static DependenciesInMember USED_BY;
    public static DependenciesInMember BOTH;
    public static DependenciesInMember NONE;
}
internal enum JetBrains.ReSharper.Feature.Services.UI.Automation.GhostOptions : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("Show google translate")]
public static GhostOptions Delegate;
    [LocalizedDescriptionAttribute("Show related")]
public static GhostOptions COPY;
    public static GhostOptions NONE;
}
internal class JetBrains.ReSharper.Feature.Services.UI.Automation.TestClassMember : object {
    [CompilerGeneratedAttribute]
private bool <Included>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private DependenciesInMember <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasConflict>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<ConflictOptions> <ConflictElements>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<ConflictOptions> <GhostComboElements>k__BackingField;
    [CompilerGeneratedAttribute]
private ConflictOptions <ConflictOption>k__BackingField;
    [CompilerGeneratedAttribute]
private GhostOptions <GhostOption>k__BackingField;
    public bool Included { get; public set; }
    public string Name { get; public set; }
    public DependenciesInMember Dependencies { get; public set; }
    public bool HasConflict { get; public set; }
    public ListEvents`1<ConflictOptions> ConflictElements { get; public set; }
    public ListEvents`1<ConflictOptions> GhostComboElements { get; public set; }
    public ConflictOptions ConflictOption { get; public set; }
    public GhostOptions GhostOption { get; public set; }
    public TestClassMember(string name);
    [CompilerGeneratedAttribute]
public bool get_Included();
    [CompilerGeneratedAttribute]
public void set_Included(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public DependenciesInMember get_Dependencies();
    [CompilerGeneratedAttribute]
public void set_Dependencies(DependenciesInMember value);
    [CompilerGeneratedAttribute]
public bool get_HasConflict();
    [CompilerGeneratedAttribute]
public void set_HasConflict(bool value);
    [CompilerGeneratedAttribute]
public ListEvents`1<ConflictOptions> get_ConflictElements();
    [CompilerGeneratedAttribute]
public void set_ConflictElements(ListEvents`1<ConflictOptions> value);
    [CompilerGeneratedAttribute]
public ListEvents`1<ConflictOptions> get_GhostComboElements();
    [CompilerGeneratedAttribute]
public void set_GhostComboElements(ListEvents`1<ConflictOptions> value);
    [CompilerGeneratedAttribute]
public ConflictOptions get_ConflictOption();
    [CompilerGeneratedAttribute]
public void set_ConflictOption(ConflictOptions value);
    [CompilerGeneratedAttribute]
public GhostOptions get_GhostOption();
    [CompilerGeneratedAttribute]
public void set_GhostOption(GhostOptions value);
    public void CalculateDependency();
    public void CalculateConflict();
}
internal class JetBrains.ReSharper.Feature.Services.UI.Automation.TestExtractClassData : object {
    [CompilerGeneratedAttribute]
private List`1<TestClassMember> <Members>k__BackingField;
    public List`1<TestClassMember> Members { get; }
    public TestExtractClassData(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public List`1<TestClassMember> get_Members();
    public BeTreeGrid GetTree(Lifetime lifetime, IIconHost iconHost);
}
public class JetBrains.ReSharper.Feature.Services.UI.ChooseProjectFolderController : GotoByNameController {
    [NotNullAttribute]
private ISolution mySolution;
    private ChooseProjectFolderController(Lifetime lifetime, ISolution solution, IShellLocks locks);
    public static CompletionPickerSettings ConfigureFolderChooser(Lifetime lifetime, IShellLocks locks, ISolution solution);
    public static IProjectFolder ParseFolderName(ISolution solution, string name);
    private void InitModel();
    protected virtual bool ExecuteItem(JetPopupMenuItem item, ISignal`1<bool> closeBeforeExecute);
    protected virtual bool UpdateItems(string filterString, Func`3<IEnumerable`1<JetPopupMenuItem>, AddItemsBehavior, bool> addItemsConsumer);
    public static string PresentInternal(IProjectFolder folder);
    public static bool FilterFolder(IProjectFolder projectFolder);
}
public class JetBrains.ReSharper.Feature.Services.UI.ChooseProjectItemController : GotoByNameController {
    private IList`1<IProjectModelElement> myRootElements;
    private Func`2<IProjectFile, bool> myFilterItem;
    private ChooseProjectItemController(Lifetime lifetime, IShellLocks locks, IList`1<IProjectModelElement> rootElements, Func`2<IProjectFile, bool> filterItem);
    public static CompletionPickerSettings ConfigureProjectItemChooser(Lifetime lifetime, IShellLocks locks, IList`1<IProjectModelElement> rootElements, Func`2<IProjectFile, bool> suggestionFilter);
    public static IProjectItem ParseItemName(ISolution solution, string name);
    private void InitModel();
    protected virtual bool ExecuteItem(JetPopupMenuItem item, ISignal`1<bool> closeBeforeExecute);
    protected virtual bool UpdateItems(string filterString, Func`3<IEnumerable`1<JetPopupMenuItem>, AddItemsBehavior, bool> addItemsConsumer);
    private bool FilterItem(IProjectItem projectItem);
    public static string PresentInternal(IProjectItem projectItem);
}
public class JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerSettings : object {
    [NotNullAttribute]
public Property`1<GotoByNameModel> CompletionModel;
    [CompilerGeneratedAttribute]
private Func`3<string, int, string> <RealTextToCompletionItemsFilterConverter>k__BackingField;
    public Signal`1<InOutEventArgs`2<object, List`1<object>>> ExpandPickerItem;
    [NotNullAttribute]
public IProperty`1<bool> IsSelectingAllTextOnCompletion;
    [NotNullAttribute]
public Property`1<StructuredPresenter`2<TreeModelNode, IPresentableItem>> PickerItemPresenter;
    [NotNullAttribute]
public Signal`1<InOutEventArgs`2<JetPopupMenuItem, string>> TranslateCompletionItem;
    [NotNullAttribute]
public Signal`1<InOutEventArgs`2<object, string>> TranslatePickerItem;
    [CanBeNullAttribute]
public Func`3<string, int, string> RealTextToCompletionItemsFilterConverter { get; public set; }
    public CompletionPickerSettings(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public Func`3<string, int, string> get_RealTextToCompletionItemsFilterConverter();
    [CompilerGeneratedAttribute]
public void set_RealTextToCompletionItemsFilterConverter(Func`3<string, int, string> value);
}
public abstract class JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser : object {
    [NotNullAttribute]
protected ICompletionGotoController myCompletionController;
    [NotNullAttribute]
private PsiLanguageType myLanguage;
    private LibrariesFlag myLibraries;
    [CanBeNullAttribute]
private IProject myProject;
    [NotNullAttribute]
private CompletionPickerSettings mySettings;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
public Property`1<Func`2<IDeclaredElement, bool>> CompletionItemsPassFilter;
    [NotNullAttribute]
public Property`1<Func`2<IDeclaredElement, bool>> PickerItemsPassFilter;
    protected Lifetime Lifetime;
    [NotNullAttribute]
public PsiLanguageType Language { get; }
    public LibrariesFlag Libraries { get; }
    [NotNullAttribute]
public CompletionPickerSettings Settings { get; }
    [NotNullAttribute]
public ISolution Solution { get; }
    protected DeclaredElementChooser(ISolution solution, IProject project, LibrariesFlag libraries, PsiLanguageType language, Func`1<ICompletionGotoController> FCreateCompletionController, Lifetime lifetime);
    public PsiLanguageType get_Language();
    public LibrariesFlag get_Libraries();
    public CompletionPickerSettings get_Settings();
    public ISolution get_Solution();
    protected static string GetFqName(IDeclaredElement de, PsiLanguageType language);
    protected virtual bool Filter(IDeclaredElement element);
    [NotNullAttribute]
protected ISymbolScope GetDeclarationsCache();
    [NotNullAttribute]
protected IEnumerable`1<IClrDeclaredElement> GetItems(IDeclaredElement element);
    [NotNullAttribute]
private IEnumerable`1<IClrDeclaredElement> GetNestedItems(IDeclaredElement element, ISymbolScope cache);
    protected virtual void InitCompletion(Func`1<ICompletionGotoController> FCreateCompletionController);
    protected void InitPicker();
    [CompilerGeneratedAttribute]
private bool <GetItems>b__21_0(IClrDeclaredElement declaredElement);
    [CompilerGeneratedAttribute]
private void <InitCompletion>b__23_0(PropertyChangedEventArgs`1<Func`2<IDeclaredElement, bool>> args);
    [CompilerGeneratedAttribute]
private void <InitCompletion>b__23_1(InOutEventArgs`2<JetPopupMenuItem, string> args);
    [CompilerGeneratedAttribute]
private void <InitPicker>b__24_0(InOutEventArgs`2<object, List`1<object>> args);
    [CompilerGeneratedAttribute]
private void <InitPicker>b__24_1(InOutEventArgs`2<object, string> args);
}
public class JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.TypeChooser : DeclaredElementChooser {
    public TypeChooser(Lifetime lifetime, ISolution solution, LibrariesFlag libraries, PsiLanguageType language, IShellLocks locks, IMainWindowPopupWindowContext mainWindowPopupWindowContext);
    [NotNullAttribute]
public static CompletionPickerSettings CreateSettings(Lifetime lifetime, ISolution solution, LibrariesFlag libraries, PsiLanguageType language, IShellLocks locks, IMainWindowPopupWindowContext mainWindowPopupWindowContext);
    [CanBeNullAttribute]
public ITypeElement TryGetTypeElement(string sFqName);
    [NotNullAttribute]
private static GotoTypeController CreateCompletionController(Lifetime lifetime, ISolution solution, LibrariesFlag librariesFlag, IShellLocks locks, IMainWindowPopupWindowContext mainWindowPopupWindowContext);
    protected virtual bool Filter(IDeclaredElement element);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.UI.DeclaredElementPresenterTextStylesService : object {
    [CompilerGeneratedAttribute]
private HighlighterFontsAndColorsCache <highlighterFontsAndColorsCache>P;
    public static string GENERAL_PURPOSE;
    public static string PARAMETER_INFO;
    public static string IDENTIFIER_TOOLTIP;
    [NotNullAttribute]
private Dictionary`2<string, Dictionary`2<Type, DeclaredElementPresenterTextStyles>> myMap;
    [NotNullAttribute]
private static DeclaredElementPresentationPartKind[] ourAllPresentationPartKinds;
    public DeclaredElementPresenterTextStylesService(HighlighterFontsAndColorsCache highlighterFontsAndColorsCache);
    private static DeclaredElementPresenterTextStylesService();
    [PureAttribute]
private DeclaredElementPresenterTextStyles TryGetTextStylesByExactLanguage(string purpose, PsiLanguageType language);
    public void SetTextStyles(Lifetime lifetime, string purpose, DeclaredElementPresenterTextStyles textStyles);
    public DeclaredElementPresenterTextStyles GetTextStyles(string purpose, PsiLanguageType primaryLanguage, PsiLanguageType projectLanguage, DeclaredElementPresenterTextStyles fallback);
    [PureAttribute]
private DeclaredElementPresenterTextStyles GetTextStylesImpl(string purpose, PsiLanguageType primaryLanguage, PsiLanguageType projectLanguage, DeclaredElementPresenterTextStyles fallback);
}
public class JetBrains.ReSharper.Feature.Services.UI.FileChooser : object {
    [NotNullAttribute]
private GotoFileController myCompletionController;
    [NotNullAttribute]
private CompletionPickerSettings mySettings;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
public Property`1<Func`2<IProjectItem, bool>> CompletionItemsPassFilter;
    [NotNullAttribute]
public Property`1<Func`2<IProjectItem, bool>> PickerItemsPassFilter;
    private IMainWindowPopupWindowContext myMainWindowPopupWindowContext;
    [NotNullAttribute]
public CompletionPickerSettings Settings { get; }
    [NotNullAttribute]
public ISolution Solution { get; }
    public FileChooser(Lifetime lifetime, ISolution solution, IShellLocks locks, IMainWindowPopupWindowContext mainWindowPopupWindowContext);
    public CompletionPickerSettings get_Settings();
    public ISolution get_Solution();
    private static void InitPicker();
    [NotNullAttribute]
protected GotoFileController CreateCompletionController(Lifetime lifetime);
    protected void InitCompletion(Lifetime lifetime, IShellLocks locks);
    protected void RestrictItemsPassFilter(Func`2<IProjectItem, bool> funcAdd);
    private bool DefaultFilter(IProjectItem item);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.UI.HighlighterColorCacheEx : object {
    [ExtensionAttribute]
public static DeclaredElementPresenterTextStyles AdjustTextStyles(HighlighterFontsAndColorsCache highlighterFontsAndColorsCache, DeclaredElementPresenterTextStyles textStyles);
}
public interface JetBrains.ReSharper.Feature.Services.UI.ILanguageSpecificNamespaceFilter {
    public abstract virtual bool NamespaceFilter(IDeclaredElement element);
}
public class JetBrains.ReSharper.Feature.Services.UI.NamespaceChooser : DeclaredElementChooser {
    public NamespaceChooser(Lifetime lifetime, ISolution solution, IProject project, LibrariesFlag libraries, PsiLanguageType language, IShellLocks locks, IMainWindowPopupWindowContext mainWindowPopupWindowContext);
    [NotNullAttribute]
public static CompletionPickerSettings CreateSettings(Lifetime lifetime, ISolution solution, IProject project, LibrariesFlag libraries, PsiLanguageType language, IShellLocks locks, IMainWindowPopupWindowContext mainWindowPopupWindowContext);
    [CanBeNullAttribute]
public INamespace TryGetNamespace(string sFqName);
    private static GotoNamespaceController CreateCompletionController(Lifetime lifetime, ISolution solution, LibrariesFlag librariesFlag, IShellLocks locks, IMainWindowPopupWindowContext mainWindowPopupWindowContext);
}
public static class JetBrains.ReSharper.Feature.Services.UI.Validation.BeValidation : object {
    public static ValueTuple`3<string, IconModel, ValidationStates> DefaultPassedValidation;
    public static ValueTuple`2<string, ValidationStates> DefaultPassedValidationNoIcon;
    private static BeValidation();
    public static ValueTuple`3<string, IconModel, ValidationStates> GetError(string error);
    public static ValueTuple`3<string, IconModel, ValidationStates> GetWarning(string error);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.UI.Validation.TextDataEx : object {
    [ExtensionAttribute]
public static ITypeElement TryGetTypeElement(IProperty`1<string> targetTextModel, PsiLanguageType psiLanguageType, ISolution solution);
    [NotNullAttribute]
private static ISymbolScope GetDeclarationsCache(ISolution solution);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.UI.Validation.TextDataValidationEx : object {
    [ExtensionAttribute]
public static IconModel GetIcon(ValidationStates states, IconHostBase iconHostBase);
    [ExtensionAttribute]
public static TControlType WithTextNotEmpty(TControlType model, Lifetime lifetime, IconModel icon, ValidationStates states, Func`2<TControlType, IViewableProperty`1<string>> getPropertyForRule);
    [ExtensionAttribute]
public static TControlType WithValidIdentifier(TControlType model, IDeclaredElement declaredElement, Lifetime lifetime, ValidationStates states, Func`2<TControlType, IViewableProperty`1<string>> getPropertyForRule);
    [ExtensionAttribute]
public static TControlType WithValidName(TControlType model, Lifetime lifetime, IconModel icon, ValidationStates states, Func`2<TControlType, IViewableProperty`1<string>> getPropertyForRule);
    [ExtensionAttribute]
public static TControlType WithValidName(TControlType model, PsiLanguageType language, Lifetime lifetime, IconModel icon, DeclaredElementType type, ValidationStates states, Func`2<TControlType, IViewableProperty`1<string>> getPropertyForRule);
    [ExtensionAttribute]
public static TControlType WithValidNameWithDots(TControlType model, PsiLanguageType language, Lifetime lifetime, IconModel icon, DeclaredElementType type, ValidationStates states, Func`2<TControlType, IViewableProperty`1<string>> getPropertyForRule);
    [ExtensionAttribute]
public static TControlType WithValidPath(TControlType model, Lifetime lifetime, IconModel icon, ValidationStates states, Func`2<TControlType, IViewableProperty`1<string>> getPropertyForRule);
    [ExtensionAttribute]
public static TControlType WithValidFileName(TControlType model, Lifetime lifetime, IconModel icon, bool onlyShortName, ValidationStates states, Func`2<TControlType, IViewableProperty`1<string>> getPropertyForRule, string errorMessagePrefix);
    [ExtensionAttribute]
public static TControlType WithAllowedExtensions(TControlType model, PsiLanguageType[] languages, Lifetime lifetime, IconModel icon, ValidationStates states, Func`2<TControlType, IViewableProperty`1<string>> getPropertyForRule);
    [ExtensionAttribute]
public static TControlType WithAllowedExtensions(TControlType model, String[] extensions, Lifetime lifetime, IconModel icon, ValidationStates states, Func`2<TControlType, IViewableProperty`1<string>> getPropertyForRule);
    [ExtensionAttribute]
public static TControlType WithAllowedExtensions(TControlType model, string extension, Lifetime lifetime, IconModel icon, ValidationStates states, Func`2<TControlType, IViewableProperty`1<string>> getPropertyForRule);
    [ExtensionAttribute]
public static TControlType WithExistingFolder(TControlType model, ISolution solution, Lifetime lifetime, ValidationStates states, Func`2<TControlType, IViewableProperty`1<string>> getPropertyForRule);
    private static IProjectFolder GetFirstExistingFolder(Int32& i, ISolution solution, IList`1<StringSlice> name);
    [ExtensionAttribute]
public static TControlType WithFolderExistsOrMustBeCreated(TControlType model, ISolution solution, Lifetime lifetime, Func`2<TControlType, IViewableProperty`1<string>> getPropertyForRule);
    [ExtensionAttribute]
public static TControlType WithFileExistsOrMustBeCreated(TControlType model, ISolution solution, Lifetime lifetime, IProjectFolder parentFolder, Func`2<TControlType, IViewableProperty`1<string>> getPropertyForRule);
    [ExtensionAttribute]
public static TControlType WithExistingFile(TControlType model, ISolution solution, Lifetime lifetime, ValidationStates states, Func`2<TControlType, IViewableProperty`1<string>> getPropertyForRule);
    [ExtensionAttribute]
public static TControlType WithExistingFiles(TControlType model, ISolution solution, Lifetime lifetime, ValidationStates states, Func`2<TControlType, IViewableProperty`1<string>> getPropertyForRule);
    [ExtensionAttribute]
public static TControlType WithFileCanBeCreated(TControlType model, ISolution solution, Lifetime lifetime, ValidationStates states, Func`2<TControlType, IViewableProperty`1<string>> getPropertyForRule);
    [ExtensionAttribute]
public static TControlType WithDifferentText(TControlType model, string initialText, Lifetime lifetime, IconModel icon, ValidationStates states, Func`2<TControlType, IViewableProperty`1<string>> getPropertyForRule, bool checkFirstValue);
    [ExtensionAttribute]
public static TControlType WithUniqueTypeElement(TControlType model, ISolution solution, string namespace, Lifetime lifetime, ValidationStates states, Func`2<TControlType, IViewableProperty`1<string>> getPropertyForRule);
    [ExtensionAttribute]
public static TControlType WithUniqueTypeElement(TControlType model, ISolution solution, Lifetime lifetime, Func`2<string, string> makeFqn, ValidationStates states, Func`2<TControlType, IViewableProperty`1<string>> getPropertyForRule);
    [ExtensionAttribute]
public static TControlType WithUniqueNamespace(TControlType model, ISolution solution, Lifetime lifetime, ValidationStates states, Func`2<TControlType, IViewableProperty`1<string>> getPropertyForRule);
    [ExtensionAttribute]
public static TControlType WithUniqueTypeElementInNamespace(TControlType model, ISolution solution, string typeName, Lifetime lifetime, ValidationStates states, Func`2<TControlType, IViewableProperty`1<string>> getPropertyForRule);
    [ExtensionAttribute]
public static TControlType WithExistingElement(TControlType model, ISolution solution, Lifetime lifetime, PsiLanguageType languageType, IPsiModule psiModule, ValidationStates states, Func`2<TControlType, IViewableProperty`1<string>> getPropertyForRule);
    [ExtensionAttribute]
public static TControlType WithUniqueTypeMember(TControlType model, ITypeElement owner, Lifetime lifetime, string excludedName, ValidationStates states, Func`2<TControlType, IViewableProperty`1<string>> getPropertyForRule);
    [ExtensionAttribute]
public static TControlType WithNonExistingPath(TControlType model, ISolution solution, IProjectFolder folder, FileSystemPath path, Lifetime lifetime, ValidationStates states, Func`2<TControlType, IViewableProperty`1<string>> getPropertyForRule);
}
public static class JetBrains.ReSharper.Feature.Services.UI.Validation.ValidationIcons : object {
    private static IconModel myErrorIcon;
    private static IconModel myWarningIcon;
    public static IconModel Warning { get; }
    public static IconModel Error { get; }
    public static IconModel get_Warning();
    public static IconModel get_Error();
    private static IconModel GetIcon(IconId iconId);
}
public interface JetBrains.ReSharper.Feature.Services.UnitTesting.IUnitTestingCategoriesAttributeProvider {
    [NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<IClrTypeName> CategoryAttributes { get; }
    public abstract virtual IEnumerable`1<IClrTypeName> get_CategoryAttributes();
}
public interface JetBrains.ReSharper.Feature.Services.UnitTesting.IUnitTestingCategoriesProvider {
    public IEnumerable`1<string> Categories { get; }
    public IEnumerable`1<IClrTypeName> AttributeTypes { get; }
    public IconId Image { get; }
    public abstract virtual IEnumerable`1<string> get_Categories();
    public abstract virtual IEnumerable`1<IClrTypeName> get_AttributeTypes();
    public abstract virtual IconId get_Image();
}
[ActionGroupAttribute("UnitTestSession.ActionBar", "1", "16")]
public class JetBrains.ReSharper.Feature.Services.UnitTesting.Menu.UnitTestSessionToolbar : object {
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Unity.FUS.SimpleUnityProjectTechnologyProvider : object {
    [CompilerGeneratedAttribute]
private SimpleUnitySolutionTracker <simpleUnitySolutionTracker>P;
    public SimpleUnityProjectTechnologyProvider(SimpleUnitySolutionTracker simpleUnitySolutionTracker);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Unity.FUS.SimpleUnityProjectTechnologyProvider/<GetProjectTechnology>d__2")]
public sealed virtual IEnumerable`1<string> GetProjectTechnology(IProject project);
}
public interface JetBrains.ReSharper.Feature.Services.Unity.IUnitySolutionInformation {
    public abstract virtual bool IsUnitySolution();
    public abstract virtual string GetUnityVersion();
    public abstract virtual IEnumerable`1<string> GetPackages();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Unity.SimpleUnitySolutionTracker : object {
    public static string AssetsFolder;
    public static string PackagesFolder;
    public static string ProjectSettingsFolder;
    public static string LibraryFolder;
    private ISolution mySolution;
    public ViewableProperty`1<bool> IsUnityProjectFolder;
    public ViewableProperty`1<bool> IsUnityProject;
    public SimpleUnitySolutionTracker(ISolution solution);
    private void SetValues();
    private static bool HasUnityFileStructure(VirtualFileSystemPath solutionDir);
    private static bool HasLibraryFolder(VirtualFileSystemPath solutionDir);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Util.AddNewItemHelper : object {
    protected DocumentToProjectFileMappingStorage DocumentToProjectFileMappingStorage;
    protected IDocumentStorageHelpers DocumentStorageHelpers;
    public AddNewItemHelper(DocumentToProjectFileMappingStorage documentToProjectFileMappingStorage, IDocumentStorageHelpers documentStorageHelpers);
    public static string SuggestDerivedName(IProjectFolder projectFolder, string baseFileName);
    public static IProjectFile AddFile(IProjectFolder parentFolder, string fileName, string fileText, FileCreationParameters parameters, IFileCreationContext context);
    public static IProjectFile AddFile(ProjectFolderWithLocation parentFolder, string fileName, string fileText, FileCreationParameters parameters, IFileCreationContext context);
    public static IProjectFile AddFileOrThrow(ProjectFolderWithLocation folder, string fileName, string fileText, FileCreationParameters parameters, IFileCreationContext context);
    protected virtual IProjectFile AddFileOrThrowInternal(ProjectFolderWithLocation folder, string fileName, string fileText, FileCreationParameters parameters, IFileCreationContext context);
    protected virtual void SetPathText(VirtualFileSystemPath path, string fileText, Encoding overrideEncoding);
    protected virtual void WriteText(VirtualFileSystemPath path, string fileText);
    protected virtual IProjectFile CreateNewFile(IProjectFolder folder, VirtualFileSystemPath filePath, string fileText, FileCreationParameters parameters, IFileCreationContext context);
    protected virtual void EnsureCreateFileText(string fileText, IProjectFile file);
}
public static class JetBrains.ReSharper.Feature.Services.Util.AssemblyVersionUtil : object {
    private static Version ourDefaultVersion;
    private static AssemblyVersionUtil();
    [NotNullAttribute]
public static string GetRuntime(IAssemblyLocation assemblyLocation, Boolean& isValid);
    [NotNullAttribute]
public static string GetRuntime(IAssemblyFile assemblyFile);
    [NotNullAttribute]
private static string GetTargetPlatform(IAssemblyFile assemblyFile);
    [NotNullAttribute]
public static string GetTargetFrameworkShortName(TargetFrameworkId targetFrameworkId);
    private static string Combine(String[] strings);
    [NotNullAttribute]
public static string PresentName(AssemblyNameInfo assemblyName);
    [NotNullAttribute]
public static string PresentVersion(AssemblyNameInfo assemblyName);
    [NotNullAttribute]
public static string PresentNameAndVersion(AssemblyNameInfo assemblyName);
    [NotNullAttribute]
public static string PresentNameAndVersion(IAssemblyFile assemblyFile);
    [NotNullAttribute]
public static string PresentVersionPlatformFramework(IAssemblyFile assemblyFile);
    [NotNullAttribute]
public static string PresentNameVersionPlatformFramework(IAssemblyFile assemblyFile);
    [NotNullAttribute]
public static string PresentVersionPlatformFrameworkGac(IAssemblyFile assemblyFile, FrameworkLocationService frameworkLocationService);
    [NotNullAttribute]
public static string PresentNameVersionPlatformFrameworkGac(IAssemblyFile assemblyFile, FrameworkLocationService frameworkLocationService);
    public static bool IsFromGac(VirtualFileSystemPath assemblyPath, FrameworkLocationService frameworkLocationService);
    [NotNullAttribute]
public static string PresentVersionPlatformGacConfigurationNativeImageType(IAssemblyFile assemblyFile, FrameworkLocationService frameworkLocationService, IAssemblyInfoDatabase assemblyInfoDatabase);
    public static string PresentConfiguration(IAssemblyFile assemblyFile, IAssemblyInfoDatabase assemblyInfoDatabase);
    private static string PresentNativeImageType(IAssemblyFile assemblyFile);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Util.BaseClassUtil : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IEnumerable`1<IReference> GetBaseDeclarationsReferences(ITypeDeclaration declaration);
}
public class JetBrains.ReSharper.Feature.Services.Util.CachingFinder : object {
    private IPsiServices myPsiServices;
    private ElementPointerMap`1<IList`1<IReferencePointer>> myFindUsagesCache;
    private ElementPointerMap`1<IList`1<FindResultOverridableMemberCache>> myImmediateInheritanceCache;
    private ElementPointerMap`1<IList`1<FindResultOverridableMemberCache>> myInheritanceCache;
    public IFinder Finder { get; }
    public CachingFinder(IPsiServices psiServices, ISearchDomain domain);
    public IFinder get_Finder();
    [CanBeNullAttribute]
public IFinderOperation CreateFindUsagesOperation(ICollection`1<IDeclaredElement> elements, IProgressIndicator pi, IFindResultConsumer`1<TResult> consumer);
    [ObsoleteAttribute("Use overload with IFinderOperation")]
public List`1<IFindResultReference> FindUsages(ICollection`1<IDeclaredElement> elements, IProgressIndicator pi);
    public List`1<FindResultOverridableMember> FindImmediateImplementingMembers(IOverridableMember overridableMember, IProgressIndicator pi);
    public List`1<FindResultOverridableMember> FindImplementingMembers(IOverridableMember overridableMember, IProgressIndicator pi);
    private void AssertAll();
}
public static class JetBrains.ReSharper.Feature.Services.Util.CandidatesUtil : object {
    [NotNullAttribute]
public static ICollection`1<IDeclaredElement> GetCandidates(IReference reference, ReferencePreferenceKind preferenceKind);
    [NotNullAttribute]
public static IReference[] SelectGoodReferences(ICollection`1<IReference> references);
    [NotNullAttribute]
public static IList`1<DeclaredElementInstance> GetCandidateInstances(ReferencePreferenceKind preferenceKind, IDataContext dataContext, IReference[] references);
    [NotNullAttribute]
public static IList`1<DeclaredElementInstance> GetCandidateInstances(ReferencePreferenceKind preferenceKind, IEnumerable`1<DeclaredElementInstance> instances, IDataContext dataContext);
    [NotNullAttribute]
private static ResolveResultWithInfo ResolveWithReferenceContext(IReference reference);
    public static void GetCurrentReferenceLocation(IDataContext context, IProjectFile& projectFile, TextRange& textRange);
    public static bool MatchOccurrence(IOccurrence occurrence, IProjectFile currentProjectFile, TextRange currentTextRange);
    public static bool GetCurrentLocation(IDataContext context, IProjectFile& currentProjectFile, TextRange& currentTextRange);
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Feature.Services.Util.ClrLanguages.FormatArgumentInfo : ValueType {
    [CompilerGeneratedAttribute]
private TreeTextRange <ToStringRange>k__BackingField;
    [CompilerGeneratedAttribute]
private IExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormatSpecifier>k__BackingField;
    public TreeTextRange ToStringRange { get; }
    [NotNullAttribute]
public IExpression Expression { get; }
    [CanBeNullAttribute]
public string FormatSpecifier { get; }
    public FormatArgumentInfo(IExpression expression, string formatSpecifier, TreeTextRange toStringRange);
    public FormatArgumentInfo(IExpression expression);
    [CompilerGeneratedAttribute]
public TreeTextRange get_ToStringRange();
    [CompilerGeneratedAttribute]
public IExpression get_Expression();
    [CompilerGeneratedAttribute]
public string get_FormatSpecifier();
}
public abstract class JetBrains.ReSharper.Feature.Services.Util.ClrLanguages.FormatInvocationArgumentHelperBase : object {
    public sealed virtual FormatArgumentInfo GetArgumentInfo(IExpression expression);
    public sealed virtual void AppendToInterpolation(IStringInterpolationBuilder interpolationBuilder, FormatArgumentInfo formatArgumentInfo);
    public sealed virtual void AppendToInterpolation(IStringInterpolationBuilder interpolationBuilder, FormatArgumentInfo formatArgumentInfo, int alignment);
    [CanBeNullAttribute]
protected abstract virtual IExpression TryGetQualifierExpression(IArgumentsOwner argumentsOwner);
    protected abstract virtual TreeTextRange GetToStringRange(IExpression expression);
    protected abstract virtual bool CanBecomeStringLiteral(IExpression expression);
}
public class JetBrains.ReSharper.Feature.Services.Util.ClrLanguages.FormattingFunctionInvocationInfo : object {
    [CompilerGeneratedAttribute]
private IFunctionInvocationClrWrapper <Invocation>k__BackingField;
    [CompilerGeneratedAttribute]
private IStringConcatenationClrWrapper <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IExpression> <FormattingExpressions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IArgument> <FormattingArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private IArgument <CustomFormatProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FormatStringArgumentIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasCustomFormatProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasExplicitParamArrayArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanHavePositionalArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanHaveFormattingArguments>k__BackingField;
    [NotNullAttribute]
public IFunctionInvocationClrWrapper Invocation { get; }
    [NotNullAttribute]
public IStringConcatenationClrWrapper FormatString { get; }
    [NotNullAttribute]
[ItemCanBeNullAttribute]
public IReadOnlyList`1<IExpression> FormattingExpressions { get; }
    [NotNullAttribute]
public IReadOnlyList`1<IArgument> FormattingArguments { get; }
    [CanBeNullAttribute]
public IArgument CustomFormatProvider { get; }
    public int FormatStringArgumentIndex { get; }
    public bool HasCustomFormatProvider { get; }
    public bool HasExplicitParamArrayArgument { get; }
    public bool CanHavePositionalArguments { get; }
    public bool CanHaveFormattingArguments { get; }
    internal FormattingFunctionInvocationInfo(IFunctionInvocationClrWrapper invocation, IStringConcatenationClrWrapper formatString, IReadOnlyList`1<IExpression> formattingExpressions, IReadOnlyList`1<IArgument> formattingArguments, IArgument customFormatProvider, int formatStringArgumentIndex, bool hasCustomFormatProvider, bool hasExplicitParamArrayArgument, bool canHavePositionalArguments, bool canHaveFormattingArguments);
    [CompilerGeneratedAttribute]
public IFunctionInvocationClrWrapper get_Invocation();
    [CompilerGeneratedAttribute]
public IStringConcatenationClrWrapper get_FormatString();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IExpression> get_FormattingExpressions();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IArgument> get_FormattingArguments();
    [CompilerGeneratedAttribute]
public IArgument get_CustomFormatProvider();
    [CompilerGeneratedAttribute]
public int get_FormatStringArgumentIndex();
    [CompilerGeneratedAttribute]
public bool get_HasCustomFormatProvider();
    [CompilerGeneratedAttribute]
public bool get_HasExplicitParamArrayArgument();
    [CompilerGeneratedAttribute]
public bool get_CanHavePositionalArguments();
    [CompilerGeneratedAttribute]
public bool get_CanHaveFormattingArguments();
    public bool IsStringFormatInvocation();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Util.ClrLanguages.FormattingFunctionInvocationInfoProvider : MessageTemplateInvocationInfoProvider {
    [NotNullAttribute]
private StringFormatAnnotationProvider myStringFormatAnnotationProvider;
    public FormattingFunctionInvocationInfoProvider(StringFormatAnnotationProvider stringFormatAnnotationProvider, ILanguageManager languageManager);
    public virtual FormattingFunctionInvocationInfo TryGetByExpression(IArgumentsOwner argumentsOwner);
    [CompilerGeneratedAttribute]
private ValueTuple`2<IParameter, bool> <TryGetByExpression>b__2_0(IParametersOwner parametersOwner);
}
public interface JetBrains.ReSharper.Feature.Services.Util.ClrLanguages.IFormatInvocationArgumentHelper {
    [PureAttribute]
public abstract virtual FormatArgumentInfo GetArgumentInfo(IExpression expression);
    public abstract virtual void AppendToInterpolation(IStringInterpolationBuilder interpolationBuilder, FormatArgumentInfo formatArgumentInfo);
    public abstract virtual void AppendToInterpolation(IStringInterpolationBuilder interpolationBuilder, FormatArgumentInfo formatArgumentInfo, int alignment);
}
public abstract class JetBrains.ReSharper.Feature.Services.Util.ClrLanguages.MessageTemplateInvocationInfoProvider : object {
    [NotNullAttribute]
private ILanguageManager myLanguageManager;
    protected MessageTemplateInvocationInfoProvider(ILanguageManager languageManager);
    [CanBeNullAttribute]
public abstract virtual FormattingFunctionInvocationInfo TryGetByExpression(IArgumentsOwner argumentsOwner);
    protected FormattingFunctionInvocationInfo TryGetByExpression(IArgumentsOwner argumentsOwner, Func`2<IParametersOwner, ValueTuple`2<IParameter, bool>> getTemplateParameter);
    private static bool CanHaveFormattingArguments(int formatStringParameterIndex, IList`1<IParameter> parameters);
    [NotNullAttribute]
[PureAttribute]
private static IReadOnlyList`1<IArgument> FormattingExpressions(IArgumentsOwner argumentsOwner, IParametersOwner invokedFunction, IList`1<IParameter> parameters, int firstFormatArgumentIndex, Boolean& hasExplicitParamArrayArgument);
    [CanBeNullAttribute]
private static IParameter GetFormatProviderParameter(ITreeNode context, IList`1<IParameter> parameters, int formatStringParameterIndex, Int32& formatStringArgumentsIndex);
    [CanBeNullAttribute]
private static IArgument GetArgumentByParameter(IFunctionInvocationClrWrapper invocation, IParameter parameter);
}
public abstract class JetBrains.ReSharper.Feature.Services.Util.ClrLanguages.PassFormatStringHelperBase : object {
    public virtual bool CanRewriteFormattingInvocation(FormattingFunctionInvocationInfo invocationInfo, ISolution solution, bool allowCustomFormattingMethods);
    public sealed virtual bool CanPassFormatString(FormattingFunctionInvocationInfo invocationInfo, ISolution solution, bool allowInterpolatedStringHandlerOnly);
    public sealed virtual bool CanPassInterpolation(FormattingFunctionInvocationInfo invocationInfo, ISolution solution, bool allowInterpolatedStringHandlerOnly);
    public sealed virtual void RemoveFormattingArguments(FormattingFunctionInvocationInfo invocationInfo);
    public sealed virtual void RemoveFormattingArguments(IReadOnlyList`1<IExpression> argumentExpressions);
    protected void RemoveArgumentExpression(IExpression argumentExpression);
    public abstract virtual IMethod GetNonFormattingMethod(FormattingFunctionInvocationInfo invocationInfo, ISolution solution, bool withoutCustomFormatProvider, bool allowInterpolatedStringHandlerOnly);
    public abstract virtual bool IsResolvedWithNewMethod(FormattingFunctionInvocationInfo invocationInfo, IMethod suggestedMethod, IReadOnlyList`1<IArgument> removingArguments, bool allowInterpolatedStringHandlerOnly);
    protected abstract virtual void RemoveArgument(IArgument argument);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Util.ClrLanguages.StructuredMessageTemplateFunctionInvocationInfoProvider : MessageTemplateInvocationInfoProvider {
    [NotNullAttribute]
private StringFormatAnnotationProvider myStringFormatAnnotationProvider;
    public StructuredMessageTemplateFunctionInvocationInfoProvider(StringFormatAnnotationProvider stringFormatAnnotationProvider, ILanguageManager languageManager);
    public virtual FormattingFunctionInvocationInfo TryGetByExpression(IArgumentsOwner argumentsOwner);
    [CompilerGeneratedAttribute]
private ValueTuple`2<IParameter, bool> <TryGetByExpression>b__2_0(IParametersOwner parametersOwner);
}
public class JetBrains.ReSharper.Feature.Services.Util.CLRTypeAnchorSerializer : object {
    private sealed virtual override string JetBrains.ReSharper.Feature.Services.Util.ITypeAnchorSerializer.Serialize(TypeAnchor typeAnchor);
    [CanBeNullAttribute]
public string Serialize(TypeAnchor typeAnchor, ISymbolScope cache);
    public sealed virtual TypeAnchor Deserialize(string sFullyQualifiedName);
}
public static class JetBrains.ReSharper.Feature.Services.Util.CodeInsightUtil : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Util.CodeInsightUtil/<EnumerateElementsUp>d__0")]
public static IEnumerable`1<ITreeNode> EnumerateElementsUp(ITextControl textControl, ISolution solution);
    public static bool IsObsolete(IDeclaredElement declaredElement);
    public static bool IsBrowsable(IDeclaredElement declaredElement, bool showNever, bool showAdvanced);
    [NotNullAttribute]
public static IEnumerable`1<string> SuggestNames(IFile file, NamedElementKinds namingEntityKind, IEnumerable`1<IType> types, IEnumerable`1<NameRoot> defaultNames);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Util.CodeInsightUtil/<SuggestNames>d__4")]
[NotNullAttribute]
public static IEnumerable`1<string> SuggestNames(IFile file, TreeOffset offset, NamedElementKinds namingEntityKind, IEnumerable`1<IType> types, IEnumerable`1<NameRoot> defaultRoots, bool longerNamesFirst);
    public static string GetName(NamingManager namingManager, IType type, NameRoot root, bool longerNamesFirst, NamedElementKinds namingEntityKind, ITreeNode context, List`1<string> alreadySuggested, ScopeKind scopeKind);
}
[ShellComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Util.CommentActionUtil : object {
    private ILanguageManager myLanguageManager;
    private HostAutoFormatSettings myHostAutoFormatSettings;
    private ICommandProcessor myCommandProcessor;
    private UsageStatistics myUsageStatistics;
    private Lifetime myLifetime;
    public CommentActionUtil(ILanguageManager languageManager, HostAutoFormatSettings hostAutoFormatSettings, ICommandProcessor commandProcessor, UsageStatistics usageStatistics, Lifetime lifetime);
    [NotNullAttribute]
[ItemCanBeNullAttribute]
public Pair`2<ILineCommentActionProvider, IFile> GetLineCommentProvider(ITextControl textControl, IProjectFile projectFile);
    [NotNullAttribute]
[ItemCanBeNullAttribute]
public Pair`2<ILineCommentActionProvider, IFile> GetLineCommentProvider(DocumentRange selection, IProjectFile projectFile);
    [NotNullAttribute]
[ItemCanBeNullAttribute]
public Pair`2<IBlockCommentActionProvider, IFile> GetBlockCommentProvider(ITextControl textControl, IProjectFile projectFile);
    [NotNullAttribute]
[ItemCanBeNullAttribute]
public Pair`2<IBlockCommentActionProvider, IFile> GetBlockCommentProvider(DocumentRange selection, IProjectFile projectFile, bool strictAvailability);
    public void Execute(ILineCommentActionProvider commentProvider, IFile file, ITextControl textControl, IProjectFile projectFile, bool uncommentAdjacentLines, bool moveCaretToNextLine);
    public void Execute(ILineCommentActionProvider commentProvider, IFile file, ITextControl textControl, IProjectFile projectFile, DocumentRange selection, bool uncommentAdjacentLines, bool fixCaretPosition, bool moveCaretToNextLine);
    private DocumentRange GetShortestTokenDocumentRange(DocumentOffset offset, IFile file, ISolution solution, ITextControl textControl);
    private static void UpdateMinIndentInsideComment(IDocument document, DocumentRange commentRange, int startCommentLength, Int32& minIndentInsideComment);
    public void Execute(IBlockCommentActionProvider commentActionProvider, IFile file, ITextControl textControl, IProjectFile projectFile);
    public void Execute(IBlockCommentActionProvider commentActionProvider, IFile file, ITextControl textControl, IProjectFile projectFile, DocumentRange selection);
    private static DocumentRange GetSelectedOrCollapsedRange(ITextControl textControl);
    private static DocumentRange GetLineRange(IDocument document, Int32`1<DocLine> line);
    private static DocumentOffset UpdateOffsetOnRangeDeleted(DocumentRange range, DocumentOffset o);
    private static DocumentOffset UpdateOffsetOnRangeInserted(DocumentOffset insertOffset, int textLength, DocumentOffset o);
    private static void DeleteText(ITextControl textControl, DocumentRange range, DocumentOffset& o2, DocumentOffset& o3, StringBuilder& sb, DocumentOffset& currentNewTextEnd);
    private static void InsertText(ITextControl textControl, DocumentOffset insertOffset, string text, DocumentOffset& o2, DocumentOffset& o3, StringBuilder& sb, DocumentOffset& currentNewTextEnd);
    private static void FixNestedBlocksWhileComment(IDocument document, DocumentRange range, IBlockCommentActionProvider provider, DocumentOffset& caretPos);
    private static string FixNestedMarkersWhileComment(string commentedText, IBlockCommentActionProvider provider);
    private static string FixNestedMarkerWhileComment(string commentedText, string commentMarker, string nestedCommentMarker);
    private static void FixNestedBlocksWhileUncomment(IDocument document, DocumentRange range, IBlockCommentActionProvider provider, DocumentOffset& caretPos);
    private static string FixNestedMarkersWhileUncomment(string commentedText, IBlockCommentActionProvider provider);
    private static string FixNestedMarkerWhileUncomment(string commentedText, string commentMarker, string nestedCommentMarker);
    private static DocumentOffset DeleteText(IDocument document, DocumentRange range, DocumentOffset caretPos);
    private static bool CheckLineStart(ITextControl editor, DocumentOffset& offset, String& indent, bool endPos, bool allowCommentsAtLineStart, bool preferToPlaceOnNewLine, DocumentOffset limit);
    private static string GetNextLineIndent(ITextControl editor, Int32`1<DocLine> line, DocumentOffset& offset, DocumentOffset limit);
    private static string GetPrevLineIndent(ITextControl editor, Int32`1<DocLine> line, DocumentOffset& offset, DocumentOffset limit);
    private static DocumentOffset SkipSpaces(DocumentOffset indentPos, DocumentOffset length, IBuffer buffer);
}
public class JetBrains.ReSharper.Feature.Services.Util.Comparers.OccurrenceComparer : TreeModelBrowserComparer {
    public OccurrenceComparer(IProjectPresentablePathProvider provider);
    private void Init();
    private int CompareStringInCompiledElementOccurrence(StringInCompiledElementOccurrence x, StringInCompiledElementOccurrence y);
    private int CompareCompiledElementOccurrence(CompiledElementOccurrence x, CompiledElementOccurrence y);
    private int CompareOccurrence(IOccurrence x, IOccurrence y);
    private int CompareAssemblyReferenceOccurrences(ModuleReferenceOccurrence x, ModuleReferenceOccurrence y);
    private int CompareArrayModuleReferenceOccurrences(ModuleReferenceOccurrence[] x, ModuleReferenceOccurrence[] y);
    private int ComparePackageReferenceOccurrences(PackageReferenceOccurrence x, PackageReferenceOccurrence y);
    private int CompareKind(OccurrenceKind x, OccurrenceKind y);
    private int CompareNuGetIds(NugetId[] x, NugetId[] y);
    private int CompareNuGetId(NugetId x, NugetId y);
    protected virtual object Unwrap(object wrapper);
    public sealed virtual int Compare(IOccurrence x, IOccurrence y);
}
public class JetBrains.ReSharper.Feature.Services.Util.Comparers.ProjectItemComparer : object {
    public static ProjectItemComparer Instance;
    private static ProjectItemComparer();
    public sealed virtual int Compare(IProjectItem x, IProjectItem y);
    private IProjectItem MoveUp(int delta, IProjectItem projectItem);
    private int GetPathLength(IProjectItem projectItem);
    private int CompareCore(IProjectItem x, IProjectItem y);
}
public class JetBrains.ReSharper.Feature.Services.Util.Comparers.TreeModelBrowserComparer : MultiTypeComparer {
    private IProjectPresentablePathProvider myPresentablePathProvider;
    public TreeModelBrowserComparer(IProjectPresentablePathProvider presentablePathProvider);
    protected virtual Type DisambiguateTypeConflict(Type t1, Type t2);
    protected virtual object Unwrap(object wrapper);
    protected virtual int CompareOtherDeclaredElements(IDeclaredElement x, IDeclaredElement y);
    protected virtual int CompareDeclarationRanges(IDeclaredElement x, IDeclaredElement y);
    protected virtual int CompareTypeMember(ITypeMember x, ITypeMember y);
    protected virtual int CompareTypeElement(ITypeElement x, ITypeElement y);
    protected virtual int CompareNamespace(INamespace x, INamespace y);
    protected virtual int CompareProjectItem(IProjectItem x, IProjectItem y);
    protected virtual int CompareProjectFolder(IProjectFolder x, IProjectFolder y);
    protected virtual int CompareProject(IProject x, IProject y);
    protected virtual int ComparePackages(NugetId x, NugetId y);
    protected virtual int CompareModule(IModule x, IModule y);
    protected virtual int CompareAssembly(IAssembly x, IAssembly y);
    protected virtual int CompareAssemblyFile(IAssemblyFile x, IAssemblyFile y);
    protected virtual int CompareFileSystemPath(FileSystemPath x, FileSystemPath y);
    protected virtual int CompareVirtualFileSystemPath(VirtualFileSystemPath x, VirtualFileSystemPath y);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Util.ContainingMemberManager : object {
    private IEnumerable`1<IContainingMemberProvider> myProviders;
    public ContainingMemberManager(IEnumerable`1<IContainingMemberProvider> providers);
    [NotNullAttribute]
public static ContainingMemberManager GetInstance(IPsiSourceFile file);
    public void BindToPsi(IPsiSourceFile sourceFile, PsiLanguageType language, TextRange textRange, IDeclaredElementEnvoy& boundTypeMember, IDeclaredElementEnvoy& boundTypeElement, IDeclaredElementEnvoy& boundNamespace, PsiLanguageCategories languageCategories);
    public bool BoundContainingDeclaredElements(IPsiSourceFile sourceFile, ITreeNode treeNode, IDeclaredElementEnvoy& boundTypeMember, IDeclaredElementEnvoy& boundTypeElement, IDeclaredElementEnvoy& boundNamespace);
}
public class JetBrains.ReSharper.Feature.Services.Util.CustomColorMatrix : object {
    [CompilerGeneratedAttribute]
private Single[][] <Matrix>k__BackingField;
    private Single[][] Matrix { get; public set; }
    [CompilerGeneratedAttribute]
private Single[][] get_Matrix();
    [CompilerGeneratedAttribute]
public void set_Matrix(Single[][] value);
    public Bitmap Apply(Image originalImage);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.ReSharper.Feature.Services.Util.DeclaredElementInstancePointerMap`2 : object {
    private IDictionary`2<object, TValue> myInnerMap;
    private Comparer<TElementType, TValue> myComparer;
    public TValue Item { get; public set; }
    public sealed virtual void Add(DeclaredElementInstance`1<TElementType> element, TValue value);
    public sealed virtual bool TryGetValue(DeclaredElementInstance`1<TElementType> key, TValue& value);
    public sealed virtual TValue get_Item(DeclaredElementInstance`1<TElementType> element);
    public sealed virtual void set_Item(DeclaredElementInstance`1<TElementType> element, TValue value);
    public sealed virtual bool Contains(DeclaredElementInstance`1<TElementType> key);
    public sealed virtual void Rehash();
}
[SolutionComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Feature.Services.Util.DefaultContainingMemberProvider : object {
    public int Order { get; }
    public sealed virtual int get_Order();
    public bool IsApplicable(IPsiSourceFile sourceFile);
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.Util.IContainingMemberProvider.BoundContainingDeclaredElements(IPsiSourceFile sourceFile, ITreeNode treeNode, IDeclaredElementEnvoy& boundTypeMember, IDeclaredElementEnvoy& boundTypeElement, IDeclaredElementEnvoy& boundNamespace);
    [CanBeNullAttribute]
protected virtual INamespaceDeclaration GetContainingNamespaceDeclaration(ITreeNode treeNode);
    [CanBeNullAttribute]
protected virtual ITypeDeclaration GetContainingTypeDeclaration(ITreeNode treeNode);
    [CanBeNullAttribute]
protected virtual ITypeMemberDeclaration GetContainingDeclaration(ITreeNode treeNode);
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.KnownProjectFileType", "16")]
public class JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil : object {
    public virtual IEnumerable`1<IDeclaration> GetRelatedDeclarations(ITypeDeclaration typeDeclaration);
    public virtual IEnumerable`1<ITypeDeclaration> GetRelatedAndFilterHidden(ITypeDeclaration declaration);
    public virtual ITypeElement GetContainingTypeForReference(IReference reference);
    public virtual bool IsHidden(ITypeDeclaration declaration);
    public virtual bool IsCodeBehindClass(ITypeDeclaration declaration);
    public virtual bool IsUserTextDeclaration(IDeclaration declaration);
    public virtual bool CanContainSeveralClasses(IPsiSourceFile sourceFile);
    public virtual bool CanImplementInterfaces(ITypeDeclaration typeElement);
    public virtual bool CanHaveConstructors(ITypeDeclaration typeElement);
    public virtual bool SuperClassCanBeChanged(ITypeDeclaration typeElement);
    public virtual bool SuperClassNameMustBeFull(ITypeDeclaration typeElement);
    public virtual string GetNamespaceForElementsMovedToExternalScope(ITypeDeclaration typeDeclaration, ITreeNode referenceNode);
    public virtual VirtualFileSystemPath GetFolderForElementsMovedToExternalScope(IProjectFile projectFile, string namespace, ITreeNode referenceNode);
    public virtual string GetPrettyName(ITypeDeclaration typeDeclaration, bool mustBeIdentifier);
    public virtual bool IsOperationPossibleOnUnmappedRange(ITreeNode node);
    public virtual bool IsOperationPossibleOnUnmappedRange(ITreeRange range);
    public virtual DocumentRange GetDocumentRangeForPartiallyUnmappedNode(ITreeNode node);
    public virtual bool CanDeclarationBeOverloaded(IDeclaration declaration);
    public virtual bool HasUglyName(ITypeDeclaration declaration);
}
public static class JetBrains.ReSharper.Feature.Services.Util.DefaultValueUtil : object {
    [CanBeNullAttribute]
[PureAttribute]
public static IExpression GetClrDefaultValue(IType type, PsiLanguageType language, ITreeNode context, bool allowOmitTypeSpecifications);
    [CanBeNullAttribute]
[PureAttribute]
public static IExpression GetCodeGenerationDefaultValue(IType type, PsiLanguageType language, ITreeNode context, bool allowOmitTypeSpecifications);
    [CanBeNullAttribute]
[PureAttribute]
public static IExpression GetOptionalParameterDefaultValue(IType type, PsiLanguageType language, ITreeNode context);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.ReSharper.Feature.Services.Util.ElementEnvoyMap`1 : object {
    private IDictionary`2<object, TValue> myInnerMap;
    private Comparer<TValue> myComparer;
    private JetHashSet`1<object> myKeysHashSet;
    public TValue Item { get; public set; }
    public IEnumerable Keys { get; }
    public IEnumerable`1<TValue> Values { get; }
    public sealed virtual void Add(IDeclaredElement element, TValue value);
    public sealed virtual bool TryGetValue(IDeclaredElement key, TValue& value);
    public sealed virtual TValue get_Item(IDeclaredElement element);
    public sealed virtual void set_Item(IDeclaredElement element, TValue value);
    public sealed virtual void Rehash();
    public sealed virtual bool Contains(IDeclaredElement key);
    public IEnumerable get_Keys();
    public sealed virtual IEnumerator GetEnumerator();
    public bool IsEmpty();
    public IEnumerable`1<TValue> get_Values();
    public void Clear();
    [CanBeNullAttribute]
public IDeclaredElementEnvoy GetKeyEnvoy(IDeclaredElement declaredElement);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.ReSharper.Feature.Services.Util.ElementPointerMap`1 : object {
    private IDictionary`2<object, TValue> myInnerMap;
    private Comparer<TValue> myComparer;
    public TValue Item { get; public set; }
    public sealed virtual void Add(IDeclaredElement element, TValue value);
    public sealed virtual bool TryGetValue(IDeclaredElement key, TValue& value);
    public sealed virtual TValue get_Item(IDeclaredElement element);
    public sealed virtual void set_Item(IDeclaredElement element, TValue value);
    public sealed virtual bool Contains(IDeclaredElement key);
    public sealed virtual void Rehash();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Util.ExternalAnnotationsImporter : object {
    private ISolution mySolution;
    private SolutionSettings mySolutionSettings;
    private static string JbDefaultAnnotationsNamespace;
    private static string AnnotationFileNameFormat;
    private static string PromptTemplate;
    public ExternalAnnotationsImporter(ISolution solution, SolutionSettings solutionSettings);
    private static ExternalAnnotationsImporter();
    public bool ImportAnnotation(ITreeNode anchor, IProgressIndicator progressIndicator);
    [NotNullAttribute]
public static string GetAnnotationsSource(bool makeInternal, bool makeConditional);
    public bool PromptAnnotationsImport(string featureSpecificPrompt);
}
public class JetBrains.ReSharper.Feature.Services.Util.FilesAndDirs.FilesAndDirsButtonProvider : ButtonProviderBase {
    private List`1<ButtonViewModel> myButtons;
    private bool myCanAddElementsOutsideSolution;
    private ICollectionEditItemViewModelFactory myCollectionEditItemViewModelFactory;
    private ObservableCollection`1<ICollectionEditItemViewModel> myItems;
    private IProperty`1<IEnumerable`1<ICollectionEditItemViewModel>> mySelectedMultipleItemsProperty;
    private ICommonFileDialogs myCommonFileDialogs;
    private IProperty`1<ICollectionEditItemViewModel> mySelectedItemProperty;
    private IShellLocks myShellLocks;
    [NotNullAttribute]
private ISolution mySolution;
    public FilesAndDirsButtonProvider(Lifetime lifetime, IShellLocks shellLocks, ISolution solution, bool canAddElementsOutsideSolution, ICollectionEditItemViewModelFactory collectionEditItemViewModelFactory, IProperty`1<ICollectionEditItemViewModel> selectedItemProperty, ObservableCollection`1<ICollectionEditItemViewModel> items, IProperty`1<IEnumerable`1<ICollectionEditItemViewModel>> selectedMultipleItemsProperty, ICommonFileDialogs commonFileDialogs);
    public virtual void HandleViewKeyPress(Key k);
    public virtual IEnumerable`1<ButtonViewModel> GetButtons();
    private void AddFileButtonHandler();
    private void AddDirButtonHandler();
    private void RemoveButtonHandler();
    private void AddPathItemsToView(IEnumerable`1<string> dialogFileNames, string title, Func`2<IProjectItem, string> getPresentableName);
    [CompilerGeneratedAttribute]
private void <AddFileButtonHandler>b__12_0();
    [CompilerGeneratedAttribute]
private void <AddDirButtonHandler>b__13_0();
}
public class JetBrains.ReSharper.Feature.Services.Util.FilesAndDirs.FilesAndDirsButtonProviderFactory : object {
    private bool myCanAddElementsOutsideSolution;
    private ICollectionEditItemViewModelFactory myCollectionEditItemViewModelFactory;
    private Lifetime myLifetime;
    private IShellLocks myShellLocks;
    private ISolution mySolution;
    private ICommonFileDialogs myCommonFileDialogs;
    public FilesAndDirsButtonProviderFactory(Lifetime lifetime, IShellLocks shellLocks, ISolution solution, ICollectionEditItemViewModelFactory collectionEditItemViewModelFactory, bool canAddElementsOutsideSolution);
    public sealed virtual IButtonProvider GetButtonProvider(ObservableCollection`1<ICollectionEditItemViewModel> items, IProperty`1<ICollectionEditItemViewModel> selectedItemProperty, IProperty`1<IEnumerable`1<ICollectionEditItemViewModel>> selectedMultipleItemsProperty);
}
public class JetBrains.ReSharper.Feature.Services.Util.FilesAndDirs.FilesAndDirsCollectionEditItemViewModelFactory : object {
    private IShellLocks myShellLocks;
    private ProjectModelElementPresentationService myProjectModelElementPresentationService;
    public FilesAndDirsCollectionEditItemViewModelFactory(IShellLocks shellLocks, ProjectModelElementPresentationService projectModelElementPresentationService);
    public sealed virtual ICollectionEditItemViewModel GetCollectionEditItemViewModel(string presentableName, IconId iconId, object behindValue);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Util.FilesAndDirs.FilesAndDirsItemFormProvider : object {
    private ISolution mySolution;
    private IShellLocks myShellLocks;
    private ProjectModelElementPresentationService myPresentationService;
    public FilesAndDirsItemFormProvider(ISolution solution, IShellLocks shellLocks, ProjectModelElementPresentationService presentationService);
    public StringCollectionEditViewModel CreateForm(Lifetime lifetime, IFilesAndDirsItemIndexStore data, bool canAddElementsOutsideSolution);
}
public class JetBrains.ReSharper.Feature.Services.Util.FilesAndDirs.FilesAndDirsItemViewModel : CollectionEditItemViewModelBase {
    private static TextStyle ourAdditionalInfoStyle;
    private Lazy`1<IconId> myIconId;
    private RichText myPresentableName;
    [CompilerGeneratedAttribute]
private IProjectElement <ProjectElement>k__BackingField;
    public IconId IconId { get; }
    [CanBeNullAttribute]
public IProjectElement ProjectElement { get; }
    public RichText PresentableName { get; }
    public FilesAndDirsItemViewModel(string presentableName, Func`1<IconId> getIconIdFunc, IProjectElement projectElement);
    private static FilesAndDirsItemViewModel();
    public virtual IconId get_IconId();
    [CompilerGeneratedAttribute]
public IProjectElement get_ProjectElement();
    public virtual RichText get_PresentableName();
    private static RichText GetPresentableName(string presentableName, IProjectElement projectElement);
}
public class JetBrains.ReSharper.Feature.Services.Util.FilesAndDirs.FilesAndDirsItemViewModelComparer : object {
    public static FilesAndDirsItemViewModelComparer Instance;
    private static FilesAndDirsItemViewModelComparer();
    public sealed virtual int Compare(object x, object y);
}
public interface JetBrains.ReSharper.Feature.Services.Util.FilesAndDirs.IFilesAndDirsItemIndexStore {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<string> EnumerateIndexes();
    public abstract virtual void Add(string index);
    public abstract virtual void Remove(string index);
}
public static class JetBrains.ReSharper.Feature.Services.Util.FilesAndDirs.SkipItemsWpfFormProvider : object {
    public static IAutomation GetSkipItemsAutoAutomation(Lifetime lifetime, IShellLocks shellLocks, ISolution solution, OptionsSettingsSmartContext optionsSettingsSmartContext, ProjectModelElementPresentationService projectModelElementPresentationService);
    public static IAutomation GetIgnoredProjectsAutomation(Lifetime lifetime, IShellLocks shellLocks, ISolution solution, OptionsSettingsSmartContext optionsSettingsSmartContext, IPromptWinForm promptWinForm, IWindowsHookManager windowsHookManager, FormValidators formValidators, IUIApplication iuiApplication);
    public static IAutomation GetSkipItemsAutoAutomation(Lifetime lifetime, IShellLocks shellLocks, ISolution solution, ProjectModelElementPresentationService projectModelElementPresentationService, IFilesAndDirsItemIndexStore store, IMasksItemIndexStore masksStore, bool canAddElementsOutsideSolution);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Util.FilesAndDirs.WildcardChecker : object {
    [ExtensionAttribute]
public static bool CheckByMask(ICollection`1<PathWildcard> masks, IProjectItem projectItem);
    [ExtensionAttribute]
public static bool CheckByMask(ICollection`1<PathWildcard> masks, VirtualFileSystemPath path);
}
public class JetBrains.ReSharper.Feature.Services.Util.FileSpecificUtil2 : object {
    private static ICreateNewFileTarget GetCreationTarget(IProjectFile projectFile, string namespace, string newName, IReference reference, PsiLanguageType language);
    public static ICreateNewFileTarget GetCreationTarget(IProjectFile projectFile, string namespace, string newName, PsiLanguageType language);
    public static ICreateNewFileTarget GetCreationTarget(IProjectFile projectFile, string namespace, string newName, IReference reference);
    public static ITypeTarget GetOwnerForTypeMemberDeclaration(IReference reference);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Feature.Services.Util.IAddAccessorIntention {
    public abstract virtual IBulbActionCommand AddAccessor(ITypeMember typeMember, AccessorKind accessorKind);
}
public interface JetBrains.ReSharper.Feature.Services.Util.IAnonymousObjectsAnalyser {
    public abstract virtual bool IsCreationExpression(ITreeNode element);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<Pair`2<string, IManagedExpression>> GetMemberInitializers(ITreeNode element);
}
public interface JetBrains.ReSharper.Feature.Services.Util.IBaseClassUtil {
    [CanBeNullAttribute]
public abstract virtual IEnumerable`1<IReference> GetBaseDeclarationsReferences(ITypeDeclaration declaration);
}
public interface JetBrains.ReSharper.Feature.Services.Util.IContainingMemberProvider {
    public int Order { get; }
    public abstract virtual int get_Order();
    public abstract virtual bool BoundContainingDeclaredElements(IPsiSourceFile sourceFile, ITreeNode treeNode, IDeclaredElementEnvoy& boundTypeMember, IDeclaredElementEnvoy& boundTypeElement, IDeclaredElementEnvoy& boundNamespace);
}
public interface JetBrains.ReSharper.Feature.Services.Util.IDaemonSuspender {
    public abstract virtual IDisposable Suspend();
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.ReSharper.Feature.Services.Util.IDeclaredElementInstanceToDataMap`2 {
    public TValue Item { get; public set; }
    public abstract virtual TValue get_Item(DeclaredElementInstance`1<TElementType> element);
    public abstract virtual void set_Item(DeclaredElementInstance`1<TElementType> element, TValue value);
    public abstract virtual void Add(DeclaredElementInstance`1<TElementType> element, TValue value);
    public abstract virtual bool TryGetValue(DeclaredElementInstance`1<TElementType> key, TValue& value);
    public abstract virtual bool Contains(DeclaredElementInstance`1<TElementType> key);
    public abstract virtual void Rehash();
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.ReSharper.Feature.Services.Util.IDeclaredElementToDataMap`1 {
    public TValue Item { get; public set; }
    public abstract virtual TValue get_Item(IDeclaredElement element);
    public abstract virtual void set_Item(IDeclaredElement element, TValue value);
    public abstract virtual void Add(IDeclaredElement element, TValue value);
    public abstract virtual bool TryGetValue(IDeclaredElement key, TValue& value);
    public abstract virtual bool Contains(IDeclaredElement key);
    public abstract virtual void Rehash();
}
public interface JetBrains.ReSharper.Feature.Services.Util.IImplicitReference {
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Util.ImageUtil : object {
    [ExtensionAttribute]
public static Image AdjustBrightness(Image image, int value);
    [ExtensionAttribute]
public static Bitmap AdjustContrast(Image image, float value);
    [ExtensionAttribute]
public static Image MakeGrayscale(Image original);
}
public class JetBrains.ReSharper.Feature.Services.Util.InheritanceInformation : object {
    public IList`1<OverridableMemberInstance> ImplementedMembers;
    public IList`1<OverridableMemberInstance> OverriddenMembers;
    public IList`1<TypeMemberInstance> HiddenMembers;
    [CompilerGeneratedAttribute]
private RichText <ToolTip>k__BackingField;
    public RichText ToolTip { get; private set; }
    public IconId Image { get; }
    [CompilerGeneratedAttribute]
public RichText get_ToolTip();
    [CompilerGeneratedAttribute]
private void set_ToolTip(RichText value);
    public IconId get_Image();
    public static InheritanceInformation FromDeclaredElement(IDeclaredElement element);
    public static InheritanceInformation FromDeclaredElement(IDeclaredElement element, PsiLanguageType languageType);
}
public interface JetBrains.ReSharper.Feature.Services.Util.IPropertyBodyHelper {
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual IField GetBackingField(IProperty property, bool checkSetter, bool allowSetterOnly);
}
public interface JetBrains.ReSharper.Feature.Services.Util.ISelectionStorer {
    public abstract virtual void RestoreSelection();
}
public interface JetBrains.ReSharper.Feature.Services.Util.IStringInterpolationBuilder {
    public bool IsFinalized { get; }
    public abstract virtual bool get_IsFinalized();
    public abstract virtual bool TryInitializeVerbatimity(StringVerbatimity verbatimity, ITreeNode context);
    public abstract virtual void InitializeVerbatimityFrom(IExpression literalOwner);
    public abstract virtual void AppendLiteral(ITokenNode literal);
    public abstract virtual void AppendLiteralPart(IExpression formatLiteral, DocumentRange range);
    public abstract virtual void AppendLiteralText(string text);
    public abstract virtual void AppendTextNoEscaping(string text);
    public abstract virtual void BeginArgument();
    public abstract virtual void EndArgument(IExpression argument);
    [CanBeNullAttribute]
[MustUseReturnValueAttribute]
public abstract virtual IExpression CreateExpression(ITreeNode context, bool forceInterpolation, bool produceEmptyLiterals);
}
public interface JetBrains.ReSharper.Feature.Services.Util.IStringInterpolationHelper {
    [PureAttribute]
public abstract virtual bool CanUseInterpolation(ITreeNode context);
    [PureAttribute]
public abstract virtual bool CanUseInterpolatedStringHandlers(ITreeNode context);
    [PureAttribute]
public abstract virtual bool CanReplaceWithInterpolationExpression(IExpression expression);
    [PureAttribute]
public abstract virtual DocumentRange GetInvocationRange(IArgumentsOwner argumentsOwner);
    [NotNullAttribute]
[PureAttribute]
public abstract virtual IStringInterpolationBuilder CreateBuilder();
    [NotNullAttribute]
public abstract virtual IExpression ReplaceWithConcatenation(IExpression toReplace, IReadOnlyList`1<IExpression> interpolations);
    [NotNullAttribute]
public abstract virtual IExpression UnwrapFromInvocation(IExpression expression);
    [PureAttribute]
public abstract virtual StringVerbatimity GetStringVerbatimity(IExpression expression);
}
public interface JetBrains.ReSharper.Feature.Services.Util.ISubProgressAggregator {
    public abstract virtual IProgressIndicator CreateSubProgress(IProgressIndicatorModel& model);
    public abstract virtual void Cancel();
}
public interface JetBrains.ReSharper.Feature.Services.Util.ITypeAnchorSerializer {
    [NotNullAttribute]
public abstract virtual string Serialize(TypeAnchor typeAnchor);
    [CanBeNullAttribute]
public abstract virtual TypeAnchor Deserialize(string sFullyQualifiedName);
}
public interface JetBrains.ReSharper.Feature.Services.Util.ITypeValidator {
    public abstract virtual bool IsValidName(string name);
    public abstract virtual bool IsValidReturnType(string type);
    public abstract virtual bool IsValidParameterType(string type);
    public abstract virtual bool IsValidExpression(string expr);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Util.LanguageUtil : object {
    [NotNullAttribute]
public static OneToSetMap`2<PsiLanguageType, T> Sort(IEnumerable`1<T> elements, Func`2<T, PsiLanguageType> getLanguage);
    [NotNullAttribute]
[PureAttribute]
public static OneToSetMap`2<PsiLanguageType, T> SortElements(IEnumerable`1<T> elements);
    [NotNullAttribute]
[PureAttribute]
public static OneToSetMap`2<PsiLanguageType, T> SortReferences(IEnumerable`1<T> elements);
    [NotNullAttribute]
[PureAttribute]
public static List`1<KeyValuePair`2<PsiLanguageType, ISet`1<T>>> SortReferencesWithLanguages(IEnumerable`1<T> e, IPsiServices services);
    private static int CompareLanguages(PsiLanguageType x, PsiLanguageType y, IPsiServices psiServices);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static List`1<IReference> GetSortedReferences(IEnumerable`1<IReference> references);
}
public static class JetBrains.ReSharper.Feature.Services.Util.MemberPresentationUtil : object {
    private static IconInfo GetInheritanceInfo(IOverridableMember overridableMember);
    [CanBeNullAttribute]
public static IconId GetImage(IOverridableMember overridableMember);
    [CanBeNullAttribute]
public static PresentableItemImage GetPresentableImage(IOverridableMember overridableMember);
}
public class JetBrains.ReSharper.Feature.Services.Util.MenuElement`1 : object {
    private T myData;
    public T Data { get; }
    public MenuElement`1(T data);
    public T get_Data();
}
public static class JetBrains.ReSharper.Feature.Services.Util.ModifiedFilesTracker.ChangeEnhancerUtils : object {
    public static List`1<DocumentRange> GetChangedRanges(IPsiSourceFile psiSourceFile, string oldText);
    public static List`1<DocumentRange> GetChangedRanges(string oldText, string newText, IPsiSourceFile psiSourceFile);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Feature.Services.Util.ModifiedFilesTracker.DefaultLanguageChangeEnhancer : object {
    public virtual DocumentRange EnhanceChangedRange(DocumentRange range, IFile psiFile);
}
public interface JetBrains.ReSharper.Feature.Services.Util.ModifiedFilesTracker.IChangeEnhancer {
    public abstract virtual DocumentRange EnhanceChangedRange(DocumentRange range, IFile psiFile);
}
public interface JetBrains.ReSharper.Feature.Services.Util.ModifiedFilesTracker.IModifiedFilesCacheImpl {
    public IProperty`1<bool> TrackDiffs { get; }
    public IProperty`1<bool> IsActive { get; }
    public abstract virtual IProperty`1<bool> get_TrackDiffs();
    public abstract virtual IProperty`1<bool> get_IsActive();
    public abstract virtual void ClearTexts();
    public abstract virtual void SaveDocumentText(VirtualFileSystemPath path, IDocument document);
    public abstract virtual void MarkSaved(VirtualFileSystemPath path);
    public abstract virtual void MarkModifiedInMemory(IProjectFile projectFile, Func`3<IProjectFile, DateTime, bool> isUserChange);
    public abstract virtual void Purge();
    public abstract virtual void Clear();
    public abstract virtual void Move(VirtualFileSystemPath oldLocation, VirtualFileSystemPath newLocation);
    public abstract virtual void Remove(VirtualFileSystemPath path);
    public abstract virtual void FileAdded(VirtualFileSystemPath path);
}
public abstract class JetBrains.ReSharper.Feature.Services.Util.ModifiedFilesTracker.ModifiedFilesCacheBase : object {
    private IOptimizedPersistentSortedMap`2<VirtualFileSystemPath, FileModificationData> myMap;
    protected IOptimizedPersistentSortedMap`2<VirtualFileSystemPath, string> myOriginalTextMap;
    private Dictionary`2<VirtualFileSystemPath, string> myTemporaryOriginalTextMap;
    private ReaderWriterLockSlim myLock;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClearOnLoad>k__BackingField;
    public string Version { get; }
    protected IProperty`1<int> RecentlyModifiedPeriod { get; }
    protected IProperty`1<bool> TrackDiffs { get; }
    protected internal IProperty`1<bool> IsActive { get; }
    private IProperty`1<bool> JetBrains.ReSharper.Feature.Services.Util.ModifiedFilesTracker.IModifiedFilesCacheImpl.TrackDiffs { get; }
    private IProperty`1<bool> JetBrains.ReSharper.Feature.Services.Util.ModifiedFilesTracker.IModifiedFilesCacheImpl.IsActive { get; }
    protected bool TrackAllChanges { get; }
    public Lifetime Lifetime { get; }
    [NotNullAttribute]
public ISolution Solution { get; }
    private string JetBrains.ReSharper.Psi.Caches.ICacheWithVersion.PersistentId { get; }
    public bool ClearOnLoad { get; public set; }
    protected ModifiedFilesCacheBase(ISolution solution, Lifetime lifetime, IPersistentIndexManager manager);
    public sealed virtual string get_Version();
    protected abstract virtual IProperty`1<int> get_RecentlyModifiedPeriod();
    protected abstract virtual IProperty`1<bool> get_TrackDiffs();
    protected internal abstract virtual IProperty`1<bool> get_IsActive();
    private sealed virtual override IProperty`1<bool> JetBrains.ReSharper.Feature.Services.Util.ModifiedFilesTracker.IModifiedFilesCacheImpl.get_TrackDiffs();
    private sealed virtual override IProperty`1<bool> JetBrains.ReSharper.Feature.Services.Util.ModifiedFilesTracker.IModifiedFilesCacheImpl.get_IsActive();
    protected virtual bool get_TrackAllChanges();
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    public sealed virtual void Remove(VirtualFileSystemPath path);
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.Util.ModifiedFilesTracker.IModifiedFilesCacheImpl.FileAdded(VirtualFileSystemPath path);
    public void MarkUnmodified(VirtualFileSystemPath path);
    public void MarkModified(VirtualFileSystemPath path, bool full);
    public bool IsRecentlyModified(VirtualFileSystemPath path);
    public string GetOldText(VirtualFileSystemPath location);
    public IEnumerable`1<DocumentRange> GetModifiedRanges(IPsiSourceFile psiSourceFile);
    public IEnumerable`1<VirtualFileSystemPath> GetRecentlyModifiedList();
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.Util.ModifiedFilesTracker.IModifiedFilesCacheImpl.SaveDocumentText(VirtualFileSystemPath path, IDocument document);
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.Util.ModifiedFilesTracker.IModifiedFilesCacheImpl.MarkSaved(VirtualFileSystemPath path);
    public virtual void MarkModifiedInMemory(IProjectFile projectFile, Func`3<IProjectFile, DateTime, bool> isUserChange);
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.Util.ModifiedFilesTracker.IModifiedFilesCacheImpl.ClearTexts();
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.Util.ModifiedFilesTracker.IModifiedFilesCacheImpl.Purge();
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.Util.ModifiedFilesTracker.IModifiedFilesCacheImpl.Clear();
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.Util.ModifiedFilesTracker.IModifiedFilesCacheImpl.Move(VirtualFileSystemPath oldLocation, VirtualFileSystemPath newLocation);
    private bool IsActual(DateTime threshold, VirtualFileSystemPath path);
    private sealed virtual override object JetBrains.ReSharper.Psi.Caches.ICache.Load(IProgressIndicator progress, bool enablePersistence);
    private sealed virtual override void JetBrains.ReSharper.Psi.Caches.ICache.MergeLoaded(object data);
    private sealed virtual override void JetBrains.ReSharper.Psi.Caches.ICache.Save(IProgressIndicator progress, bool enablePersistence);
    private sealed virtual override string JetBrains.ReSharper.Psi.Caches.ICacheWithVersion.get_PersistentId();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ClearOnLoad();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClearOnLoad(bool value);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Util.ModifiedFilesTracker.ModifiedFilesCacheManager : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
private IShellLocks myShellLocks;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private DocumentManager myDocumentManager;
    [NotNullAttribute]
private CollectionEvents`1<IModifiedFilesCacheImpl> myModifiedFilesCaches;
    public ModifiedFilesCacheManager(Lifetime lifetime, IShellLocks shellLocks, ILogger logger, ISolution solution, DocumentManager documentManager, IDocumentStorageHelpers documentStorageHelpers, ISolutionLoadTasksScheduler loadTasksScheduler, ChangeManager changeManager, IEnumerable`1<IModifiedFilesCacheImpl> modifiedFilesCaches);
    private void Purge();
    [CanBeNullAttribute]
private VirtualFileSystemPath GetLocationForDocument(IDocument document);
    private void MarkModifiedInMemory(IProjectFile projectFile);
    private void OnChangeManagerChanged(ChangeEventArgs args);
    [CompilerGeneratedAttribute]
private void <OnChangeManagerChanged>b__10_0(VirtualFileSystemPath oldLocation, VirtualFileSystemPath newLocation);
    [CompilerGeneratedAttribute]
private void <OnChangeManagerChanged>b__10_1(VirtualFileSystemPath path);
    [CompilerGeneratedAttribute]
private void <OnChangeManagerChanged>b__10_2(VirtualFileSystemPath path);
    [CompilerGeneratedAttribute]
private void <OnChangeManagerChanged>b__10_3(ProjectItemChange pic);
}
public static class JetBrains.ReSharper.Feature.Services.Util.ModifiedFilesTracker.ModifiedFilesUtils : object {
    public static void ProcessFileAddRemove(ChangeEventArgs args, Action`2<VirtualFileSystemPath, VirtualFileSystemPath> movedHandler, Action`1<VirtualFileSystemPath> removedHandler, Action`1<VirtualFileSystemPath> addedHandler);
}
public abstract class JetBrains.ReSharper.Feature.Services.Util.ModifiedFilesTracker.OneLanguageChangeEnhancer : DefaultLanguageChangeEnhancer {
    protected ICodeFormatter myFormatter;
    protected OneLanguageChangeEnhancer(ICodeFormatter formatter);
    public virtual DocumentRange EnhanceChangedRange(DocumentRange range, IFile psiFile);
    protected abstract virtual TreeTextRange GetEnhancedNodeRange(ITokenNode tokenNode);
}
public class JetBrains.ReSharper.Feature.Services.Util.MultyPsiDeclarations : object {
    [CompilerGeneratedAttribute]
private List`1<IDeclaration> <PrimaryDeclarations>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IDeclaration> <SecondaryDeclarations>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IDeclaration> <AllDeclarations>k__BackingField;
    public List`1<IDeclaration> PrimaryDeclarations { get; }
    public List`1<IDeclaration> SecondaryDeclarations { get; }
    public IList`1<IDeclaration> AllDeclarations { get; }
    public MultyPsiDeclarations(IDeclaredElement declaredElement);
    [CompilerGeneratedAttribute]
public List`1<IDeclaration> get_PrimaryDeclarations();
    [CompilerGeneratedAttribute]
public List`1<IDeclaration> get_SecondaryDeclarations();
    [CompilerGeneratedAttribute]
public IList`1<IDeclaration> get_AllDeclarations();
}
public static class JetBrains.ReSharper.Feature.Services.Util.MultyPsiUtil : object {
    public static List`1<Pair`2<IDeclaration, List`1<IDeclaration>>> GetDeclarationGroups(IDeclaredElement element);
    private static bool LanguageIsPrimaryForFile(IPsiSourceFile sourceFile, PsiLanguageType language);
}
public class JetBrains.ReSharper.Feature.Services.Util.ParallelMatcher`1 : object {
    [CompilerGeneratedAttribute]
private IShellLocks <locks>P;
    [CompilerGeneratedAttribute]
private int <chunkSize>P;
    public ParallelMatcher`1(IShellLocks locks, int chunkSize);
    [NotNullAttribute]
[PureAttribute]
public ResultListPool<T> CreatePool();
    public void ParallelMatch(IReadOnlyList`1<TInput> items, ICollection`1<T> consumer, TMatcher matcher, Action`4<TInput, TMatcher, int, ICollection`1<T>> matchAction, InterruptionSet checkForInterrupt, ResultListPool<T> pool);
    private static void EnqueueJob(TaskBarrier taskBarrier, ResultListPool<T> pool, TMatcher matcher, IReadOnlyList`1<TInput> source, int startIndex, int endIndex, ICollection`1<T> consumer, Action`4<TInput, TMatcher, int, ICollection`1<T>> processor, IModuleReferenceResolveContext resolveContext);
}
public static class JetBrains.ReSharper.Feature.Services.Util.PresentationUtil : object {
    public static DeclaredElementPresenterStyle QUOTED_KIND_NAME_PRESENTER;
    private static DeclaredElementPresenterStyle DefaultStyle;
    private static PresentationUtil();
    [NotNullAttribute]
public static PsiLanguageType GetDefaultPresentationLanguage(IPsiServices psiServices);
    [NotNullAttribute]
public static PsiLanguageType GetPresentationLanguage(IDeclaredElement declaredElement);
    [NotNullAttribute]
[PureAttribute]
public static PsiLanguageType GetPresentationLanguageByContainer(IProjectFile projectFile, ISolution solution);
    [NotNullAttribute]
private static PsiLanguageType NegotiatePresentationLanguage(PsiLanguageType language, ProjectFileType languageType);
    public static RichText PresentEntityWithLocation(string entityName, string location);
    public static RichText PresentEntityWithLocation(RichText entityName, string location, bool emphasize);
    public static RichText PresentDeclaredElement(IDeclaredElement element, DeclaredElementPresenterStyle style);
    public static string GetDeclaredElementName(IDeclaredElement declaredElement, ISubstitution substitution);
    public static string Format(IDeclaredElement declaredElement);
    public static string Format(IDeclaredElement declaredElement, PsiLanguageType language);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Feature.Services.Util.PsiActionDependenceHelper : ActionDependenceHelper {
    public PsiActionDependenceHelper(IActionManager actionManager, ProductConfigurations configuration);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Util.PsiActionDependenceHelper/<GetRootDefs>d__1")]
protected virtual IEnumerable`1<IActionDefWithId> GetRootDefs();
}
[PsiSharedComponentAttribute("2")]
public class JetBrains.ReSharper.Feature.Services.Util.PsiDataRules : object {
    public PsiDataRules(Lifetime lifetime, IActionManager actionManager, PsiProjectFileTypeCoordinator coordinator);
    private static ICollection`1<IDeclaredElement> ProjectModelElementToPathDeclaredElement(IDataContext context);
    [CanBeNullAttribute]
private static IDeclaredElement DeclaredElementSingleOrNull(IDataContext dataContext);
    [CanBeNullAttribute]
private static ICollection`1<IDeclaredElement> DeclaredElementToDeclaredElementsRule(IDataContext context);
    [CanBeNullAttribute]
private static IClrDeclaredElement TypeMemberFromTextControl(IDataContext context);
    [CanBeNullAttribute]
private static IClrDeclaredElement TypeMemberFromDocument(IDataContext context);
    [CanBeNullAttribute]
private static ICollection`1<IDeclaredElement> DeclaredElementFromTypeMember(IDataContext context);
    [CanBeNullAttribute]
private static IPsiSourceFile SourceFileFromProjectFile(IDataContext context);
    [NotNullAttribute]
private static Tuple`2<ICollection`1<IDeclaredElement>, bool> DeclaredElementsFromDocument(IDataContext context, SourceFilesMask mask);
    [NotNullAttribute]
public static Tuple`2<ICollection`1<IDeclaredElement>, bool> DeclaredElementsFromDocument(IDataContext context, DocumentOffset offset, SourceFilesMask mask);
    [NotNullAttribute]
private static Tuple`2<ICollection`1<IDeclaredElement>, bool> DeclaredElementsFromDocument(ISolution solution, DocumentOffset documentOffset, SourceFilesMask mask);
    [CanBeNullAttribute]
private static IEnumerable`1<ITreeNode> SelectedTreeNodesFromTextControl(IDataContext context);
    [CanBeNullAttribute]
private static ITreeNode SelectedExpressionFromTextControl(IDataContext context);
    [CanBeNullAttribute]
private static IReference ReferenceFromDocument(IDataContext context);
    [CanBeNullAttribute]
private static IReference[] ReferencesFromDocument(IDataContext context, SourceFilesMask mask);
}
public class JetBrains.ReSharper.Feature.Services.Util.ReferenceComparatorDelegate : MulticastDelegate {
    public ReferenceComparatorDelegate(object object, IntPtr method);
    public virtual int Invoke(IReference ref1, IReference ref2, OneToListMap`2<ITreeNode, IReference> references);
    public virtual IAsyncResult BeginInvoke(IReference ref1, IReference ref2, OneToListMap`2<ITreeNode, IReference> references, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public static class JetBrains.ReSharper.Feature.Services.Util.ReferencesCollectingUtil : object {
    [NotNullAttribute]
[PureAttribute]
public static IReadOnlyList`1<TTreeNode> CollectElementsWithReference(ITreeNode scopeElement, string referenceName, Func`2<TTreeNode, IReference> convert, Predicate`1<IReference> condition);
    [NotNullAttribute]
[PureAttribute]
public static IReadOnlyList`1<TTreeNode> CollectElementsWithUnresolvedReference(ITreeNode scopeElement, string referenceName, Func`2<TTreeNode, IReference> convert);
    [NotNullAttribute]
[PureAttribute]
public static IReadOnlyList`1<TTreeNode> CollectElementsWithResolveErrorReference(ITreeNode scopeElement, string referenceName, Func`2<TTreeNode, IReference> convert, IDeclaredElement resolvedTo);
}
public class JetBrains.ReSharper.Feature.Services.Util.ReferenceSorter : object {
    [NotNullAttribute]
private List`1<IReference> myList;
    [NotNullAttribute]
private OneToListMap`2<ITreeNode, IReference> myReferences;
    [NotNullAttribute]
private ReferenceComparatorDelegate myComparator;
    public ReferenceSorter(IEnumerable`1<IReference> references, ReferenceComparatorDelegate comparator);
    [NotNullAttribute]
public List`1<IReference> Sort();
    [CompilerGeneratedAttribute]
private int <Sort>b__4_0(IReference x, IReference y);
}
public static class JetBrains.ReSharper.Feature.Services.Util.ResolveEquivalenceUtil : object {
    [MustUseReturnValueAttribute("This method is way too heavy to not use the result :O")]
public static bool CheckResolveEquivalence(T element, Func`2<T, IReference> provider, Action`1<ITreeNode> mutator, Func`2<ITreeNode, bool> customCheck);
    [MustUseReturnValueAttribute("This method is way too heavy to not use the result :O")]
public static bool CheckResolveEquivalence(ITreeNode contextElement, T element, Func`2<T, IReference> provider, Action`1<ITreeNode> mutator, Func`2<ITreeNode, bool> customCheck);
    private static bool ResolveSemanticEquivalence(DeclaredElementInstance oldDeclaredElementInstance, DeclaredElementInstance newDeclaredElementInstance);
    private static bool CanBeWrongInterfaceMapping(IOverridableMember oldTypeElementMember, IOverridableMember newTypeElementMember);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Util.SelectionStorer : object {
    [NotNullAttribute]
[PureAttribute]
public static ISelectionStorer Create(ITreeNode element, DocumentRange selectionRange);
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
public static Action`1<ITextControl> ToRestoreAction(ISelectionStorer selectionStorer);
}
public enum JetBrains.ReSharper.Feature.Services.Util.SourceFilesMask : Enum {
    public int value__;
    public static SourceFilesMask CURRENT_CONTEXT_ONLY;
    public static SourceFilesMask ALL_FOR_PROJECT_FILE;
    public static SourceFilesMask INCLUDE_SHARED_FILES;
}
public abstract class JetBrains.ReSharper.Feature.Services.Util.StringAnalyzer : object {
    [CompilerGeneratedAttribute]
private IStringLexer <Lexer>k__BackingField;
    public IStringLexer Lexer { get; }
    protected bool CheckInterruptFlag { get; }
    protected StringAnalyzer(IStringLexer lexer);
    [CompilerGeneratedAttribute]
public IStringLexer get_Lexer();
    public void Analyze();
    private static void ThrowUnknownStringTokenType();
    protected virtual bool get_CheckInterruptFlag();
    protected virtual void ProcessBorderCharacter();
    protected virtual void ProcessEscapeCharacter();
    protected virtual void ProcessRedundantSlashEscapeCharacter();
    protected virtual void ProcessInvalidCharacter();
    protected virtual void ProcessCharacter();
    protected virtual void ProcessFormatCharacter();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Feature.Services.Util.StringInterpolationHelperExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IExpression RewriteToInterpolation(IStringInterpolationHelper interpolationHelper, IStringConcatenationClrWrapper formatString, IReadOnlyList`1<IExpression> arguments);
    [ExtensionAttribute]
[NotNullAttribute]
public static IReadOnlyList`1<IExpression> ToInterpolations(IStringInterpolationHelper interpolationHelper, IStringConcatenationClrWrapper formatString, IReadOnlyList`1<IExpression> arguments);
}
public class JetBrains.ReSharper.Feature.Services.Util.SubProgressAggregator : object {
    private Lifetime myLifetime;
    private ListEvents`1<ProgressIndicator> myIndicators;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsRunning>k__BackingField;
    public IProperty`1<bool> IsRunning { get; }
    public SubProgressAggregator(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsRunning();
    public sealed virtual IProgressIndicator CreateSubProgress(IProgressIndicatorModel& model);
    public sealed virtual void Cancel();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Feature.Services.Util.SupportedProjectFileTypes : object {
    public virtual bool IsFullySupported(ProjectFileType projectFileType);
    public virtual bool IsPartiallySupported(ProjectFileType projectFileType);
}
public static class JetBrains.ReSharper.Feature.Services.Util.TextControlToPsi : object {
    [CanBeNullAttribute]
[PureAttribute]
public static TTreeNode GetElementFromCaretPosition(ISolution solution, ITextControl textControl);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.Util.TextControlToPsi/<GetSelectedElements>d__1`1")]
[NotNullAttribute]
[PureAttribute]
public static IEnumerable`1<TTreeNode> GetSelectedElements(ISolution solution, DocumentRange documentRange);
    [NotNullAttribute]
[PureAttribute]
public static IEnumerable`1<TTreeNode> GetElements(ISolution solution, DocumentOffset documentOffset);
    [CanBeNullAttribute]
[PureAttribute]
public static TTreeNode GetElement(ISolution solution, ITextControl textControl);
    [CanBeNullAttribute]
[PureAttribute]
public static TTreeNode GetElement(ISolution solution, DocumentOffset documentOffset);
    [NotNullAttribute]
[PureAttribute]
public static IEnumerable`1<TTreeNode> GetElements(ISolution solution, ITextControl textControl);
    [CanBeNullAttribute]
[PureAttribute]
public static ITreeNode GetSourceTokenAtCaret(ISolution solution, ITextControl textControl);
    [CanBeNullAttribute]
[PureAttribute]
public static ITreeNode GetSourceTokenAtOffset(ISolution solution, DocumentOffset documentOffset);
    [CanBeNullAttribute]
[PureAttribute]
public static ITreeNode GetSourceTokenAtOffset(ISolution solution, DocumentOffset documentOffset, PsiLanguageCategories languageCategories);
    [CanBeNullAttribute]
[PureAttribute]
public static ITreeNode GetSourceTokenBeforeCaret(ISolution solution, ITextControl textControl);
    [CanBeNullAttribute]
[PureAttribute]
public static IDeclaredElement GetContainingTypeOrTypeMember(ISolution solution, ITextControl textControl);
    [CanBeNullAttribute]
[PureAttribute]
public static IDeclaredElement GetContainingTypeOrTypeMember(ISolution solution, DocumentOffset documentOffset);
    [NotNullAttribute]
[PureAttribute]
public static ICollection`1<IDeclaredElement> GetDeclaredElements(ISolution solution, ITextControl textControl);
    [NotNullAttribute]
[PureAttribute]
public static ICollection`1<IDeclaredElement> GetDeclaredElements(ISolution solution, DocumentOffset documentOffset, SourceFilesMask mask, Boolean& hasPsiFilesWithOffset);
    [CanBeNullAttribute]
[PureAttribute]
public static IDeclaration GetDeclaration(ISolution solution, ITextControl textControl);
    [NotNullAttribute]
[ItemNotNullAttribute]
[PureAttribute]
public static IEnumerable`1<IDeclaration> GetDeclarations(ISolution solution, ITextControl textControl, PsiLanguageCategories categories);
    [CanBeNullAttribute]
[PureAttribute]
public static IDeclaration GetDeclaration(ISolution solution, DocumentOffset documentOffset);
    [NotNullAttribute]
[ItemNotNullAttribute]
[PureAttribute]
public static IEnumerable`1<IDeclaration> GetDeclarations(ISolution solution, DocumentOffset documentOffset, PsiLanguageCategories categories);
    [CanBeNullAttribute]
public static IReference[] GetReferencesAtCaret(ISolution solution, ITextControl textControl);
    [NotNullAttribute]
public static IReference[] GetReferencesAtOffset(ISolution solution, DocumentOffset documentOffset, SourceFilesMask mask, PsiLanguageCategories categories);
    [NotNullAttribute]
public static IReadOnlyList`1<IReference> GetReferencesAtOffset(IFile file, DocumentOffset offset);
    [NotNullAttribute]
private static IReadOnlyList`1<DocumentOffset> GetDocumentOffsets(DocumentOffset documentOffset, ISolution solution, SourceFilesMask mask);
    [NotNullAttribute]
public static IEnumerable`1<IFile> GetPsiFilesFromDocument(ISolution solution, DocumentOffset documentOffset, SourceFilesMask mask, PsiLanguageCategories categories);
    [NotNullAttribute]
public static IEnumerable`1<IFile> GetPsiFilesFromDocument(ISolution solution, DocumentRange range, SourceFilesMask mask, PsiLanguageCategories categories);
    [NotNullAttribute]
private static IReference[] SelectReference(DocumentOffset offset, IEnumerable`1<IReference> references);
    private static int Compare(DocumentRange referenceRange, DocumentRange bestReferenceRange, DocumentOffset offset);
    [NotNullAttribute]
private static IReadOnlyList`1<IReference> SelectReference(IFile file, DocumentOffset documentOffset, IReadOnlyList`1<IReference> references);
    [CompilerGeneratedAttribute]
internal static bool <GetDeclaredElements>g__CheckAndRememberSmallerRange|13_0(TreeTextRange range, <>c__DisplayClass13_0& );
    [CompilerGeneratedAttribute]
internal static int <SelectReference>g__Compare|26_0(TreeTextRange referenceRange1, TreeTextRange referenceRange2, <>c__DisplayClass26_0& );
    [CompilerGeneratedAttribute]
internal static int <SelectReference>g__Compare2|26_1(TreeTextRange referenceRange1, TreeTextRange referenceRange2, <>c__DisplayClass26_0& );
    [CompilerGeneratedAttribute]
internal static bool <SelectReference>g__IsIdentifierAt|26_2(TreeOffset offset, <>c__DisplayClass26_0& );
}
public static class JetBrains.ReSharper.Feature.Services.Util.TextControlUtils : object {
    [CanBeNullAttribute]
public static ITextControl GetTextControl(ITreeNode element);
    public static void ActivateTextControlAndPerformAction(ITreeNode element, Action`1<ITextControl> whenTextControlBound, Nullable`1<TextRange> setSelection);
}
public class JetBrains.ReSharper.Feature.Services.Util.TrivialReparseContext : object {
    private IFile myFile;
    private TreeTextRange myRange;
    public TrivialReparseContext(IFile file, TreeTextRange range);
    [CanBeNullAttribute]
public sealed virtual ReparseResult GetReparseResult(string newText);
}
public class JetBrains.ReSharper.Feature.Services.Util.TypeAnchor : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeAnchor <Next>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <TypeArgs>k__BackingField;
    [NotNullAttribute]
public string Name { get; }
    [CanBeNullAttribute]
public TypeAnchor Next { get; private set; }
    [CanBeNullAttribute]
public String[] TypeArgs { get; }
    public TypeAnchor(string name, String[] typeArgs, TypeAnchor next);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public TypeAnchor get_Next();
    [CompilerGeneratedAttribute]
private void set_Next(TypeAnchor value);
    [CompilerGeneratedAttribute]
public String[] get_TypeArgs();
    [PureAttribute]
[NotNullAttribute]
public static TypeAnchor Create(ITypeElement typeElement);
}
public static class JetBrains.ReSharper.Feature.Services.Util.TypeAnchorSerializationUtil : object {
    [NotNullAttribute]
[PureAttribute]
private static ITypeAnchorSerializer GetSerializer(PsiLanguageType type);
    [CanBeNullAttribute]
public static TypeAnchor Deserialize(string s);
    [NotNullAttribute]
[PureAttribute]
public static string Serialize(TypeAnchor anchor, PsiLanguageType languageType);
    [NotNullAttribute]
[PureAttribute]
public static string Serialize(ITypeElement typeElement);
}
public static class JetBrains.ReSharper.Feature.Services.Validators.PropertyValidatorFactory : object {
    public static IDisposable CreateNewNameValidator(IProperty`1<string> property, IDeclaredElementPointer`1<IDeclaredElement> source, string message);
    public static IDisposable CreateNewNameValidator(IProperty`1<string> property, IDeclaredElement source, string message);
    public static IDisposable CreateNewNameValidator(IProperty`1<string> property, PsiLanguageType language, string message);
    public static bool IsValidNewName(IDeclaredElementPointer`1<IDeclaredElement> pointer, string value);
    public static bool IsValidNewName(IDeclaredElement element, string value);
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Engine.ExpandOperation : FinderOperationBase {
    private static ILogger ourLog;
    private IList`1<IValueTrackingNode> myNodes;
    private ValueTrackingSessionEnvinonment mySession;
    private List`1<IDeclaredElement> myFindUsagesElements;
    private Dictionary`2<IValueTrackingNode, IPreExpandedNode> myPreExpandedNodes;
    private Queue`1<IFinderOperation> myFinderOperations;
    [CanBeNullAttribute]
private IFinderOperation myFindOperation;
    private List`1<IFindResultReference> myFindResultReferences;
    private SubProgressIndicator myPreExpandProgress;
    private SubProgressIndicator myFindUsagesProgress;
    public ExpandOperation(IFinder finder, IList`1<IValueTrackingNode> nodes, IProgressIndicator progressIndicator, ValueTrackingSessionEnvinonment session);
    private static ExpandOperation();
    protected virtual void CheckValid();
    public virtual void PrepareForReuse();
    protected virtual int CalculateProgressIndicatorWorkUnits();
    protected virtual IState CreateStartState();
    private IState PreExpandState();
    private IState FinderOperationPreExpand();
    private IState FindUsagesState();
    private IState RunFindUsage();
    private IState ProcessFindResult();
    private IState FinishExpandState();
    private static void FinishExpand(ValueTrackingSessionEnvinonment session, IProgressIndicator pi, IPreExpandedNode preExpandedNode, IValueTrackingNodeImpl parent);
    private static IValueTrackingNode FindRecursion(IValueTrackingNode parent, IValueTrackingNode child);
    private static bool CompareNodes(IValueTrackingNode node1, IValueTrackingNode node2);
    [CompilerGeneratedAttribute]
private FindExecution <FindUsagesState>b__17_1(IFindResultReference frr);
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Engine.ValueTrackingEngine : object {
    [CompilerGeneratedAttribute]
private ValueTrackingSessionEnvinonment <Session>k__BackingField;
    public ValueTrackingSessionEnvinonment Session { get; }
    public ValueTrackingEngine(ValueTrackingSessionEnvinonment manager);
    [NotNullAttribute]
public static IValueTrackingLanguageService GetLanguageService(PsiLanguageType language);
    public static bool IsDeclaredElementSupported(IDeclaredElement declaredElement);
    [CompilerGeneratedAttribute]
public ValueTrackingSessionEnvinonment get_Session();
    public void Expand(IList`1<IValueTrackingNode> nodes, IProgressIndicator pi);
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Engine.ValueTrackingNodesRepository : object {
    private Dictionary`2<IPsiSourceFile, IList`1<IValueTrackingNode>> myMap;
    public void Register(IValueTrackingNode node);
    [NotNullAttribute]
public IList`1<IValueTrackingNode> GetNodesOfElement(ITreeNode element);
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Engine.ValueTrackingSessionEnvinonment : object {
    [CompilerGeneratedAttribute]
private IValueTrackingNode <RootNode>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueTrackingEngine <Engine>k__BackingField;
    [CompilerGeneratedAttribute]
private CachingFinder <ValueTrackingFindResultsCache>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueTrackingNodesRepository <NodesRespository>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionTitle>k__BackingField;
    public IValueTrackingNode RootNode { get; private set; }
    public ValueTrackingEngine Engine { get; }
    public CachingFinder ValueTrackingFindResultsCache { get; }
    public ValueTrackingNodesRepository NodesRespository { get; }
    public ISolution Solution { get; }
    public string SessionTitle { get; private set; }
    private ValueTrackingSessionEnvinonment(IPsiServices psiServices);
    [CompilerGeneratedAttribute]
public IValueTrackingNode get_RootNode();
    [CompilerGeneratedAttribute]
private void set_RootNode(IValueTrackingNode value);
    [CompilerGeneratedAttribute]
public ValueTrackingEngine get_Engine();
    [CompilerGeneratedAttribute]
public CachingFinder get_ValueTrackingFindResultsCache();
    [CompilerGeneratedAttribute]
public ValueTrackingNodesRepository get_NodesRespository();
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    [CompilerGeneratedAttribute]
public string get_SessionTitle();
    [CompilerGeneratedAttribute]
private void set_SessionTitle(string value);
    public static bool IsAvailable(IDataContext context, ValueTrackingDirections trackingDirections);
    [CanBeNullAttribute]
public static ValueTrackingSessionEnvinonment CreateEnvoronmentFromContext(IDataContext context, ValueTrackingDirections trackingDirections, String& text);
    [CanBeNullAttribute]
public static IValueTrackingNode FindValueTrackingNode(IDataContext context, ValueTrackingDirections trackingDirections, ValueTrackingSessionEnvinonment& envinonment, String& text);
    private static bool HasSelectionOrNoTextControl(IDataContext context);
}
public interface JetBrains.ReSharper.Feature.Services.ValueTracking.Impl.IValueTrackingCallStack {
    [CanBeNullAttribute]
public IValueTrackingCallStack Parent { get; }
    [CanBeNullAttribute]
public ITreeNodePointer`1<IArgumentsOwner> Pointer { get; }
    public abstract virtual IValueTrackingCallStack get_Parent();
    public abstract virtual ITreeNodePointer`1<IArgumentsOwner> get_Pointer();
    [NotNullAttribute]
[PureAttribute]
public abstract virtual IValueTrackingCallStack Push(IArgumentsOwner element);
}
public interface JetBrains.ReSharper.Feature.Services.ValueTracking.Impl.IValueTrackingLanguageService {
    public abstract virtual bool CanCreateNodeFromDeclaredElement(IDeclaredElement element);
    [CanBeNullAttribute]
public abstract virtual IValueTrackingNode NodeFromExpression(IExpression expression, ValueTrackingDirections direction, ValueTrackingSessionEnvinonment envinonment);
    [CanBeNullAttribute]
public abstract virtual IValueTrackingNode NodeFromDeclaredElement(IDeclaredElement element, ValueTrackingDirections direction, ValueTrackingSessionEnvinonment envinonment, IType ownerType, String& text);
    public abstract virtual IValueTrackingNodePresentation GetElementPresentation(ITreeNode element, IExpressionPresentationStyle style);
    public abstract virtual IDeclaredElement GetElementFromExpression(IExpression expression);
    [CanBeNullAttribute]
public abstract virtual IType GetOwnerType(IDeclaredElement declaredElement, IDataContext dataContext);
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Impl.ValueTrackingCallStack : object {
    [NotNullAttribute]
private static EmptyValueTrackingCallStack ourEmptyStack;
    [CompilerGeneratedAttribute]
private ITreeNodePointer`1<IArgumentsOwner> <Pointer>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueTrackingCallStack <Parent>k__BackingField;
    [NotNullAttribute]
public static IValueTrackingCallStack EmptyStack { get; }
    public ITreeNodePointer`1<IArgumentsOwner> Pointer { get; }
    [NotNullAttribute]
public IValueTrackingCallStack Parent { get; }
    private ValueTrackingCallStack(IValueTrackingCallStack parent, IArgumentsOwner owner);
    private static ValueTrackingCallStack();
    public static IValueTrackingCallStack get_EmptyStack();
    [CompilerGeneratedAttribute]
public sealed virtual ITreeNodePointer`1<IArgumentsOwner> get_Pointer();
    [CompilerGeneratedAttribute]
public sealed virtual IValueTrackingCallStack get_Parent();
    public sealed virtual IValueTrackingCallStack Push(IArgumentsOwner owner);
}
public enum JetBrains.ReSharper.Feature.Services.ValueTracking.Impl.ValueTrackingDirections : Enum {
    public int value__;
    public static ValueTrackingDirections Up;
    public static ValueTrackingDirections Down;
    public static ValueTrackingDirections Both;
}
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Impl.ValueTrackingLanguageServiceBase : object {
    public virtual bool CanCreateNodeFromDeclaredElement(IDeclaredElement element);
    public virtual IValueTrackingNode NodeFromDeclaredElement(IDeclaredElement element, ValueTrackingDirections direction, ValueTrackingSessionEnvinonment envinonment, IType ownerType, String& text);
    [CanBeNullAttribute]
public virtual IArgumentsOwner GetArgumentsOwner(IReference reference);
    [CanBeNullAttribute]
public virtual IExpression GetArgumentValue(IArgument argument);
    public virtual IValueTrackingNodePresentation GetElementPresentation(ITreeNode element, IExpressionPresentationStyle style);
    public virtual IDeclaredElement GetElementFromExpression(IExpression expression);
    public virtual IType GetOwnerType(IDeclaredElement declaredElement, IDataContext dataContext);
    private static string GetTrimmedLine(IDocument document, DocumentCoords coords, Int32& trimmedCount);
    public virtual IValueTrackingNode NodeFromExpression(IExpression expression, ValueTrackingDirections direction, ValueTrackingSessionEnvinonment envinonment);
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Model.FilteredExpandRecursiveOperation : FinderOperationBase {
    private ValueTrackingSessionEnvinonment myEnvironment;
    private ValueTrackingNodesFilter myFilter;
    private IList`1<IValueTrackingNode> myNodes;
    private SubProgressIndicator mySubprogressIndicator;
    public FilteredExpandRecursiveOperation(IList`1<IValueTrackingNode> nodes, ValueTrackingSessionEnvinonment environment, ValueTrackingNodesFilter filter, IFinder finder, IProgressIndicator progressIndicator);
    protected virtual int CalculateProgressIndicatorWorkUnits();
    protected virtual IState CreateStartState();
    private IState Expand();
    protected virtual void CheckValid();
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Model.ValueTrackingFilteredModel : object {
    private ValueTrackingSessionEnvinonment myEnvinonment;
    private ValueTrackingNodesFilter myFilter;
    public ValueTrackingFilteredModel(ValueTrackingSessionEnvinonment envinonment, ValueTrackingNodesFilter filter);
    public void ExpandFront(IList`1<IValueTrackingNode> nodes, IProgressIndicator pi);
    public bool CanBeExpanded(IValueTrackingNode node);
    public IList`1<IValueTrackingNode> GetChildren(IValueTrackingNode node);
    public bool IsExpanded(IValueTrackingNode node);
    public void Expand(IList`1<IValueTrackingNode> nodes, IProgressIndicator pi);
    public FilteredExpandRecursiveOperation CreateExpandRecursiveOperation(IList`1<IValueTrackingNode> nodes, IProgressIndicator pi);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Feature.Services.ValueTracking.Model.ValueTrackingFilteredModel/<GetFrontNodes>d__9")]
private IEnumerable`1<IValueTrackingNode> GetFrontNodes(IEnumerable`1<IValueTrackingNode> nodes);
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Model.ValueTrackingNodesFilter : object {
    public virtual bool IsExpanded(IValueTrackingNode valueTrackingNode);
    public virtual bool IsPassThrough(IValueTrackingNode node);
    public virtual bool IsTerminal(IValueTrackingNode node);
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Nodes.CompositeFinderOperation : FinderOperationBase {
    private IList`1<IFinderOperation> myOperations;
    private int myIndex;
    public CompositeFinderOperation(IList`1<IFinderOperation> operations, IFinder finder, ICollection`1<IDeclaredElement> elements);
    protected virtual IState CreateStartState();
    public virtual void PrepareForReuse();
    protected virtual int CalculateProgressIndicatorWorkUnits();
    protected virtual void CheckValid();
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Nodes.CompositePreExpandedNode : object {
    private IList`1<IPreExpandedNode> myNodes;
    public IList`1<IDeclaredElement> ElementsToSearch { get; }
    public CompositePreExpandedNode(IList`1<IPreExpandedNode> nodes);
    public sealed virtual IList`1<IDeclaredElement> get_ElementsToSearch();
    public sealed virtual void AddReference(IReference reference, IDeclaredElement element);
    public sealed virtual IList`1<IValueTrackingNode> ExpandWithFindResults(IProgressIndicator pi);
    public sealed virtual IFinderOperation InitNode(IProgressIndicator pi, CachingFinder cachingFinder);
}
public interface JetBrains.ReSharper.Feature.Services.ValueTracking.Nodes.IPreExpandedNode {
    [CanBeNullAttribute]
public IList`1<IDeclaredElement> ElementsToSearch { get; }
    public abstract virtual IList`1<IDeclaredElement> get_ElementsToSearch();
    public abstract virtual void AddReference(IReference reference, IDeclaredElement element);
    [CanBeNullAttribute]
public abstract virtual IList`1<IValueTrackingNode> ExpandWithFindResults(IProgressIndicator pi);
    [CanBeNullAttribute]
public abstract virtual IFinderOperation InitNode(IProgressIndicator pi, CachingFinder cachingFinder);
}
public interface JetBrains.ReSharper.Feature.Services.ValueTracking.Nodes.IValueTrackingNode {
    public ValueTrackingDirections Direction { get; }
    [NotNullAttribute]
public ValueTrackingSessionEnvinonment Session { get; }
    [CanBeNullAttribute]
public IValueTrackingNode Parent { get; }
    [NotNullAttribute]
public IValueTrackingCallStack CallStack { get; }
    [CanBeNullAttribute]
public ITreeNode SourceElement { get; }
    [CanBeNullAttribute]
public IList`1<IValueTrackingNode> Children { get; }
    public bool CanBeExpanded { get; }
    public bool IsPassThrough { get; }
    public bool HasDuplicates { get; }
    public bool IsRecursive { get; }
    public IValueTrackingNodePresentation Presentation { get; }
    public abstract virtual ValueTrackingDirections get_Direction();
    public abstract virtual ValueTrackingSessionEnvinonment get_Session();
    public abstract virtual IValueTrackingNode get_Parent();
    public abstract virtual IValueTrackingCallStack get_CallStack();
    public abstract virtual ITreeNode get_SourceElement();
    public abstract virtual IList`1<IValueTrackingNode> get_Children();
    [CanBeNullAttribute]
public abstract virtual IPreExpandedNode GetPreExpandedNode(IProgressIndicator pi);
    public abstract virtual bool get_CanBeExpanded();
    public abstract virtual bool get_IsPassThrough();
    public abstract virtual bool get_HasDuplicates();
    public abstract virtual bool get_IsRecursive();
    public abstract virtual IValueTrackingNodePresentation get_Presentation();
}
public interface JetBrains.ReSharper.Feature.Services.ValueTracking.Nodes.IValueTrackingNodeImpl {
    public abstract virtual void SetChildren(IList`1<IValueTrackingNode> children);
    public abstract virtual void SetHasDuplicates(bool hasDuplicates);
    public abstract virtual void SetRecursive(bool isRecursive);
    public abstract virtual void AfterInitNode();
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Nodes.LazyPreExpandedNode : object {
    private Func`1<IList`1<IValueTrackingNode>> myFGetNodes;
    private IList`1<IValueTrackingNode> myNodes;
    public IList`1<IDeclaredElement> ElementsToSearch { get; }
    public LazyPreExpandedNode(Func`1<IList`1<IValueTrackingNode>> fGetNodes);
    public sealed virtual IList`1<IDeclaredElement> get_ElementsToSearch();
    public sealed virtual void AddReference(IReference reference, IDeclaredElement element);
    public sealed virtual IList`1<IValueTrackingNode> ExpandWithFindResults(IProgressIndicator pi);
    public sealed virtual IFinderOperation InitNode(IProgressIndicator pi, CachingFinder cachingFinder);
}
public abstract class JetBrains.ReSharper.Feature.Services.ValueTracking.Nodes.NodeBase : UserDataHolder {
    [NotNullAttribute]
private static ILogger ourLog;
    [CanBeNullAttribute]
private ITreeNodePointer`1<ITreeNode> myNodePointer;
    [NotNullAttribute]
private IList`1<IValueTrackingNode> myChildren;
    [CompilerGeneratedAttribute]
private IValueTrackingNode <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueTrackingDirections <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueTrackingSessionEnvinonment <Session>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueTrackingCallStack <CallStack>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasDuplicates>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRecursive>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueTrackingNodePresentation <Presentation>k__BackingField;
    private Nullable`1<bool> myCanBeExpanded;
    public IValueTrackingNode Parent { get; }
    public ValueTrackingDirections Direction { get; public set; }
    public ValueTrackingSessionEnvinonment Session { get; }
    public IValueTrackingCallStack CallStack { get; }
    public bool HasDuplicates { get; private set; }
    public bool IsRecursive { get; private set; }
    public IValueTrackingNodePresentation Presentation { get; protected set; }
    public IList`1<IValueTrackingNode> Children { get; }
    public ITreeNode SourceElement { get; }
    public bool IsPassThrough { get; }
    public bool CanBeExpanded { get; }
    [CanBeNullAttribute]
public IType SourceType { get; }
    protected NodeBase(ValueTrackingSessionEnvinonment session, ValueTrackingDirections direction, IValueTrackingNode parent, ITreeNode element, IValueTrackingCallStack callStack);
    private static NodeBase();
    [CompilerGeneratedAttribute]
public sealed virtual IValueTrackingNode get_Parent();
    [CompilerGeneratedAttribute]
public sealed virtual ValueTrackingDirections get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(ValueTrackingDirections value);
    [CompilerGeneratedAttribute]
public sealed virtual ValueTrackingSessionEnvinonment get_Session();
    [CompilerGeneratedAttribute]
public sealed virtual IValueTrackingCallStack get_CallStack();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasDuplicates();
    [CompilerGeneratedAttribute]
private void set_HasDuplicates(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsRecursive();
    [CompilerGeneratedAttribute]
private void set_IsRecursive(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IValueTrackingNodePresentation get_Presentation();
    [CompilerGeneratedAttribute]
protected void set_Presentation(IValueTrackingNodePresentation value);
    public sealed virtual IList`1<IValueTrackingNode> get_Children();
    public virtual ITreeNode get_SourceElement();
    public sealed virtual void SetChildren(IList`1<IValueTrackingNode> children);
    public abstract virtual IPreExpandedNode GetPreExpandedNode(IProgressIndicator pi);
    public abstract virtual bool get_IsPassThrough();
    public virtual bool get_CanBeExpanded();
    public sealed virtual void SetHasDuplicates(bool hasDuplicates);
    public sealed virtual void SetRecursive(bool isRecursive);
    public virtual void AfterInitNode();
    protected virtual IValueTrackingNodePresentation CreatePresentation(IExpressionPresentationStyle style);
    public abstract virtual IType get_SourceType();
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Nodes.NodeFromPreExpandedNode : NodeBase {
    private PreExpandedNodeBase myPreExpandedNodeBase;
    public bool IsPassThrough { get; }
    public IType SourceType { get; }
    public NodeFromPreExpandedNode(PreExpandedNodeBase preExpandedNodeBase);
    public virtual IPreExpandedNode GetPreExpandedNode(IProgressIndicator pi);
    public virtual bool get_IsPassThrough();
    public virtual IType get_SourceType();
}
public abstract class JetBrains.ReSharper.Feature.Services.ValueTracking.Nodes.PreExpandedNodeBase : object {
    [CompilerGeneratedAttribute]
private ValueTrackingSessionEnvinonment <Session>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueTrackingDirections <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueTrackingNode <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueTrackingCallStack <CallStack>k__BackingField;
    public ValueTrackingSessionEnvinonment Session { get; }
    public ValueTrackingDirections Direction { get; }
    public IValueTrackingNode Parent { get; }
    public IValueTrackingCallStack CallStack { get; }
    public IList`1<IDeclaredElement> ElementsToSearch { get; }
    protected PreExpandedNodeBase(ValueTrackingSessionEnvinonment session, ValueTrackingDirections directions, IValueTrackingNode parent, IValueTrackingCallStack stack);
    [CompilerGeneratedAttribute]
public ValueTrackingSessionEnvinonment get_Session();
    [CompilerGeneratedAttribute]
public ValueTrackingDirections get_Direction();
    [CompilerGeneratedAttribute]
public IValueTrackingNode get_Parent();
    [CompilerGeneratedAttribute]
public IValueTrackingCallStack get_CallStack();
    public abstract virtual IList`1<IDeclaredElement> get_ElementsToSearch();
    public abstract virtual void AddReference(IReference reference, IDeclaredElement element);
    public abstract virtual IList`1<IValueTrackingNode> ExpandWithFindResults(IProgressIndicator pi);
    public virtual IFinderOperation InitNode(IProgressIndicator pi, CachingFinder cachingFinder);
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Nodes.PreExpandedWrapperNode : object {
    [CanBeNullAttribute]
private IPreExpandedNode myWrappedNode;
    [NotNullAttribute]
private WrapperNodeBase myOwnerNode;
    public IList`1<IDeclaredElement> ElementsToSearch { get; }
    public PreExpandedWrapperNode(IPreExpandedNode wrappedNode, WrapperNodeBase ownerNode);
    public sealed virtual IList`1<IDeclaredElement> get_ElementsToSearch();
    public sealed virtual void AddReference(IReference reference, IDeclaredElement element);
    public sealed virtual IList`1<IValueTrackingNode> ExpandWithFindResults(IProgressIndicator pi);
    public sealed virtual IFinderOperation InitNode(IProgressIndicator pi, CachingFinder cachingFinder);
    [CompilerGeneratedAttribute]
private IValueTrackingNode <ExpandWithFindResults>b__6_0(IValueTrackingNode x);
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Nodes.TrivialPreExpandedNode : object {
    [NotNullAttribute]
private IList`1<IValueTrackingNode> myNodes;
    public IList`1<IDeclaredElement> ElementsToSearch { get; }
    public TrivialPreExpandedNode(IList`1<IValueTrackingNode> nodes);
    public TrivialPreExpandedNode(IValueTrackingNode node);
    public sealed virtual IList`1<IDeclaredElement> get_ElementsToSearch();
    public sealed virtual void AddReference(IReference reference, IDeclaredElement element);
    public sealed virtual IList`1<IValueTrackingNode> ExpandWithFindResults(IProgressIndicator pi);
    public sealed virtual IFinderOperation InitNode(IProgressIndicator pi, CachingFinder cachingFinder);
}
public abstract class JetBrains.ReSharper.Feature.Services.ValueTracking.Nodes.WrapperNodeBase : UserDataHolder {
    private static ILogger ourLog;
    private IList`1<IValueTrackingNode> myChildren;
    [CompilerGeneratedAttribute]
private IValueTrackingNode <WrappedNode>k__BackingField;
    private IValueTrackingNode myParent;
    [CompilerGeneratedAttribute]
private bool <HasDuplicates>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRecursive>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueTrackingNodePresentation <Presentation>k__BackingField;
    protected IValueTrackingNode WrappedNode { get; }
    public bool HasDuplicates { get; private set; }
    public bool IsRecursive { get; private set; }
    public ValueTrackingDirections Direction { get; }
    public ValueTrackingSessionEnvinonment Session { get; }
    public IValueTrackingNode Parent { get; }
    public IValueTrackingCallStack CallStack { get; public set; }
    public ITreeNode SourceElement { get; }
    public IList`1<IValueTrackingNode> Children { get; }
    public bool CanBeExpanded { get; }
    public bool IsPassThrough { get; }
    public IValueTrackingNodePresentation Presentation { get; private set; }
    protected WrapperNodeBase(IValueTrackingNode wrappedNode, IValueTrackingNode parent);
    private static WrapperNodeBase();
    [CompilerGeneratedAttribute]
protected IValueTrackingNode get_WrappedNode();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasDuplicates();
    [CompilerGeneratedAttribute]
private void set_HasDuplicates(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsRecursive();
    [CompilerGeneratedAttribute]
private void set_IsRecursive(bool value);
    [CanBeNullAttribute]
public abstract virtual IValueTrackingNode WrapChild(IValueTrackingNode childOfWrappedNode);
    public sealed virtual ValueTrackingDirections get_Direction();
    public sealed virtual ValueTrackingSessionEnvinonment get_Session();
    public sealed virtual IValueTrackingNode get_Parent();
    public sealed virtual IValueTrackingCallStack get_CallStack();
    public void set_CallStack(IValueTrackingCallStack value);
    public sealed virtual ITreeNode get_SourceElement();
    public sealed virtual IList`1<IValueTrackingNode> get_Children();
    public sealed virtual bool get_CanBeExpanded();
    public virtual IPreExpandedNode GetPreExpandedNode(IProgressIndicator pi);
    public virtual bool get_IsPassThrough();
    public sealed virtual void SetChildren(IList`1<IValueTrackingNode> children);
    public sealed virtual void SetHasDuplicates(bool hasDuplicates);
    public sealed virtual void SetRecursive(bool isRecursive);
    [CompilerGeneratedAttribute]
public virtual IValueTrackingNodePresentation get_Presentation();
    [CompilerGeneratedAttribute]
private void set_Presentation(IValueTrackingNodePresentation value);
    public virtual void AfterInitNode();
    protected virtual IValueTrackingNodePresentation CreatePresentation(IExpressionPresentationStyle style, RichText innerPresentation);
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Presentation.DefaultValueTrackingNodePresentation : object {
    private string myLineText;
    private int myHiStart;
    private int myHiLength;
    public DefaultValueTrackingNodePresentation(string lineText, int hiStart, int hiLength);
    public sealed virtual IconId GetIconName();
    public sealed virtual RichText GetPresentationRichText(IValueTrackingNode node);
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Presentation.EmptyPresenter : ValueTrackingGroupPresenterBase {
    public static IValueTrackingNodeGroupPresenter PresenterInstance;
    private static Key`1<RichText> ourNamespaceGroupKey;
    protected Key`1<RichText> PresenterKey { get; }
    public string Description { get; }
    private static EmptyPresenter();
    protected virtual Key`1<RichText> get_PresenterKey();
    protected virtual RichText GetTextOfSourceElement(ITreeNode sourceElement);
    protected virtual RichText PresentDeclaredElement(IDeclaredElement element);
    public virtual string get_Description();
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Presentation.ExpressionPresentationOnDemand : object {
    [CompilerGeneratedAttribute]
private TextStyle <TextStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private TextStyle <HighlightedTextStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private TextStyle <WrapperTextStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private TextStyle <WrapperHighlightedTextStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private TextStyle <PlaceholderStyle>k__BackingField;
    public TextStyle TextStyle { get; public set; }
    public TextStyle HighlightedTextStyle { get; public set; }
    public TextStyle WrapperTextStyle { get; public set; }
    public TextStyle WrapperHighlightedTextStyle { get; public set; }
    public TextStyle PlaceholderStyle { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual TextStyle get_TextStyle();
    [CompilerGeneratedAttribute]
public void set_TextStyle(TextStyle value);
    [CompilerGeneratedAttribute]
public sealed virtual TextStyle get_HighlightedTextStyle();
    [CompilerGeneratedAttribute]
public void set_HighlightedTextStyle(TextStyle value);
    [CompilerGeneratedAttribute]
public sealed virtual TextStyle get_WrapperTextStyle();
    [CompilerGeneratedAttribute]
public void set_WrapperTextStyle(TextStyle value);
    [CompilerGeneratedAttribute]
public sealed virtual TextStyle get_WrapperHighlightedTextStyle();
    [CompilerGeneratedAttribute]
public void set_WrapperHighlightedTextStyle(TextStyle value);
    [CompilerGeneratedAttribute]
public sealed virtual TextStyle get_PlaceholderStyle();
    [CompilerGeneratedAttribute]
public void set_PlaceholderStyle(TextStyle value);
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Presentation.ExpressionPresentationStyle : object {
    [NotNullAttribute]
public static IExpressionPresentationStyle DefaultStyle;
    private static TextStyle ourTextStyle;
    private static TextStyle ourPlaceholderStyle;
    private static TextStyle ourHighlightedTextStyle;
    private static TextStyle ourWrapperTextStyle;
    private static TextStyle ourWrapperHighlightedTextStyle;
    public TextStyle TextStyle { get; }
    public TextStyle WrapperTextStyle { get; }
    public TextStyle WrapperHighlightedTextStyle { get; }
    public TextStyle PlaceholderStyle { get; }
    public TextStyle HighlightedTextStyle { get; }
    private static ExpressionPresentationStyle();
    public sealed virtual TextStyle get_TextStyle();
    public sealed virtual TextStyle get_WrapperTextStyle();
    public sealed virtual TextStyle get_WrapperHighlightedTextStyle();
    public sealed virtual TextStyle get_PlaceholderStyle();
    public sealed virtual TextStyle get_HighlightedTextStyle();
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Presentation.FileGroupPresenter : ValueTrackingGroupPresenterBase {
    public static IValueTrackingNodeGroupPresenter PresenterInstance;
    private static Key`1<RichText> ourNamespaceGroupKey;
    protected Key`1<RichText> PresenterKey { get; }
    public string Description { get; }
    private static FileGroupPresenter();
    protected virtual Key`1<RichText> get_PresenterKey();
    protected virtual RichText GetTextOfSourceElement(ITreeNode sourceElement);
    public virtual string get_Description();
}
public interface JetBrains.ReSharper.Feature.Services.ValueTracking.Presentation.IExpressionPresentationStyle {
    public TextStyle TextStyle { get; }
    public TextStyle HighlightedTextStyle { get; }
    public TextStyle WrapperTextStyle { get; }
    public TextStyle WrapperHighlightedTextStyle { get; }
    public TextStyle PlaceholderStyle { get; }
    public abstract virtual TextStyle get_TextStyle();
    public abstract virtual TextStyle get_HighlightedTextStyle();
    public abstract virtual TextStyle get_WrapperTextStyle();
    public abstract virtual TextStyle get_WrapperHighlightedTextStyle();
    public abstract virtual TextStyle get_PlaceholderStyle();
}
public interface JetBrains.ReSharper.Feature.Services.ValueTracking.Presentation.IValueTrackingNodeGroupPresenter {
    public string Description { get; }
    public abstract virtual RichText Presentation(IValueTrackingNode node);
    public abstract virtual string get_Description();
}
public interface JetBrains.ReSharper.Feature.Services.ValueTracking.Presentation.IValueTrackingNodePresentation {
    [CanBeNullAttribute]
public abstract virtual IconId GetIconName();
    [NotNullAttribute]
public abstract virtual RichText GetPresentationRichText(IValueTrackingNode node);
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Presentation.NamespaceGroupPresenter : ValueTrackingGroupPresenterBase {
    public static IValueTrackingNodeGroupPresenter PresenterInstance;
    private static Key`1<RichText> ourNamespaceGroupKey;
    protected Key`1<RichText> PresenterKey { get; }
    public string Description { get; }
    private static NamespaceGroupPresenter();
    protected virtual Key`1<RichText> get_PresenterKey();
    protected virtual RichText GetTextOfSourceElement(ITreeNode sourceElement);
    public virtual string get_Description();
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Presentation.NamespaceTypeGroupPresenter : ValueTrackingGroupPresenterBase {
    public static IValueTrackingNodeGroupPresenter PresenterInstance;
    private static Key`1<RichText> ourNamespaceGroupKey;
    protected Key`1<RichText> PresenterKey { get; }
    public string Description { get; }
    private static NamespaceTypeGroupPresenter();
    protected virtual Key`1<RichText> get_PresenterKey();
    public virtual string get_Description();
    protected virtual RichText GetTextOfSourceElement(ITreeNode sourceElement);
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Presentation.NamespaceTypeMemberGroupPresenter : ValueTrackingGroupPresenterBase {
    public static IValueTrackingNodeGroupPresenter PresenterInstance;
    private static Key`1<RichText> ourNamespaceGroupKey;
    protected Key`1<RichText> PresenterKey { get; }
    public string Description { get; }
    private static NamespaceTypeMemberGroupPresenter();
    protected virtual Key`1<RichText> get_PresenterKey();
    protected virtual RichText GetTextOfSourceElement(ITreeNode sourceElement);
    public virtual string get_Description();
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Presentation.ProjectFolderFileGroupPresenter : ValueTrackingGroupPresenterBase {
    public static IValueTrackingNodeGroupPresenter PresenterInstance;
    private static Key`1<RichText> ourNamespaceGroupKey;
    protected Key`1<RichText> PresenterKey { get; }
    public string Description { get; }
    private static ProjectFolderFileGroupPresenter();
    protected virtual Key`1<RichText> get_PresenterKey();
    protected virtual RichText GetTextOfSourceElement(ITreeNode sourceElement);
    public virtual string get_Description();
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Presentation.ProjectFolderGroupPresenter : ValueTrackingGroupPresenterBase {
    public static IValueTrackingNodeGroupPresenter PresenterInstance;
    private static Key`1<RichText> ourNamespaceGroupKey;
    protected Key`1<RichText> PresenterKey { get; }
    public string Description { get; }
    private static ProjectFolderGroupPresenter();
    protected virtual Key`1<RichText> get_PresenterKey();
    protected virtual RichText GetTextOfSourceElement(ITreeNode sourceElement);
    public virtual string get_Description();
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Presentation.ProjectGroupPresenter : ValueTrackingGroupPresenterBase {
    public static IValueTrackingNodeGroupPresenter PresenterInstance;
    private static Key`1<RichText> ourNamespaceGroupKey;
    protected Key`1<RichText> PresenterKey { get; }
    public string Description { get; }
    private static ProjectGroupPresenter();
    protected virtual Key`1<RichText> get_PresenterKey();
    protected virtual RichText GetTextOfSourceElement(ITreeNode sourceElement);
    public virtual string get_Description();
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Presentation.RichTextPresentation : object {
    [NotNullAttribute]
private RichText myRichText;
    [CanBeNullAttribute]
private IconId myIconName;
    public RichTextPresentation(RichText richText, IconId iconName);
    public sealed virtual IconId GetIconName();
    public sealed virtual RichText GetPresentationRichText(IValueTrackingNode node);
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Presentation.TrivialPresentation : object {
    private string myText;
    public TrivialPresentation(string text);
    public sealed virtual IconId GetIconName();
    public sealed virtual RichText GetPresentationRichText(IValueTrackingNode node);
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Presentation.TypeAndMemberGroupPresenter : ValueTrackingGroupPresenterBase {
    public static IValueTrackingNodeGroupPresenter PresenterInstance;
    private static Key`1<RichText> ourNamespaceGroupKey;
    protected Key`1<RichText> PresenterKey { get; }
    public string Description { get; }
    private static TypeAndMemberGroupPresenter();
    protected virtual Key`1<RichText> get_PresenterKey();
    protected virtual RichText GetTextOfSourceElement(ITreeNode sourceElement);
    public virtual string get_Description();
}
public class JetBrains.ReSharper.Feature.Services.ValueTracking.Presentation.TypeGroupPresenter : ValueTrackingGroupPresenterBase {
    public static IValueTrackingNodeGroupPresenter PresenterInstance;
    private static Key`1<RichText> ourNamespaceGroupKey;
    protected Key`1<RichText> PresenterKey { get; }
    public string Description { get; }
    private static TypeGroupPresenter();
    protected virtual Key`1<RichText> get_PresenterKey();
    protected virtual RichText GetTextOfSourceElement(ITreeNode sourceElement);
    protected virtual RichText PresentDeclaredElement(IDeclaredElement element);
    public virtual string get_Description();
}
public abstract class JetBrains.ReSharper.Feature.Services.ValueTracking.Presentation.ValueTrackingGroupPresenterBase : object {
    protected static TextStyle FirstPartStyle;
    protected static TextStyle SecondPartStyle;
    protected Key`1<RichText> PresenterKey { get; }
    public string Description { get; }
    private static ValueTrackingGroupPresenterBase();
    protected abstract virtual Key`1<RichText> get_PresenterKey();
    public sealed virtual RichText Presentation(IValueTrackingNode node);
    public abstract virtual string get_Description();
    protected abstract virtual RichText GetTextOfSourceElement(ITreeNode sourceElement);
    protected virtual RichText PresentDeclaredElement(IDeclaredElement element);
    public virtual string ToString();
}
public static class JetBrains.ReSharper.Feature.Services.ValueTracking.Presentation.ValueTrackingGroupPresenters : object {
    public static IValueTrackingNodeGroupPresenter[] ValueTrackingNodeGroupPresenters;
    private static ValueTrackingGroupPresenters();
}
public interface JetBrains.ReSharper.Feature.Services.VisualElements.IVisualElementFactory {
    [CanBeNullAttribute]
public abstract virtual IColorReference GetColorReference(ITreeNode element);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Feature.Services.ZoneMarker : object {
}
public class JetBrains.ReSharper.Features.Diagramming.Core.ArchitectureDiagrams.Graph.ArchitectureViewModelGraph : DiagramGraphBase {
    private ISolution mySolution;
    private IArchitecturePersistentGraph myPersistentOwner;
    private bool myShowAdvanced;
    [CompilerGeneratedAttribute]
private bool <HasAnyPath>k__BackingField;
    public IArchitecturePersistentGraph PersistentOwner { get; }
    public bool ShowAdvanced { get; }
    public bool HasAnyPath { get; public set; }
    public ISolution Solution { get; }
    public ArchitectureViewModelGraph(ISolution solution, IArchitecturePersistentGraph persistentOwner, bool showAdvanced);
    public sealed virtual IArchitecturePersistentGraph get_PersistentOwner();
    public sealed virtual bool get_ShowAdvanced();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasAnyPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HasAnyPath(bool value);
    public ISolution get_Solution();
    public virtual bool RemoveEdge(IDiagramGraphEdge edge);
    public sealed virtual IProjectModelGraphElement TryGetGraphElement(IProjectElement projectModelElement);
    public sealed virtual IProjectModelGraphElement TryGetGraphElement(string persistentId);
    public virtual void AddNode(IDiagramGraphNode node);
    public virtual void AddEdge(IDiagramGraphEdge edge);
    public void AddPathEdges();
}
public static class JetBrains.ReSharper.Psi.CodeStyle.SettingsAutodetectUtil : object {
    public static void DetectAndApplySettings(ISolution solution, IRangeMarker rangeMarker, PsiLanguageType languageType, IContextBoundSettingsStore settingsStore, AdditionalFormatterParameters parameters, bool applySyntaxStyles);
    public static void DetectSettings(ISolution solution, IFile file, AdditionalFormatterParameters parameters);
}
public class JetBrains.UI.ThemedIcons.DatabasesThemedIcons : object {
}
public class JetBrains.UI.ThemedIcons.EntityFrameworkThemedIcons : object {
}
public class JetBrains.UI.ThemedIcons.VsDebuggerThemedIcons : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
