[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Environment.CopyFqn.ContainingDeclarationFqnProvider : object {
    private ISolution mySolution;
    public int Priority { get; }
    public ContainingDeclarationFqnProvider(ISolution solution);
    public sealed virtual int get_Priority();
    [CanBeNullAttribute]
private static IDeclaredElement GetParentElement(IDeclaredElement declaredElement);
    public static RichText PresentQualified(IDeclaredElement declaredElement);
    public static RichText PresentShort(IDeclaredElement declaredElement);
    private bool IsApplicableDeclaredElement(IDeclaredElement declaredElement);
    public sealed virtual bool IsApplicable(IDataContext dataContext);
    public sealed virtual IEnumerable`1<PresentableFqn> GetSortedFqns(IDataContext dataContext);
    private static PresentableFqn GetQualifiedFqn(IDeclaredElement parentElement, PsiIconManager iconManager);
    public IList`1<IDeclaredElement> GetParentElements(ICollection`1<IDeclaredElement> declaredElements);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Environment.CopyFqn.ContainingDeclarationFqnProvider/<GetParentElements>d__12")]
public IEnumerable`1<IDeclaredElement> GetParentElements(IDeclaredElement declaredElement);
    public ICollection`1<IDeclaredElement> GetDeclaredElements(IDataContext dataContext);
}
[ActionAttribute("JetBrains.ReSharper.Features.Environment.CopyFqn.CopyFqnConstants", "ActionTitle")]
public class JetBrains.ReSharper.Features.Environment.CopyFqn.CopyFqnAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
public static class JetBrains.ReSharper.Features.Environment.CopyFqn.CopyFqnConstants : object {
    public static string ActionCaption { get; }
    public static string ActionTitle { get; }
    public static string get_ActionCaption();
    public static string get_ActionTitle();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Environment.CopyFqn.CurrentLineFQNProvider : object {
    public int Priority { get; }
    public sealed virtual int get_Priority();
    public sealed virtual bool IsApplicable(IDataContext dataContext);
    public sealed virtual IEnumerable`1<PresentableFqn> GetSortedFqns(IDataContext dataContext);
    private static PresentableFqn CreateCurrentLinePresentableFqn(IDataContext dataContext);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Environment.CopyFqn.DefaultFqnTemplateProvider : object {
    private static ILogger ourLog;
    private IEnumerable`1<TemplatePattern> myPatterns;
    private static DefaultFqnTemplateProvider();
    public sealed virtual IEnumerable`1<ValueTuple`2<string, string>> GetPatterns();
    public sealed virtual string Replace(IDataContext cache, string uri, UserDataHolder state);
    private void Init();
    [CanBeNullAttribute]
private string GetUpsourceSelection(IDataContext context);
    [CanBeNullAttribute]
private string GetOutputAssemblyName(IDataContext context);
    [CanBeNullAttribute]
private static string GetColumn(IDataContext context);
    [CanBeNullAttribute]
public static string GetSelEnd(IDataContext context);
    [CanBeNullAttribute]
public static string GetSelStart(IDataContext context);
    private static Nullable`1<DocumentRange> GetSelectionHull(IDataContext context);
    [CanBeNullAttribute]
private static string GetLine(IDataContext context);
    [CanBeNullAttribute]
private static VirtualFileSystemPath GetPath(IDataContext context);
    [CanBeNullAttribute]
private static string GetHeadAbbrevEscaped(IDataContext arg);
    [CanBeNullAttribute]
private static string GetHeadAbbrev(IDataContext context);
    [CanBeNullAttribute]
private static string GetRevision(IDataContext context);
    [CanBeNullAttribute]
private static string GetPathGit(IDataContext context);
    [CanBeNullAttribute]
private static string GetPathSln(IDataContext context);
    [CanBeNullAttribute]
private static string GetPathProject(IDataContext context);
    [CanBeNullAttribute]
private static string MakeRelativeEscape(VirtualFileSystemPath path, VirtualFileSystemPath relative);
    [CanBeNullAttribute]
private static string GetFilename(IDataContext context);
    [CompilerGeneratedAttribute]
internal static int <GetUpsourceSelection>g__GetUpsourceRange|5_0(int offset, <>c__DisplayClass5_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Features.Environment.CopyFqn.FqnService : object {
    private IEnumerable`1<IFqnProvider> myFqnProviders;
    protected ISolution mySolution;
    private Clipboard myClipboard;
    private ITooltipManager myToolTipManager;
    private JetPopupMenus myJetPopupMenus;
    public FqnService(IEnumerable`1<IFqnProvider> fqnProviders, ISolution solution, Clipboard clipboard, ITooltipManager toolTipManager, JetPopupMenus jetPopupMenus);
    public virtual bool HasFqns(IDataContext dataContext);
    public virtual IList`1<PresentableFqn> GetSortedFqns(IDataContext dataContext);
    public virtual void ShowMenu(IList`1<PresentableFqn> sortedFqns, PopupWindowContextSource contextSource);
    public virtual void CustomizeMenu(Lifetime lifetime, JetPopupMenu menu);
    protected virtual void DescribeItem(DescribeItemEventArgs e, object keyInClipboard);
    protected virtual void ItemClicked(PopupWindowContextSource contextSource, object key);
    protected virtual void DescribePresentableFqn(DescribeItemEventArgs e, PresentableFqn item, object keyInClipboard);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("0")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Environment.CopyFqn.FqnServiceMnemonics : FqnService {
    public FqnServiceMnemonics(IEnumerable`1<IFqnProvider> fqnProviders, ISolution solution, Clipboard clipboard, ITooltipManager toolTipManager, JetPopupMenus jetPopupMenus);
    protected virtual void DescribePresentableFqn(DescribeItemEventArgs e, PresentableFqn item, object keyInClipboard);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Environment.CopyFqn.GithubFqnProvider : object {
    public int Priority { get; }
    public sealed virtual int get_Priority();
    public sealed virtual bool IsApplicable(IDataContext dataContext);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Environment.CopyFqn.GithubFqnProvider/<GetSortedFqns>d__3")]
public sealed virtual IEnumerable`1<PresentableFqn> GetSortedFqns(IDataContext dataContext);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Features.Environment.CopyFqn.IFqnProvider {
    public int Priority { get; }
    public abstract virtual int get_Priority();
    public abstract virtual bool IsApplicable(IDataContext dataContext);
    public abstract virtual IEnumerable`1<PresentableFqn> GetSortedFqns(IDataContext dataContext);
}
public interface JetBrains.ReSharper.Features.Environment.CopyFqn.IFqnTemplateProvider {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<ValueTuple`2<string, string>> GetPatterns();
    [CanBeNullAttribute]
public abstract virtual string Replace(IDataContext cache, string uri, UserDataHolder state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Features.Environment.CopyFqn.PresentableFqn : object {
    [NullableAttribute("2")]
public IconId Icon;
    [NullableAttribute("2")]
public RichText PresentableText;
    [NullableAttribute("2")]
public string TextToCopy;
    public Nullable`1<char> Mnemonic;
    [CompilerGeneratedAttribute]
private MenuItemStyle <Style>k__BackingField;
    public MenuItemStyle Style { get; private set; }
    public PresentableFqn(IconId icon, RichText presentableText, string textToCopy, Nullable`1<char> mnemonic);
    public PresentableFqn(IconId icon, RichText text);
    [CompilerGeneratedAttribute]
public MenuItemStyle get_Style();
    [CompilerGeneratedAttribute]
private Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Style(MenuItemStyle value);
    public static PresentableFqn CreateSeparator();
}
[OptionsPageAttribute("SourceBrowserOptionPagePID", "Source Browsing", "JetBrains.ReSharper.Features.Navigation.Resources.FeaturesFindingThemedIcons/SourceBrowserOptionsPage")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Environment.CopyFqn.SourceBrowserOptionPage : BeSimpleOptionsPage {
    public static string PID;
    public SourceBrowserOptionPage(Lifetime lifetime, OptionsPageContext optionsPageContext, OptionsSettingsSmartContext optionsSettingsSmartContext, IIconHost iconHost, IEnumerable`1<IFqnTemplateProvider> templatesProvider, HelpSystem helpSystem, ISolution solution);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.ReSharper.Features.Environment.Resources.Strings", "SourceBrowserSettingsSettingDescription")]
public class JetBrains.ReSharper.Features.Environment.CopyFqn.SourceBrowserSettingsKey : object {
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Features.Environment.Resources.Strings", "CustomURIsSettingDescription")]
public IIndexedEntry`2<string, UriEntry> CustomUris;
}
[TypeConverterAttribute("JetBrains.ReSharper.Features.Environment.CopyFqn.UriEntryTypeConverter")]
public class JetBrains.ReSharper.Features.Environment.CopyFqn.UriEntry : object {
    public int Order;
    public string Uri;
    public UriEntry(string uri, int order);
    protected bool Equals(UriEntry other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.Features.Environment.CopyFqn.UriEntryTypeConverter : TypeConverterBase`1<UriEntry> {
    private static char US;
    private static UriEntry Parse(string arg);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Environment.CopyFqn.UriFqnProvider : object {
    public int Priority { get; }
    public sealed virtual int get_Priority();
    public sealed virtual bool IsApplicable(IDataContext dataContext);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Environment.CopyFqn.UriFqnProvider/<GetSortedFqns>d__3")]
public sealed virtual IEnumerable`1<PresentableFqn> GetSortedFqns(IDataContext dataContext);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Environment.CopyFqn.XmlDocIdFqnProvider : object {
    public int Priority { get; }
    public sealed virtual int get_Priority();
    public sealed virtual bool IsApplicable(IDataContext dataContext);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Environment.CopyFqn.XmlDocIdFqnProvider/<GetSortedFqns>d__3")]
public sealed virtual IEnumerable`1<PresentableFqn> GetSortedFqns(IDataContext dataContext);
    [CanBeNullAttribute]
private static IXmlDocIdOwner FindMemberWithId(IDataContext context);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.Environment.CopyFqn.ZoneMarker : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.ReSharper.Features.Environment.GitCommandRunner : object {
    private static ILogger ourLog;
    private static GitCommandRunner();
    public static bool IsAvailable(IInteractionContext interactionContext);
    private static VirtualFileSystemPath GetGitPath(IInteractionContext interactionContext);
    public static string GetOriginUrl(VirtualFileSystemPath dir);
    public static string GetHeadAbbrev(VirtualFileSystemPath dir);
    public static string GetHead(VirtualFileSystemPath dir);
    public static VirtualFileSystemPath GetTopLevel(VirtualFileSystemPath dir);
    public static string Run(string command, VirtualFileSystemPath workingDirectory, int timeoutMs, bool fullOutput);
    public static string Run(Lifetime lifetime, string command, VirtualFileSystemPath workingDirectory, int timeoutMs, bool fullOutput);
    [CanBeNullAttribute]
private static string RunAndReadFirstLine(string command, VirtualFileSystemPath workingDirectory, int timeoutMs);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[PureAttribute]
private static string ExpectOneLine(string input);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Environment.LoggerTraceThis.LoggerTraceThis : object {
    private ContainingDeclarationFqnProvider myFqnProvider;
    private ISettingsStore mySettingsStore;
    public LoggerTraceThis(ContainingDeclarationFqnProvider fqnProvider, ISettingsStore settings);
    public bool IsAvailable(IDataContext context);
    public void TraceThis(IDataContext context);
}
[ActionAttribute("JetBrains.ReSharper.Features.Environment.Resources.Strings", "LoggerTraceThisActionText")]
public class JetBrains.ReSharper.Features.Environment.LoggerTraceThis.LoggerTraceThisAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
[ActionGroupAttribute("0", "10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Environment.LoggerTraceThis.LoggerTraceThisIntoInternalLoggerMenu : object {
    public LoggerTraceThisIntoInternalLoggerMenu(LoggerTraceThisAction traceThis);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.Environment.LoggerTraceThis.ZoneMarker : object {
}
[OptionsPageAttribute("FeaturesEnvironmentGeneralPageCaches", "General - Caches", "JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons/EnvironmentGeneral")]
public class JetBrains.ReSharper.Features.Environment.Options.FeaturesEnvironmentGeneralPageCaches : CustomSimpleOptionsPage {
    private static string PID;
    [NotNullAttribute]
private IProperty`1<bool> myNeedReopen;
    [NotNullAttribute]
private IProperty`1<bool> myNeedRestart;
    [NotNullAttribute]
private static ILogger ourLogger;
    public FeaturesEnvironmentGeneralPageCaches(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, IApplicationHost applicationHost, ICommonFileDialogs commonFileDialogs, IPsiConfiguration psiConfiguration, SolutionCaches solutionCaches);
    private static FeaturesEnvironmentGeneralPageCaches();
    private void ClearCaches(IPsiConfiguration psiConfiguration);
    private static void InstallDiskCleanupEntry(IApplicationHost applicationHost);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[OptionsPageAttribute("FeaturesEnvironmentGeneralPageIcons", "Feature icons", "JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons/EnvironmentGeneral")]
public class JetBrains.ReSharper.Features.Environment.Options.FeaturesEnvironmentGeneralPageIcons : CustomSimpleOptionsPage {
    public static string PID;
    private static IconId[] SymbolIconSamples;
    public FeaturesEnvironmentGeneralPageIcons(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, IThreading threading, IconIdOwnersMap iconIdOwners, PsiSymbolIconThemeSettingsLoader themloader, ILogger logger);
    private static FeaturesEnvironmentGeneralPageIcons();
    private static IconTheme IconSelectionToTheme(PsiSymbolIconThemeSelection selection, IconThemeAspect[] autoselection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Features.Environment.PackageChecker.InstalledNuGetPackagesTracker : object {
    private static ILogger ourLog;
    private NuGetPackageReferenceTracker myNugetTracker;
    private ConcurrentDictionary`2<INugetPackageName, Unit> myPackages;
    [CompilerGeneratedAttribute]
private ISignal`1<Unit> <OnChanged>k__BackingField;
    public IEnumerable`1<INugetPackageName> Packages { get; }
    public ISignal`1<Unit> OnChanged { get; }
    public bool IsProjectPackages { get; }
    public InstalledNuGetPackagesTracker(Lifetime lifetime, NuGetPackageReferenceTracker nugetTracker);
    private static InstalledNuGetPackagesTracker();
    public sealed virtual IEnumerable`1<INugetPackageName> get_Packages();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<Unit> get_OnChanged();
    public sealed virtual bool get_IsProjectPackages();
    public Task ForceUpdatePackages();
    private Task UpdatePackages();
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Features.Environment.PackageChecker.JsonMarshaller`1 : object {
    private JsonSerializer mySerializer;
    public sealed virtual void Marshal(UnsafeWriter writer, T value);
    public sealed virtual T Unmarshal(UnsafeReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Features.Environment.PackageChecker.NuGetVulnerableStatus : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private VulnerableState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxAge>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private VulnerabilityReport[] <Vulnerabilities>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public DateTimeOffset Timestamp { get; public set; }
    public VulnerableState State { get; public set; }
    public TimeSpan MaxAge { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public VulnerabilityReport[] Vulnerabilities { get; public set; }
    public bool IsValid { get; }
    public DateTimeOffset ValidTill { get; }
    public NuGetVulnerableStatus(DateTimeOffset Timestamp, VulnerableState State, TimeSpan MaxAge, VulnerabilityReport[] Vulnerabilities);
    [CompilerGeneratedAttribute]
protected NuGetVulnerableStatus(NuGetVulnerableStatus original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Timestamp(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public VulnerableState get_State();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_State(VulnerableState value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxAge();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MaxAge(TimeSpan value);
    [CompilerGeneratedAttribute]
public VulnerabilityReport[] get_Vulnerabilities();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Vulnerabilities(VulnerabilityReport[] value);
    public bool get_IsValid();
    public DateTimeOffset get_ValidTill();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(NuGetVulnerableStatus left, NuGetVulnerableStatus right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(NuGetVulnerableStatus left, NuGetVulnerableStatus right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(NuGetVulnerableStatus other);
    [CompilerGeneratedAttribute]
public virtual NuGetVulnerableStatus <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(DateTimeOffset& Timestamp, VulnerableState& State, TimeSpan& MaxAge, VulnerabilityReport[]& Vulnerabilities);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Environment.PackageChecker.PackageCheckerServiceLocator : object {
    private static ILogger ourLog;
    private static Uri ourServiceLocator;
    private static Uri ourFallback;
    private static TimeSpan ourMaxAge;
    private WebProxySettingsReader myWebProxySettings;
    private FileSystemPath myPackageCheckerUriFile;
    private static TimeSpan ourClientTimeout;
    public WebProxySettingsReader WebProxySettings { get; }
    public PackageCheckerServiceLocator(WebProxySettingsReader webProxySettings, ISolutionCaches solutionCaches);
    private static PackageCheckerServiceLocator();
    public WebProxySettingsReader get_WebProxySettings();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Features.Environment.PackageChecker.PackageCheckerServiceLocator/<GetServiceUri>d__10")]
public Task`1<Uri> GetServiceUri();
    public HttpClient CreateHttpClient();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private Uri <GetServiceUri>b__10_0();
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.ReSharper.Features.Environment.Resources.Strings", "VulnerabilityCheckerSettingsCaption")]
public class JetBrains.ReSharper.Features.Environment.PackageChecker.PackageCheckerSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Environment.Resources.Strings", "VulnerabilityCheckerEnableChecker")]
public bool EnablePackageChecker;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SettingsIndexedEntryAttribute("JetBrains.ReSharper.Features.Environment.Resources.Strings", "VulnerabilityCheckerIgnoredPackages")]
public IIndexedEntry`2<string, string> IgnoredPackage;
}
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.ReSharper.Features.Environment.PackageChecker.PackageCheckerUsagesCollector : CounterUsagesCollector {
    private EventLogGroup myGroup;
    private EventId myNotificationShown;
    private EventId myDisableNotificationClicked;
    private EventId myOpenAdvisoryClicked;
    public PackageCheckerUsagesCollector(FeatureUsageLogger featureUsageLogger);
    public virtual EventLogGroup GetGroup();
    public void LogDisable(ISolution solution);
    public void LogOpenAdvisory(ISolution solution);
    public void LogVulnerablePackageFound(ISolution solution);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Environment.PackageChecker.PackageCheckerUserId : object {
    private IDataAccess`1<Guid> myStorageAccess;
    public PackageCheckerUserId(DataAccess dataAccess);
    public Guid GetUserId();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Features.Environment.PackageChecker.VulnerabilitiesApi : object {
    public static int MaxBatchSize;
    private HttpClient myClient;
    private Uri myEndpoint;
    private static string Resource;
    public VulnerabilitiesApi(HttpClient client, Uri uri);
    public Task`1<ValueTuple`2<VulReport[], HttpResponseMessage>> Query(IEnumerable`1<INugetPackageName> packageNames, Guid uid, CancellationToken cancel);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Features.Environment.PackageChecker.VulnerabilitiesApi/<Query>d__6")]
public Task`1<ValueTuple`2<VulReport[], HttpResponseMessage>> Query(VulRequest request, CancellationToken cancel);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Features.Environment.PackageChecker.VulnerablePackagesTracker : object {
    private static ILogger ourLog;
    private Lifetime myComponentLifetime;
    private ITaskHost myTasks;
    private IEnumerable`1<IPackageCheckerPackagesProvider> myPackageProviders;
    private PackageCheckerServiceLocator myServiceLocator;
    private PackageCheckerUserId myUserId;
    private SequentialLifetimes myScheduleNextLifetime;
    private SimpleSignal myInvalidateRequested;
    private SemaphoreSlim myInvalidateSemaphore;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private OptimizedPersistentSortedMap`2<INugetPackageName, NuGetVulnerableStatus> myNuGetVulnerableStatusMap;
    private HashSet`1<INugetPackageName> myIgnoredPackages;
    private Dictionary`2<string, IReadOnlyCollection`1<VulnerabilityReportWithPackageName>> myVulnerableMethodFqns;
    private HashSet`1<string> myVulnerableMethodShortNames;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<INugetPackageName, VulnerabilityReport[]> <VulnerablePackages>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <Changed>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <InSync>k__BackingField;
    private TimeSpan myDefaultMaxAge;
    private TimeSpan myLongTermMaxAge;
    private TimeSpan myServerErrorMaxAge;
    private TimeSpan myThrottlingMaxAge;
    public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<VulnerabilityReportWithPackageName>> VulnerableMethodFqns { get; }
    public IReadOnlyCollection`1<string> VulnerableMethodShortNames { get; }
    public IProperty`1<bool> Enabled { get; }
    public IReadOnlyDictionary`2<INugetPackageName, VulnerabilityReport[]> VulnerablePackages { get; private set; }
    public ISimpleSignal Changed { get; }
    public IProperty`1<bool> InSync { get; }
    public VulnerablePackagesTracker(Lifetime componentLifetime, ISolution solution, IEnumerable`1<IPackageCheckerPackagesProvider> packageProviders, ISolutionCaches solutionCaches, ISettingsStore settings, PackageCheckerServiceLocator serviceLocator, PackageCheckerUserId userId);
    private static VulnerablePackagesTracker();
    public sealed virtual IReadOnlyDictionary`2<string, IReadOnlyCollection`1<VulnerabilityReportWithPackageName>> get_VulnerableMethodFqns();
    public sealed virtual IReadOnlyCollection`1<string> get_VulnerableMethodShortNames();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_Enabled();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<INugetPackageName, VulnerabilityReport[]> get_VulnerablePackages();
    [CompilerGeneratedAttribute]
private void set_VulnerablePackages(IReadOnlyDictionary`2<INugetPackageName, VulnerabilityReport[]> value);
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_Changed();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_InSync();
    private void SyncIgnoredPackages(IContextBoundSettingsStore boundSettings);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Features.Environment.PackageChecker.VulnerablePackagesTracker/<SyncAndGetReports>d__36")]
public Task`1<IReadOnlyDictionary`2<INugetPackageName, VulnerabilityReport[]>> SyncAndGetReports();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Features.Environment.PackageChecker.VulnerablePackagesTracker/<Invalidate>d__37")]
public Task Invalidate();
    [CompilerGeneratedAttribute]
internal static NugetVulnerablePath[] <Invalidate>g__DeserializeVulnerableMethods|37_15(Vulnerability vulnerability);
}
public enum JetBrains.ReSharper.Features.Environment.PackageChecker.VulnerableState : Enum {
    public int value__;
    public static VulnerableState Clean;
    public static VulnerableState Vulnerable;
    public static VulnerableState Throttling;
    public static VulnerableState ErrorUnknown;
    public static VulnerableState ErrorWrongFormat;
    public static VulnerableState ErrorNoUid;
    public static VulnerableState ErrorBannedRegion;
    public static VulnerableState ErrorServerSide;
    public static VulnerableState ErrorUnknownErrorCode;
    public static VulnerableState ErrorSerialization;
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.Features.Environment.PackageChecker.VulReportEx : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static INugetPackageName GetNuGetPackageName(VulReport report);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.Environment.PackageChecker.ZoneMarker : object {
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Features.Environment.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string CustomURIsSettingDescription { get; }
    public static string FeatureIconsOptionPageTitle { get; }
    public static string GeneralCachesOptionPageTitle { get; }
    public static string ExampleUriPatternTitle { get; }
    public static string LoggerTraceThisActionText { get; }
    public static string SourceBrowserSettingsSettingDescription { get; }
    public static string SourceBrowsingOptionPageTitle { get; }
    public static string CopyFqnConstants_Action { get; }
    public static string SourceCodeSymbolsTheme_ComboOptions_Text { get; }
    public static string AutomaticSelection_Option_Text { get; }
    public static string Color_Option_Text { get; }
    public static string Gray_Option_Text { get; }
    public static string DarkGray_Option_Text { get; }
    public static string VisualStudioLegacy_Text { get; }
    public static string IntelliJIDEA_Option_Text { get; }
    public static string Caches_Header_Text { get; }
    public static string StoreSolutionCachesIn_ComboOptions_Text { get; }
    public static string UserLocalSettingsFolder_Option_Text { get; }
    public static string SystemTEMPFolder_Option_Text { get; }
    public static string SolutionFolder_Option_Text { get; }
    public static string CustomFolder_Option_Text { get; }
    public static string CustomFolderLocationPreferSSDOverHDD_RichText_Text { get; }
    public static string ChooseRootFolderForCachesPreferSSDOver_FolderChooserOption_ToolTip { get; }
    public static string ReOpenSolutionForChangesToTakeEffect_Text { get; }
    public static string ClearCache_s_Button_Text { get; }
    public static string CachesWillBeClearedAfterVisualStudio_Text { get; }
    public static string CurrentSolutionCachesLocation_RichText_Text { get; }
    public static string BrowseCurrentSolutionCachesDirectory_FolderChooserOption_ToolTip { get; }
    public static string LocalAppDataSolutionCachesLocation_RichText_Text { get; }
    public static string BrowseLocalAppDataSolutionCachesDirectory_FolderChooserOption_ToolTip { get; }
    public static string InstallWindowsDiskCleanupEntry_Button_Text { get; }
    public static string SourceCodeURIs_Header_Text { get; }
    public static string ToShareACodeReferenceWithAColleague_Text_Text { get; }
    public static string ToCopyACodeReferenceUseAnItemFromThe_Text_Text { get; }
    public static string Title_StringColumnFromKey_Text { get; }
    public static string URIPattern_StringColumnFromValue_Text { get; }
    public static string ExampleURIHttpsOrgJetbrainsSpacePNet_CommentText_Text { get; }
    public static string PathToFileRelativeToTheSolution_Text { get; }
    public static string PathToFileRelativeToTheProject_Text { get; }
    public static string GitPathToFileRelativeToTheGitRoot_Text { get; }
    public static string GitRevision_Text { get; }
    public static string GitBranch_Text { get; }
    public static string FilenameWithExtension_Text { get; }
    public static string CurrentLine_Text { get; }
    public static string CurrentColumn_Text { get; }
    public static string FirstSelectedLine_Text { get; }
    public static string LastSelectedLine_Text { get; }
    public static string OutputAssemblyNameOfCurrentProject_Text { get; }
    public static string UpsourceSelectionRange_Text { get; }
    public static string GitBranchNonEscaped_Text { get; }
    public static string _CopiedToClipboard_Text { get; }
    public static string ClearCachesIsApplicableWhenSolution_Text { get; }
    public static string ReSharperEnvironmentGeneralSetting_Caption { get; }
    public static string GitHubLinkTo___Text { get; }
    public static string XMLDocID_Text { get; }
    public static string EvaluatingFullyQualifiedNames_Text { get; }
    public static string VulnerabilityCheckerSettingsCaption { get; }
    public static string VulnerabilityCheckerEnableChecker { get; }
    public static string VulnerabilityCheckerIgnoredPackages { get; }
    public static string VulnerableDependencyTitle { get; }
    public static string VulnerableDependencyBody { get; }
    public static string VulnerableDependencyAdvisoryAction { get; }
    public static string VulnerableDependencyDisableNotification { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_CustomURIsSettingDescription();
    public static string get_FeatureIconsOptionPageTitle();
    public static string get_GeneralCachesOptionPageTitle();
    public static string get_ExampleUriPatternTitle();
    public static string get_LoggerTraceThisActionText();
    public static string get_SourceBrowserSettingsSettingDescription();
    public static string get_SourceBrowsingOptionPageTitle();
    public static string get_CopyFqnConstants_Action();
    public static string get_SourceCodeSymbolsTheme_ComboOptions_Text();
    public static string get_AutomaticSelection_Option_Text();
    public static string get_Color_Option_Text();
    public static string get_Gray_Option_Text();
    public static string get_DarkGray_Option_Text();
    public static string get_VisualStudioLegacy_Text();
    public static string get_IntelliJIDEA_Option_Text();
    public static string get_Caches_Header_Text();
    public static string get_StoreSolutionCachesIn_ComboOptions_Text();
    public static string get_UserLocalSettingsFolder_Option_Text();
    public static string get_SystemTEMPFolder_Option_Text();
    public static string get_SolutionFolder_Option_Text();
    public static string get_CustomFolder_Option_Text();
    public static string get_CustomFolderLocationPreferSSDOverHDD_RichText_Text();
    public static string get_ChooseRootFolderForCachesPreferSSDOver_FolderChooserOption_ToolTip();
    public static string get_ReOpenSolutionForChangesToTakeEffect_Text();
    public static string get_ClearCache_s_Button_Text();
    public static string get_CachesWillBeClearedAfterVisualStudio_Text();
    public static string get_CurrentSolutionCachesLocation_RichText_Text();
    public static string get_BrowseCurrentSolutionCachesDirectory_FolderChooserOption_ToolTip();
    public static string get_LocalAppDataSolutionCachesLocation_RichText_Text();
    public static string get_BrowseLocalAppDataSolutionCachesDirectory_FolderChooserOption_ToolTip();
    public static string get_InstallWindowsDiskCleanupEntry_Button_Text();
    public static string get_SourceCodeURIs_Header_Text();
    public static string get_ToShareACodeReferenceWithAColleague_Text_Text();
    public static string get_ToCopyACodeReferenceUseAnItemFromThe_Text_Text();
    public static string get_Title_StringColumnFromKey_Text();
    public static string get_URIPattern_StringColumnFromValue_Text();
    public static string get_ExampleURIHttpsOrgJetbrainsSpacePNet_CommentText_Text();
    public static string get_PathToFileRelativeToTheSolution_Text();
    public static string get_PathToFileRelativeToTheProject_Text();
    public static string get_GitPathToFileRelativeToTheGitRoot_Text();
    public static string get_GitRevision_Text();
    public static string get_GitBranch_Text();
    public static string get_FilenameWithExtension_Text();
    public static string get_CurrentLine_Text();
    public static string get_CurrentColumn_Text();
    public static string get_FirstSelectedLine_Text();
    public static string get_LastSelectedLine_Text();
    public static string get_OutputAssemblyNameOfCurrentProject_Text();
    public static string get_UpsourceSelectionRange_Text();
    public static string get_GitBranchNonEscaped_Text();
    public static string get__CopiedToClipboard_Text();
    public static string get_ClearCachesIsApplicableWhenSolution_Text();
    public static string get_ReSharperEnvironmentGeneralSetting_Caption();
    public static string get_GitHubLinkTo___Text();
    public static string get_XMLDocID_Text();
    public static string get_EvaluatingFullyQualifiedNames_Text();
    public static string get_VulnerabilityCheckerSettingsCaption();
    public static string get_VulnerabilityCheckerEnableChecker();
    public static string get_VulnerabilityCheckerIgnoredPackages();
    public static string get_VulnerableDependencyTitle();
    public static string get_VulnerableDependencyBody();
    public static string get_VulnerableDependencyAdvisoryAction();
    public static string get_VulnerableDependencyDisableNotification();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.Environment.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
