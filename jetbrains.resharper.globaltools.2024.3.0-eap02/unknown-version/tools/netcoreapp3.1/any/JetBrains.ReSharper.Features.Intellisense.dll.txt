public class JetBrains.ReSharper.Features.Intellisense.AssemblyReferenceClass_PsiFeaturesFeaturesIntelliSense : object {
}
public abstract class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.BuildScriptCodeCompletionContext : XmlCodeCompletionContext {
    public BuildScriptReparsedCodeCompletionContext UnterminatedContext { get; }
    protected BuildScriptCodeCompletionContext(CodeCompletionContext context, BuildScriptReparsedCodeCompletionContext unterminatedContext, TextLookupRanges ranges);
    public BuildScriptReparsedCodeCompletionContext get_UnterminatedContext();
}
public abstract class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.BuildScriptCodeCompletionContextProvider : CodeCompletionContextProviderBase {
    [CanBeNullAttribute]
protected abstract virtual BuildScriptReparsedCodeCompletionContext GetUnterminatedContext(CodeCompletionContext context, TreeTextRange selectedRange);
    protected abstract virtual BuildScriptCodeCompletionContext GetBuildScriptCodeCompletionContext(CodeCompletionContext context, DocumentRange referenceDocumentRange, BuildScriptReparsedCodeCompletionContext unterminatedContext);
    public virtual ISpecificCodeCompletionContext GetCompletionContext(CodeCompletionContext context);
}
public abstract class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.BuildScriptLookupItemBase : object {
    protected IconId myImage;
    protected RichText myRichText;
    [CompilerGeneratedAttribute]
private LookupItemPlacement <Placement>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Identity>k__BackingField;
    public LookupItemPlacement Placement { get; }
    public int Identity { get; }
    public IconId Image { get; }
    public RichText DisplayName { get; }
    public RichText DisplayTypeName { get; }
    public bool IsDynamic { get; }
    public bool IgnoreSoftOnSpace { get; }
    public bool CanShrink { get; }
    protected BuildScriptLookupItemBase(string name);
    [CompilerGeneratedAttribute]
public sealed virtual LookupItemPlacement get_Placement();
    public sealed virtual bool AcceptIfOnlyMatched(LookupItemAcceptanceContext itemAcceptanceContext);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Identity();
    public sealed virtual IconId get_Image();
    public sealed virtual RichText get_DisplayName();
    public sealed virtual RichText get_DisplayTypeName();
    public sealed virtual bool Shrink();
    public sealed virtual void Unshrink();
    public abstract virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    public sealed virtual bool get_IsDynamic();
    public sealed virtual bool get_IgnoreSoftOnSpace();
    public abstract virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    public virtual DocumentRange GetVisualReplaceRange(DocumentRange nameRange);
    public sealed virtual bool get_CanShrink();
}
public abstract class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.BuildScriptReparsedCodeCompletionContext : XmlReparsedCodeCompletionContext {
    protected BuildScriptReparsedCodeCompletionContext(IFile file, TreeTextRange range, string newText);
    public int GetCaretOffsetInNewNode(int nodeStartOffset);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.MSBuild.AutopopupInMSBuildOnAttributeStrategy : AutopopupInMSBuildStrategyBase {
    public AutopopupInMSBuildOnAttributeStrategy(CachingLexerService cachingLexerService, ISettingsStore settingsStore);
    public virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore boundSettingsStore);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.MSBuild.AutopopupInMSBuildStrategy : AutopopupInMSBuildStrategyBase {
    public AutopopupInMSBuildStrategy(CachingLexerService cachingLexerService, ISettingsStore settingsStore);
    public virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore boundSettingsStore);
    private bool IsInDependsOnTarget(CachingLexer lexer);
}
public abstract class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.MSBuild.AutopopupInMSBuildStrategyBase : object {
    protected CachingLexerService CachingLexerService;
    protected SettingsScalarEntry SettingsEntry;
    public PsiLanguageType Language { get; }
    public bool ForceHideCompletion { get; }
    protected AutopopupInMSBuildStrategyBase(CachingLexerService cachingLexerService);
    public sealed virtual PsiLanguageType get_Language();
    public sealed virtual bool get_ForceHideCompletion();
    public sealed virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    protected bool FindAndCheckXmlToken(CachingLexer lexer, int offset, Func`2<XmlTokenTypes, NodeTypeSet> checker);
    public abstract virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore boundSettingsStore);
    public sealed virtual bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public sealed virtual bool AcceptsFile(IFile file, ITextControl textControl);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.MSBuild.LookupItems.MSBuildAttributeLookupItem : BuildScriptLookupItemBase {
    private string myAttributeName;
    public string AttributeName { get; }
    public MSBuildAttributeLookupItem(string attributeName, bool required);
    public string get_AttributeName();
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.MSBuild.LookupItems.MSBuildAttributeWithValueLookupItem : BuildScriptLookupItemBase {
    private string myAttributeName;
    private string myValue;
    public string AttributeName { get; }
    public string Value { get; }
    public MSBuildAttributeWithValueLookupItem(string attributeName, string value, bool required);
    public string get_AttributeName();
    public string get_Value();
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.MSBuild.LookupItems.MSBuildCommentLookupItem : BuildScriptLookupItemBase {
    private static string ITEM_NAME;
    private static string ITEM_TEXT;
    private static string TEMPLATE;
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.MSBuild.LookupItems.MSBuildDeclaredElementLookupItem : BuildScriptLookupItemBase {
    private string myElementName;
    private DocumentRange myCompletionRange;
    public MSBuildDeclaredElementLookupItem(string elementName, bool isProperty, DocumentRange completionRange);
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    private void ReplacementCompletion(ITextControl textControl, DocumentRange nameRange, bool keepCaretStill, ISolution solution);
    private void InsertionCompletion(ITextControl textControl, DocumentRange nameRange, bool keepCaretStill);
    public virtual DocumentRange GetVisualReplaceRange(DocumentRange nameRange);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.MSBuild.LookupItems.MSBuildElementLookupItem : BuildScriptLookupItemBase {
    private string myElementName;
    public MSBuildElementLookupItem(string elementName, bool isTask);
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    public static IXmlToken FindClosingIdentifier(ITextControl textControl, TreeOffset offset, ISolution solution, IXmlToken& openIdentifierNode, Boolean& completingClosingIdentifier);
    protected static IFile CommitPSI(ITextControl textControl, ISolution solution);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.MSBuild.LookupItems.MSBuildMetadataLookupItem : BuildScriptLookupItemBase {
    private string myName;
    public MSBuildMetadataLookupItem(string itemName);
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    public virtual string ToString();
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.MSBuild.LookupItems.MSBuildSingleLookupItem : BuildScriptLookupItemBase {
    private string myName;
    public MSBuildSingleLookupItem(string name);
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.MSBuild.LookupItems.MSBuildTargetLookupItem : BuildScriptLookupItemBase {
    private string myTargetName;
    public MSBuildTargetLookupItem(string targetName);
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.MSBuild.LookupItems.NewMSBuildPropertyLookupItem : BuildScriptLookupItemBase {
    private static string ITEM_NAME;
    private static string TEMPLATE;
    private static string TEMPLATE_PROPERTY_NAME;
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    private static DocumentRange[] GatherTemplateRanges(DocumentOffset offset);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.MSBuild.MSBuildCodeCompletionContext : BuildScriptCodeCompletionContext {
    public string ContextId { get; }
    public MSBuildCodeCompletionContext(CodeCompletionContext context, BuildScriptReparsedCodeCompletionContext unterminatedContext, TextLookupRanges ranges);
    public virtual string get_ContextId();
}
[IntellisensePartAttribute("16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.MSBuild.MSBuildCodeCompletionContextProvider : BuildScriptCodeCompletionContextProvider {
    private MSBuildCodeCompletionManager myMSBuildCodeCompletionManager;
    public MSBuildCodeCompletionContextProvider(MSBuildCodeCompletionManager msBuildCodeCompletionManager);
    public virtual bool IsApplicable(CodeCompletionContext context);
    protected virtual BuildScriptReparsedCodeCompletionContext GetUnterminatedContext(CodeCompletionContext context, TreeTextRange selectedRange);
    protected virtual BuildScriptCodeCompletionContext GetBuildScriptCodeCompletionContext(CodeCompletionContext context, DocumentRange referenceDocumentRange, BuildScriptReparsedCodeCompletionContext unterminatedContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[IntellisensePartAttribute("16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.MSBuild.MSBuildCompletingCharactersProvider : CompletingCharsProviderWithSetting`2<MSBuildCodeCompletionContext, MSBuildCompletingCharactersSettingsKey> {
    protected virtual CompletionAction IsCharacterAcceptable(char c, MSBuildCodeCompletionContext context, IContextBoundSettingsStore settingsStore);
    protected virtual Expression`1<Func`2<MSBuildCompletingCharactersSettingsKey, bool>> GetCompleteOnSpaceSettingKey();
    protected virtual Expression`1<Func`2<MSBuildCompletingCharactersSettingsKey, string>> GetNonCompletingCharactersSettingKey();
    protected virtual bool IsApplicable(MSBuildCodeCompletionContext context);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntelliSenseCompletingCharactersSettingsKey", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "MSBuildSettingDescription")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.MSBuild.MSBuildCompletingCharactersSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "CompleteOnSpaceSettingDescription")]
public bool CompleteOnSpace;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "NonCompletingCharactersSettingDescription")]
public string NonCompletingCharacters;
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.MSBuild.MSBuildReparsedCodeCompletionContext : BuildScriptReparsedCodeCompletionContext {
    public MSBuildReparsedCodeCompletionContext(IFile file, TreeTextRange range, string newText);
    protected virtual IReparseContext GetReparseContext(IFile file, TreeTextRange range);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.MSBuild.Rules.MSBuildAttributeCompletionRule : ItemsProviderOfSpecificContext`1<MSBuildCodeCompletionContext> {
    private XmlTokenTypes myTokenTypes;
    private MSBuildLanguageService myLanguageService;
    public bool CanGenerate { get; }
    public MSBuildAttributeCompletionRule(XmlTokenTypes xmlTokenTypes, MSBuildLanguageService languageService);
    public bool get_CanGenerate();
    protected virtual bool IsAvailable(MSBuildCodeCompletionContext context);
    protected virtual bool AddLookupItems(MSBuildCodeCompletionContext context, IItemsCollector collector);
    private static void CompletePropertyDeclarationAttributes(IItemsCollector collector, MSBuildPropertyDeclaration propertyDeclaration);
    private static void CompleteItemGroupElementAttributes(IItemsCollector collector);
    private static void CompletePredefinedTagAttribute(IXmlTag ownerTag, IItemsCollector collector);
    private static IList`1<string> GetDefinedAttributes(IXmlTag ownerTag);
    private static void CompleteTaskAttribute(IXmlTag ownerTag, MSBuildCodeCompletionContext context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.MSBuild.Rules.MSBuildAttributeValueCompletionRule : ItemsProviderOfSpecificContext`1<MSBuildCodeCompletionContext> {
    protected virtual bool IsAvailable(MSBuildCodeCompletionContext context);
    protected virtual void TransformItems(MSBuildCodeCompletionContext context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.MSBuild.Rules.MSBuildDeclaredElementCompletionRule : ItemsProviderOfSpecificContext`1<MSBuildCodeCompletionContext> {
    private MSBuildLanguageService myLanguageService;
    private Regex myPropertyCompletionRegex;
    private Regex myItemGroupCompletionRegex;
    private Regex myMetadataCompletionRegex;
    private Regex myItemGroupDottedMetadataRegex;
    public MSBuildDeclaredElementCompletionRule(MSBuildLanguageService languageService);
    protected virtual bool IsAvailable(MSBuildCodeCompletionContext context);
    protected virtual bool AddLookupItems(MSBuildCodeCompletionContext context, IItemsCollector collector);
    private void CompleteItemMetadata(MSBuildCodeCompletionContext context, IItemsCollector collector);
    private static void CompleteItemGroup(MSBuildCodeCompletionContext context, IItemsCollector collector);
    private void CompleteProperty(MSBuildCodeCompletionContext context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.MSBuild.Rules.MSBuildTagCompletionRule : ItemsProviderOfSpecificContext`1<MSBuildCodeCompletionContext> {
    private XmlTokenTypes myXMLTokenTypes;
    private MSBuildLanguageService myLanguageService;
    public bool CanGenerate { get; }
    public MSBuildTagCompletionRule(XmlTokenTypes xmlTokenTypes, MSBuildLanguageService languageService);
    public bool get_CanGenerate();
    protected virtual bool IsAvailable(MSBuildCodeCompletionContext context);
    private static MSBuildTag GetOriginalOwner(MSBuildCodeCompletionContext context);
    protected virtual bool AddLookupItems(MSBuildCodeCompletionContext context, IItemsCollector collector);
    private static void CompleteOutputTag(IItemsCollector collector);
    private static void CompleteItemGroupElement(MSBuildCodeCompletionContext context, IItemsCollector collector);
    private static void CompletePropertyGroupElement(MSBuildCodeCompletionContext context, IItemsCollector collector);
    private static void CompletePredefinedTag(IXmlTag parentTag, IItemsCollector collector);
    private static IList`1<string> GetPredefinedCompletionElements(string name);
    private static void FillListWithTasks(MSBuildCodeCompletionContext context, ITreeNode tag, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.MSBuild.Rules.MSBuildTargetCompletionRule : ItemsProviderOfSpecificContext`1<MSBuildCodeCompletionContext> {
    private XmlTokenTypes myXMLTokenTypes;
    public bool CanGenerate { get; }
    public MSBuildTargetCompletionRule(XmlTokenTypes xmlTokenTypes);
    public bool get_CanGenerate();
    protected virtual bool IsAvailable(MSBuildCodeCompletionContext context);
    protected virtual bool AddLookupItems(MSBuildCodeCompletionContext context, IItemsCollector collector);
    private static void FillTargetsList(HashSet`1<string> referencedTargets, MSBuildCodeCompletionContext context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.MSBuild.Rules.RangesProviderBase : ItemsProviderOfSpecificContext`1<MSBuildCodeCompletionContext> {
    protected virtual TextLookupRanges GetDefaultRanges(MSBuildCodeCompletionContext context);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntellisenseEnabledSettingsKey", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "OverrideVSIntelliSenseForMSBuildSettingDescription")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.MSBuild.Settings.IntellisenseEnabledSettingMSBuild : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "MSBuildSettingDescription")]
public bool IntellisenseEnabled;
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.AutopopupEnabledSettingsKey", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "MSBuildSettingDescription")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.MSBuild.Settings.MSBuildAutopopupEnabledSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "AllSettingDescription")]
public AutopopupType All;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "AttributeSettingDescription")]
public AutopopupType Attribute;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.MSBuild.Settings.MSBuildCodeCompletionManager : LanguageSpecificCodeCompletionManager {
    public PsiLanguageType PsiLanguage { get; }
    public MSBuildCodeCompletionManager(CodeCompletionSettingsService codeCompletionSettings);
    public virtual SettingsScalarEntry GetSettingsEntry(ISettingsSchema settingsSchema);
    public virtual PsiLanguageType get_PsiLanguage();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.MSBuild.ZoneMarker : object {
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.NAnt.LookupItems.NAntAttributeLookupItem : BuildScriptLookupItemBase {
    private string myAttributeName;
    public NAntAttributeLookupItem(string attributeName, bool isRequired);
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.NAnt.LookupItems.NAntElementLookupItem : BuildScriptLookupItemBase {
    private string myElementName;
    private TextRange myCompletionRange;
    public NAntElementLookupItem(string elementName, bool isTask, TextRange completionRange);
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    public static IXmlToken FindClosingIdentifier(ITextControl textControl, TreeOffset offset, ISolution solution, IXmlToken& openIdentifierNode, Boolean& completingClosingIdentifier);
    protected static IFile CommitPSI(ITextControl textControl, ISolution solution);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.NAnt.LookupItems.NAntFunctionLookupItem : BuildScriptLookupItemBase {
    private string myFunctionName;
    private TextRange myCompletionRange;
    public NAntFunctionLookupItem(string functionName, TextRange completionRange);
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.NAnt.LookupItems.NAntPropertyLookupItem : BuildScriptLookupItemBase {
    private TextRange myCompletionRange;
    private string myPropertyName;
    public NAntPropertyLookupItem(string propertyName, TextRange completionRange);
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.NAnt.LookupItems.NAntScriptElementLookupItem : BuildScriptLookupItemBase {
    private string myElementName;
    private TextRange myCompletionRange;
    public NAntScriptElementLookupItem(string elementName, TextRange completionRange);
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    public static IXmlToken FindClosingIdentifier(ITextControl textControl, int offset, ISolution solution, IXmlToken& openIdentifierNode);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.NAnt.LookupItems.NAntSimpleLookupItem : BuildScriptLookupItemBase {
    private string myText;
    private DocumentRange myCompletionRange;
    public NAntSimpleLookupItem(string text, DocumentRange completionRange);
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    public virtual DocumentRange GetVisualReplaceRange(DocumentRange nameRange);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.NAnt.LookupItems.NAntTargetLookupItem : BuildScriptLookupItemBase {
    private string myTargetName;
    private DocumentRange myCompletionRange;
    public NAntTargetLookupItem(string targetName, DocumentRange completionRange);
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    public virtual DocumentRange GetVisualReplaceRange(DocumentRange nameRange);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.NAnt.LookupItems.RangesProviderBase : ItemsProviderOfSpecificContext`1<NAntCodeCompletionContext> {
    protected virtual TextLookupRanges GetDefaultRanges(NAntCodeCompletionContext context);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.NAnt.NAntCodeCompletionContext : BuildScriptCodeCompletionContext {
    public string ContextId { get; }
    public NAntCodeCompletionContext(CodeCompletionContext context, BuildScriptReparsedCodeCompletionContext unterminatedContext, TextLookupRanges ranges);
    public virtual string get_ContextId();
}
[IntellisensePartAttribute("16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.NAnt.NAntCodeCompletionContextProvider : BuildScriptCodeCompletionContextProvider {
    private NAntCodeCompletionManager myNAntCodeCompletionManager;
    public NAntCodeCompletionContextProvider(NAntCodeCompletionManager nAntCodeCompletionManager);
    public virtual bool IsApplicable(CodeCompletionContext context);
    protected virtual BuildScriptReparsedCodeCompletionContext GetUnterminatedContext(CodeCompletionContext context, TreeTextRange selectedRange);
    protected virtual BuildScriptCodeCompletionContext GetBuildScriptCodeCompletionContext(CodeCompletionContext context, DocumentRange referenceDocumentRange, BuildScriptReparsedCodeCompletionContext unterminatedContext);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.NAnt.NAntReparsedCodeCompletionContext : BuildScriptReparsedCodeCompletionContext {
    public NAntReparsedCodeCompletionContext(IFile file, TreeTextRange range, string newText);
    protected virtual IReparseContext GetReparseContext(IFile file, TreeTextRange range);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.NAnt.Rules.NAntAttributeCompletionRule : ItemsProviderOfSpecificContext`1<NAntCodeCompletionContext> {
    protected virtual bool IsAvailable(NAntCodeCompletionContext context);
    protected virtual bool AddLookupItems(NAntCodeCompletionContext context, IItemsCollector collector);
    private void FillTaskAttributes(BuildScriptCodeCompletionContext context, BuildScriptTagBase parentTag, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.NAnt.Rules.NAntClosingTagCompletionRule : ItemsProviderOfSpecificContext`1<NAntCodeCompletionContext> {
    private XmlTokenTypes myXMLTokenTypes;
    public NAntClosingTagCompletionRule(XmlTokenTypes xmlTokenTypes);
    protected virtual bool IsAvailable(NAntCodeCompletionContext context);
    protected virtual bool AddLookupItems(NAntCodeCompletionContext context, IItemsCollector collector);
}
public static class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.NAnt.Rules.NAntCompletionRuleUtil : object {
    public static NAntElement FindContainingElement(IXmlToken token, BuildScriptCodeCompletionContext context);
    public static NAntElement FindElement(NAntElement element, BuildScriptTagBase lookFor, BuildScriptTagBase currentTag);
    public static NAntElementCollection FindContainingCollection(ITreeNode token);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.NAnt.Rules.NAntPropertyCompletionRule : ItemsProviderOfSpecificContext`1<NAntCodeCompletionContext> {
    private XmlTokenTypes myXMLTokenTypes;
    private NAntLanguageService myNAntLanguageService;
    public NAntPropertyCompletionRule(XmlTokenTypes xmlTokenTypes, NAntLanguageService nAntLanguageService);
    protected virtual bool IsAvailable(NAntCodeCompletionContext context);
    protected virtual bool AddLookupItems(NAntCodeCompletionContext context, IItemsCollector collector);
    private IEnumerable`1<string> GetPredefinedProperties();
    public IList`1<string> GetNAntFunctions();
    public static JetHashSet`1<string> EvaluateAvailableProperties(BuildScriptCodeCompletionContext context);
    private static void FillProperties(IBuildFile file, BuildScriptCodeCompletionContext context, ICollection`1<string> properties);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.NAnt.Rules.NAntScriptCompletionRule : ItemsProviderOfSpecificContext`1<NAntCodeCompletionContext> {
    private XmlTokenTypes myXMLTokenTypes;
    public NAntScriptCompletionRule(XmlTokenTypes xmlTokenTypes);
    protected virtual bool IsAvailable(NAntCodeCompletionContext context);
    protected virtual bool AddLookupItems(NAntCodeCompletionContext context, IItemsCollector collector);
    private void FillTaskAttributes(BuildScriptCodeCompletionContext context, BuildScriptTagBase parentTag, IItemsCollector collector);
    public bool ShouldCompleteClosingTag(BuildScriptCodeCompletionContext context);
    private static void FillListWithTasks(BuildScriptCodeCompletionContext context, BuildScriptTagBase parentTag, IItemsCollector collector);
    private static NAntElement FindContainingElement(IXmlIdentifier token, BuildScriptCodeCompletionContext context);
    private static NAntElement FindElement(NAntElement element, BuildScriptTagBase lookFor, BuildScriptTagBase current);
    private static NAntElementCollection FindContainingCollection(ITreeNode token);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.NAnt.Rules.NAntTagCompletionRule : ItemsProviderOfSpecificContext`1<NAntCodeCompletionContext> {
    private XmlTokenTypes myXMLTokenTypes;
    public NAntTagCompletionRule(XmlTokenTypes xmlTokenTypes);
    protected virtual bool IsAvailable(NAntCodeCompletionContext context);
    protected virtual bool AddLookupItems(NAntCodeCompletionContext context, IItemsCollector collector);
    public bool ShouldCompleteClosingTag(BuildScriptCodeCompletionContext context);
    private static void FillListWithTasks(BuildScriptCodeCompletionContext context, BuildScriptTagBase parentTag, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.NAnt.Rules.NAntTargetCompletionRule : ItemsProviderOfSpecificContext`1<NAntCodeCompletionContext> {
    private NAntLanguageService myNAntLanguageService;
    public bool CanGenerate { get; }
    public NAntTargetCompletionRule(NAntLanguageService nAntLanguageService);
    public bool get_CanGenerate();
    protected virtual bool IsAvailable(NAntCodeCompletionContext context);
    protected virtual bool AddLookupItems(NAntCodeCompletionContext context, IItemsCollector collector);
    private void FindAllTargets(IXmlTagContainer node, IList`1<string> targets);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.NAnt.Rules.NAntTaskElementAttributeCompletionRule : ItemsProviderOfSpecificContext`1<NAntCodeCompletionContext> {
    protected virtual bool IsAvailable(NAntCodeCompletionContext context);
    protected virtual bool AddLookupItems(NAntCodeCompletionContext context, IItemsCollector collector);
    private static NAntElement LookupTaskElement(NAntElementTag nantElementTag, NAntCodeCompletionContext context);
    private static void AddElementAttributes(NAntElement element, ICollection`1<string> definedAttributes, IItemsCollector collector);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntellisenseEnabledSettingsKey", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "OverrideVSIntelliSenseForNAntSettingDescription")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.NAnt.Settings.IntellisenseEnabledSettingNAnt : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "NAntSettingDescription")]
public bool IntellisenseEnabled;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.NAnt.Settings.NAntCodeCompletionManager : LanguageSpecificCodeCompletionManager {
    public PsiLanguageType PsiLanguage { get; }
    public NAntCodeCompletionManager(CodeCompletionSettingsService codeCompletionSettings);
    public virtual SettingsScalarEntry GetSettingsEntry(ISettingsSchema settingsSchema);
    public virtual PsiLanguageType get_PsiLanguage();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.BuildScripts.NAnt.ZoneMarker : object {
}
public abstract class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CLRLanguageRelevanceRuleBase`1 : ItemsProviderOfSpecificContext`1<TSpecificCodeCompletionContext> {
    public CompletionMode SupportedCompletionMode { get; }
    public EvaluationMode SupportedEvaluationMode { get; }
    protected virtual bool IsAvailable(TSpecificCodeCompletionContext context);
    public virtual CompletionMode get_SupportedCompletionMode();
    public virtual EvaluationMode get_SupportedEvaluationMode();
    protected virtual void DecorateItems(TSpecificCodeCompletionContext context, IReadOnlyCollection`1<ILookupItem> items);
    protected abstract virtual void AddLanguageSpecificRelevance(IEnumerable`1<ILookupItem> items, TSpecificCodeCompletionContext context);
    protected virtual CLRLookupItemRelevance AddLanguageSpecificRelevance(IParameter parameter, ILookupItem lookupItem, TSpecificCodeCompletionContext context);
    protected abstract virtual ITypeElement GetCurrentTypeElement(TSpecificCodeCompletionContext context);
    protected abstract virtual int GetStartOffsetInReparseContext(TSpecificCodeCompletionContext context);
}
public abstract class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CodeCompletionActionBase : object {
    protected CodeCompletionType CodeCompletionType { get; }
    protected abstract virtual CodeCompletionType get_CodeCompletionType();
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private bool IsAvailable(IDataContext context);
}
[ActionAttribute("JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "CompleteSymbolActionText")]
[VsOverrideActionAttribute("({1496A755-94DE-11D0-8C3F-00C04FC2AAE2}:107)")]
[VsOverrideActionAttribute("({1496A755-94DE-11D0-8C3F-00C04FC2AAE2}:108)")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CompleteCodeBasicAction : CodeCompletionActionBase {
    protected CodeCompletionType CodeCompletionType { get; }
    protected virtual CodeCompletionType get_CodeCompletionType();
    private sealed virtual override bool JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IActionWithFallback.ShouldFallBack(IDataContext context);
}
[ActionAttribute("JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "SmartCodeCompletionActionText")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CompleteCodeSmartAction : CodeCompletionActionBase {
    protected CodeCompletionType CodeCompletionType { get; }
    protected virtual CodeCompletionType get_CodeCompletionType();
}
[ActionAttribute("JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "ImportSymbolActionText")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CompleteCodeTypeNameAction : CodeCompletionActionBase {
    protected CodeCompletionType CodeCompletionType { get; }
    protected virtual CodeCompletionType get_CodeCompletionType();
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.AddCatchClauseVariableBehavior : TextualBehavior`1<TextualInfo> {
    public AddCatchClauseVariableBehavior(TextualInfo info);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.ConstructorBehavior`1 : TypeBehavior`1<TInfo> {
    public ConstructorBehavior`1(TInfo info);
    protected virtual void InsertTailType(ITextControl textControl, ISolution solution, DocumentOffset offset, TailType tailType, LookupItemInsertType lookupItemInsertType);
    protected virtual void OnAfterComplete(ITextControl textControl, LookupItemInsertType insertType, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker, Boolean& keepCaretStill);
    protected virtual ITypePointer GetTypePointerForBinding();
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.ConstructorMatcher : TextualMatcher`1<ConstructorInfo> {
    private static int ConstructorScoreShift;
    public ConstructorMatcher(ConstructorInfo info);
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.ConstructorPresentation : TextualPresentation`1<ConstructorInfo> {
    private string myPresentableName;
    private string myContainer;
    [CompilerGeneratedAttribute]
private IconId <Image>k__BackingField;
    public IconId Image { get; }
    public ConstructorPresentation(ConstructorInfo info, PsiIconManager psiIconManager);
    [CompilerGeneratedAttribute]
public virtual IconId get_Image();
    protected virtual RichText GetDisplayName();
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.CreateAnonymousDelegateBehavior : TextualBehavior`1<DelegateInfo> {
    public CreateAnonymousDelegateBehavior(DelegateInfo info);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.CreateLocalVariableBehavior : CreateLocalVariableBehaviorBase {
    protected string ArgumentModifier { get; }
    public CreateLocalVariableBehavior(INamesSuggestion namesSuggestion, TypeInfo info);
    protected virtual string get_ArgumentModifier();
    protected virtual IDeclaration CreateLocalVariableDeclaration(ITreeNode& nameElement, string safeName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.CreateOutVariableBehavior : CreateLocalVariableBehaviorBase {
    protected string ArgumentModifier { get; }
    public CreateOutVariableBehavior(INamesSuggestion namesSuggestion, TypeInfo info);
    protected virtual string get_ArgumentModifier();
    protected virtual IDeclaration CreateLocalVariableDeclaration(ITreeNode& nameElement, string safeName);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.CSharpCombinedLookupItem : CombinedLookupItem {
    private QualifiedMember myQualifiedMemberSetting;
    public CSharpCombinedLookupItem(ILookupItem[] lookupItems, IconId customImage);
    public CSharpCombinedLookupItem(ILookupItem[] lookupItems, ILookupItem sampleMatchItem, bool autocomplete, bool exactMatch);
    public CSharpCombinedLookupItem(ILookupItem[] lookupItems, IEnumerable`1<ILookupItem> displayItems, ILookupItem sampleMatchItem, bool autocomplete, bool exactMatch, IconId customImage, bool ignoreSoftOnSpace);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    protected virtual void UpdateRanges(ISolution solution, ITextControl textControl, ILookupItem item, DocumentRange completionRange, DocumentRange& nameRange, int decorationLength, TailType tailType, int itemSubstitutionShift);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.CSharpCompletionKeys : object {
    [NotNullAttribute]
public static Key IsTypeKey;
    [NotNullAttribute]
public static Key IsAliasMemberKey;
    [NotNullAttribute]
public static Key`1<IReadOnlyList`1<ILookupItem>> BasicCompletionResultKey;
    private static CSharpCompletionKeys();
    [ExtensionAttribute]
[PureAttribute]
public static bool IsAliasMemberLookupItem(ILookupItem lookupItem);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.CSharpDeclaredElementBehavior`1 : CSharpDeclaredElementBehaviorBase`1<TInfo> {
    private Suffix myOriginalSuffix;
    private IContextBoundSettingsStore mySettingsStore;
    public CSharpDeclaredElementBehavior`1(LookupItem`1<TInfo> lookupItem);
    public virtual bool AcceptIfOnlyMatched(LookupItemAcceptanceContext itemAcceptanceContext);
    protected virtual DocumentRange DoReplaceText(ITextControl textControl, DocumentRange replaceRange, string typeInName, Suffix& suffix);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    private void AcceptInternal(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType lookupItemInsertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    protected virtual void OnAfterComplete(ITextControl textControl, LookupItemInsertType lookupItemInsertType, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker, Boolean& keepCaretStill);
}
public abstract class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.CSharpDeclaredElementBehaviorBase`1 : DeclaredElementBehavior`1<TInfo> {
    [CanBeNullAttribute]
protected IPostCompleteBehavior myPostCompleteBehavior;
    protected CSharpDeclaredElementBehaviorBase`1(LookupItem`1<TInfo> item);
    protected virtual void OnApplyCodeStyle(ITextControl textControl, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker);
    protected virtual void InsertTailType(ITextControl textControl, ISolution solution, DocumentOffset offset, TailType tailType, LookupItemInsertType lookupItemInsertType);
    private void ApplyBuiltInTypeReferenceStyle(IReferenceExpression referenceExpression, IPsiServices psiServices);
    private void ApplyThisQualifierStyle(IReferenceExpression referenceExpression, IPsiServices psiServices);
    private void ApplyStaticQualifierStyle(IReferenceExpression referenceExpression, IPsiServices psiServices);
    protected virtual DocumentRange DoReplaceText(ITextControl textControl, DocumentRange replaceRange, string typeInName, Suffix& suffix);
    protected virtual void OnAfterSuffixPlayback(ITextControl textControl, DocumentRange completedDecorationRange);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.CSharpDeclaredElementInfo : DeclaredElementInfo {
    public CSharpDeclaredElementInfo(string shortName, DeclaredElementInstance instance, ILookupItemsOwner owner, IElementPointerFactory elementPointerFactory);
    public virtual string MakeSafe(string text);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.CSharpExtensionMethodBehavior`1 : CSharpDeclaredElementBehavior`1<TInfo> {
    public CSharpExtensionMethodBehavior`1(LookupItem`1<TInfo> lookupItem);
    protected virtual void OnAfterComplete(ITextControl textControl, LookupItemInsertType insertType, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker, Boolean& keepCaretStill);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.CSharpMethodsBehavior`1 : CSharpDeclaredElementBehaviorBase`1<TInfo> {
    public CSharpMethodsBehavior`1(LookupItem`1<TInfo> info);
    protected virtual void OnAfterComplete(ITextControl textControl, LookupItemInsertType insertType, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker, Boolean& keepCaretStill);
    private bool TryBindRange(ITextControl textControl, DocumentRange nameRange, IElementInstancePointer`1[] pointers, IRangeMarker& caretPositionRangeMarker);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.Generate.GenerateConstructorBehavior : TextualBehavior`1<TextualInfo> {
    private GenerateConstructorMembers myMembersToInitialize;
    public GenerateConstructorBehavior(GenerateConstructorMembers membersToInitialize, TextualInfo info);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    [CompilerGeneratedAttribute]
private void <Accept>b__2_0(IGeneratorContext context);
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.Generate.GenerateConstructorMembers : Enum {
    public int value__;
    public static GenerateConstructorMembers Fields;
    public static GenerateConstructorMembers Properties;
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.Generate.GenerateMemberPresentation : DeclaredElementPresentation`1<DeclaredElementInfo> {
    public GenerateMemberPresentation(DeclaredElementInfo info, DeclaredElementPresenterStyle presenterStyle);
    protected virtual RichText GetDisplayName();
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.Generate.OverridableMemberBehavior : TextualBehavior`1<GenerateMemberInfo> {
    public OverridableMemberBehavior(GenerateMemberInfo info);
    public virtual bool AcceptIfOnlyMatched(LookupItemAcceptanceContext itemAcceptanceContext);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    [CompilerGeneratedAttribute]
internal static ITreeRange <Accept>g__NodesBeforeMethodHeader|2_2(IMethodDeclaration declaration);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.Generate.OverrideableMemberMatcher : TextualMatcher`1<GenerateMemberInfo> {
    private static char Separator;
    public OverrideableMemberMatcher(GenerateMemberInfo info);
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.Generate.PartialMethodBehavior : TextualBehavior`1<DeclaredElementInfo> {
    public PartialMethodBehavior(DeclaredElementInfo info);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    private static void RemoveIdentifier(ITextControl textControl, ISolution solution);
    [CompilerGeneratedAttribute]
private void <Accept>b__1_0(IGeneratorContext context);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.Generate.PropertyBehavior : TextualBehavior`1<DeclaredElementInfo> {
    private bool myIsReadOnly;
    public PropertyBehavior(bool isReadOnly, DeclaredElementInfo info);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    private static void RemoveIdentifiers(ISolution solution, ITextControl textControl, IPsiServices psiServices);
    [CompilerGeneratedAttribute]
private void <Accept>b__2_0(IGeneratorContext context);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.Generate.PropertyPresentation : TextualPresentation`1<TextualInfo> {
    private string myPropertyName;
    private bool myIsReadOnly;
    public PropertyPresentation(string name, bool readOnly, TextualInfo info, PsiIconManager psiIconManager);
    protected virtual RichText GetDisplayName();
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.IndexerBehavior : DeclaredElementBehavior`1<DeclaredElementInfo> {
    public IndexerBehavior(DeclaredElementInfo info);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    private static DocumentRange ExtendRangeLeftToDot(IDocument document, DocumentRange acceptRange);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.ShortArrayConstructorInfo : TextualInfo {
    [CompilerGeneratedAttribute]
private bool <ShowNew>k__BackingField;
    public bool ShowNew { get; }
    public ShortArrayConstructorInfo(bool showNew);
    private ShortArrayConstructorInfo(string text);
    [CompilerGeneratedAttribute]
public bool get_ShowNew();
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.ShortArrayConstructorPresentation : TextualPresentation`1<ShortArrayConstructorInfo> {
    public ShortArrayConstructorPresentation(ShortArrayConstructorInfo info);
    protected virtual RichText GetDisplayName();
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.Smart.CreateDelegateBehavior : CreateFunctionBehaviorBase {
    public CreateDelegateBehavior(IPsiSourceFile sourceFile, CreateDelegateInfo info);
    protected virtual ICreationTarget TryGetCreationTarget(IReferenceExpression referenceExpression);
    protected virtual bool IsStatic(IReferenceExpression expression);
    protected virtual AccessRights GetAccessRights();
    protected virtual IntentionResult CreateFunction(CreateMethodDeclarationContext context);
}
public abstract class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.Smart.CreateFunctionBehaviorBase : TextualBehavior`1<CreateDelegateInfo> {
    [CompilerGeneratedAttribute]
private IPsiSourceFile <sourceFile>P;
    protected CreateFunctionBehaviorBase(IPsiSourceFile sourceFile, CreateDelegateInfo info);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    [CanBeNullAttribute]
[PureAttribute]
private IReferenceExpression FindExpression(DocumentRange documentRange);
    [CanBeNullAttribute]
[PureAttribute]
protected abstract virtual ICreationTarget TryGetCreationTarget(IReferenceExpression referenceExpression);
    [PureAttribute]
protected abstract virtual bool IsStatic(IReferenceExpression expression);
    [PureAttribute]
protected abstract virtual AccessRights GetAccessRights();
    [NotNullAttribute]
protected abstract virtual IntentionResult CreateFunction(CreateMethodDeclarationContext context);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.Smart.CreateLambdaBehavior : TextualBehavior`1<DelegateInfo> {
    public CreateLambdaBehavior(DelegateInfo info);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.Smart.CreateLocalFunctionBehavior : CreateFunctionBehaviorBase {
    public CreateLocalFunctionBehavior(IPsiSourceFile sourceFile, CreateDelegateInfo info);
    protected virtual ICreationTarget TryGetCreationTarget(IReferenceExpression referenceExpression);
    protected virtual bool IsStatic(IReferenceExpression expression);
    protected virtual AccessRights GetAccessRights();
    protected virtual IntentionResult CreateFunction(CreateMethodDeclarationContext context);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.StaticMemberMatcher : DeclaredElementMatcher {
    public StaticMemberMatcher(DeclaredElementInfo info, string escapingPrefix);
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AspectLookupItems.TypeElementInfo : DeclaredElementInfo {
    [CompilerGeneratedAttribute]
private bool <ShowTypeContainer>k__BackingField;
    [CanBeNullAttribute]
private string myDelayedOrderString;
    public bool ShowContainer { get; }
    public bool ShowTypeContainer { get; public set; }
    public string DelayedOrderString { get; }
    public TypeElementInfo(string shortName, ITypeElement typeElement, PsiLanguageType languageType, ILookupItemsOwner owner, IElementPointerFactory elementPointerFactory);
    public TypeElementInfo(string shortName, IReadOnlyList`1<IDeclaredElement> elements, PsiLanguageType languageType, ILookupItemsOwner owner, IElementPointerFactory elementPointerFactory);
    public TypeElementInfo(string shortName, DeclaredElementInstance instance, PsiLanguageType languageType, ILookupItemsOwner owner, IElementPointerFactory elementPointerFactory);
    public virtual bool get_ShowContainer();
    [CompilerGeneratedAttribute]
public bool get_ShowTypeContainer();
    [CompilerGeneratedAttribute]
public void set_ShowTypeContainer(bool value);
    public sealed virtual string get_DelayedOrderString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AutomaticStrategies.AutopopupOnPossibleInterpolationInStringLiteralStrategy : object {
    private CSharpCodeCompletionManager myCodeCompletionManager;
    private SettingsScalarEntry mySettingsEntry;
    [NullableAttribute("0")]
private static Int32`1<DocLine> ourAlexanderShvedovThreshold;
    public bool ForceHideCompletion { get; }
    [NullableAttribute("2")]
public PsiLanguageType Language { get; }
    public AutopopupOnPossibleInterpolationInStringLiteralStrategy(CSharpCodeCompletionManager codeCompletionManager, ISettingsStore settingsStore);
    private static AutopopupOnPossibleInterpolationInStringLiteralStrategy();
    public sealed virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public sealed virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore settingsStore);
    [PureAttribute]
private bool StartCheckWithIdentifier(ITextControl textControl, int index, int threshold);
    [PureAttribute]
private bool StartCheckWithWhitespace(ITextControl textControl, int index, int threshold);
    [PureAttribute]
private bool StartCheckWithBrace(ITextControl textControl, int currentIndex, int threshold);
    [PureAttribute]
private bool IsUnescapedSymbol(char c, IBuffer buffer, int index, int threshold);
    [PureAttribute]
private bool IsCorrectStringLiteral(IBuffer buffer, int index, int threshold);
    [PureAttribute]
private int GetThresholdIndex(ITextControl textControl);
    private int GetCurrentOffset(ITextControl textControl);
    public sealed virtual bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public sealed virtual bool AcceptsFile(IFile file, ITextControl textControl);
    public sealed virtual bool get_ForceHideCompletion();
    [NullableContextAttribute("2")]
public sealed virtual PsiLanguageType get_Language();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AutomaticStrategies.CSharpAfterNewKeywordAutopopupStrategy : object {
    private CSharpCodeCompletionManager myCodeCompletionManager;
    private SettingsScalarEntry mySettingsScalarEntry;
    public bool ForceHideCompletion { get; }
    [NullableAttribute("2")]
public PsiLanguageType Language { get; }
    public CSharpAfterNewKeywordAutopopupStrategy(CSharpCodeCompletionManager codeCompletionManager, ISettingsStore settingsStore);
    public sealed virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public sealed virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore boundSettingsStore);
    public sealed virtual bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public sealed virtual bool AcceptsFile(IFile file, ITextControl textControl);
    public sealed virtual bool get_ForceHideCompletion();
    [NullableContextAttribute("2")]
public sealed virtual PsiLanguageType get_Language();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AutomaticStrategies.CSharpInStringLiteralAutopopupStrategy : object {
    private CSharpCodeCompletionManager myCodeCompletionManager;
    private SettingsScalarEntry mySettingsEntry;
    public bool ForceHideCompletion { get; }
    [NullableAttribute("2")]
public PsiLanguageType Language { get; }
    public CSharpInStringLiteralAutopopupStrategy(CSharpCodeCompletionManager codeCompletionManager, ISettingsSchema settingsSchema);
    public sealed virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore settingsStore);
    public sealed virtual bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public virtual bool AcceptsFile(IFile file, ITextControl textControl);
    public sealed virtual bool get_ForceHideCompletion();
    [NullableContextAttribute("2")]
public sealed virtual PsiLanguageType get_Language();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AutomaticStrategies.CSharpOnColonAutopopupStrategy : object {
    private SettingsScalarEntry mySettingsScalarEntry;
    private SettingsScalarEntry mySpaceAfterColonEntry;
    public bool ForceHideCompletion { get; }
    [NullableAttribute("2")]
public PsiLanguageType Language { get; }
    public CSharpOnColonAutopopupStrategy(ISettingsStore settingsStore);
    public sealed virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public sealed virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore settingsStore);
    public sealed virtual bool AcceptsFile(IFile file, ITextControl textControl);
    public sealed virtual bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public sealed virtual bool get_ForceHideCompletion();
    [NullableContextAttribute("2")]
public sealed virtual PsiLanguageType get_Language();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AutomaticStrategies.CSharpOnDocCommentIdentifierAutopopupStrategy : object {
    private CSharpCodeCompletionManager myCodeCompletionManager;
    private SettingsScalarEntry mySettingsEntry;
    public bool ForceHideCompletion { get; }
    [NullableAttribute("2")]
public PsiLanguageType Language { get; }
    public CSharpOnDocCommentIdentifierAutopopupStrategy(CSharpCodeCompletionManager codeCompletionManager, ISettingsStore settingsStore);
    public sealed virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public sealed virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore settingsStore);
    public sealed virtual bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public sealed virtual bool AcceptsFile(IFile file, ITextControl textControl);
    public sealed virtual bool get_ForceHideCompletion();
    [NullableContextAttribute("2")]
public sealed virtual PsiLanguageType get_Language();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AutomaticStrategies.CSharpOnFormatSpecifierAutopopupStrategy : object {
    private SettingsScalarEntry mySettingsScalarEntry;
    public bool ForceHideCompletion { get; }
    [NullableAttribute("2")]
public PsiLanguageType Language { get; }
    public CSharpOnFormatSpecifierAutopopupStrategy(ISettingsStore settingsStore);
    public sealed virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore boundSettingsStore);
    public sealed virtual bool AcceptsFile(IFile file, ITextControl textControl);
    public sealed virtual bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public sealed virtual bool get_ForceHideCompletion();
    [NullableContextAttribute("2")]
public sealed virtual PsiLanguageType get_Language();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AutomaticStrategies.CSharpOnIdentifierAutopopupStrategy : object {
    protected CSharpCodeCompletionManager CodeCompletionManager;
    private SettingsScalarEntry mySettingsScalarEntry;
    public bool ForceHideCompletion { get; }
    [NullableAttribute("2")]
public PsiLanguageType Language { get; }
    public CSharpOnIdentifierAutopopupStrategy(CSharpCodeCompletionManager codeCompletionManager, ISettingsStore settingsStore);
    public sealed virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore boundSettingsStore);
    public sealed virtual bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public virtual bool AcceptsFile(IFile file, ITextControl textControl);
    public sealed virtual bool get_ForceHideCompletion();
    [NullableContextAttribute("2")]
public sealed virtual PsiLanguageType get_Language();
    protected static bool IsIdentStart(char c);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AutomaticStrategies.CSharpOnOverrideOrPartialAutopopupStrategy : object {
    private CSharpCodeCompletionManager myCodeCompletionManager;
    private SettingsScalarEntry myEnabledSetting;
    [NullableAttribute("2")]
public PsiLanguageType Language { get; }
    public bool ForceHideCompletion { get; }
    public CSharpOnOverrideOrPartialAutopopupStrategy(CSharpCodeCompletionManager codeCompletionManager, ISettingsStore settingsStore);
    public sealed virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    [NullableContextAttribute("2")]
public sealed virtual PsiLanguageType get_Language();
    public sealed virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore boundSettingsStore);
    private bool IsAfterPartialKeyword(ITextControl textControl);
    private bool IsAfterOverrideKeyword(ITextControl textControl);
    public sealed virtual bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public sealed virtual bool AcceptsFile(IFile file, ITextControl textControl);
    public sealed virtual bool get_ForceHideCompletion();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AutomaticStrategies.CSharpOnPointerMemberAutopopupStrategy : object {
    private SettingsScalarEntry mySettingsEntry;
    public bool ForceHideCompletion { get; }
    [NullableAttribute("2")]
public PsiLanguageType Language { get; }
    public CSharpOnPointerMemberAutopopupStrategy(ISettingsStore settingsStore);
    public sealed virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public sealed virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore boundSettingsStore);
    public sealed virtual bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public sealed virtual bool AcceptsFile(IFile file, ITextControl textControl);
    public sealed virtual bool get_ForceHideCompletion();
    [NullableContextAttribute("2")]
public sealed virtual PsiLanguageType get_Language();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AutomaticStrategies.CSharpOnPunctuatorAutopopupStrategy : object {
    private CSharpCodeCompletionManager myCodeCompletionManager;
    private SettingsScalarEntry mySettingsScalarEntry;
    public bool ForceHideCompletion { get; }
    [NullableAttribute("2")]
public PsiLanguageType Language { get; }
    public CSharpOnPunctuatorAutopopupStrategy(CSharpCodeCompletionManager codeCompletionManager, ISettingsStore settingsStore);
    public sealed virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore boundSettingsStore);
    public sealed virtual bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public sealed virtual bool AcceptsFile(IFile file, ITextControl textControl);
    public sealed virtual bool get_ForceHideCompletion();
    [NullableContextAttribute("2")]
public sealed virtual PsiLanguageType get_Language();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.AutomaticStrategies.CSharpWhereValueExpectedAutopopupStrategy : object {
    private CSharpCodeCompletionManager myCodeCompletionManager;
    private SettingsScalarEntry mySpaceAroundAssignmentOp;
    private SettingsScalarEntry mySpaceAroundEqualityOp;
    private SettingsScalarEntry mySpaceAroundBitwiseOp;
    private SettingsScalarEntry mySpaceAroundAdditiveOp;
    private SettingsScalarEntry mySpaceAroundMultiplicativeOp;
    private SettingsScalarEntry mySpaceAfterTernaryColon;
    private SettingsScalarEntry mySpaceAfterTernaryQuest;
    private SettingsScalarEntry mySpaceAfterComma;
    private SettingsScalarEntry mySpaceWithinMethodCallParentheses;
    private SettingsScalarEntry mySpaceAroundLambdaArrow;
    private SettingsScalarEntry myEnabledSetting;
    public bool ForceHideCompletion { get; }
    [NullableAttribute("2")]
public PsiLanguageType Language { get; }
    public CSharpWhereValueExpectedAutopopupStrategy(CSharpCodeCompletionManager codeCompletionManager, ISettingsStore settingsStore);
    public sealed virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore settingsStore);
    private bool GetFormatterSettings(IContextBoundSettingsStore settingsStore, SettingsScalarEntry entry);
    private bool TryStartOnOperator(ITextControl textControl, IContextBoundSettingsStore settingsStore);
    private bool TryStartOnComma(IContextBoundSettingsStore settingsStore);
    private bool TryStartOnSpace(ITextControl textControl, IContextBoundSettingsStore settingsStore);
    private bool TryStartOnParenthesis(IContextBoundSettingsStore settingsStore);
    private bool TryStartOnRange(ITextControl textControl, IContextBoundSettingsStore settingsStore);
    public sealed virtual bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public virtual bool AcceptsFile(IFile file, ITextControl textControl);
    public sealed virtual bool get_ForceHideCompletion();
    [NullableContextAttribute("2")]
public sealed virtual PsiLanguageType get_Language();
}
[IntellisensePartAttribute("16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.CSharpCompletingCharactersProvider : CompletingCharsProviderWithSetting`2<CSharpCodeCompletionContext, CSharpCompletingCharactersSettingsKey> {
    protected virtual bool IsApplicable(CSharpCodeCompletionContext context);
    protected virtual CompletionAction IsCharacterAcceptable(char c, CSharpCodeCompletionContext context, IContextBoundSettingsStore settingsStore);
    protected virtual Expression`1<Func`2<CSharpCompletingCharactersSettingsKey, bool>> GetCompleteOnSpaceSettingKey();
    protected virtual Expression`1<Func`2<CSharpCompletingCharactersSettingsKey, string>> GetNonCompletingCharactersSettingKey();
    private static bool CanBeTupleComponentName(CSharpCodeCompletionContext context);
    private static bool CanBeTupleTypeArgument(CSharpCodeCompletionContext context);
    private static bool CanBeDiscard(CSharpCodeCompletionContext context);
    private static bool ExactlyAfterNewKeyword(CSharpCodeCompletionContext context);
    [PureAttribute]
private static DocumentRange GetPrefixRange(CSharpCodeCompletionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DeclaredElementDescriptionProviderAttribute("16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.CSharpEnumValuesDescriptionPresenter : object {
    public int Priority { get; }
    public sealed virtual RichTextBlock GetElementDescription(IDeclaredElement element, DeclaredElementDescriptionStyle style, PsiLanguageType language, IPsiModule module);
    private static RichText TryRepresentWithFlagCombination(DeclaredElementDescriptionStyle style, IEnum containingType, ulong value);
    public sealed virtual Nullable`1<bool> IsElementObsolete(IDeclaredElement element, RichTextBlock& obsoleteDescription, DeclaredElementDescriptionStyle style);
    public sealed virtual int get_Priority();
    [PureAttribute]
public static RichText PresentEnumConstantValueWithFlagShift(ConstantValue constantValue, bool isFlagsEnum, TypePresentationStyle typePresentationStyle);
    [PureAttribute]
public static Nullable`1<ulong> TryGetRawUlongValue(ConstantValue constantValue, Int32& bitsCount);
    [PureAttribute]
public static int IsSingleBitSet(ulong value);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.CSharpLookupItemFactory : LookupItemFactoryBase {
    [NotNullAttribute]
private static Key`1<string> ourGenericParametersSetKey;
    [CanBeNullAttribute]
private static CSharpLookupItemFactory ourInstance;
    [CanBeNullAttribute]
private static LookupItemPresentationCache ourPresentationCache;
    private Func`2<LookupItem`1<CSharpDeclaredElementInfo>, ILookupItemPresentation> myFGetDeclaredElementPresentation;
    private Func`2<LookupItem`1<CSharpDeclaredElementInfo>, ILookupItemPresentation> myFGetLocalFunctionPresentationWithoutSignature;
    private Func`2<LookupItem`1<CSharpDeclaredElementInfo>, ILookupItemBehavior> myFGetDeclaredElementBehavior;
    private Func`2<LookupItem`1<CSharpDeclaredElementInfo>, ILookupItemMatcher> myFGetDeclaredElementMatcher;
    private Func`2<LookupItem`1<TypeElementInfo>, ILookupItemBehavior> myFGetTypeElementBehavior;
    private Func`2<LookupItem`1<TypeElementInfo>, ILookupItemPresentation> myFGetTypeElementPresentation;
    private Func`2<LookupItem`1<TypeElementInfo>, ILookupItemMatcher> myFGetTypeElementMatcher;
    private Func`2<LookupItem`1<MethodsInfo>, ILookupItemPresentation> myFGetMethodsPresentation;
    private Func`2<LookupItem`1<MethodsInfo>, ILookupItemMatcher> myFGetMethodsMatcher;
    private Func`2<LookupItem`1<TypeInfo>, ILookupItemPresentation> myFGetTypePresentation;
    private Func`2<LookupItem`1<TypeInfo>, ILookupItemBehavior> myFGetTypeBehavior;
    private Func`2<LookupItem`1<TypeInfo>, ILookupItemMatcher> myFGetTypeMatcher;
    [NotNullAttribute]
public static CSharpLookupItemFactory Instance { get; }
    private static CSharpLookupItemFactory();
    public static CSharpLookupItemFactory get_Instance();
    [NotNullAttribute]
[PureAttribute]
private static LookupItemPresentationCache GetPresentationCache(ISolution solution);
    [NotNullAttribute]
public LookupItem`1<CSharpDeclaredElementInfo> CreateDeclaredElementLookupItem(CSharpCodeCompletionContext context, string name, IDeclaredElement declaredElement, bool includeFollowingExpression);
    [NotNullAttribute]
public LookupItem`1<DeclaredElementWithReferenceInfo> CreateTypeElementWithReferenceLookupItem(CSharpCodeCompletionContext context, IEnumerable`1<ITypeElement> typeElements, ModuleReferencerService moduleReferencerService);
    [NotNullAttribute]
public LookupItem`1<TextualInfo> CreateNamedArgumentLookupItem(CSharpCodeCompletionContext context, string name, IconId image, IParameter parameter);
    [NotNullAttribute]
public LookupItem`1<TypeElementInfo> CreateTypeElementLookupItem(CSharpCodeCompletionContext context, string shortName, DeclaredElementInstance instance, bool showContainer, bool isImportItem);
    [NotNullAttribute]
public LookupItem`1<TypeElementInfo> CreateTypeElementLookupItem(CSharpCodeCompletionContext context, string shortName, IReadOnlyList`1<ITypeElement> typeElements, bool showContainer, bool isImportItem);
    [NotNullAttribute]
public LookupItem`1<TypeElementInfo> CreateTypeElementLookupItem(CSharpCodeCompletionContext context, string shortName, ITypeElement typeElement, bool showContainer, bool isImportItem);
    [NotNullAttribute]
private LookupItem`1<TypeElementInfo> CreateTypeElementLookupItemImpl(TypeElementInfo info, ITypeElement typeElement);
    [NotNullAttribute]
public LookupItem`1<DeclaredElementInfo> CreateEnumMemberLookupItem(CSharpCodeCompletionContext context, string name, IField field, ISubstitution substitution);
    [NotNullAttribute]
public LookupItem`1<CSharpDeclaredElementInfo> CreateDeclaredElementLookupItem(CSharpCodeCompletionContext context, string name, DeclaredElementInstance instance, bool includeFollowingExpression, bool bind, QualifierKind qualifierKind);
    [CanBeNullAttribute]
private static IType GetType(ITypeOwner typeOwner);
    [NotNullAttribute]
public LookupItem`1<DeclaredElementInfo> CreatePartialMethodLookupItem(CSharpCodeCompletionContext context, string name, IMethod method);
    [CanBeNullAttribute]
public LookupItem`1<MethodsInfo> CreateMethodsLookupItem(CSharpCodeCompletionContext context, string name, IList`1<DeclaredElementInstance> methods, bool skipGenericArguments, bool includeFollowingExpression, bool setFunctionParameters);
    private void DecorateConstructorItem(CSharpCodeCompletionContext context, ITypeElement typeElement, LookupItem`1<ConstructorInfo> item, ConstructorInfo info, bool addParameterInfoHandler);
    [NotNullAttribute]
public LookupItem`1<TypeElementInfo> CreateAttributeLookupItem(CSharpCodeCompletionContext context, ITypeElement typeElement, bool showContainer, bool isImportedType, string shortName);
    [NotNullAttribute]
public LookupItem`1<CSharpDeclaredElementInfo> CreateLabelLookupItem(CSharpCodeCompletionContext context, string name, ILabel label);
    [NotNullAttribute]
public LookupItem`1<CSharpKeywordInfo> CreateKeywordLookupItem(CSharpCodeCompletionContext context, string text, TailType tailType, IconId keywordIcon);
    [NotNullAttribute]
public ILookupItem CreateKeywordLookupItem2(string keywordText, TextLookupRanges textLookupRanges, TailType tailType, IconId keywordIcon, bool invokeCompletionAfterTail);
    [NotNullAttribute]
public LookupItem`1<TypeInfo> CreateTypeLookupItem(CSharpCodeCompletionContext context, IType type);
    [NotNullAttribute]
public LookupItem`1<ConstructorInfo> CreateConstructorLookupItem(CSharpCodeCompletionContext context, IType type, IReadOnlyList`1<ExpectedType> expectedTypes, bool isQualifiedContext, bool showContainer, bool showNew);
    [NotNullAttribute]
private TailType GetMethodTailType(CSharpCodeCompletionContext context, bool isVoid);
    [CanBeNullAttribute]
public static IQualifiableReference GetQualifiableReference(CSharpCodeCompletionContext context);
    public void SetFunctionParameters(CSharpCodeCompletionContext context, IEnumerable`1<TFunction> functions, LookupItem`1<TInfo> item, TInfo info, bool includeFollowingExpression, ITypeElement ctorTypeElement);
    private static void GetSpaces(bool mightNotHaveParameters, bool mightHaveParameters, CSharpCodeCompletionContext completionContext, Boolean& spaceBeforeParentheses, Boolean& spaceWithinParentheses);
    [NotNullAttribute]
private static string GetParenthesesText(CSharpCodeCompletionContext context, bool spaceWithinParentheses, bool spaceBeforeParentheses);
    private static void CalculateTypeParameters(IEnumerable`1<T> functions, LookupItem`1<TInfo> item, Boolean& mightHaveTypeParameters, Boolean& requiresTypeParameters);
    private void SetGenericParameters(CSharpCodeCompletionContext context, IEnumerable`1<T> functions, LookupItem`1<TInfo> item, bool mightHaveParameters, bool beforeParentheses, Boolean& mightHaveTypeParameters, Boolean& requiresTypeParameters);
    private void SetReplaceParametersForFunction(CSharpCodeCompletionContext context, LookupItem`1<TInfo> item, BracketsType bracketsType, bool lookupItemHasParameters, bool requiresTypeParameters, bool mightHaveTypeParameters);
    protected virtual CombinedLookupItem CreateCombinedLookupItem(ILookupItem[] items, IEnumerable`1<ILookupItem> displayItems, ILookupItem sampleMatchItem, bool autocomplete, bool exactMatch, IconId customImage, bool ignoreSoftOnSpace);
    private static DeclaredElementPresentation`1<DeclaredElementInfo> GetOrCreatePresentation(DeclaredElementInfo info, DeclaredElementPresenterStyle style, string typeParameterString);
    [CompilerGeneratedAttribute]
internal static void <SetGenericParameters>g__CompletionConfigurationProcessor|31_0(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, CompletionConfiguration& completionConfiguration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.CSharpLookupItemsPresenter : object {
    public sealed virtual RichTextBlock TryGetAdditionalDescription(ILookupItem lookupItem);
    public sealed virtual RichTextBlock TryPresentSummary(IDeclaredElement declaredElement, ISubstitution substitution, ILookupItem lookupItem, ISolution solution, IContextBoundSettingsStore settingsStore, DeclaredElementDescriptionStyle descriptionStyle);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static bool <TryPresentSummary>g__IsAlias|1_0(String& aliasName, <>c__DisplayClass1_0& );
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static string <TryPresentSummary>g__TryGetItemShortAliasName|1_1(ILookupItem lookupItem);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.CSharpLookupServiceProvider : object {
    [NotNullAttribute]
private static IType ResolveType(ITypePointer typePointer, IDeclaredType& scalarType);
    public sealed virtual void BindToType(ISolution solution, ITextControl textControl, DocumentRange textRange, ITypePointer typePointer, IRangeMarker& caretPositionRangeMarker);
    public sealed virtual void BindToDeclaredElement(ISolution solution, IElementInstancePointer`1<TDeclaredElement> instance, ITextControl textControl, DocumentRange range, IRangeMarker& caretPositionRangeMarker);
    public sealed virtual DocumentRange BindToDeclaredElements(ISolution solution, ICollection`1<IElementInstancePointer`1<TDeclaredElement>> pointers, ITextControl textControl, DocumentRange range, IRangeMarker& caretPositionRangeMarker);
    public sealed virtual string BuildQualifierText(DeclaredElementInstance declaredElementInstance, QualifierKind qualifierKind);
    private static void BindToPredefinedType(ITextControl textControl, DocumentRange textRange, ITypePointer typePointer);
    [NotNullAttribute]
private static ISubstitution PrepareBindingSubstitution(DeclaredElementInstance instance, ICSharpTreeNode context);
    private static TreeTextRange GetReferenceRange(IReference reference);
    private static string GetPrefix(DeclaredElementInstance instance, QualifierKind qualifierKind);
    public static void BindToTypeElement(IPsiServices psiServices, ISolution solution, ITextControl textControl, DocumentRange range, IList`1<IElementInstancePointer`1<IDeclaredElement>> pointers, PsiLanguageType languageType, Suffix originalSuffix, bool smartParenth, ParenthesesInsertType insertType);
    private static void ApplyInsertTypeOption(ITextControl textControl, Suffix originalSuffix, bool smartParenth, ParenthesesInsertType insertType, string oldSignature, DocumentRange rangeToReplace);
    private static bool TryReplaceTypeUsage(ISolution solution, ITextControl textControl, DocumentRange documentRange, ITypePointer typePointer);
    [PureAttribute]
private static bool AllTypeArgumentsUnknown(ISubstitution substitution);
    [CompilerGeneratedAttribute]
[CanBeNullAttribute]
internal static ITypeUsage <TryReplaceTypeUsage>g__TryBindTypeUsageToType|11_0(ITypeUsage typeUsage, IType type, bool checkResultType);
    [CompilerGeneratedAttribute]
[PureAttribute]
internal static bool <TryReplaceTypeUsage>g__ShouldTryToBind|11_1(IType type, IDeclaredType scalarType);
    [CompilerGeneratedAttribute]
[PureAttribute]
internal static bool <TryReplaceTypeUsage>g__CanDropTypeArgumentListToPutCaretInside|11_2(ISubstitution substitution);
    [CompilerGeneratedAttribute]
[PureAttribute]
internal static bool <TryReplaceTypeUsage>g__IsProbablyInvalidParse|11_3(ITypeUsage typeUsage);
}
public enum JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.DeclaredElementExpectancy : Enum {
    public int value__;
    public static DeclaredElementExpectancy Expected;
    public static DeclaredElementExpectancy ExpectedWithTypeParameterInference;
    public static DeclaredElementExpectancy NotExpected;
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.ElementsParametersInfo : object {
    [CompilerGeneratedAttribute]
private NamingManager <NamingManager>k__BackingField;
    [CompilerGeneratedAttribute]
private INamingPolicyProvider <PolicyProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<IDeclaredElement> <ElementsToInvokeWithoutParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<IDeclaredElement> <ElementsToInvokeWithParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IDeclaredElement, int> <Correlations>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IDeclaredElement, List`1<ExpectedType>> <ElementsMatched>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IDeclaredElement, DeclaredElementExpectancy> <ElementsExpectancy>k__BackingField;
    public NamingManager NamingManager { get; }
    public INamingPolicyProvider PolicyProvider { get; }
    public HashSet`1<IDeclaredElement> ElementsToInvokeWithoutParameters { get; }
    public HashSet`1<IDeclaredElement> ElementsToInvokeWithParameters { get; }
    public Dictionary`2<IDeclaredElement, int> Correlations { get; }
    private Dictionary`2<IDeclaredElement, List`1<ExpectedType>> ElementsMatched { get; }
    private Dictionary`2<IDeclaredElement, DeclaredElementExpectancy> ElementsExpectancy { get; }
    public ElementsParametersInfo(INamingPolicyProvider policyProvider, NamingManager namingManager);
    [CompilerGeneratedAttribute]
public NamingManager get_NamingManager();
    [CompilerGeneratedAttribute]
public INamingPolicyProvider get_PolicyProvider();
    [CompilerGeneratedAttribute]
public HashSet`1<IDeclaredElement> get_ElementsToInvokeWithoutParameters();
    [CompilerGeneratedAttribute]
public HashSet`1<IDeclaredElement> get_ElementsToInvokeWithParameters();
    [CompilerGeneratedAttribute]
public Dictionary`2<IDeclaredElement, int> get_Correlations();
    [CompilerGeneratedAttribute]
private Dictionary`2<IDeclaredElement, List`1<ExpectedType>> get_ElementsMatched();
    [CompilerGeneratedAttribute]
private Dictionary`2<IDeclaredElement, DeclaredElementExpectancy> get_ElementsExpectancy();
    public Nullable`1<DeclaredElementExpectancy> GetElementExpectancy(IDeclaredElement element);
    public void AddMatchedElement(IDeclaredElement declaredElement, List`1<ExpectedType> expectedTypes, DeclaredElementExpectancy expectancy);
    [CanBeNullAttribute]
public List`1<ExpectedType> GetExpectedTypesFor(IDeclaredElement declaredElement);
    public void ApplyNameCorrelationRelevance(IEnumerable`1<ILookupItem> items);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Filters.CSharpClassFilter : ClassFilter`1<CSharpCodeCompletionContext> {
    public CSharpClassFilter(ISettingsStore settingsStore);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Filters.CSharpDelegateFilter : DelegateFilter`1<CSharpCodeCompletionContext> {
    public CSharpDelegateFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Filters.CSharpEnumFilter : EnumFilter`1<CSharpCodeCompletionContext> {
    public CSharpEnumFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Filters.CSharpEventFilter : EventsFilter`1<CSharpCodeCompletionContext> {
    public CSharpEventFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Filters.CSharpExtensionMethodsFilter : CompletionListFilterBase`2<CSharpCodeCompletionContext, ILookupItem> {
    public string ActionId { get; }
    public string Text { get; }
    public double Order { get; }
    public CSharpExtensionMethodsFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context, IItemsCollector collector, CompletionListFilterAvailabilityCache cache);
    public virtual string get_ActionId();
    protected virtual bool Accepts(ILookupItem specificItem);
    public virtual string get_Text();
    public virtual IconId GetImage(ISolution solution);
    public virtual double get_Order();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Filters.CSharpFieldFilter : FieldsFilter`1<CSharpCodeCompletionContext> {
    public CSharpFieldFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.FilterStateSettingsKey", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "CSettingDescription")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Filters.CSharpFilterStateSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "ClassesSettingDescription")]
public CompletionListFilterState Classes;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "StructuresSettingDescription")]
public CompletionListFilterState Structs;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "InterfacesSettingDescription")]
public CompletionListFilterState Interfaces;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "EnumsSettingDescription")]
public CompletionListFilterState Enums;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "DelegatesSettingDescription")]
public CompletionListFilterState Delegates;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "MethodsSettingDescription")]
public CompletionListFilterState Methods;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "EventsSettingDescription")]
public CompletionListFilterState Events;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "FieldsSettingDescription")]
public CompletionListFilterState Fields;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "PropertiesSettingDescription")]
public CompletionListFilterState Properties;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "ExtensionMethodsSettingDescription")]
public CompletionListFilterState ExtensionMethods;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "LocalVariablesSettingDescription")]
public CompletionListFilterState LocalVariables;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "NamespacesSettingDescription")]
public CompletionListFilterState Namespaces;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "PublicSettingDescription")]
public CompletionListFilterState PublicSymbols;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "InternalSettingDescription")]
public CompletionListFilterState InternalSymbols;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "ProtectedSettingDescription")]
public CompletionListFilterState ProtectedSymbols;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "PrivateSettingDescription")]
public CompletionListFilterState PrivateSymbols;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "KeywordsSettingDescription")]
public CompletionListFilterState Keywords;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "TemplatesSettingDescription")]
public CompletionListFilterState Templates;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "ParametersSettingDescription")]
public CompletionListFilterState Parameters;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Filters.CSharpInterfaceFilter : InterfaceFilter`1<CSharpCodeCompletionContext> {
    public CSharpInterfaceFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Filters.CSharpInternalFilter : InternalFilter`1<CSharpCodeCompletionContext> {
    public CSharpInternalFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Filters.CSharpKeywordFilter : CompletionListKeywordFilter`1<CSharpCodeCompletionContext> {
    public CSharpKeywordFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Filters.CSharpLocalVariableFilter : LocalVariablesFilter`1<CSharpCodeCompletionContext> {
    public CSharpLocalVariableFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Filters.CSharpMethodFilter : MethodsFilter`1<CSharpCodeCompletionContext> {
    public CSharpMethodFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
    protected virtual bool Accepts(ILookupItem specificItem);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Filters.CSharpNamespaceFilter : NamespaceFilter`1<CSharpCodeCompletionContext> {
    public CSharpNamespaceFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Filters.CSharpParameterFilter : ParameterFilter`1<CSharpCodeCompletionContext> {
    public CSharpParameterFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Filters.CSharpPrivateFilter : PrivateFilter`1<CSharpCodeCompletionContext> {
    public CSharpPrivateFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Filters.CSharpPropertyFilter : PropertyFilter`1<CSharpCodeCompletionContext> {
    public CSharpPropertyFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Filters.CSharpProtectedFilter : ProtectedFilter`1<CSharpCodeCompletionContext> {
    public CSharpProtectedFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Filters.CSharpPublicFilter : PublicFilter`1<CSharpCodeCompletionContext> {
    public CSharpPublicFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Filters.CSharpStructFilter : StructFilter`1<CSharpCodeCompletionContext> {
    public CSharpStructFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Filters.CSharpTemplatesFilter : CompletionListFilterBase`2<ISpecificCodeCompletionContext, ILookupItem> {
    public string Text { get; }
    public string ActionId { get; }
    public double Order { get; }
    public CSharpTemplatesFilter(ISettingsStore store);
    protected virtual SettingsScalarEntry GetSettingsEntryInternal(ISettingsStore store);
    public virtual IconId GetImage(ISolution solution);
    public virtual string get_Text();
    public virtual string get_ActionId();
    public virtual double get_Order();
    protected virtual bool Accepts(ILookupItem specificItem);
    protected virtual bool IsAvailable(ISpecificCodeCompletionContext specificContext, IItemsCollector collector, CompletionListFilterAvailabilityCache cache);
}
public static class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.KeywordCompletionUtil : object {
    [NotNullAttribute]
public static IEnumerable`1<KeywordCompletionResult> Suggest(CSharpCodeCompletionContext context);
    private static void Suggest(KeywordCompletionContext context);
    private static void AppendScopedKeywords(KeywordCompletionContext context);
    private static void SuggestByNameIdentifier(KeywordCompletionContext context);
    [PureAttribute]
private static bool IsGlobalUsingParsedAsLocalVariable(ILocalVariableDeclaration localVariableDeclaration);
    [PureAttribute]
[ContractAnnotationAttribute("statement: null => false")]
private static bool IsInValidStatementContext(ICSharpStatement statement, KeywordCompletionContext context);
    private static void SuggestByTerminatedReferenceName(IReferenceName referenceName, KeywordCompletionContext context);
    private static void AppendRegularParameterModifiers(ICSharpRegularParameterDeclaration parameterDeclaration, KeywordCompletionContext context);
    private static void AppendTypeParameterConstrains(ITypeConstraint typeConstraint, KeywordCompletionContext context);
    private static void AppendTypeMemberModifiers(ICSharpTypeMemberDeclaration typeMemberDeclaration, KeywordCompletionContext context);
    private static void SuggestByTerminatedReferenceExpression(IReferenceExpression referenceExpression, KeywordCompletionContext context);
    [PureAttribute]
private static bool CanBeRefExpression(IReferenceExpression referenceExpression, CSharpLanguageLevel languageLevel);
    private static void AppendParameterModeModifiers(KeywordCompletionContext context, bool includeReadonly, bool includeScoped);
    [PureAttribute]
private static bool CanBeUnfinishedLambdaExpressionSignature(ICSharpExpression expression);
    [PureAttribute]
private static bool CanBeUnfinishedDeconstructionDeclarationExpression(ICSharpExpression expression);
    private static void AppendBrokenStatementContinuations(IReferenceExpression terminatedReferenceExpression, IExpressionStatement expressionStatement, KeywordCompletionContext context);
    private static void AppendKeywordsAfterExpression(KeywordCompletionContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.KeywordCompletionUtil/<EnumerateParentEmbeddedStatements>d__17")]
[PureAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
private static IEnumerable`1<ICSharpStatement> EnumerateParentEmbeddedStatements(ICSharpStatement statement);
    [PureAttribute]
private static bool HasIfStatementWithoutElseAbove(ICSharpStatement statement);
    [CanBeNullAttribute]
[PureAttribute]
private static ITreeNode GetLastMeaningfulChild(ITreeNode node);
    [CanBeNullAttribute]
[PureAttribute]
private static ITreeNode GetMostInnerLastMeaningfulSibling(ITreeNode node);
    [CanBeNullAttribute]
[PureAttribute]
private static ITreeNode GetPreviousMeaningfulChild(ITreeNode prevSibling, bool allowLineBreak);
    private static void SuggestByErrorContext(IErrorElement errorElement, KeywordCompletionContext context);
    [NotNullAttribute]
[PureAttribute]
private static IPattern GetMostContainingPatternByLastOne(IPattern pattern);
    private static void AppendTopLevelTypeDeclarationModifiers(ITreeNode contextNode, KeywordCompletionContext context);
    private static void AppendTypeDeclarationModifiers(KeywordCompletionContext context);
    private static void AppendAttributeTargets(IAttributeSection attributeSection, KeywordCompletionContext context);
    private static void AppendAccessorNames(IAccessorDeclaration accessorDeclaration, KeywordCompletionContext context);
    private static void AppendAccessorVisibilityModifiers(IAccessorDeclaration accessorDeclaration, KeywordCompletionContext context);
    private static void AppendTypeKeywords(ITreeNode referenceNode, KeywordCompletionContext context);
    private static void AppendStatementKeywords(IReferenceExpression referenceExpression, IExpressionStatement expressionStatement, KeywordCompletionContext context);
    [PureAttribute]
private static bool IsPreviousStatementUnfinished(IReferenceExpression referenceExpression);
    [PureAttribute]
private static bool IsAfterExpressionOnTheSameLine(ITreeNode origin);
    private static void AppendExpressionKeywords(ICSharpIdentifier identifier, KeywordCompletionContext context);
    private static void AppendQueryKeywords(KeywordCompletionContext context);
    private static QueryState InspectQueryExpression(ICSharpIdentifier unterminatedIdentifier);
    private static QueryState InspectQueryByInnerLast(ITreeNode innerSibling);
    private static bool TypeUsageCanBeParsedAsAnExpression(ITypeUsage typeUsage);
    [NotNullAttribute]
public static IList`1<string> GetTypeKeywords();
    [PureAttribute]
[NotNullAttribute]
private static TailType GetParenthesesTailBasedOnSettings(ParenthesesInsertType parenthesesInsert);
    [PureAttribute]
[NotNullAttribute]
private static TailType GetBracketsTailBasedOnSettings(ParenthesesInsertType parenthesesInsert);
    [CompilerGeneratedAttribute]
internal static void <Suggest>g__AppendVarKeyword|1_0(IUserTypeUsage userTypeUsage, KeywordCompletionContext context);
    [CompilerGeneratedAttribute]
internal static bool <SuggestByNameIdentifier>g__VariableDeclarationCanBeReinterpretedAsExpression|3_0(IMultipleLocalVariableDeclaration multiDeclaration);
    [CompilerGeneratedAttribute]
internal static bool <SuggestByNameIdentifier>g__CanBeThisKeyword|3_1(<>c__DisplayClass3_0& );
    [CompilerGeneratedAttribute]
internal static TypeParameterConstraintFlags <AppendTypeParameterConstrains>g__GetTypeConstraintKindsBefore|8_0(<>c__DisplayClass8_0& );
    [CompilerGeneratedAttribute]
internal static bool <SuggestByTerminatedReferenceExpression>g__IsAfterUnfinishedClassLikeOrDelegateDeclaration|10_0(<>c__DisplayClass10_0& );
    [CompilerGeneratedAttribute]
[PureAttribute]
internal static bool <CanBeUnfinishedLambdaExpressionSignature>g__CanBeUnfinishedLambdaExpressionSignature|13_0(ICSharpExpression expression);
    [CompilerGeneratedAttribute]
internal static bool <SuggestByErrorContext>g__IsAfterEmptyUsingListNode|22_0(<>c__DisplayClass22_0& );
    [CompilerGeneratedAttribute]
internal static bool <SuggestByErrorContext>g__CanStartTypeDeclaration|22_1(<>c__DisplayClass22_0& );
    [CompilerGeneratedAttribute]
internal static bool <SuggestByErrorContext>g__IsAfterColon|22_2(<>c__DisplayClass22_0& );
    [CompilerGeneratedAttribute]
internal static bool <SuggestByErrorContext>g__IsAfterUnfinishedClassLikeDeclaration|22_3(<>c__DisplayClass22_0& );
    [CompilerGeneratedAttribute]
internal static bool <AppendTopLevelTypeDeclarationModifiers>g__CanDeclaredNamespace|24_0(<>c__DisplayClass24_0& );
    [CompilerGeneratedAttribute]
internal static bool <AppendTypeKeywords>g__CanBeVoidKeyword|29_0(<>c__DisplayClass29_0& );
    [CompilerGeneratedAttribute]
internal static bool <AppendTypeKeywords>g__CanBeDynamicKeyword|29_1(<>c__DisplayClass29_0& );
    [CompilerGeneratedAttribute]
internal static bool <AppendTypeKeywords>g__CanBeObjectKeyword|29_2(<>c__DisplayClass29_0& );
    [CompilerGeneratedAttribute]
internal static bool <AppendTypeKeywords>g__CanBeFunctionPointer|29_3(<>c__DisplayClass29_0& );
    [CompilerGeneratedAttribute]
internal static bool <AppendStatementKeywords>g__IsInsideBreakContext|30_0(<>c__DisplayClass30_0& );
    [CompilerGeneratedAttribute]
internal static bool <AppendStatementKeywords>g__IsInsideContinueContext|30_1(<>c__DisplayClass30_0& );
    [CompilerGeneratedAttribute]
internal static bool <AppendStatementKeywords>g__IsInsideCatch|30_2(<>c__DisplayClass30_0& );
    [CompilerGeneratedAttribute]
internal static bool <AppendStatementKeywords>g__IsInVoidReturnContext|30_3(<>c__DisplayClass30_0& );
    [CompilerGeneratedAttribute]
internal static bool <AppendStatementKeywords>g__HasExpressionAfterOnTheSameLine|30_4(<>c__DisplayClass30_0& );
    [CompilerGeneratedAttribute]
internal static bool <AppendStatementKeywords>g__IsInsideIteratorContext|30_5(<>c__DisplayClass30_0& );
    [CompilerGeneratedAttribute]
internal static bool <IsPreviousStatementUnfinished>g__InspectToken|31_0(ITokenNode token);
    [CompilerGeneratedAttribute]
internal static bool <IsPreviousStatementUnfinished>g__EndsWithExpectedError|31_1(ITreeNode parsedNode);
    [CompilerGeneratedAttribute]
internal static bool <AppendExpressionKeywords>g__CanBeNameOfKeyword|33_0(<>c__DisplayClass33_0& );
    [CompilerGeneratedAttribute]
internal static bool <AppendExpressionKeywords>g__CanBeThrowExpression|33_1(<>c__DisplayClass33_0& );
    [CompilerGeneratedAttribute]
internal static TailType <AppendExpressionKeywords>g__GetDefaultExpressionKeywordTailType|33_2(<>c__DisplayClass33_0& );
    [CompilerGeneratedAttribute]
internal static QueryState <InspectQueryExpression>g__GetState|35_0(ITypeUsage typeUsage);
}
public static class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.LiveTemplatesUtil : object {
    public static Key`1<object> DiscardCompletionInHotspot;
    private static LiveTemplatesUtil();
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.LookupItemPresentationCache : object {
    [GuardAttribute("2")]
public virtual DeclaredElementPresentation`1<DeclaredElementInfo> GetPresentation(DeclaredElementInfo declaredElementInfo, ICompiledElement compiledElement, DeclaredElementPresenterStyle style, string typeParameterString);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.AddDiscardForOutArgument : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    [CompilerGeneratedAttribute]
internal static bool <AddLookupItems>g__CanUseShortDiscard|1_0(<>c__DisplayClass1_0& );
    [CompilerGeneratedAttribute]
internal static bool <AddLookupItems>g__IsExpectedOut|1_1(ExpectedIType expectedType);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.AnonymousMemberDeclarationRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(CSharpCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.AnonymousTypePropertiesRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    [CanBeNullAttribute]
private IAnonymousObjectInitializer GetObjectInitializer(CSharpCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.AttributeNameRule : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    protected virtual bool IncludeDeclaredElement(DeclaredElementInstance declaredElementInstance, CSharpCodeCompletionContext context);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    [CanBeNullAttribute]
[PureAttribute]
public static IAttribute GetAttributeByName(CSharpCodeCompletionContext context);
    [PureAttribute]
private static bool AttributeTargetsMatch(IClass attributeType, AttributeTargets attributeTargets);
    [PureAttribute]
private static AttributeTargets GetTargets(IAttribute attribute);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.AttributePropertyListRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    [PureAttribute]
private static int MaximumParametersCount(IParametersOwner parametersOwner);
    [PureAttribute]
private static int RequiredParametersCount(IParametersOwner parametersOwner);
    [CanBeNullAttribute]
private static IAttribute GetAttribute(CSharpCodeCompletionContext context, ICSharpArgument& argument);
    private static void FillForClass(CSharpCodeCompletionContext context, IDeclaredType attributeType, IItemsCollector result, List`1<ITypeMember> alreadyUsedMembers);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.AttributePropertyValueRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.AutomaticCompletionWhereValueIsExpected : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(CSharpCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.BaseClassesRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    public EvaluationMode SupportedEvaluationMode { get; }
    public virtual EvaluationMode get_SupportedEvaluationMode();
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    [CanBeNullAttribute]
public static ITypeElement GetContainingTypeElementByBaseClassClause(CSharpCodeCompletionContext context, Boolean& baseTypeExpected);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.BasicImportCompletionRule : ImportCodeCompletionForTypesBase {
    public EvaluationMode SupportedEvaluationMode { get; }
    public CompletionMode SupportedCompletionMode { get; }
    public virtual EvaluationMode get_SupportedEvaluationMode();
    public virtual CompletionMode get_SupportedCompletionMode();
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    [PureAttribute]
private static bool IsObjectInitializer(ITreeNode unterminatedContextTreeNode);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.BuildPresentationForLocalVariablesRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual void DecorateItems(CSharpCodeCompletionContext context, IReadOnlyCollection`1<ILookupItem> items);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.CallingConventionsRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Combo.NameofRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    [NotNullAttribute]
private Key myNameofItemsWereAddedKey;
    [NotNullAttribute]
private Key myNameofItemKey;
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    private bool AddItemsForNotifyPropertyChanged(CSharpCodeCompletionContext context, IItemsCollector collector);
    private bool AddItemsForArgumentException(CSharpCodeCompletionContext context, IItemsCollector collector);
    [NotNullAttribute]
private ILookupItem CreateNameofItem(CSharpCodeCompletionContext context, IDeclaredElement element, PsiIconManager iconManager);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Combo.SmartConstructorRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    public CompletionMode SupportedCompletionMode { get; }
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    public virtual CompletionMode get_SupportedCompletionMode();
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
}
[IntellisensePartAttribute("16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.CompletionInDocComments.CSharpCodeCompletionContextProviderInDocComment : CodeCompletionContextProviderInDocCommentBase {
    private CSharpCodeCompletionManager myCodeCompletionManager;
    public CSharpCodeCompletionContextProviderInDocComment(CSharpCodeCompletionManager codeCompletionManager);
    public virtual bool IsApplicable(CodeCompletionContext context);
    protected virtual ITokenNode GetTokenNode(CodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.CompletionInDocComments.CSharpDocCommentElementsItemsProviderImpl : DocCommentElementsItemsProvider {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.ConditionalSymbolsRule : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    private static void AddItems(JetHashSet`1<string> symbols, TreeTextRange textRange, CSharpCodeCompletionContext context, IItemsCollector collector);
    [NotNullAttribute]
private static JetHashSet`1<string> CollectConditionalSymbols(CSharpCodeCompletionContext context);
    [PureAttribute]
private static bool IsConditionalSymbolName(string symbolName);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.CSharpAssertionMessageItemProvider : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    [CanBeNullAttribute]
private static string GetExpressionName(IReferenceExpression methodAccess);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(CSharpCodeCompletionContext context);
    [CanBeNullAttribute]
[PureAttribute]
private static ICSharpLiteralExpression FindStringLiteral(CSharpCodeCompletionContext context);
    [CanBeNullAttribute]
[PureAttribute]
private static IReferenceExpression FindArgumentToPass(CSharpCodeCompletionContext context);
    [CanBeNullAttribute]
[PureAttribute]
private static ICSharpExpression FindAssertionConditionExpression(ICSharpExpression expression, AssertionType& assertionType);
    [CanBeNullAttribute]
private static ICSharpExpression FindConditionExpression(IInvocationExpression invocation, IParameter condition, IMethod method);
    [CanBeNullAttribute]
private static IParameter FindConditionParameter(IParameter messageParameter);
    [PureAttribute]
private static AssertionType CheckAssertionMethodType(IMethod method, IParameter messageParameter, IParameter conditionParameter);
    [CompilerGeneratedAttribute]
internal static string <AddLookupItems>g__GetAssertSuffix|1_0(AssertionType assertion);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.CSharpBaseArgumentsProvider : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    private static ObjectPool`1<PooledDictionary`2<string, ITypeOwner>> ourDictionaryPool;
    private static CSharpBaseArgumentsProvider();
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    private static LookupItem`1<TextualInfo> CreateLookupItem(CSharpCodeCompletionContext context, TextLookupRanges textLookupRanges, IReadOnlyList`1<ITypeOwner> arguments, string separator, TailType tailType, int index);
    private static TextLookupRanges GetTextRanges(CSharpCodeCompletionContext context, IReferenceExpression referenceExpression);
    private static IReadOnlyList`1<IReadOnlyList`1<ITypeOwner>> CalculateSuitableItems(IReferenceExpression referenceExpression, IEnumerable`1<ExtensionInstance`1<IParametersOwner>> candidateOverloads, int completedArgumentNumber, ICSharpTypeConversionRule typeConversionRule);
    private static string GetTextItem(CSharpCodeCompletionContext context, IEnumerable`1<ITypeOwner> arguments, string separator);
    private static string GetSeparator(CSharpCodeCompletionContext context);
    public static TailType GetInvocationTailType(ICSharpArgumentsOwner argumentsOwner);
    private static IReadOnlyList`1<ExtensionInstance`1<IParametersOwner>> FindNotMatchedParameters(ICSharpArgumentsOwner argumentsOwner, int argumentIndex);
    [NullableContextAttribute("2")]
private static IReferenceExpression TryGetReferenceExpression(ReparsedCodeCompletionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.CSharpBaseMemberRelevanceProvider : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    [PureAttribute]
private static IOverridableMember FindCurrentOverridableMember(CSharpCodeCompletionContext context);
    [PureAttribute]
private static bool OverridesCurrentMember(ILookupItem lookupItem, IOverridableMember currentMember);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.CSharpCaseInSwitchExpressionArmProvider : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    [PureAttribute]
private static bool IsSwitchExpressionArmBeginning(CSharpCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.CSharpEnumCaseItemProvider : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    [CanBeNullAttribute]
public static IReferenceExpression ToReferenceExpression(ReparsedCodeCompletionContext context);
    [CanBeNullAttribute]
private static IDeclaredType GetEnumType(ICSharpExpression expression);
    private static bool IsInvokedOverConstantValue(IReferenceExpression reference);
    private static bool IsInvokedOverPropertyOrClassReference(IReferenceExpression expression);
    private static bool AddEnumerationMembers(CSharpCodeCompletionContext context, IDeclaredType enumerationType, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.CSharpIncludeTemplatesRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    private static Key`1<object> ourKey;
    private static CSharpIncludeTemplatesRule();
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual void DecorateItems(CSharpCodeCompletionContext context, IReadOnlyCollection`1<ILookupItem> items);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(CSharpCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.CSharpInStringLiteralRule : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    private static Key`1<LiteralCompletionDocumentRanges> ourKey;
    private static CSharpInStringLiteralRule();
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    [CanBeNullAttribute]
private static ICSharpLiteralExpression TryGetSuitableLiteralExpression(ITreeNode node);
    private bool IsInSupportedContext(ICSharpLiteralExpression literalExpression);
    private static bool HasInjectedLanguage(ICSharpLiteralExpression literalExpression);
    private static bool IsInRegularExpression(ICSharpLiteralExpression literalExpression);
    private LiteralCompletionDocumentRanges GetCompletionRange(ITokenNode node, DocumentRange selectionRange2);
    protected virtual ISymbolTable GetSymbolTable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(CSharpCodeCompletionContext context);
}
public abstract class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.CSharpItemsProviderBase`1 : ItemsProviderOfSpecificContext`1<TCodeCompletionContext> {
    [CanBeNullAttribute]
protected virtual ISymbolTable GetSymbolTable(CSharpCodeCompletionContext context);
    [CanBeNullAttribute]
[PureAttribute]
public static ICompletableReference GetCompletableReference(CSharpCodeCompletionContext context);
    [PureAttribute]
private static bool IsReturnTypeUsageOfDeclarationPossiblyWithTypeParameters(ITypeUsage userTypeUsage);
    protected bool AddBasicItemsInternal(CSharpCodeCompletionContext context, IItemsCollector collector);
    protected virtual bool IncludeDeclaredElement(DeclaredElementInstance declaredElementInstance, CSharpCodeCompletionContext context);
    protected void GetLookupItemsFromSymbolTable(ISymbolTable symbolTable, IItemsCollector collector, CSharpCodeCompletionContext context, bool includeFollowingExpression);
    private static void CollectMethodLikeElement(TMethodLike methodLike, DeclaredElementInstance declaredElementInstance, List`1<DeclaredElementInstance> inferrableElements, List`1<DeclaredElementInstance> elementsWithExplicitGenericParameters);
    private static void AddMethodLikeGroupItem(IList`1<DeclaredElementInstance> elements, CSharpCodeCompletionContext context, IItemsCollector collector, string name, bool includeFollowingExpression, bool skipGenericArguments);
    [NotNullAttribute]
protected virtual ILookupItem CreateNonTypeLookupItem(CSharpCodeCompletionContext context, DeclaredElementInstance declaredElementInstance, string name);
    protected virtual bool IsAvailable(TCodeCompletionContext context);
    [CanBeNullAttribute]
private static ISymbolTable BuildSymbolTableForExplicitImplementation(CSharpCodeCompletionContext completionContext);
    [PureAttribute]
[NotNullAttribute]
public static ISymbolFilter GetConstantContextFilterByReference(IReference reference);
    [CompilerGeneratedAttribute]
internal static DeclaredElementInstance <GetLookupItemsFromSymbolTable>g__GetAliasedTypeElementInstance|5_1(<>c__DisplayClass5_0& );
    [CompilerGeneratedAttribute]
internal static bool <GetLookupItemsFromSymbolTable>g__ShouldSkipAlias|5_2(ISymbolAlias symbolAlias);
    [CompilerGeneratedAttribute]
internal static bool <GetLookupItemsFromSymbolTable>g__HasMultipleNonGenericTypeElementsWithTheSameName|5_3(<>c__DisplayClass5_0& , <>c__DisplayClass5_1& );
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.CSharpItemsProviderBasic : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual ISymbolTable GetSymbolTable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    private static bool ShouldApplySmartBehavior(CodeCompletionContext basicContext, IReadOnlyList`1<ILookupItem> items);
    private static void ApplySmartBehavior(CSharpCodeCompletionContext context, IItemsCollector collector, ILookupItem lookupItem, ElementsParametersInfo elementsParametersInfo);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.CSharpLengthCountItemProvider : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    private static string LENGTH;
    private static string COUNT;
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    [NotNullAttribute]
private static ILookupItem CreateInvertedItem(CSharpCodeCompletionContext context, IAspectLookupItem`1<DeclaredElementInfo> existingItem);
    [CanBeNullAttribute]
public static IReferenceExpression ToReferenceExpression(ReparsedCodeCompletionContext context);
    private static bool IsLengthOrCountProperty(DeclaredElementInfo declaredElementInfo);
    [CanBeNullAttribute]
[PureAttribute]
private static string InvertName(string name);
    [CompilerGeneratedAttribute]
internal static string <CreateInvertedItem>g__InvertOrderString|4_3(<>c__DisplayClass4_0& );
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.CSharpPointerVariantAfterDotRule : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    protected virtual ISymbolTable GetSymbolTable(CSharpCodeCompletionContext context);
    [CanBeNullAttribute]
private IReferenceExpression GetSuitableReferenceExpression(ITreeNode node);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "0")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.CSharpPostfixTemplatesProvider : PostfixTemplatesItemProviderBase`2<CSharpCodeCompletionContext, CSharpPostfixTemplateContext> {
    [NotNullAttribute]
private CSharpPostfixTemplateContextFactory myPostfixContextFactory;
    public CSharpPostfixTemplatesProvider(PostfixTemplatesManager templatesManager, UsageStatistics usageStatistics, CSharpPostfixTemplateContextFactory postfixContextFactory);
    protected virtual CSharpPostfixTemplateContext TryCreatePostfixContext(CSharpCodeCompletionContext completionContext);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.CSharpPublicModifierInInterfaceProvider : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    [PureAttribute]
private static bool IsLineBeginningInInterfaceDeclaration(CSharpCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.CSharpPushExtensionMethodsDownRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    public bool IsFinal { get; }
    public virtual bool get_IsFinal();
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    [CompilerGeneratedAttribute]
internal static bool <TransformItems>g__IsExtensionMethodsLookupItem|3_0(ILookupItem lookupItem);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.CSharpRelevanceRule : CLRLanguageRelevanceRuleBase`1<CSharpCodeCompletionContext> {
    protected virtual void AddLanguageSpecificRelevance(IEnumerable`1<ILookupItem> items, CSharpCodeCompletionContext context);
    protected virtual CLRLookupItemRelevance AddLanguageSpecificRelevance(IParameter parameter, ILookupItem lookupItem, CSharpCodeCompletionContext context);
    private static bool ThisMatchesExpectedType(ExpectedTypeCompletionContext expectedTypesContext, CSharpCodeCompletionContext context);
    [CanBeNullAttribute]
protected virtual ITypeElement GetCurrentTypeElement(CSharpCodeCompletionContext context);
    protected virtual int GetStartOffsetInReparseContext(CSharpCodeCompletionContext context);
    [CanBeNullAttribute]
private static ExpectedTypeCompletionContext GetExpectedTypesContext(CSharpCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.CSharpStringFormattingItemProvider : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    [CanBeNullAttribute]
private static Specifier[] modreq(System.Runtime.CompilerServices.IsVolatile) ourSpecifiers;
    [NotNullAttribute]
private static object ourSpecifiersLock;
    [NotNullAttribute]
private static Regex ourFormatStringRegex;
    [NotNullAttribute]
private static Key ourItemsWereAddedKey;
    [NotNullAttribute]
private IFunctionInvocationProvider myFunctionInvocationProvider;
    [NotNullAttribute]
private static ClrTypeName ourBigIntegerType;
    [NotNullAttribute]
private static ClrTypeName ourInt128Type;
    [NotNullAttribute]
private static ClrTypeName ourUInt128Type;
    [NotNullAttribute]
private static ClrTypeName ourHalfType;
    public CSharpStringFormattingItemProvider(IFunctionInvocationProvider functionInvocationProvider);
    private static CSharpStringFormattingItemProvider();
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(CSharpCodeCompletionContext context);
    private bool TryAddFormatItemsForLiteralInArgument(CSharpCodeCompletionContext context, IItemsCollector collector, ICSharpArgument argument, ICSharpLiteralExpression literalExpression);
    private static Predefined ParseStringSyntax(string stringSyntax);
    [CanBeNullAttribute]
private static IType FormattedTypeByFormatExpression(ICSharpExpression expression);
    private static bool TryParseFormatStringAndAddFormatItems(CSharpCodeCompletionContext context, IItemsCollector collector, ICSharpExpression literalExpression, ICSharpArgumentsOwner argumentsOwner);
    private static bool TryAddFormatItems(CSharpCodeCompletionContext context, IItemsCollector collector, DocumentRange formatSpecifierRange, IType formattedType);
    private static bool TryAddFormatItems(CSharpCodeCompletionContext context, IItemsCollector collector, DocumentRange formatSpecifierRange, Predefined predefinedType);
    [PureAttribute]
private static Predefined GetPredefinedType(IType formattedType);
    [NotNullAttribute]
[PureAttribute]
private static Specifier[] GetSpecifiers();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.CSharpSubpatternMemberNamesProviderBasic : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    private static void AddDeconstructionSubpatternNames(CSharpCodeCompletionContext context, ISubpattern subpattern, IDeconstructionPatternClause deconstructionPatternClause, IItemsCollector collector);
    private static void AddPropertyPatternSubpatternNames(CSharpCodeCompletionContext context, ICompletableReference completableReference, ISubpattern subpattern, IItemsCollector collector);
    [NotNullAttribute]
[PureAttribute]
private static HashSet`1<string> CollectMemberNamesCheckedBeforeInObjectPattern(ISubpattern subpattern);
    [CanBeNullAttribute]
[PureAttribute]
private static ISubpattern CreateSubpatternWithSimpleMemberAccess(CSharpCodeCompletionContext context);
    [CompilerGeneratedAttribute]
internal static void <AddDeconstructionSubpatternNames>g__AppendSubpatternName|2_0(string subpatternName, IconId icon, IParameter parameter, <>c__DisplayClass2_0& );
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.CSharpTypeParameterFromUsageItemProvider : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    [NotNullAttribute]
private static string GetTypeParameterName(ICSharpDeclaration functionDeclaration);
    [NotNullAttribute]
private static LookupItem`1<CreateTypeParameterInfo> CreateLookupItem(ICSharpDeclaration functionDeclaration, CSharpCodeCompletionContext context);
    private static bool IsInsideSignatureWhereTypeUsageExpected(IMethodDeclaration methodDeclaration, IReferenceName referenceName);
    private static bool IsInsideSignatureWhereTypeUsageExpected(ILocalFunctionDeclaration localFunctionDeclaration, IReferenceName referenceName);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.CSharpVoidExpressionRule : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    private static string VoidKeyword;
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.DocCommentCompletionRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual void DecorateItems(CSharpCodeCompletionContext context, IReadOnlyCollection`1<ILookupItem> items);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.DotAfterRangeIndexRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    [NotNullAttribute]
public static Key QualifierCanBeRangeIndex;
    private static DotAfterRangeIndexRule();
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Double.DoubleCompletionRangesProviderRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    public CompletionMode SupportedCompletionMode { get; }
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    public virtual CompletionMode get_SupportedCompletionMode();
    protected virtual TextLookupRanges GetDefaultRanges(CSharpCodeCompletionContext context);
}
public abstract class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Double.ExpandBasicCompletionProviderBase : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    public CompletionMode SupportedCompletionMode { get; }
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    public virtual CompletionMode get_SupportedCompletionMode();
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    private void AddLookupItemsInternal(CSharpCodeCompletionContext context, IItemsCollector collector, ISymbolTable symbolTable, bool showContainer);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Double.ExpandBasicCompletionQualifiedProvider : ExpandBasicCompletionProviderBase {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Double.ExpandExtensionMethodImportCompletionItemsProvider : ExtensionMethodImportCompletionItemsProviderBase {
    private ModuleReferencerService myModuleReferencerService;
    public CompletionMode SupportedCompletionMode { get; }
    protected bool WithoutReferences { get; }
    public ExpandExtensionMethodImportCompletionItemsProvider(ModuleReferencerService moduleReferencerService);
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    public virtual CompletionMode get_SupportedCompletionMode();
    protected virtual ILookupItem CreateLookupItem(CSharpCodeCompletionContext context, string name, ICollection`1<IMethod> methodArray, bool showSignatures, bool isBasicImport);
    protected virtual bool get_WithoutReferences();
    protected virtual bool ShouldBeIncluded(CSharpCodeCompletionContext context, ICollection`1<IMethod> methods);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Double.ExpandImportCompletionProvider : ExpandImportCompletionProviderBase`1<CSharpCodeCompletionContext> {
    public ExpandImportCompletionProvider(ModuleReferencerService moduleReferencerService);
    protected virtual bool IsQualifiedContext(CSharpCodeCompletionContext context);
    protected virtual TextLookupRanges GetRanges(CSharpCodeCompletionContext context);
    protected virtual ITreeNode GetTreeNode(CSharpCodeCompletionContext context);
    protected virtual ILookupItem CreateLookupItem(CSharpCodeCompletionContext context, IGrouping`2<string, ITypeElement> typeElements);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Double.ExpandSmartCompletionRule : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    public CompletionMode SupportedCompletionMode { get; }
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    public virtual CompletionMode get_SupportedCompletionMode();
    protected virtual ISymbolTable GetSymbolTable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    public static void AddSmartItems(CSharpCodeCompletionContext context, IItemsCollector collector, IReference reference, ISymbolTable symbolTable, int maxItems, Action`4<ISymbolTable, IItemsCollector, CSharpCodeCompletionContext, bool> symbolTableProcessor, Func`3<ExpectedIType, ISubstitution, ISmartCompletionSymbolFilter> fGetFilter, bool enumerateExpectedTypes);
    private static void ProcessTable(CSharpCodeCompletionContext context, IItemsCollector collector, ISymbolTable elementTable, Int32& itemsAdded, List`1<ILookupItem> initialItems, int priority, Nullable`1<bool> withTypeInference, Action`4<ISymbolTable, IItemsCollector, CSharpCodeCompletionContext, bool> symbolTableProcessor);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Double.NonStaticMembersInNonStaticContextRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    public CompletionMode SupportedCompletionMode { get; }
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    public virtual CompletionMode get_SupportedCompletionMode();
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    private bool IsStaticContext(CSharpCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Double.StaticMembersInNonStaticContextRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    public CompletionMode SupportedCompletionMode { get; }
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    public virtual CompletionMode get_SupportedCompletionMode();
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    private bool IsNonStaticContext(CSharpCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.DynamicQualifierRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    public EvaluationMode SupportedEvaluationMode { get; }
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    public virtual EvaluationMode get_SupportedEvaluationMode();
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(CSharpCodeCompletionContext context);
    public static bool IsAfterDynamicQualifier(CSharpCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.EraseTailOnApiInformationReference : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual void DecorateItems(CSharpCodeCompletionContext context, IReadOnlyCollection`1<ILookupItem> items);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.EraseTailTypeBeforeDotRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual void DecorateItems(CSharpCodeCompletionContext context, IReadOnlyCollection`1<ILookupItem> items);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.EraseTailTypeRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    [NotNullAttribute]
public static Key`1<object> EraseTypes;
    private static EraseTailTypeRule();
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.EraseTextBehavior : TextualBehavior`1<TextualInfo> {
    public EraseTextBehavior(TextualInfo info);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.ExceptionDerivativesInCatchBase : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected static IEnumerable`1<IClass> GetAccessibleExceptions(CSharpCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.ExceptionDerivativesInCatchBasic : ExceptionDerivativesInCatchBase {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.ExtensionMethodImportCompletionItemsProvider : ExtensionMethodImportCompletionItemsProviderBase {
    public CompletionMode SupportedCompletionMode { get; }
    protected bool WithoutReferences { get; }
    protected virtual ILookupItem CreateLookupItem(CSharpCodeCompletionContext context, string name, ICollection`1<IMethod> methodArray, bool showSignatures, bool isBasicImport);
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    public virtual CompletionMode get_SupportedCompletionMode();
    protected virtual bool get_WithoutReferences();
}
public abstract class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.ExtensionMethodImportCompletionItemsProviderBase : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    public EvaluationMode SupportedEvaluationMode { get; }
    protected bool WithoutReferences { get; }
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    public virtual EvaluationMode get_SupportedEvaluationMode();
    protected virtual void DecorateItems(CSharpCodeCompletionContext context, IReadOnlyCollection`1<ILookupItem> items);
    private void BuildResultForExtensionMethods(IReferenceExpression referenceExpression, CSharpCodeCompletionContext context, IItemsCollector collector);
    [NotNullAttribute]
protected abstract virtual ILookupItem CreateLookupItem(CSharpCodeCompletionContext context, string name, ICollection`1<IMethod> methodArray, bool showSignatures, bool isBasicImport);
    protected abstract virtual bool get_WithoutReferences();
    protected virtual bool ShouldBeIncluded(CSharpCodeCompletionContext context, ICollection`1<IMethod> methods);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.ExternAliasRule : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.FileReferenceCSharpItemsProvider : FileReferenceItemsProvider`1<CSharpCodeCompletionContext> {
    protected virtual TextLookupRanges EvaluateRanges(CSharpCodeCompletionContext context);
    protected virtual IFileReference GetReference(CSharpCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.FilterDuplicatesRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    public EvaluationMode SupportedEvaluationMode { get; }
    public virtual EvaluationMode get_SupportedEvaluationMode();
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    private static bool IsTupleComponentAlias(ILookupItem lookupItem, IDeclaredElement declaredElement, CSharpLanguageLevel languageLevel);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.FilterElementsInTypeArgumentsListRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Generate.ConstructorRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    public EvaluationMode SupportedEvaluationMode { get; }
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    public virtual EvaluationMode get_SupportedEvaluationMode();
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    private static void AddItem(string identity, CSharpCodeCompletionContext context, IItemsCollector collector, GenerateConstructorMembers membersToInitialize);
    [NotNullAttribute]
private static RichText GetDisplayName(string name);
    private static bool IsTrivialTypeOwner(ITypeOwner typeOwner);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Generate.OverrideRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    public CompletionMode SupportedCompletionMode { get; }
    public EvaluationMode SupportedEvaluationMode { get; }
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    public virtual CompletionMode get_SupportedCompletionMode();
    public virtual EvaluationMode get_SupportedEvaluationMode();
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    [CanBeNullAttribute]
[MustUseReturnValueAttribute]
private static LookupItem`1<GenerateMemberInfo> TryAddGenerateItem(CSharpCodeCompletionContext context, OverridableMemberInstance memberInstance, MemberGenerationContext memberGenerationContext, GenerateMemberImplementationKind implementationKind);
    [NotNullAttribute]
[PureAttribute]
private static string CreateItemPrefixForMatching(MemberGenerationContext memberGenerationContext, GenerateMemberImplementationKind implementationKind, IOverridableMember member);
    [CanBeNullAttribute]
private static MemberGenerationContext TryBuildMemberGenerationContext(CSharpCodeCompletionContext context);
    [PureAttribute]
private static bool IsAfterOverrideModifierThatBrokeMethodDeclarationAbove(CSharpCodeCompletionContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Generate.OverrideRule/<GetPotentiallyOverridableMembers>d__11")]
[ItemNotNullAttribute]
private static IEnumerable`1<OverridableMemberInstance> GetPotentiallyOverridableMembers(IGenerateCompletionProvider provider, ITypeDeclaration typeDeclaration);
    [CompilerGeneratedAttribute]
internal static void <CreateItemPrefixForMatching>g__AppendAccessRights|7_0(<>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static bool <TryBuildMemberGenerationContext>g__CheckNodesBeforeTypeUsage|8_0(ITypeUsage typeUsage, IModifiersList& modifiersList);
    [CompilerGeneratedAttribute]
internal static bool <TryBuildMemberGenerationContext>g__IsDeclarationToReplace|8_1(ITreeNode declaration);
    [CompilerGeneratedAttribute]
internal static TextLookupRanges <TryBuildMemberGenerationContext>g__ComputeMemberReplaceRanges|8_2(TreeOffset startOffset, <>c__DisplayClass8_0& );
    [CompilerGeneratedAttribute]
[CanBeNullAttribute]
internal static TextLookupRanges <TryBuildMemberGenerationContext>g__RangesForDeclaration|8_4(ITreeNode treeNode, <>c__DisplayClass8_0& );
    [CompilerGeneratedAttribute]
internal static DocumentRange <TryBuildMemberGenerationContext>g__ComputeReplaceRangeForDeclaration|8_5(ITreeNode declaration, <>c__DisplayClass8_0& );
    [CompilerGeneratedAttribute]
internal static DocumentOffset <TryBuildMemberGenerationContext>g__GetDeclarationStartDocumentOffset|8_6(ITreeNode declaration);
    [CompilerGeneratedAttribute]
internal static ITreeNode <TryBuildMemberGenerationContext>g__GetAnchorDeclaration|8_7(ITreeNode declaration);
    [CompilerGeneratedAttribute]
internal static DocumentRange <TryBuildMemberGenerationContext>g__GetDeclarationNameRange|8_8(ITreeNode declaration);
    [CompilerGeneratedAttribute]
[CanBeNullAttribute]
internal static ITypeDeclaration <TryBuildMemberGenerationContext>g__GetPhysicalNonStaticTypeDeclaration|8_3(<>c__DisplayClass8_0& );
    [CompilerGeneratedAttribute]
internal static bool <IsAfterOverrideModifierThatBrokeMethodDeclarationAbove>g__HasCameleonStopperModifiers|9_0(IModifiersList modifiersList);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Generate.PartialMethodRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    private static Key`1<IDeclaration> ourNodeKey;
    private static PartialMethodRule();
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext codeCompletionContext, IItemsCollector collector);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    private static bool IsAtPartialMethodDeclaration(CSharpCodeCompletionContext codeCompletionContext, IDeclaration& actualMemberDeclaration, ITypeElement& type, Boolean& partialKeywordRequired);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Generate.PartialRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    public CompletionMode SupportedCompletionMode { get; }
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    public virtual CompletionMode get_SupportedCompletionMode();
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    private static bool IsAtPartialClassDeclaration(CSharpCodeCompletionContext context);
    private bool IsPartial(CodeCompletionContext basicContext, IClass class);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Generate.PropertyRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    public EvaluationMode SupportedEvaluationMode { get; }
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    public virtual EvaluationMode get_SupportedEvaluationMode();
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    [NotNullAttribute]
private ILookupItem CreatePropertyLookupItem(string propertyName, bool readonly, DeclaredElementInstance`1<IField> fieldInstance, PsiIconManager psiIconManager, CSharpCodeCompletionContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Generate.PropertyRule/<GetFields>d__5")]
private static IEnumerable`1<IField> GetFields(ITypeElement typeElement, JetHashSet`1<string> usedFieldsNames);
    [NotNullAttribute]
private static ICSharpTreeNode GetResolveContext(IClassLikeDeclaration declaration);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Generate.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.GenericTypeWhereConstructorDeclarationExpected : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    [PureAttribute]
private static bool IsInConstructorNamePosition(CSharpCodeCompletionContext context);
    protected virtual void DecorateItems(CSharpCodeCompletionContext context, IReadOnlyCollection`1<ILookupItem> items);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.GenericTypeWhereDocCommentReferenceExpected : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual void DecorateItems(CSharpCodeCompletionContext context, IReadOnlyCollection`1<ILookupItem> items);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.HighlightMembersOfCurrentClassRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    [NotNullAttribute]
public static Key`1<ITypeElement> OwnerTypeElementKey;
    private static HighlightMembersOfCurrentClassRule();
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual void DecorateItems(CSharpCodeCompletionContext context, IReadOnlyCollection`1<ILookupItem> items);
    [CanBeNullAttribute]
[PureAttribute]
private static ITypeElement GetCurrentTypeElement(CSharpCodeCompletionContext context);
    [CanBeNullAttribute]
public static ITypeElement GetTypeElementByType(IType qualifierType, ITreeNode context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.ImportCodeCompletionForDocCommentProvider : ImportCodeCompletionForTypesItemsProviderBase {
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.ImportCodeCompletionForTypesBase : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected void AddTypes(CSharpCodeCompletionContext context, IItemsCollector collector, CodeCompletionContext basicContext, bool isBasic);
    [PureAttribute]
private static bool IsExceptionExpected(CSharpCodeCompletionContext context);
    private static bool AttributePreFilter(ITypeElement typeElement);
    [NotNullAttribute]
[PureAttribute]
private static HashSet`1<IClrDeclaredElement> GetImportedNamespacesAndTypes(ITreeNode treeNode);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.ImportCodeCompletionForTypesItemsProvider : ImportCodeCompletionForTypesItemsProviderBase {
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.ImportCodeCompletionForTypesItemsProviderBase : ImportCodeCompletionForTypesBase {
    public EvaluationMode SupportedEvaluationMode { get; }
    public virtual EvaluationMode get_SupportedEvaluationMode();
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected bool BuildResultForTypes(CSharpCodeCompletionContext context, IItemsCollector collector);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.IndexersRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    private static DeclaredElementPresenterStyle ourIndexerPresenterStyle;
    private static IndexersRule();
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.IndexersRule/<CreateIndexerLookupItems>d__2")]
public static IEnumerable`1<LookupItem`1<DeclaredElementInfo>> CreateIndexerLookupItems(IReadOnlyList`1<DeclaredElementInstance`1<IProperty>> indexers, CSharpCodeCompletionContext context);
    private static LookupItem`1<DeclaredElementInfo> CreateIndexerLookupItemWithSignature(CSharpCodeCompletionContext context, DeclaredElementInstance`1<IProperty> indexer);
    private static LookupItem`1<DeclaredElementInfo> CreateOverloadedIndexerLookupItem(CSharpCodeCompletionContext context, IReadOnlyList`1<DeclaredElementInstance`1<IProperty>> indexers);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.IndexersRule/<GetAvailableIndexers>d__5")]
[PureAttribute]
private static IEnumerable`1<DeclaredElementInstance`1<IProperty>> GetAvailableIndexers(CSharpCodeCompletionContext context);
    [PureAttribute]
private static Func`2<DeclaredElementInstance`1<IProperty>, bool> GetIndexerFilter(CSharpCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.InheritdocCrefItemProvider : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.KeywordCompletionRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    [NotNullAttribute]
private static Key RemoveGlobalExternAliasKey;
    private static KeywordCompletionRule();
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    private static void InvokeCompletionAfterCompletingWithEnter(ISolution solution, LookupItem`1<CSharpKeywordInfo> textualItem, bool useSmart);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.LambdaParameterNameExpectedRuleWithReparse : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(CSharpCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.MemberInitializerExpressionRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(CSharpCodeCompletionContext context);
}
internal static class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.MemoryPools : object {
    public static Pool<string, DeclaredElementInstance> ByNamesMultiDictionary;
    public static Pool<INamespace, ITypeElement> GenericTypesByNamespaceMultiDictionary;
    public static ObjectPool`1<PooledList`1<DeclaredElementInstance>> InstancesList;
    private static MemoryPools();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.MethodGroupOrLambdaExpectedRule : ItemsProviderOfSpecificContextWithSharedData`2<CSharpCodeCompletionContext, Data> {
    protected virtual Data IsAvailable(CSharpCodeCompletionContext context);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(CSharpCodeCompletionContext context, Data data);
    protected virtual void DecorateItems(CSharpCodeCompletionContext context, IReadOnlyCollection`1<ILookupItem> items, Data data);
    private static bool HasApplicableMethodGroup(CSharpCodeCompletionContext context, DeclaredElementInstance instance, ILookupItem lookupItem, List`1<DeclaredElementInstance`1<IDelegate>> delegates);
    private bool IsMethodGroupOrLambdaExpected(IEnumerable`1<ExpectedType> expectedTypes, Boolean& mightStartWithIdentifier, CSharpCodeCompletionContext context);
    private IDeclaredType UnfoldExpressionTree(IDeclaredType declaredType);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.MethodGroupOrLambdaExpectedRuleForLambdaParameterName : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(CSharpCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.NamedArgumentsRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    [NotNullAttribute]
private static Key RemoveAllItemsKey;
    private static NamedArgumentsRule();
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    [PureAttribute]
public static bool ShouldAvoidImportItems(CodeCompletionContext context);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    [CanBeNullAttribute]
[PureAttribute]
private static ICSharpArgument FindPositionalArgumentFromRight(CSharpCodeCompletionContext context);
    [NotNullAttribute]
[PureAttribute]
private static IReadOnlyDictionary`2<string, IParameter> GetUnmatchedParameters(ICSharpArgument argument, Boolean& hasOutOfOrderNamedArgumentsBefore);
    private static void AddLookupItems(CSharpCodeCompletionContext context, IReadOnlyDictionary`2<string, IParameter> parameterNames, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.NamespaceDeclarationRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    private PsiLanguageType myLanguage;
    public NamespaceDeclarationRule(PsiLanguageType language);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    public static ICSharpNamespaceDeclaration GetNamespaceDeclarationNode(ITreeNode treeNode);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.NameSuggestionRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    private static Key ourSuggestionsWereAddedKey;
    public EvaluationMode SupportedEvaluationMode { get; }
    public bool IsDynamic { get; }
    private static NameSuggestionRule();
    [CanBeNullAttribute]
[PureAttribute]
private static ICSharpIdentifier ChooseIdentifierToWorkWith(CSharpCodeCompletionContext context, Boolean& isVariablePrefixSuggestion);
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    public virtual EvaluationMode get_SupportedEvaluationMode();
    public virtual bool get_IsDynamic();
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(CSharpCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.NewStatementRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    [NotNullAttribute]
public static Key CanBeTargetTyped;
    private ICSharpExpectedTypesProvider myExpectedTypesProvider;
    public EvaluationMode SupportedEvaluationMode { get; }
    public NewStatementRule(ICSharpExpectedTypesProvider expectedTypesProvider);
    private static NewStatementRule();
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    public virtual EvaluationMode get_SupportedEvaluationMode();
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    [CanBeNullAttribute]
private static IObjectCreationExpression FindObjectCreationExpression(CSharpCodeCompletionContext context);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(CSharpCodeCompletionContext context);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    [NotNullAttribute]
private static HashSet`1<ITypeElement> GetTypeElementsFromLightEvaluation(CSharpCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.NoTemplatesAfterDotRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.ObjectInitializerRule : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    private void FindMemberInitializers(CSharpCodeCompletionContext context, IItemsCollector collector, ITreeNode node);
    private void FindMemberInitializer(CSharpCodeCompletionContext context, IItemsCollector collector, IObjectCreationExpression objectCreationExpression, string referenceName, string rightPart);
    private void CollectMemberInitializer(CSharpCodeCompletionContext context, IItemsCollector collector, IMemberInitializer memberInitializer);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.PostCompleteBehavior.CSharpPointerVariantAfterDotPostCompleteBehavior : object {
    private IRangeMarker myDotRange;
    public CSharpPointerVariantAfterDotPostCompleteBehavior(IRangeMarker dotRange);
    public sealed virtual DocumentRange OnCompletedItemTextInserted(DocumentRange itemTextRange, Suffix& suffix);
    public sealed virtual void OnAfterItemCompleted(ITextControl textControl, DocumentRange completedDecorationRange);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.PostCompleteBehavior.CSharpStringLiteralPostCompleteBehavior : object {
    private static string EscapingCommand;
    [NotNullAttribute]
private IRangeMarker myLiteralMarker;
    [NotNullAttribute]
private IRangeMarker myHoleRangeMarker;
    [NotNullAttribute]
private ICommandProcessor myCommandProcessor;
    [NotNullAttribute]
private ISolution mySolution;
    private bool myCompletedWithSuffix;
    public CSharpStringLiteralPostCompleteBehavior(IRangeMarker literalMarker, IRangeMarker openingBraceMarker, ICommandProcessor commandProcessor, ISolution solution);
    public sealed virtual DocumentRange OnCompletedItemTextInserted(DocumentRange itemTextRange, Suffix& suffix);
    private void ChangeBracesEscapingOutsideGivenRange(bool escape);
    public sealed virtual void OnAfterItemCompleted(ITextControl textControl, DocumentRange completedDecorationRange);
    private void UndoableEscapeAllBraces();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.PreferExactTypesInComparison : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    private void FilterByExactType(IType expressionType, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.PreprocessorArgumentRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(CSharpCodeCompletionContext context);
    [PureAttribute]
private static ValueTuple`2<DocumentRange, ArgumentKind> GetDirectiveDocumentRange(CSharpCodeCompletionContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.PreprocessorArgumentRule/<SplitByWords>d__5")]
[PureAttribute]
private static IEnumerable`1<TextRange> SplitByWords(string messageText);
    [CompilerGeneratedAttribute]
internal static ArgumentKind <GetDirectiveDocumentRange>g__IndexToKind|4_0(<>c__DisplayClass4_0& );
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.PreprocessorRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    [NotNullAttribute]
private static TokenNodeType[] ourPreprocessorTokens;
    [NotNullAttribute]
private static NodeTypeSet ourPreprocessorWithoutArguments;
    [NotNullAttribute]
private static NodeTypeSet ourPreprocessorInvokeCompletionAfter;
    private static PreprocessorRule();
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    [PureAttribute]
private static DocumentRange GetDirectiveDocumentRange(CSharpCodeCompletionContext context, DocumentRange& sharpSymbolRange);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.PropertyNameSameToTypeRule : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    [CanBeNullAttribute]
[PureAttribute]
private static IReference GetQualifier(IReference terminatedContextReference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.QueryClauseRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(CSharpCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.RangesProviderRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    public EvaluationMode SupportedEvaluationMode { get; }
    protected virtual TextLookupRanges GetDefaultRanges(CSharpCodeCompletionContext context);
    public virtual EvaluationMode get_SupportedEvaluationMode();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.ShowAnnotationsRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    [PureAttribute]
private static AnnotationsDisplayKind GetAnnotationsDisplayKind(CSharpCodeCompletionContext context);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Smart.AddAwaitTaskMethods : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    private static Key`1<JetHashSet`1<IDeclaredElement>> ourElementsToDecorateKey;
    private static AddAwaitTaskMethods();
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    protected virtual bool IncludeDeclaredElement(DeclaredElementInstance declaredElementInstance, CSharpCodeCompletionContext context);
    protected virtual void DecorateItems(CSharpCodeCompletionContext context, IReadOnlyCollection`1<ILookupItem> items);
    private bool MatchesByType(DeclaredElementInstance declaredElementInstance, ExpectedType expectedType);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Smart.AddLocalVariableForOutArgument : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    private static bool IsPartOfArgument(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    public static bool CanUseVar(CSharpCodeCompletionContext context, IReadOnlyCollection`1<ExpectedIType> expectedTypes);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Smart.AddThisExpression : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    private static Key`1<object> ourAddedThisKey;
    private static AddThisExpression();
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    private void AddThis(CSharpCodeCompletionContext context, IItemsCollector result, ExpectedType expectedType);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Smart.AddTrueFalse : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    protected virtual void DecorateItems(CSharpCodeCompletionContext context, IReadOnlyCollection`1<ILookupItem> items);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Smart.AddTypeEmptyTypesArrayRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Smart.AddTypeOf : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Smart.ApplicableMethodGroups : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    private void AddDelegateItems(CSharpCodeCompletionContext context, IDeclaredType declaredType, ISubstitution substitution, IItemsCollector collector);
    private void TryAddMethodLikeGroup(CSharpCodeCompletionContext context, IDeclaredType declaredType, ISubstitution substitution, IItemsCollector collector, ISymbolInfo info);
    private static void TryAddMethodGroup(string name, ExtensionInstance`1<TMethodLike> methodLike, IItemsCollector result, CSharpCodeCompletionContext context, DeclaredElementInstance`1<IDelegate> getDelegateTypeInstance);
    [CanBeNullAttribute]
internal static IMethodGroupType CreateMethodGroupType(ExtensionInstance`1<TMethodLike> methodLike, CSharpCodeCompletionContext context);
}
public static class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Smart.CodeCompletionSharedDataKeys : object {
    public static Key`1<Dictionary`2<IDeclaredType, IDeclaredType[]>> TypeInheritorsKey;
    public static Key`1<IDeclaredType[]> ProcessedExpectedTypesKey;
    private static CodeCompletionSharedDataKeys();
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Smart.CorellationAndProximityComparer : object {
    private IDictionary`2<ILookupItem, int> myCorellations;
    public CorellationAndProximityComparer(IDictionary`2<ILookupItem, int> corellations);
    public int Compare(ILookupItem x, ILookupItem y);
    private int GetPreferenceClass(IDeclaredElement declaredElement);
    private bool IsLocal(IDeclaredElement element);
    private int GetCorellation(ILookupItem lookupItem);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Smart.CreateExceptionVariable : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    private void TryAddExceptionMembers(CSharpCodeCompletionContext context, IItemsCollector result);
    private void AddExceptionMembers(CSharpCodeCompletionContext context, IItemsCollector result, TailType tailType);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Smart.CreateLambdaExpression : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    public static string CreateLambda;
    private static IEqualityComparer`1<IReadOnlyList`1<IType>> ourSignatureEqualityComparer;
    private static CreateLambdaExpression();
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    private void AddDelegateItems(CSharpCodeCompletionContext context, IDeclaredType declaredType, IDelegate delegateElement, ISubstitution delegateSubstitution, string expectedName, IItemsCollector collector, IList`1<NameRoot> expectedRoots);
    [NotNullAttribute]
private static LookupItem`1<CreateDelegateInfo> GetCreateFunctionForDelegateItem(CreateDelegateInfo createDelegateInfo, IDelegate delegateElement, ISubstitution delegateSubstitution, string presentationPrefix, Func`2<LookupItem`1<CreateDelegateInfo>, ILookupItemBehavior> fGetBehavior, int orderStringPrefix);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Smart.DelegateTypeInEventDeclaration : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    protected virtual bool IncludeDeclaredElement(DeclaredElementInstance declaredElementInstance, CSharpCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Smart.EnumMembersRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    [NotNullAttribute]
private static Key`1<IEnum> ourEnumMemberAdded;
    private static EnumMembersRule();
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    private static void AddEnumMembers(CSharpCodeCompletionContext context, IEnum enumElement, ISubstitution substitution, IItemsCollector collector, TailType tailType, HeadType headType);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(CSharpCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Smart.ExceptionDerivativesInCatchSmart : ExceptionDerivativesInCatchBase {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Smart.FilterCheckedEnumMembersRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    [NotNullAttribute]
private static Key`1<HashSet`1<IField>> ourValuesToRemove;
    private static FilterCheckedEnumMembersRule();
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    private static HashSet`1<IField> CollectAlreadyCheckedValues(IEnum enumType, ISubstitution substitution, IPattern pattern);
    [CompilerGeneratedAttribute]
internal static void <CollectAlreadyCheckedValues>g__CollectFrom|3_0(IPattern p, <>c__DisplayClass3_0& );
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Smart.ItemsFromValueProviders : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Smart.ItemsProviderForSmartCompletableReference : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Smart.NewStatementSmartCompletionType : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    private ICSharpExpectedTypesProvider myExpectedTypesProvider;
    private static Key`1<object> ourOnlyObjectsWereAddedKey;
    private static Key`1<object> ourNoExpectedTypesKey;
    public CompletionMode SupportedCompletionMode { get; }
    public NewStatementSmartCompletionType(ICSharpExpectedTypesProvider expectedTypesProvider);
    private static NewStatementSmartCompletionType();
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    public virtual CompletionMode get_SupportedCompletionMode();
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    public static void AddConstructorItems(CSharpCodeCompletionContext context, IItemsCollector collector, PredefinedType predefinedType, List`1<Pair`2<IType, TailType>> types, ICSharpTreeNode contextNode, IReadOnlyList`1<ExpectedType> expectedTypes, Boolean& allAreObjects, HashSet`1& priorityItems, Boolean& numOfInheritorsExceededThreshold, bool forceRequireInheritors, Nullable`1<int> inheritorsThresold, bool onlyAbstractTypes, bool allowArrayAssignmentToWritableCollections, bool addNew);
    private static bool CreateArrayTypeForCollection(ITypeElement typeElement, IDeclaredType declaredType, ITypeElement genericIList, ITypeElement genericICollection, ITypeElement genericIEnumerable, ITypeElement genericIROList, ITypeElement genericIROCollection, bool allowArrayAssignmentToWriteableCollections, IType& type);
    [NotNullAttribute]
private static IType CreateArrayType(IDeclaredType declaredType, ITypeElement elementWithSubstitution);
    public static void AddInheritors(CSharpCodeCompletionContext context, Nullable`1<int> inheritorsThreshold, JetHashSet`1<IType> allTypes, List`1<IDeclaredType> declaredTypes, PredefinedType predefinedType, ITypeElement genericList, ITypeElement genericIList, ITypeElement genericICollection, ITypeElement genericIEnumerable, ITypeElement genericIROList, ITypeElement genericIROCollection, Boolean& numOfInheritorsExceededThreshold);
    [NotNullAttribute]
public static LookupItem`1<ShortArrayConstructorInfo> CreateShortArrayLookupItem(CSharpCodeCompletionContext context, IType type, bool showNew);
    private static bool ExceedsInheritorThreshold(ITypeElement typeElement, Nullable`1<int> inheritorsThreshold);
    private static bool SuitsByName(JetHashSet`1<string> typeNames, string shortName);
    private static IDeclaredType[] GetInheritors(CSharpCodeCompletionContext context, IDeclaredType x);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(CSharpCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Smart.SmartCompletionOfAttributesQualified : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    protected virtual bool IncludeDeclaredElement(DeclaredElementInstance declaredElementInstance, CSharpCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Smart.SmartCompletionRule : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    private static Key`1<ElementsParametersInfo> ourElementsParametersInfo;
    private static SmartCompletionRule();
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    protected virtual ISymbolTable GetSymbolTable(CSharpCodeCompletionContext context);
    protected virtual bool IncludeDeclaredElement(DeclaredElementInstance declaredElementInstance, CSharpCodeCompletionContext context);
    private static bool MatchesByType(CSharpCodeCompletionContext context, DeclaredElementInstance declaredElementInstance, ExpectedType expectedType, ElementsParametersInfo elementsParametersInfo);
    private static Nullable`1<bool> TryMatchByReturnType(CSharpCodeCompletionContext context, DeclaredElementInstance declaredElementInstance, ExpectedType expectedType);
    public static bool MatchesByModifier(IDeclaredElement declaredElement, ExpectedTypeModifiers expectedTypeModifiers);
    private bool ShouldExclude(IDeclaredElement declaredElement, ExpectedTypeCompletionContext data);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    protected virtual ILookupItem CreateNonTypeLookupItem(CSharpCodeCompletionContext context, DeclaredElementInstance declaredElementInstance, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Smart.SmartCompletionRuleWhereValueIgnored : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    private IReferenceExpression FindReferenceExpression(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    protected virtual bool IncludeDeclaredElement(DeclaredElementInstance declaredElementInstance, CSharpCodeCompletionContext context);
    private TailType FindTailType(CSharpCodeCompletionContext context);
    protected virtual void DecorateItems(CSharpCodeCompletionContext context, IReadOnlyCollection`1<ILookupItem> items);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Smart.SmartTypeInCast : ItemsProviderOfSpecificContextWithSharedData`2<CSharpCodeCompletionContext, Data> {
    protected ICSharpExpectedTypesProvider myExpectedTypesProvider;
    public SmartTypeInCast(ICSharpExpectedTypesProvider expectedTypesProvider);
    protected virtual Data IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector, Data data);
    protected virtual AutocompletionBehaviour GetAutocompletionBehaviour(CSharpCodeCompletionContext context, Data data);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Smart.StaticTypeMembers : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    public EvaluationMode SupportedEvaluationMode { get; }
    public virtual EvaluationMode get_SupportedEvaluationMode();
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    private void AddFieldsAndProperties(CSharpCodeCompletionContext context, ITypeElement element, ISubstitution substitution, IItemsCollector collector, ExpectedIType expectedIType, bool exactTypeMatch, bool inConstantContext);
    protected virtual ILookupItem CreateNonTypeLookupItem(CSharpCodeCompletionContext context, DeclaredElementInstance declaredElementInstance, string name);
    protected virtual bool IncludeDeclaredElement(DeclaredElementInstance declaredElementInstance, CSharpCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Smart.TypeUsageSmartCompletionType : TypeUsageSmartCompletionTypeBase {
    public TypeUsageSmartCompletionType(ICSharpExpectedTypesProvider expectedTypesProvider);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector, Data data);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.Smart.TypeUsageSmartCompletionTypeBase : ItemsProviderOfSpecificContextWithSharedData`2<CSharpCodeCompletionContext, Data> {
    private ICSharpExpectedTypesProvider myExpectedTypesProvider;
    public TypeUsageSmartCompletionTypeBase(ICSharpExpectedTypesProvider expectedTypesProvider);
    protected virtual Data IsAvailable(CSharpCodeCompletionContext context);
    private static bool SkipToken(ITokenNode token);
    private Data GetExpectedTypes(ITreeNode element);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.SoftLookupAfterFloatingPoint : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(CSharpCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.SoftWhereNumericValueExpected : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(CSharpCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.SourceTemplates.MacroExpressionItemProvider : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    private static ICSharpLiteralExpression GetLiteralInMacroAttribute(CSharpCodeCompletionContext context);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.SourceTemplates.SourceTemplateBehavior : PostfixTemplateBehavior {
    private DocumentRange myExpressionRange;
    public SourceTemplateBehavior(SourceTemplateInfo info);
    [NotNullAttribute]
protected virtual ITreeNode ExpandPostfix(PostfixExpressionContext context);
    protected virtual void AfterComplete(ITextControl textControl, ITreeNode node, Suffix suffix);
    [CanBeNullAttribute]
public static Template ExtractTemplateFromExtensionMethod(IMethodDeclaration declaration, string initialExpressionText);
    [CanBeNullAttribute]
public static IDocument GetTemplateDocument(IMethodDeclaration declaration, DocumentOffset& bodyStartOffset);
    private static void UnwrapAllSpecialComments(IMethodDeclaration declaration, IDocument templateDocument, DocumentOffset bodyStartOffset);
    private static void ReplaceTemplateParameterUsages(IMethodDeclaration declaration, IList`1<TemplateField> templateFields, IBlock dummyBlock, TemplateExpansionData expansionData, IDocument templateDocument);
    [NotNullAttribute]
private static List`1<Pair`2<IRangeMarker, IList`1<IDeclaredElement>>> CollectBindableReferences(IBlock scope, IList`1<TemplateField> templateFields);
    private static void WithGreedyMarker(IRangeMarker marker, Action`1<IRangeMarker> action);
    [NotNullAttribute]
private static IList`1<TemplateField> CollectTemplateFields(IMethodDeclaration declaration, string initialExpressionText);
    [NotNullAttribute]
private static IList`1<TemplateField> CreateTemplateFieldsFromParameters(IMethodDeclaration declaration, string initialExpressionText, CodeAnnotationsConfiguration codeAnnotationsConfiguration);
    [NotNullAttribute]
private static IList`1<TemplateField> CreateTemplateFieldsFromMethodDeclaration(IMethod method, CodeAnnotationsConfiguration codeAnnotationsConfiguration);
    [NotNullAttribute]
private static TemplateField CreateTemplateFieldFromAttribute(string name, IAttributeInstance macroAttribute);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.SourceTemplates.SourceTemplateInfo : PostfixTemplateInfo {
    [NotNullAttribute]
private IDeclaredElementPointer`1<IMethod> myTemplateMethodPointer;
    [CanBeNullAttribute]
public IMethod TemplateMethod { get; }
    public SourceTemplateInfo(string text, PostfixExpressionContext expression, IMethod templateMethod);
    public IMethod get_TemplateMethod();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.SourceTemplates.SourceTemplatesProvider : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    [NotNullAttribute]
private SourceTemplatesUsagesCollector myUsagesCollector;
    [NotNullAttribute]
private static Key`1<HashSet`1<IMethod>> ourProcessedItemsKey;
    private static int CurrentVersion;
    public EvaluationMode SupportedEvaluationMode { get; }
    public CompletionMode SupportedCompletionMode { get; }
    public bool IsFinal { get; }
    public SourceTemplatesProvider(SourceTemplatesUsagesCollector usagesCollector);
    private static SourceTemplatesProvider();
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    public virtual EvaluationMode get_SupportedEvaluationMode();
    public virtual CompletionMode get_SupportedCompletionMode();
    public virtual bool get_IsFinal();
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    [CanBeNullAttribute]
private static CSharpPostfixTemplateContext GetPostfixTemplateContext(CodeCompletionContext completionContext);
    private void HideAllSourceTemplates(CSharpCodeCompletionContext context, IItemsCollector collector);
    private void TransformSourceTemplates(CSharpCodeCompletionContext context, CSharpPostfixTemplateContext templateContext, IItemsCollector collector);
    [CanBeNullAttribute]
private static LookupItem`1<SourceTemplateInfo> CreateSourceTemplateItem(IMethod templateMethod, CSharpPostfixExpressionContext expressionContext, HashSet`1<IMethod> processedItems);
    [NotNullAttribute]
private static HashSet`1<IMethod> GetProcessedSourceTemplateMethods(CSharpCodeCompletionContext context);
}
[CounterUsagesCollectorAttribute("16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.SourceTemplates.SourceTemplatesUsagesCollector : CounterUsagesCollector {
    private EventLogGroup myGroup;
    private EventId myPresentedEvent;
    private EventId myExpandedEvent;
    public SourceTemplatesUsagesCollector(FeatureUsageLogger featureUsageLogger);
    public void LogPresented(ISolution solution);
    public void LogExpanded(ISolution solution);
    public virtual EventLogGroup GetGroup();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.SubnamespacesRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.TupleLiteralComponentNameRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    [CanBeNullAttribute]
[PureAttribute]
private static ICSharpExpression GetTupleLikeExpressionByUnnamedComponentValueExpression(ICSharpExpression componentValueExpression, Int32& componentIndex);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.TypePreferenceItemsProvider : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.UnfinishedDeconstructionRule : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    public EvaluationMode SupportedEvaluationMode { get; }
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    [PureAttribute]
[CanBeNullAttribute]
private static ICSharpTreeNode GetReplaceNodeIfInDiscardableContext(CSharpCodeCompletionContext context);
    public virtual EvaluationMode get_SupportedEvaluationMode();
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    [PureAttribute]
private static bool IsVariableDesignationIdentifier(ITreeNode unterminatedContextTreeNode);
    private static void LeaveOnlyTypesAndDiscard(CSharpCodeCompletionContext context, IItemsCollector collector);
    [CanBeNullAttribute]
[PureAttribute]
private static ILookupItem CreateDiscardKeywordIfApplicable(CSharpCodeCompletionContext context, PsiIconManager psiIconManager);
    [CanBeNullAttribute]
[PureAttribute]
private static ILookupItem CreateDiscardKeywordIfApplicable(CSharpCodeCompletionContext context, PsiIconManager psiIconManager, ICSharpTreeNode replaceNode);
    [PureAttribute]
private static bool IsDefinitelyNotDeconstructingAssignmentTupleLiteralArgument(IReference completeableReference);
    [PureAttribute]
private static Nullable`1<bool> CheckTupleForDeconstructingDeclaration(ITupleExpression tupleExpression, ITupleComponent currentTupleComponent);
    [CanBeNullAttribute]
[PureAttribute]
private static ICSharpExpression GetTupleComponentValueFromReferenceNode(ITreeNode treeNode);
    [PureAttribute]
public static bool IsUnfinishedTupleDeconstructionDeclarationName(ITreeNode unterminatedContextTreeNode);
    private static bool ContainingExpressionLooksLikeTupleType(ITokenNode previousToken);
    [PureAttribute]
private static bool IsIsUnfinishedTupleDeconstructionNullableTypeDeclarationName(ITokenNode previousToken);
    [PureAttribute]
private static bool ExpressionLooksLikeTupleTypeUsage(IBinaryExpression binaryExpression);
    [PureAttribute]
private static IArgumentList IsArgumentOfInvocationExpressionFromTheLineAbove(ICSharpArgument argument, bool shouldNotHaveRightParToken);
    [CompilerGeneratedAttribute]
internal static bool <LeaveOnlyTypesAndDiscard>g__IsParameterModifierKeyword|7_0(CSharpCodeCompletionContext context, ILookupItem lookupItem);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.UnitTestCategorySuggestionRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    [CanBeNullAttribute]
private static ICSharpLiteralExpression TryFindLiteralExpressionFromPhysicalTree(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    [NotNullAttribute]
private static TextLookupRanges EvaluateRanges(CSharpCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.UsingNamespaceRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    public bool IsFinal { get; }
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    public virtual bool get_IsFinal();
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    private static bool HasVisibleNestedType(ITypeElement typeElement, IAccessContext accessContext);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Rules.WithInitializerAssignmentRule : CSharpItemsProviderBase`1<CSharpCodeCompletionContext> {
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    private bool AddSmartItems(CSharpCodeCompletionContext context, IItemsCollector collector);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntellisenseSettingsKey", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "AdvancedCCompletionSettingsSettingDescription")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Settings.CSharpAdvancedCodeCompletionSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "InsertLambdaItemAsTemplateSettingDescription")]
public bool InsertLambdaAsTemplate;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "SuggestEncapsulateFieldItemsForFieldsFromBaseClassesSettingDescription")]
public bool EncapsulateFieldsFromBase;
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.Settings.CSharpAdvancedCompletionOptionsProvider : object {
    private static Key ourLambdaAsTemplateKey;
    private static Key ourEncapsulateBaseFieldsKey;
    public string Name { get; }
    public string OrderString { get; }
    private static CSharpAdvancedCompletionOptionsProvider();
    public sealed virtual string get_Name();
    public sealed virtual string get_OrderString();
    public sealed virtual void FillOptions(StackPanel panel, Lifetime lifetime, OptionsSettingsSmartContext smartContext);
    private static void AddBooleanOption(StackPanel panel, OptionsSettingsSmartContext smartContext, string text, Expression`1<Func`2<CSharpAdvancedCodeCompletionSettings, bool>> expression);
    public sealed virtual void SaveSettings(UserDataHolder dataHolder, OptionsSettingsSmartContext smartContext);
    public sealed virtual void RevertSettings(UserDataHolder dataHolder, OptionsSettingsSmartContext smartContext);
}
public static class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.SmartCompletionUtil : object {
    public static DeclaredElementExpectancy IsDeclaredElementExpected(DeclaredElementInstance instance, CSharpCodeCompletionContext context, ElementsParametersInfo elementsParametersInfo);
    private static DeclaredElementExpectancy MatchesByType(DeclaredElementInstance instance, ExpectedType expectedType, ElementsParametersInfo elementsParametersInfo);
    private static Nullable`1<bool> MatchByTypeWithTypeInference(DeclaredElementInstance declaredElementInstance, ExpectedType expectedType);
    [CanBeNullAttribute]
public static IType GetElementType(IDeclaredElement declaredElement);
    [PureAttribute]
public static bool MatchesByModifier(IDeclaredElement declaredElement, ExpectedTypeModifiers expectedTypeModifiers);
    [PureAttribute]
private static bool ShouldExclude(IDeclaredElement declaredElement, ExpectedTypeCompletionContext data);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.CSharp.ZoneMarker : object {
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Filters.Clr.ClrSymbolsFilter : object {
    private Regex myAssemblyNameMask;
    private Regex myNamespaceMask;
    private Regex myTypeMask;
    private Regex myMemberMask;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyNameMaskString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NamespaceMaskString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeMaskString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemberMaskString>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeParametersKind <HasTypeParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ElementKind <ElementKind>k__BackingField;
    public string Name { get; }
    private Regex AssemblyNameMask { get; }
    private Regex NamespaceMask { get; }
    private Regex TypeMask { get; }
    private Regex MemberMask { get; }
    public string AssemblyNameMaskString { get; public set; }
    public string NamespaceMaskString { get; public set; }
    public string TypeMaskString { get; public set; }
    public string MemberMaskString { get; public set; }
    public TypeParametersKind HasTypeParameters { get; public set; }
    public ElementKind ElementKind { get; public set; }
    public ClrSymbolsFilter(ClrSymbolsFilterFactory factory);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    private Regex get_AssemblyNameMask();
    private Regex get_NamespaceMask();
    private Regex get_TypeMask();
    private Regex get_MemberMask();
    [CompilerGeneratedAttribute]
public string get_AssemblyNameMaskString();
    [CompilerGeneratedAttribute]
public void set_AssemblyNameMaskString(string value);
    [CompilerGeneratedAttribute]
public string get_NamespaceMaskString();
    [CompilerGeneratedAttribute]
public void set_NamespaceMaskString(string value);
    [CompilerGeneratedAttribute]
public string get_TypeMaskString();
    [CompilerGeneratedAttribute]
public void set_TypeMaskString(string value);
    [CompilerGeneratedAttribute]
public string get_MemberMaskString();
    [CompilerGeneratedAttribute]
public void set_MemberMaskString(string value);
    [CompilerGeneratedAttribute]
public TypeParametersKind get_HasTypeParameters();
    [CompilerGeneratedAttribute]
public void set_HasTypeParameters(TypeParametersKind value);
    [CompilerGeneratedAttribute]
public ElementKind get_ElementKind();
    [CompilerGeneratedAttribute]
public void set_ElementKind(ElementKind value);
    private static Regex Convert(string expression);
    public sealed virtual bool Matches(IDeclaredElement declaredElement);
    private bool MatchesNamespace(INamespace ns);
    private bool MatchesTypeMember(ITypeMember typeMember);
    private bool MatchesTypeElement(ITypeElement typeElement);
    private bool MatchesTypeElementInternal(ITypeElement typeElement);
    private bool MatchesWildcard(Regex regex, string text);
    public sealed virtual void PersistToXml(XmlDocument doc, XmlElement element);
    private void PersistExpression(XmlDocument doc, XmlElement parentElement, string tagName, string expression);
    public sealed virtual void RestoreFromXml(XmlElement element);
}
[IntellisensePartAttribute("16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Filters.Clr.ClrSymbolsFilterFactory : object {
    private Lifetime myLifetime;
    private ClrSymbolsFilterSettingsViewProviderBase myViewProvider;
    private ICollectionEvents`1<ICustomCompletionFilter> myFilters;
    private bool myChangeBeingHandled;
    public string Name { get; }
    public ICollectionEvents`1<ICustomCompletionFilter> Filters { get; }
    public ClrSymbolsFilterFactory(ISolution solution, ISettingsStore settingsStore, Lifetime lifetime, IThreading threading, ClrSymbolsFilterSettingsViewProviderBase viewProvider);
    public sealed virtual string get_Name();
    public sealed virtual ICustomCompletionFilter CreateNewFilter();
    public sealed virtual ICollectionEvents`1<ICustomCompletionFilter> get_Filters();
    private void OnFilterAddedRemoved(ICollectionEvents`1<ICustomCompletionFilter> filters, IContextBoundSettingsStore settingsStore);
    private void PersistAllFilters(ICollectionEvents`1<ICustomCompletionFilter> filters, IContextBoundSettingsStore settingsStore);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Filters.Clr.ClrSymbolsFilterFactory/<GetAllFilters>d__12")]
private IEnumerable`1<ICustomCompletionFilter> GetAllFilters(string storedFilters);
    public sealed virtual CustomFilterConfigurationPage CreateConfigurationPage(ICustomCompletionFilter filter);
    public sealed virtual ICollectionEvents`1<ICustomCompletionFilter> GetFiltersFromSettingsStore(Lifetime lifetime, IContextBoundSettingsStoreLive settingsStore, IThreading threading);
    public sealed virtual Control CreateDisplayControl(ICustomCompletionFilter filter);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntellisenseSettingsKey", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "CLRSymbolsFilterSettingsSettingDescription")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Filters.Clr.ClrSymbolsFilterFactorySettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "StoredFiltersSettingDescription")]
public string StoredFilters;
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Filters.Clr.ClrSymbolsFilterSettingsViewProviderBase : object {
    [CanBeNullAttribute]
public virtual CustomFilterConfigurationPage CreateConfigurationPage(ClrSymbolsFilter clrSymbolsFilter);
    public virtual Control CreateFilterView(ClrSymbolsFilter clrSymbolsFilter);
}
public enum JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Filters.Clr.ElementKind : Enum {
    public int value__;
    public static ElementKind Namespace;
    public static ElementKind Interface;
    public static ElementKind Struct;
    public static ElementKind Class;
    public static ElementKind Delegate;
    public static ElementKind Field;
    public static ElementKind Property;
    public static ElementKind Method;
    public static ElementKind Event;
    public static ElementKind Any;
}
public enum JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Filters.Clr.TypeParametersKind : Enum {
    public int value__;
    public static TypeParametersKind With;
    public static TypeParametersKind Without;
    public static TypeParametersKind Any;
}
public static class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Filters.ContextMenuServiceExtensions : object {
    public static DependencyProperty DataContextProperty;
    private static ContextMenuServiceExtensions();
    public static object GetDataContext(FrameworkElement obj);
    public static void SetDataContext(FrameworkElement obj, object value);
    private static void DataContextChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Filters.CustomFilterConfigurationWindowComponent : object {
    [CanBeNullAttribute]
public virtual ICustomCompletionFilter ShowDialog(CustomFilterConfigurationPage configurationPage);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Filters.CustomFiltersItemViewModel : object {
    private ICustomFilterFactory myFilterFactory;
    private ICustomCompletionFilter myFilter;
    public ICustomFilterFactory Factory { get; }
    public ICustomCompletionFilter Filter { get; }
    public Control FilterControl { get; }
    public CustomFiltersItemViewModel(ICustomFilterFactory filterFactory, ICustomCompletionFilter filter);
    public ICustomFilterFactory get_Factory();
    public ICustomCompletionFilter get_Filter();
    public Control get_FilterControl();
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Filters.CustomFiltersMenuItemViewModel : ObservableObject {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <Command>k__BackingField;
    public string Name { get; }
    public ICommand Command { get; }
    public CustomFiltersMenuItemViewModel(string name, ICommand command);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public ICommand get_Command();
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Filters.CustomFiltersViewModel : ObservableObject {
    private Dictionary`2<ICustomFilterFactory, ICollectionEvents`1<ICustomCompletionFilter>> myFiltersMap;
    private CustomFiltersItemViewModel mySelectedItem;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <EditCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <RemoveCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <CreateIconId>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <EditIconId>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <RemoveconId>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<CustomFiltersMenuItemViewModel> <MenuItems>k__BackingField;
    public bool IsEnabled { get; }
    public ICommand EditCommand { get; }
    public ICommand RemoveCommand { get; }
    public IconId CreateIconId { get; }
    public IconId EditIconId { get; }
    public IconId RemoveconId { get; }
    public CustomFiltersItemViewModel SelectedItem { get; public set; }
    public IEnumerable`1<CustomFiltersItemViewModel> FilterItems { get; }
    public IEnumerable`1<CustomFiltersMenuItemViewModel> MenuItems { get; private set; }
    public CustomFiltersViewModel(Lifetime lifetime, IThreading threading, OptionsSettingsSmartContext settingsContext);
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public ICommand get_EditCommand();
    [CompilerGeneratedAttribute]
public ICommand get_RemoveCommand();
    [CompilerGeneratedAttribute]
public IconId get_CreateIconId();
    [CompilerGeneratedAttribute]
public IconId get_EditIconId();
    [CompilerGeneratedAttribute]
public IconId get_RemoveconId();
    public CustomFiltersItemViewModel get_SelectedItem();
    public void set_SelectedItem(CustomFiltersItemViewModel value);
    public IEnumerable`1<CustomFiltersItemViewModel> get_FilterItems();
    private void RaiseCollectionChanged();
    [CompilerGeneratedAttribute]
public IEnumerable`1<CustomFiltersMenuItemViewModel> get_MenuItems();
    [CompilerGeneratedAttribute]
private void set_MenuItems(IEnumerable`1<CustomFiltersMenuItemViewModel> value);
    private void AddItemFromFactory(ICustomFilterFactory customFilterFactory);
    private void HandleEditCommand();
    private void HandleRemoveCommand();
    public bool CanEditOrRemove();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(AddRemoveEventArgs`1<ICustomCompletionFilter> _);
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.IntoEditIntellisenseGroup : object {
    public IntoEditIntellisenseGroup(CompleteCodeBasicAction completeCodeBasicAction, CompleteCodeTypeNameAction completeCodeTypeNameAction, CompleteCodeSmartAction completeCodeSmartAction, CompleteStatementActionHandler completeStatementActionHandler, ParameterInfoAction parameterInfoAction);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Protobuf.AutomaticStrategies.ProtobufAutomaticStrategyInImports : object {
    private SettingsScalarEntry myScalarEntry;
    public PsiLanguageType Language { get; }
    public bool ForceHideCompletion { get; }
    public ProtobufAutomaticStrategyInImports(ISettingsStore settingsStore);
    public sealed virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public sealed virtual PsiLanguageType get_Language();
    public sealed virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore boundSettingsStore);
    public sealed virtual bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public sealed virtual bool AcceptsFile(IFile file, ITextControl textControl);
    public sealed virtual bool get_ForceHideCompletion();
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Protobuf.AutomaticStrategies.ProtobufAutomaticStrategyOnDot : object {
    private SettingsScalarEntry myScalarEntry;
    public PsiLanguageType Language { get; }
    public bool ForceHideCompletion { get; }
    public ProtobufAutomaticStrategyOnDot(ISettingsStore settingsStore);
    public sealed virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public sealed virtual PsiLanguageType get_Language();
    public sealed virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore boundSettingsStore);
    public sealed virtual bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public sealed virtual bool AcceptsFile(IFile file, ITextControl textControl);
    public sealed virtual bool get_ForceHideCompletion();
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Protobuf.AutomaticStrategies.ProtobufAutomaticStrategyOnIdentifier : object {
    private SettingsScalarEntry myScalarEntry;
    public PsiLanguageType Language { get; }
    public bool ForceHideCompletion { get; }
    public ProtobufAutomaticStrategyOnIdentifier(ISettingsStore settingsStore);
    public sealed virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public sealed virtual PsiLanguageType get_Language();
    public sealed virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore boundSettingsStore);
    public sealed virtual bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public sealed virtual bool AcceptsFile(IFile file, ITextControl textControl);
    public sealed virtual bool get_ForceHideCompletion();
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Protobuf.AutomaticStrategies.ProtobufAutomaticStrategyOnSpace : object {
    private SettingsScalarEntry myScalarEntry;
    public PsiLanguageType Language { get; }
    public bool ForceHideCompletion { get; }
    public ProtobufAutomaticStrategyOnSpace(ISettingsStore settingsStore);
    public sealed virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public sealed virtual PsiLanguageType get_Language();
    public sealed virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore boundSettingsStore);
    public sealed virtual bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public sealed virtual bool AcceptsFile(IFile file, ITextControl textControl);
    public sealed virtual bool get_ForceHideCompletion();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Protobuf.ProtobufLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Protobuf.ProtobufCodeLookupItemsProvider : ItemsProviderOfSymbolTableBase`1<ProtobufCodeCompletionContext> {
    protected virtual ILookupItem GetElement(ISymbolInfo symbolInfo, ProtobufCodeCompletionContext context);
    private static void MakeKeywordLookupItem(string text, TextLookupRanges ranges, ProtobufCodeCompletionContext context, IItemsCollector collector);
    protected virtual bool AddLookupItems(ProtobufCodeCompletionContext context, IItemsCollector collector);
    protected virtual TextLookupRanges GetDefaultRanges(ProtobufCodeCompletionContext context);
    protected virtual ISymbolTable GetSymbolTable(ProtobufCodeCompletionContext context);
}
[IntellisensePartAttribute("16")]
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Protobuf.ProtobufCompletingCharactersProvider : CompletingCharsProviderBase`1<ProtobufCodeCompletionContext> {
    protected virtual bool IsApplicable(ProtobufCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Protobuf.ProtobufLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Protobuf.ProtobufImportLookupItemsProvider : ItemsProviderOfSpecificContext`1<ProtobufImportCompletionContext> {
    private void ProcessDeclaredElement(ProtobufImportCompletionContext context, IDeclaredElement element, IItemsCollector collector);
    protected virtual bool AddLookupItems(ProtobufImportCompletionContext context, IItemsCollector collector);
    protected virtual TextLookupRanges GetDefaultRanges(ProtobufImportCompletionContext context);
}
[ZoneMarkerAttribute]
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Protobuf.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.KnownLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Rules.EditorBrowsableVisibilityRule : ItemsProviderOfSpecificContext`1<ISpecificCodeCompletionContext> {
    public EvaluationMode SupportedEvaluationMode { get; }
    public bool IsFinal { get; }
    protected virtual bool IsAvailable(ISpecificCodeCompletionContext context);
    public virtual EvaluationMode get_SupportedEvaluationMode();
    public virtual bool get_IsFinal();
    protected virtual void TransformItems(ISpecificCodeCompletionContext context, IItemsCollector collector);
    protected void TransformItems(EditorBrowsableProcessingType editorBrowsableProcessing, IItemsCollector collector);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Sessions.AutomaticCodeCompletionSession : CodeCompletionSession {
    [NotNullAttribute]
private static ILogger ourLogger;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NotNullAttribute]
private IReadOnlyList`1<ValueTuple`2<IAutomaticCodeCompletionStrategy, bool>> myStrategies;
    [CanBeNullAttribute]
private UsageStatistics myUsageStatistics;
    private int myPreCommitDelay;
    private bool myBehaviourWasOverridden;
    [CompilerGeneratedAttribute]
private ITextControlPos <CaretPositionOnStart>k__BackingField;
    private ITextControlPos CaretPositionOnStart { get; }
    [NotNullAttribute]
public IReadOnlyList`1<ValueTuple`2<IAutomaticCodeCompletionStrategy, bool>> Strategies { get; }
    public AutomaticCodeCompletionSession(ITextControl textControl, IReadOnlyList`1<ValueTuple`2<IAutomaticCodeCompletionStrategy, bool>> strategies, CodeCompletionParameters modifier, CodeCompletionSessionManager sessionManager, IntellisenseManager completionManager, Lifetime lifetime, Action`1<ICodeCompletionResult> onSessionFinished, UsageStatistics usageStatistics, int preCommitDelay);
    private static AutomaticCodeCompletionSession();
    [CompilerGeneratedAttribute]
private ITextControlPos get_CaretPositionOnStart();
    public IReadOnlyList`1<ValueTuple`2<IAutomaticCodeCompletionStrategy, bool>> get_Strategies();
    public virtual void ExecuteDelayed(ISettingsStore settingsStore);
    private bool ShowList(ICodeCompletionResult result, IAutomaticCodeCompletionStrategy strategy);
    public virtual bool CaretPositionIsValid();
    public virtual void ExecuteRightAwayAsync();
    [NotNullAttribute]
public sealed virtual Action BeforeCommit();
    public sealed virtual void OnInterrupt();
    protected void DoExecuteCompletionAsync();
    protected virtual void PerformAutoPopup(IAutomaticCodeCompletionStrategy strategy);
    protected void ProcessResult(ICodeCompletionResult result, IAutomaticCodeCompletionStrategy strategy);
    public void ProcessSubsequentTyping(char c, ITextControl textControl);
    public void OverrideBehaviour(AutocompletionBehaviour completionBehaviour, LookupFocusBehaviour focusBehaviour);
    [CompilerGeneratedAttribute]
private void <ExecuteDelayed>b__11_1();
    [CompilerGeneratedAttribute]
private void <OnInterrupt>b__16_0();
}
public abstract class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Sessions.CodeCompletionSession : object {
    [CompilerGeneratedAttribute]
private Lifetime <TextControlAndSessionLifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeCompletionSessionManager <SessionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IntellisenseManager <CompletionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<ICodeCompletionResult> <SessionFinished>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextControl <TextControl>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeCompletionParameters <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Finished>k__BackingField;
    [CompilerGeneratedAttribute]
private CompletionSessionPerformanceData <PerformanceData>k__BackingField;
    protected Lifetime TextControlAndSessionLifetime { get; }
    protected CodeCompletionSessionManager SessionManager { get; }
    protected IntellisenseManager CompletionManager { get; }
    protected Action`1<ICodeCompletionResult> SessionFinished { get; }
    public ITextControl TextControl { get; }
    public CodeCompletionParameters Parameters { get; protected set; }
    public bool Finished { get; protected set; }
    public CompletionSessionPerformanceData PerformanceData { get; public set; }
    public ISolution Solution { get; }
    protected CodeCompletionSession(Lifetime lifetime, ITextControl textControl, CodeCompletionParameters parameters, CodeCompletionSessionManager sessionManager, IntellisenseManager completionManager, Action`1<ICodeCompletionResult> onSessionFinished);
    [CompilerGeneratedAttribute]
protected Lifetime get_TextControlAndSessionLifetime();
    [CompilerGeneratedAttribute]
protected CodeCompletionSessionManager get_SessionManager();
    [CompilerGeneratedAttribute]
protected IntellisenseManager get_CompletionManager();
    [CompilerGeneratedAttribute]
protected Action`1<ICodeCompletionResult> get_SessionFinished();
    [CompilerGeneratedAttribute]
public ITextControl get_TextControl();
    [CompilerGeneratedAttribute]
public CodeCompletionParameters get_Parameters();
    [CompilerGeneratedAttribute]
protected void set_Parameters(CodeCompletionParameters value);
    [CompilerGeneratedAttribute]
public bool get_Finished();
    [CompilerGeneratedAttribute]
protected void set_Finished(bool value);
    [CompilerGeneratedAttribute]
public CompletionSessionPerformanceData get_PerformanceData();
    [CompilerGeneratedAttribute]
public void set_PerformanceData(CompletionSessionPerformanceData value);
    public ISolution get_Solution();
    protected void ShowHint(ICodeCompletionResult result);
    protected void UpdateLookup(ICodeCompletionResult result, Action onItemCompleted, bool forceSoft, ItemsLocation location, ICodeCompletionResult previousResult);
    protected void ShowEmptyLookup(List`1<ISpecificCompletionSorter> sorters);
    protected void ShowLookup(ICodeCompletionResult result, bool initialPrefixIsShortest, Action onItemCompleted, bool forceSoft, bool autmaticCompletion);
    private void OnLookupClosed();
    protected virtual void AdjustLookupOptions(LookupWindowOptions options);
    public virtual bool CaretPositionIsValid();
    [CompilerGeneratedAttribute]
private void <ShowEmptyLookup>b__32_0(object <p0>, EventArgs <p1>);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Sessions.CodeCompletionSessionManager : object {
    [NotNullAttribute]
private object mySessionSync;
    [NotNullAttribute]
private SequentialLifetimes mySessionLifetimes;
    [CanBeNullAttribute]
private CodeCompletionSession modreq(System.Runtime.CompilerServices.IsVolatile) myCurrentSession;
    private ISettingsStore mySettingsStore;
    private ILookupWindowManager myLookupWindowManager;
    [NotNullAttribute]
protected SynchronizationPoints mySynchronizationPoints;
    protected IntellisenseManager myCompletionManager;
    [CanBeNullAttribute]
private UsageStatistics myUsageStatistics;
    [NotNullAttribute]
private object myLock;
    private IIntellisenseAvailabilityService myIntellisenseAvailability;
    [NotNullAttribute]
private ICompletionStatisticsManager myStatisticsManager;
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private Action`1<ICodeCompletionResult> SessionFinished;
    private Dictionary`2<CodeCompletionType, CompletionEvaluationScheme> myEvaluationSchemes;
    [CompilerGeneratedAttribute]
private FontsManager <FontsManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IShellLocks <Locks>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<CodeCompletionSessionState> SessionStateChanged;
    public FontsManager FontsManager { get; }
    public IShellLocks Locks { get; }
    public ILookupWindowManager LookupWindowManager { get; }
    public ICompletionStatisticsManager CompletionStatisticsManager { get; }
    public CodeCompletionSession CurrentSession { get; }
    public CodeCompletionSessionManager(Lifetime componentLifetime, IShellLocks locks, SynchronizationPoints synchronizationPoints, IntellisenseManager completionManager, ISettingsStore settingsStore, ILookupWindowManager lookupWindowManager, TextControlTypingHandlers typingHandlers, FontsManager fontsManager, IIntellisenseAvailabilityService intellisenseAvailability, ICompletionStatisticsManager statisticsManager, UsageStatistics usageStatistics);
    [CompilerGeneratedAttribute]
public void add_SessionFinished(Action`1<ICodeCompletionResult> value);
    [CompilerGeneratedAttribute]
public void remove_SessionFinished(Action`1<ICodeCompletionResult> value);
    protected virtual void SubscribeTypingEvents(Lifetime componentLifetime, TextControlTypingHandlers typingHandlers);
    [CompilerGeneratedAttribute]
public FontsManager get_FontsManager();
    [CompilerGeneratedAttribute]
public IShellLocks get_Locks();
    public ILookupWindowManager get_LookupWindowManager();
    public ICompletionStatisticsManager get_CompletionStatisticsManager();
    [CompilerGeneratedAttribute]
public sealed virtual void add_SessionStateChanged(Action`1<CodeCompletionSessionState> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SessionStateChanged(Action`1<CodeCompletionSessionState> value);
    public sealed virtual void FireSessionStateChanged(CodeCompletionSessionState state);
    public sealed virtual bool IsAutomaticCompletionAvailable(ITextControl textControl);
    public sealed virtual EvaluationMode GetPrimaryEvaluationMode(CodeCompletionType codeCompletionType);
    [NotNullAttribute]
public virtual CompletionEvaluationStep[] GetCompletionEvaluationSteps(CodeCompletionParameters codeCompletionParameters, ICodeCompletionResult previousResult);
    public static CodeCompletionSessionManager GetInstance(ISolution solution);
    public sealed virtual void ReRunSession(ITextControl textControl, ISolution solution, LookupFocusBehaviour focusBehaviour);
    private bool ExecuteNewSession(string reason, Func`2<Lifetime, TSession> createSessionFunc, Func`2<TSession, bool> executeSessionFunc);
    public CodeCompletionSession get_CurrentSession();
    public sealed virtual void TryStartAutomaticCompletion(ITextControl textControl, char c);
    protected virtual void FireNoAutoPopupTriggered(ITextControl textControl);
    private void Type(IReadonlyTypingContext typingContext);
    public sealed virtual void ExecuteAutoCompletion(ITextControl textControl, ISolution solution, Expression`1<Func`2<TKeyClass, AutopopupType>> lambdaexpression);
    protected void OnSessionFinished(CodeCompletionParameters codeCompletionParameters, ICodeCompletionResult previousResult, ITextControl textControl, Action onItemCompleted, LookupReplaceBehaviour replaceBehaviour, bool forceDoNotAutocomplete);
    public void StartAutomaticCompletion(ITextControl textControl, IReadOnlyList`1<ValueTuple`2<IAutomaticCodeCompletionStrategy, bool>> strategies);
    protected virtual AutomaticCodeCompletionSession CreateAutoCompletionSession(ITextControl textControl, IReadOnlyList`1<ValueTuple`2<IAutomaticCodeCompletionStrategy, bool>> strategies, CodeCompletionParameters codeCompletionParameters, Lifetime lifetime, int preCommitDelay, Action`1<ICodeCompletionResult> onSessionFinished, IntellisenseManager completionManager, UsageStatistics usageStatistics);
    public sealed virtual bool ExecuteManualCompletion(CodeCompletionType codeCompletionType, ITextControl textControl, ISolution solution, Action onItemCompleted, EvaluationMode evaluationMode, AutocompletionBehaviour autocompletionBehaviourInitial, LookupReplaceBehaviour replaceBehaviour, LookupFocusBehaviour lookupFocusBehaviour, bool forceDoNotAutocomplete, bool forceSingleCompletion, ICodeCompletionResult previousResult, bool rescheduleOnInterrupt, bool calculateContexts, bool forceAutomatic, bool isExecutingAdditionalStep);
    protected virtual ManualCodeCompletionSession CreateManualCodeCompletionSession(ITextControl textControl, Action onItemCompleted, LookupReplaceBehaviour replaceBehaviour, bool forceDoNotAutocomplete, bool rescheduleOnInterrupt, Lifetime lifetime, CodeCompletionParameters parameters, ISettingsStore settingsStore);
    public sealed virtual bool ManualCompletionCanBeAttachedToCurrentSession(CodeCompletionType codeCompletionType, bool isExecutingAdditionalStep);
    public virtual void SpawnAutomaticCompletion(ITextControl control, PsiLanguageType language);
    public sealed virtual void ExecuteAutomaticCompletionAsync(ITextControl textControl, PsiLanguageType language, AutopopupType autopopupType);
    public sealed virtual bool HasActiveLookup();
    public sealed virtual void HideLookup();
    internal void ClearCompletionTypes();
    public void TerminateSession(CodeCompletionSession session);
    internal void TerminateCurrentSession(CodeCompletionSessionState state);
    public bool IsValid(CodeCompletionSession session);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Sessions.CompletionSessionPerformanceData : object {
    private ILogger myLogger;
    private Stopwatch myTotalTimeStopwatch;
    private Stopwatch myCurrentStopwatch;
    private int mySessionCount;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <PsiLanguages>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <InterruptedAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TotalTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <LookupShownAt>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ItemCompletionTime>k__BackingField;
    private IList`1<CompletionSessionData> mySessions;
    private PerfCounters myStartPerfCounters;
    private PerfCounters myPerfCountersAfterLookupShown;
    public IReadOnlyList`1<string> PsiLanguages { get; private set; }
    public TimeSpan InterruptedAfter { get; private set; }
    public TimeSpan TotalTime { get; private set; }
    public TimeSpan LookupShownAt { get; private set; }
    public TimeSpan ItemCompletionTime { get; private set; }
    public CompletionSessionPerformanceData(ILogger logger);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_PsiLanguages();
    [CompilerGeneratedAttribute]
private void set_PsiLanguages(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_InterruptedAfter();
    [CompilerGeneratedAttribute]
private void set_InterruptedAfter(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_TotalTime();
    [CompilerGeneratedAttribute]
private void set_TotalTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_LookupShownAt();
    [CompilerGeneratedAttribute]
private void set_LookupShownAt(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ItemCompletionTime();
    [CompilerGeneratedAttribute]
private void set_ItemCompletionTime(TimeSpan value);
    public void BeforeAttachSession();
    public void AttachSession(CodeCompletionSession session);
    public void OnSessionInterrupted();
    public void OnLookupShown();
    public void OnBeforeCompleteItem();
    public void OnAfterCompleteItem();
    public void OnSessionTerminated();
    public bool IsReadyToSubmit();
    public virtual string ToString();
    public void OnSessionResultCalculated();
    public ICompletionSessionPerformanceDataEvent ToDataEvent();
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Sessions.ManualCodeCompletionSession : CodeCompletionSession {
    private LookupReplaceBehaviour myReplaceBehaviour;
    private ISettingsStore mySettingsStore;
    private Action myOnItemCompleted;
    private bool myForceDoNotAutocomplete;
    private IShellLocks myLocks;
    private SynchronizationPoints mySynchronizationPoints;
    protected bool myRescheduleOnInterrupt;
    private bool myCompletionIsRunning;
    public ManualCodeCompletionSession(Lifetime lifetime, ITextControl textControl, Action onItemCompleted, CodeCompletionParameters parameters, CodeCompletionSessionManager sessionManager, IntellisenseManager completionManager, ISettingsStore settingsStore, IShellLocks locks, SynchronizationPoints synchronizationPoints, Action`1<ICodeCompletionResult> onSessionFinished, LookupReplaceBehaviour replaceBehaviour, bool forceDoNotAutocomplete, bool rescheduleOnInterrupt);
    protected virtual void AdjustLookupOptions(LookupWindowOptions options);
    public virtual bool ExecuteRightAway(bool async, EvaluationMode evaluationMode, bool calculateContexts);
    private void ProcessResult(ICodeCompletionResult result);
    private void ShowList(ICodeCompletionResult result, Action onItemCompleted, bool forceSoft);
    private bool GetAutoComplete();
    private bool AutoCompleteSingleItem(bool autoComplete, ILookupItem lookupItem, ICodeCompletionResult result);
}
public abstract class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.AutomaticStrategies.XamlAutomaticStrategyOnCharacterBase : object {
    public bool ForceHideCompletion { get; }
    public PsiLanguageType Language { get; }
    public sealed virtual bool get_ForceHideCompletion();
    public abstract virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public abstract virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore boundSettingsStore);
    public virtual bool AcceptsFile(IFile file, ITextControl textControl);
    public virtual bool ProcessSubsequentTyping(char c, ITextControl textControl);
    public sealed virtual PsiLanguageType get_Language();
    [CanBeNullAttribute]
protected IXmlToken FindCurrentToken(IFile file, ITextControl textControl);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.AutomaticStrategies.XamlAutomaticStrategyOnIdentifier : XamlAutomaticStrategyOnCharacterBase {
    private SettingsScalarEntry mySettingsEntry;
    private XamlCodeCompletionManager myManager;
    public XamlAutomaticStrategyOnIdentifier(ISettingsStore settingsStore, XamlCodeCompletionManager manager);
    public virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore boundSettingsStore);
    public virtual bool ProcessSubsequentTyping(char c, ITextControl textControl);
    private static bool IsIdentStart(char c);
    public virtual bool AcceptsFile(IFile file, ITextControl textControl);
}
public abstract class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.AutomaticStrategies.XamlAutomaticStrategyOnListedCharacters : XamlAutomaticStrategyOnCharacterBase {
    protected virtual IEnumerable`1<StartChar> GetStartChars(XmlTokenTypes tokenTypes);
    public virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore boundSettingsStore);
    protected abstract virtual bool GetIntellisenseEnabled(IContextBoundSettingsStore contextBoundSettingsStore);
    public virtual bool AcceptsFile(IFile file, ITextControl textControl);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.AutomaticStrategies.XamlAutomaticStrategyOnPunctuation : XamlAutomaticStrategyOnListedCharacters {
    private SettingsScalarEntry mySettingsScalarEntry;
    private XamlCodeCompletionManager myManager;
    public XamlAutomaticStrategyOnPunctuation(ISettingsStore settingsStore, XamlCodeCompletionManager manager);
    protected virtual bool GetIntellisenseEnabled(IContextBoundSettingsStore contextBoundSettingsStore);
    public virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    protected virtual IEnumerable`1<StartChar> GetStartChars(XmlTokenTypes xml);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.AutomaticStrategies.XamlAutomaticStrategyOnWhitespaceBase : XamlAutomaticStrategyOnCharacterBase {
    private XamlCodeCompletionManager myXamlCodeCompletionManager;
    private SettingsScalarEntry mySettingsScalarEntry;
    public XamlAutomaticStrategyOnWhitespaceBase(XamlCodeCompletionManager xamlCodeCompletionManager, ISettingsStore settingsStore);
    public virtual AutopopupType IsEnabledInSettings(IContextBoundSettingsStore settingsStore, ITextControl textControl);
    public virtual bool AcceptTyping(char c, ITextControl textControl, IContextBoundSettingsStore boundSettingsStore);
    public virtual bool AcceptsFile(IFile file, ITextControl textControl);
    private bool GetIntellisenseEnabled(IContextBoundSettingsStore toDataContext);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlAutoProvider : XamlBasicProviderBase`1<ICompletableReference> {
    protected virtual bool IsAvailable(XamlCodeCompletionContext context);
    protected virtual ICompletableReference GetReference(XamlCodeCompletionContext context);
    protected virtual ISymbolTable GetCompletionSymbolTable(ICompletableReference reference, XamlCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlBasicProvider : XamlBasicProviderBase`1<ICompletableReference> {
    protected virtual bool IsAvailable(XamlCodeCompletionContext context);
    protected virtual ICompletableReference GetReference(XamlCodeCompletionContext context);
}
public abstract class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlBasicProviderBase`1 : XamlItemProvider`1<TReference> {
    protected bool NamespaceExpansion { get; }
    [NotNullAttribute]
protected virtual TextLookupRanges EvaluateRanges(XamlCodeCompletionContext context);
    protected virtual ISymbolTable GetCompletionSymbolTable(TReference reference, XamlCodeCompletionContext context);
    protected virtual bool EvaluateLookupItems(TReference reference, XamlCodeCompletionContext context, IItemsCollector collector, TextLookupRanges ranges);
    private static void EvaluateTemplateSelectorItems(XamlCodeCompletionContext context, IItemsCollector collector, TextLookupRanges ranges);
    private static void EvaluateRelativeSourceSelectorItems(XamlCodeCompletionContext context, IItemsCollector collector, TextLookupRanges ranges);
    private void PatchConstants(XamlCodeCompletionContext context, IItemsCollector collector);
    private void EvaluateParentTypeItem(TReference reference, XamlCodeCompletionContext context, IItemsCollector collector, TextLookupRanges ranges);
    private static void EvaluateValuesLookupItems(IValueReference reference, XamlCodeCompletionContext context, IItemsCollector collector, TextLookupRanges ranges);
    private static void EvaluateModifiers(IModifiersAttribute attribute, XamlCodeCompletionContext context, IItemsCollector collector, TextLookupRanges ranges);
    protected virtual bool get_NamespaceExpansion();
    protected virtual ILookupItem CreateLookupItem(TReference reference, string name, DeclaredElementInstance`1<IDeclaredElement> instance, XamlCodeCompletionContext context, TextLookupRanges ranges);
    protected virtual void DecorateItems(XamlCodeCompletionContext context, IReadOnlyCollection`1<ILookupItem> items);
    internal static void EscapeResourceName(TReference reference, string resourceName, TextLookupItemBase item);
    private static TailType EvaluateTail(IDeclaredElement element, TReference reference);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(XamlCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlConstantValuesProvider : ItemsProviderOfSpecificContext`1<XamlCodeCompletionContext> {
    private static String[] ourDoubleValueItems;
    private static String[] ourXSharedItems;
    private static String[] ourXmlSpaceItems;
    private static XamlConstantValuesProvider();
    protected virtual bool IsAvailable(XamlCodeCompletionContext context);
    protected virtual bool AddLookupItems(XamlCodeCompletionContext context, IItemsCollector collector);
    private static void AddTextLookupItems(XamlCodeCompletionContext context, IItemsCollector collector, DocumentRange replaceRange, IEnumerable`1<string> keywords);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlDoubleRangesProvider : ItemsProviderOfSpecificContext`1<XamlCodeCompletionContext> {
    public CompletionMode SupportedCompletionMode { get; }
    protected virtual TextLookupRanges GetDefaultRanges(XamlCodeCompletionContext context);
    protected virtual bool IsAvailable(XamlCodeCompletionContext context);
    public virtual CompletionMode get_SupportedCompletionMode();
    public static bool IsDoubleBasic(CodeCompletionParameters parameters);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlElementPropertyAutoProvider : XamlElementPropertyProviderBase {
    protected virtual bool IsAvailable(XamlCodeCompletionContext context);
    protected virtual ISymbolTable GetPropertiesSymbolTable(IPropertyReference reference, XamlCodeCompletionContext context);
    private static ISymbolTable AddContainingAttachedMembersProviders(IPropertyReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlElementPropertyBasicProvider : XamlElementPropertyProviderBase {
    protected virtual bool IsAvailable(XamlCodeCompletionContext context);
    protected virtual ISymbolTable GetPropertiesSymbolTable(IPropertyReference reference, XamlCodeCompletionContext context);
}
public abstract class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlElementPropertyProviderBase : XamlPropertyProviderBase {
    protected virtual TextLookupRanges EvaluateRanges(XamlCodeCompletionContext context);
    protected virtual IPropertyReference GetReference(XamlCodeCompletionContext context);
    protected virtual bool EvaluateLookupItems(IPropertyReference reference, XamlCodeCompletionContext context, IItemsCollector collector, TextLookupRanges ranges);
    protected virtual ILookupItem CreateLookupItem(IPropertyReference reference, string name, DeclaredElementInstance`1<IDeclaredElement> instance, XamlCodeCompletionContext context, TextLookupRanges ranges);
    protected virtual ISymbolFilter CreateSettedPropertiesFilter(IPropertyReference reference, XamlCodeCompletionContext context);
    [CanBeNullAttribute]
private static IXamlObjectElement GetParentObjectElement(ITreeNode element);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(XamlCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlElementPropertySmartProvider : XamlElementPropertyProviderBase {
    protected virtual bool IsAvailable(XamlCodeCompletionContext context);
    protected virtual ISymbolTable GetPropertiesSymbolTable(IPropertyReference reference, XamlCodeCompletionContext context);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlEmbeddedResourceLookupItem : TextLookupItemBase {
    private IXamlEmbeddedResource myDeclaredElement;
    private IPsiModule myOwnerNodeModule;
    public string Text { get; }
    public IconId Image { get; }
    public XamlEmbeddedResourceLookupItem(IXamlEmbeddedResource declaredElement, IPsiModule ownerNodeModule);
    public virtual string get_Text();
    public virtual IconId get_Image();
    protected virtual RichText GetDisplayName();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlEmbeddedResourceProvider : ItemsProviderOfSpecificContext`1<XamlCodeCompletionContext> {
    protected virtual bool IsAvailable(XamlCodeCompletionContext context);
    protected virtual bool AddLookupItems(XamlCodeCompletionContext context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlImportProvider : XamlImportProviderBase {
    protected virtual IXmlTypeNameCompletableReference GetReference(XamlCodeCompletionContext context);
    protected virtual ILookupItem CreateLookupItem(IXmlTypeNameCompletableReference reference, string name, DeclaredElementInstance`1<IDeclaredElement> instance, XamlCodeCompletionContext context, TextLookupRanges ranges);
    protected virtual void DecorateItems(XamlCodeCompletionContext context, IReadOnlyCollection`1<ILookupItem> items);
}
internal abstract class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlImportProviderBase : XamlBasicProviderBase`1<IXmlTypeNameCompletableReference> {
    protected virtual bool IsAvailable(XamlCodeCompletionContext context);
    protected virtual ISymbolTable GetCompletionSymbolTable(IXmlTypeNameCompletableReference reference, XamlCodeCompletionContext context);
    [NotNullAttribute]
private static ISymbolTable GetCompletionSymbolTable(IXamlTypeReference reference);
}
public abstract class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlItemProvider`1 : ItemsProviderWithSymbolTable`3<XamlCodeCompletionContext, TReference, IXamlFile> {
    protected bool AddItemsOnTop { get; }
    protected bool NamespaceExpansion { get; }
    protected virtual bool get_AddItemsOnTop();
    protected virtual bool get_NamespaceExpansion();
    protected virtual void AddLookupItemsForDeclaredElement(XamlCodeCompletionContext context, IItemsCollector collector, TextLookupRanges ranges, DeclaredElementInstance`1<IDeclaredElement> instance, TReference reference, string name);
    private string GetNamespaceAndTypeSeparator(TReference reference);
    protected abstract virtual ILookupItem CreateLookupItem(TReference reference, string name, DeclaredElementInstance`1<IDeclaredElement> instance, XamlCodeCompletionContext context, TextLookupRanges ranges);
    protected sealed virtual ILookupItem CreateLookupItem(string name, DeclaredElementInstance`1<IDeclaredElement> instance, XamlCodeCompletionContext context, TextLookupRanges ranges, TailType tailType);
    protected string GetDisplayName(TReference reference, DeclaredElementInstance`1<IDeclaredElement> instance, XamlCodeCompletionContext context, Boolean& isMarkupExtension);
    [NotNullAttribute]
protected DeclaredElementInstance`1<IDeclaredElement> PresentProperty(DeclaredElementInstance`1<IDeclaredElement> instance, XamlCodeCompletionContext context, String& displayName);
    protected void HighlightPropertyFromQualifierType(IXamlReferenceWithToken reference, IEnumerable`1<ILookupItem> items);
    protected bool IsSmartBehaviorForAutoEnabled(XamlCodeCompletionContext context);
    protected bool IsNamespaceAliasExpansionEnabled(XamlCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlMarkupPropertyAutoProvider : XamlMarkupPropertyProviderBase {
    protected virtual bool IsAvailable(XamlCodeCompletionContext context);
    protected virtual ISymbolTable GetPropertiesSymbolTable(IPropertyReference reference, XamlCodeCompletionContext context);
    protected virtual bool EvaluateLookupItems(IPropertyReference reference, XamlCodeCompletionContext context, IItemsCollector collector, TextLookupRanges ranges);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlMarkupPropertyBasicProvider : XamlMarkupPropertyProviderBase {
    protected virtual bool IsAvailable(XamlCodeCompletionContext context);
    protected virtual ISymbolTable GetPropertiesSymbolTable(IPropertyReference reference, XamlCodeCompletionContext context);
}
public abstract class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlMarkupPropertyProviderBase : XamlPropertyProviderBase {
    protected virtual TextLookupRanges EvaluateRanges(XamlCodeCompletionContext context);
    protected virtual bool AddLookupItems(XamlCodeCompletionContext context, IItemsCollector collector);
    protected virtual IPropertyReference GetReference(XamlCodeCompletionContext context);
    protected virtual ILookupItem CreateLookupItem(IPropertyReference reference, string name, DeclaredElementInstance`1<IDeclaredElement> instance, XamlCodeCompletionContext context, TextLookupRanges ranges);
    protected virtual ISymbolFilter CreateSettedPropertiesFilter(IPropertyReference reference, XamlCodeCompletionContext context);
    [CanBeNullAttribute]
private static IAttributeListMarkupValue GetParentArgumentList(ITreeNode element);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(XamlCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlMarkupPropertySmartProvider : XamlMarkupPropertyProviderBase {
    protected virtual bool IsAvailable(XamlCodeCompletionContext context);
    protected virtual ISymbolTable GetPropertiesSymbolTable(IPropertyReference reference, XamlCodeCompletionContext context);
    protected virtual bool EvaluateLookupItems(IPropertyReference reference, XamlCodeCompletionContext context, IItemsCollector collector, TextLookupRanges ranges);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlNameProvider : ItemsProviderOfSpecificContextWithSharedData`2<XamlCodeCompletionContext, Data> {
    public bool IsDynamic { get; }
    public EvaluationMode SupportedEvaluationMode { get; }
    protected virtual Data IsAvailable(XamlCodeCompletionContext context);
    public virtual bool get_IsDynamic();
    public virtual EvaluationMode get_SupportedEvaluationMode();
    protected virtual bool AddLookupItems(XamlCodeCompletionContext context, IItemsCollector collector, Data data);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(XamlCodeCompletionContext context, Data data);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlNamespaceBasicProvider : XamlItemProvider`1<IXamlNamespaceReference> {
    protected virtual bool IsAvailable(XamlCodeCompletionContext context);
    protected virtual TextLookupRanges EvaluateRanges(XamlCodeCompletionContext context);
    protected virtual IXamlNamespaceReference GetReference(XamlCodeCompletionContext context);
    protected virtual ISymbolTable GetCompletionSymbolTable(IXamlNamespaceReference reference, XamlCodeCompletionContext context);
    protected virtual ILookupItem CreateLookupItem(IXamlNamespaceReference reference, string name, DeclaredElementInstance`1<IDeclaredElement> instance, XamlCodeCompletionContext context, TextLookupRanges ranges);
    protected virtual bool EvaluateLookupItems(IXamlNamespaceReference reference, XamlCodeCompletionContext context, IItemsCollector collector, TextLookupRanges ranges);
    private static void CollectNamespaces(IXamlNamespaceReference reference, Action`2<DeclaredElementInstance`1<IDeclaredElement>, string> action);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlPropertyElementDoubleProvider : XamlElementPropertyProviderBase {
    public CompletionMode SupportedCompletionMode { get; }
    protected virtual bool IsAvailable(XamlCodeCompletionContext context);
    public virtual CompletionMode get_SupportedCompletionMode();
    protected virtual TextLookupRanges EvaluateRanges(XamlCodeCompletionContext context);
    protected virtual IPropertyReference GetReference(XamlCodeCompletionContext context);
    protected virtual ISymbolTable GetPropertiesSymbolTable(IPropertyReference reference, XamlCodeCompletionContext context);
    protected virtual ILookupItem CreateLookupItem(IPropertyReference reference, string name, DeclaredElementInstance`1<IDeclaredElement> instance, XamlCodeCompletionContext context, TextLookupRanges ranges);
}
public abstract class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlPropertyProviderBase : XamlItemProvider`1<IPropertyReference> {
    protected bool NamespaceExpansion { get; }
    protected virtual bool get_NamespaceExpansion();
    protected abstract virtual ISymbolTable GetPropertiesSymbolTable(IPropertyReference reference, XamlCodeCompletionContext context);
    protected sealed virtual ISymbolTable GetCompletionSymbolTable(IPropertyReference reference, XamlCodeCompletionContext context);
    [CanBeNullAttribute]
protected abstract virtual ISymbolFilter CreateSettedPropertiesFilter(IPropertyReference reference, XamlCodeCompletionContext context);
    protected virtual void DecorateItems(XamlCodeCompletionContext context, IReadOnlyCollection`1<ILookupItem> items);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlRangesProvider : ItemsProviderOfSpecificContext`1<XamlCodeCompletionContext> {
    protected virtual TextLookupRanges GetDefaultRanges(XamlCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlRelevanceProvider : ItemsProviderOfSpecificContext`1<XamlCodeCompletionContext> {
    protected virtual bool IsAvailable(XamlCodeCompletionContext context);
    protected virtual void TransformItems(XamlCodeCompletionContext context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlSmartProvider : XamlBasicProviderBase`1<ISmartCompletableReference> {
    protected virtual bool IsAvailable(XamlCodeCompletionContext context);
    protected virtual ISmartCompletableReference GetReference(XamlCodeCompletionContext context);
    protected virtual ISymbolTable GetCompletionSymbolTable(ISmartCompletableReference reference, XamlCodeCompletionContext context);
    private static bool AddExtraLookupItems(ISmartCompletableReference reference, XamlCodeCompletionContext context, IItemsCollector collector, TextLookupRanges ranges, bool hasBasic);
    protected virtual bool AddLookupItems(XamlCodeCompletionContext context, IItemsCollector collector);
    private static void AddXKeyMarkupItems(IXmlAttribute attribute, XamlCodeCompletionContext context, IItemsCollector collector);
    private static void AddMarkupLookupItems(XamlCodeCompletionContext context, ITreeNode attributeValue, TextLookupRanges ranges, bool addResource, bool addRelativeSource, bool addType, IItemsCollector collector);
    protected virtual ILookupItem CreateLookupItem(ISmartCompletableReference reference, string name, DeclaredElementInstance`1<IDeclaredElement> instance, XamlCodeCompletionContext context, TextLookupRanges ranges);
    [CompilerGeneratedAttribute]
internal static void <AddMarkupLookupItems>g__AddTop|6_0(TextLookupItemBase item, <>c__DisplayClass6_0& );
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlTagNameAutoProvider : XamlBasicProviderBase`1<ICompletableReference> {
    protected virtual bool IsAvailable(XamlCodeCompletionContext context);
    protected virtual ICompletableReference GetReference(XamlCodeCompletionContext context);
    protected virtual ISymbolTable GetCompletionSymbolTable(ICompletableReference reference, XamlCodeCompletionContext context);
    protected virtual ILookupItem CreateLookupItem(ICompletableReference reference, string name, DeclaredElementInstance`1<IDeclaredElement> instance, XamlCodeCompletionContext context, TextLookupRanges ranges);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(XamlCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlTagNameBasicProvider : XamlBasicProviderBase`1<ICompletableReference> {
    protected virtual bool IsAvailable(XamlCodeCompletionContext context);
    protected virtual ICompletableReference GetReference(XamlCodeCompletionContext context);
    protected virtual ILookupItem CreateLookupItem(ICompletableReference reference, string name, DeclaredElementInstance`1<IDeclaredElement> instance, XamlCodeCompletionContext context, TextLookupRanges ranges);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlTagNameImportProvider : XamlImportProviderBase {
    protected virtual IXmlTypeNameCompletableReference GetReference(XamlCodeCompletionContext context);
    protected virtual ILookupItem CreateLookupItem(IXmlTypeNameCompletableReference reference, string name, DeclaredElementInstance`1<IDeclaredElement> instance, XamlCodeCompletionContext context, TextLookupRanges ranges);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlTagNameSmartProvider : XamlBasicProviderBase`1<ISmartCompletableReference> {
    protected virtual bool IsAvailable(XamlCodeCompletionContext context);
    protected virtual ISmartCompletableReference GetReference(XamlCodeCompletionContext context);
    protected virtual ISymbolTable GetCompletionSymbolTable(ISmartCompletableReference reference, XamlCodeCompletionContext context);
    protected virtual ILookupItem CreateLookupItem(ISmartCompletableReference reference, string name, DeclaredElementInstance`1<IDeclaredElement> instance, XamlCodeCompletionContext context, TextLookupRanges ranges);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlTypeNameCompletionContext : XmlTypeNameCompletionContext {
    public XamlTypeNameCompletionContext(XamlLanguage language, XmlTokenTypes tokenTypes);
    protected virtual bool IsAvailable(XmlCodeCompletionContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ItemsProviders.XamlUseResourceSmartProvider : XamlBasicProviderBase`1<IResourceReference> {
    public CompletionMode SupportedCompletionMode { get; }
    protected bool AddItemsOnTop { get; }
    protected virtual bool IsAvailable(XamlCodeCompletionContext context);
    public virtual CompletionMode get_SupportedCompletionMode();
    protected virtual bool get_AddItemsOnTop();
    protected virtual IResourceReference GetReference(XamlCodeCompletionContext context);
    protected virtual ISymbolTable GetCompletionSymbolTable(IResourceReference reference, XamlCodeCompletionContext context);
    protected virtual ILookupItem CreateLookupItem(IResourceReference reference, string name, DeclaredElementInstance`1<IDeclaredElement> instance, XamlCodeCompletionContext context, TextLookupRanges ranges);
}
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.LookupItems.CreateNewMarkupLookupItem : TextLookupItemBase {
    private bool myCodeCompletion;
    private RichText myPresentationText;
    private XamlCodeCompletionContext myContext;
    public IconId Image { get; }
    public CreateNewMarkupLookupItem(string markupName, XamlCodeCompletionContext context, bool codeCompletion, int order);
    protected virtual RichText GetDisplayName();
    public virtual IconId get_Image();
    protected virtual void OnAfterComplete(ITextControl textControl, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker);
}
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.LookupItems.CreateNewResourceMarkupItem : TextLookupItemBase {
    [CanBeNullAttribute]
private IHotspotExpression myUsageExpression;
    public IconId Image { get; }
    public CreateNewResourceMarkupItem(ITreeNode usageContext);
    protected virtual RichText GetDisplayName();
    public virtual IconId get_Image();
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
}
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.LookupItems.UseResourceLookupItem : XamlDeclaredElementLookupItem`1<ICompletableReference> {
    [NotNullAttribute]
private string myReferenceName;
    [CanBeNullAttribute]
private IHotspotExpression myUsageExpression;
    public UseResourceLookupItem(DeclaredElementInstance`1<IDeclaredElement> declaredElement, string displayName, ITreeNode usageContext, XamlCodeCompletionContext context, TextLookupRanges ranges);
    protected virtual DocumentRange DoReplaceText(ITextControl textControl, DocumentRange replaceRange, string typeInName);
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
}
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.LookupItems.XamlCreateNewEventHandlerLookupItem : CreateNewEventHandlerLookupItem`1<IValueReference> {
    public IconId Image { get; }
    private XamlCreateNewEventHandlerLookupItem(IValueReference reference, IDeclaredType eventType, IDelegate delegate, ITypeDeclaration declaration);
    public virtual IconId get_Image();
    [CanBeNullAttribute]
public static XamlCreateNewEventHandlerLookupItem Create(IValueReference reference);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.LookupItems.XamlDeclaredElementLookupItem`1 : DeclaredElementLookupItem`2<T, IXamlFile> {
    private RichText myDisplayPrefix;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <CustomIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DiscardSuffix>k__BackingField;
    public string Prefix { get; public set; }
    public RichText DisplayPrefix { get; public set; }
    public IconId CustomIcon { get; public set; }
    private bool DiscardSuffix { get; private set; }
    public IconId Image { get; }
    public int Identity { get; }
    public XamlDeclaredElementLookupItem`1(DeclaredElementInstance`1<IDeclaredElement> declaredElement, string displayName, XamlCodeCompletionContext context, TextLookupRanges ranges);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    public RichText get_DisplayPrefix();
    public void set_DisplayPrefix(RichText value);
    [CompilerGeneratedAttribute]
public IconId get_CustomIcon();
    [CompilerGeneratedAttribute]
public void set_CustomIcon(IconId value);
    [CompilerGeneratedAttribute]
private bool get_DiscardSuffix();
    [CompilerGeneratedAttribute]
private void set_DiscardSuffix(bool value);
    public virtual MatchingResult Match(PrefixMatcher prefixMatcher);
    public virtual IconId get_Image();
    protected virtual void DecorateDisplayName(RichText displayName, DeclaredElementInstance preferredDeclaredElement);
    protected virtual DocumentRange DoReplaceText(ITextControl textControl, DocumentRange replaceRange, string typeInName);
    protected virtual bool IsReferenceValid(DocumentRange nameRange, T reference);
    public virtual int get_Identity();
    public virtual void Accept(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
    protected virtual void InsertTailType(ITextControl textControl, ISolution solution, DocumentOffset offset, TailType tailType);
    protected virtual IReference BindReferenceAfterComplete(ITextControl textControl, DocumentRange nameRange, Action`1<IReference> withOldReferenceBeforeComplete);
    protected virtual void PlaybackSuffix(ITextControl textControl, Suffix suffix);
    protected void InsertTextAndFormatNode(ITreeNode treeNode, string textToInsert, Nullable`1<int> caretOffset, ITextControl textControl);
    [CanBeNullAttribute]
private static IReference FixPathReferenceTail(IPathReference reference);
    private void FixInsertedText(IReference reference, ITextControl textControl, bool skipAttributesPresemceCheck);
    private void FixXmlAttribute(IXmlAttribute attribute, ITextControl textControl, Boolean& showCompletion);
    private void FixXmlTag(IXmlTag tag, ITextControl textControl, bool skipAttributesPresenseCheck, Boolean& showAutoCompletion);
    private bool TagShouldHaveNoAttributes(IXmlTag tag);
    protected void PopulateAutoCompletion();
    protected void SetCharsToSkipTypingAssist(string chars);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(ITextControl textControl, DocumentRange nameRange, LookupItemInsertType insertType, Suffix suffix, ISolution solution, bool keepCaretStill);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.LookupItems.XamlMarkupPropertyLookupItem : XamlDeclaredElementLookupItem`1<IPropertyReference> {
    private bool myIsMarkupProperty;
    public IconId Image { get; }
    public XamlMarkupPropertyLookupItem(DeclaredElementInstance`1<IDeclaredElement> declaredElement, string displayName, XamlCodeCompletionContext context, TextLookupRanges ranges, bool isMarkupProperty);
    public virtual IconId get_Image();
    protected virtual IReference BindReferenceAfterComplete(ITextControl textControl, DocumentRange nameRange, Action`1<IReference> withOldReferenceBeforeComplete);
    private void MarkupPropertyCodeCompletion(IMarkupAttribute attribute, ITextControl textControl, DocumentRange nameRange, bool needComma);
    private static bool CalculateNeedComma(ITreeNode anchor);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.LookupItems.XamlNamespaceLookupItem : XamlDeclaredElementLookupItem`1<IXamlNamespaceReference> {
    [CompilerGeneratedAttribute]
private IPsiModule <NamespaceModule>k__BackingField;
    [CanBeNullAttribute]
public IPsiModule NamespaceModule { get; }
    public XamlNamespaceLookupItem(DeclaredElementInstance`1<IDeclaredElement> declaredElementInstance, IPsiModule module, string displayName, XamlCodeCompletionContext context, TextLookupRanges ranges);
    [CompilerGeneratedAttribute]
public IPsiModule get_NamespaceModule();
    protected virtual void DecorateDisplayName(RichText displayName, DeclaredElementInstance preferredDeclaredElement);
    protected virtual void OnAfterComplete(ITextControl textControl, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.LookupItems.XamlTailType : TailType {
    public static TailType Dot;
    public static TailType Colon;
    public static TailType Pipe;
    private XamlTailType(string name);
    private static XamlTailType();
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ReparsedContexts.XamlMarkupPropertyReparsedContext : XamlReparsedCodeCompletionContext {
    private int myShift;
    [CompilerGeneratedAttribute]
private TextLookupRanges <Ranges>k__BackingField;
    public TextLookupRanges Ranges { get; public set; }
    public XamlMarkupPropertyReparsedContext(IFile file, TreeTextRange range, string text, int shift);
    [CompilerGeneratedAttribute]
public TextLookupRanges get_Ranges();
    [CompilerGeneratedAttribute]
public void set_Ranges(TextLookupRanges value);
    protected virtual TreeTextRange GetRangeOfReference(int startOffsetInNewNode);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ReparsedContexts.XamlNamespaceAliasReparsedContext : XamlReparsedCodeCompletionContext {
    public static string CLR_NAMESPACE;
    public static string USING_NAMESPACE;
    private string myReparseText;
    [CompilerGeneratedAttribute]
private TextLookupRanges <Ranges>k__BackingField;
    public TextLookupRanges Ranges { get; public set; }
    public string ReparsePrefix { get; }
    public XamlNamespaceAliasReparsedContext(INamespaceAlias alias, TreeTextRange range);
    [CompilerGeneratedAttribute]
public TextLookupRanges get_Ranges();
    [CompilerGeneratedAttribute]
public void set_Ranges(TextLookupRanges value);
    public string get_ReparsePrefix();
    private static string GetReparseText(ITreeNode context);
    protected virtual TreeTextRange GetRangeOfReference(int startOffsetInNewNode);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ReparsedContexts.XamlPropertyElementReparsedContext : XamlReparsedCodeCompletionContext {
    private int myOffset;
    [CompilerGeneratedAttribute]
private TextLookupRanges <Ranges>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReparsedAsTagName>k__BackingField;
    [CanBeNullAttribute]
public TextLookupRanges Ranges { get; internal set; }
    [NotNullAttribute]
public string ParentHeader { get; }
    public bool ReparsedAsTagName { get; }
    public XamlPropertyElementReparsedContext(IFile file, TreeTextRange range, string parentHeader, bool reparseAsTagName);
    [CompilerGeneratedAttribute]
public TextLookupRanges get_Ranges();
    [CompilerGeneratedAttribute]
internal void set_Ranges(TextLookupRanges value);
    [CompilerGeneratedAttribute]
public string get_ParentHeader();
    [CompilerGeneratedAttribute]
public bool get_ReparsedAsTagName();
    protected virtual TreeTextRange GetRangeOfReference(int startOffsetInNewNode);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ReparsedContexts.XamlReparsedCodeCompletionContext : XmlReparsedCodeCompletionContext {
    public XamlReparsedCodeCompletionContext(IFile file, TreeTextRange range, string newText);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ReparsedContexts.XamlStaticResourceReparsedContext : XamlReparsedCodeCompletionContext {
    private static string ReparseText;
    public XamlStaticResourceReparsedContext(IFile file, TreeTextRange range);
    protected virtual TreeTextRange GetRangeOfReference(int startOffsetInNewNode);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ReparsedContexts.XamlTagNameReparsedContext : XamlReparsedCodeCompletionContext {
    public XamlTagNameReparsedContext(IFile file, TreeTextRange range, string text);
    protected virtual TreeTextRange GetRangeOfReference(int startOffsetInNewNode);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ReparsedContexts.XamlTypeNameReparsedContext : XamlReparsedCodeCompletionContext {
    public XamlTypeNameReparsedContext(IFile file, TreeTextRange range);
    protected virtual TreeTextRange GetRangeOfReference(int startOffsetInNewNode);
}
internal class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ResourceUsageTemplateExpression : object {
    [NotNullAttribute]
private string myDynamicReferenceName;
    private static bool ourDynamicUsedLastTime;
    private ResourceUsageTemplateExpression(string dynamicReferenceName);
    [CanBeNullAttribute]
public static IHotspotExpression TryCreate(ITreeNode usageContext, String& defaultReferenceName);
    public sealed virtual string EvaluateQuickResult(IHotspotContext context);
    public sealed virtual void HandleExpansion(IHotspotContext context);
    public sealed virtual string Serialize();
    public sealed virtual object Clone();
    public sealed virtual HotspotItems GetLookupItems(IHotspotContext context);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntellisenseEnabledSettingsKey", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "OverrideVSIntelliSenseForXAMLSettingDescription")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.Settings.IntellisenseEnabledSettingXaml : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "XAMLXamlFilesSettingDescription")]
public bool IntellisenseEnabled;
}
[SettingsKeyAttribute("JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.AutopopupEnabledSettingsKey", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "XAMLSettingDescription")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.Settings.XamlAutopopupEnabledSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "OnSpaceSettingDescription")]
public AutopopupType OnSpace;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "OnPunctuationSettingDescription")]
public AutopopupType OnPunctuation;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "OnIdentifiersSettingDescription")]
public AutopopupType OnIdentifiers;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.Settings.XamlCodeCompletionManager : LanguageSpecificCodeCompletionManager {
    public PsiLanguageType PsiLanguage { get; }
    public XamlCodeCompletionManager(CodeCompletionSettingsService codeCompletionSettings);
    public virtual SettingsScalarEntry GetSettingsEntry(ISettingsSchema settingsSchema);
    public virtual PsiLanguageType get_PsiLanguage();
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.XamlCodeCompletionContext : XmlCodeCompletionContext {
    [CompilerGeneratedAttribute]
private XamlMarkupPropertyReparsedContext <MarkupPropertyContext>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlNamespaceAliasReparsedContext <NamespaceAliasContext>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlStaticResourceReparsedContext <StaticResourceContext>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlTypeNameReparsedContext <ImportTypeContext>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlPropertyElementReparsedContext <PropertyElementContext>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlTagNameReparsedContext <TagNameContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlTypeCache <TypeCache>k__BackingField;
    [CanBeNullAttribute]
public XamlMarkupPropertyReparsedContext MarkupPropertyContext { get; }
    [CanBeNullAttribute]
public XamlNamespaceAliasReparsedContext NamespaceAliasContext { get; }
    [CanBeNullAttribute]
public XamlStaticResourceReparsedContext StaticResourceContext { get; }
    [CanBeNullAttribute]
public XamlTypeNameReparsedContext ImportTypeContext { get; }
    [CanBeNullAttribute]
public XamlPropertyElementReparsedContext PropertyElementContext { get; }
    [CanBeNullAttribute]
public XamlTagNameReparsedContext TagNameContext { get; }
    [NotNullAttribute]
public IXamlTypeCache TypeCache { get; }
    public string ContextId { get; }
    public XamlCodeCompletionContext(CodeCompletionContext context, TextLookupRanges ranges, XamlReparsedCodeCompletionContext unterminatedContext, XamlMarkupPropertyReparsedContext markupPropertyContext, XamlNamespaceAliasReparsedContext namespaceAliasContext, XamlStaticResourceReparsedContext resourceContext, XamlTypeNameReparsedContext importTypeContext, XamlPropertyElementReparsedContext propertyElementContext, XamlTagNameReparsedContext tagNameContext);
    [CompilerGeneratedAttribute]
public XamlMarkupPropertyReparsedContext get_MarkupPropertyContext();
    [CompilerGeneratedAttribute]
public XamlNamespaceAliasReparsedContext get_NamespaceAliasContext();
    [CompilerGeneratedAttribute]
public XamlStaticResourceReparsedContext get_StaticResourceContext();
    [CompilerGeneratedAttribute]
public XamlTypeNameReparsedContext get_ImportTypeContext();
    [CompilerGeneratedAttribute]
public XamlPropertyElementReparsedContext get_PropertyElementContext();
    [CompilerGeneratedAttribute]
public XamlTagNameReparsedContext get_TagNameContext();
    [CompilerGeneratedAttribute]
public IXamlTypeCache get_TypeCache();
    public TReference GetReferenceUnderCaret();
    public virtual string get_ContextId();
}
[IntellisensePartAttribute("16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.XamlCodeCompletionContextProvider : XmlCodeCompletionContextProvider {
    private XamlCodeCompletionManager myXamlCodeCompletionManager;
    public XamlCodeCompletionContextProvider(XamlCodeCompletionManager xamlCodeCompletionManager);
    protected virtual IXmlFile IsAvailableImpl(CodeCompletionContext context);
    public virtual ISpecificCodeCompletionContext GetCompletionContext(CodeCompletionContext context);
    [CanBeNullAttribute]
private static XamlMarkupPropertyReparsedContext TryReparseAsMarkupProperty(CodeCompletionContext context, ReparsedCodeCompletionContext unterminatedContext);
    [CanBeNullAttribute]
private static XamlNamespaceAliasReparsedContext TryReparseAsNamespaceAlias(CodeCompletionContext context, IXamlAttribute attribute);
    [CanBeNullAttribute]
private static XamlStaticResourceReparsedContext TryReparseStaticResource(CodeCompletionContext context, ITreeNode element, IReference reference);
    [CanBeNullAttribute]
private static XamlTagNameReparsedContext TryReparseTagName(CodeCompletionContext context, ITreeNode element, IReference reference);
    [CanBeNullAttribute]
private static XamlPropertyElementReparsedContext TryReparsePropertyElement(CodeCompletionContext context, IReference reference, XamlReparsedCodeCompletionContext reparsedContext, bool reparseAsTagName);
    private static bool CheckAttributeValueWithoutQuotesProblem(IXmlToken token);
    private static bool CheckCompletionInPropertyElementProblem(IReference reference);
    [CanBeNullAttribute]
private static T GetContainingNodeWithin(ITreeNode element, ITreeNode borderNode);
    [CanBeNullAttribute]
private static TextLookupRanges BakeTextLookupRanges(CodeCompletionContext context, ITreeNode element, IReference referenceToComplete);
    [CanBeNullAttribute]
private static TextLookupRanges BakeTextLookupRanges(CodeCompletionContext context, XamlReparsedCodeCompletionContext reparsedContext, ITreeNode elementToUse);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[IntellisensePartAttribute("16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.XamlCompletingCharsProvider : CompletingCharsProviderWithSettingOther`1<XamlCodeCompletionContext> {
    protected virtual bool IsApplicable(XamlCodeCompletionContext context);
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.XamlLookupItemRelevance : Enum {
    public ulong value__;
    public static XamlLookupItemRelevance TagFooter;
    public static XamlLookupItemRelevance UseResource;
    public static XamlLookupItemRelevance NewEventHandler;
    public static XamlLookupItemRelevance Item;
    public static XamlLookupItemRelevance ExpandedItem;
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xaml.ZoneMarker : object {
}
public static class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xml.Impl.XmlCompleteTagFooterUtil : object {
    private static IXmlToken GetTagStart1Token(CodeCompletionContext context, IFile file);
    public static void GetTagFooterLookupItems(CodeCompletionContext context, IItemsCollector collector, bool unclosedOnly, bool currentOnly);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xml.Impl.XmlFooterItemsProvider : ItemsProviderOfSpecificContext`1<XmlCodeCompletionContext> {
    protected virtual bool IsAvailable(XmlCodeCompletionContext context);
    protected virtual bool AddLookupItems(XmlCodeCompletionContext context, IItemsCollector collector);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xml.Impl.XmlTypeNameCompletionContext : ItemsProviderOfSpecificContext`1<XmlCodeCompletionContext> {
    private XmlLanguage myLanguage;
    private XmlTokenTypes myTokenTypes;
    public XmlTypeNameCompletionContext(XmlLanguage language, XmlTokenTypes tokenTypes);
    protected virtual bool IsAvailable(XmlCodeCompletionContext context);
    protected virtual bool AddLookupItems(XmlCodeCompletionContext context, IItemsCollector collector);
    private bool EvaluateLookupItems(XmlCodeCompletionContext context, string fqnPrefix, string prefix, IItemsCollector collector, TextLookupRanges ranges);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xml.XmlCodeCompletionContext : SpecificCodeCompletionContext {
    [CompilerGeneratedAttribute]
private XmlReparsedCodeCompletionContext <UnterminatedContext>k__BackingField;
    [CompilerGeneratedAttribute]
private TextLookupRanges <Ranges>k__BackingField;
    [NotNullAttribute]
public XmlReparsedCodeCompletionContext UnterminatedContext { get; }
    [NotNullAttribute]
public TextLookupRanges Ranges { get; }
    [CanBeNullAttribute]
public IReference Reference { get; }
    [CanBeNullAttribute]
public ITreeNode TreeNode { get; }
    public string ContextId { get; }
    public XmlCodeCompletionContext(CodeCompletionContext context, TextLookupRanges ranges, XmlReparsedCodeCompletionContext unterminatedContext);
    [CompilerGeneratedAttribute]
public XmlReparsedCodeCompletionContext get_UnterminatedContext();
    [CompilerGeneratedAttribute]
public TextLookupRanges get_Ranges();
    public IReference get_Reference();
    public ITreeNode get_TreeNode();
    public virtual string get_ContextId();
}
[IntellisensePartAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xml.XmlCodeCompletionContextProvider : CodeCompletionContextProviderBase {
    public virtual bool IsApplicable(CodeCompletionContext context);
    [CanBeNullAttribute]
protected virtual IXmlFile IsAvailableImpl(CodeCompletionContext context);
    [CanBeNullAttribute]
protected virtual XmlReparsedCodeCompletionContext CreateUnterminatedContext(IXmlFile xmlFile, CodeCompletionContext context);
    [CanBeNullAttribute]
protected virtual ISpecificCodeCompletionContext CreateSpecificCompletionContext(CodeCompletionContext context, TextLookupRanges ranges, XmlReparsedCodeCompletionContext unterminatedContext);
    public virtual ISpecificCodeCompletionContext GetCompletionContext(CodeCompletionContext context);
    public static TreeTextRange GetElementRange(ITreeNode element);
}
public class JetBrains.ReSharper.Features.Intellisense.CodeCompletion.Xml.XmlReparsedCodeCompletionContext : ReparsedCodeCompletionContext {
    public XmlReparsedCodeCompletionContext(IFile file, TreeTextRange range, string newText);
    protected virtual IReparseContext GetReparseContext(IFile file, TreeTextRange range);
}
[ActionAttribute("JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "CompleteStatementActionText")]
[VsOverrideActionAttribute("({1496A755-94DE-11D0-8C3F-00C04FC2AAE2}:68)")]
public class JetBrains.ReSharper.Features.Intellisense.CompleteStatement.CompleteStatementActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private static ICompleteStatementActionProvider GetCompleteStatementActionProvider(IDataContext context);
    private static bool AtLeadInWhitespace(IDataContext context);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
    public sealed virtual bool ShouldFallBack(IDataContext context);
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.ReSharper.Features.Intellisense.Menus.IntoEditTextualGroup : object {
    public IntoEditTextualGroup(ExtendSelectionAction extendSelectionAction, ShrinkSelectionAction shrinkSelectionAction, DuplicateTextAction duplicateTextAction, LineCommentAction lineCommentAction, BlockCommentAction blockCommentAction);
}
[OptionsPageAttribute("CompletionAppearance", "Completion Appearance", "JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons/CompletionAppearance")]
public class JetBrains.ReSharper.Features.Intellisense.Options.CompletionAppearancePage : IntelliSenseBasePage {
    public static string PID;
    public CompletionAppearancePage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, ClrLanguagesKnown languagesKnown);
}
public class JetBrains.ReSharper.Features.Intellisense.Options.Converters.LookupItemInsertTypeToStringConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    private LookupItemInsertType ToKeyAction(string item);
    private string KeyActionToString(LookupItemInsertType action);
}
public class JetBrains.ReSharper.Features.Intellisense.Options.Converters.LookupListSortingToStringConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class JetBrains.ReSharper.Features.Intellisense.Options.Converters.SmartBehaviorTypeToStringConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[OptionsPageAttribute("CSharpEditorBehavior", "C#", "JetBrains.ProjectModel.Resources.ProjectModelThemedIcons/CsharpProj")]
public class JetBrains.ReSharper.Features.Intellisense.Options.CSharpEditorBehaviorOptions : SimpleOptionsPage {
    public static string PID;
    public CSharpEditorBehaviorOptions(Lifetime lifetime, IEnableTypingAssistFeatures enabledFeatures, IWindowBranding branding, OptionsSettingsSmartContext optionsSettingsSmartContext);
}
[OptionsPageAttribute("EditorAppearance", "Appearance", "JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/Appearance")]
public class JetBrains.ReSharper.Features.Intellisense.Options.EditorAppearancePage : SimpleOptionsPage {
    [PublicAPIAttribute]
public static string PID;
    public EditorAppearancePage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, IJetActionEditorMarginBehavior actionMarginBehavior, IErrorStripeAvailableLayouts errorStripeAvailableLayouts, HelpSystem helpSystem);
    private static RadioOptionPoint[] GetContextActionsIndicationValues(OptionsSettingsSmartContext optionsSettingsSmartContext, IJetActionEditorMarginBehavior actionMarginBehavior);
}
[OptionsPageAttribute("EditorBehavior", "Behavior", "JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/Behaivior")]
public class JetBrains.ReSharper.Features.Intellisense.Options.EditorBehaviorPage : SimpleOptionsPage {
    [PublicAPIAttribute]
public static string PID;
    public EditorBehaviorPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, ClrLanguagesKnown languages, OptionsPageContext optionsPageContext, IWindowBranding branding);
    private void ChangeStructuralNavigationBehavior(bool newValue, StructuralNavigationBehavior flag);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_3(PropertyChangedEventArgs`1<bool> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_4(PropertyChangedEventArgs`1<bool> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_5(PropertyChangedEventArgs`1<bool> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_6(PropertyChangedEventArgs`1<bool> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_7(PropertyChangedEventArgs`1<bool> args);
}
[OptionsPageAttribute("CompletionAutopopup", "Autopopup", "JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons/IntellisenseAutopopupPage")]
public class JetBrains.ReSharper.Features.Intellisense.Options.IntelliSenseAutopopupPage : IntelliSenseBasePage {
    [UsedImplicitlyAttribute]
public static string PID;
    public IntelliSenseAutopopupPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Intellisense.Options.IntelliSenseAutopopupPage/<GetSpecificIntellisenseItems>d__2")]
private IEnumerable`1<IntelliSenseAutopopupSpecificIntellisenseSetting> GetSpecificIntellisenseItems(Lifetime lifetime, OptionsSettingsSmartContext settings);
    private void RegisterWords(IEnumerable`1<IntelliSenseAutopopupSpecificIntellisenseSetting> mySpecificIntellisenseSettingItems);
}
public abstract class JetBrains.ReSharper.Features.Intellisense.Options.IntelliSenseBasePage : CustomSimpleOptionsPage {
    protected IntelliSenseBasePage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext);
    protected void AddOptionToDependFromIntellisenseEnabled(IOptionEntity target);
    private static RichText GetRichTextForDisabledIntellisenseMessage();
}
[OptionsPageAttribute("IntelliSenseCompletingCharactersPage", "Completing Characters", "JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons/IntellisenseCompletingCharsPage")]
public class JetBrains.ReSharper.Features.Intellisense.Options.IntelliSenseCompletingCharactersPage : CustomSimpleOptionsPage {
    public static string PID;
    public IntelliSenseCompletingCharactersPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Intellisense.Options.IntelliSenseCompletingCharactersPage/<GetSpecificIntellisenseItems>d__2")]
private static IEnumerable`1<IntelliSenseCompletingCharactersSpecificIntellisenseSetting> GetSpecificIntellisenseItems(Lifetime lifetime, OptionsSettingsSmartContext settings);
}
public class JetBrains.ReSharper.Features.Intellisense.Options.IntelliSenseCompletingCharactersSpecificIntellisenseSetting : AAutomation {
    private SettingsKey mySettingsKey;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <CompleteOnSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <NonCompletingSymbols>k__BackingField;
    public string GroupName { get; }
    public IProperty`1<bool> CompleteOnSpace { get; }
    public IProperty`1<string> NonCompletingSymbols { get; }
    public IntelliSenseCompletingCharactersSpecificIntellisenseSetting(Lifetime lifetime, SettingsKey settingsKey, SettingsScalarEntry completeOnSpaceEntry, SettingsScalarEntry nonCompletingSymbolsEntry, OptionsSettingsSmartContext settings);
    public string get_GroupName();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_CompleteOnSpace();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_NonCompletingSymbols();
}
[OptionsPageAttribute("CompletionFilters", "Completion Filters", "JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/Filter")]
public class JetBrains.ReSharper.Features.Intellisense.Options.IntelliSenseFiltersPage : IntelliSenseBasePage {
    [UsedImplicitlyAttribute]
public static string PID;
    private IList`1<IntelliSenseFiltersSpecificIntellisenseSetting> mySpecificIntellisenseSettings;
    public IntelliSenseFiltersPage(Lifetime lifetime, IThreading threading, OptionsSettingsSmartContext optionsSettingsSmartContext);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Intellisense.Options.IntelliSenseFiltersPage/<GetSpecificIntellisenseItems>d__3")]
private static IEnumerable`1<IntelliSenseFiltersSpecificIntellisenseSetting> GetSpecificIntellisenseItems(Lifetime lifetime, OptionsSettingsSmartContext settings);
    private void RegisterWords();
}
[OptionsPageAttribute("IntelliSensePage", "IntelliSense", "JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons/IntellisensePage")]
public class JetBrains.ReSharper.Features.Intellisense.Options.IntelliSensePage : AEmptyOptionsPage {
    public static string PID;
}
[OptionsPageAttribute("ParameterInfo", "Parameter Info", "JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons/ParameterInfoPage")]
public class JetBrains.ReSharper.Features.Intellisense.Options.ParameterInfoPage : IntelliSenseBasePage {
    public static string PID;
    public ParameterInfoPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, IActionManager actionManager);
}
[OptionsPageAttribute("VBEditorBehavior", "VB", "JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/Behaivior")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Intellisense.Options.VBEditorBehaviorPage : SimpleOptionsPage {
    [PublicAPIAttribute]
public static string PID;
    public VBEditorBehaviorPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, ClrLanguagesKnown languages);
}
public class JetBrains.ReSharper.Features.Intellisense.Options.ViewModel.AutomaticCompletionSettignsViewModel : AAutomation {
    private OptionsSettingsSmartContext myOptionsSettingsSmartContext;
    private List`1<IntelliSenseAutopopupSpecificIntellisenseSetting> myAllSettings;
    [CompilerGeneratedAttribute]
private List`1<string> <GroupNames>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckBoxText>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsAutopopupEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabledProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<IntelliSenseAutopopupSpecificIntellisenseSetting> <VisibleSettings>k__BackingField;
    private string mySelectedTab;
    public List`1<string> GroupNames { get; }
    public bool IsIntellisenseEnabled { get; }
    public string CheckBoxText { get; }
    public IProperty`1<bool> IsAutopopupEnabled { get; public set; }
    public IProperty`1<bool> IsEnabledProperty { get; private set; }
    public ObservableCollection`1<IntelliSenseAutopopupSpecificIntellisenseSetting> VisibleSettings { get; }
    public string SelectedTab { get; public set; }
    public AutomaticCompletionSettignsViewModel(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, List`1<IntelliSenseAutopopupSpecificIntellisenseSetting> specificIntellisenseSettingItems);
    [CompilerGeneratedAttribute]
public List`1<string> get_GroupNames();
    public bool get_IsIntellisenseEnabled();
    [CompilerGeneratedAttribute]
public string get_CheckBoxText();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsAutopopupEnabled();
    [CompilerGeneratedAttribute]
public void set_IsAutopopupEnabled(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsEnabledProperty();
    [CompilerGeneratedAttribute]
private void set_IsEnabledProperty(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public ObservableCollection`1<IntelliSenseAutopopupSpecificIntellisenseSetting> get_VisibleSettings();
    public string get_SelectedTab();
    public void set_SelectedTab(string value);
}
[PublicAPIAttribute]
public class JetBrains.ReSharper.Features.Intellisense.Options.ViewModel.CompletingCharactersSettingsViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private IProperty`1<LookupItemInsertType> <EnterAction>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<LookupItemInsertType> <TabAction>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<IntelliSenseCompletingCharactersSpecificIntellisenseSetting> <SpecificIntellisenseSettings>k__BackingField;
    public IProperty`1<LookupItemInsertType> EnterAction { get; }
    public IProperty`1<LookupItemInsertType> TabAction { get; }
    public IEnumerable`1<LookupItemInsertType> AllEnumValues { get; }
    public ObservableCollection`1<IntelliSenseCompletingCharactersSpecificIntellisenseSetting> SpecificIntellisenseSettings { get; }
    public string EnterKeyLabelText { get; }
    public string TabKeyLabelText { get; }
    public string LanguageLabelText { get; }
    public string CompleteOnSpaceLabelText { get; }
    public string DoNotCompleteOnLabelText { get; }
    public CompletingCharactersSettingsViewModel(IEnumerable`1<IntelliSenseCompletingCharactersSpecificIntellisenseSetting> specificIntellisenseSettings, IProperty`1<LookupItemInsertType> enterAction, IProperty`1<LookupItemInsertType> tabAction);
    [CompilerGeneratedAttribute]
public IProperty`1<LookupItemInsertType> get_EnterAction();
    [CompilerGeneratedAttribute]
public IProperty`1<LookupItemInsertType> get_TabAction();
    public IEnumerable`1<LookupItemInsertType> get_AllEnumValues();
    [CompilerGeneratedAttribute]
public ObservableCollection`1<IntelliSenseCompletingCharactersSpecificIntellisenseSetting> get_SpecificIntellisenseSettings();
    public string get_EnterKeyLabelText();
    public string get_TabKeyLabelText();
    public string get_LanguageLabelText();
    public string get_CompleteOnSpaceLabelText();
    public string get_DoNotCompleteOnLabelText();
}
public class JetBrains.ReSharper.Features.Intellisense.Options.ViewModel.CompletionAppearanceLookupHeightViewModel : ObservableObject {
    private string myRowsSuffix;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <LookupHeightProperty>k__BackingField;
    public IProperty`1<int> LookupHeightProperty { get; }
    public string RowsSuffix { get; public set; }
    public CompletionAppearanceLookupHeightViewModel(Lifetime lifetime, IProperty`1<int> lookupHeightProperty);
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_LookupHeightProperty();
    public string get_RowsSuffix();
    public void set_RowsSuffix(string value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0();
}
public class JetBrains.ReSharper.Features.Intellisense.Options.ViewModel.CompletionFiltersSettingsViewModel : ObservableObject {
    private IEnumerable`1<IntelliSenseFiltersSpecificIntellisenseSetting> myAllSettings;
    private string mySelectedTab;
    [CompilerGeneratedAttribute]
private OptionsSettingsSmartContext <OptionsSettingsSmartContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<IntelliSenseFiltersSpecificIntellisenseSetting> <VisibleSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <GroupNames>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <EnableFiltersProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ShowFiltersProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <PersistFilterStateProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private CustomFiltersViewModel <CustomFiltersViewModel>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <MakeOffCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <MakeIncludeCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <MakeExcludeCommand>k__BackingField;
    public OptionsSettingsSmartContext OptionsSettingsSmartContext { get; }
    public ObservableCollection`1<IntelliSenseFiltersSpecificIntellisenseSetting> VisibleSettings { get; }
    public List`1<string> GroupNames { get; }
    public IProperty`1<bool> EnableFiltersProperty { get; public set; }
    public IProperty`1<bool> ShowFiltersProperty { get; public set; }
    public IProperty`1<bool> PersistFilterStateProperty { get; public set; }
    public string SelectedTab { get; public set; }
    public bool FiltersListEnabled { get; }
    public CustomFiltersViewModel CustomFiltersViewModel { get; }
    public ICommand MakeOffCommand { get; }
    public ICommand MakeIncludeCommand { get; }
    public ICommand MakeExcludeCommand { get; }
    public CompletionFiltersSettingsViewModel(Lifetime lifetime, IThreading threading, IEnumerable`1<IntelliSenseFiltersSpecificIntellisenseSetting> settings, IProperty`1<bool> enableFiltersProperty, IProperty`1<bool> showFiltersProperty, IProperty`1<bool> persistFilterStateProperty, OptionsSettingsSmartContext optionsSettingsSmartContext);
    [CompilerGeneratedAttribute]
public OptionsSettingsSmartContext get_OptionsSettingsSmartContext();
    [CompilerGeneratedAttribute]
public ObservableCollection`1<IntelliSenseFiltersSpecificIntellisenseSetting> get_VisibleSettings();
    [CompilerGeneratedAttribute]
public List`1<string> get_GroupNames();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_EnableFiltersProperty();
    [CompilerGeneratedAttribute]
public void set_EnableFiltersProperty(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ShowFiltersProperty();
    [CompilerGeneratedAttribute]
public void set_ShowFiltersProperty(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_PersistFilterStateProperty();
    [CompilerGeneratedAttribute]
public void set_PersistFilterStateProperty(IProperty`1<bool> value);
    public string get_SelectedTab();
    public void set_SelectedTab(string value);
    public bool get_FiltersListEnabled();
    [CompilerGeneratedAttribute]
public CustomFiltersViewModel get_CustomFiltersViewModel();
    [CompilerGeneratedAttribute]
public ICommand get_MakeOffCommand();
    [CompilerGeneratedAttribute]
public ICommand get_MakeIncludeCommand();
    [CompilerGeneratedAttribute]
public ICommand get_MakeExcludeCommand();
    private void SetStateForSelection(CompletionListFilterState state);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_1();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_2();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_3();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_4();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_5();
}
public class JetBrains.ReSharper.Features.Intellisense.Options.ViewModel.CompletionPerformanceViewModel : ObservableObject {
    [CompilerGeneratedAttribute]
private IProperty`1<int> <DelayProperty>k__BackingField;
    public IProperty`1<int> DelayProperty { get; }
    public CompletionPerformanceViewModel(IProperty`1<int> delayProperty);
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_DelayProperty();
}
public class JetBrains.ReSharper.Features.Intellisense.Options.ViewModel.IntelliSenseAutopopupSpecificIntellisenseSetting : object {
    private SettingsKey myChildKey;
    private SettingsEntry mySettingsEntry;
    [CompilerGeneratedAttribute]
private bool <ShowGroup>k__BackingField;
    private IProperty`1<AutopopupType> myType;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private bool ShowGroup { get; public set; }
    public string GroupName { get; }
    [UsedImplicitlyAttribute]
public string Description { get; }
    public IProperty`1<AutopopupType> Type { get; public set; }
    [UsedImplicitlyAttribute]
public string TypeString { get; public set; }
    public IEnumerable`1<string> AllEnumValues { get; }
    public IntelliSenseAutopopupSpecificIntellisenseSetting(Lifetime lifetime, SettingsKey childKey, SettingsScalarEntry settingsEntry, OptionsSettingsSmartContext settings);
    [CompilerGeneratedAttribute]
private bool get_ShowGroup();
    [CompilerGeneratedAttribute]
public void set_ShowGroup(bool value);
    public string get_GroupName();
    public string get_Description();
    public IProperty`1<AutopopupType> get_Type();
    public void set_Type(IProperty`1<AutopopupType> value);
    public string get_TypeString();
    public void set_TypeString(string value);
    public IEnumerable`1<string> get_AllEnumValues();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public static string TypeToString(AutopopupType type);
    private static AutopopupType TypeToString(string str);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0();
}
public class JetBrains.ReSharper.Features.Intellisense.Options.ViewModel.IntelliSenseFiltersSpecificIntellisenseSetting : object {
    private SettingsKey myChildKey;
    private SettingsEntry mySettingsEntry;
    [CompilerGeneratedAttribute]
private bool <ShowGroup>k__BackingField;
    private IProperty`1<CompletionListFilterState> myState;
    [CompilerGeneratedAttribute]
private bool <IsSelected>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private bool ShowGroup { get; public set; }
    public string GroupName { get; }
    [UsedImplicitlyAttribute]
public string Description { get; }
    public IProperty`1<CompletionListFilterState> State { get; public set; }
    [UsedImplicitlyAttribute]
public string StateString { get; public set; }
    public bool IsSelected { get; public set; }
    [UsedImplicitlyAttribute]
public IEnumerable`1<string> AllEnumValues { get; }
    public IntelliSenseFiltersSpecificIntellisenseSetting(Lifetime lifetime, SettingsKey childKey, SettingsScalarEntry settingsEntry, OptionsSettingsSmartContext settings);
    [CompilerGeneratedAttribute]
private bool get_ShowGroup();
    [CompilerGeneratedAttribute]
public void set_ShowGroup(bool value);
    public string get_GroupName();
    public string get_Description();
    public IProperty`1<CompletionListFilterState> get_State();
    public void set_State(IProperty`1<CompletionListFilterState> value);
    public string get_StateString();
    public void set_StateString(string value);
    [CompilerGeneratedAttribute]
public bool get_IsSelected();
    [CompilerGeneratedAttribute]
public void set_IsSelected(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public IEnumerable`1<string> get_AllEnumValues();
    private static string StateToString(CompletionListFilterState state);
    private static CompletionListFilterState StringToState(string str);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0();
}
public class JetBrains.ReSharper.Features.Intellisense.Options.ViewModel.ParameterInfoAutopopupViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <AutopopupOnProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <AutopopupDelayProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabledProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Caption>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Suffix>k__BackingField;
    [UsedImplicitlyAttribute]
public IProperty`1<bool> AutopopupOnProperty { get; public set; }
    [UsedImplicitlyAttribute]
public IProperty`1<int> AutopopupDelayProperty { get; public set; }
    [UsedImplicitlyAttribute]
public IProperty`1<bool> IsEnabledProperty { get; private set; }
    [UsedImplicitlyAttribute]
public string Caption { get; private set; }
    [UsedImplicitlyAttribute]
public string Suffix { get; private set; }
    public ParameterInfoAutopopupViewModel(IProperty`1<bool> autopopupOnProperty, IProperty`1<int> autopopupDelayProperty, string caption, string suffix);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_AutopopupOnProperty();
    [CompilerGeneratedAttribute]
public void set_AutopopupOnProperty(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_AutopopupDelayProperty();
    [CompilerGeneratedAttribute]
public void set_AutopopupDelayProperty(IProperty`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsEnabledProperty();
    [CompilerGeneratedAttribute]
private void set_IsEnabledProperty(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Caption();
    [CompilerGeneratedAttribute]
private void set_Caption(string value);
    [CompilerGeneratedAttribute]
public string get_Suffix();
    [CompilerGeneratedAttribute]
private void set_Suffix(string value);
}
public class JetBrains.ReSharper.Features.Intellisense.Options.ViewModel.TwoPropertiesWithIntValueViewModel : ObservableObject {
    private IProperty`1<int> myKeywordCompletionMinLengthProperty;
    [CompilerGeneratedAttribute]
private string <MajorPropertyText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinorPropertyText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinorPropertySuffixText>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <KeywordCompletionEnabledProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabledProperty>k__BackingField;
    public string MajorPropertyText { get; }
    public string MinorPropertyText { get; }
    public string MinorPropertySuffixText { get; }
    public IProperty`1<bool> KeywordCompletionEnabledProperty { get; public set; }
    public int KeywordCompletionMinLength { get; public set; }
    public bool MinLengthEditChecked { get; public set; }
    public IProperty`1<bool> IsEnabledProperty { get; }
    public TwoPropertiesWithIntValueViewModel(IProperty`1<bool> keywordCompletionEnabledProperty, IProperty`1<int> keywordCompletionMinLengthProperty, string majorPropertyText, string minorPropertyText, string minorPropertySuffixText);
    [CompilerGeneratedAttribute]
public string get_MajorPropertyText();
    [CompilerGeneratedAttribute]
public string get_MinorPropertyText();
    [CompilerGeneratedAttribute]
public string get_MinorPropertySuffixText();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_KeywordCompletionEnabledProperty();
    [CompilerGeneratedAttribute]
public void set_KeywordCompletionEnabledProperty(IProperty`1<bool> value);
    public int get_KeywordCompletionMinLength();
    public void set_KeywordCompletionMinLength(int value);
    public bool get_MinLengthEditChecked();
    public void set_MinLengthEditChecked(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsEnabledProperty();
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Features.Intellisense.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string AccessorParameter_Text { get; }
    public static string AddExceptionVariableToTheCatchClause { get; }
    public static string AdvancedCCompletionSettingsSettingDescription { get; }
    public static string AliasFor_TypeIn__Text { get; }
    public static string AllSettingDescription { get; }
    public static string AppearanceOptionPageTitle { get; }
    public static string AttributeSettingDescription { get; }
    public static string AutopopupOptionPageTitle { get; }
    public static string BehaviorOptionPageTitle { get; }
    public static string BinaryValue__Text { get; }
    public static string ClassesSettingDescription { get; }
    public static string CLRSymbolsFilterSettingsSettingDescription { get; }
    public static string CombinationOfFlags_Text { get; }
    public static string CommentWithBlockCommentActionText { get; }
    public static string CommentWithLineCommentActionText { get; }
    public static string CompleteOnSpaceSettingDescription { get; }
    public static string CompleteOnSpace_Text { get; }
    public static string CompleteStatementActionText { get; }
    public static string CompleteSymbolActionText { get; }
    public static string CompletingCharactersOptionPageTitle { get; }
    public static string CompletionAppearanceOptionPageTitle { get; }
    public static string CompletionFiltersOptionPageTitle { get; }
    public static string COptionPageTitle { get; }
    public static string CreateLocalFunctionPrefix { get; }
    public static string CreateMethodPrefix { get; }
    public static string CSettingDescription { get; }
    public static string DelegatesSettingDescription { get; }
    public static string DeleteTextFromPreviousWordHumpToTheCaretActionText { get; }
    public static string DeleteTextFromStartOfWordToTheCaretActionText { get; }
    public static string DeleteTextFromTheCaretToNextWordHumpActionText { get; }
    public static string DeleteTextFromTheCaretToTheEndOfTheWordActionText { get; }
    public static string DoNotCompleteOn_Text { get; }
    public static string DuplicateTextActionText { get; }
    public static string EnterActionSettingDescription { get; }
    public static string EnterKey_Text { get; }
    public static string EnumsSettingDescription { get; }
    public static string EventsSettingDescription { get; }
    public static string ExceptionVariable_Text { get; }
    public static string ExtendSelectionToNextWordActionText { get; }
    public static string ExtendSelectionToNextWordHumpActionText { get; }
    public static string ExtendSelectionToPreviousWordHumpActionText { get; }
    public static string ExtendSelectionToPrevWordActionText { get; }
    public static string ExtensionMethodsSettingDescription { get; }
    public static string ExtensionMethods_Text { get; }
    public static string FieldsSettingDescription { get; }
    public static string FixedPointerVariable_Text { get; }
    public static string ForeachIterationVariable_Text { get; }
    public static string ForLoopVariable_Text { get; }
    public static string GotoNextWordActionText { get; }
    public static string GoToNextWordHumpActionText { get; }
    public static string GoToPreviousWordHumpActionText { get; }
    public static string GotoPrevWordActionText { get; }
    public static string HexadecimalValue__Text { get; }
    public static string ImportSymbolActionText { get; }
    public static string InsertLambdaItemAsTemplateSettingDescription { get; }
    public static string Inserts_Text { get; }
    public static string IntelliSenseOptionPageTitle { get; }
    public static string InterfacesSettingDescription { get; }
    public static string InternalSettingDescription { get; }
    public static string InvariantCulture_Text { get; }
    public static string Is_Text { get; }
    public static string LabelFor_Statement_Text { get; }
    public static string Language_Text { get; }
    public static string LocalConstant_Text { get; }
    public static string LocalVariable_Text { get; }
    public static string MemberKindInContainerKind_Text { get; }
    public static string KeywordsSettingDescription { get; }
    public static string LocalVariablesSettingDescription { get; }
    public static string MemberOfEnum_Text { get; }
    public static string MemberOfFlagsEnum_Text { get; }
    public static string MethodsSettingDescription { get; }
    public static string MSBuildSettingDescription { get; }
    public static string NamespaceAlias_Text { get; }
    public static string NamespacesSettingDescription { get; }
    public static string NAntSettingDescription { get; }
    public static string NonCompletingCharactersSettingDescription { get; }
    public static string OnIdentifiersSettingDescription { get; }
    public static string OnPunctuationSettingDescription { get; }
    public static string OnSpaceSettingDescription { get; }
    public static string OverrideVSIntelliSenseForMSBuildSettingDescription { get; }
    public static string OverrideVSIntelliSenseForNAntSettingDescription { get; }
    public static string OverrideVSIntelliSenseForXAMLSettingDescription { get; }
    public static string OverrideVSIntellisenseForXmlSettingDescription { get; }
    public static string ParameterInfoOptionPageTitle { get; }
    public static string ParameterOfOwner_Text { get; }
    public static string ParametersSettingDescription { get; }
    public static string PatternVariable_Text { get; }
    public static string PreviewInDifferentCultures_Text { get; }
    public static string PrivateSettingDescription { get; }
    public static string ProjectsAssembliesAliased_Text { get; }
    public static string PropertiesSettingDescription { get; }
    public static string PropertyOfAnonymousType_Text { get; }
    public static string ProtectedSettingDescription { get; }
    public static string PublicSettingDescription { get; }
    public static string Replaces_Text { get; }
    public static string ResourceVariable_Text { get; }
    public static string SmartCodeCompletionActionText { get; }
    public static string StoredFiltersSettingDescription { get; }
    public static string StructuresSettingDescription { get; }
    public static string SuggestEncapsulateFieldItemsForFieldsFromBaseClassesSettingDescription { get; }
    public static string TabActionSettingDescription { get; }
    public static string TabKey_Text { get; }
    public static string TemplatesSettingDescription { get; }
    public static string Templates_Text { get; }
    public static string TypeAlias_Text { get; }
    public static string TypeParameterOf___Text { get; }
    public static string TypeParameter_Text { get; }
    public static string Type_Text { get; }
    public static string VBOptionPageTitle { get; }
    public static string XAMLSettingDescription { get; }
    public static string XAMLXamlFilesSettingDescription { get; }
    public static string JoinLinesAction_ActionText { get; }
    public static string DisplayCompletionItemsIn_RadioOption_Caption { get; }
    public static string _VisualStudioIntelliSenseFont_Text { get; }
    public static string Text_EditorFont_Text { get; }
    public static string LoopSele_ctionAroundEndsOfAList_BoolOption_Text { get; }
    public static string Show_memberSignatures_BoolOption_Text { get; }
    public static string ShowSymbol_types_BoolOption_Text { get; }
    public static string Show_summary_BoolOption_Text { get; }
    public static string Annotations_ComboEnum_Caption { get; }
    public static string _HighlightNewItems_BoolOption_Text { get; }
    public static string _FilterMembersByEditorBrowsableAttribute_RadioOption_Caption { get; }
    public static string Show_NormalMembersOnly_Text { get; }
    public static string EditorBrowsableStateAlways_Text { get; }
    public static string ShowNormalAnd_AdvancedMembers_Text { get; }
    public static string EditorBrowsableStateAlwaysAndEditorBrowsableState_Text { get; }
    public static string C_Header_Text { get; }
    public static string AnnotateNullabilityOnAfterTypeName_Text { get; }
    public static string PressAfterTypeNameToInsertNotNullCanBeNull_Text { get; }
    public static string AnnotateNullabilityOnAtOtherPositions_Text { get; }
    public static string PressBeforeWithinTypeNameOrBeforeWithin_Text { get; }
    public static string InsertParameterNullCheckOnWhenParameter_Text { get; }
    public static string PressOnNotNullAnnotatedParameterToInsert_Text { get; }
    public static string InsertDocumentationCommentStubOn_Text { get; }
    public static string _WillInsertDocumentationCommentStub_Text { get; }
    public static string Highlightings_Header_Text { get; }
    public static string HighlightCurrent_line_BoolOption_Text { get; }
    public static string Highlight_matchingDelimitersWhenCaret_RadioOption_Caption { get; }
    public static string EditorAppearancePage_ShowMatchingBraceHeaderWithInlayHint_Text { get; }
    public static string AtO_uterSide_Text { get; }
    public static string AtBo_thSides_Text { get; }
    public static string HighlightWith_Text { get; }
    public static string Color_Text { get; }
    public static string Outline_Text { get; }
    public static string ActionIndicator_Header_Text { get; }
    public static string ActionIndicatorIsAnIconThatAppearsIn_Remarks_Text { get; }
    public static string EnableActionBarForActionIndicatorsAnd_BoolOption_Text { get; }
    public static string ActionIndicatorAppearance_RadioOption_Caption { get; }
    public static string MarkerBar_Header_Text { get; }
    public static string MarkerBarDisplaysErrorsWarningsSuggestions_RadioOption_Caption { get; }
    public static string DoNotShowMarkerBar_Text { get; }
    public static string ShowMarkerBarNextToTheVerticalScroll_Text { get; }
    public static string IntegrateMarkerBarIntoTheEnhancedScroll_Text { get; }
    public static string Narrow_Text { get; }
    public static string Medium_Text { get; }
    public static string Wide_Text { get; }
    public static string MarkersWidth_ComboOption_TextPrefix { get; }
    public static string GutterMarks_Header_Text { get; }
    public static string ShowGutterNavigationMarksForImplemented_Text { get; }
    public static string ShowInTheActionBar_Text { get; }
    public static string ShowFloatingOverTheCode_Text { get; }
    public static string DoNotShowActionListIsOnlyAvailableVia_Text { get; }
    public static string TypingAssist_Header_Text { get; }
    public static string UseCamel_Humps_Text { get; }
    public static string AffectsTheWayExtendSelectionAndNext_RichText_Text { get; }
    public static string AutoFormatOn_semicolon_Text { get; }
    public static string ThisSettingDoesNotApplyToC_Text { get; }
    public static string AutoFormatOnClosing_brace_Text { get; }
    public static string AutoFormatOn_Paste_ComboEnum_Caption { get; }
    public static string CorrectCommonLanguageSpecificTypos_Text { get; }
    public static string ForExampleInCTypingFooWouldProduceFoo_Text { get; }
    public static string EnableStructuralRemove_Text { get; }
    public static string RemoveCodeEntityStructurallyOnDelete_Text { get; }
    public static string SmartIndentOnEnter_Text { get; }
    public static string _WillHandleSmartIndentingWhenYouPress_Text { get; }
    public static string InsertVirtualIndentOnEnter_Text { get; }
    public static string _WillInsertVirtualIndentInsteadOfReal_Text { get; }
    public static string EnablingThisOptionWillAlsoEnableVirtual_RichText_Text { get; }
    public static string InsertOnEnterAfter_Text { get; }
    public static string _WillInsertAtAStartOfTheNewLineIfEnter_Text { get; }
    public static string JumpOutsideOfClosingBracketsWithTab_Text { get; }
    public static string _WillJumpOverClosingBracesAndParentheses_Text { get; }
    public static string JumpOutsideOfClosingQuotesBracesInString_Text { get; }
    public static string _WillJumpOverClosingQuotesAndBrackets_Text { get; }
    public static string JumpOutsideOfClosingBracketsWhenTab_Text { get; }
    public static string _WillJumpOverClosingBracketsInCWhen_Text { get; }
    public static string WhenTabIsPressed_ComboEnum_Caption { get; }
    public static string UnindentOnBackspace_ComboEnum_Caption { get; }
    public static string DelimiterCharacters_Header_Text { get; }
    public static string SurroundSelectionOnTypingAQuoteBrace_Text { get; }
    public static string WhenYouTypeAQuoteBraceParenthesisThe_Text { get; }
    public static string AutoInsert_pairBracketsParenthesesAnd_Text { get; }
    public static string JoinConcatenatedStringsOnPlusSignRemoval_Text { get; }
    public static string Auto_insertClosingBrace_ComboEnum_Caption { get; }
    public static string StructuralNavigationCXAML_Header_Text { get; }
    public static string StructuralNavigationCXMLWebLanguages_Header_Text { get; }
    public static string UseTabShiftTabKeysForStructuralNavigation_BoolOption_Text { get; }
    public static string FallBackToTheStandardTabShiftTabKeys_Text_Text { get; }
    public static string TheCaretIsAtIndentingBeforeTheFirst_BoolOption_Text { get; }
    public static string TheCaretIsAtTheEndOfALine_BoolOption_Text { get; }
    public static string ExceptForShiftTabAfterTheLastSymbol_BoolOption_Text { get; }
    public static string ABlockOfCodeIsSelected_BoolOption_Text { get; }
    public static string TheCaretIsInACommentOrStringLiteral_BoolOption_Text { get; }
    public static string NoteSomeOfTheControlsHaveBeenDisabled_Text { get; }
    public static string Di_splayDelegatesInLambdaSyntax_BoolOption_Text { get; }
    public static string Di_splayExtendedInfo_BoolOption_Text { get; }
    public static string Annotations_ComboEnum_Caption2 { get; }
    public static string SwitchBetweenSignaturesWith_RadioOption_Caption { get; }
    public static string Arrow_keys_Text { get; }
    public static string Show_ParameterInfo__Text { get; }
    public static string VisualBasicNET_Header_Text { get; }
    public static string InsertEndConstructsEndSubEndIfNextEtc_BoolOption_Text { get; }
    public static string All_Tab_Title_Text { get; }
    public static string EnableAutomaticIntelliSensePopup_Text { get; }
    public static string PressTabToReplaceHighlightedRange_Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_AccessorParameter_Text();
    public static string get_AddExceptionVariableToTheCatchClause();
    public static string get_AdvancedCCompletionSettingsSettingDescription();
    public static string get_AliasFor_TypeIn__Text();
    public static string get_AllSettingDescription();
    public static string get_AppearanceOptionPageTitle();
    public static string get_AttributeSettingDescription();
    public static string get_AutopopupOptionPageTitle();
    public static string get_BehaviorOptionPageTitle();
    public static string get_BinaryValue__Text();
    public static string get_ClassesSettingDescription();
    public static string get_CLRSymbolsFilterSettingsSettingDescription();
    public static string get_CombinationOfFlags_Text();
    public static string get_CommentWithBlockCommentActionText();
    public static string get_CommentWithLineCommentActionText();
    public static string get_CompleteOnSpaceSettingDescription();
    public static string get_CompleteOnSpace_Text();
    public static string get_CompleteStatementActionText();
    public static string get_CompleteSymbolActionText();
    public static string get_CompletingCharactersOptionPageTitle();
    public static string get_CompletionAppearanceOptionPageTitle();
    public static string get_CompletionFiltersOptionPageTitle();
    public static string get_COptionPageTitle();
    public static string get_CreateLocalFunctionPrefix();
    public static string get_CreateMethodPrefix();
    public static string get_CSettingDescription();
    public static string get_DelegatesSettingDescription();
    public static string get_DeleteTextFromPreviousWordHumpToTheCaretActionText();
    public static string get_DeleteTextFromStartOfWordToTheCaretActionText();
    public static string get_DeleteTextFromTheCaretToNextWordHumpActionText();
    public static string get_DeleteTextFromTheCaretToTheEndOfTheWordActionText();
    public static string get_DoNotCompleteOn_Text();
    public static string get_DuplicateTextActionText();
    public static string get_EnterActionSettingDescription();
    public static string get_EnterKey_Text();
    public static string get_EnumsSettingDescription();
    public static string get_EventsSettingDescription();
    public static string get_ExceptionVariable_Text();
    public static string get_ExtendSelectionToNextWordActionText();
    public static string get_ExtendSelectionToNextWordHumpActionText();
    public static string get_ExtendSelectionToPreviousWordHumpActionText();
    public static string get_ExtendSelectionToPrevWordActionText();
    public static string get_ExtensionMethodsSettingDescription();
    public static string get_ExtensionMethods_Text();
    public static string get_FieldsSettingDescription();
    public static string get_FixedPointerVariable_Text();
    public static string get_ForeachIterationVariable_Text();
    public static string get_ForLoopVariable_Text();
    public static string get_GotoNextWordActionText();
    public static string get_GoToNextWordHumpActionText();
    public static string get_GoToPreviousWordHumpActionText();
    public static string get_GotoPrevWordActionText();
    public static string get_HexadecimalValue__Text();
    public static string get_ImportSymbolActionText();
    public static string get_InsertLambdaItemAsTemplateSettingDescription();
    public static string get_Inserts_Text();
    public static string get_IntelliSenseOptionPageTitle();
    public static string get_InterfacesSettingDescription();
    public static string get_InternalSettingDescription();
    public static string get_InvariantCulture_Text();
    public static string get_Is_Text();
    public static string get_LabelFor_Statement_Text();
    public static string get_Language_Text();
    public static string get_LocalConstant_Text();
    public static string get_LocalVariable_Text();
    public static string get_MemberKindInContainerKind_Text();
    public static string get_KeywordsSettingDescription();
    public static string get_LocalVariablesSettingDescription();
    public static string get_MemberOfEnum_Text();
    public static string get_MemberOfFlagsEnum_Text();
    public static string get_MethodsSettingDescription();
    public static string get_MSBuildSettingDescription();
    public static string get_NamespaceAlias_Text();
    public static string get_NamespacesSettingDescription();
    public static string get_NAntSettingDescription();
    public static string get_NonCompletingCharactersSettingDescription();
    public static string get_OnIdentifiersSettingDescription();
    public static string get_OnPunctuationSettingDescription();
    public static string get_OnSpaceSettingDescription();
    public static string get_OverrideVSIntelliSenseForMSBuildSettingDescription();
    public static string get_OverrideVSIntelliSenseForNAntSettingDescription();
    public static string get_OverrideVSIntelliSenseForXAMLSettingDescription();
    public static string get_OverrideVSIntellisenseForXmlSettingDescription();
    public static string get_ParameterInfoOptionPageTitle();
    public static string get_ParameterOfOwner_Text();
    public static string get_ParametersSettingDescription();
    public static string get_PatternVariable_Text();
    public static string get_PreviewInDifferentCultures_Text();
    public static string get_PrivateSettingDescription();
    public static string get_ProjectsAssembliesAliased_Text();
    public static string get_PropertiesSettingDescription();
    public static string get_PropertyOfAnonymousType_Text();
    public static string get_ProtectedSettingDescription();
    public static string get_PublicSettingDescription();
    public static string get_Replaces_Text();
    public static string get_ResourceVariable_Text();
    public static string get_SmartCodeCompletionActionText();
    public static string get_StoredFiltersSettingDescription();
    public static string get_StructuresSettingDescription();
    public static string get_SuggestEncapsulateFieldItemsForFieldsFromBaseClassesSettingDescription();
    public static string get_TabActionSettingDescription();
    public static string get_TabKey_Text();
    public static string get_TemplatesSettingDescription();
    public static string get_Templates_Text();
    public static string get_TypeAlias_Text();
    public static string get_TypeParameterOf___Text();
    public static string get_TypeParameter_Text();
    public static string get_Type_Text();
    public static string get_VBOptionPageTitle();
    public static string get_XAMLSettingDescription();
    public static string get_XAMLXamlFilesSettingDescription();
    public static string get_JoinLinesAction_ActionText();
    public static string get_DisplayCompletionItemsIn_RadioOption_Caption();
    public static string get__VisualStudioIntelliSenseFont_Text();
    public static string get_Text_EditorFont_Text();
    public static string get_LoopSele_ctionAroundEndsOfAList_BoolOption_Text();
    public static string get_Show_memberSignatures_BoolOption_Text();
    public static string get_ShowSymbol_types_BoolOption_Text();
    public static string get_Show_summary_BoolOption_Text();
    public static string get_Annotations_ComboEnum_Caption();
    public static string get__HighlightNewItems_BoolOption_Text();
    public static string get__FilterMembersByEditorBrowsableAttribute_RadioOption_Caption();
    public static string get_Show_NormalMembersOnly_Text();
    public static string get_EditorBrowsableStateAlways_Text();
    public static string get_ShowNormalAnd_AdvancedMembers_Text();
    public static string get_EditorBrowsableStateAlwaysAndEditorBrowsableState_Text();
    public static string get_C_Header_Text();
    public static string get_AnnotateNullabilityOnAfterTypeName_Text();
    public static string get_PressAfterTypeNameToInsertNotNullCanBeNull_Text();
    public static string get_AnnotateNullabilityOnAtOtherPositions_Text();
    public static string get_PressBeforeWithinTypeNameOrBeforeWithin_Text();
    public static string get_InsertParameterNullCheckOnWhenParameter_Text();
    public static string get_PressOnNotNullAnnotatedParameterToInsert_Text();
    public static string get_InsertDocumentationCommentStubOn_Text();
    public static string get__WillInsertDocumentationCommentStub_Text();
    public static string get_Highlightings_Header_Text();
    public static string get_HighlightCurrent_line_BoolOption_Text();
    public static string get_Highlight_matchingDelimitersWhenCaret_RadioOption_Caption();
    public static string get_EditorAppearancePage_ShowMatchingBraceHeaderWithInlayHint_Text();
    public static string get_AtO_uterSide_Text();
    public static string get_AtBo_thSides_Text();
    public static string get_HighlightWith_Text();
    public static string get_Color_Text();
    public static string get_Outline_Text();
    public static string get_ActionIndicator_Header_Text();
    public static string get_ActionIndicatorIsAnIconThatAppearsIn_Remarks_Text();
    public static string get_EnableActionBarForActionIndicatorsAnd_BoolOption_Text();
    public static string get_ActionIndicatorAppearance_RadioOption_Caption();
    public static string get_MarkerBar_Header_Text();
    public static string get_MarkerBarDisplaysErrorsWarningsSuggestions_RadioOption_Caption();
    public static string get_DoNotShowMarkerBar_Text();
    public static string get_ShowMarkerBarNextToTheVerticalScroll_Text();
    public static string get_IntegrateMarkerBarIntoTheEnhancedScroll_Text();
    public static string get_Narrow_Text();
    public static string get_Medium_Text();
    public static string get_Wide_Text();
    public static string get_MarkersWidth_ComboOption_TextPrefix();
    public static string get_GutterMarks_Header_Text();
    public static string get_ShowGutterNavigationMarksForImplemented_Text();
    public static string get_ShowInTheActionBar_Text();
    public static string get_ShowFloatingOverTheCode_Text();
    public static string get_DoNotShowActionListIsOnlyAvailableVia_Text();
    public static string get_TypingAssist_Header_Text();
    public static string get_UseCamel_Humps_Text();
    public static string get_AffectsTheWayExtendSelectionAndNext_RichText_Text();
    public static string get_AutoFormatOn_semicolon_Text();
    public static string get_ThisSettingDoesNotApplyToC_Text();
    public static string get_AutoFormatOnClosing_brace_Text();
    public static string get_AutoFormatOn_Paste_ComboEnum_Caption();
    public static string get_CorrectCommonLanguageSpecificTypos_Text();
    public static string get_ForExampleInCTypingFooWouldProduceFoo_Text();
    public static string get_EnableStructuralRemove_Text();
    public static string get_RemoveCodeEntityStructurallyOnDelete_Text();
    public static string get_SmartIndentOnEnter_Text();
    public static string get__WillHandleSmartIndentingWhenYouPress_Text();
    public static string get_InsertVirtualIndentOnEnter_Text();
    public static string get__WillInsertVirtualIndentInsteadOfReal_Text();
    public static string get_EnablingThisOptionWillAlsoEnableVirtual_RichText_Text();
    public static string get_InsertOnEnterAfter_Text();
    public static string get__WillInsertAtAStartOfTheNewLineIfEnter_Text();
    public static string get_JumpOutsideOfClosingBracketsWithTab_Text();
    public static string get__WillJumpOverClosingBracesAndParentheses_Text();
    public static string get_JumpOutsideOfClosingQuotesBracesInString_Text();
    public static string get__WillJumpOverClosingQuotesAndBrackets_Text();
    public static string get_JumpOutsideOfClosingBracketsWhenTab_Text();
    public static string get__WillJumpOverClosingBracketsInCWhen_Text();
    public static string get_WhenTabIsPressed_ComboEnum_Caption();
    public static string get_UnindentOnBackspace_ComboEnum_Caption();
    public static string get_DelimiterCharacters_Header_Text();
    public static string get_SurroundSelectionOnTypingAQuoteBrace_Text();
    public static string get_WhenYouTypeAQuoteBraceParenthesisThe_Text();
    public static string get_AutoInsert_pairBracketsParenthesesAnd_Text();
    public static string get_JoinConcatenatedStringsOnPlusSignRemoval_Text();
    public static string get_Auto_insertClosingBrace_ComboEnum_Caption();
    public static string get_StructuralNavigationCXAML_Header_Text();
    public static string get_StructuralNavigationCXMLWebLanguages_Header_Text();
    public static string get_UseTabShiftTabKeysForStructuralNavigation_BoolOption_Text();
    public static string get_FallBackToTheStandardTabShiftTabKeys_Text_Text();
    public static string get_TheCaretIsAtIndentingBeforeTheFirst_BoolOption_Text();
    public static string get_TheCaretIsAtTheEndOfALine_BoolOption_Text();
    public static string get_ExceptForShiftTabAfterTheLastSymbol_BoolOption_Text();
    public static string get_ABlockOfCodeIsSelected_BoolOption_Text();
    public static string get_TheCaretIsInACommentOrStringLiteral_BoolOption_Text();
    public static string get_NoteSomeOfTheControlsHaveBeenDisabled_Text();
    public static string get_Di_splayDelegatesInLambdaSyntax_BoolOption_Text();
    public static string get_Di_splayExtendedInfo_BoolOption_Text();
    public static string get_Annotations_ComboEnum_Caption2();
    public static string get_SwitchBetweenSignaturesWith_RadioOption_Caption();
    public static string get_Arrow_keys_Text();
    public static string get_Show_ParameterInfo__Text();
    public static string get_VisualBasicNET_Header_Text();
    public static string get_InsertEndConstructsEndSubEndIfNextEtc_BoolOption_Text();
    public static string get_All_Tab_Title_Text();
    public static string get_EnableAutomaticIntelliSensePopup_Text();
    public static string get_PressTabToReplaceHighlightedRange_Text();
}
[ActionAttribute("JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "CommentWithBlockCommentActionText")]
public class JetBrains.ReSharper.Features.Intellisense.TextEditor.BlockCommentAction : object {
    [CanBeNullAttribute]
private CommentActionUtil myCommentActionUtil;
    public static string ID;
    [NotNullAttribute]
private CommentActionUtil CommentActionUtil { get; }
    private CommentActionUtil get_CommentActionUtil();
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
[ActionAttribute("JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "DuplicateTextActionText")]
public class JetBrains.ReSharper.Features.Intellisense.TextEditor.DuplicateTextAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "DeleteTextFromTheCaretToNextWordHumpActionText")]
internal class JetBrains.ReSharper.Features.Intellisense.TextEditor.HumpDeleteToEndAction : WordDeleteToEndActionBase {
    protected bool UseCamelHumpsRequired { get; }
    protected virtual bool get_UseCamelHumpsRequired();
}
[ActionAttribute("JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "DeleteTextFromPreviousWordHumpToTheCaretActionText")]
internal class JetBrains.ReSharper.Features.Intellisense.TextEditor.HumpDeleteToStartAction : WordDeleteToStartActionBase {
    protected bool UseCamelHumpsRequired { get; }
    protected virtual bool get_UseCamelHumpsRequired();
}
[ActionAttribute("JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "GoToNextWordHumpActionText")]
internal class JetBrains.ReSharper.Features.Intellisense.TextEditor.HumpNextAction : WordNextActionBase {
    protected bool UseCamelHumpsRequired { get; }
    protected virtual bool get_UseCamelHumpsRequired();
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "ExtendSelectionToNextWordHumpActionText")]
internal class JetBrains.ReSharper.Features.Intellisense.TextEditor.HumpNextExtendAction : WordNextActionBase {
    protected bool UseCamelHumpsRequired { get; }
    protected virtual bool get_UseCamelHumpsRequired();
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "GoToPreviousWordHumpActionText")]
internal class JetBrains.ReSharper.Features.Intellisense.TextEditor.HumpPrevAction : WordPrevActionBase {
    protected bool UseCamelHumpsRequired { get; }
    protected virtual bool get_UseCamelHumpsRequired();
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "ExtendSelectionToPreviousWordHumpActionText")]
internal class JetBrains.ReSharper.Features.Intellisense.TextEditor.HumpPrevExtendAction : WordPrevActionBase {
    protected bool UseCamelHumpsRequired { get; }
    protected virtual bool get_UseCamelHumpsRequired();
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JoinLines", "JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "JoinLinesAction_ActionText")]
public class JetBrains.ReSharper.Features.Intellisense.TextEditor.JoinLinesAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private static int JoinLines(IDocument document, Int32`1<DocLine> firstLine);
    [CompilerGeneratedAttribute]
internal static bool <JoinLines>g__IsSeparator|2_0(char c);
}
[ActionAttribute("JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "CommentWithLineCommentActionText")]
public class JetBrains.ReSharper.Features.Intellisense.TextEditor.LineCommentAction : object {
    [CanBeNullAttribute]
private CommentActionUtil myCommentActionUtil;
    public static string ID;
    [NotNullAttribute]
private CommentActionUtil CommentActionUtil { get; }
    private CommentActionUtil get_CommentActionUtil();
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Intellisense.TextEditor.OverriddenWordActions : object {
    [NullableContextAttribute("1")]
public OverriddenWordActions(Lifetime componentLifetime, IActionManager actionManager, ISolution solution, ISettingsStore settingsStore);
}
public abstract class JetBrains.ReSharper.Features.Intellisense.TextEditor.WordAction : object {
    [CompilerGeneratedAttribute]
private bool <AlterSuppress>k__BackingField;
    protected bool UseCamelHumpsRequired { get; }
    protected bool WritableRequired { get; }
    public bool AlterSuppress { get; public set; }
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public abstract virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    protected virtual bool get_UseCamelHumpsRequired();
    protected virtual bool get_WritableRequired();
    protected abstract virtual TextRange WordRangeDelegate(IBuffer s, int pos);
    private static IList`1<TextRange> GetSelectionTextRanges(ITextControl textControl);
    protected IList`1<Pair`2<TextRange, int>> GetNextOffsets(IDataContext context);
    protected bool IsAvailable(IDataContext context);
    protected void MoveCarets(IDataContext context);
    protected void SelectText(IDataContext context);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AlterSuppress();
    [CompilerGeneratedAttribute]
public void set_AlterSuppress(bool value);
}
[ActionAttribute("JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "DeleteTextFromTheCaretToTheEndOfTheWordActionText")]
public class JetBrains.ReSharper.Features.Intellisense.TextEditor.WordDeleteToEndAction : WordDeleteToEndActionBase {
}
public class JetBrains.ReSharper.Features.Intellisense.TextEditor.WordDeleteToEndActionBase : WordNextActionBase {
    protected bool WritableRequired { get; }
    protected virtual bool get_WritableRequired();
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "DeleteTextFromStartOfWordToTheCaretActionText")]
public class JetBrains.ReSharper.Features.Intellisense.TextEditor.WordDeleteToStartAction : WordDeleteToStartActionBase {
}
public class JetBrains.ReSharper.Features.Intellisense.TextEditor.WordDeleteToStartActionBase : WordPrevActionBase {
    protected bool WritableRequired { get; }
    protected virtual bool get_WritableRequired();
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.ReSharper.Features.Intellisense.TextEditor.WordDeleteUtil : object {
    public static void DeleteRanges(ITextControl textControl, IEnumerable`1<TextRange> rangesToDelete);
}
[ActionAttribute("JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "GotoNextWordActionText")]
public class JetBrains.ReSharper.Features.Intellisense.TextEditor.WordNextAction : WordNextActionBase {
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public abstract class JetBrains.ReSharper.Features.Intellisense.TextEditor.WordNextActionBase : WordAction {
    protected virtual TextRange WordRangeDelegate(IBuffer s, int pos);
}
[ActionAttribute("JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "ExtendSelectionToNextWordActionText")]
public class JetBrains.ReSharper.Features.Intellisense.TextEditor.WordNextExtendAction : WordNextActionBase {
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "GotoPrevWordActionText")]
public class JetBrains.ReSharper.Features.Intellisense.TextEditor.WordPrevAction : WordPrevActionBase {
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public abstract class JetBrains.ReSharper.Features.Intellisense.TextEditor.WordPrevActionBase : WordAction {
    protected virtual TextRange WordRangeDelegate(IBuffer s, int pos);
}
[ActionAttribute("JetBrains.ReSharper.Features.Intellisense.Resources.Strings", "ExtendSelectionToPrevWordActionText")]
public class JetBrains.ReSharper.Features.Intellisense.TextEditor.WordPrevExtendAction : WordPrevActionBase {
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.Intellisense.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
