public class JetBrains.ReSharper.Features.Internal.Actions.Revised.ActionHandlersIndex : object {
    [NotNullAttribute]
public Dictionary`2<string, ITypeElement> ActionHandlers;
    [NotNullAttribute]
public Dictionary`2<string, ITypeElement> NewActions;
    private ActionHandlersIndex(Dictionary`2<string, ITypeElement> actionHandlers, Dictionary`2<string, ITypeElement> newActions);
    public static ActionHandlersIndex Build(ISolution solution, ITextControl textControl);
    private static bool FindTypeElement(Type type, ITextControl textControl, ISymbolScope scope, IPsiServices services, ITypeElement& actionsHandler);
    private static bool FindTypeElement(string typeFullName, ITextControl textControl, ISymbolScope scope, IPsiServices services, ITypeElement& actionsHandler);
    private static string GetActionNodeName(IClass cls);
    [ContractAnnotationAttribute("null => null")]
private static IEnumerable`1<string> GetHandlerName(IClass cls);
    public ITypeElement FindActionGroup(string actionId);
    public ITypeElement FindActionNode(string actionId);
}
public class JetBrains.ReSharper.Features.Internal.Actions.Revised.ActionsXmlToPsiRewriter : object {
    private IClassDeclaration myGroupDeclaration;
    public MyContextData ContextData;
    private InsertionContext myInsertionContext;
    public ActionsXmlToPsiRewriter(XmlContextActionDataProvider provider, ActionHandlersIndex index, IProjectFile newFile, Dictionary`2<string, ITypeElement> actionGroupsNew, CompactMap`2<string, int> actionNameToId);
    private ActionsXmlToPsiRewriter(MyContextData contextData);
    public void AddActionRef(string actionId, bool embed);
    private IConstructorDeclaration EnsureConstructor();
    public void AddSeparator();
    public void AddAction(string actionId, MyActionPresentation presentation, bool showConflict, MyShortcuts ideaShortcuts, MyShortcuts vsShortcuts, ShortcutScope defaultScope, string vsOverrides, string vsHandlesUpdate, bool intern);
    private void MarkIntern(IClassDeclaration classDeclaration);
    private void AddActionInterfaces(MyActionPresentation presentation, IClassDeclaration classDeclaration);
    private void AddActionAttribute(string actionId, MyActionPresentation presentation, bool showConflict, MyShortcuts ideaShortcuts, MyShortcuts vsShortcuts, ShortcutScope defaultScope, IPsiModule psiModule, IClassDeclaration classDeclaration, ITypeElement attributeType);
    private int TryGetCommandId(string actionId);
    public ActionsXmlToPsiRewriter PushActionGroup(string actionId, MyActionPresentation presentation, bool updatesActions, bool isActionWithGroup, string vsOverrides, string vsHandlesUpdate);
    private void MarkVsOverrides(IClassDeclaration classDecl, string vsOverrides, string vsHandlesUpdate);
    public ActionsXmlToPsiRewriter PushInsertGroupContext(string groupId, InsertionPosition pos, string anchorId);
    public ActionsXmlToPsiRewriter PushInsertGroup(string groupId, InsertionPosition position, string anchorId, bool isVs);
    private void MarkInsertionFromContext(IClassDeclaration delcaration);
    private void MarkInsertion(IClassDeclaration newDelcaration, string groupId, string anchorId, InsertionPosition position);
    private void MakeGroupVirtual(ICSharpTypeDeclaration newDelcaration);
    private string Mangle(string text);
    private ICSharpTypeDeclaration CreateActionGroup(string actionId, bool updatesActions, MyActionPresentation presentation, bool isVs);
    private ICSharpParameterDeclaration CreateParameterDeclaration(ITypeElement actionGroup);
    private ICSharpParameterDeclaration CreateSeparatorDeclaration(IConstructorDeclaration constructor);
    public void DecorateVsInsertGroup(string commandBar, string priority, string anchorId, InsertionPosition pos);
    private string GetValue(InsertionPosition pos);
    [CompilerGeneratedAttribute]
private bool <MakeGroupVirtual>b__19_0(IAttribute x);
}
public class JetBrains.ReSharper.Features.Internal.Actions.Revised.MyActionPresentation : object {
    public bool CheckBox;
    public string Text;
    public string Description;
    public string Image;
    public bool IsChecked;
    public bool RadioButton;
    public bool ComboBox;
}
public class JetBrains.ReSharper.Features.Internal.Actions.Revised.MyContextData : object {
    public Dictionary`2<string, ITypeElement> ActionGroupsNew;
    public ActionHandlersIndex Index;
    public IProjectFile NewFile;
    public XmlContextActionDataProvider Provider;
    public ICSharpFile File;
    public CSharpElementFactory Factory;
    public CompactMap`2<string, int> ActionNameToId;
    public StringBuilder RefactoringLog;
    public MyContextData(ActionHandlersIndex index, Dictionary`2<string, ITypeElement> actionGroupsNew, IProjectFile newFile, XmlContextActionDataProvider provider, ICSharpFile file, CSharpElementFactory factory, CompactMap`2<string, int> actionNameToId);
    public ITypeElement GetClass();
    public ITypeElement GetClass(string fullName);
    public ITypeElement FindActionGroup(string actionId);
    [NotNullAttribute]
public ITypeElement FindActionNode(string actionId);
    public ITypeElement TryFindActionNode(string actionId);
}
public class JetBrains.ReSharper.Features.Internal.Actions.Revised.MyShortcuts : object {
    public ShortcutScheme Scheme;
    public List`1<MyShortcut> Shortcuts;
    public List`1<MyShortcut> MouseShortcuts;
    public MyShortcuts(ShortcutScheme scheme);
    public void AddShortcut(string shortcut, ShortcutScope scope);
    public void AddMouseShortcut(string shortcut, ShortcutScope scope);
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Features.Internal.Inspections.ReSharperValidatorErrors")]
public class JetBrains.ReSharper.Features.Internal.Actions.Tooling.ActionHasNoIdError : object {
    private static string MESSAGE;
    [CompilerGeneratedAttribute]
private IAttribute <Attribute>k__BackingField;
    public IAttribute Attribute { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ActionHasNoIdError(IAttribute attribute);
    [CompilerGeneratedAttribute]
public IAttribute get_Attribute();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Features.Internal.Actions.Tooling.ActionIdIsNotAssigned : ElementProblemAnalyzer`1<IAttribute> {
    private IPsiServices myServices;
    public ActionIdIsNotAssigned(IPsiServices services);
    protected virtual void Run(IAttribute attribute, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    public static bool RequiresId(IAttribute attribute, Int32& id, IPsiServices psiServices);
    private static bool IsStyle(DeclaredElementInstance`1<IParameter> matchingParameter, IPsiServices psiServices);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Features.Internal.Actions.Tooling.BuildActionDefs : ContextActionBase {
    private IContextActionDataProvider myProvider;
    public string Text { get; }
    public BuildActionDefs(ICSharpContextActionDataProvider provider);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public static bool IsAction(IDeclaredElement declaredElement);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Internal.Actions.Tooling.errorsQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
public class JetBrains.ReSharper.Features.Internal.Actions.Tooling.GenerateActionIdsFix : BulbActionBase {
    private bool myForAll;
    private IAttribute myAttribute;
    public string Text { get; }
    public GenerateActionIdsFix(bool forAll, IAttribute attribute);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator pi);
    private void AddId(IAttribute attribute, JetHashSet`1<int> usedIds);
    private int MakeUniqueId(JetHashSet`1<int> usedIds);
}
internal class JetBrains.ReSharper.Features.Internal.Actions.Tooling.SpecifyActionId : object {
    private ActionHasNoIdError myActionHasNoIdError;
    public SpecifyActionId(ActionHasNoIdError actionHasNoIdError);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
}
internal class JetBrains.ReSharper.Features.Internal.Actions.Tooling.SpecifyActionIdForAllAction : object {
    private ActionHasNoIdError myActionHasNoIdError;
    public SpecifyActionIdForAllAction(ActionHasNoIdError actionHasNoIdError);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
}
[ZoneMarkerAttribute]
internal class JetBrains.ReSharper.Features.Internal.Actions.Tooling.ZoneMarker : object {
}
[ActionAttribute("Annotator.Annotate", "JetBrains.ReSharper.Features.Internal.Resources.Strings", "AnnotateActionText")]
[InternalActionAttribute]
public class JetBrains.ReSharper.Features.Internal.Annotator.AnnotateAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
[ActionAttribute("Annotator.AnnotateDeclaration", "Annotate Declaration Under Caret by [NotNull/CanBeNull] Attributes")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.Annotator.AnnotateDeclarationAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
public abstract class JetBrains.ReSharper.Features.Internal.Annotator.AnnotationsApplier : object {
    public abstract virtual void ApplySingleAnnotation(IAttributesOwner declaredElement, Nullable`1<CodeAnnotationNullableValue> mark, string contract);
    public abstract virtual void Commit();
}
[DefaultMemberAttribute("Item")]
public class JetBrains.ReSharper.Features.Internal.Annotator.AnnotationsStorage : object {
    private object mySync;
    private Dictionary`2<IAttributesOwner, CodeAnnotationNullableValue> myAnnotations;
    private Dictionary`2<IAttributesOwner, string> myContracts;
    public Nullable`1<CodeAnnotationNullableValue> Item { get; public set; }
    public Nullable`1<CodeAnnotationNullableValue> get_Item(IAttributesOwner owner);
    public void set_Item(IAttributesOwner owner, Nullable`1<CodeAnnotationNullableValue> value);
    [CanBeNullAttribute]
public string GetContract(IAttributesOwner method);
    public void SetContract(IAttributesOwner method, string value);
    public bool ContainsAttributeOwner(IAttributesOwner owner);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Internal.Annotator.AnnotationsStorage/<GetEnumerator>d__9")]
public sealed virtual IEnumerator`1<Tuple`3<IAttributesOwner, Nullable`1<CodeAnnotationNullableValue>, string>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public bool AnnotaionsSetEquals(AnnotationsStorage other);
    public AnnotationsStorage Clone();
}
public class JetBrains.ReSharper.Features.Internal.Annotator.Annotator : object {
    private static Nullable`1<CodeAnnotationNullableValue> UNMARKED;
    private static Nullable`1<CodeAnnotationNullableValue> CAN_BE_NULL;
    private static Nullable`1<CodeAnnotationNullableValue> NOT_NULL;
    private IAnnotatingArea myAnnotatingArea;
    private PredefinedContext myPredefinedContext;
    private ICommandProcessor myCommandProcessor;
    private AnnotationsApplier myAnnotationsApplier;
    private IList`1<IOverridableMember> myTopologicallySortedPostconditions;
    private IList`1<IParameter> myToplogicallySortedPreconditions;
    private SearchDomainFactory mySearchDomainFactory;
    public Annotator(IAnnotatingArea annotatingArea, ICommandProcessor commandProcessor, SearchDomainFactory searchDomainFactory);
    public Annotator(IAnnotatingArea annotatingArea, AnnotationsApplier annotationsApplier, PredefinedContext predefinedContext, ICommandProcessor commandProcessor, SearchDomainFactory searchDomainFactory);
    private static Annotator();
    public void Run();
    public void Annotate(IProgressIndicator progress);
    private void SetExplicitAnnotationsToInterfaceImmediateImlementations(AnnotationsStorage storage, MemberHierarchyCache hierarchyCache);
    private void PropagateToInterfaceMember(IDeclaration declaration, AnnotationsStorage storage);
    private void AnalyzeHierarchyConsistency(AnnotationsStorage storage, MemberHierarchyCache hierarchyCache);
    [CompilerGeneratedAttribute]
private bool <SetExplicitAnnotationsToInterfaceImmediateImlementations>b__11_0(IOverridableMember m);
    [CompilerGeneratedAttribute]
private bool <SetExplicitAnnotationsToInterfaceImmediateImlementations>b__11_1(IParameter p);
}
public class JetBrains.ReSharper.Features.Internal.Annotator.AnnotatorDialog : Form {
    private ISolution mySolution;
    private Dictionary`2<IProject, ICollection`1<IProject>> myReferencedProjectsCache;
    private IContainer components;
    private Button buttonOK;
    private Button buttonCancel;
    private ListBox listBoxProjects;
    private TextBox textBoxPreDefinedAnnotationsDirectory;
    private Label label2;
    private Button buttonSelectPreDefinedAnnotationsDirectory;
    private RadioButton radioButtonIsSourceOutput;
    private RadioButton radioButtonIsXmlFilesOutput;
    private Button buttonResultXmlFilesDirectory;
    private TextBox textBoxResultXmlFilesDirectory;
    private CheckBox checkBoxAnalyzeInterfaces;
    private CheckBox checkBoxSeparateInterfacesFiles;
    private GroupBox groupBox1;
    private Button buttonSelectIgnoredDeclarationsDirectory;
    private Label label3;
    private TextBox textBoxIgnoredDeclarationsDirectory;
    private GroupBox groupBox2;
    private GroupBox groupBox3;
    private ListBox listBoxAssemblies;
    private RadioButton radioButtonAssemblies;
    private RadioButton radioButtonProjects;
    private Button buttonAddAssembly;
    private CheckBox checkBoxDumpAssemblyVersion;
    public ICollection`1<IProject> SelectedProjects { get; }
    public ICollection`1<IAssembly> SelectedAssemblies { get; }
    public string PreDefinedAnnotationsDirectory { get; }
    public string OutputXmlFilesDirectory { get; }
    public string IgnoredDeclarationsDirectory { get; }
    public bool IsXmlFilesOutput { get; }
    public bool AnalyzeInterfaces { get; }
    public bool SeparateInterfacesFiles { get; }
    public bool DumpModuleVersion { get; }
    public AnnotatorDialog(ISolution solution);
    public ICollection`1<IProject> get_SelectedProjects();
    public ICollection`1<IAssembly> get_SelectedAssemblies();
    public string get_PreDefinedAnnotationsDirectory();
    public string get_OutputXmlFilesDirectory();
    public string get_IgnoredDeclarationsDirectory();
    public static List`1<IProject> Run(ISolution solution);
    private ICollection`1<IProject> GetAllReferencedProjects(IProject project);
    private void selectDirectory_Click(object sender, EventArgs e);
    public bool get_IsXmlFilesOutput();
    public bool get_AnalyzeInterfaces();
    public bool get_SeparateInterfacesFiles();
    public bool get_DumpModuleVersion();
    private void listBoxProjects_Format(object sender, ListControlConvertEventArgs e);
    private void listBoxAssemblies_Format(object sender, ListControlConvertEventArgs e);
    private void buttonAddAssembly_Click(object sender, EventArgs e);
    private void FillProjectsList();
    private void FillAssembliesList();
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
}
public static class JetBrains.ReSharper.Features.Internal.Annotator.AnnotatorUtil : object {
    public static string TerminatingMethodContract;
    public static bool ShouldSkipHierarchyConsistencyCheck(IOverridableMember overridableMember);
    private static bool ShouldSkipByBody(IBlock body);
    public static void ApplyInspectionAttribute(IAttributesOwnerDeclaration declaration, Nullable`1<CodeAnnotationNullableValue> mark, string contract);
    private static IAttributeInstance GetAnnotationAttributeInstance(IClrTypeName typeName, ITreeNode context, string argument);
}
public class JetBrains.ReSharper.Features.Internal.Annotator.AssemblyAnnotatingArea : object {
    private IShellLocks myShellLocks;
    private IPsiServices myPsiServices;
    private IEnumerable`1<IAssembly> myAssemblies;
    private bool myAnnotateInterfaces;
    private HashSet`1<IDeclaredElement> myIgnoredElements;
    public ISearchDomain SearchDomain { get; }
    public bool AnalyzeInterfaces { get; }
    public bool TakeAccountOnHierarchy { get; }
    public string Name { get; }
    public AssemblyAnnotatingArea(IShellLocks shellLocks, IPsiServices psiServices, IEnumerable`1<IAssembly> assemblies, bool annotateInterfaces, IEnumerable`1<IDeclaredElement> ignoredElements);
    public sealed virtual void ForEachInDeclarations(Action`1<ICSharpTypeMemberDeclaration> action);
    public sealed virtual ISearchDomain get_SearchDomain();
    public sealed virtual bool get_AnalyzeInterfaces();
    public sealed virtual bool get_TakeAccountOnHierarchy();
    public sealed virtual string get_Name();
    public sealed virtual bool Contains(IDeclaredElement declaredElement);
    public sealed virtual void IgnoreElement(IDeclaredElement declaredElement);
    [CompilerGeneratedAttribute]
private IPsiModule <get_SearchDomain>b__8_0(IAssembly a);
}
internal class JetBrains.ReSharper.Features.Internal.Annotator.ControlFlowAnalyzer : object {
    private AnnotationsStorage myAnnotationsStorage;
    private PredefinedContext myPredefinedContext;
    public ControlFlowAnalyzer(AnnotationsStorage annotationsStorage, PredefinedContext predefinedContext);
    public AnnotationsStorage Process(ICSharpTypeMemberDeclaration declaration);
    private void Analyze(ICSharpFunctionDeclaration declaration, Dictionary`2& suggestions, Nullable`1& returnValueSuggestion, String& contract);
    private bool IsAlwaysThrowsMethod(ICSharpFunctionDeclaration declaration, IMethod method, CSharpControlFlowGraph graph);
    private bool IsFluentMethod(IMethod method, CSharpControlFlowGraph graph, Dictionary`2<IParameter, CodeAnnotationNullableValue> suggestions, String& contract);
    private AnnotationsStorage Process(ICSharpFunctionDeclaration declaration);
    private AnnotationsStorage Process(ICSharpTypeMemberDeclaration declaration, IEnumerable`1<IAccessorDeclaration> accessors);
    private static bool IsSubjectToAnnotate(IType type);
    private static bool HasNormalExit(CSharpControlFlowGraphInspector inspector);
    [CompilerGeneratedAttribute]
private bool <Analyze>b__4_1(IParameter p);
}
internal class JetBrains.ReSharper.Features.Internal.Annotator.DeclarationsCollector : object {
    private Action`1<ICSharpTypeMemberDeclaration> myAction;
    public DeclarationsCollector(Action`1<ICSharpTypeMemberDeclaration> action);
    public void Run(IFile file);
    private void ElementProcessor(ITreeNode node);
}
internal class JetBrains.ReSharper.Features.Internal.Annotator.DeclarationsProcessor : RecursiveProjectVisitor {
    private Action`1<ICSharpTypeMemberDeclaration> myAction;
    public DeclarationsProcessor(Action`1<ICSharpTypeMemberDeclaration> action);
    public virtual void VisitProjectFile(IProjectFile projectFile);
}
[ActionAttribute("Annotator.Export", "Export Source Annotations to XML")]
[InternalActionAttribute]
public class JetBrains.ReSharper.Features.Internal.Annotator.ExportAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
public class JetBrains.ReSharper.Features.Internal.Annotator.ExportDialog : Form {
    private ISolution mySolution;
    private IContainer components;
    private Button buttonOK;
    private Button buttonCancel;
    private Label label1;
    private ListBox listBoxAttributes;
    private TextBox textBoxSuffix;
    private Label label2;
    private TextBox textBoxDirectory;
    private GroupBox groupBox1;
    private GroupBox groupBox2;
    private ListBox listBoxProjects;
    private CheckBox checkBoxDumpPublic;
    private CheckBox checkBoxDirStructure;
    public HashSet`1<string> SelectedAttributes { get; }
    public string BaseDir { get; }
    public string Suffix { get; }
    public ICollection`1<IProject> SelectedProjects { get; }
    public bool ExportOnlyPublicAPI { get; }
    public bool CreateSeparateDirectoryForEachProject { get; }
    public ExportDialog(ISolution solution);
    public HashSet`1<string> get_SelectedAttributes();
    public string get_BaseDir();
    public string get_Suffix();
    public ICollection`1<IProject> get_SelectedProjects();
    public bool get_ExportOnlyPublicAPI();
    public bool get_CreateSeparateDirectoryForEachProject();
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
}
internal class JetBrains.ReSharper.Features.Internal.Annotator.ExternalAnnotationExporter : object {
    private ISolution mySolution;
    public ExternalAnnotationExporter(ISolution solution);
    public void Run();
    private static void Export(IProject project, FileSystemPath path, HashSet`1<string> attributesToExport, bool exportOnlyPublic, IProgressIndicator progress);
    private static void ExportAttribute(XmlElement parent, IAttributeInstance instance);
    private static bool ShouldExportByAccessibility(ITypeMember typeMember, bool onlyPublic);
    private static bool HasAttributes(IDeclaredElement declaredElement, HashSet`1<string> attributes);
}
public interface JetBrains.ReSharper.Features.Internal.Annotator.IAnnotatingArea {
    public ISearchDomain SearchDomain { get; }
    public bool AnalyzeInterfaces { get; }
    public bool TakeAccountOnHierarchy { get; }
    public string Name { get; }
    public abstract virtual void ForEachInDeclarations(Action`1<ICSharpTypeMemberDeclaration> action);
    public abstract virtual ISearchDomain get_SearchDomain();
    public abstract virtual bool get_AnalyzeInterfaces();
    public abstract virtual bool get_TakeAccountOnHierarchy();
    public abstract virtual string get_Name();
    public abstract virtual bool Contains(IDeclaredElement declaredElement);
    public abstract virtual void IgnoreElement(IDeclaredElement declaredElement);
}
internal class JetBrains.ReSharper.Features.Internal.Annotator.ImportContractAssembly : object {
    private static IClrTypeName ourCodeContractsPureAttribute;
    private ISolution mySolution;
    private IPsiModules myPsiModules;
    public ImportContractAssembly(ISolution solution, IPsiModules psiModules);
    private static ImportContractAssembly();
    public void Run(IAssemblyCookie cookie, string outputPath, bool outputVersion, string outputSuffix);
}
[ActionAttribute("Annotator.ImportContractAssembly", "Import Contract Assembly")]
[InternalActionAttribute]
public class JetBrains.ReSharper.Features.Internal.Annotator.ImportContractAssemblyAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
public class JetBrains.ReSharper.Features.Internal.Annotator.ImportContractAssemblyDialog : Form {
    private ISolution mySolution;
    private List`1<IAssemblyCookie> myAddedAssemblies;
    private IContainer components;
    private GroupBox groupBox1;
    private Button buttonAddAssemblies;
    private ListBox listBoxAssemblies;
    private GroupBox groupBox2;
    private TextBox textBoxOutputSuffix;
    private Label label2;
    private TextBox textBoxOutputPath;
    private Label label1;
    private Button buttonOk;
    private Button buttonCancel;
    private CheckBox checkBoxUseAssemblyVersion;
    private Button browseButton;
    public List`1<IAssemblyCookie> Assemblies { get; }
    public string OutputPath { get; }
    public string OutputSuffix { get; }
    public bool OutputVersion { get; }
    public ImportContractAssemblyDialog(ISolution solution);
    public List`1<IAssemblyCookie> get_Assemblies();
    public string get_OutputPath();
    public string get_OutputSuffix();
    public bool get_OutputVersion();
    private void buttonAddAssemblies_Click(object sender, EventArgs e);
    private void listBoxAssemblies_Format(object sender, ListControlConvertEventArgs e);
    private void browseButton_Click(object sender, EventArgs e);
    private void OnFormClosing(object sender, FormClosingEventArgs e);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    [CompilerGeneratedAttribute]
private void <browseButton_Click>b__13_0(FileSystemPath path);
}
internal class JetBrains.ReSharper.Features.Internal.Annotator.ImportWinRTAssembly : object {
    private ISolution mySolution;
    private IPsiModules myPsiModules;
    private static string Pattern;
    private static Regex ourNullabilityRegex;
    public static IClrTypeName IAsyncInfo;
    public ImportWinRTAssembly(ISolution solution, IPsiModules psiModules);
    private static ImportWinRTAssembly();
    public void Run(IAssemblyCookie cookie, AnnotationsApplier applier);
    private static void ImportDocumentationContracts(IPsiAssemblyFile library, AnnotationsApplier applier);
}
[ActionAttribute("Annotator.ImportWinRTAssembly", "Import WinRT Assembly")]
[InternalActionAttribute]
public class JetBrains.ReSharper.Features.Internal.Annotator.ImportWinRTAssemblyAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
internal class JetBrains.ReSharper.Features.Internal.Annotator.MemberHierarchyCache : object {
    private IAnnotatingArea myAnnotatingArea;
    private Dictionary`2<IOverridableMember, IOverridableMember[]> BASE_MEMBERS_CACHE;
    private Dictionary`2<IOverridableMember, IOverridableMember[]> IMMEDIATE_INHERITORS_CACHE;
    private SearchDomainFactory mySearchDomainFactory;
    public MemberHierarchyCache(IAnnotatingArea annotatingArea, SearchDomainFactory searchDomainFactory);
    public IOverridableMember[] GetBaseMembersCached(IOverridableMember member);
    public IOverridableMember[] GetImmediateInheritorMembersCached(IOverridableMember member);
    public IParameter[] GetBaseParametersCached(IParameter parameter);
    public IParameter[] GetImmediateInheritorParametersCached(IParameter parameter);
    [CompilerGeneratedAttribute]
private bool <GetBaseMembersCached>b__5_0(IOverridableMember e);
}
public class JetBrains.ReSharper.Features.Internal.Annotator.MultiProjectAnnotatingArea : object {
    private IPsiServices myPsiServices;
    private IEnumerable`1<IProject> myProjects;
    private bool myAnnotateInterfaces;
    private HashSet`1<IDeclaredElement> myIgnoredElements;
    public ISearchDomain SearchDomain { get; }
    public bool AnalyzeInterfaces { get; }
    public bool TakeAccountOnHierarchy { get; }
    public string Name { get; }
    public MultiProjectAnnotatingArea(IEnumerable`1<IProject> projects, bool annotateInterfaces, IEnumerable`1<IDeclaredElement> ignoredElements);
    public sealed virtual void ForEachInDeclarations(Action`1<ICSharpTypeMemberDeclaration> action);
    public sealed virtual ISearchDomain get_SearchDomain();
    public sealed virtual bool get_AnalyzeInterfaces();
    public sealed virtual bool get_TakeAccountOnHierarchy();
    public sealed virtual string get_Name();
    public sealed virtual bool Contains(IDeclaredElement declaredElement);
    public sealed virtual void IgnoreElement(IDeclaredElement declaredElement);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IPsiModule> <get_SearchDomain>b__7_0(IProject p);
    [CompilerGeneratedAttribute]
private bool <Contains>b__14_2(IFile pf);
}
public class JetBrains.ReSharper.Features.Internal.Annotator.PredefinedContext : object {
    public static KeyValuePair`2<string, bool> TerminatingMethod;
    [CompilerGeneratedAttribute]
private AnnotationsStorage <Annotations>k__BackingField;
    public AnnotationsStorage Annotations { get; }
    private static PredefinedContext();
    [CompilerGeneratedAttribute]
public AnnotationsStorage get_Annotations();
    public void CollectAnnotations(ISolution solution, string preDefinedAnnotationsDirectory);
    public void CollectAnnotations(ISolution solution, TextReader inStream);
    private void ReadAnnotationsForMember(IAttributesOwner member, XmlElement element);
}
internal class JetBrains.ReSharper.Features.Internal.Annotator.PropagateToInterface : object {
    private ISolution mySolution;
    private SearchDomainFactory mySearchDomainFactory;
    private ICommandProcessor myCommandProcessor;
    public PropagateToInterface(ISolution solution, ICommandProcessor commandProcessor, SearchDomainFactory searchDomainFactory);
    public void Run();
    private void Propagate(IProject project, IProgressIndicator progress);
    private void PropagateInterfaceMember(IDeclaration declaration);
}
[ActionAttribute("Annotator.PropagateToInterface", "Propagate Annotations to Interface Members (SOURCE)")]
[InternalActionAttribute]
public class JetBrains.ReSharper.Features.Internal.Annotator.PropagateToInterfaceAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
public class JetBrains.ReSharper.Features.Internal.Annotator.SingleDeclarationAnnotatingArea : object {
    private ICSharpTypeMemberDeclaration myDeclaration;
    public ISearchDomain SearchDomain { get; }
    public bool AnalyzeInterfaces { get; }
    public bool TakeAccountOnHierarchy { get; }
    public string Name { get; }
    public SingleDeclarationAnnotatingArea(ICSharpTypeMemberDeclaration declaration);
    public sealed virtual void ForEachInDeclarations(Action`1<ICSharpTypeMemberDeclaration> action);
    public sealed virtual ISearchDomain get_SearchDomain();
    public sealed virtual bool get_AnalyzeInterfaces();
    public sealed virtual bool get_TakeAccountOnHierarchy();
    public sealed virtual string get_Name();
    public sealed virtual bool Contains(IDeclaredElement declaredElement);
    public sealed virtual void IgnoreElement(IDeclaredElement declaredElement);
}
public class JetBrains.ReSharper.Features.Internal.Annotator.ToSourceCodeAnnotationsApplier : AnnotationsApplier {
    public virtual void ApplySingleAnnotation(IAttributesOwner declaredElement, Nullable`1<CodeAnnotationNullableValue> mark, string contract);
    public virtual void Commit();
}
internal class JetBrains.ReSharper.Features.Internal.Annotator.ToXmlFilesAnnotationsApplier : AnnotationsApplier {
    private FileSystemPath myXmlFilesDirectory;
    private Dictionary`2<string, DocAndInfo> myDocs;
    [CompilerGeneratedAttribute]
private bool <SeparateInterfaces>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DumpModuleVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HidePrivate>k__BackingField;
    public bool SeparateInterfaces { get; public set; }
    public bool DumpModuleVersion { get; public set; }
    public bool HidePrivate { get; public set; }
    public ToXmlFilesAnnotationsApplier(string xmlFilesDirectory, bool separateInterfaces, bool dumpModuleVersion, bool hidePrivate);
    [CompilerGeneratedAttribute]
public bool get_SeparateInterfaces();
    [CompilerGeneratedAttribute]
public void set_SeparateInterfaces(bool value);
    [CompilerGeneratedAttribute]
public bool get_DumpModuleVersion();
    [CompilerGeneratedAttribute]
public void set_DumpModuleVersion(bool value);
    [CompilerGeneratedAttribute]
public bool get_HidePrivate();
    [CompilerGeneratedAttribute]
public void set_HidePrivate(bool value);
    private static Pair`2<string, string> GetAssemblyName(IAttributesOwner declaredElement);
    public virtual void ApplySingleAnnotation(IAttributesOwner declaredElement, Nullable`1<CodeAnnotationNullableValue> mark, string contract);
    private XmlElement GetOrCreateMemberNode(ITypeMember typeMember, XmlDocument doc);
    private static bool IsInInterface(IAttributesOwner declaredElement);
    public static bool IsPrivateToAssembly(IDeclaredElement declaredElement);
    public virtual void Commit();
}
[PsiComponentAttribute("0")]
internal class JetBrains.ReSharper.Features.Internal.AttributedClassesCache.AttributedTypesCache : object {
    private SourceAttributedTypesCache mySourceAttributedTypesCache;
    private CompiledAttributedTypesCache myCompiledAttributedTypesCache;
    private AttributedTypesCacheParameters myCacheParameters;
    public AttributedTypesCache(SourceAttributedTypesCache sourceAttributedTypesCache, CompiledAttributedTypesCache compiledAttributedTypesCache, AttributedTypesCacheParameters cacheParameters);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Internal.AttributedClassesCache.AttributedTypesCache/<GetAttributedClasses>d__4`1")]
public sealed virtual IEnumerable`1<IClass> GetAttributedClasses(INamespace ns);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Internal.AttributedClassesCache.AttributedTypesCache/<GetAttributedTypeElements>d__5")]
public sealed virtual IEnumerable`1<ITypeElement> GetAttributedTypeElements(IClass attributeClass);
    public void Dump(StreamWriter writer);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Internal.AttributedClassesCache.AttributedTypesCacheParameters : object {
    private JetHashSet`1<string> myRequiredAttributeShortNames;
    [CompilerGeneratedAttribute]
private long <AttributeNamesHash>k__BackingField;
    public IReadOnlySet`1<string> RequiredAttributeShortNames { get; }
    public long AttributeNamesHash { get; }
    public AttributedTypesCacheParameters(IEnumerable`1<IAttributedTypesCacheParameters> cacheParameters);
    public IReadOnlySet`1<string> get_RequiredAttributeShortNames();
    [CompilerGeneratedAttribute]
public long get_AttributeNamesHash();
    public bool ShouldInclude(string attributeShortName);
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Internal.AttributedClassesCache.CompiledAttributedTypesCache : object {
    private static object NO_CHANGE;
    private IPsiModules myPsiModules;
    private ISymbolCache mySymbolCache;
    private IPsiAssemblyFileLoader myPsiAssemblyFileLoader;
    private AttributedTypesCacheParameters myParameters;
    private OneToSetMap`2<AssemblyId, TrieData> myAssemblyToTrieData;
    private CompactMap`2<string, QualifiedNamesTrie`1<TrieData>> myTries;
    private OptimizedPersistentSortedMap`2<AssemblyId, List`1<FlatData>> myPersistentMap;
    private OptimizedPersistentSortedMap`2<AssemblyId, long> myTimestampMap;
    public string Version { get; }
    public bool ClearOnLoad { get; public set; }
    public string PersistentId { get; }
    public CompiledAttributedTypesCache(Lifetime lifetime, IPsiModules psiModules, ISymbolCache symbolCache, IPsiAssemblyFileLoader psiAssemblyFileLoader, ISolutionCaches solutionCaches, AttributedTypesCacheParameters parameters);
    private static CompiledAttributedTypesCache();
    public sealed virtual string get_Version();
    public sealed virtual bool get_ClearOnLoad();
    public sealed virtual void set_ClearOnLoad(bool value);
    public sealed virtual string get_PersistentId();
    public sealed virtual object Load(IProgressIndicator progress, bool enablePersistence);
    public sealed virtual void MergeLoaded(object data);
    public sealed virtual void Save(IProgressIndicator progress, bool enablePersistence);
    public sealed virtual object Build(IPsiAssembly assembly);
    private List`1<FlatData> Build(IMetadataAssembly metadataAssembly, IPsiAssembly psiAssembly);
    public sealed virtual void Merge(IPsiAssembly assembly, object part, Func`1<bool> checkForTermination);
    public sealed virtual void Drop(IEnumerable`1<IPsiAssembly> assemblies);
    private void ClearTrie(IPsiAssembly assembly);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Internal.AttributedClassesCache.CompiledAttributedTypesCache/<GetAttributedClasses>d__28`1")]
public IEnumerable`1<IClass> GetAttributedClasses(INamespace ns);
    public IEnumerable`1<ITypeElement> GetAttributedTypeElements(IClass attributeClass);
    [CanBeNullAttribute]
private QualifiedNamesTrie`1<TrieData> GetTrie(string name);
    public void Dump(StreamWriter writer);
    private static void Dump(TextWriter writer, ITrieNode<TrieData, string> node, OneToSetMap`2<Guid, string> assemblyNames, string prefix);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.AttributedClassesCache.CSharp.CSharpSourceAttributedTypesProvider : object {
    public sealed virtual void CollectAttributedTypes(IFile file, SourceAttributedTypesTrieCollection trieRoot, AttributedTypesCacheParameters parameters);
    public sealed virtual IClass FindClass(IFile file, int offset);
    public sealed virtual ITypeDeclaration FindDeclaration(IFile file, int offset);
}
public interface JetBrains.ReSharper.Features.Internal.AttributedClassesCache.IAttributedTypesCache {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IClass> GetAttributedClasses(INamespace ns);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<ITypeElement> GetAttributedTypeElements(IClass attributeClass);
}
public interface JetBrains.ReSharper.Features.Internal.AttributedClassesCache.IAttributedTypesCacheParameters {
    public IEnumerable`1<string> RequiredAttributeShortNames { get; }
    public abstract virtual IEnumerable`1<string> get_RequiredAttributeShortNames();
}
public interface JetBrains.ReSharper.Features.Internal.AttributedClassesCache.ISourceAttributedTypesProvider {
    public abstract virtual void CollectAttributedTypes(IFile file, SourceAttributedTypesTrieCollection trieRoot, AttributedTypesCacheParameters parameters);
    public abstract virtual IClass FindClass(IFile file, int offset);
    public abstract virtual ITypeDeclaration FindDeclaration(IFile file, int offset);
}
[PsiComponentAttribute("10")]
internal class JetBrains.ReSharper.Features.Internal.AttributedClassesCache.SourceAttributedTypesCache : object {
    private static string CacheFileName;
    private OneToSetMap`2<IPsiSourceFile, SourceAttributedTypesTrieNode> mySourceFileToNodes;
    private SourceAttributedTypesTrieCollection myTrieCollection;
    private JetHashSet`1<IPsiSourceFile> myDirtyFiles;
    private JetHashSet`1<IPsiSourceFile> myFilesWithoutAnnotations;
    private IShellLocks myShellLocks;
    private IPersistentIndexManager myPersistentIndexManager;
    private SourceAttributedTypesManager mySourceAttributedTypesManager;
    private IPsiFiles myPsiFiles;
    private FileSystemPath myCacheFile;
    private string myVersion;
    public bool HasDirtyFiles { get; }
    public SourceAttributedTypesCache(IShellLocks shellLocks, IPsiConfiguration psiConfiguration, IPersistentIndexManager persistentIndexManager, SourceAttributedTypesManager sourceAttributedTypesManager, IPsiFiles psiFiles, AttributedTypesCacheParameters parameters);
    private bool Accepts(IPsiSourceFile sourceFile);
    public sealed virtual object Load(IProgressIndicator progress, bool enablePersistence);
    private Pair`2<SourceAttributedTypesTrieCollection, JetHashSet`1<IPsiSourceFile>> LoadSourceCache(BinaryReader reader);
    public sealed virtual void MergeLoaded(object data);
    private void UpdateIndexAfterLoad(CompactMap`2<string, SourceAttributedTypesTrieNode> attributeTrie);
    private void UpdateIndexAfterLoad(SourceAttributedTypesTrieNode trieNode);
    public sealed virtual void Save(IProgressIndicator progress, bool enablePersistence);
    private void SaveSourceCache(BinaryWriter writer);
    private static void LogIoException(FileSystemPath path, Exception e);
    public sealed virtual void MarkAsDirty(IPsiSourceFile sourceFile);
    public sealed virtual bool get_HasDirtyFiles();
    public sealed virtual bool UpToDate(IPsiSourceFile sourceFile);
    public sealed virtual object Build(IPsiSourceFile sourceFile, bool isStartup);
    public sealed virtual void Merge(IPsiSourceFile sourceFile, object builtPart);
    public sealed virtual void Drop(IPsiSourceFile sourceFile);
    public sealed virtual void OnPsiChange(ITreeNode elementContainingChanges, PsiChangedElementType type);
    public sealed virtual void OnDocumentChange(IPsiSourceFile sourceFile, ProjectFileDocumentCopyChange args);
    public sealed virtual void SyncUpdate(bool underTransaction);
    public sealed virtual void Dump(TextWriter writer, IPsiSourceFile sourceFile);
    public void Dump(StreamWriter writer);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Internal.AttributedClassesCache.SourceAttributedTypesCache/<GetAttributedTypeElements>d__33")]
public IEnumerable`1<ITypeElement> GetAttributedTypeElements(IClass attributeClass);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Internal.AttributedClassesCache.SourceAttributedTypesCache/<GetAttributedClasses>d__34`1")]
public IEnumerable`1<IClass> GetAttributedClasses(INamespace ns);
    [CanBeNullAttribute]
private SourceAttributedTypesTrieNode GetTrie(string name);
}
[PsiComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Internal.AttributedClassesCache.SourceAttributedTypesManager : object {
    private LanguageManager myLanguages;
    private AttributedTypesCacheParameters myParameters;
    public SourceAttributedTypesManager(LanguageManager languages, AttributedTypesCacheParameters parameters);
    public bool Accepts(IPsiSourceFile sourceFile);
    public SourceAttributedTypesTrieCollection CollectAttributedTypes(IPsiSourceFile sourceFile);
    [CanBeNullAttribute]
public IClass FindClass(IPsiSourceFile sourceFile, int offset);
    [CanBeNullAttribute]
private IClass FindClass(IFile file, int offset);
    [CanBeNullAttribute]
public ITypeDeclaration FindDeclaration(IPsiSourceFile sourceFile, int offset);
    [CanBeNullAttribute]
private ITypeDeclaration FindDeclaration(IFile file, int offset);
}
public class JetBrains.ReSharper.Features.Internal.AttributedClassesCache.SourceAttributedTypesTrieCollection : object {
    [CompilerGeneratedAttribute]
private CompactMap`2<string, SourceAttributedTypesTrieNode> <Roots>k__BackingField;
    public CompactMap`2<string, SourceAttributedTypesTrieNode> Roots { get; }
    [CompilerGeneratedAttribute]
public CompactMap`2<string, SourceAttributedTypesTrieNode> get_Roots();
    public void AddAnnotation(string attributeName, TreeOffset offset, IEnumerable`1<string> ownerNamespaceNames, IPsiSourceFile sourceFile);
    private SourceAttributedTypesTrieNode GetRoot(string attributeName);
    public void Write(BinaryWriter writer, IPersistentIndexManager persistentIndexManager);
    public void Read(BinaryReader reader, IPersistentIndexManager persistentIndexManager);
    public bool Merge(SourceAttributedTypesTrieCollection part, OneToSetMap`2<IPsiSourceFile, SourceAttributedTypesTrieNode> sourceFileToNodes);
    public void Dump(StreamWriter writer);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Internal.AttributedClassesCache.SourceAttributedTypesTrieCollection/<GetDependencies>d__10")]
public IEnumerable`1<KeyValuePair`2<Dependency, Hash>> GetDependencies(SourceAttributedTypesManager sourceAttributedTypesManager);
}
public class JetBrains.ReSharper.Features.Internal.AttributedClassesCache.SourceAttributedTypesTrieNode : object {
    private Dictionary`2<string, SourceAttributedTypesTrieNode> myChildren;
    private IList`1<SourceAttributedTypesTrieData> myAnnotations;
    public IList`1<SourceAttributedTypesTrieData> Annotations { get; }
    public Dictionary`2<string, SourceAttributedTypesTrieNode> Children { get; }
    public IList`1<SourceAttributedTypesTrieData> get_Annotations();
    public Dictionary`2<string, SourceAttributedTypesTrieNode> get_Children();
    public void Dump(TextWriter writer, string prefix, string indent);
    public static SourceAttributedTypesTrieNode Read(BinaryReader reader, IPersistentIndexManager persistentIndexManager);
    public bool ReadThis(BinaryReader reader, IPersistentIndexManager persistentIndexManager);
    public void Write(BinaryWriter writer, IPersistentIndexManager persistentIndexManager);
    public void AddAnnotation(TreeOffset offset, IEnumerable`1<string> owners, IPsiSourceFile sourceFile);
    private void AddAnnotation(IPsiSourceFile sourceFile, TreeOffset offset);
    private SourceAttributedTypesTrieNode AddNamespaceNode(string namespaceShortName);
    public void Clear(IPsiSourceFile sourceFile);
    public bool Merge(SourceAttributedTypesTrieNode builtPart, OneToSetMap`2<IPsiSourceFile, SourceAttributedTypesTrieNode> sourceFileToNodes);
    private void UpdateIndex(SourceAttributedTypesTrieNode node, OneToSetMap`2<IPsiSourceFile, SourceAttributedTypesTrieNode> sourceFileToNodes);
    [CanBeNullAttribute]
public SourceAttributedTypesTrieNode GetChild(string name);
    public IEnumerable`1<KeyValuePair`2<Dependency, Hash>> GetDependencies(SourceAttributedTypesManager sourceAttributedTypesManager);
    private void GetDependencies(List`1<KeyValuePair`2<Dependency, Hash>> ret, List`1<string> dependencyName, SourceAttributedTypesManager sourceAttributedTypesManager);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Features.Internal.AttributedClassesCache.SourceAttributedTypesTrieNodeEx : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Internal.AttributedClassesCache.SourceAttributedTypesTrieNodeEx/<Explore>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<SourceAttributedTypesTrieNode> Explore(SourceAttributedTypesTrieNode node, String[] names);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Internal.AttributedClassesCache.SourceAttributedTypesTrieNodeEx/<Enumerate>d__1")]
[ExtensionAttribute]
public static IEnumerable`1<SourceAttributedTypesTrieNode> Enumerate(SourceAttributedTypesTrieNode node);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.AttributedClassesCache.VB.VBSourceAttributedTypesProvider : object {
    public sealed virtual void CollectAttributedTypes(IFile file, SourceAttributedTypesTrieCollection trieRoot, AttributedTypesCacheParameters parameters);
    public sealed virtual IClass FindClass(IFile file, int offset);
    public sealed virtual ITypeDeclaration FindDeclaration(IFile file, int offset);
}
[ActionAttribute("Dump ICaches", "JetBrains.ReSharper.Features.Internal.Resources.Strings", "DumpICachesActionText")]
public class JetBrains.ReSharper.Features.Internal.Caches.DumpICachesAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("Dump ICaches for file", "JetBrains.ReSharper.Features.Internal.Resources.Strings", "DumpICachesForFileActionText")]
public class JetBrains.ReSharper.Features.Internal.Caches.DumpICachesForFileAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.ReSharper.Features.Internal.Resources.Strings", "SymbolCachesCleanupActionText")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.Caches.SymbolCachesCleanupAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("Show Change Manager Graph in yEd")]
[InternalActionAttribute]
public class JetBrains.ReSharper.Features.Internal.ChangeManagerViewer.ViewChangeManagerAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.ReSharper.Features.Internal.ChangeManagerViewer.ViewChangeManagerExecuter : object {
    private ChangeManagerImpl myManager;
    public IEnumerable`1<IChangeProvider> Groups { get; }
    public IEnumerable`1<IChangeProvider> Nodes { get; }
    public IChangeProvider RootGroup { get; }
    public ViewChangeManagerExecuter(ChangeManagerImpl manager);
    public sealed virtual IEnumerable`1<IChangeProvider> get_Groups();
    public sealed virtual IEnumerable`1<IChangeProvider> get_Nodes();
    public sealed virtual IChangeProvider OwnerGroup(IChangeProvider node);
    public sealed virtual IEnumerable`1<IChangeProvider> Ancestors(IChangeProvider node);
    public sealed virtual IEnumerable`1<IChangeProvider> Descendants(IChangeProvider node);
    public sealed virtual string PresentGroup(IChangeProvider groupIndex);
    public sealed virtual string PresentNode(IChangeProvider node);
    public sealed virtual IChangeProvider get_RootGroup();
    public sealed virtual bool Equals(IChangeProvider x, IChangeProvider y);
    public sealed virtual int GetHashCode(IChangeProvider obj);
}
[ActionAttribute("Code Behind")]
[InternalActionAttribute]
public class JetBrains.ReSharper.Features.Internal.CodeBehind.ShowCodeBehindAction : ActivateToolWindowActionHandler`1<ViewCodeBehindToolWindowDescriptor> {
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Internal.CodeBehind.ViewCodeBehindManager : object {
    private Lifetime myLifetime;
    private ILazy`1<ToolWindowManager> myToolWindowManager;
    private IIdeInMemoryDocumentFactory myDocumentFactory;
    private IDocumentMarkupManager myDocumentMarkupManager;
    private IShellLocks myLocks;
    private IRunningDocuments myRunningDocuments;
    private static string ourHighlightKey;
    private static String[] ourHighlightAttrs;
    private static ErrorStripeAttributes ourErrorStripeAttrs;
    private bool myToolWindowsAllowed;
    public ViewCodeBehindManager(Lifetime lifetime, ILazy`1<ToolWindowManager> toolWindowManager, IIdeInMemoryDocumentFactory documentFactory, IDocumentMarkupManager documentMarkupManager, ISolution solution, IShellLocks locks, IRunningDocuments runningDocuments);
    private static ViewCodeBehindManager();
    public void Show(IFile file, string title);
}
[ToolWindowDescriptorAttribute("16")]
public class JetBrains.ReSharper.Features.Internal.CodeBehind.ViewCodeBehindToolWindowDescriptor : ToolWindowDescriptor {
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Features.Internal.ContextActions.CSharp.OpenTestDataContextAction : object {
    [NotNullAttribute]
private ICSharpContextActionDataProvider myProvider;
    private static IClrTypeName TEST_FILE_EXTENSION_ATTRIBUTE_CLR_NAME;
    public OpenTestDataContextAction(ICSharpContextActionDataProvider provider);
    private static OpenTestDataContextAction();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Internal.ContextActions.CSharp.OpenTestDataContextAction/<CreateBulbItems>d__2")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    private FileSystemPath FindTestDataFolder(IMethodDeclaration methodDeclaration);
    private string GetPathFromProperty(IClass clazz, string propertyName, int depth);
    private IPropertyDeclaration FindPropertyDeclaration(IClass clazz, string propertyName);
    private IMethodDeclaration FindTestMethodDeclaration();
    [CanBeNullAttribute]
private string GetTestFileName(IMethodDeclaration methodDeclaration, FileSystemPath testDataFolder, string extension, IEnumerable`1& additionalTestFileNames);
    [CanBeNullAttribute]
private ICSharpExpression GetValueExpression(IPropertyDeclaration propertyDeclaration);
    private string GetTestDataExtension(IClass testClass);
    [CompilerGeneratedAttribute]
internal static string <GetTestFileName>g__GetMainTestFileName|8_0(string methodName, FileSystemPath testDataFolder, string extension, IInvocationExpression invocationExpression);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Internal.ContextActions.CSharp.OpenTestDataContextAction/<<GetTestFileName>g__GetAdditionalTestFileNames|8_1>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<string> <GetTestFileName>g__GetAdditionalTestFileNames|8_1(IInvocationExpression invocationExpression);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.Internal.ContextActions.CSharp.ZoneMarker : object {
}
[ActionAttribute("JetBrains.ReSharper.Features.Internal.Resources.Strings", "ExportContextActionsActionText")]
public class JetBrains.ReSharper.Features.Internal.ContextActions.ExportContextActionsListAction : object {
    private static void ExportConfigurableSeverityInspections();
    private static void ExportContextActions();
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private static void ExportContextActionsPlainText();
    private static void ExportQuickFixesPlainText();
    private static void ExportAllImplementations(Type iQuickFix, string fileName);
    private static void FormatType(Type type, StreamWriter w);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
[ActionAttribute("JetBrains.ReSharper.Features.Internal.Resources.Strings", "TryProjectTransactionActionText")]
public class JetBrains.ReSharper.Features.Internal.ContextActions.TryProjectTransactionAction : object {
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private void CopyProjectItem(IDataContext context);
    private void RenameProject(IDataContext context);
    private void RenameProjectFolder(IDataContext context);
    private void CreateFolderAndUpdate(IDataContext context);
    private void CreateFileAndUpdate(IDataContext context);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
[ActionAttribute("Show Control Flow Graph in yEd")]
[InternalActionAttribute]
public class JetBrains.ReSharper.Features.Internal.ControlFlowGraphViewer.ViewControlFlowGraphAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    [CanBeNullAttribute]
private static IControlFlowGraph GetGraph(IDeclaration declaration);
    private static MyControlFlowGraph BuildGraph(IControlFlowGraph graph, ISolution solution);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.Features.Internal.DiagramGraphExtensions : object {
    [ExtensionAttribute]
public static DiagramGraphNode AddNode(DiagramGraphBase graph, string name);
    [ExtensionAttribute]
public static void AddEdge(DiagramGraphBase graph, IDiagramGraphNode source, IDiagramGraphNode target);
    public static void OpenAsGraphml(IDiagramGraph graph, string tempFileRoot);
}
[ActionAttribute("JetBrains.ReSharper.Features.Internal.Resources.Strings", "DumpCodeBehindActionText")]
public class JetBrains.ReSharper.Features.Internal.Dump.DumpCodeBehindAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.ReSharper.Features.Internal.Resources.Strings", "DumpCodeBehindMappingsActionText")]
public class JetBrains.ReSharper.Features.Internal.Dump.DumpCodeBehindMappingsAction : object {
    private static string DumpFileExtension;
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public string DumpFile(IPsiSourceFile psiSourceFile);
    public string DumpFile(IFile generatedFile, ISecondaryRangeTranslator secondaryRangeTranslator);
}
[ActionAttribute("JetBrains.ReSharper.Features.Internal.Resources.Strings", "DumpPsiActionText")]
public class JetBrains.ReSharper.Features.Internal.Dump.DumpPsiAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private static void DumpPsi(TextWriter writer, ITreeNode root);
    [CompilerGeneratedAttribute]
internal static void <DumpPsi>g__DumpSingleNode|2_0(ITreeNode node, TextWriter writer);
}
[ActionAttribute("JetBrains.ReSharper.Features.Internal.Resources.Strings", "DumpPSIDiagnostics_Text")]
public class JetBrains.ReSharper.Features.Internal.Dump.DumpPsiDiagnosticsAction : object {
    [NullableContextAttribute("1")]
public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    [NullableContextAttribute("1")]
public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
    [NullableContextAttribute("1")]
public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.ReSharper.Features.Internal.Resources.Strings", "DumpAllSymbolCacheActionText")]
public class JetBrains.ReSharper.Features.Internal.DumpSymbolCache.DumpSymbolCacheAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.ReSharper.Features.Internal.Resources.Strings", "DumpSymbolCacheForCurrentFileActionText")]
public class JetBrains.ReSharper.Features.Internal.DumpSymbolCache.DumpSymbolCacheForFileAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.ReSharper.Features.Internal.Resources.Strings", "GenerateEditorConfigDocsActionText")]
public class JetBrains.ReSharper.Features.Internal.EditorConfig.GenerateEditorConfigDocsAction : object {
    private static string GeneralizedPropsFileName;
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public static void GenerateDocs(ISolution solution, FileSystemPath path);
    private static void CreateGeneralizedPropertiesDoc(FileSystemPath path, IApplicationHost host, OneToListMultimap`2<string, EditorConfigPropertyDescription> map, IEditorConfigSchema schema);
    private static XmlWriter StartDocument(FileSystemPath path, IApplicationHost host, string fileName, string title, int includeTocDepth);
    private static void CreateIndex(FileSystemPath path, IApplicationHost host, OneToListMultimap`2<string, EditorConfigPropertyDescription> map, IEditorConfigSchema ecService);
    private static void FillSettingsToEntryDictionary(ICodeStyleEntry entry, KnownLanguage schemaLanguage, Dictionary`2<IScalarSetting, Pair`2<ICodeStyleEntry, KnownLanguage>> settingsToEntry, IEditorConfigSchema ecService);
    private static bool CalculateIfEntryShouldBeExcluded(ICodeStyleEntry entry, KnownLanguage schemaLanguage, Dictionary`2<IScalarSetting, Pair`2<ICodeStyleEntry, KnownLanguage>> settingsToEntry, HashSet`1<ICodeStyleEntry> excludedEntries);
    private static void ProcessEntry(string parentId, ICodeStyleEntry entry, XmlWriter writer, CodePreviewPreparator preparator, ISolution solution, IDocument documentBefore, Lifetime lifetime, ISettingsStore settingsStore, IContextBoundSettingsStoreLive contextBoundSettingsStoreLive, IDocument documentAfter, IEditorConfigSchema ecService, Dictionary`2<IScalarSetting, Pair`2<ICodeStyleEntry, KnownLanguage>> settingsToEntry, HashSet`1<ICodeStyleEntry> excludedEntries, KnownLanguage language, OneToListMultimap`2<string, EditorConfigPropertyDescription> map, string fileName, string parentDescription);
    private static void WriteScalarEntry(string id, IEditorConfigPropertyInfo propertyInfo, ICodeStyleEntry entry, XmlWriter writer, CodePreviewPreparator preparator, ISolution solution, IDocument documentBefore, Lifetime lifetime, ISettingsStore settingsStore, IContextBoundSettingsStoreLive contextBoundSettingsStoreLive, IDocument documentAfter, IStoredScalarSetting settingsEntry, IEditorConfigSchema ecService, KnownLanguage language);
    private static void WriteAliases(XmlWriter writer, IEditorConfigPropertyInfo[] aliases, string title);
    private static Tuple`3[] DescribePossibleValues(XmlWriter writer, Type type, IReadOnlyCollection`1<IEditorConfigValueInfo> enumValues);
}
[ZoneMarkerAttribute]
internal class JetBrains.ReSharper.Features.Internal.EditorConfig.ZoneMarker : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Features.Internal.ExternalAnnotations.AnnotateMethodTypeParameterWithUseDefaultEqualityFix : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
private IMethodDeclaration myMethodDeclaration;
    [NullableAttribute("2")]
private ITypeElement myAttributeTypeElement;
    [NullableAttribute("2")]
private ITypeParameterOfMethodDeclaration myTypeParameterDeclaration;
    private static ClrTypeName AttributeClrTypeName { get; }
    public string Text { get; }
    public AnnotateMethodTypeParameterWithUseDefaultEqualityFix(TypeParameterEqualityUsageWarning warning);
    private static ClrTypeName get_AttributeClrTypeName();
    public virtual string get_Text();
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Features.Internal.ExternalAnnotations.AnnotateMethodWithCollectionAccessAttributeFix : ModernScopedQuickFixBase {
    private bool myIsReturn;
    private ICSharpFunctionDeclaration myFunctionDeclaration;
    private IDeclaredType myAttributeType;
    private IDeclaredType myCollectionAccessTypeType;
    private static ClrTypeName AttributeClrTypeName { get; }
    private static ClrTypeName CollectionAccessTypeClrTypeName { get; }
    public string Text { get; }
    public AnnotateMethodWithCollectionAccessAttributeFix(CollectionAccessAnnotationMissingWarning warning);
    private static ClrTypeName get_AttributeClrTypeName();
    private static ClrTypeName get_CollectionAccessTypeClrTypeName();
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private IAttributesOwnerDeclaration GetDeclarationToModify();
    private static string TryGuessUsage(IMethod method);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private ICSharpFunctionDeclaration <GetDeclarationToModify>g__GetDeclarationInner|14_0(<>c__DisplayClass14_0& );
    [CompilerGeneratedAttribute]
internal static bool <TryGuessUsage>g__ContainsOutParameters|15_0(<>c__DisplayClass15_0& );
}
[ConfigurableSeverityHighlightingAttribute("CollectionAccessAnnotationMissing", "CSHARP")]
public class JetBrains.ReSharper.Features.Internal.ExternalAnnotations.CollectionAccessAnnotationMissingOnRelatedMembersWarning : object {
    private static string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IClassLikeDeclaration <ClassLikeDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodsList>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IClassLikeDeclaration ClassLikeDeclaration { get; }
    public string MethodsList { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CollectionAccessAnnotationMissingOnRelatedMembersWarning(IClassLikeDeclaration classLikeDeclaration, string methodsList);
    [CompilerGeneratedAttribute]
public IClassLikeDeclaration get_ClassLikeDeclaration();
    [CompilerGeneratedAttribute]
public string get_MethodsList();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("CollectionAccessAnnotationMissing", "CSHARP")]
public class JetBrains.ReSharper.Features.Internal.ExternalAnnotations.CollectionAccessAnnotationMissingWarning : object {
    private static string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ICSharpFunctionDeclaration <FunctionDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReturn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ICSharpFunctionDeclaration FunctionDeclaration { get; }
    public bool IsReturn { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public CollectionAccessAnnotationMissingWarning(ICSharpFunctionDeclaration functionDeclaration, bool isReturn);
    [CompilerGeneratedAttribute]
public ICSharpFunctionDeclaration get_FunctionDeclaration();
    [CompilerGeneratedAttribute]
public bool get_IsReturn();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
public class JetBrains.ReSharper.Features.Internal.ExternalAnnotations.CollectionAccessAnnotationUtil : object {
    [NullableContextAttribute("1")]
public static bool IsSupportedCollectionType(IType type, ITreeNode context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CodeAnnotationProviderAttribute("0")]
public class JetBrains.ReSharper.Features.Internal.ExternalAnnotations.DefaultEqualityUsageInternalAnnotationProvider : CodeAnnotationInfoProvider`2<IAttributesOwner, FrugalLocalHashSet`1<string>> {
    private static string DefaultEqualityUsageInternalAttributeShortName;
    public DefaultEqualityUsageInternalAnnotationProvider(AttributeInstancesProvider attributeInstancesProvider, CodeAnnotationsConfiguration codeAnnotationsConfiguration);
    [NullableContextAttribute("2")]
protected virtual FrugalLocalHashSet`1<string> GetDefaultInfo(IAttributesOwner attributesOwner);
    protected virtual bool ComputeWithoutAttributes();
    protected virtual FrugalLocalHashSet`1<string> CalculateInfo(IAttributesOwner attributesOwner, IEnumerable`1<IAttributeInstance> attributeInstances);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Internal.ExternalAnnotations.errorsQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.ExternalAnnotations.InternalAnnotationAttributeOnPublicDomainAnalyzer : ElementProblemAnalyzer`1<IAttribute> {
    protected virtual void Run(IAttribute element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ConfigurableSeverityHighlightingAttribute("InternalAttributeOnPublicApi", "CSHARP")]
public class JetBrains.ReSharper.Features.Internal.ExternalAnnotations.InternalAttributeOnPublicApiWarning : object {
    private static string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IAttribute <Attribute>k__BackingField;
    public IAttribute Attribute { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public InternalAttributeOnPublicApiWarning(IAttribute attribute);
    [CompilerGeneratedAttribute]
public IAttribute get_Attribute();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.ExternalAnnotations.MissingCollectionAccessAttributeOnCollectionInstanceMethodAnalyzer : ElementProblemAnalyzer`1<IClassLikeDeclaration> {
    protected virtual void Run(IClassLikeDeclaration declaration, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    [CompilerGeneratedAttribute]
internal static void <Run>g__ProcessFunctionDeclaration|0_1(ICSharpFunctionDeclaration functionDeclaration, <>c__DisplayClass0_0& );
    [CompilerGeneratedAttribute]
internal static void <Run>g__ProcessPropertyDeclaration|0_2(IPropertyDeclaration propertyDeclaration, <>c__DisplayClass0_0& );
    [CompilerGeneratedAttribute]
internal static void <Run>g__ProcessRelatedPublicSymbol|0_3(ISymbolInfo symbolInfo, <>c__DisplayClass0_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.ExternalAnnotations.MissingCollectionAccessAttributeOnMethodReturnValueAnalyzer : ElementProblemAnalyzer`1<IMethodDeclaration> {
    protected virtual void Run(IMethodDeclaration methodDeclaration, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[RegisterConfigurableSeverityAttribute("TypeParameterEqualityUsage", "", "", "", "CodeSmell", "TypeParameterEqualityUsage", "", "", "", "", "", "0")]
[RegisterConfigurableSeverityAttribute("InternalAttributeOnPublicApi", "", "", "", "CodeSmell", "InternalAttributeOnPublicApi", "", "", "", "", "", "0")]
[RegisterConfigurableSeverityAttribute("CollectionAccessAnnotationMissing", "", "", "", "CodeSmell", "CollectionAccessAnnotationMissing", "", "", "", "", "", "0")]
public class JetBrains.ReSharper.Features.Internal.ExternalAnnotations.RegisterSeverityComponent7577CA1EF9B2FA5D67863A8FABC15B7B2C433125E059AD365BE288DC6FD15472 : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ElementProblemAnalyzerAttribute("0", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.ExternalAnnotations.TypeParameterEqualityUsageAnalyzer : ElementProblemAnalyzer`1<ICSharpExpression> {
    [CompilerGeneratedAttribute]
private CodeAnnotationsCache <codeAnnotationsCache>P;
    private static bool MatchTypesWithComparer;
    public TypeParameterEqualityUsageAnalyzer(CodeAnnotationsCache codeAnnotationsCache);
    protected virtual void Run(ICSharpExpression expression, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private void CheckSubstitutedTypeParameters(ICSharpExpression invocationExpression, IHighlightingConsumer consumer, ResolveResultWithInfo resolveResult);
    private void OnTypeEqualityUsed(IType type, ITreeNode bestMatchingNode, IHighlightingConsumer consumer);
    [NullableContextAttribute("2")]
private bool IsNotAnnotatedTypeParameter(IType type, ITreeNode context, ITypeParameter& typeParameter);
    private bool IsTypeParameterAnnotated(IType type, ITreeNode context, ITypeParameter typeParameter);
    [NullableContextAttribute("2")]
private static ICSharpExpression GetOperandThroughParenthesisAndCasts(ICSharpExpression expression);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Internal.ExternalAnnotations.TypeParameterEqualityUsageAnalyzer/<GetAllTypeParameters>d__9")]
private static IEnumerable`1<ITypeParameter> GetAllTypeParameters(IClrDeclaredElement declaredElement);
    [CompilerGeneratedAttribute]
internal static bool <IsTypeParameterAnnotated>g__IsMatchingParameterAnnotated|7_0(<>c__DisplayClass7_0& );
}
[ConfigurableSeverityHighlightingAttribute("TypeParameterEqualityUsage", "CSHARP")]
public class JetBrains.ReSharper.Features.Internal.ExternalAnnotations.TypeParameterEqualityUsageWarning : object {
    private static string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITypeParameter <TypeParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITypeParameter TypeParameter { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public TypeParameterEqualityUsageWarning(ITypeParameter typeParameter);
    [CompilerGeneratedAttribute]
public ITypeParameter get_TypeParameter();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.Internal.ExternalAnnotations.ZoneMarker : object {
}
[ActionAttribute("JetBrains.ReSharper.Features.Internal.Resources.Strings", "TestDataGeneratorActionText")]
public class JetBrains.ReSharper.Features.Internal.GoldGenerator.TestDataGeneratorAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    [NotNullAttribute]
private static FileSystemPath GetPathFromClipboard();
    [NotNullAttribute]
private static FileSystemPath GetNextTestName(FileSystemPath testDataPath);
    private static void ShowTooltip(string message, ITextControl textControl);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Internal.Inspections.errorsQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[RegisterConfigurableSeverityAttribute("SensitiveDataApiUsageTag", "", "", "", "CodeSmell", "SensitiveDataApiUsage", "", "", "SensitiveDataApiUsageTag", "", "", "4")]
[RegisterConfigurableSeverityAttribute("TreeNodeEnumerableCanBeUsedTag", "", "", "", "CodeSmell", "TreeNodeEnumerable can be used", "", "", "", "", "", "0")]
[RegisterConfigurableSeverityAttribute("RichTextDebugStringFormatting", "", "", "", "CodeSmell", "RichText instance used as a format argument", "", "", "RichText instance used as a format argument. This will result in rich text structure dump for debugging purposes, use .Text instead", "", "", "0")]
public class JetBrains.ReSharper.Features.Internal.Inspections.RegisterSeverityComponent22A6E38B9DFDFBC3C1788200AF8E7DB02C93A619AED84F9F8330A3226D06F1DE : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Features.Internal.Inspections.ReplaceWithTreeNodeEnumerableQuickFix : ModernScopedQuickFixBase {
    private IReferenceExpression myReferenceExpression;
    private string myEnumerableName;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public ReplaceWithTreeNodeEnumerableQuickFix(TreeNodeEnumerableCanBeUsedWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[RegisterStaticHighlightingsGroupAttribute("JetBrains.ReSharper.Features.Internal.Resources.Strings", "ReSharperValidationErrors_Text", "True")]
public class JetBrains.ReSharper.Features.Internal.Inspections.ReSharperValidatorErrors : object {
}
[ConfigurableSeverityHighlightingAttribute("RichTextDebugStringFormatting", "CSHARP")]
public class JetBrains.ReSharper.Features.Internal.Inspections.RichTextDebugStringFormattingWarning : object {
    private static string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ICSharpExpression <RichTextExpression>k__BackingField;
    public ICSharpExpression RichTextExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public RichTextDebugStringFormattingWarning(ICSharpExpression richTextExpression);
    [CompilerGeneratedAttribute]
public ICSharpExpression get_RichTextExpression();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.Inspections.RichTextToStringUsageAnalyzer : ElementProblemAnalyzer`1<ICSharpExpression> {
    [CompilerGeneratedAttribute]
private FormattingFunctionInvocationInfoProvider <formattingInvocationProvider>P;
    private static ClrTypeName ourRichTextTypeName;
    private static Key`1<IDeclaredType> ourRichTextTypeKey;
    public RichTextToStringUsageAnalyzer(FormattingFunctionInvocationInfoProvider formattingInvocationProvider);
    private static RichTextToStringUsageAnalyzer();
    public sealed virtual bool ShouldRun(IFile file, ElementProblemAnalyzerData data);
    protected virtual void Run(ICSharpExpression expression, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    public bool IsUnderToStringInvocation(ICSharpExpression expression, IDeclaredType richTextType);
    private bool CheckIsFormatArgument(IExpression expression, IDeclaredType richTextType);
    [NullableContextAttribute("2")]
[PureAttribute]
public static bool IsStringConcatOperator(IReference reference);
}
[ConfigurableSeverityHighlightingAttribute("SensitiveDataApiUsageTag", "CSHARP")]
public class JetBrains.ReSharper.Features.Internal.Inspections.SensitiveDataApiUsageWarning : object {
    private static string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITreeNode <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeElement <Cls>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITreeNode Node { get; }
    public ITypeElement Cls { get; }
    public string Description { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public SensitiveDataApiUsageWarning(ITreeNode node, ITypeElement cls, string description);
    [CompilerGeneratedAttribute]
public ITreeNode get_Node();
    [CompilerGeneratedAttribute]
public ITypeElement get_Cls();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.Inspections.TreeNodeCollectionUsageAnalyzer : ElementProblemAnalyzer`1<IReferenceExpression> {
    [NotNullAttribute]
private static ClrTypeName JetbrainsResharperPsiTreeTreenodecollection;
    private static TreeNodeCollectionUsageAnalyzer();
    protected virtual void Run(IReferenceExpression referenceExpression, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ConfigurableSeverityHighlightingAttribute("TreeNodeEnumerableCanBeUsedTag", "CSHARP")]
public class JetBrains.ReSharper.Features.Internal.Inspections.TreeNodeEnumerableCanBeUsedWarning : object {
    private static string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IReferenceExpression <ReferenceExpression>k__BackingField;
    public IReferenceExpression ReferenceExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public TreeNodeEnumerableCanBeUsedWarning(IReferenceExpression referenceExpression);
    [CompilerGeneratedAttribute]
public IReferenceExpression get_ReferenceExpression();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ZoneMarkerAttribute]
internal class JetBrains.ReSharper.Features.Internal.Inspections.ZoneMarker : object {
}
public class JetBrains.ReSharper.Features.Internal.InternalContextActions : object {
    [NotNullAttribute]
public static SubmenuAnchor ToolsAnchor;
    private static InternalContextActions();
}
[ActionAttribute("JetBrains.ReSharper.Features.Internal.Resources.Strings", "ToggleInterruptionActionText")]
public class JetBrains.ReSharper.Features.Internal.Interruption.ToggleInterruptionAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.ReSharper.Features.Internal.Resources.Strings", "ShowMsBuildTargetsActionText")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.MsBuild.ShowTargetsAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private static IDiagramGraph BuildGraph(IProject project);
    private static void AddNode(Dictionary`2<string, IDiagramGraphNode> nodes, KeyValuePair`2<string, ProjectTargetInstance> pair, SimpleDiagramGraph graph);
}
[ZoneMarkerAttribute]
internal class JetBrains.ReSharper.Features.Internal.MsBuild.ZoneMarker : object {
}
internal class JetBrains.ReSharper.Features.Internal.PartsOnPsi.PartsCatalogueBuilder : object {
    private Dictionary`2<ITypeElement, PartCatalogueType> myCatalogueTypes;
    private CompactMap`2<IType, PartCatalogueType> myAllTypes;
    private CompactMap`2<IModule, PartCatalogueAssembly> myAssemblies;
    private PartCatalogueAssembly AddAssembly(ITypeElement partTypeElement);
    public sealed virtual IEnumerable`1<PartCatalogueAssembly> GetAssemblies();
    public sealed virtual IEnumerable`1<PartCatalogueType> GetParts();
    public void AddInitialCatalogueType(ITypeElement partTypeElement);
    private PartCatalogueType CreateCatalogueType(ITypeElement partTypeElement);
    private object ParameterToAttributeValue(AttributeValue attributeValue);
    private static string ToPropertyName(string name);
    public void BuildTypes();
    private void BuildPartType(ITypeElement typeElement, PartCatalogueType catalogueType);
    private List`1<PartCatalogueAttribute> CreateAttributes(ITypeElement typeElement);
    private PartCatalogueAttribute CreatePartAttribute(IAttributeInstance attributeInstance);
    [CanBeNullAttribute]
private PartCatalogueType AddType(IType type);
    [CanBeNullAttribute]
private PartCatalogueType CreateTypePart(IType type);
    private ICollection`1<PartCatalogueType> GetBaseTypes(ITypeElement typeElement);
    private ICollection`1<PartCatalogueType> GetTypeParameter(IDeclaredType declaredType);
    [CompilerGeneratedAttribute]
private object <ParameterToAttributeValue>b__8_0(AttributeValue x);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Features.Internal.PartsOnPsi.PartsOnPsiBuilder : object {
    private ISolution mySolution;
    private IAttributedTypesCache myAttributedTypesCache;
    private IPsiServices myServices;
    private IPartCatalogueFactory myFactory;
    public PartsOnPsiBuilder(ISolution solution, IAttributedTypesCache attributedTypesCache, IPsiServices services);
    public IPartsCatalogue CreateCatalog();
}
public class JetBrains.ReSharper.Features.Internal.Performance.SingleTaskCounter : ObservableObject {
    private string myName;
    private int myQueuedCount;
    private int myExecutedCount;
    public Boolean modreq(System.Runtime.CompilerServices.IsVolatile) IsReplacing;
    public string Name { get; }
    public int ExecutedCount { get; }
    public int QueuedCount { get; }
    public SingleTaskCounter(string name, int initialCount);
    public string get_Name();
    public int get_ExecutedCount();
    public int get_QueuedCount();
    public void CountExecutedDirectly();
    public void CountExecutedFromQueue();
    public void CountQueued();
}
public class JetBrains.ReSharper.Features.Internal.Performance.TaskMonitorToolWindowContent : AAutomationRecord {
    [CompilerGeneratedAttribute]
private TaskMonitorViewModel <TaskMonitorViewModel>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public TaskMonitorViewModel TaskMonitorViewModel { get; public set; }
    public TaskMonitorToolWindowContent(TaskMonitorViewModel TaskMonitorViewModel);
    [CompilerGeneratedAttribute]
private TaskMonitorToolWindowContent(TaskMonitorToolWindowContent original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public TaskMonitorViewModel get_TaskMonitorViewModel();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TaskMonitorViewModel(TaskMonitorViewModel value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(TaskMonitorToolWindowContent left, TaskMonitorToolWindowContent right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(TaskMonitorToolWindowContent left, TaskMonitorToolWindowContent right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(AAutomationRecord other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(TaskMonitorToolWindowContent other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual AAutomationRecord <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(TaskMonitorViewModel& TaskMonitorViewModel);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Internal.Performance.TaskMonitorViewModel : ObservableObject {
    private int myQueueLength;
    private int myMaxQueueLength;
    private TaskQueueCounter myQueueCounter;
    private SequentialLifetimes mySequentialLifetimes;
    private ReentrancyGuard myReentrancyGuard;
    private bool myIsRunning;
    [CompilerGeneratedAttribute]
private ICommand <StartStopCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <ResetCommand>k__BackingField;
    public ObservableCollection`1<SingleTaskCounter> Counters { get; }
    public bool IsRunning { get; }
    public ICommand StartStopCommand { get; }
    public ICommand ResetCommand { get; }
    public int QueueLength { get; }
    public int QueueLengthMax { get; }
    public TaskMonitorViewModel(Lifetime lifetime, TaskQueueCounter counter, IShellLocks locks);
    private void StartStopAction();
    public ObservableCollection`1<SingleTaskCounter> get_Counters();
    public bool get_IsRunning();
    [CompilerGeneratedAttribute]
public ICommand get_StartStopCommand();
    [CompilerGeneratedAttribute]
public ICommand get_ResetCommand();
    private void OnExecutedDirectly(string s);
    private void OnExecutedFromQueue(string s);
    private void OnQueued(string s);
    public int get_QueueLength();
    public int get_QueueLengthMax();
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0();
    [CompilerGeneratedAttribute]
private void <StartStopAction>b__7_0(Lifetime lifetime);
}
[ActionAttribute("JetBrains.ReSharper.Features.Internal.Resources.Strings", "TaskMonitorActionText")]
public class JetBrains.ReSharper.Features.Internal.Performance.TaskMonitorWindowActionHandler : ActivateToolWindowActionHandler`1<TaskMonitorWindowDescriptor> {
}
[ToolWindowDescriptorAttribute("16")]
public class JetBrains.ReSharper.Features.Internal.Performance.TaskMonitorWindowDescriptor : ToolWindowDescriptor {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Internal.Performance.TaskQueueCounter : object {
    private static TaskPriority Priority;
    private Lifetime myLifetime;
    private object myLockObject;
    private Dictionary`2<string, SingleTaskCounter> myTasksAndCounters;
    private ObservableCollection`1<SingleTaskCounter> mySingleTaskCounters;
    private JetDispatcher myJetDispatcher;
    public ObservableCollection`1<SingleTaskCounter> List { get; }
    public TaskQueueCounter(Lifetime lifetime, IShellLocks locks);
    public ObservableCollection`1<SingleTaskCounter> get_List();
    public void CountExecutedDirectly(string taskName);
    public void CountExecutedFromQueue(string taskName);
    public void CountQueued(string taskName);
    public void Reset();
    private void AddNewCounter(string taskName, SingleTaskCounter singleTaskCounter);
    private void ReInsert(SingleTaskCounter singleTaskCounter);
}
public class JetBrains.ReSharper.Features.Internal.ProjectDependenciesBuilder.AbstractGraphWriter.GraphWriter`2 : object {
    private IGraph`2<TGraphGroupNode, TGraphNode> myGraph;
    private Dictionary`2<TGraphNode, int> myNodeIndices;
    private Dictionary`2<TGraphGroupNode, int> myGroupNodeIndices;
    private static string FileHeader;
    private static string FileFooter;
    public GraphWriter`2(IGraph`2<TGraphGroupNode, TGraphNode> graph);
    public void Write(StreamWriter writer);
    private void WriteNodesAndEdges(StreamWriter writer);
    private int ToInt(TGraphGroupNode node);
    private int ToInt(TGraphNode node);
    private void WriteNode(StreamWriter writer, TGraphNode index, TGraphGroupNode groupIndex);
}
public interface JetBrains.ReSharper.Features.Internal.ProjectDependenciesBuilder.AbstractGraphWriter.IGraph`2 {
    public IEnumerable`1<TGraphGroupNode> Groups { get; }
    public IEnumerable`1<TGraphNode> Nodes { get; }
    public TGraphGroupNode RootGroup { get; }
    public abstract virtual IEnumerable`1<TGraphGroupNode> get_Groups();
    public abstract virtual IEnumerable`1<TGraphNode> get_Nodes();
    public abstract virtual TGraphGroupNode OwnerGroup(TGraphNode node);
    public abstract virtual IEnumerable`1<TGraphNode> Ancestors(TGraphNode node);
    public abstract virtual IEnumerable`1<TGraphNode> Descendants(TGraphNode node);
    public abstract virtual string PresentGroup(TGraphGroupNode groupIndex);
    public abstract virtual string PresentNode(TGraphNode node);
    public abstract virtual TGraphGroupNode get_RootGroup();
}
public class JetBrains.ReSharper.Features.Internal.ProjectDependenciesBuilder.BuildDependenciesController : CheckedTreeViewController`1<ProjectInHierarchyItem> {
    private DependenciesBuilder myDependenciesBuilder;
    private ICollection`1<ProjectInHierarchyItem> mySelectedItems;
    public BuildDependenciesController(ICollection`1<ProjectInHierarchyItem> selectedItems, Comparison`1<ProjectInHierarchyItem> nodesComparer, DependenciesBuilder dependenciesBuilder);
    public void AddAncestors();
    public void AddDescendants();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Internal.ProjectDependenciesBuilder.BuildDependenciesFeatureManager : object {
    private IContextBoundSettingsStoreLive myBoundSettingsStore;
    public bool ExcludeTerminalNodes { get; public set; }
    public BuildDependenciesFeatureManager(Lifetime lifetime, ISettingsStore settingsStore, ISolution solution);
    public bool get_ExcludeTerminalNodes();
    public void set_ExcludeTerminalNodes(bool value);
    public bool IsIncluded(string name);
    public void SetExcluded(IEnumerable`1<string> excluded);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "JetBrains.ReSharper.Features.Internal.Resources.Strings", "BuildDependenciesFeatueSettingDescription")]
public class JetBrains.ReSharper.Features.Internal.ProjectDependenciesBuilder.BuildDependenciesManagerSettingsKey : object {
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.Features.Internal.Resources.Strings", "ExcludedProjectNamesSettingDescription")]
public IIndexedEntry`2<string, string> ExcludedProjects;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Internal.Resources.Strings", "ExcludeTerminalNodesSettingDescription")]
public bool ExcludeTerminalNodes;
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Internal.ProjectDependenciesBuilder.BuildDependenciesWindowManagerStub : object {
    public virtual Nullable`1<bool> Show(BuildDependenciesController controller, Boolean& managerExcludeTerminalNodes);
}
public class JetBrains.ReSharper.Features.Internal.ProjectDependenciesBuilder.CheckedTreeViewController`1 : object {
    [CompilerGeneratedAttribute]
private ICollection`1<TNodeType> <AllItems>k__BackingField;
    private List`1<TNodeType> myRoots;
    private object myInternalChangeToken;
    public ICollection`1<TNodeType> AllItems { get; }
    [UsedImplicitlyAttribute]
public ICollection`1<TNodeType> Roots { get; }
    public CheckedTreeViewController`1(ICollection`1<TNodeType> allItems, Comparison`1<TNodeType> nodesComparer);
    [CompilerGeneratedAttribute]
public ICollection`1<TNodeType> get_AllItems();
    public ICollection`1<TNodeType> get_Roots();
    private void Handler(PropertyChangedEventArgs`1<Nullable`1<bool>> propertyChangedEventArgs, TNodeType item);
}
public class JetBrains.ReSharper.Features.Internal.ProjectDependenciesBuilder.DependenciesBuilder : object {
    [CompilerGeneratedAttribute]
private bool <FilterTerminating>k__BackingField;
    private Dictionary`2<int, int> myGroups;
    private BidirectionalMap`2<int, string> myGroupNames;
    private BidirectionalMap`2<IProject, int> myIndexMap;
    private IModuleReferencesResolveStore myModuleReferencesResolveStore;
    private List`1<Pair`2<int, int>> myRelations;
    private HashSet`1<int> myTerminatingNodes;
    private ISolution mySolution;
    private OneToListMap`2<int, int> myAllAncestors;
    private OneToListMap`2<int, int> myAllDescendants;
    private List`1<IProject> myProjects;
    private HashSet`1<int> myIncludedProjects;
    private HashSet`1<int> myIncludedGroups;
    public bool FilterTerminating { get; public set; }
    public IEnumerable`1<int> Groups { get; }
    public IEnumerable`1<int> Nodes { get; }
    public int RootGroup { get; }
    public DependenciesBuilder(ISolution solution);
    [CompilerGeneratedAttribute]
public bool get_FilterTerminating();
    [CompilerGeneratedAttribute]
public void set_FilterTerminating(bool value);
    public void AddSurroundingNodes(ICollection`1<ProjectInHierarchyItem> allItems, bool anc);
    private HashSet`1<int> GetAllSurroundingNodes(IEnumerable`1<int> nodes, bool anc);
    private void AnalyseReferences(List`1<IProject> projects, IProgressIndicator pi);
    private void BuildGroups(IProgressIndicator pi);
    private bool IsTerminating(int groupIndex, int index);
    public void Analyse(IProgressIndicator pi);
    private void BuildAllRelations(IProgressIndicator pi);
    public void Dump(List`1<ProjectInHierarchyItem> items, IProgressIndicator pi);
    private void AnalysePath(IGraph`2<int, int> graph);
    private IEnumerable`1<IProject> GetImmediateAncestorsWithoutExcluded(IProject project);
    private IEnumerable`1<IProject> GetImmediateAncestors(IProject project);
    private HashSet`1<IProject> GetAllAncestors(IEnumerable`1<IProject> roots);
    private void Scan(IProject root, HashSet`1<IProject> all);
    public List`1<ProjectInHierarchyItem> BuildNodes(BuildDependenciesFeatureManager manager);
    public sealed virtual IEnumerable`1<int> get_Groups();
    public sealed virtual IEnumerable`1<int> get_Nodes();
    private bool IsNodeIncluded(int project);
    public sealed virtual int OwnerGroup(int node);
    public sealed virtual IEnumerable`1<int> Ancestors(int node);
    public sealed virtual IEnumerable`1<int> Descendants(int node);
    public sealed virtual string PresentGroup(int groupIndex);
    public sealed virtual string PresentNode(int node);
    public sealed virtual int get_RootGroup();
    public sealed virtual bool Equals(int x, int y);
    public sealed virtual int GetHashCode(int obj);
    [CompilerGeneratedAttribute]
private IProject <GetImmediateAncestors>b__27_0(IProjectToProjectReference x);
}
public interface JetBrains.ReSharper.Features.Internal.ProjectDependenciesBuilder.ICheckableTreeNode`1 {
    [UsedImplicitlyAttribute]
public IProperty`1<Nullable`1<bool>> IsCheckedTriState { get; }
    [CanBeNullAttribute]
public T Parent { get; }
    [NotNullAttribute]
public List`1<T> Children { get; }
    public abstract virtual IProperty`1<Nullable`1<bool>> get_IsCheckedTriState();
    public abstract virtual T get_Parent();
    public abstract virtual List`1<T> get_Children();
}
public class JetBrains.ReSharper.Features.Internal.ProjectDependenciesBuilder.ProjectInHierarchyItem : object {
    private IProjectModelElement myElement;
    [CompilerGeneratedAttribute]
private ProjectInHierarchyItem <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectInHierarchyItemKinds <ItemKind>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Nullable`1<bool>> <IsCheckedTriState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ProjectInHierarchyItem> <Children>k__BackingField;
    public ProjectInHierarchyItem Parent { get; }
    public ProjectInHierarchyItemKinds ItemKind { get; }
    public int Index { get; }
    [UsedImplicitlyAttribute]
public IProperty`1<Nullable`1<bool>> IsCheckedTriState { get; public set; }
    [UsedImplicitlyAttribute]
public string Name { get; private set; }
    [UsedImplicitlyAttribute]
public string Description { get; private set; }
    public List`1<ProjectInHierarchyItem> Children { get; }
    public IProjectModelElement Element { get; }
    public ProjectInHierarchyItem(IProjectModelElement element, ProjectInHierarchyItem parent, ProjectInHierarchyItemKinds itemKind, int index, string name, string description, bool isIncluded);
    [CompilerGeneratedAttribute]
public sealed virtual ProjectInHierarchyItem get_Parent();
    [CompilerGeneratedAttribute]
public ProjectInHierarchyItemKinds get_ItemKind();
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<Nullable`1<bool>> get_IsCheckedTriState();
    [CompilerGeneratedAttribute]
public void set_IsCheckedTriState(IProperty`1<Nullable`1<bool>> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<ProjectInHierarchyItem> get_Children();
    public IProjectModelElement get_Element();
}
public enum JetBrains.ReSharper.Features.Internal.ProjectDependenciesBuilder.ProjectInHierarchyItemKinds : Enum {
    public int value__;
    public static ProjectInHierarchyItemKinds Group;
    public static ProjectInHierarchyItemKinds Project;
}
[ActionAttribute("JetBrains.ReSharper.Features.Internal.Resources.Strings", "ShowDependencyGraphInYEdActionText")]
public class JetBrains.ReSharper.Features.Internal.ProjectDependenciesBuilder.ShowDependenciesAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("Dump file dependencies")]
public class JetBrains.ReSharper.Features.Internal.Psi.DumpFileDependenciesAction : object {
    [NullableContextAttribute("1")]
public sealed virtual bool Update(IDataContext dataContext, ActionPresentation presentation, DelegateUpdate nextUpdate);
    [NullableContextAttribute("1")]
public sealed virtual void Execute(IDataContext dataContext, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.ReSharper.Features.Internal.Resources.Strings", "TraceFalseError_Text")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.Psi.TraceUnresolvedErrorAction : object {
    [NullableContextAttribute("1")]
public sealed virtual bool Update(IDataContext dataContext, ActionPresentation presentation, DelegateUpdate nextUpdate);
    [NullableContextAttribute("1")]
public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
    [NullableContextAttribute("1")]
public sealed virtual void Execute(IDataContext dataContext, DelegateExecute nextExecute);
    [NullableContextAttribute("1")]
private IReference TryFindReference(IDataContext dataContext);
    [NullableContextAttribute("1")]
private static ITypeElement TryFindResolvedTypeElementInQualifier(ITreeNode treeNode);
    [CompilerGeneratedAttribute]
internal static void <Execute>g__EnableTraceLogsForDiagnostic|2_0(<>c__DisplayClass2_0& );
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static void <Execute>g__Log|2_1(string message, <>c__DisplayClass2_0& );
    [CompilerGeneratedAttribute]
internal static void <Execute>g__LogDiagnosticsAndTryRestoreCaches|2_2(<>c__DisplayClass2_0& );
    [CompilerGeneratedAttribute]
internal static void <Execute>g__RestoreOutdatedFilesInCaches|2_3(<>c__DisplayClass2_0& );
}
[ActionAttribute("DumpXamlCachesAction", "JetBrains.ReSharper.Features.Internal.Resources.Strings", "DumpXamlCachesActionText")]
public class JetBrains.ReSharper.Features.Internal.Psi.Xaml.DumpXamlCachesAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.Internal.Psi.Xaml.ZoneMarker : object {
}
[ActionAttribute("JetBrains.ReSharper.Features.Internal.Resources.Strings", "CleanupPSICachesActionText")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.PsiCleanup.PsiCleanupAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Features.Internal.PsiCleanup.PsiCleanupOnMemoryIndicatorClick : object {
    public PsiCleanupOnMemoryIndicatorClick(Lifetime lifetime, ISolution solution, IShellLocks shellLocks, MemoryUsageIndicatorBase memoryUsageIndicator);
}
[ActionAttribute("PsiFilesCacheStats", "JetBrains.ReSharper.Features.Internal.Resources.Strings", "DumpPsiFilesCacheActionText")]
public class JetBrains.ReSharper.Features.Internal.PsiFilesCache.PsiFilesCacheStats : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
internal class JetBrains.ReSharper.Features.Internal.PsiModuleBrowser.PsiModuleAdditionalInfoNode : object {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string PropertyName { get; }
    public string Value { get; }
    public PsiModuleAdditionalInfoNode(string propertyName, string value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public string get_Value();
}
internal class JetBrains.ReSharper.Features.Internal.PsiModuleBrowser.PsiModuleBrowserDescriptor : TreeModelBrowserDescriptorPsi {
    private PsiModuleBrowserPresenter myPresenter;
    private PsiModuleTreeModel myModel;
    [CompilerGeneratedAttribute]
private ITreePanelActions <BrowserPanel>k__BackingField;
    public ITreePanelActions BrowserPanel { get; public set; }
    public TreeModel Model { get; }
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> Presenter { get; }
    public bool QuickSearchSupported { get; }
    public bool DragDropSupported { get; }
    public PsiModuleBrowserDescriptor(ISolution solution, IPsiModules psiModules);
    [CompilerGeneratedAttribute]
public ITreePanelActions get_BrowserPanel();
    [CompilerGeneratedAttribute]
public void set_BrowserPanel(ITreePanelActions value);
    public virtual TreeModel get_Model();
    public virtual StructuredPresenter`2<TreeModelNode, IPresentableItem> get_Presenter();
    public virtual bool get_QuickSearchSupported();
    public virtual bool get_DragDropSupported();
    public void OnChanged();
    public virtual bool ExpandNodeInitially(TreeModelNode modelNode);
    public virtual bool Navigate(TreeModelNode node, PopupWindowContextSource windowContext, bool transferFocus, TabOptions options);
}
public class JetBrains.ReSharper.Features.Internal.PsiModuleBrowser.PsiModuleBrowserPanelAutomation : AAutomation {
    public IProperty`1<ITreePanelActions> PanelActions;
    private PsiModuleBrowserDescriptor myDescriptor;
    public TreeModelBrowserDescriptorPsi Descriptor { get; }
    public PsiModuleBrowserPanelAutomation(Lifetime lifetime, IPsiModules psiModules, ISolution solution, ChangeManager changeManager);
    public TreeModelBrowserDescriptorPsi get_Descriptor();
}
internal class JetBrains.ReSharper.Features.Internal.PsiModuleBrowser.PsiModuleBrowserPresenter : TreeModelBrowserPresenter {
    private static void ModulePresenter(IPsiModule module, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    private static void SourceFilePresenter(IPsiSourceFile sourceFile, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    private static void PsiModuleReferenceNodePresenter(PsiModuleReferencesGroupNode referencesGroupNode, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    private static void PsiModuleReferencedByNodePresenter(PsiModuleReferencedByGroupNode referenceGroupNode, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    private static void PsiModuleAdditionalInfoNodePresenter(PsiModuleAdditionalInfoNode value, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    private static void ModuleReferencePresenter(GroupedReferences referenceNode, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
    private static void ModuleReferencedByPresenter(PsiModuleReferencedByNode referenceNode, IPresentableItem item, TreeModelNode structureelement, PresentationState state);
}
[ToolWindowDescriptorAttribute("16")]
public class JetBrains.ReSharper.Features.Internal.PsiModuleBrowser.PsiModuleBrowserToolWindowDescriptor : ToolWindowDescriptor {
}
internal class JetBrains.ReSharper.Features.Internal.PsiModuleBrowser.PsiModuleReferencedByGroupNode : object {
    private IPsiModule myModule;
    public IPsiModule Module { get; }
    public PsiModuleReferencedByGroupNode(IPsiModule module);
    public IPsiModule get_Module();
    protected bool Equals(PsiModuleReferencedByGroupNode other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class JetBrains.ReSharper.Features.Internal.PsiModuleBrowser.PsiModuleReferencedByNode : object {
    private IPsiModule myModule;
    public IPsiModule Module { get; }
    public PsiModuleReferencedByNode(IPsiModule module);
    public IPsiModule get_Module();
}
internal class JetBrains.ReSharper.Features.Internal.PsiModuleBrowser.PsiModuleReferencesGroupNode : object {
    private IPsiModule myModule;
    public IPsiModule Module { get; }
    public PsiModuleReferencesGroupNode(IPsiModule module);
    public IPsiModule get_Module();
    protected bool Equals(PsiModuleReferencesGroupNode other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class JetBrains.ReSharper.Features.Internal.PsiModuleBrowser.PsiModuleTreeModel : TreeDemandModel {
    private PsiModules myPsiModules;
    public PsiModuleTreeModel(IPsiModules psiModules);
    protected virtual bool HasChildren(TreeModelNode modelNode);
    protected virtual IEnumerable GetChildren(TreeModelNode modelNode);
    [CanBeNullAttribute]
private static IPsiModule GetModuleFromNode(object dataValue);
    private IEnumerable`1<IPsiModule> GetReferencedBy(IPsiModule module);
}
[ActionAttribute("PSI Module Browser")]
public class JetBrains.ReSharper.Features.Internal.PsiModuleBrowser.ShowPsiModuleBrowserAction : ActivateToolWindowActionHandler`1<PsiModuleBrowserToolWindowDescriptor> {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Features.Internal.PsiTests.ForCurrentSourceFileActionBase : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    protected virtual bool ShouldProcessSourceFile(IPsiSourceFile sourceFile);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    protected abstract virtual void Execute(IPsiSourceFile sourceFile, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Features.Internal.PsiTests.ForCurrentSourceFileRepeatedlyRunActionBase : ForCurrentSourceFileActionBase {
    protected TimeSpan TestDuration { get; }
    protected virtual TimeSpan get_TestDuration();
    protected sealed virtual void Execute(IPsiSourceFile sourceFile, IProgressIndicator progress);
    protected abstract virtual void ExecuteRun(IPsiSourceFile sourceFile, int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Features.Internal.PsiTests.ForEachFileActionBase : object {
    private static Key`1<Dictionary`2<Type, PreviousRun>> ourPreviousRunKey;
    private static ForEachFileActionBase();
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private void ExecuteCore(IDataContext context);
    private List`1<IPsiSourceFile> CollectFilesList(ISolution solution);
    public static string GetActionName(IExecutableAction executableAction, ISolution solution);
    [PureAttribute]
protected virtual bool ShouldProcessProjectFile(IProjectFile projectFile);
    [PureAttribute]
protected virtual bool ShouldProcessSourceFile(IPsiSourceFile sourceFile);
    [PureAttribute]
protected virtual bool ShouldProcessLanguage(PsiLanguageType languageType);
    [MustDisposeResourceAttribute]
protected virtual IDisposable ExecuteSetupPerRun(ISolution solution, StringBuilder runLog);
    protected virtual void PrepareForRun();
    protected abstract virtual void RunForFile(IPsiSourceFile sourceFile, FileContext fileContext);
    private void DumpResults(DateTime startTime, int runCount, TimeSpan totalDuration, TimeSpan runMeasurement, TimeSpan averageRunMeasurement, string runLog, ISolution solution, IDataContext dataContext, List`1<FileResult> finalResults);
    private ValueTuple`2<int, TimeSpan> MedianWithPreviousResults(List`1<TempResult> tempResults, TimeSpan runMeasurement, ISolution solution);
    private static List`1<FileResult> PrepareFinalResults(List`1<TempResult> tempResults, ISolution solution);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ActionAttribute("GetAllCSharpPsiFilesAction", "Get all C# IFiles")]
public class JetBrains.ReSharper.Features.Internal.PsiTests.GetAllCSharpPsiFilesAction : TraverseAllPsiFilesActionBase {
    protected virtual bool ShouldProcessSourceFile(IPsiSourceFile sourceFile);
    protected virtual void RunForFile(IPsiSourceFile sourceFile, FileContext fileContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ActionAttribute("GetAllCSharpPsiFilesAndTraverseAction", "Get all C# IFiles + traverse trees")]
public class JetBrains.ReSharper.Features.Internal.PsiTests.GetAllCSharpPsiFilesAndTraverseAction : TraverseAllPsiFilesActionBase {
    protected virtual bool ShouldProcessSourceFile(IPsiSourceFile sourceFile);
    protected virtual void RunForFile(IPsiSourceFile sourceFile, FileContext fileContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ActionAttribute("GetAllCSharpPsiFilesShrinkedAction", "Get all C# IFiles in shrinked form")]
public class JetBrains.ReSharper.Features.Internal.PsiTests.GetAllCSharpPsiFilesShrinkedAction : TraverseAllPsiFilesActionBase {
    protected virtual bool ShouldProcessSourceFile(IPsiSourceFile sourceFile);
    protected virtual void RunForFile(IPsiSourceFile sourceFile, FileContext fileContext);
}
[ActionAttribute("GetAllPsiFilesAction", "Get all IFiles")]
public class JetBrains.ReSharper.Features.Internal.PsiTests.GetAllPsiFilesAction : TraverseAllPsiFilesActionBase {
    [NullableContextAttribute("1")]
protected virtual void RunForFile(IPsiSourceFile sourceFile, FileContext fileContext);
}
[ActionAttribute("GetAllPsiFilesAndTraverseAction", "Get all IFiles + traverse trees")]
public class JetBrains.ReSharper.Features.Internal.PsiTests.GetAllPsiFilesAndTraverseAction : TraverseAllPsiFilesActionBase {
    [NullableContextAttribute("1")]
protected virtual void RunForFile(IPsiSourceFile sourceFile, FileContext fileContext);
}
[ActionAttribute("LexAllDocumentsAction", "Lex all documents (w/o cache)")]
public class JetBrains.ReSharper.Features.Internal.PsiTests.LexAllDocumentsAction : ForEachFileActionBase {
    [NullableContextAttribute("1")]
protected virtual void RunForFile(IPsiSourceFile sourceFile, FileContext fileContext);
}
[ActionAttribute("LoadAllDocumentsAction", "Load all documents (w/o cache)")]
public class JetBrains.ReSharper.Features.Internal.PsiTests.LoadAllDocumentsAction : ForEachFileActionBase {
    [NullableContextAttribute("1")]
protected virtual void RunForFile(IPsiSourceFile sourceFile, FileContext fileContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ActionAttribute("MakeSureStubTreeNodeCacheFilledAction", "Make sure stub tree node cache is filled")]
public class JetBrains.ReSharper.Features.Internal.PsiTests.MakeSureStubTreeNodeCacheFilledAction : ForEachFileActionBase {
    protected virtual bool ShouldProcessSourceFile(IPsiSourceFile sourceFile);
    protected virtual IDisposable ExecuteSetupPerRun(ISolution solution, StringBuilder runLog);
    protected virtual void RunForFile(IPsiSourceFile sourceFile, FileContext fileContext);
}
[ActionAttribute("ParseAllCSharpPsiFilesAction", "Parse all C# IFiles")]
public class JetBrains.ReSharper.Features.Internal.PsiTests.ParseAllCSharpPsiFilesAction : ParseAllCSharpPsiFilesActionBase {
    protected bool ExpandChameleons { get; }
    protected virtual bool get_ExpandChameleons();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Features.Internal.PsiTests.ParseAllCSharpPsiFilesActionBase : TraverseAllPsiFilesActionBase {
    protected bool ExpandChameleons { get; }
    protected virtual bool ShouldProcessSourceFile(IPsiSourceFile sourceFile);
    protected virtual bool get_ExpandChameleons();
    protected virtual void RunForFile(IPsiSourceFile sourceFile, FileContext fileContext);
}
[ActionAttribute("ParseAllCSharpPsiFilesOpenChameleonsAction", "Parse all C# IFiles (open chameleons)")]
public class JetBrains.ReSharper.Features.Internal.PsiTests.ParseAllCSharpPsiFilesOpenChameleonsAction : ParseAllCSharpPsiFilesActionBase {
    protected bool ExpandChameleons { get; }
    protected virtual bool get_ExpandChameleons();
}
[ActionAttribute("ResolveAllCSharpReferencesAction", "Resolve all references in C# files (sequential)")]
public class JetBrains.ReSharper.Features.Internal.PsiTests.ResolveAllCSharpReferencesAction : ResolveAllCSharpReferencesActionBase {
    [NullableContextAttribute("1")]
protected virtual int ResolveAllReferences(IFile psiFile);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Features.Internal.PsiTests.ResolveAllCSharpReferencesActionBase : ForEachFileActionBase {
    protected virtual bool ShouldProcessSourceFile(IPsiSourceFile sourceFile);
    protected virtual IDisposable ExecuteSetupPerRun(ISolution solution, StringBuilder runLog);
    protected virtual void RunForFile(IPsiSourceFile sourceFile, FileContext fileContext);
    protected abstract virtual int ResolveAllReferences(IFile psiFile);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ActionAttribute("ResolveAllCSharpReferencesSmartAction", "Resolve all references in C# files (smart)")]
public class JetBrains.ReSharper.Features.Internal.PsiTests.ResolveAllCSharpReferencesSmartAction : ResolveAllCSharpReferencesActionBase {
    protected virtual int ResolveAllReferences(IFile psiFile);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ActionAttribute("ResolveAllCSharpReferencesSmartParallelAction", "Resolve all references in C# files (smart, parallel)")]
public class JetBrains.ReSharper.Features.Internal.PsiTests.ResolveAllCSharpReferencesSmartParallelAction : ResolveAllCSharpReferencesActionBase {
    protected virtual int ResolveAllReferences(IFile psiFile);
    public static int ResolveAll(IFile psiFile);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ActionAttribute("ResolveAllReferencesInCurrentFileAction", "Resolve all references in current file for 3 minutes")]
public class JetBrains.ReSharper.Features.Internal.PsiTests.ResolveAllReferencesInCurrentFileAction : ForCurrentSourceFileRepeatedlyRunActionBase {
    protected virtual void ExecuteRun(IPsiSourceFile sourceFile, int index);
    private static void ResolveAllReferences(IFile psiFile);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Features.Internal.PsiTests.RunDaemonAllFilesActionBase : ForEachFileActionBase {
    protected DaemonProcessKind DaemonProcessKind { get; }
    protected virtual IDisposable ExecuteSetupPerRun(ISolution solution, StringBuilder runLog);
    protected abstract virtual DaemonProcessKind get_DaemonProcessKind();
    protected virtual void RunForFile(IPsiSourceFile sourceFile, FileContext fileContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ActionAttribute("RunFindUsagesForAllDeclarationAction", "Run find usages for all declarations in solution")]
public class JetBrains.ReSharper.Features.Internal.PsiTests.RunFindUsagesForAllDeclarationAction : ForEachFileActionBase {
    protected virtual IDisposable ExecuteSetupPerRun(ISolution solution, StringBuilder runLog);
    protected virtual void RunForFile(IPsiSourceFile sourceFile, FileContext fileContext);
}
[ActionAttribute("RunGlobalDaemonAllFilesAction", "Run daemon for all files")]
public class JetBrains.ReSharper.Features.Internal.PsiTests.RunGlobalDaemonAllFilesAction : RunDaemonAllFilesActionBase {
    protected DaemonProcessKind DaemonProcessKind { get; }
    protected virtual DaemonProcessKind get_DaemonProcessKind();
}
[ActionAttribute("RunVisibleDaemonAllFilesAction", "Run daemon for all files (visible document mode)")]
public class JetBrains.ReSharper.Features.Internal.PsiTests.RunVisibleDaemonAllFilesAction : RunDaemonAllFilesActionBase {
    protected DaemonProcessKind DaemonProcessKind { get; }
    protected virtual DaemonProcessKind get_DaemonProcessKind();
}
[ActionAttribute("SaturateAllCPUsAction", "Saturate all CPUs")]
public class JetBrains.ReSharper.Features.Internal.PsiTests.SaturateAllCPUsAction : object {
    [NullableContextAttribute("1")]
private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    [NullableContextAttribute("1")]
private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ActionAttribute("TestReadLockPerformanceAction", "Test ReaderLock performance")]
public class JetBrains.ReSharper.Features.Internal.PsiTests.TestReadLockPerformanceAction : object {
    private static int TaskCount;
    private static int IterationCount;
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private void PrepareForRun();
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private void DumpResults(IDataContext context, ISolution solution, Double[] results);
    private static string GetActionName(IExecutableAction executableAction, ISolution solution);
}
public abstract class JetBrains.ReSharper.Features.Internal.PsiTests.TraverseAllPsiFilesActionBase : ForEachFileActionBase {
    [NullableContextAttribute("1")]
protected virtual IDisposable ExecuteSetupPerRun(ISolution solution, StringBuilder runLog);
}
[ZoneMarkerAttribute]
internal class JetBrains.ReSharper.Features.Internal.PsiTests.ZoneMarker : object {
}
public class JetBrains.ReSharper.Features.Internal.ReSharper.Actions.Executer : object {
    private ISolution mySolution;
    private IPsiServices myPsiServices;
    public Executer(ISolution solution);
    public bool Execute(IProgressIndicator pi);
    private bool IsBad(IUsingList list);
}
[OptionsPageAttribute("InternalCSharp", "InternalCSharp", "JetBrains.Application.Resources.IdeThemedIcons/InternalPage")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.ReSharper.Options.CSharpInternalPage : BeSimpleOptionsPage {
    public static string PID;
    public CSharpInternalPage(Lifetime lifetime, OptionsPageContext optionsPageContext, OptionsSettingsSmartContext optionsSettingsSmartContext, bool wrapInScrollablePanel);
}
[OptionsPageAttribute("InternalExternalSources", "InternalExternalSources", "JetBrains.Application.Resources.IdeThemedIcons/InternalPage")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.ReSharper.Options.ExternalSourcesInternalPage : BeSimpleOptionsPage {
    public static string PID;
    public ExternalSourcesInternalPage(Lifetime lifetime, OptionsPageContext optionsPageContext, OptionsSettingsSmartContext optionsSettingsSmartContext, bool wrapInScrollablePanel);
}
[OptionsPageAttribute("PsiFeaturesInternal", "Internal", "JetBrains.Application.Resources.IdeThemedIcons/InternalPage")]
public class JetBrains.ReSharper.Features.Internal.ReSharper.Options.PsiFeaturesInternalPage : BeSimpleOptionsPage {
    public static string PID;
    public PsiFeaturesInternalPage(Lifetime lifetime, OptionsPageContext optionsPageContext, OptionsSettingsSmartContext optionsSettingsSmartContext);
}
[OptionsPageAttribute("InternalSwea", "InternalSwea", "JetBrains.Application.Resources.IdeThemedIcons/InternalPage")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.ReSharper.Options.SweaInternalPage : CustomSimpleOptionsPage {
    public static string PID;
    public SweaInternalPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext);
}
[ActionGroupAttribute("Annotator", "1", "10")]
public class JetBrains.ReSharper.Features.Internal.resources.AnnotatorActionGroup : object {
    public AnnotatorActionGroup(AnnotateAction annotateAction, AnnotatorSubactionsGroup annotateGroup, ExportAction exportAction);
}
[ActionGroupAttribute("2", "10")]
public class JetBrains.ReSharper.Features.Internal.resources.AnnotatorSubactionsGroup : object {
    public AnnotatorSubactionsGroup(PropagateToInterfaceAction propagateToInterfaceAction, ImportContractAssemblyAction importContractAssemblyAction, ImportWinRTAssemblyAction importWinRtAssemblyAction);
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.ReSharper.Features.Internal.resources.FeaturesInternalDumpMenu : object {
    public FeaturesInternalDumpMenu(ExportContextActionsListAction exportContextActionsList, DumpHighlightingsInfoAction dumpHighlightingsInfo, DumpNonlocalizedTemplatesAction dumpNonlocalizedTemplatesAction);
}
public class JetBrains.ReSharper.Features.Internal.Resources.FeaturesInternalThemedIcons : object {
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.ReSharper.Features.Internal.resources.FeaturesInternalToolsMenu : object {
    public FeaturesInternalToolsMenu(AnnotatorActionGroup annotatorActionGroup, ViewChangeManagerAction viewChangeManagerAction, ShowDependenciesAction showDependenciesAction, ViewControlFlowGraphAction viewControlFlowGraphAction, TestDataGeneratorAction testDataGeneratorAction, ToggleInterruptionAction toggleInterrupt);
}
[ActionGroupAttribute("Features.ReSharper.Windows.Internal", "0", "10")]
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.Internal.resources.FeaturesInternalWindowsMenu : object {
    public FeaturesInternalWindowsMenu(ShowCodeBehindAction showCodeBehindAction, ShowPsiModuleBrowserAction showPsiModuleBrowserAction);
}
[ActionGroupAttribute("1", "10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.resources.InternalPsiMenu : object {
    public InternalPsiMenu(Separator sep, Separator sep1, PsiFilesCacheStats psiFilesCacheStats, DumpPsiAction dumpPsiAction, DumpCodeBehindAction dumpCodeBehindAction, DumpCodeBehindMappingsAction dumpCodeBehindMappingsAction, DumpSymbolCacheForFileAction dumpSymbolCacheForFileAction, DumpFileDependenciesAction dumpFileDependenciesAction, DumpSymbolCacheAction dumpSymbolCacheAction, DumpICachesForFileAction dumpICachesForFileAction, DumpICachesAction dumpICachesAction, ExternalSourcesDumpSupportInformationActionHandler externalSourcesDumpSupportInformationActionHandler, ViewControlFlowGraphAction viewControlFlowGraphAction, Separator sep2, DumpPsiSourceFilePropertiesAction dumpPsiSourceFilePropertiesAction, DumpPsiDiagnosticsAction dumpPsiDiagnosticsAction, GenerateOperatorsResolveCacheAction generateOperatorsResolveCacheAction);
}
[ActionGroupAttribute("1", "10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.resources.InternalPsiTestsMenu : object {
    public InternalPsiTestsMenu(Separator sep1, LoadAllDocumentsAction documentsAction, Separator sep2, LexAllDocumentsAction lexDocumentsAction, Separator sep3, GetAllPsiFilesAction psiFilesAction, GetAllPsiFilesAndTraverseAction psiFilesAndTraverseAction, Separator sep4, GetAllCSharpPsiFilesAction csPsiFilesAction, GetAllCSharpPsiFilesAndTraverseAction csPsiFilesAndTraverseAction, GetAllCSharpPsiFilesShrinkedAction csPsiFilesShrinkedAction, Separator sep44, ParseAllCSharpPsiFilesAction csParseFilesAction, ParseAllCSharpPsiFilesOpenChameleonsAction csParseFilesOpenChameleonsAction, Separator sep5, ResolveAllCSharpReferencesAction resolveAllCSharpReferencesAction, ResolveAllCSharpReferencesSmartAction resolveAllCSharpReferencesSmartAction, ResolveAllCSharpReferencesSmartParallelAction resolveAllCSharpReferencesSmartParallelAction, Separator sep6, RunVisibleDaemonAllFilesAction runDaemonAllFilesAction, RunGlobalDaemonAllFilesAction runGlobalDaemonAllFilesAction, Separator sep7, RunFindUsagesForAllDeclarationAction runFindUsagesForAllDeclarationAction, Separator sep8, MakeSureStubTreeNodeCacheFilledAction makeSureStubTreeNodeCacheFilledAction, Separator sep9, ResolveAllReferencesInCurrentFileAction resolveAllReferencesInCurrentFileAction, Separator sep100, TestReadLockPerformanceAction testReadLockPerformanceAction, Separator sep12, SaturateAllCPUsAction saturateAllCpUsAction);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Features.Internal.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string AnnotateActionText { get; }
    public static string AnnotatorActionGroupText { get; }
    public static string BuildDependenciesFeatueSettingDescription { get; }
    public static string CleanupPSICachesActionText { get; }
    public static string CodeBehind_Text { get; }
    public static string PSIModuleBrowser_Text { get; }
    public static string ReSharperValidationErrors_Text { get; }
    public static string SymbolCachesCleanupActionText { get; }
    public static string CopyZoneSignatureToClipboardActionText { get; }
    public static string DumpAllSymbolCacheActionText { get; }
    public static string DumpCodeBehindMappingsActionText { get; }
    public static string DumpCodeBehindActionText { get; }
    public static string DumpICachesActionText { get; }
    public static string DumpICachesForFileActionText { get; }
    public static string DumpPsiFilesCacheActionText { get; }
    public static string DumpPsiActionText { get; }
    public static string DumpSymbolCacheForCurrentFileActionText { get; }
    public static string DumpXamlCachesActionText { get; }
    public static string EnableModuleConsistencyInspectionSettingDescription { get; }
    public static string ExcludedProjectNamesSettingDescription { get; }
    public static string ExcludeTerminalNodesSettingDescription { get; }
    public static string ExportContextActionsActionText { get; }
    public static string FeaturesWindowsActionGroupText { get; }
    public static string GenerateEditorConfigDocsActionText { get; }
    public static string GenerateEditorConfigJsonsActionText { get; }
    public static string GenerateXSDForAMSBuildTaskClassActionText { get; }
    public static string HiddenLifetimesActionText { get; }
    public static string InconsistentNamespacesActionText { get; }
    public static string InternalOptionPageTitle { get; }
    public static string PsiActionGroupText { get; }
    public static string PsiCachesRepairServiceEnabledText { get; }
    public static string ShowBuildGraphActionText { get; }
    public static string ShowDependencyGraphInYEdActionText { get; }
    public static string ShowMsBuildTargetsActionText { get; }
    public static string ShowZonesGraphActionText { get; }
    public static string TaskMonitorActionText { get; }
    public static string TaskMonitor_Text { get; }
    public static string TestDataGeneratorActionText { get; }
    public static string TraceFalseError_Text { get; }
    public static string TryProjectTransactionActionText { get; }
    public static string ZonesActionGroupText { get; }
    public static string ZoneSettingsSettingDescription { get; }
    public static string ZonesSupportIsEnabledSettingDescription { get; }
    public static string SolutionAnalysis_Header_Text { get; }
    public static string UseNewTreeInSwea_BoolOption_Text { get; }
    public static string InitDependencyPresentationMapMoreDetail_BoolOption_Text { get; }
    public static string Zones_Header_Text { get; }
    public static string EnableZones_BoolOption_Text { get; }
    public static string ExternalSources_Header_Text { get; }
    public static string UseNewTreeForAssemblyExplorer_BoolOption_Text { get; }
    public static string EnablePathReferenceTracker_BoolOption_Text { get; }
    public static string ReplaceF1OnTypesAndTypeMembersByOnline_BoolOption_Text { get; }
    public static string MemoryLeaks_Header_Text { get; }
    public static string SolutionWatchdog_ComboEnum_Caption { get; }
    public static string Performance_Header_Text { get; }
    public static string DisableStubTreeNodes_BoolOption_Text { get; }
    public static string RefactoringOptions_Header_Text { get; }
    public static string ShowRenameItemsInCompletion_BoolOption_Text { get; }
    public static string UseInlineRenameEverywhere_BoolOption_Text { get; }
    public static string UseNewFormForRefactorings_BoolOption_Text { get; }
    public static string NavigationSettings_Header_Text { get; }
    public static string UseOldStyleGroupingsInFindResults_BoolOption_Text { get; }
    public static string FeatureSuggestions_Header_Text { get; }
    public static string ShowTipsInCompletionPopup_BoolOption_Text { get; }
    public static string ShowTipsInBulbMenu_BoolOption_Text { get; }
    public static string IgnoreIndependentModeDisableSuggestions_BoolOption_Text { get; }
    public static string AllowNewGroupingOfCodeCleanupContext_BoolOption_Text { get; }
    public static string ChunkedMarkAsDirty_Header { get; }
    public static string TimeoutInMillisecondsBeforeSchedulingNextChunk_BoolOption_Text { get; }
    public static string ChunkSize_BoolOption_Text { get; }
    public static string OpenTestDataContextAction_Description { get; }
    public static string OpenTestDataContextAction_Name { get; }
    public static string ShowActionsHierarchy_Text { get; }
    public static string DumpPSIDiagnostics_Text { get; }
    public static string ToggleInterruptionActionText { get; }
    public static string ToggleInterruptionEnableBackActionText { get; }
    public static string CacheFullTreeInStubTreeNodesCacheText { get; }
    public static string CacheTokensAndBuffersInStubTreeNodesCacheText { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_AnnotateActionText();
    public static string get_AnnotatorActionGroupText();
    public static string get_BuildDependenciesFeatueSettingDescription();
    public static string get_CleanupPSICachesActionText();
    public static string get_CodeBehind_Text();
    public static string get_PSIModuleBrowser_Text();
    public static string get_ReSharperValidationErrors_Text();
    public static string get_SymbolCachesCleanupActionText();
    public static string get_CopyZoneSignatureToClipboardActionText();
    public static string get_DumpAllSymbolCacheActionText();
    public static string get_DumpCodeBehindMappingsActionText();
    public static string get_DumpCodeBehindActionText();
    public static string get_DumpICachesActionText();
    public static string get_DumpICachesForFileActionText();
    public static string get_DumpPsiFilesCacheActionText();
    public static string get_DumpPsiActionText();
    public static string get_DumpSymbolCacheForCurrentFileActionText();
    public static string get_DumpXamlCachesActionText();
    public static string get_EnableModuleConsistencyInspectionSettingDescription();
    public static string get_ExcludedProjectNamesSettingDescription();
    public static string get_ExcludeTerminalNodesSettingDescription();
    public static string get_ExportContextActionsActionText();
    public static string get_FeaturesWindowsActionGroupText();
    public static string get_GenerateEditorConfigDocsActionText();
    public static string get_GenerateEditorConfigJsonsActionText();
    public static string get_GenerateXSDForAMSBuildTaskClassActionText();
    public static string get_HiddenLifetimesActionText();
    public static string get_InconsistentNamespacesActionText();
    public static string get_InternalOptionPageTitle();
    public static string get_PsiActionGroupText();
    public static string get_PsiCachesRepairServiceEnabledText();
    public static string get_ShowBuildGraphActionText();
    public static string get_ShowDependencyGraphInYEdActionText();
    public static string get_ShowMsBuildTargetsActionText();
    public static string get_ShowZonesGraphActionText();
    public static string get_TaskMonitorActionText();
    public static string get_TaskMonitor_Text();
    public static string get_TestDataGeneratorActionText();
    public static string get_TraceFalseError_Text();
    public static string get_TryProjectTransactionActionText();
    public static string get_ZonesActionGroupText();
    public static string get_ZoneSettingsSettingDescription();
    public static string get_ZonesSupportIsEnabledSettingDescription();
    public static string get_SolutionAnalysis_Header_Text();
    public static string get_UseNewTreeInSwea_BoolOption_Text();
    public static string get_InitDependencyPresentationMapMoreDetail_BoolOption_Text();
    public static string get_Zones_Header_Text();
    public static string get_EnableZones_BoolOption_Text();
    public static string get_ExternalSources_Header_Text();
    public static string get_UseNewTreeForAssemblyExplorer_BoolOption_Text();
    public static string get_EnablePathReferenceTracker_BoolOption_Text();
    public static string get_ReplaceF1OnTypesAndTypeMembersByOnline_BoolOption_Text();
    public static string get_MemoryLeaks_Header_Text();
    public static string get_SolutionWatchdog_ComboEnum_Caption();
    public static string get_Performance_Header_Text();
    public static string get_DisableStubTreeNodes_BoolOption_Text();
    public static string get_RefactoringOptions_Header_Text();
    public static string get_ShowRenameItemsInCompletion_BoolOption_Text();
    public static string get_UseInlineRenameEverywhere_BoolOption_Text();
    public static string get_UseNewFormForRefactorings_BoolOption_Text();
    public static string get_NavigationSettings_Header_Text();
    public static string get_UseOldStyleGroupingsInFindResults_BoolOption_Text();
    public static string get_FeatureSuggestions_Header_Text();
    public static string get_ShowTipsInCompletionPopup_BoolOption_Text();
    public static string get_ShowTipsInBulbMenu_BoolOption_Text();
    public static string get_IgnoreIndependentModeDisableSuggestions_BoolOption_Text();
    public static string get_AllowNewGroupingOfCodeCleanupContext_BoolOption_Text();
    public static string get_ChunkedMarkAsDirty_Header();
    public static string get_TimeoutInMillisecondsBeforeSchedulingNextChunk_BoolOption_Text();
    public static string get_ChunkSize_BoolOption_Text();
    public static string get_OpenTestDataContextAction_Description();
    public static string get_OpenTestDataContextAction_Name();
    public static string get_ShowActionsHierarchy_Text();
    public static string get_DumpPSIDiagnostics_Text();
    public static string get_ToggleInterruptionActionText();
    public static string get_ToggleInterruptionEnableBackActionText();
    public static string get_CacheFullTreeInStubTreeNodesCacheText();
    public static string get_CacheTokensAndBuffersInStubTreeNodesCacheText();
}
public class JetBrains.ReSharper.Features.Internal.Serialization.Foo : object {
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class JetBrains.ReSharper.Features.Internal.Serialization.GenerateSerializerAction : object {
}
public class JetBrains.ReSharper.Features.Internal.TestForm.ShowModalFormAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
internal class JetBrains.ReSharper.Features.Internal.TestForm.TestForm : Form {
    private Button myDoItButton;
    private Container components;
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    private void myDoItButton_Click(object sender, EventArgs e);
}
[ActionAttribute("JetBrains.ReSharper.Features.Internal.Resources.Strings", "GenerateXSDForAMSBuildTaskClassActionText")]
public class JetBrains.ReSharper.Features.Internal.Xsd.GenerateXsdForMsbuildTaskClassAction : object {
    private static bool INCLUDE_PARENTS;
    private static GenerateXsdForMsbuildTaskClassAction();
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private static IEnumerable`1<IClass> CollectTaskClasses(ITypeElement typeElement);
    private static void WriteXsdTaskDeclaration(StreamWriter writer, IClass class, bool includeParents);
    private static List`1<IProperty> CollectProperties(IClass class, bool includeParents);
    private static bool AcceptTaskClass(IClass taskClass);
    private static bool AcceptProperty(IProperty property);
    private static string GetXsdExtensionBaseType(IClass class1);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.Internal.ZoneMarker : object {
}
[ActionAttribute("JetBrains.ReSharper.Features.Internal.Resources.Strings", "CopyZoneSignatureToClipboardActionText")]
public class JetBrains.ReSharper.Features.Internal.Zones.Actions.CopyZoneSignatureToClipboard : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
internal class JetBrains.ReSharper.Features.Internal.Zones.Actions.CSharp.CSharpZoneDefinitionAttributeService : object {
    public sealed virtual ITypeElement GetClassLikeTargetFromAttribute(IReference reference);
    public sealed virtual ITypeMember GetBuildStepFrom(IReference reference);
}
[ActionAttribute("JetBrains.ReSharper.Features.Internal.Resources.Strings", "HiddenLifetimesActionText")]
public class JetBrains.ReSharper.Features.Internal.Zones.Actions.CSharp.FindHiddenLifetimes : ContextNavigationActionBase`1<HiddenLifetimesProvider> {
    protected RichText Caption { get; }
    protected virtual RichText get_Caption();
}
[ActionAttribute("JetBrains.ReSharper.Features.Internal.Resources.Strings", "InconsistentNamespacesActionText")]
public class JetBrains.ReSharper.Features.Internal.Zones.Actions.CSharp.FindInconsistentNamespaces : ContextNavigationActionBase`1<InconsistentNamespacesProvider> {
    protected RichText Caption { get; }
    protected virtual RichText get_Caption();
}
[ContextNavigationProviderAttribute("0")]
public class JetBrains.ReSharper.Features.Internal.Zones.Actions.CSharp.HiddenLifetimesProvider : ContextNavigationProviderBase`2<IHidingLifetimesContextSearch, FindHiddenLifetimes> {
    private static string NOT_FOUND;
    private IActionManager myActionManager;
    protected NavigationActionGroup ActionGroup { get; }
    public HiddenLifetimesProvider(IFeaturePartsContainer manager, IActionManager actionManager);
    protected virtual string GetNavigationMenuTitle(IDataContext dataContext);
    protected virtual NavigationActionGroup get_ActionGroup();
    protected virtual void Execute(IDataContext dataContext, IEnumerable`1<IHidingLifetimesContextSearch> searches, INavigationExecutionHost host);
}
public class JetBrains.ReSharper.Features.Internal.Zones.Actions.CSharp.HiddenLifetimesSearchDescriptor : SearchDescriptor {
    public string ActionBarID { get; }
    public HiddenLifetimesSearchDescriptor(HiddenLifetimesSearchRequest request, ICollection`1<IOccurrence> results);
    public virtual string get_ActionBarID();
    public virtual string GetResultsTitle(OccurrenceSection section);
    protected virtual Func`2<SearchRequest, IOccurrenceBrowserDescriptor> GetDescriptorFactory();
}
public class JetBrains.ReSharper.Features.Internal.Zones.Actions.CSharp.HiddenLifetimesSearchRequest : SearchRequest {
    private static int STRAIGHTFORWARD_CALC;
    private IProjectModelElement[] myElements;
    private SearchDomainFactory mySearchDomainFactory;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    public string Title { get; }
    public ISolution Solution { get; }
    public ICollection SearchTargets { get; }
    public HiddenLifetimesSearchRequest(IProjectModelElement[] elements, ISolution solution);
    public virtual string get_Title();
    [CompilerGeneratedAttribute]
public virtual ISolution get_Solution();
    public virtual ICollection get_SearchTargets();
    public virtual ICollection`1<IOccurrence> Search(IProgressIndicator pi);
    private IType GetLifetimeType();
    private ISearchDomain EvaluateNarrowSearchDomain(IProgressIndicator pi);
    [CompilerGeneratedAttribute]
private ISearchDomain <EvaluateNarrowSearchDomain>b__13_1(IProjectModelElement it);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Features.Internal.Zones.Actions.CSharp.HidingLifetimesContextSearch : object {
    public sealed virtual bool IsAvailable(IDataContext dataContext);
    public sealed virtual bool IsContextApplicable(IDataContext dataContext);
    public sealed virtual HiddenLifetimesSearchRequest SearchHiddenLifetimes(IDataContext dataContext);
}
public interface JetBrains.ReSharper.Features.Internal.Zones.Actions.CSharp.IHidingLifetimesContextSearch {
    public abstract virtual HiddenLifetimesSearchRequest SearchHiddenLifetimes(IDataContext dataContext);
}
public interface JetBrains.ReSharper.Features.Internal.Zones.Actions.CSharp.IInconsistentNamespacesContextSearch {
    public abstract virtual InconsistentNamespacesSearchRequest SearchInconsistentNamespaces(IDataContext dataContext);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Features.Internal.Zones.Actions.CSharp.InconsistentNamespaceContextSearch : object {
    public sealed virtual bool IsAvailable(IDataContext dataContext);
    public sealed virtual bool IsContextApplicable(IDataContext dataContext);
    public sealed virtual InconsistentNamespacesSearchRequest SearchInconsistentNamespaces(IDataContext dataContext);
}
[ContextNavigationProviderAttribute("0")]
public class JetBrains.ReSharper.Features.Internal.Zones.Actions.CSharp.InconsistentNamespacesProvider : ContextNavigationProviderBase`2<IInconsistentNamespacesContextSearch, FindInconsistentNamespaces> {
    private static string NOT_FOUND;
    private IActionManager myActionManager;
    protected NavigationActionGroup ActionGroup { get; }
    public InconsistentNamespacesProvider(IFeaturePartsContainer manager, IActionManager actionManager);
    protected virtual string GetNavigationMenuTitle(IDataContext dataContext);
    protected virtual NavigationActionGroup get_ActionGroup();
    protected virtual void Execute(IDataContext dataContext, IEnumerable`1<IInconsistentNamespacesContextSearch> searches, INavigationExecutionHost host);
}
public class JetBrains.ReSharper.Features.Internal.Zones.Actions.CSharp.InconsistentNamespacesSearchDescriptor : SearchDescriptor {
    public string ActionBarID { get; }
    public InconsistentNamespacesSearchDescriptor(InconsistentNamespacesSearchRequest request, ICollection`1<IOccurrence> results);
    public virtual string get_ActionBarID();
    public virtual string GetResultsTitle(OccurrenceSection section);
    protected virtual Func`2<SearchRequest, IOccurrenceBrowserDescriptor> GetDescriptorFactory();
    [CompilerGeneratedAttribute]
internal static IOccurrenceBrowserDescriptor <GetDescriptorFactory>g__DescriptorFactory|4_0(SearchRequest request);
}
public class JetBrains.ReSharper.Features.Internal.Zones.Actions.CSharp.InconsistentNamespacesSearchRequest : SearchRequest {
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    public string Title { get; }
    public ISolution Solution { get; }
    public ICollection SearchTargets { get; }
    public InconsistentNamespacesSearchRequest(ISolution solution);
    public virtual string get_Title();
    [CompilerGeneratedAttribute]
public virtual ISolution get_Solution();
    public virtual ICollection get_SearchTargets();
    public virtual ICollection`1<IOccurrence> Search(IProgressIndicator pi);
    private void DoSearch(INamespace ns, ISymbolScope symbolScope, ICollection`1<IOccurrence> ret, IProgressIndicator pi);
    private static int Estimate(INamespace ns, ISymbolScope symbolScope);
}
[ActionAttribute("DumpZoneMarkerCache", "Dump ZoneMarker cache")]
public class JetBrains.ReSharper.Features.Internal.Zones.Actions.DumpZoneMarkerCacheAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
internal interface JetBrains.ReSharper.Features.Internal.Zones.Actions.IZoneDefinitionAttributeService {
    [CanBeNullAttribute]
public abstract virtual ITypeElement GetClassLikeTargetFromAttribute(IReference reference);
    [CanBeNullAttribute]
public abstract virtual ITypeMember GetBuildStepFrom(IReference reference);
}
public interface JetBrains.ReSharper.Features.Internal.Zones.Actions.IZoneMarkerContextSearch {
    public abstract virtual ZoneMarkerSearchRequest SearchZoneMarkers(IDataContext dataContext);
}
[ContextNavigationProviderAttribute("0")]
public class JetBrains.ReSharper.Features.Internal.Zones.Actions.NavigateToZoneMarkerProvider : ContextNavigationProviderBase`2<IZoneMarkerContextSearch, IExecutableAction> {
    private static string NOT_FOUND;
    private ITooltipManager myTooltipManager;
    private IShellLocks myShellLocks;
    protected NavigationActionGroup ActionGroup { get; }
    public NavigateToZoneMarkerProvider(ITooltipManager tooltipManager, IShellLocks shellLocks, IFeaturePartsContainer manager);
    protected virtual string GetNavigationMenuTitle(IDataContext dataContext);
    protected virtual NavigationActionGroup get_ActionGroup();
    protected virtual void Execute(IDataContext dataContext, IEnumerable`1<IZoneMarkerContextSearch> searches, INavigationExecutionHost host);
}
[ActionAttribute("JetBrains.ReSharper.Features.Internal.Resources.Strings", "ShowBuildGraphActionText")]
public class JetBrains.ReSharper.Features.Internal.Zones.Actions.ShowBuildAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private static IDiagramGraph BuildGraph(ISolution solution, IProgressIndicator pi);
    [NotNullAttribute]
private static IEnumerable`1<ITypeElement> GetArtifact(IType returnType, HashSet`1<ITypeElement> artifactsElements);
    private static IDiagramGraphNode AddNode(Dictionary`2<IDeclaredElement, IDiagramGraphNode> nodes, IClrDeclaredElement typeElement, SimpleDiagramGraph graph);
}
[ActionAttribute("JetBrains.ReSharper.Features.Internal.Resources.Strings", "ShowZonesGraphActionText")]
public class JetBrains.ReSharper.Features.Internal.Zones.Actions.ShowZoneDefinitionsGraphAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private static IDiagramGraph BuildGraph(ISolution solution, IProgressIndicator pi);
    private static ITypeElement GetZoneMarker(IReference reference, IPsiServices services);
    private static IDiagramGraphNode AddNode(Dictionary`2<ITypeElement, IDiagramGraphNode> nodes, ITypeElement typeElement, DiagramGraphBase graph);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Features.Internal.Zones.Actions.ZoneMarkerContextSearch : object {
    public sealed virtual bool IsAvailable(IDataContext dataContext);
    public sealed virtual bool IsContextApplicable(IDataContext dataContext);
    public sealed virtual ZoneMarkerSearchRequest SearchZoneMarkers(IDataContext dataContext);
}
public class JetBrains.ReSharper.Features.Internal.Zones.Actions.ZoneMarkerSearchDescriptor : SearchDescriptor {
    public ZoneMarkerSearchDescriptor(ZoneMarkerSearchRequest request, ICollection`1<IOccurrence> results, StructuredPresenter`2<TreeModelNode, IPresentableItem> presenter);
    public virtual string GetResultsTitle(OccurrenceSection section);
    protected virtual Func`2<SearchRequest, IOccurrenceBrowserDescriptor> GetDescriptorFactory();
}
public class JetBrains.ReSharper.Features.Internal.Zones.Actions.ZoneMarkerSearchRequest : SearchRequest {
    private DeclaredElementEnvoy`1<IDeclaredElement> myTarget;
    private string myCachedTitle;
    private ZoneMarkersService myZoneMarkersService;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    public string Title { get; }
    public ISolution Solution { get; }
    public ICollection SearchTargets { get; }
    public ZoneMarkerSearchRequest(ISolution solution, IDeclaredElement declaredElement);
    public virtual string get_Title();
    [CompilerGeneratedAttribute]
public virtual ISolution get_Solution();
    public virtual ICollection get_SearchTargets();
    public virtual ICollection`1<IOccurrence> Search(IProgressIndicator progressIndicator);
}
[ActionGroupAttribute("1", "16")]
public class JetBrains.ReSharper.Features.Internal.Zones.Actions.ZonesActionGroup : object {
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Features.Internal.Inspections.ReSharperValidatorErrors")]
public class JetBrains.ReSharper.Features.Internal.Zones.Inspections.ComponentHasNoImplementationError : object {
    private static string MESSAGE;
    [CompilerGeneratedAttribute]
private ITreeNode <Parameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Typename>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Zones>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITreeNode Parameter { get; }
    public string Typename { get; }
    public string Zones { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public ComponentHasNoImplementationError(ITreeNode parameter, string typename, string zones);
    [CompilerGeneratedAttribute]
public ITreeNode get_Parameter();
    [CompilerGeneratedAttribute]
public string get_Typename();
    [CompilerGeneratedAttribute]
public string get_Zones();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[HighlightingSourceAttribute]
public abstract class JetBrains.ReSharper.Features.Internal.Zones.Inspections.ComponentImplementationZoneAnalyzerBase`1 : ElementProblemAnalyzer`1<T> {
    private ZoneMarkersService myZoneMarkersService;
    protected bool IsEnabled { get; }
    protected ComponentImplementationZoneAnalyzerBase`1(ZoneMarkersService zoneMarkersService);
    protected bool get_IsEnabled();
    protected void AnalyzeComponentImplementation(ITreeNode elementToHighlight, ITypeElement referencingType, ITypeElement potentialComponentBaseType, IHighlightingConsumer consumer);
    private bool HasAnyImplementationInCurrentZones(ITypeElement referencingType, HashSet`1<ITypeElement> componentImplementations, String& message);
    [ContractAnnotationAttribute("null => false")]
protected static bool HasComponentAttribute(ITypeMember implClass);
}
[HighlightingSourceAttribute]
public abstract class JetBrains.ReSharper.Features.Internal.Zones.Inspections.ConsistentZoneRequirementsAnalyzerBase`1 : ElementProblemAnalyzer`1<T> {
    private ZoneMarkersService myZoneMarkersService;
    private IProperty`1<bool> myAnalysisEnabled;
    protected ConsistentZoneRequirementsAnalyzerBase`1(Lifetime lifetime, ZoneMarkersService zoneMarkersService, ISettingsStore settingsStore);
    protected virtual void Run(T classDeclaration, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private JetHashSet`1<ITypeElement> GetExpandedZoneDefinitions(INamespace ns, IPsiModule module);
    private void CheckConsistentRequirements(T classDeclaration, IHighlightingConsumer consumer, INamespace ownerNamespace, IPsiModule thisModule, JetHashSet`1<ITypeElement> allRequiredZoneDefinitions);
    private static IEnumerable`1<INamespace> CollectNonEmptyNestedNamespacesInModule(IPsiModule module, INamespace ownerNamespace);
    private string CheckMatchingZoneRequirements(IPsiModule module, INamespace ns, ICollection`1<ITypeElement> requiredZoneDefinitions);
    private string CheckSupersetZoneRequirementsForNestedNamespaces(IPsiModule module, List`1<INamespace> nestedNamespaces, ICollection`1<ITypeElement> requiredZoneDefinitions);
    private string CheckSubsetZoneRequirementsForContainingNamespaces(IPsiModule module, INamespace ns, ICollection`1<ITypeElement> requiredZoneDefinitions);
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.Zones.Inspections.CSharp.ConsistentZoneRequirementsAnalyzer : ConsistentZoneRequirementsAnalyzerBase`1<IClassDeclaration> {
    public ConsistentZoneRequirementsAnalyzer(Lifetime lifetime, ZoneMarkersService zoneMarkersService, ISettingsStore settingsStore);
}
[ElementProblemAnalyzerAttribute("0", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.Zones.Inspections.CSharp.ConstructorParameterImplementationZoneAnalyzer : ComponentImplementationZoneAnalyzerBase`1<IClassDeclaration> {
    public ConstructorParameterImplementationZoneAnalyzer(ZoneMarkersService service);
    protected virtual void Run(IClassDeclaration typeDeclaration, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Internal.Zones.Inspections.CSharp.ConstructorParameterImplementationZoneAnalyzer/<GetParametersFromAllConstructors>d__2")]
private IEnumerable`1<ICSharpParameterDeclaration> GetParametersFromAllConstructors(IClassDeclaration typeDeclaration);
}
[ElementProblemAnalyzerAttribute("0", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.Zones.Inspections.CSharp.ConstructorParameterUsageZoneAnalyzer : UsingsCheckerBase`1<IConstructorDeclaration> {
    public ConstructorParameterUsageZoneAnalyzer(ZoneMarkersService marks);
    protected virtual void Analyse(IConstructorDeclaration element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("0", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.Zones.Inspections.CSharp.GetComponentImplementationZoneAnalyzer : ComponentImplementationZoneAnalyzerBase`1<IInvocationExpression> {
    public GetComponentImplementationZoneAnalyzer(ZoneMarkersService service);
    protected virtual void Run(IInvocationExpression invocation, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("0", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.Zones.Inspections.CSharp.GetComponentTypeParameterUsageZoneAnalyzer : UsingsCheckerBase`1<ITypeArgumentList> {
    public GetComponentTypeParameterUsageZoneAnalyzer(ZoneMarkersService marks);
    protected virtual void Analyse(ITypeArgumentList element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.Zones.Inspections.CSharp.InvalidRequiredZoneDefinitionAnalyzer : ElementProblemAnalyzer`1<IUserTypeUsage> {
    protected virtual void Run(IUserTypeUsage typeUsage, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("0", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.Zones.Inspections.CSharp.RedundantZoneRequirementAnalyzer : RedundantZoneRequirementAnalyzerBase`1<IClassDeclaration> {
    public RedundantZoneRequirementAnalyzer(ZoneMarkersService zoneMarkersService);
    protected virtual IEnumerable`1<ITreeNode> GetSuperTypeUsageNodes(IClassDeclaration declaration);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Internal.Zones.Inspections.CSharp.RedundantZoneRequirementAnalyzer/<GetZoneMarkerAttributeCtorTypeUsageNodes>d__2")]
protected virtual IEnumerable`1<ITreeNode> GetZoneMarkerAttributeCtorTypeUsageNodes(IClassDeclaration declaration);
    protected virtual IDeclaredType GetDeclaredTypeFromTypeUsage(ITreeNode treeNode);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Internal.Zones.Inspections.errorsQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Features.Internal.Inspections.ReSharperValidatorErrors")]
public class JetBrains.ReSharper.Features.Internal.Zones.Inspections.InconsistentNamespaceAnnotationCrossModulesError : object {
    private static string MESSAGE;
    [CompilerGeneratedAttribute]
private IDeclaration <ClassDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IDeclaration ClassDeclaration { get; }
    public string Text { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public InconsistentNamespaceAnnotationCrossModulesError(IDeclaration classDeclaration, string text);
    [CompilerGeneratedAttribute]
public IDeclaration get_ClassDeclaration();
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Features.Internal.Inspections.ReSharperValidatorErrors")]
public class JetBrains.ReSharper.Features.Internal.Zones.Inspections.IncorrectNamespaceNestingError : object {
    private static string MESSAGE;
    [CompilerGeneratedAttribute]
private IDeclaration <NamespaceDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNode <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProperNamespacePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IDeclaration NamespaceDeclaration { get; }
    public ITreeNode Node { get; }
    public string ProperNamespacePrefix { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public IncorrectNamespaceNestingError(IDeclaration namespaceDeclaration, ITreeNode node, string properNamespacePrefix);
    [CompilerGeneratedAttribute]
public IDeclaration get_NamespaceDeclaration();
    [CompilerGeneratedAttribute]
public ITreeNode get_Node();
    [CompilerGeneratedAttribute]
public string get_ProperNamespacePrefix();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Features.Internal.Inspections.ReSharperValidatorErrors")]
public class JetBrains.ReSharper.Features.Internal.Zones.Inspections.IncorrectReferenceError : object {
    private static string MESSAGE;
    [CompilerGeneratedAttribute]
private ITreeNode <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeElement <Cls>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITreeNode Node { get; }
    public ITypeElement Cls { get; }
    public string Description { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public IncorrectReferenceError(ITreeNode node, ITypeElement cls, string description);
    [CompilerGeneratedAttribute]
public ITreeNode get_Node();
    [CompilerGeneratedAttribute]
public ITypeElement get_Cls();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[StaticSeverityHighlightingAttribute("5", "JetBrains.ReSharper.Features.Internal.Inspections.ReSharperValidatorErrors")]
public class JetBrains.ReSharper.Features.Internal.Zones.Inspections.InvalidRequiredZoneDefinitionError : object {
    private static string MESSAGE;
    [CompilerGeneratedAttribute]
private ITypeUsage <TypeUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DependencyClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AxisAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITypeUsage TypeUsage { get; }
    public string DependencyClass { get; }
    public string AxisAttribute { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public InvalidRequiredZoneDefinitionError(ITypeUsage typeUsage, string dependencyClass, string axisAttribute);
    [CompilerGeneratedAttribute]
public ITypeUsage get_TypeUsage();
    [CompilerGeneratedAttribute]
public string get_DependencyClass();
    [CompilerGeneratedAttribute]
public string get_AxisAttribute();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ElementProblemAnalyzerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.Zones.Inspections.NamespaceNestingChecker : ElementProblemAnalyzer`1<ICSharpNamespaceDeclaration> {
    private ZoneMarkersService myZoneMarkers;
    private IPsiServices myServices;
    private IProperty`1<bool> myIsEnabled;
    public NamespaceNestingChecker(ZoneMarkersService marks, IPsiServices services);
    protected virtual void Run(ICSharpNamespaceDeclaration declaration, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[StaticSeverityHighlightingAttribute("4", "JetBrains.ReSharper.Features.Internal.Inspections.ReSharperValidatorErrors")]
public class JetBrains.ReSharper.Features.Internal.Zones.Inspections.RedundantDependencySpecificationWarning : object {
    private static string MESSAGE;
    [CompilerGeneratedAttribute]
private ITreeNode <TypeUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ITreeNode TypeUsage { get; }
    public string Reason { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public RedundantDependencySpecificationWarning(ITreeNode typeUsage, string reason);
    [CompilerGeneratedAttribute]
public ITreeNode get_TypeUsage();
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[HighlightingSourceAttribute]
public abstract class JetBrains.ReSharper.Features.Internal.Zones.Inspections.RedundantZoneRequirementAnalyzerBase`1 : ElementProblemAnalyzer`1<T> {
    private ZoneMarkersService myZoneMarkersService;
    protected RedundantZoneRequirementAnalyzerBase`1(ZoneMarkersService zoneMarkersService);
    protected virtual void Run(T declaration, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private List`1<Data<T>> GetInheritedAndRequiredZones(T classDeclaration);
    private List`1<Data<T>> GetZonesFromZoneMarkerAttributes(T classDeclaration);
    protected abstract virtual IEnumerable`1<ITreeNode> GetSuperTypeUsageNodes(T declaration);
    protected abstract virtual IEnumerable`1<ITreeNode> GetZoneMarkerAttributeCtorTypeUsageNodes(T declaration);
    [CanBeNullAttribute]
protected abstract virtual IDeclaredType GetDeclaredTypeFromTypeUsage(ITreeNode typeUsage);
}
[HighlightingSourceAttribute]
public abstract class JetBrains.ReSharper.Features.Internal.Zones.Inspections.UsingsCheckerBase`1 : ElementProblemAnalyzer`1<T> {
    private ZoneMarkersService myZoneMarkers;
    protected UsingsCheckerBase`1(ZoneMarkersService marks);
    protected sealed virtual void Run(T element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    protected abstract virtual void Analyse(T element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    protected void AnalyseForUnsatisfiedZoneDefinitions(ITreeNode elementToHighlight, ITypeElement referencedType, ITypeElement referencingType, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("0", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.Zones.Inspections.VB.ConstructorParameterUsageZoneAnalyzer : UsingsCheckerBase`1<IConstructorDeclaration> {
    public ConstructorParameterUsageZoneAnalyzer(ZoneMarkersService marks);
    protected virtual void Analyse(IConstructorDeclaration element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ElementProblemAnalyzerAttribute("0", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Features.Internal.Zones.Inspections.VB.GetComponentTypeParameterUsageZoneAnalyzer : UsingsCheckerBase`1<ITypeArgumentList> {
    public GetComponentTypeParameterUsageZoneAnalyzer(ZoneMarkersService marks);
    protected virtual void Analyse(ITypeArgumentList element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.Internal.Zones.Inspections.VB.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Features.Internal.Zones.Intellisense.ZoneDefinitionsItemsProvider : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    public EvaluationMode SupportedEvaluationMode { get; }
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual bool AddLookupItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
    public virtual EvaluationMode get_SupportedEvaluationMode();
}
internal class JetBrains.ReSharper.Features.Internal.Zones.Intentions.CSharp.AddToExistingZoneMarkerBulbAction : BulbActionBase {
    private IClass myExistingZoneMarker;
    private IncorrectReferenceError myError;
    private string myZoneMarkerFullName;
    public string Text { get; }
    public AddToExistingZoneMarkerBulbAction(IClass existingZoneMarker, IncorrectReferenceError error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
internal class JetBrains.ReSharper.Features.Internal.Zones.Intentions.CSharp.AddZoneDependencyQuickFix : object {
    private IncorrectReferenceError myError;
    public AddZoneDependencyQuickFix(IncorrectReferenceError error);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [CompilerGeneratedAttribute]
private AddToExistingZoneMarkerBulbAction <CreateBulbItems>b__2_0(IClass markerClass);
}
internal class JetBrains.ReSharper.Features.Internal.Zones.Intentions.CSharp.CreateNewZoneMarkerBulbAction : BulbActionBase {
    private IncorrectReferenceError myError;
    private string myRequiredClassShortName;
    public string Text { get; }
    public CreateNewZoneMarkerBulbAction(IncorrectReferenceError error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Features.Internal.Zones.Intentions.DumpZoneMarkerCacheContextAction : ContextActionBase {
    private static string DumpMarkedNamespacesCache;
    private IContextActionDataProvider myProvider;
    public string Text { get; }
    public DumpZoneMarkerCacheContextAction(LanguageIndependentContextActionDataProvider provider);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public static class JetBrains.ReSharper.Features.Internal.Zones.ZoneConstants : object {
    public static string ZoneMarkerAttributeFullName;
    public static string ZoneMarkerAttributeShortName;
    public static IClrTypeName ZoneMarkerAttributeClrName;
    public static string ZoneDefinitionAttributeFullName;
    public static string ZoneDefinitionAttributeShortName;
    public static IClrTypeName ZoneDefinitionAttributeClrName;
    public static string RequireName;
    public static string RequireNameFull;
    private static ZoneConstants();
    public static bool IsIRequire(IInterface iRequire);
    public static bool IsZoneDefinitionClass(ITypeElement typeElement);
    public static bool IsZoneMarkerClass(ITypeElement typeElement);
    public static bool HasZoneMarkerAttribute(ITypeElement typeElement);
    public static IList`1<IAttributeInstance> GetZoneMarkerAttributes(ITypeElement typeElement);
    public static bool IsGetComponentMethod(string shortName);
}
[ZoneMarkerAttribute]
internal class JetBrains.ReSharper.Features.Internal.Zones.ZoneMarker : object {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Internal.Zones.ZoneMarkerAttributeCacheParameter : object {
    public IEnumerable`1<string> RequiredAttributeShortNames { get; }
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Internal.Zones.ZoneMarkerAttributeCacheParameter/<get_RequiredAttributeShortNames>d__1")]
public sealed virtual IEnumerable`1<string> get_RequiredAttributeShortNames();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Internal.Zones.ZoneMarkersFileImageContributor : object {
    private SourceAttributedTypesManager mySourceAttributedTypesManager;
    public ZoneMarkersFileImageContributor(SourceAttributedTypesManager sourceAttributedTypesManager);
    public sealed virtual IEnumerable`1<KeyValuePair`2<Dependency, Hash>> SolutionDependencies(ISolution solution);
    public sealed virtual IEnumerable`1<KeyValuePair`2<Dependency, Hash>> ModuleDependencies(IPsiModule module);
    public sealed virtual IEnumerable`1<KeyValuePair`2<Dependency, Hash>> FileDependencies(IPsiSourceFile psiSourceFile);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Internal.Zones.ZoneMarkersService : InvalidatingPsiCache {
    private static int BitArrayLength;
    private ISymbolCache mySymbolCache;
    private IAttributedTypesCache myCache;
    private DependencyStore myDependencyStore;
    private OneToSetMap`2<ITypeElement, ITypeElement> myZoneMarkerToZoneDefinitions;
    private OneToSetMap`2<ITypeElement, ITypeElement> myZoneDefinitionToZoneDefinitions;
    private Dictionary`2<string, Mark> myMarks;
    private List`1<ITypeElement> myZoneDefinitions;
    private Dictionary`2<ITypeElement, int> myZoneDefinitionToIndex;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Enabled>k__BackingField;
    public IProperty`1<bool> Enabled { get; }
    public bool HasZones { get; }
    public ZoneMarkersService(Lifetime lifetime, ISymbolCache symbolCache, IAttributedTypesCache cache, DependencyStore dependencyStore, ISettingsStore settingsStore);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_Enabled();
    public bool get_HasZones();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Internal.Zones.ZoneMarkersService/<GetZoneMarkersForNamespace>d__15")]
public IEnumerable`1<IClass> GetZoneMarkersForNamespace(INamespace ns, IPsiModule module);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Internal.Zones.ZoneMarkersService/<GetZoneMarkersForType>d__16")]
public IEnumerable`1<IClass> GetZoneMarkersForType(ITypeElement typeElement);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Internal.Zones.ZoneMarkersService/<GetZoneDefinitionsForNamespace>d__17")]
public IEnumerable`1<ITypeElement> GetZoneDefinitionsForNamespace(INamespace ns, IPsiModule module);
    public IReadOnlyList`1<ITypeElement> GetUnsatisfiedZoneDefinitions(ITypeElement referencedType, ITypeElement referencingType);
    private Mark GetCachedMarkForNamespace(INamespace ns, IPsiModule module);
    private Mark CalculateMarkForNamespace(INamespace ns, IPsiModule module);
    private Mark CalculateMarkForClass(ITypeElement cls);
    private IEnumerable`1<ITypeElement> CalculateZoneDefinitions(INamespace ns, IPsiModule module, DependencyStore dependencyStore);
    public ISet`1<ITypeElement> ExpandZoneDefinitions(ITypeElement zoneDefinition);
    public IEnumerable`1<ITypeElement> GetZoneDefinitionsForZoneMarker(ITypeElement zoneMarker, bool recursive);
    private int GetZoneDefinitionClassIndex(ITypeElement zoneDefinition);
    private IReadOnlyList`1<ITypeElement> EnumerateZoneDefinitions(Mark mark);
    protected virtual void InvalidateOnPhysicalChange(PsiChangedElementType elementType);
    private ISet`1<ITypeElement> GetZoneDefinitionsForZoneMarkerCore(ITypeElement zoneMarker, bool recursive);
    private void GetInheritedAndRequiredZoneDefinitions(ITypeElement root, ISet`1<ITypeElement> definitions, bool recursive);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.ReSharper.Features.Internal.Resources.Strings", "ZoneSettingsSettingDescription")]
public class JetBrains.ReSharper.Features.Internal.Zones.ZoneSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Internal.Resources.Strings", "ZonesSupportIsEnabledSettingDescription")]
public bool CheckZones;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Internal.Resources.Strings", "EnableModuleConsistencyInspectionSettingDescription")]
public bool CheckModuleConsistency;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
