public static class JetBrains.ReSharper.Features.Running.CommonRunnableProjectKinds : object {
    public static RunnableProjectKind Console;
    public static RunnableProjectKind DotNetCore;
    public static RunnableProjectKind LaunchSettings;
    public static RunnableProjectKind Web;
    public static RunnableProjectKind WcfService;
    public static RunnableProjectKind StaticMethod;
    public static RunnableProjectKind Executable;
    public static RunnableProjectKind IisApplication;
    public static RunnableProjectKind EcmaScript;
    public static RunnableProjectKind Docker;
    public static RunnableProjectKind DockerCompose;
    private static CommonRunnableProjectKinds();
}
public interface JetBrains.ReSharper.Features.Running.IRunnableProjectActivator {
    public abstract virtual bool IsPossibleRunnableProject(IProject project);
}
public interface JetBrains.ReSharper.Features.Running.IRunnableProjectProvider {
    [NotNullAttribute]
public IEnumerable`1<RunnableProjectKind> HiddenRunnableProjectKinds { get; }
    [CanBeNullAttribute]
public abstract virtual RunnableProject CreateRunnableProject(IProject project, string name, string fullName, IconModel icon);
    public abstract virtual IEnumerable`1<RunnableProjectKind> get_HiddenRunnableProjectKinds();
}
public static class JetBrains.ReSharper.Features.Running.ProjectOutputBuilder : object {
    public static ProjectOutput Create(RdTargetFrameworkId tfm, string exePath, List`1<string> defaultArguments, string workingDirectory, string dotNetCorePlatformRoot, ConfigurationAndPlatform configuration, List`1<SharedFramework> sharedFrameworks);
}
[SolutionInstanceComponentAttribute("0")]
public class JetBrains.ReSharper.Features.Running.ProjectRunnableOutputDetector : object {
    private ILogger myLogger;
    private ISolutionToolset mySolutionToolset;
    protected bool IsAllowedToPreferDllOverAppHostOnMacOs { get; }
    public ProjectRunnableOutputDetector(ILogger logger, ISolutionToolset solutionToolset);
    protected virtual bool get_IsAllowedToPreferDllOverAppHostOnMacOs();
    [CanBeNullAttribute]
public ProjectOutput CalculateProjectOutput(IProject project, TargetFrameworkId tfm, bool areRunCommandPropertiesRequired);
    private bool ShouldPreferDllWhenAppHostIsAvailable(IProject project);
    private Nullable`1<ProjectOutputParameters> DetectRunCommandFromMsBuild(IProject project, TargetFrameworkId tfm, bool preferDllWhenAppHostIsAvailable);
    private Nullable`1<ProjectOutputParameters> DetectRunCommandFromMsBuild(string runCommand, string runArguments);
    [CanBeNullAttribute]
private string CalculateWorkingDirectory(IProject project, TargetFrameworkId tfm, VirtualFileSystemPath projectOutputPath);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Features.Running.Providers.ConsoleRunnableProjectProvider : object {
    [CompilerGeneratedAttribute]
private ILogger <logger>P;
    [CompilerGeneratedAttribute]
private ProjectDependenciesManager <projectDependenciesManager>P;
    [CompilerGeneratedAttribute]
private ProjectRunnableOutputDetector <projectRunnableOutputDetector>P;
    public IEnumerable`1<RunnableProjectKind> HiddenRunnableProjectKinds { get; }
    public ConsoleRunnableProjectProvider(ILogger logger, ProjectDependenciesManager projectDependenciesManager, ProjectRunnableOutputDetector projectRunnableOutputDetector);
    public sealed virtual IEnumerable`1<RunnableProjectKind> get_HiddenRunnableProjectKinds();
    public sealed virtual RunnableProject CreateRunnableProject(IProject project, string name, string fullName, IconModel icon);
    private bool HasGeneratedEntryPoint(IProject project);
    private bool IsDotNetCoreUnitTestProject(IProject project);
    private static bool HasGenerateProgramFile(IProject project);
    private static RunnableProject GetRunnableProjectFromProjectDebugConfiguration(IProject project, string name, string fullName);
    private bool FilterProjectByType(IProject project);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Running.Providers.ExecutableRunnableProjectProvider : object {
    public IEnumerable`1<RunnableProjectKind> HiddenRunnableProjectKinds { get; }
    public sealed virtual IEnumerable`1<RunnableProjectKind> get_HiddenRunnableProjectKinds();
    public sealed virtual RunnableProject CreateRunnableProject(IProject project, string name, string fullName, IconModel icon);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Features.Running.Providers.LaunchSettingsRunnableProjectProvider : object {
    private ILogger myLogger;
    private ProjectRunnableOutputDetector myProjectRunnableOutputDetector;
    public IEnumerable`1<RunnableProjectKind> HiddenRunnableProjectKinds { get; }
    public LaunchSettingsRunnableProjectProvider(ILogger logger, ProjectRunnableOutputDetector projectRunnableOutputDetector);
    public sealed virtual IEnumerable`1<RunnableProjectKind> get_HiddenRunnableProjectKinds();
    public sealed virtual RunnableProject CreateRunnableProject(IProject project, string name, string fullName, IconModel icon);
    private bool FilterProjectByType(IProject project);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Running.Providers.StaticMethodRunnableProjectProvider : object {
    private ILogger myLogger;
    private ProjectDependenciesManager myProjectDependenciesManager;
    [CompilerGeneratedAttribute]
private IEnumerable`1<RunnableProjectKind> <HiddenRunnableProjectKinds>k__BackingField;
    public IEnumerable`1<RunnableProjectKind> HiddenRunnableProjectKinds { get; }
    public StaticMethodRunnableProjectProvider(ILogger logger, ProjectDependenciesManager projectDependenciesManager);
    public sealed virtual RunnableProject CreateRunnableProject(IProject project, string name, string fullName, IconModel icon);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Running.Providers.StaticMethodRunnableProjectProvider/<GetSharedFrameworks>d__4")]
private IEnumerable`1<SharedFramework> GetSharedFrameworks(IProject project);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<RunnableProjectKind> get_HiddenRunnableProjectKinds();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Running.Refreshers.LaunchSettingsRefresher : object {
    public LaunchSettingsRefresher(Lifetime lifetime, IFileSystemTracker fileSystemTracker, IViewableProjectsCollection viewableProjectsCollection, RunnableProjectsHost runnableProjectsHost);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Running.Refreshers.ProjectModelRefresher : RecursiveProjectModelChangeDeltaVisitor {
    private RunnableProjectsHost myRunnableProjectsHost;
    public ProjectModelRefresher(Lifetime lifetime, ISolution solution, ChangeManager changeManager, RunnableProjectsHost runnableProjectsHost);
    public virtual void VisitItemDelta(ProjectItemChange change);
    [CompilerGeneratedAttribute]
internal static bool <VisitItemDelta>g__IsProbablyLaunchSettings|2_0(VirtualFileSystemPath path);
    [CompilerGeneratedAttribute]
internal static bool <VisitItemDelta>g__IsLaunchSettings|2_1(IProjectItem project, VirtualFileSystemPath location);
    [CompilerGeneratedAttribute]
private void <VisitItemDelta>g__FireRefresh|2_2(IProject project);
}
[SolutionInstanceComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Running.Refreshers.SolutionHostRefresher : SolutionHostSyncListener {
    private ISolution mySolution;
    public SolutionHostRefresher(ISolution solution);
    public virtual void AfterUpdateProject(ProjectHostChange change);
    public virtual void AfterRemoveProject(ProjectHostChange change);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Features.Running.RunnableProjectFactory : object {
    private IEnumerable`1<IRunnableProjectProvider> myRunnableProjectProviders;
    private ILogger myLogger;
    private ProjectModelElementPresentationService myPresentationService;
    private IconHostBase myIconHost;
    public RunnableProjectFactory(IEnumerable`1<IRunnableProjectProvider> runnableProjectProviders, ILogger logger, ProjectModelElementPresentationService presentationService, IconHostBase iconHost);
    public IconId GetProjectIcon(IProject project);
    public List`1<RunnableProject> CreateRunnableProjects(IProject project);
    public static string GetProjectFullPath(IProject project);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Running.RunnableProjectsHost : object {
    protected ISolution Solution;
    protected RunnableProjectFactory RunnableProjectFactory;
    protected ILogger Logger;
    protected List`1<IRunnableProjectActivator> RunnableProjectActivators;
    [CompilerGeneratedAttribute]
private bool <IsSolutionLoaded>k__BackingField;
    protected Dictionary`2<IProjectMark, List`1<RunnableProject>> RunnableProjects;
    protected bool IsSolutionLoaded { get; private set; }
    public RunnableProjectsHost(ILogger logger, ISolution solution, RunnableProjectFactory runnableProjectFactory, ISolutionLoadTasksScheduler solutionLoadTasksScheduler, IEnumerable`1<IRunnableProjectActivator> runnableProjectActivators);
    [CompilerGeneratedAttribute]
protected bool get_IsSolutionLoaded();
    [CompilerGeneratedAttribute]
private void set_IsSolutionLoaded(bool value);
    protected List`1<RunnableProject> GetAllRunnableProjects();
    protected virtual void OnSolutionLoaded();
    protected virtual void OnRefresh();
    protected virtual void OnProjectRemoved(IProjectMark projectMark);
    protected virtual void OnProjectAdded(IProjectMark projectMark);
    protected virtual void OnProjectUpdated(IProject project);
    public void Refresh();
    public void Refresh(IProjectMark projectMark);
    private bool IsRunnableProject(IProject project);
    private void ProjectRemoved(IProjectMark projectMark);
    private void ProjectAdded(IProject project);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_0();
}
[ZoneDefinitionAttribute]
public class JetBrains.ReSharper.Features.Running.RunnableProjectsZone : object {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Running.RunnablePropertiesRequest : object {
    public IEnumerable`1<string> RequestedProperties { get; }
    public sealed virtual IEnumerable`1<string> get_RequestedProperties();
}
public static class JetBrains.ReSharper.Features.Running.StartActionConstants : object {
    public static string NoStartPage;
    public static string Url;
    public static string Program;
    public static string SpecificPage;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Features.Running.TargetFrameworkIdExtensions : object {
    [ExtensionAttribute]
public static RdTargetFrameworkId ToRdTargetFrameworkInfo(TargetFrameworkId tfm);
    [ExtensionAttribute]
public static RdVersionInfo ToVersionInfo(Version version);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.Running.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
