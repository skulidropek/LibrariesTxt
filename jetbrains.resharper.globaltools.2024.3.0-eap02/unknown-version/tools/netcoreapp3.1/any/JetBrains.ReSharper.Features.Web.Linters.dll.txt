public class JetBrains.ReSharper.Features.Web.Linters.BuildScript.Install.InstallJsScripts : object {
    private static RelativePath ourLinterSrcLocation;
    public static RelativePath InPackageLinterLocation;
    private static InstallJsScripts();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Web.Linters.BuildScript.Install.InstallJsScripts/<DoInstallJsScripts>d__2")]
[BuildStepAttribute]
public static IEnumerable`1<SubplatformFileForPackagingFast> DoInstallJsScripts(ProductHomeDirArtifact productHomeDir, AllAssembliesOnEverything allass);
}
public class JetBrains.ReSharper.Features.Web.Linters.CodeProblems.CodeProblem : object {
    [CompilerGeneratedAttribute]
private string <LinterId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Severity <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private TextRange <TextRange>k__BackingField;
    public string LinterId { get; }
    public string Id { get; }
    public string Message { get; }
    public Severity Severity { get; }
    public TextRange TextRange { get; }
    public CodeProblem(string id, string message, Severity severity, TextRange textRange, string linterId);
    [CompilerGeneratedAttribute]
public string get_LinterId();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public Severity get_Severity();
    [CompilerGeneratedAttribute]
public TextRange get_TextRange();
}
public class JetBrains.ReSharper.Features.Web.Linters.CodeProblems.CodeProblemFix : object {
    [CompilerGeneratedAttribute]
private TextRange <ProblemLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewText>k__BackingField;
    public TextRange ProblemLocation { get; }
    public string NewText { get; }
    public CodeProblemFix(string newText, TextRange problemLocation);
    [CompilerGeneratedAttribute]
public TextRange get_ProblemLocation();
    [CompilerGeneratedAttribute]
public string get_NewText();
}
public class JetBrains.ReSharper.Features.Web.Linters.CodeProblems.FixableCodeProblem : CodeProblem {
    [CompilerGeneratedAttribute]
private CodeProblemFix <Fix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public CodeProblemFix Fix { get; }
    public string ToolTip { get; }
    public FixableCodeProblem(string id, string message, Severity severity, TextRange textRange, CodeProblemFix fix, string tooltip, string linterId);
    [CompilerGeneratedAttribute]
public CodeProblemFix get_Fix();
    [CompilerGeneratedAttribute]
public string get_ToolTip();
}
[StaticSeverityHighlightingAttribute("-1", "JetBrains.ReSharper.Features.Web.Linters.Highlightings.LinterStaticHighlightingGroups/LinterJsErrors1")]
public class JetBrains.ReSharper.Features.Web.Linters.Highlightings.FixableJsLinterHighlighting : LinterHighlightingBase {
    public FixableCodeProblem Problem { get; }
    public FixableJsLinterHighlighting(IJavaScriptFile file, FixableCodeProblem problem);
    public FixableCodeProblem get_Problem();
    public virtual bool IsValid();
}
[StaticSeverityHighlightingAttribute("-1", "JetBrains.ReSharper.Features.Web.Linters.Highlightings.LinterStaticHighlightingGroups/LinterTsErrors2")]
public class JetBrains.ReSharper.Features.Web.Linters.Highlightings.FixableTsLinterHighlighting : FixableJsLinterHighlighting {
    public FixableTsLinterHighlighting(IJavaScriptFile file, FixableCodeProblem problem);
}
public class JetBrains.ReSharper.Features.Web.Linters.Highlightings.LinterHighlightingBase : JsHintHighlightingBase {
    [CompilerGeneratedAttribute]
private CodeProblem <Problem>k__BackingField;
    [CompilerGeneratedAttribute]
private IJavaScriptFile <File>k__BackingField;
    public CodeProblem Problem { get; }
    public IJavaScriptFile File { get; }
    private string JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.ToolTip { get; }
    private string JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.ErrorStripeToolTip { get; }
    public string BulbActionTitle { get; }
    public Severity Severity { get; }
    protected LinterHighlightingBase(IJavaScriptFile file, CodeProblem problem);
    [CompilerGeneratedAttribute]
public CodeProblem get_Problem();
    [CompilerGeneratedAttribute]
public IJavaScriptFile get_File();
    private sealed virtual override string JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.get_ToolTip();
    private sealed virtual override string JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.get_ErrorStripeToolTip();
    public string get_BulbActionTitle();
    public virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual Severity get_Severity();
}
[StaticSeverityHighlightingAttribute("-1", "JetBrains.ReSharper.Features.Web.Linters.Highlightings.LinterStaticHighlightingGroups/LinterJsErrors1")]
public class JetBrains.ReSharper.Features.Web.Linters.Highlightings.LinterJsHighlighting : LinterHighlightingBase {
    public LinterJsHighlighting(IJavaScriptFile file, CodeProblem problem);
}
internal static class JetBrains.ReSharper.Features.Web.Linters.Highlightings.LinterStaticHighlightingGroups : object {
}
[StaticSeverityHighlightingAttribute("-1", "JetBrains.ReSharper.Features.Web.Linters.Highlightings.LinterStaticHighlightingGroups/LinterTsErrors2")]
public class JetBrains.ReSharper.Features.Web.Linters.Highlightings.LinterTsHighlighting : LinterJsHighlighting {
    public LinterTsHighlighting(IJavaScriptFile file, CodeProblem problem);
}
[CustomHighlightingActionProviderAttribute("JetBrains.ProjectModel.KnownProjectFileType")]
public class JetBrains.ReSharper.Features.Web.Linters.Intentions.Options.ChangeLinterSeverityWarningProvider : object {
    [NotNullAttribute]
private IUIApplicationSimple myUIApplication;
    private object myLock;
    private ICollection`1<ILinter> myLinters;
    private ILinterManager myLinterManager;
    public ChangeLinterSeverityWarningProvider(IUIApplicationSimple uiApplication);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Web.Linters.Intentions.Options.ChangeLinterSeverityWarningProvider/<GetActions>d__5")]
public sealed virtual IEnumerable`1<IntentionAction> GetActions(IHighlighting highlighting, DocumentRange highlightingRange, IPsiSourceFile sourceFile, IAnchor configureAnchor);
}
public static class JetBrains.ReSharper.Features.Web.Linters.Intentions.Options.ConfigureLinterHighlightingAnchor : object {
    [NotNullAttribute]
public static IAnchorPosition SuppressPosition;
    [NotNullAttribute]
public static IAnchorPosition SeverityPosition;
    [NotNullAttribute]
public static IAnchorPosition ConfigurePosition;
    private static ConfigureLinterHighlightingAnchor();
    [NotNullAttribute]
[PureAttribute]
public static IAnchor Create(LinterHighlightingBase highlighting);
}
public interface JetBrains.ReSharper.Features.Web.Linters.Intentions.Options.ILinterSeverityChangeWindowProvider {
    public abstract virtual void ShowSeverityWindow(IPsiSourceFile sourceFile, IUIApplicationSimple uiApplication, ISolution solution, ITextControl textControl, ILinterManager linterManager, LinterHighlightingBase highlighting);
}
public class JetBrains.ReSharper.Features.Web.Linters.Intentions.QuickFixes.LinterQuickFix : QuickFixBase {
    [NotNullAttribute]
private IJavaScriptFile myFile;
    [CanBeNullAttribute]
private CodeProblemFix myLinterFix;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public string ToolTip { get; }
    public string Text { get; }
    public LinterQuickFix(FixableJsLinterHighlighting highlighting);
    [CompilerGeneratedAttribute]
public string get_ToolTip();
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    [CompilerGeneratedAttribute]
private void <ExecutePsiTransaction>b__8_0(ITextControl control);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Web.Linters.Intentions.QuickFixes.QuickFixRegistrarComponentLinters : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.Web.Linters.Intentions.QuickFixes.ZoneMarker : object {
}
public interface JetBrains.ReSharper.Features.Web.Linters.LinterManagement.ILinterCaller {
    public ICollection`1<ILinter> Linters { get; }
    public abstract virtual ICollection`1<ILinter> get_Linters();
    public abstract virtual IEnumerable`1<CodeProblem> Lint(IJavaScriptFile file, Func`2<ILinter, bool> lintPredicate);
}
public interface JetBrains.ReSharper.Features.Web.Linters.LinterManagement.ILinterManager {
    public bool HasEnabledLinters { get; }
    public abstract virtual bool get_HasEnabledLinters();
    public abstract virtual IEnumerable`1<CodeProblem> Lint(IJavaScriptFile file);
    public abstract virtual void ConfigureRule(IPsiSourceFile sourceFile, CodeProblem codeProblem, Severity newSeverity);
}
public interface JetBrains.ReSharper.Features.Web.Linters.LinterManagement.ILinterNotificationManager {
    public abstract virtual void ShowNodeNotificationWithRedirect(string notificationMessage);
    public abstract virtual void ShowWarningNotificationWithRedirect(string notificationMessage, string linterId);
    public abstract virtual void ShowErrorNotification(Exception ex);
    public abstract virtual void Warn(Exception ex);
    public abstract virtual void Refresh();
    public abstract virtual void ShowInfoNotification(string notificationMessage);
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.ReSharper.Features.Web.Linters.LinterManagement.ILinterPathsCache {
    public LinterPath Item { get; public set; }
    public abstract virtual LinterPath get_Item(Guid projectGuid, string linterId);
    public abstract virtual void set_Item(Guid projectGuid, string linterId, LinterPath value);
    public abstract virtual void ClearPathsForProject(Guid projectGuid);
    public abstract virtual void ClearPath(Guid projectGuid, string linterId);
    public abstract virtual void Clear();
}
public interface JetBrains.ReSharper.Features.Web.Linters.LinterManagement.ILinterProcessOwner {
    public bool IsValid { get; }
    public abstract virtual bool get_IsValid();
    public abstract virtual void Start();
    public abstract virtual IEnumerable`1<ErrorMessage> Initialize(Guid projectGuid, IEnumerable`1<LinterInfo> linters);
    public abstract virtual ICollection`1<CodeProblem> Lint(IJavaScriptFile file, IEnumerable`1<ILinter> linters);
}
public interface JetBrains.ReSharper.Features.Web.Linters.LinterManagement.ILinterProcessOwnerFactory {
    [NotNullAttribute]
public abstract virtual ILinterProcessOwner CreateProcessOwner(ILogger logger, ILintersGeneralSettingsAccessor settingsAccessor, INodePathProvider nodePathProvider, Lifetime lifetime, ILinterNotificationManager notificationManager);
}
public interface JetBrains.ReSharper.Features.Web.Linters.LinterManagement.ILintersGeneralSettingsAccessor {
    public FileSystemPath LinterRunnerPath { get; }
    [NotNullAttribute]
public ISimpleSignal LinterSettingsChanged { get; }
    public abstract virtual FileSystemPath get_LinterRunnerPath();
    public abstract virtual ISimpleSignal get_LinterSettingsChanged();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Web.Linters.LinterManagement.LinterManager : object {
    private SequentialLifetimes myLifetimes;
    private ILinterProcessOwnerFactory myLinterProcessOwnerFactory;
    private ILinterPathsCache myLinterPathsCache;
    private IEnumerable`1<ILinter> myLinters;
    private ILogger myLogger;
    private INodePathProvider myNodePathProvider;
    private ILintersGeneralSettingsAccessor mySettingsAccessor;
    private ILinterNotificationManager myLinterNotificationManager;
    private ISolution mySolution;
    private IShellLocks myShellLocks;
    private ITextControlManager myTextControlManager;
    private IPersistentIndexManager myPersistentIndexManager;
    private object myInitLock;
    private object mySweaSyncObject;
    private Lifetime myLifetime;
    private AsyncItemsProcessor`1<Action> myLaunchReanalyzeFilesProcessor;
    private SolutionAnalysisConfiguration mySolutionAnalysisConfiguration;
    [CanBeNullAttribute]
private LifetimeDefinition myWaitLifetimeDef;
    [CanBeNullAttribute]
private ILinterCaller mySessionCaller;
    [CanBeNullAttribute]
private ILinterCaller myProcessCaller;
    [CanBeNullAttribute]
private ILinterProcessOwner mySessionProcessOwner;
    private bool IsNodeInstalled { get; }
    private bool IsValid { get; }
    public bool HasEnabledLinters { get; }
    public LinterManager(ILogger logger, IEnumerable`1<ILinter> linters, Lifetime lifetime, ILintersGeneralSettingsAccessor settingsAccessor, INodePathProvider nodePathProvider, ILinterProcessOwnerFactory linterProcessOwnerFactory, ILinterNotificationManager linterNotificationManager, ISolution solution, IShellLocks shellLocks, ITextControlManager textControlManager, IPersistentIndexManager persistentIndexManager, ModulesFilesTracker modulesFilesTracker, SolutionAnalysisConfiguration solutionAnalysisConfiguration);
    private void QueueInvalidateAndRehighlight();
    private bool get_IsNodeInstalled();
    private bool get_IsValid();
    public sealed virtual bool get_HasEnabledLinters();
    private void RecreateProcessOwner();
    private bool Recover();
    public sealed virtual IEnumerable`1<CodeProblem> Lint(IJavaScriptFile file);
    private Func`2<ILinter, bool> LintPredicate(IJavaScriptFile file);
    private bool InitializeSessionLintersIfNeeded(IJavaScriptFile file);
    public sealed virtual void ConfigureRule(IPsiSourceFile sourceFile, CodeProblem codeProblem, Severity newSeverity);
    protected virtual Func`2<ILinter, LinterInfo> LinterInfoSelector(Guid projectGuid, IPsiSourceFile sourceFile, ILinterPathsCache cache);
    private static LinterPath GetCachedLinterPackagePath(Guid projectGuid, IPsiSourceFile sourceFile, ILinterPathsCache cache, ILinter linter);
    private void QueueReanalyzeFiles(bool onlyByEnabledLinters);
    private void LaunchReanalyzeFiles(bool onlyByEnabledLinters);
    private void OnSolutionAnalysisConfigurationChanged(bool onlyByEnabledLinters);
    private bool ReInitialize(bool rehighlightingRequired);
    private static Guid GetProjectGuid(IFile file);
    private void DisposeProcessOwner();
    [CompilerGeneratedAttribute]
private void <.ctor>b__21_1();
    [CompilerGeneratedAttribute]
private void <.ctor>b__21_2();
    [CompilerGeneratedAttribute]
private void <.ctor>b__21_3(Task`1<ModulesFilesChange> task);
    [CompilerGeneratedAttribute]
private void <.ctor>b__21_4(Task`1<ModulesFilesChange> task1);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Web.Linters.LinterManagement.LinterNotificationManager : object {
    [NotNullAttribute]
private SequentialLifetimes myLifetimes;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private UserNotifications myNotifications;
    [NotNullAttribute]
private OptionsManager myOptionsManager;
    [NotNullAttribute]
private Lifetime myLifetime;
    private IShellLocks myShellLocks;
    private static int MaxNotificationLength;
    private static string NotificationSuffix;
    public LinterNotificationManager(Lifetime lifetime, ILogger logger, UserNotifications notifications, IShellLocks shellLocks, OptionsManager optionsManager);
    public sealed virtual void ShowNodeNotificationWithRedirect(string notificationMessage);
    public sealed virtual void ShowWarningNotificationWithRedirect(string notificationMessage, string linterId);
    public sealed virtual void ShowErrorNotification(Exception ex);
    public sealed virtual void Warn(Exception ex);
    public sealed virtual void Refresh();
    public sealed virtual void ShowInfoNotification(string notificationMessage);
    private static string GetShortNotification(string notification);
    private void NavigateToLinterPage(string linterId);
}
public class JetBrains.ReSharper.Features.Web.Linters.LinterManagement.LinterPath : object {
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <Path>k__BackingField;
    public bool IsValid { get; public set; }
    public FileSystemPath Path { get; }
    public LinterPath(FileSystemPath path);
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
public void set_IsValid(bool value);
    [CompilerGeneratedAttribute]
public FileSystemPath get_Path();
}
[DefaultMemberAttribute("Item")]
public class JetBrains.ReSharper.Features.Web.Linters.LinterManagement.LinterPathsCache : object {
    private ConcurrentDictionary`2<Guid, ConcurrentDictionary`2<string, LinterPath>> myPathCache;
    public LinterPath Item { get; public set; }
    public sealed virtual LinterPath get_Item(Guid projectGuid, string linterId);
    public sealed virtual void set_Item(Guid projectGuid, string linterId, LinterPath value);
    public sealed virtual void ClearPath(Guid projectGuid, string linterId);
    public sealed virtual void ClearPathsForProject(Guid projectGuid);
    public sealed virtual void Clear();
}
public class JetBrains.ReSharper.Features.Web.Linters.LinterManagement.LinterProcessOwner : object {
    private ILintersGeneralSettingsAccessor myGeneralSettings;
    private Lifetime myLifetime;
    private object myLock;
    private ILogger myLogger;
    private INodePathProvider myNodePathProvider;
    private ILinterNotificationManager myNotificationManager;
    private StringBuilder myTextBuilder;
    [CanBeNullAttribute]
private Process myLinterProcess;
    private StreamWriter myProxyStreamWriter;
    public bool IsValid { get; }
    public LinterProcessOwner(ILogger logger, ILintersGeneralSettingsAccessor settingsAccessor, Lifetime lifetime, INodePathProvider nodePathProvider, ILinterNotificationManager notificationManager);
    public sealed virtual bool get_IsValid();
    protected void ThrowIfInvalid(string message);
    public sealed virtual void Start();
    private void ErrorDataHandler(object sender, DataReceivedEventArgs args);
    public sealed virtual IEnumerable`1<ErrorMessage> Initialize(Guid projectGuid, IEnumerable`1<LinterInfo> linters);
    public sealed virtual ICollection`1<CodeProblem> Lint(IJavaScriptFile file, IEnumerable`1<ILinter> linters);
    private static LintInfo GetLintSerializationInfo(IJavaScriptFileSection fileSection, IPsiSourceFile sourceFile, IEnumerable`1<ILinter> linters, StringBuilder builder);
    private static LintInfo GetInfoForFile(IPsiSourceFile file, IEnumerable`1<ILinter> linters);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Features.Web.Linters.LinterManagement.LinterProcessOwnerFactory : object {
    public virtual ILinterProcessOwner CreateProcessOwner(ILogger logger, ILintersGeneralSettingsAccessor settingsAccessor, INodePathProvider nodePathProvider, Lifetime lifetime, ILinterNotificationManager notificationManager);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Web.Linters.LinterManagement.LintersGeneralSettingsAccessor : object {
    private static string SessionEntryPoint;
    private object myLock;
    private IDictionary`2<SettingsEntry, object> myValues;
    [CompilerGeneratedAttribute]
private FileSystemPath <LinterRunnerPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <LinterSettingsChanged>k__BackingField;
    public FileSystemPath LinterRunnerPath { get; }
    public ISimpleSignal LinterSettingsChanged { get; }
    public LintersGeneralSettingsAccessor(Lifetime lifetime, ApplicationPackagesFiles applicationPackagesFiles, ISettingsStore settingsStore);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_LinterRunnerPath();
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_LinterSettingsChanged();
}
public class JetBrains.ReSharper.Features.Web.Linters.LinterManagement.PerLintCaller : object {
    private ILintersGeneralSettingsAccessor myGeneralSettings;
    private ILinterProcessOwnerFactory myLinterProcessOwnerFactory;
    private ILinterPathsCache myLinterPathsCache;
    private ILogger myLogger;
    private INodePathProvider myNodePathProvider;
    private ILinterNotificationManager myLinterNotificationManager;
    [CompilerGeneratedAttribute]
private ICollection`1<ILinter> <Linters>k__BackingField;
    public ICollection`1<ILinter> Linters { get; }
    public PerLintCaller(ILogger logger, ILintersGeneralSettingsAccessor settingsAccessor, INodePathProvider nodePathProvider, ILinterProcessOwnerFactory linterProcessOwnerFactory, ICollection`1<ILinter> linters, ILinterPathsCache linterPathsCache, ILinterNotificationManager linterNotificationManager);
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<ILinter> get_Linters();
    public sealed virtual IEnumerable`1<CodeProblem> Lint(IJavaScriptFile file, Func`2<ILinter, bool> lintPredicate);
    private void InitializeLinters(IPsiSourceFile sourceFile, ILinterProcessOwner processOwner);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Web.Linters.LinterManagement.PerLintCaller/<GetLinterInfos>d__12")]
private IEnumerable`1<LinterInfo> GetLinterInfos(IPsiSourceFile sourceFile, Guid projectGuid);
}
public class JetBrains.ReSharper.Features.Web.Linters.LinterManagement.SessionCaller : object {
    private ILinterProcessOwner myProcessOwner;
    private ILinterNotificationManager myLinterNotificationManager;
    [CompilerGeneratedAttribute]
private ICollection`1<ILinter> <Linters>k__BackingField;
    public ICollection`1<ILinter> Linters { get; }
    public SessionCaller(ILinterProcessOwner processOwner, ICollection`1<ILinter> linters, ILinterNotificationManager linterNotificationManager);
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<ILinter> get_Linters();
    public sealed virtual IEnumerable`1<CodeProblem> Lint(IJavaScriptFile file, Func`2<ILinter, bool> lintPredicate);
}
[JsonObjectAttribute("1")]
public class JetBrains.ReSharper.Features.Web.Linters.LinterManagement.TransferMessages.ErrorMessage : object {
    private static string NULL_MSG;
    [CompilerGeneratedAttribute]
private string <LinterId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [JsonPropertyAttribute("linterId")]
public string LinterId { get; public set; }
    [JsonPropertyAttribute("message")]
public string Message { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LinterId();
    [CompilerGeneratedAttribute]
public void set_LinterId(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    public virtual string ToString();
}
[JsonObjectAttribute("1")]
internal class JetBrains.ReSharper.Features.Web.Linters.LinterManagement.TransferMessages.InitRequest : object {
    [CompilerGeneratedAttribute]
private string <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<LinterInfo> <Data>k__BackingField;
    [JsonPropertyAttribute("requestType")]
public string RequestType { get; }
    [JsonPropertyAttribute("projectId")]
public string ProjectId { get; private set; }
    [JsonPropertyAttribute("data")]
public IEnumerable`1<LinterInfo> Data { get; private set; }
    public InitRequest(Guid projectGuid, IEnumerable`1<LinterInfo> initInfo);
    public string get_RequestType();
    [CompilerGeneratedAttribute]
public string get_ProjectId();
    [CompilerGeneratedAttribute]
private void set_ProjectId(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<LinterInfo> get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(IEnumerable`1<LinterInfo> value);
}
[JsonObjectAttribute("1")]
public class JetBrains.ReSharper.Features.Web.Linters.LinterManagement.TransferMessages.LinterResponse : object {
    private static string NULL_MSG;
    [CompilerGeneratedAttribute]
private IList`1<ErrorMessage> <Messages>k__BackingField;
    [JsonPropertyAttribute("messages")]
public IList`1<ErrorMessage> Messages { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<ErrorMessage> get_Messages();
    [CompilerGeneratedAttribute]
public void set_Messages(IList`1<ErrorMessage> value);
    public virtual string ToString();
}
[JsonObjectAttribute("1")]
internal class JetBrains.ReSharper.Features.Web.Linters.LinterManagement.TransferMessages.LintInfo : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <LinterIds>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [JsonPropertyAttribute("linterIds")]
public IEnumerable`1<string> LinterIds { get; public set; }
    [JsonPropertyAttribute("filePath")]
public string FilePath { get; public set; }
    [JsonPropertyAttribute("text")]
public string Text { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_LinterIds();
    [CompilerGeneratedAttribute]
public void set_LinterIds(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
}
[JsonObjectAttribute("1")]
internal class JetBrains.ReSharper.Features.Web.Linters.LinterManagement.TransferMessages.LintRequest : object {
    [CompilerGeneratedAttribute]
private string <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private LintInfo <Data>k__BackingField;
    [JsonPropertyAttribute("requestType")]
public string RequestType { get; }
    [JsonPropertyAttribute("projectId")]
public string ProjectId { get; private set; }
    [JsonPropertyAttribute("data")]
public LintInfo Data { get; private set; }
    public LintRequest(Guid projectGuid, LintInfo lintInfo);
    public string get_RequestType();
    [CompilerGeneratedAttribute]
public string get_ProjectId();
    [CompilerGeneratedAttribute]
private void set_ProjectId(string value);
    [CompilerGeneratedAttribute]
public LintInfo get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(LintInfo value);
}
[JsonObjectAttribute("1")]
public class JetBrains.ReSharper.Features.Web.Linters.LinterManagement.TransferMessages.LintResponse : LinterResponse {
    [CompilerGeneratedAttribute]
private IList`1<JslintCodeProblemInfo> <JslintProblems>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<EslintCodeProblemInfo> <EslintProblems>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<TslintCodeProblemInfo> <TslintProblems>k__BackingField;
    [JsonPropertyAttribute("jslint")]
public IList`1<JslintCodeProblemInfo> JslintProblems { get; public set; }
    [JsonPropertyAttribute("eslint")]
public IList`1<EslintCodeProblemInfo> EslintProblems { get; public set; }
    [JsonPropertyAttribute("tslint")]
public IList`1<TslintCodeProblemInfo> TslintProblems { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<JslintCodeProblemInfo> get_JslintProblems();
    [CompilerGeneratedAttribute]
public void set_JslintProblems(IList`1<JslintCodeProblemInfo> value);
    [CompilerGeneratedAttribute]
public IList`1<EslintCodeProblemInfo> get_EslintProblems();
    [CompilerGeneratedAttribute]
public void set_EslintProblems(IList`1<EslintCodeProblemInfo> value);
    [CompilerGeneratedAttribute]
public IList`1<TslintCodeProblemInfo> get_TslintProblems();
    [CompilerGeneratedAttribute]
public void set_TslintProblems(IList`1<TslintCodeProblemInfo> value);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Web.Linters.Linters.EsLint.EsLint : LinterBase`1<ILinterSettingsAccessor> {
    public static string ID;
    [CompilerGeneratedAttribute]
private RelativePath <RelativeLinterPath>k__BackingField;
    public RelativePath RelativeLinterPath { get; protected set; }
    public EsLint(Lifetime lifetime, ISettingsStore settingsStore);
    private EsLint(ILinterSettingsAccessor settingsAccessor);
    [CompilerGeneratedAttribute]
public virtual RelativePath get_RelativeLinterPath();
    [CompilerGeneratedAttribute]
protected virtual void set_RelativeLinterPath(RelativePath value);
    public virtual bool IsLanguageSupported(PsiLanguageType language);
    public virtual IEnumerable`1<CodeProblem> ParseOutput(LintResponse response, IJavaScriptFileSection section, IJavaScriptFile file, bool isFileSolid);
    private Func`1<Func`2<EslintCodeProblemInfo, CodeProblem>> JsonCodeProblemTransformer(IJavaScriptFileSection section, IJavaScriptFile file, bool isFileSolid);
    public virtual void ConfigureRule(IPsiSourceFile sourceFile, CodeProblem codeProblem, Severity newSeverity, FileSystemPath linterInstanceLocation);
}
[JsonObjectAttribute("1")]
public class JetBrains.ReSharper.Features.Web.Linters.Linters.EsLint.EslintCodeProblemInfo : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private EslintFixInfo <FixInfo>k__BackingField;
    [JsonPropertyAttribute("message")]
public string Message { get; public set; }
    [JsonPropertyAttribute("severity")]
public int Severity { get; public set; }
    [JsonPropertyAttribute("ruleId")]
public string Id { get; public set; }
    [JsonPropertyAttribute("line")]
public int Line { get; public set; }
    [JsonPropertyAttribute("column")]
public int Column { get; public set; }
    [JsonPropertyAttribute("fix")]
public EslintFixInfo FixInfo { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public int get_Severity();
    [CompilerGeneratedAttribute]
public void set_Severity(int value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(int value);
    [CompilerGeneratedAttribute]
public int get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(int value);
    [CompilerGeneratedAttribute]
public EslintFixInfo get_FixInfo();
    [CompilerGeneratedAttribute]
public void set_FixInfo(EslintFixInfo value);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.Features.Web.Linters.Linters.EsLint.EslintConfigurationUtil : object {
    private static string Eslintconfig;
    private static String[] ourConfigNames;
    private static EslintConfigurationUtil();
    [CanBeNullAttribute]
internal static FileSystemPath FindConfigurationFile(IPsiSourceFile sourceFile);
    internal static void ConfigureJson(FileSystemPath configFilePath, string codeProblemId, Severity newSeverity);
    internal static void ConfigureYaml(FileSystemPath configFilePath, string codeProblemId, Severity newSeverity);
    [ExtensionAttribute]
private static JValue ToJvalue(Severity severity, JTokenType oldRuleTokenType);
    [ExtensionAttribute]
private static YamlNode ToYamlNode(Severity severity, YamlScalarNode yamlNode);
    [ExtensionAttribute]
private static string ToConfigString(Severity severity);
    [ExtensionAttribute]
private static int ToInt(Severity severity);
}
[JsonObjectAttribute("1")]
public class JetBrains.ReSharper.Features.Web.Linters.Linters.EsLint.EslintFixInfo : object {
    [CompilerGeneratedAttribute]
private Int32[] <Range>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [JsonPropertyAttribute("range")]
public Int32[] Range { get; public set; }
    [JsonPropertyAttribute("text")]
public string Text { get; public set; }
    [CompilerGeneratedAttribute]
public Int32[] get_Range();
    [CompilerGeneratedAttribute]
public void set_Range(Int32[] value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
}
[OptionsPageAttribute("Eslint", "ESLint", "JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons/EcmaScript")]
public class JetBrains.ReSharper.Features.Web.Linters.Linters.EsLint.EslintPage : LinterOptionsPage {
    public static string PID;
    private PathChooserViewModel myLinterLocation;
    private PathChooserViewModel myConfigPath;
    public EslintPage(Lifetime lifetime, IComponentContainer componentContainer, INodePathProvider nodePathProvider, OptionsManager optionsManager, OptionsSettingsSmartContext optionsSettingsSmartContext, ICommonFileDialogs commonFileDialogs);
    public virtual bool OnOk();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_1();
}
[SettingsKeyAttribute("JetBrains.ReSharper.Features.Web.Linters.Linters.GeneralLinterSettings", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "ESLintLinterSettingsSettingDescription")]
public class JetBrains.ReSharper.Features.Web.Linters.Linters.EsLint.EslintSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "ESLintEnabledSettingDescription")]
public bool EslintEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "ESLintRunTypeSettingDescription")]
public LinterRunType EslintRunType;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "ESLintPackageSearchModeSettingDescription")]
public PathSearchMode EslintPackageSearchMode;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "ConfigurationSearchModeSettingDescription")]
public PathSearchMode EslintConfigurationSearchMode;
    [CanBeNullAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "ConfigurationFilePathSettingDescription")]
public FileSystemPath EslintConfigurationFilePath;
    [CanBeNullAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "LinterPackagePathSettingDescription")]
public FileSystemPath EslintPackagePath;
    [CanBeNullAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "PathToAdditionalESLintRulesDirectorySettingDescription")]
public FileSystemPath EslintAdditionalRulesPath;
    [CanBeNullAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "AdditionalESLintOptionsSettingDescription")]
public string EslintAdditionalOptions;
}
public class JetBrains.ReSharper.Features.Web.Linters.Linters.EsLint.EslintSettingsAccessor : object {
    private IContextBoundSettingsStore mySettingsStore;
    public LinterRunType RunType { get; }
    public bool IsEnabled { get; }
    public FileSystemPath PackagePath { get; }
    public IEnumerable`1<string> AdditionalOptions { get; }
    public FileSystemPath ConfigFilePath { get; }
    public EslintSettingsAccessor(ISettingsStore settingsStore, Lifetime lifetime);
    public sealed virtual LinterRunType get_RunType();
    public sealed virtual bool get_IsEnabled();
    public sealed virtual FileSystemPath get_PackagePath();
    public sealed virtual IEnumerable`1<string> get_AdditionalOptions();
    public sealed virtual FileSystemPath get_ConfigFilePath();
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "GeneralLintersSettingsSettingDescription")]
public class JetBrains.ReSharper.Features.Web.Linters.Linters.GeneralLinterSettings : object {
}
public interface JetBrains.ReSharper.Features.Web.Linters.Linters.ILinter {
    public string Id { get; }
    public string Name { get; }
    public string MessagePrefix { get; }
    public LinterRunType RunType { get; }
    public bool IsEnabled { get; }
    public FileSystemPath PackagePath { get; }
    public FileSystemPath ConfigFilePath { get; }
    public IEnumerable`1<string> AdditionalOptions { get; }
    public RelativePath RelativeLinterPath { get; }
    public abstract virtual string get_Id();
    public abstract virtual string get_Name();
    public abstract virtual string get_MessagePrefix();
    public abstract virtual LinterRunType get_RunType();
    public abstract virtual bool get_IsEnabled();
    public abstract virtual FileSystemPath get_PackagePath();
    public abstract virtual FileSystemPath get_ConfigFilePath();
    public abstract virtual IEnumerable`1<string> get_AdditionalOptions();
    public abstract virtual RelativePath get_RelativeLinterPath();
    public abstract virtual bool IsLanguageSupported(PsiLanguageType language);
    public abstract virtual ICollection`1<SeverityOption> GetSupportedSeverityOptions(string codeProblemId);
    public abstract virtual IEnumerable`1<CodeProblem> ParseOutput(LintResponse response, IJavaScriptFileSection section, IJavaScriptFile file, bool isFileSolid);
    public abstract virtual void ConfigureRule(IPsiSourceFile sourceFile, CodeProblem codeProblem, Severity newSeverity, FileSystemPath linterInstanceLocation);
}
public interface JetBrains.ReSharper.Features.Web.Linters.Linters.ILinterSettingsAccessor {
    public LinterRunType RunType { get; }
    public bool IsEnabled { get; }
    public FileSystemPath PackagePath { get; }
    public FileSystemPath ConfigFilePath { get; }
    public IEnumerable`1<string> AdditionalOptions { get; }
    public abstract virtual LinterRunType get_RunType();
    public abstract virtual bool get_IsEnabled();
    public abstract virtual FileSystemPath get_PackagePath();
    public abstract virtual FileSystemPath get_ConfigFilePath();
    public abstract virtual IEnumerable`1<string> get_AdditionalOptions();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Web.Linters.Linters.JsLint.JsLint : LinterBase`1<ILinterSettingsAccessor> {
    public static string ID;
    [CompilerGeneratedAttribute]
private RelativePath <RelativeLinterPath>k__BackingField;
    public RelativePath RelativeLinterPath { get; protected set; }
    public JsLint(Lifetime lifetime, ISettingsStore settingsStore);
    private JsLint(ILinterSettingsAccessor settingsAccessor);
    [CompilerGeneratedAttribute]
public virtual RelativePath get_RelativeLinterPath();
    [CompilerGeneratedAttribute]
protected virtual void set_RelativeLinterPath(RelativePath value);
    public virtual bool IsLanguageSupported(PsiLanguageType language);
    public virtual ICollection`1<SeverityOption> GetSupportedSeverityOptions(string codeProblemId);
    public virtual IEnumerable`1<CodeProblem> ParseOutput(LintResponse response, IJavaScriptFileSection section, IJavaScriptFile file, bool isFileSolid);
    private Func`1<Func`2<JslintCodeProblemInfo, CodeProblem>> JsonCodeProblemTransformer(IJavaScriptFileSection section, IJavaScriptFile file, bool isFileSolid);
}
[JsonObjectAttribute("1")]
public class JetBrains.ReSharper.Features.Web.Linters.Linters.JsLint.JslintCodeProblemInfo : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    [JsonPropertyAttribute("reason")]
public string Message { get; public set; }
    [JsonPropertyAttribute("code")]
public string Id { get; public set; }
    [JsonPropertyAttribute("line")]
public int Line { get; public set; }
    [JsonPropertyAttribute("character")]
public int Column { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(int value);
    [CompilerGeneratedAttribute]
public int get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(int value);
}
[OptionsPageAttribute("Jslint", "JSLint", "JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons/Js")]
public class JetBrains.ReSharper.Features.Web.Linters.Linters.JsLint.JslintPage : LinterOptionsPage {
    public static string PID;
    private PathChooserViewModel myLinterLocation;
    public JslintPage(Lifetime lifetime, INodePathProvider nodePathProvider, IComponentContainer componentContainer, OptionsManager optionsManager, OptionsSettingsSmartContext optionsSettingsSmartContext, ICommonFileDialogs commonFileDialogs);
    public virtual bool OnOk();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_1();
}
[SettingsKeyAttribute("JetBrains.ReSharper.Features.Web.Linters.Linters.GeneralLinterSettings", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "JslintLinterSettingsSettingDescription")]
public class JetBrains.ReSharper.Features.Web.Linters.Linters.JsLint.JslintSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "JslintEnabledSettingDescription")]
public bool JslintEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "JSLintRunTypeSettingDescription")]
public LinterRunType JslintRunType;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "JSLintPackageSearchModeSettingDescription")]
public PathSearchMode JslintPackageSearchMode;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "ConfigurationSearchModeSettingDescription")]
public PathSearchMode JslintConfigurationSearchMode;
    [CanBeNullAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "ConfigurationFilePathSettingDescription")]
public FileSystemPath JslintConfigurationFilePath;
    [CanBeNullAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "LinterSourcesPathSettingDescription")]
public FileSystemPath JslintPackagePath;
    [CanBeNullAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "AdditionalJSLintOptionsSettingDescription")]
public string JslintAdditionalOptions;
}
public class JetBrains.ReSharper.Features.Web.Linters.Linters.JsLint.JslintSettingsAccessor : object {
    private IContextBoundSettingsStore mySettingsStore;
    public LinterRunType RunType { get; }
    public bool IsEnabled { get; }
    public FileSystemPath PackagePath { get; }
    public FileSystemPath ConfigFilePath { get; }
    public IEnumerable`1<string> AdditionalOptions { get; }
    public JslintSettingsAccessor(ISettingsStore settingsStore, Lifetime lifetime);
    public sealed virtual LinterRunType get_RunType();
    public sealed virtual bool get_IsEnabled();
    public sealed virtual FileSystemPath get_PackagePath();
    public sealed virtual FileSystemPath get_ConfigFilePath();
    public sealed virtual IEnumerable`1<string> get_AdditionalOptions();
}
public class JetBrains.ReSharper.Features.Web.Linters.Linters.LinterBadResponseException : LinterException {
    public LinterBadResponseException(string message);
    public LinterBadResponseException(string message, Exception innerException);
}
public abstract class JetBrains.ReSharper.Features.Web.Linters.Linters.LinterBase`1 : object {
    protected List`1<SeverityOption> DefaultSeverityOptions;
    [CompilerGeneratedAttribute]
private TSettingsAccessor <SettingsAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessagePrefix>k__BackingField;
    protected TSettingsAccessor SettingsAccessor { get; }
    public string Id { get; }
    public string Name { get; }
    public string MessagePrefix { get; }
    public LinterRunType RunType { get; }
    public bool IsEnabled { get; }
    public FileSystemPath PackagePath { get; }
    public FileSystemPath ConfigFilePath { get; }
    public IEnumerable`1<string> AdditionalOptions { get; }
    public RelativePath RelativeLinterPath { get; protected set; }
    protected LinterBase`1(string id, string name, string messsagePrefix, TSettingsAccessor settingsAccessor);
    [CompilerGeneratedAttribute]
protected TSettingsAccessor get_SettingsAccessor();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual string get_MessagePrefix();
    public sealed virtual LinterRunType get_RunType();
    public sealed virtual bool get_IsEnabled();
    public sealed virtual FileSystemPath get_PackagePath();
    public sealed virtual FileSystemPath get_ConfigFilePath();
    public sealed virtual IEnumerable`1<string> get_AdditionalOptions();
    public abstract virtual RelativePath get_RelativeLinterPath();
    protected abstract virtual void set_RelativeLinterPath(RelativePath value);
    public abstract virtual bool IsLanguageSupported(PsiLanguageType language);
    public virtual ICollection`1<SeverityOption> GetSupportedSeverityOptions(string codeProblemId);
    public abstract virtual IEnumerable`1<CodeProblem> ParseOutput(LintResponse response, IJavaScriptFileSection section, IJavaScriptFile file, bool isFileSolid);
    public virtual void ConfigureRule(IPsiSourceFile sourceFile, CodeProblem codeProblem, Severity newSeverity, FileSystemPath linterInstanceLocation);
    protected virtual TextRange CreateRangeByOffset(int startOffset, int endOffset, int sectionStartOffset);
    protected virtual TextRange CreateRangeByCoords(int line, int column, int sectionStartOffset, IJavaScriptFileSection fileSection, LineIndex sectionIndex);
    protected virtual TextRange CreateHighlightingRangeByOffset(int startOffset, int endOffset, int sectionStartOffset);
}
internal static class JetBrains.ReSharper.Features.Web.Linters.Linters.LinterCliParser : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Features.Web.Linters.Linters.LinterCliParser/<ParseCliString>d__0")]
internal static IEnumerable`1<string> ParseCliString(string cliString);
}
public class JetBrains.ReSharper.Features.Web.Linters.Linters.LinterConfigurationParseException : LinterException {
    public LinterConfigurationParseException(string message);
    public LinterConfigurationParseException(string message, Exception innerException);
}
internal static class JetBrains.ReSharper.Features.Web.Linters.Linters.LinterConfigurationUtil : object {
    private static string PackageJson;
    [CanBeNullAttribute]
internal static VirtualFileSystemPath FindConfigurationFile(IPsiSourceFile sourceFile, String[] sortedConfigNames, string configPropertyInsidePkgJson);
    internal static JObject LoadJsonConfiguration(FileSystemPath configFilePath);
    internal static YamlStream LoadYamlConfiguration(FileSystemPath configFilePath);
    internal static void WriteConfigurationObject(FileSystemPath configFilePath, JObject configObject);
    internal static void WriteConfigurationObject(FileSystemPath configFilePath, YamlStream yaml);
}
public class JetBrains.ReSharper.Features.Web.Linters.Linters.LinterException : Exception {
    public LinterException(string message);
    protected LinterException(string message, Exception innerException);
}
[JsonObjectAttribute("1")]
public class JetBrains.ReSharper.Features.Web.Linters.Linters.LinterInfo : object {
    [CompilerGeneratedAttribute]
private string <LinterId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LinterPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <LinterOptions>k__BackingField;
    [JsonPropertyAttribute("linterId")]
public string LinterId { get; public set; }
    [JsonPropertyAttribute("linterPath")]
public string LinterPath { get; public set; }
    [JsonPropertyAttribute("configPath")]
public string ConfigPath { get; public set; }
    [JsonPropertyAttribute("linterOptions")]
public ICollection`1<string> LinterOptions { get; private set; }
    [CompilerGeneratedAttribute]
public string get_LinterId();
    [CompilerGeneratedAttribute]
public void set_LinterId(string value);
    [CompilerGeneratedAttribute]
public string get_LinterPath();
    [CompilerGeneratedAttribute]
public void set_LinterPath(string value);
    [CompilerGeneratedAttribute]
public string get_ConfigPath();
    [CompilerGeneratedAttribute]
public void set_ConfigPath(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_LinterOptions();
    [CompilerGeneratedAttribute]
private void set_LinterOptions(ICollection`1<string> value);
}
public static class JetBrains.ReSharper.Features.Web.Linters.Linters.LinterJsonParser : object {
    private static TimeSpan ourReadAwaitTime;
    private static LinterJsonParser();
    public static LintResponse DeserializeLintResponse(StreamReader json);
    public static string Serialize(TData data);
    public static TResult ParseSingleObject(StreamReader json);
}
public abstract class JetBrains.ReSharper.Features.Web.Linters.Linters.LinterOptionsPage : CustomSimpleOptionsPage {
    protected INodePathProvider NodePathProvider;
    protected IComponentContainer ComponentContainer;
    protected OptionsManager OptionsManager;
    protected LinterOptionsPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, INodePathProvider nodePathProvider, IComponentContainer componentContainer, OptionsManager optionsManager);
    protected IOptionEntity AddMessage(MessageElement[] elements);
    protected IOptionEntity InputField(RichText caption, Expression`1<Func`2<TKeyClass, TEntryMemberType>> reference);
    protected bool IsNodeMessageVisible(IProperty`1<bool> enabledProperty);
    protected void AdviseNodeErrorChange(IProperty`1<bool> enabledProperty, IProperty`1<bool> nodeMessageVisible);
    protected void NavigateToPage(string pid);
}
public class JetBrains.ReSharper.Features.Web.Linters.Linters.LinterProcessOwnerFailedException : LinterException {
    public LinterProcessOwnerFailedException(string message);
}
public class JetBrains.ReSharper.Features.Web.Linters.Linters.LinterResponseBlockedException : Exception {
}
public class JetBrains.ReSharper.Features.Web.Linters.Linters.LinterRunnerException : LinterWarningException {
    public LinterRunnerException(string message, string notificationMessage);
}
public class JetBrains.ReSharper.Features.Web.Linters.Linters.LinterRunnerNotFoundException : LinterException {
    public LinterRunnerNotFoundException(string message);
}
public enum JetBrains.ReSharper.Features.Web.Linters.Linters.LinterRunType : Enum {
    public int value__;
    public static LinterRunType Auto;
    public static LinterRunType Process;
    public static LinterRunType SessionProcess;
}
public class JetBrains.ReSharper.Features.Web.Linters.Linters.LinterSeverityConfigurationException : LinterException {
    public LinterSeverityConfigurationException(string message);
    public LinterSeverityConfigurationException(string message, Exception innerException);
}
public class JetBrains.ReSharper.Features.Web.Linters.Linters.LinterWarningException : LinterException {
    [CompilerGeneratedAttribute]
private string <NotificationMessage>k__BackingField;
    public string NotificationMessage { get; }
    protected LinterWarningException(string message, string notificationMessage);
    protected LinterWarningException(string message, string notificationMessage, Exception innerException);
    [CompilerGeneratedAttribute]
public string get_NotificationMessage();
}
public class JetBrains.ReSharper.Features.Web.Linters.Linters.NodeExecutableNotFoundException : LinterWarningException {
    private static string NotificationTemplate;
    public NodeExecutableNotFoundException(string message, string nodePath);
    public NodeExecutableNotFoundException(string message, string nodePath, Exception innerException);
}
public interface JetBrains.ReSharper.Features.Web.Linters.Linters.TsLint.ITslintSettingsAccessor {
    public bool ValidateJsFiles { get; }
    public abstract virtual bool get_ValidateJsFiles();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Features.Web.Linters.Linters.TsLint.TsLint : LinterBase`1<ITslintSettingsAccessor> {
    public static string ID;
    [CompilerGeneratedAttribute]
private RelativePath <RelativeLinterPath>k__BackingField;
    public RelativePath RelativeLinterPath { get; protected set; }
    public TsLint(Lifetime lifetime, ISettingsStore settingsStore);
    private TsLint(ITslintSettingsAccessor settingsAccessor);
    [CompilerGeneratedAttribute]
public virtual RelativePath get_RelativeLinterPath();
    [CompilerGeneratedAttribute]
protected virtual void set_RelativeLinterPath(RelativePath value);
    public virtual bool IsLanguageSupported(PsiLanguageType language);
    public virtual IEnumerable`1<CodeProblem> ParseOutput(LintResponse response, IJavaScriptFileSection section, IJavaScriptFile file, bool isFileSolid);
    private Func`1<Func`2<TslintCodeProblemInfo, CodeProblem>> JsonCodeProblemTransformer(IJavaScriptFileSection section, IJavaScriptFile file);
    public virtual void ConfigureRule(IPsiSourceFile sourceFile, CodeProblem codeProblem, Severity newSeverity, FileSystemPath linterInstanceLocation);
}
[JsonObjectAttribute("1")]
public class JetBrains.ReSharper.Features.Web.Linters.Linters.TsLint.TslintCodeProblemInfo : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TslintFixInfo> <FixInfos>k__BackingField;
    [JsonPropertyAttribute("failure")]
public string Message { get; public set; }
    [JsonPropertyAttribute("ruleName")]
public string Id { get; public set; }
    [JsonPropertyAttribute("ruleSeverity")]
public string Severity { get; public set; }
    [JsonPropertyAttribute("startPosition")]
public int StartPosition { get; public set; }
    [JsonPropertyAttribute("endPosition")]
public int EndPosition { get; public set; }
    [JsonPropertyAttribute("fix")]
public List`1<TslintFixInfo> FixInfos { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Severity();
    [CompilerGeneratedAttribute]
public void set_Severity(string value);
    [CompilerGeneratedAttribute]
public int get_StartPosition();
    [CompilerGeneratedAttribute]
public void set_StartPosition(int value);
    [CompilerGeneratedAttribute]
public int get_EndPosition();
    [CompilerGeneratedAttribute]
public void set_EndPosition(int value);
    [CompilerGeneratedAttribute]
public List`1<TslintFixInfo> get_FixInfos();
    [CompilerGeneratedAttribute]
public void set_FixInfos(List`1<TslintFixInfo> value);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.Features.Web.Linters.Linters.TsLint.TslintConfigurationUtil : object {
    private static String[] ourConfigNames;
    private static TslintConfigurationUtil();
    [CanBeNullAttribute]
internal static FileSystemPath FindConfigurationFile(IPsiSourceFile sourceFile);
    internal static void ConfigureJson(FileSystemPath configFilePath, FileSystemPath linterPath, string codeProblemId, Severity newSeverity, bool isJsRules);
    internal static void ConfigureYaml(FileSystemPath configFilePath, FileSystemPath linterPath, string codeProblemId, Severity newSeverity, bool isJsRules);
    private static ICollection`1<string> GetHeritableConfigs(JObject configObj);
    private static ICollection`1<string> GetHeritableConfigs(YamlMappingNode configObj);
    private static void LoadJsonObjects(FileSystemPath configFilePath, bool isJsRules, JObject& configObj, JObject& rulesObj);
    private static YamlStream LoadYamlObjects(FileSystemPath configFilePath, bool isJsRules, YamlMappingNode& configObj, YamlMappingNode& rulesObj);
    private static void SetNewSeverity(JObject rulesObj, string codeProblemId, Severity newSeverity);
    private static void SetNewSeverity(YamlMappingNode rulesObj, YamlScalarNode ruleNameNode, Severity newSeverity);
    private static JToken GetRuleTokenFromHeritableConfigs(FileSystemPath baseConfigPath, FileSystemPath linterPath, ICollection`1<string> extends, string codeProblemId, bool isJsRules);
    private static YamlNode GetRuleNodeFromHeritableConfigs(FileSystemPath baseConfigPath, FileSystemPath linterPath, ICollection`1<string> extends, YamlScalarNode ruleNameNode, bool isJsRules);
    private static JToken GetRuleTokenFromPreset(string preset, FileSystemPath linterPath, string codeProblemId, bool isJsRules);
    private static YamlNode GetRuleNodeFromPreset(string preset, FileSystemPath linterPath, string codeProblemId, bool isJsRules);
    private static IObjectLiteral LoadRuleObjectLiteralFromPreset(string preset, FileSystemPath linterPath, bool isJsRules, IJavaScriptFile& parsedFile);
    private static string GetHeritablePreset(IJavaScriptFile parsedFile);
    [ExtensionAttribute]
private static JValue ToJvalue(IJavaScriptLiteralExpression literal);
    [ExtensionAttribute]
private static YamlScalarNode ToYamlScalar(IJavaScriptLiteralExpression literal);
    [ExtensionAttribute]
private static JObject ToJobject(IObjectLiteral objectLiteral);
    [ExtensionAttribute]
private static YamlMappingNode ToYamlObject(IObjectLiteral objectLiteral);
    [ExtensionAttribute]
private static JArray ToJarray(IArrayLiteral arrayLiteral);
    [ExtensionAttribute]
private static YamlSequenceNode ToYamlArray(IArrayLiteral arrayLiteral);
    [ExtensionAttribute]
private static JToken ToJtoken(IExpressionOrSpread expr);
    [ExtensionAttribute]
private static YamlNode ToYamlNode(IExpressionOrSpread expr);
    [ExtensionAttribute]
private static string ToConfigString(Severity severity);
}
[JsonObjectAttribute("1")]
public class JetBrains.ReSharper.Features.Web.Linters.Linters.TsLint.TslintFixInfo : object {
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [JsonPropertyAttribute("start")]
public int Start { get; public set; }
    [JsonPropertyAttribute("length")]
public int Length { get; public set; }
    [JsonPropertyAttribute("text")]
public string Text { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(int value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(int value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
}
[OptionsPageAttribute("Tslint", "TSLint", "JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons/TypeScript")]
public class JetBrains.ReSharper.Features.Web.Linters.Linters.TsLint.TslintPage : LinterOptionsPage {
    public static string PID;
    private PathChooserViewModel myLinterLocation;
    private PathChooserViewModel myConfigPath;
    public TslintPage(Lifetime lifetime, IComponentContainer componentContainer, INodePathProvider nodePathProvider, OptionsManager optionsManager, OptionsSettingsSmartContext optionsSettingsSmartContext, ICommonFileDialogs commonFileDialogs);
    public virtual bool OnOk();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_1();
}
[SettingsKeyAttribute("JetBrains.ReSharper.Features.Web.Linters.Linters.GeneralLinterSettings", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "TSLintLinterSettingsSettingDescription")]
public class JetBrains.ReSharper.Features.Web.Linters.Linters.TsLint.TslintSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "TSLintEnabledSettingDescription")]
public bool TslintEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "TSLintRunTypeSettingDescription")]
public LinterRunType TslintRunType;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "TSLintPackageSearchModeSettingDescription")]
public PathSearchMode TslintPackageSearchMode;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "ConfigurationSearchModeSettingDescription")]
public PathSearchMode TslintConfigurationSearchMode;
    [CanBeNullAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "ConfigurationFilePathSettingDescription")]
public FileSystemPath TslintConfigurationFilePath;
    [CanBeNullAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "LinterPackagePathSettingDescription")]
public FileSystemPath TslintPackagePath;
    [CanBeNullAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "PathToAdditionalTSLintRulesDirectorySettingDescription")]
public FileSystemPath TslintAdditionalRulesPath;
    [CanBeNullAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "AdditionalTSLintOptionsSettingDescription")]
public string TslintAdditionalOptions;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Features.Web.Linters.Resources.Strings", "ValidateJavaScriptFilesSettingDescription")]
public bool ValidateJsFiles;
}
public class JetBrains.ReSharper.Features.Web.Linters.Linters.TsLint.TslintSettingsAccessor : object {
    private IContextBoundSettingsStore mySettingsStore;
    public LinterRunType RunType { get; }
    public bool IsEnabled { get; }
    public bool ValidateJsFiles { get; }
    public FileSystemPath PackagePath { get; }
    public IEnumerable`1<string> AdditionalOptions { get; }
    public FileSystemPath ConfigFilePath { get; }
    public TslintSettingsAccessor(ISettingsStore settingsStore, Lifetime lifetime);
    public sealed virtual LinterRunType get_RunType();
    public sealed virtual bool get_IsEnabled();
    public sealed virtual bool get_ValidateJsFiles();
    public sealed virtual FileSystemPath get_PackagePath();
    public sealed virtual IEnumerable`1<string> get_AdditionalOptions();
    public sealed virtual FileSystemPath get_ConfigFilePath();
}
[OptionsPageAttribute("WebLintersPage", "Web Linters", "JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons/CodeCleanupOptionPage")]
public class JetBrains.ReSharper.Features.Web.Linters.Linters.WebLintersPage : AEmptyOptionsPage {
    public static string PID;
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Features.Web.Linters.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string AdditionalESLintOptionsSettingDescription { get; }
    public static string AdditionalJSLintOptionsSettingDescription { get; }
    public static string AdditionalTSLintOptionsSettingDescription { get; }
    public static string ConfigurationFilePathSettingDescription { get; }
    public static string ConfigurationSearchModeSettingDescription { get; }
    public static string ESLintEnabledSettingDescription { get; }
    public static string ESLintLinterSettingsSettingDescription { get; }
    public static string ESLintOptionPageTitle { get; }
    public static string ESLintPackageSearchModeSettingDescription { get; }
    public static string ESLintRunTypeSettingDescription { get; }
    public static string ExternalLinterJavaScriptErrors_Text { get; }
    public static string ExternalLinterTypeScriptErrors_Text { get; }
    public static string GeneralLintersSettingsSettingDescription { get; }
    public static string JslintEnabledSettingDescription { get; }
    public static string JslintLinterSettingsSettingDescription { get; }
    public static string JSLintOptionPageTitle { get; }
    public static string JSLintPackageSearchModeSettingDescription { get; }
    public static string JSLintRunTypeSettingDescription { get; }
    public static string LinterPackagePathSettingDescription { get; }
    public static string LinterSourcesPathSettingDescription { get; }
    public static string PathToAdditionalESLintRulesDirectorySettingDescription { get; }
    public static string PathToAdditionalTSLintRulesDirectorySettingDescription { get; }
    public static string TSLintEnabledSettingDescription { get; }
    public static string TSLintLinterSettingsSettingDescription { get; }
    public static string TSLintOptionPageTitle { get; }
    public static string TSLintPackageSearchModeSettingDescription { get; }
    public static string TSLintRunTypeSettingDescription { get; }
    public static string ValidateJavaScriptFilesSettingDescription { get; }
    public static string WebLintersOptionPageTitle { get; }
    public static string General_Header_Text { get; }
    public static string Enable_BoolOption_Text { get; }
    public static string EnableEsLintValidation_BoolOption_ToolTip { get; }
    public static string ChooseESLintPackageLocation_Text_Text { get; }
    public static string AutomaticSearch_SingleRadioOption_Text { get; }
    public static string WeWillAutomaticallyLookForESLintPackage_RichText_Text { get; }
    public static string CustomESLintFolder_SingleRadioOption_Text { get; }
    public static string PathToTheESLintFolder_FolderChooserOption_ToolTip { get; }
    public static string Configuration_Header_Text { get; }
    public static string ChooseAWayOfESLintConfiguration_Text_Text { get; }
    public static string ESLintWillAutomaticallyLookForEslintrc_Text { get; }
    public static string CustomConfigurationFile_SingleRadioOption_Text { get; }
    public static string PathToTheConfigurationFile_FileChooserOption_ToolTip { get; }
    public static string Options_Header_Text { get; }
    public static string AdditionalESLintOptions_StringOption_Text { get; }
    public static string EnterOptionsInTheCommandLineLikeFormat_Text { get; }
    public static string PathToTheJSLintFolder_FolderChooserOption_ToolTip { get; }
    public static string General_Header_Text2 { get; }
    public static string EnableJSLintValidation_BoolOption_ToolTip { get; }
    public static string ChooseJSLintPackageLocation_Text_Text { get; }
    public static string WeWillAutomaticallyLookForJSLintPackage_RichText_Text { get; }
    public static string CustomJSLintFolder_SingleRadioOption_Text { get; }
    public static string AdditionalJSLintOptions_StringOption_Text { get; }
    public static string EnterOptionsInTheCommandLineLikeFormat_Text2 { get; }
    public static string General_Header_Text3 { get; }
    public static string EnableTSLintValidation_BoolOption_ToolTip { get; }
    public static string ChooseTSLintPackageLocation_Text_Text { get; }
    public static string WeWillAutomaticallyLookForTSLintPackage_RichText_Text { get; }
    public static string CustomTSLintFolder_SingleRadioOption_Text { get; }
    public static string PathToTheTSLintFolder_FolderChooserOption_ToolTip { get; }
    public static string ChooseAWayOfTSLintConfiguration_Text_Text { get; }
    public static string TSLintWillAutomaticallyLookForTslint_Text { get; }
    public static string LintJavaScriptFiles_BoolOption_Text { get; }
    public static string AdditionalTSLintOptions_StringOption_Text { get; }
    public static string _Fix_Problem_ToolTip { get; }
    public static string ConfigureInspectionSeverity_Text { get; }
    public static string Inspection__Text { get; }
    public static string EditNodeJsSettings_Caption { get; }
    public static string NodeJsIsNotFound_Text { get; }
    public static string ShowLinterSettings_Caption { get; }
    public static string LinterWarning_Text { get; }
    public static string ShowFullMessage_Caption { get; }
    public static string LinterInfoMessage_Text { get; }
    public static string ShowError_Caption { get; }
    public static string CriticalLinterError_Text { get; }
    public static string NodeJsIsNotInstalledCorrectlyOrPath_Text { get; }
    public static string WaitingTooLongForReadingLinterResponse_Text { get; }
    public static string SomethingGoesWrongWhileLinterInitialization_Text { get; }
    public static string FailedToInitialize_CanTLoadLinterBy_Text { get; }
    public static string FailedToInitialize___Text { get; }
    public static string FailedToInitialize_SpecifiedLinterPath_Text { get; }
    public static string FailedToInitialize_CanTLoadLinterBy_Text2 { get; }
    public static string LintFailed__Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_AdditionalESLintOptionsSettingDescription();
    public static string get_AdditionalJSLintOptionsSettingDescription();
    public static string get_AdditionalTSLintOptionsSettingDescription();
    public static string get_ConfigurationFilePathSettingDescription();
    public static string get_ConfigurationSearchModeSettingDescription();
    public static string get_ESLintEnabledSettingDescription();
    public static string get_ESLintLinterSettingsSettingDescription();
    public static string get_ESLintOptionPageTitle();
    public static string get_ESLintPackageSearchModeSettingDescription();
    public static string get_ESLintRunTypeSettingDescription();
    public static string get_ExternalLinterJavaScriptErrors_Text();
    public static string get_ExternalLinterTypeScriptErrors_Text();
    public static string get_GeneralLintersSettingsSettingDescription();
    public static string get_JslintEnabledSettingDescription();
    public static string get_JslintLinterSettingsSettingDescription();
    public static string get_JSLintOptionPageTitle();
    public static string get_JSLintPackageSearchModeSettingDescription();
    public static string get_JSLintRunTypeSettingDescription();
    public static string get_LinterPackagePathSettingDescription();
    public static string get_LinterSourcesPathSettingDescription();
    public static string get_PathToAdditionalESLintRulesDirectorySettingDescription();
    public static string get_PathToAdditionalTSLintRulesDirectorySettingDescription();
    public static string get_TSLintEnabledSettingDescription();
    public static string get_TSLintLinterSettingsSettingDescription();
    public static string get_TSLintOptionPageTitle();
    public static string get_TSLintPackageSearchModeSettingDescription();
    public static string get_TSLintRunTypeSettingDescription();
    public static string get_ValidateJavaScriptFilesSettingDescription();
    public static string get_WebLintersOptionPageTitle();
    public static string get_General_Header_Text();
    public static string get_Enable_BoolOption_Text();
    public static string get_EnableEsLintValidation_BoolOption_ToolTip();
    public static string get_ChooseESLintPackageLocation_Text_Text();
    public static string get_AutomaticSearch_SingleRadioOption_Text();
    public static string get_WeWillAutomaticallyLookForESLintPackage_RichText_Text();
    public static string get_CustomESLintFolder_SingleRadioOption_Text();
    public static string get_PathToTheESLintFolder_FolderChooserOption_ToolTip();
    public static string get_Configuration_Header_Text();
    public static string get_ChooseAWayOfESLintConfiguration_Text_Text();
    public static string get_ESLintWillAutomaticallyLookForEslintrc_Text();
    public static string get_CustomConfigurationFile_SingleRadioOption_Text();
    public static string get_PathToTheConfigurationFile_FileChooserOption_ToolTip();
    public static string get_Options_Header_Text();
    public static string get_AdditionalESLintOptions_StringOption_Text();
    public static string get_EnterOptionsInTheCommandLineLikeFormat_Text();
    public static string get_PathToTheJSLintFolder_FolderChooserOption_ToolTip();
    public static string get_General_Header_Text2();
    public static string get_EnableJSLintValidation_BoolOption_ToolTip();
    public static string get_ChooseJSLintPackageLocation_Text_Text();
    public static string get_WeWillAutomaticallyLookForJSLintPackage_RichText_Text();
    public static string get_CustomJSLintFolder_SingleRadioOption_Text();
    public static string get_AdditionalJSLintOptions_StringOption_Text();
    public static string get_EnterOptionsInTheCommandLineLikeFormat_Text2();
    public static string get_General_Header_Text3();
    public static string get_EnableTSLintValidation_BoolOption_ToolTip();
    public static string get_ChooseTSLintPackageLocation_Text_Text();
    public static string get_WeWillAutomaticallyLookForTSLintPackage_RichText_Text();
    public static string get_CustomTSLintFolder_SingleRadioOption_Text();
    public static string get_PathToTheTSLintFolder_FolderChooserOption_ToolTip();
    public static string get_ChooseAWayOfTSLintConfiguration_Text_Text();
    public static string get_TSLintWillAutomaticallyLookForTslint_Text();
    public static string get_LintJavaScriptFiles_BoolOption_Text();
    public static string get_AdditionalTSLintOptions_StringOption_Text();
    public static string get__Fix_Problem_ToolTip();
    public static string get_ConfigureInspectionSeverity_Text();
    public static string get_Inspection__Text();
    public static string get_EditNodeJsSettings_Caption();
    public static string get_NodeJsIsNotFound_Text();
    public static string get_ShowLinterSettings_Caption();
    public static string get_LinterWarning_Text();
    public static string get_ShowFullMessage_Caption();
    public static string get_LinterInfoMessage_Text();
    public static string get_ShowError_Caption();
    public static string get_CriticalLinterError_Text();
    public static string get_NodeJsIsNotInstalledCorrectlyOrPath_Text();
    public static string get_WaitingTooLongForReadingLinterResponse_Text();
    public static string get_SomethingGoesWrongWhileLinterInitialization_Text();
    public static string get_FailedToInitialize_CanTLoadLinterBy_Text();
    public static string get_FailedToInitialize___Text();
    public static string get_FailedToInitialize_SpecifiedLinterPath_Text();
    public static string get_FailedToInitialize_CanTLoadLinterBy_Text2();
    public static string get_LintFailed__Text();
}
[DaemonStageAttribute("0")]
public class JetBrains.ReSharper.Features.Web.Linters.Stages.LinterAnalysisLongStage : JavaScriptDaemonStageBase {
    private ILinterManager myManager;
    public LinterAnalysisLongStage(ILinterManager manager);
    protected virtual IDaemonStageProcess CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind, IJavaScriptFile file);
    protected virtual bool IsSupported(IPsiSourceFile sourceFile);
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.Features.Web.Linters.Stages.LinterAnalysisLongStageProcess : JavaScriptDaemonStageProcessBase {
    private ILinterManager myLinterManager;
    public LinterAnalysisLongStageProcess(IDaemonProcess process, IContextBoundSettingsStore settingsStore, IJavaScriptFile file, ILinterManager manager);
    public virtual void Execute(Action`1<DaemonStageResult> committer);
    private void CommitProblems(Action`1<DaemonStageResult> committer, IEnumerable`1<CodeProblem> codeProblems);
    private IHighlighting HighlightingFromProblem(CodeProblem problem);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Features.Web.Linters.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
