[ReferenceProviderFactoryAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.JavaScript.CustomReferences.JavaScriptResourceItemReferenceFactory : StatelessReferenceProviderFactoryBase {
    private static string GetString;
    private static string Resources;
    private static string WinJs;
    public JavaScriptResourceItemReferenceFactory(Lifetime lifetime);
    public virtual bool IsApplicableToFile(IPsiSourceFile sourceFile, IFile file);
    protected virtual ReferenceCollection GetReferences(ITreeNode element, ReferenceCollection oldReferences);
    protected virtual bool HasReference(ITreeNode element, IReferenceNameContainer names);
}
[ReferenceProviderFactoryAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.JavaScript.CustomReferences.JsonAttributesResourceItemReferenceFactory : StatelessReferenceProviderFactoryBase {
    public JsonAttributesResourceItemReferenceFactory(Lifetime lifetime);
    public virtual bool IsApplicableToFile(IPsiSourceFile sourceFile, IFile file);
    public virtual bool CheckWords(IWordIndex wordIndex, IPsiSourceFile sourceFile);
    protected virtual ReferenceCollection GetReferences(ITreeNode element, ReferenceCollection oldReferences);
    protected virtual bool HasReference(ITreeNode element, IReferenceNameContainer names);
}
public class JetBrains.ReSharper.I18n.Services.JavaScript.CustomReferences.JsonResourceItemReference : CheckedReferenceBase`1<IJavaScriptLiteralExpression> {
    public bool HasMultipleNames { get; }
    public JsonResourceItemReference(IJavaScriptLiteralExpression expression);
    public virtual string GetName();
    public sealed virtual string GetDefaultName();
    public virtual bool get_HasMultipleNames();
    public virtual HybridCollection`1<string> GetAllNames();
    public sealed virtual ICollection`1<IPsiSourceFile> FindResourceFiles();
    public virtual TreeTextRange GetTreeTextRange();
    public sealed virtual ISymbolTable GetCompletionSymbolTable();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual IReference BindTo(IDeclaredElement element);
    public virtual ISymbolFilter[] GetSymbolFilters();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    private static ResolveResultWithInfo ResolveResourceItem(IProject project, string fileName, string name);
    private ResolveResultWithInfo ResolveResourceItem(IProject project, string name);
    public virtual IReference BindTo(IDeclaredElement element, ISubstitution substitution);
    public virtual IAccessContext GetAccessContext();
}
[ReferenceProviderFactoryAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.JavaScript.CustomReferences.JsonResourceItemReferenceFactory : StatelessReferenceProviderFactoryBase {
    public JsonResourceItemReferenceFactory(Lifetime lifetime);
    public virtual bool IsApplicableToFile(IPsiSourceFile sourceFile, IFile file);
    public virtual bool CheckWords(IWordIndex wordIndex, IPsiSourceFile sourceFile);
    protected virtual ReferenceCollection GetReferences(ITreeNode element, ReferenceCollection oldReferences);
    protected virtual bool HasReference(ITreeNode element, IReferenceNameContainer names);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.JavaScript.Html.DataWinResJsonNodeProvider : object {
    private static string DataWinResAttribute;
    [CompilerGeneratedAttribute]
private String[] <Words>k__BackingField;
    public PsiLanguageType SupportedOriginalLanguage { get; }
    public string ProvidedLanguageID { get; }
    public string Summary { get; }
    public string Description { get; }
    public string Guid { get; }
    public String[] Words { get; }
    public String[] Attributes { get; }
    public sealed virtual bool Check(ITreeNode node, ILiteralsInjectionDataProvider injectedContext, Object& data);
    public sealed virtual string GetPrefix(ITreeNode node, object data);
    public sealed virtual string GetSuffix(ITreeNode node, object data);
    public sealed virtual PsiLanguageType get_SupportedOriginalLanguage();
    public sealed virtual string get_ProvidedLanguageID();
    public sealed virtual string get_Summary();
    public sealed virtual string get_Description();
    public sealed virtual string get_Guid();
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Words();
    public sealed virtual String[] get_Attributes();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.JavaScript.Html.HtmlAttributeValueToResJsonChecker : object {
    public sealed virtual bool CanUseResource(IPsiSourceFile resourceFile, IAccessContext context);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.JavaScript.Html.Refactoring.HtmlAttributeValueToResJsonExtractor : object {
    private HtmlAttributeValueToResJsonChecker myHtmlAttributeValueToResJsonChecker;
    public byte Priority { get; }
    public HtmlAttributeValueToResJsonExtractor(HtmlAttributeValueToResJsonChecker htmlAttributeValueToResJsonChecker);
    public sealed virtual byte get_Priority();
    public sealed virtual bool IsAvailable(IDataContext context);
    public sealed virtual ISourceElement GetSourceElement(IDataContext dataContext);
    public sealed virtual ISourceElement GetSourceElement(ITreeNode node);
    public sealed virtual string GetDefaultResourceName(ISourceElement sourceElement);
    public sealed virtual bool CanUseResource(IPsiSourceFile resourceFile, IAccessContext context);
    public sealed virtual bool CanExtractTo(ISourceElement sourceElement, IPsiSourceFile resourceFile);
    public sealed virtual bool Extract(ISourceElement sourceElement, IResourceItem resourceItem, IRefactoringDriver driver);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.I18n.Services.JavaScript.Html.Refactoring.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.I18n.Services.JavaScript.Html.ZoneMarker : object {
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.JavaScript.JavaScriptExpressionToResJsonChecker : object {
    public sealed virtual bool CanUseResource(IPsiSourceFile resourceFile, IAccessContext context);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.JavaScript.Refactoring.JavaScriptExpressionResourceInliner : ResourceToExpressionInlinerBase`1<IJavaScriptExpression> {
    public byte Priority { get; }
    protected PsiLanguageType PsiLanguageType { get; }
    public virtual byte get_Priority();
    protected virtual PsiLanguageType get_PsiLanguageType();
    protected virtual IJavaScriptExpression CreateExpression(ConstantValue value, IPsiModule module);
    protected virtual ITreeNode GetElementToInline(IReference reference);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.JavaScript.Refactoring.JavaScriptExpressionToResJsonExtractor : object {
    private JavaScriptExpressionToResJsonChecker myJavaScriptExpressionToResJsonChecker;
    public byte Priority { get; }
    public JavaScriptExpressionToResJsonExtractor(JavaScriptExpressionToResJsonChecker javaScriptExpressionToResJsonChecker);
    public sealed virtual byte get_Priority();
    public sealed virtual bool IsAvailable(IDataContext context);
    public sealed virtual ISourceElement GetSourceElement(IDataContext dataContext);
    public sealed virtual ISourceElement GetSourceElement(ITreeNode node);
    public sealed virtual string GetDefaultResourceName(ISourceElement sourceElement);
    public sealed virtual bool CanUseResource(IPsiSourceFile resourceFile, IAccessContext context);
    public sealed virtual bool CanExtractTo(ISourceElement sourceElement, IPsiSourceFile resourceFile);
    public sealed virtual bool Extract(ISourceElement sourceElement, IResourceItem resourceItem, IRefactoringDriver driver);
    private static IJavaScriptLiteralExpression GetSelectedExpression(IDataContext context);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.I18n.Services.JavaScript.Refactoring.ZoneMarker : object {
}
public static class JetBrains.ReSharper.I18n.Services.JavaScript.ResJsonReader : object {
    public static bool IsResourceItem(IObjectPropertyInitializer initializer);
    public static bool IsResourceItemOrComment(IObjectPropertyInitializer declaration, string name);
    public static bool IsResourceItem(string name, string declaredName);
    public static bool IsResourceItemComment(string name, string declaredName);
    public static IEnumerable`1<IObjectPropertyInitializer> GetItemsByName(IJavaScriptFile file, string name, IObjectLiteral& objectLiteral);
}
[PolymorphicMarshallerAttribute]
internal class JetBrains.ReSharper.I18n.Services.JavaScript.ResJsonResourceItem : ResourceItemBase {
    [UsedImplicitlyAttribute]
public static ReadDelegate`1<object> ReadDelegate;
    [UsedImplicitlyAttribute]
public static WriteDelegate`1<object> WriteDelegate;
    public IResourceItemDeclaredElement DeclaredElement { get; }
    public ResJsonResourceItem(IPsiSourceFile psiSourceFile, string name, int offset, int formatArgs);
    private static ResJsonResourceItem();
    public virtual IResourceItemDeclaredElement get_DeclaredElement();
    public virtual DocumentRange GetNameDocumentRange();
    public static ResJsonResourceItem Read(UnsafeReader reader);
    public static void Write(UnsafeWriter writer, ResJsonResourceItem item);
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.ResJsonProjectFileType", "16")]
public class JetBrains.ReSharper.I18n.Services.JavaScript.ResJsonResourceModificationService : object {
    public sealed virtual void AddResourceItem(IPsiSourceFile resourceFile, string name, string value, string comment, IType type, bool inLexicalOrder);
    public sealed virtual void ChangeResourceItem(IResourceItem resourceItem, string newValue, string newComment);
    public sealed virtual void ChangeResourceItemName(IPsiSourceFile resourceFile, string oldName, string newName);
    public sealed virtual void DeleteResourceItem(IResourceItem resourceItem);
    public sealed virtual void DeleteResourceItem(IPsiSourceFile resourceFile, string name);
    public sealed virtual void MoveResourceItem(IResourceItem resourceItem, IPsiSourceFile targetResourceFile, string newName);
    public sealed virtual void CopyResourceItem(IResourceItem resourceItem, IPsiSourceFile targetResourceFile, string newName);
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.ResJsonProjectFileType", "16")]
public class JetBrains.ReSharper.I18n.Services.JavaScript.ResJsonResourceProvider : object {
    public sealed virtual ResourceItemValue GetResourceItemValue(IPsiSourceFile resourceFile, string name);
    public sealed virtual string GetResourceItemComment(IPsiSourceFile resourceFile, string name);
    public sealed virtual void GetResourceItemValueAndComment(IPsiSourceFile resourceFile, string name, ResourceItemValue& value, String& comment);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.I18n.Services.JavaScript.ResJsonResourceProvider/<EnumerateResourceItems>d__3")]
public sealed virtual IEnumerable`1<IResourceItem> EnumerateResourceItems(IPsiSourceFile resourceFile);
    [NotNullAttribute]
private static IResourceItem CreateResourceItem(IPsiSourceFile sourceFile, IObjectPropertyInitializer initializer);
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.ResJsonProjectFileType", "16")]
public class JetBrains.ReSharper.I18n.Services.JavaScript.ResJsonResourceService : WinRTResourceServiceBase {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.I18n.Services.JavaScript.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
