[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.Xaml.Refactoring.PropertyAttributeValueResourceInliner : object {
    public byte Priority { get; }
    public sealed virtual byte get_Priority();
    public sealed virtual bool CanInline(IReference reference, IResourceItemDeclaredElement element);
    public sealed virtual bool Inline(IReference reference, IResourceItemDeclaredElement element);
    public sealed virtual bool CanInline(IResourceItemDeclaredElement element);
    public sealed virtual bool CanInline(ITreeNode sourceElement, IResourceItemDeclaredElement element);
    public sealed virtual bool Inline(ITreeNode sourceElement, IResourceItemDeclaredElement element);
    private static bool IsValidValue(string valueText);
}
internal abstract class JetBrains.ReSharper.I18n.Services.Xaml.Refactoring.XamlResourceExtractorBase`1 : object {
    private GeneratedFileFinder myGeneratedFileFinder;
    private IResourceChecker myResourceChecker;
    public byte Priority { get; }
    protected XamlResourceExtractorBase`1(GeneratedFileFinder generatedFileFinder, IResourceChecker resourceChecker);
    public abstract virtual byte get_Priority();
    public virtual bool IsAvailable(IDataContext context);
    public virtual bool CanUseResource(IPsiSourceFile resourceFile, IAccessContext context);
    public virtual bool CanExtractTo(ISourceElement sourceElement, IPsiSourceFile resourceFile);
    public virtual ISourceElement GetSourceElement(IDataContext dataContext);
    public virtual ISourceElement GetSourceElement(ITreeNode node);
    public virtual string GetDefaultResourceName(ISourceElement sourceElement);
    protected abstract virtual T CreateSourceElement(IType type, IPropertyAttributeValue value);
    public abstract virtual bool Extract(ISourceElement sourceElement, IResourceItem resourceItem, IRefactoringDriver driver);
    private static bool IsTagName(IXamlAttribute arg);
}
internal abstract class JetBrains.ReSharper.I18n.Services.Xaml.Refactoring.XamlSourceElement : object {
    private ITreeNodePointer`1<IPropertyAttributeValue> myAttributeValue;
    [CompilerGeneratedAttribute]
private IType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public IType Type { get; public set; }
    [NotNullAttribute]
public IPropertyAttributeValue AttributeValue { get; }
    public IPsiSourceFile SourceFile { get; }
    public PsiLanguageType PsiLanguageType { get; }
    public DocumentRange DocumentRange { get; }
    public object Value { get; public set; }
    protected XamlSourceElement(IPropertyAttributeValue attributeValue, IType type);
    [CompilerGeneratedAttribute]
public sealed virtual IType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(IType value);
    public IPropertyAttributeValue get_AttributeValue();
    public sealed virtual IPsiSourceFile get_SourceFile();
    public sealed virtual PsiLanguageType get_PsiLanguageType();
    public sealed virtual DocumentRange get_DocumentRange();
    [CompilerGeneratedAttribute]
public sealed virtual object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    public sealed virtual bool IsValid();
    public bool Equals(XamlSourceElement other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.Xaml.Refactoring.XamlStaticResourceBindingExtractor : XamlResourceExtractorBase`1<XamlStaticSourceElement> {
    private ResourceAccessorFinder myResourceAccessorFinder;
    public byte Priority { get; }
    public XamlStaticResourceBindingExtractor(GeneratedFileFinder generatedFileFinder, ResourceAccessorFinder resourceAccessorFinder, XamlResourceChecker xamlResourceChecker);
    public virtual byte get_Priority();
    public virtual ISourceElement GetSourceElement(ITreeNode node);
    protected virtual XamlStaticSourceElement CreateSourceElement(IType type, IPropertyAttributeValue value);
    public virtual bool Extract(ISourceElement sourceElement, IResourceItem resourceItem, IRefactoringDriver driver);
    private IProperty FindResourceWrapper(ITypeElement typeElement);
    private static IXamlResource FindLocalizedResource(IEnumerable`1<IXamlResource> resources, IProperty wrapper);
    private static IXamlResource CreateLocalizedResource(IXamlObjectElement objectElement, IProperty wrapper);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.Xaml.Refactoring.XamlWindowsResourceExtractor : XamlResourceExtractorBase`1<XamlSourceElement> {
    private static string DefaultResourcesFileName;
    public byte Priority { get; }
    public XamlWindowsResourceExtractor(GeneratedFileFinder generatedFileFinder, XamlWindowsResourceChecker xamlWindowsResourceChecker);
    public virtual byte get_Priority();
    public virtual bool CanExtractTo(ISourceElement sourceElement, IPsiSourceFile resourceFile);
    public virtual ISourceElement GetSourceElement(ITreeNode node);
    protected virtual XamlSourceElement CreateSourceElement(IType type, IPropertyAttributeValue value);
    public virtual bool Extract(ISourceElement sourceElement, IResourceItem resourceItem, IRefactoringDriver driver);
    private static bool Modify(IReadOnlyList`1<IKeywordAttribute> uids, IPropertyAttribute attribute, IKeywordAttribute newAttribute);
    private static IKeywordAttribute CreateXUidAttribute(IPropertyAttribute attribute, string newXUid);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.I18n.Services.Xaml.Refactoring.XStaticResourceExtractor : XamlResourceExtractorBase`1<XStaticSourceElement> {
    [NotNullAttribute]
private ILogger myLogger;
    private ResourceAccessorFinder myResourceAccessorFinder;
    public byte Priority { get; }
    public XStaticResourceExtractor(ILogger logger, GeneratedFileFinder generatedFileFinder, ResourceAccessorFinder resourceAccessorFinder, XamlResourceChecker xamlResourceChecker);
    public virtual byte get_Priority();
    public virtual ISourceElement GetSourceElement(ITreeNode node);
    protected virtual XStaticSourceElement CreateSourceElement(IType type, IPropertyAttributeValue value);
    public virtual bool Extract(ISourceElement sourceElement, IResourceItem resourceItem, IRefactoringDriver driver);
    private string GetNamespace(IProperty accessor, ISourceElement sourceElement, string namespace);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.I18n.Services.Xaml.Refactoring.ZoneMarker : object {
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.I18n.Services.Xaml.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string CannotFindResourceAccessor_Text { get; }
    public static string BindingDoesNotWorkWithInternalResource_Text { get; }
    public static string CannotFindResourceWrapperWithPublic_Text { get; }
    public static string InvalidResourceName_Text { get; }
    public static string ResourceWrapperShouldBePublic_Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_CannotFindResourceAccessor_Text();
    public static string get_BindingDoesNotWorkWithInternalResource_Text();
    public static string get_CannotFindResourceWrapperWithPublic_Text();
    public static string get_InvalidResourceName_Text();
    public static string get_ResourceWrapperShouldBePublic_Text();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Xaml.XamlResourceChecker : object {
    public virtual bool CanUseResource(IPsiSourceFile resourceFile, IAccessContext context);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.I18n.Services.Xaml.XamlWindowsResourceChecker : object {
    public sealed virtual bool CanUseResource(IPsiSourceFile resourceFile, IAccessContext context);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.I18n.Services.Xaml.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
