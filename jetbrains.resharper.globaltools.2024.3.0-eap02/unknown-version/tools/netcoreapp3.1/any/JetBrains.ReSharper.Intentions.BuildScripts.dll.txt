[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.BuildScripts.BuildScriptQuickFixRegistrarComponent : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
public class JetBrains.ReSharper.Intentions.BuildScripts.ContextActions.BuildScriptContextActionDataProvider : CachedContextActionDataProviderBase`1<IBuildFile> {
    public BuildScriptContextActionDataProvider(ISolution solution, ITextControl textControl, IBuildFile file);
}
[ContextActionGroupAttribute]
public static class JetBrains.ReSharper.Intentions.BuildScripts.ContextActions.BuildScriptContextActions : object {
    public static string GroupID;
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.BuildScripts.ContextActions.CreatePropertyForTargetDependencyContextAction : ContextActionBase {
    private IBuildScriptContextActionDataProvider myDataProvider;
    private static string PROPERTY_NAME;
    private static string INDENT;
    public string Text { get; }
    public CreatePropertyForTargetDependencyContextAction(IBuildScriptContextActionDataProvider dataProvider);
    public virtual bool IsAvailable(IUserDataHolder cache);
    [CanBeNullAttribute]
private static IBuildScriptAttribute GetDependsAttribute(IBuildScriptContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual void Execute(ISolution solution, ITextControl textControl);
    private static void ExecuteWithNewPropertyGroup(ISolution solution, IXmlTagContainer file, StringBuilder templateBuilder, ITextControl textControl, DocumentRange replacementRange);
    private static void ExecuteWithExistingPropertyGroup(ISolution solution, ITreeNode propertyGroupTag, StringBuilder templateBuilder, ITextControl textControl, DocumentRange replacementRange);
    [NotNullAttribute]
private static string Times(int t, string indent);
    [NotNullAttribute]
private static DocumentRange[] GatherTemplateRanges(int offset, IDocument document);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.BuildScripts.ContextActions.GenerateXSDContextAction : ContextActionBase {
    [NotNullAttribute]
private IBuildScriptContextActionDataProvider myDataProvider;
    public string Text { get; }
    public GenerateXSDContextAction(IBuildScriptContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static void FillInTasks(XmlNode element, XmlDocument document, Dictionary`2<string, MSBuildTask> tasks);
    private static void FillInProperties(XmlNode element, XmlDocument document, Dictionary`2<string, List`1<MSBuildPropertyDeclaration>> customProperties);
    private static void FillInItemGroups(XmlNode element, XmlDocument document, Dictionary`2<string, List`1<IMSBuildItemGroupElement>> customItemGroups);
    private static void CollectInformation(IXmlTagContainer xmlTag, IDictionary`2<string, List`1<MSBuildPropertyDeclaration>> properties, Dictionary`2<string, List`1<IMSBuildItemGroupElement>> groups);
}
public interface JetBrains.ReSharper.Intentions.BuildScripts.ContextActions.IBuildScriptContextActionDataProvider {
}
[ContextActionDataBuilderAttribute("JetBrains.ReSharper.Intentions.BuildScripts.ContextActions.IBuildScriptContextActionDataProvider", "16")]
public class JetBrains.ReSharper.Intentions.BuildScripts.ContextActions.NAntBuildScriptContextActionDataBuilder : ContextActionDataBuilderBase`2<BuildScriptLanguage, IBuildFile> {
    public virtual IContextActionDataProvider BuildFromPsi(ISolution solution, ITextControl textControl, IBuildFile psiFile);
}
public class JetBrains.ReSharper.Intentions.BuildScripts.QuickFixes.AddAttributeQuickFix : object {
    private AddAttributeAction myAction;
    private XmlIdentifier myTreeNode;
    public AddAttributeQuickFix(AttributeRequiredWarning warning);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public class JetBrains.ReSharper.Intentions.BuildScripts.QuickFixes.AddOutputTagQuickFix : QuickFixBase {
    private string myName;
    private IBuildScriptTag myParent;
    private OutputAttributeType myType;
    public string Text { get; }
    public AddOutputTagQuickFix(MSBuildOutputTagRequiredHighlighting highlighting);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual void Execute(ISolution solution, ITextControl textControl);
    private void SplitTaskTagAndInsertOutputTag(BuildScriptTagBase parent, IXmlToken endToken, ISolution solution, ITextControl textControl);
    private void InsertOutputTagSimple(BuildScriptTagBase parent, IXmlToken endToken, ISolution solution, ITextControl textControl);
}
public class JetBrains.ReSharper.Intentions.BuildScripts.QuickFixes.IgnorePropertyQuickFix : object {
    private IgnorePropertyAction myIgnorePropertyAction;
    public IgnorePropertyQuickFix(ScriptHighlightingBase highlighting);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
internal class JetBrains.ReSharper.Intentions.BuildScripts.QuickFixes.LocateAssemblyAction : object {
    private NAntLoadTasksTag myLoadTasksTag;
    public string Text { get; }
    public LocateAssemblyAction(NAntLoadTasksTag loadTasksTag);
    public sealed virtual string get_Text();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
    private String[] GetRelativePaths(String[] fileNames);
    private static string GetRelativePath(string assemblyPath, VirtualFileSystemPath buildFilePath);
    private void AppendFileAttribute(string fileName, ITextControl textControl);
    private void AppendFileSet(IEnumerable`1<string> fileNames, ITextControl textControl);
}
public class JetBrains.ReSharper.Intentions.BuildScripts.QuickFixes.LocateAssemblyQuickFix : object {
    private LocateAssemblyAction myAction;
    public LocateAssemblyQuickFix(TasksNotLoadedHighlighting highlighting);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public class JetBrains.ReSharper.Intentions.BuildScripts.QuickFixes.RenameMSBuildItemGroupReferencesQuickFix : RenameReferencesQuickFixBase {
    public RenameMSBuildItemGroupReferencesQuickFix(UnresolvedMSBuildItemGroupHighlighting highlighting);
}
public class JetBrains.ReSharper.Intentions.BuildScripts.QuickFixes.RenameMSBuildPropertyReferencesQuickFix : RenameReferencesQuickFixBase {
    public RenameMSBuildPropertyReferencesQuickFix(UnresolvedMSBuildPropertyHighlighting highlighting);
}
public class JetBrains.ReSharper.Intentions.BuildScripts.QuickFixes.RenameMSBuildTargetReferencesQuickFix : RenameReferencesQuickFixBase {
    public RenameMSBuildTargetReferencesQuickFix(UnresolvedMSBuildTargetHighlighting highlighting);
}
public class JetBrains.ReSharper.Intentions.BuildScripts.QuickFixes.RenameNAntPropertyReferencesQuickFix : RenameReferencesQuickFixBase {
    public RenameNAntPropertyReferencesQuickFix(UnresolvedNAntPropertyHighlighting highlighting);
}
public class JetBrains.ReSharper.Intentions.BuildScripts.QuickFixes.RenameNAntTargetReferencesQuickFix : RenameReferencesQuickFixBase {
    public RenameNAntTargetReferencesQuickFix(UnresolvedNAntTargetHighlighting highlighting);
}
public class JetBrains.ReSharper.Intentions.BuildScripts.QuickFixes.RenameReferencesQuickFixBase : QuickFixBase {
    [NotNullAttribute]
private string myReferenceName;
    [NotNullAttribute]
private BuildScriptDeclaredElementType myType;
    [NotNullAttribute]
private IReference myReference;
    public string Text { get; }
    public RenameReferencesQuickFixBase(string referenceName, BuildScriptDeclaredElementType referenceType, IReference reference);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void CollectReferencesAndCandidates(ITreeNode node, List`1<ScriptReferenceBase> references, JetHashSet`1<IDeclaredElement> candidates);
}
public class JetBrains.ReSharper.Intentions.BuildScripts.QuickFixes.UnresolvedMSBuildItemGroupQuickFix : object {
    private IntroduceItemGroupAction myIntroduceItemGroupAction;
    public UnresolvedMSBuildItemGroupQuickFix(UnresolvedMSBuildItemGroupHighlighting highlighting);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public class JetBrains.ReSharper.Intentions.BuildScripts.QuickFixes.UnresolvedMSBuildPropertyQuickFix : object {
    private IntroducePropertyAction myIntroducePropertyAction;
    private IgnorePropertyAction myIgnorePropertyAction;
    public UnresolvedMSBuildPropertyQuickFix(ScriptHighlightingBase highlighting);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.BuildScripts.QuickFixes.UnresolvedMSBuildPropertyQuickFix/<CreateBulbItems>d__4")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public class JetBrains.ReSharper.Intentions.BuildScripts.QuickFixes.UnresolvedMSBuildTargetQuickFix : object {
    private IntroduceTargetAction myAddTargetAction;
    public UnresolvedMSBuildTargetQuickFix(UnresolvedMSBuildTargetHighlighting highlighting);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public class JetBrains.ReSharper.Intentions.BuildScripts.QuickFixes.UnresolvedMSBuildTaskQuickFix : object {
    private AddUsingTaskAction myAddTaskAction;
    public UnresolvedMSBuildTaskQuickFix(UnresolvedMSBuildTaskHighlighting highlighting);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public class JetBrains.ReSharper.Intentions.BuildScripts.QuickFixes.UnresolvedNAntPropertyQuickFix : object {
    private IntroducePropertyAction myIntroducePropertyAction;
    private UnresolvedNAntPropertyHighlighting myHighlighting;
    public UnresolvedNAntPropertyQuickFix(UnresolvedNAntPropertyHighlighting highlighting);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public class JetBrains.ReSharper.Intentions.BuildScripts.QuickFixes.UnresolvedNAntTargetQuickFix : object {
    private AddTargetDefinitionAction myAddTargetAction;
    public UnresolvedNAntTargetQuickFix(UnresolvedNAntTargetHighlighting highlighting);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    private static NAntTargetTag FindLastTarget(NAntProjectTag node);
}
public class JetBrains.ReSharper.Intentions.BuildScripts.QuickFixes.UnresolvedNAntTaskQuickFix : object {
    private ScanTasksAction myScanAction;
    private UseDefaultValidationAction myDefaultAction;
    private TaskHighlightingBase myHighlighting;
    public UnresolvedNAntTaskQuickFix(UnresolvedNAntTaskHighlighting highlighting);
    public UnresolvedNAntTaskQuickFix(AttributeRequiredWarning highlighting);
    public UnresolvedNAntTaskQuickFix(UnknownTaskElementWarning highlighting);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.BuildScripts.QuickFixes.UnresolvedNAntTaskQuickFix/<CreateBulbItems>d__7")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.BuildScripts.QuickFixes.VulnerablePackageQuickFix : object {
    private VulnerablePackageWarning myHighlighting;
    public VulnerablePackageQuickFix(VulnerablePackageWarning highlighting);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.BuildScripts.QuickFixes.VulnerablePackageQuickFix/<CreateBulbItems>d__3")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Intentions.BuildScripts.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string CreatePropertyForTargetDependencies_Text { get; }
    public static string GenerateXSDForCustomTasksProperties_Text { get; }
    public static string AddAttribute__Text { get; }
    public static string AddOutputTagForOutputAttribute__Text { get; }
    public static string Property_IsExternal_Text { get; }
    public static string LocateAssemblies_Text { get; }
    public static string ChangeAll__Text { get; }
    public static string DefineItemGroup__Text { get; }
    public static string DefineProperty__Text { get; }
    public static string AddUsingTaskDirectiveForTask__Text { get; }
    public static string CreateTarget__Text { get; }
    public static string SpecifyNAntDirectory_Text { get; }
    public static string SelectDirectoryWhereNAntExeIsLocated_Caption { get; }
    public static string UseBuiltInNAntSpecification_Text { get; }
    public static string GeneratePropertyForTargetDependenciesContextAction_Description { get; }
    public static string GeneratePropertyForTargetDependenciesContextAction_Name { get; }
    public static string GenerateXSDContextAction_Description { get; }
    public static string GenerateXSDContextAction_Name { get; }
    public static string ShowAdvisoryFor__OnCheckmarx_Text { get; }
    public static string SeeMore_Text { get; }
    public static string Update_ToTheLatestVersion_Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_CreatePropertyForTargetDependencies_Text();
    public static string get_GenerateXSDForCustomTasksProperties_Text();
    public static string get_AddAttribute__Text();
    public static string get_AddOutputTagForOutputAttribute__Text();
    public static string get_Property_IsExternal_Text();
    public static string get_LocateAssemblies_Text();
    public static string get_ChangeAll__Text();
    public static string get_DefineItemGroup__Text();
    public static string get_DefineProperty__Text();
    public static string get_AddUsingTaskDirectiveForTask__Text();
    public static string get_CreateTarget__Text();
    public static string get_SpecifyNAntDirectory_Text();
    public static string get_SelectDirectoryWhereNAntExeIsLocated_Caption();
    public static string get_UseBuiltInNAntSpecification_Text();
    public static string get_GeneratePropertyForTargetDependenciesContextAction_Description();
    public static string get_GeneratePropertyForTargetDependenciesContextAction_Name();
    public static string get_GenerateXSDContextAction_Description();
    public static string get_GenerateXSDContextAction_Name();
    public static string get_ShowAdvisoryFor__OnCheckmarx_Text();
    public static string get_SeeMore_Text();
    public static string get_Update_ToTheLatestVersion_Text();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.BuildScripts.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
